{"home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.config._merge_a_into_b": [[104, 135], ["a.iteritems", "type", "type", "b.has_key", "KeyError", "type", "isinstance", "type", "numpy.array", "ValueError", "config._merge_a_into_b", "print", "type", "type"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.miscc.config._merge_a_into_b"], ["def", "_merge_a_into_b", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"Merge config dictionary a into config dictionary b, clobbering the\n    options in b whenever they are also specified in a.\n    \"\"\"", "\n", "if", "type", "(", "a", ")", "is", "not", "edict", ":", "\n", "        ", "return", "\n", "\n", "", "for", "k", ",", "v", "in", "a", ".", "iteritems", "(", ")", ":", "\n", "# a must specify keys that are in b", "\n", "        ", "if", "not", "b", ".", "has_key", "(", "k", ")", ":", "\n", "            ", "raise", "KeyError", "(", "'{} is not a valid config key'", ".", "format", "(", "k", ")", ")", "\n", "\n", "# the types must match, too", "\n", "", "old_type", "=", "type", "(", "b", "[", "k", "]", ")", "\n", "if", "old_type", "is", "not", "type", "(", "v", ")", ":", "\n", "            ", "if", "isinstance", "(", "b", "[", "k", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "v", "=", "np", ".", "array", "(", "v", ",", "dtype", "=", "b", "[", "k", "]", ".", "dtype", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "(", "'Type mismatch ({} vs. {}) '", "\n", "'for config key: {}'", ")", ".", "format", "(", "type", "(", "b", "[", "k", "]", ")", ",", "\n", "type", "(", "v", ")", ",", "k", ")", ")", "\n", "\n", "# recursively merge dicts", "\n", "", "", "if", "type", "(", "v", ")", "is", "edict", ":", "\n", "            ", "try", ":", "\n", "                ", "_merge_a_into_b", "(", "a", "[", "k", "]", ",", "b", "[", "k", "]", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "'Error under config key: {}'", ".", "format", "(", "k", ")", ")", "\n", "raise", "\n", "", "", "else", ":", "\n", "            ", "b", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.config.cfg_from_file": [[137, 144], ["config._merge_a_into_b", "open", "easydict.EasyDict", "yaml.load"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.miscc.config._merge_a_into_b"], ["", "", "", "def", "cfg_from_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Load a config file and merge it into the default options.\"\"\"", "\n", "import", "yaml", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "yaml_cfg", "=", "edict", "(", "yaml", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "_merge_a_into_b", "(", "yaml_cfg", ",", "__C", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.main.parse_args": [[24, 34], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.main.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a GAN network'", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "dest", "=", "'cfg_file'", ",", "\n", "help", "=", "'optional config file'", ",", "\n", "default", "=", "'cfg/birds_proGAN.yml'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "dest", "=", "'gpu_id'", ",", "type", "=", "str", ",", "default", "=", "'-1'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "dest", "=", "'data_dir'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--manualSeed'", ",", "type", "=", "int", ",", "help", "=", "'manual seed'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganTI.NetG.__init__": [[143, 146], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "decoder", ")", ":", "\n", "        ", "super", "(", "NetG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "decoder", "=", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganTI.NetG.forward": [[147, 150], ["mmd_ganTI.NetG.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input1", ")", ":", "\n", "        ", "output", "=", "self", ".", "decoder", "(", "input1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganTI.NetD.__init__": [[157, 161], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", "NetD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "decoder", "=", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganTI.NetD.forward": [[162, 169], ["mmd_ganTI.NetD.encoder", "mmd_ganTI.NetD.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input1", ")", ":", "\n", "        ", "f_enc_X", "=", "self", ".", "encoder", "(", "input1", ")", "\n", "f_dec_X", "=", "self", ".", "decoder", "(", "f_enc_X", ")", "\n", "\n", "#f_enc_X = f_enc_X.view(input.size(0), -1)", "\n", "# f_dec_X = f_dec_X.view(input.size(0), -1)", "\n", "return", "f_enc_X", ",", "f_dec_X", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganTI.ONE_SIDED.__init__": [[172, 177], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ONE_SIDED", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "main", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "main", "=", "main", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganTI.ONE_SIDED.forward": [[178, 182], ["mmd_ganTI.ONE_SIDED.main", "mmd_ganTI.ONE_SIDED.mean"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_lsun.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "main", "(", "-", "input", ")", "\n", "output", "=", "-", "output", ".", "mean", "(", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganTI.norm_ip": [[38, 42], ["img.add_().div_.clamp_", "img.add_().div_.add_().div_", "img.add_().div_.add_"], "function", ["None"], ["def", "norm_ip", "(", "img", ",", "min1", ",", "max1", ")", ":", "\n", "    ", "img", "=", "img", ".", "clamp_", "(", "min", "=", "min1", ",", "max", "=", "max1", ")", "\n", "img", "=", "img", ".", "add_", "(", "-", "min1", ")", ".", "div_", "(", "max1", "-", "min1", "+", "1e-5", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganTI.norm_range": [[43, 49], ["mmd_ganTI.norm_ip", "mmd_ganTI.norm_ip", "float", "float", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.norm_ip", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.norm_ip"], ["", "def", "norm_range", "(", "t", ",", "range1", "=", "None", ")", ":", "\n", "    ", "if", "range1", "is", "not", "None", ":", "\n", "        ", "img1", "=", "norm_ip", "(", "t", ",", "range1", "[", "0", "]", ",", "range1", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "img1", "=", "norm_ip", "(", "t", ",", "float", "(", "torch", ".", "min", "(", "t", ")", ")", ",", "float", "(", "torch", ".", "max", "(", "t", ")", ")", ")", "\n", "", "return", "img1", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganTI.mkdir_p": [[50, 58], ["os.makedirs", "os.path.isdir"], "function", ["None"], ["", "def", "mkdir_p", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "        ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganTI.adjust_padding": [[184, 195], ["torch.LongTensor.numpy", "torch.LongTensor.numpy", "max", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "temp.append"], "function", ["None"], ["", "", "def", "adjust_padding", "(", "cap", ",", "len1", ")", ":", "\n", "    ", "cap", "=", "cap", ".", "numpy", "(", ")", "\n", "len1", "=", "len1", ".", "numpy", "(", ")", "\n", "max_len", "=", "max", "(", "len1", ")", "\n", "temp", "=", "[", "]", "\n", "for", "i", "in", "cap", ":", "\n", "        ", "j", "=", "i", "[", "0", ":", "max_len", "]", "\n", "temp", ".", "append", "(", "j", ")", "\n", "", "cap", "=", "torch", ".", "LongTensor", "(", "temp", ")", "\n", "len1", "=", "torch", ".", "LongTensor", "(", "len1", ")", "\n", "return", "cap", ",", "len1", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganTI.optimizerToDevice": [[196, 205], ["optimizer.state.values", "state.items", "isinstance", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "v.cuda", "v.to"], "function", ["None"], ["", "def", "optimizerToDevice", "(", "optimizer", ")", ":", "\n", "    ", "for", "state", "in", "optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                        ", "state", "[", "k", "]", "=", "v", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                        ", "state", "[", "k", "]", "=", "v", ".", "to", "(", "device", ")", "\n", "", "", "", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganTI.define_optimizers": [[206, 242], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "netD.parameters", "netG.parameters", "os.path.join", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "optimizerToDevice.load_state_dict", "mmd_ganTI.optimizerToDevice", "GEN_PATH.rfind", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "optimizerToDevice.load_state_dict", "mmd_ganTI.optimizerToDevice", "GEN_PATH.rfind", "int"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.optimizerToDevice", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.optimizerToDevice"], ["", "def", "define_optimizers", "(", "netG", ",", "netD", ",", "path", ")", ":", "\n", "    ", "optimizerD", "=", "torch", ".", "optim", ".", "Adam", "(", "netD", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "2e-5", ",", "\n", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "\n", "# G_opt_paras = []", "\n", "# for p in netG.parameters():", "\n", "#     if p.requires_grad:", "\n", "#         G_opt_paras.append(p)", "\n", "optimizerG", "=", "torch", ".", "optim", ".", "Adam", "(", "netG", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "2e-5", ",", "\n", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "\n", "#optimizerG = torch.optim.RMSprop(netG.parameters(), lr=args.lr)", "\n", "#optimizerD = torch.optim.RMSprop(netD.parameters(), lr=args.lr)", "\n", "\n", "count", "=", "0", "\n", "if", "GEN_PATH", "!=", "''", ":", "\n", "# example cfg.TRAIN.NET_G = ", "\n", "        ", "Gpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "GEN_PATH", ")", "\n", "print", "(", "'loading optimizer from '", ",", "Gpath", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Gpath", ")", "\n", "optimizerG", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "optimizerG", "=", "optimizerToDevice", "(", "optimizerG", ")", "\n", "istart", "=", "GEN_PATH", ".", "rfind", "(", "'_'", ")", "+", "1", "\n", "iend", "=", "GEN_PATH", ".", "rfind", "(", "'.'", ")", "\n", "count", "=", "GEN_PATH", "[", "istart", ":", "iend", "]", "\n", "count", "=", "int", "(", "count", ")", "+", "1", "\n", "\n", "", "if", "DIS_PATH", "!=", "''", ":", "\n", "            ", "Dpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "DIS_PATH", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Dpath", ")", "\n", "print", "(", "'loading optimizer from '", ",", "Dpath", ")", "\n", "optimizerD", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "optimizerD", "=", "optimizerToDevice", "(", "optimizerD", ")", "\n", "", "return", "optimizerG", ",", "optimizerD", ",", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganTI.load_network": [[243, 304], ["models.stack_gan2.model1.G_NET1", "torch.nn.DataParallel.apply", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "models.stack_gan2.model1.MAP_NET_TI2", "models.stack_gan2.model1.MAP_NET_IT2", "models.stack_gan2.model1.MAP_NET_TI2", "mmd_ganTI.NetG", "mmd_ganTI.NetD", "mmd_ganTI.ONE_SIDED", "print", "print", "print", "NetG.apply", "NetD.apply", "ONE_SIDED.apply", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "NetG.load_state_dict", "print", "os.path.join", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "NetD.load_state_dict", "torch.nn.DataParallel.cuda", "NetG.cuda", "NetD.cuda", "ONE_SIDED.cuda"], "function", ["None"], ["", "def", "load_network", "(", "path", ")", ":", "\n", "####################Image deoder################################", "\n", "    ", "dec", "=", "G_NET1", "(", ")", "\n", "dec", ".", "apply", "(", "base_module", ".", "weights_init", ")", "\n", "dec", "=", "torch", ".", "nn", ".", "DataParallel", "(", "dec", ",", "device_ids", "=", "gpus", ")", "\n", "#################################################################", "\n", "# construct encoder/decoder modules", "\n", "#hidden_dim = args.nz", "\n", "G_decoder", "=", "MAP_NET_TI2", "(", ")", "# This the Actual Generator ", "\n", "D_encoder", "=", "MAP_NET_IT2", "(", ")", "#Discriminator should be an Auto encoder without noise", "\n", "D_decoder", "=", "MAP_NET_TI2", "(", ")", "#", "\n", "\n", "netG", "=", "NetG", "(", "G_decoder", ")", "\n", "netD", "=", "NetD", "(", "D_encoder", ",", "D_decoder", ")", "\n", "one_sided", "=", "ONE_SIDED", "(", ")", "\n", "print", "(", "\"netG:\"", ",", "netG", ")", "\n", "print", "(", "\"netD:\"", ",", "netD", ")", "\n", "print", "(", "\"oneSide:\"", ",", "one_sided", ")", "\n", "\n", "netG", ".", "apply", "(", "base_module", ".", "weights_init", ")", "\n", "netD", ".", "apply", "(", "base_module", ".", "weights_init", ")", "\n", "one_sided", ".", "apply", "(", "base_module", ".", "weights_init", ")", "\n", "\n", "\n", "\n", "if", "GEN_PATH", "!=", "''", ":", "\n", "# example cfg.TRAIN.NET_G = ", "\n", "        ", "Gpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "GEN_PATH", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Gpath", ")", "\n", "netG", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "#Epath = os.path.join(path, 'encG.pth' )", "\n", "#checkpoint = torch.load(Epath)", "\n", "#enc.load_state_dict(checkpoint['state_dict'])", "\n", "\n", "print", "(", "'Load '", ",", "GEN_PATH", ")", "\n", "\n", "#istart = IT_GEN_PATH('_') + 1", "\n", "#iend = IT_GEN_PATH.rfind('.')", "\n", "#count = IT_GEN_PATH[istart:iend]", "\n", "#count = int(count) + 1", "\n", "\n", "", "if", "DIS_PATH", "!=", "''", ":", "\n", "            ", "Dpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "DIS_PATH", ")", "\n", "print", "(", "'Load '", ",", "DIS_PATH", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Dpath", ")", "\n", "netD", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "\n", "", "if", "args", ".", "cuda", ":", "\n", "        ", "dec", ".", "cuda", "(", ")", "\n", "netG", ".", "cuda", "(", ")", "\n", "netD", ".", "cuda", "(", ")", "\n", "one_sided", ".", "cuda", "(", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "", "return", "dec", ",", "netG", ",", "netD", ",", "one_sided", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganTI.initialize_model": [[305, 339], ["models.AutoEncoderD", "text_models.AutoEncoderD.cuda", "mmd_ganTI.load_network", "models.stack_gan2.model1.encoder_resnet1", "models.stack_gan2.model1.encoder_resnet1.cuda", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "models.stack_gan2.model1.encoder_resnet1.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "dec.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "text_models.AutoEncoderD.load_state_dict"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.load_network"], ["", "def", "initialize_model", "(", "model_name", ",", "config", ",", "embeddings_matrix", ")", ":", "\n", "\n", "    ", "model_ft", "=", "text_models", ".", "AutoEncoderD", "(", "config", ",", "embeddings_matrix", ")", "\n", "#model_ft = model_ft.to(device)", "\n", "model_ft", ".", "cuda", "(", ")", "\n", "\n", "\n", "dec", ",", "gen", ",", "dis", ",", "one_sided", "=", "load_network", "(", "model_dir", ")", "\n", "#############################################################", "\n", "#enc = torch_models.resnet50(pretrained=True)", "\n", "#num_ftrs = enc.fc.in_features", "\n", "#enc.fc = nn.Linear(num_ftrs, 1024)", "\n", "#enc = enc.to(device)", "\n", "################################################################", "\n", "enc", "=", "encoder_resnet1", "(", ")", "\n", "enc", ".", "cuda", "(", ")", "\n", "#enc = enc.to(device)", "\n", "\n", "print", "(", "\"=> loading Image encoder from '{}'\"", ".", "format", "(", "encoder_path", ")", ")", "\n", "encoder", "=", "torch", ".", "load", "(", "encoder_path", ")", "\n", "enc", ".", "load_state_dict", "(", "encoder", "[", "'state_dict'", "]", ")", "\n", "\n", "\n", "print", "(", "\"=> loading Image decoder from '{}'\"", ".", "format", "(", "dec_path", ")", ")", "\n", "decoder", "=", "torch", ".", "load", "(", "dec_path", ")", "\n", "dec", ".", "load_state_dict", "(", "decoder", "[", "'state_dict'", "]", ")", "\n", "\n", "\n", "print", "(", "\"=> loading text autoencoder from '{}'\"", ".", "format", "(", "text_autoencoder_path", ")", ")", "\n", "text_autoencoder", "=", "torch", ".", "load", "(", "text_autoencoder_path", ")", "\n", "model_ft", ".", "load_state_dict", "(", "text_autoencoder", "[", "'state_dict'", "]", ")", "\n", "\n", "\n", "return", "model_ft", ",", "enc", ",", "dec", ",", "gen", ",", "dis", ",", "one_sided", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganTI.save_results": [[340, 364], ["zip", "os.path.join", "data.resultwriter.ResultWriter", "mmd_ganTI.norm_range", "ig.detach().cpu().numpy().transpose.detach().cpu().numpy().transpose", "data.resultwriter.ResultWriter.write_image_with_text", "ig.detach().cpu().numpy().transpose.detach().cpu().numpy", "ig.detach().cpu().numpy().transpose.detach().cpu", "ig.detach().cpu().numpy().transpose.detach"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.norm_range", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.resultwriter.ResultWriter.write_image_with_text"], ["", "def", "save_results", "(", "fake_imgs", ",", "text_input", ",", "count", ")", ":", "\n", "    ", "if", "count", "!=", "-", "1", ":", "#for validation will be saved in a single folder", "\n", "#img_dir = os.path.join(log_dir, 'imgdir%d'%count)", "\n", "#txt_img_dir = os.path.join(log_dir, 'txtimgdir%d'%count)", "\n", "        ", "txt_img_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir1", ",", "'txtimgdir%d'", "%", "count", ")", "\n", "#results_writer_img = ResultWriter(img_dir)", "\n", "results_writer_txtimg", "=", "ResultWriter", "(", "txt_img_dir", ")", "\n", "\n", "", "else", ":", "\n", "#img_dir = img_dir_val", "\n", "        ", "txt_img_dir", "=", "txt_img_dir_val", "\n", "#results_writer_img = results_writer_img_val", "\n", "results_writer_txtimg", "=", "results_writer_txtimg_val", "\n", "#mkdir_p(img_dir)", "\n", "\n", "#fg =open(os.path.join(img_dir, 'generated.txt'), 'w+')", "\n", "#fo =open(os.path.join(img_dir, 'output.txt'), 'w+')", "\n", "", "for", "ig", ",", "ti", "in", "zip", "(", "fake_imgs", ",", "text_input", ")", ":", "\n", "#ii = norm_range(ii)#normalize to (0,1)", "\n", "        ", "ig", "=", "norm_range", "(", "ig", ")", "#normalize to (0,1)", "\n", "#ii = ii.cpu().numpy().transpose(1,2,0) #in order to use plt.imshow the channel should be the last dimention", "\n", "ig", "=", "ig", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "#results_writer_img.write_images(io, ii)", "\n", "results_writer_txtimg", ".", "write_image_with_text", "(", "ig", ",", "ti", ")", "\n", "#print(ti,'\\t',tg, file = fg)", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganTI.save_model": [[369, 387], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "netG.state_dict", "optimizerG.state_dict", "netD.state_dict", "optimizerD.state_dict"], "function", ["None"], ["", "", "def", "save_model", "(", "netG", ",", "optimizerG", ",", "netD", ",", "optimizerD", ",", "epoch", ",", "model_dir", ")", ":", "\n", "#load_params(netG, avg_param_G)", "\n", "#load_params(enc, avg_param_E)", "\n", "\n", "\n", "\n", "\n", "    ", "stateG", "=", "{", "'state_dict'", ":", "netG", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizerG", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "\n", "stateG", ",", "\n", "'%s/netG_%d.pth'", "%", "(", "model_dir", ",", "epoch", ")", ")", "\n", "stateD", "=", "{", "'state_dict'", ":", "netD", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizerD", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "\n", "stateD", ",", "\n", "'%s/netD_%d.pth'", "%", "(", "model_dir", ",", "epoch", ")", ")", "\n", "print", "(", "'Save G/Ds models...count:%d'", "%", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.condGANTrainer.__init__": [[312, 334], ["miscc.config.cfg.GPU_ID.split", "len", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "len", "os.path.join", "os.path.join", "os.path.join", "miscc.utils.mkdir_p", "miscc.utils.mkdir_p", "miscc.utils.mkdir_p", "tensorboardX.FileWriter", "int"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.miscc.utils.mkdir_p", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.miscc.utils.mkdir_p", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.miscc.utils.mkdir_p"], ["    ", "def", "__init__", "(", "self", ",", "output_dir", ",", "data_loader", ",", "imsize", ")", ":", "\n", "        ", "if", "cfg", ".", "TRAIN", ".", "FLAG", ":", "\n", "            ", "self", ".", "model_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'Model'", ")", "\n", "self", ".", "image_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'Image'", ")", "\n", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'Log'", ")", "\n", "mkdir_p", "(", "self", ".", "model_dir", ")", "\n", "mkdir_p", "(", "self", ".", "image_dir", ")", "\n", "mkdir_p", "(", "self", ".", "log_dir", ")", "\n", "self", ".", "summary_writer", "=", "FileWriter", "(", "self", ".", "log_dir", ")", "\n", "\n", "", "s_gpus", "=", "cfg", ".", "GPU_ID", ".", "split", "(", "','", ")", "\n", "self", ".", "gpus", "=", "[", "int", "(", "ix", ")", "for", "ix", "in", "s_gpus", "]", "\n", "self", ".", "num_gpus", "=", "len", "(", "self", ".", "gpus", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "gpus", "[", "0", "]", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "self", ".", "batch_size", "=", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "*", "self", ".", "num_gpus", "\n", "self", ".", "max_epoch", "=", "cfg", ".", "TRAIN", ".", "MAX_EPOCH", "\n", "self", ".", "snapshot_interval", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_INTERVAL", "\n", "\n", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "num_batches", "=", "len", "(", "self", ".", "data_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.condGANTrainer.prepare_data": [[335, 353], ["six.moves.range", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "real_vimgs.append", "wrong_vimgs.append", "ureal_vimgs.append", "real_vimgs.append", "wrong_vimgs.append", "ureal_vimgs.append", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "uimgs", ",", "imgs", ",", "w_imgs", ",", "t_embedding", ",", "_", "=", "data", "\n", "\n", "real_vimgs", ",", "wrong_vimgs", ",", "ureal_vimgs", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "if", "cfg", ".", "CUDA", ":", "\n", "            ", "vembedding", "=", "Variable", "(", "t_embedding", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "vembedding", "=", "Variable", "(", "t_embedding", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_Ds", ")", ":", "\n", "            ", "if", "cfg", ".", "CUDA", ":", "\n", "                ", "real_vimgs", ".", "append", "(", "Variable", "(", "imgs", "[", "i", "]", ")", ".", "cuda", "(", ")", ")", "\n", "wrong_vimgs", ".", "append", "(", "Variable", "(", "w_imgs", "[", "i", "]", ")", ".", "cuda", "(", ")", ")", "\n", "ureal_vimgs", ".", "append", "(", "Variable", "(", "uimgs", "[", "i", "]", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "real_vimgs", ".", "append", "(", "Variable", "(", "imgs", "[", "i", "]", ")", ")", "\n", "wrong_vimgs", ".", "append", "(", "Variable", "(", "w_imgs", "[", "i", "]", ")", ")", "\n", "ureal_vimgs", ".", "append", "(", "Variable", "(", "uimgs", "[", "i", "]", ")", ".", "cuda", "(", ")", ")", "\n", "", "", "return", "imgs", ",", "ureal_vimgs", ",", "real_vimgs", ",", "wrong_vimgs", ",", "vembedding", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.condGANTrainer.train_Dnet": [[354, 401], ["trainer.condGANTrainer.real_imgs[].size", "netD.zero_grad", "netD", "netD", "netD", "criterion", "criterion", "criterion", "errD.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optD.step", "mu.detach", "mu.detach", "fake_imgs.detach", "mu.detach", "netD.parameters", "tensorboardX.summary.scalar", "trainer.condGANTrainer.summary_writer.add_summary", "len", "criterion", "criterion", "criterion", "errD.item"], "methods", ["None"], ["", "def", "train_Dnet", "(", "self", ",", "idx", ",", "count", ")", ":", "\n", "        ", "flag", "=", "count", "%", "100", "\n", "batch_size", "=", "self", ".", "real_imgs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "criterion", ",", "mu", "=", "self", ".", "criterion", ",", "self", ".", "mu", "\n", "\n", "netD", ",", "optD", "=", "self", ".", "netsD", "[", "idx", "]", ",", "self", ".", "optimizersD", "[", "idx", "]", "\n", "real_imgs", "=", "self", ".", "real_imgs", "[", "idx", "]", "\n", "wrong_imgs", "=", "self", ".", "wrong_imgs", "[", "idx", "]", "\n", "fake_imgs", "=", "self", ".", "fake_imgs", "[", "idx", "]", "\n", "#", "\n", "netD", ".", "zero_grad", "(", ")", "\n", "# Forward", "\n", "real_labels", "=", "self", ".", "real_labels", "[", ":", "batch_size", "]", "\n", "fake_labels", "=", "self", ".", "fake_labels", "[", ":", "batch_size", "]", "\n", "# for real", "\n", "real_logits", "=", "netD", "(", "real_imgs", ",", "mu", ".", "detach", "(", ")", ")", "\n", "wrong_logits", "=", "netD", "(", "wrong_imgs", ",", "mu", ".", "detach", "(", ")", ")", "\n", "fake_logits", "=", "netD", "(", "fake_imgs", ".", "detach", "(", ")", ",", "mu", ".", "detach", "(", ")", ")", "\n", "#", "\n", "errD_real", "=", "criterion", "(", "real_logits", "[", "0", "]", ",", "real_labels", ")", "\n", "errD_wrong", "=", "criterion", "(", "wrong_logits", "[", "0", "]", ",", "fake_labels", ")", "\n", "errD_fake", "=", "criterion", "(", "fake_logits", "[", "0", "]", ",", "fake_labels", ")", "\n", "if", "len", "(", "real_logits", ")", ">", "1", "and", "cfg", ".", "TRAIN", ".", "COEFF", ".", "UNCOND_LOSS", ">", "0", ":", "\n", "            ", "errD_real_uncond", "=", "cfg", ".", "TRAIN", ".", "COEFF", ".", "UNCOND_LOSS", "*", "criterion", "(", "real_logits", "[", "1", "]", ",", "real_labels", ")", "\n", "errD_wrong_uncond", "=", "cfg", ".", "TRAIN", ".", "COEFF", ".", "UNCOND_LOSS", "*", "criterion", "(", "wrong_logits", "[", "1", "]", ",", "real_labels", ")", "\n", "errD_fake_uncond", "=", "cfg", ".", "TRAIN", ".", "COEFF", ".", "UNCOND_LOSS", "*", "criterion", "(", "fake_logits", "[", "1", "]", ",", "fake_labels", ")", "\n", "#", "\n", "errD_real", "=", "errD_real", "+", "errD_real_uncond", "\n", "errD_wrong", "=", "errD_wrong", "+", "errD_wrong_uncond", "\n", "errD_fake", "=", "errD_fake", "+", "errD_fake_uncond", "\n", "#", "\n", "errD", "=", "errD_real", "+", "errD_wrong", "+", "errD_fake", "\n", "", "else", ":", "\n", "            ", "errD", "=", "errD_real", "+", "0.5", "*", "(", "errD_wrong", "+", "errD_fake", ")", "\n", "# backward", "\n", "", "errD", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "netD", ".", "parameters", "(", ")", ",", "5.00", ")", "\n", "# update parameters", "\n", "optD", ".", "step", "(", ")", "\n", "# log", "\n", "if", "flag", "==", "0", ":", "\n", "            ", "summary_D", "=", "summary", ".", "scalar", "(", "'D_loss%d'", "%", "idx", ",", "errD", ".", "item", "(", ")", ")", "\n", "self", ".", "summary_writer", ".", "add_summary", "(", "summary_D", ",", "count", ")", "\n", "", "return", "errD", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.condGANTrainer.train_Gnet": [[402, 480], ["trainer.condGANTrainer.enc.zero_grad", "trainer.condGANTrainer.netG.zero_grad", "trainer.condGANTrainer.real_imgs[].size", "six.moves.range", "errG_total.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "trainer.condGANTrainer.optimizerG.step", "criterion", "trainer.KL_loss", "trainer.condGANTrainer.enc.parameters", "trainer.condGANTrainer.netG.parameters", "tensorboardX.summary.scalar", "trainer.condGANTrainer.summary_writer.add_summary", "trainer.compute_mean_covariance", "trainer.compute_mean_covariance", "mu1.to.to.to", "covariance1.to.to.to", "mu2.to.to.to", "covariance2.to.to.to", "trainer.compute_mean_covariance", "trainer.compute_mean_covariance", "mu1.to.to.to", "covariance1.to.to.to", "mu2.to.to.to", "covariance2.to.to.to", "trainer.compute_mean_covariance", "trainer.compute_mean_covariance", "mu1.to.to.to", "covariance1.to.to.to", "mu2.to.to.to", "covariance2.to.to.to", "len", "criterion", "criterion.item", "trainer.condGANTrainer.fake_imgs[].detach", "criterion1", "criterion1", "tensorboardX.summary.scalar", "trainer.condGANTrainer.summary_writer.add_summary", "tensorboardX.summary.scalar", "trainer.condGANTrainer.summary_writer.add_summary", "criterion1", "criterion1", "trainer.condGANTrainer.fake_imgs[].detach", "criterion1", "criterion1", "tensorboardX.summary.scalar", "trainer.condGANTrainer.summary_writer.add_summary", "tensorboardX.summary.scalar", "trainer.condGANTrainer.summary_writer.add_summary", "like_mu2.item", "like_cov2.item", "like_mu1.item", "like_cov1.item"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.KL_loss", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.compute_mean_covariance", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.compute_mean_covariance", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.compute_mean_covariance", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.compute_mean_covariance", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.compute_mean_covariance", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.compute_mean_covariance"], ["", "def", "train_Gnet", "(", "self", ",", "count", ")", ":", "\n", "        ", "self", ".", "enc", ".", "zero_grad", "(", ")", "\n", "self", ".", "netG", ".", "zero_grad", "(", ")", "\n", "errG_total", "=", "0", "\n", "#errM_total = 0", "\n", "flag", "=", "count", "%", "100", "\n", "batch_size", "=", "self", ".", "real_imgs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "criterion", ",", "mu", ",", "logvar", "=", "self", ".", "criterion", ",", "self", ".", "mu", ",", "self", ".", "logvar", "\n", "criterion1", "=", "self", ".", "criterion1", "\n", "real_labels", "=", "self", ".", "real_labels", "[", ":", "batch_size", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_Ds", ")", ":", "\n", "            ", "outputs", "=", "self", ".", "netsD", "[", "i", "]", "(", "self", ".", "fake_imgs", "[", "i", "]", ",", "mu", ")", "\n", "errG", "=", "criterion", "(", "outputs", "[", "0", "]", ",", "real_labels", ")", "\n", "#errM = criterion1(self.fake_imgs[i], self.real_imgs[i])", "\n", "if", "len", "(", "outputs", ")", ">", "1", "and", "cfg", ".", "TRAIN", ".", "COEFF", ".", "UNCOND_LOSS", ">", "0", ":", "\n", "                ", "errG_patch", "=", "cfg", ".", "TRAIN", ".", "COEFF", ".", "UNCOND_LOSS", "*", "criterion", "(", "outputs", "[", "1", "]", ",", "real_labels", ")", "\n", "errG", "=", "errG", "+", "errG_patch", "\n", "", "errG_total", "=", "errG_total", "+", "errG", "\n", "#errM_total = errM_total + errM*1000.0", "\n", "if", "flag", "==", "0", ":", "\n", "                ", "summary_D", "=", "summary", ".", "scalar", "(", "'G_loss%d'", "%", "i", ",", "errG", ".", "item", "(", ")", ")", "\n", "self", ".", "summary_writer", ".", "add_summary", "(", "summary_D", ",", "count", ")", "\n", "\n", "# Compute color consistency losses", "\n", "", "", "if", "cfg", ".", "TRAIN", ".", "COEFF", ".", "COLOR_LOSS", ">", "0", ":", "\n", "            ", "if", "self", ".", "num_Ds", ">", "1", ":", "\n", "                ", "mu1", ",", "covariance1", "=", "compute_mean_covariance", "(", "self", ".", "fake_imgs", "[", "-", "1", "]", ")", "\n", "mu2", ",", "covariance2", "=", "compute_mean_covariance", "(", "self", ".", "fake_imgs", "[", "-", "2", "]", ".", "detach", "(", ")", ")", "\n", "mu1", "=", "mu1", ".", "to", "(", "device", ")", "\n", "covariance1", "=", "covariance1", ".", "to", "(", "device", ")", "\n", "mu2", "=", "mu2", ".", "to", "(", "device", ")", "\n", "covariance2", "=", "covariance2", ".", "to", "(", "device", ")", "\n", "like_mu2", "=", "cfg", ".", "TRAIN", ".", "COEFF", ".", "COLOR_LOSS", "*", "criterion1", "(", "mu1", ",", "mu2", ")", "\n", "like_cov2", "=", "cfg", ".", "TRAIN", ".", "COEFF", ".", "COLOR_LOSS", "*", "5", "*", "criterion1", "(", "covariance1", ",", "covariance2", ")", "\n", "errG_total", "=", "errG_total", "+", "like_mu2", "+", "like_cov2", "\n", "if", "flag", "==", "0", ":", "\n", "                    ", "sum_mu", "=", "summary", ".", "scalar", "(", "'G_like_mu2'", ",", "like_mu2", ".", "item", "(", ")", ")", "\n", "self", ".", "summary_writer", ".", "add_summary", "(", "sum_mu", ",", "count", ")", "\n", "sum_cov", "=", "summary", ".", "scalar", "(", "'G_like_cov2'", ",", "like_cov2", ".", "item", "(", ")", ")", "\n", "self", ".", "summary_writer", ".", "add_summary", "(", "sum_cov", ",", "count", ")", "\n", "", "", "if", "self", ".", "num_Ds", ">", "2", ":", "\n", "                ", "mu1", ",", "covariance1", "=", "compute_mean_covariance", "(", "self", ".", "fake_imgs", "[", "-", "3", "]", ")", "\n", "mu2", ",", "covariance2", "=", "compute_mean_covariance", "(", "self", ".", "real_imgs", "[", "0", "]", ")", "\n", "mu1", "=", "mu1", ".", "to", "(", "device", ")", "\n", "covariance1", "=", "covariance1", ".", "to", "(", "device", ")", "\n", "mu2", "=", "mu2", ".", "to", "(", "device", ")", "\n", "covariance2", "=", "covariance2", ".", "to", "(", "device", ")", "\n", "like_mu0", "=", "cfg", ".", "TRAIN", ".", "COEFF", ".", "COLOR_LOSS", "*", "criterion1", "(", "mu1", ",", "mu2", ")", "\n", "like_cov0", "=", "cfg", ".", "TRAIN", ".", "COEFF", ".", "COLOR_LOSS", "*", "5", "*", "criterion1", "(", "covariance1", ",", "covariance2", ")", "\n", "mu1", ",", "covariance1", "=", "compute_mean_covariance", "(", "self", ".", "fake_imgs", "[", "-", "2", "]", ")", "\n", "mu2", ",", "covariance2", "=", "compute_mean_covariance", "(", "self", ".", "fake_imgs", "[", "-", "3", "]", ".", "detach", "(", ")", ")", "\n", "mu1", "=", "mu1", ".", "to", "(", "device", ")", "\n", "covariance1", "=", "covariance1", ".", "to", "(", "device", ")", "\n", "mu2", "=", "mu2", ".", "to", "(", "device", ")", "\n", "covariance2", "=", "covariance2", ".", "to", "(", "device", ")", "\n", "like_mu1", "=", "cfg", ".", "TRAIN", ".", "COEFF", ".", "COLOR_LOSS", "*", "criterion1", "(", "mu1", ",", "mu2", ")", "\n", "like_cov1", "=", "cfg", ".", "TRAIN", ".", "COEFF", ".", "COLOR_LOSS", "*", "5", "*", "criterion1", "(", "covariance1", ",", "covariance2", ")", "\n", "errG_total", "=", "errG_total", "+", "like_mu1", "+", "like_cov1", "+", "like_mu0", "+", "like_cov0", "\n", "if", "flag", "==", "0", ":", "\n", "                    ", "sum_mu", "=", "summary", ".", "scalar", "(", "'G_like_mu1'", ",", "like_mu1", ".", "item", "(", ")", ")", "\n", "self", ".", "summary_writer", ".", "add_summary", "(", "sum_mu", ",", "count", ")", "\n", "sum_cov", "=", "summary", ".", "scalar", "(", "'G_like_cov1'", ",", "like_cov1", ".", "item", "(", ")", ")", "\n", "self", ".", "summary_writer", ".", "add_summary", "(", "sum_cov", ",", "count", ")", "\n", "\n", "", "", "", "kl_loss", "=", "KL_loss", "(", "mu", ",", "logvar", ")", "*", "cfg", ".", "TRAIN", ".", "COEFF", ".", "KL", "\n", "errG_total", "=", "errG_total", "+", "kl_loss", "#+ errM_total", "\n", "errG_total", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "enc", ".", "parameters", "(", ")", ",", "5.00", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "netG", ".", "parameters", "(", ")", ",", "5.00", ")", "\n", "self", ".", "optimizerG", ".", "step", "(", ")", "\n", "return", "kl_loss", ",", "errG_total", "-", "kl_loss", "#, errM_total", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.condGANTrainer.train": [[481, 618], ["trainer.load_network", "trainer.copy_G_params", "trainer.copy_G_params", "trainer.define_optimizers", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "six.moves.range", "trainer.save_model", "trainer.condGANTrainer.summary_writer.close", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "trainer.condGANTrainer.criterion.cuda", "trainer.condGANTrainer.real_labels.cuda", "trainer.condGANTrainer.fake_labels.cuda", "trainer.condGANTrainer.gradient_one.cuda", "trainer.condGANTrainer.gradient_half.cuda", "time.time", "enumerate", "time.time", "print", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "trainer.condGANTrainer.prepare_data", "trainer.condGANTrainer.enc", "torch.autograd.Variable.data.normal_", "torch.autograd.Variable.data.normal_", "torch.autograd.Variable.data.normal_", "torch.autograd.Variable.data.normal_", "trainer.condGANTrainer.netG", "six.moves.range", "trainer.condGANTrainer.train_Gnet", "zip", "trainer.condGANTrainer.inception_model", "numpy.concatenate.append", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "trainer.condGANTrainer.train_Dnet", "trainer.condGANTrainer.netG.parameters", "avg_p.mul_().add_", "trainer.condGANTrainer.fake_imgs[].detach", "trainer.condGANTrainer.data.cpu().numpy", "tensorboardX.summary.scalar", "tensorboardX.summary.scalar", "tensorboardX.summary.scalar", "trainer.condGANTrainer.summary_writer.add_summary", "trainer.condGANTrainer.summary_writer.add_summary", "trainer.condGANTrainer.summary_writer.add_summary", "trainer.save_model", "trainer.condGANTrainer.netG", "trainer.save_img_results", "errD_total.item", "errG_total.item", "kl_loss.item", "trainer.condGANTrainer.txt_embedding.detach", "len", "numpy.concatenate", "trainer.compute_inception_score", "tensorboardX.summary.scalar", "trainer.condGANTrainer.summary_writer.add_summary", "trainer.negative_log_posterior_probability", "tensorboardX.summary.scalar", "trainer.condGANTrainer.summary_writer.add_summary", "errD_total.item", "errG_total.item", "kl_loss.item", "avg_p.mul_", "trainer.condGANTrainer.data.cpu"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.load_network", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.copy_G_params", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.copy_G_params", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.define_optimizers", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.save_model", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.condGANTrainer.prepare_data", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.ImageTextTrainer.train_Gnet", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.ImageTextTrainer.train_Dnet", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.save_model", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.save_img_results", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.compute_inception_score", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.negative_log_posterior_probability"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "enc", ",", "self", ".", "netG", ",", "self", ".", "netsD", ",", "self", ".", "num_Ds", ",", "self", ".", "inception_model", ",", "start_count", "=", "load_network", "(", "self", ".", "gpus", ",", "self", ".", "model_dir", ")", "\n", "avg_param_G", "=", "copy_G_params", "(", "self", ".", "netG", ")", "\n", "avg_param_E", "=", "copy_G_params", "(", "self", ".", "enc", ")", "\n", "\n", "self", ".", "optimizerG", ",", "self", ".", "optimizersD", "=", "define_optimizers", "(", "self", ".", "enc", ",", "self", ".", "netG", ",", "self", ".", "netsD", ",", "self", ".", "model_dir", ")", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "BCELoss", "(", ")", "\n", "self", ".", "criterion1", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "self", ".", "real_labels", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "self", ".", "batch_size", ")", ".", "fill_", "(", "1", ")", ")", "\n", "self", ".", "fake_labels", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "self", ".", "batch_size", ")", ".", "fill_", "(", "0", ")", ")", "\n", "\n", "self", ".", "gradient_one", "=", "torch", ".", "FloatTensor", "(", "[", "1.0", "]", ")", "\n", "self", ".", "gradient_half", "=", "torch", ".", "FloatTensor", "(", "[", "0.5", "]", ")", "\n", "\n", "nz", "=", "cfg", ".", "GAN", ".", "Z_DIM", "\n", "noise", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "self", ".", "batch_size", ",", "nz", ")", ")", "\n", "fixed_noise", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "self", ".", "batch_size", ",", "nz", ")", ".", "normal_", "(", "0", ",", "1", ")", ")", "\n", "\n", "if", "cfg", ".", "CUDA", ":", "\n", "            ", "self", ".", "criterion", ".", "cuda", "(", ")", "\n", "self", ".", "real_labels", "=", "self", ".", "real_labels", ".", "cuda", "(", ")", "\n", "self", ".", "fake_labels", "=", "self", ".", "fake_labels", ".", "cuda", "(", ")", "\n", "self", ".", "gradient_one", "=", "self", ".", "gradient_one", ".", "cuda", "(", ")", "\n", "self", ".", "gradient_half", "=", "self", ".", "gradient_half", ".", "cuda", "(", ")", "\n", "noise", ",", "fixed_noise", "=", "noise", ".", "cuda", "(", ")", ",", "fixed_noise", ".", "cuda", "(", ")", "\n", "\n", "", "predictions", "=", "[", "]", "\n", "count", "=", "start_count", "\n", "start_epoch", "=", "start_count", "//", "(", "self", ".", "num_batches", ")", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "self", ".", "max_epoch", ")", ":", "\n", "            ", "start_t", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "step", ",", "data", "in", "enumerate", "(", "self", ".", "data_loader", ",", "0", ")", ":", "\n", "#######################################################", "\n", "# (0) Prepare training data", "\n", "######################################################", "\n", "                ", "self", ".", "imgs_tcpu", ",", "self", ".", "ureal_imgs", ",", "self", ".", "real_imgs", ",", "self", ".", "wrong_imgs", ",", "self", ".", "txt_embedd", "=", "self", ".", "prepare_data", "(", "data", ")", "\n", "self", ".", "txt_embedding", "=", "self", ".", "enc", "(", "self", ".", "ureal_imgs", "[", "0", "]", ")", "\n", "#self.txt_embedding, self.mu, self.logvar = self.enc(self.ureal_imgs[0])", "\n", "#print(torch.max(torch.abs(self.txt_embedding)))", "\n", "\n", "#######################################################", "\n", "# (1) Generate fake images", "\n", "######################################################", "\n", "noise", ".", "data", ".", "normal_", "(", "0", ",", "1", ")", "\n", "#self.fake_imgs, self.mu, self.logvar = \\", "\n", "#   self.netG(noise, self.txt_embedding.detach())", "\n", "self", ".", "fake_imgs", ",", "self", ".", "mu", ",", "self", ".", "logvar", "=", "self", ".", "netG", "(", "noise", ",", "self", ".", "txt_embedding", ")", "\n", "#self.fake_imgs= self.netG(noise, self.txt_embedding)", "\n", "\n", "\n", "#######################################################", "\n", "# (2) Update D network", "\n", "######################################################", "\n", "errD_total", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "num_Ds", ")", ":", "\n", "                    ", "errD", "=", "self", ".", "train_Dnet", "(", "i", ",", "count", ")", "\n", "errD_total", "+=", "errD", "\n", "\n", "#######################################################", "\n", "# (3) Update G network: maximize log(D(G(z)))", "\n", "######################################################", "\n", "#kl_loss, errG_total, errM_total = self.train_Gnet(count)", "\n", "", "kl_loss", ",", "errG_total", "=", "self", ".", "train_Gnet", "(", "count", ")", "\n", "for", "p", ",", "avg_p", "in", "zip", "(", "self", ".", "netG", ".", "parameters", "(", ")", ",", "avg_param_G", ")", ":", "\n", "                    ", "avg_p", ".", "mul_", "(", "0.999", ")", ".", "add_", "(", "0.001", ",", "p", ".", "data", ")", "\n", "#for e, avg_e in zip(self.enc.parameters(), avg_param_E):", "\n", "#   avg_e.mul_(0.999).add_(0.001, e.data)", "\n", "\n", "# for inception score", "\n", "", "pred", "=", "self", ".", "inception_model", "(", "self", ".", "fake_imgs", "[", "-", "1", "]", ".", "detach", "(", ")", ")", "\n", "predictions", ".", "append", "(", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "if", "count", "%", "100", "==", "0", ":", "\n", "                    ", "summary_D", "=", "summary", ".", "scalar", "(", "'D_loss'", ",", "errD_total", ".", "item", "(", ")", ")", "\n", "summary_G", "=", "summary", ".", "scalar", "(", "'G_loss'", ",", "errG_total", ".", "item", "(", ")", ")", "\n", "summary_KL", "=", "summary", ".", "scalar", "(", "'KL_loss'", ",", "kl_loss", ".", "item", "(", ")", ")", "\n", "#summary_MSE = summary.scalar('MSE_loss', errM_total.item())", "\n", "self", ".", "summary_writer", ".", "add_summary", "(", "summary_D", ",", "count", ")", "\n", "self", ".", "summary_writer", ".", "add_summary", "(", "summary_G", ",", "count", ")", "\n", "self", ".", "summary_writer", ".", "add_summary", "(", "summary_KL", ",", "count", ")", "\n", "#self.summary_writer.add_summary(summary_MSE, count)", "\n", "\n", "", "count", "=", "count", "+", "1", "\n", "\n", "if", "count", "%", "cfg", ".", "TRAIN", ".", "SNAPSHOT_INTERVAL", "==", "0", ":", "\n", "#if count % 2 == 0:", "\n", "                    ", "save_model", "(", "self", ".", "enc", ",", "avg_param_E", ",", "self", ".", "netG", ",", "self", ".", "optimizerG", ",", "avg_param_G", ",", "self", ".", "netsD", ",", "self", ".", "optimizersD", ",", "count", ",", "self", ".", "model_dir", ")", "\n", "# Save images", "\n", "#backup_para = copy_G_params(self.netG)", "\n", "#backup_para_E = copy_G_params(self.enc)", "\n", "#load_params(self.netG, avg_param_G)", "\n", "#load_params(self.enc, avg_param_E)", "\n", "#", "\n", "self", ".", "fake_imgs", ",", "_", ",", "_", "=", "self", ".", "netG", "(", "fixed_noise", ",", "self", ".", "txt_embedding", ".", "detach", "(", ")", ")", "\n", "#self.fake_imgs = self.netG(fixed_noise, self.txt_embedding.detach())", "\n", "save_img_results", "(", "self", ".", "imgs_tcpu", ",", "self", ".", "fake_imgs", ",", "self", ".", "num_Ds", ",", "\n", "count", ",", "self", ".", "image_dir", ",", "self", ".", "summary_writer", ")", "\n", "#", "\n", "#load_params(self.netG, backup_para)", "\n", "#load_params(self.enc, backup_para_E)", "\n", "\n", "# Compute inception score", "\n", "if", "len", "(", "predictions", ")", ">", "500", ":", "\n", "                        ", "predictions", "=", "np", ".", "concatenate", "(", "predictions", ",", "0", ")", "\n", "mean", ",", "std", "=", "compute_inception_score", "(", "predictions", ",", "10", ")", "\n", "# print('mean:', mean, 'std', std)", "\n", "m_incep", "=", "summary", ".", "scalar", "(", "'Inception_mean'", ",", "mean", ")", "\n", "self", ".", "summary_writer", ".", "add_summary", "(", "m_incep", ",", "count", ")", "\n", "#", "\n", "mean_nlpp", ",", "std_nlpp", "=", "negative_log_posterior_probability", "(", "predictions", ",", "10", ")", "\n", "m_nlpp", "=", "summary", ".", "scalar", "(", "'NLPP_mean'", ",", "mean_nlpp", ")", "\n", "self", ".", "summary_writer", ".", "add_summary", "(", "m_nlpp", ",", "count", ")", "\n", "#", "\n", "predictions", "=", "[", "]", "\n", "\n", "", "", "", "end_t", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'''[%d/%d][%d]\n                         Loss_D: %.2f Loss_G: %.2f  Loss_KL: %.2f Time: %.2fs\n                      '''", "# D(real): %.4f D(wrong):%.4f  D(fake) %.4f", "\n", "%", "(", "epoch", ",", "self", ".", "max_epoch", ",", "self", ".", "num_batches", ",", "\n", "errD_total", ".", "item", "(", ")", ",", "errG_total", ".", "item", "(", ")", ",", "\n", "kl_loss", ".", "item", "(", ")", ",", "end_t", "-", "start_t", ")", ")", "\n", "\n", "", "save_model", "(", "self", ".", "enc", ",", "avg_param_E", ",", "self", ".", "netG", ",", "self", ".", "optimizerG", ",", "avg_param_G", ",", "self", ".", "netsD", ",", "self", ".", "optimizersD", ",", "count", ",", "self", ".", "model_dir", ")", "\n", "self", ".", "summary_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.condGANTrainer.save_superimages": [[619, 642], ["images_list[].size", "len", "six.moves.range", "six.moves.range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torchvision.save_image", "os.path.isdir", "print", "miscc.utils.mkdir_p", "img.view.view.view", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "s_tmp.rfind"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.miscc.utils.mkdir_p"], ["", "def", "save_superimages", "(", "self", ",", "images_list", ",", "filenames", ",", "\n", "save_dir", ",", "split_dir", ",", "imsize", ")", ":", "\n", "        ", "batch_size", "=", "images_list", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "num_sentences", "=", "len", "(", "images_list", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "s_tmp", "=", "'%s/super/%s/%s'", "%", "(", "save_dir", ",", "split_dir", ",", "filenames", "[", "i", "]", ")", "\n", "folder", "=", "s_tmp", "[", ":", "s_tmp", ".", "rfind", "(", "'/'", ")", "]", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "folder", ")", ":", "\n", "                ", "print", "(", "'Make a new folder: '", ",", "folder", ")", "\n", "mkdir_p", "(", "folder", ")", "\n", "#", "\n", "", "savename", "=", "'%s_%d.png'", "%", "(", "s_tmp", ",", "imsize", ")", "\n", "super_img", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_sentences", ")", ":", "\n", "                ", "img", "=", "images_list", "[", "j", "]", "[", "i", "]", "\n", "# print(img.size())", "\n", "img", "=", "img", ".", "view", "(", "1", ",", "3", ",", "imsize", ",", "imsize", ")", "\n", "# print(img.size())", "\n", "super_img", ".", "append", "(", "img", ")", "\n", "# break", "\n", "", "super_img", "=", "torch", ".", "cat", "(", "super_img", ",", "0", ")", "\n", "vutils", ".", "save_image", "(", "super_img", ",", "savename", ",", "nrow", "=", "10", ",", "normalize", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.condGANTrainer.save_singleimages": [[643, 659], ["six.moves.range", "images.size", "images[].add().div().mul().clamp().byte", "images[].add().div().mul().clamp().byte.permute().data.cpu().numpy", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "os.path.isdir", "print", "miscc.utils.mkdir_p", "s_tmp.rfind", "images[].add().div().mul().clamp", "images[].add().div().mul().clamp().byte.permute().data.cpu", "images[].add().div().mul", "images[].add().div().mul().clamp().byte.permute", "images[].add().div", "images[].add"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.miscc.utils.mkdir_p"], ["", "", "def", "save_singleimages", "(", "self", ",", "images", ",", "filenames", ",", "\n", "save_dir", ",", "split_dir", ",", "sentenceID", ",", "imsize", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "images", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "s_tmp", "=", "'%s/single_samples/%s/%s'", "%", "(", "save_dir", ",", "split_dir", ",", "filenames", "[", "i", "]", ")", "\n", "folder", "=", "s_tmp", "[", ":", "s_tmp", ".", "rfind", "(", "'/'", ")", "]", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "folder", ")", ":", "\n", "                ", "print", "(", "'Make a new folder: '", ",", "folder", ")", "\n", "mkdir_p", "(", "folder", ")", "\n", "\n", "", "fullpath", "=", "'%s_%d_sentence%d.png'", "%", "(", "s_tmp", ",", "imsize", ",", "sentenceID", ")", "\n", "# range from [-1, 1] to [0, 255]", "\n", "img", "=", "images", "[", "i", "]", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "byte", "(", ")", "\n", "ndarr", "=", "img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "ndarr", ")", "\n", "im", ".", "save", "(", "fullpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.condGANTrainer.evaluate": [[660, 730], ["print", "model.G_NET1", "torch.nn.DataParallel.apply", "torch.nn.DataParallel.apply", "torch.nn.DataParallel.apply", "torch.nn.DataParallel.apply", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.load_state_dict", "print", "s_tmp.rfind", "int", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "enumerate", "s_tmp.rfind", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel.cuda", "noise.cuda.cuda.cuda", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "imgs[].size", "noise.cuda.cuda.data.resize_", "noise.cuda.cuda.data.normal_", "six.moves.range", "s_tmp.rfind", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "trainer.condGANTrainer.save_superimages", "fake_img_list.append", "trainer.condGANTrainer.save_singleimages", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "fake_imgs[].data.cpu"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.condGANTrainer.save_superimages", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.condGANTrainer.save_singleimages"], ["", "", "def", "evaluate", "(", "self", ",", "split_dir", ")", ":", "\n", "        ", "if", "cfg", ".", "TRAIN", ".", "NET_G", "==", "''", ":", "\n", "            ", "print", "(", "'Error: the path for morels is not found!'", ")", "\n", "", "else", ":", "\n", "# Build and load the generator", "\n", "            ", "if", "split_dir", "==", "'test'", ":", "\n", "                ", "split_dir", "=", "'valid'", "\n", "", "netG", "=", "G_NET1", "(", ")", "\n", "netG", ".", "apply", "(", "weights_init", ")", "\n", "netG", "=", "torch", ".", "nn", ".", "DataParallel", "(", "netG", ",", "device_ids", "=", "self", ".", "gpus", ")", "\n", "print", "(", "netG", ")", "\n", "# state_dict = torch.load(cfg.TRAIN.NET_G)", "\n", "state_dict", "=", "torch", ".", "load", "(", "cfg", ".", "TRAIN", ".", "NET_G", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "netG", ".", "load_state_dict", "(", "state_dict", ")", "\n", "print", "(", "'Load '", ",", "cfg", ".", "TRAIN", ".", "NET_G", ")", "\n", "\n", "# the path to save generated images", "\n", "s_tmp", "=", "cfg", ".", "TRAIN", ".", "NET_G", "\n", "istart", "=", "s_tmp", ".", "rfind", "(", "'_'", ")", "+", "1", "\n", "iend", "=", "s_tmp", ".", "rfind", "(", "'.'", ")", "\n", "iteration", "=", "int", "(", "s_tmp", "[", "istart", ":", "iend", "]", ")", "\n", "s_tmp", "=", "s_tmp", "[", ":", "s_tmp", ".", "rfind", "(", "'/'", ")", "]", "\n", "save_dir", "=", "'%s/iteration%d'", "%", "(", "s_tmp", ",", "iteration", ")", "\n", "\n", "nz", "=", "cfg", ".", "GAN", ".", "Z_DIM", "\n", "noise", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "self", ".", "batch_size", ",", "nz", ")", ")", "\n", "if", "cfg", ".", "CUDA", ":", "\n", "                ", "netG", ".", "cuda", "(", ")", "\n", "noise", "=", "noise", ".", "cuda", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "", "netG", ".", "eval", "(", ")", "\n", "for", "step", ",", "data", "in", "enumerate", "(", "self", ".", "data_loader", ",", "0", ")", ":", "\n", "                ", "imgs", ",", "t_embeddings", ",", "filenames", "=", "data", "\n", "if", "cfg", ".", "CUDA", ":", "\n", "                    ", "t_embeddings", "=", "Variable", "(", "t_embeddings", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                    ", "t_embeddings", "=", "Variable", "(", "t_embeddings", ")", "\n", "# print(t_embeddings[:, 0, :], t_embeddings.size(1))", "\n", "\n", "", "embedding_dim", "=", "t_embeddings", ".", "size", "(", "1", ")", "\n", "batch_size", "=", "imgs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "noise", ".", "data", ".", "resize_", "(", "batch_size", ",", "nz", ")", "\n", "noise", ".", "data", ".", "normal_", "(", "0", ",", "1", ")", "\n", "\n", "fake_img_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "embedding_dim", ")", ":", "\n", "#fake_imgs, _, _ = netG(noise, t_embeddings[:, i, :])", "\n", "                    ", "fake_imgs", "=", "netG", "(", "noise", ",", "t_embeddings", "[", ":", ",", "i", ",", ":", "]", ")", "\n", "if", "cfg", ".", "TEST", ".", "B_EXAMPLE", ":", "\n", "# fake_img_list.append(fake_imgs[0].data.cpu())", "\n", "# fake_img_list.append(fake_imgs[1].data.cpu())", "\n", "                        ", "fake_img_list", ".", "append", "(", "fake_imgs", "[", "2", "]", ".", "data", ".", "cpu", "(", ")", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "save_singleimages", "(", "fake_imgs", "[", "-", "1", "]", ",", "filenames", ",", "\n", "save_dir", ",", "split_dir", ",", "i", ",", "256", ")", "\n", "# self.save_singleimages(fake_imgs[-2], filenames,", "\n", "#                        save_dir, split_dir, i, 128)", "\n", "# self.save_singleimages(fake_imgs[-3], filenames,", "\n", "#                        save_dir, split_dir, i, 64)", "\n", "# break", "\n", "", "", "if", "cfg", ".", "TEST", ".", "B_EXAMPLE", ":", "\n", "# self.save_superimages(fake_img_list, filenames,", "\n", "#                       save_dir, split_dir, 64)", "\n", "# self.save_superimages(fake_img_list, filenames,", "\n", "#                       save_dir, split_dir, 128)", "\n", "                    ", "self", ".", "save_superimages", "(", "fake_img_list", ",", "filenames", ",", "\n", "save_dir", ",", "split_dir", ",", "256", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.compute_mean_covariance": [[29, 49], ["img.size", "img.size", "img.size", "img.size", "img.mean().mean", "img_hat.view.view", "img_hat.view.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "img.mean().mean.expand_as", "img.mean"], "function", ["None"], ["def", "compute_mean_covariance", "(", "img", ")", ":", "\n", "    ", "batch_size", "=", "img", ".", "size", "(", "0", ")", "\n", "channel_num", "=", "img", ".", "size", "(", "1", ")", "\n", "height", "=", "img", ".", "size", "(", "2", ")", "\n", "width", "=", "img", ".", "size", "(", "3", ")", "\n", "num_pixels", "=", "height", "*", "width", "\n", "\n", "# batch_size * channel_num * 1 * 1", "\n", "mu", "=", "img", ".", "mean", "(", "2", ",", "keepdim", "=", "True", ")", ".", "mean", "(", "3", ",", "keepdim", "=", "True", ")", "\n", "\n", "# batch_size * channel_num * num_pixels", "\n", "img_hat", "=", "img", "-", "mu", ".", "expand_as", "(", "img", ")", "\n", "img_hat", "=", "img_hat", ".", "view", "(", "batch_size", ",", "channel_num", ",", "num_pixels", ")", "\n", "# batch_size * num_pixels * channel_num", "\n", "img_hat_transpose", "=", "img_hat", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# batch_size * channel_num * channel_num", "\n", "covariance", "=", "torch", ".", "bmm", "(", "img_hat", ",", "img_hat_transpose", ")", "\n", "covariance", "=", "covariance", "/", "num_pixels", "\n", "\n", "return", "mu", ",", "covariance", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.KL_loss": [[51, 56], ["mu.pow().add_().mul_().add_().add_", "torch.mean().mul_", "torch.mean().mul_", "torch.mean().mul_", "torch.mean().mul_", "mu.pow().add_().mul_().add_", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "mu.pow().add_().mul_", "mu.pow().add_", "logvar.exp", "mu.pow"], "function", ["None"], ["", "def", "KL_loss", "(", "mu", ",", "logvar", ")", ":", "\n", "# -0.5 * sum(1 + log(sigma^2) - mu^2 - sigma^2)", "\n", "    ", "KLD_element", "=", "mu", ".", "pow", "(", "2", ")", ".", "add_", "(", "logvar", ".", "exp", "(", ")", ")", ".", "mul_", "(", "-", "1", ")", ".", "add_", "(", "1", ")", ".", "add_", "(", "logvar", ")", "\n", "KLD", "=", "torch", ".", "mean", "(", "KLD_element", ")", ".", "mul_", "(", "-", "0.5", ")", "\n", "return", "KLD", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.weights_init": [[58, 69], ["classname.find", "torch.init.orthogonal", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_", "classname.find", "torch.init.orthogonal", "m.bias.data.fill_"], "function", ["None"], ["", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "orthogonal", "(", "m", ".", "weight", ".", "data", ",", "1.0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "orthogonal", "(", "m", ".", "weight", ".", "data", ",", "1.0", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.load_params": [[71, 74], ["zip", "model.parameters", "p.data.copy_"], "function", ["None"], ["", "", "", "def", "load_params", "(", "model", ",", "new_param", ")", ":", "\n", "    ", "for", "p", ",", "new_p", "in", "zip", "(", "model", ".", "parameters", "(", ")", ",", "new_param", ")", ":", "\n", "        ", "p", ".", "data", ".", "copy_", "(", "new_p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.copy_G_params": [[76, 79], ["copy.deepcopy", "list", "model.parameters"], "function", ["None"], ["", "", "def", "copy_G_params", "(", "model", ")", ":", "\n", "    ", "flatten", "=", "deepcopy", "(", "list", "(", "p", ".", "data", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", ")", "\n", "return", "flatten", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.compute_inception_score": [[81, 93], ["six.moves.range", "numpy.mean", "scores.append", "numpy.mean", "numpy.std", "numpy.sum", "numpy.exp", "numpy.log", "numpy.log", "numpy.expand_dims", "numpy.mean"], "function", ["None"], ["", "def", "compute_inception_score", "(", "predictions", ",", "num_splits", "=", "1", ")", ":", "\n", "# print('predictions', predictions.shape)", "\n", "    ", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_splits", ")", ":", "\n", "        ", "istart", "=", "i", "*", "predictions", ".", "shape", "[", "0", "]", "//", "num_splits", "\n", "iend", "=", "(", "i", "+", "1", ")", "*", "predictions", ".", "shape", "[", "0", "]", "//", "num_splits", "\n", "part", "=", "predictions", "[", "istart", ":", "iend", ",", ":", "]", "\n", "kl", "=", "part", "*", "(", "np", ".", "log", "(", "part", ")", "-", "np", ".", "log", "(", "np", ".", "expand_dims", "(", "np", ".", "mean", "(", "part", ",", "0", ")", ",", "0", ")", ")", ")", "\n", "kl", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "kl", ",", "1", ")", ")", "\n", "scores", ".", "append", "(", "np", ".", "exp", "(", "kl", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "scores", ")", ",", "np", ".", "std", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.negative_log_posterior_probability": [[95, 106], ["six.moves.range", "numpy.mean", "scores.append", "numpy.mean", "numpy.std", "numpy.log", "numpy.max"], "function", ["None"], ["", "def", "negative_log_posterior_probability", "(", "predictions", ",", "num_splits", "=", "1", ")", ":", "\n", "# print('predictions', predictions.shape)", "\n", "    ", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_splits", ")", ":", "\n", "        ", "istart", "=", "i", "*", "predictions", ".", "shape", "[", "0", "]", "//", "num_splits", "\n", "iend", "=", "(", "i", "+", "1", ")", "*", "predictions", ".", "shape", "[", "0", "]", "//", "num_splits", "\n", "part", "=", "predictions", "[", "istart", ":", "iend", ",", ":", "]", "\n", "result", "=", "-", "1.", "*", "np", ".", "log", "(", "np", ".", "max", "(", "part", ",", "1", ")", ")", "\n", "result", "=", "np", ".", "mean", "(", "result", ")", "\n", "scores", ".", "append", "(", "result", ")", "\n", "", "return", "np", ".", "mean", "(", "scores", ")", ",", "np", ".", "std", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.load_network": [[110, 192], ["model.G_NET", "torch.nn.DataParallel.apply", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "print", "model.encoder_resnet", "enc.to.res.named_parameters", "enc.to.to", "six.moves.range", "print", "model.INCEPTION_V3", "inception_model.cuda.eval", "netsD.append", "netsD.append", "netsD.append", "netsD.append", "netsD.append", "len", "netsD[].apply", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "len", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel.load_state_dict", "print", "miscc.config.cfg.TRAIN.NET_G.rfind", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "enc.to.load_state_dict", "six.moves.range", "enc.to.cuda", "torch.nn.DataParallel.cuda", "six.moves.range", "inception_model.cuda.cuda", "len", "model.D_NET64", "model.D_NET128", "model.D_NET256", "model.D_NET512", "model.D_NET1024", "miscc.config.cfg.TRAIN.NET_G.rfind", "int", "len", "os.path.join", "print", "torch.load", "torch.load", "torch.load", "torch.load", "netsD[].load_state_dict", "len", "netsD[].cuda", "int"], "function", ["None"], ["", "def", "load_network", "(", "gpus", ",", "path", ")", ":", "\n", "#enc = comrec1()", "\n", "#enc, input_size = img_models.initialize_torchvision_model(model_name, ft_vector_dim, feature_extract, device=device, use_pretrained=use_pretrained, vae=vae)", "\n", "#enc = torch.nn.DataParallel(enc, device_ids=gpus)", "\n", "#enc.apply(weights_init)", "\n", "    ", "netG", "=", "G_NET", "(", ")", "\n", "#netG = G_NET1()", "\n", "netG", ".", "apply", "(", "weights_init", ")", "\n", "netG", "=", "torch", ".", "nn", ".", "DataParallel", "(", "netG", ",", "device_ids", "=", "gpus", ")", "\n", "print", "(", "netG", ")", "\n", "#enc = models.resnet50(pretrained=True)", "\n", "#for param in enc.parameters():", "\n", "#       param.requires_grad = False", "\n", "#num_ftrs = enc.fc.in_features", "\n", "#enc.fc = nn.Linear(num_ftrs, 1024)", "\n", "\n", "\n", "enc", "=", "encoder_resnet", "(", ")", "\n", "for", "name", ",", "param", "in", "enc", ".", "res", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "name", "[", ":", "2", "]", "==", "'fc'", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "else", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "enc", "=", "enc", ".", "to", "(", "device", ")", "\n", "\n", "netsD", "=", "[", "]", "\n", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "0", ":", "\n", "        ", "netsD", ".", "append", "(", "D_NET64", "(", ")", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "1", ":", "\n", "        ", "netsD", ".", "append", "(", "D_NET128", "(", ")", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "2", ":", "\n", "        ", "netsD", ".", "append", "(", "D_NET256", "(", ")", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "3", ":", "\n", "        ", "netsD", ".", "append", "(", "D_NET512", "(", ")", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "4", ":", "\n", "        ", "netsD", ".", "append", "(", "D_NET1024", "(", ")", ")", "\n", "# TODO: if cfg.TREE.BRANCH_NUM > 5:", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "netsD", ")", ")", ":", "\n", "        ", "netsD", "[", "i", "]", ".", "apply", "(", "weights_init", ")", "\n", "netsD", "[", "i", "]", "=", "torch", ".", "nn", ".", "DataParallel", "(", "netsD", "[", "i", "]", ",", "device_ids", "=", "gpus", ")", "\n", "# print(netsD[i])", "\n", "", "print", "(", "'# of netsD'", ",", "len", "(", "netsD", ")", ")", "\n", "\n", "count", "=", "0", "\n", "if", "cfg", ".", "TRAIN", ".", "NET_G", "!=", "''", ":", "\n", "# example cfg.TRAIN.NET_G = ", "\n", "        ", "Gpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "cfg", ".", "TRAIN", ".", "NET_G", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Gpath", ")", "\n", "netG", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "#Epath = os.path.join(path, 'encG.pth' )", "\n", "#checkpoint = torch.load(Epath)", "\n", "#enc.load_state_dict(checkpoint['state_dict'])", "\n", "\n", "print", "(", "'Load '", ",", "cfg", ".", "TRAIN", ".", "NET_G", ")", "\n", "\n", "istart", "=", "cfg", ".", "TRAIN", ".", "NET_G", ".", "rfind", "(", "'_'", ")", "+", "1", "\n", "iend", "=", "cfg", ".", "TRAIN", ".", "NET_G", ".", "rfind", "(", "'.'", ")", "\n", "count", "=", "cfg", ".", "TRAIN", ".", "NET_G", "[", "istart", ":", "iend", "]", "\n", "Epath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'encG_%d.pth'", "%", "int", "(", "count", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Epath", ")", "\n", "enc", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "count", "=", "int", "(", "count", ")", "+", "1", "\n", "\n", "", "if", "cfg", ".", "TRAIN", ".", "NET_D", "!=", "''", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "netsD", ")", ")", ":", "\n", "            ", "Dpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'%s%d.pth'", "%", "(", "cfg", ".", "TRAIN", ".", "NET_D", ",", "i", ")", ")", "\n", "print", "(", "'Load %s_%d.pth'", "%", "(", "cfg", ".", "TRAIN", ".", "NET_D", ",", "i", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Dpath", ")", "\n", "netsD", "[", "i", "]", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "", "", "inception_model", "=", "INCEPTION_V3", "(", ")", "\n", "\n", "if", "cfg", ".", "CUDA", ":", "\n", "        ", "enc", ".", "cuda", "(", ")", "\n", "netG", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "netsD", ")", ")", ":", "\n", "            ", "netsD", "[", "i", "]", ".", "cuda", "(", ")", "\n", "", "inception_model", "=", "inception_model", ".", "cuda", "(", ")", "\n", "", "inception_model", ".", "eval", "(", ")", "\n", "\n", "return", "enc", ",", "netG", ",", "netsD", ",", "len", "(", "netsD", ")", ",", "inception_model", ",", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.optimizerToDevice": [[193, 199], ["optimizer.state.values", "state.items", "isinstance", "v.to"], "function", ["None"], ["", "def", "optimizerToDevice", "(", "optimizer", ")", ":", "\n", "    ", "for", "state", "in", "optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "state", "[", "k", "]", "=", "v", ".", "to", "(", "device", ")", "\n", "", "", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.define_optimizers": [[200, 239], ["len", "six.moves.range", "torch.Adam", "torch.Adam", "optimizersD.append", "os.path.join", "print", "torch.load", "torch.load", "torch.load", "torch.load", "optimizerToDevice.load_state_dict", "trainer.optimizerToDevice", "six.moves.range", "netsD[].parameters", "list", "list", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "print", "optimizersD[].load_state_dict", "trainer.optimizerToDevice", "enc.parameters", "netG.parameters"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.optimizerToDevice", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.optimizerToDevice"], ["", "def", "define_optimizers", "(", "enc", ",", "netG", ",", "netsD", ",", "path", ")", ":", "\n", "    ", "optimizersD", "=", "[", "]", "\n", "num_Ds", "=", "len", "(", "netsD", ")", "\n", "for", "i", "in", "range", "(", "num_Ds", ")", ":", "\n", "        ", "opt", "=", "optim", ".", "Adam", "(", "netsD", "[", "i", "]", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "DISCRIMINATOR_LR", ",", "\n", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "optimizersD", ".", "append", "(", "opt", ")", "\n", "\n", "# G_opt_paras = []", "\n", "# for p in netG.parameters():", "\n", "#     if p.requires_grad:", "\n", "#         G_opt_paras.append(p)", "\n", "\n", "", "optimizerG", "=", "optim", ".", "Adam", "(", "list", "(", "enc", ".", "parameters", "(", ")", ")", "+", "list", "(", "netG", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "GENERATOR_LR", ",", "\n", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "\"\"\"\n    optimizerG = optim.Adam( netG.parameters() ,\n                            lr=cfg.TRAIN.GENERATOR_LR,\n                            betas=(0.5, 0.999))\n    \"\"\"", "\n", "if", "cfg", ".", "TRAIN", ".", "NET_G", "!=", "''", ":", "\n", "        ", "Gpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "cfg", ".", "TRAIN", ".", "NET_G", ")", "\n", "print", "(", "'loading optimizer from '", ",", "Gpath", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Gpath", ")", "\n", "optimizerG", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "optimizerG", "=", "optimizerToDevice", "(", "optimizerG", ")", "\n", "", "if", "cfg", ".", "TRAIN", ".", "NET_D", "!=", "''", ":", "\n", "        ", "for", "i", "in", "range", "(", "num_Ds", ")", ":", "\n", "            ", "Dpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'%s%d.pth'", "%", "(", "cfg", ".", "TRAIN", ".", "NET_D", ",", "i", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Dpath", ")", "\n", "print", "(", "'loading optimizer from '", ",", "Dpath", ")", "\n", "optimizersD", "[", "i", "]", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "optimizersD", "[", "i", "]", "=", "optimizerToDevice", "(", "optimizersD", "[", "i", "]", ")", "\n", "\n", "\n", "\n", "", "", "return", "optimizerG", ",", "optimizersD", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.save_model": [[241, 268], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "six.moves.range", "print", "enc.state_dict", "optimizerG.state_dict", "netG.state_dict", "optimizerG.state_dict", "len", "torch.save", "torch.save", "torch.save", "torch.save", "netD.state_dict", "optimizersD[].state_dict"], "function", ["None"], ["", "def", "save_model", "(", "enc", ",", "avg_param_E", ",", "netG", ",", "optimizerG", ",", "avg_param_G", ",", "netsD", ",", "optimizersD", ",", "epoch", ",", "model_dir", ")", ":", "\n", "#load_params(netG, avg_param_G)", "\n", "#load_params(enc, avg_param_E)", "\n", "\n", "    ", "stateE", "=", "{", "'state_dict'", ":", "enc", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizerG", ".", "state_dict", "(", ")", "}", "\n", "\n", "torch", ".", "save", "(", "\n", "stateE", ",", "\n", "'%s/encG_%d.pth'", "%", "(", "model_dir", ",", "epoch", ")", ")", "\n", "\n", "\n", "stateG", "=", "{", "'state_dict'", ":", "netG", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizerG", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "\n", "stateG", ",", "\n", "'%s/netG_%d.pth'", "%", "(", "model_dir", ",", "epoch", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "netsD", ")", ")", ":", "\n", "        ", "netD", "=", "netsD", "[", "i", "]", "\n", "netD", "=", "netsD", "[", "i", "]", "\n", "stateD", "=", "{", "'state_dict'", ":", "netD", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizersD", "[", "i", "]", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "\n", "stateD", ",", "\n", "'%s/netD%d.pth'", "%", "(", "model_dir", ",", "i", ")", ")", "\n", "", "print", "(", "'Save G/Ds models.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.trainer.save_img_results": [[270, 306], ["torchvision.save_image", "torchvision.make_grid().numpy", "numpy.transpose", "real_img_set.astype.astype", "tensorboardX.summary.image", "print", "summary_writer.add_summary", "print", "six.moves.range", "torchvision.save_image", "torchvision.make_grid().cpu().numpy", "numpy.transpose", "fake_img_set.astype.astype", "tensorboardX.summary.image", "summary_writer.add_summary", "summary_writer.flush", "torchvision.make_grid", "torchvision.make_grid().cpu", "torchvision.make_grid"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.Logger.flush"], ["", "def", "save_img_results", "(", "imgs_tcpu", ",", "fake_imgs", ",", "num_imgs", ",", "\n", "count", ",", "image_dir", ",", "summary_writer", ")", ":", "\n", "    ", "num", "=", "cfg", ".", "TRAIN", ".", "VIS_COUNT", "\n", "\n", "# The range of real_img (i.e., self.imgs_tcpu[i][0:num])", "\n", "# is changed to [0, 1] by function vutils.save_image", "\n", "real_img", "=", "imgs_tcpu", "[", "-", "1", "]", "[", "0", ":", "num", "]", "\n", "vutils", ".", "save_image", "(", "\n", "real_img", ",", "'%s/real_samples.png'", "%", "(", "image_dir", ")", ",", "\n", "normalize", "=", "True", ")", "\n", "real_img_set", "=", "vutils", ".", "make_grid", "(", "real_img", ")", ".", "numpy", "(", ")", "\n", "real_img_set", "=", "np", ".", "transpose", "(", "real_img_set", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "real_img_set", "=", "real_img_set", "*", "255", "\n", "real_img_set", "=", "real_img_set", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "sup_real_img", "=", "summary", ".", "image", "(", "'real_img'", ",", "real_img_set", ",", "dataformats", "=", "'HWC'", ")", "\n", "print", "(", "'real image saved'", ")", "\n", "summary_writer", ".", "add_summary", "(", "sup_real_img", ",", "count", ")", "\n", "\n", "print", "(", "'generated image saved'", ")", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "        ", "fake_img", "=", "fake_imgs", "[", "i", "]", "[", "0", ":", "num", "]", "\n", "# The range of fake_img.data (i.e., self.fake_imgs[i][0:num])", "\n", "# is still [-1. 1]...", "\n", "vutils", ".", "save_image", "(", "\n", "fake_img", ".", "data", ",", "'%s/count_%09d_fake_samples%d.png'", "%", "\n", "(", "image_dir", ",", "count", ",", "i", ")", ",", "normalize", "=", "True", ")", "\n", "\n", "fake_img_set", "=", "vutils", ".", "make_grid", "(", "fake_img", ".", "data", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "fake_img_set", "=", "np", ".", "transpose", "(", "fake_img_set", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "fake_img_set", "=", "(", "fake_img_set", "+", "1", ")", "*", "255", "/", "2", "\n", "fake_img_set", "=", "fake_img_set", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "sup_fake_img", "=", "summary", ".", "image", "(", "'fake_img%d'", "%", "i", ",", "fake_img_set", ",", "dataformats", "=", "'HWC'", ")", "\n", "summary_writer", ".", "add_summary", "(", "sup_fake_img", ",", "count", ")", "\n", "summary_writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganIT.NetG.__init__": [[134, 137], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "decoder", ")", ":", "\n", "        ", "super", "(", "NetG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "decoder", "=", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganIT.NetG.forward": [[138, 141], ["mmd_ganIT.NetG.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input1", ")", ":", "\n", "        ", "output", "=", "self", ".", "decoder", "(", "input1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganIT.NetD.__init__": [[148, 152], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", "NetD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "decoder", "=", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganIT.NetD.forward": [[153, 160], ["mmd_ganIT.NetD.encoder", "mmd_ganIT.NetD.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input1", ")", ":", "\n", "        ", "f_enc_X", "=", "self", ".", "encoder", "(", "input1", ")", "\n", "f_dec_X", "=", "self", ".", "decoder", "(", "f_enc_X", ")", "\n", "\n", "#f_enc_X = f_enc_X.view(input.size(0), -1)", "\n", "# f_dec_X = f_dec_X.view(input.size(0), -1)", "\n", "return", "f_enc_X", ",", "f_dec_X", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganIT.ONE_SIDED.__init__": [[163, 168], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ONE_SIDED", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "main", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "main", "=", "main", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganIT.ONE_SIDED.forward": [[169, 173], ["mmd_ganIT.ONE_SIDED.main", "mmd_ganIT.ONE_SIDED.mean"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_lsun.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "main", "(", "-", "input", ")", "\n", "output", "=", "-", "output", ".", "mean", "(", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganIT.norm_ip": [[38, 42], ["img.add_().div_.clamp_", "img.add_().div_.add_().div_", "img.add_().div_.add_"], "function", ["None"], ["def", "norm_ip", "(", "img", ",", "min1", ",", "max1", ")", ":", "\n", "    ", "img", "=", "img", ".", "clamp_", "(", "min", "=", "min1", ",", "max", "=", "max1", ")", "\n", "img", "=", "img", ".", "add_", "(", "-", "min1", ")", ".", "div_", "(", "max1", "-", "min1", "+", "1e-5", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganIT.norm_range": [[43, 49], ["mmd_ganIT.norm_ip", "mmd_ganIT.norm_ip", "float", "float", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.norm_ip", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.norm_ip"], ["", "def", "norm_range", "(", "t", ",", "range1", "=", "None", ")", ":", "\n", "    ", "if", "range1", "is", "not", "None", ":", "\n", "        ", "img1", "=", "norm_ip", "(", "t", ",", "range1", "[", "0", "]", ",", "range1", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "img1", "=", "norm_ip", "(", "t", ",", "float", "(", "torch", ".", "min", "(", "t", ")", ")", ",", "float", "(", "torch", ".", "max", "(", "t", ")", ")", ")", "\n", "", "return", "img1", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganIT.mkdir_p": [[50, 58], ["os.makedirs", "os.path.isdir"], "function", ["None"], ["", "def", "mkdir_p", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "        ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganIT.adjust_padding": [[175, 186], ["torch.LongTensor.numpy", "torch.LongTensor.numpy", "max", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "temp.append"], "function", ["None"], ["", "", "def", "adjust_padding", "(", "cap", ",", "len1", ")", ":", "\n", "    ", "cap", "=", "cap", ".", "numpy", "(", ")", "\n", "len1", "=", "len1", ".", "numpy", "(", ")", "\n", "max_len", "=", "max", "(", "len1", ")", "\n", "temp", "=", "[", "]", "\n", "for", "i", "in", "cap", ":", "\n", "        ", "j", "=", "i", "[", "0", ":", "max_len", "]", "\n", "temp", ".", "append", "(", "j", ")", "\n", "", "cap", "=", "torch", ".", "LongTensor", "(", "temp", ")", "\n", "len1", "=", "torch", ".", "LongTensor", "(", "len1", ")", "\n", "return", "cap", ",", "len1", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganIT.optimizerToDevice": [[187, 193], ["optimizer.state.values", "state.items", "isinstance", "v.to"], "function", ["None"], ["", "def", "optimizerToDevice", "(", "optimizer", ")", ":", "\n", "    ", "for", "state", "in", "optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "state", "[", "k", "]", "=", "v", ".", "to", "(", "device", ")", "\n", "", "", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganIT.define_optimizers": [[194, 230], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "netD.parameters", "netG.parameters", "os.path.join", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "optimizerToDevice.load_state_dict", "mmd_ganIT.optimizerToDevice", "GEN_PATH.rfind", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "optimizerToDevice.load_state_dict", "mmd_ganIT.optimizerToDevice", "GEN_PATH.rfind", "int"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.optimizerToDevice", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.optimizerToDevice"], ["", "def", "define_optimizers", "(", "netG", ",", "netD", ",", "path", ")", ":", "\n", "    ", "optimizerD", "=", "torch", ".", "optim", ".", "Adam", "(", "netD", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "2e-4", ",", "\n", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "\n", "# G_opt_paras = []", "\n", "# for p in netG.parameters():", "\n", "#     if p.requires_grad:", "\n", "#         G_opt_paras.append(p)", "\n", "optimizerG", "=", "torch", ".", "optim", ".", "Adam", "(", "netG", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "2e-4", ",", "\n", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "\n", "#optimizerG = torch.optim.RMSprop(netG.parameters(), lr=args.lr)", "\n", "#optimizerD = torch.optim.RMSprop(netD.parameters(), lr=args.lr)", "\n", "\n", "count", "=", "0", "\n", "if", "GEN_PATH", "!=", "''", ":", "\n", "# example cfg.TRAIN.NET_G = ", "\n", "        ", "Gpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "GEN_PATH", ")", "\n", "print", "(", "'loading optimizer from '", ",", "Gpath", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Gpath", ")", "\n", "optimizerG", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "optimizerG", "=", "optimizerToDevice", "(", "optimizerG", ")", "\n", "istart", "=", "GEN_PATH", ".", "rfind", "(", "'_'", ")", "+", "1", "\n", "iend", "=", "GEN_PATH", ".", "rfind", "(", "'.'", ")", "\n", "count", "=", "GEN_PATH", "[", "istart", ":", "iend", "]", "\n", "count", "=", "int", "(", "count", ")", "+", "1", "\n", "\n", "", "if", "DIS_PATH", "!=", "''", ":", "\n", "            ", "Dpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "DIS_PATH", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Dpath", ")", "\n", "print", "(", "'loading optimizer from '", ",", "Dpath", ")", "\n", "optimizerD", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "optimizerD", "=", "optimizerToDevice", "(", "optimizerD", ")", "\n", "", "return", "optimizerG", ",", "optimizerD", ",", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganIT.load_network": [[231, 292], ["models.stack_gan2.model1.G_NET1", "torch.nn.DataParallel.apply", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "models.stack_gan2.model1.MAP_NET_IT2", "models.stack_gan2.model1.MAP_NET_TI2", "models.stack_gan2.model1.MAP_NET_IT2", "mmd_ganIT.NetG", "mmd_ganIT.NetD", "mmd_ganIT.ONE_SIDED", "print", "print", "print", "NetG.apply", "NetD.apply", "ONE_SIDED.apply", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "NetG.load_state_dict", "print", "os.path.join", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "NetD.load_state_dict", "torch.nn.DataParallel.cuda", "NetG.cuda", "NetD.cuda", "ONE_SIDED.cuda"], "function", ["None"], ["", "def", "load_network", "(", "path", ")", ":", "\n", "####################Image deoder################################", "\n", "    ", "dec", "=", "G_NET1", "(", ")", "\n", "dec", ".", "apply", "(", "base_module", ".", "weights_init", ")", "\n", "dec", "=", "torch", ".", "nn", ".", "DataParallel", "(", "dec", ",", "device_ids", "=", "gpus", ")", "\n", "#################################################################", "\n", "# construct encoder/decoder modules", "\n", "#hidden_dim = args.nz", "\n", "G_decoder", "=", "MAP_NET_IT2", "(", ")", "# This the Actual Generator ", "\n", "D_encoder", "=", "MAP_NET_TI2", "(", ")", "#Discriminator should be an Auto encoder without noise", "\n", "D_decoder", "=", "MAP_NET_IT2", "(", ")", "#", "\n", "\n", "netG", "=", "NetG", "(", "G_decoder", ")", "\n", "netD", "=", "NetD", "(", "D_encoder", ",", "D_decoder", ")", "\n", "one_sided", "=", "ONE_SIDED", "(", ")", "\n", "print", "(", "\"netG:\"", ",", "netG", ")", "\n", "print", "(", "\"netD:\"", ",", "netD", ")", "\n", "print", "(", "\"oneSide:\"", ",", "one_sided", ")", "\n", "\n", "netG", ".", "apply", "(", "base_module", ".", "weights_init", ")", "\n", "netD", ".", "apply", "(", "base_module", ".", "weights_init", ")", "\n", "one_sided", ".", "apply", "(", "base_module", ".", "weights_init", ")", "\n", "\n", "\n", "\n", "if", "GEN_PATH", "!=", "''", ":", "\n", "# example cfg.TRAIN.NET_G = ", "\n", "        ", "Gpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "GEN_PATH", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Gpath", ")", "\n", "netG", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "#Epath = os.path.join(path, 'encG.pth' )", "\n", "#checkpoint = torch.load(Epath)", "\n", "#enc.load_state_dict(checkpoint['state_dict'])", "\n", "\n", "print", "(", "'Load '", ",", "GEN_PATH", ")", "\n", "\n", "#istart = IT_GEN_PATH('_') + 1", "\n", "#iend = IT_GEN_PATH.rfind('.')", "\n", "#count = IT_GEN_PATH[istart:iend]", "\n", "#count = int(count) + 1", "\n", "\n", "", "if", "DIS_PATH", "!=", "''", ":", "\n", "            ", "Dpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "DIS_PATH", ")", "\n", "print", "(", "'Load '", ",", "DIS_PATH", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Dpath", ")", "\n", "netD", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "\n", "", "if", "args", ".", "cuda", ":", "\n", "        ", "dec", ".", "cuda", "(", ")", "\n", "netG", ".", "cuda", "(", ")", "\n", "netD", ".", "cuda", "(", ")", "\n", "one_sided", ".", "cuda", "(", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "", "return", "dec", ",", "netG", ",", "netD", ",", "one_sided", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganIT.initialize_model": [[293, 325], ["models.AutoEncoderD", "model_ft.to.to", "mmd_ganIT.load_network", "models.stack_gan2.model1.encoder_resnet1", "enc.to.to", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "enc.to.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "dec.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model_ft.to.load_state_dict"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.load_network"], ["", "def", "initialize_model", "(", "model_name", ",", "config", ",", "embeddings_matrix", ")", ":", "\n", "\n", "    ", "model_ft", "=", "text_models", ".", "AutoEncoderD", "(", "config", ",", "embeddings_matrix", ")", "\n", "model_ft", "=", "model_ft", ".", "to", "(", "device", ")", "\n", "\n", "\n", "dec", ",", "gen", ",", "dis", ",", "one_sided", "=", "load_network", "(", "model_dir", ")", "\n", "############################################################", "\n", "#enc = torch_models.resnet50(pretrained=True)", "\n", "#num_ftrs = enc.fc.in_features", "\n", "#enc.fc = nn.Linear(num_ftrs, 1024)", "\n", "#enc = enc.to(device)", "\n", "#############################################################", "\n", "enc", "=", "encoder_resnet1", "(", ")", "\n", "enc", "=", "enc", ".", "to", "(", "device", ")", "\n", "\n", "print", "(", "\"=> loading Image encoder from '{}'\"", ".", "format", "(", "encoder_path", ")", ")", "\n", "encoder", "=", "torch", ".", "load", "(", "encoder_path", ")", "\n", "enc", ".", "load_state_dict", "(", "encoder", "[", "'state_dict'", "]", ")", "\n", "\n", "\n", "print", "(", "\"=> loading Image decoder from '{}'\"", ".", "format", "(", "dec_path", ")", ")", "\n", "decoder", "=", "torch", ".", "load", "(", "dec_path", ")", "\n", "dec", ".", "load_state_dict", "(", "decoder", "[", "'state_dict'", "]", ")", "\n", "\n", "\n", "print", "(", "\"=> loading text autoencoder from '{}'\"", ".", "format", "(", "text_autoencoder_path", ")", ")", "\n", "text_autoencoder", "=", "torch", ".", "load", "(", "text_autoencoder_path", ")", "\n", "model_ft", ".", "load_state_dict", "(", "text_autoencoder", "[", "'state_dict'", "]", ")", "\n", "\n", "\n", "return", "model_ft", ",", "enc", ",", "dec", ",", "gen", ",", "dis", ",", "one_sided", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganIT.save_results": [[326, 352], ["mmd_ganIT.mkdir_p", "open", "zip", "open.close", "os.path.join", "os.path.join", "data.resultwriter.ResultWriter", "os.path.join", "mmd_ganIT.norm_range", "ii.cpu().numpy().transpose.cpu().numpy().transpose", "data.resultwriter.ResultWriter.write_image_with_text", "print", "ii.cpu().numpy().transpose.cpu().numpy", "ii.cpu().numpy().transpose.cpu"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.miscc.utils.mkdir_p", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.norm_range", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.resultwriter.ResultWriter.write_image_with_text"], ["", "def", "save_results", "(", "imgs_input", ",", "text_input", ",", "text_generated", ",", "count", ")", ":", "\n", "    ", "if", "count", "!=", "-", "1", ":", "#for validation will be saved in a single folder", "\n", "        ", "img_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'imgdir%d'", "%", "count", ")", "\n", "img_txt_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'imgtxtdir%d'", "%", "count", ")", "\n", "#results_writer_img = ResultWriter(img_dir)", "\n", "results_writer_imgtxt", "=", "ResultWriter", "(", "img_txt_dir", ")", "\n", "\n", "", "else", ":", "\n", "        ", "img_dir", "=", "img_dir_val", "\n", "img_txt_dir", "=", "img_txt_dir_val", "\n", "#results_writer_img = results_writer_img_val", "\n", "results_writer_imgtxt", "=", "results_writer_imgtxt_val", "\n", "", "mkdir_p", "(", "img_dir", ")", "\n", "\n", "fg", "=", "open", "(", "os", ".", "path", ".", "join", "(", "img_dir", ",", "'generated.txt'", ")", ",", "'a+'", ")", "\n", "#fo =open(os.path.join(img_dir, 'output.txt'), 'w+')", "\n", "for", "ii", ",", "ti", ",", "tg", "in", "zip", "(", "imgs_input", ",", "text_input", ",", "text_generated", ")", ":", "\n", "        ", "ii", "=", "norm_range", "(", "ii", ")", "#normalize to (0,1)", "\n", "#io = norm_range(io)#normalize to (0,1)", "\n", "ii", "=", "ii", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "#in order to use plt.imshow the channel should be the last dimention", "\n", "#io = io.detach().cpu().numpy().transpose(1,2,0)", "\n", "#results_writer_img.write_images(io, ii)", "\n", "results_writer_imgtxt", ".", "write_image_with_text", "(", "ii", ",", "tg", ")", "\n", "print", "(", "ti", ",", "'\\t'", ",", "tg", ",", "file", "=", "fg", ")", "\n", "#print(ti,'\\t',to, file = fo)", "\n", "", "fg", ".", "close", "(", ")", "\n", "#fo.close()", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.mmd_ganIT.save_model": [[354, 372], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "netG.state_dict", "optimizerG.state_dict", "netD.state_dict", "optimizerD.state_dict"], "function", ["None"], ["", "def", "save_model", "(", "netG", ",", "optimizerG", ",", "netD", ",", "optimizerD", ",", "epoch", ",", "model_dir", ")", ":", "\n", "#load_params(netG, avg_param_G)", "\n", "#load_params(enc, avg_param_E)", "\n", "\n", "\n", "\n", "\n", "    ", "stateG", "=", "{", "'state_dict'", ":", "netG", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizerG", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "\n", "stateG", ",", "\n", "'%s/netG_%d.pth'", "%", "(", "model_dir", ",", "epoch", ")", ")", "\n", "stateD", "=", "{", "'state_dict'", ":", "netD", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizerD", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "\n", "stateD", ",", "\n", "'%s/netD_%d.pth'", "%", "(", "model_dir", ",", "epoch", ")", ")", "\n", "print", "(", "'Save G/Ds models...count:%d'", "%", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.INCEPTION_V3.__init__": [[16, 27], ["torch.Module.__init__", "torchvision.models.inception_v3", "torch.load_url", "torch.load_url", "torch.load_url", "torch.load_url", "torch.load_url", "model.INCEPTION_V3.model.load_state_dict", "model.INCEPTION_V3.model.parameters", "print"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "INCEPTION_V3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "models", ".", "inception_v3", "(", ")", "\n", "url", "=", "'https://download.pytorch.org/models/inception_v3_google-1a9a5a14.pth'", "\n", "# print(next(model.parameters()).data)", "\n", "state_dict", "=", "model_zoo", ".", "load_url", "(", "url", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "print", "(", "'Load pretrained model from '", ",", "url", ")", "\n", "# print(next(self.model.parameters()).data)", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.INCEPTION_V3.forward": [[30, 45], ["model.INCEPTION_V3.model", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# [-1.0, 1.0] --> [0, 1.0]", "\n", "        ", "x", "=", "input", "*", "0.5", "+", "0.5", "\n", "# mean=[0.485, 0.456, 0.406] and std=[0.229, 0.224, 0.225]", "\n", "# --> mean = 0, std = 1", "\n", "x", "[", ":", ",", "0", "]", "=", "(", "x", "[", ":", ",", "0", "]", "-", "0.485", ")", "/", "0.229", "\n", "x", "[", ":", ",", "1", "]", "=", "(", "x", "[", ":", ",", "1", "]", "-", "0.456", ")", "/", "0.224", "\n", "x", "[", ":", ",", "2", "]", "=", "(", "x", "[", ":", ",", "2", "]", "-", "0.406", ")", "/", "0.225", "\n", "#", "\n", "# --> fixed-size input: batch x 3 x 299 x 299", "\n", "x", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "299", ",", "299", ")", ",", "mode", "=", "'bilinear'", ")", "(", "x", ")", "\n", "# 299 x 299 x 3", "\n", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "x", "=", "nn", ".", "Softmax", "(", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.GLU.__init__": [[48, 50], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.GLU.forward": [[51, 56], ["x.size", "int", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "nc", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "nc", "%", "2", "==", "0", ",", "'channels dont divide 2!'", "\n", "nc", "=", "int", "(", "nc", "/", "2", ")", "\n", "return", "x", "[", ":", ",", ":", "nc", "]", "*", "F", ".", "sigmoid", "(", "x", "[", ":", ",", "nc", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.ResBlock.__init__": [[87, 95], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model.GLU", "model.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "channel_num", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "channel_num", ",", "channel_num", "*", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel_num", "*", "2", ")", ",", "\n", "GLU", "(", ")", ",", "\n", "conv3x3", "(", "channel_num", ",", "channel_num", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel_num", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.ResBlock.forward": [[98, 103], ["model.ResBlock.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "block", "(", "x", ")", "\n", "out", "+=", "residual", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.CA_NET.__init__": [[108, 114], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.GLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CA_NET", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "t_dim", "=", "cfg", ".", "TEXT", ".", "DIMENSION", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "t_dim", ",", "self", ".", "ef_dim", "*", "4", ",", "bias", "=", "True", ")", "\n", "self", ".", "relu", "=", "GLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.CA_NET.encode": [[115, 120], ["model.CA_NET.relu", "model.CA_NET.fc"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "text_embedding", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "self", ".", "fc", "(", "text_embedding", ")", ")", "\n", "mu", "=", "x", "[", ":", ",", ":", "self", ".", "ef_dim", "]", "\n", "logvar", "=", "x", "[", ":", ",", "self", ".", "ef_dim", ":", "]", "\n", "return", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.CA_NET.reparametrize": [[121, 129], ["logvar.mul().exp_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.FloatTensor().normal_.mul().add_", "torch.FloatTensor().normal_.mul().add_", "torch.FloatTensor().normal_.mul().add_", "torch.FloatTensor().normal_.mul().add_", "torch.FloatTensor().normal_.mul().add_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "logvar.mul", "torch.FloatTensor().normal_.mul", "torch.FloatTensor().normal_.mul", "torch.FloatTensor().normal_.mul", "torch.FloatTensor().normal_.mul", "torch.FloatTensor().normal_.mul", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "logvar.mul().exp_.size", "logvar.mul().exp_.size"], "methods", ["None"], ["", "def", "reparametrize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "std", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "if", "cfg", ".", "CUDA", ":", "\n", "            ", "eps", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "\n", "", "else", ":", "\n", "            ", "eps", "=", "torch", ".", "FloatTensor", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "\n", "", "eps", "=", "Variable", "(", "eps", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.CA_NET.forward": [[130, 134], ["model.CA_NET.encode", "model.CA_NET.reparametrize"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.CA_NET.reparametrize"], ["", "def", "forward", "(", "self", ",", "text_embedding", ")", ":", "\n", "        ", "mu", ",", "logvar", "=", "self", ".", "encode", "(", "text_embedding", ")", "\n", "c_code", "=", "self", ".", "reparametrize", "(", "mu", ",", "logvar", ")", "\n", "return", "c_code", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.INIT_STAGE_G.__init__": [[137, 145], ["torch.Module.__init__", "model.INIT_STAGE_G.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ")", ":", "\n", "        ", "super", "(", "INIT_STAGE_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "in_dim", "=", "cfg", ".", "GAN", ".", "Z_DIM", "+", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "", "else", ":", "\n", "            ", "self", ".", "in_dim", "=", "cfg", ".", "GAN", ".", "Z_DIM", "\n", "", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.INIT_STAGE_G.define_module": [[146, 159], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.upBlock", "model.upBlock", "model.upBlock", "model.upBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "model.GLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "in_dim", "=", "self", ".", "in_dim", "\n", "ngf", "=", "self", ".", "gf_dim", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "ngf", "*", "4", "*", "4", "*", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ngf", "*", "4", "*", "4", "*", "2", ")", ",", "\n", "GLU", "(", ")", ")", "\n", "\n", "\n", "self", ".", "upsample1", "=", "upBlock", "(", "ngf", ",", "ngf", "//", "2", ")", "\n", "self", ".", "upsample2", "=", "upBlock", "(", "ngf", "//", "2", ",", "ngf", "//", "4", ")", "\n", "self", ".", "upsample3", "=", "upBlock", "(", "ngf", "//", "4", ",", "ngf", "//", "8", ")", "\n", "self", ".", "upsample4", "=", "upBlock", "(", "ngf", "//", "8", ",", "ngf", "//", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.INIT_STAGE_G.forward": [[160, 178], ["model.INIT_STAGE_G.fc", "model.INIT_STAGE_G.view", "model.INIT_STAGE_G.upsample1", "model.INIT_STAGE_G.upsample2", "model.INIT_STAGE_G.upsample3", "model.INIT_STAGE_G.upsample4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_code", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "in_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "z_code", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "in_code", "=", "z_code", "\n", "# state size 16ngf x 4 x 4", "\n", "", "out_code", "=", "self", ".", "fc", "(", "in_code", ")", "\n", "out_code", "=", "out_code", ".", "view", "(", "-", "1", ",", "self", ".", "gf_dim", ",", "4", ",", "4", ")", "\n", "# state size 8ngf x 8 x 8", "\n", "out_code", "=", "self", ".", "upsample1", "(", "out_code", ")", "\n", "# state size 4ngf x 16 x 16", "\n", "out_code", "=", "self", ".", "upsample2", "(", "out_code", ")", "\n", "# state size 2ngf x 32 x 32", "\n", "out_code", "=", "self", ".", "upsample3", "(", "out_code", ")", "\n", "# state size ngf x 64 x 64", "\n", "out_code", "=", "self", ".", "upsample4", "(", "out_code", ")", "\n", "\n", "return", "out_code", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.NEXT_STAGE_G.__init__": [[181, 190], ["torch.Module.__init__", "model.NEXT_STAGE_G.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ",", "num_residual", "=", "cfg", ".", "GAN", ".", "R_NUM", ")", ":", "\n", "        ", "super", "(", "NEXT_STAGE_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "", "else", ":", "\n", "            ", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "Z_DIM", "\n", "", "self", ".", "num_residual", "=", "num_residual", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.NEXT_STAGE_G._make_layer": [[191, 196], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "channel_num", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_residual", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "channel_num", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.NEXT_STAGE_G.define_module": [[197, 204], ["model.Block3x3_relu", "model.NEXT_STAGE_G._make_layer", "model.upBlock"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_relu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.NEXT_STAGE_G._make_layer", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ngf", "=", "self", ".", "gf_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "\n", "self", ".", "jointConv", "=", "Block3x3_relu", "(", "ngf", "+", "efg", ",", "ngf", ")", "\n", "self", ".", "residual", "=", "self", ".", "_make_layer", "(", "ResBlock", ",", "ngf", ")", "\n", "self", ".", "upsample", "=", "upBlock", "(", "ngf", ",", "ngf", "//", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.NEXT_STAGE_G.forward": [[205, 218], ["h_code.size", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.NEXT_STAGE_G.jointConv", "model.NEXT_STAGE_G.residual", "model.NEXT_STAGE_G.upsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h_code", ",", "c_code", ")", ":", "\n", "        ", "s_size", "=", "h_code", ".", "size", "(", "2", ")", "\n", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "s_size", ",", "s_size", ")", "\n", "# state size (ngf+egf) x in_size x in_size", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "h_code", ")", ",", "1", ")", "\n", "# state size ngf x in_size x in_size", "\n", "out_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n", "out_code", "=", "self", ".", "residual", "(", "out_code", ")", "\n", "# state size ngf/2 x 2in_size x 2in_size", "\n", "out_code", "=", "self", ".", "upsample", "(", "out_code", ")", "\n", "\n", "return", "out_code", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.GET_IMAGE_G.__init__": [[221, 227], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.conv3x3", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ")", ":", "\n", "        ", "super", "(", "GET_IMAGE_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "self", ".", "img", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "ngf", ",", "3", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.GET_IMAGE_G.forward": [[229, 232], ["model.GET_IMAGE_G.img"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h_code", ")", ":", "\n", "        ", "out_img", "=", "self", ".", "img", "(", "h_code", ")", "\n", "return", "out_img", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.G_NET.__init__": [[235, 239], ["torch.Module.__init__", "model.G_NET.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "G_NET", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "cfg", ".", "GAN", ".", "GF_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.G_NET.define_module": [[240, 259], ["model.CA_NET", "model.INIT_STAGE_G", "model.GET_IMAGE_G", "model.NEXT_STAGE_G", "model.GET_IMAGE_G", "model.NEXT_STAGE_G", "model.GET_IMAGE_G", "model.NEXT_STAGE_G", "model.GET_IMAGE_G", "model.NEXT_STAGE_G", "model.GET_IMAGE_G"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "ca_net", "=", "CA_NET", "(", ")", "\n", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "0", ":", "\n", "            ", "self", ".", "h_net1", "=", "INIT_STAGE_G", "(", "self", ".", "gf_dim", "*", "16", ")", "\n", "self", ".", "img_net1", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "1", ":", "\n", "            ", "self", ".", "h_net2", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", ")", "\n", "self", ".", "img_net2", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "2", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "2", ":", "\n", "            ", "self", ".", "h_net3", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "2", ")", "\n", "self", ".", "img_net3", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "4", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "3", ":", "# Recommended structure (mainly limited by GPU memory), and not test yet", "\n", "            ", "self", ".", "h_net4", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "4", ",", "num_residual", "=", "1", ")", "\n", "self", ".", "img_net4", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "8", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "4", ":", "\n", "            ", "self", ".", "h_net4", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "8", ",", "num_residual", "=", "1", ")", "\n", "self", ".", "img_net4", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.G_NET.forward": [[260, 284], ["model.G_NET.ca_net", "model.G_NET.h_net1", "model.G_NET.img_net1", "fake_imgs.append", "model.G_NET.h_net2", "model.G_NET.img_net2", "fake_imgs.append", "model.G_NET.h_net3", "model.G_NET.img_net3", "fake_imgs.append", "model.G_NET.h_net4", "model.G_NET.img_net4", "fake_imgs.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "z_code", ",", "text_embedding", "=", "None", ")", ":", "\n", "        ", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "text_embedding", "is", "not", "None", ":", "\n", "            ", "c_code", ",", "mu", ",", "logvar", "=", "self", ".", "ca_net", "(", "text_embedding", ")", "\n", "", "else", ":", "\n", "            ", "c_code", ",", "mu", ",", "logvar", "=", "z_code", ",", "None", ",", "None", "\n", "", "fake_imgs", "=", "[", "]", "\n", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "0", ":", "\n", "            ", "h_code1", "=", "self", ".", "h_net1", "(", "z_code", ",", "c_code", ")", "\n", "fake_img1", "=", "self", ".", "img_net1", "(", "h_code1", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img1", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "1", ":", "\n", "            ", "h_code2", "=", "self", ".", "h_net2", "(", "h_code1", ",", "c_code", ")", "\n", "fake_img2", "=", "self", ".", "img_net2", "(", "h_code2", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img2", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "2", ":", "\n", "            ", "h_code3", "=", "self", ".", "h_net3", "(", "h_code2", ",", "c_code", ")", "\n", "fake_img3", "=", "self", ".", "img_net3", "(", "h_code3", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img3", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "3", ":", "\n", "            ", "h_code4", "=", "self", ".", "h_net4", "(", "h_code3", ",", "c_code", ")", "\n", "fake_img4", "=", "self", ".", "img_net4", "(", "h_code4", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img4", ")", "\n", "\n", "", "return", "fake_imgs", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.G_NET1.__init__": [[290, 294], ["torch.Module.__init__", "model.G_NET1.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "G_NET1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "cfg", ".", "GAN", ".", "GF_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.G_NET1.define_module": [[295, 314], ["model.INIT_STAGE_G", "model.GET_IMAGE_G", "model.NEXT_STAGE_G", "model.GET_IMAGE_G", "model.NEXT_STAGE_G", "model.GET_IMAGE_G", "model.NEXT_STAGE_G", "model.GET_IMAGE_G", "model.NEXT_STAGE_G", "model.GET_IMAGE_G"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "#if cfg.GAN.B_CONDITION:", "\n", "#self.ca_net = CA_NET()", "\n", "\n", "        ", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "0", ":", "\n", "            ", "self", ".", "h_net1", "=", "INIT_STAGE_G", "(", "self", ".", "gf_dim", "*", "16", ")", "\n", "self", ".", "img_net1", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "1", ":", "\n", "            ", "self", ".", "h_net2", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", ")", "\n", "self", ".", "img_net2", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "2", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "2", ":", "\n", "            ", "self", ".", "h_net3", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "2", ")", "\n", "self", ".", "img_net3", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "4", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "3", ":", "# Recommended structure (mainly limited by GPU memory), and not test yet", "\n", "            ", "self", ".", "h_net4", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "4", ",", "num_residual", "=", "1", ")", "\n", "self", ".", "img_net4", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "8", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "4", ":", "\n", "            ", "self", ".", "h_net4", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "8", ",", "num_residual", "=", "1", ")", "\n", "self", ".", "img_net4", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.G_NET1.forward": [[315, 341], ["model.G_NET1.h_net1", "model.G_NET1.img_net1", "fake_imgs.append", "model.G_NET1.h_net2", "model.G_NET1.img_net2", "fake_imgs.append", "model.G_NET1.h_net3", "model.G_NET1.img_net3", "fake_imgs.append", "model.G_NET1.h_net4", "model.G_NET1.img_net4", "fake_imgs.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "z_code", ",", "c_code", "=", "None", ")", ":", "\n", "#if cfg.GAN.B_CONDITION and text_embedding is not None:", "\n", "#c_code, mu, logvar = self.ca_net(text_embedding)", "\n", "#else:", "\n", "#   c_code, mu, logvar = z_code, None, None", "\n", "        ", "if", "c_code", "is", "None", ":", "\n", "             ", "c_code", "=", "z_code", "\n", "", "fake_imgs", "=", "[", "]", "\n", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "0", ":", "\n", "            ", "h_code1", "=", "self", ".", "h_net1", "(", "z_code", ",", "c_code", ")", "\n", "fake_img1", "=", "self", ".", "img_net1", "(", "h_code1", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img1", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "1", ":", "\n", "            ", "h_code2", "=", "self", ".", "h_net2", "(", "h_code1", ",", "c_code", ")", "\n", "fake_img2", "=", "self", ".", "img_net2", "(", "h_code2", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img2", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "2", ":", "\n", "            ", "h_code3", "=", "self", ".", "h_net3", "(", "h_code2", ",", "c_code", ")", "\n", "fake_img3", "=", "self", ".", "img_net3", "(", "h_code3", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img3", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "3", ":", "\n", "            ", "h_code4", "=", "self", ".", "h_net4", "(", "h_code3", ",", "c_code", ")", "\n", "fake_img4", "=", "self", ".", "img_net4", "(", "h_code4", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img4", ")", "\n", "\n", "", "return", "fake_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.Interpolate.__init__": [[394, 399], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "mode", ")", ":", "\n", "        ", "super", "(", "Interpolate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "interp", "=", "nn", ".", "functional", ".", "interpolate", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.Interpolate.forward": [[400, 403], ["model.Interpolate.interp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "interp", "(", "x", ",", "size", "=", "self", ".", "size", ",", "mode", "=", "self", ".", "mode", ",", "align_corners", "=", "False", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.com_enc.__init__": [[406, 420], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "com_enc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bottle_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "3", "*", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ",", "HIDDEN", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "def", "encode", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.com_enc.encode": [[420, 428], ["model.com_enc.relu", "model.com_enc.relu", "model.com_enc.bn1", "model.com_enc.conv3", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "model.com_enc.bottle_neck", "model.com_enc.conv1", "model.com_enc.conv2"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "torch", ".", "flatten", "(", "out", ",", "1", ")", "\n", "out", "=", "self", ".", "bottle_neck", "(", "out", ")", "\n", "return", "out", "\n", "", "", "class", "com_dec", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.com_dec.__init__": [[429, 448], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.Interpolate", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "com_dec", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "up_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "HIDDEN", ",", "8", "*", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "self", ".", "deconv0", "=", "nn", ".", "Conv2d", "(", "8", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "interpolate", "=", "Interpolate", "(", "size", "=", "HEIGHT", ",", "mode", "=", "'bicubic'", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "deconv_n", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_n", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "CHANNELS", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "def", "decode", "(", "self", ",", "z", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.com_dec.decode": [[448, 462], ["model.com_dec.up_neck", "model.com_dec.view", "model.com_dec.deconv0", "model.com_dec.interpolate", "model.com_dec.relu", "model.com_dec.relu", "model.com_dec.bn2", "range", "model.com_dec.deconv3", "model.com_dec.deconv1", "model.com_dec.deconv2", "model.com_dec.relu", "model.com_dec.bn_n", "model.com_dec.deconv_n"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "        ", "z", "=", "self", ".", "up_neck", "(", "z", ")", "\n", "z", "=", "z", ".", "view", "(", "-", "1", ",", "8", ",", "(", "HEIGHT", "//", "2", ")", ",", "(", "WIDTH", "//", "2", ")", ")", "\n", "z", "=", "self", ".", "deconv0", "(", "z", ")", "\n", "upscaled_image", "=", "self", ".", "interpolate", "(", "z", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv1", "(", "upscaled_image", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv_n", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn_n", "(", "out", ")", "\n", "", "out", "=", "self", ".", "deconv3", "(", "out", ")", "\n", "final", "=", "upscaled_image", "+", "out", "\n", "return", "final", ",", "out", ",", "upscaled_image", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.comrec1.__init__": [[464, 471], ["torch.Module.__init__", "model.com_enc", "model.com_dec"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "comrec1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "self", ".", "enco", "=", "com_enc", "(", ")", "\n", "self", ".", "deco", "=", "com_dec", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.comrec1.forward": [[473, 477], ["model.comrec1.enco.encode", "model.comrec1.deco.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "com", "=", "self", ".", "enco", ".", "encode", "(", "x", ")", "\n", "final", ",", "out", ",", "upscaled_image", ",", "com_img", "=", "self", ".", "deco", ".", "decode", "(", "com", ")", "\n", "return", "final", ",", "out", ",", "upscaled_image", ",", "com_img", ",", "x", "\n", "########################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.encoder2.__init__": [[479, 484], ["torch.Module.__init__", "model.encoder2.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "encoder2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "64", "# cfg.GAN.GF_DIM", "\n", "self", ".", "in_dim", "=", "1024", "#cfg.TEXT.DIMENSION", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.encoder2.define_module": [[487, 502], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.downBlock", "model.downBlock", "model.downBlock", "model.downBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "model.GLU", "model.CA_NET"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ngf", "=", "16", "*", "self", ".", "gf_dim", "\n", "in_dim", "=", "self", ".", "in_dim", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "gf_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "downsample1", "=", "downBlock", "(", "ngf", "//", "16", ",", "ngf", "//", "8", ")", "\n", "self", ".", "downsample2", "=", "downBlock", "(", "ngf", "//", "8", ",", "ngf", "//", "4", ")", "\n", "self", ".", "downsample3", "=", "downBlock", "(", "ngf", "//", "4", ",", "ngf", "//", "2", ")", "\n", "self", ".", "downsample4", "=", "downBlock", "(", "ngf", "//", "2", ",", "ngf", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ngf", "*", "4", "*", "4", ",", "in_dim", "*", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "in_dim", "*", "2", ")", ",", "\n", "GLU", "(", ")", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "ca_net", "=", "CA_NET", "(", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.encoder2.forward": [[503, 522], ["model.encoder2.relu", "model.encoder2.downsample1", "model.encoder2.downsample2", "model.encoder2.downsample3", "model.encoder2.downsample4", "model.encoder2.view", "model.encoder2.fc", "model.encoder2.conv1", "model.encoder2.ca_net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "\n", "out", "=", "self", ".", "downsample1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "downsample2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "downsample3", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "downsample4", "(", "out", ")", "\n", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "16", "*", "self", ".", "gf_dim", "*", "4", "*", "4", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "out", "is", "not", "None", ":", "\n", "            ", "c_code", ",", "mu", ",", "logvar", "=", "self", ".", "ca_net", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "c_code", ",", "mu", ",", "logvar", "=", "None", ",", "None", ",", "None", "\n", "\n", "", "return", "c_code", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.encoder_resnet1.__init__": [[526, 530], ["torch.Module.__init__", "model.encoder_resnet1.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "encoder_resnet1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_dim", "=", "cfg", ".", "TEXT", ".", "DIMENSION", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.encoder_resnet1.define_module": [[533, 541], ["torchvision.models.resnet50", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.CA_NET", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "in_dim", "=", "self", ".", "in_dim", "\n", "self", ".", "res", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "num_ftrs", "=", "self", ".", "res", ".", "fc", ".", "in_features", "\n", "#self.res.fc = nn.Linear(num_ftrs, in_dim)", "\n", "self", ".", "res", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "in_dim", ")", "# double dimention", "\n", "self", ".", "ca_net", "=", "CA_NET", "(", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "#GLU() # half dimention", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.encoder_resnet1.forward": [[542, 549], ["model.encoder_resnet1.tanh", "model.encoder_resnet1.ca_net", "model.encoder_resnet1.res"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#out = self.res(x)", "\n", "        ", "out", "=", "self", ".", "tanh", "(", "self", ".", "res", "(", "x", ")", ")", "\n", "c_code", ",", "mu", ",", "logvar", "=", "self", ".", "ca_net", "(", "out", ")", "\n", "\n", "\n", "return", "c_code", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.encoder_resnet.__init__": [[553, 557], ["torch.Module.__init__", "model.encoder_resnet.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "encoder_resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_dim", "=", "cfg", ".", "TEXT", ".", "DIMENSION", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.encoder_resnet.define_module": [[560, 568], ["torchvision.models.resnet50", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "in_dim", "=", "self", ".", "in_dim", "\n", "self", ".", "res", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "num_ftrs", "=", "self", ".", "res", ".", "fc", ".", "in_features", "\n", "#self.res.fc = nn.Linear(num_ftrs, in_dim)", "\n", "self", ".", "res", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "in_dim", ")", "# double dimention", "\n", "#self.ca_net = CA_NET()", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "#GLU() # half dimention", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.encoder_resnet.forward": [[569, 577], ["model.encoder_resnet.tanh", "model.encoder_resnet.res"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#out = self.res(x)", "\n", "        ", "out", "=", "self", ".", "tanh", "(", "self", ".", "res", "(", "x", ")", ")", "\n", "#c_code, mu, logvar = self.ca_net(out)", "\n", "\n", "\n", "#return c_code, mu, logvar", "\n", "return", "out", "\n", "########################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.encoder1.__init__": [[579, 582], ["torch.Module.__init__", "model.encoder1.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "encoder1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.encoder1.define_module": [[585, 595], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bottle_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "3", "*", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ",", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.encoder1.forward": [[595, 605], ["model.encoder1.relu", "model.encoder1.relu", "model.encoder1.bn1", "model.encoder1.conv3", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "model.encoder1.bottle_neck", "model.encoder1.conv1", "model.encoder1.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "#out = nn.ReLU(self.conv1(x))", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "#out = nn.ReLU(self.conv2(out))", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "torch", ".", "flatten", "(", "out", ",", "1", ")", "\n", "out", "=", "self", ".", "bottle_neck", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.Swish.__init__": [[608, 611], ["torch.Module.__init__", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Swish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "#object creation", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.Swish.forward": [[612, 614], ["model.Swish.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.MAP_NET_IT.__init__": [[617, 623], ["torch.Module.__init__", "model.MAP_NET_IT.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MAP_NET_IT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.df_dim = cfg.TEXT.DIMENSION", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "TEXT", ".", "EMBEDDING_DIM", "\n", "self", ".", "in_dim", "=", "cfg", ".", "GAN", ".", "Z_DIM", "+", "cfg", ".", "TEXT", ".", "DIMENSION", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.MAP_NET_IT.define_module": [[625, 644], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "in_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", ",", "ndf", "//", "2", ")", ",", "\n", "#nn.BatchNorm1d(ndf//2),", "\n", "#Swish(),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "ndf", "//", "2", ",", "ndf", "//", "4", ")", ",", "\n", "#nn.BatchNorm1d(ndf//4),", "\n", "#Swish(),", "\n", "#nn.Linear(ndf//4, ndf//8),", "\n", "#nn.BatchNorm1d(ndf//8),", "\n", "#Swish())", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", "//", "4", ",", "efg", ")", ")", "#,", "\n", "#nn.Linear(ndf//8, efg),", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.MAP_NET_IT.forward": [[649, 655], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MAP_NET_IT.fc1", "model.MAP_NET_IT.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_code", ",", "c_code", ")", ":", "\n", "        ", "in_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "z_code", ")", ",", "1", ")", "\n", "x_code", "=", "self", ".", "fc1", "(", "in_code", ")", "\n", "output", "=", "self", ".", "fc2", "(", "x_code", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.MAP_NET_TI.__init__": [[658, 665], ["torch.Module.__init__", "model.MAP_NET_TI.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MAP_NET_TI", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.df_dim = cfg.TEXT.DIMENSION", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "TEXT", ".", "DIMENSION", "\n", "self", ".", "in_dim", "=", "cfg", ".", "TEXT", ".", "EMBEDDING_DIM", "+", "20", "#+ cfg.GAN.Z_DIM ", "\n", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.MAP_NET_TI.define_module": [[667, 686], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "in_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", ",", "ndf", "*", "2", ")", ",", "\n", "#nn.BatchNorm1d(ndf//2),", "\n", "#Swish(),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ")", ",", "\n", "#nn.BatchNorm1d(ndf//4),", "\n", "#Swish(),", "\n", "#nn.Linear(ndf//4, ndf//8),", "\n", "#nn.BatchNorm1d(ndf//8),", "\n", "#Swish())", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", "*", "4", ",", "efg", ")", ")", "\n", "#nn.Linear(ndf//8, efg),", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.MAP_NET_TI.forward": [[691, 697], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MAP_NET_TI.fc1", "model.MAP_NET_TI.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_code", ",", "c_code", ")", ":", "\n", "        ", "in_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "z_code", ")", ",", "1", ")", "\n", "x_code", "=", "self", ".", "fc1", "(", "in_code", ")", "\n", "output", "=", "self", ".", "fc2", "(", "x_code", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.MAP_NET_IT1.__init__": [[701, 707], ["torch.Module.__init__", "model.MAP_NET_IT1.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MAP_NET_IT1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.df_dim = cfg.TEXT.DIMENSION", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "TEXT", ".", "EMBEDDING_DIM", "\n", "self", ".", "in_dim", "=", "cfg", ".", "TEXT", ".", "DIMENSION", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.MAP_NET_IT1.define_module": [[709, 728], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "in_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", ",", "ndf", "//", "2", ")", ",", "\n", "#nn.BatchNorm1d(ndf//2),", "\n", "#Swish(),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "ndf", "//", "2", ",", "ndf", "//", "4", ")", ",", "\n", "#nn.BatchNorm1d(ndf//4),", "\n", "#Swish(),", "\n", "#nn.Linear(ndf//4, ndf//8),", "\n", "#nn.BatchNorm1d(ndf//8),", "\n", "#Swish())", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", "//", "4", ",", "efg", ")", ")", "#,", "\n", "#nn.Linear(ndf//8, efg),", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.MAP_NET_IT1.forward": [[733, 739], ["model.MAP_NET_IT1.fc1", "model.MAP_NET_IT1.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "c_code", ")", ":", "\n", "        ", "in_code", "=", "c_code", "\n", "x_code", "=", "self", ".", "fc1", "(", "in_code", ")", "\n", "output", "=", "self", ".", "fc2", "(", "x_code", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.MAP_NET_TI1.__init__": [[742, 749], ["torch.Module.__init__", "model.MAP_NET_TI1.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MAP_NET_TI1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.df_dim = cfg.TEXT.DIMENSION", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "TEXT", ".", "DIMENSION", "\n", "self", ".", "in_dim", "=", "cfg", ".", "TEXT", ".", "EMBEDDING_DIM", "\n", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.MAP_NET_TI1.define_module": [[751, 770], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "in_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", ",", "ndf", "*", "2", ")", ",", "\n", "#nn.BatchNorm1d(ndf//2),", "\n", "#Swish(),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ")", ",", "\n", "#nn.BatchNorm1d(ndf//4),", "\n", "#Swish(),", "\n", "#nn.Linear(ndf//4, ndf//8),", "\n", "#nn.BatchNorm1d(ndf//8),", "\n", "#Swish())", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", "*", "4", ",", "efg", ")", ")", "\n", "#nn.Linear(ndf//8, efg),", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.MAP_NET_TI1.forward": [[775, 781], ["model.MAP_NET_TI1.fc1", "model.MAP_NET_TI1.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "c_code", ")", ":", "\n", "        ", "in_code", "=", "c_code", "\n", "x_code", "=", "self", ".", "fc1", "(", "in_code", ")", "\n", "output", "=", "self", ".", "fc2", "(", "x_code", ")", "\n", "\n", "return", "output", "\n", "#########################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.MAP_NET_IT2.__init__": [[784, 790], ["torch.Module.__init__", "model.MAP_NET_IT2.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MAP_NET_IT2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.df_dim = cfg.TEXT.DIMENSION", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "TEXT", ".", "EMBEDDING_DIM", "#100", "\n", "self", ".", "in_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "#128", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.MAP_NET_IT2.define_module": [[792, 821], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "in_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", ",", "ndf", "*", "4", ")", ",", "\n", "#nn.BatchNorm1d(ndf//2),", "\n", "#Swish(),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "ndf", "*", "4", ",", "ndf", "*", "4", ")", ",", "\n", "#nn.BatchNorm1d(ndf*4),", "\n", "#Swish(),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "#nn.Linear(ndf*4, ndf*2),", "\n", "#nn.BatchNorm1d(efg*4),", "\n", "#Swish(),", "\n", "#nn.LeakyReLU(0.2, inplace=True))", "\n", "\n", "#nn.BatchNorm1d(ndf//4),", "\n", "#Swish(),", "\n", "#nn.Linear(ndf//4, ndf//8),", "\n", "#nn.BatchNorm1d(ndf//8),", "\n", "#Swish())", "\n", "self", ".", "fc2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", "*", "4", ",", "efg", ")", ",", "\n", "#nn.Linear(ndf//8, efg),", "\n", "#nn.LeakyReLU(0.2, inplace=True))", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.MAP_NET_IT2.forward": [[823, 829], ["model.MAP_NET_IT2.fc1", "model.MAP_NET_IT2.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "c_code", ")", ":", "\n", "        ", "in_code", "=", "c_code", "\n", "x_code", "=", "self", ".", "fc1", "(", "in_code", ")", "\n", "output", "=", "self", ".", "fc2", "(", "x_code", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.MAP_NET_TI2.__init__": [[832, 839], ["torch.Module.__init__", "model.MAP_NET_TI2.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MAP_NET_TI2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.df_dim = cfg.TEXT.DIMENSION", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "#128", "\n", "self", ".", "in_dim", "=", "cfg", ".", "TEXT", ".", "EMBEDDING_DIM", "#100", "\n", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.MAP_NET_TI2.define_module": [[841, 868], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "in_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", ",", "efg", "*", "4", ")", ",", "\n", "#nn.BatchNorm1d(ndf//2),", "\n", "#Swish(),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "efg", "*", "4", ",", "efg", "*", "4", ")", ",", "\n", "#nn.BatchNorm1d(efg*4),", "\n", "#Swish(),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "#nn.Linear(efg*4, efg*2),", "\n", "#nn.BatchNorm1d(efg*4),", "\n", "#Swish(),", "\n", "#nn.LeakyReLU(0.2, inplace=True))", "\n", "#nn.Linear(ndf*2, ndf*4),", "\n", "#nn.BatchNorm1d(ndf//4),", "\n", "#Swish(),", "\n", "#nn.Linear(ndf//4, ndf//8),", "\n", "#nn.BatchNorm1d(ndf//8),", "\n", "#Swish())", "\n", "#nn.LeakyReLU(0.2, inplace=True))", "\n", "self", ".", "fc2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "efg", "*", "4", ",", "efg", ")", ")", "\n", "#nn.Linear(ndf//8, efg),", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.MAP_NET_TI2.forward": [[873, 879], ["model.MAP_NET_TI2.fc1", "model.MAP_NET_TI2.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "c_code", ")", ":", "\n", "        ", "in_code", "=", "c_code", "\n", "x_code", "=", "self", ".", "fc1", "(", "in_code", ")", "\n", "output", "=", "self", ".", "fc2", "(", "x_code", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET_TEXT.__init__": [[887, 892], ["torch.Module.__init__", "model.D_NET_TEXT.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "D_NET_TEXT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "cfg", ".", "TEXT", ".", "EMBEDDING_DIM", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "TEXT", ".", "DIMENSION", "#1024", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET_TEXT.define_module": [[893, 911], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "df_dim", "\n", "efg", "=", "self", ".", "ef_dim", "//", "2", "\n", "\n", "\n", "self", ".", "encodings", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", ",", "efg", ")", ",", "\n", "#nn.BatchNorm1d(efg),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "efg", ",", "efg", "//", "2", ")", ",", "\n", "#nn.BatchNorm1d(efg//2),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "efg", "//", "2", ",", "efg", "//", "4", ")", ",", "\n", "#nn.BatchNorm1d(efg//4),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "efg", "//", "4", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET_TEXT.forward": [[913, 918], ["model.D_NET_TEXT.encodings", "model.D_NET_TEXT.logits", "model.D_NET_TEXT.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_var", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "encodings", "(", "x_var", ")", "\n", "output", "=", "self", ".", "logits", "(", "x_code", ")", "\n", "\n", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET_IMAGE.__init__": [[921, 925], ["torch.Module.__init__", "model.D_NET_IMAGE.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "D_NET_IMAGE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "cfg", ".", "TEXT", ".", "DIMENSION", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET_IMAGE.define_module": [[926, 940], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "df_dim", "\n", "\n", "self", ".", "encodings", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", ",", "ndf", "//", "2", ")", ",", "\n", "#nn.BatchNorm1d(ndf//2),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "ndf", "//", "2", ",", "ndf", "//", "4", ")", ",", "\n", "#nn.BatchNorm1d(ndf//4),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", "//", "4", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET_IMAGE.forward": [[942, 947], ["model.D_NET_IMAGE.encodings", "model.D_NET_IMAGE.logits", "model.D_NET_IMAGE.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_var", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "encodings", "(", "x_var", ")", "\n", "output", "=", "self", ".", "logits", "(", "x_code", ")", "\n", "\n", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET64.__init__": [[951, 956], ["torch.Module.__init__", "model.D_NET64.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "D_NET64", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "cfg", ".", "GAN", ".", "DF_DIM", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET64.define_module": [[957, 971], ["model.encode_image_by_16times", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encode_image_by_16times", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "df_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "self", ".", "img_code_s16", "=", "encode_image_by_16times", "(", "ndf", ")", "\n", "\n", "self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "jointConv", "=", "Block3x3_leakRelu", "(", "ndf", "*", "8", "+", "efg", ",", "ndf", "*", "8", ")", "\n", "self", ".", "uncond_logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET64.forward": [[972, 991], ["model.D_NET64.img_code_s16", "model.D_NET64.logits", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.D_NET64.jointConv", "model.D_NET64.uncond_logits", "model.D_NET64.view", "model.D_NET64.view", "model.D_NET64.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x_var", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "img_code_s16", "(", "x_var", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "4", ",", "4", ")", "\n", "# state size (ngf+egf) x 4 x 4", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "x_code", ")", ",", "1", ")", "\n", "# state size ngf x in_size x in_size", "\n", "h_c_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n", "", "else", ":", "\n", "            ", "h_c_code", "=", "x_code", "\n", "\n", "", "output", "=", "self", ".", "logits", "(", "h_c_code", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "out_uncond", "=", "self", ".", "uncond_logits", "(", "x_code", ")", "\n", "return", "[", "output", ".", "view", "(", "-", "1", ")", ",", "out_uncond", ".", "view", "(", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET128.__init__": [[995, 1000], ["torch.Module.__init__", "model.D_NET128.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "D_NET128", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "cfg", ".", "GAN", ".", "DF_DIM", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET128.define_module": [[1001, 1017], ["model.encode_image_by_16times", "model.downBlock", "model.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encode_image_by_16times", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "df_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "self", ".", "img_code_s16", "=", "encode_image_by_16times", "(", "ndf", ")", "\n", "self", ".", "img_code_s32", "=", "downBlock", "(", "ndf", "*", "8", ",", "ndf", "*", "16", ")", "\n", "self", ".", "img_code_s32_1", "=", "Block3x3_leakRelu", "(", "ndf", "*", "16", ",", "ndf", "*", "8", ")", "\n", "\n", "self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "jointConv", "=", "Block3x3_leakRelu", "(", "ndf", "*", "8", "+", "efg", ",", "ndf", "*", "8", ")", "\n", "self", ".", "uncond_logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET128.forward": [[1018, 1039], ["model.D_NET128.img_code_s16", "model.D_NET128.img_code_s32", "model.D_NET128.img_code_s32_1", "model.D_NET128.logits", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.D_NET128.jointConv", "model.D_NET128.uncond_logits", "model.D_NET128.view", "model.D_NET128.view", "model.D_NET128.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x_var", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "img_code_s16", "(", "x_var", ")", "\n", "x_code", "=", "self", ".", "img_code_s32", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s32_1", "(", "x_code", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "4", ",", "4", ")", "\n", "# state size (ngf+egf) x 4 x 4", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "x_code", ")", ",", "1", ")", "\n", "# state size ngf x in_size x in_size", "\n", "h_c_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n", "", "else", ":", "\n", "            ", "h_c_code", "=", "x_code", "\n", "\n", "", "output", "=", "self", ".", "logits", "(", "h_c_code", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "out_uncond", "=", "self", ".", "uncond_logits", "(", "x_code", ")", "\n", "return", "[", "output", ".", "view", "(", "-", "1", ")", ",", "out_uncond", ".", "view", "(", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET256.__init__": [[1043, 1048], ["torch.Module.__init__", "model.D_NET256.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "D_NET256", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "cfg", ".", "GAN", ".", "DF_DIM", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET256.define_module": [[1049, 1067], ["model.encode_image_by_16times", "model.downBlock", "model.downBlock", "model.Block3x3_leakRelu", "model.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encode_image_by_16times", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "df_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "self", ".", "img_code_s16", "=", "encode_image_by_16times", "(", "ndf", ")", "\n", "self", ".", "img_code_s32", "=", "downBlock", "(", "ndf", "*", "8", ",", "ndf", "*", "16", ")", "\n", "self", ".", "img_code_s64", "=", "downBlock", "(", "ndf", "*", "16", ",", "ndf", "*", "32", ")", "\n", "self", ".", "img_code_s64_1", "=", "Block3x3_leakRelu", "(", "ndf", "*", "32", ",", "ndf", "*", "16", ")", "\n", "self", ".", "img_code_s64_2", "=", "Block3x3_leakRelu", "(", "ndf", "*", "16", ",", "ndf", "*", "8", ")", "\n", "\n", "self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "jointConv", "=", "Block3x3_leakRelu", "(", "ndf", "*", "8", "+", "efg", ",", "ndf", "*", "8", ")", "\n", "self", ".", "uncond_logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET256.forward": [[1068, 1091], ["model.D_NET256.img_code_s16", "model.D_NET256.img_code_s32", "model.D_NET256.img_code_s64", "model.D_NET256.img_code_s64_1", "model.D_NET256.img_code_s64_2", "model.D_NET256.logits", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.D_NET256.jointConv", "model.D_NET256.uncond_logits", "model.D_NET256.view", "model.D_NET256.view", "model.D_NET256.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x_var", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "img_code_s16", "(", "x_var", ")", "\n", "x_code", "=", "self", ".", "img_code_s32", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s64", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s64_1", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s64_2", "(", "x_code", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "4", ",", "4", ")", "\n", "# state size (ngf+egf) x 4 x 4", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "x_code", ")", ",", "1", ")", "\n", "# state size ngf x in_size x in_size", "\n", "h_c_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n", "", "else", ":", "\n", "            ", "h_c_code", "=", "x_code", "\n", "\n", "", "output", "=", "self", ".", "logits", "(", "h_c_code", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "out_uncond", "=", "self", ".", "uncond_logits", "(", "x_code", ")", "\n", "return", "[", "output", ".", "view", "(", "-", "1", ")", ",", "out_uncond", ".", "view", "(", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET512.__init__": [[1095, 1100], ["torch.Module.__init__", "model.D_NET512.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "D_NET512", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "cfg", ".", "GAN", ".", "DF_DIM", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET512.define_module": [[1101, 1121], ["model.encode_image_by_16times", "model.downBlock", "model.downBlock", "model.downBlock", "model.Block3x3_leakRelu", "model.Block3x3_leakRelu", "model.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encode_image_by_16times", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "df_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "self", ".", "img_code_s16", "=", "encode_image_by_16times", "(", "ndf", ")", "\n", "self", ".", "img_code_s32", "=", "downBlock", "(", "ndf", "*", "8", ",", "ndf", "*", "16", ")", "\n", "self", ".", "img_code_s64", "=", "downBlock", "(", "ndf", "*", "16", ",", "ndf", "*", "32", ")", "\n", "self", ".", "img_code_s128", "=", "downBlock", "(", "ndf", "*", "32", ",", "ndf", "*", "64", ")", "\n", "self", ".", "img_code_s128_1", "=", "Block3x3_leakRelu", "(", "ndf", "*", "64", ",", "ndf", "*", "32", ")", "\n", "self", ".", "img_code_s128_2", "=", "Block3x3_leakRelu", "(", "ndf", "*", "32", ",", "ndf", "*", "16", ")", "\n", "self", ".", "img_code_s128_3", "=", "Block3x3_leakRelu", "(", "ndf", "*", "16", ",", "ndf", "*", "8", ")", "\n", "\n", "self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "jointConv", "=", "Block3x3_leakRelu", "(", "ndf", "*", "8", "+", "efg", ",", "ndf", "*", "8", ")", "\n", "self", ".", "uncond_logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET512.forward": [[1122, 1147], ["model.D_NET512.img_code_s16", "model.D_NET512.img_code_s32", "model.D_NET512.img_code_s64", "model.D_NET512.img_code_s128", "model.D_NET512.img_code_s128_1", "model.D_NET512.img_code_s128_2", "model.D_NET512.img_code_s128_3", "model.D_NET512.logits", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.D_NET512.jointConv", "model.D_NET512.uncond_logits", "model.D_NET512.view", "model.D_NET512.view", "model.D_NET512.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x_var", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "img_code_s16", "(", "x_var", ")", "\n", "x_code", "=", "self", ".", "img_code_s32", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s64", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s128", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s128_1", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s128_2", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s128_3", "(", "x_code", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "4", ",", "4", ")", "\n", "# state size (ngf+egf) x 4 x 4", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "x_code", ")", ",", "1", ")", "\n", "# state size ngf x in_size x in_size", "\n", "h_c_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n", "", "else", ":", "\n", "            ", "h_c_code", "=", "x_code", "\n", "\n", "", "output", "=", "self", ".", "logits", "(", "h_c_code", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "out_uncond", "=", "self", ".", "uncond_logits", "(", "x_code", ")", "\n", "return", "[", "output", ".", "view", "(", "-", "1", ")", ",", "out_uncond", ".", "view", "(", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET1024.__init__": [[1151, 1156], ["torch.Module.__init__", "model.D_NET1024.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "D_NET1024", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "cfg", ".", "GAN", ".", "DF_DIM", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET1024.define_module": [[1157, 1179], ["model.encode_image_by_16times", "model.downBlock", "model.downBlock", "model.downBlock", "model.downBlock", "model.Block3x3_leakRelu", "model.Block3x3_leakRelu", "model.Block3x3_leakRelu", "model.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encode_image_by_16times", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "df_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "self", ".", "img_code_s16", "=", "encode_image_by_16times", "(", "ndf", ")", "\n", "self", ".", "img_code_s32", "=", "downBlock", "(", "ndf", "*", "8", ",", "ndf", "*", "16", ")", "\n", "self", ".", "img_code_s64", "=", "downBlock", "(", "ndf", "*", "16", ",", "ndf", "*", "32", ")", "\n", "self", ".", "img_code_s128", "=", "downBlock", "(", "ndf", "*", "32", ",", "ndf", "*", "64", ")", "\n", "self", ".", "img_code_s256", "=", "downBlock", "(", "ndf", "*", "64", ",", "ndf", "*", "128", ")", "\n", "self", ".", "img_code_s256_1", "=", "Block3x3_leakRelu", "(", "ndf", "*", "128", ",", "ndf", "*", "64", ")", "\n", "self", ".", "img_code_s256_2", "=", "Block3x3_leakRelu", "(", "ndf", "*", "64", ",", "ndf", "*", "32", ")", "\n", "self", ".", "img_code_s256_3", "=", "Block3x3_leakRelu", "(", "ndf", "*", "32", ",", "ndf", "*", "16", ")", "\n", "self", ".", "img_code_s256_4", "=", "Block3x3_leakRelu", "(", "ndf", "*", "16", ",", "ndf", "*", "8", ")", "\n", "\n", "self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "jointConv", "=", "Block3x3_leakRelu", "(", "ndf", "*", "8", "+", "efg", ",", "ndf", "*", "8", ")", "\n", "self", ".", "uncond_logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.D_NET1024.forward": [[1180, 1207], ["model.D_NET1024.img_code_s16", "model.D_NET1024.img_code_s32", "model.D_NET1024.img_code_s64", "model.D_NET1024.img_code_s128", "model.D_NET1024.img_code_s256", "model.D_NET1024.img_code_s256_1", "model.D_NET1024.img_code_s256_2", "model.D_NET1024.img_code_s256_3", "model.D_NET1024.img_code_s256_4", "model.D_NET1024.logits", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.D_NET1024.jointConv", "model.D_NET1024.uncond_logits", "model.D_NET1024.view", "model.D_NET1024.view", "model.D_NET1024.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x_var", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "img_code_s16", "(", "x_var", ")", "\n", "x_code", "=", "self", ".", "img_code_s32", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s64", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s128", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s256", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s256_1", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s256_2", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s256_3", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s256_4", "(", "x_code", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "4", ",", "4", ")", "\n", "# state size (ngf+egf) x 4 x 4", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "x_code", ")", ",", "1", ")", "\n", "# state size ngf x in_size x in_size", "\n", "h_c_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n", "", "else", ":", "\n", "            ", "h_c_code", "=", "x_code", "\n", "\n", "", "output", "=", "self", ".", "logits", "(", "h_c_code", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "out_uncond", "=", "self", ".", "uncond_logits", "(", "x_code", ")", "\n", "return", "[", "output", ".", "view", "(", "-", "1", ")", ",", "out_uncond", ".", "view", "(", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.conv3x3": [[58, 62], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.upBlock": [[66, 74], ["torch.Sequential", "torch.Upsample", "model.conv3x3", "torch.BatchNorm2d", "model.GLU"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["", "def", "upBlock", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "conv3x3", "(", "in_planes", ",", "out_planes", "*", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "*", "2", ")", ",", "\n", "GLU", "(", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.Block3x3_relu": [[77, 84], ["torch.Sequential", "model.conv3x3", "torch.BatchNorm2d", "model.GLU"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["", "def", "Block3x3_relu", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "in_planes", ",", "out_planes", "*", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "*", "2", ")", ",", "\n", "GLU", "(", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.Block3x3_leakRelu": [[343, 350], ["torch.Sequential", "model.conv3x3", "torch.BatchNorm2d", "torch.LeakyReLU"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["", "", "def", "Block3x3_leakRelu", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "in_planes", ",", "out_planes", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.downBlock": [[353, 360], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU"], "function", ["None"], ["", "def", "downBlock", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.model.encode_image_by_16times": [[363, 382], ["torch.Sequential", "torch.Conv2d", "torch.LeakyReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU"], "function", ["None"], ["", "def", "encode_image_by_16times", "(", "ndf", ")", ":", "\n", "    ", "encode_img", "=", "nn", ".", "Sequential", "(", "\n", "# --> state size. ndf x in_size/2 x in_size/2", "\n", "nn", ".", "Conv2d", "(", "3", ",", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# --> state size 2ndf x x in_size/4 x in_size/4", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# --> state size 4ndf x in_size/8 x in_size/8", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# --> state size 8ndf x in_size/16 x in_size/16", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "return", "encode_img", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.SimpleAutoencoder.__init__": [[173, 177], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", "SimpleAutoencoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "decoder", "=", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.SimpleAutoencoder.forward": [[178, 183], ["MappingImageText.SimpleAutoencoder.encoder", "MappingImageText.SimpleAutoencoder.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "mu", ",", "sigma", "=", "self", ".", "encoder", "(", "x", ")", "\n", "#x, _, _ = self.encoder(x)", "\n", "x", ",", "_", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "x", ",", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.ImageTextTrainer.__init__": [[507, 532], ["torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "len", "os.path.join", "MappingImageText.mkdir_p", "tensorboardX.SummaryWriter"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.miscc.utils.mkdir_p"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "enc", ",", "dec", ",", "genIT", ",", "disIT", ",", "genTI", ",", "disTI", ",", "dataloaders", ",", "num_epochs", ",", "log_dir", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "enc", "=", "enc", "\n", "self", ".", "dec", "=", "dec", "\n", "self", ".", "genIT", "=", "genIT", "\n", "self", ".", "disIT", "=", "disIT", "\n", "self", ".", "genTI", "=", "genTI", "\n", "self", ".", "disTI", "=", "disTI", "\n", "self", ".", "dataloaders", "=", "dataloaders", "\n", "self", ".", "num_epochs", "=", "num_epochs", "\n", "self", ".", "criterion", "=", "nn", ".", "BCELoss", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "max_epoch", "=", "num_epochs", "\n", "self", ".", "num_batches", "=", "len", "(", "self", ".", "dataloaders", "[", "'train'", "]", ")", "\n", "self", ".", "log_dir", "=", "log_dir", "\n", "self", ".", "tensor_board", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_dir", ",", "'tensorboard'", ")", "\n", "#self.model_dir = os.path.join(self.log_dir, 'modeldir')", "\n", "self", ".", "model_dir", "=", "model_dir", "\n", "mkdir_p", "(", "self", ".", "tensor_board", ")", "\n", "#mkdir_p(self.model_dir)", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "self", ".", "tensor_board", ")", "\n", "self", ".", "train_dis1", "=", "True", "\n", "self", ".", "train_dis2", "=", "True", "\n", "self", ".", "train_gen1", "=", "False", "\n", "self", ".", "train_gen2", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.ImageTextTrainer.train_Dnet": [[537, 622], ["MappingImageText.ImageTextTrainer.text_embedding[].size", "netDIT.zero_grad", "netDIT", "netDIT", "criterion", "criterion", "MappingImageText.ImageTextTrainer.img_embedding.size", "netDTI.zero_grad", "netDTI", "netDTI", "criterion", "criterion", "real_embedding_text.detach", "fake_embedding_text.detach", "real_embedding_image.detach", "fake_embedding_image.detach", "errDIT.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optDIT.step", "errDTI.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optDTI.step", "netDTI.parameters", "MappingImageText.ImageTextTrainer.writer.add_scalar", "MappingImageText.ImageTextTrainer.writer.add_scalar", "netDIT.parameters", "netDTI.parameters", "p.data.clamp_", "errDIT.item", "errDTI.item"], "methods", ["None"], ["", "def", "train_Dnet", "(", "self", ",", "count", ")", ":", "\n", "        ", "flag", "=", "count", "%", "100", "\n", "\n", "criterion", "=", "self", ".", "criterion", "\n", "\n", "netDIT", ",", "optDIT", "=", "self", ".", "disIT", ",", "self", ".", "optimizerDIT", "\n", "#print('netDIT:', netDIT)", "\n", "#print('self.optimizerDIT:', self.optimizerDIT)", "\n", "\n", "#####################For IT Training#####################", "\n", "batch_size", "=", "self", ".", "text_embedding", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "real_embedding_text", "=", "self", ".", "text_embedding", "[", "0", "]", "\n", "#print('real text emb shape:' , real_embedding.shape)", "\n", "fake_embedding_text", "=", "self", ".", "text_embedding_fake", "\n", "#print('fake text emb shape:' , fake_embedding.shape)", "\n", "#", "\n", "netDIT", ".", "zero_grad", "(", ")", "\n", "# Forward", "\n", "real_labels", "=", "self", ".", "real_labels", "[", ":", "batch_size", "]", "\n", "fake_labels", "=", "self", ".", "fake_labels", "[", ":", "batch_size", "]", "\n", "# for real", "\n", "real_logitsIT", "=", "netDIT", "(", "real_embedding_text", ".", "detach", "(", ")", ")", "\n", "fake_logitsIT", "=", "netDIT", "(", "fake_embedding_text", ".", "detach", "(", ")", ")", "\n", "#", "\n", "errD_realIT", "=", "criterion", "(", "real_logitsIT", "[", "0", "]", ",", "real_labels", ")", "\n", "errD_fakeIT", "=", "criterion", "(", "fake_logitsIT", "[", "0", "]", ",", "fake_labels", ")", "\n", "\n", "errDIT", "=", "errD_realIT", "+", "errD_fakeIT", "\n", "\n", "\n", "#######################For TI Training#################### ", "\n", "netDTI", ",", "optDTI", "=", "self", ".", "disTI", ",", "self", ".", "optimizerDTI", "\n", "#print('netDTI:', netDTI)", "\n", "#print('self.optimizerDTI:', self.optimizerDTI)", "\n", "batch_size", "=", "self", ".", "img_embedding", ".", "size", "(", "0", ")", "\n", "\n", "real_embedding_image", "=", "self", ".", "img_embedding", "\n", "#print('real image emb shape:' , real_embedding.shape)", "\n", "fake_embedding_image", "=", "self", ".", "img_embedding_fake", "\n", "#print('fake image emb shape:' , fake_embedding.shape)", "\n", "#", "\n", "netDTI", ".", "zero_grad", "(", ")", "\n", "# Forward", "\n", "real_labels", "=", "self", ".", "real_labels", "[", ":", "batch_size", "]", "\n", "fake_labels", "=", "self", ".", "fake_labels", "[", ":", "batch_size", "]", "\n", "# for real", "\n", "real_logitsTI", "=", "netDTI", "(", "real_embedding_image", ".", "detach", "(", ")", ")", "\n", "fake_logitsTI", "=", "netDTI", "(", "fake_embedding_image", ".", "detach", "(", ")", ")", "\n", "#", "\n", "errD_realTI", "=", "criterion", "(", "real_logitsTI", "[", "0", "]", ",", "real_labels", ")", "\n", "errD_fakeTI", "=", "criterion", "(", "fake_logitsTI", "[", "0", "]", ",", "fake_labels", ")", "\n", "#errD_realTI = -torch.mean(real_logitsTI[0])", "\n", "#errD_fakeTI = torch.mean(fake_logitsTI[0])", "\n", "\n", "errDTI", "=", "errD_realTI", "+", "errD_fakeTI", "\n", "###########################################################", "\n", "#if True:", "\n", "if", "(", "count", "+", "1", ")", "%", "self", ".", "mod", "!=", "0", ":", "\n", "#if self.train_dis1 == True:", "\n", "#print(\"di param:\")", "\n", "#for name, param in netD.named_parameters():", "\n", "#   print (name, param.data)", "\n", "# backward", "\n", "            ", "errDIT", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "netDIT", ".", "parameters", "(", ")", ",", "5.00", ")", "\n", "# update parameters", "\n", "optDIT", ".", "step", "(", ")", "\n", "\n", "#if True:", "\n", "", "mod2", "=", "5", "\n", "#if (count +1)%self.mod != 0 :", "\n", "if", "(", "count", "+", "1", ")", "%", "mod2", "!=", "0", ":", "\n", "#if self.train_dis2 == True:", "\n", "# backward", "\n", "            ", "errDTI", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "netDTI", ".", "parameters", "(", ")", ",", "5.00", ")", "\n", "# update parameters", "\n", "optDTI", ".", "step", "(", ")", "\n", "for", "p", "in", "netDTI", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "data", ".", "clamp_", "(", "-", "0.01", ",", "0.01", ")", "\n", "# log", "\n", "", "", "if", "flag", "==", "0", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "'DIT_loss'", ",", "errDIT", ".", "item", "(", ")", ",", "count", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'DTI_loss'", ",", "errDTI", ".", "item", "(", ")", ",", "count", ")", "\n", "", "return", "errDIT", ",", "errDTI", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.ImageTextTrainer.train_Gnet": [[623, 691], ["MappingImageText.ImageTextTrainer.genIT.zero_grad", "MappingImageText.ImageTextTrainer.text_embedding[].size", "MappingImageText.ImageTextTrainer.disIT", "criterion", "MappingImageText.ImageTextTrainer.genTI.zero_grad", "MappingImageText.ImageTextTrainer.img_embedding.size", "MappingImageText.ImageTextTrainer.disTI", "criterion", "MappingImageText.ImageTextTrainer.writer.add_scalar", "criterion.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "MappingImageText.ImageTextTrainer.optimizerGIT.step", "MappingImageText.ImageTextTrainer.writer.add_scalar", "criterion.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "MappingImageText.ImageTextTrainer.optimizerGTI.step", "criterion.item", "MappingImageText.ImageTextTrainer.genIT.parameters", "criterion.item", "MappingImageText.ImageTextTrainer.genTI.parameters"], "methods", ["None"], ["", "def", "train_Gnet", "(", "self", ",", "count", ")", ":", "\n", "\n", "        ", "self", ".", "genIT", ".", "zero_grad", "(", ")", "\n", "errGIT_total", "=", "0", "\n", "mod1", "=", "self", ".", "mod", "\n", "mod2", "=", "self", ".", "mod", "\n", "\n", "flag", "=", "count", "%", "100", "\n", "batch_size", "=", "self", ".", "text_embedding", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "criterion", "=", "self", ".", "criterion", "\n", "\n", "real_labels", "=", "self", ".", "real_labels", "[", ":", "batch_size", "]", "\n", "outputs", "=", "self", ".", "disIT", "(", "self", ".", "text_embedding_fake", ")", "\n", "errGIT_total", "=", "criterion", "(", "outputs", "[", "0", "]", ",", "real_labels", ")", "\n", "if", "flag", "==", "0", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "'GIT_loss'", ",", "errGIT_total", ".", "item", "(", ")", ",", "count", ")", "\n", "\n", "", "if", "errGIT_total", ">", "1.5", ":", "\n", "            ", "self", ".", "train_gen1", "=", "True", "\n", "mod1", "=", "1", "\n", "", "elif", "errGIT_total", "<", "1.0", ":", "\n", "            ", "self", ".", "train_gen1", "=", "False", "\n", "mod1", "=", "self", ".", "mod", "\n", "\n", "\n", "\n", "", "if", "(", "count", "+", "1", ")", "%", "mod1", "==", "0", ":", "\n", "#if self.train_dis1 == False or (self.train_gen1 == True) :", "\n", "#if True:", "\n", "            ", "errGIT_total", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "genIT", ".", "parameters", "(", ")", ",", "5.00", ")", "\n", "self", ".", "optimizerGIT", ".", "step", "(", ")", "\n", "#print(\"GEN param:\")", "\n", "#for name, param in self.gen.named_parameters():", "\n", "#   print (name, param.data)", "\n", "#####################for TI############################", "\n", "", "self", ".", "genTI", ".", "zero_grad", "(", ")", "\n", "errGTI_total", "=", "0", "\n", "batch_size", "=", "self", ".", "img_embedding", ".", "size", "(", "0", ")", "\n", "\n", "real_labels", "=", "self", ".", "real_labels", "[", ":", "batch_size", "]", "\n", "outputs", "=", "self", ".", "disTI", "(", "self", ".", "img_embedding_fake", ")", "\n", "errGTI_total", "=", "criterion", "(", "outputs", "[", "0", "]", ",", "real_labels", ")", "\n", "#errGTI_total= -torch.mean(outputs[0])", "\n", "if", "flag", "==", "0", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "'GTI_loss'", ",", "errGTI_total", ".", "item", "(", ")", ",", "count", ")", "\n", "\n", "\n", "", "if", "errGTI_total", ">", "1.5", ":", "\n", "            ", "self", ".", "train_gen2", "=", "True", "\n", "mod2", "=", "1", "\n", "", "elif", "errGTI_total", "<", "1.0", ":", "\n", "            ", "self", ".", "train_gen2", "=", "False", "\n", "mod2", "=", "self", ".", "mod", "\n", "\n", "", "mod2", "=", "5", "\n", "\n", "#if True:", "\n", "if", "(", "count", "+", "1", ")", "%", "mod2", "==", "0", ":", "\n", "#if self.train_dis2 == False or (self.train_gen2 == True):", "\n", "            ", "errGTI_total", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "genTI", ".", "parameters", "(", ")", ",", "5.00", ")", "\n", "self", ".", "optimizerGTI", ".", "step", "(", ")", "\n", "#print(\"GEN param:\")", "\n", "#for name, param in self.gen.named_parameters():", "\n", "#   print (name, param.data)", "\n", "\n", "", "return", "errGIT_total", ",", "errGTI_total", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.ImageTextTrainer.evaluate": [[692, 753], ["MappingImageText.ImageTextTrainer.enc.eval", "MappingImageText.ImageTextTrainer.dec.eval", "MappingImageText.ImageTextTrainer.model.eval", "MappingImageText.ImageTextTrainer.genIT.eval", "MappingImageText.ImageTextTrainer.genTI.eval", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "print", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "fixed_noise2.cuda.cuda.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "inp0.cuda.cuda.cuda", "inp0.cuda.cuda.size", "MappingImageText.adjust_padding", "captions.cuda.cuda.cuda", "lengths.cuda.cuda.cuda", "MappingImageText.ImageTextTrainer.enc", "MappingImageText.ImageTextTrainer.model.rnn", "MappingImageText.ImageTextTrainer.genIT", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "MappingImageText.ImageTextTrainer.model.rnn", "MappingImageText.ImageTextTrainer.model.rnn", "MappingImageText.ImageTextTrainer.dec", "MappingImageText.ImageTextTrainer.genTI", "MappingImageText.ImageTextTrainer.dec", "vocab.decode_positions", "vocab.decode_positions", "vocab.decode_positions", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "MappingImageText.ImageTextTrainer.img_embedding.detach", "MappingImageText.ImageTextTrainer.img_embedding.detach", "MappingImageText.ImageTextTrainer.text_embedding[].detach", "MappingImageText.ImageTextTrainer.img_embedding_fake.detach", "MappingImageText.save_results"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.run_text_test.adjust_padding", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.decode_positions", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.decode_positions", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.decode_positions", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.save_results"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "ecount", "=", "0", "\n", "######setting in eval mode##########################", "\n", "self", ".", "enc", ".", "eval", "(", ")", "\n", "self", ".", "dec", ".", "eval", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "genIT", ".", "eval", "(", ")", "\n", "self", ".", "genTI", ".", "eval", "(", ")", "\n", "############################################################", "\n", "nz", "=", "cfg", ".", "GAN", ".", "Z_DIM", "\n", "#fixed_noise1 = Variable(torch.FloatTensor(self.batch_size, nz).normal_(0, 1))", "\n", "fixed_noise2", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "self", ".", "batch_size", ",", "nz", ")", ".", "normal_", "(", "0", ",", "1", ")", ")", "\n", "#fixed_noise3 = Variable(torch.FloatTensor(self.batch_size, 20).normal_(0, 1))", "\n", "if", "True", ":", "\n", "#fixed_noise1 = fixed_noise1.cuda()", "\n", "            ", "fixed_noise2", "=", "fixed_noise2", ".", "cuda", "(", ")", "\n", "#fixed_noise3 = fixed_noise3.cuda()", "\n", "", "for", "uinputs", ",", "inputs", ",", "_", ",", "labels", ",", "captions", ",", "lengths", "in", "self", ".", "dataloaders", "[", "'val'", "]", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "inp0", "=", "uinputs", "[", "0", "]", "\n", "inp0", "=", "inp0", ".", "cuda", "(", ")", "\n", "N", "=", "inp0", ".", "size", "(", "0", ")", "\n", "#n1 = fixed_noise1[:N]", "\n", "n2", "=", "fixed_noise2", "[", ":", "N", "]", "\n", "#n3 = fixed_noise3[:N]", "\n", "captions", ",", "lengths", "=", "adjust_padding", "(", "captions", ",", "lengths", ")", "\n", "captions", "=", "captions", ".", "cuda", "(", ")", "\n", "lengths", "=", "lengths", ".", "cuda", "(", ")", "\n", "\n", "#self.img_embedding = self.enc(inp0)", "\n", "self", ".", "img_embedding", ",", "_", ",", "_", "=", "self", ".", "enc", "(", "inp0", ")", "\n", "self", ".", "text_embedding", "=", "self", ".", "model", ".", "rnn", "(", "pass_type", "=", "'encode'", ",", "batch_positions", "=", "captions", ",", "text_length", "=", "lengths", ")", "\n", "\n", "\n", "#self.text_embedding_fake = self.genIT(n1, self.img_embedding.detach())", "\n", "self", ".", "text_embedding_fake", "=", "self", ".", "genIT", "(", "self", ".", "img_embedding", ".", "detach", "(", ")", ")", "\n", "temb", "=", "self", ".", "text_embedding_fake", ",", "\n", "\n", "###################generated text from Image##################################", "\n", "length1", "=", "[", "max_len", "]", "*", "N", "#taking maximum length", "\n", "length1", "=", "torch", ".", "LongTensor", "(", "length1", ")", "\n", "_", ",", "indices_g", "=", "self", ".", "model", ".", "rnn", "(", "pass_type", "=", "'generate'", ",", "hidden", "=", "temb", ",", "text_length", "=", "length1", ",", "batch_size", "=", "N", ")", "\n", "########################below verification for original encoded output#####################", "\n", "_", ",", "indices_o", "=", "self", ".", "model", ".", "rnn", "(", "pass_type", "=", "'generate'", ",", "hidden", "=", "self", ".", "text_embedding", ",", "text_length", "=", "length1", ",", "batch_size", "=", "N", ")", "\n", "###############We can use original image or output of image decoder#############", "\n", "#fake_imgs_o, _, _ = self.dec(n2, self.img_embedding.detach())", "\n", "fake_imgs_o", "=", "self", ".", "dec", "(", "n2", ",", "self", ".", "img_embedding", ".", "detach", "(", ")", ")", "\n", "#self.img_embedding_fake = self.genTI(n3, self.text_embedding[0].detach())", "\n", "self", ".", "img_embedding_fake", "=", "self", ".", "genTI", "(", "self", ".", "text_embedding", "[", "0", "]", ".", "detach", "(", ")", ")", "\n", "#fake_imgs_g, _, _ = self.dec(n2, self.img_embedding_fake.detach())", "\n", "fake_imgs_g", "=", "self", ".", "dec", "(", "n2", ",", "self", ".", "img_embedding_fake", ".", "detach", "(", ")", ")", "\n", "texts_i", "=", "vocab", ".", "decode_positions", "(", "captions", ")", "\n", "texts_g", "=", "vocab", ".", "decode_positions", "(", "indices_g", ")", "\n", "texts_o", "=", "vocab", ".", "decode_positions", "(", "indices_o", ")", "\n", "if", "ecount", "%", "1", "==", "0", ":", "\n", "                    ", "save_results", "(", "inputs", "[", "2", "]", ",", "fake_imgs_o", "[", "2", "]", ",", "fake_imgs_g", "[", "2", "]", ",", "texts_i", ",", "texts_g", ",", "texts_o", ",", "-", "1", ")", "\n", "", "ecount", "=", "ecount", "+", "1", "\n", "del", "fake_imgs_o", ",", "fake_imgs_g", ",", "texts_i", ",", "texts_g", ",", "texts_o", "\n", "del", "self", ".", "img_embedding", ",", "self", ".", "img_embedding_fake", ",", "self", ".", "text_embedding", ",", "self", ".", "text_embedding_fake", "\n", "\n", "", "", "print", "(", "\"#################Evaluation complete#######################################\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.ImageTextTrainer.train": [[756, 957], ["MappingImageText.define_optimizers", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "MappingImageText.ImageTextTrainer.enc.eval", "MappingImageText.ImageTextTrainer.dec.eval", "MappingImageText.ImageTextTrainer.model.eval", "MappingImageText.ImageTextTrainer.genIT.train", "MappingImageText.ImageTextTrainer.disIT.train", "MappingImageText.ImageTextTrainer.genTI.train", "MappingImageText.ImageTextTrainer.disTI.train", "range", "MappingImageText.save_model", "print", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "MappingImageText.ImageTextTrainer.criterion.cuda", "MappingImageText.ImageTextTrainer.real_labels.cuda", "MappingImageText.ImageTextTrainer.fake_labels.cuda", "MappingImageText.ImageTextTrainer.gradient_one.cuda", "MappingImageText.ImageTextTrainer.gradient_half.cuda", "time.time", "time.time", "print", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "inp0.cuda.cuda.cuda", "inp0.cuda.cuda.size", "MappingImageText.adjust_padding", "captions.cuda.cuda.cuda", "lengths.cuda.cuda.cuda", "MappingImageText.ImageTextTrainer.enc", "MappingImageText.ImageTextTrainer.model.rnn", "noise1_.data.normal_", "MappingImageText.ImageTextTrainer.genIT", "noise2_.data.normal_", "MappingImageText.ImageTextTrainer.genTI", "MappingImageText.ImageTextTrainer.train_Dnet", "errorDIT_list.append", "errorDTI_list.append", "MappingImageText.ImageTextTrainer.train_Gnet", "errorGIT_list.append", "errorGTI_list.append", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "MappingImageText.ImageTextTrainer.img_embedding.detach", "MappingImageText.ImageTextTrainer.text_embedding[].detach", "errDIT_total.item", "errDTI_total.item", "errGIT_total.item", "errGTI_total.item", "MappingImageText.save_model", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "MappingImageText.ImageTextTrainer.genIT", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "MappingImageText.ImageTextTrainer.model.rnn", "MappingImageText.ImageTextTrainer.model.rnn", "vocab.decode_positions", "vocab.decode_positions", "vocab.decode_positions", "MappingImageText.ImageTextTrainer.dec", "MappingImageText.ImageTextTrainer.genTI", "MappingImageText.ImageTextTrainer.dec", "MappingImageText.save_results", "MappingImageText.ImageTextTrainer.img_embedding.detach", "MappingImageText.ImageTextTrainer.img_embedding.detach", "MappingImageText.ImageTextTrainer.text_embedding[].detach", "MappingImageText.ImageTextTrainer.img_embedding_fake.detach", "sum", "len", "sum", "len", "sum", "len", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.define_optimizers", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.ImageTextTrainer.train", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.ImageTextTrainer.train", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.ImageTextTrainer.train", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.ImageTextTrainer.train", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.save_model", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.run_text_test.adjust_padding", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.ImageTextTrainer.train_Dnet", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.ImageTextTrainer.train_Gnet", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.save_model", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.decode_positions", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.decode_positions", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.decode_positions", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.save_results"], ["", "def", "train", "(", "self", ")", ":", "\n", "#avg_param_GIT = copy_G_params(self.genIT)", "\n", "#avg_param_GTI = copy_G_params(self.genTI)", "\n", "\n", "\n", "\n", "        ", "self", ".", "optimizerGIT", ",", "self", ".", "optimizerDIT", ",", "self", ".", "optimizerGTI", ",", "self", ".", "optimizerDTI", ",", "count", "=", "define_optimizers", "(", "self", ".", "genIT", ",", "self", ".", "disIT", ",", "self", ".", "genTI", ",", "self", ".", "disTI", ",", "self", ".", "model_dir", ")", "\n", "\n", "\n", "self", ".", "real_labels", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "self", ".", "batch_size", ")", ".", "fill_", "(", "1", ")", ")", "\n", "self", ".", "fake_labels", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "self", ".", "batch_size", ")", ".", "fill_", "(", "0", ")", ")", "\n", "\n", "self", ".", "gradient_one", "=", "torch", ".", "FloatTensor", "(", "[", "1.0", "]", ")", "\n", "self", ".", "gradient_half", "=", "torch", ".", "FloatTensor", "(", "[", "0.5", "]", ")", "\n", "\n", "nz", "=", "cfg", ".", "GAN", ".", "Z_DIM", "\n", "noise1", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "self", ".", "batch_size", ",", "nz", ")", ")", "\n", "noise2", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "self", ".", "batch_size", ",", "20", ")", ")", "\n", "fixed_noise1", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "self", ".", "batch_size", ",", "nz", ")", ".", "normal_", "(", "0", ",", "1", ")", ")", "\n", "fixed_noise2", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "self", ".", "batch_size", ",", "nz", ")", ".", "normal_", "(", "0", ",", "1", ")", ")", "\n", "fixed_noise3", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "self", ".", "batch_size", ",", "20", ")", ".", "normal_", "(", "0", ",", "1", ")", ")", "\n", "\n", "######setting in eval mode##########################", "\n", "self", ".", "enc", ".", "eval", "(", ")", "\n", "self", ".", "dec", ".", "eval", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "genIT", ".", "train", "(", ")", "\n", "self", ".", "disIT", ".", "train", "(", ")", "\n", "self", ".", "genTI", ".", "train", "(", ")", "\n", "self", ".", "disTI", ".", "train", "(", ")", "\n", "############################################################", "\n", "nr_train_gen", "=", "1", "\n", "nr_train_dis", "=", "1", "\n", "self", ".", "mod", "=", "nr_train_gen", "+", "2", "*", "nr_train_dis", "\n", "\n", "\n", "#if cfg.CUDA:", "\n", "if", "True", ":", "\n", "            ", "self", ".", "criterion", ".", "cuda", "(", ")", "\n", "self", ".", "real_labels", "=", "self", ".", "real_labels", ".", "cuda", "(", ")", "\n", "self", ".", "fake_labels", "=", "self", ".", "fake_labels", ".", "cuda", "(", ")", "\n", "self", ".", "gradient_one", "=", "self", ".", "gradient_one", ".", "cuda", "(", ")", "\n", "self", ".", "gradient_half", "=", "self", ".", "gradient_half", ".", "cuda", "(", ")", "\n", "noise1", ",", "noise2", ",", "fixed_noise1", ",", "fixed_noise2", ",", "fixed_noise3", "=", "noise1", ".", "cuda", "(", ")", ",", "noise2", ".", "cuda", "(", ")", ",", "fixed_noise1", ".", "cuda", "(", ")", ",", "fixed_noise2", ".", "cuda", "(", ")", ",", "fixed_noise3", ".", "cuda", "(", ")", "\n", "", "start_count", "=", "count", "\n", "start_epoch", "=", "start_count", "//", "(", "self", ".", "num_batches", ")", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "self", ".", "max_epoch", ")", ":", "\n", "            ", "start_t", "=", "time", ".", "time", "(", ")", "\n", "errorGIT_list", "=", "[", "]", "\n", "errorGTI_list", "=", "[", "]", "\n", "errorDIT_list", "=", "[", "]", "\n", "errorDTI_list", "=", "[", "]", "\n", "i", "=", "-", "1", "\n", "\n", "for", "uinputs", ",", "inputs", ",", "_", ",", "labels", ",", "captions", ",", "lengths", "in", "self", ".", "dataloaders", "[", "'train'", "]", ":", "\n", "                ", "i", "+=", "1", "\n", "if", "i", "==", "2", ":", "\n", "                    ", "self", ".", "train_dis1", "=", "False", "\n", "self", ".", "train_dis2", "=", "False", "\n", "", "elif", "i", "==", "3", ":", "\n", "                    ", "self", ".", "train_dis1", "=", "True", "\n", "self", ".", "train_dis2", "=", "True", "\n", "i", "=", "0", "\n", "\n", "#######################################################", "\n", "# (0) Prepare training data", "\n", "######################################################", "\n", "", "inp0", "=", "uinputs", "[", "0", "]", "\n", "inp0", "=", "inp0", ".", "cuda", "(", ")", "\n", "N", "=", "inp0", ".", "size", "(", "0", ")", "\n", "noise1_", "=", "noise1", "[", ":", "N", "]", "\n", "noise2_", "=", "noise2", "[", ":", "N", "]", "\n", "n1", "=", "fixed_noise1", "[", ":", "N", "]", "\n", "#n2 = fixed_noise2[:N]", "\n", "#n3 = fixed_noise3[:N]", "\n", "#print('input shape:', N)", "\n", "captions", ",", "lengths", "=", "adjust_padding", "(", "captions", ",", "lengths", ")", "\n", "#print('captions shape:', captions.shape)", "\n", "#print('new cap:',captions)", "\n", "#print('new_len:', lengths)", "\n", "#print('length of dataset',len(dataloaders[phase].dataset))", "\n", "\n", "captions", "=", "captions", ".", "cuda", "(", ")", "\n", "lengths", "=", "lengths", ".", "cuda", "(", ")", "\n", "##########################################################", "\n", "# (1) Image embedding from pretrained model", "\n", "##########################################################", "\n", "#self.img_embedding = self.enc(inp0)", "\n", "self", ".", "img_embedding", ",", "_", ",", "_", "=", "self", ".", "enc", "(", "inp0", ")", "\n", "#print('image emb shape:' , self.img_embedding.shape)", "\n", "\n", "##########################################################", "\n", "# (2) Text embedding from pretrained model", "\n", "##########################################################", "\n", "self", ".", "text_embedding", "=", "self", ".", "model", ".", "rnn", "(", "pass_type", "=", "'encode'", ",", "batch_positions", "=", "captions", ",", "text_length", "=", "lengths", ")", "\n", "\n", "#######################################################", "\n", "# (1) Generate fake text_embedding", "\n", "######################################################", "\n", "noise1_", ".", "data", ".", "normal_", "(", "0", ",", "1", ")", "\n", "#print('noise shape:', noise.shape)", "\n", "#print('image emb shape:', self.img_embedding.shape)", "\n", "#self.text_embedding_fake = self.genIT(noise1_, self.img_embedding.detach())", "\n", "self", ".", "text_embedding_fake", "=", "self", ".", "genIT", "(", "self", ".", "img_embedding", ".", "detach", "(", ")", ")", "\n", "#######################################################", "\n", "# (1) Generate fake image_embedding", "\n", "######################################################", "\n", "noise2_", ".", "data", ".", "normal_", "(", "0", ",", "1", ")", "\n", "\n", "#self.img_embedding_fake = self.genTI(noise2_, self.text_embedding[0].detach())", "\n", "self", ".", "img_embedding_fake", "=", "self", ".", "genTI", "(", "self", ".", "text_embedding", "[", "0", "]", ".", "detach", "(", ")", ")", "\n", "#print('text fake emb shape:', self.text_embedding_fake.shape)", "\n", "\n", "\n", "#self.fake_imgs, self.mu, self.logvar = \\", "\n", "#self.netG(noise, self.txt_embedding.detach())", "\n", "\n", "#######################################################", "\n", "# (2) Update D network", "\n", "######################################################", "\n", "errDIT_total", ",", "errDTI_total", "=", "self", ".", "train_Dnet", "(", "count", ")", "\n", "errorDIT_list", ".", "append", "(", "errDIT_total", ".", "item", "(", ")", ")", "\n", "errorDTI_list", ".", "append", "(", "errDTI_total", ".", "item", "(", ")", ")", "\n", "\n", "#######################################################", "\n", "# (3) Update G network: maximize log(D(G(z)))", "\n", "######################################################", "\n", "errGIT_total", ",", "errGTI_total", "=", "self", ".", "train_Gnet", "(", "count", ")", "\n", "errorGIT_list", ".", "append", "(", "errGIT_total", ".", "item", "(", ")", ")", "\n", "errorGTI_list", ".", "append", "(", "errGTI_total", ".", "item", "(", ")", ")", "\n", "#for p, avg_p in zip(self.genIT.parameters(), avg_param_GIT):", "\n", "#   avg_p.mul_(0.999).add_(0.001, p.data)", "\n", "#for p, avg_p in zip(self.genTI.parameters(), avg_param_GTI):", "\n", "#   avg_p.mul_(0.999).add_(0.001, p.data)", "\n", "#for e, avg_e in zip(self.enc.parameters(), avg_param_E):", "\n", "#   avg_e.mul_(0.999).add_(0.001, e.data)", "\n", "\n", "# for inception score", "\n", "\n", "count", "=", "count", "+", "1", "\n", "\n", "if", "count", "%", "cfg", ".", "TRAIN", ".", "SNAPSHOT_INTERVAL", "==", "0", ":", "\n", "#if count % 10 == 0:", "\n", "                    ", "save_model", "(", "self", ".", "genIT", ",", "self", ".", "optimizerGIT", ",", "self", ".", "disIT", ",", "self", ".", "optimizerDIT", ",", "self", ".", "genTI", ",", "self", ".", "optimizerGTI", ",", "self", ".", "disTI", ",", "self", ".", "optimizerDTI", ",", "count", ",", "self", ".", "model_dir", ")", "\n", "# Save images", "\n", "#backup_para = copy_G_params(self.netG)", "\n", "#backup_para_E = copy_G_params(self.enc)", "\n", "#load_params(self.netG, avg_param_G)", "\n", "#load_params(self.enc, avg_param_E)", "\n", "#", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "#self.text_embedding_fake = self.genIT(n2, self.img_embedding.detach())", "\n", "                        ", "self", ".", "text_embedding_fake", "=", "self", ".", "genIT", "(", "self", ".", "img_embedding", ".", "detach", "(", ")", ")", "\n", "###################generated text from Image##################################", "\n", "length1", "=", "[", "max_len", "]", "*", "N", "#taking maximum length", "\n", "length1", "=", "torch", ".", "LongTensor", "(", "length1", ")", "\n", "temb", "=", "self", ".", "text_embedding_fake", ",", "\n", "_", ",", "indices_g", "=", "self", ".", "model", ".", "rnn", "(", "pass_type", "=", "'generate'", ",", "hidden", "=", "temb", ",", "text_length", "=", "length1", ",", "batch_size", "=", "N", ")", "\n", "################################The below is just for verification of original text###########", "\n", "_", ",", "indices_o", "=", "self", ".", "model", ".", "rnn", "(", "pass_type", "=", "'generate'", ",", "hidden", "=", "self", ".", "text_embedding", ",", "text_length", "=", "length1", ",", "batch_size", "=", "N", ")", "\n", "###############We can use original image or output of image decoder#############", "\n", "#fake_imgs_o, _, _ = self.dec(n1, self.img_embedding.detach())", "\n", "texts_i", "=", "vocab", ".", "decode_positions", "(", "captions", ")", "\n", "texts_g", "=", "vocab", ".", "decode_positions", "(", "indices_g", ")", "\n", "texts_o", "=", "vocab", ".", "decode_positions", "(", "indices_o", ")", "\n", "############################################################", "\n", "#fake_imgs_o, _, _ = self.dec(n1, self.img_embedding.detach())", "\n", "fake_imgs_o", "=", "self", ".", "dec", "(", "n1", ",", "self", ".", "img_embedding", ".", "detach", "(", ")", ")", "\n", "#self.img_embedding_fake = self.genTI(n3, self.text_embedding[0].detach())", "\n", "self", ".", "img_embedding_fake", "=", "self", ".", "genTI", "(", "self", ".", "text_embedding", "[", "0", "]", ".", "detach", "(", ")", ")", "\n", "#fake_imgs_g, _, _ = self.dec(n1, self.img_embedding_fake.detach())", "\n", "fake_imgs_g", "=", "self", ".", "dec", "(", "n1", ",", "self", ".", "img_embedding_fake", ".", "detach", "(", ")", ")", "\n", "\n", "\n", "\n", "\n", "save_results", "(", "inputs", "[", "2", "]", ",", "fake_imgs_o", "[", "2", "]", ",", "fake_imgs_g", "[", "2", "]", ",", "texts_i", ",", "texts_g", ",", "texts_o", ",", "count", ")", "\n", "del", "fake_imgs_o", ",", "fake_imgs_g", ",", "texts_i", ",", "texts_g", ",", "texts_o", "\n", "del", "self", ".", "img_embedding", ",", "self", ".", "img_embedding_fake", ",", "self", ".", "text_embedding", ",", "self", ".", "text_embedding_fake", "\n", "\n", "\n", "", "", "", "end_t", "=", "time", ".", "time", "(", ")", "\n", "#print('''[%d/%d][%d]", "\n", "#            Loss_D: %.2f Loss_G: %.2f Time: %.2fs", "\n", "#        '''  # D(real): %.4f D(wrong):%.4f  D(fake) %.4f", "\n", "#   % ((epoch +1), self.max_epoch, self.num_batches,", "\n", "#     errD_total.item(), errG_total.item(), end_t - start_t))", "\n", "print", "(", "'''[%d/%d][%d]\n                         Loss_DIT: %.2f Loss_GIT: %.2f Loss_DTI: %.2f Loss_GTI: %.2f Time: %.2fs\n                      '''", "# D(real): %.4f D(wrong):%.4f  D(fake) %.4f", "\n", "%", "(", "(", "epoch", "+", "1", ")", ",", "self", ".", "max_epoch", ",", "self", ".", "num_batches", ",", "\n", "sum", "(", "errorDIT_list", ")", "/", "len", "(", "errorDIT_list", ")", ",", "sum", "(", "errorGIT_list", ")", "/", "len", "(", "errorGIT_list", ")", ",", "\n", "sum", "(", "errorDTI_list", ")", "/", "len", "(", "errorDTI_list", ")", ",", "sum", "(", "errorGTI_list", ")", "/", "len", "(", "errorGTI_list", ")", ",", "\n", "end_t", "-", "start_t", ")", ")", "\n", "\n", "#save_model(self.enc, avg_param_E, self.netG, self.optimizerG, avg_param_G, self.netsD, self.optimizersD, count, self.model_dir)", "\n", "", "save_model", "(", "self", ".", "genIT", ",", "self", ".", "optimizerGIT", ",", "self", ".", "disIT", ",", "self", ".", "optimizerDIT", ",", "self", ".", "genTI", ",", "self", ".", "optimizerGTI", ",", "self", ".", "disTI", ",", "self", ".", "optimizerDTI", ",", "count", ",", "self", ".", "model_dir", ")", "\n", "\n", "\n", "\n", "print", "(", "'####################training completed#########################'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.norm_ip": [[39, 43], ["img.add_().div_.clamp_", "img.add_().div_.add_().div_", "img.add_().div_.add_"], "function", ["None"], ["def", "norm_ip", "(", "img", ",", "min1", ",", "max1", ")", ":", "\n", "    ", "img", "=", "img", ".", "clamp_", "(", "min", "=", "min1", ",", "max", "=", "max1", ")", "\n", "img", "=", "img", ".", "add_", "(", "-", "min1", ")", ".", "div_", "(", "max1", "-", "min1", "+", "1e-5", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.norm_range": [[44, 50], ["MappingImageText.norm_ip", "MappingImageText.norm_ip", "float", "float", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.norm_ip", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.norm_ip"], ["", "def", "norm_range", "(", "t", ",", "range1", "=", "None", ")", ":", "\n", "    ", "if", "range1", "is", "not", "None", ":", "\n", "        ", "img1", "=", "norm_ip", "(", "t", ",", "range1", "[", "0", "]", ",", "range1", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "img1", "=", "norm_ip", "(", "t", ",", "float", "(", "torch", ".", "min", "(", "t", ")", ")", ",", "float", "(", "torch", ".", "max", "(", "t", ")", ")", ")", "\n", "", "return", "img1", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.mkdir_p": [[51, 59], ["os.makedirs", "os.path.isdir"], "function", ["None"], ["", "def", "mkdir_p", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "        ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.adjust_padding": [[60, 71], ["torch.LongTensor.numpy", "torch.LongTensor.numpy", "max", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "temp.append"], "function", ["None"], ["", "", "", "def", "adjust_padding", "(", "cap", ",", "len1", ")", ":", "\n", "    ", "cap", "=", "cap", ".", "numpy", "(", ")", "\n", "len1", "=", "len1", ".", "numpy", "(", ")", "\n", "max_len", "=", "max", "(", "len1", ")", "\n", "temp", "=", "[", "]", "\n", "for", "i", "in", "cap", ":", "\n", "        ", "j", "=", "i", "[", "0", ":", "max_len", "]", "\n", "temp", ".", "append", "(", "j", ")", "\n", "", "cap", "=", "torch", ".", "LongTensor", "(", "temp", ")", "\n", "len1", "=", "torch", ".", "LongTensor", "(", "len1", ")", "\n", "return", "cap", ",", "len1", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.weights_init": [[186, 197], ["classname.find", "torch.init.orthogonal", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_", "classname.find", "torch.init.orthogonal", "m.bias.data.fill_"], "function", ["None"], ["", "", "def", "weights_init", "(", "m", ")", ":", "# to inotialize weigts of model", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "orthogonal", "(", "m", ".", "weight", ".", "data", ",", "1.0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "orthogonal", "(", "m", ".", "weight", ".", "data", ",", "1.0", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.load_params": [[198, 201], ["zip", "model.parameters", "p.data.copy_"], "function", ["None"], ["", "", "", "def", "load_params", "(", "model", ",", "new_param", ")", ":", "\n", "    ", "for", "p", ",", "new_p", "in", "zip", "(", "model", ".", "parameters", "(", ")", ",", "new_param", ")", ":", "\n", "        ", "p", ".", "data", ".", "copy_", "(", "new_p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.copy_G_params": [[203, 206], ["copy.deepcopy", "list", "model.parameters"], "function", ["None"], ["", "", "def", "copy_G_params", "(", "model", ")", ":", "\n", "    ", "flatten", "=", "deepcopy", "(", "list", "(", "p", ".", "data", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", ")", "\n", "return", "flatten", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.define_optimizers": [[208, 276], ["torch.Adam", "torch.Adam", "torch.RMSprop", "torch.RMSprop", "netDIT.parameters", "netGIT.parameters", "netDTI.parameters", "netGTI.parameters", "os.path.join", "print", "torch.load", "torch.load", "torch.load", "optimizerToDevice.load_state_dict", "MappingImageText.optimizerToDevice", "IT_GEN_PATH.rfind", "os.path.join", "torch.load", "torch.load", "torch.load", "print", "optimizerToDevice.load_state_dict", "MappingImageText.optimizerToDevice", "os.path.join", "print", "torch.load", "torch.load", "torch.load", "optimizerToDevice.load_state_dict", "MappingImageText.optimizerToDevice", "TI_GEN_PATH.rfind", "os.path.join", "torch.load", "torch.load", "torch.load", "print", "optimizerToDevice.load_state_dict", "MappingImageText.optimizerToDevice", "IT_GEN_PATH.rfind", "int", "TI_GEN_PATH.rfind"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.optimizerToDevice", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.optimizerToDevice", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.optimizerToDevice", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.optimizerToDevice"], ["", "def", "define_optimizers", "(", "netGIT", ",", "netDIT", ",", "netGTI", ",", "netDTI", ",", "path", ")", ":", "\n", "    ", "optimizerDIT", "=", "optim", ".", "Adam", "(", "netDIT", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "DISCRIMINATOR_LR", ",", "\n", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "\n", "# G_opt_paras = []", "\n", "# for p in netG.parameters():", "\n", "#     if p.requires_grad:", "\n", "#         G_opt_paras.append(p)", "\n", "optimizerGIT", "=", "optim", ".", "Adam", "(", "netGIT", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "GENERATOR_LR", ",", "\n", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "\n", "#optimizerDTI = optim.Adam(netDTI.parameters(),", "\n", "#                    lr=cfg.TRAIN.DISCRIMINATOR_LR,", "\n", "#                   betas=(0.5, 0.999))", "\n", "\n", "optimizerDTI", "=", "optim", ".", "RMSprop", "(", "netDTI", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ")", "\n", "\n", "# G_opt_paras = []", "\n", "# for p in netG.parameters():", "\n", "#     if p.requires_grad:", "\n", "#         G_opt_paras.append(p)", "\n", "#optimizerGTI = optim.Adam(netGTI.parameters(),", "\n", "#                       lr=cfg.TRAIN.GENERATOR_LR,", "\n", "#                      betas=(0.5, 0.999))", "\n", "optimizerGTI", "=", "optim", ".", "RMSprop", "(", "netGTI", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ")", "\n", "\n", "\n", "count", "=", "0", "\n", "if", "IT_GEN_PATH", "!=", "''", ":", "\n", "# example cfg.TRAIN.NET_G = ", "\n", "        ", "Gpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "IT_GEN_PATH", ")", "\n", "print", "(", "'loading optimizer from '", ",", "Gpath", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Gpath", ")", "\n", "optimizerGIT", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "optimizerGIT", "=", "optimizerToDevice", "(", "optimizerGIT", ")", "\n", "istart", "=", "IT_GEN_PATH", ".", "rfind", "(", "'_'", ")", "+", "1", "\n", "iend", "=", "IT_GEN_PATH", ".", "rfind", "(", "'.'", ")", "\n", "count", "=", "IT_GEN_PATH", "[", "istart", ":", "iend", "]", "\n", "count", "=", "int", "(", "count", ")", "+", "1", "\n", "\n", "", "if", "IT_DIS_PATH", "!=", "''", ":", "\n", "            ", "Dpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "IT_DIS_PATH", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Dpath", ")", "\n", "print", "(", "'loading optimizer from '", ",", "Dpath", ")", "\n", "optimizerDIT", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "optimizerDIT", "=", "optimizerToDevice", "(", "optimizerDIT", ")", "\n", "\n", "", "if", "TI_GEN_PATH", "!=", "''", ":", "\n", "# example cfg.TRAIN.NET_G = ", "\n", "        ", "Gpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "TI_GEN_PATH", ")", "\n", "print", "(", "'loading optimizer from '", ",", "Gpath", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Gpath", ")", "\n", "optimizerGTI", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "optimizerGTI", "=", "optimizerToDevice", "(", "optimizerGTI", ")", "\n", "istart", "=", "TI_GEN_PATH", ".", "rfind", "(", "'_'", ")", "+", "1", "\n", "iend", "=", "TI_GEN_PATH", ".", "rfind", "(", "'.'", ")", "\n", "#count = TI_GEN_PATH[istart:iend]", "\n", "#count = int(count) + 1", "\n", "\n", "", "if", "TI_DIS_PATH", "!=", "''", ":", "\n", "            ", "Dpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "TI_DIS_PATH", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Dpath", ")", "\n", "print", "(", "'loading optimizer from '", ",", "Dpath", ")", "\n", "optimizerDTI", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "optimizerDTI", "=", "optimizerToDevice", "(", "optimizerDTI", ")", "\n", "", "return", "optimizerGIT", ",", "optimizerDIT", ",", "optimizerGTI", ",", "optimizerDTI", ",", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.load_network": [[277, 364], ["models.stack_gan2.model1.G_NET1", "torch.nn.DataParallel.apply", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "models.stack_gan2.model1.MAP_NET_IT22", "torch.nn.DataParallel.apply", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "models.stack_gan2.model1.D_NET_TEXT1", "torch.nn.DataParallel.apply", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "print", "models.stack_gan2.model1.MAP_NET_TI22", "torch.nn.DataParallel.apply", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "models.stack_gan2.model1.D_NET_IMAGE1", "torch.nn.DataParallel.apply", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "print", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel.load_state_dict", "print", "os.path.join", "print", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel.load_state_dict", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel.load_state_dict", "print", "os.path.join", "print", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel.cuda"], "function", ["None"], ["", "def", "load_network", "(", "path", ")", ":", "\n", "####################Image deoder################################", "\n", "    ", "netG", "=", "G_NET1", "(", ")", "\n", "netG", ".", "apply", "(", "weights_init", ")", "\n", "netG", "=", "torch", ".", "nn", ".", "DataParallel", "(", "netG", ",", "device_ids", "=", "gpus", ")", "\n", "#################################################################", "\n", "#########################Image to text GEN##################################", "\n", "genIT", "=", "MAP_NET_IT22", "(", ")", "\n", "genIT", ".", "apply", "(", "weights_init", ")", "\n", "genIT", "=", "torch", ".", "nn", ".", "DataParallel", "(", "genIT", ",", "device_ids", "=", "gpus", ")", "\n", "####################################################################", "\n", "#########################Image to text Discriminator###############", "\n", "disIT", "=", "D_NET_TEXT1", "(", ")", "\n", "disIT", ".", "apply", "(", "weights_init", ")", "\n", "disIT", "=", "torch", ".", "nn", ".", "DataParallel", "(", "disIT", ",", "device_ids", "=", "gpus", ")", "\n", "print", "(", "disIT", ")", "\n", "#########################Text to Image GEN##################################", "\n", "genTI", "=", "MAP_NET_TI22", "(", ")", "\n", "genTI", ".", "apply", "(", "weights_init", ")", "\n", "genTI", "=", "torch", ".", "nn", ".", "DataParallel", "(", "genTI", ",", "device_ids", "=", "gpus", ")", "\n", "#########################text to IMAGE Discriminator###############", "\n", "disTI", "=", "D_NET_IMAGE1", "(", ")", "\n", "disTI", ".", "apply", "(", "weights_init", ")", "\n", "disTI", "=", "torch", ".", "nn", ".", "DataParallel", "(", "disTI", ",", "device_ids", "=", "gpus", ")", "\n", "print", "(", "disTI", ")", "\n", "\n", "\n", "\n", "if", "IT_GEN_PATH", "!=", "''", ":", "\n", "# example cfg.TRAIN.NET_G = ", "\n", "        ", "Gpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "IT_GEN_PATH", ")", "\n", "#print(Gpath)", "\n", "#print(genIT)", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Gpath", ")", "\n", "genIT", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "#Epath = os.path.join(path, 'encG.pth' )", "\n", "#checkpoint = torch.load(Epath)", "\n", "#enc.load_state_dict(checkpoint['state_dict'])", "\n", "\n", "print", "(", "'Load '", ",", "IT_GEN_PATH", ")", "\n", "\n", "#istart = IT_GEN_PATH('_') + 1", "\n", "#iend = IT_GEN_PATH.rfind('.')", "\n", "#count = IT_GEN_PATH[istart:iend]", "\n", "#count = int(count) + 1", "\n", "\n", "", "if", "IT_DIS_PATH", "!=", "''", ":", "\n", "            ", "Dpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "IT_DIS_PATH", ")", "\n", "print", "(", "'Load '", ",", "IT_DIS_PATH", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Dpath", ")", "\n", "disIT", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "", "if", "TI_GEN_PATH", "!=", "''", ":", "\n", "# example cfg.TRAIN.NET_G = ", "\n", "        ", "Gpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "TI_GEN_PATH", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Gpath", ")", "\n", "genTI", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "#Epath = os.path.join(path, 'encG.pth' )", "\n", "#checkpoint = torch.load(Epath)", "\n", "#enc.load_state_dict(checkpoint['state_dict'])", "\n", "\n", "print", "(", "'Load '", ",", "TI_GEN_PATH", ")", "\n", "\n", "#istart = IT_GEN_PATH('_') + 1", "\n", "#iend = IT_GEN_PATH.rfind('.')", "\n", "#count = IT_GEN_PATH[istart:iend]", "\n", "#count = int(count) + 1", "\n", "\n", "", "if", "TI_DIS_PATH", "!=", "''", ":", "\n", "            ", "Dpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "TI_DIS_PATH", ")", "\n", "print", "(", "'Load '", ",", "TI_DIS_PATH", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "Dpath", ")", "\n", "disTI", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "\n", "\n", "#if cfg.CUDA:", "\n", "", "if", "True", ":", "\n", "        ", "netG", ".", "cuda", "(", ")", "\n", "genIT", ".", "cuda", "(", ")", "\n", "disIT", ".", "cuda", "(", ")", "\n", "genTI", ".", "cuda", "(", ")", "\n", "disTI", ".", "cuda", "(", ")", "\n", "\n", "\n", "\n", "", "return", "netG", ",", "genIT", ",", "disIT", ",", "genTI", ",", "disTI", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.loss_function": [[367, 373], ["torch.MSELoss", "torch.MSELoss"], "function", ["None"], ["", "def", "loss_function", "(", "final_img", ",", "residual_img", ",", "upscaled_img", ",", "com_img", ",", "orig_img", ")", ":", "\n", "#size average false means return sum over all pixel points if set to true average over pixel points returned", "\n", "  ", "com_loss", "=", "nn", ".", "MSELoss", "(", "size_average", "=", "False", ")", "(", "orig_img", ",", "final_img", ")", "\n", "rec_loss", "=", "nn", ".", "MSELoss", "(", "size_average", "=", "False", ")", "(", "residual_img", ",", "orig_img", "-", "upscaled_img", ")", "\n", "\n", "return", "com_loss", "+", "rec_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.KL_loss": [[375, 380], ["mu.pow().add_().mul_().add_().add_", "torch.mean().mul_", "torch.mean().mul_", "torch.mean().mul_", "mu.pow().add_().mul_().add_", "torch.mean", "torch.mean", "torch.mean", "mu.pow().add_().mul_", "mu.pow().add_", "logvar.exp", "mu.pow"], "function", ["None"], ["", "def", "KL_loss", "(", "mu", ",", "logvar", ")", ":", "\n", "# -0.5 * sum(1 + log(sigma^2) - mu^2 - sigma^2)", "\n", "    ", "KLD_element", "=", "mu", ".", "pow", "(", "2", ")", ".", "add_", "(", "logvar", ".", "exp", "(", ")", ")", ".", "mul_", "(", "-", "1", ")", ".", "add_", "(", "1", ")", ".", "add_", "(", "logvar", ")", "\n", "KLD", "=", "torch", ".", "mean", "(", "KLD_element", ")", ".", "mul_", "(", "-", "0.5", ")", "\n", "return", "KLD", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.load_checkpoint": [[384, 391], ["print", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "optimizer.load_state_dict"], "function", ["None"], ["", "def", "load_checkpoint", "(", "model", ",", "optimizer", ",", "filename", ")", ":", "\n", "# Note: Input model & optimizer should be pre-defined.  This routine only updates their states.", "\n", "    ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "filename", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "return", "model", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.optimizerToDevice": [[392, 398], ["optimizer.state.values", "state.items", "isinstance", "v.cuda"], "function", ["None"], ["", "def", "optimizerToDevice", "(", "optimizer", ")", ":", "\n", "    ", "for", "state", "in", "optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "state", "[", "k", "]", "=", "v", ".", "cuda", "(", ")", "\n", "", "", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.save_model": [[400, 431], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "netGIT.state_dict", "optimizerGIT.state_dict", "netDIT.state_dict", "optimizerDIT.state_dict", "netGTI.state_dict", "optimizerGTI.state_dict", "netDTI.state_dict", "optimizerDTI.state_dict"], "function", ["None"], ["", "def", "save_model", "(", "netGIT", ",", "optimizerGIT", ",", "netDIT", ",", "optimizerDIT", ",", "netGTI", ",", "optimizerGTI", ",", "netDTI", ",", "optimizerDTI", ",", "epoch", ",", "model_dir", ")", ":", "\n", "#load_params(netG, avg_param_G)", "\n", "#load_params(enc, avg_param_E)", "\n", "\n", "\n", "\n", "\n", "    ", "stateGIT", "=", "{", "'state_dict'", ":", "netGIT", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizerGIT", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "\n", "stateGIT", ",", "\n", "'%s/netGIT_%d.pth'", "%", "(", "model_dir", ",", "epoch", ")", ")", "\n", "stateDIT", "=", "{", "'state_dict'", ":", "netDIT", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizerDIT", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "\n", "stateDIT", ",", "\n", "'%s/netDIT.pth'", "%", "model_dir", ")", "\n", "\n", "\n", "stateGTI", "=", "{", "'state_dict'", ":", "netGTI", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizerGTI", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "\n", "stateGTI", ",", "\n", "'%s/netGTI_%d.pth'", "%", "(", "model_dir", ",", "epoch", ")", ")", "\n", "stateDTI", "=", "{", "'state_dict'", ":", "netDTI", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizerDTI", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "\n", "stateDTI", ",", "\n", "'%s/netDTI.pth'", "%", "model_dir", ")", "\n", "\n", "print", "(", "'Save G/Ds models...count:%d'", "%", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.initialize_model": [[432, 464], ["models.AutoEncoderD", "text_models.AutoEncoderD.cuda", "MappingImageText.load_network", "models.stack_gan2.model1.encoder_resnet1", "models.stack_gan2.model1.encoder_resnet1.cuda", "print", "torch.load", "torch.load", "torch.load", "models.stack_gan2.model1.encoder_resnet1.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "dec.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "text_models.AutoEncoderD.load_state_dict"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.load_network"], ["", "def", "initialize_model", "(", "model_name", ",", "config", ",", "embeddings_matrix", ")", ":", "\n", "\n", "    ", "model_ft", "=", "text_models", ".", "AutoEncoderD", "(", "config", ",", "embeddings_matrix", ")", "\n", "model_ft", ".", "cuda", "(", ")", "\n", "#model_ft = model_ft.to(device)", "\n", "\n", "\n", "dec", ",", "genIT", ",", "disIT", ",", "genTI", ",", "disTI", "=", "load_network", "(", "model_dir", ")", "\n", "\n", "#enc = torch_models.resnet50(pretrained=True)", "\n", "#num_ftrs = enc.fc.in_features", "\n", "#enc.fc = nn.Linear(num_ftrs, 1024)", "\n", "#enc = enc.to(device)", "\n", "enc", "=", "encoder_resnet1", "(", ")", "\n", "enc", ".", "cuda", "(", ")", "\n", "\n", "print", "(", "\"=> loading Image encoder from '{}'\"", ".", "format", "(", "encoder_path", ")", ")", "\n", "encoder", "=", "torch", ".", "load", "(", "encoder_path", ")", "\n", "enc", ".", "load_state_dict", "(", "encoder", "[", "'state_dict'", "]", ")", "\n", "\n", "\n", "print", "(", "\"=> loading Image decoder from '{}'\"", ".", "format", "(", "dec_path", ")", ")", "\n", "decoder", "=", "torch", ".", "load", "(", "dec_path", ")", "\n", "dec", ".", "load_state_dict", "(", "decoder", "[", "'state_dict'", "]", ")", "\n", "\n", "\n", "print", "(", "\"=> loading text autoencoder from '{}'\"", ".", "format", "(", "text_autoencoder_path", ")", ")", "\n", "text_autoencoder", "=", "torch", ".", "load", "(", "text_autoencoder_path", ")", "\n", "model_ft", ".", "load_state_dict", "(", "text_autoencoder", "[", "'state_dict'", "]", ")", "\n", "\n", "\n", "return", "model_ft", ",", "enc", ",", "dec", ",", "genIT", ",", "disIT", ",", "genTI", ",", "disTI", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.save_results": [[467, 503], ["open", "open", "zip", "open.close", "open.close", "os.path.join", "os.path.join", "os.path.join", "data.resultwriter.ResultWriter", "data.resultwriter.ResultWriter", "data.resultwriter.ResultWriter", "os.path.join", "os.path.join", "MappingImageText.norm_range", "MappingImageText.norm_range", "MappingImageText.norm_range", "ii.numpy().transpose.cpu", "io.numpy().transpose.detach().cpu", "ii.numpy().transpose.numpy().transpose", "io.numpy().transpose.numpy().transpose", "ig.detach().cpu().numpy().transpose.detach().cpu().numpy().transpose", "data.resultwriter.ResultWriter.write_images", "data.resultwriter.ResultWriter.write_image_with_text", "data.resultwriter.ResultWriter.write_image_with_text", "print", "print", "results_writer_input.write_images1", "results_writer_output.write_images1", "io.numpy().transpose.detach", "ii.numpy().transpose.numpy", "io.numpy().transpose.numpy", "ig.detach().cpu().numpy().transpose.detach().cpu().numpy", "ig.detach().cpu().numpy().transpose.detach().cpu", "ig.detach().cpu().numpy().transpose.detach"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.norm_range", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.norm_range", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.MappingImageText.norm_range", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.resultwriter.ResultWriter.write_images", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.resultwriter.ResultWriter.write_image_with_text", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.resultwriter.ResultWriter.write_image_with_text", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.resultwriter.ResultWriter.write_images1", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.resultwriter.ResultWriter.write_images1"], ["", "def", "save_results", "(", "imgs_input", ",", "imgs_output", ",", "imgs_generated", ",", "text_input", ",", "text_generated", ",", "text_output", ",", "count", ")", ":", "\n", "    ", "if", "count", "!=", "-", "1", ":", "#for validation will be saved in a single folder", "\n", "        ", "img_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'imgdir%d'", "%", "count", ")", "\n", "img_txt_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'imgtxtdir%d'", "%", "count", ")", "\n", "txt_img_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'txtimgdir%d'", "%", "count", ")", "\n", "results_writer_img", "=", "ResultWriter", "(", "img_dir", ")", "\n", "results_writer_imgtxt", "=", "ResultWriter", "(", "img_txt_dir", ")", "\n", "results_writer_txtimg", "=", "ResultWriter", "(", "txt_img_dir", ")", "\n", "", "else", ":", "\n", "        ", "img_dir", "=", "img_dir_val", "\n", "img_txt_dir", "=", "img_txt_dir_val", "\n", "results_writer_img", "=", "results_writer_img_val", "\n", "results_writer_imgtxt", "=", "results_writer_imgtxt_val", "\n", "results_writer_txtimg", "=", "results_writer_txtimg_val", "\n", "\n", "", "fg", "=", "open", "(", "os", ".", "path", ".", "join", "(", "img_dir", ",", "'generated.txt'", ")", ",", "'a+'", ")", "\n", "fo", "=", "open", "(", "os", ".", "path", ".", "join", "(", "img_dir", ",", "'output.txt'", ")", ",", "'a+'", ")", "\n", "for", "ii", ",", "io", ",", "ig", ",", "ti", ",", "tg", ",", "to", "in", "zip", "(", "imgs_input", ",", "imgs_output", ",", "imgs_generated", ",", "text_input", ",", "text_generated", ",", "text_output", ")", ":", "\n", "        ", "ii", "=", "norm_range", "(", "ii", ")", "#normalize to (0,1)", "\n", "io", "=", "norm_range", "(", "io", ")", "#normalize to (0,1)", "\n", "ig", "=", "norm_range", "(", "ig", ")", "#normalize to (0,1)", "\n", "ii", "=", "ii", ".", "cpu", "(", ")", "\n", "io", "=", "io", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "if", "count", "==", "-", "1", ":", "\n", "            ", "results_writer_input", ".", "write_images1", "(", "ii", ")", "\n", "results_writer_output", ".", "write_images1", "(", "io", ")", "\n", "", "ii", "=", "ii", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "#in order to use plt.imshow the channel should be the last dimention", "\n", "io", "=", "io", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "ig", "=", "ig", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "results_writer_img", ".", "write_images", "(", "io", ",", "ii", ")", "\n", "results_writer_imgtxt", ".", "write_image_with_text", "(", "ii", ",", "tg", ")", "\n", "results_writer_txtimg", ".", "write_image_with_text", "(", "ig", ",", "ti", ")", "\n", "print", "(", "ti", ",", "'\\t'", ",", "tg", ",", "file", "=", "fg", ")", "\n", "print", "(", "ti", ",", "'\\t'", ",", "to", ",", "file", "=", "fo", ")", "\n", "", "fg", ".", "close", "(", ")", "\n", "fo", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.run_text_test.SimpleAutoencoder.__init__": [[125, 129], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", "SimpleAutoencoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "decoder", "=", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.run_text_test.SimpleAutoencoder.forward": [[130, 135], ["run_text_test.SimpleAutoencoder.encoder", "run_text_test.SimpleAutoencoder.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "mu", ",", "sigma", "=", "self", ".", "encoder", "(", "x", ")", "\n", "#x, _, _ = self.encoder(x)", "\n", "x", ",", "_", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "x", ",", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.run_text_test.adjust_padding": [[136, 147], ["torch.LongTensor.numpy", "torch.LongTensor.numpy", "max", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "temp.append"], "function", ["None"], ["", "", "def", "adjust_padding", "(", "cap", ",", "len1", ")", ":", "\n", "    ", "cap", "=", "cap", ".", "numpy", "(", ")", "\n", "len1", "=", "len1", ".", "numpy", "(", ")", "\n", "max_len", "=", "max", "(", "len1", ")", "\n", "temp", "=", "[", "]", "\n", "for", "i", "in", "cap", ":", "\n", "        ", "j", "=", "i", "[", "0", ":", "max_len", "]", "\n", "temp", ".", "append", "(", "j", ")", "\n", "", "cap", "=", "torch", ".", "LongTensor", "(", "temp", ")", "\n", "len1", "=", "torch", ".", "LongTensor", "(", "len1", ")", "\n", "return", "cap", ",", "len1", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.run_text_test.load_checkpoint": [[149, 157], ["print", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "optimizer.load_state_dict", "print"], "function", ["None"], ["", "def", "load_checkpoint", "(", "model", ",", "optimizer", ",", "filename", ")", ":", "\n", "# Note: Input model & optimizer should be pre-defined.  This routine only updates their states.", "\n", "    ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "filename", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "'model load successful'", ")", "\n", "return", "model", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.run_text_test.initialize_model": [[159, 168], ["models.AutoEncoderD"], "function", ["None"], ["", "def", "initialize_model", "(", "model_name", ",", "config", ",", "embeddings_matrix", ")", ":", "\n", "# Initialize these variables which will be set in this if statement. Each of these", "\n", "#   variables is model specific.", "\n", "\n", "    ", "autoencoder_model", "=", "text_models", ".", "AutoEncoderD", "(", "config", ",", "embeddings_matrix", ")", "\n", "#decoder = G_NET()", "\n", "\n", "\n", "return", "autoencoder_model", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.run_text_test.train_model": [[169, 276], ["time.time", "range", "print", "print", "run_text_test.load_checkpoint", "time.time", "print", "print", "print", "time.time", "str", "str", "print", "print", "time.time", "print", "print", "print", "min", "run_text_test.adjust_padding", "captions.cuda.cuda", "lengths.cuda.cuda", "optimizer.zero_grad", "torch.exp.item", "len", "len", "open", "vocab.decode_positions", "vocab.decode_positions", "zip", "open.close", "early_stopping", "val_loss_history.append", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "model", "criterion", "torch.exp", "torch.exp", "torch.exp", "criterion.item", "captions.cuda.size", "os.path.join", "print", "str", "str", "out[].contiguous().view", "captions[].flatten", "criterion.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "model.parameters", "out[].contiguous", "str"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.run_text_test.load_checkpoint", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.run_text_test.adjust_padding", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.decode_positions", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.decode_positions"], ["", "def", "train_model", "(", "model", ",", "dataloaders", ",", "criterion", ",", "optimizer", ",", "num_epochs", "=", "25", ",", "restart_epoch", "=", "1", ")", ":", "\n", "    ", "since", "=", "time", ".", "time", "(", ")", "\n", "\n", "val_loss_history", "=", "[", "]", "\n", "\n", "for", "epoch", "in", "range", "(", "restart_epoch", "-", "1", ",", "num_epochs", ")", ":", "\n", "        ", "start_t", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Epoch {}/{}'", ".", "format", "(", "epoch", "+", "1", ",", "num_epochs", ")", ")", "\n", "print", "(", "'-'", "*", "10", ")", "\n", "\n", "# Each epoch has a training and validation phase", "\n", "if", "benchmark", ":", "\n", "            ", "phases", "=", "[", "'train'", "]", "\n", "save_model_phase", "=", "'train'", "\n", "print", "(", "'##############training for benchmark dataset#################'", ")", "\n", "", "else", ":", "\n", "            ", "phases", "=", "[", "'train'", ",", "'val'", "]", "\n", "save_model_phase", "=", "'val'", "\n", "print", "(", "'##############training for birds dataset#################'", ")", "\n", "\n", "\n", "", "for", "phase", "in", "phases", ":", "\n", "#if phase == 'train':", "\n", "#   model.train()  # Set model to training mode", "\n", "#else:", "\n", "#   model.eval()   # Set model to evaluate mode", "\n", "\n", "            ", "running_loss", "=", "0.0", "\n", "running_perplexity", "=", "0.0", "\n", "\n", "\n", "\n", "# Iterate over data.", "\n", "for", "_", ",", "_", ",", "captions", ",", "lengths", "in", "dataloaders", "[", "phase", "]", ":", "\n", "#print('cap:',captions)", "\n", "#print('len:',lengths)", "\n", "                ", "captions", ",", "lengths", "=", "adjust_padding", "(", "captions", ",", "lengths", ")", "\n", "#print('new cap:',captions)", "\n", "#print('new_len:', lengths)", "\n", "#print('length of dataset',len(dataloaders[phase].dataset))", "\n", "\n", "captions", "=", "captions", ".", "cuda", "(", ")", "\n", "lengths", "=", "lengths", ".", "cuda", "(", ")", "\n", "# zero the parameter gradients", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# forward", "\n", "# track history if only in train", "\n", "with", "torch", ".", "set_grad_enabled", "(", "phase", "==", "'train'", ")", ":", "\n", "# Get model outputs and calculate loss", "\n", "                    ", "out", ",", "index", "=", "model", "(", "captions", ",", "lengths", ")", "\n", "#print(out.shape)", "\n", "#print(captions.shape)", "\n", "#print(lengths)", "\n", "# Since we train an autoencoder we compare the output to the original input", "\n", "loss", "=", "criterion", "(", "out", "[", ":", ",", "1", ":", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "out", ".", "shape", "[", "2", "]", ")", ",", "captions", "[", ":", ",", "1", ":", "]", ".", "flatten", "(", ")", ")", "\n", "# backward + optimize only if in training phase", "\n", "perplexity", "=", "torch", ".", "exp", "(", "loss", ")", "\n", "if", "phase", "==", "'train'", ":", "\n", "                        ", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "5.00", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# statistics", "\n", "\n", "", "", "running_loss", "+=", "loss", ".", "item", "(", ")", "*", "captions", ".", "size", "(", "0", ")", "\n", "running_perplexity", "+=", "perplexity", ".", "item", "(", ")", "\n", "\n", "", "epoch_loss", "=", "running_loss", "/", "len", "(", "dataloaders", "[", "phase", "]", ".", "dataset", ")", "\n", "epoch_perplexity", "=", "running_perplexity", "/", "len", "(", "dataloaders", "[", "phase", "]", ")", "\n", "end_t", "=", "time", ".", "time", "(", ")", "\n", "# calculating perplexity", "\n", "\n", "print", "(", "'{} Loss: {:.4f} Perplexity: {:.4f}'", ".", "format", "(", "phase", ",", "epoch_loss", ",", "epoch_perplexity", ")", ")", "\n", "print", "(", "'time taken:'", ",", "end_t", "-", "start_t", ")", "\n", "\n", "# deep copy the model", "\n", "\n", "if", "phase", "==", "save_model_phase", ":", "\n", "################checking intermediate results################", "\n", "                ", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "results_writer_val", ",", "'result_epoch_'", "+", "str", "(", "epoch", ")", "+", "'.txt'", ")", ",", "'w'", ")", "\n", "texts_i", "=", "vocab", ".", "decode_positions", "(", "captions", ")", "\n", "texts_o", "=", "vocab", ".", "decode_positions", "(", "index", ")", "\n", "for", "l", ",", "o", "in", "zip", "(", "texts_i", ",", "texts_o", ")", ":", "\n", "                    ", "print", "(", "l", ",", "'\\t'", ",", "o", ",", "file", "=", "f", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "##########################################################", "\n", "ver", "=", "str", "(", "benchmark", ")", "+", "str", "(", "epoch", ")", "\n", "chkpt", "=", "stored_model_dir", "+", "model_name", "+", "additional", "+", "ver", "+", "'.pt'", "\n", "early_stopping", "(", "epoch_loss", ",", "model", ",", "optimizer", ",", "chkpt", ")", "\n", "val_loss_history", ".", "append", "(", "epoch_loss", ")", "\n", "\n", "", "", "if", "early_stopping", ".", "early_stop", ":", "\n", "            ", "print", "(", "\"Early stopping\"", ")", "\n", "break", "\n", "\n", "", "print", "(", ")", "\n", "\n", "", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "since", "\n", "print", "(", "'Training complete in {:.0f}m {:.0f}s'", ".", "format", "(", "time_elapsed", "//", "60", ",", "time_elapsed", "%", "60", ")", ")", "\n", "print", "(", "'Best val loss: {:4f}'", ".", "format", "(", "min", "(", "val_loss_history", ")", ")", ")", "\n", "# load best model weights", "\n", "ver", "=", "str", "(", "benchmark", ")", "+", "str", "(", "epoch", "-", "early_stopping", ".", "counter", ")", "\n", "chkpt", "=", "stored_model_dir", "+", "model_name", "+", "additional", "+", "ver", "+", "'.pt'", "\n", "model", ",", "optimizer", "=", "load_checkpoint", "(", "model", ",", "optimizer", ",", "chkpt", ")", "\n", "#model.load_state_dict(torch.load('checkpoint.pt'))", "\n", "return", "model", ",", "val_loss_history", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.ImageFolder.__init__": [[71, 97], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "datasets.ImageFolder.find_classes", "datasets.ImageFolder.make_dataset", "len", "torchvision.Compose", "range", "print", "len", "RuntimeError", "datasets.ImageFolder.imsize.append", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.ImageFolder.find_classes", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.ImageFolder.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "split_dir", "=", "'train'", ",", "custom_classes", "=", "None", ",", "\n", "base_size", "=", "64", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "split_dir", ")", "\n", "classes", ",", "class_to_idx", "=", "self", ".", "find_classes", "(", "root", ",", "custom_classes", ")", "\n", "imgs", "=", "self", ".", "make_dataset", "(", "classes", ",", "class_to_idx", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in subfolders of: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "num_classes", "=", "len", "(", "classes", ")", "\n", "self", ".", "class_to_idx", "=", "class_to_idx", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "norm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "\n", "self", ".", "imsize", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "TREE", ".", "BRANCH_NUM", ")", ":", "\n", "            ", "self", ".", "imsize", ".", "append", "(", "base_size", ")", "\n", "base_size", "=", "base_size", "*", "2", "\n", "", "print", "(", "'num_classes'", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.ImageFolder.find_classes": [[98, 110], ["os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "print", "classes.sort", "len", "range", "classes.append", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "find_classes", "(", "self", ",", "dir", ",", "custom_classes", ")", ":", "\n", "        ", "classes", "=", "[", "]", "\n", "\n", "for", "d", "in", "os", ".", "listdir", "(", "dir", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "isdir", ":", "\n", "                ", "if", "custom_classes", "is", "None", "or", "d", "in", "custom_classes", ":", "\n", "                    ", "classes", ".", "append", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "d", ")", ")", "\n", "", "", "", "print", "(", "'Valid classes: '", ",", "len", "(", "classes", ")", ",", "classes", ")", "\n", "\n", "classes", ".", "sort", "(", ")", "\n", "class_to_idx", "=", "{", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "return", "classes", ",", "class_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.ImageFolder.make_dataset": [[111, 122], ["print", "sorted", "len", "os.walk", "os.walk", "os.walk", "os.walk", "os.walk", "os.walk", "os.walk", "os.walk", "os.walk", "os.walk", "os.walk", "os.walk", "os.walk", "os.walk", "os.walk", "os.walk", "datasets.is_image_file", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "images.append"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.util.is_image_file"], ["", "def", "make_dataset", "(", "self", ",", "classes", ",", "class_to_idx", ")", ":", "\n", "        ", "images", "=", "[", "]", "\n", "for", "d", "in", "classes", ":", "\n", "            ", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "d", ")", ")", ":", "\n", "                ", "for", "fname", "in", "fnames", ":", "\n", "                    ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                        ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "item", "=", "(", "path", ",", "class_to_idx", "[", "d", "]", ")", "\n", "images", ".", "append", "(", "item", ")", "\n", "", "", "", "", "print", "(", "'The number of images: '", ",", "len", "(", "images", ")", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.ImageFolder.__getitem__": [[123, 130], ["datasets.get_imgs"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.get_imgs"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "target", "=", "self", ".", "imgs", "[", "index", "]", "\n", "imgs_list", "=", "get_imgs", "(", "path", ",", "self", ".", "imsize", ",", "\n", "transform", "=", "self", ".", "transform", ",", "\n", "normalize", "=", "self", ".", "norm", ")", "\n", "\n", "return", "imgs_list", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.ImageFolder.__len__": [[131, 133], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.LSUNClass.__init__": [[136, 164], ["lmdb.open", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "range", "torchvision.Compose", "datasets.LSUNClass.env.begin", "print", "pickle.load", "print", "pickle.dump", "datasets.LSUNClass.imsize.append", "txn.stat", "open", "len", "datasets.LSUNClass.env.begin", "open", "torchvision.ToTensor", "torchvision.Normalize", "txn.cursor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "db_path", ",", "base_size", "=", "64", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "import", "lmdb", "\n", "self", ".", "db_path", "=", "db_path", "\n", "self", ".", "env", "=", "lmdb", ".", "open", "(", "db_path", ",", "max_readers", "=", "1", ",", "readonly", "=", "True", ",", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "meminit", "=", "False", ")", "\n", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "self", ".", "length", "=", "txn", ".", "stat", "(", ")", "[", "'entries'", "]", "\n", "print", "(", "'length: '", ",", "self", ".", "length", ")", "\n", "", "cache_file", "=", "db_path", "+", "'/cache'", "\n", "if", "os", ".", "path", ".", "isfile", "(", "cache_file", ")", ":", "\n", "            ", "self", ".", "keys", "=", "pickle", ".", "load", "(", "open", "(", "cache_file", ",", "\"rb\"", ")", ")", "\n", "print", "(", "'Load:'", ",", "cache_file", ",", "'keys: '", ",", "len", "(", "self", ".", "keys", ")", ")", "\n", "", "else", ":", "\n", "            ", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "                ", "self", ".", "keys", "=", "[", "key", "for", "key", ",", "_", "in", "txn", ".", "cursor", "(", ")", "]", "\n", "", "pickle", ".", "dump", "(", "self", ".", "keys", ",", "open", "(", "cache_file", ",", "\"wb\"", ")", ")", "\n", "\n", "", "self", ".", "imsize", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "TREE", ".", "BRANCH_NUM", ")", ":", "\n", "            ", "self", ".", "imsize", ".", "append", "(", "base_size", ")", "\n", "base_size", "=", "base_size", "*", "2", "\n", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "norm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.LSUNClass.__getitem__": [[165, 177], ["six.BytesIO", "six.BytesIO.write", "six.BytesIO.seek", "datasets.get_imgs", "env.begin", "txn.get"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.Logger.write", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.get_imgs"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "env", "=", "self", ".", "env", "\n", "with", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "imgbuf", "=", "txn", ".", "get", "(", "self", ".", "keys", "[", "index", "]", ")", "\n", "\n", "", "buf", "=", "six", ".", "BytesIO", "(", ")", "\n", "buf", ".", "write", "(", "imgbuf", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "imgs", "=", "get_imgs", "(", "buf", ",", "self", ".", "imsize", ",", "\n", "transform", "=", "self", ".", "transform", ",", "\n", "normalize", "=", "self", ".", "norm", ")", "\n", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.LSUNClass.__len__": [[178, 180], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.LSUNClass.__repr__": [[181, 183], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "self", ".", "db_path", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.TextDataset.__init__": [[186, 221], ["torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "datasets.TextDataset.load_filenames", "datasets.TextDataset.load_class_id", "datasets.TextDataset.load_all_captions", "datasets.TextDataset.imsize.append", "data_dir.find", "datasets.TextDataset.load_bbox", "len", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.TextDataset.load_filenames", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.TextDataset.load_class_id", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.TextDataset.load_all_captions", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.TextDataset.load_bbox"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "split", "=", "'train'", ",", "embedding_type", "=", "'cnn-rnn'", ",", "\n", "base_size", "=", "64", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "norm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "self", ".", "norm1", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "self", ".", "norm2", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "self", ".", "imsize", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "TREE", ".", "BRANCH_NUM", ")", ":", "\n", "            ", "self", ".", "imsize", ".", "append", "(", "base_size", ")", "\n", "base_size", "=", "base_size", "*", "2", "\n", "\n", "", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "if", "data_dir", ".", "find", "(", "'birds'", ")", "!=", "-", "1", ":", "\n", "            ", "self", ".", "bbox", "=", "self", ".", "load_bbox", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bbox", "=", "None", "\n", "", "split_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "split", ")", "\n", "\n", "self", ".", "filenames", "=", "self", ".", "load_filenames", "(", "split_dir", ")", "\n", "#self.embeddings = self.load_embedding(split_dir, embedding_type)", "\n", "self", ".", "class_id", "=", "self", ".", "load_class_id", "(", "split_dir", ",", "len", "(", "self", ".", "filenames", ")", ")", "\n", "self", ".", "captions", "=", "self", ".", "load_all_captions", "(", ")", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "FLAG", ":", "\n", "            ", "self", ".", "iterator", "=", "self", ".", "prepair_training_pairs", "\n", "", "else", ":", "\n", "            ", "self", ".", "iterator", "=", "self", ".", "prepair_test_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.TextDataset.load_bbox": [[222, 245], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "pandas.read_csv().astype", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "pandas.read_csv", "df_filenames[].tolist", "print", "len", "range", "len", "[].tolist", "pandas.read_csv"], "methods", ["None"], ["", "", "def", "load_bbox", "(", "self", ")", ":", "\n", "        ", "data_dir", "=", "self", ".", "data_dir", "\n", "bbox_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'CUB_200_2011/bounding_boxes.txt'", ")", "\n", "df_bounding_boxes", "=", "pd", ".", "read_csv", "(", "bbox_path", ",", "\n", "delim_whitespace", "=", "True", ",", "\n", "header", "=", "None", ")", ".", "astype", "(", "int", ")", "\n", "#", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'CUB_200_2011/images.txt'", ")", "\n", "df_filenames", "=", "pd", ".", "read_csv", "(", "filepath", ",", "delim_whitespace", "=", "True", ",", "header", "=", "None", ")", "\n", "filenames", "=", "df_filenames", "[", "1", "]", ".", "tolist", "(", ")", "\n", "print", "(", "'Total filenames: '", ",", "len", "(", "filenames", ")", ",", "filenames", "[", "0", "]", ")", "\n", "#", "\n", "filename_bbox", "=", "{", "img_file", "[", ":", "-", "4", "]", ":", "[", "]", "for", "img_file", "in", "filenames", "}", "\n", "numImgs", "=", "len", "(", "filenames", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "numImgs", ")", ":", "\n", "# bbox = [x-left, y-top, width, height]", "\n", "            ", "bbox", "=", "df_bounding_boxes", ".", "iloc", "[", "i", "]", "[", "1", ":", "]", ".", "tolist", "(", ")", "\n", "\n", "key", "=", "filenames", "[", "i", "]", "[", ":", "-", "4", "]", "\n", "filename_bbox", "[", "key", "]", "=", "bbox", "\n", "#", "\n", "", "return", "filename_bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.TextDataset.load_all_captions": [[246, 261], ["datasets.TextDataset.load_all_captions.load_captions"], "methods", ["None"], ["", "def", "load_all_captions", "(", "self", ")", ":", "\n", "        ", "def", "load_captions", "(", "caption_name", ")", ":", "# self,", "\n", "            ", "cap_path", "=", "caption_name", "\n", "with", "open", "(", "cap_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "captions", "=", "f", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "", "captions", "=", "[", "cap", ".", "replace", "(", "\"\\ufffd\\ufffd\"", ",", "\" \"", ")", "\n", "for", "cap", "in", "captions", "if", "len", "(", "cap", ")", ">", "0", "]", "\n", "return", "captions", "\n", "\n", "", "caption_dict", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "filenames", ":", "\n", "            ", "caption_name", "=", "'%s/text/%s.txt'", "%", "(", "self", ".", "data_dir", ",", "key", ")", "\n", "captions", "=", "load_captions", "(", "caption_name", ")", "\n", "caption_dict", "[", "key", "]", "=", "captions", "\n", "", "return", "caption_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.TextDataset.load_class_id": [[277, 284], ["os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "numpy.arange", "open", "pickle.load"], "methods", ["None"], ["", "def", "load_class_id", "(", "self", ",", "data_dir", ",", "total_num", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "data_dir", "+", "'/class_info.pickle'", ")", ":", "\n", "            ", "with", "open", "(", "data_dir", "+", "'/class_info.pickle'", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "class_id", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "", "else", ":", "\n", "            ", "class_id", "=", "np", ".", "arange", "(", "total_num", ")", "\n", "", "return", "class_id", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.TextDataset.load_filenames": [[285, 291], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "print", "open", "pickle.load", "len"], "methods", ["None"], ["", "def", "load_filenames", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "filepath", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'filenames.pickle'", ")", "\n", "with", "open", "(", "filepath", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "filenames", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "print", "(", "'Load filenames from: %s (%d)'", "%", "(", "filepath", ",", "len", "(", "filenames", ")", ")", ")", "\n", "return", "filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.TextDataset.prepair_training_pairs": [[292, 329], ["datasets.get_imgs", "datasets.get_imgs", "random.randint", "datasets.get_imgs", "random.randint", "len", "len"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.get_imgs", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.get_imgs", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.get_imgs"], ["", "def", "prepair_training_pairs", "(", "self", ",", "index", ")", ":", "\n", "        ", "key", "=", "self", ".", "filenames", "[", "index", "]", "\n", "if", "self", ".", "bbox", "is", "not", "None", ":", "\n", "            ", "bbox", "=", "self", ".", "bbox", "[", "key", "]", "\n", "data_dir", "=", "'%s/CUB_200_2011'", "%", "self", ".", "data_dir", "\n", "", "else", ":", "\n", "            ", "bbox", "=", "None", "\n", "data_dir", "=", "self", ".", "data_dir", "\n", "# captions = self.captions[key]", "\n", "#embeddings = self.embeddings[index, :, :]", "\n", "", "img_name", "=", "'%s/images/%s.jpg'", "%", "(", "data_dir", ",", "key", ")", "\n", "imgs", "=", "get_imgs", "(", "img_name", ",", "self", ".", "imsize", ",", "\n", "bbox", ",", "self", ".", "transform", ",", "normalize", "=", "self", ".", "norm", ")", "\n", "sz", "=", "[", "224", ",", "224", ",", "224", "]", "\n", "unimgs", "=", "get_imgs", "(", "img_name", ",", "sz", ",", "\n", "bbox", ",", "self", ".", "transform", ",", "normalize", "=", "self", ".", "norm2", ")", "\n", "\n", "wrong_ix", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "filenames", ")", "-", "1", ")", "\n", "if", "(", "self", ".", "class_id", "[", "index", "]", "==", "self", ".", "class_id", "[", "wrong_ix", "]", ")", ":", "\n", "            ", "wrong_ix", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "filenames", ")", "-", "1", ")", "\n", "", "wrong_key", "=", "self", ".", "filenames", "[", "wrong_ix", "]", "\n", "if", "self", ".", "bbox", "is", "not", "None", ":", "\n", "            ", "wrong_bbox", "=", "self", ".", "bbox", "[", "wrong_key", "]", "\n", "", "else", ":", "\n", "            ", "wrong_bbox", "=", "None", "\n", "", "wrong_img_name", "=", "'%s/images/%s.jpg'", "%", "(", "data_dir", ",", "wrong_key", ")", "\n", "wrong_imgs", "=", "get_imgs", "(", "wrong_img_name", ",", "self", ".", "imsize", ",", "\n", "wrong_bbox", ",", "self", ".", "transform", ",", "normalize", "=", "self", ".", "norm", ")", "\n", "\n", "#embedding_ix = random.randint(0, embeddings.shape[0] - 1)", "\n", "#embedding = embeddings[embedding_ix, :]", "\n", "#if self.target_transform is not None:", "\n", "#   embedding = self.target_transform(embedding)", "\n", "embedding", "=", "0", "\n", "\n", "return", "unimgs", ",", "imgs", ",", "wrong_imgs", ",", "embedding", ",", "key", "# captions", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.TextDataset.prepair_test_pairs": [[330, 349], ["datasets.get_imgs"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.get_imgs"], ["", "def", "prepair_test_pairs", "(", "self", ",", "index", ")", ":", "\n", "        ", "key", "=", "self", ".", "filenames", "[", "index", "]", "\n", "if", "self", ".", "bbox", "is", "not", "None", ":", "\n", "            ", "bbox", "=", "self", ".", "bbox", "[", "key", "]", "\n", "data_dir", "=", "'%s/CUB_200_2011'", "%", "self", ".", "data_dir", "\n", "", "else", ":", "\n", "            ", "bbox", "=", "None", "\n", "data_dir", "=", "self", ".", "data_dir", "\n", "# captions = self.captions[key]", "\n", "#embeddings = self.embeddings[index, :, :]", "\n", "", "embeddings", "=", "0", "\n", "img_name", "=", "'%s/images/%s.jpg'", "%", "(", "data_dir", ",", "key", ")", "\n", "imgs", "=", "get_imgs", "(", "img_name", ",", "self", ".", "imsize", ",", "\n", "bbox", ",", "self", ".", "transform", ",", "normalize", "=", "self", ".", "norm", ")", "\n", "\n", "#if self.target_transform is not None:", "\n", "#embeddings = self.target_transform(embeddings)", "\n", "\n", "return", "imgs", ",", "embeddings", ",", "key", "# captions", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.TextDataset.__getitem__": [[350, 352], ["datasets.TextDataset.iterator"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "iterator", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.TextDataset.__len__": [[353, 355], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.TextDatasetf.__init__": [[357, 461], ["torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "glob.glob", "dict", "dict", "list", "datasets.TextDatasetf.imsize.append", "open", "f.readlines", "open", "f.readlines", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "glob.glob", "glob.glob", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "line.strip", "line.strip", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "len", "datasets.TextDatasetf.images.append", "datasets.TextDatasetf.class_id.append", "int", "ntpath.basename", "ntpath.basename", "ntpath.basename", "ntpath.basename"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "split", "=", "'train'", ",", "embedding_type", "=", "'cnn-rnn'", ",", "\n", "base_size", "=", "64", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "norm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "self", ".", "norm1", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "self", ".", "norm2", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "self", ".", "imsize", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "TREE", ".", "BRANCH_NUM", ")", ":", "\n", "            ", "self", ".", "imsize", ".", "append", "(", "base_size", ")", "\n", "base_size", "=", "base_size", "*", "2", "\n", "\n", "", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "\n", "self", ".", "image_rootdir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"images\"", ")", "\n", "############################################################", "\n", "img_format", "=", "\".jpg\"", "\n", "split_classes_train_file_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'trainvalclasses.txt'", ")", "\n", "\n", "split_classes_test_file_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'testclasses.txt'", ")", "\n", "\n", "\n", "self", ".", "split_train_classes", "=", "[", "]", "\n", "\n", "with", "open", "(", "split_classes_train_file_name", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "split_train_classes", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "lines", "]", "\n", "\n", "\n", "", "self", ".", "split_test_classes", "=", "[", "]", "\n", "\n", "with", "open", "(", "split_classes_test_file_name", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "split_test_classes", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "lines", "]", "\n", "\n", "\n", "\n", "\n", "\n", "", "self", ".", "allimages", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "image_rootdir", ",", "\"*\"", "+", "img_format", ")", ")", "\n", "\n", "train_caption_path", "=", "[", "]", "\n", "train_class_dict", "=", "dict", "(", ")", "\n", "for", "class1", "in", "self", ".", "split_train_classes", ":", "\n", "            ", "cpaths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'text_c10'", ",", "class1", ",", "'*.txt'", ")", ")", "\n", "for", "path", "in", "cpaths", ":", "\n", "                ", "train_class_dict", "[", "ntpath", ".", "basename", "(", "path", ")", "[", ":", "-", "4", "]", "]", "=", "class1", "\n", "", "train_caption_path", "+=", "cpaths", "\n", "", "test_caption_path", "=", "[", "]", "\n", "test_class_dict", "=", "dict", "(", ")", "\n", "for", "class1", "in", "self", ".", "split_test_classes", ":", "\n", "            ", "cpaths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'text_c10'", ",", "class1", ",", "'*.txt'", ")", ")", "\n", "for", "path", "in", "cpaths", ":", "\n", "                ", "test_class_dict", "[", "ntpath", ".", "basename", "(", "path", ")", "[", ":", "-", "4", "]", "]", "=", "class1", "\n", "", "test_caption_path", "+=", "cpaths", "\n", "\n", "\n", "# Sanity check", "\n", "", "assert", "len", "(", "self", ".", "allimages", ")", "==", "len", "(", "train_caption_path", ")", "+", "len", "(", "test_caption_path", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "caption_paths", "=", "train_caption_path", "\n", "class_dict", "=", "train_class_dict", "\n", "", "else", ":", "\n", "            ", "self", ".", "caption_paths", "=", "test_caption_path", "\n", "class_dict", "=", "test_class_dict", "\n", "", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "class_id", "=", "list", "(", ")", "\n", "for", "cpath", "in", "self", ".", "caption_paths", ":", "\n", "            ", "ipath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_rootdir", ",", "ntpath", ".", "basename", "(", "cpath", ")", "[", ":", "-", "4", "]", "+", "img_format", ")", "\n", "if", "ipath", "in", "self", ".", "allimages", ":", "\n", "                ", "self", ".", "images", ".", "append", "(", "ipath", ")", "\n", "k", "=", "class_dict", "[", "ntpath", ".", "basename", "(", "ipath", ")", "[", ":", "-", "4", "]", "]", "\n", "self", ".", "class_id", ".", "append", "(", "int", "(", "k", "[", "6", ":", "]", ")", ")", "\n", "\n", "\n", "\n", "\n", "#################################################################", "\n", "\n", "#split_dir = os.path.join(data_dir, split)", "\n", "\n", "#self.filenames = self.load_filenames(split_dir)", "\n", "#self.embeddings = self.load_embedding(split_dir, embedding_type)", "\n", "#self.class_id = self.load_class_id(split_dir, len(self.filenames))", "\n", "#self.captions = self.load_all_captions()", "\n", "\n", "", "", "if", "cfg", ".", "TRAIN", ".", "FLAG", ":", "\n", "            ", "self", ".", "iterator", "=", "self", ".", "prepair_training_pairs", "\n", "", "else", ":", "\n", "            ", "self", ".", "iterator", "=", "self", ".", "prepair_test_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.TextDatasetf.prepair_training_pairs": [[463, 492], ["datasets.get_imgs", "datasets.get_imgs", "random.randint", "datasets.get_imgs", "random.randint", "len", "len"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.get_imgs", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.get_imgs", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.get_imgs"], ["", "", "def", "prepair_training_pairs", "(", "self", ",", "index", ")", ":", "\n", "\n", "# captions = self.captions[key]", "\n", "#embeddings = self.embeddings[index, :, :]", "\n", "        ", "img_name", "=", "self", ".", "images", "[", "index", "]", "\n", "#img_name = '%s/images/%s.jpg' % (data_dir, key)", "\n", "bbox", "=", "None", "\n", "imgs", "=", "get_imgs", "(", "img_name", ",", "self", ".", "imsize", ",", "\n", "bbox", ",", "self", ".", "transform", ",", "normalize", "=", "self", ".", "norm", ")", "\n", "sz", "=", "[", "224", ",", "224", ",", "224", "]", "\n", "unimgs", "=", "get_imgs", "(", "img_name", ",", "sz", ",", "\n", "bbox", ",", "self", ".", "transform", ",", "normalize", "=", "self", ".", "norm2", ")", "\n", "\n", "wrong_ix", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "images", ")", "-", "1", ")", "\n", "while", "(", "self", ".", "class_id", "[", "index", "]", "==", "self", ".", "class_id", "[", "wrong_ix", "]", ")", ":", "\n", "            ", "wrong_ix", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "images", ")", "-", "1", ")", "\n", "", "wrong_img_name", "=", "self", ".", "images", "[", "wrong_ix", "]", "\n", "wrong_bbox", "=", "None", "\n", "wrong_imgs", "=", "get_imgs", "(", "wrong_img_name", ",", "self", ".", "imsize", ",", "\n", "wrong_bbox", ",", "self", ".", "transform", ",", "normalize", "=", "self", ".", "norm", ")", "\n", "\n", "#embedding_ix = random.randint(0, embeddings.shape[0] - 1)", "\n", "#embedding = embeddings[embedding_ix, :]", "\n", "#if self.target_transform is not None:", "\n", "#   embedding = self.target_transform(embedding)", "\n", "embedding", "=", "0", "\n", "key", "=", "0", "\n", "\n", "return", "unimgs", ",", "imgs", ",", "wrong_imgs", ",", "embedding", ",", "key", "# captions", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.TextDatasetf.prepair_test_pairs": [[493, 508], ["datasets.get_imgs"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.get_imgs"], ["", "def", "prepair_test_pairs", "(", "self", ",", "index", ")", ":", "\n", "\n", "# captions = self.captions[key]", "\n", "#embeddings = self.embeddings[index, :, :]", "\n", "        ", "embeddings", "=", "0", "\n", "key", "=", "0", "\n", "bbox", "=", "None", "\n", "img_name", "=", "self", ".", "images", "[", "index", "]", "\n", "imgs", "=", "get_imgs", "(", "img_name", ",", "self", ".", "imsize", ",", "\n", "bbox", ",", "self", ".", "transform", ",", "normalize", "=", "self", ".", "norm", ")", "\n", "\n", "#if self.target_transform is not None:", "\n", "#embeddings = self.target_transform(embeddings)", "\n", "\n", "return", "imgs", ",", "embeddings", ",", "key", "# captions", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.TextDatasetf.__getitem__": [[509, 511], ["datasets.TextDatasetf.iterator"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "iterator", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.TextDatasetf.__len__": [[512, 514], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.is_image_file": [[38, 40], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.datasets.get_imgs": [[42, 68], ["PIL.Image.open().convert", "range", "int", "int", "int", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.minimum", "transform.crop", "transform", "ret.append", "PIL.Image.open", "normalize", "numpy.maximum", "torchvision.Resize"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.util.normalize"], ["", "def", "get_imgs", "(", "img_path", ",", "imsize", ",", "bbox", "=", "None", ",", "\n", "transform", "=", "None", ",", "normalize", "=", "None", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "width", ",", "height", "=", "img", ".", "size", "\n", "if", "bbox", "is", "not", "None", ":", "\n", "        ", "r", "=", "int", "(", "np", ".", "maximum", "(", "bbox", "[", "2", "]", ",", "bbox", "[", "3", "]", ")", "*", "0.75", ")", "\n", "center_x", "=", "int", "(", "(", "2", "*", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ")", "/", "2", ")", "\n", "center_y", "=", "int", "(", "(", "2", "*", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "/", "2", ")", "\n", "y1", "=", "np", ".", "maximum", "(", "0", ",", "center_y", "-", "r", ")", "\n", "y2", "=", "np", ".", "minimum", "(", "height", ",", "center_y", "+", "r", ")", "\n", "x1", "=", "np", ".", "maximum", "(", "0", ",", "center_x", "-", "r", ")", "\n", "x2", "=", "np", ".", "minimum", "(", "width", ",", "center_x", "+", "r", ")", "\n", "img", "=", "img", ".", "crop", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ")", "\n", "\n", "", "if", "transform", "is", "not", "None", ":", "\n", "        ", "img", "=", "transform", "(", "img", ")", "\n", "\n", "", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "TREE", ".", "BRANCH_NUM", ")", ":", "\n", "        ", "if", "i", "<", "(", "cfg", ".", "TREE", ".", "BRANCH_NUM", "-", "1", ")", ":", "\n", "            ", "re_img", "=", "transforms", ".", "Resize", "(", "imsize", "[", "i", "]", ")", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "re_img", "=", "img", "\n", "", "ret", ".", "append", "(", "normalize", "(", "re_img", ")", ")", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.miscc.config._merge_a_into_b": [[67, 98], ["a.items", "type", "type", "KeyError", "type", "isinstance", "type", "numpy.array", "ValueError", "config._merge_a_into_b", "print", "type", "type"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.miscc.config._merge_a_into_b"], ["\n", "\n", "# IMAGE options", "\n", "__C", ".", "IMAGE", "=", "edict", "(", ")", "\n", "__C", ".", "IMAGE", ".", "ENCODER_NAME", "=", "\"resnet\"", "\n", "__C", ".", "IMAGE", ".", "FIX_ENCODER", "=", "True", "\n", "__C", ".", "IMAGE", ".", "PRETRAINED_ENCODER", "=", "True", "\n", "__C", ".", "IMAGE", ".", "DIMENSION", "=", "encoding_dim", "\n", "__C", ".", "IMAGE", ".", "NR_UPDATES", "=", "1", "\n", "__C", ".", "IMAGE", ".", "VAE", "=", "True", "\n", "__C", ".", "IMAGE", ".", "DPP", "=", "True", "\n", "__C", ".", "IMAGE", ".", "ENCDPP", "=", "False", "\n", "__C", ".", "IMAGE", ".", "ADV", "=", "edict", "(", ")", "\n", "__C", ".", "IMAGE", ".", "ADV", ".", "LAYERS", "=", "3", "\n", "__C", ".", "IMAGE", ".", "ADV", ".", "DIM", "=", "encoding_dim", "\n", "__C", ".", "IMAGE", ".", "ADV", ".", "DROPOUT", "=", "0.3", "\n", "__C", ".", "IMAGE", ".", "ADV", ".", "INPUT_DROPOUT", "=", "0.3", "\n", "__C", ".", "IMAGE", ".", "ADV", ".", "NOISE", "=", "True", "\n", "\n", "# Text options", "\n", "__C", ".", "TEXT", "=", "edict", "(", ")", "\n", "__C", ".", "TEXT", ".", "DIMENSION", "=", "1024", "#1024 input dimention to GNET()", "\n", "__C", ".", "TEXT", ".", "N_LAYERS", "=", "2", "\n", "__C", ".", "TEXT", ".", "NR_UPDATES", "=", "1", "\n", "__C", ".", "TEXT", ".", "EMBEDDING_DIM", "=", "100", "\n", "__C", ".", "TEXT", ".", "VAE", "=", "True", "\n", "__C", ".", "TEXT", ".", "ENCDPP", "=", "False", "\n", "__C", ".", "TEXT", ".", "DROPOUT", "=", "0.0", "\n", "__C", ".", "TEXT", ".", "TEACHER_FORCING", "=", "0.0", "\n", "__C", ".", "TEXT", ".", "ADV", "=", "edict", "(", ")", "\n", "__C", ".", "TEXT", ".", "ADV", ".", "LAYERS", "=", "3", "\n", "__C", ".", "TEXT", ".", "ADV", ".", "DIM", "=", "encoding_dim", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.miscc.config.cfg_from_file": [[100, 107], ["config._merge_a_into_b", "open", "easydict.EasyDict", "yaml.load"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.miscc.config._merge_a_into_b"], ["__C", ".", "TEXT", ".", "ADV", ".", "INPUT_DROPOUT", "=", "0.3", "\n", "__C", ".", "TEXT", ".", "ADV", ".", "NOISE", "=", "True", "\n", "\n", "\n", "def", "_merge_a_into_b", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"Merge config dictionary a into config dictionary b, clobbering the\n    options in b whenever they are also specified in a.\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.miscc.utils.mkdir_p": [[4, 12], ["os.makedirs", "os.path.isdir"], "function", ["None"], ["def", "mkdir_p", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "        ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.base_module.grad_norm": [[9, 16], ["m.parameters", "p.grad.data.norm"], "function", ["None"], ["def", "grad_norm", "(", "m", ",", "norm_type", "=", "2", ")", ":", "\n", "    ", "total_norm", "=", "0.0", "\n", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "\n", "        ", "param_norm", "=", "p", ".", "grad", ".", "data", ".", "norm", "(", "norm_type", ")", "\n", "total_norm", "+=", "param_norm", "**", "norm_type", "\n", "", "total_norm", "=", "total_norm", "**", "(", "1.", "/", "norm_type", ")", "\n", "return", "total_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.base_module.weights_init": [[18, 29], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.1", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.mmd.linear_mmd2": [[17, 22], ["torch.mean"], "function", ["None"], ["def", "linear_mmd2", "(", "f_of_X", ",", "f_of_Y", ")", ":", "\n", "    ", "loss", "=", "0.0", "\n", "delta", "=", "f_of_X", "-", "f_of_Y", "\n", "loss", "=", "torch", ".", "mean", "(", "(", "delta", "[", ":", "-", "1", "]", "*", "delta", "[", "1", ":", "]", ")", ".", "sum", "(", "1", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.mmd.poly_mmd2": [[28, 42], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "K_XX.pow", "K_YY.pow", "K_XY.pow", "K_YX.pow"], "function", ["None"], ["", "def", "poly_mmd2", "(", "f_of_X", ",", "f_of_Y", ",", "d", "=", "2", ",", "alpha", "=", "1.0", ",", "c", "=", "2.0", ")", ":", "\n", "    ", "K_XX", "=", "(", "alpha", "*", "(", "f_of_X", "[", ":", "-", "1", "]", "*", "f_of_X", "[", "1", ":", "]", ")", ".", "sum", "(", "1", ")", "+", "c", ")", "\n", "K_XX_mean", "=", "torch", ".", "mean", "(", "K_XX", ".", "pow", "(", "d", ")", ")", "\n", "\n", "K_YY", "=", "(", "alpha", "*", "(", "f_of_Y", "[", ":", "-", "1", "]", "*", "f_of_Y", "[", "1", ":", "]", ")", ".", "sum", "(", "1", ")", "+", "c", ")", "\n", "K_YY_mean", "=", "torch", ".", "mean", "(", "K_YY", ".", "pow", "(", "d", ")", ")", "\n", "\n", "K_XY", "=", "(", "alpha", "*", "(", "f_of_X", "[", ":", "-", "1", "]", "*", "f_of_Y", "[", "1", ":", "]", ")", ".", "sum", "(", "1", ")", "+", "c", ")", "\n", "K_XY_mean", "=", "torch", ".", "mean", "(", "K_XY", ".", "pow", "(", "d", ")", ")", "\n", "\n", "K_YX", "=", "(", "alpha", "*", "(", "f_of_Y", "[", ":", "-", "1", "]", "*", "f_of_X", "[", "1", ":", "]", ")", ".", "sum", "(", "1", ")", "+", "c", ")", "\n", "K_YX_mean", "=", "torch", ".", "mean", "(", "K_YX", ".", "pow", "(", "d", ")", ")", "\n", "\n", "return", "K_XX_mean", "+", "K_YY_mean", "-", "K_XY_mean", "-", "K_YX_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.mmd._mix_rbf_kernel": [[44, 60], ["X.size", "torch.cat", "torch.mm", "torch.diag().unsqueeze", "torch.diag().unsqueeze.expand_as", "X.size", "Y.size", "torch.cat.t", "diag_ZZT.expand_as.t", "torch.exp", "len", "torch.diag"], "function", ["None"], ["", "def", "_mix_rbf_kernel", "(", "X", ",", "Y", ",", "sigma_list", ")", ":", "\n", "    ", "assert", "(", "X", ".", "size", "(", "0", ")", "==", "Y", ".", "size", "(", "0", ")", ")", "\n", "m", "=", "X", ".", "size", "(", "0", ")", "\n", "\n", "Z", "=", "torch", ".", "cat", "(", "(", "X", ",", "Y", ")", ",", "0", ")", "\n", "ZZT", "=", "torch", ".", "mm", "(", "Z", ",", "Z", ".", "t", "(", ")", ")", "\n", "diag_ZZT", "=", "torch", ".", "diag", "(", "ZZT", ")", ".", "unsqueeze", "(", "1", ")", "\n", "Z_norm_sqr", "=", "diag_ZZT", ".", "expand_as", "(", "ZZT", ")", "\n", "exponent", "=", "Z_norm_sqr", "-", "2", "*", "ZZT", "+", "Z_norm_sqr", ".", "t", "(", ")", "\n", "\n", "K", "=", "0.0", "\n", "for", "sigma", "in", "sigma_list", ":", "\n", "        ", "gamma", "=", "1.0", "/", "(", "2", "*", "sigma", "**", "2", ")", "\n", "K", "+=", "torch", ".", "exp", "(", "-", "gamma", "*", "exponent", ")", "\n", "\n", "", "return", "K", "[", ":", "m", ",", ":", "m", "]", ",", "K", "[", ":", "m", ",", "m", ":", "]", ",", "K", "[", "m", ":", ",", "m", ":", "]", ",", "len", "(", "sigma_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.mmd.mix_rbf_mmd2": [[62, 66], ["mmd._mix_rbf_kernel", "mmd._mmd2"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.mmd._mix_rbf_kernel", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.mmd._mmd2"], ["", "def", "mix_rbf_mmd2", "(", "X", ",", "Y", ",", "sigma_list", ",", "biased", "=", "True", ")", ":", "\n", "    ", "K_XX", ",", "K_XY", ",", "K_YY", ",", "d", "=", "_mix_rbf_kernel", "(", "X", ",", "Y", ",", "sigma_list", ")", "\n", "# return _mmd2(K_XX, K_XY, K_YY, const_diagonal=d, biased=biased)", "\n", "return", "_mmd2", "(", "K_XX", ",", "K_XY", ",", "K_YY", ",", "const_diagonal", "=", "False", ",", "biased", "=", "biased", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.mmd.mix_rbf_mmd2_and_ratio": [[68, 72], ["mmd._mix_rbf_kernel", "mmd._mmd2_and_ratio"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.mmd._mix_rbf_kernel", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.mmd._mmd2_and_ratio"], ["", "def", "mix_rbf_mmd2_and_ratio", "(", "X", ",", "Y", ",", "sigma_list", ",", "biased", "=", "True", ")", ":", "\n", "    ", "K_XX", ",", "K_XY", ",", "K_YY", ",", "d", "=", "_mix_rbf_kernel", "(", "X", ",", "Y", ",", "sigma_list", ")", "\n", "# return _mmd2_and_ratio(K_XX, K_XY, K_YY, const_diagonal=d, biased=biased)", "\n", "return", "_mmd2_and_ratio", "(", "K_XX", ",", "K_XY", ",", "K_YY", ",", "const_diagonal", "=", "False", ",", "biased", "=", "biased", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.mmd._mmd2": [[79, 111], ["K_XX.size", "K_XY.sum", "Kt_XX_sums.sum", "Kt_YY_sums.sum", "K_XY.sum.sum", "torch.diag", "torch.diag", "torch.sum", "torch.sum", "K_XX.sum", "K_YY.sum"], "function", ["None"], ["", "def", "_mmd2", "(", "K_XX", ",", "K_XY", ",", "K_YY", ",", "const_diagonal", "=", "False", ",", "biased", "=", "False", ")", ":", "\n", "    ", "m", "=", "K_XX", ".", "size", "(", "0", ")", "# assume X, Y are same shape", "\n", "\n", "# Get the various sums of kernels that we'll use", "\n", "# Kts drop the diagonal, but we don't need to compute them explicitly", "\n", "if", "const_diagonal", "is", "not", "False", ":", "\n", "        ", "diag_X", "=", "diag_Y", "=", "const_diagonal", "\n", "sum_diag_X", "=", "sum_diag_Y", "=", "m", "*", "const_diagonal", "\n", "", "else", ":", "\n", "        ", "diag_X", "=", "torch", ".", "diag", "(", "K_XX", ")", "# (m,)", "\n", "diag_Y", "=", "torch", ".", "diag", "(", "K_YY", ")", "# (m,)", "\n", "sum_diag_X", "=", "torch", ".", "sum", "(", "diag_X", ")", "\n", "sum_diag_Y", "=", "torch", ".", "sum", "(", "diag_Y", ")", "\n", "\n", "", "Kt_XX_sums", "=", "K_XX", ".", "sum", "(", "dim", "=", "1", ")", "-", "diag_X", "# \\tilde{K}_XX * e = K_XX * e - diag_X", "\n", "Kt_YY_sums", "=", "K_YY", ".", "sum", "(", "dim", "=", "1", ")", "-", "diag_Y", "# \\tilde{K}_YY * e = K_YY * e - diag_Y", "\n", "K_XY_sums_0", "=", "K_XY", ".", "sum", "(", "dim", "=", "0", ")", "# K_{XY}^T * e", "\n", "\n", "Kt_XX_sum", "=", "Kt_XX_sums", ".", "sum", "(", ")", "# e^T * \\tilde{K}_XX * e", "\n", "Kt_YY_sum", "=", "Kt_YY_sums", ".", "sum", "(", ")", "# e^T * \\tilde{K}_YY * e", "\n", "K_XY_sum", "=", "K_XY_sums_0", ".", "sum", "(", ")", "# e^T * K_{XY} * e", "\n", "\n", "if", "biased", ":", "\n", "        ", "mmd2", "=", "(", "(", "Kt_XX_sum", "+", "sum_diag_X", ")", "/", "(", "m", "*", "m", ")", "\n", "+", "(", "Kt_YY_sum", "+", "sum_diag_Y", ")", "/", "(", "m", "*", "m", ")", "\n", "-", "2.0", "*", "K_XY_sum", "/", "(", "m", "*", "m", ")", ")", "\n", "", "else", ":", "\n", "        ", "mmd2", "=", "(", "Kt_XX_sum", "/", "(", "m", "*", "(", "m", "-", "1", ")", ")", "\n", "+", "Kt_YY_sum", "/", "(", "m", "*", "(", "m", "-", "1", ")", ")", "\n", "-", "2.0", "*", "K_XY_sum", "/", "(", "m", "*", "m", ")", ")", "\n", "\n", "", "return", "mmd2", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.mmd._mmd2_and_ratio": [[113, 117], ["mmd._mmd2_and_variance", "torch.sqrt", "torch.clamp"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.mmd._mmd2_and_variance"], ["", "def", "_mmd2_and_ratio", "(", "K_XX", ",", "K_XY", ",", "K_YY", ",", "const_diagonal", "=", "False", ",", "biased", "=", "False", ")", ":", "\n", "    ", "mmd2", ",", "var_est", "=", "_mmd2_and_variance", "(", "K_XX", ",", "K_XY", ",", "K_YY", ",", "const_diagonal", "=", "const_diagonal", ",", "biased", "=", "biased", ")", "\n", "loss", "=", "mmd2", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "var_est", ",", "min", "=", "min_var_est", ")", ")", "\n", "return", "loss", ",", "mmd2", ",", "var_est", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.mmd._mmd2_and_variance": [[119, 169], ["K_XX.size", "K_XY.sum", "K_XY.sum", "Kt_XX_sums.sum", "Kt_YY_sums.sum", "K_XY.sum.sum", "torch.diag", "torch.diag", "torch.sum", "torch.sum", "torch.diag.dot", "torch.diag.dot", "K_XX.sum", "K_YY.sum", "Kt_YY_sums.dot", "Kt_XX_sums.dot", "K_XY.sum.dot", "K_XY.sum.dot", "Kt_YY_sums.dot", "Kt_XX_sums.dot"], "function", ["None"], ["", "def", "_mmd2_and_variance", "(", "K_XX", ",", "K_XY", ",", "K_YY", ",", "const_diagonal", "=", "False", ",", "biased", "=", "False", ")", ":", "\n", "    ", "m", "=", "K_XX", ".", "size", "(", "0", ")", "# assume X, Y are same shape", "\n", "\n", "# Get the various sums of kernels that we'll use", "\n", "# Kts drop the diagonal, but we don't need to compute them explicitly", "\n", "if", "const_diagonal", "is", "not", "False", ":", "\n", "        ", "diag_X", "=", "diag_Y", "=", "const_diagonal", "\n", "sum_diag_X", "=", "sum_diag_Y", "=", "m", "*", "const_diagonal", "\n", "sum_diag2_X", "=", "sum_diag2_Y", "=", "m", "*", "const_diagonal", "**", "2", "\n", "", "else", ":", "\n", "        ", "diag_X", "=", "torch", ".", "diag", "(", "K_XX", ")", "# (m,)", "\n", "diag_Y", "=", "torch", ".", "diag", "(", "K_YY", ")", "# (m,)", "\n", "sum_diag_X", "=", "torch", ".", "sum", "(", "diag_X", ")", "\n", "sum_diag_Y", "=", "torch", ".", "sum", "(", "diag_Y", ")", "\n", "sum_diag2_X", "=", "diag_X", ".", "dot", "(", "diag_X", ")", "\n", "sum_diag2_Y", "=", "diag_Y", ".", "dot", "(", "diag_Y", ")", "\n", "\n", "", "Kt_XX_sums", "=", "K_XX", ".", "sum", "(", "dim", "=", "1", ")", "-", "diag_X", "# \\tilde{K}_XX * e = K_XX * e - diag_X", "\n", "Kt_YY_sums", "=", "K_YY", ".", "sum", "(", "dim", "=", "1", ")", "-", "diag_Y", "# \\tilde{K}_YY * e = K_YY * e - diag_Y", "\n", "K_XY_sums_0", "=", "K_XY", ".", "sum", "(", "dim", "=", "0", ")", "# K_{XY}^T * e", "\n", "K_XY_sums_1", "=", "K_XY", ".", "sum", "(", "dim", "=", "1", ")", "# K_{XY} * e", "\n", "\n", "Kt_XX_sum", "=", "Kt_XX_sums", ".", "sum", "(", ")", "# e^T * \\tilde{K}_XX * e", "\n", "Kt_YY_sum", "=", "Kt_YY_sums", ".", "sum", "(", ")", "# e^T * \\tilde{K}_YY * e", "\n", "K_XY_sum", "=", "K_XY_sums_0", ".", "sum", "(", ")", "# e^T * K_{XY} * e", "\n", "\n", "Kt_XX_2_sum", "=", "(", "K_XX", "**", "2", ")", ".", "sum", "(", ")", "-", "sum_diag2_X", "# \\| \\tilde{K}_XX \\|_F^2", "\n", "Kt_YY_2_sum", "=", "(", "K_YY", "**", "2", ")", ".", "sum", "(", ")", "-", "sum_diag2_Y", "# \\| \\tilde{K}_YY \\|_F^2", "\n", "K_XY_2_sum", "=", "(", "K_XY", "**", "2", ")", ".", "sum", "(", ")", "# \\| K_{XY} \\|_F^2", "\n", "\n", "if", "biased", ":", "\n", "        ", "mmd2", "=", "(", "(", "Kt_XX_sum", "+", "sum_diag_X", ")", "/", "(", "m", "*", "m", ")", "\n", "+", "(", "Kt_YY_sum", "+", "sum_diag_Y", ")", "/", "(", "m", "*", "m", ")", "\n", "-", "2.0", "*", "K_XY_sum", "/", "(", "m", "*", "m", ")", ")", "\n", "", "else", ":", "\n", "        ", "mmd2", "=", "(", "Kt_XX_sum", "/", "(", "m", "*", "(", "m", "-", "1", ")", ")", "\n", "+", "Kt_YY_sum", "/", "(", "m", "*", "(", "m", "-", "1", ")", ")", "\n", "-", "2.0", "*", "K_XY_sum", "/", "(", "m", "*", "m", ")", ")", "\n", "\n", "", "var_est", "=", "(", "\n", "2.0", "/", "(", "m", "**", "2", "*", "(", "m", "-", "1.0", ")", "**", "2", ")", "*", "(", "2", "*", "Kt_XX_sums", ".", "dot", "(", "Kt_XX_sums", ")", "-", "Kt_XX_2_sum", "+", "2", "*", "Kt_YY_sums", ".", "dot", "(", "Kt_YY_sums", ")", "-", "Kt_YY_2_sum", ")", "\n", "-", "(", "4.0", "*", "m", "-", "6.0", ")", "/", "(", "m", "**", "3", "*", "(", "m", "-", "1.0", ")", "**", "3", ")", "*", "(", "Kt_XX_sum", "**", "2", "+", "Kt_YY_sum", "**", "2", ")", "\n", "+", "4.0", "*", "(", "m", "-", "2.0", ")", "/", "(", "m", "**", "3", "*", "(", "m", "-", "1.0", ")", "**", "2", ")", "*", "(", "K_XY_sums_1", ".", "dot", "(", "K_XY_sums_1", ")", "+", "K_XY_sums_0", ".", "dot", "(", "K_XY_sums_0", ")", ")", "\n", "-", "4.0", "*", "(", "m", "-", "3.0", ")", "/", "(", "m", "**", "3", "*", "(", "m", "-", "1.0", ")", "**", "2", ")", "*", "(", "K_XY_2_sum", ")", "-", "(", "8", "*", "m", "-", "12", ")", "/", "(", "m", "**", "5", "*", "(", "m", "-", "1", ")", ")", "*", "K_XY_sum", "**", "2", "\n", "+", "8.0", "/", "(", "m", "**", "3", "*", "(", "m", "-", "1.0", ")", ")", "*", "(", "\n", "1.0", "/", "m", "*", "(", "Kt_XX_sum", "+", "Kt_YY_sum", ")", "*", "K_XY_sum", "\n", "-", "Kt_XX_sums", ".", "dot", "(", "K_XY_sums_1", ")", "\n", "-", "Kt_YY_sums", ".", "dot", "(", "K_XY_sums_0", ")", ")", "\n", ")", "\n", "return", "mmd2", ",", "var_est", "\n", "", ""]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.util.FolderWithImages.__init__": [[42, 49], ["torch.Dataset.__init__", "os.path.join", "os.listdir", "util.is_image_file", "x.lower"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.util.is_image_file"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "input_transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "FolderWithImages", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_filenames", "=", "[", "join", "(", "root", ",", "x", ")", "\n", "for", "x", "in", "listdir", "(", "root", ")", "if", "is_image_file", "(", "x", ".", "lower", "(", ")", ")", "]", "\n", "\n", "self", ".", "input_transform", "=", "input_transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.util.FolderWithImages.__getitem__": [[50, 59], ["util.load_img", "util.FolderWithImages.copy", "util.FolderWithImages.input_transform", "util.FolderWithImages.target_transform"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.util.load_img"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "input", "=", "load_img", "(", "self", ".", "image_filenames", "[", "index", "]", ")", "\n", "target", "=", "input", ".", "copy", "(", ")", "\n", "if", "self", ".", "input_transform", ":", "\n", "            ", "input", "=", "self", ".", "input_transform", "(", "input", ")", "\n", "", "if", "self", ".", "target_transform", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "input", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.util.FolderWithImages.__len__": [[60, 62], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.util.ALICropAndScale.__call__": [[65, 67], ["img.resize().crop", "img.resize"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "img", ".", "resize", "(", "(", "64", ",", "78", ")", ",", "Image", ".", "ANTIALIAS", ")", ".", "crop", "(", "(", "0", ",", "7", ",", "64", ",", "64", "+", "7", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.util.get_args": [[14, 30], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["def", "get_args", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--dataset'", ",", "required", "=", "True", ",", "help", "=", "'provide input folder name'", ")", "\n", "#parser.add_argument('--dataroot', required=True, help='path to dataset')", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "help", "=", "'number of data loading workers'", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--image_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'the height / width of the input image to network'", ")", "\n", "parser", ".", "add_argument", "(", "'--nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'number of channel'", ")", "\n", "parser", ".", "add_argument", "(", "'--nz'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'size of the latent z vector'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_iter'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number of epochs to train for'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.00005", ",", "help", "=", "'learning rate, default=0.00005'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_device'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'using gpu device id'", ")", "\n", "#parser.add_argument('--netG', default='', help=\"path to netG (to continue training)\")", "\n", "#parser.add_argument('--netD', default='', help=\"path to netD (to continue training)\")", "\n", "parser", ".", "add_argument", "(", "'--Diters'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'number of D iters per each G iter'", ")", "\n", "#parser.add_argument('--experiment', default=None, help='Where to store samples and models')", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.util.is_image_file": [[32, 34], ["any", "filename.endswith"], "function", ["None"], ["", "def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "\".png\"", ",", "\".jpg\"", ",", "\".jpeg\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.util.load_img": [[36, 39], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "load_img", "(", "filepath", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "filepath", ")", ".", "convert", "(", "'RGB'", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.util.get_data": [[69, 123], ["torchvision.Compose", "torchvision.ImageFolder", "torchvision.Scale", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.LSUN", "torchvision.CIFAR10", "torchvision.CIFAR100", "torchvision.MNIST", "os.path.join", "util.FolderWithImages", "ValueError", "ValueError", "torchvision.Compose", "torchvision.ToTensor", "util.ALICropAndScale", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "", "def", "get_data", "(", "args", ",", "train_flag", "=", "True", ")", ":", "\n", "    ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Scale", "(", "args", ".", "image_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "args", ".", "image_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", "\n", "\n", "if", "args", ".", "dataset", "in", "[", "'imagenet'", ",", "'folder'", ",", "'lfw'", "]", ":", "\n", "        ", "dataset", "=", "dset", ".", "ImageFolder", "(", "root", "=", "args", ".", "dataroot", ",", "\n", "transform", "=", "transform", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'lsun'", ":", "\n", "        ", "dataset", "=", "dset", ".", "LSUN", "(", "db_path", "=", "args", ".", "dataroot", ",", "\n", "classes", "=", "[", "'bedroom_train'", "]", ",", "\n", "transform", "=", "transform", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "dataset", "=", "dset", ".", "CIFAR10", "(", "root", "=", "args", ".", "dataroot", ",", "\n", "download", "=", "True", ",", "\n", "train", "=", "train_flag", ",", "\n", "transform", "=", "transform", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "dataset", "=", "dset", ".", "CIFAR100", "(", "root", "=", "args", ".", "dataroot", ",", "\n", "download", "=", "True", ",", "\n", "train", "=", "train_flag", ",", "\n", "transform", "=", "transform", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "dataset", "=", "dset", ".", "MNIST", "(", "root", "=", "args", ".", "dataroot", ",", "\n", "download", "=", "True", ",", "\n", "train", "=", "train_flag", ",", "\n", "transform", "=", "transform", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'celeba'", ":", "\n", "        ", "imdir", "=", "'train'", "if", "train_flag", "else", "'val'", "\n", "dataroot", "=", "os", ".", "path", ".", "join", "(", "args", ".", "dataroot", ",", "imdir", ")", "\n", "if", "args", ".", "image_size", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'the image size for CelebA dataset need to be 64!'", ")", "\n", "\n", "", "dataset", "=", "FolderWithImages", "(", "root", "=", "dataroot", ",", "\n", "input_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "ALICropAndScale", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", ",", "\n", "target_transform", "=", "transforms", ".", "ToTensor", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown dataset %s\"", "%", "(", "args", ".", "dataset", ")", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.util.normalize": [[125, 127], ["x.div", "x.norm().expand_as", "x.norm"], "function", ["None"], ["", "def", "normalize", "(", "x", ",", "dim", "=", "1", ")", ":", "\n", "    ", "return", "x", ".", "div", "(", "x", ".", "norm", "(", "2", ",", "dim", "=", "dim", ")", ".", "expand_as", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.util.match": [[129, 144], ["util.normalize", "util.normalize", "normalize.mul().mean", "normalize.mul"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.util.normalize", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.mmd.util.normalize"], ["", "def", "match", "(", "x", ",", "y", ",", "dist", ")", ":", "\n", "    ", "'''\n    Computes distance between corresponding points points in `x` and `y`\n    using distance `dist`.\n    '''", "\n", "if", "dist", "==", "'L2'", ":", "\n", "        ", "return", "(", "x", "-", "y", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "", "elif", "dist", "==", "'L1'", ":", "\n", "        ", "return", "(", "x", "-", "y", ")", ".", "abs", "(", ")", ".", "mean", "(", ")", "\n", "", "elif", "dist", "==", "'cos'", ":", "\n", "        ", "x_n", "=", "normalize", "(", "x", ")", "\n", "y_n", "=", "normalize", "(", "y", ")", "\n", "return", "2", "-", "(", "x_n", ")", ".", "mul", "(", "y_n", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "assert", "dist", "==", "'none'", ",", "'wtf ?'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_CelebA.download_file_from_google_drive": [[14, 26], ["requests.Session", "requests.Session.get", "download_CelebA.get_confirm_token", "download_CelebA.save_response_content", "requests.Session.get"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_CelebA.get_confirm_token", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_CelebA.save_response_content"], ["def", "download_file_from_google_drive", "(", "id", ",", "destination", ")", ":", "\n", "    ", "URL", "=", "\"https://docs.google.com/uc?export=download\"", "\n", "session", "=", "requests", ".", "Session", "(", ")", "\n", "\n", "response", "=", "session", ".", "get", "(", "URL", ",", "params", "=", "{", "'id'", ":", "id", "}", ",", "stream", "=", "True", ")", "\n", "token", "=", "get_confirm_token", "(", "response", ")", "\n", "\n", "if", "token", ":", "\n", "        ", "params", "=", "{", "'id'", ":", "id", ",", "'confirm'", ":", "token", "}", "\n", "response", "=", "session", ".", "get", "(", "URL", ",", "params", "=", "params", ",", "stream", "=", "True", ")", "\n", "\n", "", "save_response_content", "(", "response", ",", "destination", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_CelebA.get_confirm_token": [[27, 32], ["response.cookies.items", "key.startswith"], "function", ["None"], ["", "def", "get_confirm_token", "(", "response", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "response", ".", "cookies", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "'download_warning'", ")", ":", "\n", "            ", "return", "value", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_CelebA.save_response_content": [[33, 40], ["int", "response.headers.get", "open", "tqdm.tqdm", "response.iter_content", "f.write"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.Logger.write"], ["", "def", "save_response_content", "(", "response", ",", "destination", ",", "chunk_size", "=", "32", "*", "1024", ")", ":", "\n", "    ", "total_size", "=", "int", "(", "response", ".", "headers", ".", "get", "(", "'content-length'", ",", "0", ")", ")", "\n", "with", "open", "(", "destination", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "for", "chunk", "in", "tqdm", "(", "response", ".", "iter_content", "(", "chunk_size", ")", ",", "total", "=", "total_size", ",", "\n", "unit", "=", "'B'", ",", "unit_scale", "=", "True", ",", "desc", "=", "destination", ")", ":", "\n", "            ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                ", "f", ".", "write", "(", "chunk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_CelebA.unzip": [[41, 47], ["print", "os.path.dirname", "os.remove", "zipfile.ZipFile", "zf.extractall"], "function", ["None"], ["", "", "", "", "def", "unzip", "(", "filepath", ")", ":", "\n", "    ", "print", "(", "\"Extracting: \"", "+", "filepath", ")", "\n", "base_path", "=", "os", ".", "path", ".", "dirname", "(", "filepath", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "filepath", ")", "as", "zf", ":", "\n", "        ", "zf", ".", "extractall", "(", "base_path", ")", "\n", "", "os", ".", "remove", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_CelebA.download_celeb_a": [[48, 71], ["os.path.join", "os.path.join", "os.path.exists", "os.path.join", "os.path.exists", "os.rename", "os.remove", "print", "print", "download_CelebA.download_file_from_google_drive", "zipfile.ZipFile", "zf.extractall", "os.path.exists", "os.mkdir", "os.path.join", "zf.namelist"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_CelebA.download_file_from_google_drive"], ["", "def", "download_celeb_a", "(", "base_path", ")", ":", "\n", "    ", "data_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'CelebA'", ")", "\n", "images_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'images'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "data_path", ")", ":", "\n", "        ", "print", "(", "'[!] Found Celeb-A - skip'", ")", "\n", "return", "\n", "\n", "", "filename", ",", "drive_id", "=", "\"img_align_celeba.zip\"", ",", "\"0B7EVK8r0v71pZjFTYXZWM3FlRnM\"", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "filename", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "print", "(", "'[*] {} already exists'", ".", "format", "(", "save_path", ")", ")", "\n", "", "else", ":", "\n", "        ", "download_file_from_google_drive", "(", "drive_id", ",", "save_path", ")", "\n", "\n", "", "zip_dir", "=", "''", "\n", "with", "zipfile", ".", "ZipFile", "(", "save_path", ")", "as", "zf", ":", "\n", "        ", "zip_dir", "=", "zf", ".", "namelist", "(", ")", "[", "0", "]", "\n", "zf", ".", "extractall", "(", "base_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "data_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "data_path", ")", "\n", "", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "\"img_align_celeba\"", ")", ",", "images_path", ")", "\n", "os", ".", "remove", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_CelebA.prepare_data_dir": [[72, 75], ["os.path.exists", "os.mkdir"], "function", ["None"], ["", "def", "prepare_data_dir", "(", "path", "=", "'./data'", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_CelebA.check_link": [[77, 83], ["os.path.join", "os.path.exists", "os.path.join", "os.path.relpath", "os.symlink"], "function", ["None"], ["", "", "def", "check_link", "(", "in_dir", ",", "basename", ",", "out_dir", ")", ":", "\n", "    ", "in_file", "=", "os", ".", "path", ".", "join", "(", "in_dir", ",", "basename", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "in_file", ")", ":", "\n", "        ", "link_file", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "basename", ")", "\n", "rel_link", "=", "os", ".", "path", ".", "relpath", "(", "in_file", ",", "out_dir", ")", "\n", "os", ".", "symlink", "(", "rel_link", ",", "link_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_CelebA.add_splits": [[84, 111], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "range", "range", "range", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "download_CelebA.check_link", "download_CelebA.check_link", "download_CelebA.check_link"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_CelebA.check_link", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_CelebA.check_link", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_CelebA.check_link"], ["", "", "def", "add_splits", "(", "base_path", ")", ":", "\n", "    ", "data_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'CelebA'", ")", "\n", "images_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'images'", ")", "\n", "train_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'splits'", ",", "'train'", ")", "\n", "valid_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'splits'", ",", "'valid'", ")", "\n", "test_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'splits'", ",", "'test'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "train_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "train_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "valid_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "valid_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "test_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "test_dir", ")", "\n", "\n", "# these constants based on the standard CelebA splits", "\n", "", "NUM_EXAMPLES", "=", "202599", "\n", "TRAIN_STOP", "=", "162770", "\n", "VALID_STOP", "=", "182637", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "TRAIN_STOP", ")", ":", "\n", "        ", "basename", "=", "\"{:06d}.jpg\"", ".", "format", "(", "i", "+", "1", ")", "\n", "check_link", "(", "images_path", ",", "basename", ",", "train_dir", ")", "\n", "", "for", "i", "in", "range", "(", "TRAIN_STOP", ",", "VALID_STOP", ")", ":", "\n", "        ", "basename", "=", "\"{:06d}.jpg\"", ".", "format", "(", "i", "+", "1", ")", "\n", "check_link", "(", "images_path", ",", "basename", ",", "valid_dir", ")", "\n", "", "for", "i", "in", "range", "(", "VALID_STOP", ",", "NUM_EXAMPLES", ")", ":", "\n", "        ", "basename", "=", "\"{:06d}.jpg\"", ".", "format", "(", "i", "+", "1", ")", "\n", "check_link", "(", "images_path", ",", "basename", ",", "test_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_lsun.list_categories": [[17, 21], ["urllib2.urlopen", "json.loads", "urllib2.urlopen.read"], "function", ["None"], ["def", "list_categories", "(", "tag", ")", ":", "\n", "    ", "url", "=", "'http://lsun.cs.princeton.edu/htbin/list.cgi?tag='", "+", "tag", "\n", "f", "=", "urllib2", ".", "urlopen", "(", "url", ")", "\n", "return", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_lsun.download": [[23, 34], ["os.path.join", "print", "subprocess.call", "locals", "locals"], "function", ["None"], ["", "def", "download", "(", "out_dir", ",", "category", ",", "set_name", ",", "tag", ")", ":", "\n", "    ", "url", "=", "'http://lsun.cs.princeton.edu/htbin/download.cgi?tag={tag}'", "'&category={category}&set={set_name}'", ".", "format", "(", "**", "locals", "(", ")", ")", "\n", "if", "set_name", "==", "'test'", ":", "\n", "        ", "out_name", "=", "'test_lmdb.zip'", "\n", "", "else", ":", "\n", "        ", "out_name", "=", "'{category}_{set_name}_lmdb.zip'", ".", "format", "(", "**", "locals", "(", ")", ")", "\n", "", "out_path", "=", "join", "(", "out_dir", ",", "out_name", ")", "\n", "cmd", "=", "[", "'curl'", ",", "url", ",", "'-o'", ",", "out_path", "]", "\n", "print", "(", "'Downloading'", ",", "category", ",", "set_name", ",", "'set'", ")", "\n", "subprocess", ".", "call", "(", "cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_lsun.main": [[36, 59], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "download_lsun.list_categories", "print", "download_lsun.download", "len", "download_lsun.download", "download_lsun.download", "download_lsun.download", "print", "download_lsun.download", "download_lsun.download"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.None.main.parse_args", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_lsun.list_categories", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_lsun.download", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_lsun.download", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_lsun.download", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_lsun.download", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_lsun.download", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.download_lsun.download"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--tag'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--out_dir'", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--category'", ",", "default", "=", "None", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "categories", "=", "list_categories", "(", "args", ".", "tag", ")", "\n", "if", "args", ".", "category", "is", "None", ":", "\n", "        ", "print", "(", "'Downloading'", ",", "len", "(", "categories", ")", ",", "'categories'", ")", "\n", "for", "category", "in", "categories", ":", "\n", "            ", "download", "(", "args", ".", "out_dir", ",", "category", ",", "'train'", ",", "args", ".", "tag", ")", "\n", "download", "(", "args", ".", "out_dir", ",", "category", ",", "'val'", ",", "args", ".", "tag", ")", "\n", "", "download", "(", "args", ".", "out_dir", ",", "''", ",", "'test'", ",", "args", ".", "tag", ")", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "category", "==", "'test'", ":", "\n", "            ", "download", "(", "args", ".", "out_dir", ",", "''", ",", "'test'", ",", "args", ".", "tag", ")", "\n", "", "elif", "args", ".", "category", "not", "in", "categories", ":", "\n", "            ", "print", "(", "'Error:'", ",", "args", ".", "category", ",", "\"doesn't exist in\"", ",", "\n", "args", ".", "tag", ",", "'LSUN release'", ")", "\n", "", "else", ":", "\n", "            ", "download", "(", "args", ".", "out_dir", ",", "args", ".", "category", ",", "'train'", ",", "args", ".", "tag", ")", "\n", "download", "(", "args", ".", "out_dir", ",", "args", ".", "category", ",", "'val'", ",", "args", ".", "tag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.Image_Caption_Dataset.__init__": [[21, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "vocab_builder", ")", ":", "\n", "        ", "self", ".", "vocab_builder", "=", "vocab_builder", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.Image_Caption_Dataset.__len__": [[24, 26], ["NotImplementedError"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"This method must be implemented in subclass\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.Image_Caption_Dataset.__getitem__": [[27, 29], ["NotImplementedError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"This method must be implemented in subclass\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.Image_Caption_Dataset.build_vocab": [[30, 32], ["datasets1.Image_Caption_Dataset.vocab_builder.load_texts"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.load_texts"], ["", "def", "build_vocab", "(", "self", ",", "listof_files", ")", ":", "\n", "        ", "self", ".", "vocab_builder", ".", "load_texts", "(", "listof_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.Image_Caption_Dataset.get_vocab_builder": [[33, 35], ["None"], "methods", ["None"], ["", "def", "get_vocab_builder", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vocab_builder", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.ShapesDataset.__init__": [[38, 68], ["data.vocab.ShapesVocabBuilder", "datasets1.Image_Caption_Dataset.__init__", "os.path.join", "os.path.join", "os.path.join", "datasets1.ShapesDataset.image_caption_csv.replace", "datasets1.ShapesDataset.build_vocab", "max", "open", "csv.reader", "len", "datasets1.ShapesDataset.vocab_builder.tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.Image_Caption_Dataset.build_vocab", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.WhitespaceTokenizer.tokenize"], ["    ", "def", "__init__", "(", "self", ",", "rootdir", ",", "vocab_builder", "=", "ShapesVocabBuilder", "(", ")", ",", "split", "=", "'train'", ",", "transform", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initialize shapes dataset\n        :param rootdir: root directory\n        :param split: one of {train, val}\n        :param transform: transformation for the images\n        \"\"\"", "\n", "super", "(", "ShapesDataset", ",", "self", ")", ".", "__init__", "(", "vocab_builder", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "rootdir", "=", "rootdir", "\n", "self", ".", "split_dir", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "split", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'images'", ")", "\n", "self", ".", "image_caption_csv", "=", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'image_captions.csv'", ")", "\n", "\n", "# build vocab from train and val set together", "\n", "train_captions_path", "=", "self", ".", "image_caption_csv", "\n", "val_captions_path", "=", "self", ".", "image_caption_csv", ".", "replace", "(", "'train'", ",", "'val'", ")", "\n", "self", ".", "build_vocab", "(", "[", "train_captions_path", ",", "val_captions_path", "]", ")", "\n", "\n", "# Note:", "\n", "# We read the captions twice from the file(s). Once for storing the captions in a list (self.image_captions)", "\n", "# which is accessed in __get_item__ and once for building the vocabulary. The same happens in the birds dataset.", "\n", "# For now it's not really an issue but maybe when datasets become larger.", "\n", "with", "open", "(", "self", ".", "image_caption_csv", ")", "as", "csvfile", ":", "\n", "            ", "reader", "=", "csv", ".", "reader", "(", "csvfile", ")", "\n", "self", ".", "image_captions", "=", "[", "row", "for", "row", "in", "reader", "]", "[", "1", ":", "]", "# skip header", "\n", "", "sentences", "=", "[", "row", "[", "1", "]", "for", "row", "in", "self", ".", "image_captions", "]", "\n", "\n", "max_sent_length", "=", "max", "(", "[", "len", "(", "self", ".", "vocab_builder", ".", "tokenizer", ".", "tokenize", "(", "sentence", ")", ")", "for", "sentence", "in", "sentences", "]", ")", "\n", "self", ".", "max_sent_length", "=", "max_sent_length", "+", "2", "# + 2 for sos and eos", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.ShapesDataset.__len__": [[69, 71], ["len", "os.listdir"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "os", ".", "listdir", "(", "self", ".", "img_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.ShapesDataset.__getitem__": [[72, 86], ["os.path.join", "skimage.io.imread", "datasets1.ShapesDataset.vocab_builder.encode_sentences", "caption_encoded.squeeze.squeeze.squeeze", "caption_length.squeeze.squeeze.squeeze", "torchvision.transforms.ToTensor", "datasets1.ShapesDataset.transform"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.encode_sentences"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "self", ".", "image_captions", "[", "index", "]", "[", "0", "]", "+", "'.png'", ")", "\n", "img", "=", "io", ".", "imread", "(", "img_path", ")", "\n", "caption", "=", "self", ".", "image_captions", "[", "index", "]", "[", "1", "]", "\n", "\n", "caption_encoded", ",", "caption_length", "=", "self", ".", "vocab_builder", ".", "encode_sentences", "(", "[", "caption", "]", ",", "self", ".", "max_sent_length", ")", "\n", "caption_encoded", "=", "caption_encoded", ".", "squeeze", "(", ")", "# remove batch size dim since dataloader will add it", "\n", "caption_length", "=", "caption_length", ".", "squeeze", "(", ")", "\n", "\n", "untransformed_img", "=", "tt", ".", "ToTensor", "(", ")", "(", "img", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "untransformed_img", ",", "caption_encoded", ",", "caption_length", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdsDataset.__init__": [[89, 170], ["data.vocab.BirdsVocabBuilder", "datasets1.Image_Caption_Dataset.__init__", "os.path.join", "os.path.join", "pandas.read_csv().astype", "len", "range", "enumerate", "os.path.join", "os.path.join", "print", "os.path.join", "os.listdir", "max", "datasets1.BirdsDataset.build_vocab", "open", "f.readlines", "open", "f.readlines", "len", "len", "[].tolist", "os.path.normpath", "open", "pickle.load", "len", "len", "os.listdir", "os.path.join", "os.path.join", "pandas.read_csv", "datasets1.BirdsDataset.images.append", "datasets1.BirdsDataset.images.append", "os.path.join", "captionpaths.append", "open", "f.readlines", "len", "line.split", "line.split", "len", "os.path.join", "len", "captions.append", "datasets1.BirdsDataset.vocab_builder.tokenizer.tokenize", "lines[].strip"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.Image_Caption_Dataset.build_vocab", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.WhitespaceTokenizer.tokenize"], ["    ", "def", "__init__", "(", "self", ",", "rootdir", ",", "transform", ",", "vocab_builder", "=", "BirdsVocabBuilder", "(", ")", ",", "split", "=", "'train'", ",", "img_format", "=", "\".jpg\"", ")", ":", "\n", "        ", "super", "(", "BirdsDataset", ",", "self", ")", ".", "__init__", "(", "vocab_builder", ")", "\n", "self", ".", "split_ids", "=", "{", "\n", "'train'", ":", "\"0\"", ",", "\n", "'val'", ":", "\"1\"", "\n", "}", "\n", "self", ".", "image_format", "=", "img_format", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "rootdir", "=", "rootdir", "\n", "self", ".", "image_rootdir", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "\"images\"", ")", "\n", "\n", "self", ".", "train_test_split", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "rootdir", ",", "\"train_test_split.txt\"", ")", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "train_test_split", "=", "[", "line", ".", "split", "(", ")", "[", "1", "]", "for", "line", "in", "lines", "]", "\n", "\n", "", "self", ".", "allimages", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "rootdir", ",", "\"images.txt\"", ")", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "allimages", "=", "[", "line", ".", "split", "(", ")", "[", "1", "]", "for", "line", "in", "lines", "]", "\n", "\n", "# Sanity check", "\n", "", "assert", "len", "(", "self", ".", "allimages", ")", "==", "len", "(", "self", ".", "train_test_split", ")", "\n", "\n", "##########################BBBOX ##########################", "\n", "###########################################################", "\n", "bbox_path", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "'bounding_boxes.txt'", ")", "\n", "df_bounding_boxes", "=", "pd", ".", "read_csv", "(", "bbox_path", ",", "delim_whitespace", "=", "True", ",", "header", "=", "None", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "filename_bbox", "=", "{", "img_file", ":", "[", "]", "for", "img_file", "in", "self", ".", "allimages", "}", "\n", "numImgs", "=", "len", "(", "self", ".", "allimages", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "numImgs", ")", ":", "\n", "# bbox = [x-left, y-top, width, height]", "\n", "            ", "bbox", "=", "df_bounding_boxes", ".", "iloc", "[", "i", "]", "[", "1", ":", "]", ".", "tolist", "(", ")", "\n", "\n", "key", "=", "self", ".", "allimages", "[", "i", "]", "\n", "self", ".", "filename_bbox", "[", "key", "]", "=", "bbox", "\n", "###############################################################", "\n", "###############################################################", "\n", "\n", "", "self", ".", "images", "=", "[", "]", "\n", "\n", "split_identifier", "=", "self", ".", "split_ids", "[", "split", "]", "\n", "for", "idx", ",", "image", "in", "enumerate", "(", "self", ".", "allimages", ")", ":", "\n", "            ", "if", "self", ".", "train_test_split", "[", "idx", "]", "==", "split_identifier", ":", "\n", "                ", "self", ".", "images", ".", "append", "(", "image", ")", "\n", "###################################################for 80 :20 split##########", "\n", "##########################################################################", "\n", "", "", "self", ".", "split_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "normpath", "(", "rootdir", "+", "os", ".", "sep", "+", "os", ".", "pardir", ")", ",", "split", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'filenames.pickle'", ")", "\n", "with", "open", "(", "filepath", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "filenames", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "print", "(", "'Load filenames from: %s (%d)'", "%", "(", "filepath", ",", "len", "(", "filenames", ")", ")", ")", "\n", "self", ".", "images", "=", "[", "]", "\n", "if", "len", "(", "self", ".", "allimages", ")", ">", "len", "(", "filenames", ")", ":", "\n", "            ", "for", "image", "in", "filenames", ":", "\n", "                ", "self", ".", "images", ".", "append", "(", "image", "+", "'.jpg'", ")", "\n", "\n", "#####################################################################", "\n", "#####################################################################", "\n", "\n", "\n", "# read captions to determine max sentence length", "\n", "", "", "caption_dir", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "\"text_c10\"", ")", "\n", "captionpaths", "=", "[", "]", "\n", "for", "subdir", "in", "os", ".", "listdir", "(", "caption_dir", ")", ":", "\n", "            ", "for", "file", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "caption_dir", ",", "subdir", ")", ")", ":", "\n", "                ", "captionpaths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "caption_dir", ",", "subdir", ",", "file", ")", ")", "\n", "\n", "# Note:", "\n", "# see Note in ShapesDataset", "\n", "", "", "captions", "=", "[", "]", "\n", "for", "captionpath", "in", "captionpaths", ":", "\n", "            ", "with", "open", "(", "captionpath", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "if", "len", "(", "lines", ")", ">", "0", ":", "\n", "                    ", "captions", ".", "append", "(", "lines", "[", "0", "]", ".", "strip", "(", ")", ")", "# select always the first description as caption for now", "\n", "", "", "", "max_sent_length", "=", "max", "(", "[", "len", "(", "self", ".", "vocab_builder", ".", "tokenizer", ".", "tokenize", "(", "sentence", ")", ")", "for", "sentence", "in", "captions", "]", ")", "\n", "self", ".", "max_sent_length", "=", "max_sent_length", "+", "2", "# + 2 for sos and eos", "\n", "\n", "# build vocabulary", "\n", "self", ".", "build_vocab", "(", "captionpaths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdsDataset.__len__": [[171, 173], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdsDataset.crop_image": [[174, 186], ["int", "int", "int", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.minimum", "img.crop.crop.crop", "numpy.maximum"], "methods", ["None"], ["", "def", "crop_image", "(", "self", ",", "img", ",", "box", ")", ":", "\n", "#######################cropping important part################", "\n", "        ", "width", ",", "height", "=", "img", ".", "size", "\n", "r", "=", "int", "(", "np", ".", "maximum", "(", "box", "[", "2", "]", ",", "box", "[", "3", "]", ")", "*", "0.75", ")", "\n", "center_x", "=", "int", "(", "(", "2", "*", "box", "[", "0", "]", "+", "box", "[", "2", "]", ")", "/", "2", ")", "\n", "center_y", "=", "int", "(", "(", "2", "*", "box", "[", "1", "]", "+", "box", "[", "3", "]", ")", "/", "2", ")", "\n", "y1", "=", "np", ".", "maximum", "(", "0", ",", "center_y", "-", "r", ")", "\n", "y2", "=", "np", ".", "minimum", "(", "height", ",", "center_y", "+", "r", ")", "\n", "x1", "=", "np", ".", "maximum", "(", "0", ",", "center_x", "-", "r", ")", "\n", "x2", "=", "np", ".", "minimum", "(", "width", ",", "center_x", "+", "r", ")", "\n", "img", "=", "img", ".", "crop", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ")", "\n", "return", "img", "\n", "######################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdsDataset.__getitem__": [[188, 210], ["os.path.join", "datasets1.BirdsDataset.__change_fileending", "datasets1.BirdsDataset.vocab_builder.encode_sentences", "caption_encoded.squeeze.squeeze.squeeze", "caption_length.squeeze.squeeze.squeeze", "open", "PIL.Image.open().convert", "datasets1.BirdsDataset.crop_image", "datasets1.BirdsDataset.transform", "open", "f.readlines", "len", "captions[].strip", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.BirdsDataset.__change_fileending", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.encode_sentences", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset2.crop_image"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_rootdir", ",", "self", ".", "images", "[", "idx", "]", ")", "\n", "caption_path", "=", "self", ".", "__change_fileending", "(", "img_path", ")", "\n", "img_key", "=", "self", ".", "images", "[", "idx", "]", "\n", "bbox", "=", "self", ".", "filename_bbox", "[", "img_key", "]", "\n", "with", "open", "(", "img_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "#output is PIL", "\n", "img", "=", "self", ".", "crop_image", "(", "img", ",", "bbox", ")", "\n", "img", "=", "tt", ".", "Resize", "(", "(", "128", ",", "128", ")", ")", "(", "img", ")", "#Resize into 64*64", "\n", "img", "=", "tt", ".", "ToTensor", "(", ")", "(", "img", ")", "\n", "img_padded", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "caption", "=", "\"\"", "\n", "with", "open", "(", "caption_path", ")", "as", "f", ":", "\n", "            ", "captions", "=", "f", ".", "readlines", "(", ")", "\n", "", "if", "len", "(", "captions", ")", ">", "0", ":", "\n", "            ", "caption", "=", "captions", "[", "0", "]", ".", "strip", "(", ")", "# select always the first description as caption for now", "\n", "\n", "", "caption_encoded", ",", "caption_length", "=", "self", ".", "vocab_builder", ".", "encode_sentences", "(", "[", "caption", "]", ",", "self", ".", "max_sent_length", ")", "\n", "caption_encoded", "=", "caption_encoded", ".", "squeeze", "(", ")", "\n", "caption_length", "=", "caption_length", ".", "squeeze", "(", ")", "\n", "return", "img_padded", ",", "img", ",", "caption_encoded", ",", "caption_length", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdsDataset.__change_fileending": [[211, 220], ["path.replace().replace", "ValueError", "path.replace"], "methods", ["None"], ["", "def", "__change_fileending", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Changes fileending from image to text format\n        :return: path with .txt ending instead of image format ending\n        \"\"\"", "\n", "if", "self", ".", "image_format", "in", "path", ":", "\n", "            ", "return", "path", ".", "replace", "(", "self", ".", "image_format", ",", "\".txt\"", ")", ".", "replace", "(", "\"images\"", ",", "\"text_c10\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unexpected image format\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdstextDataset.__init__": [[225, 312], ["data.vocab.BirdsVocabBuilder", "datasets1.Image_Caption_Dataset.__init__", "os.path.join", "enumerate", "os.path.join", "os.path.join", "print", "os.path.join", "os.listdir", "max", "print", "datasets1.BirdstextDataset.build_vocab", "open", "open.readlines", "open", "open.readlines", "len", "len", "os.path.normpath", "open", "pickle.load", "len", "len", "os.listdir", "os.path.join", "datasets1.BirdstextDataset.__change_fileending", "open", "open.close", "len", "os.path.join", "os.path.join", "datasets1.BirdstextDataset.images.append", "datasets1.BirdstextDataset.images.append", "os.path.join", "captionpaths.append", "re.sub", "datasets1.BirdstextDataset.captions.append", "open", "open.readlines", "len", "re.sub.split", "re.sub.split", "len", "os.path.join", "re.sub.strip().lower", "len", "datasets1.BirdstextDataset.vocab_builder.tokenizer.tokenize", "re.sub", "allcaptions.append", "re.sub.strip", "re.sub.strip"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.Image_Caption_Dataset.build_vocab", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.BirdsDataset.__change_fileending", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.WhitespaceTokenizer.tokenize"], ["    ", "def", "__init__", "(", "self", ",", "rootdir", ",", "transform", ",", "vocab_builder", "=", "BirdsVocabBuilder", "(", ")", ",", "split", "=", "'train'", ",", "img_format", "=", "\".jpg\"", ")", ":", "\n", "        ", "super", "(", "BirdstextDataset", ",", "self", ")", ".", "__init__", "(", "vocab_builder", ")", "\n", "self", ".", "split_ids", "=", "{", "\n", "'train'", ":", "\"0\"", ",", "\n", "'val'", ":", "\"1\"", "\n", "}", "\n", "self", ".", "image_format", "=", "img_format", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "rootdir", "=", "rootdir", "\n", "self", ".", "image_rootdir", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "\"images\"", ")", "\n", "\n", "self", ".", "train_test_split", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "rootdir", ",", "\"train_test_split.txt\"", ")", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "train_test_split", "=", "[", "line", ".", "split", "(", ")", "[", "1", "]", "for", "line", "in", "lines", "]", "\n", "\n", "", "self", ".", "allimages", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "rootdir", ",", "\"images.txt\"", ")", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "allimages", "=", "[", "line", ".", "split", "(", ")", "[", "1", "]", "for", "line", "in", "lines", "]", "\n", "\n", "# Sanity check", "\n", "", "assert", "len", "(", "self", ".", "allimages", ")", "==", "len", "(", "self", ".", "train_test_split", ")", "\n", "\n", "\n", "\n", "self", ".", "images", "=", "[", "]", "\n", "\n", "split_identifier", "=", "self", ".", "split_ids", "[", "split", "]", "\n", "for", "idx", ",", "image", "in", "enumerate", "(", "self", ".", "allimages", ")", ":", "\n", "            ", "if", "self", ".", "train_test_split", "[", "idx", "]", "==", "split_identifier", ":", "\n", "                ", "self", ".", "images", ".", "append", "(", "image", ")", "\n", "\n", "###################################################for 80 :20 split##########", "\n", "########################################################################", "\n", "", "", "self", ".", "split_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "normpath", "(", "rootdir", "+", "os", ".", "sep", "+", "os", ".", "pardir", ")", ",", "split", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'filenames.pickle'", ")", "\n", "with", "open", "(", "filepath", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "filenames", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "print", "(", "'Load filenames from: %s (%d)'", "%", "(", "filepath", ",", "len", "(", "filenames", ")", ")", ")", "\n", "self", ".", "images", "=", "[", "]", "\n", "if", "len", "(", "self", ".", "allimages", ")", ">", "len", "(", "filenames", ")", ":", "\n", "            ", "for", "image", "in", "filenames", ":", "\n", "                ", "self", ".", "images", ".", "append", "(", "image", "+", "'.jpg'", ")", "\n", "\n", "#####################################################################", "\n", "###################################################################", "\n", "\n", "# read captions to determine max sentence length", "\n", "", "", "caption_dir", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "\"text_c10\"", ")", "\n", "captionpaths", "=", "[", "]", "\n", "for", "subdir", "in", "os", ".", "listdir", "(", "caption_dir", ")", ":", "\n", "            ", "for", "file", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "caption_dir", ",", "subdir", ")", ")", ":", "\n", "                ", "captionpaths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "caption_dir", ",", "subdir", ",", "file", ")", ")", "\n", "\n", "# Note:", "\n", "# see Note in ShapesDataset", "\n", "", "", "self", ".", "captions", "=", "[", "]", "\n", "for", "img_subpath", "in", "self", ".", "images", ":", "\n", "            ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_rootdir", ",", "img_subpath", ")", "\n", "caption_path", "=", "self", ".", "__change_fileending", "(", "img_path", ")", "\n", "f", "=", "open", "(", "caption_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "\n", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "re", ".", "sub", "(", "r'[^A-Za-z0-9 ,.?!-]+'", ",", "' '", ",", "line", ")", "\n", "self", ".", "captions", ".", "append", "(", "line", ".", "strip", "(", ")", ".", "lower", "(", ")", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "", "allcaptions", "=", "[", "]", "\n", "for", "captionpath", "in", "captionpaths", ":", "\n", "            ", "with", "open", "(", "captionpath", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "if", "len", "(", "lines", ")", ">", "0", ":", "\n", "                    ", "for", "line", "in", "lines", ":", "\n", "                        ", "line", "=", "re", ".", "sub", "(", "r'[^A-Za-z0-9 ,.?!-]+'", ",", "' '", ",", "line", ")", "\n", "allcaptions", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "# select always the first description as caption for now", "\n", "\n", "\n", "", "", "", "", "max_sent_length", "=", "max", "(", "[", "len", "(", "self", ".", "vocab_builder", ".", "tokenizer", ".", "tokenize", "(", "sentence", ")", ")", "for", "sentence", "in", "allcaptions", "]", ")", "\n", "\n", "self", ".", "max_sent_length", "=", "max_sent_length", "+", "2", "# + 2 for sos and eos", "\n", "\n", "\n", "#print('the maximum sentence length',self.max_sent_length)", "\n", "#print('number of images:', len(self.images), 'number of captions:',len(self.captions))", "\n", "# build vocabulary", "\n", "print", "(", "'number of captions in birds dataset'", ",", "len", "(", "self", ".", "captions", ")", ")", "\n", "self", ".", "build_vocab", "(", "captionpaths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdstextDataset.__len__": [[313, 315], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "captions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdstextDataset.__getitem__": [[317, 325], ["datasets1.BirdstextDataset.vocab_builder.encode_sentences", "caption_encoded.squeeze.squeeze.squeeze", "caption_length.squeeze.squeeze.squeeze"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.encode_sentences"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "caption", "=", "self", ".", "captions", "[", "idx", "]", "\n", "_", "=", "''", "\n", "\n", "caption_encoded", ",", "caption_length", "=", "self", ".", "vocab_builder", ".", "encode_sentences", "(", "[", "caption", "]", ",", "self", ".", "max_sent_length", ")", "\n", "caption_encoded", "=", "caption_encoded", ".", "squeeze", "(", ")", "\n", "caption_length", "=", "caption_length", ".", "squeeze", "(", ")", "\n", "return", "_", ",", "_", ",", "caption_encoded", ",", "caption_length", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdstextDataset.__change_fileending": [[326, 335], ["path.replace().replace", "ValueError", "path.replace"], "methods", ["None"], ["", "def", "__change_fileending", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Changes fileending from image to text format\n        :return: path with .txt ending instead of image format ending\n        \"\"\"", "\n", "if", "self", ".", "image_format", "in", "path", ":", "\n", "            ", "return", "path", ".", "replace", "(", "self", ".", "image_format", ",", "\".txt\"", ")", ".", "replace", "(", "\"images\"", ",", "\"text_c10\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unexpected image format\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BillionDataset.__init__": [[338, 359], ["data.vocab.BillionVocabBuilder", "datasets1.Image_Caption_Dataset.__init__", "glob.glob", "max", "print", "datasets1.BillionDataset.build_vocab", "len", "len", "captionpaths.append", "open", "open.close", "len", "datasets1.BillionDataset.vocab_builder.tokenizer.tokenize", "len", "re.sub", "datasets1.BillionDataset.captions.append", "len", "re.sub.strip().lower", "datasets1.BillionDataset.vocab_builder.tokenizer.tokenize", "re.sub.strip"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.Image_Caption_Dataset.build_vocab", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.WhitespaceTokenizer.tokenize", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.WhitespaceTokenizer.tokenize"], ["    ", "def", "__init__", "(", "self", ",", "rootdir", ",", "vocab_builder", "=", "BillionVocabBuilder", "(", ")", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "super", "(", "BillionDataset", ",", "self", ")", ".", "__init__", "(", "vocab_builder", ")", "\n", "self", ".", "captiondir", "=", "rootdir", "\n", "\n", "captionpaths", "=", "[", "]", "\n", "self", ".", "captions", "=", "[", "]", "\n", "for", "captionpath", "in", "glob", ".", "glob", "(", "self", ".", "captiondir", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "captions", ")", "<", "1000000", ":", "#taking only one million records", "\n", "                ", "captionpaths", ".", "append", "(", "captionpath", ")", "\n", "f", "=", "open", "(", "captionpath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "\n", "for", "line", "in", "f", ":", "\n", "                    ", "if", "len", "(", "self", ".", "captions", ")", "<", "1000000", ":", "\n", "                        ", "line", "=", "re", ".", "sub", "(", "r'[^A-Za-z0-9 ,.?!-]+'", ",", "' '", ",", "line", ")", "\n", "if", "(", "len", "(", "self", ".", "vocab_builder", ".", "tokenizer", ".", "tokenize", "(", "line", ")", ")", "+", "2", ")", "<=", "75", ":", "#with length less than the length of birds dataset", "\n", "                            ", "self", ".", "captions", ".", "append", "(", "line", ".", "strip", "(", ")", ".", "lower", "(", ")", ")", "\n", "", "", "", "f", ".", "close", "(", ")", "\n", "", "", "max_sent_length", "=", "max", "(", "[", "len", "(", "self", ".", "vocab_builder", ".", "tokenizer", ".", "tokenize", "(", "sentence", ")", ")", "for", "sentence", "in", "self", ".", "captions", "]", ")", "\n", "self", ".", "max_sent_length", "=", "max_sent_length", "+", "2", "# + 2 for sos and eos", "\n", "# build vocabulary", "\n", "print", "(", "'number of captions in billion dataset'", ",", "len", "(", "self", ".", "captions", ")", ")", "\n", "self", ".", "build_vocab", "(", "captionpaths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BillionDataset.__len__": [[360, 362], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "captions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BillionDataset.__getitem__": [[365, 374], ["datasets1.BillionDataset.vocab_builder.encode_sentences", "caption_encoded.squeeze.squeeze.squeeze", "caption_length.squeeze.squeeze.squeeze"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.encode_sentences"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "_", "=", "''", "\n", "\n", "caption", "=", "self", ".", "captions", "[", "idx", "]", "\n", "\n", "caption_encoded", ",", "caption_length", "=", "self", ".", "vocab_builder", ".", "encode_sentences", "(", "[", "caption", "]", ",", "self", ".", "max_sent_length", ")", "\n", "caption_encoded", "=", "caption_encoded", ".", "squeeze", "(", ")", "\n", "caption_length", "=", "caption_length", ".", "squeeze", "(", ")", "\n", "return", "_", ",", "_", ",", "caption_encoded", ",", "caption_length", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdsDataset1.__init__": [[377, 471], ["data.vocab.BirdsVocabBuilder", "datasets1.Image_Caption_Dataset.__init__", "os.path.join", "torchvision.transforms.Compose", "os.path.join", "pandas.read_csv().astype", "len", "range", "enumerate", "os.path.join", "os.path.join", "print", "enumerate", "os.path.join", "os.listdir", "max", "datasets1.BirdsDataset1.build_vocab", "open", "f.readlines", "open", "f.readlines", "len", "len", "[].tolist", "os.path.normpath", "open", "pickle.load", "len", "len", "random.randint", "datasets1.BirdsDataset1.wrong_images.append", "os.listdir", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "os.path.join", "os.path.join", "pandas.read_csv", "datasets1.BirdsDataset1.images.append", "datasets1.BirdsDataset1.images.append", "random.randint", "os.path.join", "captionpaths.append", "open", "f.readlines", "len", "re.sub.split", "re.sub.split", "len", "len", "os.path.join", "len", "re.sub", "captions.append", "datasets1.BirdsDataset1.vocab_builder.tokenizer.tokenize", "len", "re.sub.strip"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.Image_Caption_Dataset.build_vocab", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.WhitespaceTokenizer.tokenize"], ["    ", "def", "__init__", "(", "self", ",", "rootdir", ",", "transform", ",", "vocab_builder", "=", "BirdsVocabBuilder", "(", ")", ",", "split", "=", "'train'", ",", "img_format", "=", "\".jpg\"", ",", "num_dis", "=", "3", ",", "img_size", "=", "64", ")", ":", "\n", "        ", "super", "(", "BirdsDataset1", ",", "self", ")", ".", "__init__", "(", "vocab_builder", ")", "\n", "self", ".", "split_ids", "=", "{", "\n", "'train'", ":", "\"0\"", ",", "\n", "'val'", ":", "\"1\"", "\n", "}", "\n", "self", ".", "image_format", "=", "img_format", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "rootdir", "=", "rootdir", "\n", "self", ".", "image_rootdir", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "\"images\"", ")", "\n", "self", ".", "num_dis", "=", "num_dis", "\n", "self", ".", "size", "=", "img_size", "\n", "self", ".", "norm2", "=", "tt", ".", "Compose", "(", "[", "\n", "tt", ".", "ToTensor", "(", ")", ",", "\n", "tt", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "\n", "self", ".", "train_test_split", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "rootdir", ",", "\"train_test_split.txt\"", ")", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "train_test_split", "=", "[", "line", ".", "split", "(", ")", "[", "1", "]", "for", "line", "in", "lines", "]", "\n", "\n", "", "self", ".", "allimages", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "rootdir", ",", "\"images.txt\"", ")", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "allimages", "=", "[", "line", ".", "split", "(", ")", "[", "1", "]", "for", "line", "in", "lines", "]", "\n", "\n", "# Sanity check", "\n", "", "assert", "len", "(", "self", ".", "allimages", ")", "==", "len", "(", "self", ".", "train_test_split", ")", "\n", "\n", "##########################BBBOX ##########################", "\n", "###########################################################", "\n", "bbox_path", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "'bounding_boxes.txt'", ")", "\n", "df_bounding_boxes", "=", "pd", ".", "read_csv", "(", "bbox_path", ",", "delim_whitespace", "=", "True", ",", "header", "=", "None", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "filename_bbox", "=", "{", "img_file", ":", "[", "]", "for", "img_file", "in", "self", ".", "allimages", "}", "\n", "numImgs", "=", "len", "(", "self", ".", "allimages", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "numImgs", ")", ":", "\n", "# bbox = [x-left, y-top, width, height]", "\n", "            ", "bbox", "=", "df_bounding_boxes", ".", "iloc", "[", "i", "]", "[", "1", ":", "]", ".", "tolist", "(", ")", "\n", "\n", "key", "=", "self", ".", "allimages", "[", "i", "]", "\n", "self", ".", "filename_bbox", "[", "key", "]", "=", "bbox", "\n", "###############################################################", "\n", "###############################################################", "\n", "\n", "", "self", ".", "images", "=", "[", "]", "\n", "\n", "split_identifier", "=", "self", ".", "split_ids", "[", "split", "]", "\n", "for", "idx", ",", "image", "in", "enumerate", "(", "self", ".", "allimages", ")", ":", "\n", "            ", "if", "self", ".", "train_test_split", "[", "idx", "]", "==", "split_identifier", ":", "\n", "                ", "self", ".", "images", ".", "append", "(", "image", ")", "\n", "###################################################for 80 :20 split##########", "\n", "##########################################################################", "\n", "", "", "self", ".", "split_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "normpath", "(", "rootdir", "+", "os", ".", "sep", "+", "os", ".", "pardir", ")", ",", "split", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'filenames.pickle'", ")", "\n", "with", "open", "(", "filepath", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "filenames", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "print", "(", "'Load filenames from: %s (%d)'", "%", "(", "filepath", ",", "len", "(", "filenames", ")", ")", ")", "\n", "self", ".", "images", "=", "[", "]", "\n", "if", "len", "(", "self", ".", "allimages", ")", ">", "len", "(", "filenames", ")", ":", "\n", "            ", "for", "image", "in", "filenames", ":", "\n", "                ", "self", ".", "images", ".", "append", "(", "image", "+", "'.jpg'", ")", "\n", "\n", "#####################################################################", "\n", "#########################################################################", "\n", "\n", "#Creating wrong images set for new stackgan", "\n", "", "", "self", ".", "wrong_images", "=", "[", "]", "\n", "for", "idx", ",", "image", "in", "enumerate", "(", "self", ".", "images", ")", ":", "\n", "            ", "wrong_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "images", ")", "-", "1", ")", "\n", "while", "idx", "==", "wrong_idx", ":", "\n", "                ", "wrong_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "images", ")", "-", "1", ")", "\n", "", "self", ".", "wrong_images", ".", "append", "(", "self", ".", "images", "[", "wrong_idx", "]", ")", "\n", "\n", "# read captions to determine max sentence length", "\n", "", "caption_dir", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "\"text_c10\"", ")", "\n", "captionpaths", "=", "[", "]", "\n", "for", "subdir", "in", "os", ".", "listdir", "(", "caption_dir", ")", ":", "\n", "            ", "for", "file", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "caption_dir", ",", "subdir", ")", ")", ":", "\n", "                ", "captionpaths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "caption_dir", ",", "subdir", ",", "file", ")", ")", "\n", "\n", "# Note:", "\n", "# see Note in ShapesDataset", "\n", "", "", "captions", "=", "[", "]", "\n", "for", "captionpath", "in", "captionpaths", ":", "\n", "            ", "with", "open", "(", "captionpath", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "if", "len", "(", "lines", ")", ">", "0", ":", "\n", "                    ", "line", "=", "re", ".", "sub", "(", "r'[^A-Za-z0-9 ,.?!-]+'", ",", "' '", ",", "lines", "[", "0", "]", ")", "\n", "captions", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "# select always the first description as caption for now", "\n", "", "", "", "max_sent_length", "=", "max", "(", "[", "len", "(", "self", ".", "vocab_builder", ".", "tokenizer", ".", "tokenize", "(", "sentence", ")", ")", "for", "sentence", "in", "captions", "]", ")", "\n", "self", ".", "max_sent_length", "=", "max_sent_length", "+", "2", "# + 2 for sos and eos", "\n", "\n", "# build vocabulary", "\n", "self", ".", "build_vocab", "(", "captionpaths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdsDataset1.__len__": [[472, 474], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdsDataset1.crop_image": [[475, 498], ["int", "int", "int", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.minimum", "tt.Compose.crop", "torchvision.transforms.Compose", "torchvision.transforms.Compose.", "numpy.maximum", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "int"], "methods", ["None"], ["", "def", "crop_image", "(", "self", ",", "img", ",", "box", ")", ":", "\n", "#######################cropping important part################", "\n", "        ", "width", ",", "height", "=", "img", ".", "size", "\n", "r", "=", "int", "(", "np", ".", "maximum", "(", "box", "[", "2", "]", ",", "box", "[", "3", "]", ")", "*", "0.75", ")", "\n", "center_x", "=", "int", "(", "(", "2", "*", "box", "[", "0", "]", "+", "box", "[", "2", "]", ")", "/", "2", ")", "\n", "center_y", "=", "int", "(", "(", "2", "*", "box", "[", "1", "]", "+", "box", "[", "3", "]", ")", "/", "2", ")", "\n", "y1", "=", "np", ".", "maximum", "(", "0", ",", "center_y", "-", "r", ")", "\n", "y2", "=", "np", ".", "minimum", "(", "height", ",", "center_y", "+", "r", ")", "\n", "x1", "=", "np", ".", "maximum", "(", "0", ",", "center_x", "-", "r", ")", "\n", "x2", "=", "np", ".", "minimum", "(", "width", ",", "center_x", "+", "r", ")", "\n", "img", "=", "img", ".", "crop", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ")", "\n", "###################################################################", "\n", "#imsize = cfg.TREE.BASE_SIZE * (2 ** (cfg.TREE.BRANCH_NUM-1))", "\n", "\n", "imsize", "=", "self", ".", "size", "*", "(", "2", "**", "(", "self", ".", "num_dis", "-", "1", ")", ")", "\n", "image_transform", "=", "tt", ".", "Compose", "(", "[", "\n", "tt", ".", "Resize", "(", "int", "(", "imsize", "*", "76", "/", "76", ")", ")", ",", "\n", "#tt.Resize(int(imsize * 76 / 64)),", "\n", "tt", ".", "RandomCrop", "(", "imsize", ")", ",", "\n", "tt", ".", "RandomHorizontalFlip", "(", ")", "]", ")", "\n", "img", "=", "image_transform", "(", "img", ")", "\n", "############################################################", "\n", "return", "img", "\n", "######################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdsDataset1.process_image": [[500, 517], ["open", "PIL.Image.open().convert", "datasets1.BirdsDataset1.crop_image", "range", "img_res_li.append", "datasets1.BirdsDataset1.transform", "img_padded_li.append", "resnet_imgs.append", "PIL.Image.open", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "datasets1.BirdsDataset1.norm2"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset2.crop_image"], ["", "def", "process_image", "(", "self", ",", "path", ",", "box", ")", ":", "\n", "        ", "img_padded_li", "=", "[", "]", "\n", "img_res_li", "=", "[", "]", "\n", "resnet_imgs", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "#output is PIL", "\n", "img", "=", "self", ".", "crop_image", "(", "img", ",", "box", ")", "\n", "for", "i", "in", "range", "(", "cfg", ".", "TREE", ".", "BRANCH_NUM", ")", ":", "\n", "                ", "size", "=", "self", ".", "size", "*", "(", "2", "**", "i", ")", "\n", "img_res", "=", "tt", ".", "Resize", "(", "(", "size", ",", "size", ")", ")", "(", "img", ")", "#Resize into 64*64", "\n", "img_res", "=", "tt", ".", "ToTensor", "(", ")", "(", "img_res", ")", "\n", "img_res_li", ".", "append", "(", "img_res", ")", "\n", "img_padded", "=", "self", ".", "transform", "(", "img_res", ")", "\n", "img_padded_li", ".", "append", "(", "img_padded", ")", "\n", "resnet_i", "=", "tt", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", "(", "img", ")", "#for resnet", "\n", "resnet_imgs", ".", "append", "(", "self", ".", "norm2", "(", "resnet_i", ")", ")", "\n", "", "", "return", "img_res_li", "[", "0", "]", ",", "resnet_imgs", ",", "img_padded_li", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdsDataset1.__getitem__": [[518, 544], ["os.path.join", "os.path.join", "datasets1.BirdsDataset1.__change_fileending", "datasets1.BirdsDataset1.process_image", "datasets1.BirdsDataset1.process_image", "datasets1.BirdsDataset1.vocab_builder.encode_sentences", "caption_encoded.squeeze.squeeze.squeeze", "caption_length.squeeze.squeeze.squeeze", "open", "f.readlines", "len", "captions[].strip"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.BirdsDataset.__change_fileending", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset2.process_image", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset2.process_image", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.encode_sentences"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_padded_list", "=", "[", "]", "#list containing image tensors of differnt sizes(64,128,256)", "\n", "wg_img_padded_list", "=", "[", "]", "#list containing wrong image tensor of differnt sizes(64,128,256)", "\n", "resnet_imgs_list", "=", "[", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_rootdir", ",", "self", ".", "images", "[", "idx", "]", ")", "\n", "wrong_img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_rootdir", ",", "self", ".", "wrong_images", "[", "idx", "]", ")", "\n", "caption_path", "=", "self", ".", "__change_fileending", "(", "img_path", ")", "\n", "#################################################################", "\n", "img_key", "=", "self", ".", "images", "[", "idx", "]", "\n", "wg_img_key", "=", "self", ".", "wrong_images", "[", "idx", "]", "\n", "bbox", "=", "self", ".", "filename_bbox", "[", "img_key", "]", "\n", "wg_bbox", "=", "self", ".", "filename_bbox", "[", "wg_img_key", "]", "\n", "img_res", ",", "resnet_imgs_list", ",", "img_padded_list", "=", "self", ".", "process_image", "(", "img_path", ",", "bbox", ")", "\n", "_", ",", "_", ",", "wg_img_padded_list", "=", "self", ".", "process_image", "(", "wrong_img_path", ",", "wg_bbox", ")", "\n", "\n", "\n", "caption", "=", "\"\"", "\n", "with", "open", "(", "caption_path", ")", "as", "f", ":", "\n", "            ", "captions", "=", "f", ".", "readlines", "(", ")", "\n", "", "if", "len", "(", "captions", ")", ">", "0", ":", "\n", "            ", "caption", "=", "captions", "[", "0", "]", ".", "strip", "(", ")", "# select always the first description as caption for now", "\n", "\n", "", "caption_encoded", ",", "caption_length", "=", "self", ".", "vocab_builder", ".", "encode_sentences", "(", "[", "caption", "]", ",", "self", ".", "max_sent_length", ")", "\n", "caption_encoded", "=", "caption_encoded", ".", "squeeze", "(", ")", "\n", "caption_length", "=", "caption_length", ".", "squeeze", "(", ")", "\n", "return", "resnet_imgs_list", ",", "img_padded_list", ",", "wg_img_padded_list", ",", "img_res", ",", "caption_encoded", ",", "caption_length", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdsDataset1.__change_fileending": [[545, 554], ["path.replace().replace", "ValueError", "path.replace"], "methods", ["None"], ["", "def", "__change_fileending", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Changes fileending from image to text format\n        :return: path with .txt ending instead of image format ending\n        \"\"\"", "\n", "if", "self", ".", "image_format", "in", "path", ":", "\n", "            ", "return", "path", ".", "replace", "(", "self", ".", "image_format", ",", "\".txt\"", ")", ".", "replace", "(", "\"images\"", ",", "\"text_c10\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unexpected image format\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdsDataset2.__init__": [[557, 651], ["data.vocab.BirdsVocabBuilder", "datasets1.Image_Caption_Dataset.__init__", "os.path.join", "torchvision.transforms.Compose", "os.path.join", "pandas.read_csv().astype", "len", "range", "enumerate", "os.path.join", "os.path.join", "print", "enumerate", "os.path.join", "os.listdir", "max", "datasets1.BirdsDataset2.build_vocab", "open", "f.readlines", "open", "f.readlines", "len", "len", "[].tolist", "os.path.normpath", "open", "pickle.load", "len", "len", "random.randint", "datasets1.BirdsDataset2.wrong_images.append", "os.listdir", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "os.path.join", "os.path.join", "pandas.read_csv", "datasets1.BirdsDataset2.images.append", "datasets1.BirdsDataset2.images.append", "random.randint", "os.path.join", "captionpaths.append", "open", "f.readlines", "len", "re.sub.split", "re.sub.split", "len", "len", "os.path.join", "len", "re.sub", "captions.append", "datasets1.BirdsDataset2.vocab_builder.tokenizer.tokenize", "len", "re.sub.strip"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.Image_Caption_Dataset.build_vocab", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.WhitespaceTokenizer.tokenize"], ["    ", "def", "__init__", "(", "self", ",", "rootdir", ",", "transform", ",", "vocab_builder", "=", "BirdsVocabBuilder", "(", ")", ",", "split", "=", "'train'", ",", "img_format", "=", "\".jpg\"", ",", "num_dis", "=", "3", ",", "img_size", "=", "64", ")", ":", "\n", "        ", "super", "(", "BirdsDataset2", ",", "self", ")", ".", "__init__", "(", "vocab_builder", ")", "\n", "self", ".", "split_ids", "=", "{", "\n", "'train'", ":", "\"0\"", ",", "\n", "'val'", ":", "\"1\"", "\n", "}", "\n", "self", ".", "image_format", "=", "img_format", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "rootdir", "=", "rootdir", "\n", "self", ".", "image_rootdir", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "\"images\"", ")", "\n", "self", ".", "num_dis", "=", "num_dis", "\n", "self", ".", "size", "=", "img_size", "\n", "self", ".", "norm2", "=", "tt", ".", "Compose", "(", "[", "\n", "tt", ".", "ToTensor", "(", ")", ",", "\n", "tt", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "\n", "self", ".", "train_test_split", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "rootdir", ",", "\"train_test_split.txt\"", ")", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "train_test_split", "=", "[", "line", ".", "split", "(", ")", "[", "1", "]", "for", "line", "in", "lines", "]", "\n", "\n", "", "self", ".", "allimages", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "rootdir", ",", "\"images.txt\"", ")", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "allimages", "=", "[", "line", ".", "split", "(", ")", "[", "1", "]", "for", "line", "in", "lines", "]", "\n", "\n", "# Sanity check", "\n", "", "assert", "len", "(", "self", ".", "allimages", ")", "==", "len", "(", "self", ".", "train_test_split", ")", "\n", "\n", "##########################BBBOX ##########################", "\n", "###########################################################", "\n", "bbox_path", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "'bounding_boxes.txt'", ")", "\n", "df_bounding_boxes", "=", "pd", ".", "read_csv", "(", "bbox_path", ",", "delim_whitespace", "=", "True", ",", "header", "=", "None", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "filename_bbox", "=", "{", "img_file", ":", "[", "]", "for", "img_file", "in", "self", ".", "allimages", "}", "\n", "numImgs", "=", "len", "(", "self", ".", "allimages", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "numImgs", ")", ":", "\n", "# bbox = [x-left, y-top, width, height]", "\n", "            ", "bbox", "=", "df_bounding_boxes", ".", "iloc", "[", "i", "]", "[", "1", ":", "]", ".", "tolist", "(", ")", "\n", "\n", "key", "=", "self", ".", "allimages", "[", "i", "]", "\n", "self", ".", "filename_bbox", "[", "key", "]", "=", "bbox", "\n", "###############################################################", "\n", "###############################################################", "\n", "\n", "", "self", ".", "images", "=", "[", "]", "\n", "\n", "split_identifier", "=", "self", ".", "split_ids", "[", "split", "]", "\n", "for", "idx", ",", "image", "in", "enumerate", "(", "self", ".", "allimages", ")", ":", "\n", "            ", "if", "self", ".", "train_test_split", "[", "idx", "]", "==", "split_identifier", ":", "\n", "                ", "self", ".", "images", ".", "append", "(", "image", ")", "\n", "###################################################for 80 :20 split##########", "\n", "##########################################################################", "\n", "", "", "self", ".", "split_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "normpath", "(", "rootdir", "+", "os", ".", "sep", "+", "os", ".", "pardir", ")", ",", "split", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'filenames.pickle'", ")", "\n", "with", "open", "(", "filepath", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "filenames", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "print", "(", "'Load filenames from: %s (%d)'", "%", "(", "filepath", ",", "len", "(", "filenames", ")", ")", ")", "\n", "self", ".", "images", "=", "[", "]", "\n", "if", "len", "(", "self", ".", "allimages", ")", ">", "len", "(", "filenames", ")", ":", "\n", "            ", "for", "image", "in", "filenames", ":", "\n", "                ", "self", ".", "images", ".", "append", "(", "image", "+", "'.jpg'", ")", "\n", "\n", "#####################################################################", "\n", "#########################################################################", "\n", "\n", "#Creating wrong images set for new stackgan", "\n", "", "", "self", ".", "wrong_images", "=", "[", "]", "\n", "for", "idx", ",", "image", "in", "enumerate", "(", "self", ".", "images", ")", ":", "\n", "            ", "wrong_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "images", ")", "-", "1", ")", "\n", "while", "idx", "==", "wrong_idx", ":", "\n", "                ", "wrong_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "images", ")", "-", "1", ")", "\n", "", "self", ".", "wrong_images", ".", "append", "(", "self", ".", "images", "[", "wrong_idx", "]", ")", "\n", "\n", "# read captions to determine max sentence length", "\n", "", "caption_dir", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "\"text_c10\"", ")", "\n", "captionpaths", "=", "[", "]", "\n", "for", "subdir", "in", "os", ".", "listdir", "(", "caption_dir", ")", ":", "\n", "            ", "for", "file", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "caption_dir", ",", "subdir", ")", ")", ":", "\n", "                ", "captionpaths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "caption_dir", ",", "subdir", ",", "file", ")", ")", "\n", "\n", "# Note:", "\n", "# see Note in ShapesDataset", "\n", "", "", "captions", "=", "[", "]", "\n", "for", "captionpath", "in", "captionpaths", ":", "\n", "            ", "with", "open", "(", "captionpath", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "if", "len", "(", "lines", ")", ">", "0", ":", "\n", "                    ", "line", "=", "re", ".", "sub", "(", "r'[^A-Za-z0-9 ,.?!-]+'", ",", "' '", ",", "lines", "[", "0", "]", ")", "\n", "captions", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "# select always the first description as caption for now", "\n", "", "", "", "max_sent_length", "=", "max", "(", "[", "len", "(", "self", ".", "vocab_builder", ".", "tokenizer", ".", "tokenize", "(", "sentence", ")", ")", "for", "sentence", "in", "captions", "]", ")", "\n", "self", ".", "max_sent_length", "=", "max_sent_length", "+", "2", "# + 2 for sos and eos", "\n", "\n", "# build vocabulary", "\n", "self", ".", "build_vocab", "(", "captionpaths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdsDataset2.__len__": [[652, 654], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdsDataset2.crop_image": [[655, 678], ["int", "int", "int", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.minimum", "tt.Compose.crop", "torchvision.transforms.Compose", "torchvision.transforms.Compose.", "numpy.maximum", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "int"], "methods", ["None"], ["", "def", "crop_image", "(", "self", ",", "img", ",", "box", ")", ":", "\n", "#######################cropping important part################", "\n", "        ", "width", ",", "height", "=", "img", ".", "size", "\n", "r", "=", "int", "(", "np", ".", "maximum", "(", "box", "[", "2", "]", ",", "box", "[", "3", "]", ")", "*", "0.75", ")", "\n", "center_x", "=", "int", "(", "(", "2", "*", "box", "[", "0", "]", "+", "box", "[", "2", "]", ")", "/", "2", ")", "\n", "center_y", "=", "int", "(", "(", "2", "*", "box", "[", "1", "]", "+", "box", "[", "3", "]", ")", "/", "2", ")", "\n", "y1", "=", "np", ".", "maximum", "(", "0", ",", "center_y", "-", "r", ")", "\n", "y2", "=", "np", ".", "minimum", "(", "height", ",", "center_y", "+", "r", ")", "\n", "x1", "=", "np", ".", "maximum", "(", "0", ",", "center_x", "-", "r", ")", "\n", "x2", "=", "np", ".", "minimum", "(", "width", ",", "center_x", "+", "r", ")", "\n", "img", "=", "img", ".", "crop", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ")", "\n", "###################################################################", "\n", "#imsize = cfg.TREE.BASE_SIZE * (2 ** (cfg.TREE.BRANCH_NUM-1))", "\n", "\n", "imsize", "=", "self", ".", "size", "*", "(", "2", "**", "(", "self", ".", "num_dis", "-", "1", ")", ")", "\n", "image_transform", "=", "tt", ".", "Compose", "(", "[", "\n", "tt", ".", "Resize", "(", "int", "(", "imsize", "*", "76", "/", "76", ")", ")", ",", "\n", "#tt.Resize(int(imsize * 76 / 64)),", "\n", "tt", ".", "RandomCrop", "(", "imsize", ")", ",", "\n", "tt", ".", "RandomHorizontalFlip", "(", ")", "]", ")", "\n", "img", "=", "image_transform", "(", "img", ")", "\n", "############################################################", "\n", "return", "img", "\n", "######################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdsDataset2.process_image": [[680, 697], ["open", "PIL.Image.open().convert", "datasets1.BirdsDataset2.crop_image", "range", "img_res_li.append", "datasets1.BirdsDataset2.transform", "img_padded_li.append", "resnet_imgs.append", "PIL.Image.open", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "datasets1.BirdsDataset2.norm2"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset2.crop_image"], ["", "def", "process_image", "(", "self", ",", "path", ",", "box", ")", ":", "\n", "        ", "img_padded_li", "=", "[", "]", "\n", "img_res_li", "=", "[", "]", "\n", "resnet_imgs", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "#output is PIL", "\n", "img", "=", "self", ".", "crop_image", "(", "img", ",", "box", ")", "\n", "for", "i", "in", "range", "(", "cfg", ".", "TREE", ".", "BRANCH_NUM", ")", ":", "\n", "                ", "size", "=", "self", ".", "size", "*", "(", "2", "**", "i", ")", "\n", "img_res", "=", "tt", ".", "Resize", "(", "(", "size", ",", "size", ")", ")", "(", "img", ")", "#Resize into 64*64", "\n", "img_res", "=", "tt", ".", "ToTensor", "(", ")", "(", "img_res", ")", "\n", "img_res_li", ".", "append", "(", "img_res", ")", "\n", "img_padded", "=", "self", ".", "transform", "(", "img_res", ")", "\n", "img_padded_li", ".", "append", "(", "img_padded", ")", "\n", "resnet_i", "=", "tt", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", "(", "img", ")", "#for resnet", "\n", "resnet_imgs", ".", "append", "(", "self", ".", "norm2", "(", "resnet_i", ")", ")", "\n", "", "", "return", "img_res_li", "[", "0", "]", ",", "resnet_imgs", ",", "img_padded_li", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdsDataset2.__getitem__": [[698, 725], ["int", "os.path.join", "os.path.join", "datasets1.BirdsDataset2.__change_fileending", "datasets1.BirdsDataset2.process_image", "datasets1.BirdsDataset2.process_image", "datasets1.BirdsDataset2.vocab_builder.encode_sentences", "caption_encoded.squeeze.squeeze.squeeze", "caption_length.squeeze.squeeze.squeeze", "open", "f.readlines", "len", "captions[].strip"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.BirdsDataset.__change_fileending", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset2.process_image", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset2.process_image", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.encode_sentences"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_padded_list", "=", "[", "]", "#list containing image tensors of differnt sizes(64,128,256)", "\n", "wg_img_padded_list", "=", "[", "]", "#list containing wrong image tensor of differnt sizes(64,128,256)", "\n", "resnet_imgs_list", "=", "[", "]", "\n", "class_label", "=", "int", "(", "self", ".", "images", "[", "idx", "]", "[", ":", "3", "]", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_rootdir", ",", "self", ".", "images", "[", "idx", "]", ")", "\n", "wrong_img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_rootdir", ",", "self", ".", "wrong_images", "[", "idx", "]", ")", "\n", "caption_path", "=", "self", ".", "__change_fileending", "(", "img_path", ")", "\n", "#################################################################", "\n", "img_key", "=", "self", ".", "images", "[", "idx", "]", "\n", "wg_img_key", "=", "self", ".", "wrong_images", "[", "idx", "]", "\n", "bbox", "=", "self", ".", "filename_bbox", "[", "img_key", "]", "\n", "wg_bbox", "=", "self", ".", "filename_bbox", "[", "wg_img_key", "]", "\n", "img_res", ",", "resnet_imgs_list", ",", "img_padded_list", "=", "self", ".", "process_image", "(", "img_path", ",", "bbox", ")", "\n", "_", ",", "_", ",", "wg_img_padded_list", "=", "self", ".", "process_image", "(", "wrong_img_path", ",", "wg_bbox", ")", "\n", "\n", "\n", "caption", "=", "\"\"", "\n", "with", "open", "(", "caption_path", ")", "as", "f", ":", "\n", "            ", "captions", "=", "f", ".", "readlines", "(", ")", "\n", "", "if", "len", "(", "captions", ")", ">", "0", ":", "\n", "            ", "caption", "=", "captions", "[", "0", "]", ".", "strip", "(", ")", "# select always the first description as caption for now", "\n", "\n", "", "caption_encoded", ",", "caption_length", "=", "self", ".", "vocab_builder", ".", "encode_sentences", "(", "[", "caption", "]", ",", "self", ".", "max_sent_length", ")", "\n", "caption_encoded", "=", "caption_encoded", ".", "squeeze", "(", ")", "\n", "caption_length", "=", "caption_length", ".", "squeeze", "(", ")", "\n", "return", "resnet_imgs_list", ",", "img_padded_list", ",", "wg_img_padded_list", ",", "img_res", ",", "caption_encoded", ",", "caption_length", ",", "class_label", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.BirdsDataset2.__change_fileending": [[726, 735], ["path.replace().replace", "ValueError", "path.replace"], "methods", ["None"], ["", "def", "__change_fileending", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Changes fileending from image to text format\n        :return: path with .txt ending instead of image format ending\n        \"\"\"", "\n", "if", "self", ".", "image_format", "in", "path", ":", "\n", "            ", "return", "path", ".", "replace", "(", "self", ".", "image_format", ",", "\".txt\"", ")", ".", "replace", "(", "\"images\"", ",", "\"text_c10\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unexpected image format\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset1.__init__": [[738, 852], ["data.vocab.FlowersVocabBuilder", "datasets1.Image_Caption_Dataset.__init__", "os.path.join", "torchvision.transforms.Compose", "os.path.join", "os.path.join", "glob.glob", "dict", "dict", "list", "enumerate", "max", "datasets1.FlowersDataset1.build_vocab", "open", "f.readlines", "open", "f.readlines", "os.path.join", "glob.glob", "glob.glob", "len", "os.path.join", "random.randint", "datasets1.FlowersDataset1.wrong_images.append", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "re.sub.strip", "re.sub.strip", "os.path.join", "os.path.join", "len", "len", "datasets1.FlowersDataset1.images.append", "datasets1.FlowersDataset1.class_id.append", "random.randint", "open", "f.readlines", "len", "int", "len", "len", "re.sub", "captions.append", "datasets1.FlowersDataset1.vocab_builder.tokenizer.tokenize", "ntpath.basename", "len", "re.sub.strip", "ntpath.basename", "ntpath.basename", "ntpath.basename"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.Image_Caption_Dataset.build_vocab", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.WhitespaceTokenizer.tokenize"], ["    ", "def", "__init__", "(", "self", ",", "rootdir", ",", "transform", ",", "vocab_builder", "=", "FlowersVocabBuilder", "(", ")", ",", "split", "=", "'train'", ",", "img_format", "=", "\".jpg\"", ",", "num_dis", "=", "3", ",", "img_size", "=", "64", ")", ":", "\n", "        ", "super", "(", "FlowersDataset1", ",", "self", ")", ".", "__init__", "(", "vocab_builder", ")", "\n", "self", ".", "split_ids", "=", "{", "\n", "'train'", ":", "\"0\"", ",", "\n", "'val'", ":", "\"1\"", "\n", "}", "\n", "self", ".", "image_format", "=", "img_format", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "rootdir", "=", "rootdir", "\n", "self", ".", "image_rootdir", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "\"images\"", ")", "\n", "self", ".", "num_dis", "=", "num_dis", "\n", "self", ".", "size", "=", "img_size", "\n", "self", ".", "norm2", "=", "tt", ".", "Compose", "(", "[", "\n", "tt", ".", "ToTensor", "(", ")", ",", "\n", "tt", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "\n", "\n", "\n", "split_classes_train_file_name", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "'trainvalclasses.txt'", ")", "\n", "\n", "split_classes_test_file_name", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "'testclasses.txt'", ")", "\n", "\n", "\n", "self", ".", "split_train_classes", "=", "[", "]", "\n", "\n", "with", "open", "(", "split_classes_train_file_name", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "split_train_classes", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "lines", "]", "\n", "\n", "\n", "", "self", ".", "split_test_classes", "=", "[", "]", "\n", "\n", "with", "open", "(", "split_classes_test_file_name", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "split_test_classes", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "lines", "]", "\n", "\n", "\n", "\n", "\n", "\n", "", "self", ".", "allimages", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "image_rootdir", ",", "\"*\"", "+", "img_format", ")", ")", "\n", "\n", "train_caption_path", "=", "[", "]", "\n", "train_class_dict", "=", "dict", "(", ")", "\n", "for", "class1", "in", "self", ".", "split_train_classes", ":", "\n", "            ", "cpaths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "rootdir", ",", "'text_c10'", ",", "class1", ",", "'*.txt'", ")", ")", "\n", "for", "path", "in", "cpaths", ":", "\n", "                ", "train_class_dict", "[", "ntpath", ".", "basename", "(", "path", ")", "[", ":", "-", "4", "]", "]", "=", "class1", "\n", "", "train_caption_path", "+=", "cpaths", "\n", "", "test_caption_path", "=", "[", "]", "\n", "test_class_dict", "=", "dict", "(", ")", "\n", "for", "class1", "in", "self", ".", "split_test_classes", ":", "\n", "            ", "cpaths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "rootdir", ",", "'text_c10'", ",", "class1", ",", "'*.txt'", ")", ")", "\n", "for", "path", "in", "cpaths", ":", "\n", "                ", "test_class_dict", "[", "ntpath", ".", "basename", "(", "path", ")", "[", ":", "-", "4", "]", "]", "=", "class1", "\n", "", "test_caption_path", "+=", "cpaths", "\n", "\n", "\n", "# Sanity check", "\n", "", "assert", "len", "(", "self", ".", "allimages", ")", "==", "len", "(", "train_caption_path", ")", "+", "len", "(", "test_caption_path", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "caption_paths", "=", "train_caption_path", "\n", "class_dict", "=", "train_class_dict", "\n", "", "else", ":", "\n", "            ", "self", ".", "caption_paths", "=", "test_caption_path", "\n", "class_dict", "=", "test_class_dict", "\n", "", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "class_id", "=", "list", "(", ")", "\n", "for", "cpath", "in", "self", ".", "caption_paths", ":", "\n", "            ", "ipath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_rootdir", ",", "ntpath", ".", "basename", "(", "cpath", ")", "[", ":", "-", "4", "]", "+", "img_format", ")", "\n", "if", "ipath", "in", "self", ".", "allimages", ":", "\n", "                ", "self", ".", "images", ".", "append", "(", "ipath", ")", "\n", "k", "=", "class_dict", "[", "ntpath", ".", "basename", "(", "ipath", ")", "[", ":", "-", "4", "]", "]", "\n", "self", ".", "class_id", ".", "append", "(", "int", "(", "k", "[", "6", ":", "]", ")", ")", "\n", "\n", "\n", "\n", "###################################################for 80 :20 split##########", "\n", "\n", "#########################################################################", "\n", "\n", "#Creating wrong images set for new stackgan", "\n", "", "", "self", ".", "wrong_images", "=", "[", "]", "\n", "for", "idx", ",", "image", "in", "enumerate", "(", "self", ".", "images", ")", ":", "\n", "            ", "wrong_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "images", ")", "-", "1", ")", "\n", "while", "self", ".", "class_id", "[", "idx", "]", "==", "self", ".", "class_id", "[", "wrong_idx", "]", ":", "\n", "                ", "wrong_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "images", ")", "-", "1", ")", "\n", "", "self", ".", "wrong_images", ".", "append", "(", "self", ".", "images", "[", "wrong_idx", "]", ")", "\n", "\n", "# read captions to determine max sentence length", "\n", "", "captionpaths", "=", "train_caption_path", "+", "test_caption_path", "\n", "\n", "\n", "# Note:", "\n", "# see Note in ShapesDataset", "\n", "captions", "=", "[", "]", "\n", "for", "captionpath", "in", "captionpaths", ":", "\n", "            ", "with", "open", "(", "captionpath", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "if", "len", "(", "lines", ")", ">", "0", ":", "\n", "                    ", "line", "=", "re", ".", "sub", "(", "r'[^A-Za-z0-9 ,.?!-]+'", ",", "' '", ",", "lines", "[", "0", "]", ")", "\n", "captions", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "# select always the first description as caption for now", "\n", "", "", "", "max_sent_length", "=", "max", "(", "[", "len", "(", "self", ".", "vocab_builder", ".", "tokenizer", ".", "tokenize", "(", "sentence", ")", ")", "for", "sentence", "in", "captions", "]", ")", "\n", "self", ".", "max_sent_length", "=", "max_sent_length", "+", "2", "# + 2 for sos and eos", "\n", "\n", "# build vocabulary", "\n", "self", ".", "build_vocab", "(", "captionpaths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset1.__len__": [[853, 855], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset1.crop_image": [[856, 872], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "int"], "methods", ["None"], ["", "def", "crop_image", "(", "self", ",", "img", ")", ":", "\n", "#######################cropping important part################", "\n", "        ", "width", ",", "height", "=", "img", ".", "size", "\n", "\n", "###################################################################", "\n", "#imsize = cfg.TREE.BASE_SIZE * (2 ** (cfg.TREE.BRANCH_NUM-1))", "\n", "\n", "imsize", "=", "self", ".", "size", "*", "(", "2", "**", "(", "self", ".", "num_dis", "-", "1", ")", ")", "\n", "image_transform", "=", "tt", ".", "Compose", "(", "[", "\n", "tt", ".", "Resize", "(", "int", "(", "imsize", "*", "76", "/", "76", ")", ")", ",", "\n", "#tt.Resize(int(imsize * 76 / 64)),", "\n", "tt", ".", "RandomCrop", "(", "imsize", ")", ",", "\n", "tt", ".", "RandomHorizontalFlip", "(", ")", "]", ")", "\n", "img", "=", "image_transform", "(", "img", ")", "\n", "############################################################", "\n", "return", "img", "\n", "######################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset1.process_image": [[874, 891], ["open", "PIL.Image.open().convert", "datasets1.FlowersDataset1.crop_image", "range", "img_res_li.append", "datasets1.FlowersDataset1.transform", "img_padded_li.append", "resnet_imgs.append", "PIL.Image.open", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "datasets1.FlowersDataset1.norm2"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset2.crop_image"], ["", "def", "process_image", "(", "self", ",", "path", ")", ":", "\n", "        ", "img_padded_li", "=", "[", "]", "\n", "img_res_li", "=", "[", "]", "\n", "resnet_imgs", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "#output is PIL", "\n", "img", "=", "self", ".", "crop_image", "(", "img", ")", "\n", "for", "i", "in", "range", "(", "cfg", ".", "TREE", ".", "BRANCH_NUM", ")", ":", "\n", "                ", "size", "=", "self", ".", "size", "*", "(", "2", "**", "i", ")", "\n", "img_res", "=", "tt", ".", "Resize", "(", "(", "size", ",", "size", ")", ")", "(", "img", ")", "#Resize into 64*64", "\n", "img_res", "=", "tt", ".", "ToTensor", "(", ")", "(", "img_res", ")", "\n", "img_res_li", ".", "append", "(", "img_res", ")", "\n", "img_padded", "=", "self", ".", "transform", "(", "img_res", ")", "\n", "img_padded_li", ".", "append", "(", "img_padded", ")", "\n", "resnet_i", "=", "tt", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", "(", "img", ")", "#for resnet", "\n", "resnet_imgs", ".", "append", "(", "self", ".", "norm2", "(", "resnet_i", ")", ")", "\n", "", "", "return", "img_res_li", "[", "0", "]", ",", "resnet_imgs", ",", "img_padded_li", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset1.__getitem__": [[892, 916], ["datasets1.FlowersDataset1.process_image", "datasets1.FlowersDataset1.process_image", "datasets1.FlowersDataset1.vocab_builder.encode_sentences", "caption_encoded.squeeze.squeeze.squeeze", "caption_length.squeeze.squeeze.squeeze", "open", "f.readlines", "len", "captions[].strip"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset2.process_image", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset2.process_image", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.encode_sentences"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_padded_list", "=", "[", "]", "#list containing image tensors of differnt sizes(64,128,256)", "\n", "wg_img_padded_list", "=", "[", "]", "#list containing wrong image tensor of differnt sizes(64,128,256)", "\n", "resnet_imgs_list", "=", "[", "]", "\n", "img_path", "=", "self", ".", "images", "[", "idx", "]", "\n", "wrong_img_path", "=", "self", ".", "wrong_images", "[", "idx", "]", "\n", "caption_path", "=", "self", ".", "caption_paths", "[", "idx", "]", "\n", "#################################################################", "\n", "\n", "\n", "img_res", ",", "resnet_imgs_list", ",", "img_padded_list", "=", "self", ".", "process_image", "(", "img_path", ")", "\n", "_", ",", "_", ",", "wg_img_padded_list", "=", "self", ".", "process_image", "(", "wrong_img_path", ")", "\n", "\n", "\n", "caption", "=", "\"\"", "\n", "with", "open", "(", "caption_path", ")", "as", "f", ":", "\n", "            ", "captions", "=", "f", ".", "readlines", "(", ")", "\n", "", "if", "len", "(", "captions", ")", ">", "0", ":", "\n", "            ", "caption", "=", "captions", "[", "0", "]", ".", "strip", "(", ")", "# select always the first description as caption for now", "\n", "\n", "", "caption_encoded", ",", "caption_length", "=", "self", ".", "vocab_builder", ".", "encode_sentences", "(", "[", "caption", "]", ",", "self", ".", "max_sent_length", ")", "\n", "caption_encoded", "=", "caption_encoded", ".", "squeeze", "(", ")", "\n", "caption_length", "=", "caption_length", ".", "squeeze", "(", ")", "\n", "return", "resnet_imgs_list", ",", "img_padded_list", ",", "wg_img_padded_list", ",", "img_res", ",", "caption_encoded", ",", "caption_length", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowerstextDataset.__init__": [[920, 1018], ["data.vocab.FlowersVocabBuilder", "datasets1.Image_Caption_Dataset.__init__", "os.path.join", "os.path.join", "os.path.join", "glob.glob", "max", "print", "datasets1.FlowerstextDataset.build_vocab", "open", "open.readlines", "open", "open.readlines", "os.path.join", "glob.glob", "glob.glob", "len", "open", "open.close", "len", "re.sub.strip", "re.sub.strip", "os.path.join", "os.path.join", "len", "len", "re.sub", "datasets1.FlowerstextDataset.captions.append", "open", "open.readlines", "len", "re.sub.strip().lower", "len", "datasets1.FlowerstextDataset.vocab_builder.tokenizer.tokenize", "re.sub", "allcaptions.append", "re.sub.strip", "re.sub.strip"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.Image_Caption_Dataset.build_vocab", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.WhitespaceTokenizer.tokenize"], ["    ", "def", "__init__", "(", "self", ",", "rootdir", ",", "transform", ",", "vocab_builder", "=", "FlowersVocabBuilder", "(", ")", ",", "split", "=", "'train'", ",", "img_format", "=", "\".jpg\"", ")", ":", "\n", "        ", "super", "(", "FlowerstextDataset", ",", "self", ")", ".", "__init__", "(", "vocab_builder", ")", "\n", "self", ".", "split_ids", "=", "{", "\n", "'train'", ":", "\"0\"", ",", "\n", "'val'", ":", "\"1\"", "\n", "}", "\n", "self", ".", "image_format", "=", "img_format", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "rootdir", "=", "rootdir", "\n", "self", ".", "image_rootdir", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "\"images\"", ")", "\n", "\n", "split_classes_train_file_name", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "'trainvalclasses.txt'", ")", "\n", "\n", "split_classes_test_file_name", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "'testclasses.txt'", ")", "\n", "\n", "\n", "self", ".", "split_train_classes", "=", "[", "]", "\n", "\n", "with", "open", "(", "split_classes_train_file_name", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "split_train_classes", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "lines", "]", "\n", "\n", "\n", "", "self", ".", "split_test_classes", "=", "[", "]", "\n", "\n", "with", "open", "(", "split_classes_test_file_name", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "split_test_classes", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "lines", "]", "\n", "\n", "\n", "\n", "\n", "\n", "", "self", ".", "allimages", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "image_rootdir", ",", "\"*\"", "+", "img_format", ")", ")", "\n", "\n", "train_caption_path", "=", "[", "]", "\n", "for", "class1", "in", "self", ".", "split_train_classes", ":", "\n", "            ", "train_caption_path", "+=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "rootdir", ",", "'text_c10'", ",", "class1", ",", "'*.txt'", ")", ")", "\n", "", "test_caption_path", "=", "[", "]", "\n", "for", "class1", "in", "self", ".", "split_test_classes", ":", "\n", "            ", "test_caption_path", "+=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "rootdir", ",", "'text_c10'", ",", "class1", ",", "'*.txt'", ")", ")", "\n", "\n", "\n", "# Sanity check", "\n", "", "assert", "len", "(", "self", ".", "allimages", ")", "==", "len", "(", "train_caption_path", ")", "+", "len", "(", "test_caption_path", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "caption_paths", "=", "train_caption_path", "\n", "", "else", ":", "\n", "            ", "self", ".", "caption_paths", "=", "test_caption_path", "\n", "\n", "\n", "\n", "\n", "#####################################################################", "\n", "###################################################################", "\n", "\n", "# read captions to determine max sentence length", "\n", "\n", "", "captionpaths", "=", "train_caption_path", "+", "test_caption_path", "\n", "\n", "\n", "# Note:", "\n", "# see Note in ShapesDataset", "\n", "self", ".", "captions", "=", "[", "]", "\n", "for", "caption_path", "in", "self", ".", "caption_paths", ":", "\n", "            ", "f", "=", "open", "(", "caption_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "\n", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "re", ".", "sub", "(", "r'[^A-Za-z0-9 ,.?!-]+'", ",", "' '", ",", "line", ")", "\n", "self", ".", "captions", ".", "append", "(", "line", ".", "strip", "(", ")", ".", "lower", "(", ")", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "", "allcaptions", "=", "[", "]", "\n", "for", "captionpath", "in", "captionpaths", ":", "\n", "            ", "with", "open", "(", "captionpath", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "if", "len", "(", "lines", ")", ">", "0", ":", "\n", "                    ", "for", "line", "in", "lines", ":", "\n", "                        ", "line", "=", "re", ".", "sub", "(", "r'[^A-Za-z0-9 ,.?!-]+'", ",", "' '", ",", "line", ")", "\n", "allcaptions", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "# select always the first description as caption for now", "\n", "\n", "\n", "", "", "", "", "max_sent_length", "=", "max", "(", "[", "len", "(", "self", ".", "vocab_builder", ".", "tokenizer", ".", "tokenize", "(", "sentence", ")", ")", "for", "sentence", "in", "allcaptions", "]", ")", "\n", "\n", "self", ".", "max_sent_length", "=", "max_sent_length", "+", "2", "# + 2 for sos and eos", "\n", "\n", "\n", "#print('the maximum sentence length',self.max_sent_length)", "\n", "#print('number of images:', len(self.images), 'number of captions:',len(self.captions))", "\n", "# build vocabulary", "\n", "print", "(", "'number of captions in birds dataset'", ",", "len", "(", "self", ".", "captions", ")", ")", "\n", "self", ".", "build_vocab", "(", "captionpaths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowerstextDataset.__len__": [[1019, 1021], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "captions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowerstextDataset.__getitem__": [[1023, 1031], ["datasets1.FlowerstextDataset.vocab_builder.encode_sentences", "caption_encoded.squeeze.squeeze.squeeze", "caption_length.squeeze.squeeze.squeeze"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.encode_sentences"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "caption", "=", "self", ".", "captions", "[", "idx", "]", "\n", "_", "=", "''", "\n", "\n", "caption_encoded", ",", "caption_length", "=", "self", ".", "vocab_builder", ".", "encode_sentences", "(", "[", "caption", "]", ",", "self", ".", "max_sent_length", ")", "\n", "caption_encoded", "=", "caption_encoded", ".", "squeeze", "(", ")", "\n", "caption_length", "=", "caption_length", ".", "squeeze", "(", ")", "\n", "return", "_", ",", "_", ",", "caption_encoded", ",", "caption_length", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset2.__init__": [[1034, 1148], ["data.vocab.FlowersVocabBuilder", "datasets1.Image_Caption_Dataset.__init__", "os.path.join", "torchvision.transforms.Compose", "os.path.join", "os.path.join", "glob.glob", "dict", "dict", "list", "enumerate", "max", "datasets1.FlowersDataset2.build_vocab", "open", "f.readlines", "open", "f.readlines", "os.path.join", "glob.glob", "glob.glob", "len", "os.path.join", "random.randint", "datasets1.FlowersDataset2.wrong_images.append", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "re.sub.strip", "re.sub.strip", "os.path.join", "os.path.join", "len", "len", "datasets1.FlowersDataset2.images.append", "datasets1.FlowersDataset2.class_id.append", "random.randint", "open", "f.readlines", "len", "int", "len", "len", "re.sub", "captions.append", "datasets1.FlowersDataset2.vocab_builder.tokenizer.tokenize", "ntpath.basename", "len", "re.sub.strip", "ntpath.basename", "ntpath.basename", "ntpath.basename"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.Image_Caption_Dataset.build_vocab", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.WhitespaceTokenizer.tokenize"], ["    ", "def", "__init__", "(", "self", ",", "rootdir", ",", "transform", ",", "vocab_builder", "=", "FlowersVocabBuilder", "(", ")", ",", "split", "=", "'train'", ",", "img_format", "=", "\".jpg\"", ",", "num_dis", "=", "3", ",", "img_size", "=", "64", ")", ":", "\n", "        ", "super", "(", "FlowersDataset2", ",", "self", ")", ".", "__init__", "(", "vocab_builder", ")", "\n", "self", ".", "split_ids", "=", "{", "\n", "'train'", ":", "\"0\"", ",", "\n", "'val'", ":", "\"1\"", "\n", "}", "\n", "self", ".", "image_format", "=", "img_format", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "rootdir", "=", "rootdir", "\n", "self", ".", "image_rootdir", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "\"images\"", ")", "\n", "self", ".", "num_dis", "=", "num_dis", "\n", "self", ".", "size", "=", "img_size", "\n", "self", ".", "norm2", "=", "tt", ".", "Compose", "(", "[", "\n", "tt", ".", "ToTensor", "(", ")", ",", "\n", "tt", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "\n", "\n", "\n", "split_classes_train_file_name", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "'trainvalclasses.txt'", ")", "\n", "\n", "split_classes_test_file_name", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "'testclasses.txt'", ")", "\n", "\n", "\n", "self", ".", "split_train_classes", "=", "[", "]", "\n", "\n", "with", "open", "(", "split_classes_train_file_name", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "split_train_classes", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "lines", "]", "\n", "\n", "\n", "", "self", ".", "split_test_classes", "=", "[", "]", "\n", "\n", "with", "open", "(", "split_classes_test_file_name", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "split_test_classes", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "lines", "]", "\n", "\n", "\n", "\n", "\n", "\n", "", "self", ".", "allimages", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "image_rootdir", ",", "\"*\"", "+", "img_format", ")", ")", "\n", "\n", "train_caption_path", "=", "[", "]", "\n", "train_class_dict", "=", "dict", "(", ")", "\n", "for", "class1", "in", "self", ".", "split_train_classes", ":", "\n", "            ", "cpaths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "rootdir", ",", "'text_c10'", ",", "class1", ",", "'*.txt'", ")", ")", "\n", "for", "path", "in", "cpaths", ":", "\n", "                ", "train_class_dict", "[", "ntpath", ".", "basename", "(", "path", ")", "[", ":", "-", "4", "]", "]", "=", "class1", "\n", "", "train_caption_path", "+=", "cpaths", "\n", "", "test_caption_path", "=", "[", "]", "\n", "test_class_dict", "=", "dict", "(", ")", "\n", "for", "class1", "in", "self", ".", "split_test_classes", ":", "\n", "            ", "cpaths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "rootdir", ",", "'text_c10'", ",", "class1", ",", "'*.txt'", ")", ")", "\n", "for", "path", "in", "cpaths", ":", "\n", "                ", "test_class_dict", "[", "ntpath", ".", "basename", "(", "path", ")", "[", ":", "-", "4", "]", "]", "=", "class1", "\n", "", "test_caption_path", "+=", "cpaths", "\n", "\n", "\n", "# Sanity check", "\n", "", "assert", "len", "(", "self", ".", "allimages", ")", "==", "len", "(", "train_caption_path", ")", "+", "len", "(", "test_caption_path", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "caption_paths", "=", "train_caption_path", "\n", "class_dict", "=", "train_class_dict", "\n", "", "else", ":", "\n", "            ", "self", ".", "caption_paths", "=", "test_caption_path", "\n", "class_dict", "=", "test_class_dict", "\n", "", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "class_id", "=", "list", "(", ")", "\n", "for", "cpath", "in", "self", ".", "caption_paths", ":", "\n", "            ", "ipath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_rootdir", ",", "ntpath", ".", "basename", "(", "cpath", ")", "[", ":", "-", "4", "]", "+", "img_format", ")", "\n", "if", "ipath", "in", "self", ".", "allimages", ":", "\n", "                ", "self", ".", "images", ".", "append", "(", "ipath", ")", "\n", "k", "=", "class_dict", "[", "ntpath", ".", "basename", "(", "ipath", ")", "[", ":", "-", "4", "]", "]", "\n", "self", ".", "class_id", ".", "append", "(", "int", "(", "k", "[", "6", ":", "]", ")", ")", "\n", "\n", "\n", "\n", "###################################################for 80 :20 split##########", "\n", "\n", "#########################################################################", "\n", "\n", "#Creating wrong images set for new stackgan", "\n", "", "", "self", ".", "wrong_images", "=", "[", "]", "\n", "for", "idx", ",", "image", "in", "enumerate", "(", "self", ".", "images", ")", ":", "\n", "            ", "wrong_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "images", ")", "-", "1", ")", "\n", "while", "self", ".", "class_id", "[", "idx", "]", "==", "self", ".", "class_id", "[", "wrong_idx", "]", ":", "\n", "                ", "wrong_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "images", ")", "-", "1", ")", "\n", "", "self", ".", "wrong_images", ".", "append", "(", "self", ".", "images", "[", "wrong_idx", "]", ")", "\n", "\n", "# read captions to determine max sentence length", "\n", "", "captionpaths", "=", "train_caption_path", "+", "test_caption_path", "\n", "\n", "\n", "# Note:", "\n", "# see Note in ShapesDataset", "\n", "captions", "=", "[", "]", "\n", "for", "captionpath", "in", "captionpaths", ":", "\n", "            ", "with", "open", "(", "captionpath", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "if", "len", "(", "lines", ")", ">", "0", ":", "\n", "                    ", "line", "=", "re", ".", "sub", "(", "r'[^A-Za-z0-9 ,.?!-]+'", ",", "' '", ",", "lines", "[", "0", "]", ")", "\n", "captions", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "# select always the first description as caption for now", "\n", "", "", "", "max_sent_length", "=", "max", "(", "[", "len", "(", "self", ".", "vocab_builder", ".", "tokenizer", ".", "tokenize", "(", "sentence", ")", ")", "for", "sentence", "in", "captions", "]", ")", "\n", "self", ".", "max_sent_length", "=", "max_sent_length", "+", "2", "# + 2 for sos and eos", "\n", "\n", "# build vocabulary", "\n", "self", ".", "build_vocab", "(", "captionpaths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset2.__len__": [[1149, 1151], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset2.crop_image": [[1152, 1168], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "int"], "methods", ["None"], ["", "def", "crop_image", "(", "self", ",", "img", ")", ":", "\n", "#######################cropping important part################", "\n", "        ", "width", ",", "height", "=", "img", ".", "size", "\n", "\n", "###################################################################", "\n", "#imsize = cfg.TREE.BASE_SIZE * (2 ** (cfg.TREE.BRANCH_NUM-1))", "\n", "\n", "imsize", "=", "self", ".", "size", "*", "(", "2", "**", "(", "self", ".", "num_dis", "-", "1", ")", ")", "\n", "image_transform", "=", "tt", ".", "Compose", "(", "[", "\n", "tt", ".", "Resize", "(", "int", "(", "imsize", "*", "76", "/", "76", ")", ")", ",", "\n", "#tt.Resize(int(imsize * 76 / 64)),", "\n", "tt", ".", "RandomCrop", "(", "imsize", ")", ",", "\n", "tt", ".", "RandomHorizontalFlip", "(", ")", "]", ")", "\n", "img", "=", "image_transform", "(", "img", ")", "\n", "############################################################", "\n", "return", "img", "\n", "######################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset2.process_image": [[1170, 1187], ["open", "PIL.Image.open().convert", "datasets1.FlowersDataset2.crop_image", "range", "img_res_li.append", "datasets1.FlowersDataset2.transform", "img_padded_li.append", "resnet_imgs.append", "PIL.Image.open", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "datasets1.FlowersDataset2.norm2"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset2.crop_image"], ["", "def", "process_image", "(", "self", ",", "path", ")", ":", "\n", "        ", "img_padded_li", "=", "[", "]", "\n", "img_res_li", "=", "[", "]", "\n", "resnet_imgs", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "#output is PIL", "\n", "img", "=", "self", ".", "crop_image", "(", "img", ")", "\n", "for", "i", "in", "range", "(", "cfg", ".", "TREE", ".", "BRANCH_NUM", ")", ":", "\n", "                ", "size", "=", "self", ".", "size", "*", "(", "2", "**", "i", ")", "\n", "img_res", "=", "tt", ".", "Resize", "(", "(", "size", ",", "size", ")", ")", "(", "img", ")", "#Resize into 64*64", "\n", "img_res", "=", "tt", ".", "ToTensor", "(", ")", "(", "img_res", ")", "\n", "img_res_li", ".", "append", "(", "img_res", ")", "\n", "img_padded", "=", "self", ".", "transform", "(", "img_res", ")", "\n", "img_padded_li", ".", "append", "(", "img_padded", ")", "\n", "resnet_i", "=", "tt", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", "(", "img", ")", "#for resnet", "\n", "resnet_imgs", ".", "append", "(", "self", ".", "norm2", "(", "resnet_i", ")", ")", "\n", "", "", "return", "img_res_li", "[", "0", "]", ",", "resnet_imgs", ",", "img_padded_li", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset2.__getitem__": [[1188, 1213], ["datasets1.FlowersDataset2.process_image", "datasets1.FlowersDataset2.process_image", "datasets1.FlowersDataset2.vocab_builder.encode_sentences", "caption_encoded.squeeze.squeeze.squeeze", "caption_length.squeeze.squeeze.squeeze", "open", "f.readlines", "len", "captions[].strip"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset2.process_image", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets1.FlowersDataset2.process_image", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.encode_sentences"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_padded_list", "=", "[", "]", "#list containing image tensors of differnt sizes(64,128,256)", "\n", "wg_img_padded_list", "=", "[", "]", "#list containing wrong image tensor of differnt sizes(64,128,256)", "\n", "resnet_imgs_list", "=", "[", "]", "\n", "img_path", "=", "self", ".", "images", "[", "idx", "]", "\n", "wrong_img_path", "=", "self", ".", "wrong_images", "[", "idx", "]", "\n", "caption_path", "=", "self", ".", "caption_paths", "[", "idx", "]", "\n", "class_label", "=", "self", ".", "class_id", "[", "idx", "]", "\n", "#################################################################", "\n", "\n", "\n", "img_res", ",", "resnet_imgs_list", ",", "img_padded_list", "=", "self", ".", "process_image", "(", "img_path", ")", "\n", "_", ",", "_", ",", "wg_img_padded_list", "=", "self", ".", "process_image", "(", "wrong_img_path", ")", "\n", "\n", "\n", "caption", "=", "\"\"", "\n", "with", "open", "(", "caption_path", ")", "as", "f", ":", "\n", "            ", "captions", "=", "f", ".", "readlines", "(", ")", "\n", "", "if", "len", "(", "captions", ")", ">", "0", ":", "\n", "            ", "caption", "=", "captions", "[", "0", "]", ".", "strip", "(", ")", "# select always the first description as caption for now", "\n", "\n", "", "caption_encoded", ",", "caption_length", "=", "self", ".", "vocab_builder", ".", "encode_sentences", "(", "[", "caption", "]", ",", "self", ".", "max_sent_length", ")", "\n", "caption_encoded", "=", "caption_encoded", ".", "squeeze", "(", ")", "\n", "caption_length", "=", "caption_length", ".", "squeeze", "(", ")", "\n", "return", "resnet_imgs_list", ",", "img_padded_list", ",", "wg_img_padded_list", ",", "img_res", ",", "caption_encoded", ",", "caption_length", ",", "class_label", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.resultwriter.ResultWriter.__init__": [[12, 20], ["os.path.join", "os.path.join", "os.path.exists", "os.mkdir"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "outputdir", ")", ":", "\n", "        ", "self", ".", "outputdir", "=", "outputdir", "\n", "self", ".", "imageoutputs", "=", "os", ".", "path", ".", "join", "(", "outputdir", ",", "\"images\"", ")", "\n", "self", ".", "textoutputs", "=", "os", ".", "path", ".", "join", "(", "outputdir", ",", "\"captions.csv\"", ")", "\n", "self", ".", "examplecount", "=", "0", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "outputdir", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "self", ".", "outputdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.resultwriter.ResultWriter.write_image_with_text": [[21, 40], ["matplotlib.figure", "matplotlib.title", "matplotlib.imshow", "matplotlib.axis", "matplotlib.savefig", "matplotlib.close", "os.path.exists", "os.mkdir", "str", "os.path.join", "textwrap.wrap"], "methods", ["None"], ["", "", "def", "write_image_with_text", "(", "self", ",", "image", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        Write and image together with a text. Can be used to store the results of an image to text run\n        or vice versa\n        :param image: the image to save\n        :param text: the text to save\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "imageoutputs", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "imageoutputs", ")", "\n", "\n", "", "img_name", "=", "\"img\"", "+", "str", "(", "self", ".", "examplecount", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "'\\n'", ".", "join", "(", "wrap", "(", "text", ",", "60", ")", ")", ")", "#wrapping the text with length length 60 ", "\n", "plt", ".", "imshow", "(", "image", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "imageoutputs", ",", "img_name", ")", ",", "bbox_inches", "=", "'tight'", ")", "#otherwise it will get truncated", "\n", "plt", ".", "close", "(", ")", "\n", "self", ".", "examplecount", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.resultwriter.ResultWriter.write_images": [[41, 61], ["matplotlib.subplots", "ax1.imshow", "ax1.set_title", "ax1.axis", "ax2.imshow", "ax2.set_title", "ax2.axis", "matplotlib.savefig", "matplotlib.close", "os.path.exists", "os.mkdir", "str", "os.path.join"], "methods", ["None"], ["", "def", "write_images", "(", "self", ",", "gen_img", ",", "label_img", ")", ":", "\n", "        ", "\"\"\"\n        Write images together in one figure. Can be used to store the results of an image to image run.\n        :param gen_img: the generated images\n        :param label_img: the input/ label image\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "imageoutputs", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "imageoutputs", ")", "\n", "\n", "", "img_name", "=", "\"img\"", "+", "str", "(", "self", ".", "examplecount", ")", "\n", "f", ",", "(", "ax1", ",", "ax2", ")", "=", "plt", ".", "subplots", "(", "1", ",", "2", ")", "\n", "ax1", ".", "imshow", "(", "gen_img", ")", "\n", "ax1", ".", "set_title", "(", "'generated'", ")", "\n", "ax1", ".", "axis", "(", "'off'", ")", "\n", "ax2", ".", "imshow", "(", "label_img", ")", "\n", "ax2", ".", "set_title", "(", "'original'", ")", "\n", "ax2", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "imageoutputs", ",", "img_name", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "self", ".", "examplecount", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.resultwriter.ResultWriter.write_images1": [[62, 75], ["img.save", "os.path.exists", "os.mkdir", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "os.path.join", "str"], "methods", ["None"], ["", "def", "write_images1", "(", "self", ",", "gen_img", ")", ":", "\n", "        ", "\"\"\"\n        Write images together in one figure. Can be used to store the results of an image to image run.\n        :param gen_img: the generated images\n        :param label_img: the input/ label image\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "imageoutputs", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "imageoutputs", ")", "\n", "", "img_name", "=", "\"img\"", "+", "str", "(", "self", ".", "examplecount", ")", "+", "'.jpg'", "\n", "img", "=", "tt", ".", "ToPILImage", "(", ")", "(", "gen_img", ")", "\n", "img", "=", "tt", ".", "Resize", "(", "(", "256", ",", "256", ")", ")", "(", "img", ")", "#Resize it to 256 *256", "\n", "img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "imageoutputs", ",", "img_name", ")", ",", "format", "=", "'JPEG'", ")", "\n", "self", ".", "examplecount", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.resultwriter.ResultWriter.write_images3": [[76, 102], ["matplotlib.subplots", "ax1.imshow", "ax1.set_title", "ax1.axis", "ax2.imshow", "ax2.set_title", "ax2.axis", "ax3.imshow", "ax3.set_title", "ax3.axis", "ax4.imshow", "ax4.set_title", "ax4.axis", "matplotlib.savefig", "matplotlib.close", "os.path.exists", "os.mkdir", "str", "os.path.join"], "methods", ["None"], ["", "def", "write_images3", "(", "self", ",", "gen_img1", ",", "gen_img2", ",", "gen_img3", ",", "label_img", ")", ":", "\n", "        ", "\"\"\"\n        Write images together in one figure. Can be used to store the results of an image to image run.\n        :param gen_img: the generated images\n        :param label_img: the input/ label image\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "imageoutputs", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "imageoutputs", ")", "\n", "\n", "", "img_name", "=", "\"img\"", "+", "str", "(", "self", ".", "examplecount", ")", "\n", "f", ",", "(", "ax1", ",", "ax2", ",", "ax3", ",", "ax4", ")", "=", "plt", ".", "subplots", "(", "1", ",", "4", ")", "\n", "ax1", ".", "imshow", "(", "gen_img1", ")", "\n", "ax1", ".", "set_title", "(", "'generated1'", ")", "\n", "ax1", ".", "axis", "(", "'off'", ")", "\n", "ax2", ".", "imshow", "(", "gen_img2", ")", "\n", "ax2", ".", "set_title", "(", "'generated2'", ")", "\n", "ax2", ".", "axis", "(", "'off'", ")", "\n", "ax3", ".", "imshow", "(", "gen_img3", ")", "\n", "ax3", ".", "set_title", "(", "'generated3'", ")", "\n", "ax3", ".", "axis", "(", "'off'", ")", "\n", "ax4", ".", "imshow", "(", "label_img", ")", "\n", "ax4", ".", "set_title", "(", "'original'", ")", "\n", "ax4", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "imageoutputs", ",", "img_name", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "self", ".", "examplecount", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.resultwriter.ResultWriter.write_texts": [[103, 122], ["os.path.join", "os.path.exists", "os.mkdir", "open", "csv.writer", "models.utils1.compute_bleu", "csv.writer.writerow", "csv.writer.writerow", "os.stat"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.compute_bleu"], ["", "def", "write_texts", "(", "self", ",", "gen_text", ",", "label_text", ")", ":", "\n", "        ", "\"\"\"\n        Write two texts together in a csv-file. Can be used to store the results of a text to text run.\n        :param gen_text: the generated text\n        :param label_text: the input/ label text\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "imageoutputs", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "imageoutputs", ")", "\n", "\n", "", "textout", "=", "os", ".", "path", ".", "join", "(", "self", ".", "outputdir", ",", "\"textpairs.txt\"", ")", "\n", "idx", "=", "self", ".", "examplecount", "\n", "with", "open", "(", "textout", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "csvwriter", "=", "csv", ".", "writer", "(", "f", ")", "\n", "if", "os", ".", "stat", "(", "textout", ")", ".", "st_size", "==", "0", ":", "\n", "                ", "csvwriter", ".", "writerow", "(", "TEXT_TEXT_CSV_HEADER", ")", "\n", "", "bleu_score", "=", "compute_bleu", "(", "gen_text", ",", "label_text", ")", "\n", "csvwriter", ".", "writerow", "(", "[", "idx", ",", "gen_text", ",", "label_text", ",", "bleu_score", "]", ")", "\n", "\n", "", "self", ".", "examplecount", "+=", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.Image_Caption_Dataset.__init__": [[13, 15], ["None"], "methods", ["None"], ["import", "pickle", "\n", "import", "random", "\n", "import", "numpy", "as", "np", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.Image_Caption_Dataset.__len__": [[16, 18], ["NotImplementedError"], "methods", ["None"], ["import", "pandas", "as", "pd", "\n", "from", "miscc", ".", "config", "import", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.Image_Caption_Dataset.__getitem__": [[19, 21], ["NotImplementedError"], "methods", ["None"], ["import", "torch", ".", "utils", ".", "data", "as", "data", "\n", "from", "PIL", "import", "Image", "\n", "import", "os", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.Image_Caption_Dataset.build_vocab": [[22, 24], ["datasets.Image_Caption_Dataset.vocab_builder.load_texts"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.load_texts"], ["import", "os", ".", "path", "\n", "import", "six", "\n", "import", "string", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.Image_Caption_Dataset.get_vocab_builder": [[25, 27], ["None"], "methods", ["None"], ["import", "sys", "\n", "import", "torch", "\n", "import", "ntpath", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.ShapesDataset.__init__": [[30, 60], ["data.vocab.ShapesVocabBuilder", "datasets.Image_Caption_Dataset.__init__", "os.path.join", "os.path.join", "os.path.join", "datasets.ShapesDataset.image_caption_csv.replace", "datasets.ShapesDataset.build_vocab", "max", "open", "csv.reader", "len", "datasets.ShapesDataset.vocab_builder.tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.Image_Caption_Dataset.build_vocab", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.WhitespaceTokenizer.tokenize"], ["    ", "import", "cPickle", "as", "pickle", "\n", "", "else", ":", "\n", "    ", "import", "pickle", "\n", "\n", "", "IMG_EXTENSIONS", "=", "[", "'.jpg'", ",", "'.JPG'", ",", "'.jpeg'", ",", "'.JPEG'", ",", "\n", "'.png'", ",", "'.PNG'", ",", "'.ppm'", ",", "'.PPM'", ",", "'.bmp'", ",", "'.BMP'", "]", "\n", "\n", "\n", "def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n", "\n", "", "def", "get_imgs", "(", "img_path", ",", "imsize", ",", "bbox", "=", "None", ",", "\n", "transform", "=", "None", ",", "normalize", "=", "None", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "width", ",", "height", "=", "img", ".", "size", "\n", "if", "bbox", "is", "not", "None", ":", "\n", "        ", "r", "=", "int", "(", "np", ".", "maximum", "(", "bbox", "[", "2", "]", ",", "bbox", "[", "3", "]", ")", "*", "0.75", ")", "\n", "center_x", "=", "int", "(", "(", "2", "*", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ")", "/", "2", ")", "\n", "center_y", "=", "int", "(", "(", "2", "*", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "/", "2", ")", "\n", "y1", "=", "np", ".", "maximum", "(", "0", ",", "center_y", "-", "r", ")", "\n", "y2", "=", "np", ".", "minimum", "(", "height", ",", "center_y", "+", "r", ")", "\n", "x1", "=", "np", ".", "maximum", "(", "0", ",", "center_x", "-", "r", ")", "\n", "x2", "=", "np", ".", "minimum", "(", "width", ",", "center_x", "+", "r", ")", "\n", "img", "=", "img", ".", "crop", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ")", "\n", "\n", "", "if", "transform", "is", "not", "None", ":", "\n", "        ", "img", "=", "transform", "(", "img", ")", "\n", "\n", "", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "TREE", ".", "BRANCH_NUM", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.ShapesDataset.__len__": [[61, 63], ["len", "os.listdir"], "methods", ["None"], ["        ", "if", "i", "<", "(", "cfg", ".", "TREE", ".", "BRANCH_NUM", "-", "1", ")", ":", "\n", "            ", "re_img", "=", "transforms", ".", "Resize", "(", "imsize", "[", "i", "]", ")", "(", "img", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.ShapesDataset.__getitem__": [[64, 78], ["os.path.join", "skimage.io.imread", "datasets.ShapesDataset.vocab_builder.encode_sentences", "caption_encoded.squeeze.squeeze.squeeze", "caption_length.squeeze.squeeze.squeeze", "torchvision.transforms.ToTensor", "datasets.ShapesDataset.transform"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.encode_sentences"], ["            ", "re_img", "=", "img", "\n", "", "ret", ".", "append", "(", "normalize", "(", "re_img", ")", ")", "\n", "\n", "", "return", "ret", "\n", "\n", "\n", "", "class", "ImageFolder", "(", "data", ".", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "root", ",", "split_dir", "=", "'train'", ",", "custom_classes", "=", "None", ",", "\n", "base_size", "=", "64", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "split_dir", ")", "\n", "classes", ",", "class_to_idx", "=", "self", ".", "find_classes", "(", "root", ",", "custom_classes", ")", "\n", "imgs", "=", "self", ".", "make_dataset", "(", "classes", ",", "class_to_idx", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in subfolders of: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.BirdsDataset.__init__": [[81, 132], ["data.vocab.BirdsVocabBuilder", "datasets.Image_Caption_Dataset.__init__", "os.path.join", "enumerate", "os.path.join", "os.listdir", "max", "datasets.BirdsDataset.build_vocab", "open", "f.readlines", "open", "f.readlines", "len", "len", "os.listdir", "os.path.join", "os.path.join", "datasets.BirdsDataset.images.append", "os.path.join", "captionpaths.append", "open", "f.readlines", "len", "line.split", "line.split", "os.path.join", "len", "captions.append", "datasets.BirdsDataset.vocab_builder.tokenizer.tokenize", "lines[].strip"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.Image_Caption_Dataset.build_vocab", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.WhitespaceTokenizer.tokenize"], ["self", ".", "imgs", "=", "imgs", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "num_classes", "=", "len", "(", "classes", ")", "\n", "self", ".", "class_to_idx", "=", "class_to_idx", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "norm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "\n", "self", ".", "imsize", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "TREE", ".", "BRANCH_NUM", ")", ":", "\n", "            ", "self", ".", "imsize", ".", "append", "(", "base_size", ")", "\n", "base_size", "=", "base_size", "*", "2", "\n", "", "print", "(", "'num_classes'", ",", "self", ".", "num_classes", ")", "\n", "\n", "", "def", "find_classes", "(", "self", ",", "dir", ",", "custom_classes", ")", ":", "\n", "        ", "classes", "=", "[", "]", "\n", "\n", "for", "d", "in", "os", ".", "listdir", "(", "dir", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "isdir", ":", "\n", "                ", "if", "custom_classes", "is", "None", "or", "d", "in", "custom_classes", ":", "\n", "                    ", "classes", ".", "append", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "d", ")", ")", "\n", "", "", "", "print", "(", "'Valid classes: '", ",", "len", "(", "classes", ")", ",", "classes", ")", "\n", "\n", "classes", ".", "sort", "(", ")", "\n", "class_to_idx", "=", "{", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "return", "classes", ",", "class_to_idx", "\n", "\n", "", "def", "make_dataset", "(", "self", ",", "classes", ",", "class_to_idx", ")", ":", "\n", "        ", "images", "=", "[", "]", "\n", "for", "d", "in", "classes", ":", "\n", "            ", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "d", ")", ")", ":", "\n", "                ", "for", "fname", "in", "fnames", ":", "\n", "                    ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                        ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "item", "=", "(", "path", ",", "class_to_idx", "[", "d", "]", ")", "\n", "images", ".", "append", "(", "item", ")", "\n", "", "", "", "", "print", "(", "'The number of images: '", ",", "len", "(", "images", ")", ")", "\n", "return", "images", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "target", "=", "self", ".", "imgs", "[", "index", "]", "\n", "imgs_list", "=", "get_imgs", "(", "path", ",", "self", ".", "imsize", ",", "\n", "transform", "=", "self", ".", "transform", ",", "\n", "normalize", "=", "self", ".", "norm", ")", "\n", "\n", "return", "imgs_list", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.BirdsDataset.__len__": [[133, 135], ["len"], "methods", ["None"], ["\n", "\n", "", "", "class", "LSUNClass", "(", "data", ".", "Dataset", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.BirdsDataset.__getitem__": [[136, 155], ["os.path.join", "datasets.BirdsDataset.__change_fileending", "datasets.BirdsDataset.vocab_builder.encode_sentences", "caption_encoded.squeeze.squeeze.squeeze", "caption_length.squeeze.squeeze.squeeze", "open", "PIL.Image.open", "datasets.BirdsDataset.convert", "datasets.BirdsDataset.transforms", "torch.nn.modules.padding.ConstantPad2d", "open", "f.readlines", "len", "captions[].strip"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.BirdsDataset.__change_fileending", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.encode_sentences"], ["    ", "def", "__init__", "(", "self", ",", "db_path", ",", "base_size", "=", "64", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "import", "lmdb", "\n", "self", ".", "db_path", "=", "db_path", "\n", "self", ".", "env", "=", "lmdb", ".", "open", "(", "db_path", ",", "max_readers", "=", "1", ",", "readonly", "=", "True", ",", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "meminit", "=", "False", ")", "\n", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "self", ".", "length", "=", "txn", ".", "stat", "(", ")", "[", "'entries'", "]", "\n", "print", "(", "'length: '", ",", "self", ".", "length", ")", "\n", "", "cache_file", "=", "db_path", "+", "'/cache'", "\n", "if", "os", ".", "path", ".", "isfile", "(", "cache_file", ")", ":", "\n", "            ", "self", ".", "keys", "=", "pickle", ".", "load", "(", "open", "(", "cache_file", ",", "\"rb\"", ")", ")", "\n", "print", "(", "'Load:'", ",", "cache_file", ",", "'keys: '", ",", "len", "(", "self", ".", "keys", ")", ")", "\n", "", "else", ":", "\n", "            ", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "                ", "self", ".", "keys", "=", "[", "key", "for", "key", ",", "_", "in", "txn", ".", "cursor", "(", ")", "]", "\n", "", "pickle", ".", "dump", "(", "self", ".", "keys", ",", "open", "(", "cache_file", ",", "\"wb\"", ")", ")", "\n", "\n", "", "self", ".", "imsize", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "TREE", ".", "BRANCH_NUM", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.datasets.BirdsDataset.__change_fileending": [[156, 165], ["path.replace().replace", "ValueError", "path.replace"], "methods", ["None"], ["            ", "self", ".", "imsize", ".", "append", "(", "base_size", ")", "\n", "base_size", "=", "base_size", "*", "2", "\n", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "norm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseTokenizer.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseTokenizer.tokenize": [[11, 13], ["NotImplementedError"], "methods", ["None"], ["", "def", "tokenize", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Method must be overitten in subclass\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.SpacyTokenizer.__init__": [[16, 20], ["vocab.BaseTokenizer.__init__", "spacy.load", "print"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SpacyTokenizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "spacy_tokenizer", "=", "spacy", ".", "load", "(", "'en_core_web_sm'", ",", "disable", "=", "[", "\"parser\"", ",", "\"tagger\"", ",", "\"ner\"", "]", ")", "\n", "print", "(", "'##############loading SpacyTokenizer###########'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.SpacyTokenizer.tokenize": [[22, 28], ["vocab.SpacyTokenizer.spacy_tokenizer"], "methods", ["None"], ["", "def", "tokenize", "(", "self", ",", "sentence", ")", ":", "\n", "#spacy_tokenizer = spacy.load('en_core_web_sm', disable=[\"parser\", \"tagger\", \"ner\"])", "\n", "\n", "        ", "tokens", "=", "self", ".", "spacy_tokenizer", "(", "sentence", ")", "\n", "tokens", "=", "[", "token", ".", "text", "for", "token", "in", "tokens", "]", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.WhitespaceTokenizer.__init__": [[31, 34], ["vocab.BaseTokenizer.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "WhitespaceTokenizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'############loading WhitespaceTokenizer###########'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.WhitespaceTokenizer.tokenize": [[35, 38], ["sentence.split"], "methods", ["None"], ["", "def", "tokenize", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "tokens", "=", "sentence", ".", "split", "(", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.__init__": [[42, 56], ["vocab.SpacyTokenizer", "vocab.BaseVocabBuilder.add_token", "vocab.BaseVocabBuilder.add_token", "vocab.BaseVocabBuilder.add_token", "vocab.BaseVocabBuilder.add_token"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.add_token", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.add_token", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.add_token", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.add_token"], ["    ", "def", "__init__", "(", "self", ",", "tokenizer", "=", "SpacyTokenizer", "(", ")", ")", ":", "\n", "        ", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "t2i", "=", "{", "}", "\n", "self", ".", "i2t", "=", "[", "]", "\n", "\n", "self", ".", "eos", "=", "'<EOS>'", "\n", "self", ".", "sos", "=", "'<SOS>'", "\n", "self", ".", "pad", "=", "'<PAD>'", "\n", "self", ".", "unk", "=", "'<UNK>'", "\n", "\n", "self", ".", "add_token", "(", "self", ".", "pad", ")", "\n", "self", ".", "add_token", "(", "self", ".", "sos", ")", "\n", "self", ".", "add_token", "(", "self", ".", "eos", ")", "\n", "self", ".", "add_token", "(", "self", ".", "unk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.vocab_size": [[57, 59], ["len"], "methods", ["None"], ["", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "i2t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.eos_pos": [[60, 62], ["None"], "methods", ["None"], ["", "def", "eos_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "t2i", "[", "self", ".", "eos", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.pad_pos": [[63, 65], ["None"], "methods", ["None"], ["", "def", "pad_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "t2i", "[", "self", ".", "pad", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.sos_pos": [[66, 68], ["None"], "methods", ["None"], ["", "def", "sos_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "t2i", "[", "self", ".", "sos", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.add_token": [[69, 73], ["vocab.BaseVocabBuilder.i2t.append", "len"], "methods", ["None"], ["", "def", "add_token", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "token", "not", "in", "self", ".", "t2i", ":", "\n", "            ", "self", ".", "i2t", ".", "append", "(", "token", ")", "\n", "self", ".", "t2i", "[", "token", "]", "=", "len", "(", "self", ".", "t2i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.encode_sentences": [[74, 108], ["torch.LongTensor", "torch.LongTensor", "vocab.BaseVocabBuilder.tokenizer.tokenize", "max", "positions.append", "positions.append", "torch.LongTensor.append", "len", "positions.append", "len", "positions.append"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.WhitespaceTokenizer.tokenize"], ["", "", "def", "encode_sentences", "(", "self", ",", "sentences", ",", "max_length", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Map each word in a sentence to it's id\n        :param sentences: list of sentences to encode\n        :param max_length: max length of the sentences\n        :return: encoded sentences, length of each sentence(excluding padding, including <SOS> and <EOS> token)\n        \"\"\"", "\n", "splits", "=", "[", "self", ".", "tokenizer", ".", "tokenize", "(", "sentence", ")", "for", "sentence", "in", "sentences", "]", "\n", "\n", "lengths", "=", "[", "len", "(", "tokens", ")", "+", "2", "for", "tokens", "in", "splits", "]", "\n", "if", "not", "max_length", ":", "\n", "            ", "max_length", "=", "max", "(", "lengths", ")", "\n", "\n", "", "batch_positions", "=", "[", "]", "\n", "for", "split", "in", "splits", ":", "\n", "            ", "positions", "=", "[", "]", "\n", "positions", ".", "append", "(", "self", ".", "t2i", "[", "self", ".", "sos", "]", ")", "\n", "#positions += [self.t2i[token] for token in split]", "\n", "for", "token", "in", "split", ":", "\n", "                ", "try", ":", "\n", "                    ", "code", "=", "self", ".", "t2i", "[", "token", "]", "\n", "", "except", ":", "\n", "                    ", "code", "=", "self", ".", "t2i", "[", "self", ".", "unk", "]", "\n", "", "positions", ".", "append", "(", "code", ")", "\n", "\n", "", "positions", ".", "append", "(", "self", ".", "t2i", "[", "self", ".", "eos", "]", ")", "\n", "while", "len", "(", "positions", ")", "<", "max_length", ":", "\n", "                ", "positions", ".", "append", "(", "self", ".", "t2i", "[", "self", ".", "pad", "]", ")", "\n", "", "batch_positions", ".", "append", "(", "positions", ")", "\n", "\n", "", "batch_positions", "=", "torch", ".", "LongTensor", "(", "batch_positions", ")", "\n", "lengths", "=", "torch", ".", "LongTensor", "(", "lengths", ")", "\n", "\n", "return", "batch_positions", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.decode_positions": [[109, 120], ["enumerate", "batch_sentences.append", "vocab.BaseVocabBuilder.sos_pos", "vocab.BaseVocabBuilder.eos_pos", "int"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.sos_pos", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.eos_pos"], ["", "def", "decode_positions", "(", "self", ",", "batch_positions", ")", ":", "\n", "        ", "batch_sentences", "=", "[", "]", "\n", "for", "positions", "in", "batch_positions", ":", "\n", "            ", "sentence", "=", "''", "\n", "for", "i", ",", "position", "in", "enumerate", "(", "positions", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "continue", "\n", "if", "position", "==", "self", ".", "sos_pos", "(", ")", ":", "continue", "\n", "if", "position", "==", "self", ".", "eos_pos", "(", ")", ":", "break", "\n", "sentence", "+=", "self", ".", "i2t", "[", "int", "(", "position", ")", "]", "+", "' '", "\n", "", "batch_sentences", ".", "append", "(", "sentence", ")", "\n", "", "return", "batch_sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.load_text": [[121, 131], ["vocab.BaseVocabBuilder.read_sentences", "vocab.BaseVocabBuilder.tokenizer.tokenize", "vocab.BaseVocabBuilder.add_token"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.FlowersVocabBuilder.read_sentences", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.WhitespaceTokenizer.tokenize", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.add_token"], ["", "def", "load_text", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "\"\"\"\n        Loads all sentences from the file and adds all tokens to the vocabulary.\n        :param filepath: file to load the vocab from\n        :return:\n        \"\"\"", "\n", "sentences", "=", "self", ".", "read_sentences", "(", "filepath", ")", "\n", "for", "sentence", "in", "sentences", ":", "\n", "            ", "tokens", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "sentence", ")", "\n", "[", "self", ".", "add_token", "(", "token", ")", "for", "token", "in", "tokens", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.load_texts": [[132, 140], ["vocab.BaseVocabBuilder.load_text"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.load_text"], ["", "", "def", "load_texts", "(", "self", ",", "listof_filepaths", ")", ":", "\n", "        ", "\"\"\"\n        Load tokens from a list of files.\n        :param listof_filepaths: a list of files to load the tokens from\n        :return:\n        \"\"\"", "\n", "for", "filepath", "in", "listof_filepaths", ":", "\n", "            ", "self", ".", "load_text", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.read_sentences": [[141, 151], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "read_sentences", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "\"\"\"\n        Returns a list of sentences. The sentences will be tokenized and the tokens will be added to the vocab in\n        load_text(self, filepath).\n        Since each dataset might store the captions/text in a different format, this method\n        is supposed to be implemented in a specific subclass for each dataset.\n        :param filepath: path of the file to read the senteces from\n        :return: list of sentences\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Method must be overitten in subclass\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.ShapesVocabBuilder.__init__": [[154, 156], ["vocab.BaseVocabBuilder.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ShapesVocabBuilder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.ShapesVocabBuilder.read_sentences": [[157, 165], ["open", "csv.reader", "enumerate", "sentences.append"], "methods", ["None"], ["", "def", "read_sentences", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "sentences", "=", "[", "]", "\n", "with", "open", "(", "filepath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "reader", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "continue", "\n", "sentences", ".", "append", "(", "line", "[", "1", "]", ")", "\n", "", "", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BirdsVocabBuilder.__init__": [[168, 170], ["vocab.BaseVocabBuilder.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BirdsVocabBuilder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BirdsVocabBuilder.read_sentences": [[171, 178], ["open", "re.sub", "sentences.append", "re.sub.strip"], "methods", ["None"], ["", "def", "read_sentences", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "sentences", "=", "[", "]", "\n", "with", "open", "(", "filepath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "re", ".", "sub", "(", "r'[^A-Za-z0-9 ,.?!-]+'", ",", "' '", ",", "line", ")", "\n", "sentences", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BillionVocabBuilder.__init__": [[180, 182], ["vocab.BaseVocabBuilder.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BillionVocabBuilder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BillionVocabBuilder.read_sentences": [[183, 190], ["open", "re.sub", "sentences.append", "re.sub.strip().lower", "re.sub.strip"], "methods", ["None"], ["", "def", "read_sentences", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "sentences", "=", "[", "]", "\n", "with", "open", "(", "filepath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "re", ".", "sub", "(", "r'[^A-Za-z0-9 ,.?!-]+'", ",", "' '", ",", "line", ")", "\n", "sentences", ".", "append", "(", "line", ".", "strip", "(", ")", ".", "lower", "(", ")", ")", "\n", "", "", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.FlowersVocabBuilder.__init__": [[192, 194], ["vocab.BaseVocabBuilder.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FlowersVocabBuilder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.FlowersVocabBuilder.read_sentences": [[195, 202], ["open", "re.sub", "sentences.append", "re.sub.strip"], "methods", ["None"], ["", "def", "read_sentences", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "sentences", "=", "[", "]", "\n", "with", "open", "(", "filepath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "re", ".", "sub", "(", "r'[^A-Za-z0-9 ,.?!-]+'", ",", "' '", ",", "line", ")", "\n", "sentences", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "return", "sentences", "\n", "", "", ""]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.GLU.__init__": [[31, 33], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.GLU.forward": [[34, 39], ["x.size", "int", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "nc", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "nc", "%", "2", "==", "0", ",", "'channels dont divide 2!'", "\n", "nc", "=", "int", "(", "nc", "/", "2", ")", "\n", "return", "x", "[", ":", ",", ":", "nc", "]", "*", "F", ".", "sigmoid", "(", "x", "[", ":", ",", "nc", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.INIT_STAGE_G.__init__": [[56, 61], ["torch.Module.__init__", "image_models4.INIT_STAGE_G.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ")", ":", "\n", "        ", "super", "(", "INIT_STAGE_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "self", ".", "in_dim", "=", "indim", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.INIT_STAGE_G.define_module": [[62, 75], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "image_models4.upBlock", "image_models4.upBlock", "image_models4.upBlock", "image_models4.upBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "image_models4.GLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "in_dim", "=", "self", ".", "in_dim", "\n", "ngf", "=", "self", ".", "gf_dim", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "ngf", "*", "4", "*", "4", "*", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ngf", "*", "4", "*", "4", "*", "2", ")", ",", "\n", "GLU", "(", ")", ")", "\n", "\n", "\n", "self", ".", "upsample1", "=", "upBlock", "(", "ngf", ",", "ngf", "//", "2", ")", "\n", "self", ".", "upsample2", "=", "upBlock", "(", "ngf", "//", "2", ",", "ngf", "//", "4", ")", "\n", "self", ".", "upsample3", "=", "upBlock", "(", "ngf", "//", "4", ",", "ngf", "//", "8", ")", "\n", "self", ".", "upsample4", "=", "upBlock", "(", "ngf", "//", "8", ",", "ngf", "//", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.INIT_STAGE_G.forward": [[76, 93], ["image_models4.INIT_STAGE_G.fc", "image_models4.INIT_STAGE_G.view", "image_models4.INIT_STAGE_G.upsample1", "image_models4.INIT_STAGE_G.upsample2", "image_models4.INIT_STAGE_G.upsample3", "image_models4.INIT_STAGE_G.upsample4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_code", ")", ":", "\n", "\n", "        ", "in_code", "=", "z_code", "\n", "# state size 16ngf x 4 x 4", "\n", "out_code", "=", "self", ".", "fc", "(", "in_code", ")", "\n", "out_code", "=", "out_code", ".", "view", "(", "-", "1", ",", "self", ".", "gf_dim", ",", "4", ",", "4", ")", "\n", "# state size 8ngf x 8 x 8", "\n", "out_code", "=", "self", ".", "upsample1", "(", "out_code", ")", "\n", "# state size 4ngf x 16 x 16", "\n", "out_code", "=", "self", ".", "upsample2", "(", "out_code", ")", "\n", "# state size 2ngf x 32 x 32", "\n", "out_code", "=", "self", ".", "upsample3", "(", "out_code", ")", "\n", "# state size ngf x 64 x 64", "\n", "out_code", "=", "self", ".", "upsample4", "(", "out_code", ")", "\n", "\n", "\n", "return", "out_code", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.GET_IMAGE_G.__init__": [[95, 101], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "image_models4.conv3x3", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ")", ":", "\n", "        ", "super", "(", "GET_IMAGE_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "self", ".", "img", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "ngf", ",", "ngf", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.GET_IMAGE_G.forward": [[103, 106], ["image_models4.GET_IMAGE_G.img"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h_code", ")", ":", "\n", "        ", "out_img", "=", "self", ".", "img", "(", "h_code", ")", "\n", "return", "out_img", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.G_NET.__init__": [[108, 112], ["torch.Module.__init__", "image_models4.G_NET.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "G_NET", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.G_NET.define_module": [[113, 116], ["image_models4.INIT_STAGE_G", "image_models4.GET_IMAGE_G"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "            ", "self", ".", "h_net1", "=", "INIT_STAGE_G", "(", "self", ".", "gf_dim", "*", "16", ")", "\n", "self", ".", "img_net1", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", ")", "\n", "", "def", "forward", "(", "self", ",", "text_embedding", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.G_NET.forward": [[116, 124], ["image_models4.G_NET.h_net1", "image_models4.G_NET.img_net1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "text_embedding", ")", ":", "\n", "#if cfg.GAN.B_CONDITION and text_embedding is not None:", "\n", "#    c_code, mu, logvar = self.ca_net(text_embedding)", "\n", "#else:", "\n", "#    c_code, mu, logvar = z_code, None, None", "\n", "        ", "h_code1", "=", "self", ".", "h_net1", "(", "text_embedding", ")", "\n", "fake_img1", "=", "self", ".", "img_net1", "(", "h_code1", ")", "\n", "return", "fake_img1", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.CAE32.__init__": [[133, 248], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAE32", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoded", "=", "None", "\n", "\n", "# ENCODER", "\n", "\n", "# 64x64x64", "\n", "self", ".", "e_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 32x32x32", "\n", "self", ".", "e_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "# DECODER", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_up_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 256x128x128", "\n", "self", ".", "d_up_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 3x128x128", "\n", "self", ".", "d_up_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "2", ",", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.CAE32.forward": [[250, 270], ["image_models4.CAE32.e_conv_1", "image_models4.CAE32.e_conv_2", "image_models4.CAE32.e_conv_3", "image_models4.CAE32.decode", "image_models4.CAE32.e_block_1", "image_models4.CAE32.e_block_2", "image_models4.CAE32.e_block_3", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ec1", "=", "self", ".", "e_conv_1", "(", "x", ")", "\n", "ec2", "=", "self", ".", "e_conv_2", "(", "ec1", ")", "\n", "eblock1", "=", "self", ".", "e_block_1", "(", "ec2", ")", "+", "ec2", "\n", "eblock2", "=", "self", ".", "e_block_2", "(", "eblock1", ")", "+", "eblock1", "\n", "eblock3", "=", "self", ".", "e_block_3", "(", "eblock2", ")", "+", "eblock2", "\n", "ec3", "=", "self", ".", "e_conv_3", "(", "eblock3", ")", "# in [-1, 1] from tanh activation", "\n", "\n", "# stochastic binarization", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand", "=", "torch", ".", "rand", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "prob", "=", "(", "1", "+", "ec3", ")", "/", "2", "\n", "eps", "=", "torch", ".", "zeros", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "eps", "[", "rand", "<=", "prob", "]", "=", "(", "1", "-", "ec3", ")", "[", "rand", "<=", "prob", "]", "\n", "eps", "[", "rand", ">", "prob", "]", "=", "(", "-", "ec3", "-", "1", ")", "[", "rand", ">", "prob", "]", "\n", "\n", "# encoded tensor", "\n", "", "self", ".", "encoded", "=", "0.5", "*", "(", "ec3", "+", "eps", "+", "1", ")", "# (-1|1) -> (0|1)", "\n", "\n", "return", "self", ".", "decode", "(", "self", ".", "encoded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.CAE32.decode": [[271, 282], ["image_models4.CAE32.d_up_conv_1", "image_models4.CAE32.d_up_conv_2", "image_models4.CAE32.d_up_conv_3", "image_models4.CAE32.d_block_1", "image_models4.CAE32.d_block_2", "image_models4.CAE32.d_block_3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "encoded", ")", ":", "\n", "        ", "y", "=", "encoded", "*", "2.0", "-", "1", "# (0|1) -> (-1|1)", "\n", "\n", "uc1", "=", "self", ".", "d_up_conv_1", "(", "y", ")", "\n", "dblock1", "=", "self", ".", "d_block_1", "(", "uc1", ")", "+", "uc1", "\n", "dblock2", "=", "self", ".", "d_block_2", "(", "dblock1", ")", "+", "dblock1", "\n", "dblock3", "=", "self", ".", "d_block_3", "(", "dblock2", ")", "+", "dblock2", "\n", "uc2", "=", "self", ".", "d_up_conv_2", "(", "dblock3", ")", "\n", "dec", "=", "self", ".", "d_up_conv_3", "(", "uc2", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.CAE16.__init__": [[290, 406], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAE16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoded", "=", "None", "\n", "\n", "# ENCODER", "\n", "\n", "# 64x64x64", "\n", "self", ".", "e_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 16x16x16", "\n", "self", ".", "e_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "# DECODER", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_up_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 256x64x64", "\n", "self", ".", "d_up_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 3x128x128", "\n", "self", ".", "d_up_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.CAE16.forward": [[408, 428], ["image_models4.CAE16.e_conv_1", "image_models4.CAE16.e_conv_2", "image_models4.CAE16.e_conv_3", "image_models4.CAE16.decode", "image_models4.CAE16.e_block_1", "image_models4.CAE16.e_block_2", "image_models4.CAE16.e_block_3", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ec1", "=", "self", ".", "e_conv_1", "(", "x", ")", "\n", "ec2", "=", "self", ".", "e_conv_2", "(", "ec1", ")", "\n", "eblock1", "=", "self", ".", "e_block_1", "(", "ec2", ")", "+", "ec2", "\n", "eblock2", "=", "self", ".", "e_block_2", "(", "eblock1", ")", "+", "eblock1", "\n", "eblock3", "=", "self", ".", "e_block_3", "(", "eblock2", ")", "+", "eblock2", "\n", "ec3", "=", "self", ".", "e_conv_3", "(", "eblock3", ")", "# in [-1, 1] from tanh activation", "\n", "\n", "# stochastic binarization", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand", "=", "torch", ".", "rand", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "prob", "=", "(", "1", "+", "ec3", ")", "/", "2", "\n", "eps", "=", "torch", ".", "zeros", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "eps", "[", "rand", "<=", "prob", "]", "=", "(", "1", "-", "ec3", ")", "[", "rand", "<=", "prob", "]", "\n", "eps", "[", "rand", ">", "prob", "]", "=", "(", "-", "ec3", "-", "1", ")", "[", "rand", ">", "prob", "]", "\n", "\n", "# encoded tensor", "\n", "", "self", ".", "encoded", "=", "0.5", "*", "(", "ec3", "+", "eps", "+", "1", ")", "# (-1|1) -> (0|1)", "\n", "\n", "return", "self", ".", "decode", "(", "self", ".", "encoded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.CAE16.decode": [[429, 440], ["image_models4.CAE16.d_up_conv_1", "image_models4.CAE16.d_up_conv_2", "image_models4.CAE16.d_up_conv_3", "image_models4.CAE16.d_block_1", "image_models4.CAE16.d_block_2", "image_models4.CAE16.d_block_3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "encoded", ")", ":", "\n", "        ", "y", "=", "encoded", "*", "2.0", "-", "1", "# (0|1) -> (-1|1)", "\n", "\n", "uc1", "=", "self", ".", "d_up_conv_1", "(", "y", ")", "\n", "dblock1", "=", "self", ".", "d_block_1", "(", "uc1", ")", "+", "uc1", "\n", "dblock2", "=", "self", ".", "d_block_2", "(", "dblock1", ")", "+", "dblock1", "\n", "dblock3", "=", "self", ".", "d_block_3", "(", "dblock2", ")", "+", "dblock2", "\n", "uc2", "=", "self", ".", "d_up_conv_2", "(", "dblock3", ")", "\n", "dec", "=", "self", ".", "d_up_conv_3", "(", "uc2", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.CAE8.__init__": [[450, 576], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAE8", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoded", "=", "None", "\n", "\n", "# ENCODER", "\n", "\n", "# 64x64x64", "\n", "self", ".", "e_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x16x16", "\n", "self", ".", "e_pool_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x16x16", "\n", "self", ".", "e_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x16x16", "\n", "self", ".", "e_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 16x8x8", "\n", "self", ".", "e_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "# DECODER", "\n", "\n", "# 128x16x16", "\n", "self", ".", "d_up_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x16x16", "\n", "self", ".", "d_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_up_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 256x64x64", "\n", "self", ".", "d_up_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 3x128x128", "\n", "self", ".", "d_up_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.CAE8.forward": [[578, 600], ["image_models4.CAE8.e_conv_1", "image_models4.CAE8.e_conv_2", "image_models4.CAE8.e_block_1", "image_models4.CAE8.e_pool_1", "image_models4.CAE8.e_conv_3", "image_models4.CAE8.decode", "image_models4.CAE8.e_block_2", "image_models4.CAE8.e_block_3", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# ENCODE", "\n", "        ", "ec1", "=", "self", ".", "e_conv_1", "(", "x", ")", "\n", "ec2", "=", "self", ".", "e_conv_2", "(", "ec1", ")", "\n", "eblock1", "=", "self", ".", "e_block_1", "(", "ec2", ")", "\n", "eblock1", "=", "self", ".", "e_pool_1", "(", "ec2", "+", "eblock1", ")", "\n", "eblock2", "=", "self", ".", "e_block_2", "(", "eblock1", ")", "+", "eblock1", "\n", "eblock3", "=", "self", ".", "e_block_3", "(", "eblock2", ")", "+", "eblock2", "\n", "ec3", "=", "self", ".", "e_conv_3", "(", "eblock3", ")", "# in [-1, 1] from tanh activation", "\n", "\n", "# stochastic binarization", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand", "=", "torch", ".", "rand", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "prob", "=", "(", "1", "+", "ec3", ")", "/", "2", "\n", "eps", "=", "torch", ".", "zeros", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "eps", "[", "rand", "<=", "prob", "]", "=", "(", "1", "-", "ec3", ")", "[", "rand", "<=", "prob", "]", "\n", "eps", "[", "rand", ">", "prob", "]", "=", "(", "-", "ec3", "-", "1", ")", "[", "rand", ">", "prob", "]", "\n", "\n", "# encoded tensor", "\n", "", "self", ".", "encoded", "=", "0.5", "*", "(", "ec3", "+", "eps", "+", "1", ")", "# (-1|1) -> (0|1)", "\n", "\n", "return", "self", ".", "decode", "(", "self", ".", "encoded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.CAE8.decode": [[601, 613], ["image_models4.CAE8.d_up_conv_1", "image_models4.CAE8.d_up_1", "image_models4.CAE8.d_up_conv_2", "image_models4.CAE8.d_up_conv_3", "image_models4.CAE8.d_block_1", "image_models4.CAE8.d_block_2", "image_models4.CAE8.d_block_3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "enc", ")", ":", "\n", "        ", "y", "=", "enc", "*", "2.0", "-", "1", "# (0|1) -> (-1, 1)", "\n", "\n", "uc1", "=", "self", ".", "d_up_conv_1", "(", "y", ")", "\n", "dblock1", "=", "self", ".", "d_block_1", "(", "uc1", ")", "+", "uc1", "\n", "dup1", "=", "self", ".", "d_up_1", "(", "dblock1", ")", "\n", "dblock2", "=", "self", ".", "d_block_2", "(", "dup1", ")", "+", "dup1", "\n", "dblock3", "=", "self", ".", "d_block_3", "(", "dblock2", ")", "+", "dblock2", "\n", "uc2", "=", "self", ".", "d_up_conv_2", "(", "dblock3", ")", "\n", "dec", "=", "self", ".", "d_up_conv_3", "(", "uc2", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.CAEB.__init__": [[622, 748], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "image_models4.G_NET", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAEB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoded", "=", "None", "\n", "\n", "# ENCODER", "\n", "\n", "# 64x64x64", "\n", "self", ".", "e_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 32x32x32", "\n", "self", ".", "e_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "self", ".", "bottle_neck1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "32", "*", "32", ",", "32", "*", "32", "*", "16", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "self", ".", "bottle_neck2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "32", "*", "16", ",", "32", "*", "32", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "\n", "self", ".", "bottle_neck3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "32", "*", "4", ",", "indim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "reverse_bottle", "=", "G_NET", "(", ")", "\n", "# DECODER", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_up_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 256x128x128", "\n", "self", ".", "d_up_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 3x128x128", "\n", "self", ".", "d_up_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "2", ",", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.CAEB.forward": [[750, 771], ["image_models4.CAEB.e_conv_1", "image_models4.CAEB.e_conv_2", "image_models4.CAEB.e_conv_3", "image_models4.CAEB.bottle_func", "image_models4.CAEB.e_block_1", "image_models4.CAEB.e_block_2", "image_models4.CAEB.e_block_3", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAEBo.bottle_func"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ec1", "=", "self", ".", "e_conv_1", "(", "x", ")", "\n", "ec2", "=", "self", ".", "e_conv_2", "(", "ec1", ")", "\n", "eblock1", "=", "self", ".", "e_block_1", "(", "ec2", ")", "+", "ec2", "\n", "eblock2", "=", "self", ".", "e_block_2", "(", "eblock1", ")", "+", "eblock1", "\n", "eblock3", "=", "self", ".", "e_block_3", "(", "eblock2", ")", "+", "eblock2", "\n", "ec3", "=", "self", ".", "e_conv_3", "(", "eblock3", ")", "# in [-1, 1] from tanh activation", "\n", "\n", "# stochastic binarization", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand", "=", "torch", ".", "rand", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "prob", "=", "(", "1", "+", "ec3", ")", "/", "2", "\n", "eps", "=", "torch", ".", "zeros", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "eps", "[", "rand", "<=", "prob", "]", "=", "(", "1", "-", "ec3", ")", "[", "rand", "<=", "prob", "]", "\n", "eps", "[", "rand", ">", "prob", "]", "=", "(", "-", "ec3", "-", "1", ")", "[", "rand", ">", "prob", "]", "\n", "\n", "# encoded tensor", "\n", "", "self", ".", "encoded", "=", "0.5", "*", "(", "ec3", "+", "eps", "+", "1", ")", "# (-1|1) -> (0|1)", "\n", "\n", "#return self.decode(self.encoded)", "\n", "return", "self", ".", "bottle_func", "(", "self", ".", "encoded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.CAEB.bottle_func": [[772, 785], ["torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "image_models4.CAEB.bottle_neck1", "image_models4.CAEB.bottle_neck2", "image_models4.CAEB.bottle_neck3", "image_models4.CAEB.reverse_bottle", "image_models4.CAEB.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "bottle_func", "(", "self", ",", "encoded", ")", ":", "\n", "#print(\"encoded.shape\", encoded.shape)", "\n", "        ", "x", "=", "torch", ".", "flatten", "(", "encoded", ",", "1", ")", "\n", "#print(\"b1.shape\", x.shape)", "\n", "x", "=", "self", ".", "bottle_neck1", "(", "x", ")", "\n", "#print(\"b2.shape\", x.shape)", "\n", "x", "=", "self", ".", "bottle_neck2", "(", "x", ")", "\n", "#print(\"b3.shape\", x.shape)", "\n", "comp", "=", "self", ".", "bottle_neck3", "(", "x", ")", "\n", "#print(\"comp.shape\", comp.shape)", "\n", "x", "=", "self", ".", "reverse_bottle", "(", "comp", ")", "\n", "#print(\"x.shape\", x.shape)", "\n", "return", "self", ".", "decode", "(", "x", ")", ",", "comp", ",", "x", ",", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.CAEB.decode": [[786, 797], ["image_models4.CAEB.d_up_conv_1", "image_models4.CAEB.d_up_conv_2", "image_models4.CAEB.d_up_conv_3", "image_models4.CAEB.d_block_1", "image_models4.CAEB.d_block_2", "image_models4.CAEB.d_block_3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "encoded", ")", ":", "\n", "        ", "y", "=", "encoded", "*", "2.0", "-", "1", "# (0|1) -> (-1|1)", "\n", "\n", "uc1", "=", "self", ".", "d_up_conv_1", "(", "y", ")", "\n", "dblock1", "=", "self", ".", "d_block_1", "(", "uc1", ")", "+", "uc1", "\n", "dblock2", "=", "self", ".", "d_block_2", "(", "dblock1", ")", "+", "dblock1", "\n", "dblock3", "=", "self", ".", "d_block_3", "(", "dblock2", ")", "+", "dblock2", "\n", "uc2", "=", "self", ".", "d_up_conv_2", "(", "dblock3", ")", "\n", "dec", "=", "self", ".", "d_up_conv_3", "(", "uc2", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.CAEBo.__init__": [[805, 926], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "image_models4.G_NET", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAEBo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoded", "=", "None", "\n", "\n", "# ENCODER", "\n", "\n", "# 64x64x64", "\n", "self", ".", "e_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 32x32x32", "\n", "self", ".", "e_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "16", ",", "16", ")", ")", "\n", "self", ".", "bottle_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "16", "*", "16", ",", "indim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "\n", "self", ".", "reverse_bottle", "=", "G_NET", "(", ")", "\n", "# DECODER", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_up_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 256x128x128", "\n", "self", ".", "d_up_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 3x128x128", "\n", "self", ".", "d_up_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "2", ",", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.CAEBo.forward": [[928, 949], ["image_models4.CAEBo.e_conv_1", "image_models4.CAEBo.e_conv_2", "image_models4.CAEBo.e_conv_3", "image_models4.CAEBo.bottle_func", "image_models4.CAEBo.e_block_1", "image_models4.CAEBo.e_block_2", "image_models4.CAEBo.e_block_3", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAEBo.bottle_func"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ec1", "=", "self", ".", "e_conv_1", "(", "x", ")", "\n", "ec2", "=", "self", ".", "e_conv_2", "(", "ec1", ")", "\n", "eblock1", "=", "self", ".", "e_block_1", "(", "ec2", ")", "+", "ec2", "\n", "eblock2", "=", "self", ".", "e_block_2", "(", "eblock1", ")", "+", "eblock1", "\n", "eblock3", "=", "self", ".", "e_block_3", "(", "eblock2", ")", "+", "eblock2", "\n", "ec3", "=", "self", ".", "e_conv_3", "(", "eblock3", ")", "# in [-1, 1] from tanh activation", "\n", "\n", "# stochastic binarization", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand", "=", "torch", ".", "rand", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "prob", "=", "(", "1", "+", "ec3", ")", "/", "2", "\n", "eps", "=", "torch", ".", "zeros", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "eps", "[", "rand", "<=", "prob", "]", "=", "(", "1", "-", "ec3", ")", "[", "rand", "<=", "prob", "]", "\n", "eps", "[", "rand", ">", "prob", "]", "=", "(", "-", "ec3", "-", "1", ")", "[", "rand", ">", "prob", "]", "\n", "\n", "# encoded tensor", "\n", "", "self", ".", "encoded", "=", "0.5", "*", "(", "ec3", "+", "eps", "+", "1", ")", "# (-1|1) -> (0|1)", "\n", "\n", "#return self.decode(self.encoded)", "\n", "return", "self", ".", "bottle_func", "(", "self", ".", "encoded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.CAEBo.bottle_func": [[950, 961], ["image_models4.CAEBo.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "image_models4.CAEBo.bottle_neck", "image_models4.CAEBo.reverse_bottle", "image_models4.CAEBo.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "bottle_func", "(", "self", ",", "encoded", ")", ":", "\n", "#print(\"encoded.shape\", encoded.shape)", "\n", "        ", "x", "=", "self", ".", "avgpool", "(", "encoded", ")", "\n", "#print(\"avg.shape\", x.shape)", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "#print(\"b1.shape\", x.shape)", "\n", "comp", "=", "self", ".", "bottle_neck", "(", "x", ")", "\n", "#print(\"comp.shape\", comp.shape)", "\n", "x", "=", "self", ".", "reverse_bottle", "(", "comp", ")", "\n", "#print(\"x.shape\", x.shape)", "\n", "return", "self", ".", "decode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.CAEBo.decode": [[962, 973], ["image_models4.CAEBo.d_up_conv_1", "image_models4.CAEBo.d_up_conv_2", "image_models4.CAEBo.d_up_conv_3", "image_models4.CAEBo.d_block_1", "image_models4.CAEBo.d_block_2", "image_models4.CAEBo.d_block_3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "encoded", ")", ":", "\n", "        ", "y", "=", "encoded", "*", "2.0", "-", "1", "# (0|1) -> (-1|1)", "\n", "\n", "uc1", "=", "self", ".", "d_up_conv_1", "(", "y", ")", "\n", "dblock1", "=", "self", ".", "d_block_1", "(", "uc1", ")", "+", "uc1", "\n", "dblock2", "=", "self", ".", "d_block_2", "(", "dblock1", ")", "+", "dblock1", "\n", "dblock3", "=", "self", ".", "d_block_3", "(", "dblock2", ")", "+", "dblock2", "\n", "uc2", "=", "self", ".", "d_up_conv_2", "(", "dblock3", ")", "\n", "dec", "=", "self", ".", "d_up_conv_3", "(", "uc2", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.ResBlock.__init__": [[975, 989], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "layers.insert", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "mid_channels", "=", "None", ",", "bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "mid_channels", "is", "None", ":", "\n", "            ", "mid_channels", "=", "out_channels", "\n", "\n", "", "layers", "=", "[", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "mid_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "]", "\n", "if", "bn", ":", "\n", "            ", "layers", ".", "insert", "(", "2", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", "\n", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.ResBlock.forward": [[990, 992], ["image_models4.ResBlock.convs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "convs", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.vai.__init__": [[995, 1028], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "image_models4.ResBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "image_models4.ResBlock", "image_models4.ResBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "image_models4.ResBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d", "=", "64", ",", "kl_coef", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "vai", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "d", "//", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "d", "//", "2", ",", "d", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "ResBlock", "(", "d", ",", "d", ",", "bn", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d", ")", ",", "\n", "ResBlock", "(", "d", ",", "d", ",", "bn", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "ResBlock", "(", "d", ",", "d", ",", "bn", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d", ")", ",", "\n", "ResBlock", "(", "d", ",", "d", ",", "bn", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "d", ",", "d", "//", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "d", "//", "2", ",", "3", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "f", "=", "32", "# size of bottle neck image 32*32", "\n", "self", ".", "d", "=", "d", "\n", "self", ".", "fc11", "=", "nn", ".", "Linear", "(", "d", "*", "self", ".", "f", "**", "2", ",", "(", "d", "//", "8", ")", "*", "self", ".", "f", "**", "2", ")", "\n", "self", ".", "fc12", "=", "nn", ".", "Linear", "(", "d", "*", "self", ".", "f", "**", "2", ",", "(", "d", "//", "8", ")", "*", "self", ".", "f", "**", "2", ")", "\n", "self", ".", "fc13", "=", "nn", ".", "Linear", "(", "(", "d", "//", "8", ")", "*", "self", ".", "f", "**", "2", ",", "d", "*", "self", ".", "f", "**", "2", ")", "\n", "self", ".", "kl_coef", "=", "kl_coef", "\n", "self", ".", "kl_loss", "=", "0", "\n", "self", ".", "mse", "=", "0", "\n", "", "def", "encode", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.vai.encode": [[1028, 1032], ["image_models4.vai.encoder", "h1.view.view.view", "image_models4.vai.fc11", "image_models4.vai.fc12"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "h1", "=", "self", ".", "encoder", "(", "x", ")", "\n", "h1", "=", "h1", ".", "view", "(", "-", "1", ",", "self", ".", "d", "*", "self", ".", "f", "**", "2", ")", "\n", "return", "self", ".", "fc11", "(", "h1", ")", ",", "self", ".", "fc12", "(", "h1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.vai.reparameterize": [[1033, 1040], ["logvar.mul().exp_", "logvar.mul().exp_.new().normal_", "logvar.mul().exp_.new().normal_.mul().add_", "logvar.mul", "logvar.mul().exp_.new", "logvar.mul().exp_.new().normal_.mul", "logvar.mul().exp_.size"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "std", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "eps", "=", "std", ".", "new", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "", "else", ":", "\n", "            ", "return", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.vai.decode": [[1041, 1046], ["image_models4.vai.fc13", "z.view.view.view", "image_models4.vai.decoder", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "        ", "z", "=", "self", ".", "fc13", "(", "z", ")", "\n", "z", "=", "z", ".", "view", "(", "-", "1", ",", "self", ".", "d", ",", "self", ".", "f", ",", "self", ".", "f", ")", "\n", "h3", "=", "self", ".", "decoder", "(", "z", ")", "\n", "return", "torch", ".", "tanh", "(", "h3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.vai.forward": [[1047, 1051], ["image_models4.vai.encode", "image_models4.vai.reparameterize", "image_models4.vai.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.comrecCNN.reparameterize", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mu", ",", "logvar", "=", "self", ".", "encode", "(", "x", ")", "\n", "z", "=", "self", ".", "reparameterize", "(", "mu", ",", "logvar", ")", "\n", "return", "self", ".", "decode", "(", "z", ")", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.Interpolate.__init__": [[1059, 1064], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "mode", ")", ":", "\n", "        ", "super", "(", "Interpolate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "interp", "=", "nn", ".", "functional", ".", "interpolate", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.Interpolate.forward": [[1065, 1068], ["image_models4.Interpolate.interp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "interp", "(", "x", ",", "size", "=", "self", ".", "size", ",", "mode", "=", "self", ".", "mode", ",", "align_corners", "=", "False", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.com_enc.__init__": [[1070, 1084], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "com_enc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bottle_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "3", "*", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ",", "HIDDEN", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "def", "encode", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.com_enc.encode": [[1084, 1092], ["image_models4.com_enc.relu", "image_models4.com_enc.relu", "image_models4.com_enc.bn1", "image_models4.com_enc.conv3", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "image_models4.com_enc.bottle_neck", "image_models4.com_enc.conv1", "image_models4.com_enc.conv2"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "torch", ".", "flatten", "(", "out", ",", "1", ")", "\n", "out", "=", "self", ".", "bottle_neck", "(", "out", ")", "\n", "return", "out", "\n", "", "", "class", "com_dec", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.com_dec.__init__": [[1093, 1111], ["torch.Module.__init__", "image_models4.G_NET", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "image_models4.Interpolate", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "com_dec", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "up_neck", "=", "G_NET", "(", ")", "\n", "#self.deconv0 = nn.Conv2d(8, CHANNELS, kernel_size=3, stride=1, padding=1)", "\n", "self", ".", "deconv0", "=", "nn", ".", "Conv2d", "(", "32", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "interpolate", "=", "Interpolate", "(", "size", "=", "HEIGHT", ",", "mode", "=", "'bicubic'", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "deconv_n", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_n", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "CHANNELS", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "def", "decode", "(", "self", ",", "z", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.com_dec.decode": [[1111, 1125], ["image_models4.com_dec.up_neck", "image_models4.com_dec.deconv0", "image_models4.com_dec.interpolate", "image_models4.com_dec.relu", "image_models4.com_dec.relu", "image_models4.com_dec.bn2", "range", "image_models4.com_dec.deconv3", "image_models4.com_dec.deconv1", "image_models4.com_dec.deconv2", "image_models4.com_dec.relu", "image_models4.com_dec.bn_n", "image_models4.com_dec.deconv_n"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "        ", "z", "=", "self", ".", "up_neck", "(", "z", ")", "\n", "#z = z.view(-1, 8, (HEIGHT//2), (WIDTH//2))", "\n", "z", "=", "self", ".", "deconv0", "(", "z", ")", "\n", "upscaled_image", "=", "self", ".", "interpolate", "(", "z", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv1", "(", "upscaled_image", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv_n", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn_n", "(", "out", ")", "\n", "", "out", "=", "self", ".", "deconv3", "(", "out", ")", "\n", "final", "=", "upscaled_image", "+", "out", "\n", "return", "final", ",", "out", ",", "upscaled_image", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.comrec1.__init__": [[1127, 1134], ["torch.Module.__init__", "image_models4.com_enc", "image_models4.com_dec"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "comrec1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "self", ".", "enco", "=", "com_enc", "(", ")", "\n", "self", ".", "deco", "=", "com_dec", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.comrec1.forward": [[1136, 1140], ["image_models4.comrec1.enco.encode", "image_models4.comrec1.deco.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "com", "=", "self", ".", "enco", ".", "encode", "(", "x", ")", "\n", "final", ",", "out", ",", "upscaled_image", ",", "com_img", "=", "self", ".", "deco", ".", "decode", "(", "com", ")", "\n", "return", "final", ",", "out", ",", "upscaled_image", ",", "com_img", ",", "x", "\n", "########################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.com_enc2.__init__": [[1143, 1160], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "com_enc2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bottle_neck1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "3", "*", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ",", "HIDDEN", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "bottle_neck2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "3", "*", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ",", "HIDDEN", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.com_enc2.reparameterize": [[1160, 1167], ["logvar.mul().exp_", "logvar.mul().exp_.new().normal_", "logvar.mul().exp_.new().normal_.mul().add_", "logvar.mul", "logvar.mul().exp_.new", "logvar.mul().exp_.new().normal_.mul", "logvar.mul().exp_.size"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "std", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "eps", "=", "std", ".", "new", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "", "else", ":", "\n", "            ", "return", "mu", "\n", "", "", "def", "encode", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.com_enc2.encode": [[1167, 1177], ["image_models4.com_enc2.relu", "image_models4.com_enc2.relu", "image_models4.com_enc2.bn1", "image_models4.com_enc2.conv3", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "image_models4.com_enc2.bottle_neck1", "image_models4.com_enc2.bottle_neck2", "image_models4.com_enc2.reparameterize", "image_models4.com_enc2.conv1", "image_models4.com_enc2.conv2"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.comrecCNN.reparameterize"], ["", "", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "torch", ".", "flatten", "(", "out", ",", "1", ")", "\n", "mu", "=", "self", ".", "bottle_neck1", "(", "out", ")", "\n", "logvar", "=", "self", ".", "bottle_neck2", "(", "out", ")", "\n", "out", "=", "self", ".", "reparameterize", "(", "mu", ",", "logvar", ")", "\n", "return", "out", ",", "mu", ",", "logvar", "\n", "", "", "class", "com_dec2", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.com_dec2.__init__": [[1178, 1197], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "image_models4.Interpolate", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "com_dec2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "up_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "HIDDEN", ",", "8", "*", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "self", ".", "deconv0", "=", "nn", ".", "Conv2d", "(", "8", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "interpolate", "=", "Interpolate", "(", "size", "=", "HEIGHT", ",", "mode", "=", "'bicubic'", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "deconv_n", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_n", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "CHANNELS", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "def", "decode", "(", "self", ",", "z", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.com_dec2.decode": [[1197, 1211], ["image_models4.com_dec2.up_neck", "image_models4.com_dec2.view", "image_models4.com_dec2.deconv0", "image_models4.com_dec2.interpolate", "image_models4.com_dec2.relu", "image_models4.com_dec2.relu", "image_models4.com_dec2.bn2", "range", "image_models4.com_dec2.deconv3", "image_models4.com_dec2.deconv1", "image_models4.com_dec2.deconv2", "image_models4.com_dec2.relu", "image_models4.com_dec2.bn_n", "image_models4.com_dec2.deconv_n"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "        ", "z", "=", "self", ".", "up_neck", "(", "z", ")", "\n", "z", "=", "z", ".", "view", "(", "-", "1", ",", "8", ",", "(", "HEIGHT", "//", "2", ")", ",", "(", "WIDTH", "//", "2", ")", ")", "\n", "z", "=", "self", ".", "deconv0", "(", "z", ")", "\n", "upscaled_image", "=", "self", ".", "interpolate", "(", "z", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv1", "(", "upscaled_image", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv_n", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn_n", "(", "out", ")", "\n", "", "out", "=", "self", ".", "deconv3", "(", "out", ")", "\n", "final", "=", "upscaled_image", "+", "out", "\n", "return", "final", ",", "out", ",", "upscaled_image", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.comrec2.__init__": [[1213, 1220], ["torch.Module.__init__", "image_models4.com_enc2", "image_models4.com_dec2"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "comrec2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "self", ".", "enco", "=", "com_enc2", "(", ")", "\n", "self", ".", "deco", "=", "com_dec2", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.comrec2.forward": [[1222, 1226], ["image_models4.comrec2.enco.encode", "image_models4.comrec2.deco.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "com", ",", "mu", ",", "logvar", "=", "self", ".", "enco", ".", "encode", "(", "x", ")", "\n", "final", ",", "out", ",", "upscaled_image", ",", "com_img", "=", "self", ".", "deco", ".", "decode", "(", "com", ")", "\n", "return", "final", ",", "out", ",", "upscaled_image", ",", "com_img", ",", "x", ",", "mu", ",", "logvar", "\n", "########################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.comrecCNN.__init__": [[1230, 1268], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "image_models4.Interpolate", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "comrecCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "#CHANNEL X H X W ", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "#64 X H X W ", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "#64 X H/2 X W/2 ", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "#64 X H/2 X W/2 ", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "#64 X H/4 X W/4 ", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "64", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "#CHANNEL X H/4 X W/4 ", "\n", "\n", "# Decoder", "\n", "#TODO : try ConvTranspose2d", "\n", "#CHANNEL X H/4 X W/4 ", "\n", "self", ".", "deconv0", "=", "nn", ".", "ConvTranspose2d", "(", "CHANNELS", ",", "CHANNELS", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "#CHANNEL X H/2 X W/2 ", "\n", "self", ".", "interpolate", "=", "Interpolate", "(", "size", "=", "HEIGHT", ",", "mode", "=", "'bilinear'", ")", "\n", "#CHANNEL X H X W ", "\n", "self", ".", "deconv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "#64 X H X W ", "\n", "self", ".", "deconv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "deconv_n", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_n", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "CHANNELS", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "#CHANNEL X H X W ", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.comrecCNN.encode": [[1269, 1276], ["image_models4.comrecCNN.relu", "image_models4.comrecCNN.relu", "image_models4.comrecCNN.bn1", "image_models4.comrecCNN.relu", "image_models4.comrecCNN.bn2", "image_models4.comrecCNN.conv4", "image_models4.comrecCNN.conv1", "image_models4.comrecCNN.conv2", "image_models4.comrecCNN.conv3"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "return", "self", ".", "conv4", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.comrecCNN.reparameterize": [[1278, 1280], ["None"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.comrecCNN.decode": [[1281, 1293], ["image_models4.comrecCNN.deconv0", "image_models4.comrecCNN.interpolate", "image_models4.comrecCNN.relu", "image_models4.comrecCNN.relu", "image_models4.comrecCNN.bn2", "range", "image_models4.comrecCNN.deconv3", "image_models4.comrecCNN.deconv1", "image_models4.comrecCNN.deconv2", "image_models4.comrecCNN.relu", "image_models4.comrecCNN.bn_n", "image_models4.comrecCNN.deconv_n"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "    ", "z", "=", "self", ".", "deconv0", "(", "z", ")", "\n", "upscaled_image", "=", "self", ".", "interpolate", "(", "z", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv1", "(", "upscaled_image", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "      ", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv_n", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn_n", "(", "out", ")", "\n", "", "out", "=", "self", ".", "deconv3", "(", "out", ")", "\n", "final", "=", "upscaled_image", "+", "out", "\n", "return", "final", ",", "out", ",", "upscaled_image", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.comrecCNN.forward": [[1295, 1299], ["image_models4.comrecCNN.encode", "image_models4.comrecCNN.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "com_img", "=", "self", ".", "encode", "(", "x", ")", "\n", "final", ",", "out", ",", "upscaled_image", "=", "self", ".", "decode", "(", "com_img", ")", "\n", "return", "final", ",", "out", ",", "upscaled_image", ",", "com_img", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.Identity.__init__": [[1302, 1304], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.Identity.forward": [[1305, 1307], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "#################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.ImageEncoder.__init__": [[1316, 1322], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "device", ",", "vae", "=", "False", ")", ":", "\n", "        ", "super", "(", "ImageEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "vae", "=", "vae", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.ImageEncoder.forward": [[1327, 1349], ["image_models4.ImageEncoder.model", "torchvision.models.utils.sample_z", "torchvision.models.utils.sample_z.size", "torchvision.models.utils.sample_z.size"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.sample_z"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "enc", "=", "self", ".", "model", "(", "x", ")", "\n", "#print('encoder size:', enc.size())", "\n", "\n", "if", "self", ".", "vae", ":", "\n", "# z = self.vae_transform(enc)", "\n", "            ", "mu", "=", "enc", "[", ":", ",", ":", "enc", ".", "size", "(", ")", "[", "1", "]", "//", "2", "]", "\n", "#print('mu size:', mu.size())", "\n", "log_var", "=", "enc", "[", ":", ",", "enc", ".", "size", "(", ")", "[", "1", "]", "//", "2", ":", "]", "\n", "#print('log size:', log_var.size())", "\n", "\n", "if", "self", ".", "training", ":", "\n", "#print('training mode; taking samples')", "\n", "                ", "enc", "=", "sample_z", "(", "mu", ",", "log_var", ",", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "#print('testing mode; taking mean')", "\n", "                ", "enc", "=", "mu", "\n", "", "", "else", ":", "\n", "            ", "mu", ",", "log_var", "=", "None", ",", "None", "\n", "#print('new encode size:', enc.size())", "\n", "\n", "", "return", "enc", ",", "mu", ",", "log_var", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.conv3x3": [[40, 44], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "#only changes number of channels", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.upBlock": [[46, 54], ["torch.Sequential", "torch.Upsample", "image_models4.conv3x3", "torch.BatchNorm2d", "image_models4.GLU"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["", "def", "upBlock", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "conv3x3", "(", "in_planes", ",", "out_planes", "*", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "*", "2", ")", ",", "\n", "GLU", "(", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.set_parameter_requires_grad": [[1309, 1313], ["model.parameters"], "function", ["None"], ["", "", "def", "set_parameter_requires_grad", "(", "model", ",", "feature_extracting", ")", ":", "\n", "    ", "if", "feature_extracting", ":", "\n", "        ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models4.initialize_torchvision_model": [[1351, 1493], ["torchvision.models.resnet18", "image_models4.set_parameter_requires_grad", "image_models4.Identity", "torch.Linear", "torch.Linear", "image_models4.comrecCNN", "image_models4.set_parameter_requires_grad", "image_models4.vai", "image_models4.set_parameter_requires_grad", "image_models4.comrec1", "image_models4.set_parameter_requires_grad", "image_models4.comrec2", "image_models4.set_parameter_requires_grad", "image_models4.CAE8", "image_models4.set_parameter_requires_grad", "image_models4.CAE16", "image_models4.set_parameter_requires_grad", "image_models4.CAE32", "image_models4.set_parameter_requires_grad", "image_models4.CAEBo", "image_models4.set_parameter_requires_grad", "torchvision.models.resnet50", "image_models4.set_parameter_requires_grad", "torch.Linear", "torch.Linear", "torchvision.models.alexnet", "image_models4.set_parameter_requires_grad", "torch.Linear", "torchvision.models.vgg11_bn", "image_models4.set_parameter_requires_grad", "torch.Linear", "torchvision.models.squeezenet1_0", "image_models4.set_parameter_requires_grad", "torch.Conv2d", "torchvision.models.densenet121", "image_models4.set_parameter_requires_grad", "torch.Linear", "torchvision.models.inception_v3", "image_models4.set_parameter_requires_grad", "torch.Linear", "torch.Linear", "print", "exit"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad"], ["", "", "def", "initialize_torchvision_model", "(", "model_name", ",", "output_dim", ",", "feature_extract", ",", "device", ",", "use_pretrained", "=", "True", ",", "vae", "=", "False", ")", ":", "\n", "# Initialize these variables which will be set in this if statement. Each of these", "\n", "#   variables is model specific.", "\n", "    ", "model_ft", "=", "None", "\n", "input_size", "=", "0", "\n", "\n", "if", "model_name", "==", "\"resnet18\"", ":", "\n", "        ", "\"\"\" Resnet18\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "resnet18", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "model_ft", ".", "avgpool", "=", "Identity", "(", ")", "##############average pool replaced by identity####", "\n", "#num_ftrs = model_ft.fc.in_features", "\n", "num_ftrs", "=", "model_ft", ".", "fc", ".", "in_features", "*", "7", "*", "7", "# as average pooling is replaced by Identity, infeatures are multipleid with kernel size", "\n", "if", "vae", ":", "#vae changes: reparameterization at vae size down samples by 2 so we multiply by 2 to maintain consistency in the pipeline", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", "*", "2", ")", "#vae changes", "\n", "", "else", ":", "#vae chages", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "#vae changes", "\n", "#model_ft.fc = nn.Linear(num_ftrs, output_dim) #vae changes", "\n", "", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"comrecCNN\"", ":", "\n", "        ", "\"\"\" comrecCNN\n        \"\"\"", "\n", "model_ft", "=", "comrecCNN", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"vai\"", ":", "\n", "        ", "\"\"\" vai\n        \"\"\"", "\n", "model_ft", "=", "vai", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"comrec1\"", ":", "\n", "        ", "\"\"\" comrec\n        \"\"\"", "\n", "model_ft", "=", "comrec1", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"comrec2\"", ":", "\n", "        ", "\"\"\" comrec2\n        \"\"\"", "\n", "model_ft", "=", "comrec2", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"CAE8\"", ":", "\n", "        ", "\"\"\" CAE8\n        \"\"\"", "\n", "model_ft", "=", "CAE8", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"CAE16\"", ":", "\n", "        ", "\"\"\" CAE16\n        \"\"\"", "\n", "model_ft", "=", "CAE16", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"CAE32\"", ":", "\n", "        ", "\"\"\" CAE32\n        \"\"\"", "\n", "model_ft", "=", "CAE32", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"CAEBo\"", ":", "\n", "        ", "\"\"\" CAEBo\n        \"\"\"", "\n", "model_ft", "=", "CAEBo", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"resnet50\"", ":", "\n", "        ", "\"\"\" Resnet50\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "resnet50", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "fc", ".", "in_features", "\n", "if", "vae", ":", "#vae changes: reparameterization at vae size down samples by 2 so we multiply by 2 to maintain consistency in the pipeline", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", "*", "2", ")", "#vae changes", "\n", "", "else", ":", "#vae chages", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "#vae changes", "\n", "#model_ft.fc = nn.Linear(num_ftrs, output_dim) #vae changes", "\n", "", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"alexnet\"", ":", "\n", "        ", "\"\"\" Alexnet\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "alexnet", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", "[", "6", "]", ".", "in_features", "\n", "model_ft", ".", "classifier", "[", "6", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"vgg\"", ":", "\n", "        ", "\"\"\" VGG11_bn\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "vgg11_bn", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", "[", "6", "]", ".", "in_features", "\n", "model_ft", ".", "classifier", "[", "6", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"squeezenet\"", ":", "\n", "        ", "\"\"\" Squeezenet\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "squeezenet1_0", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "model_ft", ".", "classifier", "[", "1", "]", "=", "nn", ".", "Conv2d", "(", "512", ",", "output_dim", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "model_ft", ".", "num_classes", "=", "output_dim", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"densenet\"", ":", "\n", "        ", "\"\"\" Densenet\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "densenet121", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", ".", "in_features", "\n", "model_ft", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"inception\"", ":", "\n", "        ", "\"\"\" Inception v3\n        Be careful, expects (299,299) sized images and has auxiliary output\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "inception_v3", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "# Handle the auxilary net", "\n", "num_ftrs", "=", "model_ft", ".", "AuxLogits", ".", "fc", ".", "in_features", "\n", "model_ft", ".", "AuxLogits", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "# Handle the primary net", "\n", "num_ftrs", "=", "model_ft", ".", "fc", ".", "in_features", "\n", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "299", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Invalid model name, exiting...\"", ")", "\n", "exit", "(", ")", "\n", "\n", "\n", "#model_ft = ImageEncoder(model_ft, vae=vae, device=device)", "\n", "\n", "", "return", "model_ft", ",", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.GLU.__init__": [[22, 24], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.GLU.forward": [[25, 30], ["x.size", "int", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "nc", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "nc", "%", "2", "==", "0", ",", "'channels dont divide 2!'", "\n", "nc", "=", "int", "(", "nc", "/", "2", ")", "\n", "return", "x", "[", ":", ",", ":", "nc", "]", "*", "F", ".", "sigmoid", "(", "x", "[", ":", ",", "nc", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.INIT_STAGE_G.__init__": [[47, 52], ["torch.Module.__init__", "image_models5.INIT_STAGE_G.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ")", ":", "\n", "        ", "super", "(", "INIT_STAGE_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "self", ".", "in_dim", "=", "indim", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.INIT_STAGE_G.define_module": [[53, 65], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "image_models5.upBlock", "image_models5.upBlock", "image_models5.upBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "image_models5.GLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "in_dim", "=", "self", ".", "in_dim", "\n", "ngf", "=", "self", ".", "gf_dim", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "ngf", "*", "4", "*", "4", "*", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ngf", "*", "4", "*", "4", "*", "2", ")", ",", "\n", "GLU", "(", ")", ")", "\n", "\n", "\n", "self", ".", "upsample1", "=", "upBlock", "(", "ngf", ",", "ngf", "//", "2", ")", "\n", "self", ".", "upsample2", "=", "upBlock", "(", "ngf", "//", "2", ",", "ngf", "//", "4", ")", "\n", "self", ".", "upsample3", "=", "upBlock", "(", "ngf", "//", "4", ",", "ngf", "//", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.INIT_STAGE_G.forward": [[67, 82], ["image_models5.INIT_STAGE_G.fc", "image_models5.INIT_STAGE_G.view", "image_models5.INIT_STAGE_G.upsample1", "image_models5.INIT_STAGE_G.upsample2", "image_models5.INIT_STAGE_G.upsample3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_code", ")", ":", "\n", "\n", "        ", "in_code", "=", "z_code", "\n", "# state size 8ngf x 4 x 4", "\n", "out_code", "=", "self", ".", "fc", "(", "in_code", ")", "\n", "out_code", "=", "out_code", ".", "view", "(", "-", "1", ",", "self", ".", "gf_dim", ",", "4", ",", "4", ")", "\n", "# state size 4ngf x 8 x 8", "\n", "out_code", "=", "self", ".", "upsample1", "(", "out_code", ")", "\n", "# state size 2ngf x 16 x 16", "\n", "out_code", "=", "self", ".", "upsample2", "(", "out_code", ")", "\n", "# state size ngf x 32 x 32", "\n", "out_code", "=", "self", ".", "upsample3", "(", "out_code", ")", "\n", "\n", "\n", "return", "out_code", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.GET_IMAGE_G.__init__": [[84, 90], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "image_models5.conv3x3", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ")", ":", "\n", "        ", "super", "(", "GET_IMAGE_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "self", ".", "img", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "ngf", ",", "ngf", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.GET_IMAGE_G.forward": [[92, 95], ["image_models5.GET_IMAGE_G.img"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h_code", ")", ":", "\n", "        ", "out_img", "=", "self", ".", "img", "(", "h_code", ")", "\n", "return", "out_img", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.G_NET.__init__": [[97, 101], ["torch.Module.__init__", "image_models5.G_NET.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "G_NET", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.G_NET.define_module": [[102, 105], ["image_models5.INIT_STAGE_G", "image_models5.GET_IMAGE_G"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "            ", "self", ".", "h_net1", "=", "INIT_STAGE_G", "(", "self", ".", "gf_dim", "*", "8", ")", "\n", "self", ".", "img_net1", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", ")", "\n", "", "def", "forward", "(", "self", ",", "text_embedding", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.G_NET.forward": [[105, 113], ["image_models5.G_NET.h_net1", "image_models5.G_NET.img_net1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "text_embedding", ")", ":", "\n", "#if cfg.GAN.B_CONDITION and text_embedding is not None:", "\n", "#    c_code, mu, logvar = self.ca_net(text_embedding)", "\n", "#else:", "\n", "#    c_code, mu, logvar = z_code, None, None", "\n", "        ", "h_code1", "=", "self", ".", "h_net1", "(", "text_embedding", ")", "\n", "fake_img1", "=", "self", ".", "img_net1", "(", "h_code1", ")", "\n", "return", "fake_img1", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.CAE32.__init__": [[122, 237], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAE32", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoded", "=", "None", "\n", "\n", "# ENCODER", "\n", "\n", "# 64x64x64", "\n", "self", ".", "e_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 32x32x32", "\n", "self", ".", "e_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "# DECODER", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_up_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 256x128x128", "\n", "self", ".", "d_up_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 3x128x128", "\n", "self", ".", "d_up_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "2", ",", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.CAE32.forward": [[239, 259], ["image_models5.CAE32.e_conv_1", "image_models5.CAE32.e_conv_2", "image_models5.CAE32.e_conv_3", "image_models5.CAE32.decode", "image_models5.CAE32.e_block_1", "image_models5.CAE32.e_block_2", "image_models5.CAE32.e_block_3", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ec1", "=", "self", ".", "e_conv_1", "(", "x", ")", "\n", "ec2", "=", "self", ".", "e_conv_2", "(", "ec1", ")", "\n", "eblock1", "=", "self", ".", "e_block_1", "(", "ec2", ")", "+", "ec2", "\n", "eblock2", "=", "self", ".", "e_block_2", "(", "eblock1", ")", "+", "eblock1", "\n", "eblock3", "=", "self", ".", "e_block_3", "(", "eblock2", ")", "+", "eblock2", "\n", "ec3", "=", "self", ".", "e_conv_3", "(", "eblock3", ")", "# in [-1, 1] from tanh activation", "\n", "\n", "# stochastic binarization", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand", "=", "torch", ".", "rand", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "prob", "=", "(", "1", "+", "ec3", ")", "/", "2", "\n", "eps", "=", "torch", ".", "zeros", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "eps", "[", "rand", "<=", "prob", "]", "=", "(", "1", "-", "ec3", ")", "[", "rand", "<=", "prob", "]", "\n", "eps", "[", "rand", ">", "prob", "]", "=", "(", "-", "ec3", "-", "1", ")", "[", "rand", ">", "prob", "]", "\n", "\n", "# encoded tensor", "\n", "", "self", ".", "encoded", "=", "0.5", "*", "(", "ec3", "+", "eps", "+", "1", ")", "# (-1|1) -> (0|1)", "\n", "\n", "return", "self", ".", "decode", "(", "self", ".", "encoded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.CAE32.decode": [[260, 271], ["image_models5.CAE32.d_up_conv_1", "image_models5.CAE32.d_up_conv_2", "image_models5.CAE32.d_up_conv_3", "image_models5.CAE32.d_block_1", "image_models5.CAE32.d_block_2", "image_models5.CAE32.d_block_3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "encoded", ")", ":", "\n", "        ", "y", "=", "encoded", "*", "2.0", "-", "1", "# (0|1) -> (-1|1)", "\n", "\n", "uc1", "=", "self", ".", "d_up_conv_1", "(", "y", ")", "\n", "dblock1", "=", "self", ".", "d_block_1", "(", "uc1", ")", "+", "uc1", "\n", "dblock2", "=", "self", ".", "d_block_2", "(", "dblock1", ")", "+", "dblock1", "\n", "dblock3", "=", "self", ".", "d_block_3", "(", "dblock2", ")", "+", "dblock2", "\n", "uc2", "=", "self", ".", "d_up_conv_2", "(", "dblock3", ")", "\n", "dec", "=", "self", ".", "d_up_conv_3", "(", "uc2", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.CAE16.__init__": [[279, 395], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAE16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoded", "=", "None", "\n", "\n", "# ENCODER", "\n", "\n", "# 64x64x64", "\n", "self", ".", "e_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 16x16x16", "\n", "self", ".", "e_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "# DECODER", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_up_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 256x64x64", "\n", "self", ".", "d_up_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 3x128x128", "\n", "self", ".", "d_up_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.CAE16.forward": [[397, 417], ["image_models5.CAE16.e_conv_1", "image_models5.CAE16.e_conv_2", "image_models5.CAE16.e_conv_3", "image_models5.CAE16.decode", "image_models5.CAE16.e_block_1", "image_models5.CAE16.e_block_2", "image_models5.CAE16.e_block_3", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ec1", "=", "self", ".", "e_conv_1", "(", "x", ")", "\n", "ec2", "=", "self", ".", "e_conv_2", "(", "ec1", ")", "\n", "eblock1", "=", "self", ".", "e_block_1", "(", "ec2", ")", "+", "ec2", "\n", "eblock2", "=", "self", ".", "e_block_2", "(", "eblock1", ")", "+", "eblock1", "\n", "eblock3", "=", "self", ".", "e_block_3", "(", "eblock2", ")", "+", "eblock2", "\n", "ec3", "=", "self", ".", "e_conv_3", "(", "eblock3", ")", "# in [-1, 1] from tanh activation", "\n", "\n", "# stochastic binarization", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand", "=", "torch", ".", "rand", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "prob", "=", "(", "1", "+", "ec3", ")", "/", "2", "\n", "eps", "=", "torch", ".", "zeros", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "eps", "[", "rand", "<=", "prob", "]", "=", "(", "1", "-", "ec3", ")", "[", "rand", "<=", "prob", "]", "\n", "eps", "[", "rand", ">", "prob", "]", "=", "(", "-", "ec3", "-", "1", ")", "[", "rand", ">", "prob", "]", "\n", "\n", "# encoded tensor", "\n", "", "self", ".", "encoded", "=", "0.5", "*", "(", "ec3", "+", "eps", "+", "1", ")", "# (-1|1) -> (0|1)", "\n", "\n", "return", "self", ".", "decode", "(", "self", ".", "encoded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.CAE16.decode": [[418, 429], ["image_models5.CAE16.d_up_conv_1", "image_models5.CAE16.d_up_conv_2", "image_models5.CAE16.d_up_conv_3", "image_models5.CAE16.d_block_1", "image_models5.CAE16.d_block_2", "image_models5.CAE16.d_block_3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "encoded", ")", ":", "\n", "        ", "y", "=", "encoded", "*", "2.0", "-", "1", "# (0|1) -> (-1|1)", "\n", "\n", "uc1", "=", "self", ".", "d_up_conv_1", "(", "y", ")", "\n", "dblock1", "=", "self", ".", "d_block_1", "(", "uc1", ")", "+", "uc1", "\n", "dblock2", "=", "self", ".", "d_block_2", "(", "dblock1", ")", "+", "dblock1", "\n", "dblock3", "=", "self", ".", "d_block_3", "(", "dblock2", ")", "+", "dblock2", "\n", "uc2", "=", "self", ".", "d_up_conv_2", "(", "dblock3", ")", "\n", "dec", "=", "self", ".", "d_up_conv_3", "(", "uc2", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.CAE8.__init__": [[439, 565], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAE8", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoded", "=", "None", "\n", "\n", "# ENCODER", "\n", "\n", "# 64x64x64", "\n", "self", ".", "e_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x16x16", "\n", "self", ".", "e_pool_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x16x16", "\n", "self", ".", "e_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x16x16", "\n", "self", ".", "e_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 16x8x8", "\n", "self", ".", "e_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "# DECODER", "\n", "\n", "# 128x16x16", "\n", "self", ".", "d_up_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x16x16", "\n", "self", ".", "d_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_up_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 256x64x64", "\n", "self", ".", "d_up_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 3x128x128", "\n", "self", ".", "d_up_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.CAE8.forward": [[567, 589], ["image_models5.CAE8.e_conv_1", "image_models5.CAE8.e_conv_2", "image_models5.CAE8.e_block_1", "image_models5.CAE8.e_pool_1", "image_models5.CAE8.e_conv_3", "image_models5.CAE8.decode", "image_models5.CAE8.e_block_2", "image_models5.CAE8.e_block_3", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# ENCODE", "\n", "        ", "ec1", "=", "self", ".", "e_conv_1", "(", "x", ")", "\n", "ec2", "=", "self", ".", "e_conv_2", "(", "ec1", ")", "\n", "eblock1", "=", "self", ".", "e_block_1", "(", "ec2", ")", "\n", "eblock1", "=", "self", ".", "e_pool_1", "(", "ec2", "+", "eblock1", ")", "\n", "eblock2", "=", "self", ".", "e_block_2", "(", "eblock1", ")", "+", "eblock1", "\n", "eblock3", "=", "self", ".", "e_block_3", "(", "eblock2", ")", "+", "eblock2", "\n", "ec3", "=", "self", ".", "e_conv_3", "(", "eblock3", ")", "# in [-1, 1] from tanh activation", "\n", "\n", "# stochastic binarization", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand", "=", "torch", ".", "rand", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "prob", "=", "(", "1", "+", "ec3", ")", "/", "2", "\n", "eps", "=", "torch", ".", "zeros", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "eps", "[", "rand", "<=", "prob", "]", "=", "(", "1", "-", "ec3", ")", "[", "rand", "<=", "prob", "]", "\n", "eps", "[", "rand", ">", "prob", "]", "=", "(", "-", "ec3", "-", "1", ")", "[", "rand", ">", "prob", "]", "\n", "\n", "# encoded tensor", "\n", "", "self", ".", "encoded", "=", "0.5", "*", "(", "ec3", "+", "eps", "+", "1", ")", "# (-1|1) -> (0|1)", "\n", "\n", "return", "self", ".", "decode", "(", "self", ".", "encoded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.CAE8.decode": [[590, 602], ["image_models5.CAE8.d_up_conv_1", "image_models5.CAE8.d_up_1", "image_models5.CAE8.d_up_conv_2", "image_models5.CAE8.d_up_conv_3", "image_models5.CAE8.d_block_1", "image_models5.CAE8.d_block_2", "image_models5.CAE8.d_block_3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "enc", ")", ":", "\n", "        ", "y", "=", "enc", "*", "2.0", "-", "1", "# (0|1) -> (-1, 1)", "\n", "\n", "uc1", "=", "self", ".", "d_up_conv_1", "(", "y", ")", "\n", "dblock1", "=", "self", ".", "d_block_1", "(", "uc1", ")", "+", "uc1", "\n", "dup1", "=", "self", ".", "d_up_1", "(", "dblock1", ")", "\n", "dblock2", "=", "self", ".", "d_block_2", "(", "dup1", ")", "+", "dup1", "\n", "dblock3", "=", "self", ".", "d_block_3", "(", "dblock2", ")", "+", "dblock2", "\n", "uc2", "=", "self", ".", "d_up_conv_2", "(", "dblock3", ")", "\n", "dec", "=", "self", ".", "d_up_conv_3", "(", "uc2", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.CAEB.__init__": [[611, 737], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "image_models5.G_NET", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAEB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoded", "=", "None", "\n", "\n", "# ENCODER", "\n", "\n", "# 64x64x64", "\n", "self", ".", "e_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 32x32x32", "\n", "self", ".", "e_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "self", ".", "bottle_neck1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "32", "*", "32", ",", "32", "*", "32", "*", "16", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "self", ".", "bottle_neck2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "32", "*", "16", ",", "32", "*", "32", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "\n", "self", ".", "bottle_neck3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "32", "*", "4", ",", "indim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "reverse_bottle", "=", "G_NET", "(", ")", "\n", "# DECODER", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_up_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 256x128x128", "\n", "self", ".", "d_up_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 3x128x128", "\n", "self", ".", "d_up_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "2", ",", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.CAEB.forward": [[739, 760], ["image_models5.CAEB.e_conv_1", "image_models5.CAEB.e_conv_2", "image_models5.CAEB.e_conv_3", "image_models5.CAEB.bottle_func", "image_models5.CAEB.e_block_1", "image_models5.CAEB.e_block_2", "image_models5.CAEB.e_block_3", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAEBo.bottle_func"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ec1", "=", "self", ".", "e_conv_1", "(", "x", ")", "\n", "ec2", "=", "self", ".", "e_conv_2", "(", "ec1", ")", "\n", "eblock1", "=", "self", ".", "e_block_1", "(", "ec2", ")", "+", "ec2", "\n", "eblock2", "=", "self", ".", "e_block_2", "(", "eblock1", ")", "+", "eblock1", "\n", "eblock3", "=", "self", ".", "e_block_3", "(", "eblock2", ")", "+", "eblock2", "\n", "ec3", "=", "self", ".", "e_conv_3", "(", "eblock3", ")", "# in [-1, 1] from tanh activation", "\n", "\n", "# stochastic binarization", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand", "=", "torch", ".", "rand", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "prob", "=", "(", "1", "+", "ec3", ")", "/", "2", "\n", "eps", "=", "torch", ".", "zeros", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "eps", "[", "rand", "<=", "prob", "]", "=", "(", "1", "-", "ec3", ")", "[", "rand", "<=", "prob", "]", "\n", "eps", "[", "rand", ">", "prob", "]", "=", "(", "-", "ec3", "-", "1", ")", "[", "rand", ">", "prob", "]", "\n", "\n", "# encoded tensor", "\n", "", "self", ".", "encoded", "=", "0.5", "*", "(", "ec3", "+", "eps", "+", "1", ")", "# (-1|1) -> (0|1)", "\n", "\n", "#return self.decode(self.encoded)", "\n", "return", "self", ".", "bottle_func", "(", "self", ".", "encoded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.CAEB.bottle_func": [[761, 774], ["torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "image_models5.CAEB.bottle_neck1", "image_models5.CAEB.bottle_neck2", "image_models5.CAEB.bottle_neck3", "image_models5.CAEB.reverse_bottle", "image_models5.CAEB.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "bottle_func", "(", "self", ",", "encoded", ")", ":", "\n", "#print(\"encoded.shape\", encoded.shape)", "\n", "        ", "x", "=", "torch", ".", "flatten", "(", "encoded", ",", "1", ")", "\n", "#print(\"b1.shape\", x.shape)", "\n", "x", "=", "self", ".", "bottle_neck1", "(", "x", ")", "\n", "#print(\"b2.shape\", x.shape)", "\n", "x", "=", "self", ".", "bottle_neck2", "(", "x", ")", "\n", "#print(\"b3.shape\", x.shape)", "\n", "comp", "=", "self", ".", "bottle_neck3", "(", "x", ")", "\n", "#print(\"comp.shape\", comp.shape)", "\n", "x", "=", "self", ".", "reverse_bottle", "(", "comp", ")", "\n", "#print(\"x.shape\", x.shape)", "\n", "return", "self", ".", "decode", "(", "x", ")", ",", "comp", ",", "x", ",", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.CAEB.decode": [[775, 786], ["image_models5.CAEB.d_up_conv_1", "image_models5.CAEB.d_up_conv_2", "image_models5.CAEB.d_up_conv_3", "image_models5.CAEB.d_block_1", "image_models5.CAEB.d_block_2", "image_models5.CAEB.d_block_3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "encoded", ")", ":", "\n", "        ", "y", "=", "encoded", "*", "2.0", "-", "1", "# (0|1) -> (-1|1)", "\n", "\n", "uc1", "=", "self", ".", "d_up_conv_1", "(", "y", ")", "\n", "dblock1", "=", "self", ".", "d_block_1", "(", "uc1", ")", "+", "uc1", "\n", "dblock2", "=", "self", ".", "d_block_2", "(", "dblock1", ")", "+", "dblock1", "\n", "dblock3", "=", "self", ".", "d_block_3", "(", "dblock2", ")", "+", "dblock2", "\n", "uc2", "=", "self", ".", "d_up_conv_2", "(", "dblock3", ")", "\n", "dec", "=", "self", ".", "d_up_conv_3", "(", "uc2", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.CAEBo.__init__": [[794, 915], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "image_models5.G_NET", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAEBo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoded", "=", "None", "\n", "\n", "# ENCODER", "\n", "\n", "# 64x64x64", "\n", "self", ".", "e_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 32x32x32", "\n", "self", ".", "e_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "16", ",", "16", ")", ")", "\n", "self", ".", "bottle_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "16", "*", "16", ",", "indim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "\n", "self", ".", "reverse_bottle", "=", "G_NET", "(", ")", "\n", "# DECODER", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_up_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 256x128x128", "\n", "self", ".", "d_up_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 3x128x128", "\n", "self", ".", "d_up_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "2", ",", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.CAEBo.forward": [[917, 938], ["image_models5.CAEBo.e_conv_1", "image_models5.CAEBo.e_conv_2", "image_models5.CAEBo.e_conv_3", "image_models5.CAEBo.bottle_func", "image_models5.CAEBo.e_block_1", "image_models5.CAEBo.e_block_2", "image_models5.CAEBo.e_block_3", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAEBo.bottle_func"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ec1", "=", "self", ".", "e_conv_1", "(", "x", ")", "\n", "ec2", "=", "self", ".", "e_conv_2", "(", "ec1", ")", "\n", "eblock1", "=", "self", ".", "e_block_1", "(", "ec2", ")", "+", "ec2", "\n", "eblock2", "=", "self", ".", "e_block_2", "(", "eblock1", ")", "+", "eblock1", "\n", "eblock3", "=", "self", ".", "e_block_3", "(", "eblock2", ")", "+", "eblock2", "\n", "ec3", "=", "self", ".", "e_conv_3", "(", "eblock3", ")", "# in [-1, 1] from tanh activation", "\n", "\n", "# stochastic binarization", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand", "=", "torch", ".", "rand", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "prob", "=", "(", "1", "+", "ec3", ")", "/", "2", "\n", "eps", "=", "torch", ".", "zeros", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "eps", "[", "rand", "<=", "prob", "]", "=", "(", "1", "-", "ec3", ")", "[", "rand", "<=", "prob", "]", "\n", "eps", "[", "rand", ">", "prob", "]", "=", "(", "-", "ec3", "-", "1", ")", "[", "rand", ">", "prob", "]", "\n", "\n", "# encoded tensor", "\n", "", "self", ".", "encoded", "=", "0.5", "*", "(", "ec3", "+", "eps", "+", "1", ")", "# (-1|1) -> (0|1)", "\n", "\n", "#return self.decode(self.encoded)", "\n", "return", "self", ".", "bottle_func", "(", "self", ".", "encoded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.CAEBo.bottle_func": [[939, 950], ["image_models5.CAEBo.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "image_models5.CAEBo.bottle_neck", "image_models5.CAEBo.reverse_bottle", "image_models5.CAEBo.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "bottle_func", "(", "self", ",", "encoded", ")", ":", "\n", "#print(\"encoded.shape\", encoded.shape)", "\n", "        ", "x", "=", "self", ".", "avgpool", "(", "encoded", ")", "\n", "#print(\"avg.shape\", x.shape)", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "#print(\"b1.shape\", x.shape)", "\n", "comp", "=", "self", ".", "bottle_neck", "(", "x", ")", "\n", "#print(\"comp.shape\", comp.shape)", "\n", "x", "=", "self", ".", "reverse_bottle", "(", "comp", ")", "\n", "#print(\"x.shape\", x.shape)", "\n", "return", "self", ".", "decode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.CAEBo.decode": [[951, 962], ["image_models5.CAEBo.d_up_conv_1", "image_models5.CAEBo.d_up_conv_2", "image_models5.CAEBo.d_up_conv_3", "image_models5.CAEBo.d_block_1", "image_models5.CAEBo.d_block_2", "image_models5.CAEBo.d_block_3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "encoded", ")", ":", "\n", "        ", "y", "=", "encoded", "*", "2.0", "-", "1", "# (0|1) -> (-1|1)", "\n", "\n", "uc1", "=", "self", ".", "d_up_conv_1", "(", "y", ")", "\n", "dblock1", "=", "self", ".", "d_block_1", "(", "uc1", ")", "+", "uc1", "\n", "dblock2", "=", "self", ".", "d_block_2", "(", "dblock1", ")", "+", "dblock1", "\n", "dblock3", "=", "self", ".", "d_block_3", "(", "dblock2", ")", "+", "dblock2", "\n", "uc2", "=", "self", ".", "d_up_conv_2", "(", "dblock3", ")", "\n", "dec", "=", "self", ".", "d_up_conv_3", "(", "uc2", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.ResBlock.__init__": [[964, 978], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "layers.insert", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "mid_channels", "=", "None", ",", "bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "mid_channels", "is", "None", ":", "\n", "            ", "mid_channels", "=", "out_channels", "\n", "\n", "", "layers", "=", "[", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "mid_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "]", "\n", "if", "bn", ":", "\n", "            ", "layers", ".", "insert", "(", "2", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", "\n", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.ResBlock.forward": [[979, 981], ["image_models5.ResBlock.convs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "convs", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.vai.__init__": [[984, 1017], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "image_models5.ResBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "image_models5.ResBlock", "image_models5.ResBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "image_models5.ResBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d", "=", "64", ",", "kl_coef", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "vai", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "d", "//", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "d", "//", "2", ",", "d", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "ResBlock", "(", "d", ",", "d", ",", "bn", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d", ")", ",", "\n", "ResBlock", "(", "d", ",", "d", ",", "bn", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "ResBlock", "(", "d", ",", "d", ",", "bn", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d", ")", ",", "\n", "ResBlock", "(", "d", ",", "d", ",", "bn", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "d", ",", "d", "//", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "d", "//", "2", ",", "3", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "f", "=", "32", "# size of bottle neck image 32*32", "\n", "self", ".", "d", "=", "d", "\n", "self", ".", "fc11", "=", "nn", ".", "Linear", "(", "d", "*", "self", ".", "f", "**", "2", ",", "(", "d", "//", "8", ")", "*", "self", ".", "f", "**", "2", ")", "\n", "self", ".", "fc12", "=", "nn", ".", "Linear", "(", "d", "*", "self", ".", "f", "**", "2", ",", "(", "d", "//", "8", ")", "*", "self", ".", "f", "**", "2", ")", "\n", "self", ".", "fc13", "=", "nn", ".", "Linear", "(", "(", "d", "//", "8", ")", "*", "self", ".", "f", "**", "2", ",", "d", "*", "self", ".", "f", "**", "2", ")", "\n", "self", ".", "kl_coef", "=", "kl_coef", "\n", "self", ".", "kl_loss", "=", "0", "\n", "self", ".", "mse", "=", "0", "\n", "", "def", "encode", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.vai.encode": [[1017, 1021], ["image_models5.vai.encoder", "h1.view.view.view", "image_models5.vai.fc11", "image_models5.vai.fc12"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "h1", "=", "self", ".", "encoder", "(", "x", ")", "\n", "h1", "=", "h1", ".", "view", "(", "-", "1", ",", "self", ".", "d", "*", "self", ".", "f", "**", "2", ")", "\n", "return", "self", ".", "fc11", "(", "h1", ")", ",", "self", ".", "fc12", "(", "h1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.vai.reparameterize": [[1022, 1029], ["logvar.mul().exp_", "logvar.mul().exp_.new().normal_", "logvar.mul().exp_.new().normal_.mul().add_", "logvar.mul", "logvar.mul().exp_.new", "logvar.mul().exp_.new().normal_.mul", "logvar.mul().exp_.size"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "std", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "eps", "=", "std", ".", "new", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "", "else", ":", "\n", "            ", "return", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.vai.decode": [[1030, 1035], ["image_models5.vai.fc13", "z.view.view.view", "image_models5.vai.decoder", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "        ", "z", "=", "self", ".", "fc13", "(", "z", ")", "\n", "z", "=", "z", ".", "view", "(", "-", "1", ",", "self", ".", "d", ",", "self", ".", "f", ",", "self", ".", "f", ")", "\n", "h3", "=", "self", ".", "decoder", "(", "z", ")", "\n", "return", "torch", ".", "tanh", "(", "h3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.vai.forward": [[1036, 1040], ["image_models5.vai.encode", "image_models5.vai.reparameterize", "image_models5.vai.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.comrecCNN.reparameterize", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mu", ",", "logvar", "=", "self", ".", "encode", "(", "x", ")", "\n", "z", "=", "self", ".", "reparameterize", "(", "mu", ",", "logvar", ")", "\n", "return", "self", ".", "decode", "(", "z", ")", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.Interpolate.__init__": [[1056, 1061], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "mode", ")", ":", "\n", "        ", "super", "(", "Interpolate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "interp", "=", "nn", ".", "functional", ".", "interpolate", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.Interpolate.forward": [[1062, 1065], ["image_models5.Interpolate.interp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "interp", "(", "x", ",", "size", "=", "self", ".", "size", ",", "mode", "=", "self", ".", "mode", ",", "align_corners", "=", "False", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.com_enc.__init__": [[1067, 1084], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "com_enc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "self", ".", "lin1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "3", "*", "(", "HEIGHT", ")", "*", "(", "WIDTH", ")", ",", "HIDDEN", "*", "4", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "lin2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "HIDDEN", "*", "4", ",", "HIDDEN", "*", "2", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "bottle_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "HIDDEN", "*", "2", ",", "HIDDEN", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "def", "encode", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.com_enc.encode": [[1084, 1090], ["torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "image_models5.com_enc.lin1", "image_models5.com_enc.lin2", "image_models5.com_enc.bottle_neck"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "out", "=", "self", ".", "lin1", "(", "out", ")", "\n", "out", "=", "self", ".", "lin2", "(", "out", ")", "\n", "out", "=", "self", ".", "bottle_neck", "(", "out", ")", "\n", "return", "out", "\n", "", "", "class", "com_dec", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.com_dec.__init__": [[1091, 1105], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "com_dec", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dec1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "HIDDEN", ",", "HIDDEN", "*", "2", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "dec2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "HIDDEN", "*", "2", ",", "HIDDEN", "*", "4", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "up_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "HIDDEN", "*", "4", ",", "3", "*", "(", "HEIGHT", ")", "*", "(", "WIDTH", ")", ",", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "def", "decode", "(", "self", ",", "z", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.com_dec.decode": [[1105, 1114], ["image_models5.com_dec.dec1", "image_models5.com_dec.dec2", "image_models5.com_dec.up_neck", "z.view.view.view"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "        ", "z", "=", "self", ".", "dec1", "(", "z", ")", "\n", "z", "=", "self", ".", "dec2", "(", "z", ")", "\n", "z", "=", "self", ".", "up_neck", "(", "z", ")", "\n", "z", "=", "z", ".", "view", "(", "-", "1", ",", "3", ",", "HEIGHT", ",", "WIDTH", ")", "\n", "###z = 0.5*(z +1) #(-1/1 to 0/1 conversion)", "\n", "\n", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.comrec1.__init__": [[1116, 1123], ["torch.Module.__init__", "image_models5.com_enc", "image_models5.com_dec"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "comrec1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "self", ".", "enco", "=", "com_enc", "(", ")", "\n", "self", ".", "deco", "=", "com_dec", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.comrec1.forward": [[1125, 1129], ["image_models5.comrec1.enco.encode", "image_models5.comrec1.deco.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "com", "=", "self", ".", "enco", ".", "encode", "(", "x", ")", "\n", "final", "=", "self", ".", "deco", ".", "decode", "(", "com", ")", "\n", "return", "final", "\n", "########################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.comrecCNN.__init__": [[1133, 1171], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "image_models5.Interpolate", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "comrecCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "#CHANNEL X H X W ", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "#64 X H X W ", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "#64 X H/2 X W/2 ", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "#64 X H/2 X W/2 ", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "#64 X H/4 X W/4 ", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "64", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "#CHANNEL X H/4 X W/4 ", "\n", "\n", "# Decoder", "\n", "#TODO : try ConvTranspose2d", "\n", "#CHANNEL X H/4 X W/4 ", "\n", "self", ".", "deconv0", "=", "nn", ".", "ConvTranspose2d", "(", "CHANNELS", ",", "CHANNELS", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "#CHANNEL X H/2 X W/2 ", "\n", "self", ".", "interpolate", "=", "Interpolate", "(", "size", "=", "HEIGHT", ",", "mode", "=", "'bilinear'", ")", "\n", "#CHANNEL X H X W ", "\n", "self", ".", "deconv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "#64 X H X W ", "\n", "self", ".", "deconv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "deconv_n", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_n", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "CHANNELS", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "#CHANNEL X H X W ", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.comrecCNN.encode": [[1172, 1179], ["image_models5.comrecCNN.relu", "image_models5.comrecCNN.relu", "image_models5.comrecCNN.bn1", "image_models5.comrecCNN.relu", "image_models5.comrecCNN.bn2", "image_models5.comrecCNN.conv4", "image_models5.comrecCNN.conv1", "image_models5.comrecCNN.conv2", "image_models5.comrecCNN.conv3"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "return", "self", ".", "conv4", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.comrecCNN.reparameterize": [[1181, 1183], ["None"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.comrecCNN.decode": [[1184, 1196], ["image_models5.comrecCNN.deconv0", "image_models5.comrecCNN.interpolate", "image_models5.comrecCNN.relu", "image_models5.comrecCNN.relu", "image_models5.comrecCNN.bn2", "range", "image_models5.comrecCNN.deconv3", "image_models5.comrecCNN.deconv1", "image_models5.comrecCNN.deconv2", "image_models5.comrecCNN.relu", "image_models5.comrecCNN.bn_n", "image_models5.comrecCNN.deconv_n"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "    ", "z", "=", "self", ".", "deconv0", "(", "z", ")", "\n", "upscaled_image", "=", "self", ".", "interpolate", "(", "z", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv1", "(", "upscaled_image", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "      ", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv_n", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn_n", "(", "out", ")", "\n", "", "out", "=", "self", ".", "deconv3", "(", "out", ")", "\n", "final", "=", "upscaled_image", "+", "out", "\n", "return", "final", ",", "out", ",", "upscaled_image", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.comrecCNN.forward": [[1198, 1202], ["image_models5.comrecCNN.encode", "image_models5.comrecCNN.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "com_img", "=", "self", ".", "encode", "(", "x", ")", "\n", "final", ",", "out", ",", "upscaled_image", "=", "self", ".", "decode", "(", "com_img", ")", "\n", "return", "final", ",", "out", ",", "upscaled_image", ",", "com_img", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.Identity.__init__": [[1205, 1207], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.Identity.forward": [[1208, 1210], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "#################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.ImageEncoder.__init__": [[1219, 1225], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "device", ",", "vae", "=", "False", ")", ":", "\n", "        ", "super", "(", "ImageEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "vae", "=", "vae", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.ImageEncoder.forward": [[1230, 1252], ["image_models5.ImageEncoder.model", "torchvision.models.utils.sample_z", "torchvision.models.utils.sample_z.size", "torchvision.models.utils.sample_z.size"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.sample_z"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "enc", "=", "self", ".", "model", "(", "x", ")", "\n", "#print('encoder size:', enc.size())", "\n", "\n", "if", "self", ".", "vae", ":", "\n", "# z = self.vae_transform(enc)", "\n", "            ", "mu", "=", "enc", "[", ":", ",", ":", "enc", ".", "size", "(", ")", "[", "1", "]", "//", "2", "]", "\n", "#print('mu size:', mu.size())", "\n", "log_var", "=", "enc", "[", ":", ",", "enc", ".", "size", "(", ")", "[", "1", "]", "//", "2", ":", "]", "\n", "#print('log size:', log_var.size())", "\n", "\n", "if", "self", ".", "training", ":", "\n", "#print('training mode; taking samples')", "\n", "                ", "enc", "=", "sample_z", "(", "mu", ",", "log_var", ",", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "#print('testing mode; taking mean')", "\n", "                ", "enc", "=", "mu", "\n", "", "", "else", ":", "\n", "            ", "mu", ",", "log_var", "=", "None", ",", "None", "\n", "#print('new encode size:', enc.size())", "\n", "\n", "", "return", "enc", ",", "mu", ",", "log_var", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.conv3x3": [[31, 35], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "#only changes number of channels", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.upBlock": [[37, 45], ["torch.Sequential", "torch.Upsample", "image_models5.conv3x3", "torch.BatchNorm2d", "image_models5.GLU"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["", "def", "upBlock", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "conv3x3", "(", "in_planes", ",", "out_planes", "*", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "*", "2", ")", ",", "\n", "GLU", "(", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.set_parameter_requires_grad": [[1212, 1216], ["model.parameters"], "function", ["None"], ["", "", "def", "set_parameter_requires_grad", "(", "model", ",", "feature_extracting", ")", ":", "\n", "    ", "if", "feature_extracting", ":", "\n", "        ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models5.initialize_torchvision_model": [[1254, 1390], ["torchvision.models.resnet18", "image_models5.set_parameter_requires_grad", "image_models5.Identity", "torch.Linear", "torch.Linear", "image_models5.comrecCNN", "image_models5.set_parameter_requires_grad", "image_models5.vai", "image_models5.set_parameter_requires_grad", "image_models5.comrec1", "image_models5.set_parameter_requires_grad", "image_models5.CAE8", "image_models5.set_parameter_requires_grad", "image_models5.CAE16", "image_models5.set_parameter_requires_grad", "image_models5.CAE32", "image_models5.set_parameter_requires_grad", "image_models5.CAEBo", "image_models5.set_parameter_requires_grad", "torchvision.models.resnet50", "image_models5.set_parameter_requires_grad", "torch.Linear", "torch.Linear", "torchvision.models.alexnet", "image_models5.set_parameter_requires_grad", "torch.Linear", "torchvision.models.vgg11_bn", "image_models5.set_parameter_requires_grad", "torch.Linear", "torchvision.models.squeezenet1_0", "image_models5.set_parameter_requires_grad", "torch.Conv2d", "torchvision.models.densenet121", "image_models5.set_parameter_requires_grad", "torch.Linear", "torchvision.models.inception_v3", "image_models5.set_parameter_requires_grad", "torch.Linear", "torch.Linear", "print", "exit"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad"], ["", "", "def", "initialize_torchvision_model", "(", "model_name", ",", "output_dim", ",", "feature_extract", ",", "device", ",", "use_pretrained", "=", "True", ",", "vae", "=", "False", ")", ":", "\n", "# Initialize these variables which will be set in this if statement. Each of these", "\n", "#   variables is model specific.", "\n", "    ", "model_ft", "=", "None", "\n", "input_size", "=", "0", "\n", "\n", "if", "model_name", "==", "\"resnet18\"", ":", "\n", "        ", "\"\"\" Resnet18\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "resnet18", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "model_ft", ".", "avgpool", "=", "Identity", "(", ")", "##############average pool replaced by identity####", "\n", "#num_ftrs = model_ft.fc.in_features", "\n", "num_ftrs", "=", "model_ft", ".", "fc", ".", "in_features", "*", "7", "*", "7", "# as average pooling is replaced by Identity, infeatures are multipleid with kernel size", "\n", "if", "vae", ":", "#vae changes: reparameterization at vae size down samples by 2 so we multiply by 2 to maintain consistency in the pipeline", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", "*", "2", ")", "#vae changes", "\n", "", "else", ":", "#vae chages", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "#vae changes", "\n", "#model_ft.fc = nn.Linear(num_ftrs, output_dim) #vae changes", "\n", "", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"comrecCNN\"", ":", "\n", "        ", "\"\"\" comrecCNN\n        \"\"\"", "\n", "model_ft", "=", "comrecCNN", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"vai\"", ":", "\n", "        ", "\"\"\" vai\n        \"\"\"", "\n", "model_ft", "=", "vai", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"comrec1\"", ":", "\n", "        ", "\"\"\" comrec\n        \"\"\"", "\n", "model_ft", "=", "comrec1", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"CAE8\"", ":", "\n", "        ", "\"\"\" CAE8\n        \"\"\"", "\n", "model_ft", "=", "CAE8", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"CAE16\"", ":", "\n", "        ", "\"\"\" CAE16\n        \"\"\"", "\n", "model_ft", "=", "CAE16", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"CAE32\"", ":", "\n", "        ", "\"\"\" CAE32\n        \"\"\"", "\n", "model_ft", "=", "CAE32", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"CAEBo\"", ":", "\n", "        ", "\"\"\" CAEBo\n        \"\"\"", "\n", "model_ft", "=", "CAEBo", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"resnet50\"", ":", "\n", "        ", "\"\"\" Resnet50\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "resnet50", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "fc", ".", "in_features", "\n", "if", "vae", ":", "#vae changes: reparameterization at vae size down samples by 2 so we multiply by 2 to maintain consistency in the pipeline", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", "*", "2", ")", "#vae changes", "\n", "", "else", ":", "#vae chages", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "#vae changes", "\n", "#model_ft.fc = nn.Linear(num_ftrs, output_dim) #vae changes", "\n", "", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"alexnet\"", ":", "\n", "        ", "\"\"\" Alexnet\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "alexnet", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", "[", "6", "]", ".", "in_features", "\n", "model_ft", ".", "classifier", "[", "6", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"vgg\"", ":", "\n", "        ", "\"\"\" VGG11_bn\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "vgg11_bn", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", "[", "6", "]", ".", "in_features", "\n", "model_ft", ".", "classifier", "[", "6", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"squeezenet\"", ":", "\n", "        ", "\"\"\" Squeezenet\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "squeezenet1_0", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "model_ft", ".", "classifier", "[", "1", "]", "=", "nn", ".", "Conv2d", "(", "512", ",", "output_dim", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "model_ft", ".", "num_classes", "=", "output_dim", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"densenet\"", ":", "\n", "        ", "\"\"\" Densenet\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "densenet121", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", ".", "in_features", "\n", "model_ft", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"inception\"", ":", "\n", "        ", "\"\"\" Inception v3\n        Be careful, expects (299,299) sized images and has auxiliary output\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "inception_v3", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "# Handle the auxilary net", "\n", "num_ftrs", "=", "model_ft", ".", "AuxLogits", ".", "fc", ".", "in_features", "\n", "model_ft", ".", "AuxLogits", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "# Handle the primary net", "\n", "num_ftrs", "=", "model_ft", ".", "fc", ".", "in_features", "\n", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "299", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Invalid model name, exiting...\"", ")", "\n", "exit", "(", ")", "\n", "\n", "\n", "#model_ft = ImageEncoder(model_ft, vae=vae, device=device)", "\n", "\n", "", "return", "model_ft", ",", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.Swish.__init__": [[40, 42], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Swish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.Swish.forward": [[43, 45], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.DPP.__init__": [[49, 51], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.DPP.forward": [[52, 70], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.norm().sum", "torch.norm().sum", "torch.norm().sum", "torch.norm().sum", "torch.norm().sum", "torch.norm().sum", "torch.norm().sum", "torch.norm().sum", "torch.norm().sum", "real.transpose", "fake.transpose", "lambda_real.sum().expand_as", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "lambda_real.sum", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "real", ",", "fake", ")", ":", "\n", "        ", "S_b", "=", "torch", ".", "mm", "(", "real", ".", "transpose", "(", "0", ",", "1", ")", ",", "real", ")", "\n", "D_b", "=", "torch", ".", "mm", "(", "fake", ".", "transpose", "(", "0", ",", "1", ")", ",", "fake", ")", "\n", "\n", "lambda_real", ",", "v_real", "=", "torch", ".", "symeig", "(", "S_b", ",", "eigenvectors", "=", "True", ")", "\n", "lambda_fake", ",", "v_fake", "=", "torch", ".", "symeig", "(", "D_b", ",", "eigenvectors", "=", "True", ")", "\n", "\n", "# throw away the imaginary values RIP", "\n", "# lambda_real = lambda_real[:, 0]", "\n", "# lambda_fake = lambda_fake[:, 0]", "\n", "\n", "lambda_real_norm", "=", "lambda_real", "/", "lambda_real", ".", "sum", "(", "0", ")", ".", "expand_as", "(", "lambda_real", ")", "\n", "\n", "L_m", "=", "torch", ".", "norm", "(", "(", "lambda_real", "-", "lambda_fake", ")", ",", "2", ")", ".", "sum", "(", ")", "\n", "\n", "L_s", "=", "-", "(", "lambda_real_norm", "*", "F", ".", "cosine_similarity", "(", "v_real", ",", "v_fake", ")", ")", ".", "sum", "(", ")", "\n", "\n", "return", "L_m", "+", "L_s", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.Logger.__init__": [[98, 101], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filename", ",", "mode", "=", "\"a\"", ")", ":", "\n", "        ", "self", ".", "terminal", "=", "sys", ".", "stdout", "\n", "self", ".", "log", "=", "open", "(", "filename", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.Logger.write": [[102, 105], ["utils1.Logger.terminal.write", "utils1.Logger.log.write"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.Logger.write", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.Logger.write"], ["", "def", "write", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "terminal", ".", "write", "(", "message", ")", "\n", "self", ".", "log", ".", "write", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.Logger.flush": [[106, 111], ["None"], "methods", ["None"], ["", "def", "flush", "(", "self", ")", ":", "\n", "# this flush method is needed for python 3 compatibility.", "\n", "# this handles the flush command by doing nothing.", "\n", "# you might want to specify some extra behavior here.", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.EarlyStopping.__init__": [[194, 212], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "patience", "=", "7", ",", "verbose", "=", "False", ",", "delta", "=", "0", ",", "checkpoint", "=", "'checkpoint.pt'", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            patience (int): How long to wait after last time validation loss improved.\n                            Default: 7\n            verbose (bool): If True, prints a message for each validation loss improvement.\n                            Default: False\n            delta (float): Minimum change in the monitored quantity to qualify as an improvement.\n                            Default: 0\n        \"\"\"", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "best_score", "=", "None", "\n", "self", ".", "early_stop", "=", "False", "\n", "self", ".", "val_loss_min", "=", "np", ".", "Inf", "\n", "self", ".", "delta", "=", "delta", "\n", "self", ".", "checkpoint", "=", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.EarlyStopping.__call__": [[213, 229], ["utils1.EarlyStopping.save_checkpoint", "print", "utils1.EarlyStopping.save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.EarlyStoppingWithOpt1.save_checkpoint", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.EarlyStoppingWithOpt1.save_checkpoint"], ["", "def", "__call__", "(", "self", ",", "val_loss", ",", "model", ")", ":", "\n", "\n", "        ", "score", "=", "-", "val_loss", "\n", "\n", "if", "self", ".", "best_score", "is", "None", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "val_loss", ",", "model", ")", "\n", "", "elif", "score", "<", "self", ".", "best_score", "-", "self", ".", "delta", ":", "\n", "            ", "self", ".", "counter", "+=", "1", "\n", "print", "(", "f'EarlyStopping counter: {self.counter} out of {self.patience}'", ")", "\n", "if", "self", ".", "counter", ">=", "self", ".", "patience", ":", "\n", "                ", "self", ".", "early_stop", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "val_loss", ",", "model", ")", "\n", "self", ".", "counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.EarlyStopping.save_checkpoint": [[230, 236], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "model.state_dict"], "methods", ["None"], ["", "", "def", "save_checkpoint", "(", "self", ",", "val_loss", ",", "model", ")", ":", "\n", "        ", "'''Saves model when validation loss decrease.'''", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "f'Validation loss decreased ({self.val_loss_min:.6f} --> {val_loss:.6f}).  Saving model ...'", ")", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "self", ".", "checkpoint", ")", "\n", "self", ".", "val_loss_min", "=", "val_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.EarlyStoppingWithOpt.__init__": [[243, 261], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "patience", "=", "7", ",", "verbose", "=", "False", ",", "delta", "=", "0", ",", "checkpoint", "=", "'checkpoint.pt'", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            patience (int): How long to wait after last time validation loss improved.\n                            Default: 7\n            verbose (bool): If True, prints a message for each validation loss improvement.\n                            Default: False\n            delta (float): Minimum change in the monitored quantity to qualify as an improvement.\n                            Default: 0\n        \"\"\"", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "best_score", "=", "None", "\n", "self", ".", "early_stop", "=", "False", "\n", "self", ".", "val_loss_min", "=", "np", ".", "Inf", "\n", "self", ".", "delta", "=", "delta", "\n", "self", ".", "checkpoint", "=", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.EarlyStoppingWithOpt.__call__": [[262, 278], ["utils1.EarlyStoppingWithOpt.save_checkpoint", "print", "utils1.EarlyStoppingWithOpt.save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.EarlyStoppingWithOpt1.save_checkpoint", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.EarlyStoppingWithOpt1.save_checkpoint"], ["", "def", "__call__", "(", "self", ",", "val_loss", ",", "model", ",", "optimizer", ",", "ckpt", "=", "None", ")", ":", "\n", "\n", "        ", "score", "=", "-", "val_loss", "\n", "\n", "if", "self", ".", "best_score", "is", "None", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "val_loss", ",", "model", ",", "optimizer", ",", "ckpt", ")", "\n", "", "elif", "score", "<", "self", ".", "best_score", "-", "self", ".", "delta", ":", "\n", "            ", "self", ".", "counter", "+=", "1", "\n", "print", "(", "f'EarlyStopping counter: {self.counter} out of {self.patience}'", ")", "\n", "if", "self", ".", "counter", ">=", "self", ".", "patience", ":", "\n", "                ", "self", ".", "early_stop", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "val_loss", ",", "model", ",", "optimizer", ",", "ckpt", ")", "\n", "self", ".", "counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.EarlyStoppingWithOpt.save_checkpoint": [[279, 289], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "model.state_dict", "optimizer.state_dict"], "methods", ["None"], ["", "", "def", "save_checkpoint", "(", "self", ",", "val_loss", ",", "model", ",", "optimizer", ",", "ckpt", ")", ":", "\n", "        ", "if", "ckpt", "!=", "None", ":", "\n", "            ", "self", ".", "checkpoint", "=", "ckpt", "\n", "", "'''Saves model when validation loss decrease.'''", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "f'Validation loss decreased ({self.val_loss_min:.6f} --> {val_loss:.6f}).  Saving model ...'", ",", "self", ".", "checkpoint", ")", "\n", "state", "=", "{", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", "}", "\n", "", "torch", ".", "save", "(", "state", ",", "self", ".", "checkpoint", ")", "\n", "self", ".", "val_loss_min", "=", "val_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.EarlyStoppingWithOpt1.__init__": [[296, 314], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "patience", "=", "7", ",", "verbose", "=", "False", ",", "delta", "=", "0", ",", "checkpoint", "=", "'checkpoint.pt'", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            patience (int): How long to wait after last time validation loss improved.\n                            Default: 7\n            verbose (bool): If True, prints a message for each validation loss improvement.\n                            Default: False\n            delta (float): Minimum change in the monitored quantity to qualify as an improvement.\n                            Default: 0\n        \"\"\"", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "best_score", "=", "None", "\n", "self", ".", "early_stop", "=", "False", "\n", "self", ".", "val_loss_min", "=", "np", ".", "Inf", "\n", "self", ".", "delta", "=", "delta", "\n", "self", ".", "checkpoint", "=", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.EarlyStoppingWithOpt1.__call__": [[315, 331], ["utils1.EarlyStoppingWithOpt1.save_checkpoint", "print", "utils1.EarlyStoppingWithOpt1.save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.EarlyStoppingWithOpt1.save_checkpoint", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.EarlyStoppingWithOpt1.save_checkpoint"], ["", "def", "__call__", "(", "self", ",", "val_loss", ",", "enc", ",", "model", ",", "optimizer", ")", ":", "\n", "\n", "        ", "score", "=", "-", "val_loss", "\n", "\n", "if", "self", ".", "best_score", "is", "None", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "val_loss", ",", "enc", ",", "model", ",", "optimizer", ")", "\n", "", "elif", "score", "<", "self", ".", "best_score", "-", "self", ".", "delta", ":", "\n", "            ", "self", ".", "counter", "+=", "1", "\n", "print", "(", "f'EarlyStopping counter: {self.counter} out of {self.patience}'", ")", "\n", "if", "self", ".", "counter", ">=", "self", ".", "patience", ":", "\n", "                ", "self", ".", "early_stop", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "val_loss", ",", "enc", ",", "model", ",", "optimizer", ")", "\n", "self", ".", "counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.EarlyStoppingWithOpt1.save_checkpoint": [[332, 341], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "model.state_dict", "enc.state_dict", "optimizer.state_dict"], "methods", ["None"], ["", "", "def", "save_checkpoint", "(", "self", ",", "val_loss", ",", "enc", ",", "model", ",", "optimizer", ")", ":", "\n", "        ", "'''Saves model when validation loss decrease.'''", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "f'Validation loss decreased ({self.val_loss_min:.6f} --> {val_loss:.6f}).  Saving model ...'", ")", "\n", "state", "=", "{", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'enc_dict'", ":", "enc", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", "}", "\n", "", "torch", ".", "save", "(", "state", ",", "self", ".", "checkpoint", ")", "\n", "self", ".", "val_loss_min", "=", "val_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.fix": [[9, 15], ["isinstance"], "function", ["None"], ["def", "fix", "(", "params", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "params", ",", "list", ")", ":", "\n", "        ", "params", "=", "[", "params", "]", "\n", "", "for", "param", "in", "params", ":", "\n", "# for param in model.parameters():", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.tune": [[17, 23], ["isinstance"], "function", ["None"], ["", "", "def", "tune", "(", "params", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "params", ",", "list", ")", ":", "\n", "        ", "params", "=", "[", "params", "]", "\n", "", "for", "param", "in", "params", ":", "\n", "# for param in model.parameters():", "\n", "        ", "param", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.set_grad_zero": [[25, 30], ["model.parameters", "params.grad.zero_"], "function", ["None"], ["", "", "def", "set_grad_zero", "(", "models", ")", ":", "\n", "    ", "for", "model", "in", "models", ":", "\n", "        ", "for", "params", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "params", ".", "grad", "is", "not", "None", ":", "\n", "                ", "params", ".", "grad", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.get_activation_function": [[32, 37], ["torch.nn.LeakyReLU", "utils1.Swish"], "function", ["None"], ["", "", "", "", "def", "get_activation_function", "(", "activation_name", ")", ":", "\n", "    ", "if", "activation_name", "==", "'LeakyRelu'", ":", "\n", "        ", "return", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "", "elif", "activation_name", "==", "'Swish'", ":", "\n", "        ", "return", "Swish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.kld_loss": [[78, 96], ["torch.sum", "torch.sum", "torch.sum", "mu.size", "mu.size", "logvar.exp", "mu.pow"], "function", ["None"], ["", "", "def", "kld_loss", "(", "mu", ",", "logvar", ")", ":", "\n", "\n", "# KLD is Kullback\u2013Leibler divergence -- how much does one learned", "\n", "# distribution deviate from another, in this specific case the", "\n", "# learned distribution from the unit Gaussian", "\n", "\n", "# see Appendix B from VAE paper:", "\n", "# Kingma and Welling. Auto-Encoding Variational Bayes. ICLR, 2014", "\n", "# https://arxiv.org/abs/1312.6114", "\n", "# - D_{KL} = 0.5 * sum(1 + log(sigma^2) - mu^2 - sigma^2)", "\n", "# note the negative D_{KL} in appendix B of the paper", "\n", "    ", "KLD", "=", "-", "0.5", "*", "torch", ".", "sum", "(", "1", "+", "logvar", "-", "mu", ".", "pow", "(", "2", ")", "-", "logvar", ".", "exp", "(", ")", ")", "\n", "# Normalise by same number of elements as in reconstruction", "\n", "KLD", "/=", "mu", ".", "size", "(", ")", "[", "0", "]", "*", "mu", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "# BCE tries to make our reconstruction as accurate as possible", "\n", "# KLD tries to push the distributions as close as possible to unit Gaussian", "\n", "return", "KLD", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.sample_z": [[112, 117], ["torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.randn", "torch.randn", "torch.randn", "mu.size", "mu.size"], "function", ["None"], ["", "", "def", "sample_z", "(", "mu", ",", "log_var", ",", "device", ")", ":", "\n", "# Using reparameterization trick to sample from a gaussian", "\n", "    ", "eps", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "randn", "(", "mu", ".", "size", "(", ")", "[", "0", "]", ",", "mu", ".", "size", "(", ")", "[", "1", "]", ")", ")", ".", "to", "(", "device", ")", "\n", "#return mu + torch.exp(log_var / 2) * eps", "\n", "return", "mu", "+", "log_var", "*", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.compute_gdpp": [[119, 140], ["utils1.compute_gdpp.compute_diversity"], "function", ["None"], ["", "def", "compute_gdpp", "(", "phi_real", ",", "phi_fake", ")", ":", "\n", "    ", "def", "compute_diversity", "(", "phi", ")", ":", "\n", "        ", "phi", "=", "f", ".", "normalize", "(", "phi", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "S_B", "=", "torch", ".", "mm", "(", "phi", ",", "phi", ".", "t", "(", ")", ")", "\n", "eig_vals", ",", "eig_vecs", "=", "torch", ".", "symeig", "(", "S_B", ",", "eigenvectors", "=", "True", ")", "\n", "# eig_vals, eig_vecs = torch.eig(S_B, eigenvectors=True)", "\n", "return", "eig_vals", ",", "eig_vecs", "\n", "# return eig_vals[:, 0], eig_vecs", "\n", "\n", "", "def", "normalize_min_max", "(", "eig_vals", ")", ":", "\n", "        ", "min_v", ",", "max_v", "=", "torch", ".", "min", "(", "eig_vals", ")", ",", "torch", ".", "max", "(", "eig_vals", ")", "\n", "return", "(", "eig_vals", "-", "min_v", ")", "/", "(", "max_v", "-", "min_v", ")", "\n", "\n", "", "fake_eig_vals", ",", "fake_eig_vecs", "=", "compute_diversity", "(", "phi_fake", ")", "\n", "real_eig_vals", ",", "real_eig_vecs", "=", "compute_diversity", "(", "phi_real", ")", "\n", "# Scaling factor to make the two losses operating in comparable ranges.", "\n", "magnitude_loss", "=", "0.0001", "*", "f", ".", "mse_loss", "(", "target", "=", "real_eig_vals", ",", "input", "=", "fake_eig_vals", ")", "\n", "structure_loss", "=", "-", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "fake_eig_vecs", ",", "real_eig_vecs", ")", ",", "0", ")", "\n", "normalized_real_eig_vals", "=", "normalize_min_max", "(", "real_eig_vals", ")", "\n", "weighted_structure_loss", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "normalized_real_eig_vals", ",", "structure_loss", ")", ")", "\n", "return", "magnitude_loss", "+", "weighted_structure_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.GDPPLoss": [[142, 178], ["utils1.compute_gdpp.compute_diversity"], "function", ["None"], ["", "def", "GDPPLoss", "(", "phiFake", ",", "phiReal", ",", "backward", "=", "True", ")", ":", "\n", "    ", "r\"\"\"\n    Implementation of the GDPP loss. Can be used with any kind of GAN\n    architecture.\n    Args:\n        phiFake (tensor) : last feature layer of the discriminator on real data\n        phiReal (tensor) : last feature layer of the discriminator on fake data\n        backward (bool)  : should we perform the backward operation ?\n    Returns:\n        Loss's value. The backward operation in performed within this operator\n    \"\"\"", "\n", "def", "compute_diversity", "(", "phi", ")", ":", "\n", "        ", "phi", "=", "F", ".", "normalize", "(", "phi", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "SB", "=", "torch", ".", "mm", "(", "phi", ",", "phi", ".", "t", "(", ")", ")", "\n", "eigVals", ",", "eigVecs", "=", "torch", ".", "symeig", "(", "SB", ",", "eigenvectors", "=", "True", ")", "\n", "return", "eigVals", ",", "eigVecs", "\n", "\n", "", "def", "normalize_min_max", "(", "eigVals", ")", ":", "\n", "        ", "minV", ",", "maxV", "=", "torch", ".", "min", "(", "eigVals", ")", ",", "torch", ".", "max", "(", "eigVals", ")", "\n", "return", "(", "eigVals", "-", "minV", ")", "/", "(", "maxV", "-", "minV", ")", "\n", "\n", "", "fakeEigVals", ",", "fakeEigVecs", "=", "compute_diversity", "(", "phiFake", ")", "\n", "realEigVals", ",", "realEigVecs", "=", "compute_diversity", "(", "phiReal", ")", "\n", "\n", "# Scaling factor to make the two losses operating in comparable ranges.", "\n", "magnitudeLoss", "=", "0.0001", "*", "F", ".", "mse_loss", "(", "target", "=", "realEigVals", ",", "input", "=", "fakeEigVals", ")", "\n", "structureLoss", "=", "-", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "fakeEigVecs", ",", "realEigVecs", ")", ",", "0", ")", "\n", "normalizedRealEigVals", "=", "normalize_min_max", "(", "realEigVals", ")", "\n", "weightedStructureLoss", "=", "torch", ".", "sum", "(", "\n", "torch", ".", "mul", "(", "normalizedRealEigVals", ",", "structureLoss", ")", ")", "\n", "gdppLoss", "=", "magnitudeLoss", "+", "weightedStructureLoss", "\n", "\n", "if", "backward", ":", "\n", "        ", "gdppLoss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "\n", "", "return", "gdppLoss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.compute_bleu": [[180, 186], ["candidate.split.split", "nltk.translate.bleu_score.sentence_bleu", "nltk.translate.bleu_score.SmoothingFunction", "reference.split"], "function", ["None"], ["", "def", "compute_bleu", "(", "candidate", ",", "reference", ",", "ngramm_weights", "=", "(", "0.25", ",", "0.25", ",", "0.25", ",", "0.25", ")", ",", "\n", "smoothing", "=", "SmoothingFunction", "(", ")", ".", "method1", ")", ":", "\n", "    ", "reference", "=", "[", "reference", ".", "split", "(", ")", "]", "\n", "candidate", "=", "candidate", ".", "split", "(", ")", "\n", "score", "=", "sentence_bleu", "(", "reference", ",", "candidate", ",", "smoothing_function", "=", "smoothing", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models.RNNDText.__init__": [[10, 44], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dim", ",", "vocab_size", ",", "hid_dim", ",", "n_layers", ",", "dropout", ",", "sos", ",", "eos", ",", "pad", ",", "device", "=", "device", ")", ":", "\n", "        ", "super", "(", "RNNDText", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "hid_dim", "=", "hid_dim", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "sos", "=", "sos", "\n", "self", ".", "eos", "=", "eos", "\n", "self", ".", "pad", "=", "pad", "\n", "self", ".", "device", "=", "device", "\n", "\n", "assert", "self", ".", "sos", "is", "not", "None", "\n", "assert", "self", ".", "eos", "is", "not", "None", "\n", "\n", "self", ".", "embeddings", "=", "nn", ".", "Embedding", "(", "self", ".", "vocab_size", ",", "self", ".", "emb_dim", ",", "padding_idx", "=", "self", ".", "pad", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "hid_dim", "*", "2", ",", "self", ".", "vocab_size", ")", "\n", "\n", "# Initialize the RNN", "\n", "self", ".", "encoder", "=", "nn", ".", "LSTM", "(", "self", ".", "emb_dim", ",", "\n", "self", ".", "hid_dim", ",", "\n", "self", ".", "n_layers", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "True", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "LSTM", "(", "self", ".", "emb_dim", ",", "\n", "self", ".", "hid_dim", "*", "2", ",", "\n", "self", ".", "n_layers", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models.RNNDText.forward": [[47, 72], ["text_auto_models.RNNDText.generate", "len", "text_auto_models.RNNDText.encode", "len", "max"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.RNNText.generate", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode"], ["", "def", "forward", "(", "self", ",", "\n", "text_length", ",", "\n", "batch_positions", "=", "None", ",", "\n", "cell", "=", "None", ",", "\n", "hidden", "=", "None", ",", "\n", "pass_type", "=", "'generate'", ",", "\n", "teacher_forcing_prob", "=", "0.0", ",", "\n", "batch_size", "=", "None", "\n", ")", ":", "\n", "\n", "        ", "if", "pass_type", "==", "'generate'", ":", "\n", "\n", "            ", "assert", "hidden", "is", "not", "None", "\n", "if", "teacher_forcing_prob", ">", "0.0", ":", "\n", "                ", "assert", "batch_positions", "is", "not", "None", "\n", "assert", "len", "(", "batch_positions", "[", "0", "]", ")", "==", "max", "(", "text_length", ")", "\n", "batch_size", "=", "len", "(", "batch_positions", ")", "\n", "# else:", "\n", "# assert batch_size is not None", "\n", "\n", "", "return", "self", ".", "generate", "(", "hidden", ",", "batch_size", ",", "batch_positions", ",", "teacher_forcing_prob", ",", "text_length", ",", "cell", "=", "cell", ")", "\n", "\n", "", "elif", "pass_type", "==", "'encode'", ":", "\n", "            ", "assert", "batch_positions", "is", "not", "None", "\n", "return", "self", ".", "encode", "(", "batch_positions", ",", "text_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models.RNNDText.encode": [[74, 89], ["text_auto_models.RNNDText.embeddings", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "sorted_idx.sort", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "text_auto_models.RNNDText.encoder", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "", "def", "encode", "(", "self", ",", "batch_positions", ",", "text_length", ")", ":", "\n", "\n", "        ", "embedded", "=", "self", ".", "embeddings", "(", "batch_positions", ")", "\n", "\n", "sorted_lens", ",", "sorted_idx", "=", "torch", ".", "sort", "(", "text_length", ",", "descending", "=", "True", ")", "\n", "forwards_sorted", "=", "embedded", "[", "sorted_idx", "]", "\n", "_", ",", "sortedsorted_idx", "=", "sorted_idx", ".", "sort", "(", ")", "\n", "packed", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "forwards_sorted", ",", "sorted_lens", ",", "batch_first", "=", "True", ")", "\n", "h", ",", "_", "=", "self", ".", "encoder", "(", "packed", ")", "\n", "h_tmp", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "h", ",", "batch_first", "=", "True", ")", "\n", "h_t", "=", "torch", ".", "max", "(", "h_tmp", ",", "1", ")", "[", "0", "]", "\n", "h_t", "=", "h_t", "[", "sortedsorted_idx", "]", "\n", "\n", "\n", "return", "h_t", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models.RNNDText.generate": [[91, 135], ["text_auto_models.RNNDText.embeddings", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "max", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "hidden_outputs.transpose.transpose.transpose", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "sorted_idx.sort", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "[].squeeze", "len", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "text_auto_models.RNNDText.view", "text_auto_models.RNNDText.decoder", "text_auto_models.RNNDText.out", "text_auto_models.RNNDText.squeeze", "torch.zeros().to.transpose", "torch.zeros().to.transpose", "torch.zeros().to.transpose", "torch.zeros().to.transpose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "text_auto_models.RNNDText.view().max", "random.random", "text_auto_models.RNNDText.embeddings", "text_auto_models.RNNDText.embeddings", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.max", "torch.max", "torch.max", "torch.max", "text_auto_models.RNNDText.view", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "generate", "(", "self", ",", "hidden", ",", "batch_size", ",", "batch_positions", ",", "teacher_forcing_prob", ",", "text_length", ",", "cell", "=", "None", ")", ":", "\n", "        ", "if", "batch_size", "is", "None", ":", "\n", "            ", "batch_size", "=", "len", "(", "hidden", ")", "\n", "", "step_emb", "=", "self", ".", "embeddings", "(", "torch", ".", "LongTensor", "(", "[", "self", ".", "sos", "]", ")", ".", "repeat", "(", "batch_size", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "hidden_", "=", "torch", ".", "zeros", "(", "(", "self", ".", "n_layers", ",", "batch_size", ",", "self", ".", "hid_dim", "*", "2", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "hidden_", "[", "0", "]", "=", "hidden", "[", "0", "]", "\n", "hidden", "=", "hidden_", "\n", "\n", "if", "cell", "is", "None", ":", "\n", "            ", "cell", "=", "torch", ".", "zeros_like", "(", "hidden", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "max_length", "=", "max", "(", "text_length", ")", "\n", "argmax_indices", "=", "torch", ".", "zeros", "(", "max_length", ",", "batch_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "hidden_outputs", "=", "torch", ".", "zeros", "(", "max_length", ",", "batch_size", ",", "self", ".", "hid_dim", "*", "2", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "outputs", "=", "torch", ".", "zeros", "(", "max_length", ",", "batch_size", ",", "self", ".", "vocab_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "for", "t", "in", "range", "(", "1", ",", "max_length", ")", ":", "\n", "            ", "step_emb", "=", "step_emb", ".", "view", "(", "batch_size", ",", "1", ",", "self", ".", "emb_dim", ")", "\n", "output", ",", "(", "hidden", ",", "cell", ")", "=", "self", ".", "decoder", "(", "step_emb", ",", "(", "hidden", ",", "cell", ")", ")", "\n", "\n", "hidden_outputs", "[", "t", "]", "=", "hidden", "[", "-", "1", "]", "\n", "logits", "=", "self", ".", "out", "(", "output", ")", "\n", "outputs", "[", "t", "]", "=", "logits", ".", "squeeze", "(", ")", "\n", "\n", "argmax_index", "=", "logits", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "argmax_indices", "[", "t", "]", "=", "argmax_index", "\n", "\n", "teacher_force", "=", "random", ".", "random", "(", ")", "<", "teacher_forcing_prob", "\n", "if", "teacher_force", ":", "\n", "                ", "step_emb", "=", "self", ".", "embeddings", "(", "batch_positions", "[", ":", ",", "t", "]", ")", "\n", "", "else", ":", "\n", "                ", "step_emb", "=", "self", ".", "embeddings", "(", "argmax_index", ")", "\n", "\n", "# text_length = self.get_length(argmax_indices)", "\n", "", "", "hidden_outputs", "=", "hidden_outputs", ".", "transpose", "(", "1", ",", "0", ")", "\n", "sorted_lens", ",", "sorted_idx", "=", "torch", ".", "sort", "(", "text_length", ",", "descending", "=", "True", ")", "\n", "hidden_sorted", "=", "hidden_outputs", "[", "sorted_idx", "]", "\n", "_", ",", "sortedsorted_idx", "=", "sorted_idx", ".", "sort", "(", ")", "\n", "packed", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "hidden_sorted", ",", "sorted_lens", ",", "batch_first", "=", "True", ")", "\n", "h_tmp", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "packed", ",", "batch_first", "=", "True", ")", "\n", "h_t", "=", "torch", ".", "max", "(", "h_tmp", ",", "1", ")", "[", "0", "]", ".", "squeeze", "(", ")", "\n", "\n", "\n", "return", "h_t", ",", "outputs", ".", "transpose", "(", "0", ",", "1", ")", ",", "argmax_indices", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models.AutoEncoderD.__init__": [[147, 151], ["torch.Module.__init__", "text_auto_models.RNNDText"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "embeddings", "=", "None", ")", ":", "\n", "        ", "super", "(", "AutoEncoderD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rnn", "=", "RNNDText", "(", "**", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models.AutoEncoderD.forward": [[152, 164], ["len", "text_auto_models.AutoEncoderD.rnn", "text_auto_models.AutoEncoderD.rnn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_positions", ",", "text_length", ",", "teacher_forcing_prob", "=", "0.0", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "batch_positions", ")", "\n", "h", "=", "self", ".", "rnn", "(", "pass_type", "=", "'encode'", ",", "\n", "batch_positions", "=", "batch_positions", ",", "\n", "text_length", "=", "text_length", ")", "\n", "h", ",", "o", ",", "i", "=", "self", ".", "rnn", "(", "pass_type", "=", "'generate'", ",", "\n", "batch_positions", "=", "batch_positions", ",", "\n", "hidden", "=", "h", ",", "\n", "teacher_forcing_prob", "=", "teacher_forcing_prob", ",", "\n", "text_length", "=", "text_length", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "return", "o", ",", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models.AutoEncoderD.store_model": [[166, 173], ["print", "torch.save", "torch.save", "torch.save", "torch.save", "text_auto_models.AutoEncoderD.state_dict", "str"], "methods", ["None"], ["", "def", "store_model", "(", "self", ",", "path", ")", ":", "\n", "\n", "        ", "state", "=", "{", "\n", "'state_dict'", ":", "self", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "print", "(", "\"dumping new best model to \"", "+", "str", "(", "path", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models.AutoEncoderD.load_model": [[174, 183], ["torch.load", "torch.load", "torch.load", "torch.load", "text_auto_models.AutoEncoderD.load_state_dict"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Load model from file\n        :param best:\n        :return:\n        \"\"\"", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models.RNNText.__init__": [[188, 231], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.LSTM", "torch.LSTM", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dim", ",", "vocab_size", ",", "hid_dim", ",", "n_layers", ",", "dropout", ",", "sos", ",", "eos", ",", "device", ",", "vae", ")", ":", "\n", "        ", "super", "(", "RNNText", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#", "\n", "# self.emb_dim =  config['embedding_dim']", "\n", "# self.vocab_size = config['vocab_size']", "\n", "# self.hid_dim =  config['rnn_hidden_dim']", "\n", "# self.n_layers = config['rnn_layers']", "\n", "# self.dropout =  config['rnn_dropout']", "\n", "# self.sos = config['sos']", "\n", "# self.eos = config['eos']", "\n", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "hid_dim", "=", "hid_dim", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "sos", "=", "sos", "\n", "self", ".", "eos", "=", "eos", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "vae", "=", "vae", "\n", "\n", "assert", "self", ".", "sos", "is", "not", "None", "\n", "assert", "self", ".", "eos", "is", "not", "None", "\n", "\n", "# if embeddings:", "\n", "#     self.embeddings = embeddings", "\n", "# else:", "\n", "self", ".", "embeddings", "=", "nn", ".", "Embedding", "(", "self", ".", "vocab_size", ",", "self", ".", "emb_dim", ",", "padding_idx", "=", "0", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "hid_dim", ",", "self", ".", "vocab_size", ")", "\n", "\n", "# Initialize the RNN", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "self", ".", "emb_dim", ",", "\n", "self", ".", "hid_dim", ",", "\n", "self", ".", "n_layers", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "False", ")", "\n", "\n", "if", "self", ".", "vae", ":", "\n", "            ", "self", ".", "vae_transform", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "hid_dim", ",", "self", ".", "hid_dim", "*", "2", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models.RNNText.forward": [[233, 258], ["text_auto_models.RNNText.generate", "len", "text_auto_models.RNNText.encode", "len", "max"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.RNNText.generate", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode"], ["", "", "def", "forward", "(", "self", ",", "\n", "text_length", ",", "\n", "batch_positions", "=", "None", ",", "\n", "cell", "=", "None", ",", "\n", "hidden", "=", "None", ",", "\n", "pass_type", "=", "'generate'", ",", "\n", "teacher_forcing_prob", "=", "0.0", ",", "\n", "batch_size", "=", "None", "\n", ")", ":", "\n", "\n", "        ", "if", "pass_type", "==", "'generate'", ":", "\n", "\n", "            ", "assert", "hidden", "is", "not", "None", "\n", "if", "teacher_forcing_prob", ">", "0.0", ":", "\n", "                ", "assert", "batch_positions", "is", "not", "None", "\n", "assert", "len", "(", "batch_positions", "[", "0", "]", ")", "==", "max", "(", "text_length", ")", "\n", "batch_size", "=", "len", "(", "batch_positions", ")", "\n", "# else:", "\n", "# assert batch_size is not None", "\n", "\n", "", "return", "self", ".", "generate", "(", "hidden", ",", "batch_size", ",", "batch_positions", ",", "teacher_forcing_prob", ",", "text_length", ",", "cell", "=", "cell", ")", "\n", "\n", "", "elif", "pass_type", "==", "'encode'", ":", "\n", "            ", "assert", "batch_positions", "is", "not", "None", "\n", "return", "self", ".", "encode", "(", "batch_positions", ",", "text_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models.RNNText.generate": [[259, 314], ["text_auto_models.RNNText.embeddings", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "max", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "text_auto_models.RNNText.get_length", "hidden_outputs.transpose.transpose.transpose", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "sorted_idx.sort", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "[].squeeze", "len", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "text_auto_models.RNNText.view", "text_auto_models.RNNText.rnn", "text_auto_models.RNNText.out", "text_auto_models.RNNText.squeeze", "text_auto_models.RNNText.vae_transform", "torch.zeros().to.transpose", "torch.zeros().to.transpose", "torch.zeros().to.transpose", "torch.zeros().to.transpose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "text_auto_models.RNNText.view().max", "random.random", "text_auto_models.RNNText.embeddings", "text_auto_models.RNNText.embeddings", "models.utils1.sample_z", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.max", "torch.max", "torch.max", "torch.max", "text_auto_models.RNNText.view", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "models.utils1.sample_z.size", "models.utils1.sample_z.size"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.RNNText.get_length", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.sample_z"], ["", "", "def", "generate", "(", "self", ",", "hidden", ",", "batch_size", ",", "batch_positions", ",", "teacher_forcing_prob", ",", "text_length", ",", "cell", "=", "None", ")", ":", "\n", "        ", "if", "batch_size", "is", "None", ":", "\n", "            ", "batch_size", "=", "len", "(", "hidden", ")", "\n", "", "step_emb", "=", "self", ".", "embeddings", "(", "torch", ".", "LongTensor", "(", "[", "self", ".", "sos", "]", ")", ".", "repeat", "(", "batch_size", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "hidden_", "=", "torch", ".", "zeros", "(", "(", "self", ".", "n_layers", ",", "batch_size", ",", "self", ".", "hid_dim", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "hidden_", "[", "0", "]", "=", "hidden", "\n", "hidden", "=", "hidden_", "\n", "\n", "if", "cell", "is", "None", ":", "\n", "            ", "cell", "=", "torch", ".", "zeros_like", "(", "hidden", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "max_length", "=", "max", "(", "text_length", ")", "\n", "argmax_indices", "=", "torch", ".", "zeros", "(", "max_length", ",", "batch_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "hidden_outputs", "=", "torch", ".", "zeros", "(", "max_length", ",", "batch_size", ",", "self", ".", "hid_dim", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "outputs", "=", "torch", ".", "zeros", "(", "max_length", ",", "batch_size", ",", "self", ".", "vocab_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "for", "t", "in", "range", "(", "1", ",", "max_length", ")", ":", "\n", "            ", "step_emb", "=", "step_emb", ".", "view", "(", "batch_size", ",", "1", ",", "self", ".", "emb_dim", ")", "\n", "output", ",", "(", "hidden", ",", "cell", ")", "=", "self", ".", "rnn", "(", "step_emb", ",", "(", "hidden", ",", "cell", ")", ")", "\n", "\n", "hidden_outputs", "[", "t", "]", "=", "hidden", "[", "-", "1", "]", "\n", "logits", "=", "self", ".", "out", "(", "output", ")", "\n", "outputs", "[", "t", "]", "=", "logits", ".", "squeeze", "(", ")", "\n", "\n", "argmax_index", "=", "logits", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "argmax_indices", "[", "t", "]", "=", "argmax_index", "\n", "\n", "teacher_force", "=", "random", ".", "random", "(", ")", "<", "teacher_forcing_prob", "\n", "if", "teacher_force", ":", "\n", "                ", "step_emb", "=", "self", ".", "embeddings", "(", "batch_positions", "[", ":", ",", "t", "]", ")", "\n", "", "else", ":", "\n", "                ", "step_emb", "=", "self", ".", "embeddings", "(", "argmax_index", ")", "\n", "\n", "", "", "text_length", "=", "self", ".", "get_length", "(", "argmax_indices", ")", "\n", "hidden_outputs", "=", "hidden_outputs", ".", "transpose", "(", "1", ",", "0", ")", "\n", "sorted_lens", ",", "sorted_idx", "=", "torch", ".", "sort", "(", "text_length", ",", "descending", "=", "True", ")", "\n", "hidden_sorted", "=", "hidden_outputs", "[", "sorted_idx", "]", "\n", "_", ",", "sortedsorted_idx", "=", "sorted_idx", ".", "sort", "(", ")", "\n", "packed", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "hidden_sorted", ",", "sorted_lens", ",", "batch_first", "=", "True", ")", "\n", "h_tmp", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "packed", ",", "batch_first", "=", "True", ")", "\n", "h_t", "=", "torch", ".", "max", "(", "h_tmp", ",", "1", ")", "[", "0", "]", ".", "squeeze", "(", ")", "\n", "\n", "if", "self", ".", "vae", ":", "\n", "            ", "z", "=", "self", ".", "vae_transform", "(", "h_t", ")", "\n", "mu", "=", "z", "[", ":", ",", ":", "h_t", ".", "size", "(", ")", "[", "1", "]", "]", "\n", "log_var", "=", "z", "[", ":", ",", "h_t", ".", "size", "(", ")", "[", "1", "]", ":", "]", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "h_t", "=", "sample_z", "(", "mu", ",", "log_var", ",", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "h_t", "=", "mu", "\n", "", "", "else", ":", "\n", "            ", "mu", ",", "log_var", "=", "None", ",", "None", "\n", "\n", "", "return", "h_t", ",", "outputs", ".", "transpose", "(", "0", ",", "1", ")", ",", "argmax_indices", ".", "transpose", "(", "0", ",", "1", ")", ",", "mu", ",", "log_var", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models.RNNText.encode": [[315, 342], ["text_auto_models.RNNText.embeddings", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "sorted_idx.sort", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "text_auto_models.RNNText.rnn", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.max", "torch.max", "torch.max", "torch.max", "text_auto_models.RNNText.vae_transform", "models.utils1.sample_z", "models.utils1.sample_z.size", "models.utils1.sample_z.size"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.sample_z"], ["", "def", "encode", "(", "self", ",", "batch_positions", ",", "text_length", ")", ":", "\n", "\n", "        ", "embedded", "=", "self", ".", "embeddings", "(", "batch_positions", ")", "\n", "\n", "sorted_lens", ",", "sorted_idx", "=", "torch", ".", "sort", "(", "text_length", ",", "descending", "=", "True", ")", "\n", "forwards_sorted", "=", "embedded", "[", "sorted_idx", "]", "\n", "_", ",", "sortedsorted_idx", "=", "sorted_idx", ".", "sort", "(", ")", "\n", "packed", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "forwards_sorted", ",", "sorted_lens", ",", "batch_first", "=", "True", ")", "\n", "h", ",", "_", "=", "self", ".", "rnn", "(", "packed", ")", "\n", "h_tmp", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "h", ",", "batch_first", "=", "True", ")", "\n", "h_t", "=", "torch", ".", "max", "(", "h_tmp", ",", "1", ")", "[", "0", "]", "\n", "h_t", "=", "h_t", "[", "sortedsorted_idx", "]", "\n", "\n", "if", "self", ".", "vae", ":", "\n", "            ", "z", "=", "self", ".", "vae_transform", "(", "h_t", ")", "\n", "mu", "=", "z", "[", ":", ",", ":", "h_t", ".", "size", "(", ")", "[", "1", "]", "]", "\n", "log_var", "=", "z", "[", ":", ",", "h_t", ".", "size", "(", ")", "[", "1", "]", ":", "]", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "h_t", "=", "sample_z", "(", "mu", ",", "log_var", ",", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "h_t", "=", "mu", "\n", "\n", "", "", "else", ":", "\n", "            ", "mu", ",", "log_var", "=", "None", ",", "None", "\n", "\n", "", "return", "h_t", ",", "mu", ",", "log_var", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models.RNNText.get_length": [[343, 350], ["indices.transpose.transpose.transpose", "indices.transpose.transpose.clone", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "methods", ["None"], ["", "def", "get_length", "(", "self", ",", "indices", ")", ":", "\n", "        ", "indices", "=", "indices", ".", "transpose", "(", "0", ",", "1", ")", "\n", "self", ".", "indices_np", "=", "indices", ".", "clone", "(", ")", "\n", "self", ".", "indices_np", "[", ":", ",", "-", "1", "]", "=", "self", ".", "eos", "\n", "seq_len", "=", "torch", ".", "argmax", "(", "self", ".", "indices_np", "==", "self", ".", "eos", ",", "1", ")", "\n", "seq_len", "+=", "1", "\n", "return", "seq_len", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models.AutoEncoder.__init__": [[353, 357], ["torch.Module.__init__", "text_auto_models.RNNText"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "embeddings", "=", "None", ")", ":", "\n", "        ", "super", "(", "AutoEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rnn", "=", "RNNText", "(", "config", ",", "vae", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models.AutoEncoder.forward": [[358, 370], ["len", "text_auto_models.AutoEncoder.rnn", "text_auto_models.AutoEncoder.rnn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_positions", ",", "text_length", ",", "teacher_forcing_prob", "=", "0.0", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "batch_positions", ")", "\n", "h", "=", "self", ".", "rnn", "(", "pass_type", "=", "'encode'", ",", "\n", "batch_positions", "=", "batch_positions", ",", "\n", "text_length", "=", "text_length", ")", "\n", "h", ",", "o", ",", "i", "=", "self", ".", "rnn", "(", "pass_type", "=", "'generate'", ",", "\n", "batch_positions", "=", "batch_positions", ",", "\n", "hidden", "=", "h", ",", "\n", "teacher_forcing_prob", "=", "teacher_forcing_prob", ",", "\n", "text_length", "=", "text_length", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "return", "o", ",", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models.AutoEncoder.store_model": [[372, 379], ["print", "torch.save", "torch.save", "torch.save", "torch.save", "text_auto_models.AutoEncoder.state_dict", "str"], "methods", ["None"], ["", "def", "store_model", "(", "self", ",", "path", ")", ":", "\n", "\n", "        ", "state", "=", "{", "\n", "'state_dict'", ":", "self", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "print", "(", "\"dumping new best model to \"", "+", "str", "(", "path", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models.AutoEncoder.load_model": [[380, 389], ["torch.load", "torch.load", "torch.load", "torch.load", "text_auto_models.AutoEncoder.load_state_dict"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Load model from file\n        :param best:\n        :return:\n        \"\"\"", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.ssimloss.SSIM.__init__": [[40, 46], ["super().__init__", "ssimloss.create_window"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.ssimloss.create_window"], ["    ", "def", "__init__", "(", "self", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "channel", "=", "1", "\n", "self", ".", "window", "=", "create_window", "(", "window_size", ",", "self", ".", "channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.ssimloss.SSIM.forward": [[47, 64], ["img1.size", "ssimloss._ssim", "ssimloss.create_window", "window.cuda.cuda.type_as", "ssimloss.SSIM.window.data.type", "img1.data.type", "window.cuda.cuda.cuda", "img1.get_device"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.ssimloss._ssim", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.ssimloss.create_window"], ["", "def", "forward", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "\n", "if", "channel", "==", "self", ".", "channel", "and", "self", ".", "window", ".", "data", ".", "type", "(", ")", "==", "img1", ".", "data", ".", "type", "(", ")", ":", "\n", "            ", "window", "=", "self", ".", "window", "\n", "", "else", ":", "\n", "            ", "window", "=", "create_window", "(", "self", ".", "window_size", ",", "channel", ")", "\n", "\n", "if", "img1", ".", "is_cuda", ":", "\n", "                ", "window", "=", "window", ".", "cuda", "(", "img1", ".", "get_device", "(", ")", ")", "\n", "", "window", "=", "window", ".", "type_as", "(", "img1", ")", "\n", "\n", "self", ".", "window", "=", "window", "\n", "self", ".", "channel", "=", "channel", "\n", "\n", "\n", "", "return", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "self", ".", "window_size", ",", "channel", ",", "self", ".", "size_average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.ssimloss.gaussian": [[7, 10], ["torch.Tensor", "torch.Tensor", "torch.Tensor.sum", "math.exp", "range", "float"], "function", ["None"], ["def", "gaussian", "(", "window_size", ",", "sigma", ")", ":", "\n", "    ", "gauss", "=", "torch", ".", "Tensor", "(", "[", "exp", "(", "-", "(", "x", "-", "window_size", "//", "2", ")", "**", "2", "/", "float", "(", "2", "*", "sigma", "**", "2", ")", ")", "for", "x", "in", "range", "(", "window_size", ")", "]", ")", "\n", "return", "gauss", "/", "gauss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.ssimloss.create_window": [[11, 16], ["gaussian().unsqueeze", "gaussian().unsqueeze.mm().float().unsqueeze().unsqueeze", "torch.autograd.Variable", "_1D_window.mm().float().unsqueeze().unsqueeze.expand().contiguous", "ssimloss.gaussian", "gaussian().unsqueeze.mm().float().unsqueeze", "_1D_window.mm().float().unsqueeze().unsqueeze.expand", "gaussian().unsqueeze.mm().float", "gaussian().unsqueeze.mm", "gaussian().unsqueeze.t"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.ssimloss.gaussian"], ["", "def", "create_window", "(", "window_size", ",", "channel", ")", ":", "\n", "    ", "_1D_window", "=", "gaussian", "(", "window_size", ",", "1.5", ")", ".", "unsqueeze", "(", "1", ")", "\n", "_2D_window", "=", "_1D_window", ".", "mm", "(", "_1D_window", ".", "t", "(", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "window", "=", "Variable", "(", "_2D_window", ".", "expand", "(", "channel", ",", "1", ",", "window_size", ",", "window_size", ")", ".", "contiguous", "(", ")", ")", "\n", "return", "window", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.ssimloss._ssim": [[17, 38], ["torch.conv2d", "torch.conv2d", "F.conv2d.pow", "F.conv2d.pow", "torch.conv2d", "torch.conv2d", "torch.conv2d", "ssim_map.mean", "ssim_map.mean().mean().mean", "ssim_map.mean().mean", "ssim_map.mean"], "function", ["None"], ["", "def", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "mu1", "=", "F", ".", "conv2d", "(", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "mu2", "=", "F", ".", "conv2d", "(", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "\n", "mu1_sq", "=", "mu1", ".", "pow", "(", "2", ")", "\n", "mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "\n", "sigma1_sq", "=", "F", ".", "conv2d", "(", "img1", "*", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_sq", "\n", "sigma2_sq", "=", "F", ".", "conv2d", "(", "img2", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu2_sq", "\n", "sigma12", "=", "F", ".", "conv2d", "(", "img1", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_mu2", "\n", "\n", "C1", "=", "0.01", "**", "2", "\n", "C2", "=", "0.03", "**", "2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "\n", "if", "size_average", ":", "\n", "        ", "return", "ssim_map", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "ssim_map", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.ssimloss.ssim": [[65, 74], ["img1.size", "ssimloss.create_window", "window.cuda.type_as", "ssimloss._ssim", "window.cuda.cuda", "img1.get_device"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.ssimloss.create_window", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.ssimloss._ssim"], ["", "", "def", "ssim", "(", "img1", ",", "img2", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "window", "=", "create_window", "(", "window_size", ",", "channel", ")", "\n", "\n", "if", "img1", ".", "is_cuda", ":", "\n", "        ", "window", "=", "window", ".", "cuda", "(", "img1", ".", "get_device", "(", ")", ")", "\n", "", "window", "=", "window", ".", "type_as", "(", "img1", ")", "\n", "\n", "return", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", ")", "", "", ""]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.adversarial_models.GaussianNoise.__init__": [[7, 11], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "stddev", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "GaussianNoise", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stddev", "=", "stddev", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.adversarial_models.GaussianNoise.forward": [[12, 18], ["torch.autograd.Variable().to", "torch.autograd.Variable", "torch.randn", "din.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "din", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "noise", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "randn", "(", "din", ".", "size", "(", ")", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# noise = noise.cuda() if self.CUDA else noise", "\n", "return", "din", "+", "noise", "*", "self", ".", "stddev", "\n", "", "return", "din", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.adversarial_models.Discriminator.__init__": [[21, 55], ["torch.nn.Module.__init__", "range", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sequential", "torch.nn.Dropout", "layers.append", "layers.append", "adversarial_models.GaussianNoise", "torch.nn.Linear", "layers.append", "layers.append", "models.utils.get_activation_function", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.get_activation_function"], ["    ", "def", "__init__", "(", "self", ",", "emb_dim", ",", "dis_layers", ",", "dis_hid_dim", ",", "dis_dropout", ",", "dis_input_dropout", ",", "noise", ",", "device", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "dis_layers", "=", "dis_layers", "\n", "self", ".", "dis_hid_dim", "=", "dis_hid_dim", "\n", "self", ".", "dis_dropout", "=", "dis_dropout", "\n", "self", ".", "dis_input_dropout", "=", "dis_input_dropout", "\n", "self", ".", "noise", "=", "noise", "\n", "self", ".", "device", "=", "device", "\n", "\n", "# self.emb_dim = params.emb_dim", "\n", "# self.dis_layers = params.dis_layers", "\n", "# self.dis_hid_dim = params.dis_hid_dim", "\n", "# self.dis_dropout = params.dis_dropout", "\n", "# self.dis_input_dropout = params.dis_input_dropout", "\n", "\n", "layers", "=", "[", "nn", ".", "Dropout", "(", "self", ".", "dis_input_dropout", ")", "]", "\n", "if", "self", ".", "noise", ":", "\n", "            ", "layers", ".", "append", "(", "GaussianNoise", "(", "device", ")", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "dis_layers", ")", ":", "\n", "            ", "input_dim", "=", "self", ".", "emb_dim", "if", "i", "==", "0", "else", "self", ".", "dis_hid_dim", "\n", "output_dim", "=", "1", "if", "i", "==", "self", ".", "dis_layers", "else", "self", ".", "dis_hid_dim", "\n", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", ")", "\n", "if", "i", "<", "self", ".", "dis_layers", ":", "\n", "                ", "layers", ".", "append", "(", "get_activation_function", "(", "'LeakyRelu'", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "self", ".", "dis_dropout", ")", ")", "\n", "# layers.append(nn.Sigmoid())", "\n", "\n", "", "", "self", ".", "final", "=", "nn", ".", "Linear", "(", "input_dim", ",", "1", ")", "\n", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.adversarial_models.Discriminator.forward": [[56, 64], ["adversarial_models.Discriminator.layers", "adversarial_models.Discriminator.sigmoid", "adversarial_models.Discriminator.final", "adversarial_models.Discriminator.view", "x.dim", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "dim", "(", ")", "==", "2", "and", "x", ".", "size", "(", "1", ")", "==", "self", ".", "emb_dim", "\n", "\n", "logits", "=", "self", ".", "layers", "(", "x", ")", "\n", "\n", "output", "=", "self", ".", "sigmoid", "(", "self", ".", "final", "(", "logits", ")", ")", "\n", "\n", "return", "output", ".", "view", "(", "-", "1", ")", ",", "logits", "\n", "# return self.layers(x).view(-1)", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.adversarial_models.D_NET64.__init__": [[112, 121], ["torch.nn.Module.__init__", "adversarial_models.D_NET64.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ",", "df_dim", ",", "ef_dim", ",", "conditional", ")", ":", "\n", "        ", "super", "(", "D_NET64", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.df_dim = cfg.GAN.DF_DIM", "\n", "# self.ef_dim = cfg.GAN.EMBEDDING_DIM", "\n", "self", ".", "df_dim", "=", "df_dim", "\n", "self", ".", "ef_dim", "=", "ef_dim", "\n", "self", ".", "conditional", "=", "conditional", "\n", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.adversarial_models.D_NET64.define_module": [[123, 139], ["adversarial_models.encode_image_by_16times", "torch.nn.Sigmoid", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Conv2d", "adversarial_models.Block3x3_leakRelu", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encode_image_by_16times", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "df_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "self", ".", "img_code_s16", "=", "encode_image_by_16times", "(", "ndf", ")", "\n", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "\n", ")", "\n", "self", ".", "output", "=", "nn", ".", "Linear", "(", "256", ",", "1", ")", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "self", ".", "jointConv", "=", "Block3x3_leakRelu", "(", "ndf", "*", "8", "+", "efg", ",", "ndf", "*", "8", ")", "\n", "self", ".", "uncond_logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.adversarial_models.D_NET64.forward": [[140, 163], ["adversarial_models.D_NET64.img_code_s16", "adversarial_models.D_NET64.logits", "logits.squeeze.squeeze.squeeze", "adversarial_models.D_NET64.sigmoid", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "adversarial_models.D_NET64.jointConv", "adversarial_models.D_NET64.output", "adversarial_models.D_NET64.uncond_logits", "adversarial_models.D_NET64.view", "adversarial_models.D_NET64.view", "adversarial_models.D_NET64.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x_var", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "img_code_s16", "(", "x_var", ")", "\n", "\n", "if", "self", ".", "conditional", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "4", ",", "4", ")", "\n", "# state size (ngf+egf) x 4 x 4", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "x_code", ")", ",", "1", ")", "\n", "# state size ngf x in_size x in_size", "\n", "h_c_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n", "", "else", ":", "\n", "            ", "h_c_code", "=", "x_code", "\n", "\n", "", "logits", "=", "self", ".", "logits", "(", "h_c_code", ")", "\n", "\n", "logits", "=", "logits", ".", "squeeze", "(", ")", "\n", "\n", "output", "=", "self", ".", "sigmoid", "(", "self", ".", "output", "(", "logits", ")", ")", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "out_uncond", "=", "self", ".", "uncond_logits", "(", "x_code", ")", "\n", "return", "[", "output", ".", "view", "(", "-", "1", ")", ",", "out_uncond", ".", "view", "(", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", ",", "logits", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.adversarial_models.Block3x3_leakRelu": [[69, 76], ["torch.nn.Sequential", "models.stack_gan2.model.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["", "", "def", "Block3x3_leakRelu", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "in_planes", ",", "out_planes", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.adversarial_models.downBlock": [[79, 86], ["torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU"], "function", ["None"], ["", "def", "downBlock", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.adversarial_models.encode_image_by_16times": [[89, 108], ["torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU"], "function", ["None"], ["", "def", "encode_image_by_16times", "(", "ndf", ")", ":", "\n", "    ", "encode_img", "=", "nn", ".", "Sequential", "(", "\n", "# --> state size. ndf x in_size/2 x in_size/2", "\n", "nn", ".", "Conv2d", "(", "3", ",", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# --> state size 2ndf x x in_size/4 x in_size/4", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# --> state size 4ndf x in_size/8 x in_size/8", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# --> state size 8ndf x in_size/16 x in_size/16", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "return", "encode_img", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.GLU.__init__": [[22, 24], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.GLU.forward": [[25, 30], ["x.size", "int", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "nc", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "nc", "%", "2", "==", "0", ",", "'channels dont divide 2!'", "\n", "nc", "=", "int", "(", "nc", "/", "2", ")", "\n", "return", "x", "[", ":", ",", ":", "nc", "]", "*", "F", ".", "sigmoid", "(", "x", "[", ":", ",", "nc", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.INIT_STAGE_G.__init__": [[57, 62], ["torch.Module.__init__", "image_models3.INIT_STAGE_G.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ")", ":", "\n", "        ", "super", "(", "INIT_STAGE_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "self", ".", "in_dim", "=", "indim", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.INIT_STAGE_G.define_module": [[63, 75], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "image_models3.upBlock", "image_models3.upBlock", "image_models3.upBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "image_models3.GLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "in_dim", "=", "self", ".", "in_dim", "\n", "ngf", "=", "self", ".", "gf_dim", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "ngf", "*", "4", "*", "4", "*", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ngf", "*", "4", "*", "4", "*", "2", ")", ",", "\n", "GLU", "(", ")", ")", "\n", "\n", "\n", "self", ".", "upsample1", "=", "upBlock", "(", "ngf", ",", "ngf", "//", "2", ")", "\n", "self", ".", "upsample2", "=", "upBlock", "(", "ngf", "//", "2", ",", "ngf", "//", "4", ")", "\n", "self", ".", "upsample3", "=", "upBlock", "(", "ngf", "//", "4", ",", "ngf", "//", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.INIT_STAGE_G.forward": [[77, 92], ["image_models3.INIT_STAGE_G.fc", "image_models3.INIT_STAGE_G.view", "image_models3.INIT_STAGE_G.upsample1", "image_models3.INIT_STAGE_G.upsample2", "image_models3.INIT_STAGE_G.upsample3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_code", ")", ":", "\n", "\n", "        ", "in_code", "=", "z_code", "\n", "# state size 8ngf x 4 x 4", "\n", "out_code", "=", "self", ".", "fc", "(", "in_code", ")", "\n", "out_code", "=", "out_code", ".", "view", "(", "-", "1", ",", "self", ".", "gf_dim", ",", "4", ",", "4", ")", "\n", "# state size 4ngf x 8 x 8", "\n", "out_code", "=", "self", ".", "upsample1", "(", "out_code", ")", "\n", "# state size 2ngf x 16 x 16", "\n", "out_code", "=", "self", ".", "upsample2", "(", "out_code", ")", "\n", "# state size ngf x 32 x 32", "\n", "out_code", "=", "self", ".", "upsample3", "(", "out_code", ")", "\n", "\n", "\n", "return", "out_code", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.GET_IMAGE_G.__init__": [[94, 100], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "image_models3.conv3x3", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ")", ":", "\n", "        ", "super", "(", "GET_IMAGE_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "self", ".", "img", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "ngf", ",", "ngf", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.GET_IMAGE_G.forward": [[102, 105], ["image_models3.GET_IMAGE_G.img"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h_code", ")", ":", "\n", "        ", "out_img", "=", "self", ".", "img", "(", "h_code", ")", "\n", "return", "out_img", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.G_NET.__init__": [[107, 111], ["torch.Module.__init__", "image_models3.G_NET.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "G_NET", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.G_NET.define_module": [[112, 115], ["image_models3.INIT_STAGE_G", "image_models3.GET_IMAGE_G"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "            ", "self", ".", "h_net1", "=", "INIT_STAGE_G", "(", "self", ".", "gf_dim", "*", "8", ")", "\n", "self", ".", "img_net1", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", ")", "\n", "", "def", "forward", "(", "self", ",", "text_embedding", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.G_NET.forward": [[115, 123], ["image_models3.G_NET.h_net1", "image_models3.G_NET.img_net1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "text_embedding", ")", ":", "\n", "#if cfg.GAN.B_CONDITION and text_embedding is not None:", "\n", "#    c_code, mu, logvar = self.ca_net(text_embedding)", "\n", "#else:", "\n", "#    c_code, mu, logvar = z_code, None, None", "\n", "        ", "h_code1", "=", "self", ".", "h_net1", "(", "text_embedding", ")", "\n", "fake_img1", "=", "self", ".", "img_net1", "(", "h_code1", ")", "\n", "return", "fake_img1", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAE32.__init__": [[132, 247], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAE32", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoded", "=", "None", "\n", "\n", "# ENCODER", "\n", "\n", "# 64x64x64", "\n", "self", ".", "e_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 32x32x32", "\n", "self", ".", "e_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "# DECODER", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_up_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 256x128x128", "\n", "self", ".", "d_up_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 3x128x128", "\n", "self", ".", "d_up_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "2", ",", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAE32.encode": [[250, 269], ["image_models3.CAE32.e_conv_1", "image_models3.CAE32.e_conv_2", "image_models3.CAE32.e_conv_3", "image_models3.CAE32.e_block_1", "image_models3.CAE32.e_block_2", "image_models3.CAE32.e_block_3", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "ec1", "=", "self", ".", "e_conv_1", "(", "x", ")", "\n", "ec2", "=", "self", ".", "e_conv_2", "(", "ec1", ")", "\n", "eblock1", "=", "self", ".", "e_block_1", "(", "ec2", ")", "+", "ec2", "\n", "eblock2", "=", "self", ".", "e_block_2", "(", "eblock1", ")", "+", "eblock1", "\n", "eblock3", "=", "self", ".", "e_block_3", "(", "eblock2", ")", "+", "eblock2", "\n", "ec3", "=", "self", ".", "e_conv_3", "(", "eblock3", ")", "# in [-1, 1] from tanh activation", "\n", "\n", "# stochastic binarization", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand", "=", "torch", ".", "rand", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "prob", "=", "(", "1", "+", "ec3", ")", "/", "2", "\n", "eps", "=", "torch", ".", "zeros", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "eps", "[", "rand", "<=", "prob", "]", "=", "(", "1", "-", "ec3", ")", "[", "rand", "<=", "prob", "]", "\n", "eps", "[", "rand", ">", "prob", "]", "=", "(", "-", "ec3", "-", "1", ")", "[", "rand", ">", "prob", "]", "\n", "\n", "# encoded tensor", "\n", "", "self", ".", "encoded", "=", "0.5", "*", "(", "ec3", "+", "eps", "+", "1", ")", "# (-1|1) -> (0|1)", "\n", "return", "self", ".", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAE32.decode": [[271, 282], ["image_models3.CAE32.d_up_conv_1", "image_models3.CAE32.d_up_conv_2", "image_models3.CAE32.d_up_conv_3", "image_models3.CAE32.d_block_1", "image_models3.CAE32.d_block_2", "image_models3.CAE32.d_block_3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "encoded", ")", ":", "\n", "        ", "y", "=", "encoded", "*", "2.0", "-", "1", "# (0|1) -> (-1|1)", "\n", "\n", "uc1", "=", "self", ".", "d_up_conv_1", "(", "y", ")", "\n", "dblock1", "=", "self", ".", "d_block_1", "(", "uc1", ")", "+", "uc1", "\n", "dblock2", "=", "self", ".", "d_block_2", "(", "dblock1", ")", "+", "dblock1", "\n", "dblock3", "=", "self", ".", "d_block_3", "(", "dblock2", ")", "+", "dblock2", "\n", "uc2", "=", "self", ".", "d_up_conv_2", "(", "dblock3", ")", "\n", "dec", "=", "self", ".", "d_up_conv_3", "(", "uc2", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAE32.forward": [[283, 286], ["image_models3.CAE32.encode", "image_models3.CAE32.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "encode", "(", "x", ")", "\n", "return", "self", ".", "decode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAE16.__init__": [[294, 410], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAE16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoded", "=", "None", "\n", "\n", "# ENCODER", "\n", "\n", "# 64x64x64", "\n", "self", ".", "e_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 16x16x16", "\n", "self", ".", "e_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "# DECODER", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_up_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 256x64x64", "\n", "self", ".", "d_up_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 3x128x128", "\n", "self", ".", "d_up_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAE16.encode": [[412, 432], ["image_models3.CAE16.e_conv_1", "image_models3.CAE16.e_conv_2", "image_models3.CAE16.e_conv_3", "image_models3.CAE16.e_block_1", "image_models3.CAE16.e_block_2", "image_models3.CAE16.e_block_3", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "ec1", "=", "self", ".", "e_conv_1", "(", "x", ")", "\n", "ec2", "=", "self", ".", "e_conv_2", "(", "ec1", ")", "\n", "eblock1", "=", "self", ".", "e_block_1", "(", "ec2", ")", "+", "ec2", "\n", "eblock2", "=", "self", ".", "e_block_2", "(", "eblock1", ")", "+", "eblock1", "\n", "eblock3", "=", "self", ".", "e_block_3", "(", "eblock2", ")", "+", "eblock2", "\n", "ec3", "=", "self", ".", "e_conv_3", "(", "eblock3", ")", "# in [-1, 1] from tanh activation", "\n", "\n", "# stochastic binarization", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand", "=", "torch", ".", "rand", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "prob", "=", "(", "1", "+", "ec3", ")", "/", "2", "\n", "eps", "=", "torch", ".", "zeros", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "eps", "[", "rand", "<=", "prob", "]", "=", "(", "1", "-", "ec3", ")", "[", "rand", "<=", "prob", "]", "\n", "eps", "[", "rand", ">", "prob", "]", "=", "(", "-", "ec3", "-", "1", ")", "[", "rand", ">", "prob", "]", "\n", "\n", "# encoded tensor", "\n", "", "self", ".", "encoded", "=", "0.5", "*", "(", "ec3", "+", "eps", "+", "1", ")", "# (-1|1) -> (0|1)", "\n", "\n", "return", "self", ".", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAE16.decode": [[433, 444], ["image_models3.CAE16.d_up_conv_1", "image_models3.CAE16.d_up_conv_2", "image_models3.CAE16.d_up_conv_3", "image_models3.CAE16.d_block_1", "image_models3.CAE16.d_block_2", "image_models3.CAE16.d_block_3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "encoded", ")", ":", "\n", "        ", "y", "=", "encoded", "*", "2.0", "-", "1", "# (0|1) -> (-1|1)", "\n", "\n", "uc1", "=", "self", ".", "d_up_conv_1", "(", "y", ")", "\n", "dblock1", "=", "self", ".", "d_block_1", "(", "uc1", ")", "+", "uc1", "\n", "dblock2", "=", "self", ".", "d_block_2", "(", "dblock1", ")", "+", "dblock1", "\n", "dblock3", "=", "self", ".", "d_block_3", "(", "dblock2", ")", "+", "dblock2", "\n", "uc2", "=", "self", ".", "d_up_conv_2", "(", "dblock3", ")", "\n", "dec", "=", "self", ".", "d_up_conv_3", "(", "uc2", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAE16.forward": [[445, 448], ["image_models3.CAE16.encode", "image_models3.CAE16.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "encode", "(", "x", ")", "\n", "return", "self", ".", "decode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAE8.__init__": [[458, 584], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAE8", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoded", "=", "None", "\n", "\n", "# ENCODER", "\n", "\n", "# 64x64x64", "\n", "self", ".", "e_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x16x16", "\n", "self", ".", "e_pool_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x16x16", "\n", "self", ".", "e_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x16x16", "\n", "self", ".", "e_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 16x8x8", "\n", "self", ".", "e_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "# DECODER", "\n", "\n", "# 128x16x16", "\n", "self", ".", "d_up_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x16x16", "\n", "self", ".", "d_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_up_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 256x64x64", "\n", "self", ".", "d_up_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 3x128x128", "\n", "self", ".", "d_up_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAE8.encode": [[586, 608], ["image_models3.CAE8.e_conv_1", "image_models3.CAE8.e_conv_2", "image_models3.CAE8.e_block_1", "image_models3.CAE8.e_pool_1", "image_models3.CAE8.e_conv_3", "image_models3.CAE8.e_block_2", "image_models3.CAE8.e_block_3", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "# ENCODE", "\n", "        ", "ec1", "=", "self", ".", "e_conv_1", "(", "x", ")", "\n", "ec2", "=", "self", ".", "e_conv_2", "(", "ec1", ")", "\n", "eblock1", "=", "self", ".", "e_block_1", "(", "ec2", ")", "\n", "eblock1", "=", "self", ".", "e_pool_1", "(", "ec2", "+", "eblock1", ")", "\n", "eblock2", "=", "self", ".", "e_block_2", "(", "eblock1", ")", "+", "eblock1", "\n", "eblock3", "=", "self", ".", "e_block_3", "(", "eblock2", ")", "+", "eblock2", "\n", "ec3", "=", "self", ".", "e_conv_3", "(", "eblock3", ")", "# in [-1, 1] from tanh activation", "\n", "\n", "# stochastic binarization", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand", "=", "torch", ".", "rand", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "prob", "=", "(", "1", "+", "ec3", ")", "/", "2", "\n", "eps", "=", "torch", ".", "zeros", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "eps", "[", "rand", "<=", "prob", "]", "=", "(", "1", "-", "ec3", ")", "[", "rand", "<=", "prob", "]", "\n", "eps", "[", "rand", ">", "prob", "]", "=", "(", "-", "ec3", "-", "1", ")", "[", "rand", ">", "prob", "]", "\n", "\n", "# encoded tensor", "\n", "", "self", ".", "encoded", "=", "0.5", "*", "(", "ec3", "+", "eps", "+", "1", ")", "# (-1|1) -> (0|1)", "\n", "\n", "return", "self", ".", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAE8.decode": [[609, 621], ["image_models3.CAE8.d_up_conv_1", "image_models3.CAE8.d_up_1", "image_models3.CAE8.d_up_conv_2", "image_models3.CAE8.d_up_conv_3", "image_models3.CAE8.d_block_1", "image_models3.CAE8.d_block_2", "image_models3.CAE8.d_block_3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "enc", ")", ":", "\n", "        ", "y", "=", "enc", "*", "2.0", "-", "1", "# (0|1) -> (-1, 1)", "\n", "\n", "uc1", "=", "self", ".", "d_up_conv_1", "(", "y", ")", "\n", "dblock1", "=", "self", ".", "d_block_1", "(", "uc1", ")", "+", "uc1", "\n", "dup1", "=", "self", ".", "d_up_1", "(", "dblock1", ")", "\n", "dblock2", "=", "self", ".", "d_block_2", "(", "dup1", ")", "+", "dup1", "\n", "dblock3", "=", "self", ".", "d_block_3", "(", "dblock2", ")", "+", "dblock2", "\n", "uc2", "=", "self", ".", "d_up_conv_2", "(", "dblock3", ")", "\n", "dec", "=", "self", ".", "d_up_conv_3", "(", "uc2", ")", "\n", "\n", "return", "dec", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAE8.forward": [[621, 624], ["image_models3.CAE8.encode", "image_models3.CAE8.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "encode", "(", "x", ")", "\n", "return", "self", ".", "decode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAEB.__init__": [[633, 759], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "image_models3.G_NET", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAEB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoded", "=", "None", "\n", "\n", "# ENCODER", "\n", "\n", "# 64x64x64", "\n", "self", ".", "e_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 32x32x32", "\n", "self", ".", "e_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "self", ".", "bottle_neck1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "32", "*", "32", ",", "32", "*", "32", "*", "16", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "self", ".", "bottle_neck2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "32", "*", "16", ",", "32", "*", "32", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "\n", "self", ".", "bottle_neck3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "32", "*", "4", ",", "indim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "reverse_bottle", "=", "G_NET", "(", ")", "\n", "# DECODER", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_up_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 256x128x128", "\n", "self", ".", "d_up_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 3x128x128", "\n", "self", ".", "d_up_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "2", ",", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAEB.encode": [[763, 784], ["image_models3.CAEB.e_conv_1", "image_models3.CAEB.e_conv_2", "image_models3.CAEB.e_conv_3", "image_models3.CAEB.bottle_func", "image_models3.CAEB.e_block_1", "image_models3.CAEB.e_block_2", "image_models3.CAEB.e_block_3", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAEBo.bottle_func"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "ec1", "=", "self", ".", "e_conv_1", "(", "x", ")", "\n", "ec2", "=", "self", ".", "e_conv_2", "(", "ec1", ")", "\n", "eblock1", "=", "self", ".", "e_block_1", "(", "ec2", ")", "+", "ec2", "\n", "eblock2", "=", "self", ".", "e_block_2", "(", "eblock1", ")", "+", "eblock1", "\n", "eblock3", "=", "self", ".", "e_block_3", "(", "eblock2", ")", "+", "eblock2", "\n", "ec3", "=", "self", ".", "e_conv_3", "(", "eblock3", ")", "# in [-1, 1] from tanh activation", "\n", "\n", "# stochastic binarization", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand", "=", "torch", ".", "rand", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "prob", "=", "(", "1", "+", "ec3", ")", "/", "2", "\n", "eps", "=", "torch", ".", "zeros", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "eps", "[", "rand", "<=", "prob", "]", "=", "(", "1", "-", "ec3", ")", "[", "rand", "<=", "prob", "]", "\n", "eps", "[", "rand", ">", "prob", "]", "=", "(", "-", "ec3", "-", "1", ")", "[", "rand", ">", "prob", "]", "\n", "\n", "# encoded tensor", "\n", "", "self", ".", "encoded", "=", "0.5", "*", "(", "ec3", "+", "eps", "+", "1", ")", "# (-1|1) -> (0|1)", "\n", "\n", "#return self.decode(self.encoded)", "\n", "return", "self", ".", "bottle_func", "(", "self", ".", "encoded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAEB.bottle_func": [[785, 798], ["torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "image_models3.CAEB.bottle_neck1", "image_models3.CAEB.bottle_neck2", "image_models3.CAEB.bottle_neck3"], "methods", ["None"], ["", "def", "bottle_func", "(", "self", ",", "encoded", ")", ":", "\n", "#print(\"encoded.shape\", encoded.shape)", "\n", "        ", "x", "=", "torch", ".", "flatten", "(", "encoded", ",", "1", ")", "\n", "#print(\"b1.shape\", x.shape)", "\n", "x", "=", "self", ".", "bottle_neck1", "(", "x", ")", "\n", "#print(\"b2.shape\", x.shape)", "\n", "x", "=", "self", ".", "bottle_neck2", "(", "x", ")", "\n", "#print(\"b3.shape\", x.shape)", "\n", "comp", "=", "self", ".", "bottle_neck3", "(", "x", ")", "\n", "#print(\"comp.shape\", comp.shape)", "\n", "\n", "#print(\"x.shape\", x.shape)", "\n", "return", "comp", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAEB.decode": [[799, 810], ["image_models3.CAEB.d_up_conv_1", "image_models3.CAEB.d_up_conv_2", "image_models3.CAEB.d_up_conv_3", "image_models3.CAEB.d_block_1", "image_models3.CAEB.d_block_2", "image_models3.CAEB.d_block_3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "encoded", ")", ":", "\n", "        ", "y", "=", "encoded", "*", "2.0", "-", "1", "# (0|1) -> (-1|1)", "\n", "\n", "uc1", "=", "self", ".", "d_up_conv_1", "(", "y", ")", "\n", "dblock1", "=", "self", ".", "d_block_1", "(", "uc1", ")", "+", "uc1", "\n", "dblock2", "=", "self", ".", "d_block_2", "(", "dblock1", ")", "+", "dblock1", "\n", "dblock3", "=", "self", ".", "d_block_3", "(", "dblock2", ")", "+", "dblock2", "\n", "uc2", "=", "self", ".", "d_up_conv_2", "(", "dblock3", ")", "\n", "dec", "=", "self", ".", "d_up_conv_3", "(", "uc2", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAEB.forward": [[811, 815], ["image_models3.CAEB.encode", "image_models3.CAEB.reverse_bottle", "image_models3.CAEB.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "encode", "(", "x", ")", "\n", "x", "=", "self", ".", "reverse_bottle", "(", "x", ")", "\n", "return", "self", ".", "decode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAEBo.__init__": [[823, 944], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "image_models3.G_NET", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAEBo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoded", "=", "None", "\n", "\n", "# ENCODER", "\n", "\n", "# 64x64x64", "\n", "self", ".", "e_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 32x32x32", "\n", "self", ".", "e_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "16", ",", "16", ")", ")", "\n", "self", ".", "bottle_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "16", "*", "16", ",", "indim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "\n", "self", ".", "reverse_bottle", "=", "G_NET", "(", ")", "\n", "# DECODER", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_up_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 256x128x128", "\n", "self", ".", "d_up_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 3x128x128", "\n", "self", ".", "d_up_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "2", ",", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAEBo.encode": [[946, 967], ["image_models3.CAEBo.e_conv_1", "image_models3.CAEBo.e_conv_2", "image_models3.CAEBo.e_conv_3", "image_models3.CAEBo.bottle_func", "image_models3.CAEBo.e_block_1", "image_models3.CAEBo.e_block_2", "image_models3.CAEBo.e_block_3", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAEBo.bottle_func"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "ec1", "=", "self", ".", "e_conv_1", "(", "x", ")", "\n", "ec2", "=", "self", ".", "e_conv_2", "(", "ec1", ")", "\n", "eblock1", "=", "self", ".", "e_block_1", "(", "ec2", ")", "+", "ec2", "\n", "eblock2", "=", "self", ".", "e_block_2", "(", "eblock1", ")", "+", "eblock1", "\n", "eblock3", "=", "self", ".", "e_block_3", "(", "eblock2", ")", "+", "eblock2", "\n", "ec3", "=", "self", ".", "e_conv_3", "(", "eblock3", ")", "# in [-1, 1] from tanh activation", "\n", "\n", "# stochastic binarization", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand", "=", "torch", ".", "rand", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "prob", "=", "(", "1", "+", "ec3", ")", "/", "2", "\n", "eps", "=", "torch", ".", "zeros", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "eps", "[", "rand", "<=", "prob", "]", "=", "(", "1", "-", "ec3", ")", "[", "rand", "<=", "prob", "]", "\n", "eps", "[", "rand", ">", "prob", "]", "=", "(", "-", "ec3", "-", "1", ")", "[", "rand", ">", "prob", "]", "\n", "\n", "# encoded tensor", "\n", "", "self", ".", "encoded", "=", "0.5", "*", "(", "ec3", "+", "eps", "+", "1", ")", "# (-1|1) -> (0|1)", "\n", "\n", "#return self.decode(self.encoded)", "\n", "return", "self", ".", "bottle_func", "(", "self", ".", "encoded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAEBo.bottle_func": [[968, 976], ["image_models3.CAEBo.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "image_models3.CAEBo.bottle_neck"], "methods", ["None"], ["", "def", "bottle_func", "(", "self", ",", "encoded", ")", ":", "\n", "#print(\"encoded.shape\", encoded.shape)", "\n", "        ", "x", "=", "self", ".", "avgpool", "(", "encoded", ")", "\n", "#print(\"avg.shape\", x.shape)", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "#print(\"b1.shape\", x.shape)", "\n", "comp", "=", "self", ".", "bottle_neck", "(", "x", ")", "\n", "return", "comp", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAEBo.decode": [[979, 990], ["image_models3.CAEBo.d_up_conv_1", "image_models3.CAEBo.d_up_conv_2", "image_models3.CAEBo.d_up_conv_3", "image_models3.CAEBo.d_block_1", "image_models3.CAEBo.d_block_2", "image_models3.CAEBo.d_block_3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "encoded", ")", ":", "\n", "        ", "y", "=", "encoded", "*", "2.0", "-", "1", "# (0|1) -> (-1|1)", "\n", "\n", "uc1", "=", "self", ".", "d_up_conv_1", "(", "y", ")", "\n", "dblock1", "=", "self", ".", "d_block_1", "(", "uc1", ")", "+", "uc1", "\n", "dblock2", "=", "self", ".", "d_block_2", "(", "dblock1", ")", "+", "dblock1", "\n", "dblock3", "=", "self", ".", "d_block_3", "(", "dblock2", ")", "+", "dblock2", "\n", "uc2", "=", "self", ".", "d_up_conv_2", "(", "dblock3", ")", "\n", "dec", "=", "self", ".", "d_up_conv_3", "(", "uc2", ")", "\n", "\n", "return", "dec", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.CAEBo.forward": [[990, 994], ["image_models3.CAEBo.encode", "image_models3.CAEBo.reverse_bottle", "image_models3.CAEBo.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "encode", "(", "x", ")", "\n", "x", "=", "self", ".", "reverse_bottle", "(", "x", ")", "\n", "return", "self", ".", "decode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.ResBlock.__init__": [[996, 1010], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "layers.insert", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "mid_channels", "=", "None", ",", "bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "mid_channels", "is", "None", ":", "\n", "            ", "mid_channels", "=", "out_channels", "\n", "\n", "", "layers", "=", "[", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "mid_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "]", "\n", "if", "bn", ":", "\n", "            ", "layers", ".", "insert", "(", "2", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", "\n", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.ResBlock.forward": [[1011, 1013], ["image_models3.ResBlock.convs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "convs", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.vai.__init__": [[1016, 1049], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "image_models3.ResBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "image_models3.ResBlock", "image_models3.ResBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "image_models3.ResBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d", "=", "64", ",", "kl_coef", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "vai", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "d", "//", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "d", "//", "2", ",", "d", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "ResBlock", "(", "d", ",", "d", ",", "bn", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d", ")", ",", "\n", "ResBlock", "(", "d", ",", "d", ",", "bn", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "ResBlock", "(", "d", ",", "d", ",", "bn", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d", ")", ",", "\n", "ResBlock", "(", "d", ",", "d", ",", "bn", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "d", ",", "d", "//", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "d", "//", "2", ",", "3", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "f", "=", "32", "# size of bottle neck image 32*32", "\n", "self", ".", "d", "=", "d", "\n", "self", ".", "fc11", "=", "nn", ".", "Linear", "(", "d", "*", "self", ".", "f", "**", "2", ",", "(", "d", "//", "8", ")", "*", "self", ".", "f", "**", "2", ")", "\n", "self", ".", "fc12", "=", "nn", ".", "Linear", "(", "d", "*", "self", ".", "f", "**", "2", ",", "(", "d", "//", "8", ")", "*", "self", ".", "f", "**", "2", ")", "\n", "self", ".", "fc13", "=", "nn", ".", "Linear", "(", "(", "d", "//", "8", ")", "*", "self", ".", "f", "**", "2", ",", "d", "*", "self", ".", "f", "**", "2", ")", "\n", "self", ".", "kl_coef", "=", "kl_coef", "\n", "self", ".", "kl_loss", "=", "0", "\n", "self", ".", "mse", "=", "0", "\n", "", "def", "encode", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.vai.encode": [[1049, 1053], ["image_models3.vai.encoder", "h1.view.view.view", "image_models3.vai.fc11", "image_models3.vai.fc12"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "h1", "=", "self", ".", "encoder", "(", "x", ")", "\n", "h1", "=", "h1", ".", "view", "(", "-", "1", ",", "self", ".", "d", "*", "self", ".", "f", "**", "2", ")", "\n", "return", "self", ".", "fc11", "(", "h1", ")", ",", "self", ".", "fc12", "(", "h1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.vai.reparameterize": [[1054, 1061], ["logvar.mul().exp_", "logvar.mul().exp_.new().normal_", "logvar.mul().exp_.new().normal_.mul().add_", "logvar.mul", "logvar.mul().exp_.new", "logvar.mul().exp_.new().normal_.mul", "logvar.mul().exp_.size"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "std", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "eps", "=", "std", ".", "new", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "", "else", ":", "\n", "            ", "return", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.vai.decode": [[1062, 1067], ["image_models3.vai.fc13", "z.view.view.view", "image_models3.vai.decoder", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "        ", "z", "=", "self", ".", "fc13", "(", "z", ")", "\n", "z", "=", "z", ".", "view", "(", "-", "1", ",", "self", ".", "d", ",", "self", ".", "f", ",", "self", ".", "f", ")", "\n", "h3", "=", "self", ".", "decoder", "(", "z", ")", "\n", "return", "torch", ".", "tanh", "(", "h3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.vai.forward": [[1068, 1072], ["image_models3.vai.encode", "image_models3.vai.reparameterize", "image_models3.vai.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.comrecCNN.reparameterize", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mu", ",", "logvar", "=", "self", ".", "encode", "(", "x", ")", "\n", "z", "=", "self", ".", "reparameterize", "(", "mu", ",", "logvar", ")", "\n", "return", "self", ".", "decode", "(", "z", ")", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.VAE.__init__": [[1077, 1134], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nc", ",", "ngf", ",", "ndf", ",", "latent_variable_size", ")", ":", "\n", "        ", "super", "(", "VAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "nc", "=", "nc", "\n", "self", ".", "ngf", "=", "ngf", "\n", "self", ".", "ndf", "=", "ndf", "\n", "self", ".", "latent_variable_size", "=", "latent_variable_size", "\n", "\n", "# encoder", "\n", "self", ".", "e1", "=", "nn", ".", "Conv2d", "(", "nc", ",", "ndf", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "ndf", ")", "\n", "\n", "self", ".", "e2", "=", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "2", ")", "\n", "\n", "self", ".", "e3", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "4", ")", "\n", "\n", "self", ".", "e4", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "8", ")", "\n", "\n", "self", ".", "e5", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "ndf", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "8", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "ndf", "*", "8", "*", "4", "*", "4", ",", "latent_variable_size", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "ndf", "*", "8", "*", "4", "*", "4", ",", "latent_variable_size", ")", "\n", "\n", "# decoder", "\n", "self", ".", "d1", "=", "nn", ".", "Linear", "(", "latent_variable_size", ",", "ngf", "*", "8", "*", "2", "*", "4", "*", "4", ")", "\n", "\n", "self", ".", "up1", "=", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "pd1", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "d2", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "8", "*", "2", ",", "ngf", "*", "8", ",", "3", ",", "1", ")", "\n", "self", ".", "bn6", "=", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "8", ",", "1.e-3", ")", "\n", "\n", "self", ".", "up2", "=", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "pd2", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "d3", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "8", ",", "ngf", "*", "4", ",", "3", ",", "1", ")", "\n", "self", ".", "bn7", "=", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "4", ",", "1.e-3", ")", "\n", "\n", "self", ".", "up3", "=", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "pd3", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "d4", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "4", ",", "ngf", "*", "2", ",", "3", ",", "1", ")", "\n", "self", ".", "bn8", "=", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "2", ",", "1.e-3", ")", "\n", "\n", "self", ".", "up4", "=", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "pd4", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "d5", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "2", ",", "ngf", ",", "3", ",", "1", ")", "\n", "self", ".", "bn9", "=", "nn", ".", "BatchNorm2d", "(", "ngf", ",", "1.e-3", ")", "\n", "\n", "self", ".", "up5", "=", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "pd5", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "d6", "=", "nn", ".", "Conv2d", "(", "ngf", ",", "nc", ",", "3", ",", "1", ")", "\n", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.VAE.encode": [[1135, 1147], ["image_models3.VAE.leakyrelu", "image_models3.VAE.leakyrelu", "image_models3.VAE.leakyrelu", "image_models3.VAE.leakyrelu", "image_models3.VAE.leakyrelu", "h5.view.view.view", "image_models3.VAE.fc1", "image_models3.VAE.fc2", "image_models3.VAE.reparametrize", "image_models3.VAE.bn1", "image_models3.VAE.bn2", "image_models3.VAE.bn3", "image_models3.VAE.bn4", "image_models3.VAE.bn5", "image_models3.VAE.e1", "image_models3.VAE.e2", "image_models3.VAE.e3", "image_models3.VAE.e4", "image_models3.VAE.e5"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.CA_NET.reparametrize"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "h1", "=", "self", ".", "leakyrelu", "(", "self", ".", "bn1", "(", "self", ".", "e1", "(", "x", ")", ")", ")", "\n", "h2", "=", "self", ".", "leakyrelu", "(", "self", ".", "bn2", "(", "self", ".", "e2", "(", "h1", ")", ")", ")", "\n", "h3", "=", "self", ".", "leakyrelu", "(", "self", ".", "bn3", "(", "self", ".", "e3", "(", "h2", ")", ")", ")", "\n", "h4", "=", "self", ".", "leakyrelu", "(", "self", ".", "bn4", "(", "self", ".", "e4", "(", "h3", ")", ")", ")", "\n", "h5", "=", "self", ".", "leakyrelu", "(", "self", ".", "bn5", "(", "self", ".", "e5", "(", "h4", ")", ")", ")", "\n", "h5", "=", "h5", ".", "view", "(", "-", "1", ",", "self", ".", "ndf", "*", "8", "*", "4", "*", "4", ")", "\n", "mu", "=", "self", ".", "fc1", "(", "h5", ")", "\n", "logvar", "=", "self", ".", "fc2", "(", "h5", ")", "\n", "z", "=", "self", ".", "reparametrize", "(", "mu", ",", "logvar", ")", "\n", "\n", "return", "z", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.VAE.reparametrize": [[1148, 1157], ["logvar.mul().exp_", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.FloatTensor().normal_.mul().add_", "torch.FloatTensor().normal_.mul().add_", "torch.FloatTensor().normal_.mul().add_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "logvar.mul", "torch.FloatTensor().normal_.mul", "torch.FloatTensor().normal_.mul", "torch.FloatTensor().normal_.mul", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "logvar.mul().exp_.size", "logvar.mul().exp_.size"], "methods", ["None"], ["", "def", "reparametrize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "std", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "eps", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "\n", "", "else", ":", "\n", "            ", "eps", "=", "torch", ".", "FloatTensor", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "\n", "#eps = torch.cuda.FloatTensor(std.size()).normal_()", "\n", "", "eps", "=", "Variable", "(", "eps", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.VAE.decode": [[1158, 1167], ["image_models3.VAE.relu", "h1.view.view.view", "image_models3.VAE.leakyrelu", "image_models3.VAE.leakyrelu", "image_models3.VAE.leakyrelu", "image_models3.VAE.leakyrelu", "image_models3.VAE.sigmoid", "image_models3.VAE.d1", "image_models3.VAE.bn6", "image_models3.VAE.bn7", "image_models3.VAE.bn8", "image_models3.VAE.bn9", "image_models3.VAE.d6", "image_models3.VAE.d2", "image_models3.VAE.d3", "image_models3.VAE.d4", "image_models3.VAE.d5", "image_models3.VAE.pd5", "image_models3.VAE.pd1", "image_models3.VAE.pd2", "image_models3.VAE.pd3", "image_models3.VAE.pd4", "image_models3.VAE.up5", "image_models3.VAE.up1", "image_models3.VAE.up2", "image_models3.VAE.up3", "image_models3.VAE.up4"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "        ", "h1", "=", "self", ".", "relu", "(", "self", ".", "d1", "(", "z", ")", ")", "\n", "h1", "=", "h1", ".", "view", "(", "-", "1", ",", "self", ".", "ngf", "*", "8", "*", "2", ",", "4", ",", "4", ")", "\n", "h2", "=", "self", ".", "leakyrelu", "(", "self", ".", "bn6", "(", "self", ".", "d2", "(", "self", ".", "pd1", "(", "self", ".", "up1", "(", "h1", ")", ")", ")", ")", ")", "\n", "h3", "=", "self", ".", "leakyrelu", "(", "self", ".", "bn7", "(", "self", ".", "d3", "(", "self", ".", "pd2", "(", "self", ".", "up2", "(", "h2", ")", ")", ")", ")", ")", "\n", "h4", "=", "self", ".", "leakyrelu", "(", "self", ".", "bn8", "(", "self", ".", "d4", "(", "self", ".", "pd3", "(", "self", ".", "up3", "(", "h3", ")", ")", ")", ")", ")", "\n", "h5", "=", "self", ".", "leakyrelu", "(", "self", ".", "bn9", "(", "self", ".", "d5", "(", "self", ".", "pd4", "(", "self", ".", "up4", "(", "h4", ")", ")", ")", ")", ")", "\n", "\n", "return", "self", ".", "sigmoid", "(", "self", ".", "d6", "(", "self", ".", "pd5", "(", "self", ".", "up5", "(", "h5", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.VAE.get_latent_var": [[1168, 1172], ["image_models3.VAE.encode", "image_models3.VAE.reparametrize", "x.view"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.CA_NET.reparametrize"], ["", "def", "get_latent_var", "(", "self", ",", "x", ")", ":", "\n", "        ", "mu", ",", "logvar", "=", "self", ".", "encode", "(", "x", ".", "view", "(", "-", "1", ",", "self", ".", "nc", ",", "self", ".", "ndf", ",", "self", ".", "ngf", ")", ")", "\n", "z", "=", "self", ".", "reparametrize", "(", "mu", ",", "logvar", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.VAE.forward": [[1173, 1178], ["image_models3.VAE.encode", "image_models3.VAE.decode", "x.view"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", ",", "mu", ",", "logvar", "=", "self", ".", "encode", "(", "x", ".", "view", "(", "-", "1", ",", "self", ".", "nc", ",", "self", ".", "ndf", ",", "self", ".", "ngf", ")", ")", "\n", "#z = self.reparametrize(mu, logvar)", "\n", "res", "=", "self", ".", "decode", "(", "z", ")", "\n", "return", "res", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.Interpolate.__init__": [[1192, 1197], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "mode", ")", ":", "\n", "        ", "super", "(", "Interpolate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "interp", "=", "nn", ".", "functional", ".", "interpolate", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.Interpolate.forward": [[1198, 1201], ["image_models3.Interpolate.interp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "interp", "(", "x", ",", "size", "=", "self", ".", "size", ",", "mode", "=", "self", ".", "mode", ",", "align_corners", "=", "False", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.encoder1.__init__": [[1203, 1206], ["torch.Module.__init__", "image_models3.encoder1.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "encoder1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.encoder1.define_module": [[1209, 1219], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bottle_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "3", "*", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ",", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.encoder1.forward": [[1219, 1229], ["image_models3.encoder1.relu", "image_models3.encoder1.relu", "image_models3.encoder1.bn1", "image_models3.encoder1.conv3", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "image_models3.encoder1.bottle_neck", "image_models3.encoder1.conv1", "image_models3.encoder1.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "#out = nn.ReLU(self.conv1(x))", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "#out = nn.ReLU(self.conv2(out))", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "torch", ".", "flatten", "(", "out", ",", "1", ")", "\n", "out", "=", "self", ".", "bottle_neck", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.com_enc.__init__": [[1231, 1245], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "com_enc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bottle_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "3", "*", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ",", "HIDDEN", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "def", "encode", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.com_enc.encode": [[1245, 1253], ["image_models3.com_enc.relu", "image_models3.com_enc.relu", "image_models3.com_enc.bn1", "image_models3.com_enc.conv3", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "image_models3.com_enc.bottle_neck", "image_models3.com_enc.conv1", "image_models3.com_enc.conv2"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "torch", ".", "flatten", "(", "out", ",", "1", ")", "\n", "out", "=", "self", ".", "bottle_neck", "(", "out", ")", "\n", "return", "out", "\n", "", "", "class", "com_dec", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.com_dec.__init__": [[1254, 1273], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "image_models3.Interpolate", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "com_dec", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "up_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "HIDDEN", ",", "8", "*", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "self", ".", "deconv0", "=", "nn", ".", "Conv2d", "(", "8", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "interpolate", "=", "Interpolate", "(", "size", "=", "HEIGHT", ",", "mode", "=", "'bicubic'", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "deconv_n", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_n", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "CHANNELS", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "def", "decode", "(", "self", ",", "z", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.com_dec.decode": [[1273, 1287], ["image_models3.com_dec.up_neck", "image_models3.com_dec.view", "image_models3.com_dec.deconv0", "image_models3.com_dec.interpolate", "image_models3.com_dec.relu", "image_models3.com_dec.relu", "image_models3.com_dec.bn2", "range", "image_models3.com_dec.deconv3", "image_models3.com_dec.deconv1", "image_models3.com_dec.deconv2", "image_models3.com_dec.relu", "image_models3.com_dec.bn_n", "image_models3.com_dec.deconv_n"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "        ", "z", "=", "self", ".", "up_neck", "(", "z", ")", "\n", "z", "=", "z", ".", "view", "(", "-", "1", ",", "8", ",", "(", "HEIGHT", "//", "2", ")", ",", "(", "WIDTH", "//", "2", ")", ")", "\n", "z", "=", "self", ".", "deconv0", "(", "z", ")", "\n", "upscaled_image", "=", "self", ".", "interpolate", "(", "z", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv1", "(", "upscaled_image", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv_n", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn_n", "(", "out", ")", "\n", "", "out", "=", "self", ".", "deconv3", "(", "out", ")", "\n", "final", "=", "upscaled_image", "+", "out", "\n", "return", "final", ",", "out", ",", "upscaled_image", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.comrec1.__init__": [[1289, 1296], ["torch.Module.__init__", "image_models3.com_enc", "image_models3.com_dec"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "comrec1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "self", ".", "enco", "=", "com_enc", "(", ")", "\n", "self", ".", "deco", "=", "com_dec", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.comrec1.forward": [[1298, 1302], ["image_models3.comrec1.enco.encode", "image_models3.comrec1.deco.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "com", "=", "self", ".", "enco", ".", "encode", "(", "x", ")", "\n", "final", ",", "out", ",", "upscaled_image", ",", "com_img", "=", "self", ".", "deco", ".", "decode", "(", "com", ")", "\n", "return", "final", ",", "out", ",", "upscaled_image", ",", "com_img", ",", "x", "\n", "########################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.com_enc2.__init__": [[1305, 1322], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "com_enc2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bottle_neck1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "3", "*", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ",", "HIDDEN", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "bottle_neck2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "3", "*", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ",", "HIDDEN", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.com_enc2.reparameterize": [[1322, 1329], ["logvar.mul().exp_", "logvar.mul().exp_.new().normal_", "logvar.mul().exp_.new().normal_.mul().add_", "logvar.mul", "logvar.mul().exp_.new", "logvar.mul().exp_.new().normal_.mul", "logvar.mul().exp_.size"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "std", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "eps", "=", "std", ".", "new", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "", "else", ":", "\n", "            ", "return", "mu", "\n", "", "", "def", "encode", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.com_enc2.encode": [[1329, 1339], ["image_models3.com_enc2.relu", "image_models3.com_enc2.relu", "image_models3.com_enc2.bn1", "image_models3.com_enc2.conv3", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "image_models3.com_enc2.bottle_neck1", "image_models3.com_enc2.bottle_neck2", "image_models3.com_enc2.reparameterize", "image_models3.com_enc2.conv1", "image_models3.com_enc2.conv2"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.comrecCNN.reparameterize"], ["", "", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "torch", ".", "flatten", "(", "out", ",", "1", ")", "\n", "mu", "=", "self", ".", "bottle_neck1", "(", "out", ")", "\n", "logvar", "=", "self", ".", "bottle_neck2", "(", "out", ")", "\n", "out", "=", "self", ".", "reparameterize", "(", "mu", ",", "logvar", ")", "\n", "return", "out", ",", "mu", ",", "logvar", "\n", "", "", "class", "com_dec2", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.com_dec2.__init__": [[1340, 1359], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "image_models3.Interpolate", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "com_dec2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "up_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "HIDDEN", ",", "8", "*", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "self", ".", "deconv0", "=", "nn", ".", "Conv2d", "(", "8", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "interpolate", "=", "Interpolate", "(", "size", "=", "HEIGHT", ",", "mode", "=", "'bicubic'", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "deconv_n", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_n", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "CHANNELS", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "def", "decode", "(", "self", ",", "z", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.com_dec2.decode": [[1359, 1373], ["image_models3.com_dec2.up_neck", "image_models3.com_dec2.view", "image_models3.com_dec2.deconv0", "image_models3.com_dec2.interpolate", "image_models3.com_dec2.relu", "image_models3.com_dec2.relu", "image_models3.com_dec2.bn2", "range", "image_models3.com_dec2.deconv3", "image_models3.com_dec2.deconv1", "image_models3.com_dec2.deconv2", "image_models3.com_dec2.relu", "image_models3.com_dec2.bn_n", "image_models3.com_dec2.deconv_n"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "        ", "z", "=", "self", ".", "up_neck", "(", "z", ")", "\n", "z", "=", "z", ".", "view", "(", "-", "1", ",", "8", ",", "(", "HEIGHT", "//", "2", ")", ",", "(", "WIDTH", "//", "2", ")", ")", "\n", "z", "=", "self", ".", "deconv0", "(", "z", ")", "\n", "upscaled_image", "=", "self", ".", "interpolate", "(", "z", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv1", "(", "upscaled_image", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv_n", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn_n", "(", "out", ")", "\n", "", "out", "=", "self", ".", "deconv3", "(", "out", ")", "\n", "final", "=", "upscaled_image", "+", "out", "\n", "return", "final", ",", "out", ",", "upscaled_image", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.comrec2.__init__": [[1375, 1382], ["torch.Module.__init__", "image_models3.com_enc2", "image_models3.com_dec2"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "comrec2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "self", ".", "enco", "=", "com_enc2", "(", ")", "\n", "self", ".", "deco", "=", "com_dec2", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.comrec2.forward": [[1384, 1388], ["image_models3.comrec2.enco.encode", "image_models3.comrec2.deco.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "com", ",", "mu", ",", "logvar", "=", "self", ".", "enco", ".", "encode", "(", "x", ")", "\n", "final", ",", "out", ",", "upscaled_image", ",", "com_img", "=", "self", ".", "deco", ".", "decode", "(", "com", ")", "\n", "return", "final", ",", "out", ",", "upscaled_image", ",", "com_img", ",", "x", ",", "mu", ",", "logvar", "\n", "########################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.comrecCNN.__init__": [[1392, 1430], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "image_models3.Interpolate", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "comrecCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "#CHANNEL X H X W ", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "#64 X H X W ", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "#64 X H/2 X W/2 ", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "#64 X H/2 X W/2 ", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "#64 X H/4 X W/4 ", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "64", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "#CHANNEL X H/4 X W/4 ", "\n", "\n", "# Decoder", "\n", "#TODO : try ConvTranspose2d", "\n", "#CHANNEL X H/4 X W/4 ", "\n", "self", ".", "deconv0", "=", "nn", ".", "ConvTranspose2d", "(", "CHANNELS", ",", "CHANNELS", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "#CHANNEL X H/2 X W/2 ", "\n", "self", ".", "interpolate", "=", "Interpolate", "(", "size", "=", "HEIGHT", ",", "mode", "=", "'bilinear'", ")", "\n", "#CHANNEL X H X W ", "\n", "self", ".", "deconv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "#64 X H X W ", "\n", "self", ".", "deconv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "deconv_n", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_n", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "CHANNELS", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "#CHANNEL X H X W ", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.comrecCNN.encode": [[1431, 1438], ["image_models3.comrecCNN.relu", "image_models3.comrecCNN.relu", "image_models3.comrecCNN.bn1", "image_models3.comrecCNN.relu", "image_models3.comrecCNN.bn2", "image_models3.comrecCNN.conv4", "image_models3.comrecCNN.conv1", "image_models3.comrecCNN.conv2", "image_models3.comrecCNN.conv3"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "return", "self", ".", "conv4", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.comrecCNN.reparameterize": [[1440, 1442], ["None"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.comrecCNN.decode": [[1443, 1455], ["image_models3.comrecCNN.deconv0", "image_models3.comrecCNN.interpolate", "image_models3.comrecCNN.relu", "image_models3.comrecCNN.relu", "image_models3.comrecCNN.bn2", "range", "image_models3.comrecCNN.deconv3", "image_models3.comrecCNN.deconv1", "image_models3.comrecCNN.deconv2", "image_models3.comrecCNN.relu", "image_models3.comrecCNN.bn_n", "image_models3.comrecCNN.deconv_n"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "    ", "z", "=", "self", ".", "deconv0", "(", "z", ")", "\n", "upscaled_image", "=", "self", ".", "interpolate", "(", "z", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv1", "(", "upscaled_image", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "      ", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv_n", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn_n", "(", "out", ")", "\n", "", "out", "=", "self", ".", "deconv3", "(", "out", ")", "\n", "final", "=", "upscaled_image", "+", "out", "\n", "return", "final", ",", "out", ",", "upscaled_image", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.comrecCNN.forward": [[1457, 1461], ["image_models3.comrecCNN.encode", "image_models3.comrecCNN.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "com_img", "=", "self", ".", "encode", "(", "x", ")", "\n", "final", ",", "out", ",", "upscaled_image", "=", "self", ".", "decode", "(", "com_img", ")", "\n", "return", "final", ",", "out", ",", "upscaled_image", ",", "com_img", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.auto_enc.__init__": [[1465, 1469], ["torch.Module.__init__", "image_models3.auto_enc.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "auto_enc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "64", "# cfg.GAN.GF_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.auto_enc.define_module": [[1472, 1482], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "image_models3.downBlock", "image_models3.downBlock", "image_models3.downBlock", "image_models3.downBlock", "image_models3.downBlock", "image_models3.downBlock"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ngf", "=", "16", "*", "self", ".", "gf_dim", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "ngf", "//", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "downsample1", "=", "downBlock", "(", "ngf", "//", "64", ",", "ngf", "//", "32", ")", "\n", "self", ".", "downsample2", "=", "downBlock", "(", "ngf", "//", "32", ",", "ngf", "//", "16", ")", "\n", "self", ".", "downsample3", "=", "downBlock", "(", "ngf", "//", "16", ",", "ngf", "//", "8", ")", "\n", "self", ".", "downsample4", "=", "downBlock", "(", "ngf", "//", "8", ",", "ngf", "//", "4", ")", "\n", "self", ".", "downsample5", "=", "downBlock", "(", "ngf", "//", "4", ",", "ngf", "//", "2", ")", "\n", "self", ".", "downsample6", "=", "downBlock", "(", "ngf", "//", "2", ",", "ngf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.auto_enc.forward": [[1485, 1506], ["image_models3.auto_enc.relu", "image_models3.auto_enc.downsample1", "image_models3.auto_enc.downsample2", "image_models3.auto_enc.downsample3", "image_models3.auto_enc.downsample4", "image_models3.auto_enc.downsample5", "image_models3.auto_enc.downsample6", "out.view.view.view", "image_models3.auto_enc.conv1", "out.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "\n", "out", "=", "self", ".", "downsample1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "downsample2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "downsample3", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "downsample4", "(", "out", ")", "\n", "\n", "\n", "out", "=", "self", ".", "downsample5", "(", "out", ")", "\n", "\n", "\n", "out", "=", "self", ".", "downsample6", "(", "out", ")", "\n", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.auto_dec.__init__": [[1508, 1512], ["torch.Module.__init__", "image_models3.auto_dec.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "auto_dec", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "64", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.auto_dec.define_module": [[1513, 1527], ["image_models3.upBlock", "image_models3.upBlock", "image_models3.upBlock", "image_models3.upBlock", "image_models3.upBlock", "image_models3.upBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "image_models3.conv3x3", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ngf", "=", "16", "*", "self", ".", "gf_dim", "\n", "\n", "\n", "self", ".", "upsample1", "=", "upBlock", "(", "ngf", ",", "ngf", "//", "2", ")", "\n", "self", ".", "upsample2", "=", "upBlock", "(", "ngf", "//", "2", ",", "ngf", "//", "4", ")", "\n", "self", ".", "upsample3", "=", "upBlock", "(", "ngf", "//", "4", ",", "ngf", "//", "8", ")", "\n", "self", ".", "upsample4", "=", "upBlock", "(", "ngf", "//", "8", ",", "ngf", "//", "16", ")", "\n", "self", ".", "upsample5", "=", "upBlock", "(", "ngf", "//", "16", ",", "ngf", "//", "32", ")", "\n", "self", ".", "upsample6", "=", "upBlock", "(", "ngf", "//", "32", ",", "ngf", "//", "64", ")", "\n", "\n", "self", ".", "img", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "ngf", "//", "64", ",", "3", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.auto_dec.forward": [[1529, 1547], ["in_code.view", "image_models3.auto_dec.upsample1", "image_models3.auto_dec.upsample2", "image_models3.auto_dec.upsample3", "image_models3.auto_dec.upsample4", "image_models3.auto_dec.upsample5", "image_models3.auto_dec.upsample6", "image_models3.auto_dec.img"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_code", ")", ":", "\n", "\n", "# state size ngf x 1 x 1", "\n", "        ", "out_code", "=", "in_code", ".", "view", "(", "-", "1", ",", "16", "*", "self", ".", "gf_dim", ",", "1", ",", "1", ")", "\n", "# state size ngf//2 x 2 x 2", "\n", "out_code", "=", "self", ".", "upsample1", "(", "out_code", ")", "\n", "# state size ngf//4 x 4 x 4", "\n", "out_code", "=", "self", ".", "upsample2", "(", "out_code", ")", "\n", "# state size ngf//8 x 8 x 8", "\n", "out_code", "=", "self", ".", "upsample3", "(", "out_code", ")", "\n", "# state size ngf//16 x 16 x 16", "\n", "out_code", "=", "self", ".", "upsample4", "(", "out_code", ")", "\n", "# state size ngf//32 x 32 x 32", "\n", "out_code", "=", "self", ".", "upsample5", "(", "out_code", ")", "\n", "# state size ngf//64 x 64 x 64", "\n", "out_code", "=", "self", ".", "upsample6", "(", "out_code", ")", "\n", "out_code", "=", "self", ".", "img", "(", "out_code", ")", "\n", "return", "out_code", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.autoencdec.__init__": [[1551, 1558], ["torch.Module.__init__", "image_models3.auto_enc", "image_models3.auto_dec"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "autoencdec", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "self", ".", "enco", "=", "auto_enc", "(", ")", "\n", "self", ".", "deco", "=", "auto_dec", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.autoencdec.forward": [[1560, 1564], ["image_models3.autoencdec.enco", "image_models3.autoencdec.deco"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "encoded", "=", "self", ".", "enco", "(", "x", ")", "\n", "decoded", "=", "self", ".", "deco", "(", "encoded", ")", "\n", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.Identity.__init__": [[1571, 1573], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.Identity.forward": [[1574, 1576], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "#################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.ImageEncoder.__init__": [[1585, 1591], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "device", ",", "vae", "=", "False", ")", ":", "\n", "        ", "super", "(", "ImageEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "vae", "=", "vae", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.ImageEncoder.forward": [[1596, 1618], ["image_models3.ImageEncoder.model", "torchvision.models.utils1.sample_z", "torchvision.models.utils1.sample_z.size", "torchvision.models.utils1.sample_z.size"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.sample_z"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "enc", "=", "self", ".", "model", "(", "x", ")", "\n", "#print('encoder size:', enc.size())", "\n", "\n", "if", "self", ".", "vae", ":", "\n", "# z = self.vae_transform(enc)", "\n", "            ", "mu", "=", "enc", "[", ":", ",", ":", "enc", ".", "size", "(", ")", "[", "1", "]", "//", "2", "]", "\n", "#print('mu size:', mu.size())", "\n", "log_var", "=", "enc", "[", ":", ",", "enc", ".", "size", "(", ")", "[", "1", "]", "//", "2", ":", "]", "\n", "#print('log size:', log_var.size())", "\n", "\n", "if", "self", ".", "training", ":", "\n", "#print('training mode; taking samples')", "\n", "                ", "enc", "=", "sample_z", "(", "mu", ",", "log_var", ",", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "#print('testing mode; taking mean')", "\n", "                ", "enc", "=", "mu", "\n", "", "", "else", ":", "\n", "            ", "mu", ",", "log_var", "=", "None", ",", "None", "\n", "#print('new encode size:', enc.size())", "\n", "\n", "", "return", "enc", ",", "mu", ",", "log_var", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.conv3x3": [[31, 35], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "#only changes number of channels", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.upBlock": [[37, 45], ["torch.Sequential", "torch.Upsample", "image_models3.conv3x3", "torch.BatchNorm2d", "image_models3.GLU"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["", "def", "upBlock", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "conv3x3", "(", "in_planes", ",", "out_planes", "*", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "*", "2", ")", ",", "\n", "GLU", "(", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.downBlock": [[48, 55], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU"], "function", ["None"], ["", "def", "downBlock", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.set_parameter_requires_grad": [[1578, 1582], ["model.parameters"], "function", ["None"], ["", "", "def", "set_parameter_requires_grad", "(", "model", ",", "feature_extracting", ")", ":", "\n", "    ", "if", "feature_extracting", ":", "\n", "        ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models3.initialize_torchvision_model": [[1620, 1780], ["torchvision.models.resnet18", "image_models3.set_parameter_requires_grad", "image_models3.Identity", "torch.Linear", "torch.Linear", "image_models3.comrecCNN", "image_models3.set_parameter_requires_grad", "image_models3.vai", "image_models3.set_parameter_requires_grad", "image_models3.VAE", "image_models3.set_parameter_requires_grad", "image_models3.comrec1", "image_models3.set_parameter_requires_grad", "image_models3.encoder1", "image_models3.set_parameter_requires_grad", "image_models3.comrec2", "image_models3.set_parameter_requires_grad", "image_models3.CAE8", "image_models3.set_parameter_requires_grad", "image_models3.CAE16", "image_models3.set_parameter_requires_grad", "image_models3.CAE32", "image_models3.set_parameter_requires_grad", "image_models3.CAEBo", "image_models3.set_parameter_requires_grad", "image_models3.autoencdec", "image_models3.set_parameter_requires_grad", "torchvision.models.resnet50", "image_models3.set_parameter_requires_grad", "torch.Linear", "torch.Linear", "torchvision.models.alexnet", "image_models3.set_parameter_requires_grad", "torch.Linear", "torchvision.models.vgg11_bn", "image_models3.set_parameter_requires_grad", "torch.Linear", "torchvision.models.squeezenet1_0", "image_models3.set_parameter_requires_grad", "torch.Conv2d", "torchvision.models.densenet121", "image_models3.set_parameter_requires_grad", "torch.Linear", "torchvision.models.inception_v3", "image_models3.set_parameter_requires_grad", "torch.Linear", "torch.Linear", "print", "exit"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad"], ["", "", "def", "initialize_torchvision_model", "(", "model_name", ",", "output_dim", ",", "feature_extract", ",", "device", ",", "use_pretrained", "=", "True", ",", "vae", "=", "False", ")", ":", "\n", "# Initialize these variables which will be set in this if statement. Each of these", "\n", "#   variables is model specific.", "\n", "    ", "model_ft", "=", "None", "\n", "input_size", "=", "0", "\n", "\n", "if", "model_name", "==", "\"resnet18\"", ":", "\n", "        ", "\"\"\" Resnet18\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "resnet18", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "model_ft", ".", "avgpool", "=", "Identity", "(", ")", "##############average pool replaced by identity####", "\n", "#num_ftrs = model_ft.fc.in_features", "\n", "num_ftrs", "=", "model_ft", ".", "fc", ".", "in_features", "*", "7", "*", "7", "# as average pooling is replaced by Identity, infeatures are multipleid with kernel size", "\n", "if", "vae", ":", "#vae changes: reparameterization at vae size down samples by 2 so we multiply by 2 to maintain consistency in the pipeline", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", "*", "2", ")", "#vae changes", "\n", "", "else", ":", "#vae chages", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "#vae changes", "\n", "#model_ft.fc = nn.Linear(num_ftrs, output_dim) #vae changes", "\n", "", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"comrecCNN\"", ":", "\n", "        ", "\"\"\" comrecCNN\n        \"\"\"", "\n", "model_ft", "=", "comrecCNN", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"vai\"", ":", "\n", "        ", "\"\"\" vai\n        \"\"\"", "\n", "model_ft", "=", "vai", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"VAE\"", ":", "\n", "        ", "\"\"\" VAE\n        \"\"\"", "\n", "model_ft", "=", "VAE", "(", "nc", "=", "3", ",", "ngf", "=", "128", ",", "ndf", "=", "128", ",", "latent_variable_size", "=", "1024", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"comrec1\"", ":", "\n", "        ", "\"\"\" comrec\n        \"\"\"", "\n", "model_ft", "=", "comrec1", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"encoder1\"", ":", "\n", "        ", "\"\"\" encoder1\n        \"\"\"", "\n", "model_ft", "=", "encoder1", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"comrec2\"", ":", "\n", "        ", "\"\"\" comrec2\n        \"\"\"", "\n", "model_ft", "=", "comrec2", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"CAE8\"", ":", "\n", "        ", "\"\"\" CAE8\n        \"\"\"", "\n", "model_ft", "=", "CAE8", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"CAE16\"", ":", "\n", "        ", "\"\"\" CAE16\n        \"\"\"", "\n", "model_ft", "=", "CAE16", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"CAE32\"", ":", "\n", "        ", "\"\"\" CAE32\n        \"\"\"", "\n", "model_ft", "=", "CAE32", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"CAEBo\"", ":", "\n", "        ", "\"\"\" CAEBo\n        \"\"\"", "\n", "model_ft", "=", "CAEBo", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"AEC\"", ":", "\n", "        ", "\"\"\" AEC\n        \"\"\"", "\n", "model_ft", "=", "autoencdec", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"resnet50\"", ":", "\n", "        ", "\"\"\" Resnet50\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "resnet50", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "fc", ".", "in_features", "\n", "if", "vae", ":", "#vae changes: reparameterization at vae size down samples by 2 so we multiply by 2 to maintain consistency in the pipeline", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", "*", "2", ")", "#vae changes", "\n", "", "else", ":", "#vae chages", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "#vae changes", "\n", "#model_ft.fc = nn.Linear(num_ftrs, output_dim) #vae changes", "\n", "", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"alexnet\"", ":", "\n", "        ", "\"\"\" Alexnet\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "alexnet", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", "[", "6", "]", ".", "in_features", "\n", "model_ft", ".", "classifier", "[", "6", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"vgg\"", ":", "\n", "        ", "\"\"\" VGG11_bn\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "vgg11_bn", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", "[", "6", "]", ".", "in_features", "\n", "model_ft", ".", "classifier", "[", "6", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"squeezenet\"", ":", "\n", "        ", "\"\"\" Squeezenet\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "squeezenet1_0", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "model_ft", ".", "classifier", "[", "1", "]", "=", "nn", ".", "Conv2d", "(", "512", ",", "output_dim", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "model_ft", ".", "num_classes", "=", "output_dim", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"densenet\"", ":", "\n", "        ", "\"\"\" Densenet\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "densenet121", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", ".", "in_features", "\n", "model_ft", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"inception\"", ":", "\n", "        ", "\"\"\" Inception v3\n        Be careful, expects (299,299) sized images and has auxiliary output\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "inception_v3", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "# Handle the auxilary net", "\n", "num_ftrs", "=", "model_ft", ".", "AuxLogits", ".", "fc", ".", "in_features", "\n", "model_ft", ".", "AuxLogits", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "# Handle the primary net", "\n", "num_ftrs", "=", "model_ft", ".", "fc", ".", "in_features", "\n", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "299", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Invalid model name, exiting...\"", ")", "\n", "exit", "(", ")", "\n", "\n", "\n", "#model_ft = ImageEncoder(model_ft, vae=vae, device=device)", "\n", "\n", "", "return", "model_ft", ",", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.INCEPTION_V3.__init__": [[16, 27], ["torch.Module.__init__", "torchvision.models.inception_v3", "torch.load_url", "torch.load_url", "torch.load_url", "torch.load_url", "torch.load_url", "model1.INCEPTION_V3.model.load_state_dict", "model1.INCEPTION_V3.model.parameters", "print"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "INCEPTION_V3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "models", ".", "inception_v3", "(", ")", "\n", "url", "=", "'https://download.pytorch.org/models/inception_v3_google-1a9a5a14.pth'", "\n", "# print(next(model.parameters()).data)", "\n", "state_dict", "=", "model_zoo", ".", "load_url", "(", "url", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "print", "(", "'Load pretrained model from '", ",", "url", ")", "\n", "# print(next(self.model.parameters()).data)", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.INCEPTION_V3.forward": [[30, 45], ["model1.INCEPTION_V3.model", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# [-1.0, 1.0] --> [0, 1.0]", "\n", "        ", "x", "=", "input", "*", "0.5", "+", "0.5", "\n", "# mean=[0.485, 0.456, 0.406] and std=[0.229, 0.224, 0.225]", "\n", "# --> mean = 0, std = 1", "\n", "x", "[", ":", ",", "0", "]", "=", "(", "x", "[", ":", ",", "0", "]", "-", "0.485", ")", "/", "0.229", "\n", "x", "[", ":", ",", "1", "]", "=", "(", "x", "[", ":", ",", "1", "]", "-", "0.456", ")", "/", "0.224", "\n", "x", "[", ":", ",", "2", "]", "=", "(", "x", "[", ":", ",", "2", "]", "-", "0.406", ")", "/", "0.225", "\n", "#", "\n", "# --> fixed-size input: batch x 3 x 299 x 299", "\n", "x", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "299", ",", "299", ")", ",", "mode", "=", "'bilinear'", ")", "(", "x", ")", "\n", "# 299 x 299 x 3", "\n", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "x", "=", "nn", ".", "Softmax", "(", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.GLU.__init__": [[48, 50], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.GLU.forward": [[51, 56], ["x.size", "int", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "nc", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "nc", "%", "2", "==", "0", ",", "'channels dont divide 2!'", "\n", "nc", "=", "int", "(", "nc", "/", "2", ")", "\n", "return", "x", "[", ":", ",", ":", "nc", "]", "*", "F", ".", "sigmoid", "(", "x", "[", ":", ",", "nc", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.ResBlock.__init__": [[87, 95], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model1.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model1.GLU", "model1.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "channel_num", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "channel_num", ",", "channel_num", "*", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel_num", "*", "2", ")", ",", "\n", "GLU", "(", ")", ",", "\n", "conv3x3", "(", "channel_num", ",", "channel_num", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel_num", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.ResBlock.forward": [[98, 103], ["model1.ResBlock.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "block", "(", "x", ")", "\n", "out", "+=", "residual", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.CA_NET.__init__": [[108, 114], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model1.GLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CA_NET", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "t_dim", "=", "cfg", ".", "TEXT", ".", "DIMENSION", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "t_dim", ",", "self", ".", "ef_dim", "*", "4", ",", "bias", "=", "True", ")", "\n", "self", ".", "relu", "=", "GLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.CA_NET.encode": [[115, 120], ["model1.CA_NET.relu", "model1.CA_NET.fc"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "text_embedding", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "self", ".", "fc", "(", "text_embedding", ")", ")", "\n", "mu", "=", "x", "[", ":", ",", ":", "self", ".", "ef_dim", "]", "\n", "logvar", "=", "x", "[", ":", ",", "self", ".", "ef_dim", ":", "]", "\n", "return", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.CA_NET.reparametrize": [[121, 129], ["logvar.mul().exp_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.FloatTensor().normal_.mul().add_", "torch.FloatTensor().normal_.mul().add_", "torch.FloatTensor().normal_.mul().add_", "torch.FloatTensor().normal_.mul().add_", "torch.FloatTensor().normal_.mul().add_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "logvar.mul", "torch.FloatTensor().normal_.mul", "torch.FloatTensor().normal_.mul", "torch.FloatTensor().normal_.mul", "torch.FloatTensor().normal_.mul", "torch.FloatTensor().normal_.mul", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "logvar.mul().exp_.size", "logvar.mul().exp_.size"], "methods", ["None"], ["", "def", "reparametrize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "std", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "if", "cfg", ".", "CUDA", ":", "\n", "            ", "eps", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "\n", "", "else", ":", "\n", "            ", "eps", "=", "torch", ".", "FloatTensor", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "\n", "", "eps", "=", "Variable", "(", "eps", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.CA_NET.forward": [[130, 134], ["model1.CA_NET.encode", "model1.CA_NET.reparametrize"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.CA_NET.reparametrize"], ["", "def", "forward", "(", "self", ",", "text_embedding", ")", ":", "\n", "        ", "mu", ",", "logvar", "=", "self", ".", "encode", "(", "text_embedding", ")", "\n", "c_code", "=", "self", ".", "reparametrize", "(", "mu", ",", "logvar", ")", "\n", "return", "c_code", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.INIT_STAGE_G.__init__": [[137, 145], ["torch.Module.__init__", "model1.INIT_STAGE_G.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ")", ":", "\n", "        ", "super", "(", "INIT_STAGE_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "in_dim", "=", "cfg", ".", "GAN", ".", "Z_DIM", "+", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "", "else", ":", "\n", "            ", "self", ".", "in_dim", "=", "cfg", ".", "GAN", ".", "Z_DIM", "\n", "", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.INIT_STAGE_G.define_module": [[146, 159], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model1.upBlock", "model1.upBlock", "model1.upBlock", "model1.upBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "model1.GLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "in_dim", "=", "self", ".", "in_dim", "\n", "ngf", "=", "self", ".", "gf_dim", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "ngf", "*", "4", "*", "4", "*", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ngf", "*", "4", "*", "4", "*", "2", ")", ",", "\n", "GLU", "(", ")", ")", "\n", "\n", "\n", "self", ".", "upsample1", "=", "upBlock", "(", "ngf", ",", "ngf", "//", "2", ")", "\n", "self", ".", "upsample2", "=", "upBlock", "(", "ngf", "//", "2", ",", "ngf", "//", "4", ")", "\n", "self", ".", "upsample3", "=", "upBlock", "(", "ngf", "//", "4", ",", "ngf", "//", "8", ")", "\n", "self", ".", "upsample4", "=", "upBlock", "(", "ngf", "//", "8", ",", "ngf", "//", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.INIT_STAGE_G.forward": [[160, 178], ["model1.INIT_STAGE_G.fc", "model1.INIT_STAGE_G.view", "model1.INIT_STAGE_G.upsample1", "model1.INIT_STAGE_G.upsample2", "model1.INIT_STAGE_G.upsample3", "model1.INIT_STAGE_G.upsample4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_code", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "in_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "z_code", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "in_code", "=", "z_code", "\n", "# state size 16ngf x 4 x 4", "\n", "", "out_code", "=", "self", ".", "fc", "(", "in_code", ")", "\n", "out_code", "=", "out_code", ".", "view", "(", "-", "1", ",", "self", ".", "gf_dim", ",", "4", ",", "4", ")", "\n", "# state size 8ngf x 8 x 8", "\n", "out_code", "=", "self", ".", "upsample1", "(", "out_code", ")", "\n", "# state size 4ngf x 16 x 16", "\n", "out_code", "=", "self", ".", "upsample2", "(", "out_code", ")", "\n", "# state size 2ngf x 32 x 32", "\n", "out_code", "=", "self", ".", "upsample3", "(", "out_code", ")", "\n", "# state size ngf x 64 x 64", "\n", "out_code", "=", "self", ".", "upsample4", "(", "out_code", ")", "\n", "\n", "return", "out_code", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.NEXT_STAGE_G.__init__": [[181, 190], ["torch.Module.__init__", "model1.NEXT_STAGE_G.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ",", "num_residual", "=", "cfg", ".", "GAN", ".", "R_NUM", ")", ":", "\n", "        ", "super", "(", "NEXT_STAGE_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "", "else", ":", "\n", "            ", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "Z_DIM", "\n", "", "self", ".", "num_residual", "=", "num_residual", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.NEXT_STAGE_G._make_layer": [[191, 196], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "channel_num", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_residual", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "channel_num", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.NEXT_STAGE_G.define_module": [[197, 204], ["model1.Block3x3_relu", "model1.NEXT_STAGE_G._make_layer", "model1.upBlock"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_relu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.NEXT_STAGE_G._make_layer", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ngf", "=", "self", ".", "gf_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "\n", "self", ".", "jointConv", "=", "Block3x3_relu", "(", "ngf", "+", "efg", ",", "ngf", ")", "\n", "self", ".", "residual", "=", "self", ".", "_make_layer", "(", "ResBlock", ",", "ngf", ")", "\n", "self", ".", "upsample", "=", "upBlock", "(", "ngf", ",", "ngf", "//", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.NEXT_STAGE_G.forward": [[205, 218], ["h_code.size", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model1.NEXT_STAGE_G.jointConv", "model1.NEXT_STAGE_G.residual", "model1.NEXT_STAGE_G.upsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h_code", ",", "c_code", ")", ":", "\n", "        ", "s_size", "=", "h_code", ".", "size", "(", "2", ")", "\n", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "s_size", ",", "s_size", ")", "\n", "# state size (ngf+egf) x in_size x in_size", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "h_code", ")", ",", "1", ")", "\n", "# state size ngf x in_size x in_size", "\n", "out_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n", "out_code", "=", "self", ".", "residual", "(", "out_code", ")", "\n", "# state size ngf/2 x 2in_size x 2in_size", "\n", "out_code", "=", "self", ".", "upsample", "(", "out_code", ")", "\n", "\n", "return", "out_code", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.GET_IMAGE_G.__init__": [[221, 227], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model1.conv3x3", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ")", ":", "\n", "        ", "super", "(", "GET_IMAGE_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "self", ".", "img", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "ngf", ",", "3", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.GET_IMAGE_G.forward": [[229, 232], ["model1.GET_IMAGE_G.img"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h_code", ")", ":", "\n", "        ", "out_img", "=", "self", ".", "img", "(", "h_code", ")", "\n", "return", "out_img", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.G_NET.__init__": [[235, 239], ["torch.Module.__init__", "model1.G_NET.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "G_NET", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "cfg", ".", "GAN", ".", "GF_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.G_NET.define_module": [[240, 259], ["model1.CA_NET", "model1.INIT_STAGE_G", "model1.GET_IMAGE_G", "model1.NEXT_STAGE_G", "model1.GET_IMAGE_G", "model1.NEXT_STAGE_G", "model1.GET_IMAGE_G", "model1.NEXT_STAGE_G", "model1.GET_IMAGE_G", "model1.NEXT_STAGE_G", "model1.GET_IMAGE_G"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "ca_net", "=", "CA_NET", "(", ")", "\n", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "0", ":", "\n", "            ", "self", ".", "h_net1", "=", "INIT_STAGE_G", "(", "self", ".", "gf_dim", "*", "16", ")", "\n", "self", ".", "img_net1", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "1", ":", "\n", "            ", "self", ".", "h_net2", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", ")", "\n", "self", ".", "img_net2", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "2", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "2", ":", "\n", "            ", "self", ".", "h_net3", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "2", ")", "\n", "self", ".", "img_net3", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "4", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "3", ":", "# Recommended structure (mainly limited by GPU memory), and not test yet", "\n", "            ", "self", ".", "h_net4", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "4", ",", "num_residual", "=", "1", ")", "\n", "self", ".", "img_net4", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "8", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "4", ":", "\n", "            ", "self", ".", "h_net4", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "8", ",", "num_residual", "=", "1", ")", "\n", "self", ".", "img_net4", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.G_NET.forward": [[260, 284], ["model1.G_NET.ca_net", "model1.G_NET.h_net1", "model1.G_NET.img_net1", "fake_imgs.append", "model1.G_NET.h_net2", "model1.G_NET.img_net2", "fake_imgs.append", "model1.G_NET.h_net3", "model1.G_NET.img_net3", "fake_imgs.append", "model1.G_NET.h_net4", "model1.G_NET.img_net4", "fake_imgs.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "z_code", ",", "text_embedding", "=", "None", ")", ":", "\n", "        ", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "text_embedding", "is", "not", "None", ":", "\n", "            ", "c_code", ",", "mu", ",", "logvar", "=", "self", ".", "ca_net", "(", "text_embedding", ")", "\n", "", "else", ":", "\n", "            ", "c_code", ",", "mu", ",", "logvar", "=", "z_code", ",", "None", ",", "None", "\n", "", "fake_imgs", "=", "[", "]", "\n", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "0", ":", "\n", "            ", "h_code1", "=", "self", ".", "h_net1", "(", "z_code", ",", "c_code", ")", "\n", "fake_img1", "=", "self", ".", "img_net1", "(", "h_code1", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img1", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "1", ":", "\n", "            ", "h_code2", "=", "self", ".", "h_net2", "(", "h_code1", ",", "c_code", ")", "\n", "fake_img2", "=", "self", ".", "img_net2", "(", "h_code2", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img2", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "2", ":", "\n", "            ", "h_code3", "=", "self", ".", "h_net3", "(", "h_code2", ",", "c_code", ")", "\n", "fake_img3", "=", "self", ".", "img_net3", "(", "h_code3", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img3", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "3", ":", "\n", "            ", "h_code4", "=", "self", ".", "h_net4", "(", "h_code3", ",", "c_code", ")", "\n", "fake_img4", "=", "self", ".", "img_net4", "(", "h_code4", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img4", ")", "\n", "\n", "", "return", "fake_imgs", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.G_NET1.__init__": [[290, 294], ["torch.Module.__init__", "model1.G_NET1.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "G_NET1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "cfg", ".", "GAN", ".", "GF_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.G_NET1.define_module": [[295, 314], ["model1.INIT_STAGE_G", "model1.GET_IMAGE_G", "model1.NEXT_STAGE_G", "model1.GET_IMAGE_G", "model1.NEXT_STAGE_G", "model1.GET_IMAGE_G", "model1.NEXT_STAGE_G", "model1.GET_IMAGE_G", "model1.NEXT_STAGE_G", "model1.GET_IMAGE_G"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "#if cfg.GAN.B_CONDITION:", "\n", "#self.ca_net = CA_NET()", "\n", "\n", "        ", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "0", ":", "\n", "            ", "self", ".", "h_net1", "=", "INIT_STAGE_G", "(", "self", ".", "gf_dim", "*", "16", ")", "\n", "self", ".", "img_net1", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "1", ":", "\n", "            ", "self", ".", "h_net2", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", ")", "\n", "self", ".", "img_net2", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "2", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "2", ":", "\n", "            ", "self", ".", "h_net3", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "2", ")", "\n", "self", ".", "img_net3", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "4", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "3", ":", "# Recommended structure (mainly limited by GPU memory), and not test yet", "\n", "            ", "self", ".", "h_net4", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "4", ",", "num_residual", "=", "1", ")", "\n", "self", ".", "img_net4", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "8", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "4", ":", "\n", "            ", "self", ".", "h_net4", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "8", ",", "num_residual", "=", "1", ")", "\n", "self", ".", "img_net4", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.G_NET1.forward": [[315, 341], ["model1.G_NET1.h_net1", "model1.G_NET1.img_net1", "fake_imgs.append", "model1.G_NET1.h_net2", "model1.G_NET1.img_net2", "fake_imgs.append", "model1.G_NET1.h_net3", "model1.G_NET1.img_net3", "fake_imgs.append", "model1.G_NET1.h_net4", "model1.G_NET1.img_net4", "fake_imgs.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "z_code", ",", "c_code", "=", "None", ")", ":", "\n", "#if cfg.GAN.B_CONDITION and text_embedding is not None:", "\n", "#c_code, mu, logvar = self.ca_net(text_embedding)", "\n", "#else:", "\n", "#   c_code, mu, logvar = z_code, None, None", "\n", "        ", "if", "c_code", "is", "None", ":", "\n", "             ", "c_code", "=", "z_code", "\n", "", "fake_imgs", "=", "[", "]", "\n", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "0", ":", "\n", "            ", "h_code1", "=", "self", ".", "h_net1", "(", "z_code", ",", "c_code", ")", "\n", "fake_img1", "=", "self", ".", "img_net1", "(", "h_code1", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img1", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "1", ":", "\n", "            ", "h_code2", "=", "self", ".", "h_net2", "(", "h_code1", ",", "c_code", ")", "\n", "fake_img2", "=", "self", ".", "img_net2", "(", "h_code2", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img2", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "2", ":", "\n", "            ", "h_code3", "=", "self", ".", "h_net3", "(", "h_code2", ",", "c_code", ")", "\n", "fake_img3", "=", "self", ".", "img_net3", "(", "h_code3", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img3", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "3", ":", "\n", "            ", "h_code4", "=", "self", ".", "h_net4", "(", "h_code3", ",", "c_code", ")", "\n", "fake_img4", "=", "self", ".", "img_net4", "(", "h_code4", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img4", ")", "\n", "\n", "", "return", "fake_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.Interpolate.__init__": [[394, 399], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "mode", ")", ":", "\n", "        ", "super", "(", "Interpolate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "interp", "=", "nn", ".", "functional", ".", "interpolate", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.Interpolate.forward": [[400, 403], ["model1.Interpolate.interp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "interp", "(", "x", ",", "size", "=", "self", ".", "size", ",", "mode", "=", "self", ".", "mode", ",", "align_corners", "=", "False", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.com_enc.__init__": [[406, 420], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "com_enc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bottle_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "3", "*", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ",", "HIDDEN", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "def", "encode", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.com_enc.encode": [[420, 428], ["model1.com_enc.relu", "model1.com_enc.relu", "model1.com_enc.bn1", "model1.com_enc.conv3", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "model1.com_enc.bottle_neck", "model1.com_enc.conv1", "model1.com_enc.conv2"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "torch", ".", "flatten", "(", "out", ",", "1", ")", "\n", "out", "=", "self", ".", "bottle_neck", "(", "out", ")", "\n", "return", "out", "\n", "", "", "class", "com_dec", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.com_dec.__init__": [[429, 448], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model1.Interpolate", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "com_dec", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "up_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "HIDDEN", ",", "8", "*", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "self", ".", "deconv0", "=", "nn", ".", "Conv2d", "(", "8", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "interpolate", "=", "Interpolate", "(", "size", "=", "HEIGHT", ",", "mode", "=", "'bicubic'", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "deconv_n", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_n", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "CHANNELS", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "def", "decode", "(", "self", ",", "z", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.com_dec.decode": [[448, 462], ["model1.com_dec.up_neck", "model1.com_dec.view", "model1.com_dec.deconv0", "model1.com_dec.interpolate", "model1.com_dec.relu", "model1.com_dec.relu", "model1.com_dec.bn2", "range", "model1.com_dec.deconv3", "model1.com_dec.deconv1", "model1.com_dec.deconv2", "model1.com_dec.relu", "model1.com_dec.bn_n", "model1.com_dec.deconv_n"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "        ", "z", "=", "self", ".", "up_neck", "(", "z", ")", "\n", "z", "=", "z", ".", "view", "(", "-", "1", ",", "8", ",", "(", "HEIGHT", "//", "2", ")", ",", "(", "WIDTH", "//", "2", ")", ")", "\n", "z", "=", "self", ".", "deconv0", "(", "z", ")", "\n", "upscaled_image", "=", "self", ".", "interpolate", "(", "z", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv1", "(", "upscaled_image", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv_n", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn_n", "(", "out", ")", "\n", "", "out", "=", "self", ".", "deconv3", "(", "out", ")", "\n", "final", "=", "upscaled_image", "+", "out", "\n", "return", "final", ",", "out", ",", "upscaled_image", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.comrec1.__init__": [[464, 471], ["torch.Module.__init__", "model1.com_enc", "model1.com_dec"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "comrec1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "self", ".", "enco", "=", "com_enc", "(", ")", "\n", "self", ".", "deco", "=", "com_dec", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.comrec1.forward": [[473, 477], ["model1.comrec1.enco.encode", "model1.comrec1.deco.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "com", "=", "self", ".", "enco", ".", "encode", "(", "x", ")", "\n", "final", ",", "out", ",", "upscaled_image", ",", "com_img", "=", "self", ".", "deco", ".", "decode", "(", "com", ")", "\n", "return", "final", ",", "out", ",", "upscaled_image", ",", "com_img", ",", "x", "\n", "########################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.encoder2.__init__": [[479, 484], ["torch.Module.__init__", "model1.encoder2.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "encoder2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "64", "# cfg.GAN.GF_DIM", "\n", "self", ".", "in_dim", "=", "1024", "#cfg.TEXT.DIMENSION", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.encoder2.define_module": [[487, 502], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model1.downBlock", "model1.downBlock", "model1.downBlock", "model1.downBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "model1.GLU", "model1.CA_NET"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ngf", "=", "16", "*", "self", ".", "gf_dim", "\n", "in_dim", "=", "self", ".", "in_dim", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "gf_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "downsample1", "=", "downBlock", "(", "ngf", "//", "16", ",", "ngf", "//", "8", ")", "\n", "self", ".", "downsample2", "=", "downBlock", "(", "ngf", "//", "8", ",", "ngf", "//", "4", ")", "\n", "self", ".", "downsample3", "=", "downBlock", "(", "ngf", "//", "4", ",", "ngf", "//", "2", ")", "\n", "self", ".", "downsample4", "=", "downBlock", "(", "ngf", "//", "2", ",", "ngf", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ngf", "*", "4", "*", "4", ",", "in_dim", "*", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "in_dim", "*", "2", ")", ",", "\n", "GLU", "(", ")", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "ca_net", "=", "CA_NET", "(", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.encoder2.forward": [[503, 522], ["model1.encoder2.relu", "model1.encoder2.downsample1", "model1.encoder2.downsample2", "model1.encoder2.downsample3", "model1.encoder2.downsample4", "model1.encoder2.view", "model1.encoder2.fc", "model1.encoder2.conv1", "model1.encoder2.ca_net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "\n", "out", "=", "self", ".", "downsample1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "downsample2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "downsample3", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "downsample4", "(", "out", ")", "\n", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "16", "*", "self", ".", "gf_dim", "*", "4", "*", "4", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "out", "is", "not", "None", ":", "\n", "            ", "c_code", ",", "mu", ",", "logvar", "=", "self", ".", "ca_net", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "c_code", ",", "mu", ",", "logvar", "=", "None", ",", "None", ",", "None", "\n", "\n", "", "return", "c_code", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.encoder1.__init__": [[527, 530], ["torch.Module.__init__", "model1.encoder1.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "encoder1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.encoder1.define_module": [[533, 543], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bottle_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "3", "*", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ",", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.encoder1.forward": [[543, 553], ["model1.encoder1.relu", "model1.encoder1.relu", "model1.encoder1.bn1", "model1.encoder1.conv3", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "model1.encoder1.bottle_neck", "model1.encoder1.conv1", "model1.encoder1.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "#out = nn.ReLU(self.conv1(x))", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "#out = nn.ReLU(self.conv2(out))", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "torch", ".", "flatten", "(", "out", ",", "1", ")", "\n", "out", "=", "self", ".", "bottle_neck", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.Swish.__init__": [[556, 559], ["torch.Module.__init__", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Swish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "#object creation", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.Swish.forward": [[560, 562], ["model1.Swish.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.MAP_NET_IT.__init__": [[565, 571], ["torch.Module.__init__", "model1.MAP_NET_IT.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MAP_NET_IT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.df_dim = cfg.TEXT.DIMENSION", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "TEXT", ".", "EMBEDDING_DIM", "\n", "self", ".", "in_dim", "=", "cfg", ".", "GAN", ".", "Z_DIM", "+", "cfg", ".", "TEXT", ".", "DIMENSION", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.MAP_NET_IT.define_module": [[573, 594], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "in_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", ",", "ndf", "//", "2", ")", ",", "\n", "#nn.BatchNorm1d(ndf//2),", "\n", "#Swish(),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "ndf", "//", "2", ",", "ndf", "//", "4", ")", ",", "\n", "#nn.BatchNorm1d(ndf//4),", "\n", "#Swish(),", "\n", "#nn.Linear(ndf//4, ndf//8),", "\n", "#nn.BatchNorm1d(ndf//8),", "\n", "#Swish())", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", "//", "4", ",", "efg", ")", ",", "\n", "#nn.Linear(ndf//8, efg),", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.MAP_NET_IT.forward": [[596, 602], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model1.MAP_NET_IT.fc1", "model1.MAP_NET_IT.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_code", ",", "c_code", ")", ":", "\n", "        ", "in_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "z_code", ")", ",", "1", ")", "\n", "x_code", "=", "self", ".", "fc1", "(", "in_code", ")", "\n", "output", "=", "self", ".", "fc2", "(", "x_code", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.D_NET_TEXT.__init__": [[608, 612], ["torch.Module.__init__", "model1.D_NET_TEXT.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "D_NET_TEXT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "cfg", ".", "TEXT", ".", "EMBEDDING_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.D_NET_TEXT.define_module": [[613, 629], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "model1.Swish", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "model1.Swish", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "model1.Swish", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "df_dim", "\n", "\n", "self", ".", "encodings", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", ",", "ndf", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ndf", "//", "2", ")", ",", "\n", "Swish", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "ndf", "//", "2", ",", "ndf", "//", "4", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ndf", "//", "4", ")", ",", "\n", "Swish", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "ndf", "//", "4", ",", "ndf", "//", "8", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ndf", "//", "8", ")", ",", "\n", "Swish", "(", ")", ")", "\n", "self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", "//", "8", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.D_NET_TEXT.forward": [[631, 636], ["model1.D_NET_TEXT.encodings", "model1.D_NET_TEXT.logits", "model1.D_NET_TEXT.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_var", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "encodings", "(", "x_var", ")", "\n", "output", "=", "self", ".", "logits", "(", "x_code", ")", "\n", "\n", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.D_NET64.__init__": [[669, 674], ["torch.Module.__init__", "model1.D_NET64.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "D_NET64", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "cfg", ".", "GAN", ".", "DF_DIM", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.D_NET64.define_module": [[675, 689], ["model1.encode_image_by_16times", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model1.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encode_image_by_16times", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "df_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "self", ".", "img_code_s16", "=", "encode_image_by_16times", "(", "ndf", ")", "\n", "\n", "self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "jointConv", "=", "Block3x3_leakRelu", "(", "ndf", "*", "8", "+", "efg", ",", "ndf", "*", "8", ")", "\n", "self", ".", "uncond_logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.D_NET64.forward": [[690, 709], ["model1.D_NET64.img_code_s16", "model1.D_NET64.logits", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model1.D_NET64.jointConv", "model1.D_NET64.uncond_logits", "model1.D_NET64.view", "model1.D_NET64.view", "model1.D_NET64.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x_var", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "img_code_s16", "(", "x_var", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "4", ",", "4", ")", "\n", "# state size (ngf+egf) x 4 x 4", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "x_code", ")", ",", "1", ")", "\n", "# state size ngf x in_size x in_size", "\n", "h_c_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n", "", "else", ":", "\n", "            ", "h_c_code", "=", "x_code", "\n", "\n", "", "output", "=", "self", ".", "logits", "(", "h_c_code", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "out_uncond", "=", "self", ".", "uncond_logits", "(", "x_code", ")", "\n", "return", "[", "output", ".", "view", "(", "-", "1", ")", ",", "out_uncond", ".", "view", "(", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.D_NET128.__init__": [[713, 718], ["torch.Module.__init__", "model1.D_NET128.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "D_NET128", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "cfg", ".", "GAN", ".", "DF_DIM", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.D_NET128.define_module": [[719, 735], ["model1.encode_image_by_16times", "model1.downBlock", "model1.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model1.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encode_image_by_16times", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "df_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "self", ".", "img_code_s16", "=", "encode_image_by_16times", "(", "ndf", ")", "\n", "self", ".", "img_code_s32", "=", "downBlock", "(", "ndf", "*", "8", ",", "ndf", "*", "16", ")", "\n", "self", ".", "img_code_s32_1", "=", "Block3x3_leakRelu", "(", "ndf", "*", "16", ",", "ndf", "*", "8", ")", "\n", "\n", "self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "jointConv", "=", "Block3x3_leakRelu", "(", "ndf", "*", "8", "+", "efg", ",", "ndf", "*", "8", ")", "\n", "self", ".", "uncond_logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.D_NET128.forward": [[736, 757], ["model1.D_NET128.img_code_s16", "model1.D_NET128.img_code_s32", "model1.D_NET128.img_code_s32_1", "model1.D_NET128.logits", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model1.D_NET128.jointConv", "model1.D_NET128.uncond_logits", "model1.D_NET128.view", "model1.D_NET128.view", "model1.D_NET128.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x_var", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "img_code_s16", "(", "x_var", ")", "\n", "x_code", "=", "self", ".", "img_code_s32", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s32_1", "(", "x_code", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "4", ",", "4", ")", "\n", "# state size (ngf+egf) x 4 x 4", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "x_code", ")", ",", "1", ")", "\n", "# state size ngf x in_size x in_size", "\n", "h_c_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n", "", "else", ":", "\n", "            ", "h_c_code", "=", "x_code", "\n", "\n", "", "output", "=", "self", ".", "logits", "(", "h_c_code", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "out_uncond", "=", "self", ".", "uncond_logits", "(", "x_code", ")", "\n", "return", "[", "output", ".", "view", "(", "-", "1", ")", ",", "out_uncond", ".", "view", "(", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.D_NET256.__init__": [[761, 766], ["torch.Module.__init__", "model1.D_NET256.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "D_NET256", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "cfg", ".", "GAN", ".", "DF_DIM", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.D_NET256.define_module": [[767, 785], ["model1.encode_image_by_16times", "model1.downBlock", "model1.downBlock", "model1.Block3x3_leakRelu", "model1.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model1.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encode_image_by_16times", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "df_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "self", ".", "img_code_s16", "=", "encode_image_by_16times", "(", "ndf", ")", "\n", "self", ".", "img_code_s32", "=", "downBlock", "(", "ndf", "*", "8", ",", "ndf", "*", "16", ")", "\n", "self", ".", "img_code_s64", "=", "downBlock", "(", "ndf", "*", "16", ",", "ndf", "*", "32", ")", "\n", "self", ".", "img_code_s64_1", "=", "Block3x3_leakRelu", "(", "ndf", "*", "32", ",", "ndf", "*", "16", ")", "\n", "self", ".", "img_code_s64_2", "=", "Block3x3_leakRelu", "(", "ndf", "*", "16", ",", "ndf", "*", "8", ")", "\n", "\n", "self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "jointConv", "=", "Block3x3_leakRelu", "(", "ndf", "*", "8", "+", "efg", ",", "ndf", "*", "8", ")", "\n", "self", ".", "uncond_logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.D_NET256.forward": [[786, 809], ["model1.D_NET256.img_code_s16", "model1.D_NET256.img_code_s32", "model1.D_NET256.img_code_s64", "model1.D_NET256.img_code_s64_1", "model1.D_NET256.img_code_s64_2", "model1.D_NET256.logits", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model1.D_NET256.jointConv", "model1.D_NET256.uncond_logits", "model1.D_NET256.view", "model1.D_NET256.view", "model1.D_NET256.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x_var", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "img_code_s16", "(", "x_var", ")", "\n", "x_code", "=", "self", ".", "img_code_s32", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s64", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s64_1", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s64_2", "(", "x_code", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "4", ",", "4", ")", "\n", "# state size (ngf+egf) x 4 x 4", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "x_code", ")", ",", "1", ")", "\n", "# state size ngf x in_size x in_size", "\n", "h_c_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n", "", "else", ":", "\n", "            ", "h_c_code", "=", "x_code", "\n", "\n", "", "output", "=", "self", ".", "logits", "(", "h_c_code", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "out_uncond", "=", "self", ".", "uncond_logits", "(", "x_code", ")", "\n", "return", "[", "output", ".", "view", "(", "-", "1", ")", ",", "out_uncond", ".", "view", "(", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.D_NET512.__init__": [[813, 818], ["torch.Module.__init__", "model1.D_NET512.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "D_NET512", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "cfg", ".", "GAN", ".", "DF_DIM", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.D_NET512.define_module": [[819, 839], ["model1.encode_image_by_16times", "model1.downBlock", "model1.downBlock", "model1.downBlock", "model1.Block3x3_leakRelu", "model1.Block3x3_leakRelu", "model1.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model1.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encode_image_by_16times", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "df_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "self", ".", "img_code_s16", "=", "encode_image_by_16times", "(", "ndf", ")", "\n", "self", ".", "img_code_s32", "=", "downBlock", "(", "ndf", "*", "8", ",", "ndf", "*", "16", ")", "\n", "self", ".", "img_code_s64", "=", "downBlock", "(", "ndf", "*", "16", ",", "ndf", "*", "32", ")", "\n", "self", ".", "img_code_s128", "=", "downBlock", "(", "ndf", "*", "32", ",", "ndf", "*", "64", ")", "\n", "self", ".", "img_code_s128_1", "=", "Block3x3_leakRelu", "(", "ndf", "*", "64", ",", "ndf", "*", "32", ")", "\n", "self", ".", "img_code_s128_2", "=", "Block3x3_leakRelu", "(", "ndf", "*", "32", ",", "ndf", "*", "16", ")", "\n", "self", ".", "img_code_s128_3", "=", "Block3x3_leakRelu", "(", "ndf", "*", "16", ",", "ndf", "*", "8", ")", "\n", "\n", "self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "jointConv", "=", "Block3x3_leakRelu", "(", "ndf", "*", "8", "+", "efg", ",", "ndf", "*", "8", ")", "\n", "self", ".", "uncond_logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.D_NET512.forward": [[840, 865], ["model1.D_NET512.img_code_s16", "model1.D_NET512.img_code_s32", "model1.D_NET512.img_code_s64", "model1.D_NET512.img_code_s128", "model1.D_NET512.img_code_s128_1", "model1.D_NET512.img_code_s128_2", "model1.D_NET512.img_code_s128_3", "model1.D_NET512.logits", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model1.D_NET512.jointConv", "model1.D_NET512.uncond_logits", "model1.D_NET512.view", "model1.D_NET512.view", "model1.D_NET512.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x_var", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "img_code_s16", "(", "x_var", ")", "\n", "x_code", "=", "self", ".", "img_code_s32", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s64", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s128", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s128_1", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s128_2", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s128_3", "(", "x_code", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "4", ",", "4", ")", "\n", "# state size (ngf+egf) x 4 x 4", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "x_code", ")", ",", "1", ")", "\n", "# state size ngf x in_size x in_size", "\n", "h_c_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n", "", "else", ":", "\n", "            ", "h_c_code", "=", "x_code", "\n", "\n", "", "output", "=", "self", ".", "logits", "(", "h_c_code", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "out_uncond", "=", "self", ".", "uncond_logits", "(", "x_code", ")", "\n", "return", "[", "output", ".", "view", "(", "-", "1", ")", ",", "out_uncond", ".", "view", "(", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.D_NET1024.__init__": [[869, 874], ["torch.Module.__init__", "model1.D_NET1024.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "D_NET1024", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "cfg", ".", "GAN", ".", "DF_DIM", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.D_NET1024.define_module": [[875, 897], ["model1.encode_image_by_16times", "model1.downBlock", "model1.downBlock", "model1.downBlock", "model1.downBlock", "model1.Block3x3_leakRelu", "model1.Block3x3_leakRelu", "model1.Block3x3_leakRelu", "model1.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model1.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encode_image_by_16times", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "df_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "self", ".", "img_code_s16", "=", "encode_image_by_16times", "(", "ndf", ")", "\n", "self", ".", "img_code_s32", "=", "downBlock", "(", "ndf", "*", "8", ",", "ndf", "*", "16", ")", "\n", "self", ".", "img_code_s64", "=", "downBlock", "(", "ndf", "*", "16", ",", "ndf", "*", "32", ")", "\n", "self", ".", "img_code_s128", "=", "downBlock", "(", "ndf", "*", "32", ",", "ndf", "*", "64", ")", "\n", "self", ".", "img_code_s256", "=", "downBlock", "(", "ndf", "*", "64", ",", "ndf", "*", "128", ")", "\n", "self", ".", "img_code_s256_1", "=", "Block3x3_leakRelu", "(", "ndf", "*", "128", ",", "ndf", "*", "64", ")", "\n", "self", ".", "img_code_s256_2", "=", "Block3x3_leakRelu", "(", "ndf", "*", "64", ",", "ndf", "*", "32", ")", "\n", "self", ".", "img_code_s256_3", "=", "Block3x3_leakRelu", "(", "ndf", "*", "32", ",", "ndf", "*", "16", ")", "\n", "self", ".", "img_code_s256_4", "=", "Block3x3_leakRelu", "(", "ndf", "*", "16", ",", "ndf", "*", "8", ")", "\n", "\n", "self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "jointConv", "=", "Block3x3_leakRelu", "(", "ndf", "*", "8", "+", "efg", ",", "ndf", "*", "8", ")", "\n", "self", ".", "uncond_logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.D_NET1024.forward": [[898, 925], ["model1.D_NET1024.img_code_s16", "model1.D_NET1024.img_code_s32", "model1.D_NET1024.img_code_s64", "model1.D_NET1024.img_code_s128", "model1.D_NET1024.img_code_s256", "model1.D_NET1024.img_code_s256_1", "model1.D_NET1024.img_code_s256_2", "model1.D_NET1024.img_code_s256_3", "model1.D_NET1024.img_code_s256_4", "model1.D_NET1024.logits", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model1.D_NET1024.jointConv", "model1.D_NET1024.uncond_logits", "model1.D_NET1024.view", "model1.D_NET1024.view", "model1.D_NET1024.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x_var", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "img_code_s16", "(", "x_var", ")", "\n", "x_code", "=", "self", ".", "img_code_s32", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s64", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s128", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s256", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s256_1", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s256_2", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s256_3", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s256_4", "(", "x_code", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "4", ",", "4", ")", "\n", "# state size (ngf+egf) x 4 x 4", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "x_code", ")", ",", "1", ")", "\n", "# state size ngf x in_size x in_size", "\n", "h_c_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n", "", "else", ":", "\n", "            ", "h_c_code", "=", "x_code", "\n", "\n", "", "output", "=", "self", ".", "logits", "(", "h_c_code", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "out_uncond", "=", "self", ".", "uncond_logits", "(", "x_code", ")", "\n", "return", "[", "output", ".", "view", "(", "-", "1", ")", ",", "out_uncond", ".", "view", "(", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.conv3x3": [[58, 62], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.upBlock": [[66, 74], ["torch.Sequential", "torch.Upsample", "model1.conv3x3", "torch.BatchNorm2d", "model1.GLU"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["", "def", "upBlock", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "conv3x3", "(", "in_planes", ",", "out_planes", "*", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "*", "2", ")", ",", "\n", "GLU", "(", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.Block3x3_relu": [[77, 84], ["torch.Sequential", "model1.conv3x3", "torch.BatchNorm2d", "model1.GLU"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["", "def", "Block3x3_relu", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "in_planes", ",", "out_planes", "*", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "*", "2", ")", ",", "\n", "GLU", "(", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.Block3x3_leakRelu": [[343, 350], ["torch.Sequential", "model1.conv3x3", "torch.BatchNorm2d", "torch.LeakyReLU"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["", "", "def", "Block3x3_leakRelu", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "in_planes", ",", "out_planes", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.downBlock": [[353, 360], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU"], "function", ["None"], ["", "def", "downBlock", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.model1.encode_image_by_16times": [[363, 382], ["torch.Sequential", "torch.Conv2d", "torch.LeakyReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU"], "function", ["None"], ["", "def", "encode_image_by_16times", "(", "ndf", ")", ":", "\n", "    ", "encode_img", "=", "nn", ".", "Sequential", "(", "\n", "# --> state size. ndf x in_size/2 x in_size/2", "\n", "nn", ".", "Conv2d", "(", "3", ",", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# --> state size 2ndf x x in_size/4 x in_size/4", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# --> state size 4ndf x in_size/8 x in_size/8", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# --> state size 8ndf x in_size/16 x in_size/16", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "return", "encode_img", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models1.RNNDText.__init__": [[10, 57], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "print", "torch.Parameter", "torch.Parameter", "print"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dim", ",", "vocab_size", ",", "hid_dim", ",", "n_layers", ",", "dropout", ",", "sos", ",", "eos", ",", "pad", ",", "embed", ",", "device", "=", "device", ")", ":", "\n", "        ", "super", "(", "RNNDText", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "hid_dim", "=", "hid_dim", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "sos", "=", "sos", "\n", "self", ".", "eos", "=", "eos", "\n", "self", ".", "pad", "=", "pad", "\n", "self", ".", "embeddings_matrix", "=", "embed", "\n", "self", ".", "device", "=", "device", "\n", "\n", "\n", "assert", "self", ".", "sos", "is", "not", "None", "\n", "assert", "self", ".", "eos", "is", "not", "None", "\n", "\n", "\n", "#print(self.emb_dim,self.pad, self.device,self.embeddings_matrix)", "\n", "self", ".", "embeddings", "=", "nn", ".", "Embedding", "(", "self", ".", "vocab_size", ",", "self", ".", "emb_dim", ",", "padding_idx", "=", "self", ".", "pad", ")", "\n", "if", "self", ".", "embeddings_matrix", "is", "not", "None", ":", "\n", "            ", "print", "(", "'loading pretrained embeddings.......................'", ")", "\n", "#print(self.embeddings.weight)", "\n", "self", ".", "embeddings", ".", "weight", "=", "nn", ".", "Parameter", "(", "self", ".", "embeddings_matrix", ")", "\n", "#self.embeddings.load_state_dict({'weight': self.embeddings_matrix})", "\n", "self", ".", "embeddings", ".", "weight", ".", "requires_grad", "=", "False", "\n", "print", "(", "'################### loading successful ####################'", ")", "\n", "#print(self.embeddings.weight)", "\n", "\n", "\n", "", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "hid_dim", "*", "2", ",", "self", ".", "vocab_size", ")", "\n", "\n", "# Initialize the RNN", "\n", "self", ".", "encoder", "=", "nn", ".", "LSTM", "(", "self", ".", "emb_dim", ",", "\n", "self", ".", "hid_dim", ",", "\n", "self", ".", "n_layers", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "batch_first", "=", "True", ",", "#only for input and output does not have any impact on cell state or hidden state", "\n", "bidirectional", "=", "True", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "LSTM", "(", "self", ".", "emb_dim", ",", "\n", "self", ".", "hid_dim", "*", "2", ",", "\n", "self", ".", "n_layers", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "batch_first", "=", "True", ",", "#only for input and output does not have any impact on cell state or hidden state", "\n", "bidirectional", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models1.RNNDText.forward": [[60, 86], ["text_auto_models1.RNNDText.generate", "len", "text_auto_models1.RNNDText.encode", "len", "max"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.RNNText.generate", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode"], ["", "def", "forward", "(", "self", ",", "\n", "text_length", ",", "\n", "batch_positions", "=", "None", ",", "\n", "cell", "=", "None", ",", "\n", "hidden", "=", "None", ",", "\n", "pass_type", "=", "'generate'", ",", "\n", "teacher_forcing_prob", "=", "0.0", ",", "\n", "batch_size", "=", "None", "\n", ")", ":", "\n", "\n", "        ", "if", "pass_type", "==", "'generate'", ":", "\n", "\n", "            ", "assert", "hidden", "is", "not", "None", "\n", "if", "teacher_forcing_prob", ">", "0.0", ":", "\n", "                ", "assert", "batch_positions", "is", "not", "None", "\n", "assert", "len", "(", "batch_positions", "[", "0", "]", ")", "==", "max", "(", "text_length", ")", "\n", "batch_size", "=", "len", "(", "batch_positions", ")", "\n", "# else:", "\n", "# assert batch_size is not None", "\n", "\n", "", "return", "self", ".", "generate", "(", "hidden", ",", "text_length", ",", "batch_size", ",", "batch_positions", ",", "teacher_forcing_prob", ",", "cell", "=", "cell", ")", "\n", "#return self.generate(hidden, batch_size, batch_positions, teacher_forcing_prob, text_length, cell=cell)", "\n", "\n", "", "elif", "pass_type", "==", "'encode'", ":", "\n", "            ", "assert", "batch_positions", "is", "not", "None", "\n", "return", "self", ".", "encode", "(", "batch_positions", ",", "text_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models1.RNNDText.encode": [[88, 113], ["text_auto_models1.RNNDText.embeddings", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "sorted_idx.sort", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "text_auto_models1.RNNDText.encoder", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "", "def", "encode", "(", "self", ",", "batch_positions", ",", "text_length", ")", ":", "\n", "\n", "        ", "embedded", "=", "self", ".", "embeddings", "(", "batch_positions", ")", "#Batch size * padded sentence len* embedding dim each word", "\n", "#in order to use packed representation the embeddings need to be sorted based one length", "\n", "sorted_lens", ",", "sorted_idx", "=", "torch", ".", "sort", "(", "text_length", ",", "descending", "=", "True", ")", "\n", "forwards_sorted", "=", "embedded", "[", "sorted_idx", "]", "#sort the embedding based on length", "\n", "_", ",", "sortedsorted_idx", "=", "sorted_idx", ".", "sort", "(", ")", "#sorting the sorted index, to figure out unsorted index", "\n", "packed", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "forwards_sorted", ",", "sorted_lens", ",", "batch_first", "=", "True", ")", "#reduces computation packed sequence is a tuple of two ", "\n", "#lists . One list contain sequences , where sequences are interleaved by time space.Other list contains", "\n", "#the batch size at each time step. first list format (sequences, embedding dimention)#(batch first) is used if the input to the fuction has batch as first dimention", "\n", "h", ",", "_", "=", "self", ".", "encoder", "(", "packed", ")", "#Inputs: input, (h_0, c_0) when hidden and cell not provided default taken as 0 vectors as in this case", "\n", "#Outputs: output, (h_n, c_n), if input is packed output is also packed which needs to be unpacked", "\n", "#tensor containing the output features (h_t) from the last layer(if multiple layers are used) of the LSTM, for each time step", "\n", "#output for packed has a dimention(all sequences, num_directions(forward and backward for bidirectional) * hidden_size)", "\n", "#h_n of shape (num_layers * num_directions, batch, hidden_size): tensor containing the hidden state for t = seq_len", "\n", "#c_n of shape (num_layers * num_directions, batch, hidden_size): tensor containing the cell state for t = seq_len.", "\n", "h_tmp", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "h", ",", "batch_first", "=", "True", ")", "#input is in B*Len*embed format(batch first)", "\n", "#returns unpacked output and sequence length vector, unpacked output has dimention(batch, sequence, num_directions * hidden_size)", "\n", "h_t", "=", "torch", ".", "max", "(", "h_tmp", ",", "1", ")", "[", "0", "]", "#taking the maximum among all timesteps", "\n", "#h_t = torch.mean(h_tmp, 1)", "\n", "\n", "h_t", "=", "h_t", "[", "sortedsorted_idx", "]", "#sequence are sorted back to unsorted format", "\n", "\n", "\n", "return", "h_t", ",", "# comma is important don't remove", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models1.RNNDText.generate": [[115, 170], ["text_auto_models1.RNNDText.embeddings", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "max", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "range", "hidden_outputs.transpose.transpose.transpose", "len", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "text_auto_models1.RNNDText.view", "text_auto_models1.RNNDText.decoder", "text_auto_models1.RNNDText.out", "torch.zeros().to.transpose", "torch.zeros().to.transpose", "torch.zeros().to.transpose", "torch.zeros().to.transpose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "output.squeeze", "text_auto_models1.RNNDText.max", "random.random", "text_auto_models1.RNNDText.embeddings", "text_auto_models1.RNNDText.embeddings", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "generate", "(", "self", ",", "hidden", ",", "text_length", ",", "batch_size", "=", "None", ",", "batch_positions", "=", "None", ",", "teacher_forcing_prob", "=", "0.0", ",", "cell", "=", "None", ")", ":", "\n", "#def generate(self, hidden, batch_size, batch_positions, teacher_forcing_prob, text_length, cell=None):", "\n", "#print(hidden.shape)", "\n", "#print(text_length)", "\n", "        ", "if", "batch_size", "is", "None", ":", "\n", "            ", "batch_size", "=", "len", "(", "hidden", ")", "\n", "", "step_emb", "=", "self", ".", "embeddings", "(", "torch", ".", "LongTensor", "(", "[", "self", ".", "sos", "]", ")", ".", "repeat", "(", "batch_size", ")", ".", "to", "(", "self", ".", "device", ")", ")", "#starting symbol embeddings for each sentences in batch, shape (batch_size,embedding dim)", "\n", "hidden_", "=", "torch", ".", "zeros", "(", "(", "self", ".", "n_layers", ",", "batch_size", ",", "self", ".", "hid_dim", "*", "2", ")", ")", ".", "to", "(", "self", ".", "device", ")", "#shape (no_layer, batch_size, hidden_dim*2)", "\n", "#hidden has a shape of (batch_size, hidden*2)", "\n", "hidden_", "[", "0", "]", "=", "hidden", "[", "0", "]", "#replacing for first layer entry , in this case only single layer(as ht, is passed)", "\n", "hidden", "=", "hidden_", "#shape is (layer_no, batchsize, hidden*2), this is the encoded value from encoder in the given format, which will be input as hidden state to decoder at first timestep", "\n", "\n", "if", "cell", "is", "None", ":", "\n", "            ", "cell", "=", "torch", ".", "zeros_like", "(", "hidden", ")", ".", "to", "(", "self", ".", "device", ")", "#shape is (layer_no, batchsize, hidden*2)#initializing cell to zero", "\n", "\n", "", "max_length", "=", "max", "(", "text_length", ")", "\n", "argmax_indices", "=", "torch", ".", "zeros", "(", "max_length", ",", "batch_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "hidden_outputs", "=", "torch", ".", "zeros", "(", "max_length", ",", "batch_size", ",", "self", ".", "hid_dim", "*", "2", ")", ".", "to", "(", "self", ".", "device", ")", "# to strore maximum indices for entire sequence length", "\n", "outputs", "=", "torch", ".", "zeros", "(", "max_length", ",", "batch_size", ",", "self", ".", "vocab_size", ")", ".", "to", "(", "self", ".", "device", ")", "#stores the output for entire sequence length", "\n", "argmax_indices", "[", "0", "]", "=", "torch", ".", "LongTensor", "(", "[", "self", ".", "sos", "]", ")", ".", "repeat", "(", "batch_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "hidden_outputs", "[", "0", "]", "=", "hidden", "[", "-", "1", "]", "\n", "\n", "\n", "for", "t", "in", "range", "(", "1", ",", "max_length", ")", ":", "#Note here we can#t pack the sequence as we are generating one by one, as we don#t have input beforehand", "\n", "            ", "step_emb", "=", "step_emb", ".", "view", "(", "batch_size", ",", "1", ",", "self", ".", "emb_dim", ")", "#(batch, sequence length, embedding_dim) Notebatch first is used in decoder", "\n", "output", ",", "(", "hidden", ",", "cell", ")", "=", "self", ".", "decoder", "(", "step_emb", ",", "(", "hidden", ",", "cell", ")", ")", "#hidden and cell usually have multiple entries each for number of layers and directions ; shape (num_layers * num_directions, batch, hidden_size)", "\n", "\n", "hidden_outputs", "[", "t", "]", "=", "hidden", "[", "-", "1", "]", "#here it means take hidden from last layer, in this case  only one layer", "\n", "#logits = self.out(output)#probability of a particular word", "\n", "#outputs[t] = logits.squeeze()#removes dimention of 1", "\n", "#argmax_index = logits.view(batch_size,-1).max(1)[1]#maximum around axis 1, returns value tensor and index tensor, taking the index tensor", "\n", "logits", "=", "self", ".", "out", "(", "output", ".", "squeeze", "(", ")", ")", "\n", "outputs", "[", "t", "]", "=", "logits", "\n", "argmax_index", "=", "logits", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "\n", "\n", "argmax_indices", "[", "t", "]", "=", "argmax_index", "\n", "\n", "teacher_force", "=", "random", ".", "random", "(", ")", "<", "teacher_forcing_prob", "\n", "if", "teacher_force", ":", "\n", "                ", "step_emb", "=", "self", ".", "embeddings", "(", "batch_positions", "[", ":", ",", "t", "]", ")", "\n", "", "else", ":", "\n", "                ", "step_emb", "=", "self", ".", "embeddings", "(", "argmax_index", ")", "#obtaining the next input which is embedding based on predicted logits", "\n", "\n", "# text_length = self.get_length(argmax_indices)", "\n", "", "", "hidden_outputs", "=", "hidden_outputs", ".", "transpose", "(", "1", ",", "0", ")", "\n", "#sorted_lens, sorted_idx = torch.sort(text_length, descending=True)", "\n", "#hidden_sorted = hidden_outputs[sorted_idx]", "\n", "#_, sortedsorted_idx = sorted_idx.sort()", "\n", "#packed = torch.nn.utils.rnn.pack_padded_sequence(hidden_sorted, sorted_lens, batch_first=True) ", "\n", "#h_tmp, _ = torch.nn.utils.rnn.pad_packed_sequence(packed, batch_first=True)", "\n", "#h_t = torch.max(h_tmp, 1)[0].squeeze()", "\n", "\n", "\n", "return", "outputs", ".", "transpose", "(", "0", ",", "1", ")", ",", "argmax_indices", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models1.AutoEncoderD.__init__": [[182, 186], ["torch.Module.__init__", "text_auto_models1.RNNDText"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "embeddings", "=", "None", ")", ":", "\n", "        ", "super", "(", "AutoEncoderD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rnn", "=", "RNNDText", "(", "**", "config", ",", "embed", "=", "embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models1.AutoEncoderD.forward": [[187, 199], ["len", "text_auto_models1.AutoEncoderD.rnn", "text_auto_models1.AutoEncoderD.rnn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_positions", ",", "text_length", ",", "teacher_forcing_prob", "=", "0.0", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "batch_positions", ")", "\n", "h", "=", "self", ".", "rnn", "(", "pass_type", "=", "'encode'", ",", "\n", "batch_positions", "=", "batch_positions", ",", "\n", "text_length", "=", "text_length", ")", "\n", "o", ",", "i", "=", "self", ".", "rnn", "(", "pass_type", "=", "'generate'", ",", "\n", "batch_positions", "=", "batch_positions", ",", "\n", "hidden", "=", "h", ",", "\n", "teacher_forcing_prob", "=", "teacher_forcing_prob", ",", "\n", "text_length", "=", "text_length", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "return", "o", ",", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models1.AutoEncoderD.store_model": [[201, 208], ["print", "torch.save", "torch.save", "torch.save", "torch.save", "text_auto_models1.AutoEncoderD.state_dict", "str"], "methods", ["None"], ["", "def", "store_model", "(", "self", ",", "path", ")", ":", "\n", "\n", "        ", "state", "=", "{", "\n", "'state_dict'", ":", "self", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "print", "(", "\"dumping new best model to \"", "+", "str", "(", "path", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models1.AutoEncoderD.load_model": [[209, 218], ["torch.load", "torch.load", "torch.load", "torch.load", "text_auto_models1.AutoEncoderD.load_state_dict"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Load model from file\n        :param best:\n        :return:\n        \"\"\"", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models1.RNNText.__init__": [[223, 266], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.LSTM", "torch.LSTM", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dim", ",", "vocab_size", ",", "hid_dim", ",", "n_layers", ",", "dropout", ",", "sos", ",", "eos", ",", "device", ",", "vae", ")", ":", "\n", "        ", "super", "(", "RNNText", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#", "\n", "# self.emb_dim =  config['embedding_dim']", "\n", "# self.vocab_size = config['vocab_size']", "\n", "# self.hid_dim =  config['rnn_hidden_dim']", "\n", "# self.n_layers = config['rnn_layers']", "\n", "# self.dropout =  config['rnn_dropout']", "\n", "# self.sos = config['sos']", "\n", "# self.eos = config['eos']", "\n", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "hid_dim", "=", "hid_dim", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "sos", "=", "sos", "\n", "self", ".", "eos", "=", "eos", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "vae", "=", "vae", "\n", "\n", "assert", "self", ".", "sos", "is", "not", "None", "\n", "assert", "self", ".", "eos", "is", "not", "None", "\n", "\n", "# if embeddings:", "\n", "#     self.embeddings = embeddings", "\n", "# else:", "\n", "self", ".", "embeddings", "=", "nn", ".", "Embedding", "(", "self", ".", "vocab_size", ",", "self", ".", "emb_dim", ",", "padding_idx", "=", "0", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "hid_dim", ",", "self", ".", "vocab_size", ")", "\n", "\n", "# Initialize the RNN", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "self", ".", "emb_dim", ",", "\n", "self", ".", "hid_dim", ",", "\n", "self", ".", "n_layers", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "False", ")", "\n", "\n", "if", "self", ".", "vae", ":", "\n", "            ", "self", ".", "vae_transform", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "hid_dim", ",", "self", ".", "hid_dim", "*", "2", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models1.RNNText.forward": [[268, 293], ["text_auto_models1.RNNText.generate", "len", "text_auto_models1.RNNText.encode", "len", "max"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.RNNText.generate", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode"], ["", "", "def", "forward", "(", "self", ",", "\n", "text_length", ",", "\n", "batch_positions", "=", "None", ",", "\n", "cell", "=", "None", ",", "\n", "hidden", "=", "None", ",", "\n", "pass_type", "=", "'generate'", ",", "\n", "teacher_forcing_prob", "=", "0.0", ",", "\n", "batch_size", "=", "None", "\n", ")", ":", "\n", "\n", "        ", "if", "pass_type", "==", "'generate'", ":", "\n", "\n", "            ", "assert", "hidden", "is", "not", "None", "\n", "if", "teacher_forcing_prob", ">", "0.0", ":", "\n", "                ", "assert", "batch_positions", "is", "not", "None", "\n", "assert", "len", "(", "batch_positions", "[", "0", "]", ")", "==", "max", "(", "text_length", ")", "\n", "batch_size", "=", "len", "(", "batch_positions", ")", "\n", "# else:", "\n", "# assert batch_size is not None", "\n", "\n", "", "return", "self", ".", "generate", "(", "hidden", ",", "batch_size", ",", "batch_positions", ",", "teacher_forcing_prob", ",", "text_length", ",", "cell", "=", "cell", ")", "\n", "\n", "", "elif", "pass_type", "==", "'encode'", ":", "\n", "            ", "assert", "batch_positions", "is", "not", "None", "\n", "return", "self", ".", "encode", "(", "batch_positions", ",", "text_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models1.RNNText.generate": [[294, 349], ["text_auto_models1.RNNText.embeddings", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "max", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "text_auto_models1.RNNText.get_length", "hidden_outputs.transpose.transpose.transpose", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "sorted_idx.sort", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "[].squeeze", "len", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "text_auto_models1.RNNText.view", "text_auto_models1.RNNText.rnn", "text_auto_models1.RNNText.out", "text_auto_models1.RNNText.squeeze", "text_auto_models1.RNNText.vae_transform", "torch.zeros().to.transpose", "torch.zeros().to.transpose", "torch.zeros().to.transpose", "torch.zeros().to.transpose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "text_auto_models1.RNNText.view().max", "random.random", "text_auto_models1.RNNText.embeddings", "text_auto_models1.RNNText.embeddings", "models.utils1.sample_z", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.max", "torch.max", "torch.max", "torch.max", "text_auto_models1.RNNText.view", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "models.utils1.sample_z.size", "models.utils1.sample_z.size"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.RNNText.get_length", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.sample_z"], ["", "", "def", "generate", "(", "self", ",", "hidden", ",", "batch_size", ",", "batch_positions", ",", "teacher_forcing_prob", ",", "text_length", ",", "cell", "=", "None", ")", ":", "\n", "        ", "if", "batch_size", "is", "None", ":", "\n", "            ", "batch_size", "=", "len", "(", "hidden", ")", "\n", "", "step_emb", "=", "self", ".", "embeddings", "(", "torch", ".", "LongTensor", "(", "[", "self", ".", "sos", "]", ")", ".", "repeat", "(", "batch_size", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "hidden_", "=", "torch", ".", "zeros", "(", "(", "self", ".", "n_layers", ",", "batch_size", ",", "self", ".", "hid_dim", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "hidden_", "[", "0", "]", "=", "hidden", "\n", "hidden", "=", "hidden_", "\n", "\n", "if", "cell", "is", "None", ":", "\n", "            ", "cell", "=", "torch", ".", "zeros_like", "(", "hidden", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "max_length", "=", "max", "(", "text_length", ")", "\n", "argmax_indices", "=", "torch", ".", "zeros", "(", "max_length", ",", "batch_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "hidden_outputs", "=", "torch", ".", "zeros", "(", "max_length", ",", "batch_size", ",", "self", ".", "hid_dim", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "outputs", "=", "torch", ".", "zeros", "(", "max_length", ",", "batch_size", ",", "self", ".", "vocab_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "for", "t", "in", "range", "(", "1", ",", "max_length", ")", ":", "\n", "            ", "step_emb", "=", "step_emb", ".", "view", "(", "batch_size", ",", "1", ",", "self", ".", "emb_dim", ")", "\n", "output", ",", "(", "hidden", ",", "cell", ")", "=", "self", ".", "rnn", "(", "step_emb", ",", "(", "hidden", ",", "cell", ")", ")", "\n", "\n", "hidden_outputs", "[", "t", "]", "=", "hidden", "[", "-", "1", "]", "\n", "logits", "=", "self", ".", "out", "(", "output", ")", "\n", "outputs", "[", "t", "]", "=", "logits", ".", "squeeze", "(", ")", "\n", "\n", "argmax_index", "=", "logits", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "argmax_indices", "[", "t", "]", "=", "argmax_index", "\n", "\n", "teacher_force", "=", "random", ".", "random", "(", ")", "<", "teacher_forcing_prob", "\n", "if", "teacher_force", ":", "\n", "                ", "step_emb", "=", "self", ".", "embeddings", "(", "batch_positions", "[", ":", ",", "t", "]", ")", "\n", "", "else", ":", "\n", "                ", "step_emb", "=", "self", ".", "embeddings", "(", "argmax_index", ")", "\n", "\n", "", "", "text_length", "=", "self", ".", "get_length", "(", "argmax_indices", ")", "\n", "hidden_outputs", "=", "hidden_outputs", ".", "transpose", "(", "1", ",", "0", ")", "\n", "sorted_lens", ",", "sorted_idx", "=", "torch", ".", "sort", "(", "text_length", ",", "descending", "=", "True", ")", "\n", "hidden_sorted", "=", "hidden_outputs", "[", "sorted_idx", "]", "\n", "_", ",", "sortedsorted_idx", "=", "sorted_idx", ".", "sort", "(", ")", "\n", "packed", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "hidden_sorted", ",", "sorted_lens", ",", "batch_first", "=", "True", ")", "\n", "h_tmp", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "packed", ",", "batch_first", "=", "True", ")", "\n", "h_t", "=", "torch", ".", "max", "(", "h_tmp", ",", "1", ")", "[", "0", "]", ".", "squeeze", "(", ")", "\n", "\n", "if", "self", ".", "vae", ":", "\n", "            ", "z", "=", "self", ".", "vae_transform", "(", "h_t", ")", "\n", "mu", "=", "z", "[", ":", ",", ":", "h_t", ".", "size", "(", ")", "[", "1", "]", "]", "\n", "log_var", "=", "z", "[", ":", ",", "h_t", ".", "size", "(", ")", "[", "1", "]", ":", "]", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "h_t", "=", "sample_z", "(", "mu", ",", "log_var", ",", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "h_t", "=", "mu", "\n", "", "", "else", ":", "\n", "            ", "mu", ",", "log_var", "=", "None", ",", "None", "\n", "\n", "", "return", "h_t", ",", "outputs", ".", "transpose", "(", "0", ",", "1", ")", ",", "argmax_indices", ".", "transpose", "(", "0", ",", "1", ")", ",", "mu", ",", "log_var", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models1.RNNText.encode": [[350, 377], ["text_auto_models1.RNNText.embeddings", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "sorted_idx.sort", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "text_auto_models1.RNNText.rnn", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.max", "torch.max", "torch.max", "torch.max", "text_auto_models1.RNNText.vae_transform", "models.utils1.sample_z", "models.utils1.sample_z.size", "models.utils1.sample_z.size"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.sample_z"], ["", "def", "encode", "(", "self", ",", "batch_positions", ",", "text_length", ")", ":", "\n", "\n", "        ", "embedded", "=", "self", ".", "embeddings", "(", "batch_positions", ")", "\n", "\n", "sorted_lens", ",", "sorted_idx", "=", "torch", ".", "sort", "(", "text_length", ",", "descending", "=", "True", ")", "\n", "forwards_sorted", "=", "embedded", "[", "sorted_idx", "]", "\n", "_", ",", "sortedsorted_idx", "=", "sorted_idx", ".", "sort", "(", ")", "\n", "packed", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "forwards_sorted", ",", "sorted_lens", ",", "batch_first", "=", "True", ")", "\n", "h", ",", "_", "=", "self", ".", "rnn", "(", "packed", ")", "\n", "h_tmp", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "h", ",", "batch_first", "=", "True", ")", "\n", "h_t", "=", "torch", ".", "max", "(", "h_tmp", ",", "1", ")", "[", "0", "]", "\n", "h_t", "=", "h_t", "[", "sortedsorted_idx", "]", "\n", "\n", "if", "self", ".", "vae", ":", "\n", "            ", "z", "=", "self", ".", "vae_transform", "(", "h_t", ")", "\n", "mu", "=", "z", "[", ":", ",", ":", "h_t", ".", "size", "(", ")", "[", "1", "]", "]", "\n", "log_var", "=", "z", "[", ":", ",", "h_t", ".", "size", "(", ")", "[", "1", "]", ":", "]", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "h_t", "=", "sample_z", "(", "mu", ",", "log_var", ",", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "h_t", "=", "mu", "\n", "\n", "", "", "else", ":", "\n", "            ", "mu", ",", "log_var", "=", "None", ",", "None", "\n", "\n", "", "return", "h_t", ",", "mu", ",", "log_var", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models1.RNNText.get_length": [[378, 385], ["indices.transpose.transpose.transpose", "indices.transpose.transpose.clone", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "methods", ["None"], ["", "def", "get_length", "(", "self", ",", "indices", ")", ":", "\n", "        ", "indices", "=", "indices", ".", "transpose", "(", "0", ",", "1", ")", "\n", "self", ".", "indices_np", "=", "indices", ".", "clone", "(", ")", "\n", "self", ".", "indices_np", "[", ":", ",", "-", "1", "]", "=", "self", ".", "eos", "\n", "seq_len", "=", "torch", ".", "argmax", "(", "self", ".", "indices_np", "==", "self", ".", "eos", ",", "1", ")", "\n", "seq_len", "+=", "1", "\n", "return", "seq_len", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models1.AutoEncoder.__init__": [[388, 392], ["torch.Module.__init__", "text_auto_models1.RNNText"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "embeddings", "=", "None", ")", ":", "\n", "        ", "super", "(", "AutoEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rnn", "=", "RNNText", "(", "config", ",", "vae", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models1.AutoEncoder.forward": [[393, 405], ["len", "text_auto_models1.AutoEncoder.rnn", "text_auto_models1.AutoEncoder.rnn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_positions", ",", "text_length", ",", "teacher_forcing_prob", "=", "0.0", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "batch_positions", ")", "\n", "h", "=", "self", ".", "rnn", "(", "pass_type", "=", "'encode'", ",", "\n", "batch_positions", "=", "batch_positions", ",", "\n", "text_length", "=", "text_length", ")", "\n", "h", ",", "o", ",", "i", "=", "self", ".", "rnn", "(", "pass_type", "=", "'generate'", ",", "\n", "batch_positions", "=", "batch_positions", ",", "\n", "hidden", "=", "h", ",", "\n", "teacher_forcing_prob", "=", "teacher_forcing_prob", ",", "\n", "text_length", "=", "text_length", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "return", "o", ",", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models1.AutoEncoder.store_model": [[407, 414], ["print", "torch.save", "torch.save", "torch.save", "torch.save", "text_auto_models1.AutoEncoder.state_dict", "str"], "methods", ["None"], ["", "def", "store_model", "(", "self", ",", "path", ")", ":", "\n", "\n", "        ", "state", "=", "{", "\n", "'state_dict'", ":", "self", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "print", "(", "\"dumping new best model to \"", "+", "str", "(", "path", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_auto_models1.AutoEncoder.load_model": [[415, 424], ["torch.load", "torch.load", "torch.load", "torch.load", "text_auto_models1.AutoEncoder.load_state_dict"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Load model from file\n        :param best:\n        :return:\n        \"\"\"", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.ImageToTextModel.__init__": [[6, 29], ["torch.Module.__init__", "supervised_models.ImageToTextModel.vocab.vocab_size", "supervised_models.ImageToTextModel.vocab.sos_pos", "supervised_models.ImageToTextModel.vocab.eos_pos", "supervised_models.ImageToTextModel.vocab.pad_pos", "models.image_models.initialize_torchvision_model", "models.text_models.RNNText"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.vocab_size", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.sos_pos", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.eos_pos", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.pad_pos", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.initialize_torchvision_model"], ["    ", "def", "__init__", "(", "self", ",", "vocab", ",", "cfg", ",", "device", ")", ":", "\n", "        ", "super", "(", "ImageToTextModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "vocab_size", "=", "self", ".", "vocab", ".", "vocab_size", "(", ")", "\n", "self", ".", "sos", "=", "self", ".", "vocab", ".", "sos_pos", "(", ")", "\n", "self", ".", "eos", "=", "self", ".", "vocab", ".", "eos_pos", "(", ")", "\n", "self", ".", "pad", "=", "self", ".", "vocab", ".", "pad_pos", "(", ")", "\n", "\n", "self", ".", "image_encoder", ",", "self", ".", "image_input_size", "=", "initialize_torchvision_model", "(", "cfg", ".", "IMAGE", ".", "ENCODER_NAME", ",", "\n", "cfg", ".", "IMAGE", ".", "DIMENSION", ",", "\n", "cfg", ".", "IMAGE", ".", "FIX_ENCODER", ",", "\n", "cfg", ".", "IMAGE", ".", "PRETRAINED_ENCODER", ")", "\n", "\n", "self", ".", "text_encoder_decoder", "=", "RNNText", "(", "emb_dim", "=", "cfg", ".", "TEXT", ".", "EMBEDDING_DIM", ",", "\n", "vocab_size", "=", "self", ".", "vocab_size", ",", "\n", "hid_dim", "=", "cfg", ".", "TEXT", ".", "DIMENSION", ",", "\n", "n_layers", "=", "cfg", ".", "TEXT", ".", "N_LAYERS", ",", "\n", "dropout", "=", "cfg", ".", "TEXT", ".", "DROPOUT", ",", "\n", "sos", "=", "self", ".", "sos", ",", "\n", "eos", "=", "self", ".", "eos", ",", "\n", "device", "=", "device", ",", "\n", "vae", "=", "cfg", ".", "TEXT", ".", "VAE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.ImageToTextModel.encode_image": [[30, 32], ["supervised_models.ImageToTextModel.image_encoder"], "methods", ["None"], ["", "def", "encode_image", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "image_encoder", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.ImageToTextModel.decode_text": [[33, 46], ["supervised_models.ImageToTextModel.text_encoder_decoder", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "decode_text", "(", "self", ",", "encoding", ",", "batch_positions", "=", "None", ",", "text_length", "=", "None", ",", "batch_size", "=", "None", ",", "teacher_forcing_prob", "=", "0.0", ")", ":", "\n", "\n", "        ", "if", "text_length", "is", "None", ":", "\n", "            ", "text_length", "=", "torch", ".", "LongTensor", "(", "[", "30", "]", ")", ".", "repeat", "(", "len", "(", "encoding", ")", ")", "\n", "\n", "", "encoding", ",", "logits", ",", "indices", ",", "mu_text", ",", "log_var_text", "=", "self", ".", "text_encoder_decoder", "(", "pass_type", "=", "'generate'", ",", "\n", "batch_positions", "=", "batch_positions", ",", "\n", "hidden", "=", "encoding", ",", "\n", "teacher_forcing_prob", "=", "teacher_forcing_prob", ",", "\n", "text_length", "=", "text_length", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "\n", "return", "encoding", ",", "logits", ",", "indices", ",", "mu_text", ",", "log_var_text", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.ImageToTextModel.image_text": [[47, 54], ["supervised_models.ImageToTextModel.encode_image", "supervised_models.ImageToTextModel.decode_text"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.encode_image", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.decode_text"], ["", "def", "image_text", "(", "self", ",", "image", ",", "text_length", "=", "None", ")", ":", "\n", "\n", "        ", "image_encoding", ",", "mu_img", ",", "log_var_img", "=", "self", ".", "encode_image", "(", "image", ")", "\n", "\n", "text_encoding", ",", "text_output", ",", "indices", ",", "mu_text", ",", "log_var_text", "=", "self", ".", "decode_text", "(", "image_encoding", ",", "text_length", "=", "text_length", ")", "\n", "\n", "return", "text_output", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.ImageToTextModel.forward": [[55, 57], ["supervised_models.ImageToTextModel.image_text"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.image_text"], ["", "def", "forward", "(", "self", ",", "x", ",", "text_length", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "image_text", "(", "x", ",", "text_length", "=", "text_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.ImageToTextModel.store_model": [[58, 65], ["print", "torch.save", "torch.save", "torch.save", "torch.save", "supervised_models.ImageToTextModel.state_dict", "str"], "methods", ["None"], ["", "def", "store_model", "(", "self", ",", "path", ")", ":", "\n", "\n", "        ", "state", "=", "{", "\n", "'state_dict'", ":", "self", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "print", "(", "\"dumping new best model to \"", "+", "str", "(", "path", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.ImageToTextModel.load_model": [[66, 75], ["torch.load", "torch.load", "torch.load", "torch.load", "supervised_models.ImageToTextModel.load_state_dict"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Load model from file\n        :param best:\n        :return:\n        \"\"\"", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.TextToImageModel.__init__": [[79, 103], ["torch.Module.__init__", "supervised_models.TextToImageModel.vocab.vocab_size", "supervised_models.TextToImageModel.vocab.sos_pos", "supervised_models.TextToImageModel.vocab.eos_pos", "supervised_models.TextToImageModel.vocab.pad_pos", "models.stack_gan2.model.G_NET", "models.text_models.RNNText", "models.adversarial_models.D_NET64"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.vocab_size", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.sos_pos", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.eos_pos", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.pad_pos"], ["    ", "def", "__init__", "(", "self", ",", "vocab", ",", "cfg", ",", "device", ")", ":", "\n", "        ", "super", "(", "TextToImageModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "vocab_size", "=", "self", ".", "vocab", ".", "vocab_size", "(", ")", "\n", "self", ".", "sos", "=", "self", ".", "vocab", ".", "sos_pos", "(", ")", "\n", "self", ".", "eos", "=", "self", ".", "vocab", ".", "eos_pos", "(", ")", "\n", "self", ".", "pad", "=", "self", ".", "vocab", ".", "pad_pos", "(", ")", "\n", "\n", "self", ".", "image_decoder", "=", "G_NET", "(", ")", "\n", "\n", "self", ".", "text_encoder_decoder", "=", "RNNText", "(", "emb_dim", "=", "cfg", ".", "TEXT", ".", "EMBEDDING_DIM", ",", "\n", "vocab_size", "=", "self", ".", "vocab_size", ",", "\n", "hid_dim", "=", "cfg", ".", "TEXT", ".", "DIMENSION", ",", "\n", "n_layers", "=", "cfg", ".", "TEXT", ".", "N_LAYERS", ",", "\n", "dropout", "=", "cfg", ".", "TEXT", ".", "DROPOUT", ",", "\n", "sos", "=", "self", ".", "sos", ",", "\n", "eos", "=", "self", ".", "eos", ",", "\n", "device", "=", "device", ",", "\n", "vae", "=", "False", ")", "\n", "\n", "self", ".", "adv_image", "=", "D_NET64", "(", "df_dim", "=", "cfg", ".", "GAN", ".", "DF_DIM", ",", "\n", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", ",", "\n", "conditional", "=", "cfg", ".", "GAN", ".", "B_CONDITION", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.TextToImageModel.encode_text": [[104, 106], ["supervised_models.TextToImageModel.text_encoder_decoder"], "methods", ["None"], ["", "def", "encode_text", "(", "self", ",", "batch_positions", ",", "text_length", ")", ":", "\n", "        ", "return", "self", ".", "text_encoder_decoder", "(", "pass_type", "=", "'encode'", ",", "batch_positions", "=", "batch_positions", ",", "text_length", "=", "text_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.TextToImageModel.decode_image": [[107, 109], ["supervised_models.TextToImageModel.image_decoder"], "methods", ["None"], ["", "def", "decode_image", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "image_decoder", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.TextToImageModel.text_image": [[110, 116], ["supervised_models.TextToImageModel.encode_text", "supervised_models.TextToImageModel.decode_image"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.encode_text", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.decode_image"], ["", "def", "text_image", "(", "self", ",", "batch_positions", ",", "text_length", ")", ":", "\n", "        ", "text_encoding", ",", "mu_text", ",", "log_var_text", "=", "self", ".", "encode_text", "(", "batch_positions", ",", "text_length", ")", "\n", "\n", "image", ",", "image_norm", "=", "self", ".", "decode_image", "(", "text_encoding", ")", "\n", "\n", "return", "image", ",", "text_encoding", ",", "mu_text", ",", "log_var_text", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.TextToImageModel.forward": [[117, 120], ["supervised_models.TextToImageModel.text_image"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.text_image"], ["", "def", "forward", "(", "self", ",", "batch_positions", ",", "text_length", ")", ":", "\n", "        ", "image", ",", "text_encoding", ",", "mu_text", ",", "log_var_text", "=", "self", ".", "text_image", "(", "batch_positions", ",", "text_length", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.TextToImageModel.store_model": [[121, 128], ["print", "torch.save", "torch.save", "torch.save", "torch.save", "supervised_models.TextToImageModel.state_dict", "str"], "methods", ["None"], ["", "def", "store_model", "(", "self", ",", "path", ")", ":", "\n", "\n", "        ", "state", "=", "{", "\n", "'state_dict'", ":", "self", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "print", "(", "\"dumping new best model to \"", "+", "str", "(", "path", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.TextToImageModel.load_model": [[129, 138], ["torch.load", "torch.load", "torch.load", "torch.load", "supervised_models.TextToImageModel.load_state_dict"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Load model from file\n        :param best:\n        :return:\n        \"\"\"", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.Image2Text.__init__": [[171, 226], ["torch.Module.__init__", "supervised_models.Image2Text.vocab.vocab_size", "supervised_models.Image2Text.vocab.sos_pos", "supervised_models.Image2Text.vocab.eos_pos", "models.image_models.initialize_torchvision_model", "models.text_models.RNNText", "models.adversarial_models.Discriminator", "models.adversarial_models.Discriminator", "torch.nn.modules.padding.ConstantPad2d", "torch.nn.modules.padding.ConstantPad2d"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.vocab_size", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.sos_pos", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.eos_pos", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.initialize_torchvision_model"], ["    ", "def", "__init__", "(", "self", ",", "vocab", ",", "cfg", ",", "device", ")", ":", "\n", "        ", "super", "(", "Image2Text", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "vocab_size", "=", "self", ".", "vocab", ".", "vocab_size", "(", ")", "\n", "self", ".", "sos", "=", "self", ".", "vocab", ".", "sos_pos", "(", ")", "\n", "self", ".", "eos", "=", "self", ".", "vocab", ".", "eos_pos", "(", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n", "if", "cfg", ".", "IMAGE", ".", "VAE", ":", "\n", "            ", "image_multiplier", "=", "2", "\n", "", "else", ":", "\n", "            ", "image_multiplier", "=", "1", "\n", "\n", "", "self", ".", "cfg", "=", "cfg", "\n", "\n", "\n", "self", ".", "image_encoder", ",", "self", ".", "image_input_size", "=", "initialize_torchvision_model", "(", "cfg", ".", "IMAGE", ".", "ENCODER_NAME", ",", "\n", "cfg", ".", "IMAGE", ".", "DIMENSION", "*", "image_multiplier", ",", "\n", "cfg", ".", "IMAGE", ".", "FIX_ENCODER", ",", "\n", "use_pretrained", "=", "cfg", ".", "IMAGE", ".", "PRETRAINED_ENCODER", ",", "\n", "vae", "=", "cfg", ".", "IMAGE", ".", "VAE", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "# self.image_decoder = SimpleImageDecoder(cfg.IMAGE.DIMENSION)", "\n", "\n", "self", ".", "text_encoder_decoder", "=", "RNNText", "(", "emb_dim", "=", "cfg", ".", "TEXT", ".", "EMBEDDING_DIM", ",", "\n", "vocab_size", "=", "self", ".", "vocab_size", ",", "\n", "hid_dim", "=", "cfg", ".", "TEXT", ".", "DIMENSION", ",", "\n", "n_layers", "=", "cfg", ".", "TEXT", ".", "N_LAYERS", ",", "\n", "dropout", "=", "cfg", ".", "TEXT", ".", "DROPOUT", ",", "\n", "vae", "=", "cfg", ".", "TEXT", ".", "VAE", ",", "\n", "sos", "=", "self", ".", "sos", ",", "\n", "eos", "=", "self", ".", "eos", ",", "\n", "device", "=", "device", ")", "\n", "\n", "self", ".", "adv_text", "=", "Discriminator", "(", "emb_dim", "=", "cfg", ".", "TEXT", ".", "DIMENSION", ",", "\n", "dis_layers", "=", "cfg", ".", "TEXT", ".", "ADV", ".", "LAYERS", ",", "\n", "dis_hid_dim", "=", "cfg", ".", "TEXT", ".", "ADV", ".", "DIM", ",", "\n", "dis_dropout", "=", "cfg", ".", "TEXT", ".", "ADV", ".", "DROPOUT", ",", "\n", "dis_input_dropout", "=", "cfg", ".", "TEXT", ".", "ADV", ".", "INPUT_DROPOUT", ",", "\n", "noise", "=", "cfg", ".", "TEXT", ".", "ADV", ".", "NOISE", ",", "\n", "device", "=", "device", "\n", ")", "\n", "\n", "self", ".", "adv_image_enc", "=", "Discriminator", "(", "emb_dim", "=", "cfg", ".", "IMAGE", ".", "DIMENSION", ",", "\n", "dis_layers", "=", "cfg", ".", "IMAGE", ".", "ADV", ".", "LAYERS", ",", "\n", "dis_hid_dim", "=", "cfg", ".", "IMAGE", ".", "ADV", ".", "DIM", ",", "\n", "dis_dropout", "=", "cfg", ".", "IMAGE", ".", "ADV", ".", "DROPOUT", ",", "\n", "dis_input_dropout", "=", "cfg", ".", "IMAGE", ".", "ADV", ".", "INPUT_DROPOUT", ",", "\n", "noise", "=", "cfg", ".", "IMAGE", ".", "ADV", ".", "NOISE", ",", "\n", "device", "=", "device", ")", "\n", "\n", "\n", "self", ".", "pad", "=", "padding", ".", "ConstantPad2d", "(", "80", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.Image2Text.encode_image": [[228, 231], ["supervised_models.Image2Text.image_encoder"], "methods", ["None"], ["", "def", "encode_image", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "return", "self", ".", "image_encoder", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.Image2Text.decode_text": [[233, 246], ["supervised_models.Image2Text.text_encoder_decoder", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "decode_text", "(", "self", ",", "encoding", ",", "batch_positions", "=", "None", ",", "text_length", "=", "None", ",", "batch_size", "=", "None", ",", "teacher_forcing_prob", "=", "0.0", ")", ":", "\n", "\n", "        ", "if", "text_length", "is", "None", ":", "\n", "            ", "text_length", "=", "torch", ".", "LongTensor", "(", "[", "30", "]", ")", ".", "repeat", "(", "len", "(", "encoding", ")", ")", "\n", "\n", "", "encoding", ",", "logits", ",", "indices", ",", "mu_text", ",", "log_var_text", "=", "self", ".", "text_encoder_decoder", "(", "pass_type", "=", "'generate'", ",", "\n", "batch_positions", "=", "batch_positions", ",", "\n", "hidden", "=", "encoding", ",", "\n", "teacher_forcing_prob", "=", "teacher_forcing_prob", ",", "\n", "text_length", "=", "text_length", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "\n", "return", "encoding", ",", "logits", ",", "indices", ",", "mu_text", ",", "log_var_text", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.Image2Text.image_text": [[248, 255], ["supervised_models.Image2Text.encode_image", "supervised_models.Image2Text.decode_text"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.encode_image", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.decode_text"], ["", "def", "image_text", "(", "self", ",", "image", ")", ":", "\n", "\n", "        ", "image_encoding", ",", "mu_img", ",", "log_var_img", "=", "self", ".", "encode_image", "(", "image", ")", "\n", "\n", "text_encoding", ",", "text_output", ",", "indices", ",", "mu_text", ",", "log_var_text", "=", "self", ".", "decode_text", "(", "image_encoding", ")", "\n", "\n", "return", "text_encoding", ",", "text_output", ",", "indices", ",", "image_encoding", ",", "mu_img", ",", "log_var_img", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.Image2Text.store_model": [[257, 264], ["print", "torch.save", "torch.save", "torch.save", "torch.save", "supervised_models.Image2Text.state_dict", "str"], "methods", ["None"], ["", "def", "store_model", "(", "self", ",", "path", ")", ":", "\n", "\n", "        ", "state", "=", "{", "\n", "'state_dict'", ":", "self", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "print", "(", "\"dumping new best model to \"", "+", "str", "(", "path", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.Image2Text.load_model": [[265, 274], ["torch.load", "torch.load", "torch.load", "torch.load", "supervised_models.Image2Text.load_state_dict"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Load model from file\n        :param best:\n        :return:\n        \"\"\"", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.Text2Image.__init__": [[282, 320], ["torch.Module.__init__", "supervised_models.Text2Image.vocab.vocab_size", "supervised_models.Text2Image.vocab.sos_pos", "supervised_models.Text2Image.vocab.eos_pos", "models.stack_gan2.model.G_NET", "models.text_models.RNNText", "models.adversarial_models.Discriminator", "models.adversarial_models.D_NET64"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.vocab_size", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.sos_pos", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.eos_pos"], ["    ", "def", "__init__", "(", "self", ",", "vocab", ",", "cfg", ",", "device", ")", ":", "\n", "        ", "super", "(", "Text2Image", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "vocab_size", "=", "self", ".", "vocab", ".", "vocab_size", "(", ")", "\n", "self", ".", "sos", "=", "self", ".", "vocab", ".", "sos_pos", "(", ")", "\n", "self", ".", "eos", "=", "self", ".", "vocab", ".", "eos_pos", "(", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n", "self", ".", "image_decoder", "=", "G_NET", "(", ")", "\n", "# self.image_decoder = SimpleImageDecoder(cfg.IMAGE.DIMENSION)", "\n", "\n", "self", ".", "text_encoder_decoder", "=", "RNNText", "(", "emb_dim", "=", "cfg", ".", "TEXT", ".", "EMBEDDING_DIM", ",", "\n", "vocab_size", "=", "self", ".", "vocab_size", ",", "\n", "hid_dim", "=", "cfg", ".", "TEXT", ".", "DIMENSION", ",", "\n", "n_layers", "=", "cfg", ".", "TEXT", ".", "N_LAYERS", ",", "\n", "dropout", "=", "cfg", ".", "TEXT", ".", "DROPOUT", ",", "\n", "vae", "=", "cfg", ".", "TEXT", ".", "VAE", ",", "\n", "sos", "=", "self", ".", "sos", ",", "\n", "eos", "=", "self", ".", "eos", ",", "\n", "device", "=", "device", ")", "\n", "\n", "self", ".", "adv_text", "=", "Discriminator", "(", "emb_dim", "=", "cfg", ".", "TEXT", ".", "DIMENSION", ",", "\n", "dis_layers", "=", "cfg", ".", "TEXT", ".", "ADV", ".", "LAYERS", ",", "\n", "dis_hid_dim", "=", "cfg", ".", "TEXT", ".", "ADV", ".", "DIM", ",", "\n", "dis_dropout", "=", "cfg", ".", "TEXT", ".", "ADV", ".", "DROPOUT", ",", "\n", "dis_input_dropout", "=", "cfg", ".", "TEXT", ".", "ADV", ".", "INPUT_DROPOUT", ",", "\n", "noise", "=", "cfg", ".", "TEXT", ".", "ADV", ".", "NOISE", ",", "\n", "device", "=", "device", "\n", ")", "\n", "\n", "\n", "self", ".", "adv_image", "=", "D_NET64", "(", "df_dim", "=", "cfg", ".", "GAN", ".", "DF_DIM", ",", "\n", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", ",", "\n", "conditional", "=", "cfg", ".", "GAN", ".", "B_CONDITION", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.Text2Image.encode_text": [[323, 325], ["supervised_models.Text2Image.text_encoder_decoder"], "methods", ["None"], ["", "def", "encode_text", "(", "self", ",", "batch_positions", ",", "text_length", ")", ":", "\n", "        ", "return", "self", ".", "text_encoder_decoder", "(", "pass_type", "=", "'encode'", ",", "batch_positions", "=", "batch_positions", ",", "text_length", "=", "text_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.Text2Image.decode_image": [[326, 328], ["supervised_models.Text2Image.image_decoder"], "methods", ["None"], ["", "def", "decode_image", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "image_decoder", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.Text2Image.text_image": [[330, 337], ["supervised_models.Text2Image.encode_text", "supervised_models.Text2Image.decode_image"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.encode_text", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.decode_image"], ["", "def", "text_image", "(", "self", ",", "batch_positions", ",", "text_length", ")", ":", "\n", "\n", "        ", "text_encoding", ",", "mu_text", ",", "log_var_text", "=", "self", ".", "encode_text", "(", "batch_positions", ",", "text_length", ")", "\n", "\n", "image", ",", "image_norm", "=", "self", ".", "decode_image", "(", "text_encoding", ")", "\n", "\n", "return", "image", ",", "text_encoding", ",", "mu_text", ",", "log_var_text", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.Text2Image.forward": [[340, 342], ["supervised_models.Text2Image.text_image"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.text_image"], ["", "def", "forward", "(", "self", ",", "batchpositions", ",", "text_length", ")", ":", "\n", "        ", "return", "self", ".", "text_image", "(", "batchpositions", ",", "text_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.Text2Image.store_model": [[343, 350], ["print", "torch.save", "torch.save", "torch.save", "torch.save", "supervised_models.Text2Image.state_dict", "str"], "methods", ["None"], ["", "def", "store_model", "(", "self", ",", "path", ")", ":", "\n", "\n", "        ", "state", "=", "{", "\n", "'state_dict'", ":", "self", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "print", "(", "\"dumping new best model to \"", "+", "str", "(", "path", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.supervised_models.Text2Image.load_model": [[351, 360], ["torch.load", "torch.load", "torch.load", "torch.load", "supervised_models.Text2Image.load_state_dict"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Load model from file\n        :param best:\n        :return:\n        \"\"\"", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.RNNDText.__init__": [[10, 44], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dim", ",", "vocab_size", ",", "hid_dim", ",", "n_layers", ",", "dropout", ",", "sos", ",", "eos", ",", "pad", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "super", "(", "RNNDText", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "hid_dim", "=", "hid_dim", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "sos", "=", "sos", "\n", "self", ".", "eos", "=", "eos", "\n", "self", ".", "pad", "=", "pad", "\n", "self", ".", "device", "=", "device", "\n", "\n", "assert", "self", ".", "sos", "is", "not", "None", "\n", "assert", "self", ".", "eos", "is", "not", "None", "\n", "\n", "self", ".", "embeddings", "=", "nn", ".", "Embedding", "(", "self", ".", "vocab_size", ",", "self", ".", "emb_dim", ",", "padding_idx", "=", "self", ".", "pad", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "hid_dim", "*", "2", ",", "self", ".", "vocab_size", ")", "\n", "\n", "# Initialize the RNN", "\n", "self", ".", "encoder", "=", "nn", ".", "LSTM", "(", "self", ".", "emb_dim", ",", "\n", "self", ".", "hid_dim", ",", "\n", "self", ".", "n_layers", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "batch_first", "=", "True", ",", "#only for input and output does not have any impact on cell state or hidden state", "\n", "bidirectional", "=", "True", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "LSTM", "(", "self", ".", "emb_dim", ",", "\n", "self", ".", "hid_dim", "*", "2", ",", "\n", "self", ".", "n_layers", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "batch_first", "=", "True", ",", "#only for input and output does not have any impact on cell state or hidden state", "\n", "bidirectional", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.RNNDText.forward": [[47, 72], ["text_models.RNNDText.generate", "len", "text_models.RNNDText.encode", "len", "max"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.RNNText.generate", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode"], ["", "def", "forward", "(", "self", ",", "\n", "text_length", ",", "\n", "batch_positions", "=", "None", ",", "\n", "cell", "=", "None", ",", "\n", "hidden", "=", "None", ",", "\n", "pass_type", "=", "'generate'", ",", "\n", "teacher_forcing_prob", "=", "0.0", ",", "\n", "batch_size", "=", "None", "\n", ")", ":", "\n", "\n", "        ", "if", "pass_type", "==", "'generate'", ":", "\n", "\n", "            ", "assert", "hidden", "is", "not", "None", "\n", "if", "teacher_forcing_prob", ">", "0.0", ":", "\n", "                ", "assert", "batch_positions", "is", "not", "None", "\n", "assert", "len", "(", "batch_positions", "[", "0", "]", ")", "==", "max", "(", "text_length", ")", "\n", "batch_size", "=", "len", "(", "batch_positions", ")", "\n", "# else:", "\n", "# assert batch_size is not None", "\n", "\n", "", "return", "self", ".", "generate", "(", "hidden", ",", "batch_size", ",", "batch_positions", ",", "teacher_forcing_prob", ",", "text_length", ",", "cell", "=", "cell", ")", "\n", "\n", "", "elif", "pass_type", "==", "'encode'", ":", "\n", "            ", "assert", "batch_positions", "is", "not", "None", "\n", "return", "self", ".", "encode", "(", "batch_positions", ",", "text_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.RNNDText.encode": [[74, 98], ["text_models.RNNDText.embeddings", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "sorted_idx.sort", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "text_models.RNNDText.encoder", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "", "def", "encode", "(", "self", ",", "batch_positions", ",", "text_length", ")", ":", "\n", "\n", "        ", "embedded", "=", "self", ".", "embeddings", "(", "batch_positions", ")", "#Batch size * padded sentence len* embedding dim each word", "\n", "#in order to use packed representation the embeddings need to be sorted based one length", "\n", "sorted_lens", ",", "sorted_idx", "=", "torch", ".", "sort", "(", "text_length", ",", "descending", "=", "True", ")", "\n", "forwards_sorted", "=", "embedded", "[", "sorted_idx", "]", "#sort the embedding based on length", "\n", "_", ",", "sortedsorted_idx", "=", "sorted_idx", ".", "sort", "(", ")", "#sorting the sorted index, to figure out unsorted index", "\n", "packed", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "forwards_sorted", ",", "sorted_lens", ",", "batch_first", "=", "True", ")", "#reduces computation packed sequence is a tuple of two ", "\n", "#lists . One list contain sequences , where sequences are interleaved by time space.Other list contains", "\n", "#the batch size at each time step. first list format (sequences, embedding dimention)#(batch first) is used if the input to the fuction has batch as first dimention", "\n", "h", ",", "_", "=", "self", ".", "encoder", "(", "packed", ")", "#Inputs: input, (h_0, c_0) when hidden and cell not provided default taken as 0 vectors as in this case", "\n", "#Outputs: output, (h_n, c_n), if input is packed output is also packed which needs to be unpacked", "\n", "#tensor containing the output features (h_t) from the last layer(if multiple layers are used) of the LSTM, for each time step", "\n", "#output for packed has a dimention(all sequences, num_directions(forward and backward for bidirectional) * hidden_size)", "\n", "#h_n of shape (num_layers * num_directions, batch, hidden_size): tensor containing the hidden state for t = seq_len", "\n", "#c_n of shape (num_layers * num_directions, batch, hidden_size): tensor containing the cell state for t = seq_len.", "\n", "h_tmp", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "h", ",", "batch_first", "=", "True", ")", "\n", "#returns unpacked output and sequence length vector, unpacked output has dimention(batch, sequence, num_directions * hidden_size)", "\n", "h_t", "=", "torch", ".", "max", "(", "h_tmp", ",", "1", ")", "[", "0", "]", "#taking the maximum among all timesteps", "\n", "h_t", "=", "torch", ".", "mean", "(", "h_tmp", ",", "1", ")", "\n", "h_t", "=", "h_t", "[", "sortedsorted_idx", "]", "#sequence are sorted back to unsorted format", "\n", "\n", "\n", "return", "h_t", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.RNNDText.generate": [[100, 147], ["text_models.RNNDText.embeddings", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "max", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "range", "hidden_outputs.transpose.transpose.transpose", "len", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "text_models.RNNDText.view", "text_models.RNNDText.decoder", "text_models.RNNDText.out", "text_models.RNNDText.squeeze", "torch.zeros().to.transpose", "torch.zeros().to.transpose", "torch.zeros().to.transpose", "torch.zeros().to.transpose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "text_models.RNNDText.view().max", "random.random", "text_models.RNNDText.embeddings", "text_models.RNNDText.embeddings", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "text_models.RNNDText.view", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "generate", "(", "self", ",", "hidden", ",", "batch_size", ",", "batch_positions", ",", "teacher_forcing_prob", ",", "text_length", ",", "cell", "=", "None", ")", ":", "\n", "        ", "if", "batch_size", "is", "None", ":", "\n", "            ", "batch_size", "=", "len", "(", "hidden", ")", "\n", "", "step_emb", "=", "self", ".", "embeddings", "(", "torch", ".", "LongTensor", "(", "[", "self", ".", "sos", "]", ")", ".", "repeat", "(", "batch_size", ")", ".", "to", "(", "self", ".", "device", ")", ")", "#starting symbol embeddings for each sentences in batch, shape (batch_size,embedding dim)", "\n", "hidden_", "=", "torch", ".", "zeros", "(", "(", "self", ".", "n_layers", ",", "batch_size", ",", "self", ".", "hid_dim", "*", "2", ")", ")", ".", "to", "(", "self", ".", "device", ")", "#shape (no_layer, batch_size, hidden_dim*2)", "\n", "#hidden has a shape of (batch_size, hidden*2)", "\n", "hidden_", "[", "0", "]", "=", "hidden", "[", "0", "]", "#replacing for first layer entry , in this case only single layer", "\n", "hidden", "=", "hidden_", "#shape is (layer_no, batchsize, hidden*2), this is the encoded value from encoder in the given format, which will be input as hidden state to decoder at first timestep", "\n", "\n", "if", "cell", "is", "None", ":", "\n", "            ", "cell", "=", "torch", ".", "zeros_like", "(", "hidden", ")", ".", "to", "(", "self", ".", "device", ")", "#shape is (layer_no, batchsize, hidden*2)#initializing cell to zero", "\n", "\n", "", "max_length", "=", "max", "(", "text_length", ")", "\n", "argmax_indices", "=", "torch", ".", "zeros", "(", "max_length", ",", "batch_size", ")", ".", "to", "(", "self", ".", "device", ")", "# to strore maximum indices for entire sequence length", "\n", "hidden_outputs", "=", "torch", ".", "zeros", "(", "max_length", ",", "batch_size", ",", "self", ".", "hid_dim", "*", "2", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "outputs", "=", "torch", ".", "zeros", "(", "max_length", ",", "batch_size", ",", "self", ".", "vocab_size", ")", ".", "to", "(", "self", ".", "device", ")", "#stores the output for entire sequence length", "\n", "argmax_indices", "[", "0", "]", "=", "torch", ".", "LongTensor", "(", "[", "self", ".", "sos", "]", ")", ".", "repeat", "(", "batch_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "hidden_outputs", "[", "0", "]", "=", "hidden", "[", "-", "1", "]", "\n", "\n", "for", "t", "in", "range", "(", "1", ",", "max_length", ")", ":", "#Note here we can#t pack the sequence as we are generating one by one, as we don#t have input beforehand", "\n", "            ", "step_emb", "=", "step_emb", ".", "view", "(", "batch_size", ",", "1", ",", "self", ".", "emb_dim", ")", "#(batch, sequence length, embedding_dim) Notebatch first is used in decoder", "\n", "output", ",", "(", "hidden", ",", "cell", ")", "=", "self", ".", "decoder", "(", "step_emb", ",", "(", "hidden", ",", "cell", ")", ")", "#hidden and cell usually have multiple entries each for number of layers and directions ; shape (num_layers * num_directions, batch, hidden_size)", "\n", "\n", "hidden_outputs", "[", "t", "]", "=", "hidden", "[", "-", "1", "]", "#here it means take hidden from last layer, in this case  only one layer", "\n", "logits", "=", "self", ".", "out", "(", "output", ")", "#probability of a particular word", "\n", "outputs", "[", "t", "]", "=", "logits", ".", "squeeze", "(", ")", "#removes dimention of 1", "\n", "\n", "argmax_index", "=", "logits", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "max", "(", "1", ")", "[", "1", "]", "#maximum around axis 1, returns value tensor and index tensor, taking the index tensor", "\n", "argmax_indices", "[", "t", "]", "=", "argmax_index", "\n", "\n", "teacher_force", "=", "random", ".", "random", "(", ")", "<", "teacher_forcing_prob", "\n", "if", "teacher_force", ":", "\n", "                ", "step_emb", "=", "self", ".", "embeddings", "(", "batch_positions", "[", ":", ",", "t", "]", ")", "\n", "", "else", ":", "\n", "                ", "step_emb", "=", "self", ".", "embeddings", "(", "argmax_index", ")", "#obtaining the next input which is embedding based on predicted logits", "\n", "\n", "# text_length = self.get_length(argmax_indices)", "\n", "", "", "hidden_outputs", "=", "hidden_outputs", ".", "transpose", "(", "1", ",", "0", ")", "\n", "#sorted_lens, sorted_idx = torch.sort(text_length, descending=True)", "\n", "#hidden_sorted = hidden_outputs[sorted_idx]", "\n", "#_, sortedsorted_idx = sorted_idx.sort()", "\n", "#packed = torch.nn.utils.rnn.pack_padded_sequence(hidden_sorted, sorted_lens, batch_first=True)", "\n", "#h_tmp, _ = torch.nn.utils.rnn.pad_packed_sequence(packed, batch_first=True)", "\n", "#h_t = torch.max(h_tmp, 1)[0].squeeze()", "\n", "\n", "\n", "return", "outputs", ".", "transpose", "(", "0", ",", "1", ")", ",", "argmax_indices", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.AutoEncoderD.__init__": [[159, 163], ["torch.Module.__init__", "text_models.RNNDText"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "embeddings", "=", "None", ")", ":", "\n", "        ", "super", "(", "AutoEncoderD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rnn", "=", "RNNDText", "(", "**", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.AutoEncoderD.forward": [[164, 176], ["len", "text_models.AutoEncoderD.rnn", "text_models.AutoEncoderD.rnn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_positions", ",", "text_length", ",", "teacher_forcing_prob", "=", "0.0", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "batch_positions", ")", "\n", "h", "=", "self", ".", "rnn", "(", "pass_type", "=", "'encode'", ",", "\n", "batch_positions", "=", "batch_positions", ",", "\n", "text_length", "=", "text_length", ")", "\n", "o", ",", "i", "=", "self", ".", "rnn", "(", "pass_type", "=", "'generate'", ",", "\n", "batch_positions", "=", "batch_positions", ",", "\n", "hidden", "=", "h", ",", "\n", "teacher_forcing_prob", "=", "teacher_forcing_prob", ",", "\n", "text_length", "=", "text_length", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "return", "o", ",", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.AutoEncoderD.store_model": [[178, 185], ["print", "torch.save", "torch.save", "torch.save", "torch.save", "text_models.AutoEncoderD.state_dict", "str"], "methods", ["None"], ["", "def", "store_model", "(", "self", ",", "path", ")", ":", "\n", "\n", "        ", "state", "=", "{", "\n", "'state_dict'", ":", "self", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "print", "(", "\"dumping new best model to \"", "+", "str", "(", "path", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.AutoEncoderD.load_model": [[186, 195], ["torch.load", "torch.load", "torch.load", "torch.load", "text_models.AutoEncoderD.load_state_dict"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Load model from file\n        :param best:\n        :return:\n        \"\"\"", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.RNNText.__init__": [[200, 243], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.LSTM", "torch.LSTM", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dim", ",", "vocab_size", ",", "hid_dim", ",", "n_layers", ",", "dropout", ",", "sos", ",", "eos", ",", "device", ",", "vae", ")", ":", "\n", "        ", "super", "(", "RNNText", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#", "\n", "# self.emb_dim =  config['embedding_dim']", "\n", "# self.vocab_size = config['vocab_size']", "\n", "# self.hid_dim =  config['rnn_hidden_dim']", "\n", "# self.n_layers = config['rnn_layers']", "\n", "# self.dropout =  config['rnn_dropout']", "\n", "# self.sos = config['sos']", "\n", "# self.eos = config['eos']", "\n", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "hid_dim", "=", "hid_dim", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "sos", "=", "sos", "\n", "self", ".", "eos", "=", "eos", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "vae", "=", "vae", "\n", "\n", "assert", "self", ".", "sos", "is", "not", "None", "\n", "assert", "self", ".", "eos", "is", "not", "None", "\n", "\n", "# if embeddings:", "\n", "#     self.embeddings = embeddings", "\n", "# else:", "\n", "self", ".", "embeddings", "=", "nn", ".", "Embedding", "(", "self", ".", "vocab_size", ",", "self", ".", "emb_dim", ",", "padding_idx", "=", "0", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "hid_dim", ",", "self", ".", "vocab_size", ")", "\n", "\n", "# Initialize the RNN", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "self", ".", "emb_dim", ",", "\n", "self", ".", "hid_dim", ",", "\n", "self", ".", "n_layers", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "False", ")", "\n", "\n", "if", "self", ".", "vae", ":", "\n", "            ", "self", ".", "vae_transform", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "hid_dim", ",", "self", ".", "hid_dim", "*", "2", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.RNNText.forward": [[245, 270], ["text_models.RNNText.generate", "len", "text_models.RNNText.encode", "len", "max"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.RNNText.generate", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode"], ["", "", "def", "forward", "(", "self", ",", "\n", "text_length", ",", "\n", "batch_positions", "=", "None", ",", "\n", "cell", "=", "None", ",", "\n", "hidden", "=", "None", ",", "\n", "pass_type", "=", "'generate'", ",", "\n", "teacher_forcing_prob", "=", "0.0", ",", "\n", "batch_size", "=", "None", "\n", ")", ":", "\n", "\n", "        ", "if", "pass_type", "==", "'generate'", ":", "\n", "\n", "            ", "assert", "hidden", "is", "not", "None", "\n", "if", "teacher_forcing_prob", ">", "0.0", ":", "\n", "                ", "assert", "batch_positions", "is", "not", "None", "\n", "assert", "len", "(", "batch_positions", "[", "0", "]", ")", "==", "max", "(", "text_length", ")", "\n", "batch_size", "=", "len", "(", "batch_positions", ")", "\n", "# else:", "\n", "# assert batch_size is not None", "\n", "\n", "", "return", "self", ".", "generate", "(", "hidden", ",", "batch_size", ",", "batch_positions", ",", "teacher_forcing_prob", ",", "text_length", ",", "cell", "=", "cell", ")", "\n", "\n", "", "elif", "pass_type", "==", "'encode'", ":", "\n", "            ", "assert", "batch_positions", "is", "not", "None", "\n", "return", "self", ".", "encode", "(", "batch_positions", ",", "text_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.RNNText.generate": [[271, 326], ["text_models.RNNText.embeddings", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "max", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "text_models.RNNText.get_length", "hidden_outputs.transpose.transpose.transpose", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "sorted_idx.sort", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "[].squeeze", "len", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "text_models.RNNText.view", "text_models.RNNText.rnn", "text_models.RNNText.out", "text_models.RNNText.squeeze", "text_models.RNNText.vae_transform", "torch.zeros().to.transpose", "torch.zeros().to.transpose", "torch.zeros().to.transpose", "torch.zeros().to.transpose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "text_models.RNNText.view().max", "random.random", "text_models.RNNText.embeddings", "text_models.RNNText.embeddings", "models.utils.sample_z", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.max", "torch.max", "torch.max", "torch.max", "text_models.RNNText.view", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "models.utils.sample_z.size", "models.utils.sample_z.size"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.RNNText.get_length", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.sample_z"], ["", "", "def", "generate", "(", "self", ",", "hidden", ",", "batch_size", ",", "batch_positions", ",", "teacher_forcing_prob", ",", "text_length", ",", "cell", "=", "None", ")", ":", "\n", "        ", "if", "batch_size", "is", "None", ":", "\n", "            ", "batch_size", "=", "len", "(", "hidden", ")", "\n", "", "step_emb", "=", "self", ".", "embeddings", "(", "torch", ".", "LongTensor", "(", "[", "self", ".", "sos", "]", ")", ".", "repeat", "(", "batch_size", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "hidden_", "=", "torch", ".", "zeros", "(", "(", "self", ".", "n_layers", ",", "batch_size", ",", "self", ".", "hid_dim", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "hidden_", "[", "0", "]", "=", "hidden", "\n", "hidden", "=", "hidden_", "\n", "\n", "if", "cell", "is", "None", ":", "\n", "            ", "cell", "=", "torch", ".", "zeros_like", "(", "hidden", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "max_length", "=", "max", "(", "text_length", ")", "\n", "argmax_indices", "=", "torch", ".", "zeros", "(", "max_length", ",", "batch_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "hidden_outputs", "=", "torch", ".", "zeros", "(", "max_length", ",", "batch_size", ",", "self", ".", "hid_dim", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "outputs", "=", "torch", ".", "zeros", "(", "max_length", ",", "batch_size", ",", "self", ".", "vocab_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "for", "t", "in", "range", "(", "1", ",", "max_length", ")", ":", "\n", "            ", "step_emb", "=", "step_emb", ".", "view", "(", "batch_size", ",", "1", ",", "self", ".", "emb_dim", ")", "\n", "output", ",", "(", "hidden", ",", "cell", ")", "=", "self", ".", "rnn", "(", "step_emb", ",", "(", "hidden", ",", "cell", ")", ")", "\n", "\n", "hidden_outputs", "[", "t", "]", "=", "hidden", "[", "-", "1", "]", "\n", "logits", "=", "self", ".", "out", "(", "output", ")", "\n", "outputs", "[", "t", "]", "=", "logits", ".", "squeeze", "(", ")", "\n", "\n", "argmax_index", "=", "logits", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "argmax_indices", "[", "t", "]", "=", "argmax_index", "\n", "\n", "teacher_force", "=", "random", ".", "random", "(", ")", "<", "teacher_forcing_prob", "\n", "if", "teacher_force", ":", "\n", "                ", "step_emb", "=", "self", ".", "embeddings", "(", "batch_positions", "[", ":", ",", "t", "]", ")", "\n", "", "else", ":", "\n", "                ", "step_emb", "=", "self", ".", "embeddings", "(", "argmax_index", ")", "\n", "\n", "", "", "text_length", "=", "self", ".", "get_length", "(", "argmax_indices", ")", "\n", "hidden_outputs", "=", "hidden_outputs", ".", "transpose", "(", "1", ",", "0", ")", "\n", "sorted_lens", ",", "sorted_idx", "=", "torch", ".", "sort", "(", "text_length", ",", "descending", "=", "True", ")", "\n", "hidden_sorted", "=", "hidden_outputs", "[", "sorted_idx", "]", "\n", "_", ",", "sortedsorted_idx", "=", "sorted_idx", ".", "sort", "(", ")", "\n", "packed", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "hidden_sorted", ",", "sorted_lens", ",", "batch_first", "=", "True", ")", "\n", "h_tmp", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "packed", ",", "batch_first", "=", "True", ")", "\n", "h_t", "=", "torch", ".", "max", "(", "h_tmp", ",", "1", ")", "[", "0", "]", ".", "squeeze", "(", ")", "\n", "\n", "if", "self", ".", "vae", ":", "\n", "            ", "z", "=", "self", ".", "vae_transform", "(", "h_t", ")", "\n", "mu", "=", "z", "[", ":", ",", ":", "h_t", ".", "size", "(", ")", "[", "1", "]", "]", "\n", "log_var", "=", "z", "[", ":", ",", "h_t", ".", "size", "(", ")", "[", "1", "]", ":", "]", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "h_t", "=", "sample_z", "(", "mu", ",", "log_var", ",", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "h_t", "=", "mu", "\n", "", "", "else", ":", "\n", "            ", "mu", ",", "log_var", "=", "None", ",", "None", "\n", "\n", "", "return", "h_t", ",", "outputs", ".", "transpose", "(", "0", ",", "1", ")", ",", "argmax_indices", ".", "transpose", "(", "0", ",", "1", ")", ",", "mu", ",", "log_var", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.RNNText.encode": [[327, 354], ["text_models.RNNText.embeddings", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "sorted_idx.sort", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "text_models.RNNText.rnn", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.max", "torch.max", "torch.max", "torch.max", "text_models.RNNText.vae_transform", "models.utils.sample_z", "models.utils.sample_z.size", "models.utils.sample_z.size"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.sample_z"], ["", "def", "encode", "(", "self", ",", "batch_positions", ",", "text_length", ")", ":", "\n", "\n", "        ", "embedded", "=", "self", ".", "embeddings", "(", "batch_positions", ")", "#Batch size * padded sentence len* embedding dim each word", "\n", "\n", "sorted_lens", ",", "sorted_idx", "=", "torch", ".", "sort", "(", "text_length", ",", "descending", "=", "True", ")", "#sort based on decreasing length", "\n", "forwards_sorted", "=", "embedded", "[", "sorted_idx", "]", "#sort the embedding based on length", "\n", "_", ",", "sortedsorted_idx", "=", "sorted_idx", ".", "sort", "(", ")", "#sorting the sorted index, to figure out unsorted index", "\n", "packed", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "forwards_sorted", ",", "sorted_lens", ",", "batch_first", "=", "True", ")", "\n", "h", ",", "_", "=", "self", ".", "rnn", "(", "packed", ")", "\n", "h_tmp", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "h", ",", "batch_first", "=", "True", ")", "\n", "h_t", "=", "torch", ".", "max", "(", "h_tmp", ",", "1", ")", "[", "0", "]", "\n", "h_t", "=", "h_t", "[", "sortedsorted_idx", "]", "\n", "\n", "if", "self", ".", "vae", ":", "\n", "            ", "z", "=", "self", ".", "vae_transform", "(", "h_t", ")", "\n", "mu", "=", "z", "[", ":", ",", ":", "h_t", ".", "size", "(", ")", "[", "1", "]", "]", "\n", "log_var", "=", "z", "[", ":", ",", "h_t", ".", "size", "(", ")", "[", "1", "]", ":", "]", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "h_t", "=", "sample_z", "(", "mu", ",", "log_var", ",", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "h_t", "=", "mu", "\n", "\n", "", "", "else", ":", "\n", "            ", "mu", ",", "log_var", "=", "None", ",", "None", "\n", "\n", "", "return", "h_t", ",", "mu", ",", "log_var", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.RNNText.get_length": [[355, 362], ["indices.transpose.transpose.transpose", "indices.transpose.transpose.clone", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "methods", ["None"], ["", "def", "get_length", "(", "self", ",", "indices", ")", ":", "\n", "        ", "indices", "=", "indices", ".", "transpose", "(", "0", ",", "1", ")", "\n", "self", ".", "indices_np", "=", "indices", ".", "clone", "(", ")", "\n", "self", ".", "indices_np", "[", ":", ",", "-", "1", "]", "=", "self", ".", "eos", "\n", "seq_len", "=", "torch", ".", "argmax", "(", "self", ".", "indices_np", "==", "self", ".", "eos", ",", "1", ")", "\n", "seq_len", "+=", "1", "\n", "return", "seq_len", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.AutoEncoder.__init__": [[365, 369], ["torch.Module.__init__", "text_models.RNNText"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "embeddings", "=", "None", ")", ":", "\n", "        ", "super", "(", "AutoEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rnn", "=", "RNNText", "(", "config", ",", "vae", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.AutoEncoder.forward": [[370, 382], ["len", "text_models.AutoEncoder.rnn", "text_models.AutoEncoder.rnn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_positions", ",", "text_length", ",", "teacher_forcing_prob", "=", "0.0", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "batch_positions", ")", "\n", "h", "=", "self", ".", "rnn", "(", "pass_type", "=", "'encode'", ",", "\n", "batch_positions", "=", "batch_positions", ",", "\n", "text_length", "=", "text_length", ")", "\n", "h", ",", "o", ",", "i", "=", "self", ".", "rnn", "(", "pass_type", "=", "'generate'", ",", "\n", "batch_positions", "=", "batch_positions", ",", "\n", "hidden", "=", "h", ",", "\n", "teacher_forcing_prob", "=", "teacher_forcing_prob", ",", "\n", "text_length", "=", "text_length", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "return", "o", ",", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.AutoEncoder.store_model": [[384, 391], ["print", "torch.save", "torch.save", "torch.save", "torch.save", "text_models.AutoEncoder.state_dict", "str"], "methods", ["None"], ["", "def", "store_model", "(", "self", ",", "path", ")", ":", "\n", "\n", "        ", "state", "=", "{", "\n", "'state_dict'", ":", "self", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "print", "(", "\"dumping new best model to \"", "+", "str", "(", "path", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.text_models.AutoEncoder.load_model": [[392, 401], ["torch.load", "torch.load", "torch.load", "torch.load", "text_models.AutoEncoder.load_state_dict"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Load model from file\n        :param best:\n        :return:\n        \"\"\"", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.GLU.__init__": [[17, 19], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.GLU.forward": [[20, 25], ["x.size", "int", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "nc", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "nc", "%", "2", "==", "0", ",", "'channels dont divide 2!'", "\n", "nc", "=", "int", "(", "nc", "/", "2", ")", "\n", "return", "x", "[", ":", ",", ":", "nc", "]", "*", "F", ".", "sigmoid", "(", "x", "[", ":", ",", "nc", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.INIT_STAGE_G.__init__": [[42, 47], ["torch.Module.__init__", "image_models2.INIT_STAGE_G.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ")", ":", "\n", "        ", "super", "(", "INIT_STAGE_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "self", ".", "in_dim", "=", "indim", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.INIT_STAGE_G.define_module": [[48, 60], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "image_models2.upBlock", "image_models2.upBlock", "image_models2.upBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "image_models2.GLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "in_dim", "=", "self", ".", "in_dim", "\n", "ngf", "=", "self", ".", "gf_dim", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "ngf", "*", "4", "*", "4", "*", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ngf", "*", "4", "*", "4", "*", "2", ")", ",", "\n", "GLU", "(", ")", ")", "\n", "\n", "\n", "self", ".", "upsample1", "=", "upBlock", "(", "ngf", ",", "ngf", "//", "2", ")", "\n", "self", ".", "upsample2", "=", "upBlock", "(", "ngf", "//", "2", ",", "ngf", "//", "4", ")", "\n", "self", ".", "upsample3", "=", "upBlock", "(", "ngf", "//", "4", ",", "ngf", "//", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.INIT_STAGE_G.forward": [[62, 77], ["image_models2.INIT_STAGE_G.fc", "image_models2.INIT_STAGE_G.view", "image_models2.INIT_STAGE_G.upsample1", "image_models2.INIT_STAGE_G.upsample2", "image_models2.INIT_STAGE_G.upsample3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_code", ")", ":", "\n", "\n", "        ", "in_code", "=", "z_code", "\n", "# state size 8ngf x 4 x 4", "\n", "out_code", "=", "self", ".", "fc", "(", "in_code", ")", "\n", "out_code", "=", "out_code", ".", "view", "(", "-", "1", ",", "self", ".", "gf_dim", ",", "4", ",", "4", ")", "\n", "# state size 4ngf x 8 x 8", "\n", "out_code", "=", "self", ".", "upsample1", "(", "out_code", ")", "\n", "# state size 2ngf x 16 x 16", "\n", "out_code", "=", "self", ".", "upsample2", "(", "out_code", ")", "\n", "# state size ngf x 32 x 32", "\n", "out_code", "=", "self", ".", "upsample3", "(", "out_code", ")", "\n", "\n", "\n", "return", "out_code", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.INIT_STAGE_G1.__init__": [[79, 84], ["torch.Module.__init__", "image_models2.INIT_STAGE_G1.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ")", ":", "\n", "        ", "super", "(", "INIT_STAGE_G1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "self", ".", "in_dim", "=", "indim", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.INIT_STAGE_G1.define_module": [[85, 95], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "image_models2.upBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "image_models2.GLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "in_dim", "=", "self", ".", "in_dim", "\n", "ngf", "=", "self", ".", "gf_dim", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "ngf", "*", "16", "*", "16", "*", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ngf", "*", "16", "*", "16", "*", "2", ")", ",", "\n", "GLU", "(", ")", ")", "\n", "\n", "\n", "self", ".", "upsample1", "=", "upBlock", "(", "ngf", ",", "ngf", "//", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.INIT_STAGE_G1.forward": [[99, 110], ["image_models2.INIT_STAGE_G1.fc", "image_models2.INIT_STAGE_G1.view", "image_models2.INIT_STAGE_G1.upsample1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_code", ")", ":", "\n", "\n", "        ", "in_code", "=", "z_code", "\n", "# state size 4ngf x 16 x 16", "\n", "out_code", "=", "self", ".", "fc", "(", "in_code", ")", "\n", "out_code", "=", "out_code", ".", "view", "(", "-", "1", ",", "self", ".", "gf_dim", ",", "16", ",", "16", ")", "\n", "# state size ngf x 32x 32", "\n", "out_code", "=", "self", ".", "upsample1", "(", "out_code", ")", "\n", "\n", "\n", "return", "out_code", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.GET_IMAGE_G.__init__": [[112, 118], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "image_models2.conv3x3", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ")", ":", "\n", "        ", "super", "(", "GET_IMAGE_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "self", ".", "img", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "ngf", ",", "ngf", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.GET_IMAGE_G.forward": [[120, 123], ["image_models2.GET_IMAGE_G.img"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h_code", ")", ":", "\n", "        ", "out_img", "=", "self", ".", "img", "(", "h_code", ")", "\n", "return", "out_img", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.G_NET.__init__": [[125, 129], ["torch.Module.__init__", "image_models2.G_NET.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "G_NET", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.G_NET.define_module": [[130, 133], ["image_models2.INIT_STAGE_G", "image_models2.GET_IMAGE_G"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "            ", "self", ".", "h_net1", "=", "INIT_STAGE_G", "(", "self", ".", "gf_dim", "*", "8", ")", "\n", "self", ".", "img_net1", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", ")", "\n", "", "def", "forward", "(", "self", ",", "text_embedding", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.G_NET.forward": [[133, 141], ["image_models2.G_NET.h_net1", "image_models2.G_NET.img_net1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "text_embedding", ")", ":", "\n", "#if cfg.GAN.B_CONDITION and text_embedding is not None:", "\n", "#    c_code, mu, logvar = self.ca_net(text_embedding)", "\n", "#else:", "\n", "#    c_code, mu, logvar = z_code, None, None", "\n", "        ", "h_code1", "=", "self", ".", "h_net1", "(", "text_embedding", ")", "\n", "fake_img1", "=", "self", ".", "img_net1", "(", "h_code1", ")", "\n", "return", "fake_img1", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.G_NET1.__init__": [[143, 147], ["torch.Module.__init__", "image_models2.G_NET1.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "G_NET1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.G_NET1.define_module": [[148, 151], ["image_models2.INIT_STAGE_G1", "image_models2.GET_IMAGE_G"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "            ", "self", ".", "h_net1", "=", "INIT_STAGE_G1", "(", "self", ".", "gf_dim", "*", "4", ")", "\n", "self", ".", "img_net1", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", ")", "\n", "", "def", "forward", "(", "self", ",", "text_embedding", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.G_NET1.forward": [[151, 159], ["image_models2.G_NET1.h_net1", "image_models2.G_NET1.img_net1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "text_embedding", ")", ":", "\n", "#if cfg.GAN.B_CONDITION and text_embedding is not None:", "\n", "#    c_code, mu, logvar = self.ca_net(text_embedding)", "\n", "#else:", "\n", "#    c_code, mu, logvar = z_code, None, None", "\n", "        ", "h_code1", "=", "self", ".", "h_net1", "(", "text_embedding", ")", "\n", "fake_img1", "=", "self", ".", "img_net1", "(", "h_code1", ")", "\n", "return", "fake_img1", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAE32.__init__": [[168, 283], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAE32", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoded", "=", "None", "\n", "\n", "# ENCODER", "\n", "\n", "# 64x64x64", "\n", "self", ".", "e_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 32x32x32", "\n", "self", ".", "e_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "# DECODER", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_up_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 256x128x128", "\n", "self", ".", "d_up_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 3x128x128", "\n", "self", ".", "d_up_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "2", ",", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAE32.forward": [[285, 305], ["image_models2.CAE32.e_conv_1", "image_models2.CAE32.e_conv_2", "image_models2.CAE32.e_conv_3", "image_models2.CAE32.decode", "image_models2.CAE32.e_block_1", "image_models2.CAE32.e_block_2", "image_models2.CAE32.e_block_3", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ec1", "=", "self", ".", "e_conv_1", "(", "x", ")", "\n", "ec2", "=", "self", ".", "e_conv_2", "(", "ec1", ")", "\n", "eblock1", "=", "self", ".", "e_block_1", "(", "ec2", ")", "+", "ec2", "\n", "eblock2", "=", "self", ".", "e_block_2", "(", "eblock1", ")", "+", "eblock1", "\n", "eblock3", "=", "self", ".", "e_block_3", "(", "eblock2", ")", "+", "eblock2", "\n", "ec3", "=", "self", ".", "e_conv_3", "(", "eblock3", ")", "# in [-1, 1] from tanh activation", "\n", "\n", "# stochastic binarization", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand", "=", "torch", ".", "rand", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "prob", "=", "(", "1", "+", "ec3", ")", "/", "2", "\n", "eps", "=", "torch", ".", "zeros", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "eps", "[", "rand", "<=", "prob", "]", "=", "(", "1", "-", "ec3", ")", "[", "rand", "<=", "prob", "]", "\n", "eps", "[", "rand", ">", "prob", "]", "=", "(", "-", "ec3", "-", "1", ")", "[", "rand", ">", "prob", "]", "\n", "\n", "# encoded tensor", "\n", "", "self", ".", "encoded", "=", "0.5", "*", "(", "ec3", "+", "eps", "+", "1", ")", "# (-1|1) -> (0|1)", "\n", "\n", "return", "self", ".", "decode", "(", "self", ".", "encoded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAE32.decode": [[306, 317], ["image_models2.CAE32.d_up_conv_1", "image_models2.CAE32.d_up_conv_2", "image_models2.CAE32.d_up_conv_3", "image_models2.CAE32.d_block_1", "image_models2.CAE32.d_block_2", "image_models2.CAE32.d_block_3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "encoded", ")", ":", "\n", "        ", "y", "=", "encoded", "*", "2.0", "-", "1", "# (0|1) -> (-1|1)", "\n", "\n", "uc1", "=", "self", ".", "d_up_conv_1", "(", "y", ")", "\n", "dblock1", "=", "self", ".", "d_block_1", "(", "uc1", ")", "+", "uc1", "\n", "dblock2", "=", "self", ".", "d_block_2", "(", "dblock1", ")", "+", "dblock1", "\n", "dblock3", "=", "self", ".", "d_block_3", "(", "dblock2", ")", "+", "dblock2", "\n", "uc2", "=", "self", ".", "d_up_conv_2", "(", "dblock3", ")", "\n", "dec", "=", "self", ".", "d_up_conv_3", "(", "uc2", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAE16.__init__": [[325, 441], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAE16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoded", "=", "None", "\n", "\n", "# ENCODER", "\n", "\n", "# 64x64x64", "\n", "self", ".", "e_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 16x16x16", "\n", "self", ".", "e_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "# DECODER", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_up_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 256x64x64", "\n", "self", ".", "d_up_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 3x128x128", "\n", "self", ".", "d_up_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAE16.forward": [[443, 463], ["image_models2.CAE16.e_conv_1", "image_models2.CAE16.e_conv_2", "image_models2.CAE16.e_conv_3", "image_models2.CAE16.decode", "image_models2.CAE16.e_block_1", "image_models2.CAE16.e_block_2", "image_models2.CAE16.e_block_3", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ec1", "=", "self", ".", "e_conv_1", "(", "x", ")", "\n", "ec2", "=", "self", ".", "e_conv_2", "(", "ec1", ")", "\n", "eblock1", "=", "self", ".", "e_block_1", "(", "ec2", ")", "+", "ec2", "\n", "eblock2", "=", "self", ".", "e_block_2", "(", "eblock1", ")", "+", "eblock1", "\n", "eblock3", "=", "self", ".", "e_block_3", "(", "eblock2", ")", "+", "eblock2", "\n", "ec3", "=", "self", ".", "e_conv_3", "(", "eblock3", ")", "# in [-1, 1] from tanh activation", "\n", "\n", "# stochastic binarization", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand", "=", "torch", ".", "rand", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "prob", "=", "(", "1", "+", "ec3", ")", "/", "2", "\n", "eps", "=", "torch", ".", "zeros", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "eps", "[", "rand", "<=", "prob", "]", "=", "(", "1", "-", "ec3", ")", "[", "rand", "<=", "prob", "]", "\n", "eps", "[", "rand", ">", "prob", "]", "=", "(", "-", "ec3", "-", "1", ")", "[", "rand", ">", "prob", "]", "\n", "\n", "# encoded tensor", "\n", "", "self", ".", "encoded", "=", "0.5", "*", "(", "ec3", "+", "eps", "+", "1", ")", "# (-1|1) -> (0|1)", "\n", "\n", "return", "self", ".", "decode", "(", "self", ".", "encoded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAE16.decode": [[464, 475], ["image_models2.CAE16.d_up_conv_1", "image_models2.CAE16.d_up_conv_2", "image_models2.CAE16.d_up_conv_3", "image_models2.CAE16.d_block_1", "image_models2.CAE16.d_block_2", "image_models2.CAE16.d_block_3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "encoded", ")", ":", "\n", "        ", "y", "=", "encoded", "*", "2.0", "-", "1", "# (0|1) -> (-1|1)", "\n", "\n", "uc1", "=", "self", ".", "d_up_conv_1", "(", "y", ")", "\n", "dblock1", "=", "self", ".", "d_block_1", "(", "uc1", ")", "+", "uc1", "\n", "dblock2", "=", "self", ".", "d_block_2", "(", "dblock1", ")", "+", "dblock1", "\n", "dblock3", "=", "self", ".", "d_block_3", "(", "dblock2", ")", "+", "dblock2", "\n", "uc2", "=", "self", ".", "d_up_conv_2", "(", "dblock3", ")", "\n", "dec", "=", "self", ".", "d_up_conv_3", "(", "uc2", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAE8.__init__": [[485, 611], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAE8", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoded", "=", "None", "\n", "\n", "# ENCODER", "\n", "\n", "# 64x64x64", "\n", "self", ".", "e_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x16x16", "\n", "self", ".", "e_pool_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x16x16", "\n", "self", ".", "e_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x16x16", "\n", "self", ".", "e_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 16x8x8", "\n", "self", ".", "e_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "# DECODER", "\n", "\n", "# 128x16x16", "\n", "self", ".", "d_up_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x16x16", "\n", "self", ".", "d_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_up_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "d_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 256x64x64", "\n", "self", ".", "d_up_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 3x128x128", "\n", "self", ".", "d_up_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAE8.forward": [[613, 635], ["image_models2.CAE8.e_conv_1", "image_models2.CAE8.e_conv_2", "image_models2.CAE8.e_block_1", "image_models2.CAE8.e_pool_1", "image_models2.CAE8.e_conv_3", "image_models2.CAE8.decode", "image_models2.CAE8.e_block_2", "image_models2.CAE8.e_block_3", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# ENCODE", "\n", "        ", "ec1", "=", "self", ".", "e_conv_1", "(", "x", ")", "\n", "ec2", "=", "self", ".", "e_conv_2", "(", "ec1", ")", "\n", "eblock1", "=", "self", ".", "e_block_1", "(", "ec2", ")", "\n", "eblock1", "=", "self", ".", "e_pool_1", "(", "ec2", "+", "eblock1", ")", "\n", "eblock2", "=", "self", ".", "e_block_2", "(", "eblock1", ")", "+", "eblock1", "\n", "eblock3", "=", "self", ".", "e_block_3", "(", "eblock2", ")", "+", "eblock2", "\n", "ec3", "=", "self", ".", "e_conv_3", "(", "eblock3", ")", "# in [-1, 1] from tanh activation", "\n", "\n", "# stochastic binarization", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand", "=", "torch", ".", "rand", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "prob", "=", "(", "1", "+", "ec3", ")", "/", "2", "\n", "eps", "=", "torch", ".", "zeros", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "eps", "[", "rand", "<=", "prob", "]", "=", "(", "1", "-", "ec3", ")", "[", "rand", "<=", "prob", "]", "\n", "eps", "[", "rand", ">", "prob", "]", "=", "(", "-", "ec3", "-", "1", ")", "[", "rand", ">", "prob", "]", "\n", "\n", "# encoded tensor", "\n", "", "self", ".", "encoded", "=", "0.5", "*", "(", "ec3", "+", "eps", "+", "1", ")", "# (-1|1) -> (0|1)", "\n", "\n", "return", "self", ".", "decode", "(", "self", ".", "encoded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAE8.decode": [[636, 648], ["image_models2.CAE8.d_up_conv_1", "image_models2.CAE8.d_up_1", "image_models2.CAE8.d_up_conv_2", "image_models2.CAE8.d_up_conv_3", "image_models2.CAE8.d_block_1", "image_models2.CAE8.d_block_2", "image_models2.CAE8.d_block_3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "enc", ")", ":", "\n", "        ", "y", "=", "enc", "*", "2.0", "-", "1", "# (0|1) -> (-1, 1)", "\n", "\n", "uc1", "=", "self", ".", "d_up_conv_1", "(", "y", ")", "\n", "dblock1", "=", "self", ".", "d_block_1", "(", "uc1", ")", "+", "uc1", "\n", "dup1", "=", "self", ".", "d_up_1", "(", "dblock1", ")", "\n", "dblock2", "=", "self", ".", "d_block_2", "(", "dup1", ")", "+", "dup1", "\n", "dblock3", "=", "self", ".", "d_block_3", "(", "dblock2", ")", "+", "dblock2", "\n", "uc2", "=", "self", ".", "d_up_conv_2", "(", "dblock3", ")", "\n", "dec", "=", "self", ".", "d_up_conv_3", "(", "uc2", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAEB.__init__": [[657, 783], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "image_models2.G_NET", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAEB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoded", "=", "None", "\n", "\n", "# ENCODER", "\n", "\n", "# 64x64x64", "\n", "self", ".", "e_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 32x32x32", "\n", "self", ".", "e_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "self", ".", "bottle_neck1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "32", "*", "32", ",", "32", "*", "32", "*", "16", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "self", ".", "bottle_neck2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "32", "*", "16", ",", "32", "*", "32", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "\n", "self", ".", "bottle_neck3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "32", "*", "4", ",", "indim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "reverse_bottle", "=", "G_NET", "(", ")", "\n", "# DECODER", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_up_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 256x128x128", "\n", "self", ".", "d_up_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 3x128x128", "\n", "self", ".", "d_up_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "2", ",", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAEB.forward": [[785, 806], ["image_models2.CAEB.e_conv_1", "image_models2.CAEB.e_conv_2", "image_models2.CAEB.e_conv_3", "image_models2.CAEB.bottle_func", "image_models2.CAEB.e_block_1", "image_models2.CAEB.e_block_2", "image_models2.CAEB.e_block_3", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAEBo.bottle_func"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ec1", "=", "self", ".", "e_conv_1", "(", "x", ")", "\n", "ec2", "=", "self", ".", "e_conv_2", "(", "ec1", ")", "\n", "eblock1", "=", "self", ".", "e_block_1", "(", "ec2", ")", "+", "ec2", "\n", "eblock2", "=", "self", ".", "e_block_2", "(", "eblock1", ")", "+", "eblock1", "\n", "eblock3", "=", "self", ".", "e_block_3", "(", "eblock2", ")", "+", "eblock2", "\n", "ec3", "=", "self", ".", "e_conv_3", "(", "eblock3", ")", "# in [-1, 1] from tanh activation", "\n", "\n", "# stochastic binarization", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand", "=", "torch", ".", "rand", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "prob", "=", "(", "1", "+", "ec3", ")", "/", "2", "\n", "eps", "=", "torch", ".", "zeros", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "eps", "[", "rand", "<=", "prob", "]", "=", "(", "1", "-", "ec3", ")", "[", "rand", "<=", "prob", "]", "\n", "eps", "[", "rand", ">", "prob", "]", "=", "(", "-", "ec3", "-", "1", ")", "[", "rand", ">", "prob", "]", "\n", "\n", "# encoded tensor", "\n", "", "self", ".", "encoded", "=", "0.5", "*", "(", "ec3", "+", "eps", "+", "1", ")", "# (-1|1) -> (0|1)", "\n", "\n", "#return self.decode(self.encoded)", "\n", "return", "self", ".", "bottle_func", "(", "self", ".", "encoded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAEB.bottle_func": [[807, 820], ["torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "image_models2.CAEB.bottle_neck1", "image_models2.CAEB.bottle_neck2", "image_models2.CAEB.bottle_neck3", "image_models2.CAEB.reverse_bottle", "image_models2.CAEB.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "bottle_func", "(", "self", ",", "encoded", ")", ":", "\n", "#print(\"encoded.shape\", encoded.shape)", "\n", "        ", "x", "=", "torch", ".", "flatten", "(", "encoded", ",", "1", ")", "\n", "#print(\"b1.shape\", x.shape)", "\n", "x", "=", "self", ".", "bottle_neck1", "(", "x", ")", "\n", "#print(\"b2.shape\", x.shape)", "\n", "x", "=", "self", ".", "bottle_neck2", "(", "x", ")", "\n", "#print(\"b3.shape\", x.shape)", "\n", "comp", "=", "self", ".", "bottle_neck3", "(", "x", ")", "\n", "#print(\"comp.shape\", comp.shape)", "\n", "x", "=", "self", ".", "reverse_bottle", "(", "comp", ")", "\n", "#print(\"x.shape\", x.shape)", "\n", "return", "self", ".", "decode", "(", "x", ")", ",", "comp", ",", "x", ",", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAEB.decode": [[821, 832], ["image_models2.CAEB.d_up_conv_1", "image_models2.CAEB.d_up_conv_2", "image_models2.CAEB.d_up_conv_3", "image_models2.CAEB.d_block_1", "image_models2.CAEB.d_block_2", "image_models2.CAEB.d_block_3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "encoded", ")", ":", "\n", "        ", "y", "=", "encoded", "*", "2.0", "-", "1", "# (0|1) -> (-1|1)", "\n", "\n", "uc1", "=", "self", ".", "d_up_conv_1", "(", "y", ")", "\n", "dblock1", "=", "self", ".", "d_block_1", "(", "uc1", ")", "+", "uc1", "\n", "dblock2", "=", "self", ".", "d_block_2", "(", "dblock1", ")", "+", "dblock1", "\n", "dblock3", "=", "self", ".", "d_block_3", "(", "dblock2", ")", "+", "dblock2", "\n", "uc2", "=", "self", ".", "d_up_conv_2", "(", "dblock3", ")", "\n", "dec", "=", "self", ".", "d_up_conv_3", "(", "uc2", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAEBo.__init__": [[840, 961], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "image_models2.G_NET1", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAEBo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoded", "=", "None", "\n", "\n", "# ENCODER", "\n", "\n", "# 64x64x64", "\n", "self", ".", "e_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "2", ",", "1", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x32x32", "\n", "self", ".", "e_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 32x32x32", "\n", "self", ".", "e_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "\n", "self", ".", "bottle_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "32", "*", "32", ",", "indim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "\n", "self", ".", "reverse_bottle", "=", "G_NET1", "(", ")", "\n", "# DECODER", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_up_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 128x64x64", "\n", "self", ".", "d_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# 256x128x128", "\n", "self", ".", "d_up_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "# 3x128x128", "\n", "self", ".", "d_up_conv_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "2", ",", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAEBo.forward": [[963, 984], ["image_models2.CAEBo.e_conv_1", "image_models2.CAEBo.e_conv_2", "image_models2.CAEBo.e_conv_3", "image_models2.CAEBo.bottle_func", "image_models2.CAEBo.e_block_1", "image_models2.CAEBo.e_block_2", "image_models2.CAEBo.e_block_3", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAEBo.bottle_func"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ec1", "=", "self", ".", "e_conv_1", "(", "x", ")", "\n", "ec2", "=", "self", ".", "e_conv_2", "(", "ec1", ")", "\n", "eblock1", "=", "self", ".", "e_block_1", "(", "ec2", ")", "+", "ec2", "\n", "eblock2", "=", "self", ".", "e_block_2", "(", "eblock1", ")", "+", "eblock1", "\n", "eblock3", "=", "self", ".", "e_block_3", "(", "eblock2", ")", "+", "eblock2", "\n", "ec3", "=", "self", ".", "e_conv_3", "(", "eblock3", ")", "# in [-1, 1] from tanh activation", "\n", "\n", "# stochastic binarization", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand", "=", "torch", ".", "rand", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "prob", "=", "(", "1", "+", "ec3", ")", "/", "2", "\n", "eps", "=", "torch", ".", "zeros", "(", "ec3", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "eps", "[", "rand", "<=", "prob", "]", "=", "(", "1", "-", "ec3", ")", "[", "rand", "<=", "prob", "]", "\n", "eps", "[", "rand", ">", "prob", "]", "=", "(", "-", "ec3", "-", "1", ")", "[", "rand", ">", "prob", "]", "\n", "\n", "# encoded tensor", "\n", "", "self", ".", "encoded", "=", "0.5", "*", "(", "ec3", "+", "eps", "+", "1", ")", "# (-1|1) -> (0|1)", "\n", "\n", "#return self.decode(self.encoded)", "\n", "return", "self", ".", "bottle_func", "(", "self", ".", "encoded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAEBo.bottle_func": [[985, 996], ["torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "image_models2.CAEBo.bottle_neck", "image_models2.CAEBo.reverse_bottle", "image_models2.CAEBo.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "bottle_func", "(", "self", ",", "encoded", ")", ":", "\n", "#print(\"encoded.shape\", encoded.shape)", "\n", "\n", "#print(\"avg.shape\", x.shape)", "\n", "        ", "x", "=", "torch", ".", "flatten", "(", "encoded", ",", "1", ")", "\n", "#print(\"b1.shape\", x.shape)", "\n", "comp", "=", "self", ".", "bottle_neck", "(", "x", ")", "\n", "#print(\"comp.shape\", comp.shape)", "\n", "x", "=", "self", ".", "reverse_bottle", "(", "comp", ")", "\n", "#print(\"x.shape\", x.shape)", "\n", "return", "self", ".", "decode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.CAEBo.decode": [[997, 1008], ["image_models2.CAEBo.d_up_conv_1", "image_models2.CAEBo.d_up_conv_2", "image_models2.CAEBo.d_up_conv_3", "image_models2.CAEBo.d_block_1", "image_models2.CAEBo.d_block_2", "image_models2.CAEBo.d_block_3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "encoded", ")", ":", "\n", "        ", "y", "=", "encoded", "*", "2.0", "-", "1", "# (0|1) -> (-1|1)", "\n", "\n", "uc1", "=", "self", ".", "d_up_conv_1", "(", "y", ")", "\n", "dblock1", "=", "self", ".", "d_block_1", "(", "uc1", ")", "+", "uc1", "\n", "dblock2", "=", "self", ".", "d_block_2", "(", "dblock1", ")", "+", "dblock1", "\n", "dblock3", "=", "self", ".", "d_block_3", "(", "dblock2", ")", "+", "dblock2", "\n", "uc2", "=", "self", ".", "d_up_conv_2", "(", "dblock3", ")", "\n", "dec", "=", "self", ".", "d_up_conv_3", "(", "uc2", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.Interpolate.__init__": [[1019, 1024], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "mode", ")", ":", "\n", "        ", "super", "(", "Interpolate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "interp", "=", "nn", ".", "functional", ".", "interpolate", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.Interpolate.forward": [[1025, 1028], ["image_models2.Interpolate.interp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "interp", "(", "x", ",", "size", "=", "self", ".", "size", ",", "mode", "=", "self", ".", "mode", ",", "align_corners", "=", "False", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.comrec.__init__": [[1031, 1055], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "image_models2.Interpolate", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "comrec", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "# Decoder", "\n", "#TODO : try ConvTranspose2d", "\n", "self", ".", "interpolate", "=", "Interpolate", "(", "size", "=", "HEIGHT", ",", "mode", "=", "'bilinear'", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "deconv_n", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_n", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "CHANNELS", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.comrec.encode": [[1056, 1061], ["image_models2.comrec.relu", "image_models2.comrec.relu", "image_models2.comrec.bn1", "image_models2.comrec.conv3", "image_models2.comrec.conv1", "image_models2.comrec.conv2"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "return", "self", ".", "conv3", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.comrec.reparameterize": [[1063, 1065], ["None"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.comrec.decode": [[1066, 1077], ["image_models2.comrec.interpolate", "image_models2.comrec.relu", "image_models2.comrec.relu", "image_models2.comrec.bn2", "range", "image_models2.comrec.deconv3", "image_models2.comrec.deconv1", "image_models2.comrec.deconv2", "image_models2.comrec.relu", "image_models2.comrec.bn_n", "image_models2.comrec.deconv_n"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "    ", "upscaled_image", "=", "self", ".", "interpolate", "(", "z", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv1", "(", "upscaled_image", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "      ", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv_n", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn_n", "(", "out", ")", "\n", "", "out", "=", "self", ".", "deconv3", "(", "out", ")", "\n", "final", "=", "upscaled_image", "+", "out", "\n", "return", "final", ",", "out", ",", "upscaled_image", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.comrec.forward": [[1079, 1083], ["image_models2.comrec.encode", "image_models2.comrec.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "com_img", "=", "self", ".", "encode", "(", "x", ")", "\n", "final", ",", "out", ",", "upscaled_image", "=", "self", ".", "decode", "(", "com_img", ")", "\n", "return", "final", ",", "out", ",", "upscaled_image", ",", "com_img", ",", "x", "\n", "########################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.comrecCNN.__init__": [[1085, 1123], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "image_models2.Interpolate", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "comrecCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "#CHANNEL X H X W ", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "#64 X H X W ", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "#64 X H/2 X W/2 ", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "#64 X H/2 X W/2 ", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "#64 X H/4 X W/4 ", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "64", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "#CHANNEL X H/4 X W/4 ", "\n", "\n", "# Decoder", "\n", "#TODO : try ConvTranspose2d", "\n", "#CHANNEL X H/4 X W/4 ", "\n", "self", ".", "deconv0", "=", "nn", ".", "ConvTranspose2d", "(", "CHANNELS", ",", "CHANNELS", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "#CHANNEL X H/2 X W/2 ", "\n", "self", ".", "interpolate", "=", "Interpolate", "(", "size", "=", "HEIGHT", ",", "mode", "=", "'bilinear'", ")", "\n", "#CHANNEL X H X W ", "\n", "self", ".", "deconv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "#64 X H X W ", "\n", "self", ".", "deconv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "deconv_n", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_n", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "CHANNELS", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "#CHANNEL X H X W ", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.comrecCNN.encode": [[1124, 1131], ["image_models2.comrecCNN.relu", "image_models2.comrecCNN.relu", "image_models2.comrecCNN.bn1", "image_models2.comrecCNN.relu", "image_models2.comrecCNN.bn2", "image_models2.comrecCNN.conv4", "image_models2.comrecCNN.conv1", "image_models2.comrecCNN.conv2", "image_models2.comrecCNN.conv3"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "return", "self", ".", "conv4", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.comrecCNN.reparameterize": [[1133, 1135], ["None"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.comrecCNN.decode": [[1136, 1148], ["image_models2.comrecCNN.deconv0", "image_models2.comrecCNN.interpolate", "image_models2.comrecCNN.relu", "image_models2.comrecCNN.relu", "image_models2.comrecCNN.bn2", "range", "image_models2.comrecCNN.deconv3", "image_models2.comrecCNN.deconv1", "image_models2.comrecCNN.deconv2", "image_models2.comrecCNN.relu", "image_models2.comrecCNN.bn_n", "image_models2.comrecCNN.deconv_n"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "    ", "z", "=", "self", ".", "deconv0", "(", "z", ")", "\n", "upscaled_image", "=", "self", ".", "interpolate", "(", "z", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv1", "(", "upscaled_image", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "      ", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv_n", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn_n", "(", "out", ")", "\n", "", "out", "=", "self", ".", "deconv3", "(", "out", ")", "\n", "final", "=", "upscaled_image", "+", "out", "\n", "return", "final", ",", "out", ",", "upscaled_image", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.comrecCNN.forward": [[1150, 1154], ["image_models2.comrecCNN.encode", "image_models2.comrecCNN.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "com_img", "=", "self", ".", "encode", "(", "x", ")", "\n", "final", ",", "out", ",", "upscaled_image", "=", "self", ".", "decode", "(", "com_img", ")", "\n", "return", "final", ",", "out", ",", "upscaled_image", ",", "com_img", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.Identity.__init__": [[1157, 1159], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.Identity.forward": [[1160, 1162], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "#################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.ImageEncoder.__init__": [[1171, 1177], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "device", ",", "vae", "=", "False", ")", ":", "\n", "        ", "super", "(", "ImageEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "vae", "=", "vae", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.ImageEncoder.forward": [[1182, 1204], ["image_models2.ImageEncoder.model", "torchvision.models.utils.sample_z", "torchvision.models.utils.sample_z.size", "torchvision.models.utils.sample_z.size"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.sample_z"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "enc", "=", "self", ".", "model", "(", "x", ")", "\n", "#print('encoder size:', enc.size())", "\n", "\n", "if", "self", ".", "vae", ":", "\n", "# z = self.vae_transform(enc)", "\n", "            ", "mu", "=", "enc", "[", ":", ",", ":", "enc", ".", "size", "(", ")", "[", "1", "]", "//", "2", "]", "\n", "#print('mu size:', mu.size())", "\n", "log_var", "=", "enc", "[", ":", ",", "enc", ".", "size", "(", ")", "[", "1", "]", "//", "2", ":", "]", "\n", "#print('log size:', log_var.size())", "\n", "\n", "if", "self", ".", "training", ":", "\n", "#print('training mode; taking samples')", "\n", "                ", "enc", "=", "sample_z", "(", "mu", ",", "log_var", ",", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "#print('testing mode; taking mean')", "\n", "                ", "enc", "=", "mu", "\n", "", "", "else", ":", "\n", "            ", "mu", ",", "log_var", "=", "None", ",", "None", "\n", "#print('new encode size:', enc.size())", "\n", "\n", "", "return", "enc", ",", "mu", ",", "log_var", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.conv3x3": [[26, 30], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "#only changes number of channels", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.upBlock": [[32, 40], ["torch.Sequential", "torch.Upsample", "image_models2.conv3x3", "torch.BatchNorm2d", "image_models2.GLU"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["", "def", "upBlock", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "conv3x3", "(", "in_planes", ",", "out_planes", "*", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "*", "2", ")", ",", "\n", "GLU", "(", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.set_parameter_requires_grad": [[1164, 1168], ["model.parameters"], "function", ["None"], ["", "", "def", "set_parameter_requires_grad", "(", "model", ",", "feature_extracting", ")", ":", "\n", "    ", "if", "feature_extracting", ":", "\n", "        ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models2.initialize_torchvision_model": [[1206, 1336], ["torchvision.models.resnet18", "image_models2.set_parameter_requires_grad", "image_models2.Identity", "torch.Linear", "torch.Linear", "image_models2.comrecCNN", "image_models2.set_parameter_requires_grad", "image_models2.comrec", "image_models2.set_parameter_requires_grad", "image_models2.CAE8", "image_models2.set_parameter_requires_grad", "image_models2.CAE16", "image_models2.set_parameter_requires_grad", "image_models2.CAE32", "image_models2.set_parameter_requires_grad", "image_models2.CAEBo", "image_models2.set_parameter_requires_grad", "torchvision.models.resnet50", "image_models2.set_parameter_requires_grad", "torch.Linear", "torch.Linear", "torchvision.models.alexnet", "image_models2.set_parameter_requires_grad", "torch.Linear", "torchvision.models.vgg11_bn", "image_models2.set_parameter_requires_grad", "torch.Linear", "torchvision.models.squeezenet1_0", "image_models2.set_parameter_requires_grad", "torch.Conv2d", "torchvision.models.densenet121", "image_models2.set_parameter_requires_grad", "torch.Linear", "torchvision.models.inception_v3", "image_models2.set_parameter_requires_grad", "torch.Linear", "torch.Linear", "print", "exit"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad"], ["", "", "def", "initialize_torchvision_model", "(", "model_name", ",", "output_dim", ",", "feature_extract", ",", "device", ",", "use_pretrained", "=", "True", ",", "vae", "=", "False", ")", ":", "\n", "# Initialize these variables which will be set in this if statement. Each of these", "\n", "#   variables is model specific.", "\n", "    ", "model_ft", "=", "None", "\n", "input_size", "=", "0", "\n", "\n", "if", "model_name", "==", "\"resnet18\"", ":", "\n", "        ", "\"\"\" Resnet18\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "resnet18", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "model_ft", ".", "avgpool", "=", "Identity", "(", ")", "##############average pool replaced by identity####", "\n", "#num_ftrs = model_ft.fc.in_features", "\n", "num_ftrs", "=", "model_ft", ".", "fc", ".", "in_features", "*", "7", "*", "7", "# as average pooling is replaced by Identity, infeatures are multipleid with kernel size", "\n", "if", "vae", ":", "#vae changes: reparameterization at vae size down samples by 2 so we multiply by 2 to maintain consistency in the pipeline", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", "*", "2", ")", "#vae changes", "\n", "", "else", ":", "#vae chages", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "#vae changes", "\n", "#model_ft.fc = nn.Linear(num_ftrs, output_dim) #vae changes", "\n", "", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"comrecCNN\"", ":", "\n", "        ", "\"\"\" comrecCNN\n        \"\"\"", "\n", "model_ft", "=", "comrecCNN", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"comrec\"", ":", "\n", "        ", "\"\"\" comrec\n        \"\"\"", "\n", "model_ft", "=", "comrec", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"CAE8\"", ":", "\n", "        ", "\"\"\" CAE8\n        \"\"\"", "\n", "model_ft", "=", "CAE8", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"CAE16\"", ":", "\n", "        ", "\"\"\" CAE16\n        \"\"\"", "\n", "model_ft", "=", "CAE16", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"CAE32\"", ":", "\n", "        ", "\"\"\" CAE32\n        \"\"\"", "\n", "model_ft", "=", "CAE32", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "", "elif", "model_name", "==", "\"CAEBo\"", ":", "\n", "        ", "\"\"\" CAEBo\n        \"\"\"", "\n", "model_ft", "=", "CAEBo", "(", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"resnet50\"", ":", "\n", "        ", "\"\"\" Resnet50\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "resnet50", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "fc", ".", "in_features", "\n", "if", "vae", ":", "#vae changes: reparameterization at vae size down samples by 2 so we multiply by 2 to maintain consistency in the pipeline", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", "*", "2", ")", "#vae changes", "\n", "", "else", ":", "#vae chages", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "#vae changes", "\n", "#model_ft.fc = nn.Linear(num_ftrs, output_dim) #vae changes", "\n", "", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"alexnet\"", ":", "\n", "        ", "\"\"\" Alexnet\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "alexnet", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", "[", "6", "]", ".", "in_features", "\n", "model_ft", ".", "classifier", "[", "6", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"vgg\"", ":", "\n", "        ", "\"\"\" VGG11_bn\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "vgg11_bn", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", "[", "6", "]", ".", "in_features", "\n", "model_ft", ".", "classifier", "[", "6", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"squeezenet\"", ":", "\n", "        ", "\"\"\" Squeezenet\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "squeezenet1_0", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "model_ft", ".", "classifier", "[", "1", "]", "=", "nn", ".", "Conv2d", "(", "512", ",", "output_dim", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "model_ft", ".", "num_classes", "=", "output_dim", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"densenet\"", ":", "\n", "        ", "\"\"\" Densenet\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "densenet121", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", ".", "in_features", "\n", "model_ft", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"inception\"", ":", "\n", "        ", "\"\"\" Inception v3\n        Be careful, expects (299,299) sized images and has auxiliary output\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "inception_v3", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "# Handle the auxilary net", "\n", "num_ftrs", "=", "model_ft", ".", "AuxLogits", ".", "fc", ".", "in_features", "\n", "model_ft", ".", "AuxLogits", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "# Handle the primary net", "\n", "num_ftrs", "=", "model_ft", ".", "fc", ".", "in_features", "\n", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "299", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Invalid model name, exiting...\"", ")", "\n", "exit", "(", ")", "\n", "\n", "\n", "#model_ft = ImageEncoder(model_ft, vae=vae, device=device)", "\n", "\n", "", "return", "model_ft", ",", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models.ImageEncoder.__init__": [[23, 29], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "device", ",", "vae", "=", "False", ")", ":", "\n", "        ", "super", "(", "ImageEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "vae", "=", "vae", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models.ImageEncoder.forward": [[34, 56], ["image_models.ImageEncoder.model", "torchvision.models.utils.sample_z", "torchvision.models.utils.sample_z.size", "torchvision.models.utils.sample_z.size"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.sample_z"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "enc", "=", "self", ".", "model", "(", "x", ")", "\n", "#print('encoder size:', enc.size())", "\n", "\n", "if", "self", ".", "vae", ":", "\n", "# z = self.vae_transform(enc)", "\n", "            ", "mu", "=", "enc", "[", ":", ",", ":", "enc", ".", "size", "(", ")", "[", "1", "]", "//", "2", "]", "\n", "#print('mu size:', mu.size())", "\n", "log_var", "=", "enc", "[", ":", ",", "enc", ".", "size", "(", ")", "[", "1", "]", "//", "2", ":", "]", "\n", "#print('log size:', log_var.size())", "\n", "\n", "if", "self", ".", "training", ":", "\n", "#print('training mode; taking samples')", "\n", "                ", "enc", "=", "sample_z", "(", "mu", ",", "log_var", ",", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "#print('testing mode; taking mean')", "\n", "                ", "enc", "=", "mu", "\n", "", "", "else", ":", "\n", "            ", "mu", ",", "log_var", "=", "None", ",", "None", "\n", "#print('new encode size:', enc.size())", "\n", "\n", "", "return", "enc", ",", "mu", ",", "log_var", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models.set_parameter_requires_grad": [[16, 20], ["model.parameters"], "function", ["None"], ["def", "set_parameter_requires_grad", "(", "model", ",", "feature_extracting", ")", ":", "\n", "    ", "if", "feature_extracting", ":", "\n", "        ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models.initialize_torchvision_model": [[58, 148], ["image_models.ImageEncoder", "torchvision.models.resnet18", "image_models.set_parameter_requires_grad", "torch.Linear", "torch.Linear", "torchvision.models.resnet50", "image_models.set_parameter_requires_grad", "torch.Linear", "torch.Linear", "torchvision.models.alexnet", "image_models.set_parameter_requires_grad", "torch.Linear", "torchvision.models.vgg11_bn", "image_models.set_parameter_requires_grad", "torch.Linear", "torchvision.models.squeezenet1_0", "image_models.set_parameter_requires_grad", "torch.Conv2d", "torchvision.models.densenet121", "image_models.set_parameter_requires_grad", "torch.Linear", "torchvision.models.inception_v3", "image_models.set_parameter_requires_grad", "torch.Linear", "torch.Linear", "print", "exit"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad"], ["", "", "def", "initialize_torchvision_model", "(", "model_name", ",", "output_dim", ",", "feature_extract", ",", "device", ",", "use_pretrained", "=", "True", ",", "vae", "=", "False", ")", ":", "\n", "# Initialize these variables which will be set in this if statement. Each of these", "\n", "#   variables is model specific.", "\n", "    ", "model_ft", "=", "None", "\n", "input_size", "=", "0", "\n", "\n", "if", "model_name", "==", "\"resnet18\"", ":", "\n", "        ", "\"\"\" Resnet18\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "resnet18", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "fc", ".", "in_features", "\n", "if", "vae", ":", "#vae changes: reparameterization at vae size down samples by 2 so we multiply by 2 to maintain consistency in the pipeline", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", "*", "2", ")", "#vae changes", "\n", "", "else", ":", "#vae chages", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "#vae changes", "\n", "#model_ft.fc = nn.Linear(num_ftrs, output_dim) #vae changes", "\n", "", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"resnet50\"", ":", "\n", "        ", "\"\"\" Resnet50\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "resnet50", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "fc", ".", "in_features", "\n", "if", "vae", ":", "#vae changes: reparameterization at vae size down samples by 2 so we multiply by 2 to maintain consistency in the pipeline", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", "*", "2", ")", "#vae changes", "\n", "", "else", ":", "#vae chages", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "#vae changes", "\n", "#model_ft.fc = nn.Linear(num_ftrs, output_dim) #vae changes", "\n", "", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"alexnet\"", ":", "\n", "        ", "\"\"\" Alexnet\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "alexnet", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", "[", "6", "]", ".", "in_features", "\n", "model_ft", ".", "classifier", "[", "6", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"vgg\"", ":", "\n", "        ", "\"\"\" VGG11_bn\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "vgg11_bn", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", "[", "6", "]", ".", "in_features", "\n", "model_ft", ".", "classifier", "[", "6", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"squeezenet\"", ":", "\n", "        ", "\"\"\" Squeezenet\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "squeezenet1_0", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "model_ft", ".", "classifier", "[", "1", "]", "=", "nn", ".", "Conv2d", "(", "512", ",", "output_dim", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "model_ft", ".", "num_classes", "=", "output_dim", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"densenet\"", ":", "\n", "        ", "\"\"\" Densenet\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "densenet121", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", ".", "in_features", "\n", "model_ft", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"inception\"", ":", "\n", "        ", "\"\"\" Inception v3\n        Be careful, expects (299,299) sized images and has auxiliary output\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "inception_v3", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "# Handle the auxilary net", "\n", "num_ftrs", "=", "model_ft", ".", "AuxLogits", ".", "fc", ".", "in_features", "\n", "model_ft", ".", "AuxLogits", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "# Handle the primary net", "\n", "num_ftrs", "=", "model_ft", ".", "fc", ".", "in_features", "\n", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "299", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Invalid model name, exiting...\"", ")", "\n", "exit", "(", ")", "\n", "\n", "\n", "", "model_ft", "=", "ImageEncoder", "(", "model_ft", ",", "vae", "=", "vae", ",", "device", "=", "device", ")", "\n", "\n", "return", "model_ft", ",", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.Identity.__init__": [[17, 19], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.Identity.forward": [[20, 22], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "#################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.ImageEncoder.__init__": [[31, 37], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "device", ",", "vae", "=", "False", ")", ":", "\n", "        ", "super", "(", "ImageEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "vae", "=", "vae", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.ImageEncoder.forward": [[42, 64], ["image_models1.ImageEncoder.model", "torchvision.models.utils.sample_z", "torchvision.models.utils.sample_z.size", "torchvision.models.utils.sample_z.size"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.utils1.sample_z"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "enc", "=", "self", ".", "model", "(", "x", ")", "\n", "#print('encoder size:', enc.size())", "\n", "\n", "if", "self", ".", "vae", ":", "\n", "# z = self.vae_transform(enc)", "\n", "            ", "mu", "=", "enc", "[", ":", ",", ":", "enc", ".", "size", "(", ")", "[", "1", "]", "//", "2", "]", "\n", "#print('mu size:', mu.size())", "\n", "log_var", "=", "enc", "[", ":", ",", "enc", ".", "size", "(", ")", "[", "1", "]", "//", "2", ":", "]", "\n", "#print('log size:', log_var.size())", "\n", "\n", "if", "self", ".", "training", ":", "\n", "#print('training mode; taking samples')", "\n", "                ", "enc", "=", "sample_z", "(", "mu", ",", "log_var", ",", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "#print('testing mode; taking mean')", "\n", "                ", "enc", "=", "mu", "\n", "", "", "else", ":", "\n", "            ", "mu", ",", "log_var", "=", "None", ",", "None", "\n", "#print('new encode size:', enc.size())", "\n", "\n", "", "return", "enc", ",", "mu", ",", "log_var", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad": [[24, 28], ["model.parameters"], "function", ["None"], ["", "", "def", "set_parameter_requires_grad", "(", "model", ",", "feature_extracting", ")", ":", "\n", "    ", "if", "feature_extracting", ":", "\n", "        ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.initialize_torchvision_model": [[66, 158], ["image_models1.ImageEncoder", "torchvision.models.resnet18", "image_models1.set_parameter_requires_grad", "image_models1.Identity", "torch.Linear", "torch.Linear", "torchvision.models.resnet152", "image_models1.set_parameter_requires_grad", "torch.Linear", "torch.Linear", "torchvision.models.alexnet", "image_models1.set_parameter_requires_grad", "torch.Linear", "torchvision.models.vgg11_bn", "image_models1.set_parameter_requires_grad", "torch.Linear", "torchvision.models.squeezenet1_0", "image_models1.set_parameter_requires_grad", "torch.Conv2d", "torchvision.models.densenet121", "image_models1.set_parameter_requires_grad", "torch.Linear", "torchvision.models.inception_v3", "image_models1.set_parameter_requires_grad", "torch.Linear", "torch.Linear", "print", "exit"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.set_parameter_requires_grad"], ["", "", "def", "initialize_torchvision_model", "(", "model_name", ",", "output_dim", ",", "feature_extract", ",", "device", ",", "use_pretrained", "=", "True", ",", "vae", "=", "False", ")", ":", "\n", "# Initialize these variables which will be set in this if statement. Each of these", "\n", "#   variables is model specific.", "\n", "    ", "model_ft", "=", "None", "\n", "input_size", "=", "0", "\n", "\n", "if", "model_name", "==", "\"resnet18\"", ":", "\n", "        ", "\"\"\" Resnet18\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "resnet18", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "model_ft", ".", "avgpool", "=", "Identity", "(", ")", "##############average pool replaced by identity####", "\n", "#num_ftrs = model_ft.fc.in_features", "\n", "num_ftrs", "=", "model_ft", ".", "fc", ".", "in_features", "*", "7", "*", "7", "# as average pooling is replaced by Identity, infeatures are multipleid with kernel size", "\n", "if", "vae", ":", "#vae changes: reparameterization at vae size down samples by 2 so we multiply by 2 to maintain consistency in the pipeline", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", "*", "2", ")", "#vae changes", "\n", "", "else", ":", "#vae chages", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "#vae changes", "\n", "#model_ft.fc = nn.Linear(num_ftrs, output_dim) #vae changes", "\n", "", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"resnet152\"", ":", "\n", "        ", "\"\"\" Resnet152\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "resnet152", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "fc", ".", "in_features", "\n", "if", "vae", ":", "#vae changes: reparameterization at vae size down samples by 2 so we multiply by 2 to maintain consistency in the pipeline", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", "*", "2", ")", "#vae changes", "\n", "", "else", ":", "#vae chages", "\n", "            ", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "#vae changes", "\n", "#model_ft.fc = nn.Linear(num_ftrs, output_dim) #vae changes", "\n", "", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"alexnet\"", ":", "\n", "        ", "\"\"\" Alexnet\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "alexnet", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", "[", "6", "]", ".", "in_features", "\n", "model_ft", ".", "classifier", "[", "6", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"vgg\"", ":", "\n", "        ", "\"\"\" VGG11_bn\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "vgg11_bn", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", "[", "6", "]", ".", "in_features", "\n", "model_ft", ".", "classifier", "[", "6", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"squeezenet\"", ":", "\n", "        ", "\"\"\" Squeezenet\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "squeezenet1_0", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "model_ft", ".", "classifier", "[", "1", "]", "=", "nn", ".", "Conv2d", "(", "512", ",", "output_dim", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "model_ft", ".", "num_classes", "=", "output_dim", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"densenet\"", ":", "\n", "        ", "\"\"\" Densenet\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "densenet121", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", ".", "in_features", "\n", "model_ft", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"inception\"", ":", "\n", "        ", "\"\"\" Inception v3\n        Be careful, expects (299,299) sized images and has auxiliary output\n        \"\"\"", "\n", "model_ft", "=", "models", ".", "inception_v3", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "# Handle the auxilary net", "\n", "num_ftrs", "=", "model_ft", ".", "AuxLogits", ".", "fc", ".", "in_features", "\n", "model_ft", ".", "AuxLogits", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "# Handle the primary net", "\n", "num_ftrs", "=", "model_ft", ".", "fc", ".", "in_features", "\n", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "output_dim", ")", "\n", "input_size", "=", "299", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Invalid model name, exiting...\"", ")", "\n", "exit", "(", ")", "\n", "\n", "\n", "", "model_ft", "=", "ImageEncoder", "(", "model_ft", ",", "vae", "=", "vae", ",", "device", "=", "device", ")", "\n", "\n", "return", "model_ft", ",", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.__init__": [[16, 76], ["torch.nn.Module.__init__", "self_supervised_models.CycleGAN.CycleGAN.vocab.vocab_size", "self_supervised_models.CycleGAN.CycleGAN.vocab.sos_pos", "self_supervised_models.CycleGAN.CycleGAN.vocab.eos_pos", "self_supervised_models.CycleGAN.CycleGAN.vocab.pad_pos", "models.image_models.initialize_torchvision_model", "models.stack_gan2.model.G_NET", "models.text_models.RNNText", "models.adversarial_models.Discriminator", "models.adversarial_models.Discriminator", "models.adversarial_models.D_NET64", "torch.nn.modules.padding.ConstantPad2d"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.vocab_size", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.sos_pos", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.eos_pos", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.data.vocab.BaseVocabBuilder.pad_pos", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.image_models1.initialize_torchvision_model"], ["    ", "def", "__init__", "(", "self", ",", "vocab", ",", "cfg", ",", "device", ")", ":", "\n", "        ", "super", "(", "CycleGAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "vocab_size", "=", "self", ".", "vocab", ".", "vocab_size", "(", ")", "\n", "self", ".", "sos", "=", "self", ".", "vocab", ".", "sos_pos", "(", ")", "\n", "self", ".", "eos", "=", "self", ".", "vocab", ".", "eos_pos", "(", ")", "\n", "self", ".", "pad", "=", "self", ".", "vocab", ".", "pad_pos", "(", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n", "if", "cfg", ".", "IMAGE", ".", "VAE", ":", "\n", "            ", "image_multiplier", "=", "2", "\n", "", "else", ":", "\n", "            ", "image_multiplier", "=", "1", "\n", "\n", "", "self", ".", "cfg", "=", "cfg", "\n", "\n", "\n", "self", ".", "image_encoder", ",", "self", ".", "image_input_size", "=", "initialize_torchvision_model", "(", "cfg", ".", "IMAGE", ".", "ENCODER_NAME", ",", "\n", "cfg", ".", "IMAGE", ".", "DIMENSION", "*", "image_multiplier", ",", "\n", "cfg", ".", "IMAGE", ".", "FIX_ENCODER", ",", "\n", "use_pretrained", "=", "cfg", ".", "IMAGE", ".", "PRETRAINED_ENCODER", ",", "\n", "vae", "=", "cfg", ".", "IMAGE", ".", "VAE", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "image_decoder", "=", "G_NET", "(", ")", "\n", "# self.image_decoder = SimpleImageDecoder(cfg.IMAGE.DIMENSION)", "\n", "\n", "self", ".", "text_encoder_decoder", "=", "RNNText", "(", "emb_dim", "=", "cfg", ".", "TEXT", ".", "EMBEDDING_DIM", ",", "\n", "vocab_size", "=", "self", ".", "vocab_size", ",", "\n", "hid_dim", "=", "cfg", ".", "TEXT", ".", "DIMENSION", ",", "\n", "n_layers", "=", "cfg", ".", "TEXT", ".", "N_LAYERS", ",", "\n", "dropout", "=", "cfg", ".", "TEXT", ".", "DROPOUT", ",", "\n", "vae", "=", "cfg", ".", "TEXT", ".", "VAE", ",", "\n", "sos", "=", "self", ".", "sos", ",", "\n", "eos", "=", "self", ".", "eos", ",", "\n", "device", "=", "device", ")", "\n", "\n", "self", ".", "adv_text", "=", "Discriminator", "(", "emb_dim", "=", "cfg", ".", "TEXT", ".", "DIMENSION", ",", "\n", "dis_layers", "=", "cfg", ".", "TEXT", ".", "ADV", ".", "LAYERS", ",", "\n", "dis_hid_dim", "=", "cfg", ".", "TEXT", ".", "ADV", ".", "DIM", ",", "\n", "dis_dropout", "=", "cfg", ".", "TEXT", ".", "ADV", ".", "DROPOUT", ",", "\n", "dis_input_dropout", "=", "cfg", ".", "TEXT", ".", "ADV", ".", "INPUT_DROPOUT", ",", "\n", "noise", "=", "cfg", ".", "TEXT", ".", "ADV", ".", "NOISE", ",", "\n", "device", "=", "device", "\n", ")", "\n", "\n", "self", ".", "adv_image_enc", "=", "Discriminator", "(", "emb_dim", "=", "cfg", ".", "IMAGE", ".", "DIMENSION", ",", "\n", "dis_layers", "=", "cfg", ".", "IMAGE", ".", "ADV", ".", "LAYERS", ",", "\n", "dis_hid_dim", "=", "cfg", ".", "IMAGE", ".", "ADV", ".", "DIM", ",", "\n", "dis_dropout", "=", "cfg", ".", "IMAGE", ".", "ADV", ".", "DROPOUT", ",", "\n", "dis_input_dropout", "=", "cfg", ".", "IMAGE", ".", "ADV", ".", "INPUT_DROPOUT", ",", "\n", "noise", "=", "cfg", ".", "IMAGE", ".", "ADV", ".", "NOISE", ",", "\n", "device", "=", "device", ")", "\n", "\n", "self", ".", "adv_image", "=", "D_NET64", "(", "df_dim", "=", "cfg", ".", "GAN", ".", "DF_DIM", ",", "\n", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", ",", "\n", "conditional", "=", "cfg", ".", "GAN", ".", "B_CONDITION", ")", "\n", "\n", "self", ".", "pad", "=", "padding", ".", "ConstantPad2d", "(", "80", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.encode_image": [[78, 96], ["self_supervised_models.CycleGAN.CycleGAN.image_encoder"], "methods", ["None"], ["", "def", "encode_image", "(", "self", ",", "x", ")", ":", "\n", "\n", "# enc = self.image_encoder(x)", "\n", "#", "\n", "# if self.cfg.IMAGE.VAE:", "\n", "#     z = self.vae_transform(enc)", "\n", "#     mu = z[:,:enc.size[1]//2]", "\n", "#     log_var = z[:,enc.size[1]//2:]", "\n", "#", "\n", "#     if self.training:", "\n", "#         enc = sample_z(mu, log_var)", "\n", "#     else:", "\n", "#         enc = mu", "\n", "# else:", "\n", "#     mu, log_var = None, None", "\n", "#", "\n", "# return enc, mu, log_var", "\n", "        ", "return", "self", ".", "image_encoder", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.encode_text": [[97, 99], ["self_supervised_models.CycleGAN.CycleGAN.text_encoder_decoder"], "methods", ["None"], ["", "def", "encode_text", "(", "self", ",", "batch_positions", ",", "text_length", ")", ":", "\n", "        ", "return", "self", ".", "text_encoder_decoder", "(", "pass_type", "=", "'encode'", ",", "batch_positions", "=", "batch_positions", ",", "text_length", "=", "text_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.decode_image": [[100, 102], ["self_supervised_models.CycleGAN.CycleGAN.image_decoder"], "methods", ["None"], ["", "def", "decode_image", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "image_decoder", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.decode_text": [[103, 116], ["self_supervised_models.CycleGAN.CycleGAN.text_encoder_decoder", "torch.LongTensor().repeat", "len", "torch.LongTensor"], "methods", ["None"], ["", "def", "decode_text", "(", "self", ",", "encoding", ",", "batch_positions", "=", "None", ",", "text_length", "=", "None", ",", "batch_size", "=", "None", ",", "teacher_forcing_prob", "=", "0.0", ")", ":", "\n", "\n", "        ", "if", "text_length", "is", "None", ":", "\n", "            ", "text_length", "=", "torch", ".", "LongTensor", "(", "[", "30", "]", ")", ".", "repeat", "(", "len", "(", "encoding", ")", ")", "\n", "\n", "", "encoding", ",", "logits", ",", "indices", ",", "mu_text", ",", "log_var_text", "=", "self", ".", "text_encoder_decoder", "(", "pass_type", "=", "'generate'", ",", "\n", "batch_positions", "=", "batch_positions", ",", "\n", "hidden", "=", "encoding", ",", "\n", "teacher_forcing_prob", "=", "teacher_forcing_prob", ",", "\n", "text_length", "=", "text_length", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "\n", "return", "encoding", ",", "logits", ",", "indices", ",", "mu_text", ",", "log_var_text", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.text_image_text": [[117, 132], ["self_supervised_models.CycleGAN.CycleGAN.encode_text", "self_supervised_models.CycleGAN.CycleGAN.decode_image", "self_supervised_models.CycleGAN.CycleGAN.pad", "self_supervised_models.CycleGAN.CycleGAN.encode_image", "self_supervised_models.CycleGAN.CycleGAN.decode_text"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.encode_text", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.decode_image", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.encode_image", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.decode_text"], ["", "def", "text_image_text", "(", "self", ",", "batch_positions", ",", "text_length", ",", "teacher_forcing_prob", "=", "0.0", ")", ":", "\n", "\n", "        ", "text_encoding", ",", "mu_text", ",", "log_var_text", "=", "self", ".", "encode_text", "(", "batch_positions", ",", "text_length", ")", "\n", "\n", "image", ",", "image_norm", "=", "self", ".", "decode_image", "(", "text_encoding", ")", "\n", "\n", "padded_image", "=", "self", ".", "pad", "(", "image", ")", "\n", "\n", "image_encoding", ",", "mu_img", ",", "log_var_img", "=", "self", ".", "encode_image", "(", "padded_image", ")", "\n", "\n", "re_text_encoding", ",", "text_output", ",", "indices", ",", "_", ",", "_", "=", "self", ".", "decode_text", "(", "image_encoding", ",", "\n", "text_length", "=", "text_length", ",", "\n", "teacher_forcing_prob", "=", "teacher_forcing_prob", ")", "\n", "\n", "return", "text_output", ",", "text_encoding", ",", "image", ",", "image_norm", ",", "image_encoding", ",", "re_text_encoding", ",", "mu_text", ",", "log_var_text", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.image_text_image": [[134, 143], ["self_supervised_models.CycleGAN.CycleGAN.encode_image", "self_supervised_models.CycleGAN.CycleGAN.decode_text", "self_supervised_models.CycleGAN.CycleGAN.decode_image"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.encode_image", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.decode_text", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.decode_image"], ["", "def", "image_text_image", "(", "self", ",", "image", ")", ":", "\n", "\n", "        ", "image_encoding", ",", "mu_img", ",", "log_var_img", "=", "self", ".", "encode_image", "(", "image", ")", "\n", "\n", "text_encoding", ",", "text_output", ",", "indices", ",", "mu_text", ",", "log_var_text", "=", "self", ".", "decode_text", "(", "image_encoding", ")", "\n", "\n", "re_image", ",", "image_norm", "=", "self", ".", "decode_image", "(", "text_encoding", ")", "\n", "\n", "return", "re_image", ",", "image_encoding", ",", "text_encoding", ",", "image_norm", ",", "mu_text", ",", "log_var_text", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.image_text": [[144, 151], ["self_supervised_models.CycleGAN.CycleGAN.encode_image", "self_supervised_models.CycleGAN.CycleGAN.decode_text"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.encode_image", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.decode_text"], ["", "def", "image_text", "(", "self", ",", "image", ")", ":", "\n", "\n", "        ", "image_encoding", ",", "mu_img", ",", "log_var_img", "=", "self", ".", "encode_image", "(", "image", ")", "\n", "\n", "text_encoding", ",", "text_output", ",", "indices", ",", "mu_text", ",", "log_var_text", "=", "self", ".", "decode_text", "(", "image_encoding", ")", "\n", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.text_image": [[152, 159], ["self_supervised_models.CycleGAN.CycleGAN.encode_text", "self_supervised_models.CycleGAN.CycleGAN.decode_image"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.encode_text", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.decode_image"], ["", "def", "text_image", "(", "self", ",", "batch_positions", ",", "text_length", ")", ":", "\n", "\n", "        ", "text_encoding", ",", "mu_text", ",", "log_var_text", "=", "self", ".", "encode_text", "(", "batch_positions", ",", "text_length", ")", "\n", "\n", "image", ",", "image_norm", "=", "self", ".", "decode_image", "(", "text_encoding", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.store_model": [[160, 167], ["print", "torch.save", "self_supervised_models.CycleGAN.CycleGAN.state_dict", "str"], "methods", ["None"], ["", "def", "store_model", "(", "self", ",", "path", ")", ":", "\n", "\n", "        ", "state", "=", "{", "\n", "'state_dict'", ":", "self", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "print", "(", "\"dumping new best model to \"", "+", "str", "(", "path", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.models.self_supervised_models.CycleGAN.load_model": [[168, 177], ["torch.load", "self_supervised_models.CycleGAN.CycleGAN.load_state_dict"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Load model from file\n        :param best:\n        :return:\n        \"\"\"", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.INCEPTION_V3.__init__": [[16, 27], ["torch.Module.__init__", "torchvision.models.inception_v3", "torch.load_url", "torch.load_url", "torch.load_url", "torch.load_url", "torch.load_url", "model1.INCEPTION_V3.model.load_state_dict", "model1.INCEPTION_V3.model.parameters", "print"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "INCEPTION_V3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "models", ".", "inception_v3", "(", ")", "\n", "url", "=", "'https://download.pytorch.org/models/inception_v3_google-1a9a5a14.pth'", "\n", "# print(next(model.parameters()).data)", "\n", "state_dict", "=", "model_zoo", ".", "load_url", "(", "url", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "print", "(", "'Load pretrained model from '", ",", "url", ")", "\n", "# print(next(self.model.parameters()).data)", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.INCEPTION_V3.forward": [[30, 45], ["model1.INCEPTION_V3.model", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# [-1.0, 1.0] --> [0, 1.0]", "\n", "        ", "x", "=", "input", "*", "0.5", "+", "0.5", "\n", "# mean=[0.485, 0.456, 0.406] and std=[0.229, 0.224, 0.225]", "\n", "# --> mean = 0, std = 1", "\n", "x", "[", ":", ",", "0", "]", "=", "(", "x", "[", ":", ",", "0", "]", "-", "0.485", ")", "/", "0.229", "\n", "x", "[", ":", ",", "1", "]", "=", "(", "x", "[", ":", ",", "1", "]", "-", "0.456", ")", "/", "0.224", "\n", "x", "[", ":", ",", "2", "]", "=", "(", "x", "[", ":", ",", "2", "]", "-", "0.406", ")", "/", "0.225", "\n", "#", "\n", "# --> fixed-size input: batch x 3 x 299 x 299", "\n", "x", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "299", ",", "299", ")", ",", "mode", "=", "'bilinear'", ")", "(", "x", ")", "\n", "# 299 x 299 x 3", "\n", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "x", "=", "nn", ".", "Softmax", "(", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.GLU.__init__": [[48, 50], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.GLU.forward": [[51, 56], ["x.size", "int", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "nc", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "nc", "%", "2", "==", "0", ",", "'channels dont divide 2!'", "\n", "nc", "=", "int", "(", "nc", "/", "2", ")", "\n", "return", "x", "[", ":", ",", ":", "nc", "]", "*", "F", ".", "sigmoid", "(", "x", "[", ":", ",", "nc", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.ResBlock.__init__": [[87, 95], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model1.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model1.GLU", "model1.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "channel_num", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "channel_num", ",", "channel_num", "*", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel_num", "*", "2", ")", ",", "\n", "GLU", "(", ")", ",", "\n", "conv3x3", "(", "channel_num", ",", "channel_num", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel_num", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.ResBlock.forward": [[98, 103], ["model1.ResBlock.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "block", "(", "x", ")", "\n", "out", "+=", "residual", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.CA_NET.__init__": [[108, 114], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model1.GLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CA_NET", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "t_dim", "=", "cfg", ".", "TEXT", ".", "DIMENSION", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "t_dim", ",", "self", ".", "ef_dim", "*", "4", ",", "bias", "=", "True", ")", "\n", "self", ".", "relu", "=", "GLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.CA_NET.encode": [[115, 120], ["model1.CA_NET.relu", "model1.CA_NET.fc"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "text_embedding", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "self", ".", "fc", "(", "text_embedding", ")", ")", "\n", "mu", "=", "x", "[", ":", ",", ":", "self", ".", "ef_dim", "]", "\n", "logvar", "=", "x", "[", ":", ",", "self", ".", "ef_dim", ":", "]", "\n", "return", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.CA_NET.reparametrize": [[121, 129], ["logvar.mul().exp_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.FloatTensor().normal_.mul().add_", "torch.FloatTensor().normal_.mul().add_", "torch.FloatTensor().normal_.mul().add_", "torch.FloatTensor().normal_.mul().add_", "torch.FloatTensor().normal_.mul().add_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "logvar.mul", "torch.FloatTensor().normal_.mul", "torch.FloatTensor().normal_.mul", "torch.FloatTensor().normal_.mul", "torch.FloatTensor().normal_.mul", "torch.FloatTensor().normal_.mul", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "logvar.mul().exp_.size", "logvar.mul().exp_.size"], "methods", ["None"], ["", "def", "reparametrize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "std", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "if", "cfg", ".", "CUDA", ":", "\n", "            ", "eps", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "\n", "", "else", ":", "\n", "            ", "eps", "=", "torch", ".", "FloatTensor", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "\n", "", "eps", "=", "Variable", "(", "eps", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.CA_NET.forward": [[130, 134], ["model1.CA_NET.encode", "model1.CA_NET.reparametrize"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.CA_NET.reparametrize"], ["", "def", "forward", "(", "self", ",", "text_embedding", ")", ":", "\n", "        ", "mu", ",", "logvar", "=", "self", ".", "encode", "(", "text_embedding", ")", "\n", "c_code", "=", "self", ".", "reparametrize", "(", "mu", ",", "logvar", ")", "\n", "return", "c_code", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.INIT_STAGE_G.__init__": [[137, 145], ["torch.Module.__init__", "model1.INIT_STAGE_G.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ")", ":", "\n", "        ", "super", "(", "INIT_STAGE_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "in_dim", "=", "cfg", ".", "GAN", ".", "Z_DIM", "+", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "", "else", ":", "\n", "            ", "self", ".", "in_dim", "=", "cfg", ".", "GAN", ".", "Z_DIM", "\n", "", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.INIT_STAGE_G.define_module": [[146, 159], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model1.upBlock", "model1.upBlock", "model1.upBlock", "model1.upBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "model1.GLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "in_dim", "=", "self", ".", "in_dim", "\n", "ngf", "=", "self", ".", "gf_dim", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "ngf", "*", "4", "*", "4", "*", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ngf", "*", "4", "*", "4", "*", "2", ")", ",", "\n", "GLU", "(", ")", ")", "\n", "\n", "\n", "self", ".", "upsample1", "=", "upBlock", "(", "ngf", ",", "ngf", "//", "2", ")", "\n", "self", ".", "upsample2", "=", "upBlock", "(", "ngf", "//", "2", ",", "ngf", "//", "4", ")", "\n", "self", ".", "upsample3", "=", "upBlock", "(", "ngf", "//", "4", ",", "ngf", "//", "8", ")", "\n", "self", ".", "upsample4", "=", "upBlock", "(", "ngf", "//", "8", ",", "ngf", "//", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.INIT_STAGE_G.forward": [[160, 178], ["model1.INIT_STAGE_G.fc", "model1.INIT_STAGE_G.view", "model1.INIT_STAGE_G.upsample1", "model1.INIT_STAGE_G.upsample2", "model1.INIT_STAGE_G.upsample3", "model1.INIT_STAGE_G.upsample4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_code", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "in_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "z_code", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "in_code", "=", "z_code", "\n", "# state size 16ngf x 4 x 4", "\n", "", "out_code", "=", "self", ".", "fc", "(", "in_code", ")", "\n", "out_code", "=", "out_code", ".", "view", "(", "-", "1", ",", "self", ".", "gf_dim", ",", "4", ",", "4", ")", "\n", "# state size 8ngf x 8 x 8", "\n", "out_code", "=", "self", ".", "upsample1", "(", "out_code", ")", "\n", "# state size 4ngf x 16 x 16", "\n", "out_code", "=", "self", ".", "upsample2", "(", "out_code", ")", "\n", "# state size 2ngf x 32 x 32", "\n", "out_code", "=", "self", ".", "upsample3", "(", "out_code", ")", "\n", "# state size ngf x 64 x 64", "\n", "out_code", "=", "self", ".", "upsample4", "(", "out_code", ")", "\n", "\n", "return", "out_code", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.NEXT_STAGE_G.__init__": [[181, 190], ["torch.Module.__init__", "model1.NEXT_STAGE_G.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ",", "num_residual", "=", "cfg", ".", "GAN", ".", "R_NUM", ")", ":", "\n", "        ", "super", "(", "NEXT_STAGE_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "", "else", ":", "\n", "            ", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "Z_DIM", "\n", "", "self", ".", "num_residual", "=", "num_residual", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.NEXT_STAGE_G._make_layer": [[191, 196], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "channel_num", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_residual", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "channel_num", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.NEXT_STAGE_G.define_module": [[197, 204], ["model1.Block3x3_relu", "model1.NEXT_STAGE_G._make_layer", "model1.upBlock"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_relu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.NEXT_STAGE_G._make_layer", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ngf", "=", "self", ".", "gf_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "\n", "self", ".", "jointConv", "=", "Block3x3_relu", "(", "ngf", "+", "efg", ",", "ngf", ")", "\n", "self", ".", "residual", "=", "self", ".", "_make_layer", "(", "ResBlock", ",", "ngf", ")", "\n", "self", ".", "upsample", "=", "upBlock", "(", "ngf", ",", "ngf", "//", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.NEXT_STAGE_G.forward": [[205, 218], ["h_code.size", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model1.NEXT_STAGE_G.jointConv", "model1.NEXT_STAGE_G.residual", "model1.NEXT_STAGE_G.upsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h_code", ",", "c_code", ")", ":", "\n", "        ", "s_size", "=", "h_code", ".", "size", "(", "2", ")", "\n", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "s_size", ",", "s_size", ")", "\n", "# state size (ngf+egf) x in_size x in_size", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "h_code", ")", ",", "1", ")", "\n", "# state size ngf x in_size x in_size", "\n", "out_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n", "out_code", "=", "self", ".", "residual", "(", "out_code", ")", "\n", "# state size ngf/2 x 2in_size x 2in_size", "\n", "out_code", "=", "self", ".", "upsample", "(", "out_code", ")", "\n", "\n", "return", "out_code", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.GET_IMAGE_G.__init__": [[221, 227], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model1.conv3x3", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ")", ":", "\n", "        ", "super", "(", "GET_IMAGE_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "self", ".", "img", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "ngf", ",", "3", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.GET_IMAGE_G.forward": [[229, 232], ["model1.GET_IMAGE_G.img"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h_code", ")", ":", "\n", "        ", "out_img", "=", "self", ".", "img", "(", "h_code", ")", "\n", "return", "out_img", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.G_NET.__init__": [[235, 239], ["torch.Module.__init__", "model1.G_NET.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "G_NET", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "cfg", ".", "GAN", ".", "GF_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.G_NET.define_module": [[240, 259], ["model1.CA_NET", "model1.INIT_STAGE_G", "model1.GET_IMAGE_G", "model1.NEXT_STAGE_G", "model1.GET_IMAGE_G", "model1.NEXT_STAGE_G", "model1.GET_IMAGE_G", "model1.NEXT_STAGE_G", "model1.GET_IMAGE_G", "model1.NEXT_STAGE_G", "model1.GET_IMAGE_G"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "ca_net", "=", "CA_NET", "(", ")", "\n", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "0", ":", "\n", "            ", "self", ".", "h_net1", "=", "INIT_STAGE_G", "(", "self", ".", "gf_dim", "*", "16", ")", "\n", "self", ".", "img_net1", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "1", ":", "\n", "            ", "self", ".", "h_net2", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", ")", "\n", "self", ".", "img_net2", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "2", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "2", ":", "\n", "            ", "self", ".", "h_net3", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "2", ")", "\n", "self", ".", "img_net3", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "4", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "3", ":", "# Recommended structure (mainly limited by GPU memory), and not test yet", "\n", "            ", "self", ".", "h_net4", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "4", ",", "num_residual", "=", "1", ")", "\n", "self", ".", "img_net4", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "8", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "4", ":", "\n", "            ", "self", ".", "h_net4", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "8", ",", "num_residual", "=", "1", ")", "\n", "self", ".", "img_net4", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.G_NET.forward": [[260, 284], ["model1.G_NET.ca_net", "model1.G_NET.h_net1", "model1.G_NET.img_net1", "fake_imgs.append", "model1.G_NET.h_net2", "model1.G_NET.img_net2", "fake_imgs.append", "model1.G_NET.h_net3", "model1.G_NET.img_net3", "fake_imgs.append", "model1.G_NET.h_net4", "model1.G_NET.img_net4", "fake_imgs.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "z_code", ",", "text_embedding", "=", "None", ")", ":", "\n", "        ", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "text_embedding", "is", "not", "None", ":", "\n", "            ", "c_code", ",", "mu", ",", "logvar", "=", "self", ".", "ca_net", "(", "text_embedding", ")", "\n", "", "else", ":", "\n", "            ", "c_code", ",", "mu", ",", "logvar", "=", "z_code", ",", "None", ",", "None", "\n", "", "fake_imgs", "=", "[", "]", "\n", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "0", ":", "\n", "            ", "h_code1", "=", "self", ".", "h_net1", "(", "z_code", ",", "c_code", ")", "\n", "fake_img1", "=", "self", ".", "img_net1", "(", "h_code1", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img1", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "1", ":", "\n", "            ", "h_code2", "=", "self", ".", "h_net2", "(", "h_code1", ",", "c_code", ")", "\n", "fake_img2", "=", "self", ".", "img_net2", "(", "h_code2", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img2", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "2", ":", "\n", "            ", "h_code3", "=", "self", ".", "h_net3", "(", "h_code2", ",", "c_code", ")", "\n", "fake_img3", "=", "self", ".", "img_net3", "(", "h_code3", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img3", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "3", ":", "\n", "            ", "h_code4", "=", "self", ".", "h_net4", "(", "h_code3", ",", "c_code", ")", "\n", "fake_img4", "=", "self", ".", "img_net4", "(", "h_code4", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img4", ")", "\n", "\n", "", "return", "fake_imgs", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.G_NET1.__init__": [[290, 294], ["torch.Module.__init__", "model1.G_NET1.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "G_NET1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "cfg", ".", "GAN", ".", "GF_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.G_NET1.define_module": [[295, 314], ["model1.INIT_STAGE_G", "model1.GET_IMAGE_G", "model1.NEXT_STAGE_G", "model1.GET_IMAGE_G", "model1.NEXT_STAGE_G", "model1.GET_IMAGE_G", "model1.NEXT_STAGE_G", "model1.GET_IMAGE_G", "model1.NEXT_STAGE_G", "model1.GET_IMAGE_G"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "#if cfg.GAN.B_CONDITION:", "\n", "#self.ca_net = CA_NET()", "\n", "\n", "        ", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "0", ":", "\n", "            ", "self", ".", "h_net1", "=", "INIT_STAGE_G", "(", "self", ".", "gf_dim", "*", "16", ")", "\n", "self", ".", "img_net1", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "1", ":", "\n", "            ", "self", ".", "h_net2", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", ")", "\n", "self", ".", "img_net2", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "2", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "2", ":", "\n", "            ", "self", ".", "h_net3", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "2", ")", "\n", "self", ".", "img_net3", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "4", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "3", ":", "# Recommended structure (mainly limited by GPU memory), and not test yet", "\n", "            ", "self", ".", "h_net4", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "4", ",", "num_residual", "=", "1", ")", "\n", "self", ".", "img_net4", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "8", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "4", ":", "\n", "            ", "self", ".", "h_net4", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "8", ",", "num_residual", "=", "1", ")", "\n", "self", ".", "img_net4", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.G_NET1.forward": [[315, 341], ["model1.G_NET1.h_net1", "model1.G_NET1.img_net1", "fake_imgs.append", "model1.G_NET1.h_net2", "model1.G_NET1.img_net2", "fake_imgs.append", "model1.G_NET1.h_net3", "model1.G_NET1.img_net3", "fake_imgs.append", "model1.G_NET1.h_net4", "model1.G_NET1.img_net4", "fake_imgs.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "z_code", ",", "c_code", "=", "None", ")", ":", "\n", "#if cfg.GAN.B_CONDITION and text_embedding is not None:", "\n", "#c_code, mu, logvar = self.ca_net(text_embedding)", "\n", "#else:", "\n", "#   c_code, mu, logvar = z_code, None, None", "\n", "        ", "if", "c_code", "is", "None", ":", "\n", "             ", "c_code", "=", "z_code", "\n", "", "fake_imgs", "=", "[", "]", "\n", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "0", ":", "\n", "            ", "h_code1", "=", "self", ".", "h_net1", "(", "z_code", ",", "c_code", ")", "\n", "fake_img1", "=", "self", ".", "img_net1", "(", "h_code1", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img1", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "1", ":", "\n", "            ", "h_code2", "=", "self", ".", "h_net2", "(", "h_code1", ",", "c_code", ")", "\n", "fake_img2", "=", "self", ".", "img_net2", "(", "h_code2", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img2", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "2", ":", "\n", "            ", "h_code3", "=", "self", ".", "h_net3", "(", "h_code2", ",", "c_code", ")", "\n", "fake_img3", "=", "self", ".", "img_net3", "(", "h_code3", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img3", ")", "\n", "", "if", "cfg", ".", "TREE", ".", "BRANCH_NUM", ">", "3", ":", "\n", "            ", "h_code4", "=", "self", ".", "h_net4", "(", "h_code3", ",", "c_code", ")", "\n", "fake_img4", "=", "self", ".", "img_net4", "(", "h_code4", ")", "\n", "fake_imgs", ".", "append", "(", "fake_img4", ")", "\n", "\n", "", "return", "fake_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Interpolate.__init__": [[394, 399], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "mode", ")", ":", "\n", "        ", "super", "(", "Interpolate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "interp", "=", "nn", ".", "functional", ".", "interpolate", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Interpolate.forward": [[400, 403], ["model1.Interpolate.interp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "interp", "(", "x", ",", "size", "=", "self", ".", "size", ",", "mode", "=", "self", ".", "mode", ",", "align_corners", "=", "False", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.__init__": [[406, 420], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "com_enc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bottle_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "3", "*", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ",", "HIDDEN", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "def", "encode", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode": [[420, 428], ["model1.com_enc.relu", "model1.com_enc.relu", "model1.com_enc.bn1", "model1.com_enc.conv3", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "model1.com_enc.bottle_neck", "model1.com_enc.conv1", "model1.com_enc.conv2"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "torch", ".", "flatten", "(", "out", ",", "1", ")", "\n", "out", "=", "self", ".", "bottle_neck", "(", "out", ")", "\n", "return", "out", "\n", "", "", "class", "com_dec", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.__init__": [[429, 448], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model1.Interpolate", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "com_dec", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "up_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "HIDDEN", ",", "8", "*", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "self", ".", "deconv0", "=", "nn", ".", "Conv2d", "(", "8", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "interpolate", "=", "Interpolate", "(", "size", "=", "HEIGHT", ",", "mode", "=", "'bicubic'", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "deconv_n", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_n", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "\n", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "CHANNELS", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "def", "decode", "(", "self", ",", "z", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode": [[448, 462], ["model1.com_dec.up_neck", "model1.com_dec.view", "model1.com_dec.deconv0", "model1.com_dec.interpolate", "model1.com_dec.relu", "model1.com_dec.relu", "model1.com_dec.bn2", "range", "model1.com_dec.deconv3", "model1.com_dec.deconv1", "model1.com_dec.deconv2", "model1.com_dec.relu", "model1.com_dec.bn_n", "model1.com_dec.deconv_n"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "        ", "z", "=", "self", ".", "up_neck", "(", "z", ")", "\n", "z", "=", "z", ".", "view", "(", "-", "1", ",", "8", ",", "(", "HEIGHT", "//", "2", ")", ",", "(", "WIDTH", "//", "2", ")", ")", "\n", "z", "=", "self", ".", "deconv0", "(", "z", ")", "\n", "upscaled_image", "=", "self", ".", "interpolate", "(", "z", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv1", "(", "upscaled_image", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "self", ".", "deconv_n", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn_n", "(", "out", ")", "\n", "", "out", "=", "self", ".", "deconv3", "(", "out", ")", "\n", "final", "=", "upscaled_image", "+", "out", "\n", "return", "final", ",", "out", ",", "upscaled_image", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.comrec1.__init__": [[464, 471], ["torch.Module.__init__", "model1.com_enc", "model1.com_dec"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "comrec1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "# TODO : try with padding = 0", "\n", "self", ".", "enco", "=", "com_enc", "(", ")", "\n", "self", ".", "deco", "=", "com_dec", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.comrec1.forward": [[473, 477], ["model1.comrec1.enco.encode", "model1.comrec1.deco.decode"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_enc.encode", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.com_dec.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "com", "=", "self", ".", "enco", ".", "encode", "(", "x", ")", "\n", "final", ",", "out", ",", "upscaled_image", ",", "com_img", "=", "self", ".", "deco", ".", "decode", "(", "com", ")", "\n", "return", "final", ",", "out", ",", "upscaled_image", ",", "com_img", ",", "x", "\n", "########################################################################", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encoder2.__init__": [[479, 484], ["torch.Module.__init__", "model1.encoder2.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "encoder2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "64", "# cfg.GAN.GF_DIM", "\n", "self", ".", "in_dim", "=", "1024", "#cfg.TEXT.DIMENSION", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encoder2.define_module": [[487, 502], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model1.downBlock", "model1.downBlock", "model1.downBlock", "model1.downBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "model1.GLU", "model1.CA_NET"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ngf", "=", "16", "*", "self", ".", "gf_dim", "\n", "in_dim", "=", "self", ".", "in_dim", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "gf_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "downsample1", "=", "downBlock", "(", "ngf", "//", "16", ",", "ngf", "//", "8", ")", "\n", "self", ".", "downsample2", "=", "downBlock", "(", "ngf", "//", "8", ",", "ngf", "//", "4", ")", "\n", "self", ".", "downsample3", "=", "downBlock", "(", "ngf", "//", "4", ",", "ngf", "//", "2", ")", "\n", "self", ".", "downsample4", "=", "downBlock", "(", "ngf", "//", "2", ",", "ngf", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ngf", "*", "4", "*", "4", ",", "in_dim", "*", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "in_dim", "*", "2", ")", ",", "\n", "GLU", "(", ")", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "ca_net", "=", "CA_NET", "(", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encoder2.forward": [[503, 522], ["model1.encoder2.relu", "model1.encoder2.downsample1", "model1.encoder2.downsample2", "model1.encoder2.downsample3", "model1.encoder2.downsample4", "model1.encoder2.view", "model1.encoder2.fc", "model1.encoder2.conv1", "model1.encoder2.ca_net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "\n", "out", "=", "self", ".", "downsample1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "downsample2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "downsample3", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "downsample4", "(", "out", ")", "\n", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "16", "*", "self", ".", "gf_dim", "*", "4", "*", "4", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "out", "is", "not", "None", ":", "\n", "            ", "c_code", ",", "mu", ",", "logvar", "=", "self", ".", "ca_net", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "c_code", ",", "mu", ",", "logvar", "=", "None", ",", "None", ",", "None", "\n", "\n", "", "return", "c_code", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encoder_resnet1.__init__": [[525, 529], ["torch.Module.__init__", "model1.encoder_resnet1.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["########################################################################", "\n", "", "", "class", "encoder1", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "encoder1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "define_module", "(", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encoder_resnet1.define_module": [[532, 540], ["torchvision.models.resnet50", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model1.CA_NET", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["None"], ["# TODO : try with padding = 0", "\n", "", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "CHANNELS", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "CHANNELS", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bottle_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "3", "*", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ",", "(", "HEIGHT", "//", "2", ")", "*", "(", "WIDTH", "//", "2", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encoder_resnet1.forward": [[541, 548], ["model1.encoder_resnet1.tanh", "model1.encoder_resnet1.ca_net", "model1.encoder_resnet1.res"], "methods", ["None"], ["self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "self", ".", "Tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "#out = nn.ReLU(self.conv1(x))", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "#out = nn.ReLU(self.conv2(out))", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encoder_resnet.__init__": [[551, 555], ["torch.Module.__init__", "model1.encoder_resnet.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["out", "=", "self", ".", "bottle_neck", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Swish", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encoder_resnet.define_module": [[558, 566], ["torchvision.models.resnet50", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["None"], ["self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "#object creation", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "sigmoid", "(", "x", ")", "\n", "\n", "", "", "class", "MAP_NET_IT", "(", "nn", ".", "Module", ")", ":", "\n", "#Generator from Image Embedding to text embedding####", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MAP_NET_IT", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encoder_resnet.forward": [[567, 575], ["model1.encoder_resnet.tanh", "model1.encoder_resnet.res"], "methods", ["None"], ["#self.df_dim = cfg.TEXT.DIMENSION", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "TEXT", ".", "EMBEDDING_DIM", "\n", "self", ".", "in_dim", "=", "cfg", ".", "GAN", ".", "Z_DIM", "+", "cfg", ".", "TEXT", ".", "DIMENSION", "\n", "self", ".", "define_module", "(", ")", "\n", "\n", "\n", "", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "in_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encoder1.__init__": [[577, 580], ["torch.Module.__init__", "model1.encoder1.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", ",", "ndf", "//", "2", ")", ",", "\n", "#nn.BatchNorm1d(ndf//2),", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encoder1.define_module": [[583, 593], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["None"], ["nn", ".", "Linear", "(", "ndf", "//", "2", ",", "ndf", "//", "4", ")", ",", "\n", "#nn.BatchNorm1d(ndf//4),", "\n", "#Swish(),", "\n", "#nn.Linear(ndf//4, ndf//8),", "\n", "#nn.BatchNorm1d(ndf//8),", "\n", "#Swish())", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", "//", "4", ",", "efg", ")", ",", "\n", "#nn.Linear(ndf//8, efg),", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encoder1.forward": [[593, 603], ["model1.encoder1.relu", "model1.encoder1.relu", "model1.encoder1.bn1", "model1.encoder1.conv3", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "model1.encoder1.bottle_neck", "model1.encoder1.conv1", "model1.encoder1.conv2"], "methods", ["None"], ["nn", ".", "Tanh", "(", ")", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "z_code", ",", "c_code", ")", ":", "\n", "        ", "in_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "z_code", ")", ",", "1", ")", "\n", "x_code", "=", "self", ".", "fc1", "(", "in_code", ")", "\n", "output", "=", "self", ".", "fc2", "(", "x_code", ")", "\n", "\n", "return", "output", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Swish.__init__": [[606, 609], ["torch.Module.__init__", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__"], ["", "", "class", "D_NET_TEXT", "(", "nn", ".", "Module", ")", ":", "\n", "#To discriminate for text embedding#######################3", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "D_NET_TEXT", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Swish.forward": [[610, 612], ["model1.Swish.sigmoid"], "methods", ["None"], ["self", ".", "df_dim", "=", "cfg", ".", "TEXT", ".", "EMBEDDING_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_IT.__init__": [[615, 621], ["torch.Module.__init__", "model1.MAP_NET_IT.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["\n", "self", ".", "encodings", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", ",", "ndf", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ndf", "//", "2", ")", ",", "\n", "Swish", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "ndf", "//", "2", ",", "ndf", "//", "4", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ndf", "//", "4", ")", ",", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_IT.define_module": [[623, 642], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["nn", ".", "Linear", "(", "ndf", "//", "4", ",", "ndf", "//", "8", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ndf", "//", "8", ")", ",", "\n", "Swish", "(", ")", ")", "\n", "self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", "//", "8", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "x_var", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "encodings", "(", "x_var", ")", "\n", "output", "=", "self", ".", "logits", "(", "x_code", ")", "\n", "\n", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", "\n", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_IT.forward": [[647, 653], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model1.MAP_NET_IT.fc1", "model1.MAP_NET_IT.fc2"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_TI.__init__": [[656, 663], ["torch.Module.__init__", "model1.MAP_NET_TI.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_TI.define_module": [[665, 684], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["\n", "\n", "# For 64 x 64 images", "\n", "class", "D_NET64", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "D_NET64", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "cfg", ".", "GAN", ".", "DF_DIM", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n", "", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "df_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "self", ".", "img_code_s16", "=", "encode_image_by_16times", "(", "ndf", ")", "\n", "\n", "self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_TI.forward": [[689, 695], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model1.MAP_NET_TI.fc1", "model1.MAP_NET_TI.fc2"], "methods", ["None"], ["\n", "", "", "def", "forward", "(", "self", ",", "x_var", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "img_code_s16", "(", "x_var", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "4", ",", "4", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_IT1.__init__": [[699, 705], ["torch.Module.__init__", "model1.MAP_NET_IT1.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["h_c_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n", "", "else", ":", "\n", "            ", "h_c_code", "=", "x_code", "\n", "\n", "", "output", "=", "self", ".", "logits", "(", "h_c_code", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "out_uncond", "=", "self", ".", "uncond_logits", "(", "x_code", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_IT1.define_module": [[707, 726], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "else", ":", "\n", "            ", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", "\n", "\n", "\n", "# For 128 x 128 images", "\n", "", "", "", "class", "D_NET128", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "D_NET128", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "cfg", ".", "GAN", ".", "DF_DIM", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n", "", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "df_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "self", ".", "img_code_s16", "=", "encode_image_by_16times", "(", "ndf", ")", "\n", "self", ".", "img_code_s32", "=", "downBlock", "(", "ndf", "*", "8", ",", "ndf", "*", "16", ")", "\n", "self", ".", "img_code_s32_1", "=", "Block3x3_leakRelu", "(", "ndf", "*", "16", ",", "ndf", "*", "8", ")", "\n", "\n", "self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_IT1.forward": [[731, 737], ["model1.MAP_NET_IT1.fc1", "model1.MAP_NET_IT1.fc2"], "methods", ["None"], ["            ", "self", ".", "jointConv", "=", "Block3x3_leakRelu", "(", "ndf", "*", "8", "+", "efg", ",", "ndf", "*", "8", ")", "\n", "self", ".", "uncond_logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x_var", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "img_code_s16", "(", "x_var", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_TI1.__init__": [[740, 747], ["torch.Module.__init__", "model1.MAP_NET_TI1.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "4", ",", "4", ")", "\n", "# state size (ngf+egf) x 4 x 4", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "x_code", ")", ",", "1", ")", "\n", "# state size ngf x in_size x in_size", "\n", "h_c_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_TI1.define_module": [[749, 771], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["None"], ["            ", "h_c_code", "=", "x_code", "\n", "\n", "", "output", "=", "self", ".", "logits", "(", "h_c_code", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "out_uncond", "=", "self", ".", "uncond_logits", "(", "x_code", ")", "\n", "return", "[", "output", ".", "view", "(", "-", "1", ")", ",", "out_uncond", ".", "view", "(", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", "\n", "\n", "\n", "# For 256 x 256 images", "\n", "", "", "", "class", "D_NET256", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "D_NET256", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "cfg", ".", "GAN", ".", "DF_DIM", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n", "", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "df_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "self", ".", "img_code_s16", "=", "encode_image_by_16times", "(", "ndf", ")", "\n", "self", ".", "img_code_s32", "=", "downBlock", "(", "ndf", "*", "8", ",", "ndf", "*", "16", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_TI1.forward": [[773, 779], ["model1.MAP_NET_TI1.fc1", "model1.MAP_NET_TI1.fc2"], "methods", ["None"], ["self", ".", "img_code_s64_1", "=", "Block3x3_leakRelu", "(", "ndf", "*", "32", ",", "ndf", "*", "16", ")", "\n", "self", ".", "img_code_s64_2", "=", "Block3x3_leakRelu", "(", "ndf", "*", "16", ",", "ndf", "*", "8", ")", "\n", "\n", "self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_IT2.__init__": [[782, 788], ["torch.Module.__init__", "model1.MAP_NET_IT2.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["self", ".", "uncond_logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x_var", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "img_code_s16", "(", "x_var", ")", "\n", "x_code", "=", "self", ".", "img_code_s32", "(", "x_code", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_IT2.define_module": [[790, 816], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["x_code", "=", "self", ".", "img_code_s64_1", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s64_2", "(", "x_code", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "4", ",", "4", ")", "\n", "# state size (ngf+egf) x 4 x 4", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "x_code", ")", ",", "1", ")", "\n", "# state size ngf x in_size x in_size", "\n", "h_c_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n", "", "else", ":", "\n", "            ", "h_c_code", "=", "x_code", "\n", "\n", "", "output", "=", "self", ".", "logits", "(", "h_c_code", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "out_uncond", "=", "self", ".", "uncond_logits", "(", "x_code", ")", "\n", "return", "[", "output", ".", "view", "(", "-", "1", ")", ",", "out_uncond", ".", "view", "(", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", "\n", "\n", "\n", "# For 512 x 512 images: Recommended structure, not test yet", "\n", "", "", "", "class", "D_NET512", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "D_NET512", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "cfg", ".", "GAN", ".", "DF_DIM", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_IT2.forward": [[821, 827], ["model1.MAP_NET_IT2.fc1", "model1.MAP_NET_IT2.fc2"], "methods", ["None"], ["efg", "=", "self", ".", "ef_dim", "\n", "self", ".", "img_code_s16", "=", "encode_image_by_16times", "(", "ndf", ")", "\n", "self", ".", "img_code_s32", "=", "downBlock", "(", "ndf", "*", "8", ",", "ndf", "*", "16", ")", "\n", "self", ".", "img_code_s64", "=", "downBlock", "(", "ndf", "*", "16", ",", "ndf", "*", "32", ")", "\n", "self", ".", "img_code_s128", "=", "downBlock", "(", "ndf", "*", "32", ",", "ndf", "*", "64", ")", "\n", "self", ".", "img_code_s128_1", "=", "Block3x3_leakRelu", "(", "ndf", "*", "64", ",", "ndf", "*", "32", ")", "\n", "self", ".", "img_code_s128_2", "=", "Block3x3_leakRelu", "(", "ndf", "*", "32", ",", "ndf", "*", "16", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_TI2.__init__": [[830, 837], ["torch.Module.__init__", "model1.MAP_NET_TI2.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "jointConv", "=", "Block3x3_leakRelu", "(", "ndf", "*", "8", "+", "efg", ",", "ndf", "*", "8", ")", "\n", "self", ".", "uncond_logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_TI2.define_module": [[839, 882], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["\n", "", "", "def", "forward", "(", "self", ",", "x_var", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "img_code_s16", "(", "x_var", ")", "\n", "x_code", "=", "self", ".", "img_code_s32", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s64", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s128", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s128_1", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s128_2", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s128_3", "(", "x_code", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "4", ",", "4", ")", "\n", "# state size (ngf+egf) x 4 x 4", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "x_code", ")", ",", "1", ")", "\n", "# state size ngf x in_size x in_size", "\n", "h_c_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n", "", "else", ":", "\n", "            ", "h_c_code", "=", "x_code", "\n", "\n", "", "output", "=", "self", ".", "logits", "(", "h_c_code", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "out_uncond", "=", "self", ".", "uncond_logits", "(", "x_code", ")", "\n", "return", "[", "output", ".", "view", "(", "-", "1", ")", ",", "out_uncond", ".", "view", "(", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", "\n", "\n", "\n", "# For 1024 x 1024 images: Recommended structure, not test yet", "\n", "", "", "", "class", "D_NET1024", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "D_NET1024", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "cfg", ".", "GAN", ".", "DF_DIM", "\n", "self", ".", "ef_dim", "=", "cfg", ".", "GAN", ".", "EMBEDDING_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n", "", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "df_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "self", ".", "img_code_s16", "=", "encode_image_by_16times", "(", "ndf", ")", "\n", "self", ".", "img_code_s32", "=", "downBlock", "(", "ndf", "*", "8", ",", "ndf", "*", "16", ")", "\n", "self", ".", "img_code_s64", "=", "downBlock", "(", "ndf", "*", "16", ",", "ndf", "*", "32", ")", "\n", "self", ".", "img_code_s128", "=", "downBlock", "(", "ndf", "*", "32", ",", "ndf", "*", "64", ")", "\n", "self", ".", "img_code_s256", "=", "downBlock", "(", "ndf", "*", "64", ",", "ndf", "*", "128", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_TI2.forward": [[888, 894], ["model1.MAP_NET_TI2.fc1", "model1.MAP_NET_TI2.fc2"], "methods", ["None"], ["self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "jointConv", "=", "Block3x3_leakRelu", "(", "ndf", "*", "8", "+", "efg", ",", "ndf", "*", "8", ")", "\n", "self", ".", "uncond_logits", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_IT22.__init__": [[897, 903], ["torch.Module.__init__", "model1.MAP_NET_IT22.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], ["\n", "", "", "def", "forward", "(", "self", ",", "x_var", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "img_code_s16", "(", "x_var", ")", "\n", "x_code", "=", "self", ".", "img_code_s32", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s64", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s128", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s256", "(", "x_code", ")", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_IT22.define_module": [[905, 931], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["x_code", "=", "self", ".", "img_code_s256_2", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s256_3", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s256_4", "(", "x_code", ")", "\n", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "4", ",", "4", ")", "\n", "# state size (ngf+egf) x 4 x 4", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "x_code", ")", ",", "1", ")", "\n", "# state size ngf x in_size x in_size", "\n", "h_c_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n", "", "else", ":", "\n", "            ", "h_c_code", "=", "x_code", "\n", "\n", "", "output", "=", "self", ".", "logits", "(", "h_c_code", ")", "\n", "if", "cfg", ".", "GAN", ".", "B_CONDITION", ":", "\n", "            ", "out_uncond", "=", "self", ".", "uncond_logits", "(", "x_code", ")", "\n", "return", "[", "output", ".", "view", "(", "-", "1", ")", ",", "out_uncond", ".", "view", "(", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_IT22.forward": [[936, 942], ["model1.MAP_NET_IT22.fc1", "model1.MAP_NET_IT22.fc2"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_TI22.__init__": [[945, 952], ["torch.Module.__init__", "model1.MAP_NET_TI22.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_TI22.define_module": [[954, 997], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_TI22.forward": [[1003, 1009], ["model1.MAP_NET_TI22.fc1", "model1.MAP_NET_TI22.fc2"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_TI3.__init__": [[1012, 1019], ["torch.Module.__init__", "model1.MAP_NET_TI3.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_TI3.define_module": [[1021, 1053], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_TI3.forward": [[1058, 1065], ["model1.MAP_NET_TI3.fc1", "model1.MAP_NET_TI3.fc2"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_IT3.__init__": [[1068, 1074], ["torch.Module.__init__", "model1.MAP_NET_IT3.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_IT3.define_module": [[1076, 1106], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.MAP_NET_IT3.forward": [[1111, 1117], ["model1.MAP_NET_IT3.fc1", "model1.MAP_NET_IT3.fc2"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET_TEXT1.__init__": [[1123, 1128], ["torch.Module.__init__", "model1.D_NET_TEXT1.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET_TEXT1.define_module": [[1129, 1150], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET_TEXT1.forward": [[1152, 1157], ["model1.D_NET_TEXT1.encodings", "model1.D_NET_TEXT1.logits", "model1.D_NET_TEXT1.view"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET_TEXT.__init__": [[1161, 1166], ["torch.Module.__init__", "model1.D_NET_TEXT.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET_TEXT.define_module": [[1167, 1185], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET_TEXT.forward": [[1187, 1192], ["model1.D_NET_TEXT.encodings", "model1.D_NET_TEXT.logits", "model1.D_NET_TEXT.view"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET_IMAGE.__init__": [[1195, 1199], ["torch.Module.__init__", "model1.D_NET_IMAGE.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET_IMAGE.define_module": [[1200, 1213], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET_IMAGE.forward": [[1216, 1221], ["model1.D_NET_IMAGE.encodings", "model1.D_NET_IMAGE.logits", "model1.D_NET_IMAGE.view"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET_IMAGE1.__init__": [[1224, 1231], ["torch.Module.__init__", "model1.D_NET_IMAGE1.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET_IMAGE1.define_module": [[1232, 1251], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET_IMAGE1.forward": [[1254, 1259], ["model1.D_NET_IMAGE1.encodings", "model1.D_NET_IMAGE1.logits", "model1.D_NET_IMAGE1.view"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET64.__init__": [[1263, 1268], ["torch.Module.__init__", "model1.D_NET64.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET64.define_module": [[1269, 1283], ["model1.encode_image_by_16times", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model1.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encode_image_by_16times", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET64.forward": [[1284, 1303], ["model1.D_NET64.img_code_s16", "model1.D_NET64.logits", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model1.D_NET64.jointConv", "model1.D_NET64.uncond_logits", "model1.D_NET64.view", "model1.D_NET64.view", "model1.D_NET64.view"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET128.__init__": [[1307, 1312], ["torch.Module.__init__", "model1.D_NET128.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET128.define_module": [[1313, 1329], ["model1.encode_image_by_16times", "model1.downBlock", "model1.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model1.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encode_image_by_16times", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET128.forward": [[1330, 1351], ["model1.D_NET128.img_code_s16", "model1.D_NET128.img_code_s32", "model1.D_NET128.img_code_s32_1", "model1.D_NET128.logits", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model1.D_NET128.jointConv", "model1.D_NET128.uncond_logits", "model1.D_NET128.view", "model1.D_NET128.view", "model1.D_NET128.view"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET256.__init__": [[1355, 1360], ["torch.Module.__init__", "model1.D_NET256.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET256.define_module": [[1361, 1379], ["model1.encode_image_by_16times", "model1.downBlock", "model1.downBlock", "model1.Block3x3_leakRelu", "model1.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model1.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encode_image_by_16times", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET256.forward": [[1380, 1403], ["model1.D_NET256.img_code_s16", "model1.D_NET256.img_code_s32", "model1.D_NET256.img_code_s64", "model1.D_NET256.img_code_s64_1", "model1.D_NET256.img_code_s64_2", "model1.D_NET256.logits", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model1.D_NET256.jointConv", "model1.D_NET256.uncond_logits", "model1.D_NET256.view", "model1.D_NET256.view", "model1.D_NET256.view"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET512.__init__": [[1407, 1412], ["torch.Module.__init__", "model1.D_NET512.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET512.define_module": [[1413, 1433], ["model1.encode_image_by_16times", "model1.downBlock", "model1.downBlock", "model1.downBlock", "model1.Block3x3_leakRelu", "model1.Block3x3_leakRelu", "model1.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model1.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encode_image_by_16times", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET512.forward": [[1434, 1459], ["model1.D_NET512.img_code_s16", "model1.D_NET512.img_code_s32", "model1.D_NET512.img_code_s64", "model1.D_NET512.img_code_s128", "model1.D_NET512.img_code_s128_1", "model1.D_NET512.img_code_s128_2", "model1.D_NET512.img_code_s128_3", "model1.D_NET512.logits", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model1.D_NET512.jointConv", "model1.D_NET512.uncond_logits", "model1.D_NET512.view", "model1.D_NET512.view", "model1.D_NET512.view"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__": [[1463, 1468], ["torch.Module.__init__", "model1.D_NET1024.define_module"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.__init__", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.define_module": [[1469, 1491], ["model1.encode_image_by_16times", "model1.downBlock", "model1.downBlock", "model1.downBlock", "model1.downBlock", "model1.Block3x3_leakRelu", "model1.Block3x3_leakRelu", "model1.Block3x3_leakRelu", "model1.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model1.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encode_image_by_16times", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu", "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.D_NET1024.forward": [[1492, 1519], ["model1.D_NET1024.img_code_s16", "model1.D_NET1024.img_code_s32", "model1.D_NET1024.img_code_s64", "model1.D_NET1024.img_code_s128", "model1.D_NET1024.img_code_s256", "model1.D_NET1024.img_code_s256_1", "model1.D_NET1024.img_code_s256_2", "model1.D_NET1024.img_code_s256_3", "model1.D_NET1024.img_code_s256_4", "model1.D_NET1024.logits", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model1.D_NET1024.jointConv", "model1.D_NET1024.uncond_logits", "model1.D_NET1024.view", "model1.D_NET1024.view", "model1.D_NET1024.view"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3": [[58, 62], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.upBlock": [[66, 74], ["torch.Sequential", "torch.Upsample", "model1.conv3x3", "torch.BatchNorm2d", "model1.GLU"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["", "def", "upBlock", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "conv3x3", "(", "in_planes", ",", "out_planes", "*", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "*", "2", ")", ",", "\n", "GLU", "(", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_relu": [[77, 84], ["torch.Sequential", "model1.conv3x3", "torch.BatchNorm2d", "model1.GLU"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["", "def", "Block3x3_relu", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "in_planes", ",", "out_planes", "*", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "*", "2", ")", ",", "\n", "GLU", "(", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.Block3x3_leakRelu": [[343, 350], ["torch.Sequential", "model1.conv3x3", "torch.BatchNorm2d", "torch.LeakyReLU"], "function", ["home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.conv3x3"], ["", "", "def", "Block3x3_leakRelu", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "in_planes", ",", "out_planes", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.downBlock": [[353, 360], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU"], "function", ["None"], ["", "def", "downBlock", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anindyasdas_selfsupervisedimagetext.stack_gan2.model1.encode_image_by_16times": [[363, 382], ["torch.Sequential", "torch.Conv2d", "torch.LeakyReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU"], "function", ["None"], ["", "def", "encode_image_by_16times", "(", "ndf", ")", ":", "\n", "    ", "encode_img", "=", "nn", ".", "Sequential", "(", "\n", "# --> state size. ndf x in_size/2 x in_size/2", "\n", "nn", ".", "Conv2d", "(", "3", ",", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# --> state size 2ndf x x in_size/4 x in_size/4", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# --> state size 4ndf x in_size/8 x in_size/8", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# --> state size 8ndf x in_size/16 x in_size/16", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "return", "encode_img", "\n", "\n"]]}