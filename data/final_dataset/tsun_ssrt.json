{"home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.init_logger": [[16, 38], ["os.join", "logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "logging.getLogger.removeHandler", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["def", "init_logger", "(", "_log_file", ",", "use_file_logger", "=", "True", ",", "dir", "=", "'log/'", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ")", "\n", "", "log_file", "=", "osp", ".", "join", "(", "dir", ",", "_log_file", "+", "'.log'", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "for", "handler", "in", "logger", ".", "handlers", "[", ":", "]", ":", "\n", "        ", "logger", ".", "removeHandler", "(", "handler", ")", "\n", "\n", "", "logger", ".", "setLevel", "(", "'DEBUG'", ")", "\n", "BASIC_FORMAT", "=", "\"%(asctime)s:%(levelname)s:%(message)s\"", "\n", "DATE_FORMAT", "=", "'%Y-%m-%d %H.%M.%S'", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "BASIC_FORMAT", ",", "DATE_FORMAT", ")", "\n", "chlr", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "chlr", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "chlr", ")", "\n", "if", "use_file_logger", ":", "\n", "        ", "fhlr", "=", "logging", ".", "FileHandler", "(", "log_file", ")", "\n", "fhlr", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fhlr", ")", "\n", "\n", "", "global", "logger_init", "\n", "logger_init", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.init_tensorboard_writer": [[39, 42], ["torch.utils.tensorboard.SummaryWriter", "os.join"], "function", ["None"], ["", "def", "init_tensorboard_writer", "(", "dir", "=", "'tensorboard/'", ",", "_writer_file", "=", "None", ")", ":", "\n", "    ", "writer", "=", "SummaryWriter", "(", "osp", ".", "join", "(", "dir", ",", "_writer_file", ")", ")", "\n", "return", "writer", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.resetRNGseed": [[44, 50], ["numpy.random.seed", "random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "resetRNGseed", "(", "seed", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.str2bool": [[51, 60], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "       ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.strlist": [[61, 73], ["isinstance", "v.strip().split", "v.strip"], "function", ["None"], ["", "", "def", "strlist", "(", "v", ")", ":", "\n", "# just list", "\n", "    ", "if", "isinstance", "(", "v", ",", "list", ")", ":", "\n", "        ", "return", "v", "\n", "\n", "# just string", "\n", "", "if", "'['", "not", "in", "v", "or", "']'", "not", "in", "v", ":", "\n", "        ", "return", "v", "\n", "\n", "", "v_list", "=", "v", ".", "strip", "(", "'[]'", ")", ".", "split", "(", "','", ")", "\n", "v_list", "=", "[", "vi", "for", "vi", "in", "v_list", "]", "\n", "return", "v_list", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.str2list": [[74, 84], ["isinstance", "v.strip().split", "int", "v.strip"], "function", ["None"], ["", "def", "str2list", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "list", ")", ":", "\n", "        ", "return", "v", "\n", "\n", "", "if", "v", "==", "'[]'", ":", "\n", "        ", "return", "[", "]", "\n", "\n", "", "v_list", "=", "v", ".", "strip", "(", "'[]'", ")", ".", "split", "(", "','", ")", "\n", "v_list", "=", "[", "int", "(", "vi", ")", "for", "vi", "in", "v_list", "]", "\n", "return", "v_list", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.save_checkpoint": [[85, 89], ["model.to_dicts", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.to_dicts"], ["", "def", "save_checkpoint", "(", "model", ",", "filename", ")", ":", "\n", "    ", "weight_dicts", "=", "model", ".", "to_dicts", "(", ")", "\n", "with", "open", "(", "filename", ",", "\"wb\"", ")", "as", "fc", ":", "\n", "        ", "pickle", ".", "dump", "(", "weight_dicts", ",", "fc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.load_checkpoint": [[90, 108], ["open", "pickle.load", "model.from_dicts", "model.from_dicts", "isinstance", "_dict.items", "new_dicts.append", "new_dicts.append", "name.split", "new_dict.update"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.from_dicts", "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.from_dicts"], ["", "", "def", "load_checkpoint", "(", "model", ",", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "fc", ":", "\n", "        ", "dicts", "=", "pickle", ".", "load", "(", "fc", ")", "\n", "", "try", ":", "\n", "        ", "model", ".", "from_dicts", "(", "dicts", ")", "\n", "", "except", ":", "\n", "        ", "new_dicts", "=", "[", "]", "\n", "for", "_dict", "in", "dicts", ":", "\n", "            ", "new_dict", "=", "{", "}", "\n", "if", "isinstance", "(", "_dict", ",", "OrderedDict", ")", ":", "\n", "                ", "for", "name", ",", "param", "in", "_dict", ".", "items", "(", ")", ":", "\n", "                    ", "namel", "=", "name", ".", "split", "(", "'.'", ")", "\n", "key", "=", "'.'", ".", "join", "(", "namel", "[", "1", ":", "]", ")", "\n", "new_dict", ".", "update", "(", "{", "key", ":", "param", "}", ")", "\n", "", "new_dicts", ".", "append", "(", "new_dict", ")", "\n", "", "else", ":", "\n", "                ", "new_dicts", ".", "append", "(", "_dict", ")", "\n", "", "", "model", ".", "from_dicts", "(", "new_dicts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.parse_path": [[109, 114], ["[].split", "path.split"], "function", ["None"], ["", "", "def", "parse_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "is", "None", ":", "\n", "        ", "return", "''", "\n", "\n", "", "return", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.args_to_str_src": [[115, 117], ["utils.parse_path"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.parse_path"], ["", "def", "args_to_str_src", "(", "args", ")", ":", "\n", "    ", "return", "'_'", ".", "join", "(", "[", "args", ".", "model", ",", "args", ".", "dataset", ",", "parse_path", "(", "args", ".", "source_path", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.args_to_str": [[118, 120], ["utils.parse_path", "utils.parse_path"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.parse_path", "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.parse_path"], ["", "def", "args_to_str", "(", "args", ")", ":", "\n", "    ", "return", "'_'", ".", "join", "(", "[", "args", ".", "model", ",", "args", ".", "dataset", ",", "parse_path", "(", "args", ".", "source_path", ")", ",", "parse_path", "(", "args", ".", "target_path", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_list.ImageList.__init__": [[49, 64], ["data_list.make_dataset", "len", "copy.deepcopy", "data_list.ImageList.rand_aug_transform.transforms.insert", "augmentations.RandAugment"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_list.make_dataset"], ["def", "__init__", "(", "self", ",", "image_list", ",", "labels", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "loader", "=", "default_loader", ",", "rand_aug", "=", "False", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "image_list", ",", "labels", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "Exception", "\n", "\n", "", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "labels", "=", "[", "label", "for", "(", "_", ",", "label", ")", "in", "imgs", "]", "\n", "self", ".", "rand_aug", "=", "rand_aug", "\n", "if", "self", ".", "rand_aug", ":", "\n", "            ", "self", ".", "rand_aug_transform", "=", "copy", ".", "deepcopy", "(", "self", ".", "transform", ")", "\n", "self", ".", "rand_aug_transform", ".", "transforms", ".", "insert", "(", "0", ",", "RandAugment", "(", "1", ",", "2.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_list.ImageList.__getitem__": [[65, 84], ["data_list.ImageList.loader", "data_list.ImageList.transform", "data_list.ImageList.target_transform", "data_list.ImageList.rand_aug_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", ",", "target", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img_", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img_", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "if", "self", ".", "rand_aug", ":", "\n", "            ", "rand_img", "=", "self", ".", "rand_aug_transform", "(", "img_", ")", "\n", "return", "img", ",", "target", ",", "index", ",", "rand_img", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "target", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_list.ImageList.__len__": [[85, 87], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_list.make_dataset": [[6, 16], ["len", "len", "image_list[].strip", "range", "image_list[].split", "numpy.array", "int", "val.split", "val.split", "int", "val.split", "val.split"], "function", ["None"], ["def", "make_dataset", "(", "image_list", ",", "labels", ")", ":", "\n", "    ", "if", "labels", ":", "\n", "      ", "len_", "=", "len", "(", "image_list", ")", "\n", "images", "=", "[", "(", "image_list", "[", "i", "]", ".", "strip", "(", ")", ",", "labels", "[", "i", ",", ":", "]", ")", "for", "i", "in", "range", "(", "len_", ")", "]", "\n", "", "else", ":", "\n", "      ", "if", "len", "(", "image_list", "[", "0", "]", ".", "split", "(", ")", ")", ">", "2", ":", "\n", "        ", "images", "=", "[", "(", "val", ".", "split", "(", ")", "[", "0", "]", ",", "np", ".", "array", "(", "[", "int", "(", "la", ")", "for", "la", "in", "val", ".", "split", "(", ")", "[", "1", ":", "]", "]", ")", ")", "for", "val", "in", "image_list", "]", "\n", "", "else", ":", "\n", "        ", "images", "=", "[", "(", "val", ".", "split", "(", ")", "[", "0", "]", ",", "int", "(", "val", ".", "split", "(", ")", "[", "1", "]", ")", ")", "for", "val", "in", "image_list", "]", "\n", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_list.pil_loader": [[18, 23], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["", "def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_list.default_loader": [[24, 26], ["data_list.pil_loader"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_list.pil_loader"], ["", "", "", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.RandAugment.__init__": [[253, 257], ["augmentations.augment_list"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.augment_list"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "m", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "\n", "self", ".", "m", "=", "m", "# [0, 30]", "\n", "self", ".", "augment_list", "=", "augment_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.RandAugment.__call__": [[258, 269], ["random.choices", "op", "float", "float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "if", "self", ".", "n", "==", "0", ":", "\n", "            ", "return", "img", "\n", "\n", "", "ops", "=", "random", ".", "choices", "(", "self", ".", "augment_list", ",", "k", "=", "self", ".", "n", ")", "\n", "for", "op", ",", "minval", ",", "maxval", "in", "ops", ":", "\n", "            ", "val", "=", "(", "float", "(", "self", ".", "m", ")", "/", "30", ")", "*", "float", "(", "maxval", "-", "minval", ")", "+", "minval", "\n", "img", "=", "op", "(", "img", ",", "val", ")", "\n", "\n", "", "return", "img", "", "", "", ""]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.ShearX": [[11, 16], ["img.transform", "random.random"], "function", ["None"], ["def", "ShearX", "(", "img", ",", "v", ")", ":", "# [-0.3, 0.3]", "\n", "    ", "assert", "-", "0.3", "<=", "v", "<=", "0.3", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "v", ",", "0", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.ShearY": [[18, 23], ["img.transform", "random.random"], "function", ["None"], ["", "def", "ShearY", "(", "img", ",", "v", ")", ":", "# [-0.3, 0.3]", "\n", "    ", "assert", "-", "0.3", "<=", "v", "<=", "0.3", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "v", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.TranslateX": [[25, 31], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateX", "(", "img", ",", "v", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "    ", "assert", "-", "0.45", "<=", "v", "<=", "0.45", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "v", "*", "img", ".", "size", "[", "0", "]", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.TranslateXabs": [[33, 38], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateXabs", "(", "img", ",", "v", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "    ", "assert", "0", "<=", "v", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.TranslateY": [[40, 46], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateY", "(", "img", ",", "v", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "    ", "assert", "-", "0.45", "<=", "v", "<=", "0.45", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "v", "*", "img", ".", "size", "[", "1", "]", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.TranslateYabs": [[48, 53], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateYabs", "(", "img", ",", "v", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "    ", "assert", "0", "<=", "v", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Rotate": [[55, 60], ["img.rotate", "random.random"], "function", ["None"], ["", "def", "Rotate", "(", "img", ",", "v", ")", ":", "# [-30, 30]", "\n", "    ", "assert", "-", "30", "<=", "v", "<=", "30", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "rotate", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.AutoContrast": [[62, 64], ["PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast"], "function", ["None"], ["", "def", "AutoContrast", "(", "img", ",", "_", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "autocontrast", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Invert": [[66, 68], ["PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert"], "function", ["None"], ["", "def", "Invert", "(", "img", ",", "_", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "invert", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Equalize": [[70, 72], ["PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize"], "function", ["None"], ["", "def", "Equalize", "(", "img", ",", "_", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "equalize", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Flip": [[74, 76], ["PIL.ImageOps.mirror", "PIL.ImageOps.mirror", "PIL.ImageOps.mirror", "PIL.ImageOps.mirror"], "function", ["None"], ["", "def", "Flip", "(", "img", ",", "_", ")", ":", "# not from the paper", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "mirror", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Solarize": [[78, 81], ["PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize"], "function", ["None"], ["", "def", "Solarize", "(", "img", ",", "v", ")", ":", "# [0, 256]", "\n", "    ", "assert", "0", "<=", "v", "<=", "256", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.SolarizeAdd": [[83, 90], ["numpy.array().astype", "numpy.clip", "img_np.astype.astype", "PIL.Image.fromarray", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "numpy.array"], "function", ["None"], ["", "def", "SolarizeAdd", "(", "img", ",", "addition", "=", "0", ",", "threshold", "=", "128", ")", ":", "\n", "    ", "img_np", "=", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "img_np", "=", "img_np", "+", "addition", "\n", "img_np", "=", "np", ".", "clip", "(", "img_np", ",", "0", ",", "255", ")", "\n", "img_np", "=", "img_np", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_np", ")", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Posterize": [[92, 96], ["int", "max", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize"], "function", ["None"], ["", "def", "Posterize", "(", "img", ",", "v", ")", ":", "# [4, 8]", "\n", "    ", "v", "=", "int", "(", "v", ")", "\n", "v", "=", "max", "(", "1", ",", "v", ")", "\n", "return", "PIL", ".", "ImageOps", ".", "posterize", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Contrast": [[98, 101], ["PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Contrast", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Contrast", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Contrast", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Contrast"], ["", "def", "Contrast", "(", "img", ",", "v", ")", ":", "# [0.1,1.9]", "\n", "    ", "assert", "0.1", "<=", "v", "<=", "1.9", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Color": [[103, 106], ["PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Color", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Color", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Color", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Color"], ["", "def", "Color", "(", "img", ",", "v", ")", ":", "# [0.1,1.9]", "\n", "    ", "assert", "0.1", "<=", "v", "<=", "1.9", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Brightness": [[108, 111], ["PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Brightness", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Brightness", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Brightness", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Brightness"], ["", "def", "Brightness", "(", "img", ",", "v", ")", ":", "# [0.1,1.9]", "\n", "    ", "assert", "0.1", "<=", "v", "<=", "1.9", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Sharpness": [[113, 116], ["PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Sharpness", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Sharpness", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Sharpness", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Sharpness"], ["", "def", "Sharpness", "(", "img", ",", "v", ")", ":", "# [0.1,1.9]", "\n", "    ", "assert", "0.1", "<=", "v", "<=", "1.9", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Cutout": [[118, 125], ["augmentations.CutoutAbs"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.CutoutAbs"], ["", "def", "Cutout", "(", "img", ",", "v", ")", ":", "# [0, 60] => percentage: [0, 0.2]", "\n", "    ", "assert", "0.0", "<=", "v", "<=", "0.2", "\n", "if", "v", "<=", "0.", ":", "\n", "        ", "return", "img", "\n", "\n", "", "v", "=", "v", "*", "img", ".", "size", "[", "0", "]", "\n", "return", "CutoutAbs", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.CutoutAbs": [[127, 146], ["numpy.random.uniform", "numpy.random.uniform", "int", "int", "min", "min", "img.copy.copy", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "max", "max", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw"], "function", ["None"], ["", "def", "CutoutAbs", "(", "img", ",", "v", ")", ":", "# [0, 60] => percentage: [0, 0.2]", "\n", "# assert 0 <= v <= 20", "\n", "    ", "if", "v", "<", "0", ":", "\n", "        ", "return", "img", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x0", "=", "np", ".", "random", ".", "uniform", "(", "w", ")", "\n", "y0", "=", "np", ".", "random", ".", "uniform", "(", "h", ")", "\n", "\n", "x0", "=", "int", "(", "max", "(", "0", ",", "x0", "-", "v", "/", "2.", ")", ")", "\n", "y0", "=", "int", "(", "max", "(", "0", ",", "y0", "-", "v", "/", "2.", ")", ")", "\n", "x1", "=", "min", "(", "w", ",", "x0", "+", "v", ")", "\n", "y1", "=", "min", "(", "h", ",", "y0", "+", "v", ")", "\n", "\n", "xy", "=", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "color", "=", "(", "125", ",", "123", ",", "114", ")", "\n", "# color = (0, 0, 0)", "\n", "img", "=", "img", ".", "copy", "(", ")", "\n", "PIL", ".", "ImageDraw", ".", "Draw", "(", "img", ")", ".", "rectangle", "(", "xy", ",", "color", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.SamplePairing": [[148, 155], ["numpy.random.choice", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.blend", "PIL.Image.blend", "PIL.Image.blend", "PIL.Image.blend", "len"], "function", ["None"], ["", "def", "SamplePairing", "(", "imgs", ")", ":", "# [0, 0.4]", "\n", "    ", "def", "f", "(", "img1", ",", "v", ")", ":", "\n", "        ", "i", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "imgs", ")", ")", "\n", "img2", "=", "PIL", ".", "Image", ".", "fromarray", "(", "imgs", "[", "i", "]", ")", "\n", "return", "PIL", ".", "Image", ".", "blend", "(", "img1", ",", "img2", ",", "v", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity": [[157, 159], ["None"], "function", ["None"], ["", "def", "Identity", "(", "img", ",", "v", ")", ":", "\n", "    ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.augment_list": [[161, 204], ["None"], "function", ["None"], ["", "def", "augment_list", "(", ")", ":", "# 16 oeprations and their ranges", "\n", "# https://github.com/google-research/uda/blob/master/image/randaugment/policies.py#L57", "\n", "# l = [", "\n", "#     (Identity, 0., 1.0),", "\n", "#     (ShearX, 0., 0.3),  # 0", "\n", "#     (ShearY, 0., 0.3),  # 1", "\n", "#     (TranslateX, 0., 0.33),  # 2", "\n", "#     (TranslateY, 0., 0.33),  # 3", "\n", "#     (Rotate, 0, 30),  # 4", "\n", "#     (AutoContrast, 0, 1),  # 5", "\n", "#     (Invert, 0, 1),  # 6", "\n", "#     (Equalize, 0, 1),  # 7", "\n", "#     (Solarize, 0, 110),  # 8", "\n", "#     (Posterize, 4, 8),  # 9", "\n", "#     # (Contrast, 0.1, 1.9),  # 10", "\n", "#     (Color, 0.1, 1.9),  # 11", "\n", "#     (Brightness, 0.1, 1.9),  # 12", "\n", "#     (Sharpness, 0.1, 1.9),  # 13", "\n", "#     # (Cutout, 0, 0.2),  # 14", "\n", "#     # (SamplePairing(imgs), 0, 0.4),  # 15", "\n", "# ]", "\n", "\n", "# https://github.com/tensorflow/tpu/blob/8462d083dd89489a79e3200bcc8d4063bf362186/models/official/efficientnet/autoaugment.py#L505", "\n", "    ", "l", "=", "[", "\n", "(", "AutoContrast", ",", "0", ",", "1", ")", ",", "\n", "(", "Equalize", ",", "0", ",", "1", ")", ",", "\n", "(", "Invert", ",", "0", ",", "1", ")", ",", "\n", "(", "Rotate", ",", "0", ",", "30", ")", ",", "\n", "(", "Posterize", ",", "0", ",", "4", ")", ",", "\n", "(", "Solarize", ",", "0", ",", "256", ")", ",", "\n", "(", "SolarizeAdd", ",", "0", ",", "110", ")", ",", "\n", "(", "Color", ",", "0.1", ",", "1.9", ")", ",", "\n", "(", "Contrast", ",", "0.1", ",", "1.9", ")", ",", "\n", "(", "Brightness", ",", "0.1", ",", "1.9", ")", ",", "\n", "(", "Sharpness", ",", "0.1", ",", "1.9", ")", ",", "\n", "(", "ShearX", ",", "0.", ",", "0.3", ")", ",", "\n", "(", "ShearY", ",", "0.", ",", "0.3", ")", ",", "\n", "(", "CutoutAbs", ",", "0", ",", "40", ")", ",", "\n", "(", "TranslateXabs", ",", "0.", ",", "100", ")", ",", "\n", "(", "TranslateYabs", ",", "0.", ",", "100", ")", ",", "\n", "]", "\n", "\n", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_provider.ForeverDataIterator.__init__": [[78, 81], ["iter"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_loader", ")", ":", "\n", "        ", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "iter", "=", "iter", "(", "self", ".", "data_loader", "or", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_provider.ForeverDataIterator.__next__": [[82, 89], ["next", "iter", "next"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "data", "=", "next", "(", "self", ".", "iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "iter", "=", "iter", "(", "self", ".", "data_loader", ")", "\n", "data", "=", "next", "(", "self", ".", "iter", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_provider.ForeverDataIterator.__len__": [[90, 92], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_loader", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_provider.get_dataloader_from_image_filepath": [[5, 43], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "data_list.ImageList", "torch.DataLoader", "data_list.ImageList", "torch.DataLoader", "open().readlines", "torchvision.transforms.Compose", "open().readlines", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "open", "torchvision.transforms.Resize", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "open", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor"], "function", ["None"], ["def", "get_dataloader_from_image_filepath", "(", "images_file_path", ",", "batch_size", "=", "32", ",", "resize_size", "=", "256", ",", "is_train", "=", "True", ",", "crop_size", "=", "224", ",", "\n", "center_crop", "=", "True", ",", "rand_aug", "=", "False", ",", "random_resized_crop", "=", "False", ",", "num_workers", "=", "4", ")", ":", "\n", "    ", "if", "images_file_path", "is", "None", ":", "\n", "        ", "return", "None", "\n", "\n", "", "normalize", "=", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "is_train", "is", "not", "True", ":", "\n", "        ", "transformer", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "[", "resize_size", ",", "resize_size", "]", ")", ",", "\n", "T", ".", "CenterCrop", "(", "crop_size", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", ")", "\n", "images", "=", "ImageList", "(", "open", "(", "images_file_path", ")", ".", "readlines", "(", ")", ",", "transform", "=", "transformer", ")", "\n", "images_loader", "=", "util_data", ".", "DataLoader", "(", "images", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "", "else", ":", "\n", "        ", "if", "center_crop", ":", "\n", "            ", "transformer", "=", "T", ".", "Compose", "(", "[", "T", ".", "Resize", "(", "[", "resize_size", ",", "resize_size", "]", ")", ",", "\n", "T", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "CenterCrop", "(", "crop_size", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", ")", "\n", "", "elif", "random_resized_crop", ":", "\n", "            ", "transformer", "=", "T", ".", "Compose", "(", "[", "T", ".", "Resize", "(", "[", "resize_size", ",", "resize_size", "]", ")", ",", "\n", "T", ".", "RandomCrop", "(", "crop_size", ")", ",", "\n", "T", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", ")", "\n", "", "else", ":", "\n", "            ", "transformer", "=", "T", ".", "Compose", "(", "[", "T", ".", "Resize", "(", "[", "resize_size", ",", "resize_size", "]", ")", ",", "\n", "T", ".", "RandomResizedCrop", "(", "crop_size", ")", ",", "\n", "T", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", ")", "\n", "\n", "", "images", "=", "ImageList", "(", "open", "(", "images_file_path", ")", ".", "readlines", "(", ")", ",", "transform", "=", "transformer", ",", "rand_aug", "=", "rand_aug", ")", "\n", "images_loader", "=", "util_data", ".", "DataLoader", "(", "images", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "drop_last", "=", "True", ")", "\n", "\n", "", "return", "images_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_provider.get_dataloaders": [[45, 73], ["data_provider.get_dataloader_from_image_filepath", "data_provider.get_dataloader_from_image_filepath", "data_provider.get_dataloader_from_image_filepath", "data_provider.get_dataloader_from_image_filepath", "type", "data_provider.get_dataloader_from_image_filepath", "get_dataloader_from_image_filepath.append", "data_provider.get_dataloader_from_image_filepath"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_provider.get_dataloader_from_image_filepath", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_provider.get_dataloader_from_image_filepath", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_provider.get_dataloader_from_image_filepath", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_provider.get_dataloader_from_image_filepath", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_provider.get_dataloader_from_image_filepath", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_provider.get_dataloader_from_image_filepath"], ["", "def", "get_dataloaders", "(", "args", ")", ":", "\n", "    ", "dataloaders", "=", "{", "}", "\n", "source_train_loader", "=", "get_dataloader_from_image_filepath", "(", "args", ".", "source_path", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "center_crop", "=", "args", ".", "center_crop", ",", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "random_resized_crop", "=", "args", ".", "random_resized_crop", ")", "\n", "target_train_loader", "=", "get_dataloader_from_image_filepath", "(", "args", ".", "target_path", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "center_crop", "=", "args", ".", "center_crop", ",", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "rand_aug", "=", "args", ".", "rand_aug", ",", "random_resized_crop", "=", "args", ".", "random_resized_crop", ")", "\n", "source_val_loader", "=", "get_dataloader_from_image_filepath", "(", "args", ".", "source_path", ",", "batch_size", "=", "args", ".", "batch_size", ",", "is_train", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "target_val_loader", "=", "get_dataloader_from_image_filepath", "(", "args", ".", "target_path", ",", "batch_size", "=", "args", ".", "batch_size", ",", "is_train", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "if", "type", "(", "args", ".", "test_path", ")", "is", "list", ":", "\n", "        ", "test_loader", "=", "[", "]", "\n", "for", "tst_addr", "in", "args", ".", "test_path", ":", "\n", "            ", "test_loader", ".", "append", "(", "get_dataloader_from_image_filepath", "(", "tst_addr", ",", "batch_size", "=", "args", ".", "batch_size", ",", "is_train", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "test_loader", "=", "get_dataloader_from_image_filepath", "(", "args", ".", "test_path", ",", "batch_size", "=", "args", ".", "batch_size", ",", "is_train", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "", "dataloaders", "[", "\"source_tr\"", "]", "=", "source_train_loader", "\n", "dataloaders", "[", "\"target_tr\"", "]", "=", "target_train_loader", "\n", "dataloaders", "[", "\"source_val\"", "]", "=", "source_val_loader", "\n", "dataloaders", "[", "\"target_val\"", "]", "=", "target_val_loader", "\n", "dataloaders", "[", "\"test\"", "]", "=", "test_loader", "\n", "\n", "return", "dataloaders", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.DropPath.__init__": [[41, 44], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "DropPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.DropPath.forward": [[45, 47], ["ViT.drop_path"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "drop_path", "(", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.PatchEmbed.__init__": [[59, 71], ["torch.Module.__init__", "to_2tuple", "to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.__init__", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ",", "norm_layer", "=", "None", ",", "flatten", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "grid_size", "=", "(", "img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ",", "img_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", ")", "\n", "self", ".", "num_patches", "=", "self", ".", "grid_size", "[", "0", "]", "*", "self", ".", "grid_size", "[", "1", "]", "\n", "self", ".", "flatten", "=", "flatten", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "if", "norm_layer", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.PatchEmbed.forward": [[72, 81], ["ViT.PatchEmbed.proj", "ViT.PatchEmbed.norm", "x.flatten().transpose.flatten().transpose.flatten().transpose", "x.flatten().transpose.flatten().transpose.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "assert", "H", "==", "self", ".", "img_size", "[", "0", "]", "and", "W", "==", "self", ".", "img_size", "[", "1", "]", ",", "f\"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]}).\"", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "if", "self", ".", "flatten", ":", "\n", "            ", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "# BCHW -> BNC", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.Mlp.__init__": [[83, 91], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.Mlp.forward": [[92, 99], ["ViT.Mlp.fc1", "ViT.Mlp.act", "ViT.Mlp.drop", "ViT.Mlp.fc2", "ViT.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.Attention.__init__": [[101, 112], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.Attention.forward": [[113, 126], ["ViT.Attention.qkv().reshape().permute", "ViT.Attention.softmax", "ViT.Attention.attn_drop", "ViT.Attention.proj", "ViT.Attention.qkv().reshape", "k.transpose", "ViT.Attention.qkv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.Block.__init__": [[129, 140], ["torch.Module.__init__", "norm_layer", "AttentionModule", "norm_layer", "int", "ViT.Mlp", "ViT.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.__init__", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "AttentionModule", "=", "Attention", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "AttentionModule", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.Block.forward": [[141, 147], ["ViT.Block.attn", "ViT.Block.norm1", "ViT.Block.drop_path", "ViT.Block.drop_path", "ViT.Block.mlp", "ViT.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.drop_path", "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", "\n", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "y", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.VisionTransformer.__init__": [[157, 211], ["torch.Module.__init__", "embed_layer", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sequential", "torch.Sequential", "torch.Sequential", "norm_layer", "ViT.VisionTransformer.init_weights", "functools.partial", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "ViT.Block", "range"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.__init__", "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.VisionTransformer.init_weights", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "\n", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "distilled", "=", "False", ",", "\n", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "embed_layer", "=", "PatchEmbed", ",", "norm_layer", "=", "None", ",", "\n", "act_layer", "=", "None", ",", "weight_init", "=", "''", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img_size (int, tuple): input image size\n            patch_size (int, tuple): patch size\n            in_chans (int): number of input channels\n            num_classes (int): number of classes for classification head\n            embed_dim (int): embedding dimension\n            depth (int): depth of transformer\n            num_heads (int): number of attention heads\n            mlp_ratio (int): ratio of mlp hidden dim to embedding dim\n            qkv_bias (bool): enable bias for qkv if True\n            distilled (bool): model includes a distillation token and head as in DeiT models\n            drop_rate (float): dropout rate\n            attn_drop_rate (float): attention dropout rate\n            drop_path_rate (float): stochastic depth rate\n            embed_layer (nn.Module): patch embedding layer\n            norm_layer: (nn.Module): normalization layer\n            weight_init: (str): weight init scheme\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "self", ".", "embed_dim", "=", "embed_dim", "# num_features for consistency with other models", "\n", "self", ".", "num_tokens", "=", "2", "if", "distilled", "else", "1", "\n", "norm_layer", "=", "norm_layer", "or", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", "\n", "act_layer", "=", "act_layer", "or", "nn", ".", "GELU", "\n", "\n", "self", ".", "patch_embed", "=", "embed_layer", "(", "\n", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ")", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "dist_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "if", "distilled", "else", "None", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "self", ".", "num_tokens", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "act_layer", "=", "act_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "\n", "# Classifier head(s)", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "self", ".", "num_features", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "head_dist", "=", "None", "\n", "if", "distilled", ":", "\n", "            ", "self", ".", "head_dist", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "self", ".", "init_weights", "(", "weight_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.VisionTransformer.init_weights": [[212, 224], ["helpers.trunc_normal_", "mode.startswith", "helpers.trunc_normal_", "helpers.named_apply", "helpers.trunc_normal_", "ViT.VisionTransformer.apply", "math.log", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.trunc_normal_", "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.trunc_normal_", "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.named_apply", "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.trunc_normal_"], ["", "def", "init_weights", "(", "self", ",", "mode", "=", "''", ")", ":", "\n", "        ", "assert", "mode", "in", "(", "'jax'", ",", "'jax_nlhb'", ",", "'nlhb'", ",", "''", ")", "\n", "head_bias", "=", "-", "math", ".", "log", "(", "self", ".", "num_classes", ")", "if", "'nlhb'", "in", "mode", "else", "0.", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "if", "self", ".", "dist_token", "is", "not", "None", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "dist_token", ",", "std", "=", ".02", ")", "\n", "", "if", "mode", ".", "startswith", "(", "'jax'", ")", ":", "\n", "# leave cls token as zeros to match jax impl", "\n", "            ", "named_apply", "(", "partial", "(", "_init_vit_weights", ",", "head_bias", "=", "head_bias", ",", "jax_impl", "=", "True", ")", ",", "self", ")", "\n", "", "else", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "_init_vit_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.VisionTransformer._init_weights": [[225, 228], ["helpers._init_vit_weights"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.helpers._init_vit_weights"], ["", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "# this fn left here for compat with downstream users", "\n", "        ", "_init_vit_weights", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.VisionTransformer.load_pretrained": [[229, 232], ["torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "helpers._load_weights"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.helpers._load_weights"], ["", "@", "torch", ".", "jit", ".", "ignore", "(", ")", "\n", "def", "load_pretrained", "(", "self", ",", "checkpoint_path", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "_load_weights", "(", "self", ",", "checkpoint_path", ",", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.VisionTransformer.no_weight_decay": [[233, 236], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'pos_embed'", ",", "'cls_token'", ",", "'dist_token'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.VisionTransformer.get_classifier": [[237, 242], ["None"], "methods", ["None"], ["", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "dist_token", "is", "None", ":", "\n", "            ", "return", "self", ".", "head", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "head", ",", "self", ".", "head_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.VisionTransformer.reset_classifier": [[243, 248], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity"], ["", "", "def", "reset_classifier", "(", "self", ",", "num_classes", ",", "global_pool", "=", "''", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "if", "self", ".", "num_tokens", "==", "2", ":", "\n", "            ", "self", ".", "head_dist", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.VisionTransformer.forward_features": [[249, 260], ["ViT.VisionTransformer.patch_embed", "ViT.VisionTransformer.cls_token.expand", "ViT.VisionTransformer.pos_drop", "ViT.VisionTransformer.blocks", "ViT.VisionTransformer.norm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ViT.VisionTransformer.dist_token.expand"], "methods", ["None"], ["", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "cls_token", "=", "self", ".", "cls_token", ".", "expand", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", "# stole cls_tokens impl from Phil Wang, thanks", "\n", "if", "self", ".", "dist_token", "is", "None", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "cls_token", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "cls_token", ",", "self", ".", "dist_token", ".", "expand", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "", "x", "=", "self", ".", "pos_drop", "(", "x", "+", "self", ".", "pos_embed", ")", "\n", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.VT.__init__": [[282, 316], ["ViT.VisionTransformer.__init__", "functools.partial", "ViT.PatchEmbed", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sequential", "torch.Sequential", "torch.Sequential", "functools.partial.", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "x.item", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "ViT.Block", "range"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.__init__", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity"], ["    ", "def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "\n", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "\n", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "distilled", "=", "False", ",", "\n", "args", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "VisionTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "self", ".", "embed_dim", "=", "embed_dim", "# num_features for consistency with other models", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "distilled", "=", "distilled", "\n", "\n", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "\n", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ")", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "if", "distilled", ":", "\n", "            ", "self", ".", "dist_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "2", ",", "embed_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "1", ",", "embed_dim", ")", ")", "\n", "", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "i", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "self", ".", "num_features", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "if", "distilled", ":", "\n", "            ", "self", ".", "head_dist", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.VT.forward_features": [[318, 337], ["ViT.VT.patch_embed", "ViT.VT.cls_token.expand", "ViT.VT.pos_drop", "enumerate", "ViT.VT.norm", "ViT.VT.dist_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "blk"], "methods", ["None"], ["", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", "# stole cls_tokens impl from Phil Wang, thanks", "\n", "\n", "if", "self", ".", "distilled", ":", "\n", "            ", "dist_tokens", "=", "self", ".", "dist_token", ".", "expand", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "dist_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "", "x", "=", "x", "+", "self", ".", "pos_embed", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n", "for", "layer", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "x", "[", ":", ",", "0", "]", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.ViTNet.__init__": [[340, 368], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "ViT.ViTNet.bottleneck[].weight.data.normal_", "ViT.ViTNet.bottleneck[].bias.data.fill_", "ViT.ViTNet.classifier[].weight.data.normal_", "ViT.ViTNet.classifier[].bias.data.fill_", "ViT.ViTNet.parameter_list.extend", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "ViT.ViTNet.base_network.parameters", "ViT.ViTNet.classifier.parameters", "ViT.ViTNet.bottleneck.parameters"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_net", "=", "'vit_base_patch16_224'", ",", "use_bottleneck", "=", "True", ",", "bottleneck_dim", "=", "1024", ",", "width", "=", "1024", ",", "class_num", "=", "31", ",", "args", "=", "None", ")", ":", "\n", "        ", "super", "(", "ViTNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_network", "=", "vit_model", "[", "base_net", "]", "(", "pretrained", "=", "True", ",", "args", "=", "args", ",", "VisionTransformerModule", "=", "VT", ")", "\n", "self", ".", "use_bottleneck", "=", "use_bottleneck", "\n", "\n", "if", "self", ".", "use_bottleneck", ":", "\n", "            ", "self", ".", "bottleneck_layer", "=", "[", "nn", ".", "Linear", "(", "self", ".", "base_network", ".", "embed_dim", ",", "bottleneck_dim", ")", ",", "nn", ".", "BatchNorm1d", "(", "bottleneck_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", ")", "\n", "\n", "", "classifier_dim", "=", "bottleneck_dim", "if", "use_bottleneck", "else", "self", ".", "base_network", ".", "embed_dim", "\n", "self", ".", "classifier_layer", "=", "[", "nn", ".", "Linear", "(", "classifier_dim", ",", "width", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "0.5", ")", ",", "nn", ".", "Linear", "(", "width", ",", "class_num", ")", "]", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "classifier_layer", ")", "\n", "\n", "if", "self", ".", "use_bottleneck", ":", "\n", "            ", "self", ".", "bottleneck", "[", "0", "]", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.005", ")", "\n", "self", ".", "bottleneck", "[", "0", "]", ".", "bias", ".", "data", ".", "fill_", "(", "0.1", ")", "\n", "\n", "", "for", "dep", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "classifier", "[", "dep", "*", "3", "]", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "classifier", "[", "dep", "*", "3", "]", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n", "", "self", ".", "parameter_list", "=", "[", "\n", "{", "\"params\"", ":", "self", ".", "base_network", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "0.1", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "classifier", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "1", "}", "]", "\n", "\n", "if", "self", ".", "use_bottleneck", ":", "\n", "            ", "self", ".", "parameter_list", ".", "extend", "(", "[", "{", "\"params\"", ":", "self", ".", "bottleneck", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "1", "}", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.ViTNet.forward": [[370, 378], ["ViT.ViTNet.base_network.forward_features", "ViT.ViTNet.classifier", "ViT.ViTNet.bottleneck"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.VT.forward_features"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "features", "=", "self", ".", "base_network", ".", "forward_features", "(", "inputs", ")", "\n", "if", "self", ".", "use_bottleneck", ":", "\n", "            ", "features", "=", "self", ".", "bottleneck", "(", "features", ")", "\n", "\n", "", "outputs", "=", "self", ".", "classifier", "(", "features", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.ViT.__init__": [[380, 387], ["ViT.ViTNet", "ViT.ViT.c_net.cuda"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base_net", "=", "'vit_base_patch16_224'", ",", "bottleneck_dim", "=", "1024", ",", "class_num", "=", "31", ",", "use_gpu", "=", "True", ",", "args", "=", "None", ")", ":", "\n", "        ", "self", ".", "c_net", "=", "ViTNet", "(", "base_net", ",", "args", ".", "use_bottleneck", ",", "bottleneck_dim", ",", "class_num", ",", "args", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "is_train", "=", "False", "\n", "self", ".", "class_num", "=", "class_num", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "self", ".", "c_net", "=", "self", ".", "c_net", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.ViT.to_dicts": [[388, 390], ["ViT.ViT.c_net.state_dict"], "methods", ["None"], ["", "", "def", "to_dicts", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "c_net", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.ViT.from_dicts": [[391, 393], ["ViT.ViT.c_net.load_state_dict"], "methods", ["None"], ["", "def", "from_dicts", "(", "self", ",", "dicts", ")", ":", "\n", "        ", "self", ".", "c_net", ".", "load_state_dict", "(", "dicts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.ViT.get_loss": [[394, 413], ["ViT.ViT.c_net", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "all_losses.update", "all_losses.items", "args.writer.flush", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "args.writer.add_scalar", "args.writer.add_scalar", "value.item"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "inputs_source", ",", "inputs_target", ",", "labels_source", ",", "labels_target", ",", "args", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "c_net", "(", "inputs_source", ")", "\n", "\n", "classifier_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "outputs", ",", "labels_source", ")", "\n", "total_loss", "=", "classifier_loss", "\n", "\n", "if", "args", ".", "use_tensorboard", ":", "\n", "            ", "all_losses", "=", "{", "}", "\n", "all_losses", ".", "update", "(", "{", "'classifier_loss'", ":", "classifier_loss", "}", ")", "\n", "\n", "for", "key", ",", "value", "in", "all_losses", ".", "items", "(", ")", ":", "\n", "                ", "if", "torch", ".", "is_tensor", "(", "value", ")", ":", "\n", "                    ", "args", ".", "writer", ".", "add_scalar", "(", "key", ",", "value", ".", "item", "(", ")", ",", "self", ".", "iter_num", ")", "\n", "", "else", ":", "\n", "                    ", "args", ".", "writer", ".", "add_scalar", "(", "key", ",", "value", ",", "self", ".", "iter_num", ")", "\n", "", "", "args", ".", "writer", ".", "flush", "(", ")", "\n", "\n", "", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.ViT.__call__": [[414, 416], ["ViT.ViT.forward"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRTNet.forward"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "self", ".", "forward", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.ViT.forward": [[417, 420], ["ViT.ViT.c_net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "c_net", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.ViT.predict": [[421, 430], ["ViT.ViT.c_net", "torch.softmax", "torch.softmax", "torch.softmax", "NotImplementedError"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "inputs", ",", "domain", "=", "'target'", ",", "output", "=", "'prob'", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "c_net", "(", "inputs", ")", "\n", "if", "output", "==", "'prob'", ":", "\n", "            ", "softmax_outputs", "=", "F", ".", "softmax", "(", "outputs", ")", "\n", "return", "softmax_outputs", "\n", "", "elif", "output", "==", "'score'", ":", "\n", "            ", "return", "outputs", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Invalid output'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.ViT.get_parameter_list": [[431, 433], ["None"], "methods", ["None"], ["", "", "def", "get_parameter_list", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "c_net", ".", "parameter_list", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.ViT.set_train": [[434, 437], ["ViT.ViT.c_net.train"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.trainer.train.train"], ["", "def", "set_train", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "c_net", ".", "train", "(", "mode", ")", "\n", "self", ".", "is_train", "=", "mode", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.register_model": [[15, 20], ["None"], "function", ["None"], ["def", "register_model", "(", "name", ")", ":", "\n", "    ", "def", "re", "(", "cls", ")", ":", "\n", "        ", "vit_model", "[", "name", "]", "=", "cls", "\n", "return", "cls", "\n", "", "return", "re", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.drop_path": [[21, 37], ["random_tensor.floor_", "torch.rand", "torch.rand", "torch.rand", "x.div"], "function", ["None"], ["", "def", "drop_path", "(", "x", ",", "drop_prob", ":", "float", "=", "0.", ",", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).\n    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,\n    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...\n    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for\n    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use\n    'survival rate' as the argument.\n    \"\"\"", "\n", "if", "drop_prob", "==", "0.", "or", "not", "training", ":", "\n", "        ", "return", "x", "\n", "", "keep_prob", "=", "1", "-", "drop_prob", "\n", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "(", "1", ",", ")", "*", "(", "x", ".", "ndim", "-", "1", ")", "# work with diff dim tensors, not just 2D ConvNets", "\n", "random_tensor", "=", "keep_prob", "+", "torch", ".", "rand", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "random_tensor", ".", "floor_", "(", ")", "# binarize", "\n", "output", "=", "x", ".", "div", "(", "keep_prob", ")", "*", "random_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT._ntuple": [[48, 54], ["isinstance", "tuple", "itertools.repeat"], "function", ["None"], ["", "", "def", "_ntuple", "(", "n", ")", ":", "\n", "    ", "def", "parse", "(", "x", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "collections", ".", "abc", ".", "Iterable", ")", ":", "\n", "            ", "return", "x", "\n", "", "return", "tuple", "(", "repeat", "(", "x", ",", "n", ")", ")", "\n", "", "return", "parse", "\n", "", "to_2tuple", "=", "_ntuple", "(", "2", ")", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.vit_base_patch16_224": [[262, 270], ["ViT.register_model", "dict", "helpers._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.register_model", "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers._create_vision_transformer"], ["", "", "@", "register_model", "(", "'vit_base_patch16_224'", ")", "\n", "def", "vit_base_patch16_224", "(", "pretrained", "=", "False", ",", "args", "=", "None", ",", "VisionTransformerModule", "=", "VisionTransformer", ")", ":", "\n", "    ", "\"\"\" ViT-Base (ViT-B/16) from original paper (https://arxiv.org/abs/2010.11929).\n    ImageNet-1k weights fine-tuned from in21k @ 224x224, source https://github.com/google-research/vision_transformer.\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "args", "=", "args", ",", "VisionTransformerModule", "=", "VisionTransformerModule", ")", "\n", "model", "=", "_create_vision_transformer", "(", "'vit_base_patch16_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.vit_small_patch16_224": [[271, 279], ["ViT.register_model", "dict", "helpers._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.register_model", "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers._create_vision_transformer"], ["", "@", "register_model", "(", "'vit_small_patch16_224'", ")", "\n", "def", "vit_small_patch16_224", "(", "pretrained", "=", "False", ",", "args", "=", "None", ",", "VisionTransformerModule", "=", "VisionTransformer", ")", ":", "\n", "    ", "\"\"\" ViT-Small (ViT-S/16)\n    NOTE I've replaced my previous 'small' model definition and weights with the small variant from the DeiT paper\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "args", "=", "args", ",", "VisionTransformerModule", "=", "VisionTransformerModule", ")", "\n", "model", "=", "_create_vision_transformer", "(", "'vit_small_patch16_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViTgrl.ViTgrlNet.__init__": [[10, 43], ["torch.Module.__init__", "model.grl.WarmStartGradientReverseLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "ViTgrl.ViTgrlNet.bottleneck[].weight.data.normal_", "ViTgrl.ViTgrlNet.bottleneck[].bias.data.fill_", "ViTgrl.ViTgrlNet.discriminator[].weight.data.normal_", "ViTgrl.ViTgrlNet.discriminator[].bias.data.fill_", "ViTgrl.ViTgrlNet.classifier[].weight.data.normal_", "ViTgrl.ViTgrlNet.classifier[].bias.data.fill_", "ViTgrl.ViTgrlNet.parameter_list.extend", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "ViTgrl.ViTgrlNet.base_network.parameters", "ViTgrl.ViTgrlNet.classifier.parameters", "ViTgrl.ViTgrlNet.discriminator.parameters", "ViTgrl.ViTgrlNet.bottleneck.parameters"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_net", "=", "'vit_base_patch16_224'", ",", "use_bottleneck", "=", "True", ",", "bottleneck_dim", "=", "1024", ",", "width", "=", "1024", ",", "class_num", "=", "31", ",", "args", "=", "None", ")", ":", "\n", "        ", "super", "(", "ViTgrlNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_network", "=", "vit_model", "[", "base_net", "]", "(", "pretrained", "=", "True", ",", "args", "=", "args", ",", "VisionTransformerModule", "=", "VT", ")", "\n", "self", ".", "use_bottleneck", "=", "use_bottleneck", "\n", "self", ".", "grl", "=", "WarmStartGradientReverseLayer", "(", "alpha", "=", "1.0", ",", "lo", "=", "0.0", ",", "hi", "=", "0.1", ",", "max_iters", "=", "1000", ",", "auto_step", "=", "True", ")", "\n", "if", "self", ".", "use_bottleneck", ":", "\n", "            ", "self", ".", "bottleneck_layer", "=", "[", "nn", ".", "Linear", "(", "self", ".", "base_network", ".", "embed_dim", ",", "bottleneck_dim", ")", ",", "nn", ".", "BatchNorm1d", "(", "bottleneck_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", ")", "\n", "\n", "", "classifier_dim", "=", "bottleneck_dim", "if", "use_bottleneck", "else", "self", ".", "base_network", ".", "embed_dim", "\n", "self", ".", "classifier_layer", "=", "[", "nn", ".", "Linear", "(", "classifier_dim", ",", "width", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "0.5", ")", ",", "nn", ".", "Linear", "(", "width", ",", "class_num", ")", "]", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "classifier_layer", ")", "\n", "\n", "self", ".", "discriminator_layer", "=", "[", "nn", ".", "Linear", "(", "classifier_dim", ",", "width", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "0.5", ")", ",", "nn", ".", "Linear", "(", "width", ",", "1", ")", "]", "\n", "self", ".", "discriminator", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "discriminator_layer", ")", "\n", "\n", "if", "self", ".", "use_bottleneck", ":", "\n", "            ", "self", ".", "bottleneck", "[", "0", "]", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.005", ")", "\n", "self", ".", "bottleneck", "[", "0", "]", ".", "bias", ".", "data", ".", "fill_", "(", "0.1", ")", "\n", "\n", "", "for", "dep", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "discriminator", "[", "dep", "*", "3", "]", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "discriminator", "[", "dep", "*", "3", "]", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "self", ".", "classifier", "[", "dep", "*", "3", "]", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "classifier", "[", "dep", "*", "3", "]", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n", "", "self", ".", "parameter_list", "=", "[", "\n", "{", "\"params\"", ":", "self", ".", "base_network", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "0.1", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "classifier", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "1", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "discriminator", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "1", "}", "]", "\n", "if", "self", ".", "use_bottleneck", ":", "\n", "            ", "self", ".", "parameter_list", ".", "extend", "(", "[", "{", "\"params\"", ":", "self", ".", "bottleneck", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "1", "}", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViTgrl.ViTgrlNet.forward": [[45, 57], ["ViTgrl.ViTgrlNet.base_network.forward_features", "ViTgrl.ViTgrlNet.classifier", "ViTgrl.ViTgrlNet.bottleneck", "ViTgrl.ViTgrlNet.discriminator", "ViTgrl.ViTgrlNet.grl"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.VT.forward_features"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "features", "=", "self", ".", "base_network", ".", "forward_features", "(", "inputs", ")", "\n", "if", "self", ".", "use_bottleneck", ":", "\n", "            ", "features", "=", "self", ".", "bottleneck", "(", "features", ")", "\n", "\n", "", "outputs", "=", "self", ".", "classifier", "(", "features", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "outputs_dc", "=", "self", ".", "discriminator", "(", "self", ".", "grl", "(", "features", ")", ")", "\n", "return", "outputs", ",", "outputs_dc", "\n", "", "else", ":", "\n", "            ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViTgrl.ViTgrl.__init__": [[59, 67], ["ViTgrl.ViTgrlNet", "ViTgrl.ViTgrl.c_net.cuda"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base_net", "=", "'vit_base_patch16_224'", ",", "bottleneck_dim", "=", "1024", ",", "class_num", "=", "31", ",", "use_gpu", "=", "True", ",", "args", "=", "None", ")", ":", "\n", "        ", "self", ".", "c_net", "=", "ViTgrlNet", "(", "base_net", ",", "args", ".", "use_bottleneck", ",", "bottleneck_dim", ",", "class_num", ",", "args", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "is_train", "=", "False", "\n", "self", ".", "iter_num", "=", "0", "\n", "self", ".", "class_num", "=", "class_num", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "self", ".", "c_net", "=", "self", ".", "c_net", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViTgrl.ViTgrl.to_dicts": [[68, 70], ["ViTgrl.ViTgrl.c_net.state_dict"], "methods", ["None"], ["", "", "def", "to_dicts", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "c_net", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViTgrl.ViTgrl.from_dicts": [[71, 73], ["ViTgrl.ViTgrl.c_net.load_state_dict"], "methods", ["None"], ["", "def", "from_dicts", "(", "self", ",", "dicts", ")", ":", "\n", "        ", "self", ".", "c_net", ".", "load_state_dict", "(", "dicts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViTgrl.ViTgrl.get_loss": [[74, 106], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ViTgrl.ViTgrl.c_net", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "outputs.narrow", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "all_losses.update", "all_losses.update", "all_losses.items", "args.writer.flush", "labels_source.size", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "args.writer.add_scalar", "args.writer.add_scalar", "value.item", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "inputs_source", ",", "inputs_target", ",", "labels_source", ",", "labels_target", ",", "args", "=", "None", ")", ":", "\n", "\n", "        ", "inputs", "=", "torch", ".", "cat", "(", "(", "inputs_source", ",", "inputs_target", ")", ")", "\n", "outputs", ",", "outputs_dc", "=", "self", ".", "c_net", "(", "inputs", ")", "\n", "\n", "classifier_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "outputs", ".", "narrow", "(", "0", ",", "0", ",", "labels_source", ".", "size", "(", "0", ")", ")", ",", "labels_source", ")", "\n", "\n", "domain_loss", "=", "0.", "\n", "if", "args", ".", "domain_loss_weight", ">", "0", ":", "\n", "            ", "domain_labels", "=", "torch", ".", "cat", "(", "\n", "(", "torch", ".", "ones", "(", "inputs", ".", "shape", "[", "0", "]", "//", "2", ",", "device", "=", "inputs", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", ",", "\n", "torch", ".", "zeros", "(", "inputs", ".", "shape", "[", "0", "]", "//", "2", ",", "device", "=", "inputs", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", ")", ",", "\n", "0", ")", "\n", "domain_loss", "=", "nn", ".", "BCELoss", "(", ")", "(", "F", ".", "sigmoid", "(", "outputs_dc", ")", ".", "squeeze", "(", ")", ",", "domain_labels", ")", "*", "2", "\n", "\n", "", "self", ".", "iter_num", "+=", "1", "\n", "\n", "total_loss", "=", "classifier_loss", "*", "args", ".", "classifier_loss_weight", "+", "domain_loss", "*", "args", ".", "domain_loss_weight", "\n", "\n", "if", "args", ".", "use_tensorboard", ":", "\n", "            ", "all_losses", "=", "{", "}", "\n", "all_losses", ".", "update", "(", "{", "'classifier_loss'", ":", "classifier_loss", "}", ")", "\n", "all_losses", ".", "update", "(", "{", "'domain_loss'", ":", "domain_loss", "}", ")", "\n", "\n", "for", "key", ",", "value", "in", "all_losses", ".", "items", "(", ")", ":", "\n", "                ", "if", "torch", ".", "is_tensor", "(", "value", ")", ":", "\n", "                    ", "args", ".", "writer", ".", "add_scalar", "(", "key", ",", "value", ".", "item", "(", ")", ",", "self", ".", "iter_num", ")", "\n", "", "else", ":", "\n", "                    ", "args", ".", "writer", ".", "add_scalar", "(", "key", ",", "value", ",", "self", ".", "iter_num", ")", "\n", "", "", "args", ".", "writer", ".", "flush", "(", ")", "\n", "\n", "", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViTgrl.ViTgrl.__call__": [[107, 109], ["ViTgrl.ViTgrl.forward"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRTNet.forward"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "self", ".", "forward", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViTgrl.ViTgrl.forward": [[110, 113], ["ViTgrl.ViTgrl.c_net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "c_net", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViTgrl.ViTgrl.predict": [[114, 123], ["ViTgrl.ViTgrl.c_net", "torch.softmax", "torch.softmax", "torch.softmax", "NotImplementedError"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "inputs", ",", "domain", "=", "'target'", ",", "output", "=", "'prob'", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "c_net", "(", "inputs", ")", "\n", "if", "output", "==", "'prob'", ":", "\n", "            ", "softmax_outputs", "=", "F", ".", "softmax", "(", "outputs", ")", "\n", "return", "softmax_outputs", "\n", "", "elif", "output", "==", "'score'", ":", "\n", "            ", "return", "outputs", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Invalid output'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViTgrl.ViTgrl.get_parameter_list": [[124, 126], ["None"], "methods", ["None"], ["", "", "def", "get_parameter_list", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "c_net", ".", "parameter_list", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.ViTgrl.ViTgrl.set_train": [[127, 130], ["ViTgrl.ViTgrl.c_net.train"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.trainer.train.train"], ["", "def", "set_train", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "c_net", ".", "train", "(", "mode", ")", "\n", "self", ".", "is_train", "=", "mode", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tsun_ssrt.model.grl.GradientReverseFunction.forward": [[10, 15], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ":", "Any", ",", "input", ":", "torch", ".", "Tensor", ",", "coeff", ":", "Optional", "[", "float", "]", "=", "1.", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "ctx", ".", "coeff", "=", "coeff", "\n", "output", "=", "input", "*", "1.0", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.grl.GradientReverseFunction.backward": [[16, 19], ["grad_output.neg"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ":", "Any", ",", "grad_output", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "Any", "]", ":", "\n", "        ", "return", "grad_output", ".", "neg", "(", ")", "*", "ctx", ".", "coeff", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.grl.GradientReverseLayer.__init__": [[22, 24], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GradientReverseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.grl.GradientReverseLayer.forward": [[25, 27], ["GradientReverseFunction.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "return", "GradientReverseFunction", ".", "apply", "(", "*", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.grl.WarmStartGradientReverseLayer.__init__": [[55, 64], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.__init__"], ["def", "__init__", "(", "self", ",", "alpha", ":", "Optional", "[", "float", "]", "=", "1.0", ",", "lo", ":", "Optional", "[", "float", "]", "=", "0.0", ",", "hi", ":", "Optional", "[", "float", "]", "=", "1.", ",", "\n", "max_iters", ":", "Optional", "[", "int", "]", "=", "1000.", ",", "auto_step", ":", "Optional", "[", "bool", "]", "=", "False", ")", ":", "\n", "        ", "super", "(", "WarmStartGradientReverseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "lo", "=", "lo", "\n", "self", ".", "hi", "=", "hi", "\n", "self", ".", "iter_num", "=", "0", "\n", "self", ".", "max_iters", "=", "max_iters", "\n", "self", ".", "auto_step", "=", "auto_step", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.grl.WarmStartGradientReverseLayer.forward": [[65, 74], ["numpy.float", "GradientReverseFunction.apply", "grl.WarmStartGradientReverseLayer.step", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.grl.WarmStartGradientReverseLayer.step"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "coeff", "=", "np", ".", "float", "(", "\n", "2.0", "*", "(", "self", ".", "hi", "-", "self", ".", "lo", ")", "/", "(", "1.0", "+", "np", ".", "exp", "(", "-", "self", ".", "alpha", "*", "self", ".", "iter_num", "/", "self", ".", "max_iters", ")", ")", "\n", "-", "(", "self", ".", "hi", "-", "self", ".", "lo", ")", "+", "self", ".", "lo", "\n", ")", "\n", "if", "self", ".", "auto_step", ":", "\n", "            ", "self", ".", "step", "(", ")", "\n", "", "return", "GradientReverseFunction", ".", "apply", "(", "input", ",", "coeff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.grl.WarmStartGradientReverseLayer.step": [[75, 78], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "\"\"\"Increase iteration number :math:`i` by 1\"\"\"", "\n", "self", ".", "iter_num", "+=", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers._no_grad_trunc_normal_": [[21, 55], ["warnings.warn", "torch.no_grad", "torch.no_grad", "torch.no_grad", "helpers._no_grad_trunc_normal_.norm_cdf"], "function", ["None"], ["", "def", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", ":", "\n", "# Cut & paste from PyTorch official master until it's in a few official releases - RW", "\n", "# Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf", "\n", "    ", "def", "norm_cdf", "(", "x", ")", ":", "\n", "# Computes standard normal cumulative distribution function", "\n", "        ", "return", "(", "1.", "+", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.", ")", ")", ")", "/", "2.", "\n", "\n", "", "if", "(", "mean", "<", "a", "-", "2", "*", "std", ")", "or", "(", "mean", ">", "b", "+", "2", "*", "std", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"mean is more than 2 std from [a, b] in nn.init.trunc_normal_. \"", "\n", "\"The distribution of values may be incorrect.\"", ",", "\n", "stacklevel", "=", "2", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Values are generated by using a truncated uniform distribution and", "\n", "# then using the inverse CDF for the normal distribution.", "\n", "# Get upper and lower cdf values", "\n", "        ", "l", "=", "norm_cdf", "(", "(", "a", "-", "mean", ")", "/", "std", ")", "\n", "u", "=", "norm_cdf", "(", "(", "b", "-", "mean", ")", "/", "std", ")", "\n", "\n", "# Uniformly fill tensor with values from [l, u], then translate to", "\n", "# [2l-1, 2u-1].", "\n", "tensor", ".", "uniform_", "(", "2", "*", "l", "-", "1", ",", "2", "*", "u", "-", "1", ")", "\n", "\n", "# Use inverse cdf transform for normal distribution to get truncated", "\n", "# standard normal", "\n", "tensor", ".", "erfinv_", "(", ")", "\n", "\n", "# Transform to proper mean, std", "\n", "tensor", ".", "mul_", "(", "std", "*", "math", ".", "sqrt", "(", "2.", ")", ")", "\n", "tensor", ".", "add_", "(", "mean", ")", "\n", "\n", "# Clamp to ensure it's in the proper range", "\n", "tensor", ".", "clamp_", "(", "min", "=", "a", ",", "max", "=", "b", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.trunc_normal_": [[57, 76], ["helpers._no_grad_trunc_normal_"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.model.helpers._no_grad_trunc_normal_"], ["", "", "def", "trunc_normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ",", "a", "=", "-", "2.", ",", "b", "=", "2.", ")", ":", "\n", "# type: (Tensor, float, float, float, float) -> Tensor", "\n", "    ", "r\"\"\"Fills the input Tensor with values drawn from a truncated\n    normal distribution. The values are effectively drawn from the\n    normal distribution :math:`\\mathcal{N}(\\text{mean}, \\text{std}^2)`\n    with values outside :math:`[a, b]` redrawn until they are within\n    the bounds. The method used for generating the random values works\n    best when :math:`a \\leq \\text{mean} \\leq b`.\n    Args:\n        tensor: an n-dimensional `torch.Tensor`\n        mean: the mean of the normal distribution\n        std: the standard deviation of the normal distribution\n        a: the minimum cutoff value\n        b: the maximum cutoff value\n    Examples:\n        >>> w = torch.empty(3, 5)\n        >>> nn.init.trunc_normal_(w)\n    \"\"\"", "\n", "return", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.variance_scaling_": [[77, 98], ["torch.nn.init._calculate_fan_in_and_fan_out", "helpers.trunc_normal_", "tensor.normal_", "math.sqrt", "tensor.uniform_", "ValueError", "math.sqrt", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.trunc_normal_"], ["", "def", "variance_scaling_", "(", "tensor", ",", "scale", "=", "1.0", ",", "mode", "=", "'fan_in'", ",", "distribution", "=", "'normal'", ")", ":", "\n", "    ", "fan_in", ",", "fan_out", "=", "_calculate_fan_in_and_fan_out", "(", "tensor", ")", "\n", "if", "mode", "==", "'fan_in'", ":", "\n", "        ", "denom", "=", "fan_in", "\n", "", "elif", "mode", "==", "'fan_out'", ":", "\n", "        ", "denom", "=", "fan_out", "\n", "", "elif", "mode", "==", "'fan_avg'", ":", "\n", "        ", "denom", "=", "(", "fan_in", "+", "fan_out", ")", "/", "2", "\n", "\n", "", "variance", "=", "scale", "/", "denom", "\n", "\n", "if", "distribution", "==", "\"truncated_normal\"", ":", "\n", "# constant is stddev of standard normal truncated to (-2, 2)", "\n", "        ", "trunc_normal_", "(", "tensor", ",", "std", "=", "math", ".", "sqrt", "(", "variance", ")", "/", ".87962566103423978", ")", "\n", "", "elif", "distribution", "==", "\"normal\"", ":", "\n", "        ", "tensor", ".", "normal_", "(", "std", "=", "math", ".", "sqrt", "(", "variance", ")", ")", "\n", "", "elif", "distribution", "==", "\"uniform\"", ":", "\n", "        ", "bound", "=", "math", ".", "sqrt", "(", "3", "*", "variance", ")", "\n", "tensor", ".", "uniform_", "(", "-", "bound", ",", "bound", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"invalid distribution {distribution}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.lecun_normal_": [[100, 102], ["helpers.variance_scaling_"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.variance_scaling_"], ["", "", "def", "lecun_normal_", "(", "tensor", ")", ":", "\n", "    ", "variance_scaling_", "(", "tensor", ",", "mode", "=", "'fan_in'", ",", "distribution", "=", "'truncated_normal'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers._init_vit_weights": [[103, 136], ["isinstance", "name.startswith", "torch.init.zeros_", "torch.init.constant_", "name.startswith", "isinstance", "helpers.lecun_normal_", "isinstance", "helpers.lecun_normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.ones_", "torch.init.xavier_uniform_", "helpers.trunc_normal_", "torch.init.zeros_", "torch.init.normal_", "torch.init.zeros_"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.lecun_normal_", "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.lecun_normal_", "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.trunc_normal_"], ["", "def", "_init_vit_weights", "(", "module", ":", "nn", ".", "Module", ",", "name", ":", "str", "=", "''", ",", "head_bias", ":", "float", "=", "0.", ",", "jax_impl", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\" ViT weight initialization\n    * When called without n, head_bias, jax_impl args it will behave exactly the same\n      as my original init for compatibility with prev hparam / downstream use cases (ie DeiT).\n    * When called w/ valid n (module name) and jax_impl=True, will (hopefully) match JAX impl\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "'head'", ")", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "head_bias", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'pre_logits'", ")", ":", "\n", "            ", "lecun_normal_", "(", "module", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "if", "jax_impl", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "if", "'mlp'", "in", "name", ":", "\n", "                        ", "nn", ".", "init", ".", "normal_", "(", "module", ".", "bias", ",", "std", "=", "1e-6", ")", "\n", "", "else", ":", "\n", "                        ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "", "", "else", ":", "\n", "                ", "trunc_normal_", "(", "module", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "", "", "", "elif", "jax_impl", "and", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# NOTE conv was left to pytorch default in my original init", "\n", "        ", "lecun_normal_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "(", "nn", ".", "LayerNorm", ",", "nn", ".", "GroupNorm", ",", "nn", ".", "BatchNorm2d", ")", ")", ":", "\n", "        ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "nn", ".", "init", ".", "ones_", "(", "module", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers._load_weights": [[137, 215], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "np.load", "hasattr", "model.patch_embed.proj.weight.copy_", "model.patch_embed.proj.bias.copy_", "model.cls_token.copy_", "helpers._load_weights._n2p"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_load_weights", "(", "model", ",", "checkpoint_path", ",", "prefix", "=", "''", ")", ":", "\n", "    ", "\"\"\" Load weights from .npz checkpoints for official Google Brain Flax implementation\n    \"\"\"", "\n", "import", "numpy", "as", "np", "\n", "\n", "def", "_n2p", "(", "w", ",", "t", "=", "True", ")", ":", "\n", "        ", "if", "w", ".", "ndim", "==", "4", "and", "w", ".", "shape", "[", "0", "]", "==", "w", ".", "shape", "[", "1", "]", "==", "w", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "w", "=", "w", ".", "flatten", "(", ")", "\n", "", "if", "t", ":", "\n", "            ", "if", "w", ".", "ndim", "==", "4", ":", "\n", "                ", "w", "=", "w", ".", "transpose", "(", "[", "3", ",", "2", ",", "0", ",", "1", "]", ")", "\n", "", "elif", "w", ".", "ndim", "==", "3", ":", "\n", "                ", "w", "=", "w", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "", "elif", "w", ".", "ndim", "==", "2", ":", "\n", "                ", "w", "=", "w", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "", "", "return", "torch", ".", "from_numpy", "(", "w", ")", "\n", "\n", "", "w", "=", "np", ".", "load", "(", "checkpoint_path", ")", "\n", "if", "not", "prefix", "and", "'opt/target/embedding/kernel'", "in", "w", ":", "\n", "        ", "prefix", "=", "'opt/target/'", "\n", "\n", "", "if", "hasattr", "(", "model", ".", "patch_embed", ",", "'backbone'", ")", ":", "\n", "# hybrid", "\n", "        ", "backbone", "=", "model", ".", "patch_embed", ".", "backbone", "\n", "stem_only", "=", "not", "hasattr", "(", "backbone", ",", "'stem'", ")", "\n", "stem", "=", "backbone", "if", "stem_only", "else", "backbone", ".", "stem", "\n", "stem", ".", "conv", ".", "weight", ".", "copy_", "(", "adapt_input_conv", "(", "stem", ".", "conv", ".", "weight", ".", "shape", "[", "1", "]", ",", "_n2p", "(", "w", "[", "f'{prefix}conv_root/kernel'", "]", ")", ")", ")", "\n", "stem", ".", "norm", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{prefix}gn_root/scale'", "]", ")", ")", "\n", "stem", ".", "norm", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{prefix}gn_root/bias'", "]", ")", ")", "\n", "if", "not", "stem_only", ":", "\n", "            ", "for", "i", ",", "stage", "in", "enumerate", "(", "backbone", ".", "stages", ")", ":", "\n", "                ", "for", "j", ",", "block", "in", "enumerate", "(", "stage", ".", "blocks", ")", ":", "\n", "                    ", "bp", "=", "f'{prefix}block{i + 1}/unit{j + 1}/'", "\n", "for", "r", "in", "range", "(", "3", ")", ":", "\n", "                        ", "getattr", "(", "block", ",", "f'conv{r + 1}'", ")", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{bp}conv{r + 1}/kernel'", "]", ")", ")", "\n", "getattr", "(", "block", ",", "f'norm{r + 1}'", ")", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{bp}gn{r + 1}/scale'", "]", ")", ")", "\n", "getattr", "(", "block", ",", "f'norm{r + 1}'", ")", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{bp}gn{r + 1}/bias'", "]", ")", ")", "\n", "", "if", "block", ".", "downsample", "is", "not", "None", ":", "\n", "                        ", "block", ".", "downsample", ".", "conv", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{bp}conv_proj/kernel'", "]", ")", ")", "\n", "block", ".", "downsample", ".", "norm", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{bp}gn_proj/scale'", "]", ")", ")", "\n", "block", ".", "downsample", ".", "norm", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{bp}gn_proj/bias'", "]", ")", ")", "\n", "", "", "", "", "embed_conv_w", "=", "_n2p", "(", "w", "[", "f'{prefix}embedding/kernel'", "]", ")", "\n", "", "else", ":", "\n", "        ", "embed_conv_w", "=", "adapt_input_conv", "(", "\n", "model", ".", "patch_embed", ".", "proj", ".", "weight", ".", "shape", "[", "1", "]", ",", "_n2p", "(", "w", "[", "f'{prefix}embedding/kernel'", "]", ")", ")", "\n", "", "model", ".", "patch_embed", ".", "proj", ".", "weight", ".", "copy_", "(", "embed_conv_w", ")", "\n", "model", ".", "patch_embed", ".", "proj", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{prefix}embedding/bias'", "]", ")", ")", "\n", "model", ".", "cls_token", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{prefix}cls'", "]", ",", "t", "=", "False", ")", ")", "\n", "pos_embed_w", "=", "_n2p", "(", "w", "[", "f'{prefix}Transformer/posembed_input/pos_embedding'", "]", ",", "t", "=", "False", ")", "\n", "if", "pos_embed_w", ".", "shape", "!=", "model", ".", "pos_embed", ".", "shape", ":", "\n", "        ", "pos_embed_w", "=", "resize_pos_embed", "(", "# resize pos embedding when different size from pretrained weights", "\n", "pos_embed_w", ",", "model", ".", "pos_embed", ",", "getattr", "(", "model", ",", "'num_tokens'", ",", "1", ")", ",", "model", ".", "patch_embed", ".", "grid_size", ")", "\n", "", "model", ".", "pos_embed", ".", "copy_", "(", "pos_embed_w", ")", "\n", "model", ".", "norm", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{prefix}Transformer/encoder_norm/scale'", "]", ")", ")", "\n", "model", ".", "norm", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{prefix}Transformer/encoder_norm/bias'", "]", ")", ")", "\n", "if", "isinstance", "(", "model", ".", "head", ",", "nn", ".", "Linear", ")", "and", "model", ".", "head", ".", "bias", ".", "shape", "[", "0", "]", "==", "w", "[", "f'{prefix}head/bias'", "]", ".", "shape", "[", "-", "1", "]", ":", "\n", "        ", "model", ".", "head", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{prefix}head/kernel'", "]", ")", ")", "\n", "model", ".", "head", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{prefix}head/bias'", "]", ")", ")", "\n", "", "if", "isinstance", "(", "getattr", "(", "model", ".", "pre_logits", ",", "'fc'", ",", "None", ")", ",", "nn", ".", "Linear", ")", "and", "f'{prefix}pre_logits/bias'", "in", "w", ":", "\n", "        ", "model", ".", "pre_logits", ".", "fc", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{prefix}pre_logits/kernel'", "]", ")", ")", "\n", "model", ".", "pre_logits", ".", "fc", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{prefix}pre_logits/bias'", "]", ")", ")", "\n", "", "for", "i", ",", "block", "in", "enumerate", "(", "model", ".", "blocks", ".", "children", "(", ")", ")", ":", "\n", "        ", "block_prefix", "=", "f'{prefix}Transformer/encoderblock_{i}/'", "\n", "mha_prefix", "=", "block_prefix", "+", "'MultiHeadDotProductAttention_1/'", "\n", "block", ".", "norm1", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{block_prefix}LayerNorm_0/scale'", "]", ")", ")", "\n", "block", ".", "norm1", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{block_prefix}LayerNorm_0/bias'", "]", ")", ")", "\n", "block", ".", "attn", ".", "qkv", ".", "weight", ".", "copy_", "(", "torch", ".", "cat", "(", "[", "\n", "_n2p", "(", "w", "[", "f'{mha_prefix}{n}/kernel'", "]", ",", "t", "=", "False", ")", ".", "flatten", "(", "1", ")", ".", "T", "for", "n", "in", "(", "'query'", ",", "'key'", ",", "'value'", ")", "]", ")", ")", "\n", "block", ".", "attn", ".", "qkv", ".", "bias", ".", "copy_", "(", "torch", ".", "cat", "(", "[", "\n", "_n2p", "(", "w", "[", "f'{mha_prefix}{n}/bias'", "]", ",", "t", "=", "False", ")", ".", "reshape", "(", "-", "1", ")", "for", "n", "in", "(", "'query'", ",", "'key'", ",", "'value'", ")", "]", ")", ")", "\n", "block", ".", "attn", ".", "proj", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{mha_prefix}out/kernel'", "]", ")", ".", "flatten", "(", "1", ")", ")", "\n", "block", ".", "attn", ".", "proj", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{mha_prefix}out/bias'", "]", ")", ")", "\n", "for", "r", "in", "range", "(", "2", ")", ":", "\n", "            ", "getattr", "(", "block", ".", "mlp", ",", "f'fc{r + 1}'", ")", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{block_prefix}MlpBlock_3/Dense_{r}/kernel'", "]", ")", ")", "\n", "getattr", "(", "block", ".", "mlp", ",", "f'fc{r + 1}'", ")", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{block_prefix}MlpBlock_3/Dense_{r}/bias'", "]", ")", ")", "\n", "", "block", ".", "norm2", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{block_prefix}LayerNorm_2/scale'", "]", ")", ")", "\n", "block", ".", "norm2", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{block_prefix}LayerNorm_2/bias'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.named_apply": [[217, 226], ["module.named_children", "fn", "helpers.named_apply", "fn"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.named_apply"], ["", "", "def", "named_apply", "(", "fn", ":", "Callable", ",", "module", ":", "nn", ".", "Module", ",", "name", "=", "''", ",", "depth_first", "=", "True", ",", "include_root", "=", "False", ")", "->", "nn", ".", "Module", ":", "\n", "    ", "if", "not", "depth_first", "and", "include_root", ":", "\n", "        ", "fn", "(", "module", "=", "module", ",", "name", "=", "name", ")", "\n", "", "for", "child_name", ",", "child_module", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "child_name", "=", "'.'", ".", "join", "(", "(", "name", ",", "child_name", ")", ")", "if", "name", "else", "child_name", "\n", "named_apply", "(", "fn", "=", "fn", ",", "module", "=", "child_module", ",", "name", "=", "child_name", ",", "depth_first", "=", "depth_first", ",", "include_root", "=", "True", ")", "\n", "", "if", "depth_first", "and", "include_root", ":", "\n", "        ", "fn", "(", "module", "=", "module", ",", "name", "=", "name", ")", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.get_cache_dir": [[227, 240], ["os.getenv", "get_dir", "os.path.join", "os.makedirs", "_logger.warning"], "function", ["None"], ["", "def", "get_cache_dir", "(", "child_dir", "=", "''", ")", ":", "\n", "    ", "\"\"\"\n    Returns the location of the directory where models are cached (and creates it if necessary).\n    \"\"\"", "\n", "# Issue warning to move data if old env is set", "\n", "if", "os", ".", "getenv", "(", "'TORCH_MODEL_ZOO'", ")", ":", "\n", "        ", "_logger", ".", "warning", "(", "'TORCH_MODEL_ZOO is deprecated, please use env TORCH_HOME instead'", ")", "\n", "\n", "", "hub_dir", "=", "get_dir", "(", ")", "\n", "child_dir", "=", "(", ")", "if", "not", "child_dir", "else", "(", "child_dir", ",", ")", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "hub_dir", ",", "'checkpoints'", ",", "*", "child_dir", ")", "\n", "os", ".", "makedirs", "(", "model_dir", ",", "exist_ok", "=", "True", ")", "\n", "return", "model_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.download_cached_file": [[241, 253], ["torch.hub.urlparse", "os.path.basename", "os.path.join", "helpers.get_cache_dir", "os.path.exists", "_logger.info", "torch.hub.download_url_to_file", "torch.hub.HASH_REGEX.search", "HASH_REGEX.search.group"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.get_cache_dir"], ["", "def", "download_cached_file", "(", "url", ",", "check_hash", "=", "True", ",", "progress", "=", "False", ")", ":", "\n", "    ", "parts", "=", "urlparse", "(", "url", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "parts", ".", "path", ")", "\n", "cached_file", "=", "os", ".", "path", ".", "join", "(", "get_cache_dir", "(", ")", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cached_file", ")", ":", "\n", "        ", "_logger", ".", "info", "(", "'Downloading: \"{}\" to {}\\n'", ".", "format", "(", "url", ",", "cached_file", ")", ")", "\n", "hash_prefix", "=", "None", "\n", "if", "check_hash", ":", "\n", "            ", "r", "=", "HASH_REGEX", ".", "search", "(", "filename", ")", "# r is Optional[Match[str]]", "\n", "hash_prefix", "=", "r", ".", "group", "(", "1", ")", "if", "r", "else", "None", "\n", "", "download_url_to_file", "(", "url", ",", "cached_file", ",", "hash_prefix", ",", "progress", "=", "progress", ")", "\n", "", "return", "cached_file", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.load_custom_pretrained": [[254, 285], ["default_cfg.get", "helpers.download_cached_file", "getattr", "_logger.warning", "load_fn", "hasattr", "model.load_pretrained", "_logger.warning"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.download_cached_file", "home.repos.pwc.inspect_result.tsun_ssrt.model.ViT.VisionTransformer.load_pretrained"], ["", "def", "load_custom_pretrained", "(", "model", ",", "default_cfg", "=", "None", ",", "load_fn", "=", "None", ",", "progress", "=", "False", ",", "check_hash", "=", "False", ")", ":", "\n", "    ", "r\"\"\"Loads a custom (read non .pth) weight file\n    Downloads checkpoint file into cache-dir like torch.hub based loaders, but calls\n    a passed in custom load fun, or the `load_pretrained` model member fn.\n    If the object is already present in `model_dir`, it's deserialized and returned.\n    The default value of `model_dir` is ``<hub_dir>/checkpoints`` where\n    `hub_dir` is the directory returned by :func:`~torch.hub.get_dir`.\n    Args:\n        model: The instantiated model to load weights into\n        default_cfg (dict): Default pretrained model cfg\n        load_fn: An external stand alone fn that loads weights into provided model, otherwise a fn named\n            'laod_pretrained' on the model will be called if it exists\n        progress (bool, optional): whether or not to display a progress bar to stderr. Default: False\n        check_hash(bool, optional): If True, the filename part of the URL should follow the naming convention\n            ``filename-<sha256>.ext`` where ``<sha256>`` is the first eight or more\n            digits of the SHA256 hash of the contents of the file. The hash is used to\n            ensure unique names and to verify the contents of the file. Default: False\n    \"\"\"", "\n", "default_cfg", "=", "default_cfg", "or", "getattr", "(", "model", ",", "'default_cfg'", ",", "None", ")", "or", "{", "}", "\n", "pretrained_url", "=", "default_cfg", ".", "get", "(", "'url'", ",", "None", ")", "\n", "if", "not", "pretrained_url", ":", "\n", "        ", "_logger", ".", "warning", "(", "\"No pretrained weights exist for this model. Using random initialization.\"", ")", "\n", "return", "\n", "", "cached_file", "=", "download_cached_file", "(", "default_cfg", "[", "'url'", "]", ",", "check_hash", "=", "check_hash", ",", "progress", "=", "progress", ")", "\n", "\n", "if", "load_fn", "is", "not", "None", ":", "\n", "        ", "load_fn", "(", "model", ",", "cached_file", ")", "\n", "", "elif", "hasattr", "(", "model", ",", "'load_pretrained'", ")", ":", "\n", "        ", "model", ".", "load_pretrained", "(", "cached_file", ")", "\n", "", "else", ":", "\n", "        ", "_logger", ".", "warning", "(", "\"Valid function to load pretrained weights is not available, using random initialization.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.adapt_input_conv": [[286, 309], ["conv_weight.sum.float", "conv_weight.sum.to", "conv_weight.sum.reshape", "conv_weight.sum.sum", "conv_weight.sum.sum", "NotImplementedError", "int", "math.ceil", "conv_weight.sum.repeat", "float"], "function", ["None"], ["", "", "def", "adapt_input_conv", "(", "in_chans", ",", "conv_weight", ")", ":", "\n", "    ", "conv_type", "=", "conv_weight", ".", "dtype", "\n", "conv_weight", "=", "conv_weight", ".", "float", "(", ")", "# Some weights are in torch.half, ensure it's float for sum on CPU", "\n", "O", ",", "I", ",", "J", ",", "K", "=", "conv_weight", ".", "shape", "\n", "if", "in_chans", "==", "1", ":", "\n", "        ", "if", "I", ">", "3", ":", "\n", "            ", "assert", "conv_weight", ".", "shape", "[", "1", "]", "%", "3", "==", "0", "\n", "# For models with space2depth stems", "\n", "conv_weight", "=", "conv_weight", ".", "reshape", "(", "O", ",", "I", "//", "3", ",", "3", ",", "J", ",", "K", ")", "\n", "conv_weight", "=", "conv_weight", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "conv_weight", "=", "conv_weight", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "", "elif", "in_chans", "!=", "3", ":", "\n", "        ", "if", "I", "!=", "3", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Weight format not supported by conversion.'", ")", "\n", "", "else", ":", "\n", "# NOTE this strategy should be better than random init, but there could be other combinations of", "\n", "# the original RGB input layer weights that'd work better for specific cases.", "\n", "            ", "repeat", "=", "int", "(", "math", ".", "ceil", "(", "in_chans", "/", "3", ")", ")", "\n", "conv_weight", "=", "conv_weight", ".", "repeat", "(", "1", ",", "repeat", ",", "1", ",", "1", ")", "[", ":", ",", ":", "in_chans", ",", ":", ",", ":", "]", "\n", "conv_weight", "*=", "(", "3", "/", "float", "(", "in_chans", ")", ")", "\n", "", "", "conv_weight", "=", "conv_weight", ".", "to", "(", "conv_type", ")", "\n", "return", "conv_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.resize_pos_embed": [[310, 330], ["_logger.info", "int", "_logger.info", "posemb_grid.permute().reshape.reshape().permute", "torch.interpolate", "posemb_grid.permute().reshape.permute().reshape", "torch.cat", "torch.cat", "torch.cat", "math.sqrt", "len", "len", "len", "posemb_grid.permute().reshape.reshape", "posemb_grid.permute().reshape.permute", "int", "math.sqrt"], "function", ["None"], ["", "def", "resize_pos_embed", "(", "posemb", ",", "posemb_new", ",", "num_tokens", "=", "1", ",", "gs_new", "=", "(", ")", ")", ":", "\n", "# Rescale the grid of position embeddings when loading from state_dict. Adapted from", "\n", "# https://github.com/google-research/vision_transformer/blob/00883dd691c63a6830751563748663526e811cee/vit_jax/checkpoint.py#L224", "\n", "    ", "_logger", ".", "info", "(", "'Resized position embedding: %s to %s'", ",", "posemb", ".", "shape", ",", "posemb_new", ".", "shape", ")", "\n", "ntok_new", "=", "posemb_new", ".", "shape", "[", "1", "]", "\n", "if", "num_tokens", ":", "\n", "        ", "posemb_tok", ",", "posemb_grid", "=", "posemb", "[", ":", ",", ":", "num_tokens", "]", ",", "posemb", "[", "0", ",", "num_tokens", ":", "]", "\n", "ntok_new", "-=", "num_tokens", "\n", "", "else", ":", "\n", "        ", "posemb_tok", ",", "posemb_grid", "=", "posemb", "[", ":", ",", ":", "0", "]", ",", "posemb", "[", "0", "]", "\n", "", "gs_old", "=", "int", "(", "math", ".", "sqrt", "(", "len", "(", "posemb_grid", ")", ")", ")", "\n", "if", "not", "len", "(", "gs_new", ")", ":", "# backwards compatibility", "\n", "        ", "gs_new", "=", "[", "int", "(", "math", ".", "sqrt", "(", "ntok_new", ")", ")", "]", "*", "2", "\n", "", "assert", "len", "(", "gs_new", ")", ">=", "2", "\n", "_logger", ".", "info", "(", "'Position embedding grid-size from %s to %s'", ",", "[", "gs_old", ",", "gs_old", "]", ",", "gs_new", ")", "\n", "posemb_grid", "=", "posemb_grid", ".", "reshape", "(", "1", ",", "gs_old", ",", "gs_old", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "posemb_grid", "=", "F", ".", "interpolate", "(", "posemb_grid", ",", "size", "=", "gs_new", ",", "mode", "=", "'bilinear'", ")", "\n", "posemb_grid", "=", "posemb_grid", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "1", ",", "gs_new", "[", "0", "]", "*", "gs_new", "[", "1", "]", ",", "-", "1", ")", "\n", "posemb", "=", "torch", ".", "cat", "(", "[", "posemb_tok", ",", "posemb_grid", "]", ",", "dim", "=", "1", ")", "\n", "return", "posemb", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.checkpoint_filter_fn": [[332, 349], ["state_dict.items", "resize_pos_embed.reshape", "len", "helpers.resize_pos_embed", "getattr"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.resize_pos_embed"], ["", "def", "checkpoint_filter_fn", "(", "state_dict", ",", "model", ")", ":", "\n", "    ", "\"\"\" convert patch embedding weight from manual patchify + linear proj to conv\"\"\"", "\n", "out_dict", "=", "{", "}", "\n", "if", "'model'", "in", "state_dict", ":", "\n", "# For deit models", "\n", "        ", "state_dict", "=", "state_dict", "[", "'model'", "]", "\n", "", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'patch_embed.proj.weight'", "in", "k", "and", "len", "(", "v", ".", "shape", ")", "<", "4", ":", "\n", "# For old models that I trained prior to conv based patchification", "\n", "            ", "O", ",", "I", ",", "H", ",", "W", "=", "model", ".", "patch_embed", ".", "proj", ".", "weight", ".", "shape", "\n", "v", "=", "v", ".", "reshape", "(", "O", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "", "elif", "k", "==", "'pos_embed'", "and", "v", ".", "shape", "!=", "model", ".", "pos_embed", ".", "shape", ":", "\n", "# To resize pos embedding when using model at different size from pretrained weights", "\n", "            ", "v", "=", "resize_pos_embed", "(", "\n", "v", ",", "model", ".", "pos_embed", ",", "getattr", "(", "model", ",", "'num_tokens'", ",", "1", ")", ",", "model", ".", "patch_embed", ".", "grid_size", ")", "\n", "", "out_dict", "[", "k", "]", "=", "v", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers._cfg": [[352, 360], ["None"], "function", ["None"], ["def", "_cfg", "(", "url", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "'url'", ":", "url", ",", "\n", "'num_classes'", ":", "1000", ",", "'input_size'", ":", "(", "3", ",", "224", ",", "224", ")", ",", "'pool_size'", ":", "None", ",", "\n", "'crop_pct'", ":", ".9", ",", "'interpolation'", ":", "'bicubic'", ",", "'fixed_input_size'", ":", "True", ",", "\n", "'mean'", ":", "IMAGENET_DEFAULT_MEAN", ",", "'std'", ":", "IMAGENET_DEFAULT_STD", ",", "\n", "'first_conv'", ":", "'patch_embed.proj'", ",", "'classifier'", ":", "'head'", ",", "\n", "**", "kwargs", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.helpers._create_vision_transformer": [[372, 388], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop.", "helpers.load_custom_pretrained"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.model.helpers.load_custom_pretrained"], ["def", "_create_vision_transformer", "(", "variant", ",", "pretrained", "=", "False", ",", "distilled", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "default_cfg", "=", "default_cfgs", "[", "variant", "]", "\n", "default_num_classes", "=", "default_cfg", "[", "'num_classes'", "]", "\n", "default_img_size", "=", "default_cfg", "[", "'input_size'", "]", "[", "-", "1", "]", "\n", "\n", "num_classes", "=", "kwargs", ".", "pop", "(", "'num_classes'", ",", "default_num_classes", ")", "\n", "img_size", "=", "kwargs", ".", "pop", "(", "'img_size'", ",", "default_img_size", ")", "\n", "\n", "model_cls", "=", "kwargs", ".", "pop", "(", "'VisionTransformerModule'", ")", "\n", "model", "=", "model_cls", "(", "img_size", "=", "img_size", ",", "num_classes", "=", "num_classes", ",", "distilled", "=", "distilled", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "\n", "if", "pretrained", ":", "\n", "        ", "load_custom_pretrained", "(", "model", ")", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.VT.__init__": [[14, 54], ["model.ViT.VisionTransformer.__init__", "functools.partial", "model.ViT.PatchEmbed", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sequential", "torch.Sequential", "torch.Sequential", "functools.partial.", "torch.Identity", "torch.Identity", "torch.Identity", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "x.item", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "model.ViT.Block", "range"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.__init__", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.augmentations.Identity"], ["    ", "def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "\n", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "\n", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "distilled", "=", "False", ",", "\n", "args", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "VisionTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "self", ".", "embed_dim", "=", "embed_dim", "# num_features for consistency with other models", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "distilled", "=", "distilled", "\n", "\n", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "\n", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ")", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "if", "distilled", ":", "\n", "            ", "self", ".", "dist_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "2", ",", "embed_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "1", ",", "embed_dim", ")", ")", "\n", "", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "i", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "\n", "self", ".", "pre_logits", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "self", ".", "num_features", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "if", "distilled", ":", "\n", "            ", "self", ".", "head_dist", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "self", ".", "sr_alpha", "=", "args", ".", "sr_alpha", "\n", "self", ".", "sr_layers", "=", "args", ".", "sr_layers", "\n", "self", ".", "sr_alpha_adap", "=", "self", ".", "sr_alpha", "\n", "self", ".", "iter_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.VT.forward_features": [[56, 98], ["SSRT.VT.patch_embed", "SSRT.VT.cls_token.expand", "SSRT.VT.pos_drop", "enumerate", "SSRT.VT.norm", "random.choice", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "SSRT.VT.dist_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "blk", "blk", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "if", "self", ".", "training", "and", "len", "(", "self", ".", "sr_layers", ")", ">", "0", ":", "\n", "            ", "perturb_layer", "=", "random", ".", "choice", "(", "self", ".", "sr_layers", ")", "\n", "", "else", ":", "\n", "            ", "perturb_layer", "=", "None", "\n", "\n", "# perturbing raw input image", "\n", "", "if", "perturb_layer", "==", "-", "1", ":", "\n", "            ", "idx", "=", "torch", ".", "flip", "(", "torch", ".", "arange", "(", "B", "//", "2", ",", "B", ")", ",", "dims", "=", "[", "0", "]", ")", "\n", "xm", "=", "x", "[", "B", "//", "2", ":", "]", "+", "(", "x", "[", "idx", "]", "-", "x", "[", "B", "//", "2", ":", "]", ")", ".", "detach", "(", ")", "*", "self", ".", "sr_alpha_adap", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "xm", ")", ")", "\n", "\n", "", "y", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "y", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", "# stole cls_tokens impl from Phil Wang, thanks", "\n", "\n", "if", "self", ".", "distilled", ":", "\n", "            ", "dist_tokens", "=", "self", ".", "dist_token", ".", "expand", "(", "y", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", "\n", "y", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "dist_tokens", ",", "y", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "y", ")", ",", "dim", "=", "1", ")", "\n", "", "y", "=", "y", "+", "self", ".", "pos_embed", "\n", "y", "=", "self", ".", "pos_drop", "(", "y", ")", "\n", "\n", "\n", "for", "layer", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "if", "layer", "==", "perturb_layer", ":", "\n", "                    ", "idx", "=", "torch", ".", "flip", "(", "torch", ".", "arange", "(", "B", "//", "2", ",", "B", ")", ",", "dims", "=", "[", "0", "]", ")", "\n", "ym", "=", "y", "[", "B", "//", "2", ":", "]", "+", "(", "y", "[", "idx", "]", "-", "y", "[", "B", "//", "2", ":", "]", ")", ".", "detach", "(", ")", "*", "self", ".", "sr_alpha_adap", "\n", "y", "=", "torch", ".", "cat", "(", "(", "y", ",", "ym", ")", ")", "\n", "", "y", "=", "blk", "(", "y", ")", "\n", "", "else", ":", "\n", "                ", "y", "=", "blk", "(", "y", ")", "\n", "\n", "", "", "y", "=", "self", ".", "norm", "(", "y", ")", "\n", "y", "=", "y", "[", ":", ",", "0", "]", "\n", "self", ".", "iter_num", "+=", "1", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRTNet.__init__": [[101, 134], ["torch.Module.__init__", "model.grl.WarmStartGradientReverseLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "SSRT.SSRTNet.bottleneck[].weight.data.normal_", "SSRT.SSRTNet.bottleneck[].bias.data.fill_", "SSRT.SSRTNet.discriminator[].weight.data.normal_", "SSRT.SSRTNet.discriminator[].bias.data.fill_", "SSRT.SSRTNet.classifier[].weight.data.normal_", "SSRT.SSRTNet.classifier[].bias.data.fill_", "SSRT.SSRTNet.parameter_list.extend", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "SSRT.SSRTNet.base_network.parameters", "SSRT.SSRTNet.classifier.parameters", "SSRT.SSRTNet.discriminator.parameters", "SSRT.SSRTNet.bottleneck.parameters"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_net", "=", "'vit_base_patch16_224'", ",", "use_bottleneck", "=", "True", ",", "bottleneck_dim", "=", "1024", ",", "width", "=", "1024", ",", "class_num", "=", "31", ",", "args", "=", "None", ")", ":", "\n", "        ", "super", "(", "SSRTNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_network", "=", "vit_model", "[", "base_net", "]", "(", "pretrained", "=", "True", ",", "args", "=", "args", ",", "VisionTransformerModule", "=", "VT", ")", "\n", "self", ".", "use_bottleneck", "=", "use_bottleneck", "\n", "self", ".", "grl", "=", "WarmStartGradientReverseLayer", "(", "alpha", "=", "1.0", ",", "lo", "=", "0.0", ",", "hi", "=", "0.1", ",", "max_iters", "=", "1000", ",", "auto_step", "=", "True", ")", "\n", "if", "self", ".", "use_bottleneck", ":", "\n", "            ", "self", ".", "bottleneck_layer", "=", "[", "nn", ".", "Linear", "(", "self", ".", "base_network", ".", "embed_dim", ",", "bottleneck_dim", ")", ",", "nn", ".", "BatchNorm1d", "(", "bottleneck_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", ")", "\n", "\n", "", "classifier_dim", "=", "bottleneck_dim", "if", "use_bottleneck", "else", "self", ".", "base_network", ".", "embed_dim", "\n", "self", ".", "classifier_layer", "=", "[", "nn", ".", "Linear", "(", "classifier_dim", ",", "width", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "0.5", ")", ",", "nn", ".", "Linear", "(", "width", ",", "class_num", ")", "]", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "classifier_layer", ")", "\n", "\n", "self", ".", "discriminator_layer", "=", "[", "nn", ".", "Linear", "(", "classifier_dim", ",", "width", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "0.5", ")", ",", "nn", ".", "Linear", "(", "width", ",", "1", ")", "]", "\n", "self", ".", "discriminator", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "discriminator_layer", ")", "\n", "\n", "if", "self", ".", "use_bottleneck", ":", "\n", "            ", "self", ".", "bottleneck", "[", "0", "]", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.005", ")", "\n", "self", ".", "bottleneck", "[", "0", "]", ".", "bias", ".", "data", ".", "fill_", "(", "0.1", ")", "\n", "\n", "", "for", "dep", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "discriminator", "[", "dep", "*", "3", "]", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "discriminator", "[", "dep", "*", "3", "]", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "self", ".", "classifier", "[", "dep", "*", "3", "]", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "classifier", "[", "dep", "*", "3", "]", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n", "", "self", ".", "parameter_list", "=", "[", "\n", "{", "\"params\"", ":", "self", ".", "base_network", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "0.1", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "classifier", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "1", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "discriminator", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "1", "}", "]", "\n", "if", "self", ".", "use_bottleneck", ":", "\n", "            ", "self", ".", "parameter_list", ".", "extend", "(", "[", "{", "\"params\"", ":", "self", ".", "bottleneck", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "1", "}", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRTNet.forward": [[136, 148], ["SSRT.SSRTNet.base_network.forward_features", "SSRT.SSRTNet.discriminator", "SSRT.SSRTNet.classifier", "SSRT.SSRTNet.bottleneck", "SSRT.SSRTNet.grl"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.VT.forward_features"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "features", "=", "self", ".", "base_network", ".", "forward_features", "(", "inputs", ")", "\n", "if", "self", ".", "use_bottleneck", ":", "\n", "            ", "features", "=", "self", ".", "bottleneck", "(", "features", ")", "\n", "\n", "", "outputs_dc", "=", "self", ".", "discriminator", "(", "self", ".", "grl", "(", "features", ")", ")", "\n", "outputs", "=", "self", ".", "classifier", "(", "features", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "features", ",", "outputs", ",", "outputs_dc", "\n", "", "else", ":", "\n", "            ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.__init__": [[150, 177], ["SSRT.SSRTNet", "SSRT.SSRT.net.cuda"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base_net", "=", "'vit_base_patch16_224'", ",", "bottleneck_dim", "=", "1024", ",", "class_num", "=", "31", ",", "use_gpu", "=", "True", ",", "args", "=", "None", ")", ":", "\n", "        ", "self", ".", "net", "=", "SSRTNet", "(", "base_net", ",", "args", ".", "use_bottleneck", ",", "bottleneck_dim", ",", "bottleneck_dim", ",", "class_num", ",", "args", ")", "\n", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "is_train", "=", "False", "\n", "self", ".", "iter_num", "=", "0", "\n", "self", ".", "class_num", "=", "class_num", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "self", ".", "net", "=", "self", ".", "net", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "use_safe_training", "=", "args", ".", "use_safe_training", "\n", "self", ".", "sr_loss_weight", "=", "args", ".", "sr_loss_weight", "\n", "self", ".", "sr_loss_weight_adap", "=", "self", ".", "sr_loss_weight", "\n", "\n", "if", "self", ".", "use_safe_training", ":", "\n", "            ", "self", ".", "snap_shot", "=", "None", "\n", "self", ".", "restore", "=", "False", "\n", "self", ".", "r", "=", "0.0", "\n", "self", ".", "r_period", "=", "args", ".", "adap_adjust_T", "\n", "self", ".", "r_phase", "=", "0", "\n", "self", ".", "r_mag", "=", "1.0", "\n", "self", ".", "adap_adjust_T", "=", "args", ".", "adap_adjust_T", "\n", "self", ".", "adap_adjust_L", "=", "args", ".", "adap_adjust_L", "\n", "self", ".", "adap_adjust_append_last_subintervals", "=", "args", ".", "adap_adjust_append_last_subintervals", "\n", "self", ".", "adap_adjust_last_restore_iter", "=", "0", "\n", "self", ".", "divs", "=", "[", "]", "\n", "self", ".", "divs_last_period", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.to_dicts": [[179, 181], ["SSRT.SSRT.net.state_dict"], "methods", ["None"], ["", "", "def", "to_dicts", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "net", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.from_dicts": [[182, 184], ["SSRT.SSRT.net.load_state_dict"], "methods", ["None"], ["", "def", "from_dicts", "(", "self", ",", "dicts", ")", ":", "\n", "        ", "self", ".", "net", ".", "load_state_dict", "(", "dicts", ",", "strict", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.get_adjust": [[185, 189], ["numpy.sin"], "methods", ["None"], ["", "def", "get_adjust", "(", "self", ",", "iter", ")", ":", "\n", "        ", "if", "iter", ">=", "self", ".", "r_period", "+", "self", ".", "r_phase", ":", "\n", "            ", "return", "self", ".", "r_mag", "\n", "", "return", "np", ".", "sin", "(", "(", "iter", "-", "self", ".", "r_phase", ")", "/", "self", ".", "r_period", "*", "np", ".", "pi", "/", "2", ")", "*", "self", ".", "r_mag", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.save_snapshot": [[190, 192], ["SSRT.SSRT.net.state_dict"], "methods", ["None"], ["", "def", "save_snapshot", "(", "self", ")", ":", "\n", "        ", "self", ".", "snap_shot", "=", "self", ".", "net", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.restore_snapshot": [[193, 196], ["SSRT.SSRT.net.load_state_dict"], "methods", ["None"], ["", "def", "restore_snapshot", "(", "self", ")", ":", "\n", "        ", "self", ".", "net", ".", "load_state_dict", "(", "self", ".", "snap_shot", ")", "\n", "self", ".", "adap_adjust_last_restore_iter", "=", "self", ".", "iter_num", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.check_div_drop": [[197, 222], ["range", "numpy.power", "numpy.array_split", "range", "numpy.array", "d.mean", "numpy.array_split", "numpy.array_split.insert", "numpy.array", "d.mean", "len"], "methods", ["None"], ["", "def", "check_div_drop", "(", "self", ")", ":", "\n", "        ", "flag", "=", "False", "\n", "\n", "for", "l", "in", "range", "(", "self", ".", "adap_adjust_L", "+", "1", ")", ":", "\n", "            ", "chunk", "=", "np", ".", "power", "(", "2", ",", "l", ")", "\n", "divs_", "=", "np", ".", "array_split", "(", "np", ".", "array", "(", "self", ".", "divs", ")", ",", "chunk", ")", "\n", "divs_", "=", "[", "d", ".", "mean", "(", ")", "for", "d", "in", "divs_", "]", "\n", "\n", "if", "self", ".", "adap_adjust_append_last_subintervals", "and", "self", ".", "divs_last_period", "is", "not", "None", ":", "\n", "                ", "divs_last_period", "=", "np", ".", "array_split", "(", "np", ".", "array", "(", "self", ".", "divs_last_period", ")", ",", "chunk", ")", "\n", "divs_last_period", "=", "[", "d", ".", "mean", "(", ")", "for", "d", "in", "divs_last_period", "]", "\n", "divs_", ".", "insert", "(", "0", ",", "divs_last_period", "[", "-", "1", "]", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "divs_", ")", "-", "1", ")", ":", "\n", "                ", "if", "divs_", "[", "i", "+", "1", "]", "<", "divs_", "[", "i", "]", "-", "1.0", ":", "\n", "                    ", "flag", "=", "True", "\n", "\n", "", "", "", "if", "self", ".", "r", "<=", "0.1", ":", "\n", "            ", "flag", "=", "False", "\n", "\n", "", "if", "flag", ":", "\n", "            ", "self", ".", "restore", "=", "True", "\n", "self", ".", "r_phase", "=", "self", ".", "iter_num", "\n", "if", "self", ".", "iter_num", "-", "self", ".", "adap_adjust_last_restore_iter", "<=", "self", ".", "r_period", ":", "\n", "                ", "self", ".", "r_period", "*=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.get_sr_loss": [[224, 260], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "random.random", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "SSRT.SSRT.get_adjust", "SSRT.SSRT.divs.append", "SSRT.SSRT.check_div_drop", "args.writer.add_scalar", "args.writer.flush", "mask1.sum", "mask2.sum", "torch.softmax.argmax().unique", "torch.softmax.max", "torch.softmax.max", "torch.softmax.argmax"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.get_adjust", "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.check_div_drop"], ["", "", "", "def", "get_sr_loss", "(", "self", ",", "out1", ",", "out2", ",", "sr_epsilon", "=", "0.4", ",", "sr_loss_p", "=", "0.5", ",", "args", "=", "None", ")", ":", "\n", "        ", "prob1_t", "=", "F", ".", "softmax", "(", "out1", ",", "dim", "=", "1", ")", "\n", "prob2_t", "=", "F", ".", "softmax", "(", "out2", ",", "dim", "=", "1", ")", "\n", "\n", "prob1", "=", "F", ".", "softmax", "(", "out1", ",", "dim", "=", "1", ")", "\n", "log_prob1", "=", "F", ".", "log_softmax", "(", "out1", ",", "dim", "=", "1", ")", "\n", "prob2", "=", "F", ".", "softmax", "(", "out2", ",", "dim", "=", "1", ")", "\n", "log_prob2", "=", "F", ".", "log_softmax", "(", "out2", ",", "dim", "=", "1", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<=", "sr_loss_p", ":", "\n", "              ", "log_prob2", "=", "F", ".", "log_softmax", "(", "out2", ",", "dim", "=", "1", ")", "\n", "mask1", "=", "(", "prob1_t", ".", "max", "(", "-", "1", ")", "[", "0", "]", ">", "sr_epsilon", ")", ".", "float", "(", ")", "\n", "aug_loss", "=", "(", "(", "prob1", "*", "(", "log_prob1", "-", "log_prob2", ")", ")", ".", "sum", "(", "-", "1", ")", "*", "mask1", ")", ".", "sum", "(", ")", "/", "(", "mask1", ".", "sum", "(", ")", "+", "1e-6", ")", "\n", "", "else", ":", "\n", "              ", "log_prob1", "=", "F", ".", "log_softmax", "(", "out1", ",", "dim", "=", "1", ")", "\n", "mask2", "=", "(", "prob2_t", ".", "max", "(", "-", "1", ")", "[", "0", "]", ">", "sr_epsilon", ")", ".", "float", "(", ")", "\n", "aug_loss", "=", "(", "(", "prob2", "*", "(", "log_prob2", "-", "log_prob1", ")", ")", ".", "sum", "(", "-", "1", ")", "*", "mask2", ")", ".", "sum", "(", ")", "/", "(", "mask2", ".", "sum", "(", ")", "+", "1e-6", ")", "\n", "\n", "", "if", "args", ".", "use_safe_training", ":", "\n", "            ", "self", ".", "r", "=", "self", ".", "get_adjust", "(", "self", ".", "iter_num", ")", "\n", "self", ".", "net", ".", "base_network", ".", "sr_alpha_adap", "=", "self", ".", "net", ".", "base_network", ".", "sr_alpha", "*", "self", ".", "r", "\n", "self", ".", "sr_loss_weight_adap", "=", "self", ".", "sr_loss_weight", "*", "self", ".", "r", "\n", "\n", "div_unique", "=", "prob1", ".", "argmax", "(", "-", "1", ")", ".", "unique", "(", ")", ".", "shape", "[", "0", "]", "\n", "self", ".", "divs", ".", "append", "(", "div_unique", ")", "\n", "\n", "if", "(", "self", ".", "iter_num", "+", "1", ")", "%", "self", ".", "adap_adjust_T", "==", "0", "and", "self", ".", "iter_num", ">", "0", ":", "\n", "                ", "self", ".", "check_div_drop", "(", ")", "\n", "if", "not", "self", ".", "restore", ":", "\n", "                    ", "self", ".", "divs_last_period", "=", "self", ".", "divs", "\n", "\n", "", "", "if", "args", ".", "use_tensorboard", ":", "\n", "                ", "args", ".", "writer", ".", "add_scalar", "(", "'div_unique'", ",", "div_unique", ",", "self", ".", "iter_num", ")", "\n", "args", ".", "writer", ".", "flush", "(", ")", "\n", "\n", "", "", "return", "aug_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.get_loss": [[262, 330], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "SSRT.SSRT.net", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "outputs.narrow", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "outputs.narrow", "outputs.narrow", "SSRT.SSRT.get_sr_loss", "torch.softmax", "torch.softmax", "torch.softmax", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.softmax.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "all_losses.update", "all_losses.update", "all_losses.update", "all_losses.items", "args.writer.add_scalar", "args.writer.add_scalar", "args.writer.flush", "SSRT.SSRT.restore_snapshot", "logging.info", "SSRT.SSRT.save_snapshot", "logging.info", "labels_source.size", "labels_source.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "outputs.narrow", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "labels_source.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "labels_source.size", "labels_source.size", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "args.writer.add_scalar", "args.writer.add_scalar", "torch.cat.size", "torch.cat.size", "torch.cat.size", "labels_source.size", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "value.item", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "outputs_dc.narrow", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.get_sr_loss", "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.restore_snapshot", "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.save_snapshot"], ["", "def", "get_loss", "(", "self", ",", "inputs_source", ",", "inputs_target", ",", "labels_source", ",", "labels_target", "=", "None", ",", "args", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "use_safe_training", ":", "\n", "            ", "if", "self", ".", "restore", "and", "self", ".", "iter_num", ">", "0", "and", "self", ".", "sr_loss_weight", ">", "0", ":", "\n", "                ", "self", ".", "restore_snapshot", "(", ")", "\n", "self", ".", "restore", "=", "False", "\n", "logging", ".", "info", "(", "'Train iter={}:restore model snapshot:r={}'", ".", "format", "(", "self", ".", "iter_num", ",", "self", ".", "r", ")", ")", "\n", "\n", "", "if", "self", ".", "iter_num", "%", "self", ".", "adap_adjust_T", "==", "0", "and", "self", ".", "sr_loss_weight", ">", "0", ":", "\n", "                ", "self", ".", "save_snapshot", "(", ")", "\n", "self", ".", "divs", "=", "[", "]", "\n", "logging", ".", "info", "(", "'Train iter={}:save model snapshot:r={}'", ".", "format", "(", "self", ".", "iter_num", ",", "self", ".", "r", ")", ")", "\n", "\n", "", "", "inputs", "=", "torch", ".", "cat", "(", "(", "inputs_source", ",", "inputs_target", ")", ")", "\n", "_", ",", "outputs", ",", "outputs_dc", "=", "self", ".", "net", "(", "inputs", ")", "\n", "\n", "classification_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "outputs", ".", "narrow", "(", "0", ",", "0", ",", "labels_source", ".", "size", "(", "0", ")", ")", ",", "labels_source", ")", "\n", "\n", "domain_loss", "=", "0.", "\n", "if", "args", ".", "domain_loss_weight", ">", "0", ":", "\n", "            ", "domain_labels", "=", "torch", ".", "cat", "(", "\n", "(", "torch", ".", "ones", "(", "inputs_source", ".", "shape", "[", "0", "]", ",", "device", "=", "inputs", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", ",", "\n", "torch", ".", "zeros", "(", "inputs_target", ".", "shape", "[", "0", "]", ",", "device", "=", "inputs", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", ")", ",", "\n", "0", ")", "\n", "domain_loss", "=", "nn", ".", "BCELoss", "(", ")", "(", "F", ".", "sigmoid", "(", "outputs_dc", ".", "narrow", "(", "0", ",", "0", ",", "inputs", ".", "size", "(", "0", ")", ")", ")", ".", "squeeze", "(", ")", ",", "domain_labels", ")", "*", "2", "\n", "\n", "", "total_loss", "=", "classification_loss", "*", "args", ".", "classification_loss_weight", "+", "domain_loss", "*", "args", ".", "domain_loss_weight", "\n", "\n", "sr_loss", "=", "0.", "\n", "if", "args", ".", "sr_loss_weight", ">", "0", ":", "\n", "            ", "outputs_tgt", "=", "outputs", ".", "narrow", "(", "0", ",", "labels_source", ".", "size", "(", "0", ")", ",", "inputs", ".", "size", "(", "0", ")", "-", "labels_source", ".", "size", "(", "0", ")", ")", "\n", "outputs_tgt_perturb", "=", "outputs", ".", "narrow", "(", "0", ",", "inputs", ".", "size", "(", "0", ")", ",", "\n", "inputs", ".", "size", "(", "0", ")", "-", "labels_source", ".", "size", "(", "0", ")", ")", "\n", "\n", "sr_loss", "=", "self", ".", "get_sr_loss", "(", "outputs_tgt", ",", "outputs_tgt_perturb", ",", "sr_epsilon", "=", "args", ".", "sr_epsilon", ",", "\n", "sr_loss_p", "=", "args", ".", "sr_loss_p", ",", "args", "=", "args", ")", "\n", "total_loss", "+=", "self", ".", "sr_loss_weight_adap", "*", "sr_loss", "\n", "\n", "# mi loss", "\n", "", "if", "args", ".", "mi_loss_weight", ">", "0", ":", "\n", "            ", "softmax_out", "=", "F", ".", "softmax", "(", "\n", "outputs", ".", "narrow", "(", "0", ",", "labels_source", ".", "size", "(", "0", ")", ",", "inputs", ".", "size", "(", "0", ")", "-", "labels_source", ".", "size", "(", "0", ")", ")", ")", "\n", "entropy_loss", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "-", "softmax_out", "*", "torch", ".", "log", "(", "softmax_out", "+", "1e-6", ")", ",", "dim", "=", "1", ")", ")", "\n", "msoftmax", "=", "softmax_out", ".", "mean", "(", "dim", "=", "0", ")", "\n", "gentropy_loss", "=", "torch", ".", "sum", "(", "-", "msoftmax", "*", "torch", ".", "log", "(", "msoftmax", "+", "1e-6", ")", ")", "\n", "entropy_loss", "-=", "gentropy_loss", "\n", "total_loss", "+=", "args", ".", "mi_loss_weight", "*", "entropy_loss", "\n", "\n", "\n", "", "if", "args", ".", "use_tensorboard", ":", "\n", "            ", "all_losses", "=", "{", "}", "\n", "all_losses", ".", "update", "(", "{", "'classification_loss'", ":", "classification_loss", "}", ")", "\n", "all_losses", ".", "update", "(", "{", "'domain_loss'", ":", "domain_loss", "}", ")", "\n", "all_losses", ".", "update", "(", "{", "'sr_loss'", ":", "sr_loss", "}", ")", "\n", "\n", "for", "key", ",", "value", "in", "all_losses", ".", "items", "(", ")", ":", "\n", "                ", "if", "torch", ".", "is_tensor", "(", "value", ")", ":", "\n", "                    ", "args", ".", "writer", ".", "add_scalar", "(", "key", ",", "value", ".", "item", "(", ")", ",", "self", ".", "iter_num", ")", "\n", "", "else", ":", "\n", "                    ", "args", ".", "writer", ".", "add_scalar", "(", "key", ",", "value", ",", "self", ".", "iter_num", ")", "\n", "\n", "", "", "args", ".", "writer", ".", "add_scalar", "(", "'sr_alpha_adap'", ",", "self", ".", "net", ".", "base_network", ".", "sr_alpha_adap", ",", "self", ".", "iter_num", ")", "\n", "args", ".", "writer", ".", "add_scalar", "(", "'sr_loss_weight_adap'", ",", "self", ".", "sr_loss_weight_adap", ",", "self", ".", "iter_num", ")", "\n", "\n", "args", ".", "writer", ".", "flush", "(", ")", "\n", "\n", "", "self", ".", "iter_num", "+=", "1", "\n", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.predict": [[332, 341], ["SSRT.SSRT.net", "torch.softmax", "torch.softmax", "torch.softmax", "NotImplementedError"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "inputs", ",", "output", "=", "'prob'", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "net", "(", "inputs", ")", "\n", "if", "output", "==", "'prob'", ":", "\n", "            ", "softmax_outputs", "=", "F", ".", "softmax", "(", "outputs", ")", "\n", "return", "softmax_outputs", "\n", "", "elif", "output", "==", "'score'", ":", "\n", "            ", "return", "outputs", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Invalid output'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.get_parameter_list": [[342, 344], ["None"], "methods", ["None"], ["", "", "def", "get_parameter_list", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "net", ".", "parameter_list", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.set_train": [[345, 348], ["SSRT.SSRT.net.train"], "methods", ["home.repos.pwc.inspect_result.tsun_ssrt.trainer.train.train"], ["", "def", "set_train", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "net", ".", "train", "(", "mode", ")", "\n", "self", ".", "is_train", "=", "mode", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tsun_ssrt.trainer.evaluate.evaluate": [[7, 49], ["model_instance.set_train", "len", "iter", "torch.max", "sklearn.metrics.balanced_accuracy_score", "sklearn.metrics.balanced_accuracy_score", "sklearn.metrics.confusion_matrix", "sklearn.metrics.confusion_matrix", "model_instance.set_train", "torch.no_grad", "range", "torch.sum", "float", "torch.cat.cpu().numpy", "torch.squeeze().float().cpu().numpy", "torch.cat.cpu().numpy", "torch.squeeze().float().cpu().numpy", "sklearn.metrics.confusion_matrix.diagonal", "sklearn.metrics.confusion_matrix.sum", "accuracy.item", "iter.next", "model_instance.predict", "probabilities.data.float.data.float", "labels.cuda.data.float", "inputs.cuda.cuda", "labels.cuda.cuda", "torch.cat", "torch.cat", "torch.squeeze().float", "torch.cat.size", "torch.cat.cpu", "torch.squeeze().float().cpu", "torch.cat.cpu", "torch.squeeze().float().cpu", "torch.squeeze", "torch.squeeze().float", "torch.squeeze().float", "torch.squeeze", "torch.squeeze"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.set_train", "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.set_train", "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.predict"], ["def", "evaluate", "(", "model_instance", ",", "input_loader", ")", ":", "\n", "    ", "ori_train_state", "=", "model_instance", ".", "is_train", "\n", "model_instance", ".", "set_train", "(", "False", ")", "\n", "num_iter", "=", "len", "(", "input_loader", ")", "\n", "iter_test", "=", "iter", "(", "input_loader", ")", "\n", "first_test", "=", "True", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "num_iter", ")", ":", "\n", "            ", "data", "=", "iter_test", ".", "next", "(", ")", "\n", "inputs", "=", "data", "[", "0", "]", "\n", "labels", "=", "data", "[", "1", "]", "\n", "if", "model_instance", ".", "use_gpu", ":", "\n", "                ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "", "probabilities", "=", "model_instance", ".", "predict", "(", "inputs", ")", "\n", "\n", "probabilities", "=", "probabilities", ".", "data", ".", "float", "(", ")", "\n", "labels", "=", "labels", ".", "data", ".", "float", "(", ")", "\n", "if", "first_test", ":", "\n", "                ", "all_probs", "=", "probabilities", "\n", "all_labels", "=", "labels", "\n", "first_test", "=", "False", "\n", "", "else", ":", "\n", "                ", "all_probs", "=", "torch", ".", "cat", "(", "(", "all_probs", ",", "probabilities", ")", ",", "0", ")", "\n", "all_labels", "=", "torch", ".", "cat", "(", "(", "all_labels", ",", "labels", ")", ",", "0", ")", "\n", "\n", "", "", "", "_", ",", "predict", "=", "torch", ".", "max", "(", "all_probs", ",", "1", ")", "\n", "accuracy", "=", "torch", ".", "sum", "(", "torch", ".", "squeeze", "(", "predict", ")", ".", "float", "(", ")", "==", "all_labels", ")", "/", "float", "(", "all_labels", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "\n", "avg_acc", "=", "sklearn", ".", "metrics", ".", "balanced_accuracy_score", "(", "all_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "torch", ".", "squeeze", "(", "predict", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "cm", "=", "sklearn", ".", "metrics", ".", "confusion_matrix", "(", "all_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "torch", ".", "squeeze", "(", "predict", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "accuracies", "=", "cm", ".", "diagonal", "(", ")", "/", "cm", ".", "sum", "(", "1", ")", "\n", "\n", "model_instance", ".", "set_train", "(", "ori_train_state", ")", "\n", "\n", "# return {'accuracy': np.round(100*accuracy, decimals=2), 'per_class_accuracy': np.round(100*avg_acc, decimals=2)}", "\n", "return", "{", "'accuracy'", ":", "accuracy", ".", "item", "(", ")", ",", "'per_class_accuracy'", ":", "avg_acc", ",", "'accuracies'", ":", "accuracies", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.trainer.evaluate.format_evaluate_result": [[50, 56], ["None"], "function", ["None"], ["", "def", "format_evaluate_result", "(", "eval_result", ",", "flag", "=", "False", ")", ":", "\n", "    ", "if", "flag", ":", "\n", "        ", "return", "'Accuracy={}:Per-class accuracy={}:Accs={}'", ".", "format", "(", "eval_result", "[", "'accuracy'", "]", ",", "\n", "eval_result", "[", "'per_class_accuracy'", "]", ",", "eval_result", "[", "'accuracies'", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "'Accuracy={}:Per-class accuracy={}'", ".", "format", "(", "eval_result", "[", "'accuracy'", "]", ",", "eval_result", "[", "'per_class_accuracy'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.trainer.evaluate.evaluate_all": [[57, 96], ["evaluate.evaluate", "print", "logging.info", "evaluate.evaluate", "print", "logging.info", "args.writer.add_scalar", "args.writer.add_scalar", "args.writer.flush", "args.writer.add_scalar", "args.writer.add_scalar", "args.writer.flush", "enumerate", "evaluate.evaluate", "print", "logging.info", "evaluate.format_evaluate_result", "evaluate.format_evaluate_result", "type", "type", "evaluate.evaluate", "utils.utils.parse_path", "print", "logging.info", "args.writer.add_scalar", "args.writer.add_scalar", "args.writer.flush", "args.writer.add_scalar", "args.writer.add_scalar", "args.writer.flush", "evaluate.format_evaluate_result", "evaluate.format_evaluate_result"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.trainer.evaluate.evaluate", "home.repos.pwc.inspect_result.tsun_ssrt.trainer.evaluate.evaluate", "home.repos.pwc.inspect_result.tsun_ssrt.trainer.evaluate.evaluate", "home.repos.pwc.inspect_result.tsun_ssrt.trainer.evaluate.format_evaluate_result", "home.repos.pwc.inspect_result.tsun_ssrt.trainer.evaluate.format_evaluate_result", "home.repos.pwc.inspect_result.tsun_ssrt.trainer.evaluate.evaluate", "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.parse_path", "home.repos.pwc.inspect_result.tsun_ssrt.trainer.evaluate.format_evaluate_result", "home.repos.pwc.inspect_result.tsun_ssrt.trainer.evaluate.format_evaluate_result"], ["", "", "def", "evaluate_all", "(", "model_instance", ",", "dataloaders", ",", "iter_num", ",", "args", ")", ":", "\n", "    ", "flag", "=", "args", ".", "dataset", "==", "'visda'", "\n", "if", "args", ".", "eval_source", ":", "\n", "        ", "eval_result", "=", "evaluate", "(", "model_instance", ",", "dataloaders", "[", "\"source_val\"", "]", ")", "\n", "if", "args", ".", "use_tensorboard", ":", "\n", "            ", "args", ".", "writer", ".", "add_scalar", "(", "'source_accuracy'", ",", "eval_result", "[", "'accuracy'", "]", ",", "iter_num", ")", "\n", "args", ".", "writer", ".", "add_scalar", "(", "'per_class_source_accuracy'", ",", "eval_result", "[", "'per_class_accuracy'", "]", ",", "iter_num", ")", "\n", "args", ".", "writer", ".", "flush", "(", ")", "\n", "", "print", "(", "'\\n'", ")", "\n", "logging", ".", "info", "(", "'Train epoch={}:Source {}'", ".", "format", "(", "iter_num", ",", "format_evaluate_result", "(", "eval_result", ",", "flag", ")", ")", ")", "\n", "\n", "", "if", "args", ".", "eval_target", "and", "dataloaders", "[", "\"target_val\"", "]", "is", "not", "None", ":", "\n", "        ", "eval_result", "=", "evaluate", "(", "model_instance", ",", "dataloaders", "[", "\"target_val\"", "]", ")", "\n", "if", "args", ".", "use_tensorboard", ":", "\n", "            ", "args", ".", "writer", ".", "add_scalar", "(", "'target_accuracy'", ",", "eval_result", "[", "'accuracy'", "]", ",", "iter_num", ")", "\n", "args", ".", "writer", ".", "add_scalar", "(", "'per_class_target_accuracy'", ",", "eval_result", "[", "'per_class_accuracy'", "]", ",", "iter_num", ")", "\n", "args", ".", "writer", ".", "flush", "(", ")", "\n", "", "print", "(", "'\\n'", ")", "\n", "logging", ".", "info", "(", "'Train epoch={}:Target {}'", ".", "format", "(", "iter_num", ",", "format_evaluate_result", "(", "eval_result", ",", "flag", ")", ")", ")", "\n", "\n", "", "if", "args", ".", "eval_test", "and", "dataloaders", "[", "\"test\"", "]", "is", "not", "None", ":", "\n", "        ", "if", "type", "(", "dataloaders", "[", "\"test\"", "]", ")", "is", "list", "or", "type", "(", "dataloaders", "[", "\"test\"", "]", ")", "is", "tuple", ":", "\n", "            ", "for", "i", ",", "t_test_loader", "in", "enumerate", "(", "dataloaders", "[", "\"test\"", "]", ")", ":", "\n", "                ", "eval_result", "=", "evaluate", "(", "model_instance", ",", "t_test_loader", ")", "\n", "ext", "=", "parse_path", "(", "args", ".", "test_path", "[", "i", "]", ")", "\n", "if", "args", ".", "use_tensorboard", ":", "\n", "                    ", "args", ".", "writer", ".", "add_scalar", "(", "'test_accuracy_{}'", ".", "format", "(", "ext", ")", ",", "eval_result", "[", "'accuracy'", "]", ",", "iter_num", ")", "\n", "args", ".", "writer", ".", "add_scalar", "(", "'per_class_test_accuracy_{}'", ".", "format", "(", "ext", ")", ",", "eval_result", "[", "'per_class_accuracy'", "]", ",", "iter_num", ")", "\n", "args", ".", "writer", ".", "flush", "(", ")", "\n", "", "print", "(", "'\\n'", ")", "\n", "logging", ".", "info", "(", "'Train epoch={}:Test {} {}'", ".", "format", "(", "iter_num", ",", "ext", ",", "format_evaluate_result", "(", "eval_result", ",", "flag", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "eval_result", "=", "evaluate", "(", "model_instance", ",", "dataloaders", "[", "\"test\"", "]", ")", "\n", "if", "args", ".", "use_tensorboard", ":", "\n", "                ", "args", ".", "writer", ".", "add_scalar", "(", "'test_accuracy'", ",", "eval_result", "[", "'accuracy'", "]", ",", "iter_num", ")", "\n", "args", ".", "writer", ".", "add_scalar", "(", "'per_class_test_accuracy'", ",", "eval_result", "[", "'per_class_accuracy'", "]", ",", "iter_num", ")", "\n", "args", ".", "writer", ".", "flush", "(", ")", "\n", "", "print", "(", "'\\n'", ")", "\n", "logging", ".", "info", "(", "'Train epoch={}:Test {}'", ".", "format", "(", "iter_num", ",", "format_evaluate_result", "(", "eval_result", ",", "flag", ")", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.tsun_ssrt.trainer.train.train_source": [[19, 64], ["model_instance.set_train", "print", "tqdm.tqdm", "dataset.data_provider.ForeverDataIterator", "range", "print", "tqdm.tqdm", "range", "next", "inputs_source.cuda.cuda", "labels_source.cuda.cuda", "optimizer.zero_grad", "model_instance.forward", "classifier_loss.backward", "optimizer.step", "tqdm.tqdm.update", "trainer.evaluate.evaluate_all", "save_checkpoint", "logging.info", "torch.CrossEntropyLoss", "os.path.exists", "os.makedirs", "str", "str", "args_to_str_src"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.set_train", "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRTNet.forward", "home.repos.pwc.inspect_result.tsun_ssrt.model.grl.GradientReverseFunction.backward", "home.repos.pwc.inspect_result.tsun_ssrt.model.grl.WarmStartGradientReverseLayer.step", "home.repos.pwc.inspect_result.tsun_ssrt.trainer.evaluate.evaluate_all", "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.save_checkpoint", "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.args_to_str_src"], ["def", "train_source", "(", "model_instance", ",", "dataloaders", ",", "optimizer", ",", "lr_scheduler", ",", "args", ")", ":", "\n", "    ", "model_instance", ".", "set_train", "(", "True", ")", "\n", "print", "(", "\"start train source model...\"", ")", "\n", "iter_per_epoch", "=", "args", ".", "iters_per_epoch", "\n", "max_iter", "=", "args", ".", "train_epoch", "*", "iter_per_epoch", "\n", "iter_num", "=", "0", "\n", "\n", "total_progress_bar", "=", "tqdm", ".", "tqdm", "(", "desc", "=", "'Train iter'", ",", "total", "=", "max_iter", ",", "initial", "=", "0", ")", "\n", "\n", "iter_source", "=", "ForeverDataIterator", "(", "dataloaders", "[", "\"source_tr\"", "]", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "train_epoch", ")", ":", "\n", "        ", "for", "_", "in", "tqdm", ".", "tqdm", "(", "\n", "range", "(", "iter_per_epoch", ")", ",", "\n", "total", "=", "iter_per_epoch", ",", "\n", "desc", "=", "'Train epoch = {}'", ".", "format", "(", "epoch", ")", ",", "ncols", "=", "80", ",", "leave", "=", "False", ")", ":", "\n", "\n", "            ", "datas", "=", "next", "(", "iter_source", ")", "\n", "inputs_source", ",", "labels_source", ",", "indexes_source", "=", "datas", "\n", "\n", "inputs_source", "=", "inputs_source", ".", "cuda", "(", ")", "\n", "labels_source", "=", "labels_source", ".", "cuda", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs_source", "=", "model_instance", ".", "forward", "(", "inputs_source", ")", "\n", "classifier_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "outputs_source", ",", "labels_source", ")", "\n", "classifier_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "iter_num", "+=", "1", "\n", "total_progress_bar", ".", "update", "(", "1", ")", "\n", "\n", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_epoch", "==", "0", ":", "\n", "            ", "evaluate_all", "(", "model_instance", ",", "dataloaders", ",", "epoch", "+", "1", ",", "args", ")", "\n", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "save_epoch", "==", "0", "and", "args", ".", "save_checkpoint", ":", "\n", "            ", "checkpoint_dir", "=", "\"checkpoint_source/{}/\"", ".", "format", "(", "args", ".", "base_net", ")", "\n", "checkpoint_name", "=", "checkpoint_dir", "+", "args_to_str_src", "(", "args", ")", "+", "'_'", "+", "args", ".", "timestamp", "+", "'_'", "+", "str", "(", "\n", "args", ".", "random_seed", ")", "+", "'_epoch_'", "+", "str", "(", "epoch", "+", "1", ")", "+", "'.pth'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "", "save_checkpoint", "(", "model_instance", ",", "checkpoint_name", ")", "\n", "logging", ".", "info", "(", "'Train iter={}:Checkpoint saved to {}'", ".", "format", "(", "epoch", "+", "1", ",", "checkpoint_name", ")", ")", "\n", "\n", "", "", "print", "(", "'finish source train'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.trainer.train.train": [[67, 136], ["model_instance.set_train", "logging.info", "tqdm.tqdm", "dataset.data_provider.ForeverDataIterator", "dataset.data_provider.ForeverDataIterator", "range", "logging.info", "tqdm.tqdm", "range", "next", "inputs_source.cuda.cuda", "inputs_target.cuda.cuda", "labels_source.cuda.cuda", "labels_target.cuda.cuda", "optimizer.zero_grad", "model_instance.get_loss.backward", "optimizer.step", "tqdm.tqdm.update", "trainer.evaluate.evaluate_all", "save_checkpoint", "logging.info", "next", "next", "inputs_rand_target.cuda.cuda", "model_instance.get_loss", "model_instance.get_loss", "lr_scheduler.step", "os.path.exists", "os.makedirs", "optimizer.load_state_dict", "logging.info", "optimizer.state_dict", "logging.info", "str", "str", "args_to_str"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.set_train", "home.repos.pwc.inspect_result.tsun_ssrt.model.grl.GradientReverseFunction.backward", "home.repos.pwc.inspect_result.tsun_ssrt.model.grl.WarmStartGradientReverseLayer.step", "home.repos.pwc.inspect_result.tsun_ssrt.trainer.evaluate.evaluate_all", "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.save_checkpoint", "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.get_loss", "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.get_loss", "home.repos.pwc.inspect_result.tsun_ssrt.model.grl.WarmStartGradientReverseLayer.step", "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.args_to_str"], ["", "def", "train", "(", "model_instance", ",", "dataloaders", ",", "optimizer", ",", "lr_scheduler", ",", "args", ")", ":", "\n", "    ", "model_instance", ".", "set_train", "(", "True", ")", "\n", "logging", ".", "info", "(", "\"start training ...\"", ")", "\n", "iter_num", "=", "0", "\n", "iter_per_epoch", "=", "args", ".", "iters_per_epoch", "\n", "max_iter", "=", "args", ".", "train_epoch", "*", "iter_per_epoch", "\n", "total_progress_bar", "=", "tqdm", ".", "tqdm", "(", "desc", "=", "'Train iter'", ",", "total", "=", "max_iter", ",", "initial", "=", "0", ")", "\n", "\n", "iter_source", "=", "ForeverDataIterator", "(", "dataloaders", "[", "\"source_tr\"", "]", ")", "\n", "iter_target", "=", "ForeverDataIterator", "(", "dataloaders", "[", "\"target_tr\"", "]", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "train_epoch", ")", ":", "\n", "        ", "for", "_", "in", "tqdm", ".", "tqdm", "(", "\n", "range", "(", "iter_per_epoch", ")", ",", "\n", "total", "=", "iter_per_epoch", ",", "\n", "desc", "=", "'Train epoch = {}'", ".", "format", "(", "epoch", ")", ",", "ncols", "=", "80", ",", "leave", "=", "False", ")", ":", "\n", "\n", "            ", "inputs_source", ",", "labels_source", ",", "indexes_source", "=", "next", "(", "iter_source", ")", "\n", "if", "args", ".", "rand_aug", ":", "\n", "                ", "inputs_target", ",", "labels_target", ",", "indexes_target", ",", "inputs_rand_target", "=", "next", "(", "iter_target", ")", "\n", "", "else", ":", "\n", "                ", "inputs_target", ",", "labels_target", ",", "indexes_target", "=", "next", "(", "iter_target", ")", "\n", "inputs_rand_target", "=", "None", "\n", "\n", "", "inputs_source", "=", "inputs_source", ".", "cuda", "(", ")", "\n", "inputs_target", "=", "inputs_target", ".", "cuda", "(", ")", "\n", "labels_source", "=", "labels_source", ".", "cuda", "(", ")", "\n", "labels_target", "=", "labels_target", ".", "cuda", "(", ")", "\n", "if", "args", ".", "rand_aug", ":", "\n", "                ", "inputs_rand_target", "=", "inputs_rand_target", ".", "cuda", "(", ")", "\n", "\n", "# safe training", "\n", "", "if", "args", ".", "use_safe_training", "and", "args", ".", "adap_adjust_restore_optimizor", ":", "\n", "                ", "if", "model_instance", ".", "restore", "and", "iter_num", ">", "0", "and", "args", ".", "sr_loss_weight", ">", "0", ":", "\n", "                    ", "optimizer", ".", "load_state_dict", "(", "optimizer_snapshot", ")", "\n", "logging", ".", "info", "(", "'Train iter={}:restore optimizor snapshot'", ".", "format", "(", "iter_num", ")", ")", "\n", "\n", "", "if", "iter_num", "%", "args", ".", "adap_adjust_T", "==", "0", "and", "args", ".", "sr_loss_weight", ">", "0", ":", "\n", "                    ", "optimizer_snapshot", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "logging", ".", "info", "(", "'Train iter={}:save optimizor snapshot'", ".", "format", "(", "iter_num", ")", ")", "\n", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "args", ".", "rand_aug", ":", "\n", "                ", "total_loss", "=", "model_instance", ".", "get_loss", "(", "inputs_source", ",", "inputs_target", ",", "labels_source", ",", "labels_target", ",", "\n", "inputs_rand_target", ",", "args", "=", "args", ")", "\n", "", "else", ":", "\n", "                ", "total_loss", "=", "model_instance", ".", "get_loss", "(", "inputs_source", ",", "inputs_target", ",", "labels_source", ",", "labels_target", ",", "args", "=", "args", ")", "\n", "", "total_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "iter_num", "%", "args", ".", "lr_scheduler_rate", "==", "0", ":", "\n", "                ", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "iter_num", "+=", "1", "\n", "total_progress_bar", ".", "update", "(", "1", ")", "\n", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_epoch", "==", "0", "and", "epoch", "!=", "0", ":", "\n", "            ", "evaluate_all", "(", "model_instance", ",", "dataloaders", ",", "(", "epoch", "+", "1", ")", ",", "args", ")", "\n", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "save_epoch", "==", "0", "and", "args", ".", "save_checkpoint", ":", "\n", "            ", "checkpoint_dir", "=", "\"./checkpoint/{}/\"", ".", "format", "(", "args", ".", "base_net", ")", "\n", "checkpoint_name", "=", "checkpoint_dir", "+", "args_to_str", "(", "args", ")", "+", "'_'", "+", "args", ".", "timestamp", "+", "'_'", "+", "str", "(", "args", ".", "random_seed", ")", "+", "'_epoch_'", "+", "str", "(", "epoch", "+", "1", ")", "+", "'.pth'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "", "save_checkpoint", "(", "model_instance", ",", "checkpoint_name", ")", "\n", "logging", ".", "info", "(", "'Train epoch={}:Checkpoint saved to {}'", ".", "format", "(", "(", "epoch", "+", "1", ")", ",", "checkpoint_name", ")", ")", "\n", "\n", "\n", "", "", "logging", ".", "info", "(", "'finish training.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.trainer.train._init_": [[138, 157], ["trainer.argument_parser.argument_parse", "resetRNGseed", "logging.info", "logging.info", "init_logger", "init_tensorboard_writer", "str", "parse_path", "parse_path"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.trainer.argument_parser.argument_parse", "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.resetRNGseed", "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.init_logger", "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.init_tensorboard_writer", "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.parse_path", "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.parse_path"], ["", "def", "_init_", "(", "args_", ",", "header", ")", ":", "\n", "    ", "args", "=", "argument_parse", "(", "args_", ")", "\n", "\n", "resetRNGseed", "(", "args", ".", "random_seed", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu_id", "\n", "\n", "dir", "=", "'{}_{}'", ".", "format", "(", "args", ".", "timestamp", ",", "'_'", ".", "join", "(", "[", "_", "for", "_", "in", "[", "args", ".", "model", "or", "args", ".", "base_model", ",", "parse_path", "(", "args", ".", "source_path", ")", ",", "\n", "parse_path", "(", "args", ".", "target_path", ")", "]", "if", "_", "!=", "''", "]", ")", ")", "\n", "\n", "if", "not", "logger_init", ":", "\n", "        ", "init_logger", "(", "dir", ",", "args", ".", "use_file_logger", ",", "args", ".", "log_dir", ")", "\n", "\n", "", "if", "args", ".", "use_tensorboard", ":", "\n", "        ", "args", ".", "writer", "=", "init_tensorboard_writer", "(", "args", ".", "tensorboard_dir", ",", "dir", "+", "'_'", "+", "str", "(", "args", ".", "random_seed", ")", ")", "\n", "\n", "", "logging", ".", "info", "(", "header", ")", "\n", "logging", ".", "info", "(", "args", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.trainer.train.train_source_main": [[158, 175], ["train._init_", "dataset.data_provider.get_dataloaders", "Model.get_parameter_list", "torch.optim.SGD", "torch.optim.lr_scheduler.LambdaLR", "train.train_source", "importlib.import_module", "getattr", "getattr.", "NotImplementedError", "float"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.trainer.train._init_", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_provider.get_dataloaders", "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.get_parameter_list", "home.repos.pwc.inspect_result.tsun_ssrt.trainer.train.train_source"], ["", "def", "train_source_main", "(", "args_", ",", "header", "=", "''", ")", ":", "\n", "    ", "args", "=", "_init_", "(", "args_", ",", "header", ")", "\n", "\n", "try", ":", "\n", "        ", "model_module", "=", "import_module", "(", "'model.'", "+", "args", ".", "model", ")", "\n", "Model", "=", "getattr", "(", "model_module", ",", "args", ".", "model", ")", "\n", "model_instance", "=", "Model", "(", "base_net", "=", "args", ".", "base_net", ",", "bottleneck_dim", "=", "args", ".", "bottleneck_dim", ",", "use_gpu", "=", "True", ",", "class_num", "=", "args", ".", "class_num", ",", "args", "=", "args", ")", "\n", "", "except", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Unsupported model'", ")", "\n", "\n", "", "dataloaders", "=", "get_dataloaders", "(", "args", ")", "\n", "param_groups", "=", "model_instance", ".", "get_parameter_list", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "param_groups", ",", "args", ".", "lr", ",", "momentum", "=", "args", ".", "lr_momentum", ",", "weight_decay", "=", "args", ".", "lr_wd", ",", "nesterov", "=", "True", ")", "\n", "lr_scheduler", "=", "LambdaLR", "(", "optimizer", ",", "lambda", "x", ":", "args", ".", "lr", "*", "(", "1.", "+", "args", ".", "lr_scheduler_gamma", "*", "float", "(", "x", ")", ")", "**", "(", "-", "args", ".", "lr_scheduler_decay_rate", ")", ")", "\n", "\n", "train_source", "(", "model_instance", ",", "dataloaders", ",", "optimizer", "=", "optimizer", ",", "lr_scheduler", "=", "lr_scheduler", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsun_ssrt.trainer.train.train_main": [[177, 198], ["train._init_", "dataset.data_provider.get_dataloaders", "Model.get_parameter_list", "torch.optim.SGD", "torch.optim.lr_scheduler.LambdaLR", "train.train", "importlib.import_module", "getattr", "getattr.", "load_checkpoint", "logging.info", "NotImplementedError", "float"], "function", ["home.repos.pwc.inspect_result.tsun_ssrt.trainer.train._init_", "home.repos.pwc.inspect_result.tsun_ssrt.dataset.data_provider.get_dataloaders", "home.repos.pwc.inspect_result.tsun_ssrt.model.SSRT.SSRT.get_parameter_list", "home.repos.pwc.inspect_result.tsun_ssrt.trainer.train.train", "home.repos.pwc.inspect_result.tsun_ssrt.utils.utils.load_checkpoint"], ["", "def", "train_main", "(", "args_", ",", "header", "=", "''", ")", ":", "\n", "    ", "args", "=", "_init_", "(", "args_", ",", "header", ")", "\n", "\n", "try", ":", "\n", "        ", "model_module", "=", "import_module", "(", "'model.'", "+", "args", ".", "model", ")", "\n", "Model", "=", "getattr", "(", "model_module", ",", "args", ".", "model", ")", "\n", "model_instance", "=", "Model", "(", "base_net", "=", "args", ".", "base_net", ",", "bottleneck_dim", "=", "args", ".", "bottleneck_dim", ",", "use_gpu", "=", "True", ",", "class_num", "=", "args", ".", "class_num", ",", "args", "=", "args", ")", "\n", "", "except", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Unsupported model'", ")", "\n", "\n", "", "dataloaders", "=", "get_dataloaders", "(", "args", ")", "\n", "param_groups", "=", "model_instance", ".", "get_parameter_list", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "param_groups", ",", "args", ".", "lr", ",", "momentum", "=", "args", ".", "lr_momentum", ",", "weight_decay", "=", "args", ".", "lr_wd", ",", "nesterov", "=", "True", ")", "\n", "lr_scheduler", "=", "LambdaLR", "(", "optimizer", ",", "lambda", "x", ":", "args", ".", "lr", "*", "(", "1.", "+", "args", ".", "lr_scheduler_gamma", "*", "float", "(", "x", ")", ")", "**", "(", "-", "args", ".", "lr_scheduler_decay_rate", ")", ")", "\n", "\n", "if", "args", ".", "restore_checkpoint", "is", "not", "None", ":", "\n", "        ", "load_checkpoint", "(", "model_instance", ",", "args", ".", "restore_checkpoint", ")", "\n", "logging", ".", "info", "(", "'Model weights restored from: {}'", ".", "format", "(", "args", ".", "restore_checkpoint", ")", ")", "\n", "\n", "", "train", "(", "model_instance", ",", "dataloaders", ",", "optimizer", "=", "optimizer", ",", "lr_scheduler", "=", "lr_scheduler", ",", "args", "=", "args", ")", "", "", ""]], "home.repos.pwc.inspect_result.tsun_ssrt.trainer.argument_parser.argument_parse": [[6, 152], ["time.strftime", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "time.localtime", "NotImplementedError"], "function", ["None"], ["def", "argument_parse", "(", "args_", ")", ":", "\n", "    ", "_timestamp", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d_%H.%M.%S\"", ",", "time", ".", "localtime", "(", ")", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# model", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "'uda model'", ")", "\n", "parser", ".", "add_argument", "(", "'--base_net'", ",", "default", "=", "'vit_base_patch16_224'", ",", "type", "=", "str", ",", "\n", "help", "=", "'vit backbone'", ")", "\n", "parser", ".", "add_argument", "(", "'--restore_checkpoint'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "'checkpoint to restore weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_bottleneck'", ",", "default", "=", "True", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'whether use bottleneck layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--bottleneck_dim'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "\"the dim of the bottleneck layer\"", ")", "\n", "\n", "# dataset", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'Office-31'", ",", "type", "=", "str", ",", "\n", "help", "=", "'dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--source_path'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "'path to source (train) image list'", ")", "\n", "parser", ".", "add_argument", "(", "'--target_path'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "'path to target (train) image list'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_path'", ",", "default", "=", "None", ",", "type", "=", "strlist", ",", "\n", "help", "=", "'path to (target) test image list'", ")", "\n", "parser", ".", "add_argument", "(", "'--rand_aug'", ",", "default", "=", "'False'", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'whether use RandAug for target images'", ")", "\n", "parser", ".", "add_argument", "(", "'--center_crop'", ",", "default", "=", "False", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'whether use center crop for images'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_resized_crop'", ",", "default", "=", "False", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'whether use RandomResizedCrop for images'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of workers for dataloader'", ")", "\n", "\n", "# training configuration", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "0.004", ",", "type", "=", "float", ",", "\n", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_wd'", ",", "default", "=", "0.0005", ",", "type", "=", "float", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_momentum'", ",", "default", "=", "0.9", ",", "type", "=", "float", ",", "\n", "help", "=", "'lr schedule momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_scheduler_gamma'", ",", "default", "=", "0.001", ",", "type", "=", "float", ",", "\n", "help", "=", "'lr scheduler gamma'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_scheduler_decay_rate'", ",", "default", "=", "0.75", ",", "type", "=", "float", ",", "\n", "help", "=", "'lr schedule decay rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_scheduler_rate'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'lr schedule rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "32", ",", "type", "=", "int", ",", "\n", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--class_num'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'class number'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_source'", ",", "default", "=", "'True'", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'whether evaluate on source data'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_target'", ",", "default", "=", "'True'", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'whether evaluate on target data'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_test'", ",", "default", "=", "'True'", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'whether evaluate on test data'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_checkpoint'", ",", "default", "=", "'True'", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'whether save checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--iters_per_epoch'", ",", "default", "=", "1000", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of iterations per epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_epoch'", ",", "default", "=", "'50'", ",", "type", "=", "int", ",", "\n", "help", "=", "'interval of saving checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_epoch'", ",", "default", "=", "'10'", ",", "type", "=", "int", ",", "\n", "help", "=", "'interval of evaluating'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_epoch'", ",", "default", "=", "50", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of training epochs'", ")", "\n", "\n", "# environment", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "default", "=", "'0'", ",", "type", "=", "str", ",", "\n", "help", "=", "'which gpu to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_seed'", ",", "default", "=", "'0'", ",", "type", "=", "int", ",", "\n", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--timestamp'", ",", "default", "=", "_timestamp", ",", "type", "=", "str", ",", "\n", "help", "=", "'timestamp'", ")", "\n", "\n", "# tensorboard and logger", "\n", "parser", ".", "add_argument", "(", "'--use_file_logger'", ",", "default", "=", "'True'", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'whether use file logger'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "default", "=", "'log'", ",", "type", "=", "str", ",", "\n", "help", "=", "'logging directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_tensorboard'", ",", "default", "=", "'False'", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'whether use tensorboard'", ")", "\n", "parser", ".", "add_argument", "(", "'--tensorboard_dir'", ",", "default", "=", "'tensorboard'", ",", "type", "=", "str", ",", "\n", "help", "=", "'tensorboard directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--writer'", ",", "default", "=", "None", ",", "type", "=", "SummaryWriter", ",", "\n", "help", "=", "'tensorboard writer'", ")", "\n", "\n", "# losses", "\n", "parser", ".", "add_argument", "(", "'--classification_loss_weight'", ",", "default", "=", "'1.00'", ",", "type", "=", "float", ",", "\n", "help", "=", "'weight of semantic classification loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--domain_loss_weight'", ",", "default", "=", "'1.00'", ",", "type", "=", "float", ",", "\n", "help", "=", "'weight of domain classification loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--mi_loss_weight'", ",", "default", "=", "'0.00'", ",", "type", "=", "float", ",", "\n", "help", "=", "'weight of mutual information maximization loss'", ")", "\n", "\n", "# self refinement", "\n", "parser", ".", "add_argument", "(", "'--sr_alpha'", ",", "default", "=", "'0.3'", ",", "type", "=", "float", ",", "\n", "help", "=", "'self refinement alpha (perturbation magnitude)'", ")", "\n", "parser", ".", "add_argument", "(", "'--sr_layers'", ",", "default", "=", "'[0,4,8]'", ",", "type", "=", "str2list", ",", "\n", "help", "=", "'transformer layers to add perturbation (0 to 11; -1 means raw input images)'", ")", "\n", "parser", ".", "add_argument", "(", "'--sr_loss_p'", ",", "default", "=", "'0.5'", ",", "type", "=", "float", ",", "\n", "help", "=", "'self refinement loss sampling probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--sr_loss_weight'", ",", "default", "=", "'0.2'", ",", "type", "=", "float", ",", "\n", "help", "=", "'weight of self refinement loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--sr_epsilon'", ",", "default", "=", "'0.4'", ",", "type", "=", "float", ",", "\n", "help", "=", "'self refinement epsilon (confidence threshold)'", ")", "\n", "\n", "# safe training", "\n", "parser", ".", "add_argument", "(", "'--use_safe_training'", ",", "default", "=", "'True'", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'whether use safe training'", ")", "\n", "parser", ".", "add_argument", "(", "'--adap_adjust_restore_optimizor'", ",", "default", "=", "'False'", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'whether save and restore snapshot of optimizor'", ")", "\n", "parser", ".", "add_argument", "(", "'--adap_adjust_T'", ",", "default", "=", "'1000'", ",", "type", "=", "int", ",", "\n", "help", "=", "'adaptive adjustment T (interval of saving/restoring snapshot and detecting diversity drop)'", ")", "\n", "parser", ".", "add_argument", "(", "'--adap_adjust_L'", ",", "default", "=", "'4'", ",", "type", "=", "int", ",", "\n", "help", "=", "'adaptive adjustment L (multi-scale detection of diversity dropping)'", ")", "\n", "parser", ".", "add_argument", "(", "'--adap_adjust_append_last_subintervals'", ",", "default", "=", "'True'", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'whether detect diversity drop along with last sub-intervals'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "args_", ")", "\n", "\n", "# default configurations", "\n", "if", "args", ".", "dataset", "==", "'Office-31'", ":", "\n", "        ", "class_num", "=", "31", "\n", "bottleneck_dim", "=", "1024", "\n", "center_crop", "=", "False", "\n", "", "elif", "args", ".", "dataset", "==", "'Office-Home'", ":", "\n", "        ", "class_num", "=", "65", "\n", "bottleneck_dim", "=", "2048", "\n", "center_crop", "=", "False", "\n", "", "elif", "args", ".", "dataset", "==", "'visda'", ":", "\n", "        ", "class_num", "=", "12", "\n", "bottleneck_dim", "=", "1024", "\n", "center_crop", "=", "True", "\n", "", "elif", "args", ".", "dataset", "==", "'DomainNet'", ":", "\n", "        ", "class_num", "=", "345", "\n", "bottleneck_dim", "=", "1024", "\n", "center_crop", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Unsupported dataset'", ")", "\n", "\n", "", "args", ".", "bottleneck_dim", "=", "bottleneck_dim", "if", "args", ".", "bottleneck_dim", "is", "None", "else", "args", ".", "bottleneck_dim", "\n", "args", ".", "center_crop", "=", "center_crop", "if", "args", ".", "center_crop", "is", "None", "else", "args", ".", "center_crop", "\n", "args", ".", "class_num", "=", "class_num", "\n", "\n", "return", "args", "", "", ""]]}