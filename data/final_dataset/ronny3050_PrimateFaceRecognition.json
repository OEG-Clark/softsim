{"home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.summary.run": [[4, 82], ["range", "range", "open", "range", "ranksets.append", "rank1.append", "rank5.append", "print", "print", "int", "float", "len", "range", "max", "range", "float", "float", "line.split", "line.split"], "function", ["None"], ["def", "run", "(", "logdir", ")", ":", "\n", "    ", "num_groups", "=", "1", "\n", "num_inner", "=", "1", "\n", "\n", "rank1", "=", "[", "]", "\n", "rank5", "=", "[", "]", "\n", "\n", "ha", "=", "0", "\n", "hb", "=", "0", "\n", "ma", "=", "0", "\n", "mb", "=", "0", "\n", "hc", "=", "0", "\n", "mc", "=", "0", "\n", "\n", "ranksets", "=", "[", "]", "\n", "ta", "=", "0", "\n", "fa", "=", "0", "\n", "tr", "=", "0", "\n", "fr", "=", "0", "\n", "\n", "accScores", "=", "[", "]", "\n", "rejScores", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_groups", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_inner", ")", ":", "\n", "            ", "rfile", "=", "open", "(", "logdir", "+", "'/result.txt'", ")", "\n", "r1", "=", "0", "\n", "r5", "=", "0", "\n", "\n", "count", "=", "0", "\n", "curve", "=", "[", "0.0", "for", "k", "in", "range", "(", "0", ",", "5", ")", "]", "\n", "\n", "for", "line", "in", "rfile", ":", "\n", "                ", "if", "line", "==", "''", ":", "\n", "                    ", "continue", "\n", "", "rank", "=", "int", "(", "line", ".", "split", "(", "','", ")", "[", "1", "]", ")", "\n", "score", "=", "float", "(", "line", ".", "split", "(", "','", ")", "[", "2", "]", ")", "\n", "\n", "if", "rank", ">=", "0", ":", "\n", "                    ", "rankA", "=", "max", "(", "rank", "-", "1", ",", "0", ")", "\n", "for", "k", "in", "range", "(", "rankA", ",", "5", ")", ":", "\n", "                        ", "curve", "[", "k", "]", "+=", "1", "\n", "\n", "", "", "count", "+=", "1", "\n", "if", "rank", "==", "1", "or", "rank", "==", "0", ":", "\n", "                    ", "r1", "+=", "1", "\n", "\n", "", "if", "rank", "<=", "5", "and", "rank", ">=", "0", ":", "\n", "                    ", "r5", "+=", "1", "\n", "\n", "", "'''if rank > 0:\n                    ta += 1\n                    accScores.append(score)\n    \n                if rank == 0:\n                    tr += 1\n                    rejScores.append(score)\n    \n                if rank == -1:\n                    fr += 1\n                    accScores.append(score)\n    \n                if rank == -2:\n                    fa += 1\n                    rejScores.append(score)'''", "\n", "\n", "", "for", "k", "in", "range", "(", "len", "(", "curve", ")", ")", ":", "\n", "                ", "curve", "[", "k", "]", "/=", "count", "\n", "\n", "#        print(r1)", "\n", "#        print(count)", "\n", "\n", "", "ranksets", ".", "append", "(", "curve", ")", "\n", "rank1", ".", "append", "(", "r1", "/", "float", "(", "count", ")", ")", "\n", "rank5", ".", "append", "(", "r5", "/", "float", "(", "count", ")", ")", "\n", "print", "(", "rank1", ")", "\n", "print", "(", "rank5", ")", "\n", "return", "rank1", ",", "rank5", "\n", "#meanr1 = sum(rank1)/len(rank1)", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.evaluate.ImageSet.__init__": [[22, 27], ["evaluate.ImageSet.parse"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.evaluate.ImageSet.parse"], ["    ", "def", "__init__", "(", "self", ",", "image_paths", ",", "config", ")", ":", "\n", "        ", "self", ".", "image_paths", "=", "image_paths", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "images", ",", "self", ".", "labels", "=", "self", ".", "parse", "(", ")", "\n", "self", ".", "features", "=", "None", "\n", "", "def", "parse", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.evaluate.ImageSet.parse": [[27, 30], ["line.strip().split", "utils.preprocess", "line.strip"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.preprocess"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "lines", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "line", "in", "self", ".", "image_paths", "]", "\n", "return", "utils", ".", "preprocess", "(", "[", "line", "[", "0", "]", "for", "line", "in", "lines", "]", ",", "self", ".", "config", ",", "False", ")", ",", "[", "line", "[", "1", "]", "for", "line", "in", "lines", "]", "\n", "", "def", "extract_features", "(", "self", ",", "model", ",", "batch_size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.evaluate.ImageSet.extract_features": [[30, 32], ["model.extract_feature"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.network.Network.extract_feature"], ["", "def", "extract_features", "(", "self", ",", "model", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "features", "=", "model", ".", "extract_feature", "(", "self", ".", "images", ",", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.evaluate._find": [[16, 18], ["enumerate"], "function", ["None"], ["def", "_find", "(", "l", ",", "a", ")", ":", "\n", "    ", "return", "[", "i", "for", "(", "i", ",", "x", ")", "in", "enumerate", "(", "l", ")", "if", "x", "==", "a", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.evaluate.identify": [[33, 58], ["list", "range", "facepy.metric.cosineSimilarity", "facepy.metric.cosineSimilarity", "summary.run", "dict.fromkeys", "len", "evaluate._find", "facepy.linalg.normalize", "facepy.linalg.normalize", "galFeaturesList.append", "numpy.array", "open", "range", "numpy.mean", "len", "f.write", "numpy.argsort", "numpy.array", "list().index", "list"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.metric.cosineSimilarity", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.metric.cosineSimilarity", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.summary.run", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.evaluate._find", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.linalg.normalize", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.linalg.normalize"], ["", "", "def", "identify", "(", "logdir", ",", "probe", ",", "gallery", ")", ":", "\n", "\n", "    ", "uq", "=", "list", "(", "dict", ".", "fromkeys", "(", "gallery", ".", "labels", ")", ")", "\n", "galFeaturesList", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "uq", ")", ")", ":", "\n", "        ", "idx", "=", "_find", "(", "gallery", ".", "labels", ",", "uq", "[", "i", "]", ")", "\n", "# Get feature vector for gallery images for the same indivdual", "\n", "galFeatures", "=", "gallery", ".", "features", "[", "idx", "]", "\n", "# individual feature vector from MAX, Mean, or Min template fusion", "\n", "individualFeatures", "=", "facepy", ".", "linalg", ".", "normalize", "(", "np", ".", "mean", "(", "galFeatures", ",", "axis", "=", "0", ")", ")", "\n", "galFeaturesList", ".", "append", "(", "individualFeatures", ")", "\n", "\n", "", "score_matrix", "=", "facepy", ".", "metric", ".", "cosineSimilarity", "(", "probe", ".", "features", ",", "np", ".", "array", "(", "galFeaturesList", ")", ")", "\n", "#score_matrix = facepy.metric.cosineSimilarity(probe.features, gallery.features)", "\n", "#   ", "\n", "# Get ranks for each probe image", "\n", "with", "open", "(", "logdir", "+", "'/result.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "probe", ".", "labels", ")", ")", ":", "\n", "                ", "sort_idx", "=", "np", ".", "argsort", "(", "score_matrix", "[", "i", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "predictions", "=", "np", ".", "array", "(", "uq", ")", "[", "sort_idx", "]", "\n", "rank", "=", "list", "(", "predictions", ")", ".", "index", "(", "probe", ".", "labels", "[", "i", "]", ")", "+", "1", "\n", "score", "=", "score_matrix", "[", "i", "]", "[", "sort_idx", "]", "[", "rank", "-", "1", "]", "\n", "prediction", "=", "predictions", "[", "0", "]", "\n", "f", ".", "write", "(", "'{},{},{},{}\\n'", ".", "format", "(", "probe", ".", "labels", "[", "i", "]", ",", "rank", ",", "score", ",", "prediction", ")", ")", "\n", "", "", "return", "summary", ".", "run", "(", "logdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.average_tensors": [[29, 44], ["len", "tensorflow.identity", "tensorflow.concat", "tensorflow.reduce_mean", "tensorflow.expand_dims", "expanded_tensors.append"], "function", ["None"], ["def", "average_tensors", "(", "tensors", ",", "name", "=", "None", ")", ":", "\n", "    ", "if", "len", "(", "tensors", ")", "==", "1", ":", "\n", "        ", "return", "tf", ".", "identity", "(", "tensors", "[", "0", "]", ",", "name", "=", "name", ")", "\n", "", "else", ":", "\n", "# Each tensor in the list should be of the same size", "\n", "        ", "expanded_tensors", "=", "[", "]", "\n", "\n", "for", "t", "in", "tensors", ":", "\n", "            ", "expanded_t", "=", "tf", ".", "expand_dims", "(", "t", ",", "0", ")", "\n", "expanded_tensors", ".", "append", "(", "expanded_t", ")", "\n", "\n", "", "average_tensor", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "expanded_tensors", ")", "\n", "average_tensor", "=", "tf", ".", "reduce_mean", "(", "average_tensor", ",", "0", ",", "name", "=", "name", ")", "\n", "\n", "return", "average_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.average_grads": [[46, 66], ["len", "zip", "average_grads.append", "tflib.average_tensors"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.average_tensors"], ["", "", "def", "average_grads", "(", "tower_grads", ")", ":", "\n", "    ", "\"\"\"Calculate the average gradient for each shared variable across all towers.\n    Note that this function provides a synchronization point across all towers.\n    Args:\n        tower_grads: List of lists of gradients. The outer list is over different \n        towers. The inner list is over the gradient calculation in each tower.\n    Returns:\n        List of gradients where the gradient has been averaged across all towers.\n    \"\"\"", "\n", "if", "len", "(", "tower_grads", ")", "==", "1", ":", "\n", "        ", "return", "tower_grads", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "average_grads", "=", "[", "]", "\n", "for", "grad_", "in", "zip", "(", "*", "tower_grads", ")", ":", "\n", "# Note that each grad looks like the following:", "\n", "#   (grad0_gpu0, ... , grad0_gpuN)", "\n", "            ", "average_grad", "=", "None", "if", "grad_", "[", "0", "]", "==", "None", "else", "average_tensors", "(", "grad_", ")", "\n", "average_grads", ".", "append", "(", "average_grad", ")", "\n", "\n", "", "return", "average_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.apply_gradient": [[67, 120], ["learning_rate_multipliers.items", "learning_rate_dict.keys", "zip", "print", "learning_rate_dict.items", "print", "tensorflow.group", "len", "len", "print", "apply_gradient_ops.append", "[].append", "len", "tensorflow.train.AdagradOptimizer", "tf.train.GradientDescentOptimizer.apply_gradients", "tensorflow.train.AdadeltaOptimizer", "len", "tensorflow.train.AdamOptimizer", "tensorflow.train.RMSPropOptimizer", "tensorflow.train.MomentumOptimizer", "tensorflow.train.GradientDescentOptimizer", "ValueError"], "function", ["None"], ["", "", "def", "apply_gradient", "(", "update_gradient_vars", ",", "grads", ",", "optimizer", ",", "learning_rate", ",", "learning_rate_multipliers", "=", "None", ")", ":", "\n", "    ", "assert", "(", "len", "(", "grads", ")", "==", "len", "(", "update_gradient_vars", ")", ")", "\n", "if", "learning_rate_multipliers", "is", "None", ":", "learning_rate_multipliers", "=", "{", "}", "\n", "# Build a dictionary to save multiplier config", "\n", "# format -> {scope_name: ((grads, vars), lr_multi)}", "\n", "learning_rate_dict", "=", "{", "}", "\n", "learning_rate_dict", "[", "'__default__'", "]", "=", "(", "[", "]", ",", "1.0", ")", "\n", "for", "scope", ",", "multiplier", "in", "learning_rate_multipliers", ".", "items", "(", ")", ":", "\n", "        ", "assert", "scope", "!=", "'__default__'", "\n", "learning_rate_dict", "[", "scope", "]", "=", "(", "[", "]", ",", "multiplier", ")", "\n", "\n", "# Scan all the variables, insert into dict", "\n", "", "scopes", "=", "learning_rate_dict", ".", "keys", "(", ")", "\n", "for", "var", ",", "grad", "in", "zip", "(", "update_gradient_vars", ",", "grads", ")", ":", "\n", "        ", "count", "=", "0", "\n", "scope_temp", "=", "''", "\n", "for", "scope", "in", "scopes", ":", "\n", "            ", "if", "scope", "in", "var", ".", "name", ":", "\n", "                ", "scope_temp", "=", "scope", "\n", "count", "+=", "1", "\n", "", "", "assert", "count", "<=", "1", ",", "\"More than one multiplier scopes appear in variable: %s\"", "%", "var", ".", "name", "\n", "if", "count", "==", "0", ":", "scope_temp", "=", "'__default__'", "\n", "if", "grad", "is", "not", "None", ":", "\n", "            ", "learning_rate_dict", "[", "scope_temp", "]", "[", "0", "]", ".", "append", "(", "(", "grad", ",", "var", ")", ")", "\n", "\n", "# Build a optimizer for each multiplier scope", "\n", "", "", "apply_gradient_ops", "=", "[", "]", "\n", "print", "(", "'\\nLearning rate multipliers:'", ")", "\n", "for", "scope", ",", "scope_content", "in", "learning_rate_dict", ".", "items", "(", ")", ":", "\n", "        ", "scope_grads_vars", ",", "multiplier", "=", "scope_content", "\n", "print", "(", "'%s:\\n  # variables: %d\\n  lr_multi: %f'", "%", "(", "scope", ",", "len", "(", "scope_grads_vars", ")", ",", "multiplier", ")", ")", "\n", "if", "len", "(", "scope_grads_vars", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "scope_learning_rate", "=", "multiplier", "*", "learning_rate", "\n", "if", "optimizer", "==", "'ADAGRAD'", ":", "\n", "            ", "opt", "=", "tf", ".", "train", ".", "AdagradOptimizer", "(", "scope_learning_rate", ")", "\n", "", "elif", "optimizer", "==", "'ADADELTA'", ":", "\n", "            ", "opt", "=", "tf", ".", "train", ".", "AdadeltaOptimizer", "(", "scope_learning_rate", ",", "rho", "=", "0.9", ",", "epsilon", "=", "1e-6", ")", "\n", "", "elif", "optimizer", "==", "'ADAM'", ":", "\n", "            ", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "scope_learning_rate", ",", "beta1", "=", "0.9", ",", "beta2", "=", "0.999", ",", "epsilon", "=", "0.1", ")", "\n", "", "elif", "optimizer", "==", "'RMSPROP'", ":", "\n", "            ", "opt", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "scope_learning_rate", ",", "decay", "=", "0.9", ",", "momentum", "=", "0.9", ",", "epsilon", "=", "1.0", ")", "\n", "", "elif", "optimizer", "==", "'MOM'", ":", "\n", "            ", "opt", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "scope_learning_rate", ",", "0.9", ",", "use_nesterov", "=", "False", ")", "\n", "", "elif", "optimizer", "==", "'SGD'", ":", "\n", "            ", "opt", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "scope_learning_rate", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid optimization algorithm'", ")", "\n", "", "apply_gradient_ops", ".", "append", "(", "opt", ".", "apply_gradients", "(", "scope_grads_vars", ")", ")", "\n", "", "print", "(", "''", ")", "\n", "apply_gradient_op", "=", "tf", ".", "group", "(", "*", "apply_gradient_ops", ")", "\n", "\n", "return", "apply_gradient_op", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.rank_accuracy": [[122, 130], ["tensorflow.nn.top_k", "tensorflow.cast", "tensorflow.reshape", "tensorflow.tile", "tensorflow.reduce_any", "tensorflow.reduce_mean", "tensorflow.equal", "tensorflow.cast"], "function", ["None"], ["", "def", "rank_accuracy", "(", "logits", ",", "label", ",", "batch_size", ",", "k", "=", "1", ")", ":", "\n", "    ", "_", ",", "arg_top", "=", "tf", ".", "nn", ".", "top_k", "(", "logits", ",", "k", ")", "\n", "label", "=", "tf", ".", "cast", "(", "label", ",", "tf", ".", "int32", ")", "\n", "label", "=", "tf", ".", "reshape", "(", "label", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "label", "=", "tf", ".", "tile", "(", "label", ",", "[", "1", ",", "k", "]", ")", "\n", "correct", "=", "tf", ".", "reduce_any", "(", "tf", ".", "equal", "(", "label", ",", "arg_top", ")", ",", "axis", "=", "1", ")", "\n", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "correct", ",", "tf", ".", "float32", ")", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.collect_watch_list": [[133, 144], ["tensorflow.get_collection"], "function", ["None"], ["", "def", "collect_watch_list", "(", ")", ":", "\n", "    ", "'''Collect the variables in watch list.\n\n    Tensors or Varialbes can be addto collection 'watchlist' with \n    the type of tuple ('name', var/tensor). The functions collects\n    them and returns a dict for evaluate\n    '''", "\n", "watch_list", "=", "{", "}", "\n", "for", "pair", "in", "tf", ".", "get_collection", "(", "'watch_list'", ")", ":", "\n", "        ", "watch_list", "[", "pair", "[", "0", "]", "]", "=", "pair", "[", "1", "]", "\n", "", "return", "watch_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.save_model": [[146, 156], ["sess.graph.as_default", "os.path.join", "os.path.join", "print", "saver.save", "os.path.exists", "print", "saver.export_meta_graph"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.learning.PCA.save"], ["", "def", "save_model", "(", "sess", ",", "saver", ",", "model_dir", ",", "global_step", ")", ":", "\n", "    ", "with", "sess", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'ckpt'", ")", "\n", "metagraph_path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'graph.meta'", ")", "\n", "\n", "print", "(", "'Saving variables...'", ")", "\n", "saver", ".", "save", "(", "sess", ",", "checkpoint_path", ",", "global_step", "=", "global_step", ",", "write_meta_graph", "=", "False", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "metagraph_path", ")", ":", "\n", "                ", "print", "(", "'Saving metagraph...'", ")", "\n", "saver", ".", "export_meta_graph", "(", "metagraph_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.restore_model": [[157, 170], ["sess.graph.as_default", "os.path.expanduser", "tensorflow.train.latest_checkpoint", "print", "tensorflow.train.Saver", "tf.train.Saver.restore", "any"], "function", ["None"], ["", "", "", "def", "restore_model", "(", "sess", ",", "var_list", ",", "model_dir", ",", "restore_scopes", "=", "None", ")", ":", "\n", "    ", "''' Load the variable values from a checkpoint file into pre-defined graph.\n    Filter the variables so that they contain at least one of the given keywords.'''", "\n", "with", "sess", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "if", "restore_scopes", "is", "not", "None", ":", "\n", "                ", "var_list", "=", "[", "var", "for", "var", "in", "var_list", "if", "any", "(", "[", "scope", "in", "var", ".", "name", "for", "scope", "in", "restore_scopes", "]", ")", "]", "\n", "\n", "", "model_dir", "=", "os", ".", "path", ".", "expanduser", "(", "model_dir", ")", "\n", "ckpt_file", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "model_dir", ")", "\n", "\n", "print", "(", "'Restoring variables from %s ...'", "%", "ckpt_file", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "ckpt_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.load_model": [[171, 195], ["sess.graph.as_default", "os.path.expanduser", "os.path.isfile", "print", "os.path.join", "tensorflow.train.latest_checkpoint", "print", "print", "tensorflow.train.import_meta_graph", "tf.train.import_meta_graph.restore", "gfile.FastGFile", "tensorflow.GraphDef", "tf.GraphDef.ParseFromString", "tensorflow.import_graph_def", "len", "f.read", "os.listdir", "file.endswith"], "function", ["None"], ["", "", "def", "load_model", "(", "sess", ",", "model_path", ",", "scope", "=", "None", ")", ":", "\n", "    ", "''' Load the the graph and variables values from a model path.\n    Model path is either a a frozen graph or a directory with both\n    a .meta file and checkpoint files.'''", "\n", "with", "sess", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "model_path", "=", "os", ".", "path", ".", "expanduser", "(", "model_path", ")", "\n", "if", "(", "os", ".", "path", ".", "isfile", "(", "model_path", ")", ")", ":", "\n", "# Frozen grpah", "\n", "                ", "print", "(", "'Model filename: %s'", "%", "model_path", ")", "\n", "with", "gfile", ".", "FastGFile", "(", "model_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "''", ")", "\n", "", "", "else", ":", "\n", "# Load grapha and variables separatedly.", "\n", "                ", "meta_files", "=", "[", "file", "for", "file", "in", "os", ".", "listdir", "(", "model_path", ")", "if", "file", ".", "endswith", "(", "'.meta'", ")", "]", "\n", "assert", "len", "(", "meta_files", ")", "==", "1", "\n", "meta_file", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "meta_files", "[", "0", "]", ")", "\n", "ckpt_file", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "model_path", ")", "\n", "\n", "print", "(", "'Metagraph file: %s'", "%", "meta_file", ")", "\n", "print", "(", "'Checkpoint file: %s'", "%", "ckpt_file", ")", "\n", "saver", "=", "tf", ".", "train", ".", "import_meta_graph", "(", "meta_file", ",", "clear_devices", "=", "True", ",", "import_scope", "=", "scope", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "ckpt_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.euclidean_distance": [[197, 215], ["tensorflow.name_scope", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.square", "tensorflow.square", "tensorflow.sqrt", "tensorflow.maximum"], "function", ["None"], ["", "", "", "def", "euclidean_distance", "(", "X", ",", "Y", ",", "sqrt", "=", "False", ")", ":", "\n", "    ", "'''Compute the distance between each X and Y.\n\n    Args: \n        X: a (m x d) tensor\n        Y: a (d x n) tensor\n    \n    Returns: \n        diffs: an m x n distance matrix.\n    '''", "\n", "with", "tf", ".", "name_scope", "(", "'EuclideanDistance'", ")", ":", "\n", "        ", "XX", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "X", ")", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "YY", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "Y", ")", ",", "0", ",", "keep_dims", "=", "True", ")", "\n", "XY", "=", "tf", ".", "matmul", "(", "X", ",", "Y", ")", "\n", "diffs", "=", "XX", "+", "YY", "-", "2", "*", "XY", "\n", "if", "sqrt", "==", "True", ":", "\n", "            ", "diffs", "=", "tf", ".", "sqrt", "(", "tf", ".", "maximum", "(", "0.0", ",", "diffs", ")", ")", "\n", "", "", "return", "diffs", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.cosine_softmax": [[216, 251], ["tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.add_to_collection", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.nn.softplus", "tensorflow.constant", "tensorflow.matmul", "tensorflow.l2_regularizer", "tensorflow.xavier_initializer", "tensorflow.l2_regularizer", "tensorflow.constant_initializer", "type"], "function", ["None"], ["", "def", "cosine_softmax", "(", "prelogits", ",", "label", ",", "num_classes", ",", "weight_decay", ",", "gamma", "=", "16.0", ",", "reuse", "=", "None", ")", ":", "\n", "\n", "    ", "nrof_features", "=", "prelogits", ".", "shape", "[", "1", "]", ".", "value", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'Logits'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "weights", "=", "tf", ".", "get_variable", "(", "'weights'", ",", "shape", "=", "(", "nrof_features", ",", "num_classes", ")", ",", "\n", "regularizer", "=", "slim", ".", "l2_regularizer", "(", "weight_decay", ")", ",", "\n", "initializer", "=", "slim", ".", "xavier_initializer", "(", ")", ",", "\n", "# initializer=tf.truncated_normal_initializer(stddev=0.1),", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "alpha", "=", "tf", ".", "get_variable", "(", "'alpha'", ",", "shape", "=", "(", ")", ",", "\n", "regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-2", ")", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.00", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "weights_normed", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "weights", ",", "dim", "=", "0", ")", "\n", "prelogits_normed", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "prelogits", ",", "dim", "=", "1", ")", "\n", "\n", "if", "gamma", "==", "'auto'", ":", "\n", "            ", "gamma", "=", "tf", ".", "nn", ".", "softplus", "(", "alpha", ")", "\n", "", "else", ":", "\n", "            ", "assert", "type", "(", "gamma", ")", "==", "float", "\n", "gamma", "=", "tf", ".", "constant", "(", "gamma", ")", "\n", "\n", "", "logits", "=", "gamma", "*", "tf", ".", "matmul", "(", "prelogits_normed", ",", "weights_normed", ")", "\n", "\n", "\n", "", "cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "labels", "=", "label", ",", "logits", "=", "logits", ")", ",", "name", "=", "'cross_entropy'", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'gamma'", ",", "gamma", ")", "\n", "tf", ".", "add_to_collection", "(", "'watch_list'", ",", "(", "'gamma'", ",", "gamma", ")", ")", "\n", "\n", "return", "logits", ",", "cross_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.norm_loss": [[252, 267], ["tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.square", "tensorflow.constant_initializer"], "function", ["None"], ["", "def", "norm_loss", "(", "prelogits", ",", "alpha", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'NormLoss'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "sigma", "=", "tf", ".", "get_variable", "(", "'sigma'", ",", "shape", "=", "(", ")", ",", "\n", "# regularizer=slim.l2_regularizer(weight_decay),", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.1", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "prelogits_norm", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "prelogits", ")", ",", "axis", "=", "1", ")", "\n", "# norm_loss = alpha * tf.square(tf.sqrt(prelogits_norm) - sigma)", "\n", "norm_loss", "=", "alpha", "*", "prelogits_norm", "\n", "norm_loss", "=", "tf", ".", "reduce_mean", "(", "norm_loss", ",", "axis", "=", "0", ",", "name", "=", "'norm_loss'", ")", "\n", "\n", "# tf.summary.scalar('sigma', sigma)", "\n", "# tf.add_to_collection('watch_list', ('sigma', sigma))", "\n", "return", "norm_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.angular_softmax": [[268, 326], ["tensorflow.shape", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.sqrt", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.matmul", "tensorflow.minimum", "tensorflow.acos", "tensorflow.floor", "tensorflow.maximum", "tensorflow.assign", "tensorflow.add_to_collection", "tensorflow.reduce_sum", "tensorflow.maximum", "tensorflow.control_dependencies", "tensorflow.one_hot", "tensorflow.reduce_mean", "tensorflow.l2_regularizer", "tensorflow.xavier_initializer", "tensorflow.constant_initializer", "tensorflow.square", "tensorflow.pow", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.cast"], "function", ["None"], ["", "def", "angular_softmax", "(", "prelogits", ",", "label", ",", "num_classes", ",", "global_step", ",", "\n", "m", ",", "lamb_min", ",", "lamb_max", ",", "weight_decay", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "num_features", "=", "prelogits", ".", "shape", "[", "1", "]", ".", "value", "\n", "batch_size", "=", "tf", ".", "shape", "(", "prelogits", ")", "[", "0", "]", "\n", "lamb_min", "=", "lamb_min", "\n", "lamb_max", "=", "lamb_max", "\n", "lambda_m_theta", "=", "[", "\n", "lambda", "x", ":", "x", "**", "0", ",", "\n", "lambda", "x", ":", "x", "**", "1", ",", "\n", "lambda", "x", ":", "2.0", "*", "(", "x", "**", "2", ")", "-", "1.0", ",", "\n", "lambda", "x", ":", "4.0", "*", "(", "x", "**", "3", ")", "-", "3.0", "*", "x", ",", "\n", "lambda", "x", ":", "8.0", "*", "(", "x", "**", "4", ")", "-", "8.0", "*", "(", "x", "**", "2", ")", "+", "1.0", ",", "\n", "lambda", "x", ":", "16.0", "*", "(", "x", "**", "5", ")", "-", "20.0", "*", "(", "x", "**", "3", ")", "+", "5.0", "*", "x", "\n", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'AngularSoftmax'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "weights", "=", "tf", ".", "get_variable", "(", "'weights'", ",", "shape", "=", "(", "num_features", ",", "num_classes", ")", ",", "\n", "regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-4", ")", ",", "\n", "initializer", "=", "slim", ".", "xavier_initializer", "(", ")", ",", "\n", "# initializer=tf.truncated_normal_initializer(stddev=0.1),", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "lamb", "=", "tf", ".", "get_variable", "(", "'lambda'", ",", "shape", "=", "(", ")", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "lamb_max", ")", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "prelogits_norm", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "prelogits", ")", ",", "axis", "=", "1", ",", "keep_dims", "=", "True", ")", ")", "\n", "weights_normed", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "weights", ",", "dim", "=", "0", ")", "\n", "prelogits_normed", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "prelogits", ",", "dim", "=", "1", ")", "\n", "\n", "# Compute cosine and phi", "\n", "cos_theta", "=", "tf", ".", "matmul", "(", "prelogits_normed", ",", "weights_normed", ")", "\n", "cos_theta", "=", "tf", ".", "minimum", "(", "1.0", ",", "tf", ".", "maximum", "(", "-", "1.0", ",", "cos_theta", ")", ")", "\n", "theta", "=", "tf", ".", "acos", "(", "cos_theta", ")", "\n", "cos_m_theta", "=", "lambda_m_theta", "[", "m", "]", "(", "cos_theta", ")", "\n", "k", "=", "tf", ".", "floor", "(", "m", "*", "theta", "/", "3.14159265", ")", "\n", "phi_theta", "=", "tf", ".", "pow", "(", "-", "1.0", ",", "k", ")", "*", "cos_m_theta", "-", "2.0", "*", "k", "\n", "\n", "cos_theta", "=", "cos_theta", "*", "prelogits_norm", "\n", "phi_theta", "=", "phi_theta", "*", "prelogits_norm", "\n", "\n", "lamb_new", "=", "tf", ".", "maximum", "(", "lamb_min", ",", "lamb_max", "/", "(", "1.0", "+", "0.1", "*", "tf", ".", "cast", "(", "global_step", ",", "tf", ".", "float32", ")", ")", ")", "\n", "update_lamb", "=", "tf", ".", "assign", "(", "lamb", ",", "lamb_new", ")", "\n", "\n", "# Compute loss", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "update_lamb", "]", ")", ":", "\n", "            ", "label_dense", "=", "tf", ".", "one_hot", "(", "label", ",", "num_classes", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "logits", "=", "cos_theta", "\n", "logits", "-=", "label_dense", "*", "cos_theta", "*", "1.0", "/", "(", "1.0", "+", "lamb", ")", "\n", "logits", "+=", "label_dense", "*", "phi_theta", "*", "1.0", "/", "(", "1.0", "+", "lamb", ")", "\n", "\n", "cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "labels", "=", "label", ",", "logits", "=", "logits", ")", ",", "name", "=", "'cross_entropy'", ")", "\n", "\n", "", "tf", ".", "add_to_collection", "(", "'watch_list'", ",", "(", "'lamb'", ",", "lamb", ")", ")", "\n", "\n", "", "return", "cross_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.split_softmax": [[328, 633], ["tensorflow.shape", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tflib.centers_by_label", "tensorflow.gather", "tensorflow.nn.l2_normalize", "tensorflow.one_hot", "tensorflow.cast", "tensorflow.logical_not", "tensorflow.matmul", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.expand_dims", "tensorflow.equal", "tensorflow.cast", "tensorflow.logical_not", "tensorflow.logical_not", "tensorflow.logical_and", "tensorflow.matmul", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.square", "tensorflow.norm", "tensorflow.log", "tensorflow.reduce_mean", "losses.extend", "tensorflow.add_to_collection", "tensorflow.reduce_logsumexp", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.gather", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.cast", "tensorflow.transpose", "tensorflow.log", "tensorflow.nn.relu", "tensorflow.reduce_sum", "tensorflow.gather", "tensorflow.reduce_logsumexp", "tensorflow.cast", "tensorflow.cast", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.relu", "tensorflow.square", "tensorflow.nn.moments", "tensorflow.nn.moments", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.reduce_min", "tensorflow.reduce_max", "tensorflow.assign_sub", "tensorflow.assign_sub", "tensorflow.group", "tensorflow.add_to_collection", "tensorflow.gather", "tensorflow.unique_with_counts", "tensorflow.gather", "tensorflow.reshape", "tensorflow.scatter_sub", "tensorflow.group", "tensorflow.add_to_collection", "tensorflow.cast", "tensorflow.cast", "tensorflow.l2_regularizer", "tensorflow.xavier_initializer", "tensorflow.l2_regularizer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.l2_regularizer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.eye", "type", "tensorflow.constant", "tensorflow.square", "tensorflow.square", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.cast", "tensorflow.greater_equal", "tensorflow.less", "tensorflow.exp", "tensorflow.exp", "type", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.centers_by_label"], ["", "def", "split_softmax", "(", "prelogits", ",", "label", ",", "num_classes", ",", "\n", "global_step", ",", "weight_decay", ",", "gamma", "=", "16.0", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "nrof_features", "=", "prelogits", ".", "shape", "[", "1", "]", ".", "value", "\n", "batch_size", "=", "tf", ".", "shape", "(", "prelogits", ")", "[", "0", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'SplitSoftmax'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "weights", "=", "tf", ".", "get_variable", "(", "'weights'", ",", "shape", "=", "(", "num_classes", ",", "nrof_features", ")", ",", "\n", "regularizer", "=", "slim", ".", "l2_regularizer", "(", "weight_decay", ")", ",", "\n", "initializer", "=", "slim", ".", "xavier_initializer", "(", ")", ",", "\n", "# initializer=tf.truncated_normal_initializer(stddev=0.1),", "\n", "# initializer=tf.constant_initializer(0),", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "alpha", "=", "tf", ".", "get_variable", "(", "'alpha'", ",", "shape", "=", "(", ")", ",", "\n", "regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-2", ")", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.00", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "beta", "=", "tf", ".", "get_variable", "(", "'beta'", ",", "shape", "=", "(", ")", ",", "\n", "# regularizer=slim.l2_regularizer(1e-2),", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "sigma", "=", "tf", ".", "get_variable", "(", "'sigma'", ",", "shape", "=", "(", ")", ",", "\n", "regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-1", ")", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.0", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "threshold_pos", "=", "tf", ".", "get_variable", "(", "'threshold_pos'", ",", "shape", "=", "(", ")", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "16.0", ")", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "threshold_neg", "=", "tf", ".", "get_variable", "(", "'threshold_neg'", ",", "shape", "=", "(", ")", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# Normalizing the vecotors", "\n", "weights_normed", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "weights", ",", "dim", "=", "1", ")", "\n", "prelogits_normed", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "prelogits", ",", "dim", "=", "1", ")", "\n", "# weights_normed = weights", "\n", "# prelogits_normed = prelogits", "\n", "\n", "# Caluculate Centers", "\n", "centers", ",", "label_center", ",", "center_idx", ",", "center_weight", "=", "centers_by_label", "(", "prelogits_normed", ",", "label", ")", "\n", "centers", "=", "tf", ".", "gather", "(", "centers", ",", "center_idx", ")", "\n", "centers_normed", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "centers", ",", "dim", "=", "1", ")", "\n", "\n", "coef", "=", "1.0", "\n", "# Label and logits between batch and examplars", "\n", "label_mat_glob", "=", "tf", ".", "one_hot", "(", "label", ",", "num_classes", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "label_mask_pos_glob", "=", "tf", ".", "cast", "(", "label_mat_glob", ",", "tf", ".", "bool", ")", "\n", "label_mask_neg_glob", "=", "tf", ".", "logical_not", "(", "label_mask_pos_glob", ")", "\n", "# label_exp_batch = tf.expand_dims(label, 1)", "\n", "# label_exp_glob = tf.expand_dims(label_history, 1)", "\n", "# label_mat_glob = tf.equal(label_exp_batch, tf.transpose(label_exp_glob))", "\n", "# label_mask_pos_glob = tf.cast(label_mat_glob, tf.bool)", "\n", "# label_mask_neg_glob = tf.logical_not(label_mat_glob)", "\n", "\n", "# dist_mat_glob = euclidean_distance(prelogits_normed, tf.transpose(weights_normed), False)", "\n", "dist_mat_glob", "=", "tf", ".", "matmul", "(", "prelogits_normed", ",", "tf", ".", "transpose", "(", "weights_normed", ")", ")", "# + beta", "\n", "dist_pos_glob", "=", "tf", ".", "boolean_mask", "(", "dist_mat_glob", ",", "label_mask_pos_glob", ")", "\n", "dist_neg_glob", "=", "tf", ".", "boolean_mask", "(", "dist_mat_glob", ",", "label_mask_neg_glob", ")", "\n", "\n", "logits_glob", "=", "coef", "*", "dist_mat_glob", "\n", "logits_pos_glob", "=", "tf", ".", "boolean_mask", "(", "logits_glob", ",", "label_mask_pos_glob", ")", "\n", "logits_neg_glob", "=", "tf", ".", "boolean_mask", "(", "logits_glob", ",", "label_mask_neg_glob", ")", "\n", "\n", "\n", "# Label and logits within batch", "\n", "label_exp_batch", "=", "tf", ".", "expand_dims", "(", "label", ",", "1", ")", "\n", "label_mat_batch", "=", "tf", ".", "equal", "(", "label_exp_batch", ",", "tf", ".", "transpose", "(", "label_exp_batch", ")", ")", "\n", "label_mask_pos_batch", "=", "tf", ".", "cast", "(", "label_mat_batch", ",", "tf", ".", "bool", ")", "\n", "label_mask_neg_batch", "=", "tf", ".", "logical_not", "(", "label_mask_pos_batch", ")", "\n", "mask_non_diag", "=", "tf", ".", "logical_not", "(", "tf", ".", "cast", "(", "tf", ".", "eye", "(", "batch_size", ")", ",", "tf", ".", "bool", ")", ")", "\n", "label_mask_pos_batch", "=", "tf", ".", "logical_and", "(", "label_mask_pos_batch", ",", "mask_non_diag", ")", "\n", "\n", "# dist_mat_batch = euclidean_distance(prelogits_normed, tf.transpose(prelogits_normed), False)", "\n", "dist_mat_batch", "=", "tf", ".", "matmul", "(", "prelogits_normed", ",", "tf", ".", "transpose", "(", "prelogits_normed", ")", ")", "\n", "dist_pos_batch", "=", "tf", ".", "boolean_mask", "(", "dist_mat_batch", ",", "label_mask_pos_batch", ")", "\n", "dist_neg_batch", "=", "tf", ".", "boolean_mask", "(", "dist_mat_batch", ",", "label_mask_neg_batch", ")", "\n", "\n", "logits_batch", "=", "coef", "*", "dist_mat_batch", "\n", "logits_pos_batch", "=", "tf", ".", "boolean_mask", "(", "logits_batch", ",", "label_mask_pos_batch", ")", "\n", "logits_neg_batch", "=", "tf", ".", "boolean_mask", "(", "logits_batch", ",", "label_mask_neg_batch", ")", "\n", "\n", "\n", "# num_anchor = 32", "\n", "# prelogits_anchor = tf.reshape(prelogits_normed[:num_anchor], [num_anchor, 1, nrof_features])", "\n", "# prelogits_refer = tf.reshape(prelogits_normed[num_anchor:], [num_anchor, -1, nrof_features])", "\n", "# dist_anchor = tf.reduce_sum(tf.square(prelogits_anchor-prelogits_refer), axis=2)", "\n", "# dist_anchor = tf.reshape(dist_anchor, [-1])", "\n", "# logits_anchor = -0.5 * gamma * dist_anchor", "\n", "\n", "\n", "logits_pos", "=", "logits_pos_glob", "\n", "logits_neg", "=", "logits_neg_glob", "\n", "\n", "dist_pos", "=", "dist_pos_glob", "\n", "dist_neg", "=", "dist_neg_glob", "\n", "\n", "# epsilon_trsd = 0.3", "\n", "t_pos", "=", "coef", "*", "(", "threshold_pos", ")", "\n", "t_neg", "=", "coef", "*", "(", "threshold_neg", ")", "\n", "\n", "\n", "if", "gamma", "==", "'auto'", ":", "\n", "# gamma = tf.nn.softplus(alpha)", "\n", "            ", "gamma", "=", "tf", ".", "log", "(", "tf", ".", "exp", "(", "1.0", ")", "+", "tf", ".", "exp", "(", "alpha", ")", ")", "\n", "", "elif", "type", "(", "gamma", ")", "==", "tuple", ":", "\n", "            ", "t_min", ",", "decay", "=", "gamma", "\n", "epsilon", "=", "1e-5", "\n", "t", "=", "t_min", "+", "1.0", "/", "(", "epsilon", "+", "decay", "*", "tf", ".", "cast", "(", "global_step", ",", "tf", ".", "float32", ")", ")", "\n", "gamma", "=", "1.0", "/", "t", "\n", "", "else", ":", "\n", "            ", "assert", "type", "(", "gamma", ")", "==", "float", "\n", "gamma", "=", "tf", ".", "constant", "(", "gamma", ")", "\n", "\n", "", "hinge_loss", "=", "lambda", "x", ":", "tf", ".", "nn", ".", "relu", "(", "1.0", "+", "x", ")", "\n", "margin_func", "=", "hinge_loss", "\n", "\n", "# Losses", "\n", "losses", "=", "[", "]", "\n", "# num_pos = tf.cast(0.95 * tf.cast(tf.size(logits_pos), tf.float32), tf.int32)", "\n", "# # num_neg = tf.cast(0.75 * tf.cast(tf.size(logits_neg), tf.float32), tf.int32)", "\n", "# q_d = tf.pow(tf.sqrt(dist_neg), 2-nrof_features)*tf.pow(1-0.25*dist_neg, (3-nrof_features)/2)", "\n", "# tf.add_to_collection('watch_list', ('q_d', tf.reduce_sum(q_d)))", "\n", "# q_d = tf.minimum(1.0, 1 * q_d / tf.reduce_sum(q_d))", "\n", "# tf.add_to_collection('watch_list', ('q_d', tf.reduce_mean(q_d)))", "\n", "# sample_mask = tf.random_uniform(shape=tf.shape(logits_neg)) <= q_d", "\n", "# sample_mask = logits_neg >= tf.reduce_min(logits_pos)", "\n", "# _logits_neg = tf.boolean_mask(logits_neg, sample_mask)", "\n", "# tf.add_to_collection('watch_list', ('sample_ratio', ", "\n", "#    tf.cast(tf.size(_logits_neg),tf.float32) / tf.cast(tf.size(logits_neg),tf.float32)))", "\n", "\n", "\n", "# gamma2 = 1 / 0.01", "\n", "_logits_pos", "=", "tf", ".", "reshape", "(", "logits_pos", ",", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "_logits_neg", "=", "tf", ".", "reshape", "(", "logits_neg", ",", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "\n", "norm", "=", "tf", ".", "square", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "prelogits", ")", ",", "axis", "=", "1", ",", "keep_dims", "=", "True", ")", ")", "\n", "norm_weights", "=", "tf", ".", "norm", "(", "tf", ".", "gather", "(", "weights", ",", "label", ")", ",", "axis", "=", "1", ",", "keep_dims", "=", "True", ")", "\n", "t_pos", "=", "(", "beta", ")", "\n", "t_neg", "=", "(", "beta", ")", "\n", "\n", "\n", "_logits_pos", "=", "_logits_pos", "*", "gamma", "\n", "_logits_neg", "=", "_logits_neg", "*", "gamma", "\n", "# _logits_neg, _ = tf.nn.top_k(_logits_neg, num_neg)", "\n", "# _logits_pos, _ = tf.nn.top_k(_logits_pos, num_pos)", "\n", "# _logits_neg = tf.boolean_mask(_logits_neg, sample_mask)", "\n", "# _logits_pos = -tf.reduce_logsumexp(-_logits_pos)# , axis=1)[:,None]", "\n", "_logits_neg", "=", "tf", ".", "reduce_logsumexp", "(", "_logits_neg", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "# _logits_pos = tf.reduce_mean(_logits_pos)", "\n", "#-- Simulate Ranking", "\n", "# se_neg = tf.reduce_sum(tf.exp(_logits_neg))", "\n", "# min_pos = tf.reduce_min(_logits_pos)", "\n", "# t_pos = tf.stop_gradient(tf.log(se_neg))", "\n", "# t_neg = tf.stop_gradient(tf.log(se_neg - tf.exp(_logits_neg)))", "\n", "\n", "\n", "# norm = tf.reshape(prelogits[:,-1], [batch_size, -1])", "\n", "# norm_weighted = tf.exp(-norm)", "\n", "# norm_weighted = norm / tf.reduce_sum(norm) * tf.cast(tf.size(norm), tf.float32)", "\n", "\n", "# sigma_batch = tf.reshape(tf.gather(sigma, label), [batch_size, -1])", "\n", "\n", "m", "=", "5.0", "\n", "# tf.add_to_collection('watch_list', ('m',m))", "\n", "\n", "factor", "=", "1", "/", "tf", ".", "cast", "(", "batch_size", ",", "tf", ".", "float32", ")", "\n", "bias", "=", "tf", ".", "log", "(", "tf", ".", "cast", "(", "num_classes", ",", "tf", ".", "float32", ")", ")", "\n", "loss_pos", "=", "tf", ".", "nn", ".", "relu", "(", "m", "+", "_logits_neg", "-", "_logits_pos", ")", "*", "0.5", "\n", "loss_neg", "=", "tf", ".", "nn", ".", "relu", "(", "m", "+", "_logits_neg", "-", "_logits_pos", ")", "*", "0.5", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "(", "loss_pos", "+", "loss_neg", ")", ",", "name", "=", "'split_loss'", ")", "\n", "losses", ".", "extend", "(", "[", "loss", "]", ")", "\n", "tf", ".", "add_to_collection", "(", "'watch_list'", ",", "(", "'split_loss'", ",", "loss", ")", ")", "\n", "\n", "# Global loss", "\n", "# weights_batch = tf.gather(weights_normed, label)", "\n", "# _logits_pos_glob = tf.reduce_sum(tf.square(prelogits_normed - weights_batch), axis=1)  * coef * gamma", "\n", "_logits_pos_glob", "=", "tf", ".", "reshape", "(", "logits_pos_glob", ",", "[", "batch_size", ",", "-", "1", "]", ")", "*", "gamma", "\n", "_logits_neg_glob", "=", "tf", ".", "reshape", "(", "logits_neg_glob", ",", "[", "batch_size", ",", "-", "1", "]", ")", "*", "gamma", "\n", "_logits_neg_glob", "=", "tf", ".", "reduce_logsumexp", "(", "_logits_neg_glob", ")", "# , axis=1)[:,None]", "\n", "loss_glob", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "relu", "(", "1", "+", "_logits_neg_glob", "-", "_logits_pos_glob", ")", ",", "name", "=", "'loss_glob'", ")", "\n", "# losses.append(loss_glob)", "\n", "# tf.add_to_collection('watch_list', ('loss_glob', loss_glob))", "\n", "\n", "# Weight decay", "\n", "loss_weight", "=", "tf", ".", "reduce_sum", "(", "1e-7", "*", "tf", ".", "square", "(", "weights_normed", ")", ",", "name", "=", "'loss_weight'", ")", "\n", "# losses.append(loss_weight)", "\n", "# tf.add_to_collection('watch_list', ('loss_weight', loss_weight))", "\n", "\n", "# Split Softmax", "\n", "# _logits_pos_glob = tf.reshape(logits_pos_glob, [batch_size, -1]) * gamma", "\n", "# _logits_neg_glob = tf.reshape(logits_neg_glob, [batch_size, -1]) * gamma", "\n", "# _logits_pos_glob = tf.log(tf.reduce_sum(tf.exp(_logits_pos_glob) + num_classes-1, axis=1)[:,None])", "\n", "# _logits_neg_glob = tf.reduce_logsumexp(_logits_neg_glob, axis=1)[:,None]", "\n", "# _t_pos = t_pos * gamma", "\n", "# _t_neg = t_neg * gamma", "\n", "# loss_pos = tf.reduce_mean(tf.nn.softplus(_t_pos - _logits_pos_glob), name='loss_pos')", "\n", "# loss_neg = tf.reduce_mean(tf.nn.softplus(_logits_neg_glob - _t_neg), name='loss_neg')", "\n", "# losses.extend([loss_pos, loss_neg])", "\n", "\n", "\n", "\n", "# Batch Center loss", "\n", "# centers_batch = tf.gather(centers, center_idx)", "\n", "centers_batch", "=", "tf", ".", "gather", "(", "weights_normed", ",", "label", ")", "\n", "dist_center", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "prelogits_normed", "-", "centers_batch", ")", ",", "axis", "=", "1", ")", "\n", "loss_center", "=", "tf", ".", "reduce_mean", "(", "1.0", "*", "dist_center", ",", "name", "=", "'loss_center'", ")", "\n", "# losses.append(loss_center)", "\n", "# tf.add_to_collection('watch_list', ('loss_center', loss_center))", "\n", "\n", "\n", "# Update threshold", "\n", "if", "not", "threshold_pos", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "# -- Mean threshold        ", "\n", "            ", "mean_pos", ",", "var_pos", "=", "tf", ".", "nn", ".", "moments", "(", "dist_pos", ",", "axes", "=", "[", "0", "]", ")", "\n", "mean_neg", ",", "var_neg", "=", "tf", ".", "nn", ".", "moments", "(", "dist_neg", ",", "axes", "=", "[", "0", "]", ")", "\n", "std_pos", "=", "tf", ".", "sqrt", "(", "var_pos", ")", "\n", "std_neg", "=", "tf", ".", "sqrt", "(", "var_neg", ")", "\n", "threshold_batch", "=", "std_neg", "*", "mean_pos", "/", "(", "std_pos", "+", "std_neg", ")", "+", "std_pos", "*", "mean_neg", "/", "(", "std_pos", "+", "std_neg", ")", "\n", "threshold_pos_batch", "=", "threshold_neg_batch", "=", "threshold_batch", "\n", "# -- Logits", "\n", "# threshold_pos_batch = tf.reduce_logsumexp(_logits_neg)", "\n", "# threshold_neg_batch = -tf.reduce_logsumexp(-_logits_pos)", "\n", "# -- Quantile", "\n", "# diff_pos_sorted, _ = tf.nn.top_k(logits_pos, 2)", "\n", "# diff_neg_sorted, _ = tf.nn.top_k(logits_neg, 2704237)", "\n", "# threshold_pos_batch = diff_neg_sorted[-1]", "\n", "# threshold_neg_batch = diff_pos_sorted[-1]", "\n", "threshold_neg_batch", "=", "tf", ".", "reduce_min", "(", "_logits_pos", ")", "\n", "threshold_pos_batch", "=", "tf", ".", "reduce_max", "(", "_logits_neg", ")", "\n", "# -- Update", "\n", "diff_threshold_pos", "=", "threshold_pos", "-", "threshold_pos_batch", "\n", "diff_threshold_neg", "=", "threshold_neg", "-", "threshold_neg_batch", "\n", "diff_threshold_pos", "=", "0.1", "*", "diff_threshold_pos", "\n", "diff_threshold_neg", "=", "0.1", "*", "diff_threshold_neg", "\n", "threshold_pos_update_op", "=", "tf", ".", "assign_sub", "(", "threshold_pos", ",", "diff_threshold_pos", ")", "\n", "threshold_neg_update_op", "=", "tf", ".", "assign_sub", "(", "threshold_neg", ",", "diff_threshold_neg", ")", "\n", "threshold_update_op", "=", "tf", ".", "group", "(", "threshold_pos_update_op", ",", "threshold_neg_update_op", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "threshold_update_op", ")", "\n", "\n", "\n", "# Update centers", "\n", "", "if", "not", "weights", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "            ", "weights_batch", "=", "tf", ".", "gather", "(", "weights", ",", "label", ")", "\n", "diff_centers", "=", "weights_batch", "-", "prelogits", "\n", "unique_label", ",", "unique_idx", ",", "unique_count", "=", "tf", ".", "unique_with_counts", "(", "label", ")", "\n", "appear_times", "=", "tf", ".", "gather", "(", "unique_count", ",", "unique_idx", ")", "\n", "appear_times", "=", "tf", ".", "reshape", "(", "appear_times", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "diff_centers", "=", "diff_centers", "/", "tf", ".", "cast", "(", "(", "1", "+", "appear_times", ")", ",", "tf", ".", "float32", ")", "\n", "diff_centers", "=", "0.5", "*", "diff_centers", "\n", "centers_update_op", "=", "tf", ".", "scatter_sub", "(", "weights", ",", "label", ",", "diff_centers", ")", "\n", "# centers_decay_op = tf.assign_sub(weights, 2*weight_decay*weights)# weight decay", "\n", "centers_update_op", "=", "tf", ".", "group", "(", "centers_update_op", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "centers_update_op", ")", "\n", "\n", "# if not sigma in tf.trainable_variables(): ", "\n", "#     weights_batch = tf.gather(weights, label)", "\n", "#     diff_centers = weights_batch - prelogits", "\n", "#     _, var_pos = tf.nn.moments(diff_centers, axes=[0])", "\n", "#     sigma_batch = tf.reduce_mean(tf.sqrt(var_pos))", "\n", "#     diff_sigma = sigma - sigma_batch", "\n", "#     diff_sigma = 0.01 * diff_sigma", "\n", "#     sigma_update_op = tf.assign_sub(sigma, diff_sigma)", "\n", "#     tf.add_to_collection(tf.GraphKeys.UPDATE_OPS, sigma_update_op)", "\n", "\n", "\n", "\n", "# Analysis", "\n", "", "mean_dist_pos", "=", "tf", ".", "reduce_mean", "(", "dist_pos", ",", "name", "=", "'mean_dist_pos'", ")", "\n", "mean_dist_neg", "=", "tf", ".", "reduce_mean", "(", "dist_neg", ",", "name", "=", "'mean_dist_neg'", ")", "\n", "acc_pos", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "tf", ".", "greater_equal", "(", "logits_pos", ",", "t_pos", ")", ",", "tf", ".", "float32", ")", ",", "name", "=", "'acc_pos'", ")", "\n", "acc_neg", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "tf", ".", "less", "(", "logits_neg", ",", "t_neg", ")", ",", "tf", ".", "float32", ")", ",", "name", "=", "'acc_neg'", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'threshold_pos'", ",", "threshold_pos", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'mean_dist_pos'", ",", "mean_dist_pos", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'mean_dist_neg'", ",", "mean_dist_neg", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'acc_pos'", ",", "acc_pos", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'acc_neg'", ",", "acc_neg", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'gamma'", ",", "gamma", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'alpha'", ",", "alpha", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'beta'", ",", "beta", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "'dist_pos'", ",", "dist_pos", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "'dist_neg'", ",", "dist_neg", ")", "\n", "# tf.summary.histogram('dist_neg_min', _logits_neg / coef)", "\n", "# tf.summary.histogram('sigma', sigma)", "\n", "\n", "# tf.add_to_collection('watch_list', ('alpha', alpha))", "\n", "tf", ".", "add_to_collection", "(", "'watch_list'", ",", "(", "'gamma'", ",", "gamma", ")", ")", "\n", "tf", ".", "add_to_collection", "(", "'watch_list'", ",", "(", "'alpha'", ",", "alpha", ")", ")", "\n", "tf", ".", "add_to_collection", "(", "'watch_list'", ",", "(", "'beta'", ",", "beta", ")", ")", "\n", "# tf.add_to_collection('watch_list', ('t_pos', t_pos))", "\n", "# tf.add_to_collection('watch_list', ('t_neg', tf.reduce_mean(t_neg)))", "\n", "# tf.add_to_collection('watch_list', ('dpos', mean_dist_pos))", "\n", "# tf.add_to_collection('watch_list', ('dneg', mean_dist_neg))", "\n", "# tf.add_to_collection('watch_list', ('loss_pos', loss_pos))", "\n", "# tf.add_to_collection('watch_list', ('loss_neg', loss_neg))", "\n", "# tf.add_to_collection('watch_list', ('sigma', sigma))", "\n", "# tf.add_to_collection('watch_list', ('logits_pos', tf.reduce_mean(_logits_pos)))", "\n", "# tf.add_to_collection('watch_list', ('logits_neg', tf.reduce_mean(_logits_neg)))", "\n", "# tf.add_to_collection('watch_list', ('acc_pos', acc_pos))", "\n", "# tf.add_to_collection('watch_list', ('acc_neg', acc_neg))", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.centers_by_label": [[634, 643], ["tensorflow.unique_with_counts", "tensorflow.size", "tensorflow.gather", "tensorflow.reshape", "tensorflow.unsorted_segment_sum", "tensorflow.cast"], "function", ["None"], ["", "def", "centers_by_label", "(", "features", ",", "label", ")", ":", "\n", "# Compute centers within batch", "\n", "    ", "unique_label", ",", "unique_idx", ",", "unique_count", "=", "tf", ".", "unique_with_counts", "(", "label", ")", "\n", "num_centers", "=", "tf", ".", "size", "(", "unique_label", ")", "\n", "appear_times", "=", "tf", ".", "gather", "(", "unique_count", ",", "unique_idx", ")", "\n", "appear_times", "=", "tf", ".", "reshape", "(", "appear_times", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "weighted_prelogits", "=", "features", "/", "tf", ".", "cast", "(", "appear_times", ",", "tf", ".", "float32", ")", "\n", "centers", "=", "tf", ".", "unsorted_segment_sum", "(", "weighted_prelogits", ",", "unique_idx", ",", "num_centers", ")", "\n", "return", "centers", ",", "unique_label", ",", "unique_idx", ",", "unique_count", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.cluster_loss": [[644, 704], ["tensorflow.shape", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.l2_normalize", "tflib.centers_by_label", "tensorflow.nn.l2_normalize", "tensorflow.size", "tflib.euclidean_distance", "tensorflow.logical_not", "tensorflow.cast", "tensorflow.logical_and", "tensorflow.boolean_mask", "tensorflow.gather", "tflib.euclidean_distance", "tensorflow.one_hot", "tensorflow.cast", "tensorflow.logical_not", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_logsumexp", "tensorflow.reduce_mean", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.add_to_collection", "tensorflow.transpose", "tensorflow.cast", "tensorflow.matrix_band_part", "tensorflow.transpose", "tensorflow.nn.softplus", "tensorflow.constant_initializer", "tensorflow.eye", "tensorflow.ones"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.centers_by_label", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.euclidean_distance", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.euclidean_distance"], ["", "def", "cluster_loss", "(", "prelogits", ",", "label", ",", "num_classes", ",", "\n", "weight_decay", ",", "gamma", "=", "16.0", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "embedding_size", "=", "prelogits", ".", "shape", "[", "1", "]", ".", "value", "\n", "batch_size", "=", "tf", ".", "shape", "(", "prelogits", ")", "[", "0", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'ClusterLoss'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "alpha", "=", "tf", ".", "get_variable", "(", "'alpha'", ",", "shape", "=", "(", ")", ",", "\n", "# regularizer=slim.l2_regularizer(weight_decay),", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.0", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "gamma", "=", "gamma", "\n", "prelogits", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "prelogits", ",", "dim", "=", "1", ")", "\n", "centers", ",", "label_center", ",", "center_idx", ",", "center_weight", "=", "centers_by_label", "(", "prelogits", ",", "label", ")", "\n", "centers", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "centers", ",", "dim", "=", "1", ")", "\n", "num_centers", "=", "tf", ".", "size", "(", "label_center", ")", "\n", "\n", "# Compute distance between centers", "\n", "dist_centers_mat", "=", "euclidean_distance", "(", "centers", ",", "tf", ".", "transpose", "(", "centers", ")", ")", "\n", "mask_non_diag", "=", "tf", ".", "logical_not", "(", "tf", ".", "cast", "(", "tf", ".", "eye", "(", "num_centers", ")", ",", "tf", ".", "bool", ")", ")", "\n", "mask_triu", "=", "tf", ".", "cast", "(", "tf", ".", "matrix_band_part", "(", "tf", ".", "ones", "(", "(", "num_centers", ",", "num_centers", ")", ")", ",", "0", ",", "-", "1", ")", ",", "tf", ".", "bool", ")", "\n", "mask_triu", "=", "tf", ".", "logical_and", "(", "mask_non_diag", ",", "mask_triu", ")", "\n", "dist_centers_vec", "=", "tf", ".", "boolean_mask", "(", "dist_centers_mat", ",", "mask_triu", ")", "\n", "\n", "# Compute distance between instance and ceners", "\n", "centers_batch", "=", "tf", ".", "gather", "(", "centers", ",", "center_idx", ")", "\n", "dist_instance", "=", "euclidean_distance", "(", "prelogits", ",", "tf", ".", "transpose", "(", "centers", ")", ")", "\n", "\n", "label_dense", "=", "tf", ".", "one_hot", "(", "center_idx", ",", "num_centers", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "label_pos", "=", "tf", ".", "cast", "(", "label_dense", ",", "tf", ".", "bool", ")", "\n", "label_neg", "=", "tf", ".", "logical_not", "(", "label_pos", ")", "\n", "dist_instance_pos", "=", "tf", ".", "boolean_mask", "(", "dist_instance", ",", "label_pos", ")", "\n", "dist_instance_neg", "=", "tf", ".", "boolean_mask", "(", "dist_instance", ",", "label_neg", ")", "\n", "\n", "\n", "\n", "# Losses", "\n", "alpha", "=", "1.0", "\n", "gamma", "=", "20.0", "\n", "dist_instance_pos", "=", "tf", ".", "reshape", "(", "dist_instance_pos", ",", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "dist_instance_neg", "=", "tf", ".", "reshape", "(", "dist_instance_neg", ",", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "logits_pos", "=", "-", "0.5", "*", "2", "*", "dist_instance_pos", "*", "gamma", "\n", "logits_neg", "=", "-", "0.5", "*", "dist_centers_vec", "*", "gamma", "\n", "# logits_pos = tf.reduce_mean(logits_pos)", "\n", "logits_neg", "=", "tf", ".", "reduce_logsumexp", "(", "logits_neg", ")", "#, axis=1)[:,None]", "\n", "# min_dist_centers = -tf.reduce_logsumexp(-dist_centers_vec)", "\n", "# loss_instance = tf.identity(alpha*dist_instance_pos - min_dist_centers)", "\n", "loss_instance", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softplus", "(", "logits_neg", "-", "logits_pos", ")", ")", "\n", "losses", "=", "[", "loss_instance", "]", "\n", "\n", "# Analysis", "\n", "tf", ".", "summary", ".", "histogram", "(", "'prelogits'", ",", "prelogits", ")", "\n", "# tf.summary.scalar('min_dist_centers', min_dist_centers)", "\n", "# tf.summary.histogram('min_dist_centers', min_dist_centers)", "\n", "tf", ".", "summary", ".", "histogram", "(", "'dist_centers_vec'", ",", "dist_centers_vec", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "'dist_instances_pos'", ",", "dist_instance_pos", ")", "\n", "# tf.add_to_collection('watch_list', ('dcenters', min_dist_centers))", "\n", "tf", ".", "add_to_collection", "(", "'watch_list'", ",", "(", "'loss'", ",", "loss_instance", ")", ")", "\n", "# tf.add_to_collection('watch_list', ('alpha', alpha))", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.binary_loss": [[705, 736], ["tensorflow.nn.sigmoid", "tensorflow.gather", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.shape", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.log", "tensorflow.log", "tensorflow.truncated_normal_initializer"], "function", ["None"], ["", "def", "binary_loss", "(", "prelogits", ",", "label", ",", "num_classes", ",", "\n", "weight_decay", ",", "gamma", "=", "16.0", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "nrof_features", "=", "prelogits", ".", "shape", "[", "1", "]", ".", "value", "\n", "batch_size", "=", "tf", ".", "shape", "(", "prelogits", ")", "[", "0", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'BinaryLoss'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "weights", "=", "tf", ".", "get_variable", "(", "'weights'", ",", "shape", "=", "(", "num_classes", ",", "nrof_features", ")", ",", "\n", "# regularizer=slim.l2_regularizer(weight_decay),", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "1.0", ")", ",", "\n", "# initializer=tf.constant_initializer(1.0),", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "", "weights_normed", "=", "tf", ".", "nn", ".", "sigmoid", "(", "weights", ")", "\n", "prelogits_normed", "=", "prelogits", "\n", "\n", "weights_batch", "=", "tf", ".", "gather", "(", "weights_normed", ",", "label", ")", "\n", "closs", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "prelogits_normed", ",", "labels", "=", "weights_batch", ")", "\n", "closs", "=", "tf", ".", "reduce_sum", "(", "closs", ",", "axis", "=", "1", ")", "\n", "closs", "=", "tf", ".", "reduce_mean", "(", "closs", ",", "name", "=", "'cross_entropy'", ")", "\n", "\n", "p_pos", "=", "tf", ".", "reduce_mean", "(", "weights_normed", ",", "axis", "=", "0", ")", "\n", "p_neg", "=", "tf", ".", "reduce_mean", "(", "1", "-", "weights_normed", ",", "axis", "=", "0", ")", "\n", "eloss", "=", "(", "p_pos", "*", "tf", ".", "log", "(", "p_pos", ")", "+", "p_neg", "*", "tf", ".", "log", "(", "p_neg", ")", ")", "\n", "eloss", "=", "tf", ".", "reduce_sum", "(", "eloss", ",", "name", "=", "'entropy'", ")", "\n", "\n", "losses", "=", "[", "closs", ",", "eloss", "]", "\n", "\n", "tf", ".", "add_to_collection", "(", "'watch_list'", ",", "(", "'closs'", ",", "closs", ")", ")", "\n", "tf", ".", "add_to_collection", "(", "'watch_list'", ",", "(", "'eloss'", ",", "eloss", ")", ")", "\n", "\n", "return", "losses", "\n", "", ""]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.network.Network.__init__": [[33, 39], ["tensorflow.Graph", "tensorflow.Graph", "tensorflow.GPUOptions", "tensorflow.GPUOptions", "tensorflow.ConfigProto", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.Session"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "gpu_options", "=", "tf", ".", "GPUOptions", "(", "allow_growth", "=", "True", ")", "\n", "tf_config", "=", "tf", ".", "ConfigProto", "(", "gpu_options", "=", "gpu_options", ",", "\n", "allow_soft_placement", "=", "True", ",", "log_device_placement", "=", "False", ")", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "graph", "=", "self", ".", "graph", ",", "config", "=", "tf_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.network.Network.initialize": [[40, 187], ["utils.import_file.Network.graph.as_default", "utils.import_file.Network.sess.as_default", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.split", "tensorflow.split", "tensorflow.split", "tensorflow.split", "range", "tflib.average_grads", "split_dict.items", "tflib.apply_gradient", "tensorflow.assign_add", "tensorflow.assign_add", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.group", "tensorflow.group", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge_all", "tensorflow.summary.merge_all", "utils.import_file.Network.sess.run", "utils.import_file.Network.sess.run", "tensorflow.train.Saver", "tensorflow.train.Saver", "tflib.average_tensors", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.local_variables_initializer", "tensorflow.local_variables_initializer", "tensorflow.global_variables_initializer", "tensorflow.global_variables_initializer", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "split_dict[].append", "tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.device", "tensorflow.device", "tensorflow.identity", "tensorflow.identity", "tensorflow.identity", "tensorflow.identity", "utils.import_file", "utils.import_file.inference", "tensorflow.identity", "tensorflow.identity", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "losses.append", "utils.import_file.Network.initialize.insert_dict"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.average_grads", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.apply_gradient", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.summary.run", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.summary.run", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.tflib.average_tensors", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.import_file", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.nets.lemur_net.inference"], ["", "def", "initialize", "(", "self", ",", "config", ",", "num_classes", ")", ":", "\n", "        ", "'''\n            Initialize the graph from scratch according config.\n        '''", "\n", "with", "self", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "with", "self", ".", "sess", ".", "as_default", "(", ")", ":", "\n", "# Set up placeholders", "\n", "                ", "w", ",", "h", "=", "config", ".", "image_size", "\n", "channels", "=", "config", ".", "channels", "\n", "image_batch_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "h", ",", "w", ",", "channels", "]", ",", "name", "=", "'image_batch'", ")", "\n", "label_batch_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'label_batch'", ")", "\n", "learning_rate_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'learning_rate'", ")", "\n", "keep_prob_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'keep_prob'", ")", "\n", "phase_train_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "name", "=", "'phase_train'", ")", "\n", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "trainable", "=", "False", ",", "dtype", "=", "tf", ".", "int32", ",", "name", "=", "'global_step'", ")", "\n", "\n", "image_splits", "=", "tf", ".", "split", "(", "image_batch_placeholder", ",", "config", ".", "num_gpus", ")", "\n", "label_splits", "=", "tf", ".", "split", "(", "label_batch_placeholder", ",", "config", ".", "num_gpus", ")", "\n", "grads_splits", "=", "[", "]", "\n", "split_dict", "=", "{", "}", "\n", "def", "insert_dict", "(", "k", ",", "v", ")", ":", "\n", "                    ", "if", "k", "in", "split_dict", ":", "split_dict", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "else", ":", "split_dict", "[", "k", "]", "=", "[", "v", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "config", ".", "num_gpus", ")", ":", "\n", "                    ", "scope_name", "=", "''", "if", "i", "==", "0", "else", "'gpu_%d'", "%", "i", "\n", "with", "tf", ".", "name_scope", "(", "scope_name", ")", ":", "\n", "                        ", "with", "tf", ".", "variable_scope", "(", "''", ",", "reuse", "=", "i", ">", "0", ")", ":", "\n", "                            ", "with", "tf", ".", "device", "(", "'/gpu:%d'", "%", "i", ")", ":", "\n", "                                ", "images", "=", "tf", ".", "identity", "(", "image_splits", "[", "i", "]", ",", "name", "=", "'inputs'", ")", "\n", "labels", "=", "tf", ".", "identity", "(", "label_splits", "[", "i", "]", ",", "name", "=", "'labels'", ")", "\n", "# Save the first channel for testing", "\n", "if", "i", "==", "0", ":", "\n", "                                    ", "self", ".", "inputs", "=", "images", "\n", "\n", "# Build networks", "\n", "", "if", "config", ".", "localization_net", "is", "not", "None", ":", "\n", "                                    ", "localization_net", "=", "utils", ".", "import_file", "(", "config", ".", "localization_net", ",", "'network'", ")", "\n", "imsize", "=", "(", "112", ",", "112", ")", "\n", "images", ",", "theta", "=", "localization_net", ".", "inference", "(", "images", ",", "imsize", ",", "\n", "phase_train_placeholder", ",", "\n", "weight_decay", "=", "0.0", ")", "\n", "images", "=", "tf", ".", "identity", "(", "images", ",", "name", "=", "'transformed_image'", ")", "\n", "if", "i", "==", "0", ":", "\n", "                                        ", "tf", ".", "summary", ".", "image", "(", "'transformed_image'", ",", "images", ")", "\n", "", "", "else", ":", "\n", "                                    ", "images", "=", "images", "\n", "\n", "", "network", "=", "utils", ".", "import_file", "(", "config", ".", "network", ",", "'network'", ")", "\n", "prelogits", "=", "network", ".", "inference", "(", "images", ",", "keep_prob_placeholder", ",", "phase_train_placeholder", ",", "\n", "bottleneck_layer_size", "=", "config", ".", "embedding_size", ",", "\n", "weight_decay", "=", "config", ".", "weight_decay", ",", "\n", "model_version", "=", "config", ".", "model_version", ")", "\n", "prelogits", "=", "tf", ".", "identity", "(", "prelogits", ",", "name", "=", "'prelogits'", ")", "\n", "embeddings", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "prelogits", ",", "dim", "=", "1", ",", "name", "=", "'embeddings'", ")", "\n", "if", "i", "==", "0", ":", "\n", "                                    ", "self", ".", "outputs", "=", "tf", ".", "identity", "(", "embeddings", ",", "name", "=", "'outputs'", ")", "\n", "\n", "# Build all losses", "\n", "", "losses", "=", "[", "]", "\n", "\n", "# Orignal Softmax", "\n", "if", "'softmax'", "in", "config", ".", "losses", ".", "keys", "(", ")", ":", "\n", "                                    ", "logits", "=", "slim", ".", "fully_connected", "(", "prelogits", ",", "num_classes", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "config", ".", "weight_decay", ")", ",", "\n", "# weights_initializer=tf.truncated_normal_initializer(stddev=0.1),", "\n", "weights_initializer", "=", "slim", ".", "xavier_initializer", "(", ")", ",", "\n", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'Logits'", ")", "\n", "cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "labels", "=", "labels", ",", "logits", "=", "logits", ")", ",", "name", "=", "'cross_entropy'", ")", "\n", "losses", ".", "append", "(", "cross_entropy", ")", "\n", "insert_dict", "(", "'sloss'", ",", "cross_entropy", ")", "\n", "# L2-Softmax", "\n", "", "if", "'cosine'", "in", "config", ".", "losses", ".", "keys", "(", ")", ":", "\n", "                                    ", "logits", ",", "cosine_loss", "=", "tflib", ".", "cosine_softmax", "(", "prelogits", ",", "labels", ",", "num_classes", ",", "\n", "gamma", "=", "config", ".", "losses", "[", "'cosine'", "]", "[", "'gamma'", "]", ",", "\n", "weight_decay", "=", "config", ".", "weight_decay", ")", "\n", "losses", ".", "append", "(", "cosine_loss", ")", "\n", "insert_dict", "(", "'closs'", ",", "cosine_loss", ")", "\n", "# A-Softmax", "\n", "", "if", "'angular'", "in", "config", ".", "losses", ".", "keys", "(", ")", ":", "\n", "                                    ", "a_cfg", "=", "config", ".", "losses", "[", "'angular'", "]", "\n", "angular_loss", "=", "tflib", ".", "angular_softmax", "(", "prelogits", ",", "labels", ",", "num_classes", ",", "\n", "global_step", ",", "a_cfg", "[", "'m'", "]", ",", "a_cfg", "[", "'lamb_min'", "]", ",", "a_cfg", "[", "'lamb_max'", "]", ",", "\n", "weight_decay", "=", "config", ".", "weight_decay", ")", "\n", "losses", ".", "append", "(", "angular_loss", ")", "\n", "insert_dict", "(", "'aloss'", ",", "angular_loss", ")", "\n", "# Split Loss", "\n", "", "if", "'split'", "in", "config", ".", "losses", ".", "keys", "(", ")", ":", "\n", "                                    ", "split_losses", "=", "tflib", ".", "split_softmax", "(", "prelogits", ",", "labels", ",", "num_classes", ",", "\n", "global_step", ",", "gamma", "=", "config", ".", "losses", "[", "'split'", "]", "[", "'gamma'", "]", ",", "\n", "weight_decay", "=", "config", ".", "weight_decay", ")", "\n", "losses", ".", "extend", "(", "split_losses", ")", "\n", "insert_dict", "(", "'loss'", ",", "split_losses", "[", "0", "]", ")", "\n", "\n", "# Collect all losses", "\n", "", "reg_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ")", ",", "name", "=", "'reg_loss'", ")", "\n", "losses", ".", "append", "(", "reg_loss", ")", "\n", "insert_dict", "(", "'reg_loss'", ",", "reg_loss", ")", "\n", "\n", "total_loss", "=", "tf", ".", "add_n", "(", "losses", ",", "name", "=", "'total_loss'", ")", "\n", "grads_split", "=", "tf", ".", "gradients", "(", "total_loss", ",", "tf", ".", "trainable_variables", "(", ")", ")", "\n", "grads_splits", ".", "append", "(", "grads_split", ")", "\n", "\n", "\n", "\n", "# Merge the splits", "\n", "", "", "", "", "grads", "=", "tflib", ".", "average_grads", "(", "grads_splits", ")", "\n", "for", "k", ",", "v", "in", "split_dict", ".", "items", "(", ")", ":", "\n", "                    ", "v", "=", "tflib", ".", "average_tensors", "(", "v", ")", "\n", "split_dict", "[", "k", "]", "=", "v", "\n", "if", "'loss'", "in", "k", ":", "\n", "                        ", "tf", ".", "summary", ".", "scalar", "(", "'losses/'", "+", "k", ",", "v", ")", "\n", "", "else", ":", "\n", "                        ", "tf", ".", "summary", ".", "scalar", "(", "k", ",", "v", ")", "\n", "\n", "\n", "# Training Operaters", "\n", "", "", "apply_gradient_op", "=", "tflib", ".", "apply_gradient", "(", "tf", ".", "trainable_variables", "(", ")", ",", "grads", ",", "config", ".", "optimizer", ",", "\n", "learning_rate_placeholder", ",", "config", ".", "learning_rate_multipliers", ")", "\n", "\n", "update_global_step_op", "=", "tf", ".", "assign_add", "(", "global_step", ",", "1", ")", "\n", "\n", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "\n", "train_ops", "=", "[", "apply_gradient_op", ",", "update_global_step_op", "]", "+", "update_ops", "\n", "train_op", "=", "tf", ".", "group", "(", "*", "train_ops", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'learning_rate'", ",", "learning_rate_placeholder", ")", "\n", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n", "# Initialize variables", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "trainable_variables", "(", ")", ",", "max_to_keep", "=", "None", ")", "\n", "\n", "# Keep useful tensors", "\n", "self", ".", "image_batch_placeholder", "=", "image_batch_placeholder", "\n", "self", ".", "label_batch_placeholder", "=", "label_batch_placeholder", "\n", "self", ".", "learning_rate_placeholder", "=", "learning_rate_placeholder", "\n", "self", ".", "keep_prob_placeholder", "=", "keep_prob_placeholder", "\n", "self", ".", "phase_train_placeholder", "=", "phase_train_placeholder", "\n", "self", ".", "global_step", "=", "global_step", "\n", "self", ".", "watch_list", "=", "split_dict", "\n", "self", ".", "train_op", "=", "train_op", "\n", "self", ".", "summary_op", "=", "summary_op", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.network.Network.train": [[190, 200], ["network.Network.sess.run", "network.Network.sess.run"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.summary.run", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.summary.run"], ["", "", "", "def", "train", "(", "self", ",", "image_batch", ",", "label_batch", ",", "learning_rate", ",", "keep_prob", ")", ":", "\n", "        ", "feed_dict", "=", "{", "self", ".", "image_batch_placeholder", ":", "image_batch", ",", "\n", "self", ".", "label_batch_placeholder", ":", "label_batch", ",", "\n", "self", ".", "learning_rate_placeholder", ":", "learning_rate", ",", "\n", "self", ".", "keep_prob_placeholder", ":", "keep_prob", ",", "\n", "self", ".", "phase_train_placeholder", ":", "True", ",", "}", "\n", "_", ",", "wl", ",", "sm", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "train_op", ",", "self", ".", "watch_list", ",", "self", ".", "summary_op", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "step", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "global_step", ")", "\n", "\n", "return", "wl", ",", "sm", ",", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.network.Network.restore_model": [[201, 205], ["network.Network.graph.as_default", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tflib.restore_model"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.network.Network.restore_model"], ["", "def", "restore_model", "(", "self", ",", "model_dir", ",", "restore_scopes", ")", ":", "\n", "        ", "with", "self", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "trainable_variables", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "tflib", ".", "restore_model", "(", "self", ".", "sess", ",", "trainable_variables", ",", "model_dir", ",", "restore_scopes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.network.Network.save_model": [[206, 208], ["tflib.save_model"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.network.Network.save_model"], ["", "", "def", "save_model", "(", "self", ",", "model_dir", ",", "global_step", ")", ":", "\n", "        ", "tflib", ".", "save_model", "(", "self", ".", "sess", ",", "self", ".", "saver", ",", "model_dir", ",", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.network.Network.load_model": [[210, 216], ["tflib.load_model", "network.Network.graph.get_tensor_by_name", "network.Network.graph.get_tensor_by_name", "network.Network.graph.get_tensor_by_name", "network.Network.graph.get_tensor_by_name"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.network.Network.load_model"], ["", "def", "load_model", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "tflib", ".", "load_model", "(", "self", ".", "sess", ",", "*", "args", ")", "\n", "self", ".", "phase_train_placeholder", "=", "self", ".", "graph", ".", "get_tensor_by_name", "(", "'phase_train:0'", ")", "\n", "self", ".", "keep_prob_placeholder", "=", "self", ".", "graph", ".", "get_tensor_by_name", "(", "'keep_prob:0'", ")", "\n", "self", ".", "inputs", "=", "self", ".", "graph", ".", "get_tensor_by_name", "(", "'inputs:0'", ")", "\n", "self", ".", "outputs", "=", "self", ".", "graph", ".", "get_tensor_by_name", "(", "'outputs:0'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.network.Network.extract_feature": [[217, 232], ["numpy.ndarray", "range", "len", "min", "network.Network.sess.run", "type", "utils.preprocess"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.summary.run", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.preprocess"], ["", "def", "extract_feature", "(", "self", ",", "images", ",", "batch_size", ",", "preprocess", "=", "False", ",", "config", "=", "None", ",", "is_training", "=", "False", ")", ":", "\n", "        ", "num_images", "=", "images", ".", "shape", "[", "0", "]", "if", "type", "(", "images", ")", "==", "np", ".", "ndarray", "else", "len", "(", "images", ")", "\n", "num_features", "=", "self", ".", "outputs", ".", "shape", "[", "1", "]", "\n", "result", "=", "np", ".", "ndarray", "(", "(", "num_images", ",", "num_features", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "start_idx", "in", "range", "(", "0", ",", "num_images", ",", "batch_size", ")", ":", "\n", "            ", "end_idx", "=", "min", "(", "num_images", ",", "start_idx", "+", "batch_size", ")", "\n", "inputs", "=", "images", "[", "start_idx", ":", "end_idx", "]", "\n", "if", "preprocess", ":", "\n", "                ", "assert", "config", "is", "not", "None", "\n", "inputs", "=", "utils", ".", "preprocess", "(", "inputs", ",", "config", ",", "is_training", ")", "\n", "", "feed_dict", "=", "{", "self", ".", "inputs", ":", "inputs", ",", "\n", "self", ".", "phase_train_placeholder", ":", "False", ",", "\n", "self", ".", "keep_prob_placeholder", ":", "1.0", "}", "\n", "result", "[", "start_idx", ":", "end_idx", "]", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "outputs", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.DataClass.__init__": [[63, 68], ["list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "class_name", ",", "indices", ",", "label", ")", ":", "\n", "        ", "self", ".", "class_name", "=", "class_name", "\n", "self", ".", "indices", "=", "list", "(", "indices", ")", "\n", "self", ".", "label", "=", "label", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.DataClass.get_samples": [[69, 82], ["int", "range", "indices_temp.remove", "numpy.ceil", "numpy.random.permutation", "indices.append", "numpy.concatenate", "len"], "methods", ["None"], ["", "def", "get_samples", "(", "self", ",", "num_samples_per_class", ",", "exception", "=", "None", ")", ":", "\n", "        ", "indices_temp", "=", "self", ".", "indices", "[", ":", "]", "\n", "if", "exception", "is", "not", "None", ":", "\n", "            ", "indices_temp", ".", "remove", "(", "exception", ")", "\n", "", "indices", "=", "[", "]", "\n", "iterations", "=", "int", "(", "np", ".", "ceil", "(", "1.0", "*", "num_samples_per_class", "/", "len", "(", "indices_temp", ")", ")", ")", "\n", "# iterations = 1", "\n", "for", "i", "in", "range", "(", "iterations", ")", ":", "\n", "            ", "sample_indices", "=", "np", ".", "random", ".", "permutation", "(", "indices_temp", ")", "\n", "indices", ".", "append", "(", "sample_indices", ")", "\n", "", "indices", "=", "np", ".", "concatenate", "(", "indices", ",", "axis", "=", "0", ")", "[", ":", "num_samples_per_class", "]", "\n", "# indices = indices[:min(indices.size, num_samples_per_class)]", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.DataClass.build_clusters": [[83, 92], ["numpy.random.permutation", "numpy.reshape", "list", "list.append"], "methods", ["None"], ["", "def", "build_clusters", "(", "self", ",", "cluster_size", ")", ":", "\n", "        ", "permut_indices", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "indices", ")", "\n", "cutoff", "=", "(", "permut_indices", ".", "size", "//", "cluster_size", ")", "*", "cluster_size", "\n", "clusters", "=", "np", ".", "reshape", "(", "permut_indices", "[", ":", "cutoff", "]", ",", "[", "-", "1", ",", "cluster_size", "]", ")", "\n", "clusters", "=", "list", "(", "clusters", ")", "\n", "if", "permut_indices", ".", "size", ">", "cutoff", ":", "\n", "            ", "last_cluster", "=", "permut_indices", "[", "cutoff", ":", "]", "\n", "clusters", ".", "append", "(", "last_cluster", ")", "\n", "", "return", "clusters", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.DataClass.cutoff_samples": [[93, 96], ["min", "len"], "methods", ["None"], ["", "def", "cutoff_samples", "(", "self", ",", "num_samples", ")", ":", "\n", "        ", "cutoff", "=", "min", "(", "len", "(", "self", ".", "indices", ")", ",", "num_samples", ")", "\n", "self", ".", "indices", "=", "self", ".", "indices", "[", ":", "cutoff", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.__init__": [[99, 113], ["utils.Dataset.init_from_path"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Dataset.init_from_path"], ["    ", "def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "None", "\n", "self", ".", "classes", "=", "None", "\n", "self", ".", "images", "=", "None", "\n", "self", ".", "labels", "=", "None", "\n", "self", ".", "index_queue", "=", "None", "\n", "self", ".", "queue_idx", "=", "None", "\n", "self", ".", "cluster_queue", "=", "None", "\n", "self", ".", "cluster_queue_idx", "=", "None", "\n", "self", ".", "batch_queue", "=", "None", "\n", "self", ".", "class_weights", "=", "None", "\n", "\n", "if", "path", "is", "not", "None", ":", "\n", "            ", "self", ".", "init_from_path", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.clear": [[114, 117], ["utils.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.learning.PCA.__init__"], ["", "", "def", "clear", "(", "self", ")", ":", "\n", "        ", "del", "self", ".", "classes", "\n", "self", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.init_from_path": [[118, 131], ["os.path.expanduser", "os.path.splitext", "os.path.isdir", "print", "utils.Dataset.init_from_folder", "utils.Dataset.init_from_list", "utils.Dataset.init_from_hdf5", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.init_from_folder", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.init_from_list", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.init_from_hdf5"], ["", "def", "init_from_path", "(", "self", ",", "path", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "expanduser", "(", "path", ")", "\n", "_", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "path", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "self", ".", "init_from_folder", "(", "path", ")", "\n", "", "elif", "ext", "==", "'.txt'", ":", "\n", "            ", "self", ".", "init_from_list", "(", "path", ")", "\n", "", "elif", "ext", "==", "'.hdf5'", ":", "\n", "            ", "self", ".", "init_from_hdf5", "(", "path", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Cannot initialize dataset from path: %s\\n\\\n                It should be either a folder, .txt or .hdf5 file'", "%", "path", ")", "\n", "", "print", "(", "'%d images of %d classes loaded'", "%", "(", "len", "(", "self", ".", "images", ")", ",", "self", ".", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.init_from_folder": [[132, 152], ["os.path.expanduser", "os.listdir", "os.listdir.sort", "enumerate", "numpy.array", "numpy.array", "numpy.array", "len", "os.path.join", "os.path.isdir", "os.listdir", "numpy.arange", "classes.append", "images.extend", "labels.extend", "os.path.join", "len", "utils.DataClass", "len", "len", "len"], "methods", ["None"], ["", "def", "init_from_folder", "(", "self", ",", "folder", ")", ":", "\n", "        ", "folder", "=", "os", ".", "path", ".", "expanduser", "(", "folder", ")", "\n", "class_names", "=", "os", ".", "listdir", "(", "folder", ")", "\n", "class_names", ".", "sort", "(", ")", "\n", "classes", "=", "[", "]", "\n", "images", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "label", ",", "class_name", "in", "enumerate", "(", "class_names", ")", ":", "\n", "            ", "classdir", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "class_name", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "classdir", ")", ":", "\n", "                ", "images_class", "=", "os", ".", "listdir", "(", "classdir", ")", "\n", "images_class", "=", "[", "os", ".", "path", ".", "join", "(", "classdir", ",", "img", ")", "for", "img", "in", "images_class", "]", "\n", "indices_class", "=", "np", ".", "arange", "(", "len", "(", "images", ")", ",", "len", "(", "images", ")", "+", "len", "(", "images_class", ")", ")", "\n", "classes", ".", "append", "(", "DataClass", "(", "class_name", ",", "indices_class", ",", "label", ")", ")", "\n", "images", ".", "extend", "(", "images_class", ")", "\n", "labels", ".", "extend", "(", "len", "(", "images_class", ")", "*", "[", "label", "]", ")", "\n", "", "", "self", ".", "classes", "=", "np", ".", "array", "(", "classes", ",", "dtype", "=", "np", ".", "object", ")", "\n", "self", ".", "images", "=", "np", ".", "array", "(", "images", ",", "dtype", "=", "np", ".", "object", ")", "\n", "self", ".", "labels", "=", "np", ".", "array", "(", "labels", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "num_classes", "=", "len", "(", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.init_from_list": [[153, 164], ["numpy.array", "numpy.array", "utils.Dataset.init_classes", "open", "f.readlines", "line.strip().split", "int", "len", "len", "line.strip"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.init_classes"], ["", "def", "init_from_list", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "lines", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "line", "in", "lines", "]", "\n", "assert", "len", "(", "lines", ")", ">", "0", "and", "len", "(", "lines", "[", "0", "]", ")", "==", "2", ",", "'List file must be in format: \"fullpath(str) label(int)\"'", "\n", "images", "=", "[", "line", "[", "0", "]", "for", "line", "in", "lines", "]", "\n", "labels", "=", "[", "int", "(", "line", "[", "1", "]", ")", "for", "line", "in", "lines", "]", "\n", "self", ".", "images", "=", "np", ".", "array", "(", "images", ",", "dtype", "=", "np", ".", "object", ")", "\n", "self", ".", "labels", "=", "np", ".", "array", "(", "labels", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "init_classes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.init_from_hdf5": [[166, 171], ["utils.Dataset.init_classes", "h5py.File", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.init_classes"], ["", "def", "init_from_hdf5", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "h5py", ".", "File", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "images", "=", "np", ".", "array", "(", "f", "[", "'images'", "]", ")", "\n", "self", ".", "labels", "=", "np", ".", "array", "(", "f", "[", "'labels'", "]", ")", "\n", "", "self", ".", "init_classes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.init_classes": [[173, 185], ["enumerate", "dict_classes.items", "numpy.array", "len", "classes.append", "dict_classes[].append", "utils.DataClass", "str"], "methods", ["None"], ["", "def", "init_classes", "(", "self", ")", ":", "\n", "        ", "dict_classes", "=", "{", "}", "\n", "classes", "=", "[", "]", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "labels", ")", ":", "\n", "            ", "if", "not", "label", "in", "dict_classes", ":", "\n", "                ", "dict_classes", "[", "label", "]", "=", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "dict_classes", "[", "label", "]", ".", "append", "(", "i", ")", "\n", "", "", "for", "label", ",", "indices", "in", "dict_classes", ".", "items", "(", ")", ":", "\n", "            ", "classes", ".", "append", "(", "DataClass", "(", "str", "(", "label", ")", ",", "indices", ",", "label", ")", ")", "\n", "", "self", ".", "classes", "=", "np", ".", "array", "(", "classes", ",", "dtype", "=", "np", ".", "object", ")", "\n", "self", ".", "num_classes", "=", "len", "(", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.build_subset_from_classes": [[187, 203], ["enumerate", "utils.Dataset", "numpy.array", "numpy.array", "utils.Dataset.init_classes", "len", "print", "len", "images.extend", "labels.extend", "len"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.init_classes"], ["", "def", "build_subset_from_classes", "(", "self", ",", "classes", ")", ":", "\n", "        ", "images", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "classes_new", "=", "[", "]", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "classes", ")", ":", "\n", "            ", "n", "=", "len", "(", "c", ".", "indices", ")", "\n", "images", ".", "extend", "(", "self", ".", "images", "[", "c", ".", "indices", "]", ")", "\n", "labels", ".", "extend", "(", "[", "i", "]", "*", "n", ")", "\n", "", "subset", "=", "Dataset", "(", ")", "\n", "subset", ".", "images", "=", "np", ".", "array", "(", "images", ",", "dtype", "=", "np", ".", "object", ")", "\n", "subset", ".", "labels", "=", "np", ".", "array", "(", "labels", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "subset", ".", "init_classes", "(", ")", "\n", "subset", ".", "num_classes", "=", "len", "(", "classes", ")", "\n", "\n", "print", "(", "'built subset: %d images of %d classes'", "%", "(", "len", "(", "subset", ".", "images", ")", ",", "subset", ".", "num_classes", ")", ")", "\n", "return", "subset", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.split_k_folds": [[204, 211], ["sklearn.model_selection.KFold", "utils.Dataset.kf.split", "utils.Dataset.train_idx.append", "utils.Dataset.test_idx.append"], "methods", ["None"], ["", "def", "split_k_folds", "(", "self", ",", "k", ")", ":", "\n", "        ", "self", ".", "kf", "=", "KFold", "(", "n_splits", "=", "k", ")", "\n", "self", ".", "train_idx", "=", "[", "]", "\n", "self", ".", "test_idx", "=", "[", "]", "\n", "for", "train", ",", "test", "in", "self", ".", "kf", ".", "split", "(", "self", ".", "classes", ")", ":", "\n", "            ", "self", ".", "train_idx", ".", "append", "(", "train", ")", "\n", "self", ".", "test_idx", ".", "append", "(", "test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.get_fold": [[214, 223], ["utils.Dataset.kf.get_n_splits", "utils.Dataset.build_subset_from_classes", "utils.Dataset.build_subset_from_classes"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.build_subset_from_classes", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.build_subset_from_classes"], ["", "", "def", "get_fold", "(", "self", ",", "fold", ")", ":", "\n", "        ", "k", "=", "self", ".", "kf", ".", "get_n_splits", "(", "self", ".", "classes", ")", "\n", "assert", "fold", "<=", "k", "\n", "# Concatenate the classes in difference folds for trainset", "\n", "#trainset_classes = [c for i in range(k) if i!=fold for c in self.k_folds_classes[i]]", "\n", "#testset_classes = self.k_folds_classes[fold]", "\n", "trainset", "=", "self", ".", "build_subset_from_classes", "(", "self", ".", "classes", "[", "self", ".", "train_idx", "[", "fold", "-", "1", "]", "]", ")", "\n", "testset", "=", "self", ".", "build_subset_from_classes", "(", "self", ".", "classes", "[", "self", ".", "test_idx", "[", "fold", "-", "1", "]", "]", ")", "\n", "return", "trainset", ",", "testset", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.init_index_queue": [[225, 232], ["numpy.random.permutation", "numpy.arange"], "methods", ["None"], ["", "def", "init_index_queue", "(", "self", ",", "random", "=", "True", ")", ":", "\n", "        ", "size", "=", "self", ".", "images", ".", "shape", "[", "0", "]", "\n", "if", "random", ":", "\n", "            ", "self", ".", "index_queue", "=", "np", ".", "random", ".", "permutation", "(", "size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "index_queue", "=", "np", ".", "arange", "(", "size", ")", "\n", "", "self", ".", "queue_idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.pop_index_queue": [[233, 245], ["result.extend", "utils.Dataset.init_index_queue", "result.extend", "utils.Dataset.init_index_queue", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.init_index_queue", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.init_index_queue"], ["", "def", "pop_index_queue", "(", "self", ",", "num", ",", "random", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "index_queue", "is", "None", ":", "\n", "            ", "self", ".", "init_index_queue", "(", "random", ")", "\n", "", "result", "=", "[", "]", "\n", "while", "num", ">=", "len", "(", "self", ".", "index_queue", ")", "-", "self", ".", "queue_idx", ":", "\n", "            ", "result", ".", "extend", "(", "self", ".", "index_queue", "[", "self", ".", "queue_idx", ":", "]", ")", "\n", "num", "-=", "len", "(", "self", ".", "index_queue", ")", "-", "self", ".", "queue_idx", "\n", "self", ".", "init_index_queue", "(", "random", ")", "\n", "self", ".", "queue_idx", "=", "0", "\n", "", "result", ".", "extend", "(", "self", ".", "index_queue", "[", "self", ".", "queue_idx", ":", "self", ".", "queue_idx", "+", "num", "]", ")", "\n", "self", ".", "queue_idx", "+=", "num", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.init_cluster_queue": [[246, 255], ["random.shuffle", "type", "utils.Dataset.cluster_queue.extend", "dataclass.build_clusters"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.DataClass.build_clusters"], ["", "def", "init_cluster_queue", "(", "self", ",", "cluster_size", ")", ":", "\n", "        ", "assert", "type", "(", "cluster_size", ")", "==", "int", "\n", "self", ".", "cluster_queue", "=", "[", "]", "\n", "for", "dataclass", "in", "self", ".", "classes", ":", "\n", "            ", "self", ".", "cluster_queue", ".", "extend", "(", "dataclass", ".", "build_clusters", "(", "cluster_size", ")", ")", "\n", "", "random", ".", "shuffle", "(", "self", ".", "cluster_queue", ")", "\n", "\n", "self", ".", "cluster_queue", "=", "[", "idx", "for", "cluster", "in", "self", ".", "cluster_queue", "for", "idx", "in", "cluster", "]", "\n", "self", ".", "cluster_queue_idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.pop_cluster_queue": [[257, 268], ["result.extend", "utils.Dataset.init_cluster_queue", "result.extend", "utils.Dataset.init_cluster_queue", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.init_cluster_queue", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.init_cluster_queue"], ["", "def", "pop_cluster_queue", "(", "self", ",", "num_clusters", ",", "cluster_size", ")", ":", "\n", "        ", "if", "self", ".", "cluster_queue", "is", "None", ":", "\n", "            ", "self", ".", "init_cluster_queue", "(", "cluster_size", ")", "\n", "", "result", "=", "[", "]", "\n", "while", "num_clusters", ">=", "len", "(", "self", ".", "cluster_queue", ")", "-", "self", ".", "cluster_queue_idx", ":", "\n", "            ", "result", ".", "extend", "(", "self", ".", "cluster_queue", "[", "self", ".", "cluster_queue_idx", ":", "]", ")", "\n", "num_clusters", "-=", "len", "(", "self", ".", "cluster_queue", ")", "-", "self", ".", "cluster_queue_idx", "\n", "self", ".", "init_cluster_queue", "(", "cluster_size", ")", "\n", "", "result", ".", "extend", "(", "self", ".", "cluster_queue", "[", "self", ".", "cluster_queue_idx", ":", "self", ".", "cluster_queue_idx", "+", "num_clusters", "]", ")", "\n", "self", ".", "cluster_queue_idx", "+=", "num_clusters", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.get_batch": [[269, 275], ["utils.Dataset.pop_index_queue"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.pop_index_queue"], ["", "def", "get_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "indices_batch", "=", "self", ".", "pop_index_queue", "(", "batch_size", ",", "True", ")", "\n", "\n", "image_batch", "=", "self", ".", "images", "[", "indices_batch", "]", "\n", "label_batch", "=", "self", ".", "labels", "[", "indices_batch", "]", "\n", "return", "image_batch", ",", "label_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.get_batch_classes": [[276, 296], ["int", "utils.Dataset.pop_cluster_queue"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.pop_cluster_queue"], ["", "def", "get_batch_classes", "(", "self", ",", "batch_size", ",", "num_classes_per_batch", ")", ":", "\n", "# classes_batch = np.random.permutation(self.num_classes)[:num_classes_per_batch]", "\n", "# classes_batch = self.sample_classes_by_weight(num_classes_per_batch)", "\n", "\n", "#indices_root = self.pop_index_queue(num_classes_per_batch)", "\n", "#classes_batch = self.labels[indices_root]", "\n", "\n", "        ", "assert", "batch_size", "%", "num_classes_per_batch", "==", "0", "\n", "num_samples_per_class", "=", "int", "(", "batch_size", "/", "num_classes_per_batch", ")", "\n", "\n", "indices_batch", "=", "self", ".", "pop_cluster_queue", "(", "batch_size", ",", "num_samples_per_class", ")", "\n", "\n", "#ndices_batch = [indices_root]", "\n", "#for i, class_id in enumerate(classes_batch):", "\n", "#    indices_batch.append(self.classes[class_id].get_samples(num_samples_per_class, indices_root[i]))", "\n", "\n", "# indices_batch = np.concatenate(indices_batch, axis=0)", "\n", "image_batch", "=", "self", ".", "images", "[", "indices_batch", "]", "\n", "label_batch", "=", "self", ".", "labels", "[", "indices_batch", "]", "\n", "return", "image_batch", ",", "label_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.sample_classes_by_weight": [[299, 313], ["range", "numpy.array", "numpy.square", "numpy.random.choice", "selected.append", "len", "numpy.sum"], "methods", ["None"], ["", "def", "sample_classes_by_weight", "(", "self", ",", "num_classes_per_batch", ")", ":", "\n", "        ", "if", "self", ".", "class_weights", "is", "None", ":", "\n", "            ", "self", ".", "class_weights", "=", "[", "len", "(", "dataclass", ".", "indices", ")", "for", "dataclass", "in", "self", ".", "classes", "]", "\n", "self", ".", "class_weights", "=", "np", ".", "array", "(", "self", ".", "class_weights", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "class_weights", "=", "np", ".", "square", "(", "self", ".", "class_weights", ")", "\n", "self", ".", "class_weights", "=", "self", ".", "class_weights", "/", "np", ".", "sum", "(", "self", ".", "class_weights", ")", "\n", "", "p", "=", "self", ".", "class_weights", "\n", "selected", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_classes_per_batch", ")", ":", "\n", "# p[selected] = 0.0", "\n", "# p = p / np.sum(p)", "\n", "            ", "select", "=", "np", ".", "random", ".", "choice", "(", "p", ".", "size", ",", "p", "=", "p", ")", "\n", "selected", ".", "append", "(", "select", ")", "\n", "", "return", "selected", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.get_samples_per_class": [[314, 322], ["numpy.concatenate", "numpy.concatenate.append", "data_class.get_samples"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.DataClass.get_samples"], ["", "def", "get_samples_per_class", "(", "self", ",", "num_samples_per_class", ")", ":", "\n", "        ", "indices", "=", "[", "]", "\n", "for", "data_class", "in", "self", ".", "classes", ":", "\n", "            ", "indices", ".", "append", "(", "data_class", ".", "get_samples", "(", "num_samples_per_class", ")", ")", "\n", "", "indices", "=", "np", ".", "concatenate", "(", "indices", ",", "axis", "=", "0", ")", "\n", "images", "=", "self", ".", "images", "[", "indices", "]", "\n", "labels", "=", "self", ".", "labels", "[", "indices", "]", "\n", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.start_batch_queue": [[324, 340], ["multiprocessing.Queue", "range", "multiprocessing.Process", "multiprocessing.Process.start", "utils.preprocess", "utils.Dataset.batch_queue.put", "utils.Dataset.get_batch_classes", "utils.Dataset.get_batch"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.preprocess", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.get_batch_classes", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.get_batch"], ["", "def", "start_batch_queue", "(", "self", ",", "config", ",", "is_training", ",", "maxsize", "=", "16", ",", "num_threads", "=", "1", ")", ":", "\n", "        ", "self", ".", "batch_queue", "=", "Queue", "(", "maxsize", "=", "maxsize", ")", "\n", "def", "batch_queue_worker", "(", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "if", "config", ".", "template_batch", ":", "\n", "                    ", "image_path_batch", ",", "label_batch", "=", "self", ".", "get_batch_classes", "(", "config", ".", "batch_size", ",", "config", ".", "num_classes_per_batch", ")", "\n", "", "else", ":", "\n", "                    ", "image_path_batch", ",", "label_batch", "=", "self", ".", "get_batch", "(", "config", ".", "batch_size", ")", "\n", "", "image_batch", "=", "preprocess", "(", "image_path_batch", ",", "config", ",", "is_training", ")", "\n", "self", ".", "batch_queue", ".", "put", "(", "(", "image_batch", ",", "label_batch", ")", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "num_threads", ")", ":", "\n", "            ", "worker", "=", "Process", "(", "target", "=", "batch_queue_worker", ")", "\n", "worker", ".", "daemon", "=", "True", "\n", "worker", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.Dataset.pop_batch_queue": [[342, 345], ["utils.Dataset.batch_queue.get"], "methods", ["None"], ["", "", "def", "pop_batch_queue", "(", "self", ")", ":", "\n", "        ", "batch", "=", "self", ".", "batch_queue", ".", "get", "(", "block", "=", "True", ",", "timeout", "=", "60", ")", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.import_file": [[42, 52], ["imp.load_source", "print", "sys.exit", "os.path.isfile", "print", "sys.exit"], "function", ["None"], ["def", "import_file", "(", "full_path_to_module", ",", "name", "=", "'module.name'", ")", ":", "\n", "    ", "if", "full_path_to_module", "is", "None", ":", "\n", "        ", "print", "(", "'Configuration file not added as an argument'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "full_path_to_module", ")", ":", "\n", "        ", "print", "(", "'{} does not exist. Please check.'", ".", "format", "(", "full_path_to_module", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "module_obj", "=", "imp", ".", "load_source", "(", "name", ",", "full_path_to_module", ")", "\n", "\n", "return", "module_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.create_log_dir": [[53, 61], ["datetime.datetime.strftime", "os.path.join", "shutil.copyfile", "datetime.datetime.now", "os.path.expanduser", "os.path.isdir", "os.makedirs", "os.path.join"], "function", ["None"], ["", "def", "create_log_dir", "(", "config", ",", "config_file", ")", ":", "\n", "    ", "subdir", "=", "datetime", ".", "strftime", "(", "datetime", ".", "now", "(", ")", ",", "'%Y%m%d-%H%M%S'", ")", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "config", ".", "log_base_dir", ")", ",", "config", ".", "name", ",", "subdir", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "log_dir", ")", ":", "# Create the log directory if it doesn't exist", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "shutil", ".", "copyfile", "(", "config_file", ",", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'config.py'", ")", ")", "\n", "\n", "return", "log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.get_new_shape": [[349, 356], ["tuple", "list", "tuple"], "function", ["None"], ["", "", "def", "get_new_shape", "(", "images", ",", "size", ")", ":", "\n", "    ", "w", ",", "h", "=", "tuple", "(", "size", ")", "\n", "shape", "=", "list", "(", "images", ".", "shape", ")", "\n", "shape", "[", "1", "]", "=", "h", "\n", "shape", "[", "2", "]", "=", "w", "\n", "shape", "=", "tuple", "(", "shape", ")", "\n", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.random_crop": [[357, 372], ["tuple", "utils.get_new_shape", "numpy.ndarray", "numpy.random.randint", "numpy.random.randint", "range"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.get_new_shape"], ["", "def", "random_crop", "(", "images", ",", "size", ")", ":", "\n", "    ", "n", ",", "_h", ",", "_w", "=", "images", ".", "shape", "[", ":", "3", "]", "\n", "w", ",", "h", "=", "tuple", "(", "size", ")", "\n", "shape_new", "=", "get_new_shape", "(", "images", ",", "size", ")", "\n", "assert", "(", "_h", ">=", "h", "and", "_w", ">=", "w", ")", "\n", "\n", "images_new", "=", "np", ".", "ndarray", "(", "shape_new", ",", "dtype", "=", "images", ".", "dtype", ")", "\n", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "_h", "-", "h", "+", "1", ",", "size", "=", "(", "n", ")", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "_w", "-", "w", "+", "1", ",", "size", "=", "(", "n", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "images_new", "[", "i", "]", "=", "images", "[", "i", ",", "y", "[", "i", "]", ":", "y", "[", "i", "]", "+", "h", ",", "x", "[", "i", "]", ":", "x", "[", "i", "]", "+", "w", "]", "\n", "\n", "", "return", "images_new", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.center_crop": [[373, 384], ["tuple", "int", "int", "round", "round"], "function", ["None"], ["", "def", "center_crop", "(", "images", ",", "size", ")", ":", "\n", "    ", "n", ",", "_h", ",", "_w", "=", "images", ".", "shape", "[", ":", "3", "]", "\n", "w", ",", "h", "=", "tuple", "(", "size", ")", "\n", "assert", "(", "_h", ">=", "h", "and", "_w", ">=", "w", ")", "\n", "\n", "y", "=", "int", "(", "round", "(", "0.5", "*", "(", "_h", "-", "h", ")", ")", ")", "\n", "x", "=", "int", "(", "round", "(", "0.5", "*", "(", "_w", "-", "w", ")", ")", ")", "\n", "\n", "images_new", "=", "images", "[", ":", ",", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "\n", "\n", "return", "images_new", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.random_flip": [[385, 394], ["range", "numpy.random.rand", "numpy.fliplr"], "function", ["None"], ["", "def", "random_flip", "(", "images", ")", ":", "\n", "    ", "images_new", "=", "images", "\n", "flips", "=", "np", ".", "random", ".", "rand", "(", "images_new", ".", "shape", "[", "0", "]", ")", ">=", "0.5", "\n", "\n", "for", "i", "in", "range", "(", "images_new", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "flips", "[", "i", "]", ":", "\n", "            ", "images_new", "[", "i", "]", "=", "np", ".", "fliplr", "(", "images", "[", "i", "]", ")", "\n", "\n", "", "", "return", "images_new", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.resize": [[395, 406], ["tuple", "utils.get_new_shape", "numpy.ndarray", "range", "scipy.misc.imresize"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.get_new_shape"], ["", "def", "resize", "(", "images", ",", "size", ")", ":", "\n", "    ", "n", ",", "_h", ",", "_w", "=", "images", ".", "shape", "[", ":", "3", "]", "\n", "w", ",", "h", "=", "tuple", "(", "size", ")", "\n", "shape_new", "=", "get_new_shape", "(", "images", ",", "size", ")", "\n", "\n", "images_new", "=", "np", ".", "ndarray", "(", "shape_new", ",", "dtype", "=", "images", ".", "dtype", ")", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "images_new", "[", "i", "]", "=", "misc", ".", "imresize", "(", "images", "[", "i", "]", ",", "(", "h", ",", "w", ")", ")", "\n", "\n", "", "return", "images_new", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.standardize_images": [[407, 420], ["images.astype", "numpy.mean().reshape", "numpy.std().reshape", "numpy.mean", "numpy.std"], "function", ["None"], ["", "def", "standardize_images", "(", "images", ",", "standard", ")", ":", "\n", "    ", "if", "standard", "==", "'mean_scale'", ":", "\n", "        ", "mean", "=", "127.5", "\n", "std", "=", "128.0", "\n", "", "elif", "standard", "==", "'scale'", ":", "\n", "        ", "mean", "=", "0.0", "\n", "std", "=", "255.0", "\n", "", "elif", "standard", "==", "'deb'", ":", "\n", "        ", "mean", "=", "np", ".", "mean", "(", "images", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "std", "=", "np", ".", "std", "(", "images", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "", "images_new", "=", "images", ".", "astype", "(", "np", ".", "float32", ")", "\n", "images_new", "=", "(", "images_new", "-", "mean", ")", "/", "std", "\n", "return", "images_new", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.random_downsample": [[421, 433], ["range", "int", "int", "scipy.misc.imresize", "scipy.misc.imresize", "numpy.random.rand", "round", "round"], "function", ["None"], ["", "def", "random_downsample", "(", "images", ",", "min_ratio", ")", ":", "\n", "    ", "n", ",", "_h", ",", "_w", "=", "images", ".", "shape", "[", ":", "3", "]", "\n", "images_new", "=", "images", "\n", "ratios", "=", "min_ratio", "+", "(", "1", "-", "min_ratio", ")", "*", "np", ".", "random", ".", "rand", "(", "images_new", ".", "shape", "[", "0", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "images_new", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "w", "=", "int", "(", "round", "(", "ratios", "[", "i", "]", "*", "_w", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "ratios", "[", "i", "]", "*", "_h", ")", ")", "\n", "images_new", "[", "i", ",", ":", "h", ",", ":", "w", "]", "=", "misc", ".", "imresize", "(", "images", "[", "i", "]", ",", "(", "h", ",", "w", ")", ")", "\n", "images_new", "[", "i", "]", "=", "misc", ".", "imresize", "(", "images_new", "[", "i", ",", ":", "h", ",", ":", "w", "]", ",", "(", "_h", ",", "_w", ")", ")", "\n", "\n", "", "return", "images_new", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.preprocess": [[435, 465], ["type", "print", "enumerate", "print", "numpy.stack", "len", "np.stack.append", "scipy.misc.imread"], "function", ["None"], ["", "def", "preprocess", "(", "images", ",", "config", ",", "is_training", "=", "False", ")", ":", "\n", "# Load images first if they are file paths", "\n", "    ", "if", "type", "(", "images", "[", "0", "]", ")", "==", "str", ":", "\n", "        ", "image_paths", "=", "images", "\n", "images", "=", "[", "]", "\n", "assert", "(", "config", ".", "channels", "==", "1", "or", "config", ".", "channels", "==", "3", ")", "\n", "mode", "=", "'RGB'", "if", "config", ".", "channels", "==", "3", "else", "'I'", "\n", "print", "(", "'Reading images ...'", ")", "\n", "for", "idx", ",", "image_path", "in", "enumerate", "(", "image_paths", ")", ":", "\n", "                ", "images", ".", "append", "(", "misc", ".", "imread", "(", "image_path", ",", "mode", "=", "mode", ")", ")", "\n", "", "print", "(", "'Done reading images ... '", ")", "\n", "\n", "images", "=", "np", ".", "stack", "(", "images", ",", "axis", "=", "0", ")", "\n", "\n", "# Process images", "\n", "", "f", "=", "{", "\n", "'resize'", ":", "resize", ",", "\n", "'random_crop'", ":", "random_crop", ",", "\n", "'center_crop'", ":", "center_crop", ",", "\n", "'random_flip'", ":", "random_flip", ",", "\n", "'standardize'", ":", "standardize_images", ",", "\n", "'random_downsample'", ":", "random_downsample", ",", "\n", "}", "\n", "proc_funcs", "=", "config", ".", "preprocess_train", "if", "is_training", "else", "config", ".", "preprocess_test", "\n", "\n", "for", "name", ",", "args", "in", "proc_funcs", ":", "\n", "        ", "images", "=", "f", "[", "name", "]", "(", "images", ",", "*", "args", ")", "\n", "", "if", "len", "(", "images", ".", "shape", ")", "==", "3", ":", "\n", "        ", "images", "=", "images", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.get_updated_learning_rate": [[466, 484], ["config.learning_rate_schedule.items", "ValueError", "math.floor", "math.cos", "float"], "function", ["None"], ["", "def", "get_updated_learning_rate", "(", "global_step", ",", "config", ")", ":", "\n", "    ", "if", "config", ".", "learning_rate_strategy", "==", "'step'", ":", "\n", "        ", "max_step", "=", "-", "1", "\n", "learning_rate", "=", "0.0", "\n", "for", "step", ",", "lr", "in", "config", ".", "learning_rate_schedule", ".", "items", "(", ")", ":", "\n", "            ", "if", "global_step", ">=", "step", "and", "step", ">", "max_step", ":", "\n", "                ", "learning_rate", "=", "lr", "\n", "max_step", "=", "step", "\n", "", "", "if", "max_step", "==", "-", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'cannot find learning rate for step %d'", "%", "global_step", ")", "\n", "", "", "elif", "config", ".", "learning_rate_strategy", "==", "'cosine'", ":", "\n", "        ", "initial", "=", "config", ".", "learning_rate_schedule", "[", "'initial'", "]", "\n", "interval", "=", "config", ".", "learning_rate_schedule", "[", "'interval'", "]", "\n", "end_step", "=", "config", ".", "learning_rate_schedule", "[", "'end_step'", "]", "\n", "step", "=", "math", ".", "floor", "(", "float", "(", "global_step", ")", "/", "interval", ")", "*", "interval", "\n", "assert", "step", "<=", "end_step", "\n", "learning_rate", "=", "initial", "*", "0.5", "*", "(", "math", ".", "cos", "(", "math", ".", "pi", "*", "step", "/", "end_step", ")", "+", "1", ")", "\n", "", "return", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.display_info": [[485, 493], ["sys.stdout.write", "watch_list.items", "sys.stdout.write", "type", "sys.stdout.write", "type", "sys.stdout.write"], "function", ["None"], ["", "def", "display_info", "(", "epoch", ",", "step", ",", "duration", ",", "watch_list", ")", ":", "\n", "    ", "sys", ".", "stdout", ".", "write", "(", "'[%d][%d] time: %2.2f'", "%", "(", "epoch", "+", "1", ",", "step", "+", "1", ",", "duration", ")", ")", "\n", "for", "item", "in", "watch_list", ".", "items", "(", ")", ":", "\n", "        ", "if", "type", "(", "item", "[", "1", "]", ")", "in", "[", "np", ".", "float32", ",", "np", ".", "float64", "]", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'   %s: %2.3f'", "%", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ")", ")", "\n", "", "elif", "type", "(", "item", "[", "1", "]", ")", "in", "[", "np", ".", "int32", ",", "np", ".", "int64", ",", "np", ".", "bool", "]", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'   %s: %d'", "%", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ")", ")", "\n", "", "", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.get_pairwise_score_label": [[494, 504], ["numpy.triu_indices", "len"], "function", ["None"], ["", "def", "get_pairwise_score_label", "(", "score_mat", ",", "label", ")", ":", "\n", "    ", "n", "=", "label", ".", "size", "\n", "assert", "score_mat", ".", "shape", "[", "0", "]", "==", "score_mat", ".", "shape", "[", "1", "]", "==", "n", "\n", "triu_indices", "=", "np", ".", "triu_indices", "(", "n", ",", "1", ")", "\n", "if", "len", "(", "label", ".", "shape", ")", "==", "1", ":", "\n", "        ", "label", "=", "label", "[", ":", ",", "None", "]", "\n", "", "label_mat", "=", "label", "==", "label", ".", "T", "\n", "score_vec", "=", "score_mat", "[", "triu_indices", "]", "\n", "label_vec", "=", "label_mat", "[", "triu_indices", "]", "\n", "return", "score_vec", ",", "label_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.split_batches_and_exec": [[505, 520], ["range", "numpy.concatenate", "len", "min", "results.append", "type", "batch_func"], "function", ["None"], ["", "def", "split_batches_and_exec", "(", "input", ",", "batch_size", ",", "batch_func", ")", ":", "\n", "    ", "'''Split the input into batches to execute given functions.\n\n    All results are assumed to be arrays and will be merged along axis 0.\n    '''", "\n", "length", "=", "input", ".", "shape", "[", "0", "]", "if", "type", "(", "input", ")", "==", "np", ".", "ndarray", "else", "len", "(", "input", ")", "\n", "\n", "results", "=", "[", "]", "\n", "for", "start_idx", "in", "range", "(", "0", ",", "length", ",", "batch_size", ")", ":", "\n", "        ", "end_idx", "=", "min", "(", "length", ",", "start_idx", "+", "batch_size", ")", "\n", "results", ".", "append", "(", "batch_func", "(", "input", "[", "start_idx", ":", "end_idx", "]", ")", ")", "\n", "\n", "", "result", "=", "np", ".", "concatenate", "(", "results", ",", "axis", "=", "0", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.None.utils.test_roc": [[521, 532], ["numpy.reshape", "numpy.eye", "facepy.evaluation.ROC", "facepy.metric.euclidean", "score_mat.flatten", "np.eye.flatten"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.evaluation.ROC", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.metric.euclidean"], ["", "def", "test_roc", "(", "features", ",", "labels", ",", "FARs", ")", ":", "\n", "    ", "n", ",", "d", "=", "features", ".", "shape", "\n", "assert", "n", "%", "2", "==", "0", "\n", "features", "=", "np", ".", "reshape", "(", "features", ",", "[", "-", "1", ",", "2", ",", "d", "]", ")", "\n", "feat1", ",", "feat2", "=", "features", "[", ":", ",", "0", ",", ":", "]", ",", "features", "[", ":", ",", "1", ",", ":", "]", "\n", "score_mat", "=", "-", "facepy", ".", "metric", ".", "euclidean", "(", "feat1", ",", "feat2", ")", "\n", "label_mat", "=", "np", ".", "eye", "(", "n", "//", "2", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "TARs", ",", "FARs", ",", "thresholds", "=", "facepy", ".", "evaluation", ".", "ROC", "(", "score_mat", ".", "flatten", "(", ")", ",", "label_mat", ".", "flatten", "(", ")", ",", "FARs", "=", "FARs", ")", "\n", "\n", "return", "TARs", ",", "FARs", ",", "thresholds", "\n", "", ""]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.linalg.normalize": [[29, 35], ["numpy.linalg.norm", "len"], "function", ["None"], ["def", "normalize", "(", "x", ",", "ord", "=", "None", ",", "axis", "=", "None", ",", "epsilon", "=", "10e-12", ")", ":", "\n", "\t", "if", "axis", "is", "None", ":", "\n", "\t\t", "axis", "=", "len", "(", "x", ".", "shape", ")", "-", "1", "\n", "", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "x", ",", "ord", "=", "None", ",", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", "\n", "x", "=", "x", "/", "(", "norm", "+", "epsilon", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.linalg.rc_indices": [[36, 45], ["numpy.meshgrid", "numpy.arange", "numpy.arange", "numpy.stack"], "function", ["None"], ["", "def", "rc_indices", "(", "x", ",", "stack", "=", "True", ")", ":", "\n", "\t", "r", ",", "c", "=", "x", ".", "shape", "\n", "# rows = np.repeat(np.arange(r)[:,None], c, axis=1)", "\n", "# cols = np.repeat(np.arange(c)[None,:], r, axis=0)", "\n", "rows", ",", "cols", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "r", ")", ",", "np", ".", "arange", "(", "c", ")", ",", "indexing", "=", "'ij'", ")", "\n", "if", "stack", ":", "\n", "\t\t", "return", "np", ".", "stack", "(", "[", "rows", ",", "cols", "]", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "\t\t", "return", "rows", ",", "cols", "", "", "", ""]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.io.load_data": [[15, 21], ["numpy.array", "open", "f.readlines", "re.split", "line.strip"], "function", ["None"], ["def", "load_data", "(", "filename", ",", "delimiter", "=", "r'[ ,\\t]+'", ")", ":", "\n", "\t", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "lines", "=", "[", "re", ".", "split", "(", "delimiter", ",", "line", ".", "strip", "(", ")", ")", "for", "line", "in", "lines", "]", "\n", "\n", "return", "np", ".", "array", "(", "lines", ",", "dtype", "=", "np", ".", "object", ")", "", "", ""]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Template.__init__": [[55, 66], ["numpy.array().reshape", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "template_id", "=", "None", ",", "label", "=", "None", ",", "indices", "=", "None", ",", "dataset", "=", "None", ",", "features", "=", "None", ",", "images", "=", "None", ")", ":", "\n", "        ", "self", ".", "id", "=", "template_id", "\n", "self", ".", "label", "=", "label", "\n", "self", ".", "indices", "=", "indices", "\n", "self", ".", "_dataset", "=", "dataset", "# binded dataset", "\n", "self", ".", "_features", "=", "features", "# static data to replace replace binded", "\n", "self", ".", "_images", "=", "images", "# static image to replace binded", "\n", "\n", "if", "self", ".", "indices", "is", "not", "None", ":", "\n", "            ", "self", ".", "indices", "=", "np", ".", "array", "(", "self", ".", "indices", ")", ".", "reshape", "(", "[", "-", "1", "]", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Template.bindDataset": [[67, 70], ["None"], "methods", ["None"], ["", "def", "bindDataset", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "_dataset", "=", "dataset", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Template.features": [[71, 79], ["dataset.select"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.select"], ["", "@", "property", "\n", "def", "features", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_features", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_features", "\n", "", "elif", "self", ".", "_dataset", "is", "not", "None", ":", "\n", "            ", "return", "select", "(", "self", ".", "_dataset", ".", "features", ",", "self", ".", "indices", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Template.set_features": [[80, 83], ["None"], "methods", ["None"], ["", "", "@", "features", ".", "setter", "\n", "def", "set_features", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_features", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Template.images": [[84, 92], ["dataset.select"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.select"], ["", "@", "property", "\n", "def", "images", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_images", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_images", "\n", "", "elif", "self", ".", "_dataset", "is", "not", "None", ":", "\n", "            ", "return", "select", "(", "self", ".", "_dataset", ".", "images", ",", "self", ".", "indices", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Template.set_images": [[93, 96], ["None"], "methods", ["None"], ["", "", "@", "images", ".", "setter", "\n", "def", "set_images", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_images", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Dataset.__init__": [[98, 113], ["dataset.copy_array", "dataset.copy_array", "dataset.copy_array", "dataset.copy_array", "dataset.copy_array", "dataset.Dataset.init_from_path"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.copy_array", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.copy_array", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.copy_array", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.copy_array", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.copy_array", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Dataset.init_from_path"], ["    ", "def", "__init__", "(", "self", ",", "init_path", "=", "None", ",", "images", "=", "None", ",", "labels", "=", "None", ",", "\n", "bboxes", "=", "None", ",", "landmarks", "=", "None", ",", "features", "=", "None", ",", "\n", "folder_depth", "=", "None", ")", ":", "\n", "        ", "self", ".", "images", "=", "copy_array", "(", "images", ")", "\n", "self", ".", "labels", "=", "copy_array", "(", "labels", ")", "\n", "self", ".", "bboxes", "=", "copy_array", "(", "bboxes", ")", "\n", "self", ".", "landmarks", "=", "copy_array", "(", "landmarks", ")", "\n", "self", ".", "features", "=", "copy_array", "(", "features", ")", "\n", "self", ".", "folder_depth", "=", "folder_depth", "\n", "\n", "if", "init_path", ":", "\n", "            ", "self", ".", "init_from_path", "(", "init_path", ")", "\n", "\n", "", "self", ".", "image_dict", "=", "None", "\n", "self", ".", "template_dict", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Dataset.bind_templates": [[115, 122], ["template.bindDataset"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Template.bindDataset"], ["", "def", "bind_templates", "(", "self", ",", "templates", ",", "initialization", "=", "True", ")", ":", "\n", "        ", "if", "initialization", ":", "\n", "            ", "self", ".", "template_dict", "=", "{", "}", "\n", "", "for", "template", "in", "templates", ":", "\n", "            ", "template", ".", "bindDataset", "(", "self", ")", "\n", "self", ".", "template_dict", "[", "template", ".", "id", "]", "=", "template", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Dataset.get_templates": [[123, 128], ["templates.append"], "methods", ["None"], ["", "def", "get_templates", "(", "self", ",", "id_list", ")", ":", "\n", "        ", "templates", "=", "[", "]", "\n", "for", "template_id", "in", "id_list", ":", "\n", "            ", "templates", ".", "append", "(", "self", ".", "template_dict", "[", "template_id", "]", ")", "\n", "", "return", "templates", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Dataset.get_template_pairs": [[129, 136], ["template_pairs.append"], "methods", ["None"], ["", "def", "get_template_pairs", "(", "self", ",", "pair_list", ")", ":", "\n", "        ", "template_pairs", "=", "[", "]", "\n", "for", "pair", "in", "pair_list", ":", "\n", "            ", "template1", "=", "self", ".", "template_dict", "[", "pair", "[", "0", "]", "]", "\n", "template2", "=", "self", ".", "template_dict", "[", "pair", "[", "1", "]", "]", "\n", "template_pairs", ".", "append", "(", "(", "template1", ",", "template2", ")", ")", "\n", "", "return", "template_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Dataset.build_image_dict": [[137, 144], ["enumerate", "type", "str.join", "re.split"], "methods", ["None"], ["", "def", "build_image_dict", "(", "self", ")", ":", "\n", "        ", "assert", "type", "(", "self", ".", "images", "[", "0", "]", ")", "==", "str", "\n", "self", ".", "image_dict", "=", "{", "}", "\n", "for", "i", ",", "image", "in", "enumerate", "(", "self", ".", "images", ")", ":", "\n", "            ", "if", "self", ".", "folder_depth", "is", "not", "None", ":", "\n", "                ", "image", "=", "str", ".", "join", "(", "'/'", ",", "re", ".", "split", "(", "r'/+'", ",", "image", ")", "[", "-", "self", ".", "folder_depth", ":", "]", ")", "\n", "", "self", ".", "image_dict", "[", "image", "]", "=", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Dataset.find_images": [[146, 156], ["dataset.Dataset.build_image_dict", "indices.append", "str.join", "re.split"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Dataset.build_image_dict"], ["", "", "def", "find_images", "(", "self", ",", "images", ")", ":", "\n", "        ", "indices", "=", "[", "]", "\n", "if", "self", ".", "image_dict", "is", "None", ":", "\n", "            ", "self", ".", "build_image_dict", "(", ")", "\n", "", "for", "image", "in", "images", ":", "\n", "            ", "if", "self", ".", "folder_depth", "is", "not", "None", ":", "\n", "                ", "image", "=", "str", ".", "join", "(", "'/'", ",", "re", ".", "split", "(", "r'/+'", ",", "image", ")", "[", "-", "self", ".", "folder_depth", ":", "]", ")", "\n", "", "assert", "image", "in", "self", ".", "image_dict", "\n", "indices", ".", "append", "(", "self", ".", "image_dict", "[", "image", "]", ")", "\n", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Dataset.subset": [[158, 162], ["dataset.Dataset", "dataset.select", "dataset.select", "dataset.select", "dataset.select", "dataset.select"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.select", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.select", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.select", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.select", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.select"], ["", "def", "subset", "(", "self", ",", "indices", ")", ":", "\n", "        ", "return", "Dataset", "(", "images", "=", "select", "(", "self", ".", "images", ",", "indices", ")", ",", "labels", "=", "select", "(", "self", ".", "labels", ",", "indices", ")", ",", "\n", "bboxes", "=", "select", "(", "self", ".", "bboxes", ",", "indices", ")", ",", "landmarks", "=", "select", "(", "self", ".", "landmarks", ",", "indices", ")", ",", "\n", "features", "=", "select", "(", "self", ".", "features", ",", "indices", ")", ",", "folder_depth", "=", "self", ".", "folder_depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Dataset.init_from_path": [[164, 171], ["os.path.splitext", "ValueError", "open", "numpy.array", "line.strip", "f.readlines"], "methods", ["None"], ["", "def", "init_from_path", "(", "self", ",", "path", ")", ":", "\n", "        ", "_", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "path", ")", "\n", "if", "ext", "==", "'.txt'", ":", "\n", "            ", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "images", "=", "np", ".", "array", "(", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "f", ".", "readlines", "(", ")", "]", ",", "dtype", "=", "np", ".", "object", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unkown path type: %s'", "%", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Dataset.import_bboxes": [[172, 179], ["io.load_data", "numpy.ndarray", "float", "dataset.Dataset.find_images", "data[].astype"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.io.load_data", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Dataset.find_images"], ["", "", "def", "import_bboxes", "(", "self", ",", "file", ")", ":", "\n", "        ", "data", "=", "io", ".", "load_data", "(", "file", ")", "\n", "assert", "data", ".", "shape", "[", "1", "]", "==", "5", "\n", "self", ".", "bboxes", "=", "np", ".", "ndarray", "(", "(", "self", ".", "images", ".", "shape", "[", "0", "]", ",", "4", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "bboxes", "[", "...", "]", "=", "float", "(", "'nan'", ")", "\n", "indices", "=", "self", ".", "find_images", "(", "data", "[", ":", ",", "0", "]", ")", "\n", "self", ".", "bboxes", "[", "indices", "]", "=", "data", "[", ":", ",", "1", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Dataset.import_landmarks": [[180, 186], ["io.load_data", "numpy.ndarray", "float", "dataset.Dataset.find_images", "data[].astype"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.io.load_data", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Dataset.find_images"], ["", "def", "import_landmarks", "(", "self", ",", "file", ",", "dtype", "=", "float", ")", ":", "\n", "        ", "data", "=", "io", ".", "load_data", "(", "file", ")", "\n", "self", ".", "landmarks", "=", "np", ".", "ndarray", "(", "(", "self", ".", "images", ".", "shape", "[", "0", "]", ",", "data", ".", "shape", "[", "1", "]", "-", "1", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "landmarks", "[", "...", "]", "=", "float", "(", "'nan'", ")", "\n", "indices", "=", "self", ".", "find_images", "(", "data", "[", ":", ",", "0", "]", ")", "\n", "self", ".", "landmarks", "[", "indices", "]", "=", "data", "[", ":", ",", "1", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Dataset.import_features": [[187, 193], ["io.load_data", "numpy.ndarray", "float", "dataset.Dataset.find_images", "features.astype"], "methods", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.io.load_data", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.Dataset.find_images"], ["", "def", "import_features", "(", "self", ",", "file", ",", "features", ")", ":", "\n", "        ", "data", "=", "io", ".", "load_data", "(", "file", ")", "\n", "self", ".", "features", "=", "np", ".", "ndarray", "(", "(", "self", ".", "images", ".", "shape", "[", "0", "]", ",", "features", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "features", "[", "...", "]", "=", "float", "(", "'nan'", ")", "\n", "indices", "=", "self", ".", "find_images", "(", "data", "[", ":", ",", "0", "]", ")", "\n", "self", ".", "features", "[", "indices", "]", "=", "features", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.copy_array": [[32, 46], ["type", "len", "numpy.array", "type", "array.copy", "ValueError", "type"], "function", ["None"], ["def", "copy_array", "(", "array", ")", ":", "\n", "    ", "result_array", "=", "None", "\n", "if", "type", "(", "array", ")", "==", "list", ":", "\n", "        ", "if", "len", "(", "array", ")", ">", "1", ":", "\n", "            ", "result_array", "=", "np", ".", "array", "(", "result_array", ")", "\n", "", "else", ":", "\n", "            ", "result_array", "=", "None", "\n", "", "", "elif", "type", "(", "array", ")", "==", "np", ".", "ndarray", ":", "\n", "        ", "result_array", "=", "array", ".", "copy", "(", ")", "\n", "", "elif", "array", "is", "None", ":", "\n", "        ", "result_array", "=", "None", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid argument type: %s'", "%", "type", "(", "array", ")", ")", "\n", "", "return", "result_array", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.dataset.select": [[47, 53], ["len"], "function", ["None"], ["", "def", "select", "(", "array", ",", "indices", ")", ":", "\n", "    ", "if", "array", "is", "None", "or", "array", ".", "shape", "[", "0", "]", "==", "0", "or", "indices", "is", "None", "or", "len", "(", "indices", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "        ", "return", "array", "[", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.system.warning": [[29, 31], ["print"], "function", ["None"], ["def", "warning", "(", "message", ")", ":", "\n", "\t", "print", "(", "'\\033[93mWARNING:\\033[0m '", "+", "message", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.protocol.comparePairs": [[34, 57], ["multiprocessing.Array", "print", "range", "numpy.array", "len", "enumerate", "len", "multiprocessing.Process", "multiprocessing.Process.start", "proc_list.append", "multiprocessing.Process.join", "len", "metricFunc", "len", "print", "len"], "function", ["None"], ["def", "comparePairs", "(", "template_pairs", ",", "metricFunc", ",", "num_proc", "=", "8", ",", "log_info", "=", "False", ")", ":", "\n", "    ", "proc_list", "=", "[", "]", "\n", "result_array", "=", "multiprocessing", ".", "Array", "(", "'f'", ",", "len", "(", "template_pairs", ")", ")", "\n", "print", "(", "'# of pairs: %d'", "%", "len", "(", "template_pairs", ")", ")", "\n", "def", "proc_job", "(", "pairs", ",", "start_idx", ",", "result_array", ")", ":", "\n", "        ", "for", "i", ",", "pair", "in", "enumerate", "(", "pairs", ")", ":", "\n", "            ", "if", "log_info", "and", "(", "i", "%", "len", "(", "pairs", ")", "//", "10", ")", "==", "0", ":", "\n", "                ", "print", "(", "'Comparing row: %d'", "%", "(", "start_idx", "+", "i", ")", ")", "\n", "", "score", "=", "metricFunc", "(", "pair", "[", "0", "]", ",", "pair", "[", "1", "]", ")", "\n", "result_array", "[", "start_idx", "+", "i", "]", "=", "score", "\n", "\n", "", "", "split_size", "=", "len", "(", "template_pairs", ")", "//", "num_proc", "\n", "for", "i", "in", "range", "(", "num_proc", ")", ":", "\n", "        ", "start_idx", "=", "i", "*", "split_size", "\n", "end_idx", "=", "len", "(", "template_pairs", ")", "if", "i", "==", "num_proc", "-", "1", "else", "(", "i", "+", "1", ")", "*", "split_size", "\n", "p", "=", "multiprocessing", ".", "Process", "(", "target", "=", "proc_job", ",", "args", "=", "(", "template_pairs", "[", "start_idx", ":", "end_idx", "]", ",", "start_idx", ",", "result_array", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "proc_list", ".", "append", "(", "p", ")", "\n", "", "for", "p", "in", "proc_list", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "\n", "", "scores", "=", "np", ".", "array", "(", "result_array", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.protocol.compareSets": [[61, 88], ["len", "len", "print", "multiprocessing.Array", "range", "numpy.array().reshape", "enumerate", "len", "multiprocessing.Process", "multiprocessing.Process.start", "proc_list.append", "multiprocessing.Process.join", "enumerate", "len", "numpy.array", "print", "metricFunc"], "function", ["None"], ["", "def", "compareSets", "(", "template_set1", ",", "template_set2", ",", "metricFunc", ",", "num_proc", "=", "8", ",", "log_info", "=", "False", ")", ":", "\n", "    ", "m", "=", "len", "(", "template_set1", ")", "\n", "n", "=", "len", "(", "template_set2", ")", "\n", "print", "(", "'Set1 size: %d Set2 size: %d'", "%", "(", "m", ",", "n", ")", ")", "\n", "proc_list", "=", "[", "]", "\n", "result_array", "=", "multiprocessing", ".", "Array", "(", "'f'", ",", "m", "*", "n", ")", "\n", "def", "proc_job", "(", "s1", ",", "s2", ",", "start_idx", ",", "n", ",", "result_array", ")", ":", "\n", "        ", "for", "i", ",", "t1", "in", "enumerate", "(", "s1", ")", ":", "\n", "            ", "if", "log_info", ":", "\n", "                ", "print", "(", "'Comparing row: %d'", "%", "(", "start_idx", "+", "i", ")", ")", "\n", "", "for", "j", ",", "t2", "in", "enumerate", "(", "s2", ")", ":", "\n", "                ", "score", "=", "metricFunc", "(", "t1", ",", "t2", ")", "\n", "result_array", "[", "(", "start_idx", "+", "i", ")", "*", "n", "+", "j", "]", "=", "score", "\n", "\n", "", "", "", "split_size", "=", "len", "(", "template_set1", ")", "//", "num_proc", "\n", "for", "i", "in", "range", "(", "num_proc", ")", ":", "\n", "        ", "start_idx", "=", "i", "*", "split_size", "\n", "end_idx", "=", "len", "(", "template_set1", ")", "if", "i", "==", "num_proc", "-", "1", "else", "(", "i", "+", "1", ")", "*", "split_size", "\n", "p", "=", "multiprocessing", ".", "Process", "(", "target", "=", "proc_job", ",", "\n", "args", "=", "(", "template_set1", "[", "start_idx", ":", "end_idx", "]", ",", "template_set2", ",", "start_idx", ",", "n", ",", "result_array", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "proc_list", ".", "append", "(", "p", ")", "\n", "", "for", "p", "in", "proc_list", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "\n", "", "scores", "=", "np", ".", "array", "(", "result_array", ")", ".", "reshape", "(", "(", "m", ",", "n", ")", ")", "\n", "return", "scores", "\n", "", ""]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.plot.score_distribution": [[33, 44], ["matplotlib.hist", "matplotlib.hist", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.legend", "matplotlib.show", "numpy.logical_not"], "function", ["None"], ["def", "score_distribution", "(", "score_vec", ",", "label_vec", ",", "bins", "=", "100", ")", ":", "\n", "    ", "score_pos", "=", "score_vec", "[", "label_vec", "]", "\n", "score_neg", "=", "score_vec", "[", "np", ".", "logical_not", "(", "label_vec", ")", "]", "\n", "h1", "=", "plt", ".", "hist", "(", "score_pos", ",", "normed", "=", "True", ",", "alpha", "=", "0.7", ",", "edgecolor", "=", "'black'", ",", "bins", "=", "bins", ")", "\n", "h2", "=", "plt", ".", "hist", "(", "score_neg", ",", "normed", "=", "True", ",", "alpha", "=", "0.7", ",", "edgecolor", "=", "'black'", ",", "bins", "=", "bins", ")", "\n", "# plt.legend([h1, h2], ['genuine', 'impostor'])", "\n", "plt", ".", "ylabel", "(", "'frequency'", ")", "\n", "plt", ".", "xlabel", "(", "'similarity'", ")", "\n", "plt", ".", "legend", "(", "[", "'genuine'", ",", "'impostor'", "]", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.plot.show_image": [[45, 54], ["matplotlib.cla", "matplotlib.imshow", "matplotlib.axis", "tuple", "matplotlib.gcf().set_size_inches", "matplotlib.gca().set_position", "matplotlib.gcf", "matplotlib.gca"], "function", ["None"], ["", "def", "show_image", "(", "img", ",", "width", "=", "4.0", ")", ":", "\n", "    ", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "h", ",", "w", "=", "tuple", "(", "img", ".", "shape", "[", "0", ":", "2", "]", ")", "\n", "plt", ".", "gcf", "(", ")", ".", "set_size_inches", "(", "[", "width", ",", "1.0", "*", "width", "*", "h", "/", "w", "]", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_position", "(", "[", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.plot.show_face": [[57, 90], ["plot.show_image", "matplotlib.draw", "type", "matplotlib.imread", "numpy.array", "bboxes.reshape.reshape", "range", "numpy.array", "range", "tuple", "matplotlib.gca().add_patch", "matplotlib.plot", "matplotlib.Rectangle", "landmarks[].reshape().transpose", "landmarks[].reshape", "matplotlib.gca", "landmarks[].reshape"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.plot.show_image"], ["", "def", "show_face", "(", "img", ",", "bboxes", "=", "None", ",", "landmarks", "=", "None", ",", "reorder_landmark", "=", "False", ",", "width", "=", "4.0", ")", ":", "\n", "    ", "'''\n        bboxes: [[x, y, w, h], ...]\n        landmarks: see reorder_landmark\n        reorder_landmark: default order is [x1 y1 x2 y2 ...], use reorder for [x1 x2 ... y1 y2 ...]\n    '''", "\n", "if", "type", "(", "img", ")", "==", "str", ":", "\n", "        ", "img", "=", "plt", ".", "imread", "(", "img", ")", "\n", "\n", "", "show_image", "(", "img", ",", "width", ")", "\n", "\n", "if", "bboxes", "is", "not", "None", ":", "\n", "        ", "bboxes", "=", "np", ".", "array", "(", "bboxes", ")", "\n", "assert", "bboxes", ".", "ndim", "==", "1", "or", "bboxes", ".", "ndim", "==", "2", "\n", "bboxes", "=", "bboxes", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "x", ",", "y", ",", "w", ",", "h", "=", "tuple", "(", "bboxes", "[", "i", ",", ":", "]", ")", "\n", "plt", ".", "gca", "(", ")", ".", "add_patch", "(", "patches", ".", "Rectangle", "(", "(", "x", ",", "y", ")", ",", "w", ",", "h", ",", "fill", "=", "False", ",", "\n", "edgecolor", "=", "'r'", ",", "linewidth", "=", "2", ")", ")", "\n", "\n", "", "", "if", "landmarks", "is", "not", "None", ":", "\n", "        ", "landmarks", "=", "np", ".", "array", "(", "landmarks", ")", "\n", "assert", "landmarks", ".", "ndim", "==", "1", "or", "landmarks", ".", "ndim", "==", "2", "\n", "if", "landmarks", ".", "ndim", "==", "1", ":", "\n", "            ", "landmarks", "=", "landmarks", "[", "None", ",", ":", "]", "\n", "", "for", "i", "in", "range", "(", "landmarks", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "reorder_landmark", ":", "\n", "                ", "landmark", "=", "landmarks", "[", "i", ",", ":", "]", ".", "reshape", "(", "[", "2", ",", "-", "1", "]", ")", ".", "transpose", "(", ")", "\n", "", "else", ":", "\n", "                ", "landmark", "=", "landmarks", "[", "i", ",", ":", "]", ".", "reshape", "(", "[", "-", "1", ",", "2", "]", ")", "\n", "", "plt", ".", "plot", "(", "landmark", "[", ":", ",", "0", "]", ",", "landmark", "[", ":", ",", "1", "]", ",", "'ro'", ")", "\n", "\n", "", "", "plt", ".", "draw", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.plot.show_face_list": [[92, 124], ["f.readlines.sort", "matplotlib.ion", "open", "f.readlines", "line.strip().split", "plot.show_face", "raw_input", "line.strip", "map", "input", "map", "ValueError"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.plot.show_face"], ["", "def", "show_face_list", "(", "list_file", ",", "delimiter", "=", "' '", ",", "annotation", "=", "None", ",", "reorder_landmark", "=", "False", ",", "width", "=", "4.0", ")", ":", "\n", "    ", "'''\n        reorder_landmark: default order is [x1 y1 x2 y2 ...], use reorder for [x1 x2 ... y1 y2 ...]\n    '''", "\n", "with", "open", "(", "list_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "lines", ".", "sort", "(", ")", "\n", "plt", ".", "ion", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "splits", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "delimiter", ")", "\n", "img", "=", "splits", "[", "0", "]", "\n", "bbox", "=", "None", "\n", "landmark", "=", "None", "\n", "if", "annotation", "is", "None", ":", "\n", "            ", "pass", "\n", "", "elif", "annotation", "==", "'bbox'", ":", "\n", "            ", "bbox", "=", "map", "(", "float", ",", "splits", "[", "1", ":", "]", ")", "\n", "", "elif", "annotation", "==", "'landmark'", ":", "\n", "            ", "landmark", "=", "map", "(", "float", ",", "splits", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unvalid annotation type: %s, it should be either \\\n                \"bbox\" or \"landmark\"'", ")", "\n", "\n", "", "show_face", "(", "img", ",", "bbox", ",", "landmark", ",", "reorder_landmark", ",", "width", ")", "\n", "\n", "try", ":", "\n", "            ", "s", "=", "raw_input", "(", "\"Input 'q' to stop:\"", ")", "# wait for input from the user", "\n", "", "except", ":", "\n", "            ", "s", "=", "input", "(", "\"Input 'q' to stop:\"", ")", "# wait for input from the user", "\n", "", "if", "s", "==", "'q'", ":", "\n", "            ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.plot.show_embedding": [[126, 174], ["numpy.zeros", "range", "plot.show_image", "numpy.min", "int", "int", "scipy.imresize", "numpy.max", "print", "numpy.ceil", "numpy.ceil", "type", "scipy.imread"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.plot.show_image"], ["", "", "", "def", "show_embedding", "(", "features", ",", "images", ",", "full_size", "=", "45000", ",", "img_size", "=", "500", ")", ":", "\n", "    ", "'''\n        Visualize the embedding using images.\n        args:\n            features: N x 2 array\n            images: a list of N images or an N x h x w x 3 array\n            full_size: the size of the generated visualization image.\n            img_size: the size of the images in the visualization.\n        return:\n            image: a image of full_size.\n    '''", "\n", "\n", "# load embedding", "\n", "features", "=", "features", "-", "np", ".", "min", "(", "features", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "features", "=", "features", "/", "(", "1e-8", "+", "np", ".", "max", "(", "features", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "\n", "n", "=", "features", ".", "shape", "[", "0", "]", "\n", "\n", "S", "=", "full_size", "# size of full embedding image", "\n", "image_full", "=", "np", ".", "zeros", "(", "[", "S", ",", "S", ",", "3", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "s", "=", "img_size", "# size of every single image", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "\n", "        ", "if", "i", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "'%d/%d...'", "%", "(", "i", ",", "n", ")", ")", "\n", "\n", "# location", "\n", "", "a", "=", "int", "(", "np", ".", "ceil", "(", "features", "[", "i", ",", "0", "]", "*", "(", "S", "-", "s", ")", ")", ")", "\n", "b", "=", "int", "(", "np", ".", "ceil", "(", "features", "[", "i", ",", "1", "]", "*", "(", "S", "-", "s", ")", ")", ")", "\n", "a", "=", "a", "-", "(", "a", "%", "s", ")", "\n", "b", "=", "b", "-", "(", "b", "%", "s", ")", "\n", "\n", "if", "not", "image_full", "[", "a", ",", "b", ",", "0", "]", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "type", "(", "images", "[", "i", "]", ")", "is", "str", ":", "\n", "            ", "img", "=", "misc", ".", "imread", "(", "images", "[", "i", "]", ",", "mode", "=", "'RGB'", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "images", "[", "i", "]", "\n", "\n", "", "img", "=", "misc", ".", "imresize", "(", "img", ",", "[", "s", ",", "s", "]", ")", "\n", "\n", "image_full", "[", "a", ":", "a", "+", "s", ",", "b", ":", "b", "+", "s", ",", ":", "]", "=", "img", ";", "\n", "\n", "\n", "", "show_image", "(", "image_full", ")", "\n", "\n", "return", "image_full", "", "", ""]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.metric.avgMerge": [[28, 30], ["score_matrix.mean().mean", "score_matrix.mean"], "function", ["None"], ["def", "avgMerge", "(", "score_matrix", ")", ":", "\n", "    ", "return", "score_matrix", ".", "mean", "(", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.metric.maxMerge": [[31, 33], ["score_matrix.max().max", "score_matrix.max"], "function", ["None"], ["", "def", "maxMerge", "(", "score_matrix", ")", ":", "\n", "    ", "return", "score_matrix", ".", "max", "(", ")", ".", "max", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.metric.minMerge": [[34, 36], ["score_matrix.min().min", "score_matrix.min"], "function", ["None"], ["", "def", "minMerge", "(", "score_matrix", ")", ":", "\n", "    ", "return", "score_matrix", ".", "min", "(", ")", ".", "min", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.metric.euclidean": [[38, 45], ["x2.transpose.transpose", "numpy.sum", "numpy.sum", "numpy.square", "numpy.square", "numpy.dot"], "function", ["None"], ["", "def", "euclidean", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "assert", "x1", ".", "shape", "[", "1", "]", "==", "x2", ".", "shape", "[", "1", "]", "\n", "x2", "=", "x2", ".", "transpose", "(", ")", "\n", "x1_norm", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "x1", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "x2_norm", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "x2", ")", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "dist", "=", "x1_norm", "+", "x2_norm", "-", "2", "*", "np", ".", "dot", "(", "x1", ",", "x2", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.metric.cosineSimilarity": [[47, 57], ["x2.transpose.transpose", "numpy.sqrt", "numpy.sqrt", "numpy.dot", "numpy.sum", "numpy.sum", "numpy.square", "numpy.square"], "function", ["None"], ["", "def", "cosineSimilarity", "(", "x1", ",", "x2", ")", ":", "\n", "#assert x1.shape[1]==x2.shape[1]", "\n", "    ", "epsilon", "=", "1e-10", "\n", "x2", "=", "x2", ".", "transpose", "(", ")", "\n", "x1_norm", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "x1", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "x2_norm", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "x2", ")", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "\n", "x1", "=", "x1", "/", "(", "x1_norm", "+", "epsilon", ")", "\n", "x2", "=", "x2", "/", "(", "x2_norm", "+", "epsilon", ")", "\n", "dist", "=", "np", ".", "dot", "(", "x1", ",", "x2", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.metric.euclidean_pair": [[59, 63], ["numpy.sum", "numpy.square"], "function", ["None"], ["", "def", "euclidean_pair", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "assert", "x1", ".", "shape", "==", "x2", ".", "shape", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "x1", "-", "x2", ")", ",", "axis", "=", "1", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.metric.cosine_pair": [[65, 74], ["numpy.sqrt", "numpy.sqrt", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.square", "numpy.square"], "function", ["None"], ["", "def", "cosine_pair", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "assert", "x1", ".", "shape", "==", "x2", ".", "shape", "\n", "epsilon", "=", "1e-10", "\n", "x1_norm", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "x1", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "x2_norm", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "x2", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "x1", "=", "x1", "/", "(", "x1_norm", "+", "epsilon", ")", "\n", "x2", "=", "x2", "/", "(", "x2_norm", "+", "epsilon", ")", "\n", "dist", "=", "np", ".", "sum", "(", "x1", "*", "x2", ",", "axis", "=", "1", ")", "\n", "return", "dist", "\n", "", ""]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.learning.PCA.__init__": [[30, 35], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "mean", "=", "None", "\n", "self", ".", "eig_val", "=", "None", "\n", "self", ".", "eig_vec", "=", "None", "\n", "self", ".", "dims", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.learning.PCA.fit": [[36, 41], ["numpy.mean", "numpy.cov", "numpy.linalg.eig"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "x", ",", "dims", "=", "None", ")", ":", "\n", "\t\t", "self", ".", "mean", "=", "np", ".", "mean", "(", "x", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "cov", "=", "np", ".", "cov", "(", "x", ".", "T", ")", "\n", "self", ".", "eig_val", ",", "self", ".", "eig_vec", "=", "np", ".", "linalg", ".", "eig", "(", "cov", ")", "\n", "self", ".", "dims", "=", "dims", "if", "dims", "else", "x", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.learning.PCA.transform": [[42, 49], ["numpy.std"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "x", ",", "whiten", "=", "False", ")", ":", "\n", "\t\t", "x", "=", "(", "x", "-", "self", ".", "mean", ")", "*", "eig_vec", "[", ":", ",", ":", "dims", "]", "\n", "if", "whiten", ":", "\n", "\t\t\t", "epsilon", "=", "10e-8", "\n", "std", "=", "np", ".", "std", "(", "x", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "x", "=", "x", "/", "(", "std", "+", "epsilon", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.learning.PCA.save": [[50, 56], ["h5py.File", "f.create_dataset", "f.create_dataset", "f.create_dataset", "f.create_dataset"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "\t\t", "with", "h5py", ".", "File", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t\t", "f", ".", "create_dataset", "(", "'mean'", ",", "data", "=", "self", ".", "mean", ")", "\n", "f", ".", "create_dataset", "(", "'eig_val'", ",", "data", "=", "self", ".", "eig_val", ")", "\n", "f", ".", "create_dataset", "(", "'eig_vec'", ",", "data", "=", "self", ".", "eig_vec", ")", "\n", "f", ".", "create_dataset", "(", "'dims'", ",", "data", "=", "self", ".", "dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.learning.PCA.load": [[57, 63], ["h5py.File", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "\t\t", "with", "h5py", ".", "File", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "self", ".", "mean", "=", "np", ".", "array", "(", "f", "[", "'mean'", "]", ")", "\n", "self", ".", "eig_val", "=", "np", ".", "array", "(", "f", "[", "'eig_val'", "]", ")", "\n", "self", ".", "eig_vec", "=", "np", ".", "array", "(", "f", "[", "'eig_vec'", "]", ")", "\n", "self", ".", "dims", "=", "np", ".", "array", "(", "f", "[", "'dims'", "]", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.evaluation_deb.find_thresholds_by_FAR": [[31, 62], ["len", "len", "numpy.sort", "numpy.unique", "numpy.insert", "numpy.insert", "numpy.array", "print", "numpy.array", "np.array.append"], "function", ["None"], ["def", "find_thresholds_by_FAR", "(", "score_vec", ",", "label_vec", ",", "FARs", "=", "None", ",", "epsilon", "=", "10e-8", ")", ":", "\n", "    ", "assert", "len", "(", "score_vec", ".", "shape", ")", "==", "1", "\n", "assert", "score_vec", ".", "shape", "==", "label_vec", ".", "shape", "\n", "assert", "label_vec", ".", "dtype", "==", "np", ".", "bool", "\n", "score_neg", "=", "score_vec", "[", "~", "label_vec", "]", "\n", "score_neg", "=", "np", ".", "sort", "(", "score_neg", ")", "[", ":", ":", "-", "1", "]", "# score from high to low", "\n", "num_neg", "=", "len", "(", "score_neg", ")", "\n", "\n", "assert", "num_neg", ">=", "1", "\n", "\n", "if", "FARs", "is", "None", ":", "\n", "        ", "epsilon", "=", "10e-5", "\n", "thresholds", "=", "np", ".", "unique", "(", "score_neg", ")", "\n", "thresholds", "=", "np", ".", "insert", "(", "thresholds", ",", "0", ",", "thresholds", "[", "0", "]", "+", "epsilon", ")", "\n", "thresholds", "=", "np", ".", "insert", "(", "thresholds", ",", "thresholds", ".", "size", ",", "thresholds", "[", "-", "1", "]", "-", "epsilon", ")", "\n", "", "else", ":", "\n", "        ", "FARs", "=", "np", ".", "array", "(", "FARs", ")", "\n", "num_false_alarms", "=", "(", "num_neg", "*", "FARs", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "print", "(", "num_false_alarms", ")", "\n", "\n", "thresholds", "=", "[", "]", "\n", "for", "num_false_alarm", "in", "num_false_alarms", ":", "\n", "            ", "if", "num_false_alarm", "==", "0", ":", "\n", "                ", "threshold", "=", "score_neg", "[", "0", "]", "+", "epsilon", "\n", "", "else", ":", "\n", "                ", "threshold", "=", "score_neg", "[", "num_false_alarm", "-", "1", "]", "\n", "", "thresholds", ".", "append", "(", "threshold", ")", "\n", "", "thresholds", "=", "np", ".", "array", "(", "thresholds", ")", "\n", "\n", "", "return", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.evaluation_deb.ROC": [[65, 102], ["numpy.arange", "len", "len", "numpy.zeros", "numpy.zeros", "enumerate", "len", "evaluation_deb.find_thresholds_by_FAR", "len", "numpy.size", "system.warning", "len", "numpy.mean", "numpy.mean", "false_accept_indices.append", "false_reject_indices.append", "numpy.size"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.evaluation.find_thresholds_by_FAR", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.system.warning"], ["", "def", "ROC", "(", "score_vec", ",", "label_vec", ",", "thresholds", "=", "None", ",", "FARs", "=", "None", ",", "get_false_indices", "=", "False", ")", ":", "\n", "    ", "assert", "len", "(", "score_vec", ".", "shape", ")", "==", "1", "\n", "assert", "score_vec", ".", "shape", "==", "label_vec", ".", "shape", "\n", "assert", "label_vec", ".", "dtype", "==", "np", ".", "bool", "\n", "if", "thresholds", "is", "None", ":", "\n", "        ", "thresholds", "=", "find_thresholds_by_FAR", "(", "score_vec", ",", "label_vec", ",", "FARs", "=", "FARs", ")", "\n", "\n", "", "assert", "len", "(", "thresholds", ".", "shape", ")", "==", "1", "\n", "if", "np", ".", "size", "(", "thresholds", ")", ">", "10000", ":", "\n", "        ", "warning", "(", "'number of thresholds (%d) very large, computation may take a long time!'", "%", "np", ".", "size", "(", "thresholds", ")", ")", "\n", "\n", "", "score_pos", "=", "score_vec", "[", "label_vec", "]", "\n", "score_neg", "=", "score_vec", "[", "~", "label_vec", "]", "\n", "index_vec", "=", "np", ".", "arange", "(", "len", "(", "score_vec", ")", ")", "\n", "index_pos", "=", "index_vec", "[", "label_vec", "]", "\n", "index_neg", "=", "index_vec", "[", "~", "label_vec", "]", "\n", "num_pos", "=", "len", "(", "score_pos", ")", "\n", "num_neg", "=", "len", "(", "score_neg", ")", "\n", "\n", "# FARs would be check again", "\n", "TARs", "=", "np", ".", "zeros", "(", "thresholds", ".", "shape", "[", "0", "]", ")", "\n", "FARs", "=", "np", ".", "zeros", "(", "thresholds", ".", "shape", "[", "0", "]", ")", "\n", "false_accept_indices", "=", "[", "]", "\n", "false_reject_indices", "=", "[", "]", "\n", "for", "i", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "        ", "correct_pos", "=", "score_pos", ">=", "threshold", "\n", "correct_neg", "=", "score_neg", "<", "threshold", "\n", "TARs", "[", "i", "]", "=", "np", ".", "mean", "(", "correct_pos", ")", "\n", "FARs", "[", "i", "]", "=", "np", ".", "mean", "(", "~", "correct_neg", ")", "\n", "if", "get_false_indices", ":", "\n", "            ", "false_accept_indices", ".", "append", "(", "index_pos", "[", "~", "correct_pos", "]", ")", "\n", "false_reject_indices", ".", "append", "(", "index_neg", "[", "~", "correct_neg", "]", ")", "\n", "\n", "", "", "if", "get_false_indices", ":", "\n", "        ", "return", "TARs", ",", "FARs", ",", "thresholds", ",", "false_accept_indices", ",", "false_reject_indices", "\n", "", "else", ":", "\n", "        ", "return", "TARs", ",", "FARs", ",", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.evaluation_deb.DIR_FAR": [[103, 166], ["numpy.all", "label_mat.astype().any", "print", "numpy.max", "numpy.zeros", "numpy.argsort", "numpy.ndarray", "range", "numpy.zeros", "numpy.zeros", "enumerate", "evaluation_deb.find_thresholds_by_FAR", "enumerate", "DIRs.flatten.flatten", "label_mat.astype().sum", "label_mat.astype", "len", "numpy.min", "len", "len", "len", "sorted_label_mat_m[].any", "numpy.logical_not", "numpy.logical_not", "label_mat.astype"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.evaluation.find_thresholds_by_FAR"], ["", "", "def", "DIR_FAR", "(", "score_mat", ",", "label_mat", ",", "ranks", "=", "[", "1", "]", ",", "FARs", "=", "[", "1.0", "]", ",", "get_false_indices", "=", "False", ")", ":", "\n", "    ", "''' Closed/Open-set Identification. \n        A general case of Cummulative Match Characteristic (CMC) \n        where thresholding is allowed for open-set identification.\n    args:\n        score_mat:            a P x G matrix, P is number of probes, G is size of gallery\n        label_mat:            a P x G matrix, bool\n        ranks:                a list of integers\n        FARs:                 false alarm rates, if 1.0, closed-set identification (CMC)\n        get_false_indices:    not implemented yet\n    return:\n        DIRs:                 an F x R matrix, F is the number of FARs, R is the number of ranks, \n                              flatten into a vector if F=1 or R=1.\n        FARs:                 an vector of length = F.\n        thredholds:           an vector of length = F.\n    '''", "\n", "assert", "score_mat", ".", "shape", "==", "label_mat", ".", "shape", "\n", "assert", "np", ".", "all", "(", "label_mat", ".", "astype", "(", "np", ".", "float32", ")", ".", "sum", "(", "axis", "=", "1", ")", "<=", "1", ")", "\n", "# Split the matrix for match probes and non-match probes", "\n", "# subfix _m: match, _nm: non-match", "\n", "# For closed set, we only use the match probes", "\n", "match_indices", "=", "label_mat", ".", "astype", "(", "np", ".", "bool", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "score_mat_m", "=", "score_mat", "[", "match_indices", ",", ":", "]", "\n", "label_mat_m", "=", "label_mat", "[", "match_indices", ",", ":", "]", "\n", "score_mat_nm", "=", "score_mat", "[", "np", ".", "logical_not", "(", "match_indices", ")", ",", ":", "]", "\n", "label_mat_nm", "=", "label_mat", "[", "np", ".", "logical_not", "(", "match_indices", ")", ",", ":", "]", "\n", "\n", "print", "(", "'match mate: %d, non match mate: %d'", "%", "(", "score_mat_m", ".", "shape", "[", "0", "]", ",", "score_mat_nm", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "# Find the thresholds for different FARs", "\n", "max_score_nm", "=", "np", ".", "max", "(", "score_mat_nm", ",", "axis", "=", "1", ")", "\n", "label_temp", "=", "np", ".", "zeros", "(", "max_score_nm", ".", "shape", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "if", "FARs", "[", "0", "]", ">=", "1.0", "and", "len", "(", "FARs", ")", "==", "1", ":", "\n", "# closed-set where there is no non-mate probes, can not find threshold by FAR", "\n", "        ", "thresholds", "=", "np", ".", "min", "(", "score_mat", ")", "-", "1e-10", "\n", "", "else", ":", "\n", "# when there is non-mate probes, find thresholds by FARs", "\n", "        ", "thresholds", "=", "find_thresholds_by_FAR", "(", "max_score_nm", ",", "label_temp", ",", "FARs", "=", "FARs", ")", "\n", "\n", "# Sort the labels row by row according to scores", "\n", "", "sort_idx_mat_m", "=", "np", ".", "argsort", "(", "score_mat_m", ",", "axis", "=", "1", ")", "\n", "sorted_label_mat_m", "=", "np", ".", "ndarray", "(", "label_mat_m", ".", "shape", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "for", "row", "in", "range", "(", "label_mat_m", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "sort_idx", "=", "(", "sort_idx_mat_m", "[", "row", ",", ":", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "sorted_label_mat_m", "[", "row", ",", ":", "]", "=", "label_mat_m", "[", "row", ",", "sort_idx", "]", "\n", "\n", "# Calculate DIRs for different FARs and ranks", "\n", "", "gt_score_m", "=", "score_mat_m", "[", "label_mat_m", "]", "\n", "assert", "gt_score_m", ".", "size", "==", "score_mat_m", ".", "shape", "[", "0", "]", "\n", "\n", "DIRs", "=", "np", ".", "zeros", "(", "[", "len", "(", "FARs", ")", ",", "len", "(", "ranks", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "FARs", "=", "np", ".", "zeros", "(", "[", "len", "(", "FARs", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "        ", "for", "j", ",", "rank", "in", "enumerate", "(", "ranks", ")", ":", "\n", "            ", "score_rank", "=", "gt_score_m", ">=", "threshold", "\n", "retrieval_rank", "=", "sorted_label_mat_m", "[", ":", ",", "0", ":", "rank", "]", ".", "any", "(", "axis", "=", "1", ")", "\n", "DIRs", "[", "i", ",", "j", "]", "=", "(", "score_rank", "&", "retrieval_rank", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "mean", "(", ")", "\n", "", "FARs", "[", "i", "]", "=", "(", "max_score_nm", ">=", "threshold", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "mean", "(", ")", "\n", "\n", "", "if", "DIRs", ".", "shape", "[", "0", "]", "==", "1", "or", "DIRs", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "        ", "DIRs", "=", "DIRs", ".", "flatten", "(", ")", "\n", "\n", "", "return", "DIRs", ",", "FARs", ",", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.evaluation_deb.accuracy": [[167, 196], ["numpy.zeros", "enumerate", "numpy.argmax", "numpy.mean", "len", "len", "len", "numpy.size", "system.warning", "numpy.size", "numpy.mean", "numpy.sort", "numpy.size"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.system.warning"], ["", "def", "accuracy", "(", "score_vec", ",", "label_vec", ",", "thresholds", "=", "None", ")", ":", "\n", "    ", "assert", "len", "(", "score_vec", ".", "shape", ")", "==", "1", "\n", "assert", "len", "(", "label_vec", ".", "shape", ")", "==", "1", "\n", "assert", "score_vec", ".", "shape", "==", "label_vec", ".", "shape", "\n", "assert", "label_vec", ".", "dtype", "==", "np", ".", "bool", "\n", "# find thresholds by TAR", "\n", "if", "thresholds", "is", "None", ":", "\n", "        ", "score_pos", "=", "score_vec", "[", "label_vec", "==", "True", "]", "\n", "thresholds", "=", "np", ".", "sort", "(", "score_pos", ")", "[", ":", ":", "1", "]", "\n", "\n", "", "assert", "len", "(", "thresholds", ".", "shape", ")", "==", "1", "\n", "if", "np", ".", "size", "(", "thresholds", ")", ">", "10000", ":", "\n", "        ", "warning", "(", "'number of thresholds (%d) very large, computation may take a long time!'", "%", "np", ".", "size", "(", "thresholds", ")", ")", "\n", "\n", "# Loop Computation", "\n", "", "accuracies", "=", "np", ".", "zeros", "(", "np", ".", "size", "(", "thresholds", ")", ")", "\n", "for", "i", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "        ", "pred_vec", "=", "score_vec", ">=", "threshold", "\n", "accuracies", "[", "i", "]", "=", "np", ".", "mean", "(", "pred_vec", "==", "label_vec", ")", "\n", "\n", "# Matrix Computation, Each column is a threshold", "\n", "# predictions = score_vec[:,None] >= thresholds[None,:]", "\n", "# accuracies = np.mean(predictions==label_vec[:,None], axis=0)", "\n", "\n", "", "argmax", "=", "np", ".", "argmax", "(", "accuracies", ")", "\n", "accuracy", "=", "accuracies", "[", "argmax", "]", "\n", "threshold", "=", "np", ".", "mean", "(", "thresholds", "[", "accuracies", "==", "accuracy", "]", ")", "\n", "\n", "return", "accuracy", ",", "threshold", "\n", "", ""]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.evaluation.find_thresholds_by_FAR": [[32, 61], ["len", "len", "numpy.sort", "numpy.unique", "numpy.insert", "numpy.insert", "numpy.array", "numpy.array", "np.array.append"], "function", ["None"], ["def", "find_thresholds_by_FAR", "(", "score_vec", ",", "label_vec", ",", "FARs", "=", "None", ",", "epsilon", "=", "10e-8", ")", ":", "\n", "    ", "assert", "len", "(", "score_vec", ".", "shape", ")", "==", "1", "\n", "assert", "score_vec", ".", "shape", "==", "label_vec", ".", "shape", "\n", "assert", "label_vec", ".", "dtype", "==", "np", ".", "bool", "\n", "score_neg", "=", "score_vec", "[", "~", "label_vec", "]", "\n", "score_neg", "=", "np", ".", "sort", "(", "score_neg", ")", "[", ":", ":", "-", "1", "]", "# score from high to low", "\n", "num_neg", "=", "len", "(", "score_neg", ")", "\n", "\n", "assert", "num_neg", ">=", "1", "\n", "\n", "if", "FARs", "is", "None", ":", "\n", "        ", "epsilon", "=", "10e-5", "\n", "thresholds", "=", "np", ".", "unique", "(", "score_neg", ")", "\n", "thresholds", "=", "np", ".", "insert", "(", "thresholds", ",", "0", ",", "thresholds", "[", "0", "]", "+", "epsilon", ")", "\n", "thresholds", "=", "np", ".", "insert", "(", "thresholds", ",", "thresholds", ".", "size", ",", "thresholds", "[", "-", "1", "]", "-", "epsilon", ")", "\n", "", "else", ":", "\n", "        ", "FARs", "=", "np", ".", "array", "(", "FARs", ")", "\n", "num_false_alarms", "=", "(", "num_neg", "*", "FARs", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "thresholds", "=", "[", "]", "\n", "for", "num_false_alarm", "in", "num_false_alarms", ":", "\n", "            ", "if", "num_false_alarm", "==", "0", ":", "\n", "                ", "threshold", "=", "score_neg", "[", "0", "]", "+", "epsilon", "\n", "", "else", ":", "\n", "                ", "threshold", "=", "score_neg", "[", "num_false_alarm", "-", "1", "]", "\n", "", "thresholds", ".", "append", "(", "threshold", ")", "\n", "", "thresholds", "=", "np", ".", "array", "(", "thresholds", ")", "\n", "\n", "", "return", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.evaluation.ROC": [[64, 95], ["numpy.zeros", "numpy.zeros", "enumerate", "evaluation.find_thresholds_by_FAR", "len", "numpy.size", "system.warning", "numpy.mean", "numpy.mean", "false_accept_indices.append", "false_reject_indices.append", "numpy.size", "numpy.argwhere().flatten", "numpy.argwhere().flatten", "numpy.argwhere", "numpy.argwhere"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.evaluation.find_thresholds_by_FAR", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.system.warning"], ["", "def", "ROC", "(", "score_vec", ",", "label_vec", ",", "thresholds", "=", "None", ",", "FARs", "=", "None", ",", "get_false_indices", "=", "False", ")", ":", "\n", "    ", "''' Compute Receiver operating characteristic (ROC) with a score and label vector.\n    '''", "\n", "assert", "score_vec", ".", "ndim", "==", "1", "\n", "assert", "score_vec", ".", "shape", "==", "label_vec", ".", "shape", "\n", "assert", "label_vec", ".", "dtype", "==", "np", ".", "bool", "\n", "\n", "if", "thresholds", "is", "None", ":", "\n", "        ", "thresholds", "=", "find_thresholds_by_FAR", "(", "score_vec", ",", "label_vec", ",", "FARs", "=", "FARs", ")", "\n", "\n", "", "assert", "len", "(", "thresholds", ".", "shape", ")", "==", "1", "\n", "if", "np", ".", "size", "(", "thresholds", ")", ">", "10000", ":", "\n", "        ", "warning", "(", "'number of thresholds (%d) very large, computation may take a long time!'", "%", "np", ".", "size", "(", "thresholds", ")", ")", "\n", "\n", "# FARs would be check again", "\n", "", "TARs", "=", "np", ".", "zeros", "(", "thresholds", ".", "shape", "[", "0", "]", ")", "\n", "FARs", "=", "np", ".", "zeros", "(", "thresholds", ".", "shape", "[", "0", "]", ")", "\n", "false_accept_indices", "=", "[", "]", "\n", "false_reject_indices", "=", "[", "]", "\n", "for", "i", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "        ", "accept", "=", "score_vec", ">=", "threshold", "\n", "TARs", "[", "i", "]", "=", "np", ".", "mean", "(", "accept", "[", "label_vec", "]", ")", "\n", "FARs", "[", "i", "]", "=", "np", ".", "mean", "(", "accept", "[", "~", "label_vec", "]", ")", "\n", "if", "get_false_indices", ":", "\n", "            ", "false_accept_indices", ".", "append", "(", "np", ".", "argwhere", "(", "accept", "&", "(", "~", "label_vec", ")", ")", ".", "flatten", "(", ")", ")", "\n", "false_reject_indices", ".", "append", "(", "np", ".", "argwhere", "(", "(", "~", "accept", ")", "&", "label_vec", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "", "", "if", "get_false_indices", ":", "\n", "        ", "return", "TARs", ",", "FARs", ",", "thresholds", ",", "false_accept_indices", ",", "false_reject_indices", "\n", "", "else", ":", "\n", "        ", "return", "TARs", ",", "FARs", ",", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.evaluation.ROC_by_mat": [[96, 137], ["numpy.triu_indices", "score_mat.flatten", "label_mat.flatten", "evaluation.ROC", "evaluation.ROC", "numpy.meshgrid", "numpy.stack", "range", "numpy.arange", "numpy.arange", "rc.reshape.reshape", "len"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.evaluation.ROC", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.evaluation.ROC"], ["", "", "def", "ROC_by_mat", "(", "score_mat", ",", "label_mat", ",", "thresholds", "=", "None", ",", "FARs", "=", "None", ",", "get_false_indices", "=", "False", ",", "triu_k", "=", "None", ")", ":", "\n", "    ", "''' Compute ROC using a pairwise score matrix and a corresponding label matrix.\n        A wapper of ROC function.\n    '''", "\n", "assert", "score_mat", ".", "ndim", "==", "2", "\n", "assert", "score_mat", ".", "shape", "==", "label_mat", ".", "shape", "\n", "assert", "label_mat", ".", "dtype", "==", "np", ".", "bool", "\n", "\n", "# Convert into vectors", "\n", "m", ",", "n", "=", "score_mat", ".", "shape", "\n", "if", "triu_k", "is", "not", "None", ":", "\n", "        ", "assert", "m", "==", "n", ",", "\"If using triu for ROC, the score matrix must be a sqaure matrix!\"", "\n", "triu_indices", "=", "np", ".", "triu_indices", "(", "m", ",", "triu_k", ")", "\n", "score_vec", "=", "score_mat", "[", "triu_indices", "]", "\n", "label_vec", "=", "label_mat", "[", "triu_indices", "]", "\n", "", "else", ":", "\n", "        ", "score_vec", "=", "score_mat", ".", "flatten", "(", ")", "\n", "label_vec", "=", "label_mat", ".", "flatten", "(", ")", "\n", "\n", "# Compute ROC", "\n", "", "if", "get_false_indices", ":", "\n", "        ", "TARs", ",", "FARs", ",", "thresholds", ",", "false_accept_indices", ",", "false_reject_indices", "=", "ROC", "(", "score_vec", ",", "label_vec", ",", "thresholds", ",", "FARs", ",", "True", ")", "\n", "", "else", ":", "\n", "        ", "TARs", ",", "FARs", ",", "thresholds", "=", "ROC", "(", "score_vec", ",", "label_vec", ",", "thresholds", ",", "FARs", ",", "False", ")", "\n", "\n", "# Convert false accept/reject indices into [row, col] indices", "\n", "", "if", "get_false_indices", ":", "\n", "        ", "rows", ",", "cols", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "m", ")", ",", "np", ".", "arange", "(", "n", ")", ",", "indexing", "=", "'ij'", ")", "\n", "rc", "=", "np", ".", "stack", "(", "[", "rows", ",", "cols", "]", ",", "axis", "=", "2", ")", "\n", "if", "triu_k", "is", "not", "None", ":", "\n", "            ", "rc", "=", "rc", "[", "triu_indices", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "rc", "=", "rc", ".", "reshape", "(", "[", "-", "1", ",", "2", "]", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "FARs", ")", ")", ":", "\n", "            ", "false_accept_indices", "[", "i", "]", "=", "rc", "[", "false_accept_indices", "[", "i", "]", "]", "\n", "false_reject_indices", "[", "i", "]", "=", "rc", "[", "false_reject_indices", "[", "i", "]", "]", "\n", "", "return", "TARs", ",", "FARs", ",", "thresholds", ",", "false_accept_indices", ",", "false_reject_indices", "\n", "", "else", ":", "\n", "        ", "return", "TARs", ",", "FARs", ",", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.evaluation.DIR_FAR": [[141, 206], ["numpy.all", "label_mat.astype().any", "print", "numpy.max", "numpy.zeros", "numpy.argsort", "numpy.ndarray", "range", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.any", "evaluation.find_thresholds_by_FAR", "enumerate", "DIRs.flatten.flatten", "label_mat.astype().sum", "label_mat.astype", "len", "len", "len", "len", "sorted_label_mat_m[].any", "numpy.logical_not", "numpy.logical_not", "numpy.min", "label_mat.astype"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.evaluation.find_thresholds_by_FAR"], ["", "", "def", "DIR_FAR", "(", "score_mat", ",", "label_mat", ",", "ranks", "=", "[", "1", "]", ",", "FARs", "=", "[", "1.0", "]", ",", "get_false_indices", "=", "False", ")", ":", "\n", "    ", "''' Closed/Open-set Identification. \n        A general case of Cummulative Match Characteristic (CMC) \n        where thresholding is allowed for open-set identification.\n    args:\n        score_mat:            a P x G matrix, P is number of probes, G is size of gallery\n        label_mat:            a P x G matrix, bool\n        ranks:                a list of integers\n        FARs:                 false alarm rates, if 1.0, closed-set identification (CMC)\n        get_false_indices:    not implemented yet\n    return:\n        DIRs:                 an F x R matrix, F is the number of FARs, R is the number of ranks, \n                              flatten into a vector if F=1 or R=1.\n        FARs:                 an vector of length = F.\n        thredholds:           an vector of length = F.\n    '''", "\n", "assert", "score_mat", ".", "shape", "==", "label_mat", ".", "shape", "\n", "assert", "np", ".", "all", "(", "label_mat", ".", "astype", "(", "np", ".", "float32", ")", ".", "sum", "(", "axis", "=", "1", ")", "<=", "1", ")", "\n", "# Split the matrix for match probes and non-match probes", "\n", "# subfix _m: match, _nm: non-match", "\n", "# For closed set, we only use the match probes", "\n", "match_indices", "=", "label_mat", ".", "astype", "(", "np", ".", "bool", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "score_mat_m", "=", "score_mat", "[", "match_indices", ",", ":", "]", "\n", "label_mat_m", "=", "label_mat", "[", "match_indices", ",", ":", "]", "\n", "score_mat_nm", "=", "score_mat", "[", "np", ".", "logical_not", "(", "match_indices", ")", ",", ":", "]", "\n", "label_mat_nm", "=", "label_mat", "[", "np", ".", "logical_not", "(", "match_indices", ")", ",", ":", "]", "\n", "\n", "print", "(", "'mate probes: %d, non mate probes: %d'", "%", "(", "score_mat_m", ".", "shape", "[", "0", "]", ",", "score_mat_nm", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "# Find the thresholds for different FARs", "\n", "max_score_nm", "=", "np", ".", "max", "(", "score_mat_nm", ",", "axis", "=", "1", ")", "\n", "label_temp", "=", "np", ".", "zeros", "(", "max_score_nm", ".", "shape", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "if", "len", "(", "FARs", ")", "==", "1", "and", "FARs", "[", "0", "]", ">=", "1.0", ":", "\n", "# If only testing closed-set identification, use the minimum score as threshold", "\n", "# in case there is no non-mate probes", "\n", "        ", "thresholds", "=", "[", "np", ".", "min", "(", "score_mat", ")", "-", "1e-10", "]", "\n", "", "else", ":", "\n", "# If there is open-set identification, find the thresholds by FARs.", "\n", "        ", "assert", "np", ".", "any", "(", "~", "match_indices", ")", ",", "\"For open-set identification (FAR<1.0), there should be at least one non-mate probe!\"", "\n", "thresholds", "=", "find_thresholds_by_FAR", "(", "max_score_nm", ",", "label_temp", ",", "FARs", "=", "FARs", ")", "\n", "\n", "# Sort the labels row by row according to scores", "\n", "", "sort_idx_mat_m", "=", "np", ".", "argsort", "(", "score_mat_m", ",", "axis", "=", "1", ")", "\n", "sorted_label_mat_m", "=", "np", ".", "ndarray", "(", "label_mat_m", ".", "shape", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "for", "row", "in", "range", "(", "label_mat_m", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "sort_idx", "=", "(", "sort_idx_mat_m", "[", "row", ",", ":", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "sorted_label_mat_m", "[", "row", ",", ":", "]", "=", "label_mat_m", "[", "row", ",", "sort_idx", "]", "\n", "\n", "# Calculate DIRs for different FARs and ranks", "\n", "", "gt_score_m", "=", "score_mat_m", "[", "label_mat_m", "]", "\n", "assert", "gt_score_m", ".", "size", "==", "score_mat_m", ".", "shape", "[", "0", "]", "\n", "\n", "DIRs", "=", "np", ".", "zeros", "(", "[", "len", "(", "FARs", ")", ",", "len", "(", "ranks", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "FARs", "=", "np", ".", "zeros", "(", "[", "len", "(", "FARs", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "        ", "for", "j", ",", "rank", "in", "enumerate", "(", "ranks", ")", ":", "\n", "            ", "score_rank", "=", "gt_score_m", ">=", "threshold", "\n", "retrieval_rank", "=", "sorted_label_mat_m", "[", ":", ",", "0", ":", "rank", "]", ".", "any", "(", "axis", "=", "1", ")", "\n", "DIRs", "[", "i", ",", "j", "]", "=", "(", "score_rank", "&", "retrieval_rank", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "mean", "(", ")", "\n", "", "FARs", "[", "i", "]", "=", "(", "max_score_nm", ">=", "threshold", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "mean", "(", ")", "\n", "\n", "", "if", "DIRs", ".", "shape", "[", "0", "]", "==", "1", "or", "DIRs", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "        ", "DIRs", "=", "DIRs", ".", "flatten", "(", ")", "\n", "\n", "", "return", "DIRs", ",", "FARs", ",", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.evaluation.accuracy": [[207, 236], ["numpy.zeros", "enumerate", "numpy.argmax", "numpy.mean", "len", "len", "len", "numpy.size", "system.warning", "numpy.size", "numpy.mean", "numpy.sort", "numpy.size"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.facepy.system.warning"], ["", "def", "accuracy", "(", "score_vec", ",", "label_vec", ",", "thresholds", "=", "None", ")", ":", "\n", "    ", "assert", "len", "(", "score_vec", ".", "shape", ")", "==", "1", "\n", "assert", "len", "(", "label_vec", ".", "shape", ")", "==", "1", "\n", "assert", "score_vec", ".", "shape", "==", "label_vec", ".", "shape", "\n", "assert", "label_vec", ".", "dtype", "==", "np", ".", "bool", "\n", "# find thresholds by TAR", "\n", "if", "thresholds", "is", "None", ":", "\n", "        ", "score_pos", "=", "score_vec", "[", "label_vec", "==", "True", "]", "\n", "thresholds", "=", "np", ".", "sort", "(", "score_pos", ")", "[", ":", ":", "1", "]", "\n", "\n", "", "assert", "len", "(", "thresholds", ".", "shape", ")", "==", "1", "\n", "if", "np", ".", "size", "(", "thresholds", ")", ">", "10000", ":", "\n", "        ", "warning", "(", "'number of thresholds (%d) very large, computation may take a long time!'", "%", "np", ".", "size", "(", "thresholds", ")", ")", "\n", "\n", "# Loop Computation", "\n", "", "accuracies", "=", "np", ".", "zeros", "(", "np", ".", "size", "(", "thresholds", ")", ")", "\n", "for", "i", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "        ", "pred_vec", "=", "score_vec", ">=", "threshold", "\n", "accuracies", "[", "i", "]", "=", "np", ".", "mean", "(", "pred_vec", "==", "label_vec", ")", "\n", "\n", "# Matrix Computation, Each column is a threshold", "\n", "# predictions = score_vec[:,None] >= thresholds[None,:]", "\n", "# accuracies = np.mean(predictions==label_vec[:,None], axis=0)", "\n", "\n", "", "argmax", "=", "np", ".", "argmax", "(", "accuracies", ")", "\n", "accuracy", "=", "accuracies", "[", "argmax", "]", "\n", "threshold", "=", "np", ".", "mean", "(", "thresholds", "[", "accuracies", "==", "accuracy", "]", ")", "\n", "\n", "return", "accuracy", ",", "threshold", "\n", "", ""]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.nets.lemur_net.convolution": [[65, 82], ["tensorflow.conv2d", "tensorflow.dropout", "tensorflow.variable_scope", "int", "tensorflow.split", "tensorflow.concat", "tensorflow.conv2d", "lemur_net.channel_shuffle"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.nets.lemur_net.channel_shuffle"], ["def", "convolution", "(", "net", ",", "num_kernels", ",", "kernel_size", ",", "groups", "=", "1", ",", "shuffle", "=", "False", ",", "\n", "stride", "=", "1", ",", "padding", "=", "'SAME'", ",", "scope", "=", "None", ",", "xargs", "=", "trans_conv_args", ")", ":", "\n", "    ", "assert", "num_kernels", "%", "groups", "==", "0", ",", "'%d %d'", "%", "(", "num_kernels", ",", "groups", ")", "\n", "if", "groups", "==", "1", ":", "\n", "        ", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "num_kernels", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "scope", "=", "scope", ",", "**", "xargs", ")", "\n", "return", "slim", ".", "dropout", "(", "net", ")", "\n", "", "else", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'group_conv'", ")", ":", "\n", "            ", "num_kernels_split", "=", "int", "(", "num_kernels", "/", "groups", ")", "\n", "input_splits", "=", "tf", ".", "split", "(", "net", ",", "groups", ",", "axis", "=", "3", ")", "\n", "output_splits", "=", "[", "slim", ".", "conv2d", "(", "input_split", ",", "num_kernels_split", ",", "\n", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "**", "xargs", ")", "\n", "for", "input_split", "in", "input_splits", "]", "\n", "output", "=", "tf", ".", "concat", "(", "output_splits", ",", "axis", "=", "3", ")", "\n", "if", "shuffle", ":", "\n", "                ", "output", "=", "channel_shuffle", "(", "'shuffle'", ",", "output", ",", "groups", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.nets.lemur_net.channel_shuffle": [[83, 90], ["tensorflow.variable_scope", "x.shape.as_list", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.reshape"], "function", ["None"], ["", "", "", "def", "channel_shuffle", "(", "name", ",", "x", ",", "num_groups", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "        ", "n", ",", "h", ",", "w", ",", "c", "=", "x", ".", "shape", ".", "as_list", "(", ")", "\n", "x_reshaped", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "h", ",", "w", ",", "num_groups", ",", "c", "//", "num_groups", "]", ")", "\n", "x_transposed", "=", "tf", ".", "transpose", "(", "x_reshaped", ",", "[", "0", ",", "1", ",", "2", ",", "4", ",", "3", "]", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "x_transposed", ",", "[", "-", "1", ",", "h", ",", "w", ",", "c", "]", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.nets.lemur_net.parametric_relu": [[91, 101], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.cast", "tensorflow.cast", "tensorflow.logical_not", "tensorflow.constant_initializer"], "function", ["None"], ["", "", "def", "parametric_relu", "(", "x", ")", ":", "\n", "    ", "num_channels", "=", "x", ".", "shape", "[", "-", "1", "]", ".", "value", "\n", "with", "tf", ".", "variable_scope", "(", "'PRELU'", ")", ":", "\n", "        ", "alpha", "=", "tf", ".", "get_variable", "(", "'alpha'", ",", "(", "1", ",", "1", ",", "1", ",", "num_channels", ")", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "=", "x", ">=", "0", "\n", "mask_pos", "=", "tf", ".", "cast", "(", "mask", ",", "tf", ".", "float32", ")", "\n", "mask_neg", "=", "tf", ".", "cast", "(", "tf", ".", "logical_not", "(", "mask", ")", ",", "tf", ".", "float32", ")", "\n", "return", "mask_pos", "*", "x", "+", "mask_neg", "*", "alpha", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.nets.lemur_net.se_module": [[102, 119], ["tensorflow.variable_scope", "tuple", "int", "tensorflow.avg_pool2d", "tensorflow.flatten", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.reshape", "tensorflow.xavier_initializer", "tensorflow.xavier_initializer"], "function", ["None"], ["", "", "def", "se_module", "(", "input_net", ",", "ratio", "=", "16", ",", "reuse", "=", "None", ",", "scope", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'SE'", ",", "[", "input_net", "]", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "h", ",", "w", ",", "c", "=", "tuple", "(", "[", "dim", ".", "value", "for", "dim", "in", "input_net", ".", "shape", "[", "1", ":", "4", "]", "]", ")", "\n", "assert", "c", "%", "ratio", "==", "0", "\n", "hidden_units", "=", "int", "(", "c", "/", "ratio", ")", "\n", "squeeze", "=", "slim", ".", "avg_pool2d", "(", "input_net", ",", "[", "h", ",", "w", "]", ",", "padding", "=", "'VALID'", ")", "\n", "excitation", "=", "slim", ".", "flatten", "(", "squeeze", ")", "\n", "excitation", "=", "slim", ".", "fully_connected", "(", "excitation", ",", "hidden_units", ",", "scope", "=", "'se_fc1'", ",", "\n", "weights_initializer", "=", "slim", ".", "xavier_initializer", "(", ")", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "excitation", "=", "slim", ".", "fully_connected", "(", "excitation", ",", "c", ",", "scope", "=", "'se_fc2'", ",", "\n", "weights_initializer", "=", "slim", ".", "xavier_initializer", "(", ")", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "sigmoid", ")", "\n", "excitation", "=", "tf", ".", "reshape", "(", "excitation", ",", "[", "-", "1", ",", "1", ",", "1", ",", "c", "]", ")", "\n", "output_net", "=", "input_net", "*", "excitation", "\n", "\n", "return", "output_net", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.nets.lemur_net.conv_module": [[126, 143], ["tensorflow.variable_scope", "lemur_net.convolution", "tensorflow.max_pool2d", "range", "lemur_net.convolution", "lemur_net.convolution", "print", "lemur_net.se_module"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.nets.lemur_net.convolution", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.nets.lemur_net.convolution", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.nets.lemur_net.convolution", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.nets.lemur_net.se_module"], ["def", "conv_module", "(", "net", ",", "num_res_layers", ",", "num_kernels", ",", "groups", ",", "reuse", "=", "None", ",", "scope", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'conv'", ",", "[", "net", "]", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "net", "=", "convolution", "(", "net", ",", "num_kernels", ",", "kernel_size", "=", "3", ",", "groups", "=", "groups", ",", "shuffle", "=", "False", ",", "\n", "stride", "=", "1", ",", "padding", "=", "'SAME'", ",", "scope", "=", "'transform'", ",", "xargs", "=", "trans_conv_args", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "'SAME'", ")", "\n", "shortcut", "=", "net", "\n", "for", "i", "in", "range", "(", "num_res_layers", ")", ":", "\n", "# num_kernels_sm = int(num_kernels / 2)", "\n", "            ", "net", "=", "convolution", "(", "net", ",", "num_kernels", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ",", "shuffle", "=", "True", ",", "\n", "stride", "=", "1", ",", "padding", "=", "'SAME'", ",", "scope", "=", "'res_%d_1'", "%", "i", ",", "xargs", "=", "res_conv_args", ")", "\n", "net", "=", "convolution", "(", "net", ",", "num_kernels", ",", "kernel_size", "=", "3", ",", "groups", "=", "groups", ",", "shuffle", "=", "False", ",", "\n", "stride", "=", "1", ",", "padding", "=", "'SAME'", ",", "scope", "=", "'res_%d_2'", "%", "i", ",", "xargs", "=", "res_conv_args", ")", "\n", "print", "(", "'| ---- block_%d'", "%", "i", ")", "\n", "net", "=", "se_module", "(", "net", ")", "\n", "net", "=", "net", "+", "shortcut", "\n", "shortcut", "=", "net", "\n", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.nets.lemur_net.inference": [[144, 187], ["tensorflow.arg_scope", "tensorflow.arg_scope", "tensorflow.l2_regularizer", "tensorflow.variable_scope", "tensorflow.arg_scope", "print", "lemur_net.conv_module", "print", "lemur_net.conv_module", "print", "lemur_net.conv_module", "print", "lemur_net.conv_module", "print", "lemur_net.convolution", "tensorflow.flatten", "tensorflow.device", "tensorflow.summary.histogram"], "function", ["home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.nets.lemur_net.conv_module", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.nets.lemur_net.conv_module", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.nets.lemur_net.conv_module", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.nets.lemur_net.conv_module", "home.repos.pwc.inspect_result.ronny3050_PrimateFaceRecognition.nets.lemur_net.convolution"], ["", "def", "inference", "(", "images", ",", "keep_probability", ",", "phase_train", "=", "True", ",", "bottleneck_layer_size", "=", "512", ",", "\n", "weight_decay", "=", "0.0", ",", "reuse", "=", "None", ",", "model_version", "=", "None", ")", ":", "\n", "    ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "fully_connected", "]", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "weight_decay", ")", ",", "\n", "activation_fn", "=", "activation", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "normalizer_params", "=", "None", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "dropout", "]", ",", "\n", "keep_prob", "=", "keep_probability", ",", "\n", "is_training", "=", "phase_train", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'SphereNet'", ",", "[", "images", "]", ",", "reuse", "=", "reuse", ")", ":", "\n", "                ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "batch_norm", ",", "slim", ".", "dropout", "]", ",", "\n", "is_training", "=", "phase_train", ")", ":", "\n", "                    ", "print", "(", "'SphereNet input shape:'", ",", "[", "dim", ".", "value", "for", "dim", "in", "images", ".", "shape", "]", ")", "\n", "\n", "model_version", "=", "'4'", "if", "model_version", "==", "None", "else", "model_version", "\n", "num_layers", ",", "num_kernels", ",", "groups", "=", "model_params", "[", "model_version", "]", "\n", "\n", "net", "=", "conv_module", "(", "images", ",", "num_layers", "[", "0", "]", ",", "num_kernels", "[", "0", "]", ",", "groups", "[", "0", "]", ",", "scope", "=", "'conv1'", ")", "\n", "print", "(", "'module_1 shape:'", ",", "[", "dim", ".", "value", "for", "dim", "in", "net", ".", "shape", "]", ")", "\n", "\n", "net", "=", "conv_module", "(", "net", ",", "num_layers", "[", "1", "]", ",", "num_kernels", "[", "1", "]", ",", "groups", "[", "1", "]", ",", "scope", "=", "'conv2'", ")", "\n", "print", "(", "'module_2 shape:'", ",", "[", "dim", ".", "value", "for", "dim", "in", "net", ".", "shape", "]", ")", "\n", "\n", "net", "=", "conv_module", "(", "net", ",", "num_layers", "[", "2", "]", ",", "num_kernels", "[", "2", "]", ",", "groups", "[", "2", "]", ",", "scope", "=", "'conv3'", ")", "\n", "print", "(", "'module_3 shape:'", ",", "[", "dim", ".", "value", "for", "dim", "in", "net", ".", "shape", "]", ")", "\n", "\n", "net", "=", "conv_module", "(", "net", ",", "num_layers", "[", "3", "]", ",", "num_kernels", "[", "3", "]", ",", "groups", "[", "3", "]", ",", "scope", "=", "'conv4'", ")", "\n", "print", "(", "'module_4 shape:'", ",", "[", "dim", ".", "value", "for", "dim", "in", "net", ".", "shape", "]", ")", "\n", "\n", "# net = slim.avg_pool2d(net, 7)", "\n", "net", "=", "convolution", "(", "net", ",", "bottleneck_layer_size", ",", "kernel_size", "=", "[", "net", ".", "shape", "[", "1", "]", ",", "net", ".", "shape", "[", "2", "]", "]", ",", "groups", "=", "groups", "[", "4", "]", ",", "shuffle", "=", "False", ",", "\n", "stride", "=", "1", ",", "padding", "=", "'VALID'", ",", "scope", "=", "'bottleneck'", ",", "xargs", "=", "fc_args", ")", "\n", "\n", "#net = slim.dropout(net, keep_probability, is_training = phase_train)", "\n", "net", "=", "slim", ".", "flatten", "(", "net", ")", "\n", "\n", "# net= slim.batch_norm(net, **batch_norm_params_last)", "\n", "\n", "with", "tf", ".", "device", "(", "None", ")", ":", "\n", "                        ", "tf", ".", "summary", ".", "histogram", "(", "'unormed_prelogits'", ",", "net", ")", "\n", "\n", "", "", "", "", "", "return", "net", "\n", "", ""]]}