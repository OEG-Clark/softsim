{"home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.None.base.preprocessing": [[21, 42], ["lib.dataset.BaseVidVRD", "lib.utils.logger.setup_logger", "logging.getLogger", "logging.getLogger.info", "logging.getLogger.info", "lib.dataset.vrdataset.preprocess_data", "os.path.join", "logging.getLogger.info", "logging.getLogger.info", "os.path.join", "os.path.exists", "os.makedirs", "h5py.File", "os.path.join", "lib.utils.logger.get_timestamp"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.logger.setup_logger", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.preprocess_data", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.logger.get_timestamp"], ["def", "preprocessing", "(", "cfg", ",", "args", ",", "data_dir", ")", ":", "\n", "    ", "dataset", "=", "BaseVidVRD", "(", "data_dir", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'videos'", ")", ",", "[", "'train'", ",", "'test'", "]", ")", "\n", "\n", "logger", "=", "setup_logger", "(", "name", "=", "'preprocess'", ",", "save_dir", "=", "'logs'", ",", "distributed_rank", "=", "0", ",", "filename", "=", "f'{get_timestamp()}_preprocess.txt'", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'preprocess'", ")", "\n", "logger", ".", "info", "(", "f'args: {args}'", ")", "\n", "logger", ".", "info", "(", "f'cfg: {cfg}'", ")", "\n", "\n", "feats", ",", "pairs", ",", "pred_label", "=", "vrdataset", ".", "preprocess_data", "(", "cfg", ",", "dataset", ",", "logger", ")", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "'./vidvrd-baseline-output'", ",", "'preprocessed_data'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "logger", ".", "info", "(", "'saving preprocessed data...'", ")", "\n", "with", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'preprocessed_train_dataset.hdf5'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", "[", "'feats'", "]", "=", "feats", "\n", "f", "[", "'pairs'", "]", "=", "pairs", "\n", "f", "[", "'pred_label'", "]", "=", "pred_label", "\n", "\n", "", "logger", ".", "info", "(", "'successfully saved preprocessed data...'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.None.base.training": [[44, 66], ["torch.spawn", "lib.dataset.BaseVidVRD", "os.path.join", "lib.dataset.BaseVidOR", "ValueError", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "training", "(", "cfg", ",", "args", ",", "data_dir", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'vidvrd'", ":", "\n", "        ", "basedata", "=", "BaseVidVRD", "(", "\n", "data_dir", ",", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'videos'", ")", ",", "\n", "[", "'train'", ",", "'test'", "]", "\n", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'vidor'", ":", "\n", "        ", "basedata", "=", "BaseVidOR", "(", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'annotation'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'videos'", ")", ",", "\n", "[", "'train'", ",", "'test'", "]", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"No dataset named {args.dataset}\"", ")", "\n", "\n", "# distributed", "\n", "", "args", ".", "world_size", "=", "args", ".", "ngpus_per_node", "*", "args", ".", "nodes", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "'127.0.0.1'", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "'29500'", "\n", "\n", "mp", ".", "spawn", "(", "train", ",", "nprocs", "=", "args", ".", "ngpus_per_node", ",", "args", "=", "(", "cfg", ",", "args", ",", "basedata", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.None.base.detect": [[68, 114], ["lib.utils.logger.setup_logger", "logging.getLogger", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "lib.modeling.predict.predict", "logging.getLogger.info", "collections.defaultdict", "lib.modeling.predict.predict.items", "logging.getLogger.info", "dict", "tqdm.tqdm", "logging.getLogger.info", "lib.dataset.BaseVidVRD", "video_st_relations[].append", "collections.defaultdict.keys", "lib.modeling.association.greedy_relational_association", "open", "json.dump", "os.path.join", "lib.dataset.BaseVidOR", "ValueError", "os.path.join", "os.path.join", "os.path.join", "get_model_path", "lib.utils.logger.get_timestamp"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.logger.setup_logger", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.predict", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association.greedy_relational_association", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.get_model_path", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.logger.get_timestamp"], ["", "def", "detect", "(", "cfg", ",", "args", ",", "data_dir", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'vidvrd'", ":", "\n", "        ", "basedata", "=", "BaseVidVRD", "(", "\n", "data_dir", ",", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'videos'", ")", ",", "\n", "[", "'train'", ",", "'test'", "]", "\n", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'vidor'", ":", "\n", "        ", "basedata", "=", "BaseVidOR", "(", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'annotation'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'videos'", ")", ",", "\n", "[", "'train'", ",", "'test'", "]", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"No dataset named {args.dataset}\"", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "name", "=", "'detect'", ",", "save_dir", "=", "'logs'", ",", "distributed_rank", "=", "0", ",", "filename", "=", "f'{get_timestamp()}_detect.txt'", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'detect'", ")", "\n", "logger", ".", "info", "(", "f'args: {args}'", ")", "\n", "logger", ".", "info", "(", "f'cfg: {cfg}'", ")", "\n", "\n", "logger", ".", "info", "(", "'predict short term relations'", ")", "\n", "short_term_relations", "=", "predict", "(", "cfg", ",", "basedata", ",", "logger", ")", "\n", "\n", "logger", ".", "info", "(", "'group short term relations by video'", ")", "\n", "video_st_relations", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "st_rel", "in", "short_term_relations", ".", "items", "(", ")", ":", "\n", "        ", "vid", "=", "index", "[", "0", "]", "\n", "video_st_relations", "[", "vid", "]", ".", "append", "(", "(", "index", ",", "st_rel", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "'video-level visual relation detection by greedy relational association'", ")", "\n", "video_relations", "=", "dict", "(", ")", "\n", "for", "vid", "in", "tqdm", "(", "video_st_relations", ".", "keys", "(", ")", ")", ":", "\n", "        ", "video_relations", "[", "vid", "]", "=", "association", ".", "greedy_relational_association", "(", "\n", "basedata", ",", "\n", "video_st_relations", "[", "vid", "]", ",", "\n", "max_traj_num_in_clip", "=", "100", "\n", ")", "\n", "\n", "", "logger", ".", "info", "(", "'saving detection result'", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "get_model_path", "(", ")", ",", "'baseline_relation_prediction.json'", ")", ",", "'w'", ")", "as", "fout", ":", "\n", "        ", "output", "=", "{", "\n", "'version'", ":", "'VERSION 1.0'", ",", "\n", "'results'", ":", "video_relations", "\n", "}", "\n", "json", ".", "dump", "(", "output", ",", "fout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.None.evaluate.evaluate_object": [[10, 15], ["dict", "dataset.get_index", "lib.evaluation.eval_video_object", "dataset.get_object_insts"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_index", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_object_insts"], ["def", "evaluate_object", "(", "dataset", ",", "split", ",", "prediction", ")", ":", "\n", "    ", "groundtruth", "=", "dict", "(", ")", "\n", "for", "vid", "in", "dataset", ".", "get_index", "(", "split", ")", ":", "\n", "        ", "groundtruth", "[", "vid", "]", "=", "dataset", ".", "get_object_insts", "(", "vid", ")", "\n", "", "mean_ap", ",", "ap_class", "=", "eval_video_object", "(", "groundtruth", ",", "prediction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.None.evaluate.evaluate_action": [[17, 22], ["dict", "dataset.get_index", "lib.evaluation.eval_action", "dataset.get_action_insts"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_index", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_action_insts"], ["", "def", "evaluate_action", "(", "dataset", ",", "split", ",", "prediction", ")", ":", "\n", "    ", "groundtruth", "=", "dict", "(", ")", "\n", "for", "vid", "in", "dataset", ".", "get_index", "(", "split", ")", ":", "\n", "        ", "groundtruth", "[", "vid", "]", "=", "dataset", ".", "get_action_insts", "(", "vid", ")", "\n", "", "mean_ap", ",", "ap_class", "=", "eval_action", "(", "groundtruth", ",", "prediction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.None.evaluate.evaluate_relation": [[24, 56], ["dict", "dataset.get_index", "lib.evaluation.eval_visual_relation", "dataset.get_triplets().difference", "dict", "dict", "dataset.get_index", "lib.evaluation.eval_visual_relation", "dataset.get_relation_insts", "print", "print", "dataset.get_triplets", "dataset.get_relation_insts", "dataset.get_triplets", "len", "tuple", "zs_gt_relations.append", "tuple", "zs_prediction[].append"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_index", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_index", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_relation_insts", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_triplets", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_relation_insts", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_triplets"], ["", "def", "evaluate_relation", "(", "dataset", ",", "split", ",", "prediction", ",", "use_old_zeroshot_eval", "=", "False", ")", ":", "\n", "    ", "groundtruth", "=", "dict", "(", ")", "\n", "for", "vid", "in", "dataset", ".", "get_index", "(", "split", ")", ":", "\n", "        ", "groundtruth", "[", "vid", "]", "=", "dataset", ".", "get_relation_insts", "(", "vid", ")", "\n", "", "mean_ap", ",", "rec_at_n", ",", "mprec_at_n", "=", "eval_visual_relation", "(", "groundtruth", ",", "prediction", ")", "\n", "# evaluate in zero-shot setting", "\n", "if", "use_old_zeroshot_eval", ":", "\n", "        ", "print", "(", "'-- zero-shot setting (old)'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'-- zero-shot setting (new)'", ")", "\n", "", "zeroshot_triplets", "=", "dataset", ".", "get_triplets", "(", "split", ")", ".", "difference", "(", "\n", "dataset", ".", "get_triplets", "(", "'train'", ")", ")", "\n", "groundtruth", "=", "dict", "(", ")", "\n", "zs_prediction", "=", "dict", "(", ")", "\n", "for", "vid", "in", "dataset", ".", "get_index", "(", "split", ")", ":", "\n", "        ", "gt_relations", "=", "dataset", ".", "get_relation_insts", "(", "vid", ")", "\n", "zs_gt_relations", "=", "[", "]", "\n", "for", "r", "in", "gt_relations", ":", "\n", "            ", "if", "tuple", "(", "r", "[", "'triplet'", "]", ")", "in", "zeroshot_triplets", ":", "\n", "                ", "zs_gt_relations", ".", "append", "(", "r", ")", "\n", "", "", "if", "len", "(", "zs_gt_relations", ")", ">", "0", ":", "\n", "            ", "groundtruth", "[", "vid", "]", "=", "zs_gt_relations", "\n", "if", "use_old_zeroshot_eval", ":", "\n", "# old zero-shot evaluation doesn't filter out non-zeroshot predictions", "\n", "# in a video, which will result in very low Average Precision ", "\n", "                ", "zs_prediction", "[", "vid", "]", "=", "prediction", "[", "vid", "]", "\n", "", "else", ":", "\n", "                ", "zs_prediction", "[", "vid", "]", "=", "[", "]", "\n", "for", "r", "in", "prediction", "[", "vid", "]", ":", "\n", "                    ", "if", "tuple", "(", "r", "[", "'triplet'", "]", ")", "in", "zeroshot_triplets", ":", "\n", "                        ", "zs_prediction", "[", "vid", "]", ".", "append", "(", "r", ")", "\n", "", "", "", "", "", "mean_ap", ",", "rec_at_n", ",", "mprec_at_n", "=", "eval_visual_relation", "(", "groundtruth", ",", "zs_prediction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.None.visualize.read_video": [[28, 41], ["cv2.VideoCapture", "cv2.VideoCapture.isOpened", "cv2.VideoCapture.release", "cv2.VideoCapture.isOpened", "Exception", "cv2.VideoCapture.read", "video.append"], "function", ["None"], ["def", "read_video", "(", "path", ")", ":", "\n", "    ", "cap", "=", "cv2", ".", "VideoCapture", "(", "path", ",", "cv2", ".", "CAP_FFMPEG", ")", "\n", "if", "not", "cap", ".", "isOpened", "(", ")", ":", "\n", "        ", "raise", "Exception", "(", "'Cannot open {}'", ".", "format", "(", "path", ")", ")", "\n", "", "video", "=", "[", "]", "\n", "while", "cap", ".", "isOpened", "(", ")", ":", "\n", "        ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "if", "ret", ":", "\n", "            ", "video", ".", "append", "(", "frame", ")", "\n", "", "else", ":", "\n", "            ", "break", "\n", "", "", "cap", ".", "release", "(", ")", "\n", "return", "video", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.None.visualize.write_video": [[43, 49], ["cv2.VideoWriter_fourcc", "cv2.VideoWriter", "cv2.VideoWriter.release", "cv2.VideoWriter.write"], "function", ["None"], ["", "def", "write_video", "(", "video", ",", "fps", ",", "size", ",", "path", ")", ":", "\n", "    ", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'mp4v'", ")", "\n", "out", "=", "cv2", ".", "VideoWriter", "(", "path", ",", "cv2", ".", "CAP_FFMPEG", ",", "fourcc", ",", "fps", ",", "size", ")", "\n", "for", "frame", "in", "video", ":", "\n", "        ", "out", ".", "write", "(", "frame", ")", "\n", "", "out", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.None.visualize.visualize": [[51, 126], ["visualize.read_video", "range", "dict", "enumerate", "range", "visualize.write_video", "len", "len", "numpy.zeros", "cv2.resize", "len", "sorted", "int", "int", "cv2.getTextSize", "cv2.getTextSize", "cv2.rectangle", "cv2.rectangle", "cv2.putText", "round", "round", "int", "int", "int", "int", "len", "sorted", "x[].append", "round", "round", "round", "round", "len", "cv2.putText", "cv2.putText"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.None.visualize.read_video", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.None.visualize.write_video", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.rectangle", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.rectangle"], ["", "def", "visualize", "(", "anno", ",", "video_path", ",", "out_path", ")", ":", "\n", "    ", "video", "=", "read_video", "(", "video_path", ")", "\n", "assert", "anno", "[", "'frame_count'", "]", "==", "len", "(", "video", ")", ",", "'{} : anno {} video {}'", ".", "format", "(", "anno", "[", "'video_id'", "]", ",", "anno", "[", "'frame_count'", "]", ",", "len", "(", "video", ")", ")", "\n", "assert", "anno", "[", "'width'", "]", "==", "video", "[", "0", "]", ".", "shape", "[", "1", "]", "and", "anno", "[", "'height'", "]", "==", "video", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "'{} : anno ({}, {}) video {}'", ".", "format", "(", "anno", "[", "'video_id'", "]", ",", "anno", "[", "'height'", "]", ",", "anno", "[", "'width'", "]", ",", "video", "[", "0", "]", ".", "shape", ")", "\n", "# resize video to be 720p", "\n", "ratio", "=", "720.0", "/", "anno", "[", "'height'", "]", "\n", "boundary", "=", "20", "\n", "size", "=", "int", "(", "round", "(", "anno", "[", "'width'", "]", "*", "ratio", ")", ")", "+", "2", "*", "boundary", ",", "int", "(", "round", "(", "anno", "[", "'height'", "]", "*", "ratio", ")", ")", "+", "2", "*", "boundary", "\n", "for", "i", "in", "range", "(", "anno", "[", "'frame_count'", "]", ")", ":", "\n", "        ", "background", "=", "np", ".", "zeros", "(", "(", "size", "[", "1", "]", ",", "size", "[", "0", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "background", "[", "boundary", ":", "size", "[", "1", "]", "-", "boundary", ",", "boundary", ":", "size", "[", "0", "]", "-", "boundary", "]", "=", "cv2", ".", "resize", "(", "video", "[", "i", "]", ",", "(", "size", "[", "0", "]", "-", "2", "*", "boundary", ",", "size", "[", "1", "]", "-", "2", "*", "boundary", ")", ")", "\n", "video", "[", "i", "]", "=", "background", "\n", "# collect subject/objects", "\n", "", "subobj", "=", "dict", "(", ")", "\n", "for", "x", "in", "anno", "[", "'subject/objects'", "]", ":", "\n", "        ", "subobj", "[", "x", "[", "'tid'", "]", "]", "=", "{", "\n", "'id'", ":", "x", "[", "'tid'", "]", "+", "1", ",", "\n", "'name'", ":", "x", "[", "'category'", "]", ",", "\n", "'color'", ":", "_colors", "[", "x", "[", "'tid'", "]", "%", "len", "(", "_colors", ")", "]", "\n", "}", "\n", "# collect related relations in each frame", "\n", "", "for", "i", ",", "f", "in", "enumerate", "(", "anno", "[", "'trajectories'", "]", ")", ":", "\n", "        ", "for", "x", "in", "f", ":", "\n", "            ", "x", "[", "'rels'", "]", "=", "[", "]", "\n", "x", "[", "'timestamp'", "]", "=", "-", "1", "\n", "for", "r", "in", "anno", "[", "'relation_instances'", "]", ":", "\n", "                ", "if", "r", "[", "'subject_tid'", "]", "==", "x", "[", "'tid'", "]", "and", "r", "[", "'begin_fid'", "]", "<=", "i", "<=", "r", "[", "'end_fid'", "]", ":", "\n", "                    ", "x", "[", "'rels'", "]", ".", "append", "(", "{", "\n", "'timestamp'", ":", "r", "[", "'begin_fid'", "]", ",", "\n", "'predicate'", ":", "r", "[", "'predicate'", "]", ",", "\n", "'object_tid'", ":", "r", "[", "'object_tid'", "]", "\n", "}", ")", "\n", "if", "r", "[", "'begin_fid'", "]", ">", "x", "[", "'timestamp'", "]", ":", "\n", "                        ", "x", "[", "'timestamp'", "]", "=", "r", "[", "'begin_fid'", "]", "\n", "# draw frames", "\n", "", "", "", "", "", "max_timestamp", "=", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "anno", "[", "'trajectories'", "]", ")", ")", ":", "\n", "        ", "f", "=", "anno", "[", "'trajectories'", "]", "[", "i", "]", "\n", "for", "x", "in", "sorted", "(", "f", ",", "key", "=", "lambda", "a", ":", "a", "[", "'timestamp'", "]", ")", ":", "\n", "            ", "xmin", "=", "int", "(", "round", "(", "x", "[", "'bbox'", "]", "[", "'xmin'", "]", "*", "ratio", ")", ")", "+", "boundary", "\n", "xmax", "=", "int", "(", "round", "(", "x", "[", "'bbox'", "]", "[", "'xmax'", "]", "*", "ratio", ")", ")", "+", "boundary", "\n", "ymin", "=", "int", "(", "round", "(", "x", "[", "'bbox'", "]", "[", "'ymin'", "]", "*", "ratio", ")", ")", "+", "boundary", "\n", "ymax", "=", "int", "(", "round", "(", "x", "[", "'bbox'", "]", "[", "'ymax'", "]", "*", "ratio", ")", ")", "+", "boundary", "\n", "bbox_thickness", "=", "1", "\n", "sub_name", "=", "'{}.{}'", ".", "format", "(", "x", "[", "'tid'", "]", "+", "1", ",", "subobj", "[", "x", "[", "'tid'", "]", "]", "[", "'name'", "]", ")", "\n", "sub_color", "=", "subobj", "[", "x", "[", "'tid'", "]", "]", "[", "'color'", "]", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "font_scalar", "=", "0.5", "\n", "font_thickness", "=", "1", "\n", "font_size", ",", "font_baseline", "=", "cv2", ".", "getTextSize", "(", "sub_name", ",", "font", ",", "font_scalar", ",", "font_thickness", ")", "\n", "h_font_scalar", "=", "0.8", "\n", "h_font_thickness", "=", "2", "\n", "h_font_size", ",", "h_font_baseline", "=", "cv2", ".", "getTextSize", "(", "sub_name", ",", "font", ",", "h_font_scalar", ",", "h_font_thickness", ")", "\n", "# draw subject", "\n", "cv2", ".", "rectangle", "(", "video", "[", "i", "]", ",", "(", "xmin", ",", "ymin", ")", ",", "(", "xmax", ",", "ymax", ")", ",", "sub_color", "[", ":", ":", "-", "1", "]", ",", "bbox_thickness", ")", "\n", "cv2", ".", "rectangle", "(", "video", "[", "i", "]", ",", "(", "xmin", ",", "ymin", "-", "font_size", "[", "1", "]", "-", "font_baseline", ")", ",", "(", "xmin", "+", "font_size", "[", "0", "]", ",", "ymin", ")", ",", "sub_color", "[", ":", ":", "-", "1", "]", ",", "-", "1", ")", "\n", "cv2", ".", "putText", "(", "video", "[", "i", "]", ",", "sub_name", ",", "(", "xmin", ",", "ymin", "-", "font_baseline", ")", ",", "font", ",", "font_scalar", ",", "(", "0", ",", "0", ",", "0", ")", ",", "font_thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "# draw relations", "\n", "if", "len", "(", "x", "[", "'rels'", "]", ")", ">", "0", ":", "\n", "                ", "rels", "=", "sorted", "(", "x", "[", "'rels'", "]", ",", "key", "=", "lambda", "a", ":", "a", "[", "'timestamp'", "]", ",", "reverse", "=", "True", ")", "\n", "if", "rels", "[", "0", "]", "[", "'timestamp'", "]", ">", "max_timestamp", ":", "\n", "                    ", "max_timestamp", "=", "rels", "[", "0", "]", "[", "'timestamp'", "]", "\n", "", "y", "=", "ymin", "+", "h_font_size", "[", "1", "]", "\n", "for", "r", "in", "rels", ":", "\n", "                    ", "obj_color", "=", "subobj", "[", "r", "[", "'object_tid'", "]", "]", "[", "'color'", "]", "\n", "rel_name", "=", "'{}_{}.{}'", ".", "format", "(", "r", "[", "'predicate'", "]", ",", "r", "[", "'object_tid'", "]", "+", "1", ",", "subobj", "[", "r", "[", "'object_tid'", "]", "]", "[", "'name'", "]", ")", "\n", "if", "r", "[", "'timestamp'", "]", "==", "max_timestamp", ":", "\n", "                        ", "cv2", ".", "putText", "(", "video", "[", "i", "]", ",", "rel_name", ",", "(", "xmin", ",", "y", "+", "font_baseline", ")", ",", "font", ",", "h_font_scalar", ",", "obj_color", "[", ":", ":", "-", "1", "]", ",", "h_font_thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "y", "+=", "h_font_size", "[", "1", "]", "+", "h_font_baseline", "\n", "", "else", ":", "\n", "                        ", "cv2", ".", "putText", "(", "video", "[", "i", "]", ",", "rel_name", ",", "(", "xmin", ",", "y", "+", "font_baseline", ")", ",", "font", ",", "font_scalar", ",", "obj_color", "[", ":", ":", "-", "1", "]", ",", "font_thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "y", "+=", "font_size", "[", "1", "]", "+", "font_baseline", "\n", "\n", "", "", "", "", "", "write_video", "(", "video", ",", "anno", "[", "'fps'", "]", ",", "size", ",", "out_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.serialize.load_checkpoint": [[3, 25], ["model.state_dict", "model.load_state_dict", "collections.OrderedDict", "model.load_state_dict", "checkpoint.items", "model.state_dict().keys", "checkpoint.keys", "checkpoint.items", "ValueError", "model.state_dict"], "function", ["None"], ["def", "load_checkpoint", "(", "model", ",", "checkpoint", ")", ":", "\n", "\t", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "try", ":", "\n", "\t\t", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "", "except", ":", "\n", "\t\t", "new_checkpoint", "=", "OrderedDict", "(", ")", "\n", "\n", "model_keys", "=", "[", "key", "for", "key", "in", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", "]", "\n", "checkpoint_keys", "=", "[", "key", "for", "key", "in", "checkpoint", ".", "keys", "(", ")", "]", "\n", "if", "'module.'", "not", "in", "model_keys", "[", "0", "]", "and", "'module.'", "in", "checkpoint_keys", "[", "0", "]", ":", "\n", "\t\t\t", "for", "key", ",", "value", "in", "checkpoint", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "new_key", "=", "key", "[", "7", ":", "]", "# remove \"module.\"", "\n", "new_checkpoint", "[", "new_key", "]", "=", "value", "\n", "", "", "elif", "'module.'", "in", "model_keys", "[", "0", "]", "and", "'module.'", "not", "in", "checkpoint_keys", "[", "0", "]", ":", "\n", "\t\t\t", "for", "key", ",", "value", "in", "checkpoint", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "new_key", "=", "'module.'", "+", "key", "\n", "new_checkpoint", "[", "new_key", "]", "=", "value", "\n", "", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "'failed to load checkpoint'", ")", "\n", "\n", "", "model", ".", "load_state_dict", "(", "new_checkpoint", ")", "\n", "# return model", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.AverageMeter.__init__": [[4, 6], ["miscellaneous.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.AverageMeter.reset"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.AverageMeter.reset": [[7, 12], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.AverageMeter.update": [[13, 18], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "\t\t", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.calculate_eta_iter": [[20, 23], ["None"], "function", ["None"], ["", "", "def", "calculate_eta_iter", "(", "one_batch_time", ",", "cur_iter", ",", "max_iter", ")", ":", "\n", "\t", "eta_in_iter", "=", "one_batch_time", "*", "(", "max_iter", "-", "cur_iter", "-", "1", ")", "\n", "return", "eta_in_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.calculate_eta_epoch": [[25, 30], ["miscellaneous.calculate_eta_iter"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.calculate_eta_iter"], ["", "def", "calculate_eta_epoch", "(", "one_batch_time", ",", "cur_epoch", ",", "max_epoch", ",", "cur_iter", ",", "max_iter", ")", ":", "\n", "\t", "eta_in_iter", "=", "calculate_eta_iter", "(", "one_batch_time", ",", "cur_iter", ",", "max_iter", ")", "\n", "eta_in_epoch", "=", "(", "one_batch_time", "*", "max_iter", ")", "*", "(", "max_epoch", "-", "cur_epoch", "-", "1", ")", "\n", "eta_seconds", "=", "eta_in_iter", "+", "eta_in_epoch", "\n", "return", "eta_seconds", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize": [[32, 36], ["numpy.atleast_1d", "numpy.linalg.norm", "numpy.expand_dims"], "function", ["None"], ["", "def", "normalize", "(", "x", ",", "axis", "=", "-", "1", ",", "order", "=", "2", ")", ":", "\n", "    ", "l2", "=", "np", ".", "atleast_1d", "(", "np", ".", "linalg", ".", "norm", "(", "x", ",", "order", ",", "axis", ")", ")", "\n", "l2", "[", "l2", "==", "0", "]", "=", "1", "\n", "return", "x", "/", "np", ".", "expand_dims", "(", "l2", ",", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.to_onehot": [[38, 41], ["numpy.eye"], "function", ["None"], ["", "def", "to_onehot", "(", "x", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\" one-hot encodes a tensor \"\"\"", "\n", "return", "np", ".", "eye", "(", "num_classes", ",", "dtype", "=", "'float32'", ")", "[", "x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.to_multi_onehot": [[43, 47], ["numpy.zeros"], "function", ["None"], ["", "def", "to_multi_onehot", "(", "x", ",", "num_classes", ")", ":", "\n", "\t", "one_hot", "=", "np", ".", "zeros", "(", "num_classes", ")", "\n", "one_hot", "[", "x", "]", "=", "1", "\n", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.cat": [[48, 56], ["isinstance", "torch.cat", "len"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.cat"], ["", "def", "cat", "(", "tensors", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Efficient version of torch.cat that avoids a copy if there is only a single element in a list\n    \"\"\"", "\n", "assert", "isinstance", "(", "tensors", ",", "(", "list", ",", "tuple", ")", ")", "\n", "if", "len", "(", "tensors", ")", "==", "1", ":", "\n", "        ", "return", "tensors", "[", "0", "]", "\n", "", "return", "torch", ".", "cat", "(", "tensors", ",", "dim", ")", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.get_world_size": [[13, 19], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.get_world_size"], ["def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.get_rank": [[21, 27], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.is_main_process": [[29, 31], ["comm.get_rank"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.synchronize": [[33, 46], ["torch.get_world_size", "torch.barrier", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to synchronize (barrier) among all processes when\n    using distributed training\n    \"\"\"", "\n", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.all_gather": [[48, 89], ["comm.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.LongTensor().to", "torch.LongTensor().to", "int", "tensor_list.append", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.LongTensor", "torch.LongTensor", "range", "size.item", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.LongTensor", "torch.LongTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.get_world_size", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.all_gather", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.all_gather", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.cat", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.cat", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to"], ["", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "LongTensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "to", "(", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.reduce_dict": [[91, 118], ["comm.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.reduce", "input_dict.keys", "names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.get_world_size", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.get_rank"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "values", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "average", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.logger.setup_logger": [[6, 26], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.exists", "os.makedirs", "os.path.join"], "function", ["None"], ["def", "setup_logger", "(", "name", ",", "save_dir", ",", "distributed_rank", ",", "filename", "=", "\"log.txt\"", ")", ":", "\n", "\t", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "# DEBUG, INFO, ERROR, WARNING", "\n", "# don't log results for the non-master process", "\n", "if", "distributed_rank", ">", "0", ":", "\n", "\t\t", "return", "logger", "\n", "\n", "", "stream_handler", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "stream_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "stream_handler", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "file_handler", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "filename", ")", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.logger.get_timestamp": [[28, 33], ["datetime.datetime.now", "datetime.datetime.timestamp", "datetime.datetime.fromtimestamp().strftime", "datetime.datetime.fromtimestamp"], "function", ["None"], ["", "def", "get_timestamp", "(", ")", ":", "\n", "\t", "now", "=", "datetime", ".", "now", "(", ")", "\n", "timestamp", "=", "datetime", ".", "timestamp", "(", "now", ")", "\n", "st", "=", "datetime", ".", "fromtimestamp", "(", "timestamp", ")", ".", "strftime", "(", "'%Y-%m-%d-%H:%M:%S'", ")", "\n", "return", "st", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.metric_logger.SmoothedValue.__init__": [[13, 18], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ")", ":", "\n", "        ", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "series", "=", "[", "]", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.metric_logger.SmoothedValue.update": [[19, 24], ["metric_logger.SmoothedValue.deque.append", "metric_logger.SmoothedValue.series.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "series", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "1", "\n", "self", ".", "total", "+=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.metric_logger.SmoothedValue.median": [[25, 29], ["torch.tensor", "torch.tensor.median().item", "list", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.metric_logger.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.metric_logger.SmoothedValue.avg": [[30, 34], ["torch.tensor", "torch.tensor.mean().item", "list", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.metric_logger.SmoothedValue.global_avg": [[35, 38], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.metric_logger.MetricLogger.__init__": [[41, 44], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.metric_logger.MetricLogger.update": [[45, 53], ["kwargs.items", "isinstance", "isinstance", "metric_logger.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "if", "v", "!=", "v", ":", "# if value is NaN", "\n", "                ", "return", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.metric_logger.MetricLogger.__getattr__": [[54, 61], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.metric_logger.MetricLogger.__str__": [[62, 69], ["metric_logger.MetricLogger.meters.items", "metric_logger.MetricLogger.delimiter.join", "loss_str.append"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {:.4f} ({:.4f})\"", ".", "format", "(", "name", ",", "meter", ".", "median", ",", "meter", ".", "global_avg", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vrdataset.VRDataset.__init__": [[17, 57], ["dataset.get_index", "collections.defaultdict", "list", "dataset.get_relation_insts", "vrdataset.VRDataset.gt_rel_insts.keys", "dataset.get_anno", "dataset.get_object_id", "dataset.get_predicate_id", "dataset.get_object_id", "segment_video", "segment_video", "vrdataset.VRDataset._get_rel_feature", "vrdataset.VRDataset.gt_rel_insts[].append"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_index", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_relation_insts", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.DatasetV1.get_anno", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_object_id", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_predicate_id", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_object_id", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.segment_video", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.segment_video", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vrdataset.VRDataset._get_rel_feature"], ["\t", "def", "__init__", "(", "self", ",", "cfg", ",", "dataset", ",", "phase", ")", ":", "\n", "\t\t", "self", ".", "num_predicates", "=", "cfg", ".", "PREDICT", ".", "PREDICATE_NUM", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "logit_only", "=", "cfg", ".", "DATASET", ".", "LOGIT_ONLY", "\n", "self", ".", "use_gt_obj_trajs", "=", "cfg", ".", "DATASET", ".", "USE_GT_OBJ_TRAJS", "\n", "\n", "video_indices", "=", "dataset", ".", "get_index", "(", "split", "=", "self", ".", "phase", ")", "\n", "self", ".", "gt_rel_insts", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "vid", "in", "video_indices", ":", "\n", "\t\t\t", "if", "self", ".", "phase", "==", "'test'", ":", "\n", "\t\t\t\t", "anno", "=", "dataset", ".", "get_anno", "(", "vid", ")", "\n", "\n", "", "for", "rel_inst", "in", "dataset", ".", "get_relation_insts", "(", "vid", ",", "no_traj", "=", "True", ")", ":", "\n", "\t\t\t\t", "'''\n\t\t\t\trel_inst = {\n\t\t\t\t\t'triplet': ('dog', 'bite', 'frisbee'),\n\t\t\t\t\t'subject_tid': 0,\n\t\t\t\t\t'object_tid': 1,\n\t\t\t\t\t'duration': (60, 90)\n\t\t\t\t}\n\t\t\t\t'''", "\n", "sub_name", ",", "pred_name", ",", "obj_name", "=", "rel_inst", "[", "'triplet'", "]", "\n", "sub_tid", "=", "rel_inst", "[", "'subject_tid'", "]", ",", "# 1st in current segment", "\n", "obj_tid", "=", "rel_inst", "[", "'object_tid'", "]", ",", "# 3rd in current segment", "\n", "sub_idx", "=", "dataset", ".", "get_object_id", "(", "sub_name", ")", ",", "# 2: car", "\n", "obj_idx", "=", "dataset", ".", "get_object_id", "(", "obj_name", ")", "# 4: bus", "\n", "pred_idx", "=", "dataset", ".", "get_predicate_id", "(", "pred_name", ")", "# 68: faster", "\n", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "\t\t\t\t\t", "segs", "=", "segment_video", "(", "*", "rel_inst", "[", "'duration'", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "segs", "=", "segment_video", "(", "0", ",", "anno", "[", "'frame_count'", "]", ")", "\n", "\n", "", "for", "fstart", ",", "fend", "in", "segs", ":", "\n", "\t\t\t\t\t", "if", "self", ".", "_get_rel_feature", "(", "vid", ",", "fstart", ",", "fend", ",", "dont_return", "=", "True", ",", "verbose", "=", "False", ")", ":", "\n", "\t\t\t\t\t\t", "self", ".", "gt_rel_insts", "[", "(", "vid", ",", "fstart", ",", "fend", ")", "]", ".", "append", "(", "\n", "(", "sub_tid", ",", "obj_tid", ",", "sub_idx", ",", "obj_idx", ",", "pred_idx", ")", "\n", ")", "\n", "", "", "", "", "self", ".", "index", "=", "list", "(", "self", ".", "gt_rel_insts", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vrdataset.VRDataset.__len__": [[58, 60], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vrdataset.VRDataset.__getitem__": [[61, 84], ["vrdataset.VRDataset._get_rel_feature", "vrdataset.VRDataset._get_proposals_rel_feature", "vrdataset.VRDataset._get_proposal_idx", "vrdataset.VRDataset._get_class_logit", "vrdataset.VRDataset._get_num_tracklet_proposals", "vrdataset.VRDataset._feature_preprocess", "lib.dataset.list_pair.PairList", "lib.dataset.list_pair.PairList.add_field", "lib.dataset.list_pair.PairList.add_field", "lib.dataset.list_pair.PairList.add_field", "lib.dataset.list_pair.PairList.add_field", "lib.dataset.list_pair.PairList.add_field", "lib.dataset.list_target.TargetList"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vrdataset.VRDataset._get_rel_feature", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vrdataset.VRDataset._get_proposals_rel_feature", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vrdataset.VRDataset._get_proposal_idx", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vrdataset.VRDataset._get_class_logit", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vrdataset.VRDataset._get_num_tracklet_proposals", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess._feature_preprocess", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.add_field", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.add_field", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.add_field", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.add_field", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.add_field"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "index", "=", "self", ".", "index", "[", "idx", "]", "\n", "\n", "pairs", ",", "feats", ",", "iou", ",", "trackid", "=", "self", ".", "_get_rel_feature", "(", "*", "index", ")", "\n", "feats", ",", "pairs", ",", "pred_labels", "=", "self", ".", "_get_proposals_rel_feature", "(", "*", "index", ",", "pairs", ",", "feats", ",", "iou", ",", "trackid", ")", "\n", "proposal_idx", "=", "self", ".", "_get_proposal_idx", "(", "pairs", ",", "trackid", ")", "\n", "feats", ",", "pairs", ",", "pred_labels", "=", "feats", "[", "proposal_idx", "]", ",", "pairs", "[", "proposal_idx", "]", ",", "pred_labels", "[", "proposal_idx", "]", "\n", "\n", "cls_logits", "=", "self", ".", "_get_class_logit", "(", "*", "index", ")", "\n", "\n", "num_tracks", "=", "self", ".", "_get_num_tracklet_proposals", "(", "trackid", ")", "\n", "\n", "feats", "=", "self", ".", "_feature_preprocess", "(", "feats", ")", "\n", "\n", "pair_list", "=", "PairList", "(", "feats", ")", "\n", "pair_list", ".", "add_field", "(", "'tracklet_pairs'", ",", "pairs", ")", "\n", "pair_list", ".", "add_field", "(", "'track_cls_logits'", ",", "cls_logits", ")", "\n", "pair_list", ".", "add_field", "(", "'num_tracklets'", ",", "num_tracks", ")", "\n", "pair_list", ".", "add_field", "(", "'ious'", ",", "iou", ")", "\n", "pair_list", ".", "add_field", "(", "'track_ids'", ",", "trackid", ")", "\n", "target_list", "=", "TargetList", "(", "pred_labels", ")", "\n", "\n", "return", "pair_list", ",", "target_list", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vrdataset.VRDataset._get_proposals_rel_feature": [[85, 139], ["torch.tensor", "dict", "dict", "torch.stack.update", "list", "torch.stack", "dict", "torch.stack.values", "itertools.product", "range", "enumerate", "enumerate", "torch.where", "torch.where", "len", "pos_idx.append", "lib.utils.miscellaneous.to_multi_onehot", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.update", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.to_multi_onehot"], ["", "def", "_get_proposals_rel_feature", "(", "self", ",", "vid", ",", "fstart", ",", "fend", ",", "pairs", ",", "feats", ",", "iou", ",", "trackid", ",", "iou_thres", "=", "0.5", ")", ":", "\n", "\t\t", "feats", "=", "torch", ".", "tensor", "(", "feats", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "pair_to_find", "=", "dict", "(", "[", "\n", "(", "(", "traj_idx1", ",", "traj_idx2", ")", ",", "find", ")", "for", "find", ",", "(", "traj_idx1", ",", "traj_idx2", ")", "in", "enumerate", "(", "pairs", ")", "# (N+GT)(N+GT-1)", "\n", "]", ")", "\n", "gt_tid_to_idx", "=", "dict", "(", "[", "\n", "(", "tid", ",", "ind", ")", "for", "ind", ",", "tid", "in", "enumerate", "(", "trackid", ")", "if", "tid", ">=", "0", "# GT", "\n", "]", ")", "\n", "'''\n\t\tpair_to_find = {( 0,  1): 0,\n\t\t\t\t        ( 0,  2): 1,\n\t\t\t\t        ( 0,  3): 2,\n\t\t\t\t        ...\n\t\t\t\t        (17, 14): 304,\n\t\t\t\t        (17, 15): 305,\n\t\t\t\t        (17, 16): 306}\n\n\t\tgt_tid_to_idx = {0: 16,\n\t\t\t\t\t     1: 17,\n\t\t\t\t\t     2: 18}\n\t\t'''", "\n", "pos_idx", "=", "[", "]", "\n", "pred_labels", "=", "{", "}", "\n", "for", "sub_tid", ",", "obj_tid", ",", "sub_idx", ",", "obj_idx", ",", "pred_idx", "in", "self", ".", "gt_rel_insts", "[", "(", "vid", ",", "fstart", ",", "fend", ")", "]", ":", "\n", "# 0, 1, 21(dog), 61(play), 30(frisbee) ", "\n", "\t\t\t", "if", "sub_tid", "in", "gt_tid_to_idx", "and", "obj_tid", "in", "gt_tid_to_idx", ":", "# if ground-truth tid & different", "\n", "\t\t\t\t", "iou1", "=", "iou", "[", ":", ",", "gt_tid_to_idx", "[", "sub_tid", "]", "]", "# iou[:,15] : iou of proposals with ground-truth", "\n", "iou2", "=", "iou", "[", ":", ",", "gt_tid_to_idx", "[", "obj_tid", "]", "]", "# iou[:,16]=[0.1, 0.2, 0.6, 0.3, 0.4, 0.8, ...]", "\n", "overlap_tids1", "=", "torch", ".", "where", "(", "iou1", ">=", "iou_thres", ")", "[", "0", "]", "# pick proposal idx that largely overlaps with ground-truth", "\n", "overlap_tids2", "=", "torch", ".", "where", "(", "iou2", ">=", "iou_thres", ")", "[", "0", "]", "# [2, 5, 13, ...], [4, 7, 10, ...]", "\n", "\n", "for", "traj_idx1", ",", "traj_idx2", "in", "product", "(", "overlap_tids1", ",", "overlap_tids2", ")", ":", "# over all possible combination of idxs", "\n", "\t\t\t\t\t", "if", "traj_idx1", "!=", "traj_idx2", "and", "trackid", "[", "traj_idx1", "]", "<", "0", "and", "trackid", "[", "traj_idx2", "]", "<", "0", ":", "# if two idxs are different & not ground-truth", "\n", "\t\t\t\t\t\t", "pos_idx", ".", "append", "(", "\n", "pair_to_find", "[", "(", "traj_idx1", ",", "traj_idx2", ")", "]", "\n", ")", "# [3, 15, 50, 100]", "\n", "pred_labels", "[", "\n", "pair_to_find", "[", "(", "traj_idx1", ",", "traj_idx2", ")", "]", "\n", "]", "=", "to_multi_onehot", "(", "pred_idx", ",", "self", ".", "num_predicates", ")", "# [0 0 ... 1 ... 0 0]", "\n", "\n", "# If traj-traj has no relation -> fill pred_labels with zeros", "\n", "", "", "", "", "neg_idx", "=", "[", "\n", "idx", "for", "idx", "in", "range", "(", "len", "(", "pairs", ")", ")", "if", "idx", "not", "in", "pos_idx", "\n", "]", "\n", "pred_labels", ".", "update", "(", "\n", "dict", "(", "[", "\n", "(", "i", ",", "torch", ".", "zeros", "(", "self", ".", "num_predicates", ")", ")", "for", "i", "in", "neg_idx", "\n", "]", ")", "\n", ")", "\n", "pred_labels", "=", "list", "(", "pred_labels", ".", "values", "(", ")", ")", "\n", "pred_labels", "=", "torch", ".", "stack", "(", "pred_labels", ")", "\n", "\n", "return", "feats", ",", "pairs", ",", "pred_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vrdataset.VRDataset._get_proposal_idx": [[140, 146], ["enumerate"], "methods", ["None"], ["", "def", "_get_proposal_idx", "(", "self", ",", "pairs", ",", "trackid", ")", ":", "\n", "\t\t", "proposal_idx", "=", "[", "\n", "ind", "for", "ind", ",", "(", "traj_idx1", ",", "traj_idx2", ")", "in", "enumerate", "(", "pairs", ")", "if", "trackid", "[", "traj_idx1", "]", "<", "0", "and", "trackid", "[", "traj_idx2", "]", "<", "0", "\n", "]", "\n", "return", "proposal_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vrdataset.VRDataset._get_num_tracklet_proposals": [[147, 150], ["sum"], "methods", ["None"], ["", "def", "_get_num_tracklet_proposals", "(", "self", ",", "trackid", ")", ":", "\n", "\t\t", "num_tracks", "=", "sum", "(", "trackid", "<", "0", ")", "\n", "return", "num_tracks", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vrdataset.VRDataset._get_class_logit": [[151, 165], ["vrdataset.VRDataset._get_object_trajectory_proposal", "torch.tensor", "torch.stack", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vrdataset.VRDataset._get_object_trajectory_proposal"], ["", "def", "_get_class_logit", "(", "self", ",", "vid", ",", "fstart", ",", "fend", ")", ":", "\n", "\t\t", "trajs", "=", "self", ".", "_get_object_trajectory_proposal", "(", "\n", "vid", ",", "fstart", ",", "fend", ",", "\n", "self", ".", "logit_only", ",", "\n", "gt", "=", "self", ".", "use_gt_obj_trajs", ",", "\n", "verbose", "=", "False", "\n", ")", "\n", "\n", "if", "self", ".", "logit_only", ":", "\n", "\t\t\t", "class_logits", "=", "torch", ".", "tensor", "(", "trajs", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "", "else", ":", "\n", "\t\t\t", "class_logits", "=", "[", "torch", ".", "tensor", "(", "traj", ".", "classeme", ",", "dtype", "=", "torch", ".", "float32", ")", "for", "traj", "in", "trajs", "]", "\n", "class_logits", "=", "torch", ".", "stack", "(", "class_logits", ")", "\n", "", "return", "class_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vrdataset.VRDataset._get_object_trajectory_proposal": [[166, 189], ["get_segment_signature", "get_feature_path", "os.path.join", "os.path.exists", "print", "open", "json.load", "print", "lib.modeling.trajectory.Trajectory"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.get_segment_signature", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.get_feature_path"], ["", "def", "_get_object_trajectory_proposal", "(", "self", ",", "vid", ",", "fstart", ",", "fend", ",", "logit_only", "=", "False", ",", "gt", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "\t    ", "\"\"\"\n\t    Set gt=True for providing groundtruth bounding box trajectories and\n\t    predicting classme feature only\n\t    \"\"\"", "\n", "vsig", "=", "get_segment_signature", "(", "vid", ",", "fstart", ",", "fend", ")", "\n", "name", "=", "'traj_cls_gt'", "if", "gt", "else", "'traj_cls'", "\n", "path", "=", "get_feature_path", "(", "name", ",", "vid", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'{}-{}.json'", ".", "format", "(", "vsig", ",", "name", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "\t        ", "if", "verbose", ":", "\n", "\t            ", "print", "(", "'loading object {} proposal for video segment {}'", ".", "format", "(", "name", ",", "vsig", ")", ")", "\n", "", "with", "open", "(", "path", ",", "'r'", ")", "as", "fin", ":", "\n", "\t            ", "trajs", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "if", "logit_only", ":", "\n", "\t        \t", "trajs", "=", "[", "traj", "[", "'classeme'", "]", "for", "traj", "in", "trajs", "]", "\n", "", "else", ":", "\n", "\t\t        ", "trajs", "=", "[", "Trajectory", "(", "**", "traj", ")", "for", "traj", "in", "trajs", "]", "\n", "", "", "else", ":", "\n", "\t        ", "if", "verbose", ":", "\n", "\t            ", "print", "(", "'no object {} proposal for video segment {}'", ".", "format", "(", "name", ",", "vsig", ")", ")", "\n", "", "trajs", "=", "[", "]", "\n", "", "return", "trajs", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vrdataset.VRDataset._get_rel_feature": [[190, 218], ["get_segment_signature", "get_feature_path", "os.path.join", "os.path.exists", "print", "print", "h5py.File"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.get_segment_signature", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.get_feature_path"], ["", "def", "_get_rel_feature", "(", "self", ",", "vid", ",", "fstart", ",", "fend", ",", "dont_return", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "\t\t", "vsig", "=", "get_segment_signature", "(", "vid", ",", "fstart", ",", "fend", ")", "\n", "# vid=ILSVRC2015_train_00005003, fstart=0000, fend=0030", "\n", "path", "=", "get_feature_path", "(", "'relation'", ",", "vid", ")", "\n", "# ./vidvrd-baseline-output/features/relation/ILSVRC2015_train_00005003", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'{}-{}.h5'", ".", "format", "(", "vsig", ",", "'relation'", ")", ")", "\n", "# ./vidvrd-baseline-output/features/relation/ILSVRC2015_train_00005003/ILSVRC2015_train_00005003-0000-0030-relation.h5", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "\t\t\t", "if", "dont_return", ":", "\n", "\t\t\t\t", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "", "else", ":", "\n", "\t\t\t\t", "if", "verbose", ":", "\n", "\t\t\t\t\t", "print", "(", "'loading relation feature for video segment {}...'", ".", "format", "(", "vsig", ")", ")", "\n", "", "with", "h5py", ".", "File", "(", "path", ",", "'r'", ")", "as", "fin", ":", "\n", "# N object trajectory proposals, whose trackids are all -1", "\n", "# and M groundtruth object trajectories, whose trackids are provided by dataset", "\n", "\t\t\t\t\t", "trackid", "=", "fin", "[", "'trackid'", "]", "[", ":", "]", "\n", "# all possible pairs among N+M object trajectories", "\n", "pairs", "=", "fin", "[", "'pairs'", "]", "[", ":", "]", "\n", "# relation feature for each pair (in same order)", "\n", "feats", "=", "fin", "[", "'feats'", "]", "[", ":", "]", "\n", "# vIoU (traj_iou) for each pair (in same order)", "\n", "iou", "=", "fin", "[", "'iou'", "]", "[", ":", "]", "\n", "", "return", "pairs", ",", "feats", ",", "iou", ",", "trackid", "\n", "", "", "else", ":", "\n", "\t\t\t", "if", "verbose", ":", "\n", "\t\t\t\t", "print", "(", "'no relation feature for video segment  {}'", ".", "format", "(", "vsig", ")", ")", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vrdataset.VRDataset._feature_preprocess": [[219, 244], ["lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize"], ["", "def", "_feature_preprocess", "(", "self", ",", "feats", ")", ":", "\n", "# subject classeme + object classeme (70)", "\n", "# feats[:, 0: 70]", "\n", "\n", "# subject TrajectoryShape + HoG + HoF + MBH motion feature (8000)", "\n", "# (since this feature is Bag-of-Word type, we l1-normalize it so that", "\n", "# each element represents the fraction instead of count)", "\n", "\n", "\t\t", "feats", "[", ":", ",", "70", ":", "1070", "]", "=", "normalize", "(", "feats", "[", ":", ",", "70", ":", "1070", "]", ",", "axis", "=", "-", "1", ",", "order", "=", "1", ")", "\n", "feats", "[", ":", ",", "1070", ":", "2070", "]", "=", "normalize", "(", "feats", "[", ":", ",", "1070", ":", "2070", "]", ",", "axis", "=", "-", "1", ",", "order", "=", "1", ")", "\n", "feats", "[", ":", ",", "2070", ":", "3070", "]", "=", "normalize", "(", "feats", "[", ":", ",", "2070", ":", "3070", "]", ",", "axis", "=", "-", "1", ",", "order", "=", "1", ")", "\n", "feats", "[", ":", ",", "3070", ":", "4070", "]", "=", "normalize", "(", "feats", "[", ":", ",", "3070", ":", "4070", "]", ",", "axis", "=", "-", "1", ",", "order", "=", "1", ")", "\n", "\n", "# object TrajectoryShape + HoG + HoF + MBH motion feature", "\n", "feats", "[", ":", ",", "4070", ":", "5070", "]", "=", "normalize", "(", "feats", "[", ":", ",", "4070", ":", "5070", "]", ",", "axis", "=", "-", "1", ",", "order", "=", "1", ")", "\n", "feats", "[", ":", ",", "5070", ":", "6070", "]", "=", "normalize", "(", "feats", "[", ":", ",", "5070", ":", "6070", "]", ",", "axis", "=", "-", "1", ",", "order", "=", "1", ")", "\n", "feats", "[", ":", ",", "6070", ":", "7070", "]", "=", "normalize", "(", "feats", "[", ":", ",", "6070", ":", "7070", "]", ",", "axis", "=", "-", "1", ",", "order", "=", "1", ")", "\n", "feats", "[", ":", ",", "7070", ":", "8070", "]", "=", "normalize", "(", "feats", "[", ":", ",", "7070", ":", "8070", "]", ",", "axis", "=", "-", "1", ",", "order", "=", "1", ")", "\n", "\n", "# relative posititon + size + motion feature (3000)", "\n", "# feats[:, 8070: 9070]", "\n", "# feats[:, 9070: 10070]", "\n", "# feats[:, 10070: 11070]", "\n", "\n", "return", "feats", "", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vidvrd_vidor_dataset.VidvrdVidorDataset.__init__": [[13, 35], ["os.path.join", "vidvrd_vidor_dataset.VidvrdVidorDataset._load_anno", "vidvrd_vidor_dataset.VidvrdVidorDataset._merge_rel", "vidvrd_vidor_dataset.VidvrdVidorDataset._print_anno", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.vidvrd_vidor_dataset.VidvrdVidorDataset._load_anno", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.vidvrd_vidor_dataset.VidvrdVidorDataset._merge_rel", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.vidvrd_vidor_dataset.VidvrdVidorDataset._print_anno"], ["def", "__init__", "(", "self", ",", "data_dir", ",", "dataset", ",", "split", ",", "anno", ")", ":", "\n", "# vidvrd anno_path: '/home/t2_u1/data/vidvrd/train/ILSVRC2015_train_00005003.json'", "\n", "# vidor anno_path: '/home/t2_u1/data/vidor/annotation/training/0000/2401075277.json'", "\n", "\t\t", "anno_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "dataset", ",", "split", ",", "anno", ")", "\n", "if", "dataset", "==", "'vidvrd'", ":", "\n", "# VidVRD (obj:35, rel:132)", "\n", "\t\t\t", "self", ".", "idx_to_obj", "=", "{", "0", ":", "'airplane'", ",", "1", ":", "'antelope'", ",", "2", ":", "'ball'", ",", "3", ":", "'bear'", ",", "4", ":", "'bicycle'", ",", "5", ":", "'bird'", ",", "6", ":", "'bus'", ",", "7", ":", "'car'", ",", "8", ":", "'cattle'", ",", "9", ":", "'dog'", ",", "10", ":", "'domestic_cat'", ",", "11", ":", "'elephant'", ",", "12", ":", "'fox'", ",", "13", ":", "'frisbee'", ",", "14", ":", "'giant_panda'", ",", "15", ":", "'hamster'", ",", "16", ":", "'horse'", ",", "17", ":", "'lion'", ",", "18", ":", "'lizard'", ",", "19", ":", "'monkey'", ",", "20", ":", "'motorcycle'", ",", "21", ":", "'person'", ",", "22", ":", "'rabbit'", ",", "23", ":", "'red_panda'", ",", "24", ":", "'sheep'", ",", "25", ":", "'skateboard'", ",", "26", ":", "'snake'", ",", "27", ":", "'sofa'", ",", "28", ":", "'squirrel'", ",", "29", ":", "'tiger'", ",", "30", ":", "'train'", ",", "31", ":", "'turtle'", ",", "32", ":", "'watercraft'", ",", "33", ":", "'whale'", ",", "34", ":", "'zebra'", "}", "\n", "self", ".", "obj_to_idx", "=", "{", "'airplane'", ":", "0", ",", "'antelope'", ":", "1", ",", "'ball'", ":", "2", ",", "'bear'", ":", "3", ",", "'bicycle'", ":", "4", ",", "'bird'", ":", "5", ",", "'bus'", ":", "6", ",", "'car'", ":", "7", ",", "'cattle'", ":", "8", ",", "'dog'", ":", "9", ",", "'domestic_cat'", ":", "10", ",", "'elephant'", ":", "11", ",", "'fox'", ":", "12", ",", "'frisbee'", ":", "13", ",", "'giant_panda'", ":", "14", ",", "'hamster'", ":", "15", ",", "'horse'", ":", "16", ",", "'lion'", ":", "17", ",", "'lizard'", ":", "18", ",", "'monkey'", ":", "19", ",", "'motorcycle'", ":", "20", ",", "'person'", ":", "21", ",", "'rabbit'", ":", "22", ",", "'red_panda'", ":", "23", ",", "'sheep'", ":", "24", ",", "'skateboard'", ":", "25", ",", "'snake'", ":", "26", ",", "'sofa'", ":", "27", ",", "'squirrel'", ":", "28", ",", "'tiger'", ":", "29", ",", "'train'", ":", "30", ",", "'turtle'", ":", "31", ",", "'watercraft'", ":", "32", ",", "'whale'", ":", "33", ",", "'zebra'", ":", "34", "}", "\n", "self", ".", "idx_to_rel", "=", "{", "0", ":", "'above'", ",", "1", ":", "'away'", ",", "2", ":", "'behind'", ",", "3", ":", "'beneath'", ",", "4", ":", "'bite'", ",", "5", ":", "'chase'", ",", "6", ":", "'creep_above'", ",", "7", ":", "'creep_away'", ",", "8", ":", "'creep_behind'", ",", "9", ":", "'creep_beneath'", ",", "10", ":", "'creep_front'", ",", "11", ":", "'creep_left'", ",", "12", ":", "'creep_next_to'", ",", "13", ":", "'creep_past'", ",", "14", ":", "'creep_right'", ",", "15", ":", "'creep_toward'", ",", "16", ":", "'drive'", ",", "17", ":", "'fall_off'", ",", "18", ":", "'faster'", ",", "19", ":", "'feed'", ",", "20", ":", "'fight'", ",", "21", ":", "'fly_above'", ",", "22", ":", "'fly_away'", ",", "23", ":", "'fly_behind'", ",", "24", ":", "'fly_front'", ",", "25", ":", "'fly_left'", ",", "26", ":", "'fly_next_to'", ",", "27", ":", "'fly_past'", ",", "28", ":", "'fly_right'", ",", "29", ":", "'fly_toward'", ",", "30", ":", "'fly_with'", ",", "31", ":", "'follow'", ",", "32", ":", "'front'", ",", "33", ":", "'hold'", ",", "34", ":", "'jump_above'", ",", "35", ":", "'jump_away'", ",", "36", ":", "'jump_behind'", ",", "37", ":", "'jump_beneath'", ",", "38", ":", "'jump_front'", ",", "39", ":", "'jump_left'", ",", "40", ":", "'jump_next_to'", ",", "41", ":", "'jump_past'", ",", "42", ":", "'jump_right'", ",", "43", ":", "'jump_toward'", ",", "44", ":", "'jump_with'", ",", "45", ":", "'kick'", ",", "46", ":", "'larger'", ",", "47", ":", "'left'", ",", "48", ":", "'lie_above'", ",", "49", ":", "'lie_behind'", ",", "50", ":", "'lie_beneath'", ",", "51", ":", "'lie_front'", ",", "52", ":", "'lie_inside'", ",", "53", ":", "'lie_left'", ",", "54", ":", "'lie_next_to'", ",", "55", ":", "'lie_right'", ",", "56", ":", "'lie_with'", ",", "57", ":", "'move_above'", ",", "58", ":", "'move_away'", ",", "59", ":", "'move_behind'", ",", "60", ":", "'move_beneath'", ",", "61", ":", "'move_front'", ",", "62", ":", "'move_left'", ",", "63", ":", "'move_next_to'", ",", "64", ":", "'move_past'", ",", "65", ":", "'move_right'", ",", "66", ":", "'move_toward'", ",", "67", ":", "'move_with'", ",", "68", ":", "'next_to'", ",", "69", ":", "'past'", ",", "70", ":", "'play'", ",", "71", ":", "'pull'", ",", "72", ":", "'ride'", ",", "73", ":", "'right'", ",", "74", ":", "'run_above'", ",", "75", ":", "'run_away'", ",", "76", ":", "'run_behind'", ",", "77", ":", "'run_beneath'", ",", "78", ":", "'run_front'", ",", "79", ":", "'run_left'", ",", "80", ":", "'run_next_to'", ",", "81", ":", "'run_past'", ",", "82", ":", "'run_right'", ",", "83", ":", "'run_toward'", ",", "84", ":", "'run_with'", ",", "85", ":", "'sit_above'", ",", "86", ":", "'sit_behind'", ",", "87", ":", "'sit_beneath'", ",", "88", ":", "'sit_front'", ",", "89", ":", "'sit_inside'", ",", "90", ":", "'sit_left'", ",", "91", ":", "'sit_next_to'", ",", "92", ":", "'sit_right'", ",", "93", ":", "'stand_above'", ",", "94", ":", "'stand_behind'", ",", "95", ":", "'stand_beneath'", ",", "96", ":", "'stand_front'", ",", "97", ":", "'stand_inside'", ",", "98", ":", "'stand_left'", ",", "99", ":", "'stand_next_to'", ",", "100", ":", "'stand_right'", ",", "101", ":", "'stand_with'", ",", "102", ":", "'stop_above'", ",", "103", ":", "'stop_behind'", ",", "104", ":", "'stop_beneath'", ",", "105", ":", "'stop_front'", ",", "106", ":", "'stop_left'", ",", "107", ":", "'stop_next_to'", ",", "108", ":", "'stop_right'", ",", "109", ":", "'stop_with'", ",", "110", ":", "'swim_behind'", ",", "111", ":", "'swim_beneath'", ",", "112", ":", "'swim_front'", ",", "113", ":", "'swim_left'", ",", "114", ":", "'swim_next_to'", ",", "115", ":", "'swim_right'", ",", "116", ":", "'swim_with'", ",", "117", ":", "'taller'", ",", "118", ":", "'touch'", ",", "119", ":", "'toward'", ",", "120", ":", "'walk_above'", ",", "121", ":", "'walk_away'", ",", "122", ":", "'walk_behind'", ",", "123", ":", "'walk_beneath'", ",", "124", ":", "'walk_front'", ",", "125", ":", "'walk_left'", ",", "126", ":", "'walk_next_to'", ",", "127", ":", "'walk_past'", ",", "128", ":", "'walk_right'", ",", "129", ":", "'walk_toward'", ",", "130", ":", "'walk_with'", ",", "131", ":", "'watch'", "}", "\n", "self", ".", "rel_to_idx", "=", "{", "'above'", ":", "0", ",", "'away'", ":", "1", ",", "'behind'", ":", "2", ",", "'beneath'", ":", "3", ",", "'bite'", ":", "4", ",", "'chase'", ":", "5", ",", "'creep_above'", ":", "6", ",", "'creep_away'", ":", "7", ",", "'creep_behind'", ":", "8", ",", "'creep_beneath'", ":", "9", ",", "'creep_front'", ":", "10", ",", "'creep_left'", ":", "11", ",", "'creep_next_to'", ":", "12", ",", "'creep_past'", ":", "13", ",", "'creep_right'", ":", "14", ",", "'creep_toward'", ":", "15", ",", "'drive'", ":", "16", ",", "'fall_off'", ":", "17", ",", "'faster'", ":", "18", ",", "'feed'", ":", "19", ",", "'fight'", ":", "20", ",", "'fly_above'", ":", "21", ",", "'fly_away'", ":", "22", ",", "'fly_behind'", ":", "23", ",", "'fly_front'", ":", "24", ",", "'fly_left'", ":", "25", ",", "'fly_next_to'", ":", "26", ",", "'fly_past'", ":", "27", ",", "'fly_right'", ":", "28", ",", "'fly_toward'", ":", "29", ",", "'fly_with'", ":", "30", ",", "'follow'", ":", "31", ",", "'front'", ":", "32", ",", "'hold'", ":", "33", ",", "'jump_above'", ":", "34", ",", "'jump_away'", ":", "35", ",", "'jump_behind'", ":", "36", ",", "'jump_beneath'", ":", "37", ",", "'jump_front'", ":", "38", ",", "'jump_left'", ":", "39", ",", "'jump_next_to'", ":", "40", ",", "'jump_past'", ":", "41", ",", "'jump_right'", ":", "42", ",", "'jump_toward'", ":", "43", ",", "'jump_with'", ":", "44", ",", "'kick'", ":", "45", ",", "'larger'", ":", "46", ",", "'left'", ":", "47", ",", "'lie_above'", ":", "48", ",", "'lie_behind'", ":", "49", ",", "'lie_beneath'", ":", "50", ",", "'lie_front'", ":", "51", ",", "'lie_inside'", ":", "52", ",", "'lie_left'", ":", "53", ",", "'lie_next_to'", ":", "54", ",", "'lie_right'", ":", "55", ",", "'lie_with'", ":", "56", ",", "'move_above'", ":", "57", ",", "'move_away'", ":", "58", ",", "'move_behind'", ":", "59", ",", "'move_beneath'", ":", "60", ",", "'move_front'", ":", "61", ",", "'move_left'", ":", "62", ",", "'move_next_to'", ":", "63", ",", "'move_past'", ":", "64", ",", "'move_right'", ":", "65", ",", "'move_toward'", ":", "66", ",", "'move_with'", ":", "67", ",", "'next_to'", ":", "68", ",", "'past'", ":", "69", ",", "'play'", ":", "70", ",", "'pull'", ":", "71", ",", "'ride'", ":", "72", ",", "'right'", ":", "73", ",", "'run_above'", ":", "74", ",", "'run_away'", ":", "75", ",", "'run_behind'", ":", "76", ",", "'run_beneath'", ":", "77", ",", "'run_front'", ":", "78", ",", "'run_left'", ":", "79", ",", "'run_next_to'", ":", "80", ",", "'run_past'", ":", "81", ",", "'run_right'", ":", "82", ",", "'run_toward'", ":", "83", ",", "'run_with'", ":", "84", ",", "'sit_above'", ":", "85", ",", "'sit_behind'", ":", "86", ",", "'sit_beneath'", ":", "87", ",", "'sit_front'", ":", "88", ",", "'sit_inside'", ":", "89", ",", "'sit_left'", ":", "90", ",", "'sit_next_to'", ":", "91", ",", "'sit_right'", ":", "92", ",", "'stand_above'", ":", "93", ",", "'stand_behind'", ":", "94", ",", "'stand_beneath'", ":", "95", ",", "'stand_front'", ":", "96", ",", "'stand_inside'", ":", "97", ",", "'stand_left'", ":", "98", ",", "'stand_next_to'", ":", "99", ",", "'stand_right'", ":", "100", ",", "'stand_with'", ":", "101", ",", "'stop_above'", ":", "102", ",", "'stop_behind'", ":", "103", ",", "'stop_beneath'", ":", "104", ",", "'stop_front'", ":", "105", ",", "'stop_left'", ":", "106", ",", "'stop_next_to'", ":", "107", ",", "'stop_right'", ":", "108", ",", "'stop_with'", ":", "109", ",", "'swim_behind'", ":", "110", ",", "'swim_beneath'", ":", "111", ",", "'swim_front'", ":", "112", ",", "'swim_left'", ":", "113", ",", "'swim_next_to'", ":", "114", ",", "'swim_right'", ":", "115", ",", "'swim_with'", ":", "116", ",", "'taller'", ":", "117", ",", "'touch'", ":", "118", ",", "'toward'", ":", "119", ",", "'walk_above'", ":", "120", ",", "'walk_away'", ":", "121", ",", "'walk_behind'", ":", "122", ",", "'walk_beneath'", ":", "123", ",", "'walk_front'", ":", "124", ",", "'walk_left'", ":", "125", ",", "'walk_next_to'", ":", "126", ",", "'walk_past'", ":", "127", ",", "'walk_right'", ":", "128", ",", "'walk_toward'", ":", "129", ",", "'walk_with'", ":", "130", ",", "'watch'", ":", "131", "}", "\n", "", "elif", "dataset", "==", "'vidor'", ":", "\n", "# VidOR (obj:80, rel:50)", "\n", "\t\t\t", "self", ".", "idx_to_obj", "=", "{", "0", ":", "'adult'", ",", "1", ":", "'aircraft'", ",", "2", ":", "'antelope'", ",", "3", ":", "'baby'", ",", "4", ":", "'baby_seat'", ",", "5", ":", "'baby_walker'", ",", "6", ":", "'backpack'", ",", "7", ":", "'ball/sports_ball'", ",", "8", ":", "'bat'", ",", "9", ":", "'bear'", ",", "10", ":", "'bench'", ",", "11", ":", "'bicycle'", ",", "12", ":", "'bird'", ",", "13", ":", "'bottle'", ",", "14", ":", "'bread'", ",", "15", ":", "'bus/truck'", ",", "16", ":", "'cake'", ",", "17", ":", "'camel'", ",", "18", ":", "'camera'", ",", "19", ":", "'car'", ",", "20", ":", "'cat'", ",", "21", ":", "'cattle/cow'", ",", "22", ":", "'cellphone'", ",", "23", ":", "'chair'", ",", "24", ":", "'chicken'", ",", "25", ":", "'child'", ",", "26", ":", "'crab'", ",", "27", ":", "'crocodile'", ",", "28", ":", "'cup'", ",", "29", ":", "'dish'", ",", "30", ":", "'dog'", ",", "31", ":", "'duck'", ",", "32", ":", "'electric_fan'", ",", "33", ":", "'elephant'", ",", "34", ":", "'faucet'", ",", "35", ":", "'fish'", ",", "36", ":", "'frisbee'", ",", "37", ":", "'fruits'", ",", "38", ":", "'guitar'", ",", "39", ":", "'hamster/rat'", ",", "40", ":", "'handbag'", ",", "41", ":", "'horse'", ",", "42", ":", "'kangaroo'", ",", "43", ":", "'laptop'", ",", "44", ":", "'leopard'", ",", "45", ":", "'lion'", ",", "46", ":", "'microwave'", ",", "47", ":", "'motorcycle'", ",", "48", ":", "'oven'", ",", "49", ":", "'panda'", ",", "50", ":", "'penguin'", ",", "51", ":", "'piano'", ",", "52", ":", "'pig'", ",", "53", ":", "'rabbit'", ",", "54", ":", "'racket'", ",", "55", ":", "'refrigerator'", ",", "56", ":", "'scooter'", ",", "57", ":", "'screen/monitor'", ",", "58", ":", "'sheep/goat'", ",", "59", ":", "'sink'", ",", "60", ":", "'skateboard'", ",", "61", ":", "'ski'", ",", "62", ":", "'snake'", ",", "63", ":", "'snowboard'", ",", "64", ":", "'sofa'", ",", "65", ":", "'squirrel'", ",", "66", ":", "'stingray'", ",", "67", ":", "'stool'", ",", "68", ":", "'stop_sign'", ",", "69", ":", "'suitcase'", ",", "70", ":", "'surfboard'", ",", "71", ":", "'table'", ",", "72", ":", "'tiger'", ",", "73", ":", "'toilet'", ",", "74", ":", "'toy'", ",", "75", ":", "'traffic_light'", ",", "76", ":", "'train'", ",", "77", ":", "'turtle'", ",", "78", ":", "'vegetables'", ",", "79", ":", "'watercraft'", "}", "\n", "self", ".", "obj_to_idx", "=", "{", "'adult'", ":", "0", ",", "'aircraft'", ":", "1", ",", "'antelope'", ":", "2", ",", "'baby'", ":", "3", ",", "'baby_seat'", ":", "4", ",", "'baby_walker'", ":", "5", ",", "'backpack'", ":", "6", ",", "'ball/sports_ball'", ":", "7", ",", "'bat'", ":", "8", ",", "'bear'", ":", "9", ",", "'bench'", ":", "10", ",", "'bicycle'", ":", "11", ",", "'bird'", ":", "12", ",", "'bottle'", ":", "13", ",", "'bread'", ":", "14", ",", "'bus/truck'", ":", "15", ",", "'cake'", ":", "16", ",", "'camel'", ":", "17", ",", "'camera'", ":", "18", ",", "'car'", ":", "19", ",", "'cat'", ":", "20", ",", "'cattle/cow'", ":", "21", ",", "'cellphone'", ":", "22", ",", "'chair'", ":", "23", ",", "'chicken'", ":", "24", ",", "'child'", ":", "25", ",", "'crab'", ":", "26", ",", "'crocodile'", ":", "27", ",", "'cup'", ":", "28", ",", "'dish'", ":", "29", ",", "'dog'", ":", "30", ",", "'duck'", ":", "31", ",", "'electric_fan'", ":", "32", ",", "'elephant'", ":", "33", ",", "'faucet'", ":", "34", ",", "'fish'", ":", "35", ",", "'frisbee'", ":", "36", ",", "'fruits'", ":", "37", ",", "'guitar'", ":", "38", ",", "'hamster/rat'", ":", "39", ",", "'handbag'", ":", "40", ",", "'horse'", ":", "41", ",", "'kangaroo'", ":", "42", ",", "'laptop'", ":", "43", ",", "'leopard'", ":", "44", ",", "'lion'", ":", "45", ",", "'microwave'", ":", "46", ",", "'motorcycle'", ":", "47", ",", "'oven'", ":", "48", ",", "'panda'", ":", "49", ",", "'penguin'", ":", "50", ",", "'piano'", ":", "51", ",", "'pig'", ":", "52", ",", "'rabbit'", ":", "53", ",", "'racket'", ":", "54", ",", "'refrigerator'", ":", "55", ",", "'scooter'", ":", "56", ",", "'screen/monitor'", ":", "57", ",", "'sheep/goat'", ":", "58", ",", "'sink'", ":", "59", ",", "'skateboard'", ":", "60", ",", "'ski'", ":", "61", ",", "'snake'", ":", "62", ",", "'snowboard'", ":", "63", ",", "'sofa'", ":", "64", ",", "'squirrel'", ":", "65", ",", "'stingray'", ":", "66", ",", "'stool'", ":", "67", ",", "'stop_sign'", ":", "68", ",", "'suitcase'", ":", "69", ",", "'surfboard'", ":", "70", ",", "'table'", ":", "71", ",", "'tiger'", ":", "72", ",", "'toilet'", ":", "73", ",", "'toy'", ":", "74", ",", "'traffic_light'", ":", "75", ",", "'train'", ":", "76", ",", "'turtle'", ":", "77", ",", "'vegetables'", ":", "78", ",", "'watercraft'", ":", "79", "}", "\n", "self", ".", "idx_to_rel", "=", "{", "0", ":", "'above'", ",", "1", ":", "'away'", ",", "2", ":", "'behind'", ",", "3", ":", "'beneath'", ",", "4", ":", "'bite'", ",", "5", ":", "'caress'", ",", "6", ":", "'carry'", ",", "7", ":", "'chase'", ",", "8", ":", "'clean'", ",", "9", ":", "'close'", ",", "10", ":", "'cut'", ",", "11", ":", "'drive'", ",", "12", ":", "'feed'", ",", "13", ":", "'get_off'", ",", "14", ":", "'get_on'", ",", "15", ":", "'grab'", ",", "16", ":", "'hit'", ",", "17", ":", "'hold'", ",", "18", ":", "'hold_hand_of'", ",", "19", ":", "'hug'", ",", "20", ":", "'in_front_of'", ",", "21", ":", "'inside'", ",", "22", ":", "'kick'", ",", "23", ":", "'kiss'", ",", "24", ":", "'knock'", ",", "25", ":", "'lean_on'", ",", "26", ":", "'lick'", ",", "27", ":", "'lift'", ",", "28", ":", "'next_to'", ",", "29", ":", "'open'", ",", "30", ":", "'pat'", ",", "31", ":", "'play(instrument)'", ",", "32", ":", "'point_to'", ",", "33", ":", "'press'", ",", "34", ":", "'pull'", ",", "35", ":", "'push'", ",", "36", ":", "'release'", ",", "37", ":", "'ride'", ",", "38", ":", "'shake_hand_with'", ",", "39", ":", "'shout_at'", ",", "40", ":", "'smell'", ",", "41", ":", "'speak_to'", ",", "42", ":", "'squeeze'", ",", "43", ":", "'throw'", ",", "44", ":", "'touch'", ",", "45", ":", "'towards'", ",", "46", ":", "'use'", ",", "47", ":", "'watch'", ",", "48", ":", "'wave'", ",", "49", ":", "'wave_hand_to'", "}", "\n", "self", ".", "rel_to_idx", "=", "{", "'above'", ":", "0", ",", "'away'", ":", "1", ",", "'behind'", ":", "2", ",", "'beneath'", ":", "3", ",", "'bite'", ":", "4", ",", "'caress'", ":", "5", ",", "'carry'", ":", "6", ",", "'chase'", ":", "7", ",", "'clean'", ":", "8", ",", "'close'", ":", "9", ",", "'cut'", ":", "10", ",", "'drive'", ":", "11", ",", "'feed'", ":", "12", ",", "'get_off'", ":", "13", ",", "'get_on'", ":", "14", ",", "'grab'", ":", "15", ",", "'hit'", ":", "16", ",", "'hold'", ":", "17", ",", "'hold_hand_of'", ":", "18", ",", "'hug'", ":", "19", ",", "'in_front_of'", ":", "20", ",", "'inside'", ":", "21", ",", "'kick'", ":", "22", ",", "'kiss'", ":", "23", ",", "'knock'", ":", "24", ",", "'lean_on'", ":", "25", ",", "'lick'", ":", "26", ",", "'lift'", ":", "27", ",", "'next_to'", ":", "28", ",", "'open'", ":", "29", ",", "'pat'", ":", "30", ",", "'play(instrument)'", ":", "31", ",", "'point_to'", ":", "32", ",", "'press'", ":", "33", ",", "'pull'", ":", "34", ",", "'push'", ":", "35", ",", "'release'", ":", "36", ",", "'ride'", ":", "37", ",", "'shake_hand_with'", ":", "38", ",", "'shout_at'", ":", "39", ",", "'smell'", ":", "40", ",", "'speak_to'", ":", "41", ",", "'squeeze'", ":", "42", ",", "'throw'", ":", "43", ",", "'touch'", ":", "44", ",", "'towards'", ":", "45", ",", "'use'", ":", "46", ",", "'watch'", ":", "47", ",", "'wave'", ":", "48", ",", "'wave_hand_to'", ":", "49", "}", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "'Unknown dataset: {}'", ".", "format", "(", "dataset", ")", ")", "\n", "\n", "", "self", ".", "vid", ",", "self", ".", "width", ",", "self", ".", "height", ",", "self", ".", "traj", ",", "self", ".", "obj", ",", "self", ".", "rel", ",", "self", ".", "traj_len", "=", "self", ".", "_load_anno", "(", "anno_path", ")", "\n", "self", ".", "_merge_rel", "(", ")", "\n", "self", ".", "_print_anno", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vidvrd_vidor_dataset.VidvrdVidorDataset._load_anno": [[36, 129], ["len", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict.items", "open", "json.load", "rel[].append", "collections.defaultdict", "dict", "dict", "dict", "traj[].append", "rel_per_obj_pair[].append"], "methods", ["None"], ["", "def", "_load_anno", "(", "self", ",", "anno_path", ")", ":", "\n", "\t\t", "with", "open", "(", "anno_path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "anno", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "vid", "=", "anno", "[", "'video_id'", "]", "\n", "width", "=", "anno", "[", "'width'", "]", "\n", "height", "=", "anno", "[", "'height'", "]", "\n", "traj_per_video", "=", "anno", "[", "'trajectories'", "]", "# 60", "\n", "obj_categories", "=", "anno", "[", "'subject/objects'", "]", "\n", "rel_per_seg", "=", "anno", "[", "'relation_instances'", "]", "\n", "traj_len", "=", "len", "(", "traj_per_video", ")", "# in vidvrd, 'traj_len' is lesser than '# of frames' (x15)", "\n", "\n", "#####################################################################################", "\n", "traj", "=", "defaultdict", "(", "list", ")", "\n", "for", "traj_per_frame", "in", "traj_per_video", ":", "\n", "\t\t\t", "for", "traj_per_inst", "in", "traj_per_frame", ":", "\n", "\t\t\t\t", "traj", "[", "traj_per_inst", "[", "'tid'", "]", "]", ".", "append", "(", "[", "traj_per_inst", "[", "'bbox'", "]", "[", "'xmin'", "]", ",", "\n", "traj_per_inst", "[", "'bbox'", "]", "[", "'ymin'", "]", ",", "\n", "traj_per_inst", "[", "'bbox'", "]", "[", "'xmax'", "]", ",", "\n", "traj_per_inst", "[", "'bbox'", "]", "[", "'ymax'", "]", "]", ")", "\n", "", "", "''' (example)\n\t\ttraj = defaultdict(list,\n            {0: [[14, 8, 912, 574],\n\t             [13, 7, 913, 573],\n\t             [12, 7, 915, 573],\n\t   \t\t\t ...\n\t             [1, 131, 862, 572],\n\t             [1, 124, 855, 570],\n\t             [1, 117, 849, 568]],\n\t        1: [[758, 121, 926, 409],\n\t\t\t\t[758, 121, 926, 409],\n\t\t\t\t[758, 121, 926, 409],\n\t\t\t\t...\n\t\t\t\t[703, 252, 957, 477],\n\t\t\t\t[695, 249, 951, 481],\n\t\t\t\t[686, 247, 944, 484]]})\n\t\t'''", "\n", "#####################################################################################", "\n", "obj", "=", "{", "}", "# {0: 'dog', 1: 'frisbee'}", "\n", "for", "obj_category", "in", "obj_categories", ":", "\n", "\t\t\t", "obj_idx", "=", "self", ".", "obj_to_idx", "[", "obj_category", "[", "'category'", "]", "]", "\n", "obj", "[", "obj_category", "[", "'tid'", "]", "]", "=", "obj_idx", "\n", "", "''' (example)\n\t\tobj = {0: 9, 1: 13}\n\t\t'''", "\n", "#####################################################################################", "\n", "rel", "=", "defaultdict", "(", "list", ")", "\n", "for", "rel_inst", "in", "rel_per_seg", ":", "\n", "\t\t    ", "rel_idx", "=", "self", ".", "rel_to_idx", "[", "rel_inst", "[", "'predicate'", "]", "]", "\n", "rel", "[", "rel_inst", "[", "'begin_fid'", "]", ",", "rel_inst", "[", "'end_fid'", "]", "]", ".", "append", "(", "[", "rel_inst", "[", "'subject_tid'", "]", ",", "\n", "rel_idx", ",", "\n", "rel_inst", "[", "'object_tid'", "]", "]", ")", "\n", "", "''' (example)\n\t\tdefaultdict(list,\n            {(0, 30): [[0, 37, 1], [1, 85, 0], [1, 72, 0]],\n             (15, 45): [[0, 77, 1], [1, 85, 0], [1, 72, 0]],\n             (30, 60): [[0, 77, 1], [1, 85, 0], [1, 72, 0]],\n             (45, 75): [[0, 77, 1], [1, 85, 0], [1, 72, 0]],\n             (60, 90): [[0, 77, 1], [1, 85, 0], [1, 72, 0]],\n             (75, 105): [[0, 77, 1], [1, 85, 0], [1, 72, 0]],\n             (90, 120): [[0, 77, 1], [1, 85, 0], [1, 72, 0]],\n             (105, 135): [[0, 3, 1], [1, 85, 0], [1, 72, 0]],\n             (120, 150): [[0, 37, 1], [1, 85, 0], [1, 72, 0]],\n             (135, 165): [[0, 37, 1], [1, 85, 0], [1, 72, 0]],\n             (150, 180): [[0, 37, 1], [1, 85, 0], [1, 72, 0]],\n             (165, 195): [[0, 3, 1], [1, 85, 0], [1, 72, 0]]})\n\t\t'''", "\n", "\n", "for", "key", ",", "value", "in", "rel", ".", "items", "(", ")", ":", "\n", "\t\t    ", "rel_per_obj_pair", "=", "defaultdict", "(", "list", ")", "\n", "for", "s", ",", "r", ",", "o", "in", "value", ":", "\n", "\t\t        ", "rel_per_obj_pair", "[", "s", ",", "o", "]", ".", "append", "(", "r", ")", "\n", "", "rel", "[", "key", "]", "=", "dict", "(", "rel_per_obj_pair", ")", "\n", "", "''' (example) \n\t\trel = defaultdict(list,\n            {(0, 30): defaultdict(list, {(0, 1): [37], (1, 0): [85, 72]}),\n             (15, 45): defaultdict(list, {(0, 1): [77], (1, 0): [85, 72]}),\n             (30, 60): defaultdict(list, {(0, 1): [77], (1, 0): [85, 72]}),\n             (45, 75): defaultdict(list, {(0, 1): [77], (1, 0): [85, 72]}),\n             (60, 90): defaultdict(list, {(0, 1): [77], (1, 0): [85, 72]}),\n             (75, 105): defaultdict(list, {(0, 1): [77], (1, 0): [85, 72]}),\n             (90, 120): defaultdict(list, {(0, 1): [77], (1, 0): [85, 72]}),\n             (105, 135): defaultdict(list, {(0, 1): [3], (1, 0): [85, 72]}),\n             (120, 150): defaultdict(list, {(0, 1): [37], (1, 0): [85, 72]}),\n             (135, 165): defaultdict(list, {(0, 1): [37], (1, 0): [85, 72]}),\n             (150, 180): defaultdict(list, {(0, 1): [37], (1, 0): [85, 72]}),\n             (165, 195): defaultdict(list, {(0, 1): [3], (1, 0): [85, 72]})})\n\n        rel[begin, end][sub, obj] = list(pred)\n\t\t'''", "\n", "#####################################################################################", "\n", "\n", "return", "vid", ",", "width", ",", "height", ",", "dict", "(", "traj", ")", ",", "obj", ",", "dict", "(", "rel", ")", ",", "traj_len", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vidvrd_vidor_dataset.VidvrdVidorDataset._merge_rel": [[130, 160], ["collections.defaultdict", "vidvrd_vidor_dataset.VidvrdVidorDataset.rel.items", "collections.defaultdict", "collections.defaultdict.items", "dict", "rel_per_seg.items", "new_rel_duration_dict[].append", "vidvrd_vidor_dataset.VidvrdVidorDataset.obj.items", "rel_duration_dict[].append", "max", "new_rel_duration_dict[].append"], "methods", ["None"], ["", "def", "_merge_rel", "(", "self", ")", ":", "\n", "\t\t", "obj", "=", "{", "tid", ":", "self", ".", "idx_to_obj", "[", "obj_idx", "]", "for", "tid", ",", "obj_idx", "in", "self", ".", "obj", ".", "items", "(", ")", "}", "\n", "\n", "rel_duration_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "duration", ",", "rel_per_seg", "in", "self", ".", "rel", ".", "items", "(", ")", ":", "\n", "\t\t\t", "for", "(", "sub_id", ",", "obj_id", ")", ",", "rel_idx_list", "in", "rel_per_seg", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "for", "rel_idx", "in", "rel_idx_list", ":", "\n", "\t\t\t\t\t", "rel_duration_dict", "[", "(", "\n", "self", ".", "obj", "[", "sub_id", "]", ",", "\n", "rel_idx", ",", "\n", "self", ".", "obj", "[", "obj_id", "]", "\n", ")", "]", ".", "append", "(", "duration", ")", "\n", "\n", "", "", "", "new_rel_duration_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "rel_triplet", ",", "duration_list", "in", "rel_duration_dict", ".", "items", "(", ")", ":", "\n", "\t\t\t", "prev_start", "=", "0", "\n", "prev_end", "=", "0", "\n", "for", "start", ",", "end", "in", "duration_list", ":", "\n", "\t\t\t\t", "if", "prev_start", "==", "0", "and", "prev_end", "==", "0", ":", "\n", "\t\t\t\t\t", "prev_start", "=", "start", "\n", "prev_end", "=", "end", "\n", "", "elif", "prev_start", "<=", "start", "<=", "prev_end", ":", "\n", "\t\t\t\t\t", "prev_end", "=", "max", "(", "prev_end", ",", "end", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "new_rel_duration_dict", "[", "(", "prev_start", ",", "prev_end", ")", "]", ".", "append", "(", "rel_triplet", ")", "\n", "prev_start", "=", "start", "\n", "prev_end", "=", "end", "\n", "", "", "new_rel_duration_dict", "[", "(", "prev_start", ",", "prev_end", ")", "]", ".", "append", "(", "rel_triplet", ")", "\n", "\n", "", "self", ".", "rel", "=", "dict", "(", "new_rel_duration_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.vidvrd_vidor_dataset.VidvrdVidorDataset._print_anno": [[161, 192], ["print", "print", "print", "print", "print", "print", "pprint.pprint.pprint", "collections.defaultdict", "vidvrd_vidor_dataset.VidvrdVidorDataset.rel.items", "print", "pprint.pprint.pprint", "print", "dict", "vidvrd_vidor_dataset.VidvrdVidorDataset.obj.items", "rel[].append"], "methods", ["None"], ["", "def", "_print_anno", "(", "self", ")", ":", "\n", "\t\t", "print", "(", "f'==============================='", "*", "2", ")", "\n", "print", "(", "f'- video id: {self.vid}'", ")", "\n", "print", "(", "f'- video size (width,height): {self.width, self.height}'", ")", "\n", "print", "(", "f'- trajectory length: {self.traj_len}'", ")", "\n", "obj", "=", "{", "tid", ":", "self", ".", "idx_to_obj", "[", "obj_idx", "]", "for", "tid", ",", "obj_idx", "in", "self", ".", "obj", ".", "items", "(", ")", "}", "\n", "print", "(", "f'- trajectory id to object idx: {obj}'", ")", "\n", "print", "(", "f'- object trajectories (xmin, ymin, xmax, ymax)'", ")", "\n", "pprint", "(", "self", ".", "traj", ")", "\n", "# rel = {}", "\n", "# for duration, rel_per_seg in self.rel.items():", "\n", "# \tnew_rel_per_seg = {}", "\n", "# \tfor (sub_id, obj_id), rel_idx_list in rel_per_seg.items():", "\n", "# \t\trels = []", "\n", "# \t\tfor rel_idx in rel_idx_list:", "\n", "# \t\t\trels.append(self.idx_to_rel[rel_idx])", "\n", "# \t\tnew_rel_per_seg[(obj[sub_id], obj[obj_id])] = rels", "\n", "# \trel[duration] = new_rel_per_seg", "\n", "# print(f'- relation instances (start, end):(sub, obj):[relations]')", "\n", "# pprint(rel)", "\n", "rel", "=", "defaultdict", "(", "list", ")", "\n", "for", "duration", ",", "triplet_list", "in", "self", ".", "rel", ".", "items", "(", ")", ":", "\n", "\t\t\t", "for", "(", "sub_idx", ",", "rel_idx", ",", "obj_idx", ")", "in", "triplet_list", ":", "\n", "\t\t\t\t", "rel", "[", "duration", "]", ".", "append", "(", "(", "\n", "self", ".", "idx_to_obj", "[", "sub_idx", "]", ",", "\n", "self", ".", "idx_to_rel", "[", "rel_idx", "]", ",", "\n", "self", ".", "idx_to_obj", "[", "obj_idx", "]", "\n", ")", ")", "\n", "", "", "print", "(", "f'- relation instances (sub, rel, obj):[durations]'", ")", "\n", "pprint", "(", "dict", "(", "rel", ")", ")", "\n", "print", "(", "f'==============================='", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.build.make_data_sampler": [[11, 19], ["samplers.DistributedSampler", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.SequentialSampler"], "function", ["None"], ["def", "make_data_sampler", "(", "dataset", ",", "shuffle", ",", "distributed", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "return", "samplers", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "shuffle", ")", "\n", "", "if", "shuffle", ":", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "RandomSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SequentialSampler", "(", "dataset", ")", "\n", "", "return", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.build._quantize": [[20, 25], ["copy.copy", "sorted", "list", "map", "bisect.bisect_right"], "function", ["None"], ["", "def", "_quantize", "(", "x", ",", "bins", ")", ":", "\n", "    ", "bins", "=", "copy", ".", "copy", "(", "bins", ")", "\n", "bins", "=", "sorted", "(", "bins", ")", "\n", "quantized", "=", "list", "(", "map", "(", "lambda", "y", ":", "bisect", ".", "bisect_right", "(", "bins", ",", "y", ")", ",", "x", ")", ")", "\n", "return", "quantized", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.build._compute_aspect_ratios": [[26, 33], ["range", "len", "dataset.get_img_info", "aspect_ratios.append", "float", "float"], "function", ["None"], ["", "def", "_compute_aspect_ratios", "(", "dataset", ")", ":", "\n", "    ", "aspect_ratios", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "img_info", "=", "dataset", ".", "get_img_info", "(", "i", ")", "\n", "aspect_ratio", "=", "float", "(", "img_info", "[", "\"height\"", "]", ")", "/", "float", "(", "img_info", "[", "\"width\"", "]", ")", "\n", "aspect_ratios", ".", "append", "(", "aspect_ratio", ")", "\n", "", "return", "aspect_ratios", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.build.make_batch_data_sampler": [[35, 55], ["build._compute_aspect_ratios", "build._quantize", "samplers.GroupedBatchSampler", "torch.utils.data.sampler.BatchSampler", "samplers.IterationBasedBatchSampler", "isinstance"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.build._compute_aspect_ratios", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.build._quantize"], ["", "def", "make_batch_data_sampler", "(", "\n", "dataset", ",", "sampler", ",", "aspect_grouping", ",", "images_per_batch", ",", "num_iters", "=", "None", ",", "start_iter", "=", "0", "\n", ")", ":", "\n", "    ", "if", "aspect_grouping", ":", "\n", "        ", "if", "not", "isinstance", "(", "aspect_grouping", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "aspect_grouping", "=", "[", "aspect_grouping", "]", "\n", "", "aspect_ratios", "=", "_compute_aspect_ratios", "(", "dataset", ")", "\n", "group_ids", "=", "_quantize", "(", "aspect_ratios", ",", "aspect_grouping", ")", "\n", "batch_sampler", "=", "samplers", ".", "GroupedBatchSampler", "(", "\n", "sampler", ",", "group_ids", ",", "images_per_batch", ",", "drop_uneven", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "        ", "batch_sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "BatchSampler", "(", "\n", "sampler", ",", "images_per_batch", ",", "drop_last", "=", "False", "\n", ")", "\n", "", "if", "num_iters", "is", "not", "None", ":", "\n", "        ", "batch_sampler", "=", "samplers", ".", "IterationBasedBatchSampler", "(", "\n", "batch_sampler", ",", "num_iters", ",", "start_iter", "\n", ")", "\n", "", "return", "batch_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.build.build_data_loader": [[56, 90], ["lib.utils.comm.get_world_size", "print", "vrdataset.VRDataset", "print", "build.make_data_sampler", "build.make_batch_data_sampler", "collate_batch.BatchCollator", "torch.utils.data.DataLoader", "lib.utils.comm.get_rank", "print", "len"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.get_world_size", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.build.make_data_sampler", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.build.make_batch_data_sampler", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.get_rank"], ["", "def", "build_data_loader", "(", "cfg", ",", "basedata", ",", "phase", ",", "is_distributed", "=", "False", ",", "start_iter", "=", "0", ")", ":", "\n", "    ", "num_gpus", "=", "get_world_size", "(", ")", "\n", "\n", "print", "(", "'preparing video segments for {}...'", ".", "format", "(", "phase", ")", ")", "\n", "dataset", "=", "VRDataset", "(", "cfg", ",", "dataset", "=", "basedata", ",", "phase", "=", "phase", ")", "\n", "print", "(", "'Total {} videos segments for {}'", ".", "format", "(", "len", "(", "dataset", ")", ",", "phase", ")", ")", "\n", "\n", "sampler", "=", "make_data_sampler", "(", "\n", "dataset", ",", "\n", "shuffle", "=", "True", "if", "phase", "in", "[", "\"train\"", ",", "\"val\"", "]", "else", "False", ",", "\n", "distributed", "=", "is_distributed", "\n", ")", "\n", "\n", "images_per_batch", "=", "cfg", ".", "DATASET", ".", "TRAIN_BATCH_SIZE", "if", "phase", "==", "\"train\"", "else", "cfg", ".", "DATASET", ".", "TEST_BATCH_SIZE", "\n", "if", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"segments_per_batch: {}, num_gpus: {}\"", ".", "format", "(", "images_per_batch", ",", "num_gpus", ")", ")", "\n", "\n", "", "images_per_gpu", "=", "images_per_batch", "//", "num_gpus", "if", "phase", "==", "\"train\"", "else", "images_per_batch", "\n", "start_iter", "=", "start_iter", "if", "phase", "==", "\"train\"", "else", "0", "\n", "num_iters", "=", "cfg", ".", "SOLVER", ".", "MAX_ITER", "if", "phase", "==", "\"train\"", "or", "(", "phase", "==", "\"val\"", "and", "cfg", ".", "val", ")", "else", "None", "\n", "\n", "aspect_grouping", "=", "False", "\n", "batch_sampler", "=", "make_batch_data_sampler", "(", "\n", "dataset", ",", "sampler", ",", "aspect_grouping", ",", "images_per_gpu", ",", "num_iters", ",", "start_iter", "\n", ")", "\n", "\n", "collator", "=", "BatchCollator", "(", ")", "\n", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "\n", "num_workers", "=", "images_per_batch", ",", "\n", "batch_sampler", "=", "batch_sampler", ",", "\n", "collate_fn", "=", "collator", ",", "\n", ")", "\n", "return", "dataloader", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.base_vidor.BaseVidOR.__init__": [[12, 22], ["dataset.DatasetV1.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.ImageEncoder.__init__"], ["def", "__init__", "(", "self", ",", "anno_rpath", ",", "video_rpath", ",", "splits", ",", "low_memory", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        anno_rpath: the root path of annotations\n        video_rpath: the root path of videos\n        splits: a list of splits in the dataset to load\n        low_memory: if true, do not load memory-costly part \n                    of annotations (trajectories) into memory\n        \"\"\"", "\n", "super", "(", "BaseVidOR", ",", "self", ")", ".", "__init__", "(", "anno_rpath", ",", "video_rpath", ",", "splits", ",", "low_memory", ")", "\n", "print", "(", "'VidOR dataset loaded. {}'", ".", "format", "(", "'(low memory mode enabled)'", "if", "low_memory", "else", "''", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.base_vidor.BaseVidOR._get_anno_files": [[23, 27], ["glob.glob", "os.path.join", "len"], "methods", ["None"], ["", "def", "_get_anno_files", "(", "self", ",", "split", ")", ":", "\n", "        ", "anno_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "anno_rpath", ",", "'{}/*/*.json'", ".", "format", "(", "split", ")", ")", ")", "\n", "assert", "len", "(", "anno_files", ")", ">", "0", ",", "'No annotation file found for \\'{}\\'. Please check if the directory is correct.'", ".", "format", "(", "split", ")", "\n", "return", "anno_files", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.base_vidor.BaseVidOR._get_action_predicates": [[28, 40], ["None"], "methods", ["None"], ["", "def", "_get_action_predicates", "(", "self", ")", ":", "\n", "        ", "actions", "=", "[", "\n", "'watch'", ",", "'bite'", ",", "'kiss'", ",", "'lick'", ",", "'smell'", ",", "'caress'", ",", "'knock'", ",", "'pat'", ",", "\n", "'point_to'", ",", "'squeeze'", ",", "'hold'", ",", "'press'", ",", "'touch'", ",", "'hit'", ",", "'kick'", ",", "\n", "'lift'", ",", "'throw'", ",", "'wave'", ",", "'carry'", ",", "'grab'", ",", "'release'", ",", "'pull'", ",", "\n", "'push'", ",", "'hug'", ",", "'lean_on'", ",", "'ride'", ",", "'chase'", ",", "'get_on'", ",", "'get_off'", ",", "\n", "'hold_hand_of'", ",", "'shake_hand_with'", ",", "'wave_hand_to'", ",", "'speak_to'", ",", "'shout_at'", ",", "'feed'", ",", "\n", "'open'", ",", "'close'", ",", "'use'", ",", "'cut'", ",", "'clean'", ",", "'drive'", ",", "'play(instrument)'", ",", "\n", "]", "\n", "for", "action", "in", "actions", ":", "\n", "            ", "assert", "action", "in", "self", ".", "pred2pid", "\n", "", "return", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.base_vidor.BaseVidOR.get_video_path": [[41, 43], ["os.path.join"], "methods", ["None"], ["", "def", "get_video_path", "(", "self", ",", "vid", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "video_rpath", ",", "self", ".", "annos", "[", "vid", "]", "[", "'video_path'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_target.TargetList.__init__": [[4, 8], ["isinstance", "torch.device"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "target", ")", ":", "\n", "        ", "device", "=", "target", ".", "device", "if", "isinstance", "(", "target", ",", "torch", ".", "Tensor", ")", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "extra_fields", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_target.TargetList.add_field": [[9, 11], ["None"], "methods", ["None"], ["", "def", "add_field", "(", "self", ",", "field", ",", "field_data", ")", ":", "\n", "        ", "self", ".", "extra_fields", "[", "field", "]", "=", "field_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_target.TargetList.get_field": [[12, 14], ["None"], "methods", ["None"], ["", "def", "get_field", "(", "self", ",", "field", ")", ":", "\n", "        ", "return", "self", ".", "extra_fields", "[", "field", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_target.TargetList.has_field": [[15, 17], ["None"], "methods", ["None"], ["", "def", "has_field", "(", "self", ",", "field", ")", ":", "\n", "        ", "return", "field", "in", "self", ".", "extra_fields", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_target.TargetList.fields": [[18, 20], ["list", "list_target.TargetList.extra_fields.keys"], "methods", ["None"], ["", "def", "fields", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "extra_fields", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_target.TargetList._copy_extra_fields": [[21, 24], ["target.extra_fields.items"], "methods", ["None"], ["", "def", "_copy_extra_fields", "(", "self", ",", "target", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "target", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "extra_fields", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_target.TargetList.to": [[26, 33], ["list_target.TargetList", "list_target.TargetList.extra_fields.items", "list_target.TargetList.target.to", "hasattr", "list_target.TargetList.add_field", "v.to.to.to"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.add_field", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to"], ["", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "target", "=", "TargetList", "(", "self", ".", "target", ".", "to", "(", "device", ")", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "v", ",", "\"to\"", ")", ":", "\n", "                ", "v", "=", "v", ".", "to", "(", "device", ")", "\n", "", "target", ".", "add_field", "(", "k", ",", "v", ")", "\n", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_target.TargetList.__getitem__": [[34, 39], ["list_target.TargetList", "list_target.TargetList.extra_fields.items", "list_target.TargetList.add_field"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.add_field"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "target", "=", "TargetList", "(", "self", ".", "target", "[", "item", "]", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "target", ".", "add_field", "(", "k", ",", "v", "[", "item", "]", ")", "\n", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_target.TargetList.__len__": [[40, 42], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "target", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_target.TargetList.copy_with_fields": [[43, 53], ["list_target.TargetList", "isinstance", "list_target.TargetList.has_field", "list_target.TargetList.add_field", "list_target.TargetList.get_field", "KeyError"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.has_field", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.add_field", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.get_field"], ["", "def", "copy_with_fields", "(", "self", ",", "fields", ",", "skip_missing", "=", "False", ")", ":", "\n", "        ", "target", "=", "TargetList", "(", "self", ".", "target", ")", "\n", "if", "not", "isinstance", "(", "fields", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "fields", "=", "[", "fields", "]", "\n", "", "for", "field", "in", "fields", ":", "\n", "            ", "if", "self", ".", "has_field", "(", "field", ")", ":", "\n", "                ", "target", ".", "add_field", "(", "field", ",", "self", ".", "get_field", "(", "field", ")", ")", "\n", "", "elif", "not", "skip_missing", ":", "\n", "                ", "raise", "KeyError", "(", "\"Field '{}' not found in {}\"", ".", "format", "(", "field", ",", "self", ")", ")", "\n", "", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_target.TargetList.__repr__": [[54, 58], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "s", "+=", "\"num_targets={})\"", ".", "format", "(", "len", "(", "self", ")", ")", "\n", "return", "s", "", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_data.DataList.__init__": [[13, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tensors", ",", "image_sizes", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            tensors (tensor)\n            image_sizes (list[tuple[int, int]])\n        \"\"\"", "\n", "self", ".", "tensors", "=", "tensors", "\n", "self", ".", "image_sizes", "=", "image_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_data.DataList.to": [[22, 25], ["list_data.DataList.tensors.to", "list_data.DataList"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "cast_tensor", "=", "self", ".", "tensors", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "DataList", "(", "cast_tensor", ",", "self", ".", "image_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_data.to_data_list": [[27, 71], ["isinstance", "isinstance", "isinstance", "list_data.DataList", "isinstance", "tensors.dim", "tensors.dim", "tuple", "tensors[].new().zero_", "zip", "list_data.DataList", "TypeError", "list", "int", "int", "tuple", "pad_img[].copy_", "max", "len", "tensors[].new", "type", "zip", "math.ceil", "math.ceil"], "function", ["None"], ["", "", "def", "to_data_list", "(", "tensors", ",", "size_divisible", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    tensors can be an ImageList, a torch.Tensor or\n    an iterable of Tensors. It can't be a numpy array.\n    When tensors is an iterable of Tensors, it pads\n    the Tensors with zeros so that they have the same\n    shape\n    \"\"\"", "\n", "if", "isinstance", "(", "tensors", ",", "torch", ".", "Tensor", ")", "and", "size_divisible", ">", "0", ":", "\n", "        ", "tensors", "=", "[", "tensors", "]", "\n", "\n", "", "if", "isinstance", "(", "tensors", ",", "DataList", ")", ":", "\n", "        ", "return", "tensors", "\n", "", "elif", "isinstance", "(", "tensors", ",", "torch", ".", "Tensor", ")", ":", "\n", "# single tensor shape can be inferred", "\n", "        ", "if", "tensors", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "tensors", "=", "tensors", "[", "None", "]", "\n", "", "assert", "tensors", ".", "dim", "(", ")", "==", "4", "\n", "image_sizes", "=", "[", "tensor", ".", "shape", "[", "-", "2", ":", "]", "for", "tensor", "in", "tensors", "]", "\n", "return", "DataList", "(", "tensors", ",", "image_sizes", ")", "\n", "", "elif", "isinstance", "(", "tensors", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "max_size", "=", "tuple", "(", "max", "(", "s", ")", "for", "s", "in", "zip", "(", "*", "[", "img", ".", "shape", "for", "img", "in", "tensors", "]", ")", ")", "\n", "\n", "# TODO Ideally, just remove this and let me model handle arbitrary", "\n", "# input sizs", "\n", "if", "size_divisible", ">", "0", ":", "\n", "            ", "import", "math", "\n", "\n", "stride", "=", "size_divisible", "\n", "max_size", "=", "list", "(", "max_size", ")", "\n", "max_size", "[", "1", "]", "=", "int", "(", "math", ".", "ceil", "(", "max_size", "[", "1", "]", "/", "stride", ")", "*", "stride", ")", "\n", "max_size", "[", "2", "]", "=", "int", "(", "math", ".", "ceil", "(", "max_size", "[", "2", "]", "/", "stride", ")", "*", "stride", ")", "\n", "max_size", "=", "tuple", "(", "max_size", ")", "\n", "\n", "", "batch_shape", "=", "(", "len", "(", "tensors", ")", ",", ")", "+", "max_size", "\n", "batched_imgs", "=", "tensors", "[", "0", "]", ".", "new", "(", "*", "batch_shape", ")", ".", "zero_", "(", ")", "\n", "for", "img", ",", "pad_img", "in", "zip", "(", "tensors", ",", "batched_imgs", ")", ":", "\n", "            ", "pad_img", "[", ":", "img", ".", "shape", "[", "0", "]", ",", ":", "img", ".", "shape", "[", "1", "]", ",", ":", "img", ".", "shape", "[", "2", "]", "]", ".", "copy_", "(", "img", ")", "\n", "\n", "", "image_sizes", "=", "[", "im", ".", "shape", "[", "-", "2", ":", "]", "for", "im", "in", "tensors", "]", "\n", "\n", "return", "DataList", "(", "batched_imgs", ",", "image_sizes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Unsupported type for to_image_list: {}\"", ".", "format", "(", "type", "(", "tensors", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.__init__": [[15, 24], ["dataset.Dataset._load_annotations"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset._load_annotations"], ["def", "__init__", "(", "self", ",", "anno_rpath", ",", "video_rpath", ",", "splits", ")", ":", "\n", "        ", "\"\"\"\n        anno_rpath: the root path of annotations\n        video_rpath: the root path of videos\n        splits: a list of splits in the dataset to load\n        \"\"\"", "\n", "self", ".", "anno_rpath", "=", "anno_rpath", "\n", "self", ".", "video_rpath", "=", "video_rpath", "\n", "self", ".", "_load_annotations", "(", "splits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset._load_annotations": [[25, 60], ["print", "set", "set", "collections.defaultdict", "dict", "sorted", "sorted", "dict", "dict", "dict", "dict", "enumerate", "enumerate", "dataset.Dataset._get_anno_files", "dict", "tqdm.tqdm.tqdm", "dict.items", "dataset.Dataset.annos.update", "dataset.Dataset.split_index[].append", "open", "json.load", "dataset.Dataset._check_anno", "sorted.add", "sorted.add"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.base_vidvrd.BaseVidVRD._get_anno_files", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.update", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.DatasetV1._check_anno"], ["", "def", "_load_annotations", "(", "self", ",", "splits", ")", ":", "\n", "        ", "print", "(", "'loading annotations...'", ")", "\n", "so", "=", "set", "(", ")", "\n", "pred", "=", "set", "(", ")", "\n", "self", ".", "split_index", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "annos", "=", "dict", "(", ")", "\n", "for", "split", "in", "splits", ":", "\n", "            ", "anno_files", "=", "self", ".", "_get_anno_files", "(", "split", ")", "\n", "annos", "=", "dict", "(", ")", "\n", "for", "path", "in", "tqdm", "(", "anno_files", ")", ":", "\n", "                ", "with", "open", "(", "path", ",", "'r'", ")", "as", "fin", ":", "\n", "                    ", "anno", "=", "json", ".", "load", "(", "fin", ")", "\n", "anno", "=", "self", ".", "_check_anno", "(", "anno", ")", "\n", "", "annos", "[", "anno", "[", "'video_id'", "]", "]", "=", "anno", "\n", "", "for", "vid", ",", "anno", "in", "annos", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "split_index", "[", "split", "]", ".", "append", "(", "vid", ")", "\n", "for", "obj", "in", "anno", "[", "'subject/objects'", "]", ":", "\n", "                    ", "so", ".", "add", "(", "obj", "[", "'category'", "]", ")", "\n", "", "for", "rel", "in", "anno", "[", "'relation_instances'", "]", ":", "\n", "                    ", "pred", ".", "add", "(", "rel", "[", "'predicate'", "]", ")", "\n", "", "", "self", ".", "annos", ".", "update", "(", "annos", ")", "\n", "\n", "# build index for subject/object and predicate", "\n", "", "so", "=", "sorted", "(", "so", ")", "\n", "pred", "=", "sorted", "(", "pred", ")", "\n", "self", ".", "soid2so", "=", "dict", "(", ")", "\n", "self", ".", "so2soid", "=", "dict", "(", ")", "\n", "self", ".", "pid2pred", "=", "dict", "(", ")", "\n", "self", ".", "pred2pid", "=", "dict", "(", ")", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "so", ")", ":", "\n", "            ", "self", ".", "soid2so", "[", "i", "]", "=", "name", "\n", "self", ".", "so2soid", "[", "name", "]", "=", "i", "\n", "", "for", "i", ",", "name", "in", "enumerate", "(", "pred", ")", ":", "\n", "            ", "self", ".", "pid2pred", "[", "i", "]", "=", "name", "\n", "self", ".", "pred2pid", "[", "name", "]", "=", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset._check_anno": [[61, 64], ["None"], "methods", ["None"], ["", "", "def", "_check_anno", "(", "self", ",", "anno", ")", ":", "\n", "        ", "assert", "'version'", "not", "in", "anno", "\n", "return", "anno", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset._get_anno_files": [[65, 67], ["None"], "methods", ["None"], ["", "def", "_get_anno_files", "(", "self", ",", "split", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_video_path": [[68, 70], ["None"], "methods", ["None"], ["", "def", "get_video_path", "(", "self", ",", "vid", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset._get_action_predicates": [[71, 73], ["None"], "methods", ["None"], ["", "def", "_get_action_predicates", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_object_num": [[74, 76], ["len"], "methods", ["None"], ["", "def", "get_object_num", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "soid2so", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_object_name": [[77, 79], ["None"], "methods", ["None"], ["", "def", "get_object_name", "(", "self", ",", "cid", ")", ":", "\n", "        ", "return", "self", ".", "soid2so", "[", "cid", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_object_id": [[80, 82], ["None"], "methods", ["None"], ["", "def", "get_object_id", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "so2soid", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_predicate_num": [[83, 85], ["len"], "methods", ["None"], ["", "def", "get_predicate_num", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "pid2pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_predicate_name": [[86, 88], ["None"], "methods", ["None"], ["", "def", "get_predicate_name", "(", "self", ",", "pid", ")", ":", "\n", "        ", "return", "self", ".", "pid2pred", "[", "pid", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_predicate_id": [[89, 91], ["None"], "methods", ["None"], ["", "def", "get_predicate_id", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "pred2pid", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_triplets": [[92, 98], ["set", "dataset.Dataset.get_index", "dataset.Dataset.get_relation_insts", "set.update"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_index", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_relation_insts", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.update"], ["", "def", "get_triplets", "(", "self", ",", "split", ")", ":", "\n", "        ", "triplets", "=", "set", "(", ")", "\n", "for", "vid", "in", "self", ".", "get_index", "(", "split", ")", ":", "\n", "            ", "insts", "=", "self", ".", "get_relation_insts", "(", "vid", ",", "no_traj", "=", "True", ")", "\n", "triplets", ".", "update", "(", "inst", "[", "'triplet'", "]", "for", "inst", "in", "insts", ")", "\n", "", "return", "triplets", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_index": [[99, 112], ["dataset.Dataset.split_index.keys", "Exception", "print"], "methods", ["None"], ["", "def", "get_index", "(", "self", ",", "split", ")", ":", "\n", "        ", "\"\"\"\n        get list of video IDs for a split\n        \"\"\"", "\n", "if", "split", "in", "self", ".", "split_index", ":", "\n", "            ", "return", "self", ".", "split_index", "[", "split", "]", "\n", "", "else", ":", "\n", "            ", "for", "s", "in", "self", ".", "split_index", ".", "keys", "(", ")", ":", "\n", "                ", "if", "split", "in", "s", ":", "\n", "                    ", "print", "(", "'INFO: infer the split name \\'{}\\' in this dataset from \\'{}\\''", ".", "format", "(", "s", ",", "split", ")", ")", "\n", "return", "self", ".", "split_index", "[", "s", "]", "\n", "", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'Unknown split \"{}\" in the loaded dataset'", ".", "format", "(", "split", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_anno": [[113, 118], ["None"], "methods", ["None"], ["", "", "", "def", "get_anno", "(", "self", ",", "vid", ")", ":", "\n", "        ", "\"\"\"\n        get raw annotation for a video\n        \"\"\"", "\n", "return", "self", ".", "annos", "[", "vid", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_object_insts": [[119, 142], ["dataset.Dataset.get_anno", "dict", "collections.defaultdict", "enumerate", "object_insts.append", "str"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.DatasetV1.get_anno"], ["", "def", "get_object_insts", "(", "self", ",", "vid", ")", ":", "\n", "        ", "\"\"\"\n        get the object instances (trajectories) labeled in a video\n        \"\"\"", "\n", "anno", "=", "self", ".", "get_anno", "(", "vid", ")", "\n", "object_insts", "=", "[", "]", "\n", "tid2cls", "=", "dict", "(", ")", "\n", "for", "item", "in", "anno", "[", "'subject/objects'", "]", ":", "\n", "            ", "tid2cls", "[", "item", "[", "'tid'", "]", "]", "=", "item", "[", "'category'", "]", "\n", "", "traj", "=", "defaultdict", "(", "dict", ")", "\n", "for", "fid", ",", "frame", "in", "enumerate", "(", "anno", "[", "'trajectories'", "]", ")", ":", "\n", "            ", "for", "roi", "in", "frame", ":", "\n", "                ", "traj", "[", "roi", "[", "'tid'", "]", "]", "[", "str", "(", "fid", ")", "]", "=", "(", "roi", "[", "'bbox'", "]", "[", "'xmin'", "]", ",", "\n", "roi", "[", "'bbox'", "]", "[", "'ymin'", "]", ",", "\n", "roi", "[", "'bbox'", "]", "[", "'xmax'", "]", ",", "\n", "roi", "[", "'bbox'", "]", "[", "'ymax'", "]", ")", "\n", "", "", "for", "tid", "in", "traj", ":", "\n", "            ", "object_insts", ".", "append", "(", "{", "\n", "'tid'", ":", "tid", ",", "\n", "'category'", ":", "tid2cls", "[", "tid", "]", ",", "\n", "'trajectory'", ":", "traj", "[", "tid", "]", "\n", "}", ")", "\n", "", "return", "object_insts", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_action_insts": [[143, 172], ["dataset.Dataset.get_anno", "dataset.Dataset._get_action_predicates", "action_insts.append", "each_ins_trajectory.append"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.DatasetV1.get_anno", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset._get_action_predicates"], ["", "def", "get_action_insts", "(", "self", ",", "vid", ")", ":", "\n", "        ", "\"\"\"\n        get the action instances labeled in a video\n        \"\"\"", "\n", "anno", "=", "self", ".", "get_anno", "(", "vid", ")", "\n", "action_insts", "=", "[", "]", "\n", "actions", "=", "self", ".", "_get_action_predicates", "(", ")", "\n", "for", "each_ins", "in", "anno", "[", "'relation_instances'", "]", ":", "\n", "            ", "if", "each_ins", "[", "'predicate'", "]", "in", "actions", ":", "\n", "                ", "begin_fid", "=", "each_ins", "[", "'begin_fid'", "]", "\n", "end_fid", "=", "each_ins", "[", "'end_fid'", "]", "\n", "each_ins_trajectory", "=", "[", "]", "\n", "for", "each_traj", "in", "anno", "[", "'trajectories'", "]", "[", "begin_fid", ":", "end_fid", "]", ":", "\n", "                    ", "for", "each_traj_obj", "in", "each_traj", ":", "\n", "                        ", "if", "each_traj_obj", "[", "'tid'", "]", "==", "each_ins", "[", "'subject_tid'", "]", ":", "\n", "                            ", "each_traj_frame", "=", "(", "\n", "each_traj_obj", "[", "'bbox'", "]", "[", "'xmin'", "]", ",", "\n", "each_traj_obj", "[", "'bbox'", "]", "[", "'ymin'", "]", ",", "\n", "each_traj_obj", "[", "'bbox'", "]", "[", "'xmax'", "]", ",", "\n", "each_traj_obj", "[", "'bbox'", "]", "[", "'ymax'", "]", "\n", ")", "\n", "each_ins_trajectory", ".", "append", "(", "each_traj_frame", ")", "\n", "", "", "", "each_ins_action", "=", "{", "\n", "\"category\"", ":", "each_ins", "[", "'predicate'", "]", ",", "\n", "\"duration\"", ":", "(", "begin_fid", ",", "end_fid", ")", ",", "\n", "\"trajectory\"", ":", "each_ins_trajectory", "\n", "}", "\n", "action_insts", ".", "append", "(", "each_ins_action", ")", "\n", "", "", "return", "action_insts", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_relation_insts": [[173, 209], ["dataset.Dataset.get_anno", "dict", "dict", "relation_insts.append", "dict", "trajs.append"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.DatasetV1.get_anno"], ["", "def", "get_relation_insts", "(", "self", ",", "vid", ",", "no_traj", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        get the visual relation instances labeled in a video,\n        no_traj=True will not include trajectories, which is\n        faster.\n        \"\"\"", "\n", "anno", "=", "self", ".", "get_anno", "(", "vid", ")", "\n", "sub_objs", "=", "dict", "(", ")", "\n", "for", "so", "in", "anno", "[", "'subject/objects'", "]", ":", "\n", "            ", "sub_objs", "[", "so", "[", "'tid'", "]", "]", "=", "so", "[", "'category'", "]", "\n", "", "if", "not", "no_traj", ":", "\n", "            ", "trajs", "=", "[", "]", "\n", "for", "frame", "in", "anno", "[", "'trajectories'", "]", ":", "\n", "                ", "bboxes", "=", "dict", "(", ")", "\n", "for", "bbox", "in", "frame", ":", "\n", "                    ", "bboxes", "[", "bbox", "[", "'tid'", "]", "]", "=", "(", "bbox", "[", "'bbox'", "]", "[", "'xmin'", "]", ",", "\n", "bbox", "[", "'bbox'", "]", "[", "'ymin'", "]", ",", "\n", "bbox", "[", "'bbox'", "]", "[", "'xmax'", "]", ",", "\n", "bbox", "[", "'bbox'", "]", "[", "'ymax'", "]", ")", "\n", "", "trajs", ".", "append", "(", "bboxes", ")", "\n", "", "", "relation_insts", "=", "[", "]", "\n", "for", "anno_inst", "in", "anno", "[", "'relation_instances'", "]", ":", "\n", "            ", "inst", "=", "dict", "(", ")", "\n", "inst", "[", "'triplet'", "]", "=", "(", "sub_objs", "[", "anno_inst", "[", "'subject_tid'", "]", "]", ",", "\n", "anno_inst", "[", "'predicate'", "]", ",", "\n", "sub_objs", "[", "anno_inst", "[", "'object_tid'", "]", "]", ")", "\n", "inst", "[", "'subject_tid'", "]", "=", "anno_inst", "[", "'subject_tid'", "]", "\n", "inst", "[", "'object_tid'", "]", "=", "anno_inst", "[", "'object_tid'", "]", "\n", "inst", "[", "'duration'", "]", "=", "(", "anno_inst", "[", "'begin_fid'", "]", ",", "anno_inst", "[", "'end_fid'", "]", ")", "\n", "if", "not", "no_traj", ":", "\n", "                ", "inst", "[", "'sub_traj'", "]", "=", "[", "bboxes", "[", "anno_inst", "[", "'subject_tid'", "]", "]", "for", "bboxes", "in", "\n", "trajs", "[", "inst", "[", "'duration'", "]", "[", "0", "]", ":", "inst", "[", "'duration'", "]", "[", "1", "]", "]", "]", "\n", "inst", "[", "'obj_traj'", "]", "=", "[", "bboxes", "[", "anno_inst", "[", "'object_tid'", "]", "]", "for", "bboxes", "in", "\n", "trajs", "[", "inst", "[", "'duration'", "]", "[", "0", "]", ":", "inst", "[", "'duration'", "]", "[", "1", "]", "]", "]", "\n", "", "relation_insts", ".", "append", "(", "inst", ")", "\n", "", "return", "relation_insts", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.DatasetV1.__init__": [[218, 230], ["dataset.DatasetV1._load_annotations"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset._load_annotations"], ["def", "__init__", "(", "self", ",", "anno_rpath", ",", "video_rpath", ",", "splits", ",", "low_memory", ")", ":", "\n", "        ", "\"\"\"\n        anno_rpath: the root path of annotations\n        video_rpath: the root path of videos\n        splits: a list of splits in the dataset to load\n        low_memory: if true, do not load memory-costly part \n                    of annotations (trajectories) into memory\n        \"\"\"", "\n", "self", ".", "anno_rpath", "=", "anno_rpath", "\n", "self", ".", "video_rpath", "=", "video_rpath", "\n", "self", ".", "low_memory", "=", "low_memory", "\n", "self", ".", "_load_annotations", "(", "splits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.DatasetV1._check_anno": [[231, 236], ["None"], "methods", ["None"], ["", "def", "_check_anno", "(", "self", ",", "anno", ")", ":", "\n", "        ", "assert", "'version'", "in", "anno", "and", "anno", "[", "'version'", "]", "==", "'VERSION 1.0'", "\n", "if", "self", ".", "low_memory", ":", "\n", "            ", "del", "anno", "[", "'trajectories'", "]", "\n", "", "return", "anno", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.DatasetV1.get_anno": [[237, 255], ["dataset.DatasetV1.split_index.items", "[].replace", "KeyError", "open", "json.load", "os.path.join"], "methods", ["None"], ["", "def", "get_anno", "(", "self", ",", "vid", ")", ":", "\n", "        ", "\"\"\"\n        get raw annotation for a video\n        \"\"\"", "\n", "if", "self", ".", "low_memory", ":", "\n", "            ", "for", "key", ",", "val", "in", "self", ".", "split_index", ".", "items", "(", ")", ":", "\n", "                ", "if", "vid", "in", "val", ":", "\n", "                    ", "split", "=", "key", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "raise", "KeyError", "(", "'{} not found in any split in the loaded dataset'", ".", "format", "(", "vid", ")", ")", "\n", "\n", "", "anno_relative_path", "=", "self", ".", "annos", "[", "vid", "]", "[", "'video_path'", "]", ".", "replace", "(", "'.mp4'", ",", "'.json'", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "anno_rpath", ",", "split", ",", "anno_relative_path", ")", ",", "'r'", ")", "as", "fin", ":", "\n", "                ", "anno", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "return", "anno", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "annos", "[", "vid", "]", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.base_vidvrd.BaseVidVRD.__init__": [[12, 20], ["dataset.Dataset.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.ImageEncoder.__init__"], ["def", "__init__", "(", "self", ",", "anno_rpath", ",", "video_rpath", ",", "splits", ")", ":", "\n", "        ", "\"\"\"\n        anno_rpath: the root path of annotations\n        video_rpath: the root path of videos\n        splits: a list of splits in the dataset to load\n        \"\"\"", "\n", "super", "(", "BaseVidVRD", ",", "self", ")", ".", "__init__", "(", "anno_rpath", ",", "video_rpath", ",", "splits", ")", "\n", "print", "(", "'VidVRD dataset loaded.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.base_vidvrd.BaseVidVRD._get_anno_files": [[21, 26], ["glob.glob", "os.path.join", "len"], "methods", ["None"], ["", "def", "_get_anno_files", "(", "self", ",", "split", ")", ":", "\n", "        ", "anno_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "anno_rpath", ",", "'{}/*.json'", ".", "format", "(", "split", ")", ")", ")", "\n", "\n", "assert", "len", "(", "anno_files", ")", ">", "0", ",", "'No annotation file found. Please check if the directory is correct.'", "\n", "return", "anno_files", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.base_vidvrd.BaseVidVRD.get_video_path": [[27, 43], ["os.path.join", "glob.glob", "os.path.join", "Exception", "os.path.join"], "methods", ["None"], ["", "def", "get_video_path", "(", "self", ",", "vid", ",", "imagenet_struture", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        True if the directory videos uses imagenet struture\n        \"\"\"", "\n", "if", "imagenet_struture", ":", "\n", "            ", "if", "'train'", "in", "vid", ":", "\n", "                ", "path", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "video_rpath", ",", "\n", "'Data/VID/snippets/train/*/{}.mp4'", ".", "format", "(", "vid", ")", ")", ")", "[", "0", "]", "\n", "", "elif", "'val'", "in", "vid", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "video_rpath", ",", "\n", "'Data/VID/snippets/val/{}.mp4'", ".", "format", "(", "vid", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'Unknown video ID {}'", ".", "format", "(", "vid", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "video_rpath", ",", "'{}.mp4'", ".", "format", "(", "vid", ")", ")", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.collate_batch.BatchCollator.__call__": [[10, 17], ["list", "zip"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "transposed_batch", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "# inputs = to_data_list(transposed_batch[0])", "\n", "inputs", "=", "transposed_batch", "[", "0", "]", "\n", "targets", "=", "transposed_batch", "[", "1", "]", "\n", "index", "=", "transposed_batch", "[", "2", "]", "\n", "return", "inputs", ",", "targets", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.collate_batch.BBoxAugCollator.__call__": [[26, 28], ["list", "zip"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.__init__": [[4, 8], ["isinstance", "torch.device"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "feat", ")", ":", "\n", "        ", "device", "=", "feat", ".", "device", "if", "isinstance", "(", "feat", ",", "torch", ".", "Tensor", ")", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "self", ".", "features", "=", "feat", "\n", "self", ".", "extra_fields", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.add_field": [[9, 11], ["None"], "methods", ["None"], ["", "def", "add_field", "(", "self", ",", "field", ",", "field_data", ")", ":", "\n", "        ", "self", ".", "extra_fields", "[", "field", "]", "=", "field_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.get_field": [[12, 14], ["None"], "methods", ["None"], ["", "def", "get_field", "(", "self", ",", "field", ")", ":", "\n", "        ", "return", "self", ".", "extra_fields", "[", "field", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.has_field": [[15, 17], ["None"], "methods", ["None"], ["", "def", "has_field", "(", "self", ",", "field", ")", ":", "\n", "        ", "return", "field", "in", "self", ".", "extra_fields", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.fields": [[18, 20], ["list", "list_pair.PairList.extra_fields.keys"], "methods", ["None"], ["", "def", "fields", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "extra_fields", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList._copy_extra_fields": [[21, 24], ["feat.extra_fields.items"], "methods", ["None"], ["", "def", "_copy_extra_fields", "(", "self", ",", "feat", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "feat", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "extra_fields", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to": [[26, 33], ["list_pair.PairList", "list_pair.PairList.extra_fields.items", "list_pair.PairList.features.to", "hasattr", "list_pair.PairList.add_field", "v.to.to.to"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.add_field", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to"], ["", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "feat", "=", "PairList", "(", "self", ".", "features", ".", "to", "(", "device", ")", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "v", ",", "\"to\"", ")", ":", "\n", "                ", "v", "=", "v", ".", "to", "(", "device", ")", "\n", "", "feat", ".", "add_field", "(", "k", ",", "v", ")", "\n", "", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.__getitem__": [[34, 39], ["list_pair.PairList", "list_pair.PairList.extra_fields.items", "list_pair.PairList.add_field"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.add_field"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "feat", "=", "PairList", "(", "self", ".", "features", "[", "item", "]", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "feat", ".", "add_field", "(", "k", ",", "v", "[", "item", "]", ")", "\n", "", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.__len__": [[40, 42], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "features", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.copy_with_fields": [[43, 53], ["list_pair.PairList", "isinstance", "list_pair.PairList.has_field", "list_pair.PairList.add_field", "list_pair.PairList.get_field", "KeyError"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.has_field", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.add_field", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.get_field"], ["", "def", "copy_with_fields", "(", "self", ",", "fields", ",", "skip_missing", "=", "False", ")", ":", "\n", "        ", "feat", "=", "PairList", "(", "self", ".", "features", ")", "\n", "if", "not", "isinstance", "(", "fields", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "fields", "=", "[", "fields", "]", "\n", "", "for", "field", "in", "fields", ":", "\n", "            ", "if", "self", ".", "has_field", "(", "field", ")", ":", "\n", "                ", "feat", ".", "add_field", "(", "field", ",", "self", ".", "get_field", "(", "field", ")", ")", "\n", "", "elif", "not", "skip_missing", ":", "\n", "                ", "raise", "KeyError", "(", "\"Field '{}' not found in {}\"", ".", "format", "(", "field", ",", "self", ")", ")", "\n", "", "", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.__repr__": [[54, 58], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "s", "+=", "\"num_feats={})\"", ".", "format", "(", "len", "(", "self", ")", ")", "\n", "return", "s", "", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.samplers.distributed.DistributedSampler.__init__": [[25, 41], ["int", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "math.ceil", "torch.is_available", "torch.is_available", "RuntimeError", "torch.is_available", "torch.is_available", "RuntimeError", "len"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.get_world_size", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.get_world_size", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.get_rank", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.get_rank"], ["def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "num_samples", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "*", "1.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.samplers.distributed.DistributedSampler.__iter__": [[42, 61], ["iter", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "# deterministically shuffle based on epoch", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.samplers.distributed.DistributedSampler.__len__": [[62, 64], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.samplers.distributed.DistributedSampler.set_epoch": [[65, 67], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.samplers.grouped_batch_sampler.GroupedBatchSampler.__init__": [[24, 39], ["torch.as_tensor", "isinstance", "ValueError", "grouped_batch_sampler.GroupedBatchSampler.group_ids.dim", "torch.unique().sort", "torch.unique"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", "=", "False", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "sampler", ",", "Sampler", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"sampler should be an instance of \"", "\n", "\"torch.utils.data.Sampler, but got sampler={}\"", ".", "format", "(", "sampler", ")", "\n", ")", "\n", "", "self", ".", "sampler", "=", "sampler", "\n", "self", ".", "group_ids", "=", "torch", ".", "as_tensor", "(", "group_ids", ")", "\n", "assert", "self", ".", "group_ids", ".", "dim", "(", ")", "==", "1", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "drop_uneven", "=", "drop_uneven", "\n", "\n", "self", ".", "groups", "=", "torch", ".", "unique", "(", "self", ".", "group_ids", ")", ".", "sort", "(", "0", ")", "[", "0", "]", "\n", "\n", "self", ".", "_can_reuse_batches", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.samplers.grouped_batch_sampler.GroupedBatchSampler._prepare_batches": [[40, 101], ["len", "torch.as_tensor", "torch.full", "torch.arange", "tuple", "torch.as_tensor", "[].tolist", "list", "len", "c.split", "itertools.chain.from_iterable", "t[].item", "merged[].tolist", "enumerate", "torch.as_tensor.tolist", "torch.as_tensor.sort", "len", "kept.append", "s.sort"], "methods", ["None"], ["", "def", "_prepare_batches", "(", "self", ")", ":", "\n", "        ", "dataset_size", "=", "len", "(", "self", ".", "group_ids", ")", "\n", "# get the sampled indices from the sampler", "\n", "sampled_ids", "=", "torch", ".", "as_tensor", "(", "list", "(", "self", ".", "sampler", ")", ")", "\n", "# potentially not all elements of the dataset were sampled", "\n", "# by the sampler (e.g., DistributedSampler).", "\n", "# construct a tensor which contains -1 if the element was", "\n", "# not sampled, and a non-negative number indicating the", "\n", "# order where the element was sampled.", "\n", "# for example. if sampled_ids = [3, 1] and dataset_size = 5,", "\n", "# the order is [-1, 1, -1, 0, -1]", "\n", "order", "=", "torch", ".", "full", "(", "(", "dataset_size", ",", ")", ",", "-", "1", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "order", "[", "sampled_ids", "]", "=", "torch", ".", "arange", "(", "len", "(", "sampled_ids", ")", ")", "\n", "\n", "# get a mask with the elements that were sampled", "\n", "mask", "=", "order", ">=", "0", "\n", "\n", "# find the elements that belong to each individual cluster", "\n", "clusters", "=", "[", "(", "self", ".", "group_ids", "==", "i", ")", "&", "mask", "for", "i", "in", "self", ".", "groups", "]", "\n", "# get relative order of the elements inside each cluster", "\n", "# that follows the order from the sampler", "\n", "relative_order", "=", "[", "order", "[", "cluster", "]", "for", "cluster", "in", "clusters", "]", "\n", "# with the relative order, find the absolute order in the", "\n", "# sampled space", "\n", "permutation_ids", "=", "[", "s", "[", "s", ".", "sort", "(", ")", "[", "1", "]", "]", "for", "s", "in", "relative_order", "]", "\n", "# permute each cluster so that they follow the order from", "\n", "# the sampler", "\n", "permuted_clusters", "=", "[", "sampled_ids", "[", "idx", "]", "for", "idx", "in", "permutation_ids", "]", "\n", "\n", "# splits each cluster in batch_size, and merge as a list of tensors", "\n", "splits", "=", "[", "c", ".", "split", "(", "self", ".", "batch_size", ")", "for", "c", "in", "permuted_clusters", "]", "\n", "merged", "=", "tuple", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "splits", ")", ")", "\n", "\n", "# now each batch internally has the right order, but", "\n", "# they are grouped by clusters. Find the permutation between", "\n", "# different batches that brings them as close as possible to", "\n", "# the order that we have in the sampler. For that, we will consider the", "\n", "# ordering as coming from the first element of each batch, and sort", "\n", "# correspondingly", "\n", "first_element_of_batch", "=", "[", "t", "[", "0", "]", ".", "item", "(", ")", "for", "t", "in", "merged", "]", "\n", "# get and inverse mapping from sampled indices and the position where", "\n", "# they occur (as returned by the sampler)", "\n", "inv_sampled_ids_map", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "enumerate", "(", "sampled_ids", ".", "tolist", "(", ")", ")", "}", "\n", "# from the first element in each batch, get a relative ordering", "\n", "first_index_of_batch", "=", "torch", ".", "as_tensor", "(", "\n", "[", "inv_sampled_ids_map", "[", "s", "]", "for", "s", "in", "first_element_of_batch", "]", "\n", ")", "\n", "\n", "# permute the batches so that they approximately follow the order", "\n", "# from the sampler", "\n", "permutation_order", "=", "first_index_of_batch", ".", "sort", "(", "0", ")", "[", "1", "]", ".", "tolist", "(", ")", "\n", "# finally, permute the batches", "\n", "batches", "=", "[", "merged", "[", "i", "]", ".", "tolist", "(", ")", "for", "i", "in", "permutation_order", "]", "\n", "\n", "if", "self", ".", "drop_uneven", ":", "\n", "            ", "kept", "=", "[", "]", "\n", "for", "batch", "in", "batches", ":", "\n", "                ", "if", "len", "(", "batch", ")", "==", "self", ".", "batch_size", ":", "\n", "                    ", "kept", ".", "append", "(", "batch", ")", "\n", "", "", "batches", "=", "kept", "\n", "", "return", "batches", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.samplers.grouped_batch_sampler.GroupedBatchSampler.__iter__": [[102, 110], ["iter", "grouped_batch_sampler.GroupedBatchSampler._prepare_batches"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.samplers.grouped_batch_sampler.GroupedBatchSampler._prepare_batches"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_can_reuse_batches", ":", "\n", "            ", "batches", "=", "self", ".", "_batches", "\n", "self", ".", "_can_reuse_batches", "=", "False", "\n", "", "else", ":", "\n", "            ", "batches", "=", "self", ".", "_prepare_batches", "(", ")", "\n", "", "self", ".", "_batches", "=", "batches", "\n", "return", "iter", "(", "batches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.samplers.grouped_batch_sampler.GroupedBatchSampler.__len__": [[111, 116], ["len", "hasattr", "grouped_batch_sampler.GroupedBatchSampler._prepare_batches"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.samplers.grouped_batch_sampler.GroupedBatchSampler._prepare_batches"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"_batches\"", ")", ":", "\n", "            ", "self", ".", "_batches", "=", "self", ".", "_prepare_batches", "(", ")", "\n", "self", ".", "_can_reuse_batches", "=", "True", "\n", "", "return", "len", "(", "self", ".", "_batches", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.samplers.iteration_based_batch_sampler.IterationBasedBatchSampler.__init__": [[11, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "batch_sampler", ",", "num_iterations", ",", "start_iter", "=", "0", ")", ":", "\n", "        ", "self", ".", "batch_sampler", "=", "batch_sampler", "\n", "self", ".", "num_iterations", "=", "num_iterations", "\n", "self", ".", "start_iter", "=", "start_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.samplers.iteration_based_batch_sampler.IterationBasedBatchSampler.__iter__": [[16, 29], ["hasattr", "iteration_based_batch_sampler.IterationBasedBatchSampler.batch_sampler.sampler.set_epoch"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.samplers.distributed.DistributedSampler.set_epoch"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "iteration", "=", "self", ".", "start_iter", "\n", "while", "iteration", "<=", "self", ".", "num_iterations", ":", "\n", "# if the underlying sampler has a set_epoch method, like", "\n", "# DistributedSampler, used for making each process see", "\n", "# a different split of the dataset, then set it", "\n", "            ", "if", "hasattr", "(", "self", ".", "batch_sampler", ".", "sampler", ",", "\"set_epoch\"", ")", ":", "\n", "                ", "self", ".", "batch_sampler", ".", "sampler", ".", "set_epoch", "(", "iteration", ")", "\n", "", "for", "batch", "in", "self", ".", "batch_sampler", ":", "\n", "                ", "iteration", "+=", "1", "\n", "if", "iteration", ">", "self", ".", "num_iterations", ":", "\n", "                    ", "break", "\n", "", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.samplers.iteration_based_batch_sampler.IterationBasedBatchSampler.__len__": [[30, 32], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_iterations", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.transforms.transforms.Compose.__init__": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.transforms.transforms.Compose.__call__": [[13, 17], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "image", ",", "target", "=", "t", "(", "image", ",", "target", ")", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.transforms.transforms.Compose.__repr__": [[18, 25], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "\"\\n\"", "\n", "format_string", "+=", "\"    {0}\"", ".", "format", "(", "t", ")", "\n", "", "format_string", "+=", "\"\\n)\"", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.transforms.transforms.Resize.__init__": [[28, 33], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_size", ",", "max_size", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "min_size", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "min_size", "=", "(", "min_size", ",", ")", "\n", "", "self", ".", "min_size", "=", "min_size", "\n", "self", ".", "max_size", "=", "max_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.transforms.transforms.Resize.get_size": [[35, 56], ["random.choice", "float", "float", "int", "int", "min", "max", "int", "round"], "methods", ["None"], ["", "def", "get_size", "(", "self", ",", "image_size", ")", ":", "\n", "        ", "w", ",", "h", "=", "image_size", "\n", "size", "=", "random", ".", "choice", "(", "self", ".", "min_size", ")", "\n", "max_size", "=", "self", ".", "max_size", "\n", "if", "max_size", "is", "not", "None", ":", "\n", "            ", "min_original_size", "=", "float", "(", "min", "(", "(", "w", ",", "h", ")", ")", ")", "\n", "max_original_size", "=", "float", "(", "max", "(", "(", "w", ",", "h", ")", ")", ")", "\n", "if", "max_original_size", "/", "min_original_size", "*", "size", ">", "max_size", ":", "\n", "                ", "size", "=", "int", "(", "round", "(", "max_size", "*", "min_original_size", "/", "max_original_size", ")", ")", "\n", "\n", "", "", "if", "(", "w", "<=", "h", "and", "w", "==", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "size", ")", ":", "\n", "            ", "return", "(", "h", ",", "w", ")", "\n", "\n", "", "if", "w", "<", "h", ":", "\n", "            ", "ow", "=", "size", "\n", "oh", "=", "int", "(", "size", "*", "h", "/", "w", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "size", "\n", "ow", "=", "int", "(", "size", "*", "w", "/", "h", ")", "\n", "\n", "", "return", "(", "oh", ",", "ow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.transforms.transforms.Resize.__call__": [[57, 64], ["transforms.Resize.get_size", "torchvision.transforms.functional.resize", "target.resize.resize.resize"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.transforms.transforms.Resize.get_size"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", "=", "None", ")", ":", "\n", "        ", "size", "=", "self", ".", "get_size", "(", "image", ".", "size", ")", "\n", "image", "=", "F", ".", "resize", "(", "image", ",", "size", ")", "\n", "if", "target", "is", "None", ":", "\n", "            ", "return", "image", "\n", "", "target", "=", "target", ".", "resize", "(", "image", ".", "size", ")", "\n", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.transforms.transforms.RandomHorizontalFlip.__init__": [[67, 69], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.transforms.transforms.RandomHorizontalFlip.__call__": [[70, 75], ["random.random", "torchvision.transforms.functional.hflip", "target.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "image", "=", "F", ".", "hflip", "(", "image", ")", "\n", "target", "=", "target", ".", "transpose", "(", "0", ")", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.transforms.transforms.RandomVerticalFlip.__init__": [[77, 79], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.transforms.transforms.RandomVerticalFlip.__call__": [[80, 85], ["random.random", "torchvision.transforms.functional.vflip", "target.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "image", "=", "F", ".", "vflip", "(", "image", ")", "\n", "target", "=", "target", ".", "transpose", "(", "1", ")", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.transforms.transforms.ColorJitter.__init__": [[87, 98], ["torchvision.transforms.ColorJitter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "brightness", "=", "None", ",", "\n", "contrast", "=", "None", ",", "\n", "saturation", "=", "None", ",", "\n", "hue", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "color_jitter", "=", "torchvision", ".", "transforms", ".", "ColorJitter", "(", "\n", "brightness", "=", "brightness", ",", "\n", "contrast", "=", "contrast", ",", "\n", "saturation", "=", "saturation", ",", "\n", "hue", "=", "hue", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.transforms.transforms.ColorJitter.__call__": [[99, 102], ["transforms.ColorJitter.color_jitter"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "image", "=", "self", ".", "color_jitter", "(", "image", ")", "\n", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.transforms.transforms.ToTensor.__call__": [[105, 107], ["torchvision.transforms.functional.to_tensor"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "return", "F", ".", "to_tensor", "(", "image", ")", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.transforms.transforms.Normalize.__init__": [[110, 114], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ",", "to_bgr255", "=", "True", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "to_bgr255", "=", "to_bgr255", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.transforms.transforms.Normalize.__call__": [[115, 123], ["torchvision.transforms.functional.normalize"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "to_bgr255", ":", "\n", "            ", "image", "=", "image", "*", "255", "\n", "# image = image[[2, 1, 0]] * 255", "\n", "", "image", "=", "F", ".", "normalize", "(", "image", ",", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "if", "target", "is", "None", ":", "\n", "            ", "return", "image", "\n", "", "return", "image", ",", "target", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.transforms.build.build_transforms": [[4, 46], ["transforms.Normalize", "transforms.ColorJitter", "transforms.Compose", "transforms.Resize", "transforms.ToTensor"], "function", ["None"], ["from", "torch", ".", "utils", ".", "data", "import", "DataLoader", "\n", "from", ".", "import", "samplers", "\n", "from", ".", "transforms", "import", "build_transforms", "\n", "from", ".", "collate_batch", "import", "BatchCollator", "\n", "from", "lib", ".", "utils", ".", "comm", "import", "get_world_size", ",", "get_rank", "\n", "from", ".", "vrdataset", "import", "VRDataset", "\n", "\n", "def", "make_data_sampler", "(", "dataset", ",", "shuffle", ",", "distributed", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "return", "samplers", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "shuffle", ")", "\n", "", "if", "shuffle", ":", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "RandomSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SequentialSampler", "(", "dataset", ")", "\n", "", "return", "sampler", "\n", "\n", "", "def", "_quantize", "(", "x", ",", "bins", ")", ":", "\n", "    ", "bins", "=", "copy", ".", "copy", "(", "bins", ")", "\n", "bins", "=", "sorted", "(", "bins", ")", "\n", "quantized", "=", "list", "(", "map", "(", "lambda", "y", ":", "bisect", ".", "bisect_right", "(", "bins", ",", "y", ")", ",", "x", ")", ")", "\n", "return", "quantized", "\n", "\n", "", "def", "_compute_aspect_ratios", "(", "dataset", ")", ":", "\n", "    ", "aspect_ratios", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "img_info", "=", "dataset", ".", "get_img_info", "(", "i", ")", "\n", "aspect_ratio", "=", "float", "(", "img_info", "[", "\"height\"", "]", ")", "/", "float", "(", "img_info", "[", "\"width\"", "]", ")", "\n", "aspect_ratios", ".", "append", "(", "aspect_ratio", ")", "\n", "", "return", "aspect_ratios", "\n", "\n", "\n", "", "def", "make_batch_data_sampler", "(", "\n", "dataset", ",", "sampler", ",", "aspect_grouping", ",", "images_per_batch", ",", "num_iters", "=", "None", ",", "start_iter", "=", "0", "\n", ")", ":", "\n", "    ", "if", "aspect_grouping", ":", "\n", "        ", "if", "not", "isinstance", "(", "aspect_grouping", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "aspect_grouping", "=", "[", "aspect_grouping", "]", "\n", "", "aspect_ratios", "=", "_compute_aspect_ratios", "(", "dataset", ")", "\n", "group_ids", "=", "_quantize", "(", "aspect_ratios", ",", "aspect_grouping", ")", "\n", "batch_sampler", "=", "samplers", ".", "GroupedBatchSampler", "(", "\n", "sampler", ",", "group_ids", ",", "images_per_batch", ",", "drop_uneven", "=", "False", "\n", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory.Trajectory.__init__": [[16, 30], ["collections.deque", "len", "dlib.drectangle"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "pstart", ",", "pend", ",", "rois", ",", "score", ",", "category", ",", "classeme", ",", "vsig", "=", "None", ",", "gt_trackid", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"\n        bbox: drectangle\n        \"\"\"", "\n", "assert", "len", "(", "rois", ")", "==", "pend", "-", "pstart", "\n", "self", ".", "pstart", "=", "pstart", "\n", "self", ".", "pend", "=", "pend", "\n", "self", ".", "rois", "=", "deque", "(", "drectangle", "(", "*", "roi", ")", "for", "roi", "in", "rois", ")", "\n", "self", ".", "score", "=", "score", "\n", "self", ".", "category", "=", "category", "\n", "self", ".", "classeme", "=", "classeme", "\n", "# video signature", "\n", "self", ".", "vsig", "=", "vsig", "\n", "self", ".", "gt_trackid", "=", "gt_trackid", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory.Trajectory.__lt__": [[31, 33], ["None"], "methods", ["None"], ["", "def", "__lt__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "score", "<", "other", ".", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory.Trajectory.head": [[34, 36], ["None"], "methods", ["None"], ["", "def", "head", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "rois", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory.Trajectory.tail": [[37, 39], ["None"], "methods", ["None"], ["", "def", "tail", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "rois", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory.Trajectory.at": [[40, 46], ["None"], "methods", ["None"], ["", "def", "at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the i_th bounding box\n        Support fancy indexing\n        \"\"\"", "\n", "return", "self", ".", "rois", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory.Trajectory.roi_at": [[47, 52], ["None"], "methods", ["None"], ["", "def", "roi_at", "(", "self", ",", "p", ")", ":", "\n", "        ", "\"\"\"\n        Return the bounding box at frame p\n        \"\"\"", "\n", "return", "self", ".", "rois", "[", "p", "-", "self", ".", "pstart", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory.Trajectory.bbox_at": [[53, 59], ["roi.left", "roi.top", "roi.width", "roi.height"], "methods", ["None"], ["", "def", "bbox_at", "(", "self", ",", "p", ")", ":", "\n", "        ", "\"\"\"\n        return bbox in cv2 format\n        \"\"\"", "\n", "roi", "=", "self", ".", "rois", "[", "p", "-", "self", ".", "pstart", "]", "\n", "return", "(", "roi", ".", "left", "(", ")", ",", "roi", ".", "top", "(", ")", ",", "roi", ".", "width", "(", ")", ",", "roi", ".", "height", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory.Trajectory.length": [[60, 62], ["None"], "methods", ["None"], ["", "def", "length", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pend", "-", "self", ".", "pstart", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory.Trajectory.predict": [[63, 71], ["trajectory.Trajectory.rois.appendleft", "trajectory.Trajectory.rois.append"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "roi", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "if", "reverse", ":", "\n", "            ", "self", ".", "rois", ".", "appendleft", "(", "roi", ")", "\n", "self", ".", "pstart", "-=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "rois", ".", "append", "(", "roi", ")", "\n", "self", ".", "pend", "+=", "1", "\n", "", "return", "roi", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory.Trajectory.serialize": [[72, 83], ["dict", "int", "int", "float", "int", "float", "bbox.left", "bbox.top", "bbox.right", "bbox.bottom"], "methods", ["None"], ["", "def", "serialize", "(", "self", ")", ":", "\n", "        ", "obj", "=", "dict", "(", ")", "\n", "obj", "[", "'pstart'", "]", "=", "int", "(", "self", ".", "pstart", ")", "\n", "obj", "[", "'pend'", "]", "=", "int", "(", "self", ".", "pend", ")", "\n", "obj", "[", "'rois'", "]", "=", "[", "(", "bbox", ".", "left", "(", ")", ",", "bbox", ".", "top", "(", ")", ",", "bbox", ".", "right", "(", ")", ",", "bbox", ".", "bottom", "(", ")", ")", "for", "bbox", "in", "self", ".", "rois", "]", "\n", "obj", "[", "'score'", "]", "=", "float", "(", "self", ".", "score", ")", "\n", "obj", "[", "'category'", "]", "=", "int", "(", "self", ".", "category", ")", "\n", "obj", "[", "'classeme'", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "self", ".", "classeme", "]", "\n", "obj", "[", "'vsig'", "]", "=", "self", ".", "vsig", "\n", "obj", "[", "'gt_trackid'", "]", "=", "self", ".", "gt_trackid", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory._intersect": [[85, 108], ["numpy.zeros", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "range", "numpy.maximum.outer", "numpy.minimum.outer", "numpy.subtract", "np.empty.clip", "numpy.maximum.outer", "numpy.minimum.outer", "numpy.subtract", "np.empty.clip", "numpy.multiply"], "function", ["None"], ["", "", "def", "_intersect", "(", "bboxes1", ",", "bboxes2", ")", ":", "\n", "    ", "\"\"\"\n    bboxes: t x n x 4\n    \"\"\"", "\n", "assert", "bboxes1", ".", "shape", "[", "0", "]", "==", "bboxes2", ".", "shape", "[", "0", "]", "\n", "t", "=", "bboxes1", ".", "shape", "[", "0", "]", "\n", "inters", "=", "np", ".", "zeros", "(", "(", "bboxes1", ".", "shape", "[", "1", "]", ",", "bboxes2", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "_min", "=", "np", ".", "empty", "(", "(", "bboxes1", ".", "shape", "[", "1", "]", ",", "bboxes2", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "_max", "=", "np", ".", "empty", "(", "(", "bboxes1", ".", "shape", "[", "1", "]", ",", "bboxes2", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "w", "=", "np", ".", "empty", "(", "(", "bboxes1", ".", "shape", "[", "1", "]", ",", "bboxes2", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "h", "=", "np", ".", "empty", "(", "(", "bboxes1", ".", "shape", "[", "1", "]", ",", "bboxes2", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "t", ")", ":", "\n", "        ", "np", ".", "maximum", ".", "outer", "(", "bboxes1", "[", "i", ",", ":", ",", "0", "]", ",", "bboxes2", "[", "i", ",", ":", ",", "0", "]", ",", "out", "=", "_min", ")", "\n", "np", ".", "minimum", ".", "outer", "(", "bboxes1", "[", "i", ",", ":", ",", "2", "]", ",", "bboxes2", "[", "i", ",", ":", ",", "2", "]", ",", "out", "=", "_max", ")", "\n", "np", ".", "subtract", "(", "_max", "+", "1", ",", "_min", ",", "out", "=", "w", ")", "\n", "w", ".", "clip", "(", "min", "=", "0", ",", "out", "=", "w", ")", "\n", "np", ".", "maximum", ".", "outer", "(", "bboxes1", "[", "i", ",", ":", ",", "1", "]", ",", "bboxes2", "[", "i", ",", ":", ",", "1", "]", ",", "out", "=", "_min", ")", "\n", "np", ".", "minimum", ".", "outer", "(", "bboxes1", "[", "i", ",", ":", ",", "3", "]", ",", "bboxes2", "[", "i", ",", ":", ",", "3", "]", ",", "out", "=", "_max", ")", "\n", "np", ".", "subtract", "(", "_max", "+", "1", ",", "_min", ",", "out", "=", "h", ")", "\n", "h", ".", "clip", "(", "min", "=", "0", ",", "out", "=", "h", ")", "\n", "np", ".", "multiply", "(", "w", ",", "h", ",", "out", "=", "w", ")", "\n", "inters", "+=", "w", "\n", "", "return", "inters", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory._union": [[110, 125], ["id", "id", "numpy.sum", "numpy.add.outer", "numpy.sum", "numpy.sum", "numpy.add.outer"], "function", ["None"], ["", "def", "_union", "(", "bboxes1", ",", "bboxes2", ")", ":", "\n", "    ", "if", "id", "(", "bboxes1", ")", "==", "id", "(", "bboxes2", ")", ":", "\n", "        ", "w", "=", "bboxes1", "[", ":", ",", ":", ",", "2", "]", "-", "bboxes1", "[", ":", ",", ":", ",", "0", "]", "+", "1", "\n", "h", "=", "bboxes1", "[", ":", ",", ":", ",", "3", "]", "-", "bboxes1", "[", ":", ",", ":", ",", "1", "]", "+", "1", "\n", "area", "=", "np", ".", "sum", "(", "w", "*", "h", ",", "axis", "=", "0", ")", "\n", "unions", "=", "np", ".", "add", ".", "outer", "(", "area", ",", "area", ")", "\n", "", "else", ":", "\n", "        ", "w", "=", "bboxes1", "[", ":", ",", ":", ",", "2", "]", "-", "bboxes1", "[", ":", ",", ":", ",", "0", "]", "+", "1", "\n", "h", "=", "bboxes1", "[", ":", ",", ":", ",", "3", "]", "-", "bboxes1", "[", ":", ",", ":", ",", "1", "]", "+", "1", "\n", "area1", "=", "np", ".", "sum", "(", "w", "*", "h", ",", "axis", "=", "0", ")", "\n", "w", "=", "bboxes2", "[", ":", ",", ":", ",", "2", "]", "-", "bboxes2", "[", ":", ",", ":", ",", "0", "]", "+", "1", "\n", "h", "=", "bboxes2", "[", ":", ",", ":", ",", "3", "]", "-", "bboxes2", "[", ":", ",", ":", ",", "1", "]", "+", "1", "\n", "area2", "=", "np", ".", "sum", "(", "w", "*", "h", ",", "axis", "=", "0", ")", "\n", "unions", "=", "np", ".", "add", ".", "outer", "(", "area1", ",", "area2", ")", "\n", "", "return", "unions", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory.cubic_iou": [[127, 142], ["trajectory._intersect", "trajectory._union", "numpy.subtract", "numpy.divide", "id", "id", "bboxes1.transpose.transpose", "bboxes1.transpose.transpose", "bboxes2.transpose.transpose"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory._intersect", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory._union"], ["", "def", "cubic_iou", "(", "bboxes1", ",", "bboxes2", ")", ":", "\n", "# bboxes: n x t x 4 (left, top, right, bottom)", "\n", "    ", "if", "id", "(", "bboxes1", ")", "==", "id", "(", "bboxes2", ")", ":", "\n", "        ", "bboxes1", "=", "bboxes1", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "bboxes2", "=", "bboxes1", "\n", "", "else", ":", "\n", "        ", "bboxes1", "=", "bboxes1", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "bboxes2", "=", "bboxes2", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "# compute cubic-IoU", "\n", "# bboxes: t x n x 4", "\n", "", "iou", "=", "_intersect", "(", "bboxes1", ",", "bboxes2", ")", "\n", "union", "=", "_union", "(", "bboxes1", ",", "bboxes2", ")", "\n", "np", ".", "subtract", "(", "union", ",", "iou", ",", "out", "=", "union", ")", "\n", "np", ".", "divide", "(", "iou", ",", "union", ",", "out", "=", "iou", ")", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory.traj_iou": [[144, 159], ["numpy.asarray", "trajectory.cubic_iou", "id", "id", "numpy.asarray", "roi.left", "roi.top", "roi.right", "roi.bottom", "roi.left", "roi.top", "roi.right", "roi.bottom"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory.cubic_iou"], ["", "def", "traj_iou", "(", "trajs1", ",", "trajs2", ")", ":", "\n", "    ", "\"\"\"\n    Compute the pairwise trajectory IoU in trajs1 and trajs2.\n    Assumuing all trajectories in trajs1 and trajs2 start at same frame and\n    end at same frame.\n    \"\"\"", "\n", "bboxes1", "=", "np", ".", "asarray", "(", "[", "[", "[", "roi", ".", "left", "(", ")", ",", "roi", ".", "top", "(", ")", ",", "roi", ".", "right", "(", ")", ",", "roi", ".", "bottom", "(", ")", "]", "\n", "for", "roi", "in", "traj", ".", "rois", "]", "for", "traj", "in", "trajs1", "]", ")", "\n", "if", "id", "(", "trajs1", ")", "==", "id", "(", "trajs2", ")", ":", "\n", "        ", "bboxes2", "=", "bboxes1", "\n", "", "else", ":", "\n", "        ", "bboxes2", "=", "np", ".", "asarray", "(", "[", "[", "[", "roi", ".", "left", "(", ")", ",", "roi", ".", "top", "(", ")", ",", "roi", ".", "right", "(", ")", ",", "roi", ".", "bottom", "(", ")", "]", "\n", "for", "roi", "in", "traj", ".", "rois", "]", "for", "traj", "in", "trajs2", "]", ")", "\n", "", "iou", "=", "cubic_iou", "(", "bboxes1", ",", "bboxes2", ")", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory.object_trajectory_proposal": [[161, 181], ["get_segment_signature", "get_feature_path", "os.path.join", "os.path.exists", "print", "open", "json.load", "trajectory.Trajectory", "print"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.get_segment_signature", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.get_feature_path"], ["", "def", "object_trajectory_proposal", "(", "dataset", ",", "vid", ",", "fstart", ",", "fend", ",", "gt", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Set gt=True for providing groundtruth bounding box trajectories and\n    predicting classme feature only\n    \"\"\"", "\n", "vsig", "=", "get_segment_signature", "(", "vid", ",", "fstart", ",", "fend", ")", "\n", "name", "=", "'traj_cls_gt'", "if", "gt", "else", "'traj_cls'", "\n", "path", "=", "get_feature_path", "(", "name", ",", "vid", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'{}-{}.json'", ".", "format", "(", "vsig", ",", "name", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "'loading object {} proposal for video segment {}'", ".", "format", "(", "name", ",", "vsig", ")", ")", "\n", "", "with", "open", "(", "path", ",", "'r'", ")", "as", "fin", ":", "\n", "            ", "trajs", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "trajs", "=", "[", "Trajectory", "(", "**", "traj", ")", "for", "traj", "in", "trajs", "]", "\n", "", "else", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "'no object {} proposal for video segment {}'", ".", "format", "(", "name", ",", "vsig", ")", ")", "\n", "", "trajs", "=", "[", "]", "\n", "", "return", "trajs", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.predict.predict": [[14, 124], ["model.BaseModel", "torch.load", "lib.utils.serialize.load_checkpoint", "logger.info", "logger.info", "logger.info", "model.BaseModel.eval", "lib.dataset.build.build_data_loader", "logger.info", "tqdm.tqdm", "dict", "tqdm.tqdm.close", "os.path.join", "torch.no_grad", "enumerate", "get_model_path", "len", "model.BaseModel.", "zip", "features.append", "tracklet_pairs.append", "track_cls_logits.append", "num_tracklets.append", "ious.append", "trackids.append", "torch.sort", "torch.sort", "torch.tensor", "torch.argmax", "torch.argmax", "torch.tensor", "torch.stack().t", "torch.tensor", "tqdm.tqdm.update", "plist.get_field", "plist.get_field", "plist.get_field", "plist.get_field", "plist.get_field", "logger.info", "tqdm.tqdm.update", "topk_score_per_pair.flatten", "numpy.array", "numpy.array", "torch.stack", "numpy.array", "numpy.array", "numpy.array", "zip"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.serialize.load_checkpoint", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.build.build_data_loader", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.get_model_path", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.update", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.get_field", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.get_field", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.get_field", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.get_field", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.get_field", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.update"], ["def", "predict", "(", "cfg", ",", "basedata", ",", "logger", ")", ":", "\n", "    ", "phase", "=", "'test'", "\n", "batch_size", "=", "cfg", ".", "DATASET", ".", "TEST_BATCH_SIZE", "\n", "num_workers", "=", "cfg", ".", "DATASET", ".", "TEST_NUM_WORKERS", "\n", "topk_per_pair", "=", "cfg", ".", "PREDICT", ".", "TOPK_PER_PAIR", "\n", "topk_per_seg", "=", "cfg", ".", "PREDICT", ".", "TOPK_PER_SEG", "\n", "\n", "model", "=", "BaseModel", "(", "cfg", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "get_model_path", "(", ")", ",", "cfg", ".", "ETC", ".", "MODEL_DUMP_FILE", ")", ")", "\n", "load_checkpoint", "(", "model", ",", "checkpoint", "[", "'model'", "]", ")", "\n", "logger", ".", "info", "(", "f\"=> checkpoint succesfully loaded\"", ")", "\n", "logger", ".", "info", "(", "f\"=> iter: {checkpoint['iter']}\"", ")", "\n", "logger", ".", "info", "(", "f\"=> average loss:{checkpoint['loss']:.4f}\"", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "data_loader", "=", "build_data_loader", "(", "\n", "cfg", ",", "\n", "basedata", ",", "\n", "phase", "=", "phase", ",", "\n", "is_distributed", "=", "False", ",", "\n", "start_iter", "=", "0", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "'predicting short-term visual relation...'", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "data_loader", ")", ")", "\n", "short_term_relations", "=", "dict", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "iteration", ",", "(", "pair_list", ",", "_", ",", "indexs", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "features", "=", "[", "]", "\n", "tracklet_pairs", "=", "[", "]", "\n", "track_cls_logits", "=", "[", "]", "\n", "num_tracklets", "=", "[", "]", "\n", "ious", "=", "[", "]", "\n", "trackids", "=", "[", "]", "\n", "for", "plist", "in", "pair_list", ":", "\n", "                ", "features", ".", "append", "(", "plist", ".", "features", ")", "\n", "tracklet_pairs", ".", "append", "(", "plist", ".", "get_field", "(", "'tracklet_pairs'", ")", ")", "\n", "track_cls_logits", ".", "append", "(", "plist", ".", "get_field", "(", "'track_cls_logits'", ")", ")", "\n", "num_tracklets", ".", "append", "(", "plist", ".", "get_field", "(", "'num_tracklets'", ")", ")", "\n", "ious", ".", "append", "(", "plist", ".", "get_field", "(", "'ious'", ")", ")", "\n", "trackids", ".", "append", "(", "plist", ".", "get_field", "(", "'track_ids'", ")", ")", "\n", "\n", "", "pair_proposals", ",", "duration_proposals", ",", "rel_logits", "=", "model", "(", "pair_list", ",", "_", ")", "\n", "\n", "for", "index", ",", "rel_logit", ",", "feature", ",", "tracklet_pair", ",", "track_cls_logit", ",", "num_tracklet", ",", "iou", ",", "trackid", "in", "zip", "(", "indexs", ",", "rel_logits", ",", "features", ",", "tracklet_pairs", ",", "track_cls_logits", ",", "num_tracklets", ",", "ious", ",", "trackids", ")", ":", "\n", "                ", "if", "num_tracklet", "<=", "1", ":", "\n", "                    ", "logger", ".", "info", "(", "f'No relation exists in video segment {index}'", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "continue", "\n", "\n", "", "sub_logit", "=", "feature", "[", ":", ",", ":", "35", "]", "\n", "obj_logit", "=", "feature", "[", ":", ",", "35", ":", "70", "]", "\n", "\n", "# pick top-20 predictions per pair", "\n", "topk_pred_per_pair", "=", "torch", ".", "sort", "(", "rel_logit", ",", "descending", "=", "True", ",", "dim", "=", "-", "1", ")", "\n", "topk_score_per_pair", "=", "topk_pred_per_pair", "[", "0", "]", "[", ":", ",", ":", "topk_per_pair", "]", "# N(N-1) x top-k", "\n", "topk_idx_per_pair", "=", "topk_pred_per_pair", "[", "1", "]", "[", ":", ",", ":", "topk_per_pair", "]", "# N(N-1) x top-k", "\n", "r", ",", "c", "=", "topk_score_per_pair", ".", "shape", "# N(N-1), top-k", "\n", "\n", "# pick top-200 predictions per segment", "\n", "topk_pred_per_seg", "=", "torch", ".", "sort", "(", "topk_score_per_pair", ".", "flatten", "(", ")", ",", "descending", "=", "True", ",", "dim", "=", "-", "1", ")", "\n", "# topk_score_per_seg = topk_pred_per_seg[0][:topk_per_seg] # top-K", "\n", "topk_idx_per_seg", "=", "topk_pred_per_seg", "[", "1", "]", "[", ":", "topk_per_seg", "]", "# top-K", "\n", "topk_idx", "=", "torch", ".", "tensor", "(", "\n", "[", "(", "idx", "//", "c", ",", "idx", "%", "c", ")", "for", "idx", "in", "topk_idx_per_seg", "]", "\n", ")", "# top-K x 2", "\n", "\n", "# get tracklet pairs' ids", "\n", "top_pair_idx", "=", "topk_idx", "[", ":", ",", "0", "]", "# top-K in N(N-1)", "\n", "top_pair_tid", "=", "tracklet_pair", "[", "top_pair_idx", "]", "# top-K x 2", "\n", "\n", "# get object labels", "\n", "top_sub_logit", "=", "sub_logit", "[", "(", "num_tracklet", "-", "1", ")", "*", "top_pair_tid", "[", ":", ",", "0", "]", "]", "# top-K x 35 ", "\n", "top_obj_logit", "=", "obj_logit", "[", "(", "num_tracklet", "-", "1", ")", "*", "top_pair_tid", "[", ":", ",", "1", "]", "]", "# top-K x 35 ", "\n", "\n", "top_sub_label", "=", "torch", ".", "argmax", "(", "top_sub_logit", ",", "dim", "=", "1", ")", "# top-K", "\n", "top_obj_label", "=", "torch", ".", "argmax", "(", "top_obj_logit", ",", "dim", "=", "1", ")", "# top-K", "\n", "\n", "# get relation labels", "\n", "top_rel_label", "=", "torch", ".", "tensor", "(", "\n", "[", "topk_idx_per_pair", "[", "idx", "[", "0", "]", ",", "idx", "[", "1", "]", "]", "for", "idx", "in", "topk_idx", "]", "\n", ")", "# top-K in 132", "\n", "\n", "top_triplet_label", "=", "torch", ".", "stack", "(", "\n", "[", "top_sub_label", ",", "top_rel_label", ",", "top_obj_label", "]", "\n", ")", ".", "t", "(", ")", "# top-K x 3", "\n", "\n", "# get relation scores", "\n", "top_rel_score", "=", "torch", ".", "tensor", "(", "\n", "[", "topk_score_per_pair", "[", "idx", "[", "0", "]", ",", "idx", "[", "1", "]", "]", "for", "idx", "in", "topk_idx", "]", "\n", ")", "# top-K in R", "\n", "\n", "predictions", "=", "[", "\n", "(", "np", ".", "array", "(", "score", ")", ",", "np", ".", "array", "(", "triplet", ")", ",", "np", ".", "array", "(", "pair_tid", ")", ")", "\n", "for", "score", ",", "triplet", ",", "pair_tid", "in", "zip", "(", "top_rel_score", ",", "top_triplet_label", ",", "top_pair_tid", ")", "\n", "]", "\n", "\n", "short_term_relations", "[", "index", "]", "=", "(", "\n", "predictions", ",", "\n", "np", ".", "array", "(", "iou", ")", ",", "\n", "np", ".", "array", "(", "trackid", ")", "\n", ")", "\n", "# from pprint import pprint; pprint(short_term_relations)", "\n", "# raise ValueError", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "", "", "pbar", ".", "close", "(", ")", "\n", "\n", "return", "short_term_relations", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.feature.SharedArray.__init__": [[18, 31], ["int", "multiprocessing.sharedctypes.RawArray", "numpy.prod"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "shape", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "# Compute total number of elements", "\n", "        ", "size", "=", "int", "(", "np", ".", "prod", "(", "shape", ")", ")", "\n", "# Get the size of element", "\n", "if", "dtype", "==", "np", ".", "float32", ":", "\n", "            ", "typecode", "=", "'f'", "\n", "", "elif", "dtype", "==", "np", ".", "float64", ":", "\n", "            ", "typecode", "=", "'d'", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "'Unknown dtype.'", "\n", "", "self", ".", "data", "=", "sharedctypes", ".", "RawArray", "(", "typecode", ",", "size", ")", "\n", "self", ".", "shape", "=", "shape", "\n", "self", ".", "dtype", "=", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.feature.SharedArray.set_value": [[32, 36], ["numpy.ctypeslib.as_array", "value.astype"], "methods", ["None"], ["", "def", "set_value", "(", "self", ",", "value", ")", ":", "\n", "        ", "nparr", "=", "np", ".", "ctypeslib", ".", "as_array", "(", "self", ".", "data", ")", "\n", "nparr", ".", "shape", "=", "self", ".", "shape", "\n", "nparr", "[", "...", "]", "=", "value", ".", "astype", "(", "self", ".", "dtype", ",", "copy", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.feature.SharedArray.get_value": [[37, 44], ["numpy.ctypeslib.as_array", "numpy.array"], "methods", ["None"], ["", "def", "get_value", "(", "self", ",", "copy", "=", "True", ")", ":", "\n", "        ", "nparr", "=", "np", ".", "ctypeslib", ".", "as_array", "(", "self", ".", "data", ")", "\n", "nparr", ".", "shape", "=", "self", ".", "shape", "\n", "if", "copy", ":", "\n", "            ", "return", "np", ".", "array", "(", "nparr", ")", "\n", "", "else", ":", "\n", "            ", "return", "nparr", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.feature.FeatureExtractor.__init__": [[51, 55], ["multiprocessing.Process.__init__"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.ImageEncoder.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "prefetch_count", "=", "2", ")", ":", "\n", "        ", "super", "(", "FeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "prefetch_count", "=", "prefetch_count", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.feature.FeatureExtractor._init_pool": [[56, 75], ["multiprocessing.Queue", "multiprocessing.Queue", "feature.FeatureExtractor.get_data_shapes", "enumerate", "range", "atexit.register", "feature.FeatureExtractor.start", "print", "list", "range", "feature.FeatureExtractor._free_queue.put", "range", "feature.FeatureExtractor._blob_pool[].append", "feature.SharedArray"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.feature.FeatureExtractor.get_data_shapes"], ["", "def", "_init_pool", "(", "self", ")", ":", "\n", "        ", "prefetch_count", "=", "self", ".", "prefetch_count", "\n", "if", "prefetch_count", ">", "0", ":", "\n", "            ", "self", ".", "_blob_pool", "=", "[", "list", "(", ")", "for", "i", "in", "range", "(", "prefetch_count", ")", "]", "\n", "self", ".", "_free_queue", "=", "Queue", "(", "prefetch_count", ")", "\n", "self", ".", "_full_queue", "=", "Queue", "(", "prefetch_count", ")", "\n", "\n", "shapes", "=", "self", ".", "get_data_shapes", "(", ")", "\n", "for", "i", ",", "shape", "in", "enumerate", "(", "shapes", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "prefetch_count", ")", ":", "\n", "                    ", "self", ".", "_blob_pool", "[", "j", "]", ".", "append", "(", "SharedArray", "(", "shape", ",", "np", ".", "float32", ")", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "prefetch_count", ")", ":", "\n", "                ", "self", ".", "_free_queue", ".", "put", "(", "i", ")", "\n", "# Terminate the child process when the parent exists", "\n", "", "atexit", ".", "register", "(", "self", ".", "_cleanup", ")", "\n", "self", ".", "start", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Prefetching disabled.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.feature.FeatureExtractor._cleanup": [[76, 81], ["print", "feature.FeatureExtractor.terminate", "feature.FeatureExtractor.join"], "methods", ["None"], ["", "", "def", "_cleanup", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "prefetch_count", ">", "0", ":", "\n", "            ", "print", "(", "'Terminating DataFetcher'", ")", "\n", "self", ".", "terminate", "(", ")", "\n", "self", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.feature.FeatureExtractor.run": [[82, 92], ["signal.signal", "print", "feature.FeatureExtractor.get_data", "feature.FeatureExtractor._free_queue.get", "enumerate", "feature.FeatureExtractor._full_queue.put", "s_blob.set_value"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.feature.FeatureExtractor.get_data", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.feature.SharedArray.set_value"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "# Pass SIGINT to the parent process", "\n", "        ", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "signal", ".", "SIG_DFL", ")", "\n", "print", "(", "'DataFetcher started'", ")", "\n", "while", "True", ":", "\n", "            ", "blobs", "=", "self", ".", "get_data", "(", ")", "\n", "pool_ind", "=", "self", ".", "_free_queue", ".", "get", "(", ")", "\n", "for", "i", ",", "s_blob", "in", "enumerate", "(", "self", ".", "_blob_pool", "[", "pool_ind", "]", ")", ":", "\n", "                ", "s_blob", ".", "set_value", "(", "blobs", "[", "i", "]", ")", "\n", "", "self", ".", "_full_queue", ".", "put", "(", "pool_ind", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.feature.FeatureExtractor.get_prefected_data": [[93, 107], ["feature.FeatureExtractor._full_queue.get", "feature.FeatureExtractor._free_queue.put", "feature.FeatureExtractor._init_pool", "blobs.append", "hasattr", "blob.get_value"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.feature.FeatureExtractor._init_pool", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.feature.SharedArray.get_value"], ["", "", "def", "get_prefected_data", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Need get_data() to return a list of np.ndarray with float32 dtype\n        WARNING: prefetching testing data may not work, because the shapes\n        of data may vary.\n        \"\"\"", "\n", "if", "not", "hasattr", "(", "self", ",", "'_full_queue'", ")", "and", "self", ".", "prefetch_count", ">", "0", ":", "\n", "            ", "self", ".", "_init_pool", "(", ")", "\n", "", "blobs", "=", "[", "]", "\n", "pool_ind", "=", "self", ".", "_full_queue", ".", "get", "(", ")", "\n", "for", "blob", "in", "self", ".", "_blob_pool", "[", "pool_ind", "]", ":", "\n", "            ", "blobs", ".", "append", "(", "blob", ".", "get_value", "(", ")", ")", "\n", "", "self", ".", "_free_queue", ".", "put", "(", "pool_ind", ")", "\n", "return", "blobs", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.feature.FeatureExtractor.get_data_shapes": [[108, 114], ["hasattr", "print", "feature.FeatureExtractor.get_data", "tuple"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.feature.FeatureExtractor.get_data"], ["", "def", "get_data_shapes", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'shapes'", ")", ":", "\n", "            ", "print", "(", "'Getting data to measure the shapes...'", ")", "\n", "data", "=", "self", ".", "get_data", "(", ")", "\n", "self", ".", "shapes", "=", "tuple", "(", "d", ".", "shape", "for", "d", "in", "data", ")", "\n", "", "return", "self", ".", "shapes", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.feature.FeatureExtractor.get_data": [[115, 117], ["None"], "methods", ["None"], ["", "def", "get_data", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.feature.FeatureExtractor.extract_feature": [[118, 146], ["get_segment_signature", "get_feature_path", "os.path.join", "os.path.exists", "print", "print", "h5py.File"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.get_segment_signature", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.get_feature_path"], ["", "def", "extract_feature", "(", "self", ",", "vid", ",", "fstart", ",", "fend", ",", "dry_run", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "vsig", "=", "get_segment_signature", "(", "vid", ",", "fstart", ",", "fend", ")", "\n", "# vid=ILSVRC2015_train_00005003, fstart=0000, fend=0030", "\n", "path", "=", "get_feature_path", "(", "'relation'", ",", "vid", ")", "\n", "# ./vidvrd-baseline-output/features/relation/ILSVRC2015_train_00005003", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'{}-{}.h5'", ".", "format", "(", "vsig", ",", "'relation'", ")", ")", "\n", "# ./vidvrd-baseline-output/features/relation/ILSVRC2015_train_00005003/ILSVRC2015_train_00005003-0000-0030-relation.h5", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "if", "dry_run", ":", "\n", "                ", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "", "else", ":", "\n", "                ", "if", "verbose", ":", "\n", "                    ", "print", "(", "'loading relation feature for video segment {}...'", ".", "format", "(", "vsig", ")", ")", "\n", "", "with", "h5py", ".", "File", "(", "path", ",", "'r'", ")", "as", "fin", ":", "\n", "# N object trajectory proposals, whose trackids are all -1", "\n", "# and M groundtruth object trajectories, whose trackids are provided by dataset", "\n", "                    ", "trackid", "=", "fin", "[", "'trackid'", "]", "[", ":", "]", "\n", "# all possible pairs among N+M object trajectories", "\n", "pairs", "=", "fin", "[", "'pairs'", "]", "[", ":", "]", "\n", "# relation feature for each pair (in same order)", "\n", "feats", "=", "fin", "[", "'feats'", "]", "[", ":", "]", "\n", "# vIoU (traj_iou) for each pair (in same order)", "\n", "iou", "=", "fin", "[", "'iou'", "]", "[", ":", "]", "\n", "", "return", "pairs", ",", "feats", ",", "iou", ",", "trackid", "\n", "", "", "else", ":", "\n", "            ", "if", "verbose", ":", "\n", "                ", "print", "(", "'no relation feature for video segment  {}'", ".", "format", "(", "vsig", ")", ")", "\n", "", "return", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association.VideoRelation.__init__": [[64, 74], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vid", ",", "s_cid", ",", "pid", ",", "o_cid", ",", "straj", ",", "otraj", ",", "confs", "=", "1", ")", ":", "\n", "        ", "self", ".", "vid", "=", "vid", "\n", "self", ".", "s_cid", "=", "s_cid", "\n", "self", ".", "pid", "=", "pid", "\n", "self", ".", "o_cid", "=", "o_cid", "\n", "self", ".", "straj", "=", "straj", "\n", "self", ".", "otraj", "=", "otraj", "\n", "self", ".", "confs_list", "=", "[", "confs", "]", "\n", "self", ".", "fstart", "=", "straj", ".", "pstart", "\n", "self", ".", "fend", "=", "straj", ".", "pend", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association.VideoRelation.__repr__": [[75, 78], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'<VideoRelation {}[{:04d}-{:04d}] {}-{}-{}>'", ".", "format", "(", "\n", "self", ".", "vid", ",", "self", ".", "fstart", ",", "self", ".", "fend", ",", "self", ".", "s_cid", ",", "self", ".", "pid", ",", "self", ".", "o_cid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association.VideoRelation.triplet": [[79, 81], ["None"], "methods", ["None"], ["", "def", "triplet", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "s_cid", ",", "self", ".", "pid", ",", "self", ".", "o_cid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association.VideoRelation.mean_confs": [[82, 84], ["numpy.mean"], "methods", ["None"], ["", "def", "mean_confs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "self", ".", "confs_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association.VideoRelation.both_overlap": [[85, 92], ["association._traj_iou", "association._traj_iou"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association._traj_iou", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association._traj_iou"], ["", "def", "both_overlap", "(", "self", ",", "straj", ",", "otraj", ",", "iou_thr", "=", "0.5", ")", ":", "\n", "        ", "s_iou", "=", "_traj_iou", "(", "self", ".", "straj", ",", "straj", ")", "\n", "o_iou", "=", "_traj_iou", "(", "self", ".", "otraj", ",", "otraj", ")", "\n", "if", "s_iou", ">=", "iou_thr", "and", "o_iou", ">=", "iou_thr", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association.VideoRelation.extend": [[93, 99], ["association._merge_trajs", "association._merge_trajs", "association.VideoRelation.confs_list.append"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association._merge_trajs", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association._merge_trajs"], ["", "", "def", "extend", "(", "self", ",", "straj", ",", "otraj", ",", "confs", ")", ":", "\n", "        ", "self", ".", "straj", "=", "_merge_trajs", "(", "self", ".", "straj", ",", "straj", ")", "\n", "self", ".", "otraj", "=", "_merge_trajs", "(", "self", ".", "otraj", ",", "otraj", ")", "\n", "self", ".", "confs_list", ".", "append", "(", "confs", ")", "\n", "self", ".", "fstart", "=", "self", ".", "straj", ".", "pstart", "\n", "self", ".", "fend", "=", "self", ".", "otraj", ".", "pend", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association.VideoRelation.serialize": [[100, 115], ["dict", "float", "dataset.get_object_name", "dataset.get_predicate_name", "dataset.get_object_name", "association.VideoRelation.mean_confs", "int", "int", "association.VideoRelation.straj.serialize", "association.VideoRelation.otraj.serialize"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_object_name", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_predicate_name", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_object_name", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association.VideoRelation.mean_confs", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association.VideoRelation.serialize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association.VideoRelation.serialize"], ["", "def", "serialize", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "obj", "=", "dict", "(", ")", "\n", "obj", "[", "'triplet'", "]", "=", "[", "\n", "dataset", ".", "get_object_name", "(", "self", ".", "s_cid", ")", ",", "\n", "dataset", ".", "get_predicate_name", "(", "self", ".", "pid", ")", ",", "\n", "dataset", ".", "get_object_name", "(", "self", ".", "o_cid", ")", "\n", "]", "\n", "obj", "[", "'score'", "]", "=", "float", "(", "self", ".", "mean_confs", "(", ")", ")", "\n", "obj", "[", "'duration'", "]", "=", "[", "\n", "int", "(", "self", ".", "fstart", ")", ",", "\n", "int", "(", "self", ".", "fend", ")", "\n", "]", "\n", "obj", "[", "'sub_traj'", "]", "=", "self", ".", "straj", ".", "serialize", "(", ")", "[", "'rois'", "]", "\n", "obj", "[", "'obj_traj'", "]", "=", "self", ".", "otraj", ".", "serialize", "(", ")", "[", "'rois'", "]", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association._merge_trajs": [[16, 33], ["max", "range", "range", "dlib.drectangle", "traj_2.length", "traj_1.predict", "print", "roi_1.left", "roi_2.left", "roi_1.top", "roi_2.top", "roi_1.right", "roi_2.right", "roi_1.bottom", "roi_2.bottom", "traj_1.length", "traj_1.length"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory.Trajectory.length", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.predict", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory.Trajectory.length", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory.Trajectory.length"], ["def", "_merge_trajs", "(", "traj_1", ",", "traj_2", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "assert", "traj_1", ".", "pend", ">", "traj_2", ".", "pstart", "and", "traj_1", ".", "pstart", "<", "traj_2", ".", "pend", "\n", "", "except", "AssertionError", ":", "\n", "        ", "print", "(", "'{}-{} {}-{}'", ".", "format", "(", "traj_1", ".", "pstart", ",", "traj_1", ".", "pend", ",", "traj_2", ".", "pstart", ",", "traj_2", ".", "pend", ")", ")", "\n", "", "overlap_length", "=", "max", "(", "traj_1", ".", "pend", "-", "traj_2", ".", "pstart", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "overlap_length", ")", ":", "\n", "        ", "roi_1", "=", "traj_1", ".", "rois", "[", "traj_1", ".", "length", "(", ")", "-", "overlap_length", "+", "i", "]", "\n", "roi_2", "=", "traj_2", ".", "rois", "[", "i", "]", "\n", "left", "=", "(", "roi_1", ".", "left", "(", ")", "+", "roi_2", ".", "left", "(", ")", ")", "/", "2", "\n", "top", "=", "(", "roi_1", ".", "top", "(", ")", "+", "roi_2", ".", "top", "(", ")", ")", "/", "2", "\n", "right", "=", "(", "roi_1", ".", "right", "(", ")", "+", "roi_2", ".", "right", "(", ")", ")", "/", "2", "\n", "bottom", "=", "(", "roi_1", ".", "bottom", "(", ")", "+", "roi_2", ".", "bottom", "(", ")", ")", "/", "2", "\n", "traj_1", ".", "rois", "[", "traj_1", ".", "length", "(", ")", "-", "overlap_length", "+", "i", "]", "=", "drectangle", "(", "left", ",", "top", ",", "right", ",", "bottom", ")", "\n", "", "for", "i", "in", "range", "(", "overlap_length", ",", "traj_2", ".", "length", "(", ")", ")", ":", "\n", "        ", "traj_1", ".", "predict", "(", "traj_2", ".", "rois", "[", "i", "]", ")", "\n", "", "return", "traj_1", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association._traj_iou": [[35, 49], ["collections.deque", "collections.deque", "trajectory.traj_iou", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "itertools.islice", "itertools.islice"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory.traj_iou"], ["", "def", "_traj_iou", "(", "traj_1", ",", "traj_2", ")", ":", "\n", "    ", "if", "traj_1", ".", "pend", "<=", "traj_2", ".", "pstart", "or", "traj_2", ".", "pend", "<=", "traj_1", ".", "pstart", ":", "# no overlap", "\n", "        ", "return", "0", "\n", "", "if", "traj_1", ".", "pstart", "<=", "traj_2", ".", "pstart", ":", "\n", "        ", "t1", "=", "deepcopy", "(", "traj_1", ")", "\n", "t2", "=", "deepcopy", "(", "traj_2", ")", "\n", "", "else", ":", "\n", "        ", "t1", "=", "deepcopy", "(", "traj_2", ")", "\n", "t2", "=", "deepcopy", "(", "traj_1", ")", "\n", "", "overlap_length", "=", "t1", ".", "pend", "-", "t2", ".", "pstart", "\n", "t1", ".", "rois", "=", "deque", "(", "itertools", ".", "islice", "(", "t1", ".", "rois", ",", "t2", ".", "pstart", "-", "t1", ".", "pstart", ",", "t1", ".", "pend", "-", "t1", ".", "pstart", ")", ")", "\n", "t2", ".", "rois", "=", "deque", "(", "itertools", ".", "islice", "(", "t2", ".", "rois", ",", "0", ",", "t1", ".", "pend", "-", "t2", ".", "pstart", ")", ")", "\n", "iou", "=", "traj_iou", "(", "[", "t1", "]", ",", "[", "t2", "]", ")", "\n", "return", "iou", "[", "0", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association.greedy_relational_association": [[117, 176], ["short_term_relations.sort", "enumerate", "sorted", "trajectory.object_trajectory_proposal", "time.time", "rel.serialize", "len", "get_segment_signature", "enumerate", "enumerate", "int", "association.VideoRelation", "video_relation_list.append", "cur_modify_rel_list.append", "last_modify_rel_list.sort", "association.VideoRelation", "video_relation_list.append", "cur_modify_rel_list.append", "association.VideoRelation.mean_confs", "association.VideoRelation.both_overlap", "association.VideoRelation.extend", "last_modify_rel_list.remove", "cur_modify_rel_list.append", "association.VideoRelation.triplet"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.trajectory.object_trajectory_proposal", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association.VideoRelation.serialize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.get_segment_signature", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association.VideoRelation.mean_confs", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association.VideoRelation.both_overlap", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.association.VideoRelation.triplet"], ["", "", "def", "greedy_relational_association", "(", "dataset", ",", "short_term_relations", ",", "max_traj_num_in_clip", "=", "100", ")", ":", "\n", "    ", "short_term_relations", ".", "sort", "(", "key", "=", "lambda", "x", ":", "int", "(", "x", "[", "0", "]", "[", "1", "]", ")", ")", "\n", "video_relation_list", "=", "[", "]", "\n", "last_modify_rel_list", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "index", ",", "prediction", ")", "in", "enumerate", "(", "short_term_relations", ")", ":", "\n", "        ", "vid", ",", "fstart", ",", "fend", "=", "index", "\n", "\n", "# load prediction data", "\n", "pred_list", ",", "iou", ",", "trackid", "=", "prediction", "\n", "sorted_pred_list", "=", "sorted", "(", "pred_list", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "if", "len", "(", "sorted_pred_list", ")", ">", "max_traj_num_in_clip", ":", "\n", "            ", "sorted_pred_list", "=", "sorted_pred_list", "[", "0", ":", "max_traj_num_in_clip", "]", "\n", "\n", "# load predict trajectory data", "\n", "", "trajs", "=", "object_trajectory_proposal", "(", "dataset", ",", "vid", ",", "fstart", ",", "fend", ")", "\n", "for", "traj", "in", "trajs", ":", "\n", "            ", "traj", ".", "pstart", "=", "fstart", "\n", "traj", ".", "pend", "=", "fend", "\n", "traj", ".", "vsig", "=", "get_segment_signature", "(", "vid", ",", "fstart", ",", "fend", ")", "\n", "\n", "# merge", "\n", "", "started_at", "=", "time", ".", "time", "(", ")", "\n", "cur_modify_rel_list", "=", "[", "]", "\n", "if", "i", "==", "0", ":", "\n", "            ", "for", "pred_idx", ",", "pred", "in", "enumerate", "(", "sorted_pred_list", ")", ":", "\n", "                ", "conf_score", "=", "pred", "[", "0", "]", "\n", "s_cid", ",", "pid", ",", "o_cid", "=", "pred", "[", "1", "]", "\n", "s_tididx", ",", "o_tididx", "=", "pred", "[", "2", "]", "\n", "straj", "=", "trajs", "[", "s_tididx", "]", "\n", "otraj", "=", "trajs", "[", "o_tididx", "]", "\n", "r", "=", "VideoRelation", "(", "vid", ",", "s_cid", ",", "pid", ",", "o_cid", ",", "straj", ",", "otraj", ",", "confs", "=", "conf_score", ")", "\n", "video_relation_list", ".", "append", "(", "r", ")", "\n", "cur_modify_rel_list", ".", "append", "(", "r", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "pred_idx", ",", "pred", "in", "enumerate", "(", "sorted_pred_list", ")", ":", "\n", "                ", "conf_score", "=", "pred", "[", "0", "]", "\n", "s_cid", ",", "pid", ",", "o_cid", "=", "pred", "[", "1", "]", "\n", "s_tididx", ",", "o_tididx", "=", "pred", "[", "2", "]", "\n", "straj", "=", "trajs", "[", "s_tididx", "]", "\n", "otraj", "=", "trajs", "[", "o_tididx", "]", "\n", "last_modify_rel_list", ".", "sort", "(", "key", "=", "lambda", "r", ":", "r", ".", "mean_confs", "(", ")", ",", "reverse", "=", "True", ")", "\n", "is_merged", "=", "False", "\n", "for", "r", "in", "last_modify_rel_list", ":", "\n", "                    ", "if", "(", "pred", "[", "1", "]", "==", "r", ".", "triplet", "(", ")", ")", ".", "all", "(", ")", ":", "\n", "                        ", "if", "(", "straj", ".", "pstart", "<", "r", ".", "fend", "and", "otraj", ".", "pstart", "<", "r", ".", "fend", ")", "and", "r", ".", "both_overlap", "(", "straj", ",", "otraj", ")", ":", "\n", "                            ", "r", ".", "extend", "(", "straj", ",", "otraj", ",", "conf_score", ")", "\n", "last_modify_rel_list", ".", "remove", "(", "r", ")", "\n", "cur_modify_rel_list", ".", "append", "(", "r", ")", "\n", "is_merged", "=", "True", "\n", "break", "\n", "", "", "", "if", "not", "is_merged", ":", "\n", "                    ", "r", "=", "VideoRelation", "(", "vid", ",", "s_cid", ",", "pid", ",", "o_cid", ",", "straj", ",", "otraj", ")", "\n", "video_relation_list", ".", "append", "(", "r", ")", "\n", "cur_modify_rel_list", ".", "append", "(", "r", ")", "\n", "", "", "", "last_modify_rel_list", "=", "cur_modify_rel_list", "\n", "\n", "", "return", "[", "rel", ".", "serialize", "(", "dataset", ")", "for", "rel", "in", "video_relation_list", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.train.train": [[23, 139], ["lib.utils.logger.setup_logger", "logging.getLogger", "logging.getLogger.info", "logging.getLogger.info", "torch.init_process_group", "model.BaseModel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel.train", "lib.dataset.build.build_data_loader", "lib.solver.build.build_optimizer_scheduler", "len", "lib.utils.metric_logger.MetricLogger", "time.time", "enumerate", "torch.save", "torch.save", "torch.save", "logging.getLogger.info", "optimizer.zero_grad", "torch.nn.parallel.DistributedDataParallel.", "sum", "sum.backward", "optimizer.step", "scheduler.step", "sum", "lib.utils.metric_logger.MetricLogger.update", "time.time", "lib.utils.metric_logger.MetricLogger.update", "lib.utils.miscellaneous.calculate_eta_iter", "str", "logging.getLogger.info", "lib.utils.comm.is_main_process", "os.path.join", "open", "yaml.dump", "time.time", "plist.to", "tlist.to", "time.time", "datetime.timedelta", "lib.utils.comm.is_main_process", "logging.getLogger.info", "lib.utils.comm.is_main_process", "torch.save", "torch.save", "torch.save", "torch.nn.parallel.DistributedDataParallel.state_dict", "optimizer.state_dict", "get_model_path", "lib.utils.logger.get_timestamp", "os.path.join", "model.values", "loss_dict_reduced.values", "int", "torch.nn.parallel.DistributedDataParallel.state_dict", "optimizer.state_dict", "get_model_path", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.logger.setup_logger", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.train.train", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.build.build_data_loader", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.solver.build.build_optimizer_scheduler", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.update", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.update", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.calculate_eta_iter", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.is_main_process", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.is_main_process", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.is_main_process", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.get_model_path", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.logger.get_timestamp", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.get_model_path"], ["def", "train", "(", "gpu", ",", "cfg", ",", "args", ",", "basedata", ")", ":", "\n", "    ", "rank", "=", "args", ".", "local_rank", "*", "args", ".", "ngpus_per_node", "+", "gpu", "\n", "logger", "=", "setup_logger", "(", "name", "=", "'train'", ",", "save_dir", "=", "'logs'", ",", "distributed_rank", "=", "rank", ",", "filename", "=", "f'{get_timestamp()}_train.txt'", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'train'", ")", "\n", "logger", ".", "info", "(", "f'args: {args}'", ")", "\n", "logger", ".", "info", "(", "f'config: {cfg}'", ")", "\n", "\n", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "'nccl'", ",", "\n", "init_method", "=", "'env://'", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "\n", "rank", "=", "rank", "\n", ")", "\n", "# synchronize()", "\n", "\n", "phase", "=", "'train'", "\n", "display_freq", "=", "cfg", ".", "ETC", ".", "DISPLAY_FREQ", "\n", "save_freq", "=", "cfg", ".", "ETC", ".", "SAVE_FREQ", "\n", "model_dump_file", "=", "cfg", ".", "ETC", ".", "MODEL_DUMP_FILE", "\n", "model_name", "=", "cfg", ".", "MODEL", ".", "NAME", "\n", "\n", "model", "=", "BaseModel", "(", "cfg", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "gpu", ")", "\n", "model", "=", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "gpu", "]", ",", "find_unused_parameters", "=", "True", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "data_loader", "=", "build_data_loader", "(", "\n", "cfg", ",", "\n", "basedata", ",", "\n", "phase", "=", "phase", ",", "\n", "is_distributed", "=", "True", ",", "\n", "start_iter", "=", "0", "\n", ")", "\n", "\n", "optimizer", ",", "scheduler", "=", "build_optimizer_scheduler", "(", "\n", "cfg", ",", "\n", "model", "\n", ")", "\n", "\n", "max_iter", "=", "len", "(", "data_loader", ")", "\n", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "try", ":", "\n", "        ", "for", "iteration", ",", "(", "pair_list", ",", "target_list", ",", "index", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "data_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "pair_list", "=", "[", "plist", ".", "to", "(", "gpu", ")", "for", "plist", "in", "pair_list", "]", "\n", "target_list", "=", "[", "tlist", ".", "to", "(", "gpu", ")", "for", "tlist", "in", "target_list", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_dict", "=", "model", "(", "pair_list", ",", "target_list", ")", "# 64x132", "\n", "losses", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict", ".", "values", "(", ")", ")", "\n", "losses", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "# reduce losses over all GPUs for logging purposes", "\n", "loss_dict_reduced", "=", "loss_dict", "\n", "losses_reduced", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict_reduced", ".", "values", "(", ")", ")", "\n", "meters", ".", "update", "(", "loss", "=", "losses_reduced", ",", "**", "loss_dict_reduced", ")", "\n", "\n", "batch_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "meters", ".", "update", "(", "time", "=", "batch_time", ",", "data", "=", "data_time", ")", "\n", "\n", "eta_seconds", "=", "calculate_eta_iter", "(", "meters", ".", "time", ".", "global_avg", ",", "iteration", ",", "max_iter", ")", "\n", "eta_string", "=", "str", "(", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "\n", "if", "iteration", "%", "display_freq", "==", "0", "and", "is_main_process", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "'  '", ".", "join", "(", "\n", "[", "\n", "'[{iter}/{max_iter}]'", ",", "\n", "'{meters}'", ",", "\n", "'lr: {lr:.6f}'", ",", "\n", "'eta: {eta}'", ",", "\n", "'max mem: {memory:.0f}'", ",", "\n", "]", "\n", ")", ".", "format", "(", "\n", "iter", "=", "iteration", "+", "1", ",", "\n", "max_iter", "=", "max_iter", ",", "\n", "meters", "=", "str", "(", "meters", ")", ",", "\n", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "eta", "=", "eta_string", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "1024.0", "/", "1024.0", ",", "\n", ")", "\n", ")", "\n", "\n", "", "if", "(", "iteration", "+", "1", ")", "%", "save_freq", "==", "0", "and", "is_main_process", "(", ")", ":", "\n", "                ", "cfg", ".", "ETC", ".", "MODEL_DUMP_FILE", "=", "'{}_weights_iter_{}.pt'", ".", "format", "(", "model_name", ",", "iteration", "+", "1", ")", "\n", "torch", ".", "save", "(", "{", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'loss'", ":", "meters", ".", "loss", ".", "global_avg", ",", "\n", "'iter'", ":", "iteration", "+", "1", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "get_model_path", "(", ")", ",", "cfg", ".", "ETC", ".", "MODEL_DUMP_FILE", ")", ")", "\n", "\n", "", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "logger", ".", "info", "(", "'Early Stop.'", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "is_main_process", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "# save model", "\n", "", "cfg", ".", "ETC", ".", "MODEL_DUMP_FILE", "=", "'{}_weights_iter_{}.pt'", ".", "format", "(", "model_name", ",", "max_iter", ")", "\n", "torch", ".", "save", "(", "{", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'loss'", ":", "meters", ".", "loss", ".", "global_avg", ",", "\n", "'iter'", ":", "max_iter", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "get_model_path", "(", ")", ",", "cfg", ".", "ETC", ".", "MODEL_DUMP_FILE", ")", ")", "\n", "\n", "# save settings", "\n", "with", "open", "(", "'configs/{}_config.yaml'", ".", "format", "(", "model_name", ")", ",", "'w'", ")", "as", "fout", ":", "\n", "            ", "yaml", ".", "dump", "(", "cfg", ",", "fout", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Training Finished Successfully.'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.model.BaseModel.__init__": [[8, 18], ["torch.Module.__init__", "lib.modeling.relpn.make_relpn", "model.RelOIPool", "model.RelationPredictor"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.ImageEncoder.__init__", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.relpn.make_relpn"], ["\t", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "\t\t", "super", "(", "BaseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_ppn", "=", "cfg", ".", "RELPN", ".", "USE_PPN", "\n", "self", ".", "use_dpn", "=", "cfg", ".", "RELPN", ".", "USE_DPN", "\n", "\n", "self", ".", "relpn", "=", "make_relpn", "(", "cfg", ")", "\n", "self", ".", "rel_of_interest_pool", "=", "RelOIPool", "(", ")", "\n", "self", ".", "classifier", "=", "RelationPredictor", "(", "\n", "in_channels", "=", "cfg", ".", "PREDICT", ".", "FEATURE_DIM", ",", "\n", "out_channels", "=", "cfg", ".", "PREDICT", ".", "PREDICATE_NUM", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.model.BaseModel.forward": [[20, 25], ["model.BaseModel._forward_train", "model.BaseModel._forward_test"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.DPN._forward_train", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.DPN._forward_test"], ["", "def", "forward", "(", "self", ",", "pair_list", ",", "target_list", "=", "None", ")", ":", "\n", "\t\t", "if", "self", ".", "training", ":", "\n", "\t\t\t", "return", "self", ".", "_forward_train", "(", "pair_list", ",", "target_list", ")", "\n", "", "else", ":", "\n", "\t\t\t", "return", "self", ".", "_forward_test", "(", "pair_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.model.BaseModel._forward_train": [[26, 52], ["model.BaseModel.rel_of_interest_pool", "zip", "loss_dict.update", "model.BaseModel.relpn", "loss_dict.update", "model.BaseModel.classifier", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.update", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.update"], ["", "", "def", "_forward_train", "(", "self", ",", "pair_list", ",", "target_list", ")", ":", "\n", "\t\t", "loss_dict", "=", "{", "}", "\n", "pair_proposals", "=", "None", "\n", "duration_proposals", "=", "None", "\n", "\n", "feats", "=", "[", "plist", ".", "features", "for", "plist", "in", "pair_list", "]", "\n", "targets", "=", "[", "tlist", ".", "target", "for", "tlist", "in", "target_list", "]", "\n", "\n", "if", "self", ".", "use_ppn", "or", "self", ".", "use_dpn", ":", "\n", "\t\t\t", "pair_proposals", ",", "duration_proposals", ",", "relpn_losses", "=", "self", ".", "relpn", "(", "pair_list", ",", "target_list", ")", "\n", "loss_dict", ".", "update", "(", "relpn_losses", ")", "\n", "\n", "# relation of interest pooling", "\n", "", "reloi_feats", "=", "self", ".", "rel_of_interest_pool", "(", "feats", ",", "duration_proposals", ")", "\n", "\n", "# for multi-label classification", "\n", "loss_relation", "=", "0", "\n", "for", "reloi_feat", ",", "target", "in", "zip", "(", "reloi_feats", ",", "targets", ")", ":", "\n", "\t\t\t", "rel_logit", "=", "self", ".", "classifier", "(", "reloi_feat", ")", "# batch x pair_per_seg x 11070", "\n", "loss_relation", "+=", "F", ".", "binary_cross_entropy", "(", "rel_logit", ",", "target", ")", "\n", "\n", "", "loss_rel", "=", "{", "\n", "\"loss_rel\"", ":", "loss_relation", "\n", "}", "\n", "loss_dict", ".", "update", "(", "loss_rel", ")", "\n", "return", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.model.BaseModel._forward_test": [[53, 66], ["model.BaseModel.relpn", "model.BaseModel.rel_of_interest_pool", "rel_logits.append", "model.BaseModel.classifier"], "methods", ["None"], ["", "def", "_forward_test", "(", "self", ",", "pair_list", ")", ":", "\n", "\t\t", "pair_proposals", "=", "None", "\n", "duration_proposals", "=", "None", "\n", "\n", "feats", "=", "[", "plist", ".", "features", "for", "plist", "in", "pair_list", "]", "\n", "\n", "pair_proposals", ",", "duration_proposals", ",", "_", "=", "self", ".", "relpn", "(", "pair_list", ")", "\n", "reloi_feats", "=", "self", ".", "rel_of_interest_pool", "(", "feats", ",", "duration_proposals", ")", "\n", "\n", "rel_logits", "=", "[", "]", "\n", "for", "reloi_feat", "in", "reloi_feats", ":", "\n", "\t\t\t", "rel_logits", ".", "append", "(", "self", ".", "classifier", "(", "reloi_feat", ")", ")", "# batch x pair_per_seg x 11070", "\n", "", "return", "pair_proposals", ",", "duration_proposals", ",", "rel_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.model.RelOIPool.__call__": [[69, 74], ["None"], "methods", ["None"], ["\t", "def", "__call__", "(", "self", ",", "feats", ",", "duration_proposals", ")", ":", "\n", "\t\t", "if", "duration_proposals", "is", "None", ":", "\n", "\t\t\t", "return", "feats", "\n", "\n", "", "return", "feats", "[", "duration_proposals", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.model.RelationPredictor.__init__": [[77, 84], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.ImageEncoder.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "\t\t", "super", "(", "RelationPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rel_predictor", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "\n", "for", "l", "in", "[", "self", ".", "rel_predictor", "]", ":", "\n", "\t\t\t", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.model.RelationPredictor.forward": [[85, 89], ["model.RelationPredictor.rel_predictor", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "reloi_feats", ")", ":", "\n", "\t\t", "rel_logit", "=", "self", ".", "rel_predictor", "(", "reloi_feats", ")", "\n", "rel_logit", "=", "torch", ".", "sigmoid", "(", "rel_logit", ")", "\n", "return", "rel_logit", "", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.get_segment_signature": [[5, 10], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.get_feature_path": [[12, 23], ["os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["None"], []], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.get_model_path": [[25, 33], ["os.path.join", "os.path.exists", "os.makedirs"], "function", ["None"], []], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.segment_video": [[35, 42], ["range"], "function", ["None"], []], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.inflate.inflate_conv": [[5, 39], ["torch.nn.Conv3d", "torch.nn.Parameter", "torch.zeros", "weight_2d.unsqueeze().repeat.unsqueeze().repeat", "weight_2d.unsqueeze().repeat", "weight_2d.unsqueeze().repeat.unsqueeze", "weight_2d.unsqueeze"], "function", ["None"], ["def", "inflate_conv", "(", "conv2d", ",", "\n", "time_dim", "=", "3", ",", "\n", "time_padding", "=", "0", ",", "\n", "time_stride", "=", "1", ",", "\n", "time_dilation", "=", "1", ",", "\n", "center", "=", "False", ")", ":", "\n", "# To preserve activations, padding should be by continuity and not zero", "\n", "# or no padding in time dimension", "\n", "    ", "kernel_dim", "=", "(", "time_dim", ",", "conv2d", ".", "kernel_size", "[", "0", "]", ",", "conv2d", ".", "kernel_size", "[", "1", "]", ")", "\n", "padding", "=", "(", "time_padding", ",", "conv2d", ".", "padding", "[", "0", "]", ",", "conv2d", ".", "padding", "[", "1", "]", ")", "\n", "stride", "=", "(", "time_stride", ",", "conv2d", ".", "stride", "[", "0", "]", ",", "conv2d", ".", "stride", "[", "0", "]", ")", "\n", "dilation", "=", "(", "time_dilation", ",", "conv2d", ".", "dilation", "[", "0", "]", ",", "conv2d", ".", "dilation", "[", "1", "]", ")", "\n", "conv3d", "=", "torch", ".", "nn", ".", "Conv3d", "(", "\n", "conv2d", ".", "in_channels", ",", "\n", "conv2d", ".", "out_channels", ",", "\n", "kernel_dim", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "stride", "=", "stride", ")", "\n", "# Repeat filter time_dim times along time dimension", "\n", "weight_2d", "=", "conv2d", ".", "weight", ".", "data", "\n", "if", "center", ":", "\n", "        ", "weight_3d", "=", "torch", ".", "zeros", "(", "*", "weight_2d", ".", "shape", ")", "\n", "weight_3d", "=", "weight_3d", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "time_dim", ",", "1", ",", "1", ")", "\n", "middle_idx", "=", "time_dim", "//", "2", "\n", "weight_3d", "[", ":", ",", ":", ",", "middle_idx", ",", ":", ",", ":", "]", "=", "weight_2d", "\n", "", "else", ":", "\n", "        ", "weight_3d", "=", "weight_2d", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "time_dim", ",", "1", ",", "1", ")", "\n", "weight_3d", "=", "weight_3d", "/", "time_dim", "\n", "\n", "# Assign new params", "\n", "", "conv3d", ".", "weight", "=", "Parameter", "(", "weight_3d", ")", "\n", "conv3d", ".", "bias", "=", "conv2d", ".", "bias", "\n", "return", "conv3d", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.inflate.inflate_linear": [[41, 54], ["torch.nn.Linear", "linear2d.weight.data.repeat", "torch.nn.Parameter"], "function", ["None"], ["", "def", "inflate_linear", "(", "linear2d", ",", "time_dim", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        time_dim: final time dimension of the features\n    \"\"\"", "\n", "linear3d", "=", "torch", ".", "nn", ".", "Linear", "(", "linear2d", ".", "in_features", "*", "time_dim", ",", "\n", "linear2d", ".", "out_features", ")", "\n", "weight3d", "=", "linear2d", ".", "weight", ".", "data", ".", "repeat", "(", "1", ",", "time_dim", ")", "\n", "weight3d", "=", "weight3d", "/", "time_dim", "\n", "\n", "linear3d", ".", "weight", "=", "Parameter", "(", "weight3d", ")", "\n", "linear3d", ".", "bias", "=", "linear2d", ".", "bias", "\n", "return", "linear3d", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.inflate.inflate_batch_norm": [[56, 65], ["torch.nn.BatchNorm3d"], "function", ["None"], ["", "def", "inflate_batch_norm", "(", "batch2d", ")", ":", "\n", "# In pytorch 0.2.0 the 2d and 3d versions of batch norm", "\n", "# work identically except for the check that verifies the", "\n", "# input dimensions", "\n", "\n", "    ", "batch3d", "=", "torch", ".", "nn", ".", "BatchNorm3d", "(", "batch2d", ".", "num_features", ")", "\n", "# retrieve 3d _check_input_dim function", "\n", "batch2d", ".", "_check_input_dim", "=", "batch3d", ".", "_check_input_dim", "\n", "return", "batch2d", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.inflate.inflate_pool": [[67, 94], ["isinstance", "torch.nn.AdaptiveAvgPool3d", "isinstance", "torch.nn.MaxPool3d", "isinstance", "torch.nn.AvgPool3d", "ValueError", "type"], "function", ["None"], ["", "def", "inflate_pool", "(", "pool2d", ",", "\n", "time_dim", "=", "1", ",", "\n", "time_padding", "=", "0", ",", "\n", "time_stride", "=", "None", ",", "\n", "time_dilation", "=", "1", ")", ":", "\n", "    ", "if", "isinstance", "(", "pool2d", ",", "torch", ".", "nn", ".", "AdaptiveAvgPool2d", ")", ":", "\n", "        ", "pool3d", "=", "torch", ".", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "kernel_dim", "=", "(", "time_dim", ",", "pool2d", ".", "kernel_size", ",", "pool2d", ".", "kernel_size", ")", "\n", "padding", "=", "(", "time_padding", ",", "pool2d", ".", "padding", ",", "pool2d", ".", "padding", ")", "\n", "if", "time_stride", "is", "None", ":", "\n", "            ", "time_stride", "=", "time_dim", "\n", "", "stride", "=", "(", "time_stride", ",", "pool2d", ".", "stride", ",", "pool2d", ".", "stride", ")", "\n", "if", "isinstance", "(", "pool2d", ",", "torch", ".", "nn", ".", "MaxPool2d", ")", ":", "\n", "            ", "dilation", "=", "(", "time_dilation", ",", "pool2d", ".", "dilation", ",", "pool2d", ".", "dilation", ")", "\n", "pool3d", "=", "torch", ".", "nn", ".", "MaxPool3d", "(", "\n", "kernel_dim", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "stride", "=", "stride", ",", "\n", "ceil_mode", "=", "pool2d", ".", "ceil_mode", ")", "\n", "", "elif", "isinstance", "(", "pool2d", ",", "torch", ".", "nn", ".", "AvgPool2d", ")", ":", "\n", "            ", "pool3d", "=", "torch", ".", "nn", ".", "AvgPool3d", "(", "kernel_dim", ",", "stride", "=", "stride", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'{} is not among known pooling classes'", ".", "format", "(", "type", "(", "pool2d", ")", ")", ")", "\n", "\n", "", "", "return", "pool3d", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.i3res.I3ResNet.__init__": [[8, 41], ["super().__init__", "inflate.inflate_conv", "inflate.inflate_batch_norm", "torch.nn.ReLU", "inflate.inflate_pool", "i3res.inflate_reslayer", "i3res.inflate_reslayer", "i3res.inflate_reslayer", "i3res.inflate_reslayer", "inflate.inflate_pool", "torch.nn.Conv3d", "int", "inflate.inflate_pool", "inflate.inflate_linear", "math.ceil"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.ImageEncoder.__init__", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.inflate.inflate_conv", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.inflate.inflate_batch_norm", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.inflate.inflate_pool", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.i3res.inflate_reslayer", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.i3res.inflate_reslayer", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.i3res.inflate_reslayer", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.i3res.inflate_reslayer", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.inflate.inflate_pool", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.inflate.inflate_pool", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.inflate.inflate_linear"], ["    ", "def", "__init__", "(", "self", ",", "resnet2d", ",", "frame_nb", "=", "16", ",", "class_nb", "=", "1000", ",", "conv_class", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            conv_class: Whether to use convolutional layer as classifier to\n                adapt to various number of frames\n        \"\"\"", "\n", "super", "(", "I3ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_class", "=", "conv_class", "\n", "\n", "self", ".", "conv1", "=", "inflate", ".", "inflate_conv", "(", "\n", "resnet2d", ".", "conv1", ",", "time_dim", "=", "3", ",", "time_padding", "=", "1", ",", "center", "=", "True", ")", "\n", "self", ".", "bn1", "=", "inflate", ".", "inflate_batch_norm", "(", "resnet2d", ".", "bn1", ")", "\n", "self", ".", "relu", "=", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "inflate", ".", "inflate_pool", "(", "\n", "resnet2d", ".", "maxpool", ",", "time_dim", "=", "3", ",", "time_padding", "=", "1", ",", "time_stride", "=", "2", ")", "\n", "\n", "self", ".", "layer1", "=", "inflate_reslayer", "(", "resnet2d", ".", "layer1", ")", "\n", "self", ".", "layer2", "=", "inflate_reslayer", "(", "resnet2d", ".", "layer2", ")", "\n", "self", ".", "layer3", "=", "inflate_reslayer", "(", "resnet2d", ".", "layer3", ")", "\n", "self", ".", "layer4", "=", "inflate_reslayer", "(", "resnet2d", ".", "layer4", ")", "\n", "\n", "if", "conv_class", ":", "\n", "            ", "self", ".", "avgpool", "=", "inflate", ".", "inflate_pool", "(", "resnet2d", ".", "avgpool", ",", "time_dim", "=", "1", ")", "\n", "self", ".", "classifier", "=", "torch", ".", "nn", ".", "Conv3d", "(", "\n", "in_channels", "=", "2048", ",", "\n", "out_channels", "=", "class_nb", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "final_time_dim", "=", "int", "(", "math", ".", "ceil", "(", "frame_nb", "/", "16", ")", ")", "\n", "self", ".", "avgpool", "=", "inflate", ".", "inflate_pool", "(", "\n", "resnet2d", ".", "avgpool", ",", "time_dim", "=", "final_time_dim", ")", "\n", "self", ".", "fc", "=", "inflate", ".", "inflate_linear", "(", "resnet2d", ".", "fc", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.i3res.I3ResNet.forward": [[42, 64], ["i3res.I3ResNet.conv1", "i3res.I3ResNet.bn1", "i3res.I3ResNet.relu", "i3res.I3ResNet.maxpool", "i3res.I3ResNet.layer1", "i3res.I3ResNet.layer2", "i3res.I3ResNet.layer3", "i3res.I3ResNet.layer4", "i3res.I3ResNet.avgpool", "i3res.I3ResNet.classifier", "i3res.I3ResNet.squeeze", "i3res.I3ResNet.squeeze", "i3res.I3ResNet.mean", "i3res.I3ResNet.avgpool", "i3res.I3ResNet.view", "i3res.I3ResNet.fc", "i3res.I3ResNet.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "if", "self", ".", "conv_class", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "x", "=", "x", ".", "squeeze", "(", "3", ")", "\n", "x", "=", "x", ".", "squeeze", "(", "3", ")", "\n", "x", "=", "x", ".", "mean", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x_reshape", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x_reshape", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.i3res.Bottleneck3d.__init__": [[75, 105], ["super().__init__", "inflate.inflate_conv", "inflate.inflate_batch_norm", "inflate.inflate_conv", "inflate.inflate_batch_norm", "inflate.inflate_conv", "inflate.inflate_batch_norm", "torch.nn.ReLU", "i3res.inflate_downsample"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.ImageEncoder.__init__", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.inflate.inflate_conv", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.inflate.inflate_batch_norm", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.inflate.inflate_conv", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.inflate.inflate_batch_norm", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.inflate.inflate_conv", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.inflate.inflate_batch_norm", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.i3res.inflate_downsample"], ["    ", "def", "__init__", "(", "self", ",", "bottleneck2d", ")", ":", "\n", "        ", "super", "(", "Bottleneck3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "spatial_stride", "=", "bottleneck2d", ".", "conv2", ".", "stride", "[", "0", "]", "\n", "\n", "self", ".", "conv1", "=", "inflate", ".", "inflate_conv", "(", "\n", "bottleneck2d", ".", "conv1", ",", "time_dim", "=", "1", ",", "center", "=", "True", ")", "\n", "self", ".", "bn1", "=", "inflate", ".", "inflate_batch_norm", "(", "bottleneck2d", ".", "bn1", ")", "\n", "\n", "self", ".", "conv2", "=", "inflate", ".", "inflate_conv", "(", "\n", "bottleneck2d", ".", "conv2", ",", "\n", "time_dim", "=", "3", ",", "\n", "time_padding", "=", "1", ",", "\n", "time_stride", "=", "spatial_stride", ",", "\n", "center", "=", "True", ")", "\n", "self", ".", "bn2", "=", "inflate", ".", "inflate_batch_norm", "(", "bottleneck2d", ".", "bn2", ")", "\n", "\n", "self", ".", "conv3", "=", "inflate", ".", "inflate_conv", "(", "\n", "bottleneck2d", ".", "conv3", ",", "time_dim", "=", "1", ",", "center", "=", "True", ")", "\n", "self", ".", "bn3", "=", "inflate", ".", "inflate_batch_norm", "(", "bottleneck2d", ".", "bn3", ")", "\n", "\n", "self", ".", "relu", "=", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "if", "bottleneck2d", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "self", ".", "downsample", "=", "inflate_downsample", "(", "\n", "bottleneck2d", ".", "downsample", ",", "time_stride", "=", "spatial_stride", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n", "", "self", ".", "stride", "=", "bottleneck2d", ".", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.i3res.Bottleneck3d.forward": [[106, 125], ["i3res.Bottleneck3d.conv1", "i3res.Bottleneck3d.bn1", "i3res.Bottleneck3d.relu", "i3res.Bottleneck3d.conv2", "i3res.Bottleneck3d.bn2", "i3res.Bottleneck3d.relu", "i3res.Bottleneck3d.conv3", "i3res.Bottleneck3d.bn3", "i3res.Bottleneck3d.relu", "i3res.Bottleneck3d.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.i3res.inflate_reslayer": [[66, 72], ["torch.nn.Sequential", "i3res.Bottleneck3d", "reslayers3d.append"], "function", ["None"], ["", "", "def", "inflate_reslayer", "(", "reslayer2d", ")", ":", "\n", "    ", "reslayers3d", "=", "[", "]", "\n", "for", "layer2d", "in", "reslayer2d", ":", "\n", "        ", "layer3d", "=", "Bottleneck3d", "(", "layer2d", ")", "\n", "reslayers3d", ".", "append", "(", "layer3d", ")", "\n", "", "return", "torch", ".", "nn", ".", "Sequential", "(", "*", "reslayers3d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.i3res.inflate_downsample": [[127, 133], ["torch.nn.Sequential", "inflate.inflate_conv", "inflate.inflate_batch_norm"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.inflate.inflate_conv", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.inflate.inflate_batch_norm"], ["", "", "def", "inflate_downsample", "(", "downsample2d", ",", "time_stride", "=", "1", ")", ":", "\n", "    ", "downsample3d", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "inflate", ".", "inflate_conv", "(", "\n", "downsample2d", "[", "0", "]", ",", "time_dim", "=", "1", ",", "time_stride", "=", "time_stride", ",", "center", "=", "True", ")", ",", "\n", "inflate", ".", "inflate_batch_norm", "(", "downsample2d", "[", "1", "]", ")", ")", "\n", "return", "downsample3d", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.backbone.inflate_resnet.run_inflater": [[15, 92], ["torchvision.Normalize", "torchvision.ImageFolder", "json.load", "torch.utils.data.DataLoader", "i3res.I3ResNet", "i3resnet.to.train", "torch.device", "i3resnet.to.to", "torchvision.models.resnet152.to", "enumerate", "torchvision.Compose", "open", "torchvision.models.resnet50", "torchvision.models.resnet50", "torchvision.models.resnet50", "copy.deepcopy", "target.to.to", "torch.autograd.Variable", "torch.autograd.Variable", "torchvision.models.resnet152.", "input_2d.unsqueeze().repeat", "torch.autograd.Variable", "i3resnet.to.", "print", "print", "print", "range", "torchvision.models.resnet101", "torchvision.models.resnet101", "torchvision.models.resnet101", "torch.cuda.is_available", "input_2d.to", "resnet.cpu", "input_2d.unsqueeze().repeat.to", "i3resnet.cpu", "out_diff.max", "i3resnet.max", "range", "torchvision.CenterCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "len", "torchvision.models.resnet152", "torchvision.models.resnet152", "torchvision.models.resnet152", "ValueError().format", "input_2d.unsqueeze", "out_diff.abs().mean", "resnet.abs().mean", "torch.sort", "print", "range", "input_2d[].numpy().transpose", "matplotlib.pyplot.imshow", "matplotlib.pyplot.show", "str", "out_diff.max", "print", "ValueError", "out_diff.abs", "resnet.abs", "input_2d[].numpy", "input_2d[].numpy().transpose.min", "input_2d[].numpy().transpose.max", "input_2d[].numpy().transpose.min"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.train.train", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to"], ["def", "run_inflater", "(", "args", ")", ":", "\n", "    ", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "dataset", "=", "datasets", ".", "ImageFolder", "(", "'/home/t2_u1/data/vidvrd/image/'", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "\n", "# class_idx = {0: 'airplane', 1: 'antelope', 2: 'ball', 3: 'bear', 4: 'bicycle', 5: 'bird', 6: 'bus', 7: 'car', 8: 'cattle', 9: 'dog', 10: 'domestic_cat', 11: 'elephant', 12: 'fox', 13: 'frisbee', 14: 'giant_panda', 15: 'hamster', 16: 'horse', 17: 'lion', 18: 'lizard', 19: 'monkey', 20: 'motorcycle', 21: 'person', 22: 'rabbit', 23: 'red_panda', 24: 'sheep', 25: 'skateboard', 26: 'snake', 27: 'sofa', 28: 'squirrel', 29: 'tiger', 30: 'train', 31: 'turtle', 32: 'watercraft', 33: 'whale', 34: 'zebra'}", "\n", "# classes = [category for category in class_idx.values()]", "\n", "\n", "class_idx", "=", "json", ".", "load", "(", "open", "(", "'imagenet_class_index.json'", ")", ")", "\n", "classes", "=", "[", "class_idx", "[", "str", "(", "k", ")", "]", "[", "1", "]", "for", "k", "in", "range", "(", "len", "(", "class_idx", ")", ")", "]", "\n", "\n", "if", "args", ".", "resnet_nb", "==", "50", ":", "\n", "        ", "resnet", "=", "torchvision", ".", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "args", ".", "resnet_nb", "==", "101", ":", "\n", "        ", "resnet", "=", "torchvision", ".", "models", ".", "resnet101", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "args", ".", "resnet_nb", "==", "152", ":", "\n", "        ", "resnet", "=", "torchvision", ".", "models", ".", "resnet152", "(", "pretrained", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'resnet_nb should be in [50|101|152] but got {}'", "\n", ")", ".", "format", "(", "args", ".", "resnet_nb", ")", "\n", "\n", "", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "num_workers", "=", "2", ",", "shuffle", "=", "False", ")", "\n", "i3resnet", "=", "I3ResNet", "(", "copy", ".", "deepcopy", "(", "resnet", ")", ",", "args", ".", "frame_nb", ")", "\n", "i3resnet", ".", "train", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "i3resnet", "=", "i3resnet", ".", "to", "(", "device", ")", "\n", "resnet", "=", "resnet", ".", "to", "(", "device", ")", "\n", "\n", "for", "i", ",", "(", "input_2d", ",", "target", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "target_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "target", ")", "\n", "input_2d_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input_2d", ".", "to", "(", "device", ")", ")", "\n", "\n", "out2d", "=", "resnet", "(", "input_2d_var", ")", "\n", "out2d", "=", "out2d", ".", "cpu", "(", ")", ".", "data", "\n", "\n", "input_3d", "=", "input_2d", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "args", ".", "frame_nb", ",", "1", ",", "1", ")", "\n", "input_3d_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input_3d", ".", "to", "(", "device", ")", ")", "\n", "\n", "out3d", "=", "i3resnet", "(", "input_3d_var", ")", "\n", "out3d", "=", "out3d", ".", "cpu", "(", ")", ".", "data", "\n", "\n", "out_diff", "=", "out2d", "-", "out3d", "\n", "print", "(", "'mean abs error {}'", ".", "format", "(", "out_diff", ".", "abs", "(", ")", ".", "mean", "(", ")", ")", ")", "\n", "print", "(", "'mean abs val {}'", ".", "format", "(", "out2d", ".", "abs", "(", ")", ".", "mean", "(", ")", ")", ")", "\n", "\n", "# Computing errors between final predictions of inflated and uninflated", "\n", "# dense networks", "\n", "print", "(", "\n", "'Batch {i} maximum error between 2d and inflated predictions: {err}'", ".", "\n", "format", "(", "i", "=", "i", ",", "err", "=", "out_diff", ".", "max", "(", ")", ")", ")", "\n", "assert", "(", "out_diff", ".", "max", "(", ")", "<", "0.0001", ")", "\n", "\n", "if", "args", ".", "display_samples", ":", "\n", "            ", "max_vals", ",", "max_indexes", "=", "out3d", ".", "max", "(", "1", ")", "\n", "for", "sample_idx", "in", "range", "(", "out3d", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "sample_out", "=", "out3d", "[", "sample_idx", "]", "\n", "\n", "top_val", ",", "top_idx", "=", "torch", ".", "sort", "(", "sample_out", ",", "0", ",", "descending", "=", "True", ")", "\n", "\n", "print", "(", "'Top {} classes and associated scores: '", ".", "format", "(", "\n", "args", ".", "top_k", ")", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "top_k", ")", ":", "\n", "                    ", "print", "(", "'[{}]: {}'", ".", "format", "(", "classes", "[", "top_idx", "[", "i", "]", "]", ",", "\n", "top_val", "[", "i", "]", ")", ")", "\n", "\n", "", "sample_img", "=", "input_2d", "[", "sample_idx", "]", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "sample_img", "=", "(", "sample_img", "-", "sample_img", ".", "min", "(", ")", ")", "*", "(", "1", "/", "(", "\n", "sample_img", ".", "max", "(", ")", "-", "sample_img", ".", "min", "(", ")", ")", ")", "\n", "plt", ".", "imshow", "(", "sample_img", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.ppn.PPN.__init__": [[11, 23], ["torch.Module.__init__", "ppn.PPNHead", "sampler.BalancedPositiveNegativePairSampler"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.ImageEncoder.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "PPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_pair_proposals", "=", "cfg", ".", "RELPN", ".", "PPN", ".", "NUM_PAIR_PROPOSALS", "\n", "self", ".", "ppn_head", "=", "PPNHead", "(", "\n", "in_channels", "=", "cfg", ".", "RELPN", ".", "PPN", ".", "IN_CHANNELS", ",", "\n", "hidden_channels", "=", "cfg", ".", "RELPN", ".", "PPN", ".", "HIDDEN_CHANNELS", ",", "\n", "out_channels", "=", "cfg", ".", "RELPN", ".", "PPN", ".", "OUT_CHANNELS", ",", "\n", ")", "\n", "\n", "self", ".", "fg_bg_sampler", "=", "BalancedPositiveNegativePairSampler", "(", "\n", "batch_size_per_image", "=", "cfg", ".", "RELPN", ".", "PPN", ".", "BATCH_SIZE_PER_SEGMENT", ",", "\n", "positive_fraction", "=", "cfg", ".", "RELPN", ".", "PPN", ".", "POSITIVE_FRACTION", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.ppn.PPN._predict_pair_matrices": [[25, 35], ["plist.get_field", "pair_matrices.append", "ppn.PPN.ppn_head"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.get_field"], ["", "def", "_predict_pair_matrices", "(", "self", ",", "pair_list", ")", ":", "\n", "        ", "cls_logits", "=", "[", "plist", ".", "get_field", "(", "'track_cls_logits'", ")", "for", "plist", "in", "pair_list", "]", "\n", "\n", "pair_matrices", "=", "[", "]", "\n", "for", "cls_logit", "in", "cls_logits", ":", "\n", "            ", "pair_matrices", ".", "append", "(", "\n", "self", ".", "ppn_head", "(", "cls_logit", ",", "cls_logit", ")", "\n", ")", "\n", "\n", "", "return", "pair_matrices", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.ppn.PPN._generate_nxn_gt_matrices": [[36, 50], ["zip", "plist.get_field", "plist.get_field", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "zip", "gt_matrices.append", "sum"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.get_field", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.get_field"], ["", "def", "_generate_nxn_gt_matrices", "(", "self", ",", "pair_list", ",", "target_list", ")", ":", "\n", "        ", "track_pairs", "=", "[", "plist", ".", "get_field", "(", "'tracklet_pairs'", ")", "for", "plist", "in", "pair_list", "]", "# batch x num_pairs_per_seg x 2", "\n", "num_tracks", "=", "[", "plist", ".", "get_field", "(", "'num_tracklets'", ")", "for", "plist", "in", "pair_list", "]", "# batch x 1", "\n", "pred_labels", "=", "[", "tlist", ".", "target", "for", "tlist", "in", "target_list", "]", "# batch x num_pairs_per_seg x 132", "\n", "\n", "gt_matrices", "=", "[", "]", "\n", "for", "track_pair", ",", "num_track", ",", "pred_label", "in", "zip", "(", "track_pairs", ",", "num_tracks", ",", "pred_labels", ")", ":", "\n", "            ", "gt_matrix", "=", "torch", ".", "zeros", "(", "num_track", ",", "num_track", ")", "\n", "for", "p", ",", "lbl", "in", "zip", "(", "track_pair", ",", "pred_label", ")", ":", "\n", "                ", "if", "sum", "(", "lbl", ")", ">", "0", ":", "\n", "                    ", "gt_matrix", "[", "p", "[", "0", "]", ",", "p", "[", "1", "]", "]", "=", "1", "\n", "", "", "gt_matrices", ".", "append", "(", "gt_matrix", ")", "\n", "\n", "", "return", "gt_matrices", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.ppn.PPN.forward": [[51, 56], ["ppn.PPN._forward_train", "ppn.PPN._forward_test"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.DPN._forward_train", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.DPN._forward_test"], ["", "def", "forward", "(", "self", ",", "pair_list", ",", "target_list", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_forward_train", "(", "pair_list", ",", "target_list", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_forward_test", "(", "pair_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.ppn.PPN._forward_train": [[57, 78], ["ppn.PPN._predict_pair_matrices", "ppn.PPN._generate_nxn_gt_matrices", "enumerate", "zip", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "pair_proposals.append", "gt_matrix.to", "pair_matrix.view"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.ppn.PPN._predict_pair_matrices", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.ppn.PPN._generate_nxn_gt_matrices", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.to"], ["", "", "def", "_forward_train", "(", "self", ",", "pair_list", ",", "target_list", ")", ":", "\n", "        ", "pair_matrices", "=", "self", ".", "_predict_pair_matrices", "(", "pair_list", ")", "\n", "gt_matrices", "=", "self", ".", "_generate_nxn_gt_matrices", "(", "pair_list", ",", "target_list", ")", "# NxN", "\n", "\n", "pair_proposals", "=", "[", "]", "\n", "loss_pair_proposal", "=", "0", "\n", "for", "seg_idx", ",", "(", "pair_matrix", ",", "gt_matrix", ")", "in", "enumerate", "(", "zip", "(", "pair_matrices", ",", "gt_matrices", ")", ")", ":", "\n", "            ", "loss_pair_proposal", "+=", "F", ".", "binary_cross_entropy", "(", "pair_matrix", ",", "gt_matrix", ".", "to", "(", "pair_matrix", ".", "device", ")", ")", "\n", "\n", "pair_matrix_sorted", ",", "order", "=", "torch", ".", "sort", "(", "pair_matrix", ".", "view", "(", "-", "1", ")", ",", "descending", "=", "True", ")", "\n", "sampled_pair_ind", "=", "order", "[", ":", "self", ".", "num_pair_proposals", "]", "\n", "pair_proposals", ".", "append", "(", "sampled_pair_ind", ")", "\n", "\n", "", "loss_ppn", "=", "{", "\n", "\"loss_pair\"", ":", "loss_pair_proposal", ",", "\n", "}", "\n", "\n", "# feats = torch.stack([feats[i][pair_proposals[i]] for i in range(len(feats))])", "\n", "# targets = torch.stack([targets[i][pair_proposals[i]] for i in range(len(targets))])", "\n", "\n", "return", "pair_proposals", ",", "loss_ppn", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.ppn.PPN._forward_test": [[79, 91], ["ppn.PPN._predict_pair_matrices", "enumerate", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "pair_proposals.append", "pair_matrix.view"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.ppn.PPN._predict_pair_matrices"], ["", "def", "_forward_test", "(", "self", ",", "pair_list", ")", ":", "\n", "        ", "pair_matrices", "=", "self", ".", "_predict_pair_matrices", "(", "pair_list", ")", "\n", "\n", "pair_proposals", "=", "[", "]", "\n", "for", "seg_idx", ",", "pair_matrix", "in", "enumerate", "(", "pair_matrices", ")", ":", "\n", "            ", "pair_matrix_sorted", ",", "order", "=", "torch", ".", "sort", "(", "pair_matrix", ".", "view", "(", "-", "1", ")", ",", "descending", "=", "True", ")", "\n", "sampled_pair_ind", "=", "order", "[", ":", "self", ".", "num_pair_proposals", "]", "\n", "pair_proposals", ".", "append", "(", "sampled_pair_ind", ")", "\n", "\n", "# feats = torch.stack([feats[i][pair_proposals[i]] for i in range(len(feats))])", "\n", "\n", "", "return", "pair_proposals", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.ppn.PPNHead.__init__": [[93, 105], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.ImageEncoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "hidden_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "PPNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sub_emb", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_channels", ",", "hidden_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_channels", ",", "out_channels", ")", "\n", ")", "\n", "\n", "self", ".", "obj_emb", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_channels", ",", "hidden_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_channels", ",", "out_channels", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.ppn.PPNHead.forward": [[107, 113], ["ppn.PPNHead.sub_emb", "ppn.PPNHead.obj_emb", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "ppn.PPNHead.t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sub_logits", ",", "obj_logits", ")", ":", "\n", "        ", "sub_emb", "=", "self", ".", "sub_emb", "(", "sub_logits", ")", "\n", "obj_emb", "=", "self", ".", "obj_emb", "(", "obj_logits", ")", "\n", "pair_matrix", "=", "torch", ".", "mm", "(", "sub_emb", ",", "obj_emb", ".", "t", "(", ")", ")", "\n", "pair_matrix", "=", "torch", ".", "sigmoid", "(", "pair_matrix", ")", "\n", "return", "pair_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.ppn.make_ppn": [[115, 118], ["ppn.PPN"], "function", ["None"], ["", "", "def", "make_ppn", "(", "cfg", ")", ":", "\n", "    ", "return", "PPN", "(", "\n", "cfg", "\n", ")", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator.BufferList.__init__": [[13, 17], ["torch.nn.Module.__init__", "anchor_generator.BufferList.extend"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.ImageEncoder.__init__", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator.BufferList.extend"], ["def", "__init__", "(", "self", ",", "buffers", "=", "None", ")", ":", "\n", "        ", "super", "(", "BufferList", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "buffers", "is", "not", "None", ":", "\n", "            ", "self", ".", "extend", "(", "buffers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator.BufferList.extend": [[18, 23], ["len", "enumerate", "anchor_generator.BufferList.register_buffer", "str"], "methods", ["None"], ["", "", "def", "extend", "(", "self", ",", "buffers", ")", ":", "\n", "        ", "offset", "=", "len", "(", "self", ")", "\n", "for", "i", ",", "buffer", "in", "enumerate", "(", "buffers", ")", ":", "\n", "            ", "self", ".", "register_buffer", "(", "str", "(", "offset", "+", "i", ")", ",", "buffer", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator.BufferList.__len__": [[24, 26], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_buffers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator.BufferList.__iter__": [[27, 29], ["iter", "anchor_generator.BufferList._buffers.values"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "_buffers", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator.AnchorGenerator.__init__": [[32, 44], ["torch.nn.Module.__init__", "anchor_generator.BufferList", "generate_anchors().float", "anchor_generator.generate_anchors"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.ImageEncoder.__init__", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator.generate_anchors"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "sizes", "=", "(", "4", ",", "8", ",", "16", ")", ",", "\n", "anchor_stride", "=", "8", "\n", ")", ":", "\n", "        ", "super", "(", "AnchorGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "cell_anchors", "=", "[", "\n", "generate_anchors", "(", "anchor_stride", ",", "sizes", ")", ".", "float", "(", ")", "\n", "]", "\n", "self", ".", "stride", "=", "anchor_stride", "\n", "self", ".", "cell_anchors", "=", "BufferList", "(", "cell_anchors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator.AnchorGenerator.num_anchors_per_location": [[45, 47], ["len"], "methods", ["None"], ["", "def", "num_anchors_per_location", "(", "self", ")", ":", "\n", "        ", "return", "[", "len", "(", "cell_anchors", ")", "for", "cell_anchors", "in", "self", ".", "cell_anchors", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator.AnchorGenerator.grid_anchors": [[48, 60], ["torch.arange", "anchors.append", "torch.arange.view", "base_anchors.view"], "methods", ["None"], ["", "def", "grid_anchors", "(", "self", ",", "time_width", ")", ":", "\n", "        ", "anchors", "=", "[", "]", "\n", "for", "base_anchors", "in", "self", ".", "cell_anchors", ":", "\n", "            ", "device", "=", "base_anchors", ".", "device", "\n", "shifts", "=", "torch", ".", "arange", "(", "\n", "0", ",", "time_width", "+", "1", ",", "step", "=", "self", ".", "stride", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "\n", "anchors", ".", "append", "(", "\n", "(", "shifts", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "+", "base_anchors", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", ")", "\n", "\n", "", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator.AnchorGenerator.forward": [[61, 65], ["anchor_generator.AnchorGenerator.grid_anchors"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator.AnchorGenerator.grid_anchors"], ["", "def", "forward", "(", "self", ",", "rel_feats", ")", ":", "\n", "        ", "time_width", "=", "rel_feats", ".", "shape", "[", "2", "]", "# NxCxT (time dimension)", "\n", "anchors", "=", "self", ".", "grid_anchors", "(", "time_width", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator.generate_anchors": [[67, 73], ["anchor_generator._generate_anchors", "numpy.array"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator._generate_anchors"], ["", "", "def", "generate_anchors", "(", "\n", "stride", "=", "8", ",", "sizes", "=", "(", "4", ",", "8", ",", "16", ")", "\n", ")", ":", "\n", "    ", "return", "_generate_anchors", "(", "\n", "stride", ",", "\n", "np", ".", "array", "(", "sizes", ",", "dtype", "=", "np", ".", "float", ")", "/", "stride", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator._generate_anchors": [[76, 83], ["numpy.array", "anchor_generator._scale_enum", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator._scale_enum"], ["", "def", "_generate_anchors", "(", "stride", ",", "sizes", ")", ":", "\n", "    ", "\"\"\"Generate anchor (reference) windows by enumerating aspect ratios X\n    sizes wrt a reference (stride - 1) window.\n    \"\"\"", "\n", "anchor", "=", "np", ".", "array", "(", "[", "0", ",", "stride", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "anchors", "=", "_scale_enum", "(", "anchor", ",", "sizes", ")", "\n", "return", "torch", ".", "from_numpy", "(", "anchors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator._scale_enum": [[85, 91], ["anchor_generator._mkanchors"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator._mkanchors"], ["", "def", "_scale_enum", "(", "anchor", ",", "sizes", ")", ":", "\n", "    ", "\"\"\"Enumerate a set of anchors for each scale wrt an anchor.\"\"\"", "\n", "ctr", ",", "width", "=", "anchor", "[", "0", "]", ",", "anchor", "[", "1", "]", "\n", "ws", "=", "width", "*", "sizes", "\n", "anchors", "=", "_mkanchors", "(", "ws", ",", "ctr", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator._mkanchors": [[93, 105], ["numpy.hstack"], "function", ["None"], ["", "def", "_mkanchors", "(", "ws", ",", "ctr", ")", ":", "\n", "    ", "\"\"\"Given a vector of widths (ws) around a center (ctr),\n    output a set of anchors (windows).\n    \"\"\"", "\n", "ws", "=", "ws", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "anchors", "=", "np", ".", "hstack", "(", "\n", "(", "\n", "ctr", "-", "0.5", "*", "ws", ",", "\n", "ctr", "+", "0.5", "*", "ws", ",", "\n", ")", "\n", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator.make_anchor_generator": [[107, 114], ["anchor_generator.AnchorGenerator", "len"], "function", ["None"], ["", "def", "make_anchor_generator", "(", "cfg", ")", ":", "\n", "    ", "anchor_sizes", "=", "cfg", ".", "RELPN", ".", "DPN", ".", "ANCHOR_SIZES", "\n", "anchor_stride", "=", "cfg", ".", "RELPN", ".", "DPN", ".", "ANCHOR_STRIDE", "\n", "assert", "len", "(", "anchor_stride", ")", "==", "1", ",", "\"should have a single ANCHOR_STRIDE\"", "\n", "\n", "anchor_generator", "=", "AnchorGenerator", "(", "anchor_sizes", ",", "anchor_stride", ")", "\n", "return", "anchor_generator", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.relpn.RelPN.__init__": [[14, 20], ["torch.Module.__init__", "ppn.make_ppn", "dpn.make_dpn"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.ImageEncoder.__init__", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.ppn.make_ppn", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.make_dpn"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "\t\t", "super", "(", "RelPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_ppn", "=", "cfg", ".", "RELPN", ".", "USE_PPN", "\n", "self", ".", "use_dpn", "=", "cfg", ".", "RELPN", ".", "USE_DPN", "\n", "self", ".", "pair_proposal_network", "=", "make_ppn", "(", "cfg", ")", "\n", "self", ".", "duration_proposal_network", "=", "make_dpn", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.relpn.RelPN.forward": [[21, 26], ["relpn.RelPN._forward_train", "relpn.RelPN._forward_test"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.DPN._forward_train", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.DPN._forward_test"], ["", "def", "forward", "(", "self", ",", "pair_list", ",", "target_list", "=", "None", ")", ":", "\n", "\t\t", "if", "self", ".", "training", ":", "\n", "\t\t\t", "return", "self", ".", "_forward_train", "(", "pair_list", ",", "target_list", ")", "\n", "", "else", ":", "\n", "\t\t\t", "return", "self", ".", "_forward_test", "(", "pair_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.relpn.RelPN._forward_train": [[27, 43], ["relpn.RelPN.pair_proposal_network", "relpn_losses.update", "relpn.RelPN.duration_proposal_network", "relpn_losses.update"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.update", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.update"], ["", "", "def", "_forward_train", "(", "self", ",", "pair_list", ",", "target_list", ")", ":", "\n", "\t\t", "relpn_losses", "=", "{", "}", "\n", "pair_proposals", "=", "None", "\n", "duration_proposals", "=", "None", "\n", "\n", "# relationship pair proposal: \"What object pairs are related? Are object A and B related?\"", "\n", "if", "self", ".", "use_ppn", ":", "\n", "\t\t\t", "pair_proposals", ",", "loss_ppn", "=", "self", ".", "pair_proposal_network", "(", "pair_list", ",", "target_list", ")", "\n", "relpn_losses", ".", "update", "(", "loss_ppn", ")", "\n", "\n", "# relationship duration proposal: \"How long the relation lasts? From t=0 to t=30?\"", "\n", "", "if", "self", ".", "use_dpn", ":", "\n", "\t\t\t", "duration_proposals", ",", "loss_dpn", "=", "self", ".", "duration_proposal_network", "(", "pair_list", ",", "target_list", ")", "\n", "relpn_losses", ".", "update", "(", "loss_dpn", ")", "\n", "\n", "", "return", "pair_proposals", ",", "duration_proposals", ",", "relpn_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.relpn.RelPN._forward_test": [[44, 55], ["relpn.RelPN.pair_proposal_network", "relpn.RelPN.duration_proposal_network"], "methods", ["None"], ["", "def", "_forward_test", "(", "self", ",", "pair_list", ")", ":", "\n", "\t\t", "pair_proposals", "=", "None", "\n", "duration_proposals", "=", "None", "\n", "\n", "if", "self", ".", "use_ppn", ":", "\n", "\t\t\t", "pair_proposals", ",", "_", "=", "self", ".", "pair_proposal_network", "(", "pair_list", ")", "\n", "\n", "", "if", "self", ".", "use_dpn", ":", "\n", "\t\t\t", "duration_proposals", ",", "_", "=", "self", ".", "duration_proposal_network", "(", "pair_list", ")", "\n", "\n", "", "return", "pair_proposals", ",", "duration_proposals", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.relpn.make_relpn": [[57, 60], ["relpn.RelPN"], "function", ["None"], ["", "", "def", "make_relpn", "(", "cfg", ")", ":", "\n", "\t", "return", "RelPN", "(", "\n", "cfg", "\n", ")", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn.DPN.__init__": [[13, 23], ["torch.Module.__init__", "dpn.DPNHead", "rel_nms.RelNMS"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.ImageEncoder.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ",", "num_windows", ")", ":", "\n", "        ", "super", "(", "DPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "head", "=", "DPNHead", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "num_windows", "=", "num_windows", "\n", ")", "\n", "\n", "self", ".", "dpn_head", "=", "head", "\n", "self", ".", "rel_nms", "=", "RelNMS", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn.DPN._preidct_durations": [[24, 29], ["dpn.DPN.dpn_head"], "methods", ["None"], ["", "def", "_preidct_durations", "(", "self", ",", "pair_list", ")", ":", "\n", "        ", "pair_feats", "=", "pair_lists", ".", "features", "\n", "duration_proposals", "=", "self", ".", "dpn_head", "(", "feats", ")", "\n", "\n", "return", "duration_proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn.DPN._get_ground_truth": [[30, 33], ["tlist.get_field"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.get_field"], ["", "def", "_get_ground_truth", "(", "self", ",", "target_list", ")", ":", "\n", "        ", "gt_duration", "=", "[", "tlist", ".", "get_field", "(", "'duration'", ")", "for", "tlist", "in", "target_list", "]", "\n", "return", "gt_duration", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn.DPN.forward": [[34, 39], ["dpn.DPN._forward_train", "dpn.DPN._forward_test"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.DPN._forward_train", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.DPN._forward_test"], ["", "def", "forward", "(", "self", ",", "pair_list", ",", "target_list", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_forward_train", "(", "pair_list", ",", "target_list", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_forward_test", "(", "pair_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn.DPN._forward_train": [[40, 49], ["dpn.DPN._preidct_durations", "dpn.DPN._get_ground_truth", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn.DPN._preidct_durations", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.DPN._get_ground_truth"], ["", "", "def", "_forward_train", "(", "self", ",", "pair_list", ",", "target_list", ")", ":", "\n", "        ", "duration_proposals", "=", "self", ".", "_preidct_durations", "(", "pair_list", ")", "\n", "gt_duration", "=", "self", ".", "_get_ground_truth", "(", "target_list", ")", "\n", "\n", "loss_duration_proposal", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "duration_proposals", ",", "gt_duration", ")", "\n", "loss_dpn", "=", "{", "\n", "\"loss_duration\"", ":", "loss_duration_proposal", ",", "\n", "}", "\n", "return", "duration_proposals", ",", "loss_dpn", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn.DPN._forward_test": [[50, 53], ["dpn.DPN._preidct_durations"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn.DPN._preidct_durations"], ["", "def", "_forward_test", "(", "self", ",", "pair_list", ")", ":", "\n", "        ", "duration_proposals", "=", "self", ".", "_preidct_durations", "(", "pair_list", ")", "\n", "return", "duration_proposals", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn.DPNHead.__init__": [[56, 68], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.ImageEncoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_windows", ")", ":", "\n", "        ", "super", "(", "DPNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "\n", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", "\n", ")", "\n", "self", ".", "duration_pred", "=", "nn", ".", "Conv1d", "(", "\n", "in_channels", ",", "num_windows", "*", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", "\n", ")", "\n", "\n", "for", "l", "in", "[", "self", ".", "conv", ",", "self", ".", "duration_pred", "]", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn.DPNHead.forward": [[69, 74], ["torch.relu", "torch.relu", "torch.relu", "dpn.DPNHead.duration_pred", "dpn.DPNHead.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "t", "=", "F", ".", "relu", "(", "self", ".", "conv", "(", "feats", ")", ")", "\n", "duration_reg", "=", "self", ".", "duration_pred", "(", "t", ")", "\n", "\n", "return", "duration_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn.make_dpn": [[76, 81], ["dpn.DPN"], "function", ["None"], ["", "", "def", "make_dpn", "(", "cfg", ")", ":", "\n", "    ", "return", "DPN", "(", "\n", "cfg", ",", "\n", "in_channels", "=", "cfg", ".", "RELPN", ".", "DPN", ".", "IN_CHANNELS", ",", "\n", "num_windows", "=", "cfg", ".", "RELPN", ".", "DPN", ".", "NUM_ANCHORS_PER_LOCATION", "\n", ")", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.sampler.BalancedPositiveNegativePairSampler.__init__": [[7, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "batch_size_per_image", ",", "positive_fraction", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            batch_size_per_image (int): number of elements to be selected per image\n            positive_fraction (float): percentage of positive elements per batch\n        \"\"\"", "\n", "self", ".", "batch_size_per_image", "=", "batch_size_per_image", "\n", "self", ".", "positive_fraction", "=", "positive_fraction", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.sampler.BalancedPositiveNegativePairSampler.__call__": [[16, 67], ["torch.nonzero().squeeze", "torch.nonzero().squeeze", "int", "min", "min", "torch.zeros_like", "torch.zeros_like", "pos_idx.append", "neg_idx.append", "torch.nonzero().squeeze.numel", "torch.nonzero().squeeze.numel", "torch.randperm", "torch.randperm", "torch.nonzero", "torch.nonzero", "torch.nonzero().squeeze.numel", "torch.nonzero().squeeze.numel"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "matched_idxs", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            matched idxs: list of tensors containing -1, 0 or positive values.\n                Each tensor corresponds to a specific image.\n                -1 values are ignored, 0 are considered as negatives and > 0 as\n                positives.\n\n        Returns:\n            pos_idx (list[tensor])\n            neg_idx (list[tensor])\n\n        Returns two lists of binary masks for each image.\n        The first list contains the positive elements that were selected,\n        and the second list the negative example.\n        \"\"\"", "\n", "pos_idx", "=", "[", "]", "\n", "neg_idx", "=", "[", "]", "\n", "for", "matched_idxs_per_image", "in", "matched_idxs", ":", "\n", "            ", "positive", "=", "torch", ".", "nonzero", "(", "matched_idxs_per_image", ">=", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "negative", "=", "torch", ".", "nonzero", "(", "matched_idxs_per_image", "==", "0", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "num_pos", "=", "int", "(", "self", ".", "batch_size_per_image", "*", "self", ".", "positive_fraction", ")", "\n", "# protect against not enough positive examples", "\n", "num_pos", "=", "min", "(", "positive", ".", "numel", "(", ")", ",", "num_pos", ")", "\n", "num_neg", "=", "self", ".", "batch_size_per_image", "-", "num_pos", "\n", "# protect against not enough negative examples", "\n", "num_neg", "=", "min", "(", "negative", ".", "numel", "(", ")", ",", "num_neg", ")", "\n", "\n", "# randomly select positive and negative examples", "\n", "perm1", "=", "torch", ".", "randperm", "(", "positive", ".", "numel", "(", ")", ",", "device", "=", "positive", ".", "device", ")", "[", ":", "num_pos", "]", "\n", "perm2", "=", "torch", ".", "randperm", "(", "negative", ".", "numel", "(", ")", ",", "device", "=", "negative", ".", "device", ")", "[", ":", "num_neg", "]", "\n", "\n", "pos_idx_per_image", "=", "positive", "[", "perm1", "]", "\n", "neg_idx_per_image", "=", "negative", "[", "perm2", "]", "\n", "\n", "# create binary mask from indices", "\n", "pos_idx_per_image_mask", "=", "torch", ".", "zeros_like", "(", "\n", "matched_idxs_per_image", ",", "dtype", "=", "torch", ".", "uint8", "\n", ")", "\n", "neg_idx_per_image_mask", "=", "torch", ".", "zeros_like", "(", "\n", "matched_idxs_per_image", ",", "dtype", "=", "torch", ".", "uint8", "\n", ")", "\n", "\n", "pos_idx_per_image_mask", "[", "pos_idx_per_image", "]", "=", "1", "\n", "neg_idx_per_image_mask", "[", "neg_idx_per_image", "]", "=", "1", "\n", "\n", "pos_idx", ".", "append", "(", "pos_idx_per_image_mask", ")", "\n", "neg_idx", ".", "append", "(", "neg_idx_per_image_mask", ")", "\n", "\n", "", "return", "pos_idx", ",", "neg_idx", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.rel_nms.RelNMS.__init__": [[6, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.ImageEncoder.__init__"], ["\t", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "\t\t", "super", "(", "RelNMS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fg_iou_threshold", "=", "0.7", "\n", "self", ".", "bg_iou_threshold", "=", "0.3", "\n", "self", ".", "nms_threshold", "=", "0.5", "\n", "self", ".", "top_k_proposals", "=", "cfg", ".", "RELPN", ".", "DPN", ".", "NUM_DURATION_PROPOSALS", "\n", "self", ".", "anchor", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.rel_nms.RelNMS.forward": [[14, 16], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "relationness", ",", "duration_proposals", ")", ":", "\n", "\t\t", "relationness", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.DPN.__init__": [[13, 32], ["torch.Module.__init__", "anchor_generator.make_anchor_generator.make_anchor_generator", "dpn_anchor.DPNHead", "make_dpn_postprocessor", "make_dpn_postprocessor", "make_dpn_loss_evaluator", "rel_nms.RelNMS", "anchor_generator.make_anchor_generator.make_anchor_generator.num_anchors_per_location"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.ImageEncoder.__init__", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator.make_anchor_generator", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.anchor_generator.AnchorGenerator.num_anchors_per_location"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "DPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "anchor_generator", "=", "make_anchor_generator", "(", "cfg", ")", "\n", "head", "=", "DPNHead", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "num_anchors", "=", "anchor_generator", ".", "num_anchors_per_location", "(", ")", "[", "0", "]", "\n", ")", "\n", "\n", "window_selector_train", "=", "make_dpn_postprocessor", "(", "cfg", ",", "is_train", "=", "True", ")", "\n", "window_selector_test", "=", "make_dpn_postprocessor", "(", "cfg", ",", "is_train", "=", "False", ")", "\n", "loss_evaluator", "=", "make_dpn_loss_evaluator", "(", "cfg", ")", "\n", "\n", "self", ".", "dpn_only", "=", "cfg", ".", "RELPN", ".", "DPN", ".", "DPN_ONLY", "\n", "self", ".", "anchor_generator", "=", "anchor_generator", "\n", "self", ".", "dpn_head", "=", "head", "\n", "self", ".", "window_selector_train", "=", "window_selector_train", "\n", "self", ".", "window_selector_test", "=", "window_selector_test", "\n", "self", ".", "loss_evaluator", "=", "loss_evaluator", "\n", "self", ".", "rel_nms", "=", "RelNMS", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.DPN._get_ground_truth": [[33, 35], ["None"], "methods", ["None"], ["", "def", "_get_ground_truth", "(", "self", ",", "gt_rels", ")", ":", "\n", "        ", "return", "gt_relness", ",", "gt_duration", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.DPN.forward": [[36, 49], ["dpn_anchor.DPN.dpn_head", "dpn_anchor.DPN.anchor_generator", "dpn_anchor.DPN.rel_nms", "dpn_anchor.DPN._forward_train", "dpn_anchor.DPN._forward_test"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.DPN._forward_train", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.DPN._forward_test"], ["", "def", "forward", "(", "self", ",", "rel_feats", ",", "gt_rels", ")", ":", "\n", "        ", "'''\n        rel_feats: NxCxT\n        '''", "\n", "relationness", ",", "duration_regression", "=", "self", ".", "dpn_head", "(", "rel_feats", ")", "\n", "anchors", "=", "self", ".", "anchor_generator", "(", "rel_feats", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_forward_train", "(", "anchors", ",", "relationness", ",", "duration_regression", ",", "gt_rels", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_forward_test", "(", "anchors", ",", "relationness", ",", "duration_regression", ")", "\n", "\n", "", "duration_proposals", ",", "relationness", "=", "self", ".", "rel_nms", "(", "duration_proposals", ",", "relationness", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.DPN._forward_train": [[50, 71], ["dpn_anchor.DPN.loss_evaluator", "dpn_anchor.DPN._get_ground_truth"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.DPN._get_ground_truth"], ["", "def", "_forward_train", "(", "self", ",", "anchors", ",", "relationness", ",", "duration_regression", ",", "gt_rels", ")", ":", "\n", "        ", "if", "self", ".", "dpn_only", ":", "\n", "            ", "windows", "=", "anchors", "\n", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "windows", "=", "self", ".", "window_selector_train", "(", "\n", "anchors", ",", "relationness", ",", "duration_regression", ",", "gt_rels", "\n", ")", "\n", "", "", "loss_relationness", ",", "loss_duration_proposal", "=", "self", ".", "loss_evaluator", "(", "\n", "anchors", ",", "relationness", ",", "duration_regression", ",", "gt_rels", "\n", ")", "\n", "losses", "=", "{", "\n", "\"loss_relationness\"", ":", "loss_relationness", ",", "\n", "\"loss_duration_proposal\"", ":", "loss_duration_proposal", ",", "\n", "}", "\n", "return", "windows", ",", "losses", "\n", "\n", "gt_relness", ",", "gt_duration", "=", "_get_ground_truth", "(", "gt_rels", ")", "\n", "\n", "loss_relationness", "+=", "F", ".", "cross_entropy", "(", "relationness", ",", "gt_relness", ")", "\n", "loss_duration_proposal", "+=", "F", ".", "smooth_l1_loss", "(", "duration_proposals", ",", "gt_duration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.DPN._forward_test": [[72, 80], ["dpn_anchor.DPN.window_selector_test", "window.get_field().sort", "zip", "window.get_field"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.list_pair.PairList.get_field"], ["", "def", "_forward_test", "(", "self", ",", "anchors", ",", "relationness", ",", "duration_regression", ")", ":", "\n", "        ", "windows", "=", "self", ".", "window_selector_test", "(", "anchors", ",", "relationness", ",", "duration_regression", ")", "\n", "if", "self", ".", "dpn_only", ":", "\n", "            ", "inds", "=", "[", "\n", "window", ".", "get_field", "(", "\"relationness\"", ")", ".", "sort", "(", "descending", "=", "True", ")", "[", "1", "]", "for", "window", "in", "windows", "\n", "]", "\n", "windows", "=", "[", "window", "[", "ind", "]", "for", "window", ",", "ind", "in", "zip", "(", "windows", ",", "inds", ")", "]", "\n", "", "return", "windows", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.DPNHead.__init__": [[83, 98], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.ImageEncoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_anchors", ")", ":", "\n", "        ", "super", "(", "DPNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "\n", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", "\n", ")", "\n", "self", ".", "relness_pred", "=", "nn", ".", "Conv1d", "(", "\n", "in_channels", ",", "num_anchors", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", "\n", ")", "\n", "self", ".", "duration_pred", "=", "nn", ".", "Conv1d", "(", "\n", "in_channels", ",", "num_anchors", "*", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", "\n", ")", "\n", "\n", "for", "l", "in", "[", "self", ".", "conv", ",", "self", ".", "relness_pred", ",", "self", ".", "duration_pred", "]", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.DPNHead.forward": [[99, 109], ["torch.relu", "torch.relu", "torch.relu", "relness.append", "duration_reg.append", "dpn_anchor.DPNHead.conv", "dpn_anchor.DPNHead.relness_pred", "dpn_anchor.DPNHead.duration_pred"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "rel_feats", ")", ":", "\n", "        ", "relness", "=", "[", "]", "\n", "duration_reg", "=", "[", "]", "\n", "\n", "for", "feature", "in", "rel_feats", ":", "\n", "            ", "t", "=", "F", ".", "relu", "(", "self", ".", "conv", "(", "feature", ")", ")", "\n", "relness", ".", "append", "(", "self", ".", "relness_pred", "(", "t", ")", ")", "\n", "duration_reg", ".", "append", "(", "self", ".", "duration_pred", "(", "t", ")", ")", "\n", "\n", "", "return", "relness", ",", "duration_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.relpn.dpn_anchor.make_dpn": [[111, 115], ["dpn_anchor.DPN"], "function", ["None"], ["", "", "def", "make_dpn", "(", "cfg", ")", ":", "\n", "    ", "return", "DPN", "(", "\n", "cfg", ",", "\n", "in_channels", "=", "cfg", ".", "RELPN", ".", "DPN", ".", "IN_CHANNELS", "\n", ")", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.evaluation.visual_relation_detection.eval_detection_scores": [[8, 37], ["sorted", "numpy.zeros", "enumerate", "numpy.isfinite", "numpy.cumsum().astype", "numpy.cumsum().astype", "numpy.ones", "enumerate", "numpy.maximum", "numpy.maximum", "len", "len", "float", "numpy.cumsum", "numpy.cumsum", "len", "common.viou", "common.viou", "min", "numpy.finfo", "numpy.finfo", "tuple", "tuple"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.evaluation.common.viou", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.evaluation.common.viou"], ["def", "eval_detection_scores", "(", "gt_relations", ",", "pred_relations", ",", "viou_threshold", ")", ":", "\n", "    ", "pred_relations", "=", "sorted", "(", "pred_relations", ",", "key", "=", "lambda", "x", ":", "x", "[", "'score'", "]", ",", "reverse", "=", "True", ")", "\n", "gt_detected", "=", "np", ".", "zeros", "(", "(", "len", "(", "gt_relations", ")", ",", ")", ",", "dtype", "=", "bool", ")", "\n", "hit_scores", "=", "np", ".", "ones", "(", "(", "len", "(", "pred_relations", ")", ")", ")", "*", "-", "np", ".", "inf", "\n", "for", "pred_idx", ",", "pred_relation", "in", "enumerate", "(", "pred_relations", ")", ":", "\n", "        ", "ov_max", "=", "-", "float", "(", "'Inf'", ")", "\n", "k_max", "=", "-", "1", "\n", "for", "gt_idx", ",", "gt_relation", "in", "enumerate", "(", "gt_relations", ")", ":", "\n", "            ", "if", "not", "gt_detected", "[", "gt_idx", "]", "and", "tuple", "(", "pred_relation", "[", "'triplet'", "]", ")", "==", "tuple", "(", "gt_relation", "[", "'triplet'", "]", ")", ":", "\n", "                ", "s_iou", "=", "viou", "(", "pred_relation", "[", "'sub_traj'", "]", ",", "pred_relation", "[", "'duration'", "]", ",", "\n", "gt_relation", "[", "'sub_traj'", "]", ",", "gt_relation", "[", "'duration'", "]", ")", "\n", "o_iou", "=", "viou", "(", "pred_relation", "[", "'obj_traj'", "]", ",", "pred_relation", "[", "'duration'", "]", ",", "\n", "gt_relation", "[", "'obj_traj'", "]", ",", "gt_relation", "[", "'duration'", "]", ")", "\n", "ov", "=", "min", "(", "s_iou", ",", "o_iou", ")", "\n", "if", "ov", ">=", "viou_threshold", "and", "ov", ">", "ov_max", ":", "\n", "                    ", "ov_max", "=", "ov", "\n", "k_max", "=", "gt_idx", "\n", "\n", "", "", "", "if", "k_max", ">=", "0", ":", "\n", "            ", "hit_scores", "[", "pred_idx", "]", "=", "pred_relation", "[", "'score'", "]", "\n", "gt_detected", "[", "k_max", "]", "=", "True", "\n", "", "", "tp", "=", "np", ".", "isfinite", "(", "hit_scores", ")", "\n", "fp", "=", "~", "tp", "\n", "cum_tp", "=", "np", ".", "cumsum", "(", "tp", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "cum_fp", "=", "np", ".", "cumsum", "(", "fp", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "rec", "=", "cum_tp", "/", "np", ".", "maximum", "(", "len", "(", "gt_relations", ")", ",", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ")", "\n", "prec", "=", "cum_tp", "/", "np", ".", "maximum", "(", "cum_tp", "+", "cum_fp", ",", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ")", "\n", "return", "prec", ",", "rec", ",", "hit_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.evaluation.visual_relation_detection.eval_tagging_scores": [[39, 61], ["sorted", "set", "numpy.asarray", "enumerate", "numpy.isfinite", "numpy.cumsum().astype", "numpy.cumsum().astype", "tuple", "numpy.maximum", "numpy.maximum", "tuple", "pred_triplets.append", "np.asarray.append", "numpy.cumsum", "numpy.cumsum", "len", "numpy.finfo", "numpy.finfo"], "function", ["None"], ["", "def", "eval_tagging_scores", "(", "gt_relations", ",", "pred_relations", ")", ":", "\n", "    ", "pred_relations", "=", "sorted", "(", "pred_relations", ",", "key", "=", "lambda", "x", ":", "x", "[", "'score'", "]", ",", "reverse", "=", "True", ")", "\n", "# ignore trajectories", "\n", "gt_triplets", "=", "set", "(", "tuple", "(", "r", "[", "'triplet'", "]", ")", "for", "r", "in", "gt_relations", ")", "\n", "pred_triplets", "=", "[", "]", "\n", "hit_scores", "=", "[", "]", "\n", "for", "r", "in", "pred_relations", ":", "\n", "        ", "triplet", "=", "tuple", "(", "r", "[", "'triplet'", "]", ")", "\n", "if", "not", "triplet", "in", "pred_triplets", ":", "\n", "            ", "pred_triplets", ".", "append", "(", "triplet", ")", "\n", "hit_scores", ".", "append", "(", "r", "[", "'score'", "]", ")", "\n", "", "", "hit_scores", "=", "np", ".", "asarray", "(", "hit_scores", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "pred_triplets", ")", ":", "\n", "        ", "if", "not", "t", "in", "gt_triplets", ":", "\n", "            ", "hit_scores", "[", "i", "]", "=", "-", "np", ".", "inf", "\n", "", "", "tp", "=", "np", ".", "isfinite", "(", "hit_scores", ")", "\n", "fp", "=", "~", "tp", "\n", "cum_tp", "=", "np", ".", "cumsum", "(", "tp", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "cum_fp", "=", "np", ".", "cumsum", "(", "fp", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "rec", "=", "cum_tp", "/", "np", ".", "maximum", "(", "len", "(", "gt_triplets", ")", ",", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ")", "\n", "prec", "=", "cum_tp", "/", "np", ".", "maximum", "(", "cum_tp", "+", "cum_fp", ",", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ")", "\n", "return", "prec", ",", "rec", ",", "hit_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.evaluation.visual_relation_detection.evaluate": [[63, 122], ["dict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "print", "groundtruth.items", "numpy.mean", "dict", "dict", "print", "print", "print", "print", "print", "print", "print", "len", "visual_relation_detection.eval_detection_scores", "common.voc_ap", "numpy.isfinite", "visual_relation_detection.eval_tagging_scores", "list", "numpy.concatenate", "numpy.concatenate", "numpy.cumsum().astype", "numpy.mean", "len", "len", "min", "tot_scores[].append", "tot_tp[].append", "min", "dict.values", "numpy.argsort", "numpy.maximum", "prec_at_n[].append", "prec_at_n[].append", "numpy.cumsum", "numpy.finfo"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.evaluation.visual_relation_detection.eval_detection_scores", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.evaluation.common.voc_ap", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.evaluation.visual_relation_detection.eval_tagging_scores"], ["", "def", "evaluate", "(", "groundtruth", ",", "prediction", ",", "viou_threshold", "=", "0.5", ",", "\n", "det_nreturns", "=", "[", "50", ",", "100", ",", "1000", "]", ",", "tag_nreturns", "=", "[", "1", ",", "5", ",", "10", "]", ")", ":", "\n", "    ", "\"\"\" evaluate visual relation detection and visual \n    relation tagging.\n    \"\"\"", "\n", "video_ap", "=", "dict", "(", ")", "\n", "tot_scores", "=", "defaultdict", "(", "list", ")", "\n", "tot_tp", "=", "defaultdict", "(", "list", ")", "\n", "prec_at_n", "=", "defaultdict", "(", "list", ")", "\n", "tot_gt_relations", "=", "0", "\n", "print", "(", "'Computing average precision AP over {} videos...'", ".", "format", "(", "len", "(", "groundtruth", ")", ")", ")", "\n", "for", "vid", ",", "gt_relations", "in", "groundtruth", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "gt_relations", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "tot_gt_relations", "+=", "len", "(", "gt_relations", ")", "\n", "predict_relations", "=", "prediction", "[", "vid", "]", "\n", "# compute average precision and recalls in detection setting", "\n", "det_prec", ",", "det_rec", ",", "det_scores", "=", "eval_detection_scores", "(", "\n", "gt_relations", ",", "predict_relations", ",", "viou_threshold", ")", "\n", "video_ap", "[", "vid", "]", "=", "voc_ap", "(", "det_rec", ",", "det_prec", ")", "\n", "tp", "=", "np", ".", "isfinite", "(", "det_scores", ")", "\n", "for", "nre", "in", "det_nreturns", ":", "\n", "            ", "cut_off", "=", "min", "(", "nre", ",", "det_scores", ".", "size", ")", "\n", "tot_scores", "[", "nre", "]", ".", "append", "(", "det_scores", "[", ":", "cut_off", "]", ")", "\n", "tot_tp", "[", "nre", "]", ".", "append", "(", "tp", "[", ":", "cut_off", "]", ")", "\n", "# compute precisions in tagging setting", "\n", "", "tag_prec", ",", "_", ",", "_", "=", "eval_tagging_scores", "(", "gt_relations", ",", "predict_relations", ")", "\n", "for", "nre", "in", "tag_nreturns", ":", "\n", "            ", "cut_off", "=", "min", "(", "nre", ",", "tag_prec", ".", "size", ")", "\n", "if", "cut_off", ">", "0", ":", "\n", "                ", "prec_at_n", "[", "nre", "]", ".", "append", "(", "tag_prec", "[", "cut_off", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "prec_at_n", "[", "nre", "]", ".", "append", "(", "0.", ")", "\n", "\n", "# calculate mean ap for detection", "\n", "", "", "", "mean_ap", "=", "np", ".", "mean", "(", "list", "(", "video_ap", ".", "values", "(", ")", ")", ")", "\n", "# calculate recall for detection", "\n", "rec_at_n", "=", "dict", "(", ")", "\n", "for", "nre", "in", "det_nreturns", ":", "\n", "        ", "scores", "=", "np", ".", "concatenate", "(", "tot_scores", "[", "nre", "]", ")", "\n", "tps", "=", "np", ".", "concatenate", "(", "tot_tp", "[", "nre", "]", ")", "\n", "sort_indices", "=", "np", ".", "argsort", "(", "scores", ")", "[", ":", ":", "-", "1", "]", "\n", "tps", "=", "tps", "[", "sort_indices", "]", "\n", "cum_tp", "=", "np", ".", "cumsum", "(", "tps", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "rec", "=", "cum_tp", "/", "np", ".", "maximum", "(", "tot_gt_relations", ",", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ")", "\n", "rec_at_n", "[", "nre", "]", "=", "rec", "[", "-", "1", "]", "\n", "# calculate mean precision for tagging", "\n", "", "mprec_at_n", "=", "dict", "(", ")", "\n", "for", "nre", "in", "tag_nreturns", ":", "\n", "        ", "mprec_at_n", "[", "nre", "]", "=", "np", ".", "mean", "(", "prec_at_n", "[", "nre", "]", ")", "\n", "# print scores", "\n", "", "print", "(", "'detection mean AP (used in challenge): {}'", ".", "format", "(", "mean_ap", ")", ")", "\n", "print", "(", "'detection recall@50: {}'", ".", "format", "(", "rec_at_n", "[", "50", "]", ")", ")", "\n", "print", "(", "'detection recall@100: {}'", ".", "format", "(", "rec_at_n", "[", "100", "]", ")", ")", "\n", "print", "(", "'detection recall@1000: {}'", ".", "format", "(", "rec_at_n", "[", "1000", "]", ")", ")", "\n", "print", "(", "'tagging precision@1: {}'", ".", "format", "(", "mprec_at_n", "[", "1", "]", ")", ")", "\n", "print", "(", "'tagging precision@5: {}'", ".", "format", "(", "mprec_at_n", "[", "5", "]", ")", ")", "\n", "print", "(", "'tagging precision@10: {}'", ".", "format", "(", "mprec_at_n", "[", "10", "]", ")", ")", "\n", "return", "mean_ap", ",", "rec_at_n", ",", "mprec_at_n", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.evaluation.video_object_detection.trajectory_overlap": [[12, 44], ["enumerate", "len", "enumerate", "common.iou", "set", "set", "gt_traj.keys", "pred_traj.keys"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.iou_matching.iou"], ["def", "trajectory_overlap", "(", "gt_trajs", ",", "pred_traj", ")", ":", "\n", "    ", "\"\"\"\n    Calculate overlap among trajectories\n    :param gt_trajs:\n    :param pred_traj:\n    :param thresh_s:\n    :return:\n    \"\"\"", "\n", "max_overlap", "=", "0", "\n", "max_index", "=", "0", "\n", "thresh_s", "=", "[", "0.5", ",", "0.7", ",", "0.9", "]", "\n", "for", "t", ",", "gt_traj", "in", "enumerate", "(", "gt_trajs", ")", ":", "\n", "        ", "top1", ",", "top2", ",", "top3", "=", "0", ",", "0", ",", "0", "\n", "total", "=", "len", "(", "set", "(", "gt_traj", ".", "keys", "(", ")", ")", "|", "set", "(", "pred_traj", ".", "keys", "(", ")", ")", ")", "\n", "for", "i", ",", "fid", "in", "enumerate", "(", "gt_traj", ")", ":", "\n", "            ", "if", "fid", "not", "in", "pred_traj", ":", "\n", "                ", "continue", "\n", "", "sIoU", "=", "iou", "(", "gt_traj", "[", "fid", "]", ",", "pred_traj", "[", "fid", "]", ")", "\n", "if", "sIoU", ">=", "thresh_s", "[", "0", "]", ":", "\n", "                ", "top1", "+=", "1", "\n", "if", "sIoU", ">=", "thresh_s", "[", "1", "]", ":", "\n", "                    ", "top2", "+=", "1", "\n", "if", "sIoU", ">=", "thresh_s", "[", "2", "]", ":", "\n", "                        ", "top3", "+=", "1", "\n", "\n", "", "", "", "", "tIoU", "=", "(", "top1", "+", "top2", "+", "top3", ")", "*", "1.0", "/", "(", "3", "*", "total", ")", "\n", "\n", "if", "tIoU", ">", "max_overlap", ":", "\n", "            ", "max_overlap", "=", "tIoU", "\n", "max_index", "=", "t", "\n", "\n", "", "", "return", "max_overlap", ",", "max_index", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.evaluation.video_object_detection.evaluate": [[46, 130], ["set", "gt.values", "len", "dict", "pred.items", "dict", "print", "print", "sorted", "enumerate", "print", "print", "numpy.array", "len", "numpy.zeros", "numpy.zeros", "numpy.argsort", "range", "numpy.cumsum", "numpy.cumsum", "common.voc_ap", "sorted.items", "print", "set.add", "len", "video_object_detection.trajectory_overlap", "float", "numpy.maximum", "result_class[].append", "len", "numpy.finfo"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.evaluation.common.voc_ap", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.evaluation.video_object_detection.trajectory_overlap"], ["", "def", "evaluate", "(", "gt", ",", "pred", ",", "use_07_metric", "=", "True", ",", "thresh_t", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"\n    Evaluate the predictions\n    \"\"\"", "\n", "gt_classes", "=", "set", "(", ")", "\n", "for", "tracks", "in", "gt", ".", "values", "(", ")", ":", "\n", "        ", "for", "traj", "in", "tracks", ":", "\n", "            ", "gt_classes", ".", "add", "(", "traj", "[", "'category'", "]", ")", "\n", "", "", "gt_class_num", "=", "len", "(", "gt_classes", ")", "\n", "\n", "result_class", "=", "dict", "(", ")", "\n", "for", "vid", ",", "tracks", "in", "pred", ".", "items", "(", ")", ":", "\n", "        ", "for", "traj", "in", "tracks", ":", "\n", "            ", "if", "traj", "[", "'category'", "]", "not", "in", "result_class", ":", "\n", "                ", "result_class", "[", "traj", "[", "'category'", "]", "]", "=", "[", "[", "vid", ",", "traj", "[", "'score'", "]", ",", "traj", "[", "'trajectory'", "]", "]", "]", "\n", "", "else", ":", "\n", "                ", "result_class", "[", "traj", "[", "'category'", "]", "]", ".", "append", "(", "[", "vid", ",", "traj", "[", "'score'", "]", ",", "traj", "[", "'trajectory'", "]", "]", ")", "\n", "\n", "", "", "", "ap_class", "=", "dict", "(", ")", "\n", "print", "(", "'Computing average precision AP over {} classes...'", ".", "format", "(", "gt_class_num", ")", ")", "\n", "for", "c", "in", "gt_classes", ":", "\n", "        ", "if", "c", "not", "in", "result_class", ":", "\n", "            ", "ap_class", "[", "c", "]", "=", "0.", "\n", "continue", "\n", "", "npos", "=", "0", "\n", "class_recs", "=", "{", "}", "\n", "\n", "for", "vid", "in", "gt", ":", "\n", "#print(vid)", "\n", "            ", "gt_trajs", "=", "[", "trk", "[", "'trajectory'", "]", "for", "trk", "in", "gt", "[", "vid", "]", "if", "trk", "[", "'category'", "]", "==", "c", "]", "\n", "det", "=", "[", "False", "]", "*", "len", "(", "gt_trajs", ")", "\n", "npos", "+=", "len", "(", "gt_trajs", ")", "\n", "class_recs", "[", "vid", "]", "=", "{", "'trajectories'", ":", "gt_trajs", ",", "'det'", ":", "det", "}", "\n", "\n", "", "trajs", "=", "result_class", "[", "c", "]", "\n", "vids", "=", "[", "trj", "[", "0", "]", "for", "trj", "in", "trajs", "]", "\n", "scores", "=", "np", ".", "array", "(", "[", "trj", "[", "1", "]", "for", "trj", "in", "trajs", "]", ")", "\n", "trajectories", "=", "[", "trj", "[", "2", "]", "for", "trj", "in", "trajs", "]", "\n", "\n", "nd", "=", "len", "(", "vids", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "tp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "\n", "sorted_inds", "=", "np", ".", "argsort", "(", "-", "scores", ")", "\n", "sorted_vids", "=", "[", "vids", "[", "id", "]", "for", "id", "in", "sorted_inds", "]", "\n", "sorted_traj", "=", "[", "trajectories", "[", "id", "]", "for", "id", "in", "sorted_inds", "]", "\n", "\n", "for", "d", "in", "range", "(", "nd", ")", ":", "\n", "            ", "R", "=", "class_recs", "[", "sorted_vids", "[", "d", "]", "]", "\n", "gt_trajs", "=", "R", "[", "'trajectories'", "]", "\n", "pred_traj", "=", "sorted_traj", "[", "d", "]", "\n", "max_overlap", ",", "max_index", "=", "trajectory_overlap", "(", "gt_trajs", ",", "pred_traj", ")", "\n", "\n", "if", "max_overlap", ">=", "thresh_t", ":", "\n", "                ", "if", "not", "R", "[", "'det'", "]", "[", "max_index", "]", ":", "\n", "                    ", "tp", "[", "d", "]", "=", "1.", "\n", "R", "[", "'det'", "]", "[", "max_index", "]", "=", "True", "\n", "", "else", ":", "\n", "                    ", "fp", "[", "d", "]", "=", "1.", "\n", "", "", "else", ":", "\n", "                ", "fp", "[", "d", "]", "=", "1.", "\n", "\n", "# compute precision recall", "\n", "", "", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "\n", "rec", "=", "tp", "/", "float", "(", "npos", ")", "\n", "prec", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "ap", "=", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", ")", "\n", "\n", "ap_class", "[", "c", "]", "=", "ap", "\n", "\n", "# compute mean ap and print", "\n", "", "print", "(", "'='", "*", "30", ")", "\n", "ap_class", "=", "sorted", "(", "ap_class", ".", "items", "(", ")", ",", "key", "=", "lambda", "ap_class", ":", "ap_class", "[", "0", "]", ")", "\n", "total_ap", "=", "0.", "\n", "for", "i", ",", "(", "category", ",", "ap", ")", "in", "enumerate", "(", "ap_class", ")", ":", "\n", "        ", "print", "(", "'{:>2}{:>20}\\t{:.4f}'", ".", "format", "(", "i", "+", "1", ",", "category", ",", "ap", ")", ")", "\n", "total_ap", "+=", "ap", "\n", "", "mean_ap", "=", "total_ap", "/", "gt_class_num", "\n", "print", "(", "'='", "*", "30", ")", "\n", "print", "(", "'{:>22}\\t{:.4f}'", ".", "format", "(", "'mean AP'", ",", "mean_ap", ")", ")", "\n", "\n", "return", "mean_ap", ",", "ap_class", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.evaluation.common.voc_ap": [[4, 38], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], ["def", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\" ap = voc_ap(rec, prec, [use_07_metric])\n    Compute VOC AP given precision and recall.\n    If use_07_metric is true, uses the\n    VOC 07 11 point method (default:False).\n\n    Adopted from https://github.com/rbgirshick/py-faster-rcnn/blob/master/lib/datasets/voc_eval.py\n    \"\"\"", "\n", "if", "use_07_metric", ":", "\n", "# 11 point metric", "\n", "        ", "ap", "=", "0.", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.", ",", "1.1", ",", "0.1", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "rec", ">=", "t", ")", "==", "0", ":", "\n", "                ", "p", "=", "0", "\n", "", "else", ":", "\n", "                ", "p", "=", "np", ".", "max", "(", "prec", "[", "rec", ">=", "t", "]", ")", "\n", "", "ap", "=", "ap", "+", "p", "/", "11.", "\n", "", "", "else", ":", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "        ", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.evaluation.common.iou": [[40, 63], ["max", "max", "max", "max", "min", "min"], "function", ["None"], ["", "def", "iou", "(", "bbox_1", ",", "bbox_2", ")", ":", "\n", "    ", "\"\"\"\n    Get IoU value of two bboxes\n    :param bbox_1:\n    :param bbox_2:\n    :return: IoU\n    \"\"\"", "\n", "w_1", "=", "bbox_1", "[", "2", "]", "-", "bbox_1", "[", "0", "]", "+", "1", "\n", "h_1", "=", "bbox_1", "[", "3", "]", "-", "bbox_1", "[", "1", "]", "+", "1", "\n", "w_2", "=", "bbox_2", "[", "2", "]", "-", "bbox_2", "[", "0", "]", "+", "1", "\n", "h_2", "=", "bbox_2", "[", "3", "]", "-", "bbox_2", "[", "1", "]", "+", "1", "\n", "area_1", "=", "w_1", "*", "h_1", "\n", "area_2", "=", "w_2", "*", "h_2", "\n", "\n", "overlap_bbox", "=", "(", "max", "(", "bbox_1", "[", "0", "]", ",", "bbox_2", "[", "0", "]", ")", ",", "max", "(", "bbox_1", "[", "1", "]", ",", "bbox_2", "[", "1", "]", ")", ",", "\n", "min", "(", "bbox_1", "[", "2", "]", ",", "bbox_2", "[", "2", "]", ")", ",", "min", "(", "bbox_1", "[", "3", "]", ",", "bbox_2", "[", "3", "]", ")", ")", "\n", "overlap_w", "=", "max", "(", "0", ",", "(", "overlap_bbox", "[", "2", "]", "-", "overlap_bbox", "[", "0", "]", "+", "1", ")", ")", "\n", "overlap_h", "=", "max", "(", "0", ",", "(", "overlap_bbox", "[", "3", "]", "-", "overlap_bbox", "[", "1", "]", "+", "1", ")", ")", "\n", "\n", "overlap_area", "=", "overlap_w", "*", "overlap_h", "\n", "union_area", "=", "area_1", "+", "area_2", "-", "overlap_area", "\n", "IoU", "=", "overlap_area", "*", "1.0", "/", "union_area", "\n", "return", "IoU", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.evaluation.common.viou": [[65, 107], ["range", "range", "range", "max", "max", "min", "min", "len", "len", "float", "max", "max"], "function", ["None"], ["", "def", "viou", "(", "traj_1", ",", "duration_1", ",", "traj_2", ",", "duration_2", ")", ":", "\n", "    ", "\"\"\" compute the voluminal Intersection over Union\n    for two trajectories, each of which is represented\n    by a duration [fstart, fend) and a list of bounding\n    boxes (i.e. traj) within the duration.\n    \"\"\"", "\n", "if", "duration_1", "[", "0", "]", ">=", "duration_2", "[", "1", "]", "or", "duration_1", "[", "1", "]", "<=", "duration_2", "[", "0", "]", ":", "\n", "        ", "return", "0.", "\n", "", "elif", "duration_1", "[", "0", "]", "<=", "duration_2", "[", "0", "]", ":", "\n", "        ", "head_1", "=", "duration_2", "[", "0", "]", "-", "duration_1", "[", "0", "]", "\n", "head_2", "=", "0", "\n", "if", "duration_1", "[", "1", "]", "<", "duration_2", "[", "1", "]", ":", "\n", "            ", "tail_1", "=", "duration_1", "[", "1", "]", "-", "duration_1", "[", "0", "]", "\n", "tail_2", "=", "duration_1", "[", "1", "]", "-", "duration_2", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "tail_1", "=", "duration_2", "[", "1", "]", "-", "duration_1", "[", "0", "]", "\n", "tail_2", "=", "duration_2", "[", "1", "]", "-", "duration_2", "[", "0", "]", "\n", "", "", "else", ":", "\n", "        ", "head_1", "=", "0", "\n", "head_2", "=", "duration_1", "[", "0", "]", "-", "duration_2", "[", "0", "]", "\n", "if", "duration_1", "[", "1", "]", "<", "duration_2", "[", "1", "]", ":", "\n", "            ", "tail_1", "=", "duration_1", "[", "1", "]", "-", "duration_1", "[", "0", "]", "\n", "tail_2", "=", "duration_1", "[", "1", "]", "-", "duration_2", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "tail_1", "=", "duration_2", "[", "1", "]", "-", "duration_1", "[", "0", "]", "\n", "tail_2", "=", "duration_2", "[", "1", "]", "-", "duration_2", "[", "0", "]", "\n", "", "", "v_overlap", "=", "0", "\n", "for", "i", "in", "range", "(", "tail_1", "-", "head_1", ")", ":", "\n", "        ", "roi_1", "=", "traj_1", "[", "head_1", "+", "i", "]", "\n", "roi_2", "=", "traj_2", "[", "head_2", "+", "i", "]", "\n", "left", "=", "max", "(", "roi_1", "[", "0", "]", ",", "roi_2", "[", "0", "]", ")", "\n", "top", "=", "max", "(", "roi_1", "[", "1", "]", ",", "roi_2", "[", "1", "]", ")", "\n", "right", "=", "min", "(", "roi_1", "[", "2", "]", ",", "roi_2", "[", "2", "]", ")", "\n", "bottom", "=", "min", "(", "roi_1", "[", "3", "]", ",", "roi_2", "[", "3", "]", ")", "\n", "v_overlap", "+=", "max", "(", "0", ",", "right", "-", "left", "+", "1", ")", "*", "max", "(", "0", ",", "bottom", "-", "top", "+", "1", ")", "\n", "", "v1", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "traj_1", ")", ")", ":", "\n", "        ", "v1", "+=", "(", "traj_1", "[", "i", "]", "[", "2", "]", "-", "traj_1", "[", "i", "]", "[", "0", "]", "+", "1", ")", "*", "(", "traj_1", "[", "i", "]", "[", "3", "]", "-", "traj_1", "[", "i", "]", "[", "1", "]", "+", "1", ")", "\n", "", "v2", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "traj_2", ")", ")", ":", "\n", "        ", "v2", "+=", "(", "traj_2", "[", "i", "]", "[", "2", "]", "-", "traj_2", "[", "i", "]", "[", "0", "]", "+", "1", ")", "*", "(", "traj_2", "[", "i", "]", "[", "3", "]", "-", "traj_2", "[", "i", "]", "[", "1", "]", "+", "1", ")", "\n", "", "return", "float", "(", "v_overlap", ")", "/", "(", "v1", "+", "v2", "-", "v_overlap", ")", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.evaluation.action_detection.compute_detection_scores_per_class": [[6, 31], ["sorted", "numpy.zeros", "enumerate", "numpy.isfinite", "numpy.cumsum().astype", "numpy.cumsum().astype", "numpy.ones", "enumerate", "numpy.maximum", "numpy.maximum", "len", "len", "float", "numpy.cumsum", "numpy.cumsum", "len", "common.viou", "numpy.finfo", "numpy.finfo"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.evaluation.common.viou"], ["def", "compute_detection_scores_per_class", "(", "gt_actions", ",", "pred_actions", ",", "viou_threshold", ")", ":", "\n", "    ", "pred_actions", "=", "sorted", "(", "pred_actions", ",", "key", "=", "lambda", "x", ":", "x", "[", "'score'", "]", ",", "reverse", "=", "True", ")", "\n", "gt_detected", "=", "np", ".", "zeros", "(", "(", "len", "(", "gt_actions", ")", ",", ")", ",", "dtype", "=", "bool", ")", "\n", "hit_scores", "=", "np", ".", "ones", "(", "(", "len", "(", "pred_actions", ")", ")", ")", "*", "-", "np", ".", "inf", "\n", "for", "pred_idx", ",", "pred_action", "in", "enumerate", "(", "pred_actions", ")", ":", "\n", "        ", "ov_max", "=", "-", "float", "(", "'Inf'", ")", "\n", "k_max", "=", "-", "1", "\n", "for", "gt_idx", ",", "gt_action", "in", "enumerate", "(", "gt_actions", ")", ":", "\n", "            ", "if", "not", "gt_detected", "[", "gt_idx", "]", "and", "pred_action", "[", "'id'", "]", "==", "gt_action", "[", "'id'", "]", ":", "\n", "                ", "ov", "=", "viou", "(", "pred_action", "[", "'trajectory'", "]", ",", "pred_action", "[", "'duration'", "]", ",", "\n", "gt_action", "[", "'trajectory'", "]", ",", "gt_action", "[", "'duration'", "]", ")", "\n", "if", "ov", ">=", "viou_threshold", "and", "ov", ">", "ov_max", ":", "\n", "                    ", "ov_max", "=", "ov", "\n", "k_max", "=", "gt_idx", "\n", "", "", "", "if", "k_max", ">=", "0", ":", "\n", "            ", "hit_scores", "[", "pred_idx", "]", "=", "pred_action", "[", "'score'", "]", "\n", "gt_detected", "[", "k_max", "]", "=", "True", "\n", "", "", "tp", "=", "np", ".", "isfinite", "(", "hit_scores", ")", "\n", "fp", "=", "~", "tp", "\n", "cum_tp", "=", "np", ".", "cumsum", "(", "tp", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "cum_fp", "=", "np", ".", "cumsum", "(", "fp", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "rec", "=", "cum_tp", "/", "np", ".", "maximum", "(", "len", "(", "gt_actions", ")", ",", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ")", "\n", "prec", "=", "cum_tp", "/", "np", ".", "maximum", "(", "cum_tp", "+", "cum_fp", ",", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ")", "\n", "return", "prec", ",", "rec", ",", "hit_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.evaluation.action_detection.evaluate": [[33, 98], ["set", "groundtruth.values", "len", "dict", "prediction.items", "dict", "print", "print", "sorted", "enumerate", "numpy.mean", "print", "print", "dict", "action_detection.compute_detection_scores_per_class", "common.voc_ap", "dict.items", "print", "list", "set.add", "dict.keys", "dict.values", "dict.keys", "prediction_actions[].append", "dict.keys", "groundtruth_actions[].append"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.evaluation.action_detection.compute_detection_scores_per_class", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.evaluation.common.voc_ap"], ["", "def", "evaluate", "(", "groundtruth", ",", "prediction", ",", "viou_threshold", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"\n    evaluate action detection\n    \"\"\"", "\n", "gt_classes", "=", "set", "(", ")", "\n", "for", "tracks", "in", "groundtruth", ".", "values", "(", ")", ":", "\n", "        ", "for", "traj", "in", "tracks", ":", "\n", "            ", "gt_classes", ".", "add", "(", "traj", "[", "'category'", "]", ")", "\n", "", "", "gt_class_num", "=", "len", "(", "gt_classes", ")", "\n", "\n", "prediction_actions", "=", "dict", "(", ")", "\n", "for", "vid", ",", "tracks", "in", "prediction", ".", "items", "(", ")", ":", "\n", "        ", "for", "traj", "in", "tracks", ":", "\n", "            ", "pred_action", "=", "{", "\n", "\"id\"", ":", "vid", ",", "\n", "\"score\"", ":", "traj", "[", "'score'", "]", ",", "\n", "\"duration\"", ":", "traj", "[", "'duration'", "]", ",", "\n", "\"trajectory\"", ":", "traj", "[", "'trajectory'", "]", "\n", "}", "\n", "if", "traj", "[", "'category'", "]", "not", "in", "prediction_actions", ".", "keys", "(", ")", ":", "\n", "                ", "prediction_actions", "[", "traj", "[", "'category'", "]", "]", "=", "[", "pred_action", "]", "\n", "", "else", ":", "\n", "                ", "prediction_actions", "[", "traj", "[", "'category'", "]", "]", ".", "append", "(", "pred_action", ")", "\n", "\n", "", "", "", "ap_class", "=", "dict", "(", ")", "\n", "print", "(", "'Computing average precision AP over {} classes...'", ".", "format", "(", "gt_class_num", ")", ")", "\n", "\n", "for", "each_action", "in", "gt_classes", ":", "\n", "        ", "if", "each_action", "not", "in", "prediction_actions", ".", "keys", "(", ")", ":", "\n", "            ", "ap_class", "[", "each_action", "]", "=", "0.", "\n", "continue", "\n", "\n", "", "groundtruth_actions", "=", "dict", "(", ")", "\n", "for", "each_vid", "in", "groundtruth", ":", "\n", "# get groundtruth actions", "\n", "            ", "for", "each_gt_traj", "in", "groundtruth", "[", "each_vid", "]", ":", "\n", "                ", "if", "each_gt_traj", "[", "'category'", "]", "==", "each_action", ":", "\n", "                    ", "gt_action", "=", "{", "\n", "\"id\"", ":", "each_vid", ",", "\n", "\"duration\"", ":", "each_gt_traj", "[", "'duration'", "]", ",", "\n", "\"trajectory\"", ":", "each_gt_traj", "[", "'trajectory'", "]", "\n", "}", "\n", "if", "each_action", "not", "in", "groundtruth_actions", ".", "keys", "(", ")", ":", "\n", "                        ", "groundtruth_actions", "[", "each_action", "]", "=", "[", "gt_action", "]", "\n", "", "else", ":", "\n", "                        ", "groundtruth_actions", "[", "each_action", "]", ".", "append", "(", "gt_action", ")", "\n", "\n", "", "", "", "", "pred_actions", "=", "prediction_actions", "[", "each_action", "]", "\n", "gt_actions", "=", "groundtruth_actions", "[", "each_action", "]", "\n", "\n", "det_prec", ",", "det_rec", ",", "det_scores", "=", "compute_detection_scores_per_class", "(", "\n", "gt_actions", ",", "pred_actions", ",", "viou_threshold", ")", "\n", "\n", "ap_class", "[", "each_action", "]", "=", "voc_ap", "(", "det_rec", ",", "det_prec", ")", "\n", "\n", "# compute mean ap and print", "\n", "", "print", "(", "'='", "*", "30", ")", "\n", "ap_class_l", "=", "sorted", "(", "ap_class", ".", "items", "(", ")", ",", "key", "=", "lambda", "ap_class", ":", "ap_class", "[", "0", "]", ")", "\n", "for", "i", ",", "(", "category", ",", "ap", ")", "in", "enumerate", "(", "ap_class_l", ")", ":", "\n", "        ", "print", "(", "'{:>2}{:>20}\\t{:.4f}'", ".", "format", "(", "i", "+", "1", ",", "category", ",", "ap", ")", ")", "\n", "", "mean_ap", "=", "np", ".", "mean", "(", "list", "(", "ap_class", ".", "values", "(", ")", ")", ")", "\n", "print", "(", "'='", "*", "30", ")", "\n", "print", "(", "'{:>22}\\t{:.4f}'", ".", "format", "(", "'mean AP'", ",", "mean_ap", ")", ")", "\n", "\n", "return", "mean_ap", ",", "ap_class", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.solver.build.make_optimizer": [[8, 27], ["model.named_parameters", "torch.optim.SGD", "torch.optim.Adam", "ValueError"], "function", ["None"], ["from", "lib", ".", "utils", ".", "comm", "import", "get_world_size", ",", "get_rank", "\n", "from", ".", "vrdataset", "import", "VRDataset", "\n", "\n", "def", "make_data_sampler", "(", "dataset", ",", "shuffle", ",", "distributed", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "return", "samplers", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "shuffle", ")", "\n", "", "if", "shuffle", ":", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "RandomSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SequentialSampler", "(", "dataset", ")", "\n", "", "return", "sampler", "\n", "\n", "", "def", "_quantize", "(", "x", ",", "bins", ")", ":", "\n", "    ", "bins", "=", "copy", ".", "copy", "(", "bins", ")", "\n", "bins", "=", "sorted", "(", "bins", ")", "\n", "quantized", "=", "list", "(", "map", "(", "lambda", "y", ":", "bisect", ".", "bisect_right", "(", "bins", ",", "y", ")", ",", "x", ")", ")", "\n", "return", "quantized", "\n", "\n", "", "def", "_compute_aspect_ratios", "(", "dataset", ")", ":", "\n", "    ", "aspect_ratios", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.solver.build.make_lr_scheduler": [[29, 55], ["torch.optim.lr_scheduler.MultiStepLR", "lr_scheduler.WarmupMultiStepLR", "torch.optim.lr_scheduler.ReduceLROnPlateau", "ValueError"], "function", ["None"], ["        ", "img_info", "=", "dataset", ".", "get_img_info", "(", "i", ")", "\n", "aspect_ratio", "=", "float", "(", "img_info", "[", "\"height\"", "]", ")", "/", "float", "(", "img_info", "[", "\"width\"", "]", ")", "\n", "aspect_ratios", ".", "append", "(", "aspect_ratio", ")", "\n", "", "return", "aspect_ratios", "\n", "\n", "\n", "", "def", "make_batch_data_sampler", "(", "\n", "dataset", ",", "sampler", ",", "aspect_grouping", ",", "images_per_batch", ",", "num_iters", "=", "None", ",", "start_iter", "=", "0", "\n", ")", ":", "\n", "    ", "if", "aspect_grouping", ":", "\n", "        ", "if", "not", "isinstance", "(", "aspect_grouping", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "aspect_grouping", "=", "[", "aspect_grouping", "]", "\n", "", "aspect_ratios", "=", "_compute_aspect_ratios", "(", "dataset", ")", "\n", "group_ids", "=", "_quantize", "(", "aspect_ratios", ",", "aspect_grouping", ")", "\n", "batch_sampler", "=", "samplers", ".", "GroupedBatchSampler", "(", "\n", "sampler", ",", "group_ids", ",", "images_per_batch", ",", "drop_uneven", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "        ", "batch_sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "BatchSampler", "(", "\n", "sampler", ",", "images_per_batch", ",", "drop_last", "=", "False", "\n", ")", "\n", "", "if", "num_iters", "is", "not", "None", ":", "\n", "        ", "batch_sampler", "=", "samplers", ".", "IterationBasedBatchSampler", "(", "\n", "batch_sampler", ",", "num_iters", ",", "start_iter", "\n", ")", "\n", "", "return", "batch_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.solver.build.build_optimizer_scheduler": [[56, 60], ["build.make_optimizer", "build.make_lr_scheduler"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.solver.build.make_optimizer", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.solver.build.make_lr_scheduler"], ["", "def", "build_data_loader", "(", "cfg", ",", "basedata", ",", "phase", ",", "is_distributed", "=", "False", ",", "start_iter", "=", "0", ")", ":", "\n", "    ", "num_gpus", "=", "get_world_size", "(", ")", "\n", "\n", "print", "(", "'preparing video segments for {}...'", ".", "format", "(", "phase", ")", ")", "\n", "dataset", "=", "VRDataset", "(", "cfg", ",", "dataset", "=", "basedata", ",", "phase", "=", "phase", ")", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.solver.lr_scheduler.WarmupMultiStepLR.__init__": [[11, 38], ["super().__init__", "ValueError", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.ImageEncoder.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "milestones", ",", "\n", "gamma", "=", "0.1", ",", "\n", "warmup_factor", "=", "1.0", "/", "3", ",", "\n", "warmup_iters", "=", "500", ",", "\n", "warmup_method", "=", "\"linear\"", ",", "\n", "last_epoch", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Milestones should be a list of\"", "\" increasing integers. Got {}\"", ",", "\n", "milestones", ",", "\n", ")", "\n", "\n", "", "if", "warmup_method", "not", "in", "(", "\"constant\"", ",", "\"linear\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Only 'constant' or 'linear' warmup_method accepted\"", "\n", "\"got {}\"", ".", "format", "(", "warmup_method", ")", "\n", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", "WarmupMultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.solver.lr_scheduler.WarmupMultiStepLR.get_lr": [[39, 52], ["bisect.bisect_right", "float"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "warmup_factor", "=", "1", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_iters", ":", "\n", "            ", "if", "self", ".", "warmup_method", "==", "\"constant\"", ":", "\n", "                ", "warmup_factor", "=", "self", ".", "warmup_factor", "\n", "", "elif", "self", ".", "warmup_method", "==", "\"linear\"", ":", "\n", "                ", "alpha", "=", "float", "(", "self", ".", "last_epoch", ")", "/", "self", ".", "warmup_iters", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.vidvrd_vidor_dataset.VidvrdVidorDataset.__init__": [[13, 35], ["os.path.join", "vidvrd_vidor_dataset.VidvrdVidorDataset._load_anno", "vidvrd_vidor_dataset.VidvrdVidorDataset._merge_rel", "vidvrd_vidor_dataset.VidvrdVidorDataset._print_anno", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.vidvrd_vidor_dataset.VidvrdVidorDataset._load_anno", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.vidvrd_vidor_dataset.VidvrdVidorDataset._merge_rel", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.vidvrd_vidor_dataset.VidvrdVidorDataset._print_anno"], ["def", "__init__", "(", "self", ",", "data_dir", ",", "dataset", ",", "split", ",", "anno", ")", ":", "\n", "# vidvrd anno_path: '/home/t2_u1/data/vidvrd/train/ILSVRC2015_train_00005003.json'", "\n", "# vidor anno_path: '/home/t2_u1/data/vidor/annotation/training/0000/2401075277.json'", "\n", "\t\t", "anno_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "dataset", ",", "split", ",", "anno", ")", "\n", "if", "dataset", "==", "'vidvrd'", ":", "\n", "# VidVRD (obj:35, rel:132)", "\n", "\t\t\t", "self", ".", "idx_to_obj", "=", "{", "0", ":", "'airplane'", ",", "1", ":", "'antelope'", ",", "2", ":", "'ball'", ",", "3", ":", "'bear'", ",", "4", ":", "'bicycle'", ",", "5", ":", "'bird'", ",", "6", ":", "'bus'", ",", "7", ":", "'car'", ",", "8", ":", "'cattle'", ",", "9", ":", "'dog'", ",", "10", ":", "'domestic_cat'", ",", "11", ":", "'elephant'", ",", "12", ":", "'fox'", ",", "13", ":", "'frisbee'", ",", "14", ":", "'giant_panda'", ",", "15", ":", "'hamster'", ",", "16", ":", "'horse'", ",", "17", ":", "'lion'", ",", "18", ":", "'lizard'", ",", "19", ":", "'monkey'", ",", "20", ":", "'motorcycle'", ",", "21", ":", "'person'", ",", "22", ":", "'rabbit'", ",", "23", ":", "'red_panda'", ",", "24", ":", "'sheep'", ",", "25", ":", "'skateboard'", ",", "26", ":", "'snake'", ",", "27", ":", "'sofa'", ",", "28", ":", "'squirrel'", ",", "29", ":", "'tiger'", ",", "30", ":", "'train'", ",", "31", ":", "'turtle'", ",", "32", ":", "'watercraft'", ",", "33", ":", "'whale'", ",", "34", ":", "'zebra'", "}", "\n", "self", ".", "obj_to_idx", "=", "{", "'airplane'", ":", "0", ",", "'antelope'", ":", "1", ",", "'ball'", ":", "2", ",", "'bear'", ":", "3", ",", "'bicycle'", ":", "4", ",", "'bird'", ":", "5", ",", "'bus'", ":", "6", ",", "'car'", ":", "7", ",", "'cattle'", ":", "8", ",", "'dog'", ":", "9", ",", "'domestic_cat'", ":", "10", ",", "'elephant'", ":", "11", ",", "'fox'", ":", "12", ",", "'frisbee'", ":", "13", ",", "'giant_panda'", ":", "14", ",", "'hamster'", ":", "15", ",", "'horse'", ":", "16", ",", "'lion'", ":", "17", ",", "'lizard'", ":", "18", ",", "'monkey'", ":", "19", ",", "'motorcycle'", ":", "20", ",", "'person'", ":", "21", ",", "'rabbit'", ":", "22", ",", "'red_panda'", ":", "23", ",", "'sheep'", ":", "24", ",", "'skateboard'", ":", "25", ",", "'snake'", ":", "26", ",", "'sofa'", ":", "27", ",", "'squirrel'", ":", "28", ",", "'tiger'", ":", "29", ",", "'train'", ":", "30", ",", "'turtle'", ":", "31", ",", "'watercraft'", ":", "32", ",", "'whale'", ":", "33", ",", "'zebra'", ":", "34", "}", "\n", "self", ".", "idx_to_rel", "=", "{", "0", ":", "'above'", ",", "1", ":", "'away'", ",", "2", ":", "'behind'", ",", "3", ":", "'beneath'", ",", "4", ":", "'bite'", ",", "5", ":", "'chase'", ",", "6", ":", "'creep_above'", ",", "7", ":", "'creep_away'", ",", "8", ":", "'creep_behind'", ",", "9", ":", "'creep_beneath'", ",", "10", ":", "'creep_front'", ",", "11", ":", "'creep_left'", ",", "12", ":", "'creep_next_to'", ",", "13", ":", "'creep_past'", ",", "14", ":", "'creep_right'", ",", "15", ":", "'creep_toward'", ",", "16", ":", "'drive'", ",", "17", ":", "'fall_off'", ",", "18", ":", "'faster'", ",", "19", ":", "'feed'", ",", "20", ":", "'fight'", ",", "21", ":", "'fly_above'", ",", "22", ":", "'fly_away'", ",", "23", ":", "'fly_behind'", ",", "24", ":", "'fly_front'", ",", "25", ":", "'fly_left'", ",", "26", ":", "'fly_next_to'", ",", "27", ":", "'fly_past'", ",", "28", ":", "'fly_right'", ",", "29", ":", "'fly_toward'", ",", "30", ":", "'fly_with'", ",", "31", ":", "'follow'", ",", "32", ":", "'front'", ",", "33", ":", "'hold'", ",", "34", ":", "'jump_above'", ",", "35", ":", "'jump_away'", ",", "36", ":", "'jump_behind'", ",", "37", ":", "'jump_beneath'", ",", "38", ":", "'jump_front'", ",", "39", ":", "'jump_left'", ",", "40", ":", "'jump_next_to'", ",", "41", ":", "'jump_past'", ",", "42", ":", "'jump_right'", ",", "43", ":", "'jump_toward'", ",", "44", ":", "'jump_with'", ",", "45", ":", "'kick'", ",", "46", ":", "'larger'", ",", "47", ":", "'left'", ",", "48", ":", "'lie_above'", ",", "49", ":", "'lie_behind'", ",", "50", ":", "'lie_beneath'", ",", "51", ":", "'lie_front'", ",", "52", ":", "'lie_inside'", ",", "53", ":", "'lie_left'", ",", "54", ":", "'lie_next_to'", ",", "55", ":", "'lie_right'", ",", "56", ":", "'lie_with'", ",", "57", ":", "'move_above'", ",", "58", ":", "'move_away'", ",", "59", ":", "'move_behind'", ",", "60", ":", "'move_beneath'", ",", "61", ":", "'move_front'", ",", "62", ":", "'move_left'", ",", "63", ":", "'move_next_to'", ",", "64", ":", "'move_past'", ",", "65", ":", "'move_right'", ",", "66", ":", "'move_toward'", ",", "67", ":", "'move_with'", ",", "68", ":", "'next_to'", ",", "69", ":", "'past'", ",", "70", ":", "'play'", ",", "71", ":", "'pull'", ",", "72", ":", "'ride'", ",", "73", ":", "'right'", ",", "74", ":", "'run_above'", ",", "75", ":", "'run_away'", ",", "76", ":", "'run_behind'", ",", "77", ":", "'run_beneath'", ",", "78", ":", "'run_front'", ",", "79", ":", "'run_left'", ",", "80", ":", "'run_next_to'", ",", "81", ":", "'run_past'", ",", "82", ":", "'run_right'", ",", "83", ":", "'run_toward'", ",", "84", ":", "'run_with'", ",", "85", ":", "'sit_above'", ",", "86", ":", "'sit_behind'", ",", "87", ":", "'sit_beneath'", ",", "88", ":", "'sit_front'", ",", "89", ":", "'sit_inside'", ",", "90", ":", "'sit_left'", ",", "91", ":", "'sit_next_to'", ",", "92", ":", "'sit_right'", ",", "93", ":", "'stand_above'", ",", "94", ":", "'stand_behind'", ",", "95", ":", "'stand_beneath'", ",", "96", ":", "'stand_front'", ",", "97", ":", "'stand_inside'", ",", "98", ":", "'stand_left'", ",", "99", ":", "'stand_next_to'", ",", "100", ":", "'stand_right'", ",", "101", ":", "'stand_with'", ",", "102", ":", "'stop_above'", ",", "103", ":", "'stop_behind'", ",", "104", ":", "'stop_beneath'", ",", "105", ":", "'stop_front'", ",", "106", ":", "'stop_left'", ",", "107", ":", "'stop_next_to'", ",", "108", ":", "'stop_right'", ",", "109", ":", "'stop_with'", ",", "110", ":", "'swim_behind'", ",", "111", ":", "'swim_beneath'", ",", "112", ":", "'swim_front'", ",", "113", ":", "'swim_left'", ",", "114", ":", "'swim_next_to'", ",", "115", ":", "'swim_right'", ",", "116", ":", "'swim_with'", ",", "117", ":", "'taller'", ",", "118", ":", "'touch'", ",", "119", ":", "'toward'", ",", "120", ":", "'walk_above'", ",", "121", ":", "'walk_away'", ",", "122", ":", "'walk_behind'", ",", "123", ":", "'walk_beneath'", ",", "124", ":", "'walk_front'", ",", "125", ":", "'walk_left'", ",", "126", ":", "'walk_next_to'", ",", "127", ":", "'walk_past'", ",", "128", ":", "'walk_right'", ",", "129", ":", "'walk_toward'", ",", "130", ":", "'walk_with'", ",", "131", ":", "'watch'", "}", "\n", "self", ".", "rel_to_idx", "=", "{", "'above'", ":", "0", ",", "'away'", ":", "1", ",", "'behind'", ":", "2", ",", "'beneath'", ":", "3", ",", "'bite'", ":", "4", ",", "'chase'", ":", "5", ",", "'creep_above'", ":", "6", ",", "'creep_away'", ":", "7", ",", "'creep_behind'", ":", "8", ",", "'creep_beneath'", ":", "9", ",", "'creep_front'", ":", "10", ",", "'creep_left'", ":", "11", ",", "'creep_next_to'", ":", "12", ",", "'creep_past'", ":", "13", ",", "'creep_right'", ":", "14", ",", "'creep_toward'", ":", "15", ",", "'drive'", ":", "16", ",", "'fall_off'", ":", "17", ",", "'faster'", ":", "18", ",", "'feed'", ":", "19", ",", "'fight'", ":", "20", ",", "'fly_above'", ":", "21", ",", "'fly_away'", ":", "22", ",", "'fly_behind'", ":", "23", ",", "'fly_front'", ":", "24", ",", "'fly_left'", ":", "25", ",", "'fly_next_to'", ":", "26", ",", "'fly_past'", ":", "27", ",", "'fly_right'", ":", "28", ",", "'fly_toward'", ":", "29", ",", "'fly_with'", ":", "30", ",", "'follow'", ":", "31", ",", "'front'", ":", "32", ",", "'hold'", ":", "33", ",", "'jump_above'", ":", "34", ",", "'jump_away'", ":", "35", ",", "'jump_behind'", ":", "36", ",", "'jump_beneath'", ":", "37", ",", "'jump_front'", ":", "38", ",", "'jump_left'", ":", "39", ",", "'jump_next_to'", ":", "40", ",", "'jump_past'", ":", "41", ",", "'jump_right'", ":", "42", ",", "'jump_toward'", ":", "43", ",", "'jump_with'", ":", "44", ",", "'kick'", ":", "45", ",", "'larger'", ":", "46", ",", "'left'", ":", "47", ",", "'lie_above'", ":", "48", ",", "'lie_behind'", ":", "49", ",", "'lie_beneath'", ":", "50", ",", "'lie_front'", ":", "51", ",", "'lie_inside'", ":", "52", ",", "'lie_left'", ":", "53", ",", "'lie_next_to'", ":", "54", ",", "'lie_right'", ":", "55", ",", "'lie_with'", ":", "56", ",", "'move_above'", ":", "57", ",", "'move_away'", ":", "58", ",", "'move_behind'", ":", "59", ",", "'move_beneath'", ":", "60", ",", "'move_front'", ":", "61", ",", "'move_left'", ":", "62", ",", "'move_next_to'", ":", "63", ",", "'move_past'", ":", "64", ",", "'move_right'", ":", "65", ",", "'move_toward'", ":", "66", ",", "'move_with'", ":", "67", ",", "'next_to'", ":", "68", ",", "'past'", ":", "69", ",", "'play'", ":", "70", ",", "'pull'", ":", "71", ",", "'ride'", ":", "72", ",", "'right'", ":", "73", ",", "'run_above'", ":", "74", ",", "'run_away'", ":", "75", ",", "'run_behind'", ":", "76", ",", "'run_beneath'", ":", "77", ",", "'run_front'", ":", "78", ",", "'run_left'", ":", "79", ",", "'run_next_to'", ":", "80", ",", "'run_past'", ":", "81", ",", "'run_right'", ":", "82", ",", "'run_toward'", ":", "83", ",", "'run_with'", ":", "84", ",", "'sit_above'", ":", "85", ",", "'sit_behind'", ":", "86", ",", "'sit_beneath'", ":", "87", ",", "'sit_front'", ":", "88", ",", "'sit_inside'", ":", "89", ",", "'sit_left'", ":", "90", ",", "'sit_next_to'", ":", "91", ",", "'sit_right'", ":", "92", ",", "'stand_above'", ":", "93", ",", "'stand_behind'", ":", "94", ",", "'stand_beneath'", ":", "95", ",", "'stand_front'", ":", "96", ",", "'stand_inside'", ":", "97", ",", "'stand_left'", ":", "98", ",", "'stand_next_to'", ":", "99", ",", "'stand_right'", ":", "100", ",", "'stand_with'", ":", "101", ",", "'stop_above'", ":", "102", ",", "'stop_behind'", ":", "103", ",", "'stop_beneath'", ":", "104", ",", "'stop_front'", ":", "105", ",", "'stop_left'", ":", "106", ",", "'stop_next_to'", ":", "107", ",", "'stop_right'", ":", "108", ",", "'stop_with'", ":", "109", ",", "'swim_behind'", ":", "110", ",", "'swim_beneath'", ":", "111", ",", "'swim_front'", ":", "112", ",", "'swim_left'", ":", "113", ",", "'swim_next_to'", ":", "114", ",", "'swim_right'", ":", "115", ",", "'swim_with'", ":", "116", ",", "'taller'", ":", "117", ",", "'touch'", ":", "118", ",", "'toward'", ":", "119", ",", "'walk_above'", ":", "120", ",", "'walk_away'", ":", "121", ",", "'walk_behind'", ":", "122", ",", "'walk_beneath'", ":", "123", ",", "'walk_front'", ":", "124", ",", "'walk_left'", ":", "125", ",", "'walk_next_to'", ":", "126", ",", "'walk_past'", ":", "127", ",", "'walk_right'", ":", "128", ",", "'walk_toward'", ":", "129", ",", "'walk_with'", ":", "130", ",", "'watch'", ":", "131", "}", "\n", "", "elif", "dataset", "==", "'vidor'", ":", "\n", "# VidOR (obj:80, rel:50)", "\n", "\t\t\t", "self", ".", "idx_to_obj", "=", "{", "0", ":", "'adult'", ",", "1", ":", "'aircraft'", ",", "2", ":", "'antelope'", ",", "3", ":", "'baby'", ",", "4", ":", "'baby_seat'", ",", "5", ":", "'baby_walker'", ",", "6", ":", "'backpack'", ",", "7", ":", "'ball/sports_ball'", ",", "8", ":", "'bat'", ",", "9", ":", "'bear'", ",", "10", ":", "'bench'", ",", "11", ":", "'bicycle'", ",", "12", ":", "'bird'", ",", "13", ":", "'bottle'", ",", "14", ":", "'bread'", ",", "15", ":", "'bus/truck'", ",", "16", ":", "'cake'", ",", "17", ":", "'camel'", ",", "18", ":", "'camera'", ",", "19", ":", "'car'", ",", "20", ":", "'cat'", ",", "21", ":", "'cattle/cow'", ",", "22", ":", "'cellphone'", ",", "23", ":", "'chair'", ",", "24", ":", "'chicken'", ",", "25", ":", "'child'", ",", "26", ":", "'crab'", ",", "27", ":", "'crocodile'", ",", "28", ":", "'cup'", ",", "29", ":", "'dish'", ",", "30", ":", "'dog'", ",", "31", ":", "'duck'", ",", "32", ":", "'electric_fan'", ",", "33", ":", "'elephant'", ",", "34", ":", "'faucet'", ",", "35", ":", "'fish'", ",", "36", ":", "'frisbee'", ",", "37", ":", "'fruits'", ",", "38", ":", "'guitar'", ",", "39", ":", "'hamster/rat'", ",", "40", ":", "'handbag'", ",", "41", ":", "'horse'", ",", "42", ":", "'kangaroo'", ",", "43", ":", "'laptop'", ",", "44", ":", "'leopard'", ",", "45", ":", "'lion'", ",", "46", ":", "'microwave'", ",", "47", ":", "'motorcycle'", ",", "48", ":", "'oven'", ",", "49", ":", "'panda'", ",", "50", ":", "'penguin'", ",", "51", ":", "'piano'", ",", "52", ":", "'pig'", ",", "53", ":", "'rabbit'", ",", "54", ":", "'racket'", ",", "55", ":", "'refrigerator'", ",", "56", ":", "'scooter'", ",", "57", ":", "'screen/monitor'", ",", "58", ":", "'sheep/goat'", ",", "59", ":", "'sink'", ",", "60", ":", "'skateboard'", ",", "61", ":", "'ski'", ",", "62", ":", "'snake'", ",", "63", ":", "'snowboard'", ",", "64", ":", "'sofa'", ",", "65", ":", "'squirrel'", ",", "66", ":", "'stingray'", ",", "67", ":", "'stool'", ",", "68", ":", "'stop_sign'", ",", "69", ":", "'suitcase'", ",", "70", ":", "'surfboard'", ",", "71", ":", "'table'", ",", "72", ":", "'tiger'", ",", "73", ":", "'toilet'", ",", "74", ":", "'toy'", ",", "75", ":", "'traffic_light'", ",", "76", ":", "'train'", ",", "77", ":", "'turtle'", ",", "78", ":", "'vegetables'", ",", "79", ":", "'watercraft'", "}", "\n", "self", ".", "obj_to_idx", "=", "{", "'adult'", ":", "0", ",", "'aircraft'", ":", "1", ",", "'antelope'", ":", "2", ",", "'baby'", ":", "3", ",", "'baby_seat'", ":", "4", ",", "'baby_walker'", ":", "5", ",", "'backpack'", ":", "6", ",", "'ball/sports_ball'", ":", "7", ",", "'bat'", ":", "8", ",", "'bear'", ":", "9", ",", "'bench'", ":", "10", ",", "'bicycle'", ":", "11", ",", "'bird'", ":", "12", ",", "'bottle'", ":", "13", ",", "'bread'", ":", "14", ",", "'bus/truck'", ":", "15", ",", "'cake'", ":", "16", ",", "'camel'", ":", "17", ",", "'camera'", ":", "18", ",", "'car'", ":", "19", ",", "'cat'", ":", "20", ",", "'cattle/cow'", ":", "21", ",", "'cellphone'", ":", "22", ",", "'chair'", ":", "23", ",", "'chicken'", ":", "24", ",", "'child'", ":", "25", ",", "'crab'", ":", "26", ",", "'crocodile'", ":", "27", ",", "'cup'", ":", "28", ",", "'dish'", ":", "29", ",", "'dog'", ":", "30", ",", "'duck'", ":", "31", ",", "'electric_fan'", ":", "32", ",", "'elephant'", ":", "33", ",", "'faucet'", ":", "34", ",", "'fish'", ":", "35", ",", "'frisbee'", ":", "36", ",", "'fruits'", ":", "37", ",", "'guitar'", ":", "38", ",", "'hamster/rat'", ":", "39", ",", "'handbag'", ":", "40", ",", "'horse'", ":", "41", ",", "'kangaroo'", ":", "42", ",", "'laptop'", ":", "43", ",", "'leopard'", ":", "44", ",", "'lion'", ":", "45", ",", "'microwave'", ":", "46", ",", "'motorcycle'", ":", "47", ",", "'oven'", ":", "48", ",", "'panda'", ":", "49", ",", "'penguin'", ":", "50", ",", "'piano'", ":", "51", ",", "'pig'", ":", "52", ",", "'rabbit'", ":", "53", ",", "'racket'", ":", "54", ",", "'refrigerator'", ":", "55", ",", "'scooter'", ":", "56", ",", "'screen/monitor'", ":", "57", ",", "'sheep/goat'", ":", "58", ",", "'sink'", ":", "59", ",", "'skateboard'", ":", "60", ",", "'ski'", ":", "61", ",", "'snake'", ":", "62", ",", "'snowboard'", ":", "63", ",", "'sofa'", ":", "64", ",", "'squirrel'", ":", "65", ",", "'stingray'", ":", "66", ",", "'stool'", ":", "67", ",", "'stop_sign'", ":", "68", ",", "'suitcase'", ":", "69", ",", "'surfboard'", ":", "70", ",", "'table'", ":", "71", ",", "'tiger'", ":", "72", ",", "'toilet'", ":", "73", ",", "'toy'", ":", "74", ",", "'traffic_light'", ":", "75", ",", "'train'", ":", "76", ",", "'turtle'", ":", "77", ",", "'vegetables'", ":", "78", ",", "'watercraft'", ":", "79", "}", "\n", "self", ".", "idx_to_rel", "=", "{", "0", ":", "'above'", ",", "1", ":", "'away'", ",", "2", ":", "'behind'", ",", "3", ":", "'beneath'", ",", "4", ":", "'bite'", ",", "5", ":", "'caress'", ",", "6", ":", "'carry'", ",", "7", ":", "'chase'", ",", "8", ":", "'clean'", ",", "9", ":", "'close'", ",", "10", ":", "'cut'", ",", "11", ":", "'drive'", ",", "12", ":", "'feed'", ",", "13", ":", "'get_off'", ",", "14", ":", "'get_on'", ",", "15", ":", "'grab'", ",", "16", ":", "'hit'", ",", "17", ":", "'hold'", ",", "18", ":", "'hold_hand_of'", ",", "19", ":", "'hug'", ",", "20", ":", "'in_front_of'", ",", "21", ":", "'inside'", ",", "22", ":", "'kick'", ",", "23", ":", "'kiss'", ",", "24", ":", "'knock'", ",", "25", ":", "'lean_on'", ",", "26", ":", "'lick'", ",", "27", ":", "'lift'", ",", "28", ":", "'next_to'", ",", "29", ":", "'open'", ",", "30", ":", "'pat'", ",", "31", ":", "'play(instrument)'", ",", "32", ":", "'point_to'", ",", "33", ":", "'press'", ",", "34", ":", "'pull'", ",", "35", ":", "'push'", ",", "36", ":", "'release'", ",", "37", ":", "'ride'", ",", "38", ":", "'shake_hand_with'", ",", "39", ":", "'shout_at'", ",", "40", ":", "'smell'", ",", "41", ":", "'speak_to'", ",", "42", ":", "'squeeze'", ",", "43", ":", "'throw'", ",", "44", ":", "'touch'", ",", "45", ":", "'towards'", ",", "46", ":", "'use'", ",", "47", ":", "'watch'", ",", "48", ":", "'wave'", ",", "49", ":", "'wave_hand_to'", "}", "\n", "self", ".", "rel_to_idx", "=", "{", "'above'", ":", "0", ",", "'away'", ":", "1", ",", "'behind'", ":", "2", ",", "'beneath'", ":", "3", ",", "'bite'", ":", "4", ",", "'caress'", ":", "5", ",", "'carry'", ":", "6", ",", "'chase'", ":", "7", ",", "'clean'", ":", "8", ",", "'close'", ":", "9", ",", "'cut'", ":", "10", ",", "'drive'", ":", "11", ",", "'feed'", ":", "12", ",", "'get_off'", ":", "13", ",", "'get_on'", ":", "14", ",", "'grab'", ":", "15", ",", "'hit'", ":", "16", ",", "'hold'", ":", "17", ",", "'hold_hand_of'", ":", "18", ",", "'hug'", ":", "19", ",", "'in_front_of'", ":", "20", ",", "'inside'", ":", "21", ",", "'kick'", ":", "22", ",", "'kiss'", ":", "23", ",", "'knock'", ":", "24", ",", "'lean_on'", ":", "25", ",", "'lick'", ":", "26", ",", "'lift'", ":", "27", ",", "'next_to'", ":", "28", ",", "'open'", ":", "29", ",", "'pat'", ":", "30", ",", "'play(instrument)'", ":", "31", ",", "'point_to'", ":", "32", ",", "'press'", ":", "33", ",", "'pull'", ":", "34", ",", "'push'", ":", "35", ",", "'release'", ":", "36", ",", "'ride'", ":", "37", ",", "'shake_hand_with'", ":", "38", ",", "'shout_at'", ":", "39", ",", "'smell'", ":", "40", ",", "'speak_to'", ":", "41", ",", "'squeeze'", ":", "42", ",", "'throw'", ":", "43", ",", "'touch'", ":", "44", ",", "'towards'", ":", "45", ",", "'use'", ":", "46", ",", "'watch'", ":", "47", ",", "'wave'", ":", "48", ",", "'wave_hand_to'", ":", "49", "}", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "'Unknown dataset: {}'", ".", "format", "(", "dataset", ")", ")", "\n", "\n", "", "self", ".", "vid", ",", "self", ".", "width", ",", "self", ".", "height", ",", "self", ".", "traj", ",", "self", ".", "obj", ",", "self", ".", "rel", ",", "self", ".", "traj_len", "=", "self", ".", "_load_anno", "(", "anno_path", ")", "\n", "self", ".", "_merge_rel", "(", ")", "\n", "self", ".", "_print_anno", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.vidvrd_vidor_dataset.VidvrdVidorDataset._load_anno": [[36, 129], ["len", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict.items", "open", "json.load", "rel[].append", "collections.defaultdict", "dict", "dict", "dict", "traj[].append", "rel_per_obj_pair[].append"], "methods", ["None"], ["", "def", "_load_anno", "(", "self", ",", "anno_path", ")", ":", "\n", "\t\t", "with", "open", "(", "anno_path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "anno", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "vid", "=", "anno", "[", "'video_id'", "]", "\n", "width", "=", "anno", "[", "'width'", "]", "\n", "height", "=", "anno", "[", "'height'", "]", "\n", "traj_per_video", "=", "anno", "[", "'trajectories'", "]", "# 60", "\n", "obj_categories", "=", "anno", "[", "'subject/objects'", "]", "\n", "rel_per_seg", "=", "anno", "[", "'relation_instances'", "]", "\n", "traj_len", "=", "len", "(", "traj_per_video", ")", "# in vidvrd, 'traj_len' is lesser than '# of frames' (x15)", "\n", "\n", "#####################################################################################", "\n", "traj", "=", "defaultdict", "(", "list", ")", "\n", "for", "traj_per_frame", "in", "traj_per_video", ":", "\n", "\t\t\t", "for", "traj_per_inst", "in", "traj_per_frame", ":", "\n", "\t\t\t\t", "traj", "[", "traj_per_inst", "[", "'tid'", "]", "]", ".", "append", "(", "[", "traj_per_inst", "[", "'bbox'", "]", "[", "'xmin'", "]", ",", "\n", "traj_per_inst", "[", "'bbox'", "]", "[", "'ymin'", "]", ",", "\n", "traj_per_inst", "[", "'bbox'", "]", "[", "'xmax'", "]", ",", "\n", "traj_per_inst", "[", "'bbox'", "]", "[", "'ymax'", "]", "]", ")", "\n", "", "", "''' (example)\n\t\ttraj = defaultdict(list,\n            {0: [[14, 8, 912, 574],\n\t             [13, 7, 913, 573],\n\t             [12, 7, 915, 573],\n\t   \t\t\t ...\n\t             [1, 131, 862, 572],\n\t             [1, 124, 855, 570],\n\t             [1, 117, 849, 568]],\n\t        1: [[758, 121, 926, 409],\n\t\t\t\t[758, 121, 926, 409],\n\t\t\t\t[758, 121, 926, 409],\n\t\t\t\t...\n\t\t\t\t[703, 252, 957, 477],\n\t\t\t\t[695, 249, 951, 481],\n\t\t\t\t[686, 247, 944, 484]]})\n\t\t'''", "\n", "#####################################################################################", "\n", "obj", "=", "{", "}", "# {0: 'dog', 1: 'frisbee'}", "\n", "for", "obj_category", "in", "obj_categories", ":", "\n", "\t\t\t", "obj_idx", "=", "self", ".", "obj_to_idx", "[", "obj_category", "[", "'category'", "]", "]", "\n", "obj", "[", "obj_category", "[", "'tid'", "]", "]", "=", "obj_idx", "\n", "", "''' (example)\n\t\tobj = {0: 9, 1: 13}\n\t\t'''", "\n", "#####################################################################################", "\n", "rel", "=", "defaultdict", "(", "list", ")", "\n", "for", "rel_inst", "in", "rel_per_seg", ":", "\n", "\t\t    ", "rel_idx", "=", "self", ".", "rel_to_idx", "[", "rel_inst", "[", "'predicate'", "]", "]", "\n", "rel", "[", "rel_inst", "[", "'begin_fid'", "]", ",", "rel_inst", "[", "'end_fid'", "]", "]", ".", "append", "(", "[", "rel_inst", "[", "'subject_tid'", "]", ",", "\n", "rel_idx", ",", "\n", "rel_inst", "[", "'object_tid'", "]", "]", ")", "\n", "", "''' (example)\n\t\tdefaultdict(list,\n            {(0, 30): [[0, 37, 1], [1, 85, 0], [1, 72, 0]],\n             (15, 45): [[0, 77, 1], [1, 85, 0], [1, 72, 0]],\n             (30, 60): [[0, 77, 1], [1, 85, 0], [1, 72, 0]],\n             (45, 75): [[0, 77, 1], [1, 85, 0], [1, 72, 0]],\n             (60, 90): [[0, 77, 1], [1, 85, 0], [1, 72, 0]],\n             (75, 105): [[0, 77, 1], [1, 85, 0], [1, 72, 0]],\n             (90, 120): [[0, 77, 1], [1, 85, 0], [1, 72, 0]],\n             (105, 135): [[0, 3, 1], [1, 85, 0], [1, 72, 0]],\n             (120, 150): [[0, 37, 1], [1, 85, 0], [1, 72, 0]],\n             (135, 165): [[0, 37, 1], [1, 85, 0], [1, 72, 0]],\n             (150, 180): [[0, 37, 1], [1, 85, 0], [1, 72, 0]],\n             (165, 195): [[0, 3, 1], [1, 85, 0], [1, 72, 0]]})\n\t\t'''", "\n", "\n", "for", "key", ",", "value", "in", "rel", ".", "items", "(", ")", ":", "\n", "\t\t    ", "rel_per_obj_pair", "=", "defaultdict", "(", "list", ")", "\n", "for", "s", ",", "r", ",", "o", "in", "value", ":", "\n", "\t\t        ", "rel_per_obj_pair", "[", "s", ",", "o", "]", ".", "append", "(", "r", ")", "\n", "", "rel", "[", "key", "]", "=", "dict", "(", "rel_per_obj_pair", ")", "\n", "", "''' (example) \n\t\trel = defaultdict(list,\n            {(0, 30): defaultdict(list, {(0, 1): [37], (1, 0): [85, 72]}),\n             (15, 45): defaultdict(list, {(0, 1): [77], (1, 0): [85, 72]}),\n             (30, 60): defaultdict(list, {(0, 1): [77], (1, 0): [85, 72]}),\n             (45, 75): defaultdict(list, {(0, 1): [77], (1, 0): [85, 72]}),\n             (60, 90): defaultdict(list, {(0, 1): [77], (1, 0): [85, 72]}),\n             (75, 105): defaultdict(list, {(0, 1): [77], (1, 0): [85, 72]}),\n             (90, 120): defaultdict(list, {(0, 1): [77], (1, 0): [85, 72]}),\n             (105, 135): defaultdict(list, {(0, 1): [3], (1, 0): [85, 72]}),\n             (120, 150): defaultdict(list, {(0, 1): [37], (1, 0): [85, 72]}),\n             (135, 165): defaultdict(list, {(0, 1): [37], (1, 0): [85, 72]}),\n             (150, 180): defaultdict(list, {(0, 1): [37], (1, 0): [85, 72]}),\n             (165, 195): defaultdict(list, {(0, 1): [3], (1, 0): [85, 72]})})\n\n        rel[begin, end][sub, obj] = list(pred)\n\t\t'''", "\n", "#####################################################################################", "\n", "\n", "return", "vid", ",", "width", ",", "height", ",", "dict", "(", "traj", ")", ",", "obj", ",", "dict", "(", "rel", ")", ",", "traj_len", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.vidvrd_vidor_dataset.VidvrdVidorDataset._merge_rel": [[130, 158], ["collections.defaultdict", "vidvrd_vidor_dataset.VidvrdVidorDataset.rel.items", "collections.defaultdict", "collections.defaultdict.items", "dict", "rel_per_seg.items", "new_rel_duration_dict[].append", "rel_duration_dict[].append", "max", "new_rel_duration_dict[].append"], "methods", ["None"], ["", "def", "_merge_rel", "(", "self", ")", ":", "\n", "\t\t", "obj", "=", "{", "tid", ":", "self", ".", "idx_to_obj", "[", "obj_idx", "]", "for", "tid", ",", "obj_idx", "in", "self", ".", "obj", ".", "items", "(", ")", "}", "\n", "\n", "rel_duration_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "duration", ",", "rel_per_seg", "in", "self", ".", "rel", ".", "items", "(", ")", ":", "\n", "\t\t\t", "for", "(", "sub_id", ",", "obj_id", ")", ",", "rel_idx_list", "in", "rel_per_seg", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "for", "rel_idx", "in", "rel_idx_list", ":", "\n", "\t\t\t\t\t", "rel_duration_dict", "[", "(", "\n", "self", ".", "obj", "[", "sub_id", "]", ",", "\n", "rel_idx", ",", "\n", "self", ".", "obj", "[", "obj_id", "]", "\n", ")", "]", ".", "append", "(", "duration", ")", "\n", "\n", "", "", "", "new_rel_duration_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "rel_triplet", ",", "duration_list", "in", "rel_duration_dict", ".", "items", "(", ")", ":", "\n", "\t\t\t", "prev_start", "=", "0", "\n", "prev_end", "=", "0", "\n", "for", "start", ",", "end", "in", "duration_list", ":", "\n", "\t\t\t\t", "if", "prev_start", "==", "0", "and", "prev_end", "==", "0", ":", "\n", "\t\t\t\t\t", "prev_start", "=", "start", "\n", "prev_end", "=", "end", "\n", "", "elif", "prev_start", "<=", "start", "<=", "prev_end", ":", "\n", "\t\t\t\t\t", "prev_end", "=", "max", "(", "prev_end", ",", "end", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "new_rel_duration_dict", "[", "(", "prev_start", ",", "prev_end", ")", "]", ".", "append", "(", "rel_triplet", ")", "\n", "prev_start", "=", "start", "\n", "prev_end", "=", "end", "\n", "", "", "new_rel_duration_dict", "[", "(", "prev_start", ",", "prev_end", ")", "]", ".", "append", "(", "rel_triplet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.vidvrd_vidor_dataset.VidvrdVidorDataset._print_anno": [[159, 193], ["print", "print", "print", "print", "print", "pprint.pprint.pprint", "print", "collections.defaultdict", "vidvrd_vidor_dataset.VidvrdVidorDataset.rel.items", "print", "pprint.pprint.pprint", "pprint.pprint.pprint", "print", "dict", "vidvrd_vidor_dataset.VidvrdVidorDataset.obj.items", "rel[].append"], "methods", ["None"], ["", "self", ".", "rel", "=", "dict", "(", "new_rel_duration_dict", ")", "\n", "\n", "", "def", "_print_anno", "(", "self", ")", ":", "\n", "\t\t", "print", "(", "f'==============================='", "*", "2", ")", "\n", "print", "(", "f'- video id: {self.vid}'", ")", "\n", "print", "(", "f'- video size (width,height): {self.width, self.height}'", ")", "\n", "print", "(", "f'- trajectory length: {self.traj_len}'", ")", "\n", "obj", "=", "{", "tid", ":", "self", ".", "idx_to_obj", "[", "obj_idx", "]", "for", "tid", ",", "obj_idx", "in", "self", ".", "obj", ".", "items", "(", ")", "}", "\n", "print", "(", "f'- trajectory id to object idx: {obj}'", ")", "\n", "print", "(", "f'- object trajectories (xmin, ymin, xmax, ymax)'", ")", "\n", "pprint", "(", "self", ".", "traj", ")", "\n", "# rel = {}", "\n", "# for duration, rel_per_seg in self.rel.items():", "\n", "# \tnew_rel_per_seg = {}", "\n", "# \tfor (sub_id, obj_id), rel_idx_list in rel_per_seg.items():", "\n", "# \t\trels = []", "\n", "# \t\tfor rel_idx in rel_idx_list:", "\n", "# \t\t\trels.append(self.idx_to_rel[rel_idx])", "\n", "# \t\tnew_rel_per_seg[(obj[sub_id], obj[obj_id])] = rels", "\n", "# \trel[duration] = new_rel_per_seg", "\n", "# print(f'- relation instances (start, end):(sub, obj):[relations]')", "\n", "# pprint(rel)", "\n", "rel", "=", "defaultdict", "(", "list", ")", "\n", "for", "duration", ",", "triplet_list", "in", "self", ".", "rel", ".", "items", "(", ")", ":", "\n", "\t\t\t", "for", "(", "sub_idx", ",", "rel_idx", ",", "obj_idx", ")", "in", "triplet_list", ":", "\n", "\t\t\t\t", "rel", "[", "duration", "]", ".", "append", "(", "(", "\n", "self", ".", "idx_to_obj", "[", "sub_idx", "]", ",", "\n", "self", ".", "idx_to_rel", "[", "rel_idx", "]", ",", "\n", "self", ".", "idx_to_obj", "[", "obj_idx", "]", "\n", ")", ")", "\n", "", "", "print", "(", "f'- relation instances (sub, rel, obj):[durations]'", ")", "\n", "pprint", "(", "dict", "(", "rel", ")", ")", "\n", "print", "(", "f'==============================='", "*", "2", ")", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocessed_dataset.VRDDataset.__init__": [[8, 38], ["numpy.random.RandomState", "preprocessed_dataset.VRDDataset.logger.info", "os.path.join", "h5py.File", "preprocessed_dataset.VRDDataset.logger.info", "os.path.join", "len", "len", "h5py.File", "preprocessed_dataset.VRDDataset.logger.info", "ValueError", "len", "os.path.join", "len", "len", "len"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "cfg", ",", "logger", ")", ":", "\n", "\t\t", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "cfg", ".", "ETC", ".", "RANDOM_SEED", ")", "\n", "self", ".", "phase", "=", "cfg", ".", "MODEL", ".", "PHASE", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "logger", ".", "info", "(", "'loading preprocessed video segments for {}...'", ".", "format", "(", "self", ".", "phase", ")", ")", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "'vidvrd-baseline-output'", ",", "'preprocessed_data'", ")", "\n", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "\t\t\t", "self", ".", "dataset", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'preprocessed_'", "+", "self", ".", "phase", "+", "'_dataset.hdf5'", ")", ",", "'r'", ")", "\n", "self", ".", "feats", "=", "self", ".", "dataset", "[", "'feats'", "]", "\n", "self", ".", "pred_id", "=", "self", ".", "dataset", "[", "'pred_id'", "]", "\n", "\n", "assert", "len", "(", "self", ".", "feats", ")", "==", "len", "(", "self", ".", "pred_id", ")", "\n", "self", ".", "logger", ".", "info", "(", "'total {} preprocessed relation instance proposals'", ".", "format", "(", "len", "(", "self", ".", "feats", ")", ")", ")", "\n", "", "elif", "self", ".", "phase", "==", "'test'", ":", "\n", "\t\t\t", "self", ".", "dataset", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'preprocessed_'", "+", "self", ".", "phase", "+", "'_dataset.hdf5'", ")", ",", "'r'", ")", "\n", "self", ".", "pairs", "=", "self", ".", "dataset", "[", "'pairs'", "]", "\n", "self", ".", "feats", "=", "self", ".", "dataset", "[", "'feats'", "]", "\n", "# self.trackid = self.dataset['trackid']", "\n", "\n", "# with open(os.path.join(path, 'preprocessed_'+self.phase+'_dataset.json'), 'r') as f:", "\n", "# \tself.dataset2 = json.load(f)", "\n", "# self.index = self.dataset2['index']", "\n", "# self.iou = self.dataset2['iou']", "\n", "\n", "assert", "len", "(", "self", ".", "pairs", ")", "==", "len", "(", "self", ".", "feats", ")", "\n", "self", ".", "logger", ".", "info", "(", "'total {} preprocessed relation instance proposals'", ".", "format", "(", "len", "(", "self", ".", "feats", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "'Unknown phase: {}'", ".", "format", "(", "self", ".", "phase", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocessed_dataset.VRDDataset.__len__": [[39, 41], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocessed_dataset.VRDDataset.__getitem__": [[42, 47], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "\t\t\t", "return", "self", ".", "feats", "[", "idx", "]", ",", "self", ".", "pred_id", "[", "idx", "]", "\n", "", "else", ":", "\n", "\t\t\t", "return", "self", ".", "pairs", "[", "idx", "]", ",", "self", ".", "feats", "[", "idx", "]", "\n", "# return self.index[idx], self.pairs[idx], self.feats[idx], self.iou[idx], self.trackid[idx]", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.print_result.print_result": [[8, 17], ["print", "print", "print", "print", "print", "print", "print", "len", "len", "len", "len"], "function", ["None"], ["", "def", "print_result", "(", "video", ",", "i", ")", ":", "\n", "    ", "result", "=", "predict", "[", "'results'", "]", "[", "'ILSVRC2015_train_00219001'", "]", "# predicted relation instances per video", "\n", "print", "(", "f\"total {len(predict['results'])} videos / {len(predict['results'][video])} relation instances\"", ")", "\n", "print", "(", "f\"video: {video}, {i}th predicted relation instance\"", ")", "\n", "print", "(", "\"triplet:\"", ",", "result", "[", "i", "]", "[", "'triplet'", "]", ")", "\n", "print", "(", "\"score:\"", ",", "result", "[", "i", "]", "[", "'score'", "]", ")", "\n", "print", "(", "\"duration:\"", ",", "result", "[", "i", "]", "[", "'duration'", "]", ")", "\n", "print", "(", "\"len of sub_traj:\"", ",", "len", "(", "result", "[", "i", "]", "[", "'sub_traj'", "]", ")", ")", "\n", "print", "(", "\"len of obj_traj:\"", ",", "len", "(", "result", "[", "i", "]", "[", "'obj_traj'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.dataset.VRDDataset.__init__": [[11, 63], ["numpy.random.RandomState", "collections.OrderedDict", "dataset.VRDDataset.logger.info", "dataset.VRDDataset._train_triplet_id.clear", "dataset.get_triplets", "enumerate", "collections.defaultdict", "dataset.get_index", "list", "dataset.get_object_id", "dataset.get_predicate_id", "dataset.get_object_id", "dataset.get_relation_insts", "dataset.VRDDataset.short_rel_insts.keys", "dataset.get_index", "ValueError", "segment_video", "dataset.get_anno", "segment_video", "dataset.VRDDataset._extract_feature", "dataset.VRDDataset._extract_feature", "dataset.VRDDataset.short_rel_insts[].append", "dataset.VRDDataset.index.append", "dataset.get_object_id", "dataset.get_predicate_id", "dataset.get_object_id"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_triplets", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_index", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_object_id", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_predicate_id", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_object_id", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_relation_insts", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_index", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.segment_video", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.DatasetV1.get_anno", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.segment_video", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess._extract_feature", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess._extract_feature", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_object_id", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_predicate_id", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_object_id"], ["\n", "\n", "def", "__init__", "(", "self", ",", "anno_rpath", ",", "video_rpath", ",", "splits", ")", ":", "\n", "        ", "\"\"\"\n        anno_rpath: the root path of annotations\n        video_rpath: the root path of videos\n        splits: a list of splits in the dataset to load\n        \"\"\"", "\n", "self", ".", "anno_rpath", "=", "anno_rpath", "\n", "self", ".", "video_rpath", "=", "video_rpath", "\n", "self", ".", "_load_annotations", "(", "splits", ")", "\n", "\n", "", "def", "_load_annotations", "(", "self", ",", "splits", ")", ":", "\n", "        ", "print", "(", "'loading annotations...'", ")", "\n", "so", "=", "set", "(", ")", "\n", "pred", "=", "set", "(", ")", "\n", "self", ".", "split_index", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "annos", "=", "dict", "(", ")", "\n", "for", "split", "in", "splits", ":", "\n", "            ", "anno_files", "=", "self", ".", "_get_anno_files", "(", "split", ")", "\n", "annos", "=", "dict", "(", ")", "\n", "for", "path", "in", "tqdm", "(", "anno_files", ")", ":", "\n", "                ", "with", "open", "(", "path", ",", "'r'", ")", "as", "fin", ":", "\n", "                    ", "anno", "=", "json", ".", "load", "(", "fin", ")", "\n", "anno", "=", "self", ".", "_check_anno", "(", "anno", ")", "\n", "", "annos", "[", "anno", "[", "'video_id'", "]", "]", "=", "anno", "\n", "", "for", "vid", ",", "anno", "in", "annos", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "split_index", "[", "split", "]", ".", "append", "(", "vid", ")", "\n", "for", "obj", "in", "anno", "[", "'subject/objects'", "]", ":", "\n", "                    ", "so", ".", "add", "(", "obj", "[", "'category'", "]", ")", "\n", "", "for", "rel", "in", "anno", "[", "'relation_instances'", "]", ":", "\n", "                    ", "pred", ".", "add", "(", "rel", "[", "'predicate'", "]", ")", "\n", "", "", "self", ".", "annos", ".", "update", "(", "annos", ")", "\n", "\n", "# build index for subject/object and predicate", "\n", "", "so", "=", "sorted", "(", "so", ")", "\n", "pred", "=", "sorted", "(", "pred", ")", "\n", "self", ".", "soid2so", "=", "dict", "(", ")", "\n", "self", ".", "so2soid", "=", "dict", "(", ")", "\n", "self", ".", "pid2pred", "=", "dict", "(", ")", "\n", "self", ".", "pred2pid", "=", "dict", "(", ")", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "so", ")", ":", "\n", "            ", "self", ".", "soid2so", "[", "i", "]", "=", "name", "\n", "self", ".", "so2soid", "[", "name", "]", "=", "i", "\n", "", "for", "i", ",", "name", "in", "enumerate", "(", "pred", ")", ":", "\n", "            ", "self", ".", "pid2pred", "[", "i", "]", "=", "name", "\n", "self", ".", "pred2pid", "[", "name", "]", "=", "i", "\n", "\n", "", "", "def", "_check_anno", "(", "self", ",", "anno", ")", ":", "\n", "        ", "assert", "'version'", "not", "in", "anno", "\n", "return", "anno", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.dataset.VRDDataset.__len__": [[64, 66], ["len"], "methods", ["None"], ["\n", "", "def", "_get_anno_files", "(", "self", ",", "split", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.dataset.VRDDataset.__getitem__": [[67, 95], ["numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "dataset.VRDDataset._extract_feature", "dataset.VRDDataset._feature_preprocess", "feats.astype.astype.astype", "numpy.minimum", "dataset.VRDDataset._data_sampling", "dataset.VRDDataset._feature_preprocess", "feats.astype.astype.append", "numpy.concatenate.append", "numpy.concatenate.append", "dataset.VRDDataset.astype", "_triplet_idx.astype", "_pred_id.astype", "enumerate"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess._extract_feature", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess._feature_preprocess", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess._data_sampling", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess._feature_preprocess"], ["\n", "", "def", "get_video_path", "(", "self", ",", "vid", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "_get_action_predicates", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "get_object_num", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "soid2so", ")", "\n", "\n", "", "def", "get_object_name", "(", "self", ",", "cid", ")", ":", "\n", "        ", "return", "self", ".", "soid2so", "[", "cid", "]", "\n", "\n", "", "def", "get_object_id", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "so2soid", "[", "name", "]", "\n", "\n", "", "def", "get_predicate_num", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "pid2pred", ")", "\n", "\n", "", "def", "get_predicate_name", "(", "self", ",", "pid", ")", ":", "\n", "        ", "return", "self", ".", "pid2pred", "[", "pid", "]", "\n", "\n", "", "def", "get_predicate_id", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "pred2pid", "[", "name", "]", "\n", "\n", "", "def", "get_triplets", "(", "self", ",", "split", ")", ":", "\n", "        ", "triplets", "=", "set", "(", ")", "\n", "for", "vid", "in", "self", ".", "get_index", "(", "split", ")", ":", "\n", "            ", "insts", "=", "self", ".", "get_relation_insts", "(", "vid", ",", "no_traj", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.dataset.VRDDataset._data_sampling": [[96, 120], ["dataset.VRDDataset._extract_feature", "feats.astype.astype.astype", "dict", "dict", "numpy.empty", "numpy.minimum", "enumerate", "enumerate", "numpy.where", "numpy.where", "len", "numpy.concatenate", "numpy.random.choice", "itertools.product"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess._extract_feature"], ["triplets", ".", "update", "(", "inst", "[", "'triplet'", "]", "for", "inst", "in", "insts", ")", "\n", "", "return", "triplets", "\n", "\n", "", "def", "get_index", "(", "self", ",", "split", ")", ":", "\n", "        ", "\"\"\"\n        get list of video IDs for a split\n        \"\"\"", "\n", "if", "split", "in", "self", ".", "split_index", ":", "\n", "            ", "return", "self", ".", "split_index", "[", "split", "]", "\n", "", "else", ":", "\n", "            ", "for", "s", "in", "self", ".", "split_index", ".", "keys", "(", ")", ":", "\n", "                ", "if", "split", "in", "s", ":", "\n", "                    ", "print", "(", "'INFO: infer the split name \\'{}\\' in this dataset from \\'{}\\''", ".", "format", "(", "s", ",", "split", ")", ")", "\n", "return", "self", ".", "split_index", "[", "s", "]", "\n", "", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'Unknown split \"{}\" in the loaded dataset'", ".", "format", "(", "split", ")", ")", "\n", "\n", "", "", "", "def", "get_anno", "(", "self", ",", "vid", ")", ":", "\n", "        ", "\"\"\"\n        get raw annotation for a video\n        \"\"\"", "\n", "return", "self", ".", "annos", "[", "vid", "]", "\n", "\n", "", "def", "get_object_insts", "(", "self", ",", "vid", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.dataset.VRDDataset._extract_feature": [[121, 149], ["get_segment_signature", "get_feature_path", "os.path.join", "os.path.exists", "dataset.VRDDataset.logger.info", "dataset.VRDDataset.logger.info", "h5py.File"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.get_segment_signature", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.get_feature_path"], ["\n", "anno", "=", "self", ".", "get_anno", "(", "vid", ")", "\n", "object_insts", "=", "[", "]", "\n", "tid2cls", "=", "dict", "(", ")", "\n", "for", "item", "in", "anno", "[", "'subject/objects'", "]", ":", "\n", "            ", "tid2cls", "[", "item", "[", "'tid'", "]", "]", "=", "item", "[", "'category'", "]", "\n", "", "traj", "=", "defaultdict", "(", "dict", ")", "\n", "for", "fid", ",", "frame", "in", "enumerate", "(", "anno", "[", "'trajectories'", "]", ")", ":", "\n", "            ", "for", "roi", "in", "frame", ":", "\n", "                ", "traj", "[", "roi", "[", "'tid'", "]", "]", "[", "str", "(", "fid", ")", "]", "=", "(", "roi", "[", "'bbox'", "]", "[", "'xmin'", "]", ",", "\n", "roi", "[", "'bbox'", "]", "[", "'ymin'", "]", ",", "\n", "roi", "[", "'bbox'", "]", "[", "'xmax'", "]", ",", "\n", "roi", "[", "'bbox'", "]", "[", "'ymax'", "]", ")", "\n", "", "", "for", "tid", "in", "traj", ":", "\n", "            ", "object_insts", ".", "append", "(", "{", "\n", "'tid'", ":", "tid", ",", "\n", "'category'", ":", "tid2cls", "[", "tid", "]", ",", "\n", "'trajectory'", ":", "traj", "[", "tid", "]", "\n", "}", ")", "\n", "", "return", "object_insts", "\n", "\n", "", "def", "get_action_insts", "(", "self", ",", "vid", ")", ":", "\n", "        ", "\"\"\"\n        get the action instances labeled in a video\n        \"\"\"", "\n", "anno", "=", "self", ".", "get_anno", "(", "vid", ")", "\n", "action_insts", "=", "[", "]", "\n", "actions", "=", "self", ".", "_get_action_predicates", "(", ")", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.dataset.VRDDataset._feature_preprocess": [[150, 174], ["lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize"], ["for", "each_ins", "in", "anno", "[", "'relation_instances'", "]", ":", "\n", "            ", "if", "each_ins", "[", "'predicate'", "]", "in", "actions", ":", "\n", "                ", "begin_fid", "=", "each_ins", "[", "'begin_fid'", "]", "\n", "end_fid", "=", "each_ins", "[", "'end_fid'", "]", "\n", "each_ins_trajectory", "=", "[", "]", "\n", "for", "each_traj", "in", "anno", "[", "'trajectories'", "]", "[", "begin_fid", ":", "end_fid", "]", ":", "\n", "                    ", "for", "each_traj_obj", "in", "each_traj", ":", "\n", "                        ", "if", "each_traj_obj", "[", "'tid'", "]", "==", "each_ins", "[", "'subject_tid'", "]", ":", "\n", "                            ", "each_traj_frame", "=", "(", "\n", "each_traj_obj", "[", "'bbox'", "]", "[", "'xmin'", "]", ",", "\n", "each_traj_obj", "[", "'bbox'", "]", "[", "'ymin'", "]", ",", "\n", "each_traj_obj", "[", "'bbox'", "]", "[", "'xmax'", "]", ",", "\n", "each_traj_obj", "[", "'bbox'", "]", "[", "'ymax'", "]", "\n", ")", "\n", "each_ins_trajectory", ".", "append", "(", "each_traj_frame", ")", "\n", "", "", "", "each_ins_action", "=", "{", "\n", "\"category\"", ":", "each_ins", "[", "'predicate'", "]", ",", "\n", "\"duration\"", ":", "(", "begin_fid", ",", "end_fid", ")", ",", "\n", "\"trajectory\"", ":", "each_ins_trajectory", "\n", "}", "\n", "action_insts", ".", "append", "(", "each_ins_action", ")", "\n", "", "", "return", "action_insts", "\n", "\n", "", "def", "get_relation_insts", "(", "self", ",", "vid", ",", "no_traj", "=", "False", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess.__init__": [[12, 95], ["numpy.random.RandomState", "preprocess.Preprocess.logger.info", "collections.defaultdict", "dataset.get_index", "list", "collections.defaultdict", "dataset.get_relation_insts", "collections.defaultdict.items", "preprocess.Preprocess.short_rel_insts.keys", "dataset.get_index", "ValueError", "segment_video", "preprocess.Preprocess._extract_feature", "dataset.get_anno", "segment_video", "rel_dict[].append", "preprocess.Preprocess.short_rel_insts[].append", "preprocess.Preprocess._extract_feature", "dataset.get_predicate_id", "preprocess.Preprocess.index.append", "dataset.get_object_id", "dataset.get_object_id"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_index", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_relation_insts", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_index", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.segment_video", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess._extract_feature", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.DatasetV1.get_anno", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.segment_video", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess._extract_feature", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_predicate_id", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_object_id", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.dataset.dataset.Dataset.get_object_id"], ["\t", "def", "__init__", "(", "self", ",", "cfg", ",", "dataset", ",", "logger", ")", ":", "\n", "\t\t", "self", ".", "num_predicates", "=", "cfg", ".", "PREDICT", ".", "PREDICATE_NUM", "\n", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "cfg", ".", "ETC", ".", "RANDOM_SEED", ")", "\n", "self", ".", "phase", "=", "cfg", ".", "MODEL", ".", "PHASE", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "logger", ".", "info", "(", "'preparing video segments for {}...'", ".", "format", "(", "self", ".", "phase", ")", ")", "\n", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "\t\t\t", "self", ".", "short_rel_insts", "=", "defaultdict", "(", "list", ")", "\n", "video_indices", "=", "dataset", ".", "get_index", "(", "split", "=", "'train'", ")", "\n", "for", "vid", "in", "video_indices", ":", "\n", "\t\t\t\t", "rel_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "rel_inst", "in", "dataset", ".", "get_relation_insts", "(", "vid", ",", "no_traj", "=", "True", ")", ":", "\n", "\t\t\t\t\t", "'''\n\t\t\t\t\trel_inst = {'triplet': ('zebra', 'walk_front', 'zebra'),\n\t\t\t\t\t\t\t\t'subject_tid': 0,\n\t\t\t\t\t\t\t\t'object_tid': 1, \n\t\t\t\t\t\t\t\t'duration': (150, 180)}\n\t\t\t\t\trel_inst = {'triplet': ('person', 'sit_next_to', 'dog'),\n\t\t\t\t\t\t\t\t'subject_tid': 9,\n\t\t\t\t\t\t\t\t'object_tid': 0,\n\t\t\t\t\t\t\t\t'duration': (0, 30)}\n\t\t\t\t\t'''", "\n", "sub_name", ",", "pred_name", ",", "obj_name", "=", "rel_inst", "[", "'triplet'", "]", "\n", "segs", "=", "segment_video", "(", "*", "rel_inst", "[", "'duration'", "]", ")", "\n", "'''\n\t\t\t\t\tsegment_video(0, 30)\n\t\t\t\t\t-> segs = [(0, 30)]\n\n\t\t\t\t\tsegment_video(0, 45)\n\t\t\t\t\t-> segs = [(0, 30), (15, 45)]\n\t\t\t\t\t'''", "\n", "for", "fstart", ",", "fend", "in", "segs", ":", "\n", "\t\t\t\t\t\t", "rel_dict", "[", "fstart", ",", "# 0", "\n", "fend", ",", "# 30", "\n", "rel_inst", "[", "'subject_tid'", "]", ",", "# 1st in current segment", "\n", "rel_inst", "[", "'object_tid'", "]", ",", "# 3rd in current segment", "\n", "dataset", ".", "get_object_id", "(", "sub_name", ")", ",", "# 2: car", "\n", "dataset", ".", "get_object_id", "(", "obj_name", ")", "# 4: bus", "\n", "]", ".", "append", "(", "dataset", ".", "get_predicate_id", "(", "pred_name", ")", ")", "# 68: faster", "\n", "", "", "'''\n\t\t\t\tdefaultdict(list,\n\t\t\t\t            {(0, 30, 0, 1, 19, 10): [92, 86, 70, 4, 131, 118],\n\t\t\t\t             (0, 30, 1, 0, 10, 19): [51, 53, 46, 131],\n\t\t\t\t             (0, 30, 0, 2, 19, 27): [92, 88],\n\t\t\t\t             (15, 45, 0, 2, 19, 27): [92, 88], # 15-45\n\t\t\t\t             (0, 30, 2, 0, 27, 19): [2, 47, 46],\n\t\t\t\t             (0, 30, 0, 3, 19, 27): [85, 118],\n\t\t\t\t             (0, 30, 3, 0, 27, 19): [3, 46],\n\t\t\t\t             (0, 30, 1, 2, 10, 27): [55],\n\t\t\t\t             (15, 45, 1, 2, 10, 27): [55]}} # 15-45\n\t\t\t\t            )\n\t\t\t\t'''", "\n", "for", "(", "fstart", ",", "fend", ",", "sub_tid", ",", "obj_tid", ",", "sub", ",", "obj", ")", ",", "pred", "in", "rel_dict", ".", "items", "(", ")", ":", "\n", "\t\t\t\t\t", "if", "self", ".", "_extract_feature", "(", "vid", ",", "fstart", ",", "fend", ",", "dry_run", "=", "True", ")", ":", "\n", "\t\t\t\t\t\t", "self", ".", "short_rel_insts", "[", "(", "vid", ",", "fstart", ",", "fend", ")", "]", ".", "append", "(", "(", "sub_tid", ",", "obj_tid", ",", "sub", ",", "pred", ",", "obj", ")", ")", "\n", "", "", "'''\n\t\t\t\tself.short_rel_insts[(vid, fstart=0, fend=30)] = \n\t\t\t\t\t[(0, 1, 19, [92, 86, 70, 4, 131, 118], 10),\n\t\t\t\t\t (1, 0, 10, [51, 53, 46, 131], 19),\n\t\t\t\t\t (0, 2, 19, [92, 88], 27),\n\t\t\t\t\t (2, 0, 27, [2, 47, 46], 19),\n\t\t\t\t\t (0, 3, 19, [85, 118], 27),\n\t\t\t\t\t (3, 0, 27, [3, 46], 19),\n\t\t\t\t\t (1, 2, 10, [55], 27)]\n\t\t\t\tself.short_rel_insts[(vid, fstart=15, fend=45)] = \n\t\t\t\t\t[(0, 2, 19, [92, 88], 27),\n\t\t\t\t\t (1, 2, 10, [55], 27)]\n\t\t\t\t'''", "\n", "", "self", ".", "index", "=", "list", "(", "self", ".", "short_rel_insts", ".", "keys", "(", ")", ")", "\n", "", "elif", "self", ".", "phase", "==", "'test'", ":", "\n", "\t\t\t", "self", ".", "index", "=", "[", "]", "\n", "video_indices", "=", "dataset", ".", "get_index", "(", "split", "=", "'test'", ")", "\n", "for", "vid", "in", "video_indices", ":", "\n", "\t\t\t\t", "anno", "=", "dataset", ".", "get_anno", "(", "vid", ")", "\n", "segs", "=", "segment_video", "(", "0", ",", "anno", "[", "'frame_count'", "]", ")", "\n", "# enumerate all the possible segments", "\n", "for", "fstart", ",", "fend", "in", "segs", ":", "\n", "# if multiple objects detected and the relation features extracted", "\n", "\t\t\t\t\t", "if", "self", ".", "_extract_feature", "(", "vid", ",", "fstart", ",", "fend", ",", "dry_run", "=", "True", ")", ":", "\n", "\t\t\t\t\t\t", "self", ".", "index", ".", "append", "(", "(", "vid", ",", "fstart", ",", "fend", ")", ")", "\n", "", "", "", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "'Unknown phase: {}'", ".", "format", "(", "self", ".", "phase", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess.preprocess": [[96, 141], ["preprocess.Preprocess.logger.info", "range", "numpy.concatenate", "numpy.concatenate", "range", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "len", "preprocess.Preprocess.logger.info", "preprocess.Preprocess._data_sampling", "preprocess.Preprocess._feature_preprocess", "numpy.concatenate.append", "numpy.concatenate.append", "len", "preprocess.Preprocess.logger.info", "preprocess.Preprocess._extract_feature", "preprocess.Preprocess._feature_preprocess", "index.append", "numpy.concatenate.append", "numpy.concatenate.append", "iou.append", "numpy.concatenate.append", "len", "preprocess.Preprocess.astype", "_pred_id.astype", "preprocess.Preprocess.astype", "_iou.tolist", "enumerate"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess._data_sampling", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess._feature_preprocess", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess._extract_feature", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess._feature_preprocess"], ["", "", "def", "preprocess", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "logger", ".", "info", "(", "f'Total {len(self.index)} video segments'", ")", "\n", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "\t\t\t", "feats", "=", "[", "]", "\n", "pred_id", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "index", ")", ")", ":", "\n", "\t\t\t\t", "self", ".", "logger", ".", "info", "(", "f'processing {i+1}th segment of train data'", ")", "\n", "vid", ",", "fstart", ",", "fend", "=", "self", ".", "index", "[", "i", "]", "\n", "_feats", ",", "_pred_id", "=", "self", ".", "_data_sampling", "(", "vid", ",", "fstart", ",", "fend", ")", "\n", "\n", "_feats", "=", "self", ".", "_feature_preprocess", "(", "_feats", ")", "\n", "feats", ".", "append", "(", "_feats", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "pred_id", ".", "append", "(", "_pred_id", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "feats", "=", "np", ".", "concatenate", "(", "feats", ")", "\n", "pred_id", "=", "np", ".", "concatenate", "(", "pred_id", ")", "\n", "return", "feats", ",", "pred_id", "\n", "", "else", ":", "\n", "\t\t\t", "index", "=", "[", "]", "\n", "pairs", "=", "[", "]", "\n", "feats", "=", "[", "]", "\n", "iou", "=", "[", "]", "\n", "trackid", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "index", ")", ")", ":", "\n", "\t\t\t\t", "self", ".", "logger", ".", "info", "(", "f'processing {i+1}th segment of test data'", ")", "\n", "_index", "=", "self", ".", "index", "[", "i", "]", "# vid, fstart, fend", "\n", "_pairs", ",", "_feats", ",", "_iou", ",", "_trackid", "=", "self", ".", "_extract_feature", "(", "*", "_index", ")", "\n", "test_inds", "=", "[", "ind", "for", "ind", ",", "(", "traj1", ",", "traj2", ")", "in", "enumerate", "(", "_pairs", ")", "\n", "if", "_trackid", "[", "traj1", "]", "<", "0", "and", "_trackid", "[", "traj2", "]", "<", "0", "]", "\n", "_pairs", "=", "_pairs", "[", "test_inds", "]", "\n", "_feats", "=", "self", ".", "_feature_preprocess", "(", "_feats", "[", "test_inds", "]", ")", "\n", "\n", "index", ".", "append", "(", "_index", ")", "\n", "pairs", ".", "append", "(", "_pairs", ")", "\n", "feats", ".", "append", "(", "_feats", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "iou", ".", "append", "(", "_iou", ".", "tolist", "(", ")", ")", "\n", "trackid", ".", "append", "(", "_trackid", ")", "\n", "\n", "# index = np.concatenate(index)", "\n", "", "pairs", "=", "np", ".", "concatenate", "(", "pairs", ")", "\n", "feats", "=", "np", ".", "concatenate", "(", "feats", ")", "\n", "# iou = np.concatenate(iou)", "\n", "trackid", "=", "np", ".", "concatenate", "(", "trackid", ")", "\n", "return", "index", ",", "pairs", ",", "feats", ",", "iou", ",", "trackid", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess._data_sampling": [[142, 203], ["preprocess.Preprocess._extract_feature", "feats.astype.astype.astype", "dict", "dict", "len", "numpy.stack", "numpy.array().reshape", "itertools.product", "enumerate", "enumerate", "numpy.where", "numpy.where", "numpy.array", "feat_idx.append", "numpy.array().reshape.append", "lib.utils.miscellaneous.to_multi_onehot"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess._extract_feature", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.to_multi_onehot"], ["", "", "def", "_data_sampling", "(", "self", ",", "vid", ",", "fstart", ",", "fend", ",", "iou_thres", "=", "0.5", ")", ":", "\n", "\t\t", "pairs", ",", "feats", ",", "iou", ",", "trackid", "=", "self", ".", "_extract_feature", "(", "vid", ",", "fstart", ",", "fend", ")", "\n", "'''\n\t\tpairs = [[ 0  1]\n\t\t\t\t [ 0  2]\n\t\t\t\t [ 0  3]\n\t\t\t\t ...\n\t\t\t\t [69 66]\n\t\t\t\t [69 67]\n\t\t\t\t [69 68]] (4830, 2)\n\n\t\tfeats = [[6.02378805e-07 3.02198659e-05 9.47627029e-07 ... 0.00000000e+00\n\t\t\t\t  0.00000000e+00 0.00000000e+00]\n\t\t\t\t [6.02378805e-07 3.02198659e-05 9.47627029e-07 ... 0.00000000e+00\n\t\t\t\t  0.00000000e+00 0.00000000e+00]\n\t\t\t\t [6.02378805e-07 3.02198659e-05 9.47627029e-07 ... 0.00000000e+00\n\t\t\t\t  0.00000000e+00 0.00000000e+00]\n\t\t\t\t ...\n\t\t\t\t [3.13814926e-05 2.34911786e-05 2.29112455e-03 ... 0.00000000e+00\n\t\t\t\t  0.00000000e+00 0.00000000e+00]\n\t\t\t\t [3.13814926e-05 2.34911786e-05 2.29112455e-03 ... 0.00000000e+00\n\t\t\t\t  0.00000000e+00 0.00000000e+00]\n\t\t\t\t [3.13814926e-05 2.34911786e-05 2.29112455e-03 ... 0.00000000e+00\n\t\t\t\t  0.00000000e+00 0.00000000e+00]] (4830, 11070)\n\n\t\tiou =  [[0.99999976 0.10673315 0.         ... 0.         0.6488573  0.09914057]\n\t\t\t\t[0.10673315 0.9999998  0.         ... 0.         0.18019408 0.01014457]\n\t\t\t\t[0.         0.         1.0000001  ... 0.         0.         0.        ]\n\t\t\t\t...\n\t\t\t\t[0.         0.         0.         ... 0.9999999  0.         0.        ]\n\t\t\t\t[0.6488573  0.18019408 0.         ... 0.         1.         0.06941444]\n\t\t\t\t[0.09914057 0.01014457 0.         ... 0.         0.06941444 1.        ]] (70, 70)\n\n\t\ttrackid =  [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n\t\t\t\t\t-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n\t\t\t\t\t-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  1] (70,)\n\t\t'''", "\n", "feats", "=", "feats", ".", "astype", "(", "np", ".", "float32", ")", "\n", "pair_to_find", "=", "dict", "(", "[", "(", "(", "traj1", ",", "traj2", ")", ",", "find", ")", "\n", "for", "find", ",", "(", "traj1", ",", "traj2", ")", "in", "enumerate", "(", "pairs", ")", "]", ")", "\n", "tid_to_ind", "=", "dict", "(", "[", "(", "tid", ",", "ind", ")", "for", "ind", ",", "tid", "in", "enumerate", "(", "trackid", ")", "if", "tid", ">=", "0", "]", ")", "\n", "\n", "feat_idx", "=", "[", "]", "\n", "pred_id", "=", "[", "]", "\n", "for", "sub_tid", ",", "obj_tid", ",", "sub", ",", "pred", ",", "obj", "in", "self", ".", "short_rel_insts", "[", "(", "vid", ",", "fstart", ",", "fend", ")", "]", ":", "\n", "\t\t\t", "if", "sub_tid", "in", "tid_to_ind", "and", "obj_tid", "in", "tid_to_ind", ":", "\n", "\t\t\t\t", "iou1", "=", "iou", "[", ":", ",", "tid_to_ind", "[", "sub_tid", "]", "]", "\n", "iou2", "=", "iou", "[", ":", ",", "tid_to_ind", "[", "obj_tid", "]", "]", "\n", "pos_inds1", "=", "np", ".", "where", "(", "iou1", ">=", "iou_thres", ")", "[", "0", "]", "\n", "pos_inds2", "=", "np", ".", "where", "(", "iou2", ">=", "iou_thres", ")", "[", "0", "]", "\n", "\n", "for", "traj1", ",", "traj2", "in", "product", "(", "pos_inds1", ",", "pos_inds2", ")", ":", "\n", "\t\t\t\t\t", "if", "traj1", "!=", "traj2", ":", "\n", "\t\t\t\t\t\t", "feat_idx", ".", "append", "(", "pair_to_find", "[", "(", "traj1", ",", "traj2", ")", "]", ")", "\n", "pred_id", ".", "append", "(", "to_multi_onehot", "(", "pred", ",", "self", ".", "num_predicates", ")", ")", "\n", "\n", "", "", "", "", "if", "len", "(", "pred_id", ")", ">", "0", ":", "\n", "\t\t\t", "pred_id", "=", "np", ".", "stack", "(", "pred_id", ")", "\n", "", "else", ":", "\n", "\t\t\t", "pred_id", "=", "np", ".", "array", "(", "[", "]", ")", ".", "reshape", "(", "0", ",", "self", ".", "num_predicates", ")", "\n", "", "return", "feats", "[", "feat_idx", "]", ",", "pred_id", "# _feats, _pred_id", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess._extract_feature": [[204, 232], ["get_segment_signature", "get_feature_path", "os.path.join", "os.path.exists", "preprocess.Preprocess.logger.info", "preprocess.Preprocess.logger.info", "h5py.File"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.get_segment_signature", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.__init__.get_feature_path"], ["", "def", "_extract_feature", "(", "self", ",", "vid", ",", "fstart", ",", "fend", ",", "dry_run", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "\t\t", "vsig", "=", "get_segment_signature", "(", "vid", ",", "fstart", ",", "fend", ")", "\n", "# vid=ILSVRC2015_train_00005003, fstart=0000, fend=0030", "\n", "path", "=", "get_feature_path", "(", "'relation'", ",", "vid", ")", "\n", "# ./vidvrd-baseline-output/features/relation/ILSVRC2015_train_00005003", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'{}-{}.h5'", ".", "format", "(", "vsig", ",", "'relation'", ")", ")", "\n", "# ./vidvrd-baseline-output/features/relation/ILSVRC2015_train_00005003/ILSVRC2015_train_00005003-0000-0030-relation.h5", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "\t\t\t", "if", "dry_run", ":", "\n", "\t\t\t\t", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "", "else", ":", "\n", "\t\t\t\t", "if", "verbose", ":", "\n", "\t\t\t\t\t", "self", ".", "logger", ".", "info", "(", "'loading relation feature for video segment {}...'", ".", "format", "(", "vsig", ")", ")", "\n", "", "with", "h5py", ".", "File", "(", "path", ",", "'r'", ")", "as", "fin", ":", "\n", "# N object trajectory proposals, whose trackids are all -1", "\n", "# and M groundtruth object trajectories, whose trackids are provided by dataset", "\n", "\t\t\t\t\t", "trackid", "=", "fin", "[", "'trackid'", "]", "[", ":", "]", "\n", "# all possible pairs among N+M object trajectories", "\n", "pairs", "=", "fin", "[", "'pairs'", "]", "[", ":", "]", "\n", "# relation feature for each pair (in same order)", "\n", "feats", "=", "fin", "[", "'feats'", "]", "[", ":", "]", "\n", "# vIoU (traj_iou) for each pair (in same order)", "\n", "iou", "=", "fin", "[", "'iou'", "]", "[", ":", "]", "\n", "", "return", "pairs", ",", "feats", ",", "iou", ",", "trackid", "\n", "", "", "else", ":", "\n", "\t\t\t", "if", "verbose", ":", "\n", "\t\t\t\t", "self", ".", "logger", ".", "info", "(", "'no relation feature for video segment  {}'", ".", "format", "(", "vsig", ")", ")", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess._feature_preprocess": [[233, 257], ["lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize", "lib.utils.miscellaneous.normalize"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.miscellaneous.normalize"], ["", "def", "_feature_preprocess", "(", "self", ",", "feat", ")", ":", "\n", "# subject classeme + object classeme (70)", "\n", "# feat[:, 0: 70]", "\n", "\n", "# subject TrajectoryShape + HoG + HoF + MBH motion feature (8000)", "\n", "# (since this feature is Bag-of-Word type, we l1-normalize it so that", "\n", "# each element represents the fraction instead of count)", "\n", "\n", "\t\t", "feat", "[", ":", ",", "70", ":", "1070", "]", "=", "normalize", "(", "feat", "[", ":", ",", "70", ":", "1070", "]", ",", "axis", "=", "-", "1", ",", "order", "=", "1", ")", "\n", "feat", "[", ":", ",", "1070", ":", "2070", "]", "=", "normalize", "(", "feat", "[", ":", ",", "1070", ":", "2070", "]", ",", "axis", "=", "-", "1", ",", "order", "=", "1", ")", "\n", "feat", "[", ":", ",", "2070", ":", "3070", "]", "=", "normalize", "(", "feat", "[", ":", ",", "2070", ":", "3070", "]", ",", "axis", "=", "-", "1", ",", "order", "=", "1", ")", "\n", "feat", "[", ":", ",", "3070", ":", "4070", "]", "=", "normalize", "(", "feat", "[", ":", ",", "3070", ":", "4070", "]", ",", "axis", "=", "-", "1", ",", "order", "=", "1", ")", "\n", "\n", "# object TrajectoryShape + HoG + HoF + MBH motion feature", "\n", "feat", "[", ":", ",", "4070", ":", "5070", "]", "=", "normalize", "(", "feat", "[", ":", ",", "4070", ":", "5070", "]", ",", "axis", "=", "-", "1", ",", "order", "=", "1", ")", "\n", "feat", "[", ":", ",", "5070", ":", "6070", "]", "=", "normalize", "(", "feat", "[", ":", ",", "5070", ":", "6070", "]", ",", "axis", "=", "-", "1", ",", "order", "=", "1", ")", "\n", "feat", "[", ":", ",", "6070", ":", "7070", "]", "=", "normalize", "(", "feat", "[", ":", ",", "6070", ":", "7070", "]", ",", "axis", "=", "-", "1", ",", "order", "=", "1", ")", "\n", "feat", "[", ":", ",", "7070", ":", "8070", "]", "=", "normalize", "(", "feat", "[", ":", ",", "7070", ":", "8070", "]", ",", "axis", "=", "-", "1", ",", "order", "=", "1", ")", "\n", "\n", "# relative posititon + size + motion feature (3000)", "\n", "# feat[:, 8070: 9070]", "\n", "# feat[:, 9070: 10070]", "\n", "# feat[:, 10070: 11070]", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.preprocess_data": [[258, 266], ["preprocess.Preprocess", "Preprocess.preprocess", "Preprocess.preprocess"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess.preprocess", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deprecated.preprocess.Preprocess.preprocess"], ["", "", "def", "preprocess_data", "(", "cfg", ",", "dataset", ",", "logger", ")", ":", "\n", "\t", "processor", "=", "Preprocess", "(", "cfg", ",", "dataset", ",", "logger", ")", "\n", "if", "cfg", ".", "MODEL", ".", "PHASE", "==", "'train'", ":", "\n", "\t\t", "feats", ",", "pred_id", "=", "processor", ".", "preprocess", "(", ")", "\n", "return", "feats", ",", "pred_id", "\n", "", "elif", "cfg", ".", "MODEL", ".", "PHASE", "==", "'test'", ":", "\n", "\t\t", "index", ",", "pairs", ",", "feats", ",", "iou", ",", "trackid", "=", "processor", ".", "preprocess", "(", ")", "\n", "return", "index", ",", "pairs", ",", "feats", ",", "iou", ",", "trackid", "", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.detectron.vidor_anno_to_coco_format.vidor_to_coco_format": [[36, 72], ["os.listdir", "os.path.join", "os.listdir", "os.path.join", "enumerate", "open", "json.load", "os.path.join", "dataset_dicts.append", "os.path.join", "objs.append"], "function", ["None"], ["def", "vidor_to_coco_format", "(", "anno_dir", ",", "split", ")", ":", "\n", "\t", "dataset_dicts", "=", "[", "]", "\n", "for", "dirs", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "anno_dir", ",", "'annotation'", ",", "split", ")", ")", ":", "\n", "\t\t", "for", "files", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "anno_dir", ",", "'annotation'", ",", "split", ",", "dirs", ")", ")", ":", "\n", "\t\t\t", "with", "open", "(", "os", ".", "path", ".", "join", "(", "anno_dir", ",", "'annotation'", ",", "split", ",", "dirs", ",", "files", ")", ")", "as", "f", ":", "\n", "\t\t\t\t", "anno", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "tid_to_obj", "=", "{", "\n", "obj_tid", "[", "'tid'", "]", ":", "obj_tid", "[", "'category'", "]", "for", "obj_tid", "in", "anno", "[", "'subject/objects'", "]", "\n", "}", "\n", "\n", "record", "=", "{", "}", "\n", "record", "[", "'height'", "]", "=", "anno", "[", "'height'", "]", "\n", "record", "[", "'width'", "]", "=", "anno", "[", "'width'", "]", "\n", "\n", "for", "bbox_idx", ",", "bboxes", "in", "enumerate", "(", "anno", "[", "'trajectories'", "]", ")", ":", "\n", "\t\t\t\t", "record", "[", "'file_name'", "]", "=", "os", ".", "path", ".", "join", "(", "\n", "anno_dir", ",", "'image'", ",", "anno", "[", "'video_id'", "]", ",", "'{0:0=5d}.jpg'", ".", "format", "(", "bbox_idx", ")", "\n", ")", "\n", "record", "[", "'image_id'", "]", "=", "'{0:0=5d}'", ".", "format", "(", "bbox_idx", ")", "\n", "objs", "=", "[", "]", "\n", "for", "bbox", "in", "bboxes", ":", "\n", "\t\t\t\t\t", "obj", "=", "{", "\n", "'bbox'", ":", "[", "bbox", "[", "'bbox'", "]", "[", "'xmin'", "]", ",", "\n", "bbox", "[", "'bbox'", "]", "[", "'ymin'", "]", ",", "\n", "bbox", "[", "'bbox'", "]", "[", "'xmax'", "]", ",", "\n", "bbox", "[", "'bbox'", "]", "[", "'ymax'", "]", "]", ",", "\n", "'bbox_mode'", ":", "BoxMode", ".", "XYXY_ABS", ",", "\n", "'category_id'", ":", "vidor_obj_to_idx", "[", "tid_to_obj", "[", "bbox", "[", "'tid'", "]", "]", "]", "\n", "}", "\n", "objs", ".", "append", "(", "obj", ")", "\n", "\n", "", "record", "[", "'annotations'", "]", "=", "objs", "\n", "dataset_dicts", ".", "append", "(", "record", ")", "\n", "\n", "", "", "", "return", "dataset_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.detectron.train.Trainer.build_evaluator": [[52, 99], ["detectron2.evaluation.DatasetEvaluators", "os.path.join", "detectron2.data.MetadataCatalog.get", "evaluator_list.append", "evaluator_list.append", "evaluator_list.append", "detectron2.evaluation.CityscapesInstanceEvaluator", "detectron2.evaluation.CityscapesSemSegEvaluator", "len", "NotImplementedError", "detectron2.evaluation.SemSegEvaluator", "detectron2.evaluation.COCOEvaluator", "detectron2.evaluation.COCOPanopticEvaluator", "torch.cuda.device_count", "detectron2.get_rank", "torch.cuda.device_count", "detectron2.get_rank", "detectron2.evaluation.PascalVOCDetectionEvaluator", "len", "detectron2.evaluation.LVISEvaluator"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.get_rank", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.get_rank"], ["basedata", ",", "\n", "phase", "=", "phase", ",", "\n", "is_distributed", "=", "True", ",", "\n", "start_iter", "=", "0", "\n", ")", "\n", "\n", "optimizer", ",", "scheduler", "=", "build_optimizer_scheduler", "(", "\n", "cfg", ",", "\n", "model", "\n", ")", "\n", "\n", "max_iter", "=", "len", "(", "data_loader", ")", "\n", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "try", ":", "\n", "        ", "for", "iteration", ",", "(", "pair_list", ",", "target_list", ",", "index", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "data_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "pair_list", "=", "[", "plist", ".", "to", "(", "gpu", ")", "for", "plist", "in", "pair_list", "]", "\n", "target_list", "=", "[", "tlist", ".", "to", "(", "gpu", ")", "for", "tlist", "in", "target_list", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_dict", "=", "model", "(", "pair_list", ",", "target_list", ")", "# 64x132", "\n", "losses", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict", ".", "values", "(", ")", ")", "\n", "losses", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "# reduce losses over all GPUs for logging purposes", "\n", "loss_dict_reduced", "=", "loss_dict", "\n", "losses_reduced", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict_reduced", ".", "values", "(", ")", ")", "\n", "meters", ".", "update", "(", "loss", "=", "losses_reduced", ",", "**", "loss_dict_reduced", ")", "\n", "\n", "batch_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "meters", ".", "update", "(", "time", "=", "batch_time", ",", "data", "=", "data_time", ")", "\n", "\n", "eta_seconds", "=", "calculate_eta_iter", "(", "meters", ".", "time", ".", "global_avg", ",", "iteration", ",", "max_iter", ")", "\n", "eta_string", "=", "str", "(", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "\n", "if", "iteration", "%", "display_freq", "==", "0", "and", "is_main_process", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "'  '", ".", "join", "(", "\n", "[", "\n", "'[{iter}/{max_iter}]'", ",", "\n", "'{meters}'", ",", "\n", "'lr: {lr:.6f}'", ",", "\n", "'eta: {eta}'", ",", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.detectron.train.Trainer.test_with_TTA": [[100, 116], ["logging.getLogger", "logging.getLogger.info", "detectron2.modeling.GeneralizedRCNNWithTTA", "cls.test", "collections.OrderedDict", "cls.build_evaluator", "os.path.join", "collections.OrderedDict.items"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.detectron.train.Trainer.build_evaluator"], ["'max mem: {memory:.0f}'", ",", "\n", "]", "\n", ")", ".", "format", "(", "\n", "iter", "=", "iteration", "+", "1", ",", "\n", "max_iter", "=", "max_iter", ",", "\n", "meters", "=", "str", "(", "meters", ")", ",", "\n", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "eta", "=", "eta_string", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "1024.0", "/", "1024.0", ",", "\n", ")", "\n", ")", "\n", "\n", "", "if", "(", "iteration", "+", "1", ")", "%", "save_freq", "==", "0", "and", "is_main_process", "(", ")", ":", "\n", "                ", "cfg", ".", "ETC", ".", "MODEL_DUMP_FILE", "=", "'{}_weights_iter_{}.pt'", ".", "format", "(", "model_name", ",", "iteration", "+", "1", ")", "\n", "torch", ".", "save", "(", "{", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'loss'", ":", "meters", ".", "loss", ".", "global_avg", ",", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.detectron.train.setup": [[118, 128], ["detectron2.config.get_cfg", "detectron2.config.get_cfg.merge_from_file", "detectron2.config.get_cfg.merge_from_list", "detectron2.config.get_cfg.freeze", "detectron2.engine.default_setup"], "function", ["None"], ["os", ".", "path", ".", "join", "(", "get_model_path", "(", ")", ",", "cfg", ".", "ETC", ".", "MODEL_DUMP_FILE", ")", ")", "\n", "\n", "", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "logger", ".", "info", "(", "'Early Stop.'", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "is_main_process", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "# save model", "\n", "", "cfg", ".", "ETC", ".", "MODEL_DUMP_FILE", "=", "'{}_weights_iter_{}.pt'", ".", "format", "(", "model_name", ",", "max_iter", ")", "\n", "torch", ".", "save", "(", "{", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.detectron.train.main": [[130, 157], ["train.setup", "train.Trainer", "Trainer.resume_or_load", "Trainer.train", "Trainer.build_model", "detectron2.checkpoint.DetectionCheckpointer().resume_or_load", "Trainer.test", "detectron2.is_main_process", "Trainer.register_hooks", "Trainer.test.update", "detectron2.evaluation.verify_results", "detectron2.checkpoint.DetectionCheckpointer", "train.Trainer.test_with_TTA", "detectron2.engine.hooks.EvalHook", "train.Trainer.test_with_TTA"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.detectron.train.setup", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.modeling.train.train", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.utils.comm.is_main_process", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.update", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.detectron.train.Trainer.test_with_TTA", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.detectron.train.Trainer.test_with_TTA"], ["'loss'", ":", "meters", ".", "loss", ".", "global_avg", ",", "\n", "'iter'", ":", "max_iter", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "get_model_path", "(", ")", ",", "cfg", ".", "ETC", ".", "MODEL_DUMP_FILE", ")", ")", "\n", "\n", "# save settings", "\n", "with", "open", "(", "'configs/{}_config.yaml'", ".", "format", "(", "model_name", ")", ",", "'w'", ")", "as", "fout", ":", "\n", "            ", "yaml", ".", "dump", "(", "cfg", ",", "fout", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Training Finished Successfully.'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.detectron.vidvrd_anno_to_coco_format.vidvrd_to_coco_format": [[27, 64], ["os.walk", "os.path.join", "enumerate", "len", "enumerate", "open", "json.load", "os.path.join", "dataset_dicts.append", "os.path.join", "objs.append"], "function", ["None"], ["def", "vidvrd_to_coco_format", "(", "anno_dir", ",", "split", ")", ":", "\n", "\t", "dataset_dicts", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "anno_dir", ",", "split", ")", ")", ":", "\n", "\t\t", "assert", "len", "(", "files", ")", ">", "0", ",", "\"annotation files must be exist!\"", "\n", "for", "video_idx", ",", "file_name", "in", "enumerate", "(", "files", ")", ":", "\n", "\t\t\t", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file_name", ")", ")", "as", "f", ":", "\n", "\t\t\t\t", "anno", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "tid_to_obj", "=", "{", "\n", "obj_tid", "[", "'tid'", "]", ":", "obj_tid", "[", "'category'", "]", "for", "obj_tid", "in", "anno", "[", "'subject/objects'", "]", "\n", "}", "\n", "\n", "record", "=", "{", "}", "\n", "record", "[", "'height'", "]", "=", "anno", "[", "'height'", "]", "\n", "record", "[", "'width'", "]", "=", "anno", "[", "'width'", "]", "\n", "\n", "for", "bbox_idx", ",", "bboxes", "in", "enumerate", "(", "anno", "[", "'trajectories'", "]", ")", ":", "\n", "\t\t\t\t", "record", "[", "'file_name'", "]", "=", "os", ".", "path", ".", "join", "(", "\n", "anno_dir", ",", "'image'", ",", "anno", "[", "'video_id'", "]", ",", "'{0:0=5d}.jpg'", ".", "format", "(", "bbox_idx", ")", "\n", ")", "\n", "record", "[", "'image_id'", "]", "=", "'{0:0=5d}'", ".", "format", "(", "bbox_idx", ")", "\n", "objs", "=", "[", "]", "\n", "for", "bbox", "in", "bboxes", ":", "\n", "\t\t\t\t\t", "obj", "=", "{", "\n", "'bbox'", ":", "[", "bbox", "[", "'bbox'", "]", "[", "'xmin'", "]", ",", "\n", "bbox", "[", "'bbox'", "]", "[", "'ymin'", "]", ",", "\n", "bbox", "[", "'bbox'", "]", "[", "'xmax'", "]", ",", "\n", "bbox", "[", "'bbox'", "]", "[", "'ymax'", "]", "]", ",", "\n", "'bbox_mode'", ":", "BoxMode", ".", "XYXY_ABS", ",", "\n", "'category_id'", ":", "obj_to_idx", "[", "tid_to_obj", "[", "bbox", "[", "'tid'", "]", "]", "]", "\n", "}", "\n", "objs", ".", "append", "(", "obj", ")", "\n", "\n", "", "record", "[", "'annotations'", "]", "=", "objs", "\n", "dataset_dicts", ".", "append", "(", "record", ")", "\n", "\n", "", "", "", "return", "dataset_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.deep_sort_app.gather_sequence_info": [[17, 94], ["os.path.join", "os.path.join", "os.path.exists", "os.path.join", "os.path.exists", "int", "os.path.join", "numpy.load", "numpy.loadtxt", "len", "cv2.imread", "len", "min", "max", "int", "int", "os.path.basename", "os.listdir", "next", "image_filenames.keys", "image_filenames.keys", "detections[].min", "detections[].max", "open", "dict", "int", "os.path.splitext", "iter", "l.split", "image_filenames.values", "f.read().splitlines", "isinstance", "f.read", "len"], "function", ["None"], ["def", "gather_sequence_info", "(", "sequence_dir", ",", "detection_file", ")", ":", "\n", "    ", "\"\"\"Gather sequence information, such as image filenames, detections,\n    groundtruth (if available).\n\n    Parameters\n    ----------\n    sequence_dir : str\n        Path to the MOTChallenge sequence directory.\n    detection_file : str\n        Path to the detection file.\n\n    Returns\n    -------\n    Dict\n        A dictionary of the following sequence information:\n\n        * sequence_name: Name of the sequence\n        * image_filenames: A dictionary that maps frame indices to image\n          filenames.\n        * detections: A numpy array of detections in MOTChallenge format.\n        * groundtruth: A numpy array of ground truth in MOTChallenge format.\n        * image_size: Image size (height, width).\n        * min_frame_idx: Index of the first frame.\n        * max_frame_idx: Index of the last frame.\n\n    \"\"\"", "\n", "image_dir", "=", "os", ".", "path", ".", "join", "(", "sequence_dir", ",", "\"img1\"", ")", "\n", "image_filenames", "=", "{", "\n", "int", "(", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", ")", ":", "os", ".", "path", ".", "join", "(", "image_dir", ",", "f", ")", "\n", "for", "f", "in", "os", ".", "listdir", "(", "image_dir", ")", "}", "\n", "groundtruth_file", "=", "os", ".", "path", ".", "join", "(", "sequence_dir", ",", "\"gt/gt.txt\"", ")", "\n", "\n", "detections", "=", "None", "\n", "if", "detection_file", "is", "not", "None", ":", "\n", "        ", "detections", "=", "np", ".", "load", "(", "detection_file", ")", "\n", "", "groundtruth", "=", "None", "\n", "if", "os", ".", "path", ".", "exists", "(", "groundtruth_file", ")", ":", "\n", "        ", "groundtruth", "=", "np", ".", "loadtxt", "(", "groundtruth_file", ",", "delimiter", "=", "','", ")", "\n", "\n", "", "if", "len", "(", "image_filenames", ")", ">", "0", ":", "\n", "        ", "image", "=", "cv2", ".", "imread", "(", "next", "(", "iter", "(", "image_filenames", ".", "values", "(", ")", ")", ")", ",", "\n", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "image_size", "=", "image", ".", "shape", "\n", "", "else", ":", "\n", "        ", "image_size", "=", "None", "\n", "\n", "", "if", "len", "(", "image_filenames", ")", ">", "0", ":", "\n", "        ", "min_frame_idx", "=", "min", "(", "image_filenames", ".", "keys", "(", ")", ")", "\n", "max_frame_idx", "=", "max", "(", "image_filenames", ".", "keys", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "min_frame_idx", "=", "int", "(", "detections", "[", ":", ",", "0", "]", ".", "min", "(", ")", ")", "\n", "max_frame_idx", "=", "int", "(", "detections", "[", ":", ",", "0", "]", ".", "max", "(", ")", ")", "\n", "\n", "", "info_filename", "=", "os", ".", "path", ".", "join", "(", "sequence_dir", ",", "\"seqinfo.ini\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "info_filename", ")", ":", "\n", "        ", "with", "open", "(", "info_filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "line_splits", "=", "[", "l", ".", "split", "(", "'='", ")", "for", "l", "in", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "[", "1", ":", "]", "]", "\n", "info_dict", "=", "dict", "(", "\n", "s", "for", "s", "in", "line_splits", "if", "isinstance", "(", "s", ",", "list", ")", "and", "len", "(", "s", ")", "==", "2", ")", "\n", "\n", "", "update_ms", "=", "1000", "/", "int", "(", "info_dict", "[", "\"frameRate\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "update_ms", "=", "None", "\n", "\n", "", "feature_dim", "=", "detections", ".", "shape", "[", "1", "]", "-", "10", "if", "detections", "is", "not", "None", "else", "0", "\n", "seq_info", "=", "{", "\n", "\"sequence_name\"", ":", "os", ".", "path", ".", "basename", "(", "sequence_dir", ")", ",", "\n", "\"image_filenames\"", ":", "image_filenames", ",", "\n", "\"detections\"", ":", "detections", ",", "\n", "\"groundtruth\"", ":", "groundtruth", ",", "\n", "\"image_size\"", ":", "image_size", ",", "\n", "\"min_frame_idx\"", ":", "min_frame_idx", ",", "\n", "\"max_frame_idx\"", ":", "max_frame_idx", ",", "\n", "\"feature_dim\"", ":", "feature_dim", ",", "\n", "\"update_ms\"", ":", "update_ms", "\n", "}", "\n", "return", "seq_info", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.deep_sort_app.create_detections": [[96, 127], ["detection_mat[].astype", "detection_list.append", "deep_sort.detection.Detection"], "function", ["None"], ["", "def", "create_detections", "(", "detection_mat", ",", "frame_idx", ",", "min_height", "=", "0", ")", ":", "\n", "    ", "\"\"\"Create detections for given frame index from the raw detection matrix.\n\n    Parameters\n    ----------\n    detection_mat : ndarray\n        Matrix of detections. The first 10 columns of the detection matrix are\n        in the standard MOTChallenge detection format. In the remaining columns\n        store the feature vector associated with each detection.\n    frame_idx : int\n        The frame index.\n    min_height : Optional[int]\n        A minimum detection bounding box height. Detections that are smaller\n        than this value are disregarded.\n\n    Returns\n    -------\n    List[tracker.Detection]\n        Returns detection responses at given frame index.\n\n    \"\"\"", "\n", "frame_indices", "=", "detection_mat", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "mask", "=", "frame_indices", "==", "frame_idx", "\n", "\n", "detection_list", "=", "[", "]", "\n", "for", "row", "in", "detection_mat", "[", "mask", "]", ":", "\n", "        ", "bbox", ",", "confidence", ",", "feature", "=", "row", "[", "2", ":", "6", "]", ",", "row", "[", "6", "]", ",", "row", "[", "10", ":", "]", "\n", "if", "bbox", "[", "3", "]", "<", "min_height", ":", "\n", "            ", "continue", "\n", "", "detection_list", ".", "append", "(", "Detection", "(", "bbox", ",", "confidence", ",", "feature", ")", ")", "\n", "", "return", "detection_list", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.deep_sort_app.run": [[129, 213], ["deep_sort_app.gather_sequence_info", "deep_sort.nn_matching.NearestNeighborDistanceMetric", "deep_sort.tracker.Tracker", "visualization.NoVisualization.run", "open", "print", "deep_sort_app.create_detections", "numpy.array", "numpy.array", "application_util.preprocessing.non_max_suppression", "deep_sort.tracker.Tracker.predict", "deep_sort.tracker.Tracker.update", "application_util.visualization.Visualization", "application_util.visualization.NoVisualization", "print", "cv2.imread", "vis.set_image", "vis.draw_detections", "vis.draw_trackers", "track.to_tlwh", "results.append", "cv2.imread.copy", "track.is_confirmed"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.deep_sort_app.gather_sequence_info", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.Visualization.run", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.deep_sort_app.create_detections", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.preprocessing.non_max_suppression", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.predict", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.update", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.Visualization.set_image", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.Visualization.draw_detections", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.Visualization.draw_trackers", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.to_tlwh", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.is_confirmed"], ["", "def", "run", "(", "sequence_dir", ",", "detection_file", ",", "output_file", ",", "min_confidence", ",", "\n", "nms_max_overlap", ",", "min_detection_height", ",", "max_cosine_distance", ",", "\n", "nn_budget", ",", "display", ")", ":", "\n", "    ", "\"\"\"Run multi-target tracker on a particular sequence.\n\n    Parameters\n    ----------\n    sequence_dir : str\n        Path to the MOTChallenge sequence directory.\n    detection_file : str\n        Path to the detections file.\n    output_file : str\n        Path to the tracking output file. This file will contain the tracking\n        results on completion.\n    min_confidence : float\n        Detection confidence threshold. Disregard all detections that have\n        a confidence lower than this value.\n    nms_max_overlap: float\n        Maximum detection overlap (non-maxima suppression threshold).\n    min_detection_height : int\n        Detection height threshold. Disregard all detections that have\n        a height lower than this value.\n    max_cosine_distance : float\n        Gating threshold for cosine distance metric (object appearance).\n    nn_budget : Optional[int]\n        Maximum size of the appearance descriptor gallery. If None, no budget\n        is enforced.\n    display : bool\n        If True, show visualization of intermediate tracking results.\n\n    \"\"\"", "\n", "seq_info", "=", "gather_sequence_info", "(", "sequence_dir", ",", "detection_file", ")", "\n", "metric", "=", "nn_matching", ".", "NearestNeighborDistanceMetric", "(", "\n", "\"cosine\"", ",", "max_cosine_distance", ",", "nn_budget", ")", "\n", "tracker", "=", "Tracker", "(", "metric", ")", "\n", "results", "=", "[", "]", "\n", "\n", "def", "frame_callback", "(", "vis", ",", "frame_idx", ")", ":", "\n", "        ", "print", "(", "\"Processing frame %05d\"", "%", "frame_idx", ")", "\n", "\n", "# Load image and generate detections.", "\n", "detections", "=", "create_detections", "(", "\n", "seq_info", "[", "\"detections\"", "]", ",", "frame_idx", ",", "min_detection_height", ")", "\n", "detections", "=", "[", "d", "for", "d", "in", "detections", "if", "d", ".", "confidence", ">=", "min_confidence", "]", "\n", "\n", "# Run non-maxima suppression.", "\n", "boxes", "=", "np", ".", "array", "(", "[", "d", ".", "tlwh", "for", "d", "in", "detections", "]", ")", "\n", "scores", "=", "np", ".", "array", "(", "[", "d", ".", "confidence", "for", "d", "in", "detections", "]", ")", "\n", "indices", "=", "preprocessing", ".", "non_max_suppression", "(", "\n", "boxes", ",", "nms_max_overlap", ",", "scores", ")", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "\n", "# Update tracker.", "\n", "tracker", ".", "predict", "(", ")", "\n", "tracker", ".", "update", "(", "detections", ")", "\n", "\n", "# Update visualization.", "\n", "if", "display", ":", "\n", "            ", "image", "=", "cv2", ".", "imread", "(", "\n", "seq_info", "[", "\"image_filenames\"", "]", "[", "frame_idx", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "vis", ".", "set_image", "(", "image", ".", "copy", "(", ")", ")", "\n", "vis", ".", "draw_detections", "(", "detections", ")", "\n", "vis", ".", "draw_trackers", "(", "tracker", ".", "tracks", ")", "\n", "\n", "# Store results.", "\n", "", "for", "track", "in", "tracker", ".", "tracks", ":", "\n", "            ", "if", "not", "track", ".", "is_confirmed", "(", ")", "or", "track", ".", "time_since_update", ">", "1", ":", "\n", "                ", "continue", "\n", "", "bbox", "=", "track", ".", "to_tlwh", "(", ")", "\n", "results", ".", "append", "(", "[", "\n", "frame_idx", ",", "track", ".", "track_id", ",", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ",", "bbox", "[", "2", "]", ",", "bbox", "[", "3", "]", "]", ")", "\n", "\n", "# Run tracker.", "\n", "", "", "if", "display", ":", "\n", "        ", "visualizer", "=", "visualization", ".", "Visualization", "(", "seq_info", ",", "update_ms", "=", "5", ")", "\n", "", "else", ":", "\n", "        ", "visualizer", "=", "visualization", ".", "NoVisualization", "(", "seq_info", ")", "\n", "", "visualizer", ".", "run", "(", "frame_callback", ")", "\n", "\n", "# Store results.", "\n", "f", "=", "open", "(", "output_file", ",", "'w'", ")", "\n", "for", "row", "in", "results", ":", "\n", "        ", "print", "(", "'%d,%d,%.2f,%.2f,%.2f,%.2f,1,-1,-1,-1'", "%", "(", "\n", "row", "[", "0", "]", ",", "row", "[", "1", "]", ",", "row", "[", "2", "]", ",", "row", "[", "3", "]", ",", "row", "[", "4", "]", ",", "row", "[", "5", "]", ")", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.deep_sort_app.bool_string": [[215, 220], ["ValueError"], "function", ["None"], ["", "", "def", "bool_string", "(", "input_string", ")", ":", "\n", "    ", "if", "input_string", "not", "in", "{", "\"True\"", ",", "\"False\"", "}", ":", "\n", "        ", "raise", "ValueError", "(", "\"Please Enter a valid Ture/False choice\"", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "input_string", "==", "\"True\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.deep_sort_app.parse_args": [[221, 256], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\" Parse command line arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Deep SORT\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--sequence_dir\"", ",", "help", "=", "\"Path to MOTChallenge sequence directory\"", ",", "\n", "default", "=", "None", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--detection_file\"", ",", "help", "=", "\"Path to custom detections.\"", ",", "default", "=", "None", ",", "\n", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_file\"", ",", "help", "=", "\"Path to the tracking output file. This file will\"", "\n", "\" contain the tracking results on completion.\"", ",", "\n", "default", "=", "\"/tmp/hypotheses.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--min_confidence\"", ",", "help", "=", "\"Detection confidence threshold. Disregard \"", "\n", "\"all detections that have a confidence lower than this value.\"", ",", "\n", "default", "=", "0.8", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--min_detection_height\"", ",", "help", "=", "\"Threshold on the detection bounding \"", "\n", "\"box height. Detections with height smaller than this value are \"", "\n", "\"disregarded\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--nms_max_overlap\"", ",", "help", "=", "\"Non-maxima suppression threshold: Maximum \"", "\n", "\"detection overlap.\"", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max_cosine_distance\"", ",", "help", "=", "\"Gating threshold for cosine distance \"", "\n", "\"metric (object appearance).\"", ",", "type", "=", "float", ",", "default", "=", "0.2", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--nn_budget\"", ",", "help", "=", "\"Maximum size of the appearance descriptors \"", "\n", "\"gallery. If None, no budget is enforced.\"", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--display\"", ",", "help", "=", "\"Show intermediate tracking results\"", ",", "\n", "default", "=", "True", ",", "type", "=", "bool_string", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.evaluate_motchallenge.parse_args": [[7, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\" Parse command line arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"MOTChallenge evaluation\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mot_dir\"", ",", "help", "=", "\"Path to MOTChallenge directory (train or test)\"", ",", "\n", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--detection_dir\"", ",", "help", "=", "\"Path to detections.\"", ",", "default", "=", "\"detections\"", ",", "\n", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_dir\"", ",", "help", "=", "\"Folder in which the results will be stored. Will \"", "\n", "\"be created if it does not exist.\"", ",", "default", "=", "\"results\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--min_confidence\"", ",", "help", "=", "\"Detection confidence threshold. Disregard \"", "\n", "\"all detections that have a confidence lower than this value.\"", ",", "\n", "default", "=", "0.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--min_detection_height\"", ",", "help", "=", "\"Threshold on the detection bounding \"", "\n", "\"box height. Detections with height smaller than this value are \"", "\n", "\"disregarded\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--nms_max_overlap\"", ",", "help", "=", "\"Non-maxima suppression threshold: Maximum \"", "\n", "\"detection overlap.\"", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max_cosine_distance\"", ",", "help", "=", "\"Gating threshold for cosine distance \"", "\n", "\"metric (object appearance).\"", ",", "type", "=", "float", ",", "default", "=", "0.2", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--nn_budget\"", ",", "help", "=", "\"Maximum size of the appearance descriptors \"", "\n", "\"gallery. If None, no budget is enforced.\"", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.generate_videos.convert": [[7, 12], ["subprocess.call"], "function", ["None"], ["def", "convert", "(", "filename_in", ",", "filename_out", ",", "ffmpeg_executable", "=", "\"ffmpeg\"", ")", ":", "\n", "    ", "import", "subprocess", "\n", "command", "=", "[", "ffmpeg_executable", ",", "\"-i\"", ",", "filename_in", ",", "\"-c:v\"", ",", "\"libx264\"", ",", "\n", "\"-preset\"", ",", "\"slow\"", ",", "\"-crf\"", ",", "\"21\"", ",", "filename_out", "]", "\n", "subprocess", ".", "call", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.generate_videos.parse_args": [[14, 36], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\" Parse command line arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Siamese Tracking\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mot_dir\"", ",", "help", "=", "\"Path to MOTChallenge directory (train or test)\"", ",", "\n", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--result_dir\"", ",", "help", "=", "\"Path to the folder with tracking output.\"", ",", "\n", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_dir\"", ",", "help", "=", "\"Folder to store the videos in. Will be created \"", "\n", "\"if it does not exist.\"", ",", "\n", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--convert_h264\"", ",", "help", "=", "\"If true, convert videos to libx264 (requires \"", "\n", "\"FFMPEG\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--update_ms\"", ",", "help", "=", "\"Time between consecutive frames in milliseconds. \"", "\n", "\"Defaults to the frame_rate specified in seqinfo.ini, if available.\"", ",", "\n", "default", "=", "None", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.show_results.run": [[15, 81], ["deep_sort_app.gather_sequence_info", "numpy.loadtxt", "application_util.visualization.Visualization", "visualization.Visualization.run", "ValueError", "print", "cv2.imread", "vis.set_image", "results[].astype", "vis.draw_groundtruth", "visualization.Visualization.viewer.enable_videowriter", "cv2.imread.copy", "deep_sort_app.create_detections", "vis.draw_detections", "results[].astype", "groundtruth[].astype", "deep_sort.iou_matching.iou().max", "vis.viewer.rectangle", "deep_sort.iou_matching.iou", "box.astype"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.deep_sort_app.gather_sequence_info", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.Visualization.run", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.Visualization.set_image", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.Visualization.draw_groundtruth", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.enable_videowriter", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.deep_sort_app.create_detections", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.Visualization.draw_detections", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.rectangle", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.iou_matching.iou"], ["def", "run", "(", "sequence_dir", ",", "result_file", ",", "show_false_alarms", "=", "False", ",", "detection_file", "=", "None", ",", "\n", "update_ms", "=", "None", ",", "video_filename", "=", "None", ")", ":", "\n", "    ", "\"\"\"Run tracking result visualization.\n\n    Parameters\n    ----------\n    sequence_dir : str\n        Path to the MOTChallenge sequence directory.\n    result_file : str\n        Path to the tracking output file in MOTChallenge ground truth format.\n    show_false_alarms : Optional[bool]\n        If True, false alarms are highlighted as red boxes.\n    detection_file : Optional[str]\n        Path to the detection file.\n    update_ms : Optional[int]\n        Number of milliseconds between cosecutive frames. Defaults to (a) the\n        frame rate specifid in the seqinfo.ini file or DEFAULT_UDPATE_MS ms if\n        seqinfo.ini is not available.\n    video_filename : Optional[Str]\n        If not None, a video of the tracking results is written to this file.\n\n    \"\"\"", "\n", "seq_info", "=", "deep_sort_app", ".", "gather_sequence_info", "(", "sequence_dir", ",", "detection_file", ")", "\n", "results", "=", "np", ".", "loadtxt", "(", "result_file", ",", "delimiter", "=", "','", ")", "\n", "\n", "if", "show_false_alarms", "and", "seq_info", "[", "\"groundtruth\"", "]", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"No groundtruth available. Cannot show false alarms.\"", ")", "\n", "\n", "", "def", "frame_callback", "(", "vis", ",", "frame_idx", ")", ":", "\n", "        ", "print", "(", "\"Frame idx\"", ",", "frame_idx", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "\n", "seq_info", "[", "\"image_filenames\"", "]", "[", "frame_idx", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "\n", "vis", ".", "set_image", "(", "image", ".", "copy", "(", ")", ")", "\n", "\n", "if", "seq_info", "[", "\"detections\"", "]", "is", "not", "None", ":", "\n", "            ", "detections", "=", "deep_sort_app", ".", "create_detections", "(", "\n", "seq_info", "[", "\"detections\"", "]", ",", "frame_idx", ")", "\n", "vis", ".", "draw_detections", "(", "detections", ")", "\n", "\n", "", "mask", "=", "results", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "==", "frame_idx", "\n", "track_ids", "=", "results", "[", "mask", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "boxes", "=", "results", "[", "mask", ",", "2", ":", "6", "]", "\n", "vis", ".", "draw_groundtruth", "(", "track_ids", ",", "boxes", ")", "\n", "\n", "if", "show_false_alarms", ":", "\n", "            ", "groundtruth", "=", "seq_info", "[", "\"groundtruth\"", "]", "\n", "mask", "=", "groundtruth", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "==", "frame_idx", "\n", "gt_boxes", "=", "groundtruth", "[", "mask", ",", "2", ":", "6", "]", "\n", "for", "box", "in", "boxes", ":", "\n", "# NOTE(nwojke): This is not strictly correct, because we don't", "\n", "# solve the assignment problem here.", "\n", "                ", "min_iou_overlap", "=", "0.5", "\n", "if", "iou", "(", "box", ",", "gt_boxes", ")", ".", "max", "(", ")", "<", "min_iou_overlap", ":", "\n", "                    ", "vis", ".", "viewer", ".", "color", "=", "0", ",", "0", ",", "255", "\n", "vis", ".", "viewer", ".", "thickness", "=", "4", "\n", "vis", ".", "viewer", ".", "rectangle", "(", "*", "box", ".", "astype", "(", "np", ".", "int", ")", ")", "\n", "\n", "", "", "", "", "if", "update_ms", "is", "None", ":", "\n", "        ", "update_ms", "=", "seq_info", "[", "\"update_ms\"", "]", "\n", "", "if", "update_ms", "is", "None", ":", "\n", "        ", "update_ms", "=", "DEFAULT_UPDATE_MS", "\n", "", "visualizer", "=", "visualization", ".", "Visualization", "(", "seq_info", ",", "update_ms", ")", "\n", "if", "video_filename", "is", "not", "None", ":", "\n", "        ", "visualizer", ".", "viewer", ".", "enable_videowriter", "(", "video_filename", ")", "\n", "", "visualizer", ".", "run", "(", "frame_callback", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.show_results.parse_args": [[83, 107], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\" Parse command line arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Siamese Tracking\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--sequence_dir\"", ",", "help", "=", "\"Path to the MOTChallenge sequence directory.\"", ",", "\n", "default", "=", "None", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--result_file\"", ",", "help", "=", "\"Tracking output in MOTChallenge file format.\"", ",", "\n", "default", "=", "None", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--detection_file\"", ",", "help", "=", "\"Path to custom detections (optional).\"", ",", "\n", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--update_ms\"", ",", "help", "=", "\"Time between consecutive frames in milliseconds. \"", "\n", "\"Defaults to the frame_rate specified in seqinfo.ini, if available.\"", ",", "\n", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_file\"", ",", "help", "=", "\"Filename of the (optional) output video.\"", ",", "\n", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--show_false_alarms\"", ",", "help", "=", "\"Show false alarms as red bounding boxes.\"", ",", "\n", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.nn_matching.NearestNeighborDistanceMetric.__init__": [[123, 136], ["ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "metric", ",", "matching_threshold", ",", "budget", "=", "None", ")", ":", "\n", "\n", "\n", "        ", "if", "metric", "==", "\"euclidean\"", ":", "\n", "            ", "self", ".", "_metric", "=", "_nn_euclidean_distance", "\n", "", "elif", "metric", "==", "\"cosine\"", ":", "\n", "            ", "self", ".", "_metric", "=", "_nn_cosine_distance", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid metric; must be either 'euclidean' or 'cosine'\"", ")", "\n", "", "self", ".", "matching_threshold", "=", "matching_threshold", "\n", "self", ".", "budget", "=", "budget", "\n", "self", ".", "samples", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.nn_matching.NearestNeighborDistanceMetric.partial_fit": [[137, 155], ["zip", "nn_matching.NearestNeighborDistanceMetric.samples.setdefault().append", "nn_matching.NearestNeighborDistanceMetric.samples.setdefault"], "methods", ["None"], ["", "def", "partial_fit", "(", "self", ",", "features", ",", "targets", ",", "active_targets", ")", ":", "\n", "        ", "\"\"\"Update the distance metric with new data.\n\n        Parameters\n        ----------\n        features : ndarray\n            An NxM matrix of N features of dimensionality M.\n        targets : ndarray\n            An integer array of associated target identities.\n        active_targets : List[int]\n            A list of targets that are currently present in the scene.\n\n        \"\"\"", "\n", "for", "feature", ",", "target", "in", "zip", "(", "features", ",", "targets", ")", ":", "\n", "            ", "self", ".", "samples", ".", "setdefault", "(", "target", ",", "[", "]", ")", ".", "append", "(", "feature", ")", "\n", "if", "self", ".", "budget", "is", "not", "None", ":", "\n", "                ", "self", ".", "samples", "[", "target", "]", "=", "self", ".", "samples", "[", "target", "]", "[", "-", "self", ".", "budget", ":", "]", "\n", "", "", "self", ".", "samples", "=", "{", "k", ":", "self", ".", "samples", "[", "k", "]", "for", "k", "in", "active_targets", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.nn_matching.NearestNeighborDistanceMetric.distance": [[156, 178], ["numpy.zeros", "enumerate", "nn_matching.NearestNeighborDistanceMetric._metric", "len", "len"], "methods", ["None"], ["", "def", "distance", "(", "self", ",", "features", ",", "targets", ")", ":", "\n", "        ", "\"\"\"Compute distance between features and targets.\n\n        Parameters\n        ----------\n        features : ndarray\n            An NxM matrix of N features of dimensionality M.\n        targets : List[int]\n            A list of targets to match the given `features` against.\n\n        Returns\n        -------\n        ndarray\n            Returns a cost matrix of shape len(targets), len(features), where\n            element (i, j) contains the closest squared distance between\n            `targets[i]` and `features[j]`.\n\n        \"\"\"", "\n", "cost_matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "targets", ")", ",", "len", "(", "features", ")", ")", ")", "\n", "for", "i", ",", "target", "in", "enumerate", "(", "targets", ")", ":", "\n", "            ", "cost_matrix", "[", "i", ",", ":", "]", "=", "self", ".", "_metric", "(", "self", ".", "samples", "[", "target", "]", ",", "features", ")", "\n", "", "return", "cost_matrix", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.nn_matching._pdist": [[5, 29], ["numpy.clip", "numpy.asarray", "numpy.asarray", "numpy.zeros", "numpy.square().sum", "numpy.square().sum", "float", "len", "len", "len", "len", "numpy.square", "numpy.square", "numpy.dot"], "function", ["None"], ["def", "_pdist", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"Compute pair-wise squared distance between points in `a` and `b`.\n\n    Parameters\n    ----------\n    a : array_like\n        An NxM matrix of N samples of dimensionality M.\n    b : array_like\n        An LxM matrix of L samples of dimensionality M.\n\n    Returns\n    -------\n    ndarray\n        Returns a matrix of size len(a), len(b) such that eleement (i, j)\n        contains the squared distance between `a[i]` and `b[j]`.\n\n    \"\"\"", "\n", "a", ",", "b", "=", "np", ".", "asarray", "(", "a", ")", ",", "np", ".", "asarray", "(", "b", ")", "\n", "if", "len", "(", "a", ")", "==", "0", "or", "len", "(", "b", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "len", "(", "a", ")", ",", "len", "(", "b", ")", ")", ")", "\n", "", "a2", ",", "b2", "=", "np", ".", "square", "(", "a", ")", ".", "sum", "(", "axis", "=", "1", ")", ",", "np", ".", "square", "(", "b", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "r2", "=", "-", "2.", "*", "np", ".", "dot", "(", "a", ",", "b", ".", "T", ")", "+", "a2", "[", ":", ",", "None", "]", "+", "b2", "[", "None", ",", ":", "]", "\n", "r2", "=", "np", ".", "clip", "(", "r2", ",", "0.", ",", "float", "(", "np", ".", "inf", ")", ")", "\n", "return", "r2", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.nn_matching._cosine_distance": [[31, 55], ["numpy.dot", "numpy.asarray", "numpy.linalg.norm", "numpy.asarray", "numpy.linalg.norm"], "function", ["None"], ["", "def", "_cosine_distance", "(", "a", ",", "b", ",", "data_is_normalized", "=", "False", ")", ":", "\n", "    ", "\"\"\"Compute pair-wise cosine distance between points in `a` and `b`.\n\n    Parameters\n    ----------\n    a : array_like\n        An NxM matrix of N samples of dimensionality M.\n    b : array_like\n        An LxM matrix of L samples of dimensionality M.\n    data_is_normalized : Optional[bool]\n        If True, assumes rows in a and b are unit length vectors.\n        Otherwise, a and b are explicitly normalized to lenght 1.\n\n    Returns\n    -------\n    ndarray\n        Returns a matrix of size len(a), len(b) such that eleement (i, j)\n        contains the squared distance between `a[i]` and `b[j]`.\n\n    \"\"\"", "\n", "if", "not", "data_is_normalized", ":", "\n", "        ", "a", "=", "np", ".", "asarray", "(", "a", ")", "/", "np", ".", "linalg", ".", "norm", "(", "a", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "b", "=", "np", ".", "asarray", "(", "b", ")", "/", "np", ".", "linalg", ".", "norm", "(", "b", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "", "return", "1.", "-", "np", ".", "dot", "(", "a", ",", "b", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.nn_matching._nn_euclidean_distance": [[57, 76], ["nn_matching._pdist", "numpy.maximum", "_pdist.min"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.nn_matching._pdist"], ["", "def", "_nn_euclidean_distance", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\" Helper function for nearest neighbor distance metric (Euclidean).\n\n    Parameters\n    ----------\n    x : ndarray\n        A matrix of N row-vectors (sample points).\n    y : ndarray\n        A matrix of M row-vectors (query points).\n\n    Returns\n    -------\n    ndarray\n        A vector of length M that contains for each entry in `y` the\n        smallest Euclidean distance to a sample in `x`.\n\n    \"\"\"", "\n", "distances", "=", "_pdist", "(", "x", ",", "y", ")", "\n", "return", "np", ".", "maximum", "(", "0.0", ",", "distances", ".", "min", "(", "axis", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.nn_matching._nn_cosine_distance": [[78, 97], ["nn_matching._cosine_distance", "_cosine_distance.min"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.nn_matching._cosine_distance"], ["", "def", "_nn_cosine_distance", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\" Helper function for nearest neighbor distance metric (cosine).\n\n    Parameters\n    ----------\n    x : ndarray\n        A matrix of N row-vectors (sample points).\n    y : ndarray\n        A matrix of M row-vectors (query points).\n\n    Returns\n    -------\n    ndarray\n        A vector of length M that contains for each entry in `y` the\n        smallest cosine distance to a sample in `x`.\n\n    \"\"\"", "\n", "distances", "=", "_cosine_distance", "(", "x", ",", "y", ")", "\n", "return", "distances", ".", "min", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.kalman_filter.KalmanFilter.__init__": [[40, 54], ["numpy.eye", "range", "numpy.eye"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "ndim", ",", "dt", "=", "4", ",", "1.", "\n", "\n", "# Create Kalman filter model matrices.", "\n", "self", ".", "_motion_mat", "=", "np", ".", "eye", "(", "2", "*", "ndim", ",", "2", "*", "ndim", ")", "\n", "for", "i", "in", "range", "(", "ndim", ")", ":", "\n", "            ", "self", ".", "_motion_mat", "[", "i", ",", "ndim", "+", "i", "]", "=", "dt", "\n", "", "self", ".", "_update_mat", "=", "np", ".", "eye", "(", "ndim", ",", "2", "*", "ndim", ")", "\n", "\n", "# Motion and observation uncertainty are chosen relative to the current", "\n", "# state estimate. These weights control the amount of uncertainty in", "\n", "# the model. This is a bit hacky.", "\n", "self", ".", "_std_weight_position", "=", "1.", "/", "20", "\n", "self", ".", "_std_weight_velocity", "=", "1.", "/", "160", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.kalman_filter.KalmanFilter.initiate": [[55, 87], ["numpy.zeros_like", "numpy.diag", "numpy.square"], "methods", ["None"], ["", "def", "initiate", "(", "self", ",", "measurement", ")", ":", "\n", "        ", "\"\"\"Create track from unassociated measurement.\n\n        Parameters\n        ----------\n        measurement : ndarray\n            Bounding box coordinates (x, y, a, h) with center position (x, y),\n            aspect ratio a, and height h.\n\n        Returns\n        -------\n        (ndarray, ndarray)\n            Returns the mean vector (8 dimensional) and covariance matrix (8x8\n            dimensional) of the new track. Unobserved velocities are initialized\n            to 0 mean.\n\n        \"\"\"", "\n", "mean_pos", "=", "measurement", "\n", "mean_vel", "=", "np", ".", "zeros_like", "(", "mean_pos", ")", "\n", "mean", "=", "np", ".", "r_", "[", "mean_pos", ",", "mean_vel", "]", "\n", "\n", "std", "=", "[", "\n", "2", "*", "self", ".", "_std_weight_position", "*", "measurement", "[", "3", "]", ",", "\n", "2", "*", "self", ".", "_std_weight_position", "*", "measurement", "[", "3", "]", ",", "\n", "1e-2", ",", "\n", "2", "*", "self", ".", "_std_weight_position", "*", "measurement", "[", "3", "]", ",", "\n", "10", "*", "self", ".", "_std_weight_velocity", "*", "measurement", "[", "3", "]", ",", "\n", "10", "*", "self", ".", "_std_weight_velocity", "*", "measurement", "[", "3", "]", ",", "\n", "1e-5", ",", "\n", "10", "*", "self", ".", "_std_weight_velocity", "*", "measurement", "[", "3", "]", "]", "\n", "covariance", "=", "np", ".", "diag", "(", "np", ".", "square", "(", "std", ")", ")", "\n", "return", "mean", ",", "covariance", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.kalman_filter.KalmanFilter.predict": [[88, 124], ["numpy.diag", "numpy.dot", "numpy.square", "numpy.linalg.multi_dot"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "mean", ",", "covariance", ")", ":", "\n", "        ", "\"\"\"Run Kalman filter prediction step.\n\n        Parameters\n        ----------\n        mean : ndarray\n            The 8 dimensional mean vector of the object state at the previous\n            time step.\n        covariance : ndarray\n            The 8x8 dimensional covariance matrix of the object state at the\n            previous time step.\n\n        Returns\n        -------\n        (ndarray, ndarray)\n            Returns the mean vector and covariance matrix of the predicted\n            state. Unobserved velocities are initialized to 0 mean.\n\n        \"\"\"", "\n", "std_pos", "=", "[", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", "3", "]", ",", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", "3", "]", ",", "\n", "1e-2", ",", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", "3", "]", "]", "\n", "std_vel", "=", "[", "\n", "self", ".", "_std_weight_velocity", "*", "mean", "[", "3", "]", ",", "\n", "self", ".", "_std_weight_velocity", "*", "mean", "[", "3", "]", ",", "\n", "1e-5", ",", "\n", "self", ".", "_std_weight_velocity", "*", "mean", "[", "3", "]", "]", "\n", "motion_cov", "=", "np", ".", "diag", "(", "np", ".", "square", "(", "np", ".", "r_", "[", "std_pos", ",", "std_vel", "]", ")", ")", "\n", "\n", "mean", "=", "np", ".", "dot", "(", "self", ".", "_motion_mat", ",", "mean", ")", "\n", "covariance", "=", "np", ".", "linalg", ".", "multi_dot", "(", "(", "\n", "self", ".", "_motion_mat", ",", "covariance", ",", "self", ".", "_motion_mat", ".", "T", ")", ")", "+", "motion_cov", "\n", "\n", "return", "mean", ",", "covariance", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.kalman_filter.KalmanFilter.project": [[125, 153], ["numpy.diag", "numpy.dot", "numpy.linalg.multi_dot", "numpy.square"], "methods", ["None"], ["", "def", "project", "(", "self", ",", "mean", ",", "covariance", ")", ":", "\n", "        ", "\"\"\"Project state distribution to measurement space.\n\n        Parameters\n        ----------\n        mean : ndarray\n            The state's mean vector (8 dimensional array).\n        covariance : ndarray\n            The state's covariance matrix (8x8 dimensional).\n\n        Returns\n        -------\n        (ndarray, ndarray)\n            Returns the projected mean and covariance matrix of the given state\n            estimate.\n\n        \"\"\"", "\n", "std", "=", "[", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", "3", "]", ",", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", "3", "]", ",", "\n", "1e-1", ",", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", "3", "]", "]", "\n", "innovation_cov", "=", "np", ".", "diag", "(", "np", ".", "square", "(", "std", ")", ")", "\n", "\n", "mean", "=", "np", ".", "dot", "(", "self", ".", "_update_mat", ",", "mean", ")", "\n", "covariance", "=", "np", ".", "linalg", ".", "multi_dot", "(", "(", "\n", "self", ".", "_update_mat", ",", "covariance", ",", "self", ".", "_update_mat", ".", "T", ")", ")", "\n", "return", "mean", ",", "covariance", "+", "innovation_cov", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.kalman_filter.KalmanFilter.update": [[154, 187], ["kalman_filter.KalmanFilter.project", "scipy.linalg.cho_factor", "scipy.linalg.cho_solve", "numpy.dot", "numpy.linalg.multi_dot", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.kalman_filter.KalmanFilter.project"], ["", "def", "update", "(", "self", ",", "mean", ",", "covariance", ",", "measurement", ")", ":", "\n", "        ", "\"\"\"Run Kalman filter correction step.\n\n        Parameters\n        ----------\n        mean : ndarray\n            The predicted state's mean vector (8 dimensional).\n        covariance : ndarray\n            The state's covariance matrix (8x8 dimensional).\n        measurement : ndarray\n            The 4 dimensional measurement vector (x, y, a, h), where (x, y)\n            is the center position, a the aspect ratio, and h the height of the\n            bounding box.\n\n        Returns\n        -------\n        (ndarray, ndarray)\n            Returns the measurement-corrected state distribution.\n\n        \"\"\"", "\n", "projected_mean", ",", "projected_cov", "=", "self", ".", "project", "(", "mean", ",", "covariance", ")", "\n", "\n", "chol_factor", ",", "lower", "=", "scipy", ".", "linalg", ".", "cho_factor", "(", "\n", "projected_cov", ",", "lower", "=", "True", ",", "check_finite", "=", "False", ")", "\n", "kalman_gain", "=", "scipy", ".", "linalg", ".", "cho_solve", "(", "\n", "(", "chol_factor", ",", "lower", ")", ",", "np", ".", "dot", "(", "covariance", ",", "self", ".", "_update_mat", ".", "T", ")", ".", "T", ",", "\n", "check_finite", "=", "False", ")", ".", "T", "\n", "innovation", "=", "measurement", "-", "projected_mean", "\n", "\n", "new_mean", "=", "mean", "+", "np", ".", "dot", "(", "innovation", ",", "kalman_gain", ".", "T", ")", "\n", "new_covariance", "=", "covariance", "-", "np", ".", "linalg", ".", "multi_dot", "(", "(", "\n", "kalman_gain", ",", "projected_cov", ",", "kalman_gain", ".", "T", ")", ")", "\n", "return", "new_mean", ",", "new_covariance", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.kalman_filter.KalmanFilter.gating_distance": [[188, 230], ["kalman_filter.KalmanFilter.project", "numpy.linalg.cholesky", "scipy.linalg.solve_triangular", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.kalman_filter.KalmanFilter.project"], ["", "def", "gating_distance", "(", "self", ",", "mean", ",", "covariance", ",", "measurements", ",", "\n", "only_position", "=", "False", ")", ":", "\n", "        ", "\"\"\"Compute gating distance between state distribution and measurements.\n\n        A suitable distance threshold can be obtained from `chi2inv95`. If\n        `only_position` is False, the chi-square distribution has 4 degrees of\n        freedom, otherwise 2.\n\n        Parameters\n        ----------\n        mean : ndarray\n            Mean vector over the state distribution (8 dimensional).\n        covariance : ndarray\n            Covariance of the state distribution (8x8 dimensional).\n        measurements : ndarray\n            An Nx4 dimensional matrix of N measurements, each in\n            format (x, y, a, h) where (x, y) is the bounding box center\n            position, a the aspect ratio, and h the height.\n        only_position : Optional[bool]\n            If True, distance computation is done with respect to the bounding\n            box center position only.\n\n        Returns\n        -------\n        ndarray\n            Returns an array of length N, where the i-th element contains the\n            squared Mahalanobis distance between (mean, covariance) and\n            `measurements[i]`.\n\n        \"\"\"", "\n", "mean", ",", "covariance", "=", "self", ".", "project", "(", "mean", ",", "covariance", ")", "\n", "if", "only_position", ":", "\n", "            ", "mean", ",", "covariance", "=", "mean", "[", ":", "2", "]", ",", "covariance", "[", ":", "2", ",", ":", "2", "]", "\n", "measurements", "=", "measurements", "[", ":", ",", ":", "2", "]", "\n", "\n", "", "cholesky_factor", "=", "np", ".", "linalg", ".", "cholesky", "(", "covariance", ")", "\n", "d", "=", "measurements", "-", "mean", "\n", "z", "=", "scipy", ".", "linalg", ".", "solve_triangular", "(", "\n", "cholesky_factor", ",", "d", ".", "T", ",", "lower", "=", "True", ",", "check_finite", "=", "False", ",", "\n", "overwrite_b", "=", "True", ")", "\n", "squared_maha", "=", "np", ".", "sum", "(", "z", "*", "z", ",", "axis", "=", "0", ")", "\n", "return", "squared_maha", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.linear_assignment.min_cost_matching": [[12, 77], ["distance_metric", "scipy.optimize.linear_sum_assignment", "enumerate", "enumerate", "numpy.arange", "numpy.arange", "len", "len", "len", "len", "unmatched_detections.append", "unmatched_tracks.append", "unmatched_tracks.append", "unmatched_detections.append", "matches.append"], "function", ["None"], ["def", "min_cost_matching", "(", "\n", "distance_metric", ",", "max_distance", ",", "tracks", ",", "detections", ",", "track_indices", "=", "None", ",", "\n", "detection_indices", "=", "None", ")", ":", "\n", "    ", "\"\"\"Solve linear assignment problem.\n\n    Parameters\n    ----------\n    distance_metric : Callable[List[Track], List[Detection], List[int], List[int]) -> ndarray\n        The distance metric is given a list of tracks and detections as well as\n        a list of N track indices and M detection indices. The metric should\n        return the NxM dimensional cost matrix, where element (i, j) is the\n        association cost between the i-th track in the given track indices and\n        the j-th detection in the given detection_indices.\n    max_distance : float\n        Gating threshold. Associations with cost larger than this value are\n        disregarded.\n    tracks : List[track.Track]\n        A list of predicted tracks at the current time step.\n    detections : List[detection.Detection]\n        A list of detections at the current time step.\n    track_indices : List[int]\n        List of track indices that maps rows in `cost_matrix` to tracks in\n        `tracks` (see description above).\n    detection_indices : List[int]\n        List of detection indices that maps columns in `cost_matrix` to\n        detections in `detections` (see description above).\n\n    Returns\n    -------\n    (List[(int, int)], List[int], List[int])\n        Returns a tuple with the following three entries:\n        * A list of matched track and detection indices.\n        * A list of unmatched track indices.\n        * A list of unmatched detection indices.\n\n    \"\"\"", "\n", "if", "track_indices", "is", "None", ":", "\n", "        ", "track_indices", "=", "np", ".", "arange", "(", "len", "(", "tracks", ")", ")", "\n", "", "if", "detection_indices", "is", "None", ":", "\n", "        ", "detection_indices", "=", "np", ".", "arange", "(", "len", "(", "detections", ")", ")", "\n", "\n", "", "if", "len", "(", "detection_indices", ")", "==", "0", "or", "len", "(", "track_indices", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", ",", "track_indices", ",", "detection_indices", "# Nothing to match.", "\n", "\n", "", "cost_matrix", "=", "distance_metric", "(", "\n", "tracks", ",", "detections", ",", "track_indices", ",", "detection_indices", ")", "\n", "cost_matrix", "[", "cost_matrix", ">", "max_distance", "]", "=", "max_distance", "+", "1e-5", "\n", "indices", "=", "linear_assignment", "(", "cost_matrix", ")", "\n", "\n", "matches", ",", "unmatched_tracks", ",", "unmatched_detections", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "col", ",", "detection_idx", "in", "enumerate", "(", "detection_indices", ")", ":", "\n", "        ", "if", "col", "not", "in", "indices", "[", ":", ",", "1", "]", ":", "\n", "            ", "unmatched_detections", ".", "append", "(", "detection_idx", ")", "\n", "", "", "for", "row", ",", "track_idx", "in", "enumerate", "(", "track_indices", ")", ":", "\n", "        ", "if", "row", "not", "in", "indices", "[", ":", ",", "0", "]", ":", "\n", "            ", "unmatched_tracks", ".", "append", "(", "track_idx", ")", "\n", "", "", "for", "row", ",", "col", "in", "indices", ":", "\n", "        ", "track_idx", "=", "track_indices", "[", "row", "]", "\n", "detection_idx", "=", "detection_indices", "[", "col", "]", "\n", "if", "cost_matrix", "[", "row", ",", "col", "]", ">", "max_distance", ":", "\n", "            ", "unmatched_tracks", ".", "append", "(", "track_idx", ")", "\n", "unmatched_detections", ".", "append", "(", "detection_idx", ")", "\n", "", "else", ":", "\n", "            ", "matches", ".", "append", "(", "(", "track_idx", ",", "detection_idx", ")", ")", "\n", "", "", "return", "matches", ",", "unmatched_tracks", ",", "unmatched_detections", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.linear_assignment.matching_cascade": [[79, 143], ["range", "list", "list", "list", "linear_assignment.min_cost_matching", "range", "range", "len", "len", "set", "set", "len", "len"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.linear_assignment.min_cost_matching"], ["", "def", "matching_cascade", "(", "\n", "distance_metric", ",", "max_distance", ",", "cascade_depth", ",", "tracks", ",", "detections", ",", "\n", "track_indices", "=", "None", ",", "detection_indices", "=", "None", ")", ":", "\n", "    ", "\"\"\"Run matching cascade.\n\n    Parameters\n    ----------\n    distance_metric : Callable[List[Track], List[Detection], List[int], List[int]) -> ndarray\n        The distance metric is given a list of tracks and detections as well as\n        a list of N track indices and M detection indices. The metric should\n        return the NxM dimensional cost matrix, where element (i, j) is the\n        association cost between the i-th track in the given track indices and\n        the j-th detection in the given detection indices.\n    max_distance : float\n        Gating threshold. Associations with cost larger than this value are\n        disregarded.\n    cascade_depth: int\n        The cascade depth, should be se to the maximum track age.\n    tracks : List[track.Track]\n        A list of predicted tracks at the current time step.\n    detections : List[detection.Detection]\n        A list of detections at the current time step.\n    track_indices : Optional[List[int]]\n        List of track indices that maps rows in `cost_matrix` to tracks in\n        `tracks` (see description above). Defaults to all tracks.\n    detection_indices : Optional[List[int]]\n        List of detection indices that maps columns in `cost_matrix` to\n        detections in `detections` (see description above). Defaults to all\n        detections.\n\n    Returns\n    -------\n    (List[(int, int)], List[int], List[int])\n        Returns a tuple with the following three entries:\n        * A list of matched track and detection indices.\n        * A list of unmatched track indices.\n        * A list of unmatched detection indices.\n\n    \"\"\"", "\n", "if", "track_indices", "is", "None", ":", "\n", "        ", "track_indices", "=", "list", "(", "range", "(", "len", "(", "tracks", ")", ")", ")", "\n", "", "if", "detection_indices", "is", "None", ":", "\n", "        ", "detection_indices", "=", "list", "(", "range", "(", "len", "(", "detections", ")", ")", ")", "\n", "\n", "", "unmatched_detections", "=", "detection_indices", "\n", "matches", "=", "[", "]", "\n", "for", "level", "in", "range", "(", "cascade_depth", ")", ":", "\n", "        ", "if", "len", "(", "unmatched_detections", ")", "==", "0", ":", "# No detections left", "\n", "            ", "break", "\n", "\n", "", "track_indices_l", "=", "[", "\n", "k", "for", "k", "in", "track_indices", "\n", "if", "tracks", "[", "k", "]", ".", "time_since_update", "==", "1", "+", "level", "\n", "]", "\n", "if", "len", "(", "track_indices_l", ")", "==", "0", ":", "# Nothing to match at this level", "\n", "            ", "continue", "\n", "\n", "", "matches_l", ",", "_", ",", "unmatched_detections", "=", "min_cost_matching", "(", "\n", "distance_metric", ",", "max_distance", ",", "tracks", ",", "detections", ",", "\n", "track_indices_l", ",", "unmatched_detections", ")", "\n", "matches", "+=", "matches_l", "\n", "", "unmatched_tracks", "=", "list", "(", "set", "(", "track_indices", ")", "-", "set", "(", "k", "for", "k", ",", "_", "in", "matches", ")", ")", "\n", "return", "matches", ",", "unmatched_tracks", ",", "unmatched_detections", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.linear_assignment.gate_cost_matrix": [[145, 192], ["numpy.asarray", "enumerate", "kf.gating_distance", "detections[].to_xyah"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.kalman_filter.KalmanFilter.gating_distance", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.detection.Detection.to_xyah"], ["", "def", "gate_cost_matrix", "(", "\n", "kf", ",", "cost_matrix", ",", "tracks", ",", "detections", ",", "track_indices", ",", "detection_indices", ",", "\n", "gated_cost", "=", "INFTY_COST", ",", "only_position", "=", "False", ")", ":", "\n", "    ", "\"\"\"Invalidate infeasible entries in cost matrix based on the state\n    distributions obtained by Kalman filtering.\n\n    Parameters\n    ----------\n    kf : The Kalman filter.\n    cost_matrix : ndarray\n        The NxM dimensional cost matrix, where N is the number of track indices\n        and M is the number of detection indices, such that entry (i, j) is the\n        association cost between `tracks[track_indices[i]]` and\n        `detections[detection_indices[j]]`.\n    tracks : List[track.Track]\n        A list of predicted tracks at the current time step.\n    detections : List[detection.Detection]\n        A list of detections at the current time step.\n    track_indices : List[int]\n        List of track indices that maps rows in `cost_matrix` to tracks in\n        `tracks` (see description above).\n    detection_indices : List[int]\n        List of detection indices that maps columns in `cost_matrix` to\n        detections in `detections` (see description above).\n    gated_cost : Optional[float]\n        Entries in the cost matrix corresponding to infeasible associations are\n        set this value. Defaults to a very large value.\n    only_position : Optional[bool]\n        If True, only the x, y position of the state distribution is considered\n        during gating. Defaults to False.\n\n    Returns\n    -------\n    ndarray\n        Returns the modified cost matrix.\n\n    \"\"\"", "\n", "gating_dim", "=", "2", "if", "only_position", "else", "4", "\n", "gating_threshold", "=", "kalman_filter", ".", "chi2inv95", "[", "gating_dim", "]", "\n", "measurements", "=", "np", ".", "asarray", "(", "\n", "[", "detections", "[", "i", "]", ".", "to_xyah", "(", ")", "for", "i", "in", "detection_indices", "]", ")", "\n", "for", "row", ",", "track_idx", "in", "enumerate", "(", "track_indices", ")", ":", "\n", "        ", "track", "=", "tracks", "[", "track_idx", "]", "\n", "gating_distance", "=", "kf", ".", "gating_distance", "(", "\n", "track", ".", "mean", ",", "track", ".", "covariance", ",", "measurements", ",", "only_position", ")", "\n", "cost_matrix", "[", "row", ",", "gating_distance", ">", "gating_threshold", "]", "=", "gated_cost", "\n", "", "return", "cost_matrix", "\n", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.tracker.Tracker.__init__": [[40, 49], ["kalman_filter.KalmanFilter"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "metric", ",", "max_iou_distance", "=", "0.7", ",", "max_age", "=", "30", ",", "n_init", "=", "3", ")", ":", "\n", "        ", "self", ".", "metric", "=", "metric", "\n", "self", ".", "max_iou_distance", "=", "max_iou_distance", "\n", "self", ".", "max_age", "=", "max_age", "\n", "self", ".", "n_init", "=", "n_init", "\n", "\n", "self", ".", "kf", "=", "kalman_filter", ".", "KalmanFilter", "(", ")", "\n", "self", ".", "tracks", "=", "[", "]", "\n", "self", ".", "_next_id", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.tracker.Tracker.predict": [[50, 57], ["track.predict"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.predict"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Propagate track state distributions one time step forward.\n\n        This function should be called once every time step, before `update`.\n        \"\"\"", "\n", "for", "track", "in", "self", ".", "tracks", ":", "\n", "            ", "track", ".", "predict", "(", "self", ".", "kf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.tracker.Tracker.update": [[58, 92], ["tracker.Tracker._match", "tracker.Tracker.metric.partial_fit", "tracker.Tracker.tracks[].update", "tracker.Tracker.tracks[].mark_missed", "tracker.Tracker._initiate_track", "numpy.asarray", "numpy.asarray", "t.is_confirmed", "track.is_confirmed", "t.is_deleted"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.tracker.Tracker._match", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.nn_matching.NearestNeighborDistanceMetric.partial_fit", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.update", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.mark_missed", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.tracker.Tracker._initiate_track", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.is_confirmed", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.is_confirmed", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.is_deleted"], ["", "", "def", "update", "(", "self", ",", "detections", ")", ":", "\n", "        ", "\"\"\"Perform measurement update and track management.\n\n        Parameters\n        ----------\n        detections : List[deep_sort.detection.Detection]\n            A list of detections at the current time step.\n\n        \"\"\"", "\n", "# Run matching cascade.", "\n", "matches", ",", "unmatched_tracks", ",", "unmatched_detections", "=", "self", ".", "_match", "(", "detections", ")", "\n", "\n", "# Update track set.", "\n", "for", "track_idx", ",", "detection_idx", "in", "matches", ":", "\n", "            ", "self", ".", "tracks", "[", "track_idx", "]", ".", "update", "(", "\n", "self", ".", "kf", ",", "detections", "[", "detection_idx", "]", ")", "\n", "", "for", "track_idx", "in", "unmatched_tracks", ":", "\n", "            ", "self", ".", "tracks", "[", "track_idx", "]", ".", "mark_missed", "(", ")", "\n", "", "for", "detection_idx", "in", "unmatched_detections", ":", "\n", "            ", "self", ".", "_initiate_track", "(", "detections", "[", "detection_idx", "]", ")", "\n", "", "self", ".", "tracks", "=", "[", "t", "for", "t", "in", "self", ".", "tracks", "if", "not", "t", ".", "is_deleted", "(", ")", "]", "\n", "\n", "# Update distance metric.", "\n", "active_targets", "=", "[", "t", ".", "track_id", "for", "t", "in", "self", ".", "tracks", "if", "t", ".", "is_confirmed", "(", ")", "]", "\n", "features", ",", "targets", "=", "[", "]", ",", "[", "]", "\n", "for", "track", "in", "self", ".", "tracks", ":", "\n", "            ", "if", "not", "track", ".", "is_confirmed", "(", ")", ":", "\n", "                ", "continue", "\n", "", "features", "+=", "track", ".", "features", "\n", "targets", "+=", "[", "track", ".", "track_id", "for", "_", "in", "track", ".", "features", "]", "\n", "track", ".", "features", "=", "[", "]", "\n", "", "self", ".", "metric", ".", "partial_fit", "(", "\n", "np", ".", "asarray", "(", "features", ")", ",", "np", ".", "asarray", "(", "targets", ")", ",", "active_targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.tracker.Tracker._match": [[93, 132], ["linear_assignment.matching_cascade", "linear_assignment.min_cost_matching", "list", "numpy.array", "numpy.array", "tracker.Tracker.metric.distance", "linear_assignment.gate_cost_matrix", "set", "enumerate", "t.is_confirmed", "enumerate", "t.is_confirmed"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.linear_assignment.matching_cascade", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.linear_assignment.min_cost_matching", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.nn_matching.NearestNeighborDistanceMetric.distance", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.linear_assignment.gate_cost_matrix", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.is_confirmed", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.is_confirmed"], ["", "def", "_match", "(", "self", ",", "detections", ")", ":", "\n", "\n", "        ", "def", "gated_metric", "(", "tracks", ",", "dets", ",", "track_indices", ",", "detection_indices", ")", ":", "\n", "            ", "features", "=", "np", ".", "array", "(", "[", "dets", "[", "i", "]", ".", "feature", "for", "i", "in", "detection_indices", "]", ")", "\n", "targets", "=", "np", ".", "array", "(", "[", "tracks", "[", "i", "]", ".", "track_id", "for", "i", "in", "track_indices", "]", ")", "\n", "cost_matrix", "=", "self", ".", "metric", ".", "distance", "(", "features", ",", "targets", ")", "\n", "cost_matrix", "=", "linear_assignment", ".", "gate_cost_matrix", "(", "\n", "self", ".", "kf", ",", "cost_matrix", ",", "tracks", ",", "dets", ",", "track_indices", ",", "\n", "detection_indices", ")", "\n", "\n", "return", "cost_matrix", "\n", "\n", "# Split track set into confirmed and unconfirmed tracks.", "\n", "", "confirmed_tracks", "=", "[", "\n", "i", "for", "i", ",", "t", "in", "enumerate", "(", "self", ".", "tracks", ")", "if", "t", ".", "is_confirmed", "(", ")", "]", "\n", "unconfirmed_tracks", "=", "[", "\n", "i", "for", "i", ",", "t", "in", "enumerate", "(", "self", ".", "tracks", ")", "if", "not", "t", ".", "is_confirmed", "(", ")", "]", "\n", "\n", "# Associate confirmed tracks using appearance features.", "\n", "matches_a", ",", "unmatched_tracks_a", ",", "unmatched_detections", "=", "linear_assignment", ".", "matching_cascade", "(", "\n", "gated_metric", ",", "self", ".", "metric", ".", "matching_threshold", ",", "self", ".", "max_age", ",", "\n", "self", ".", "tracks", ",", "detections", ",", "confirmed_tracks", ")", "\n", "\n", "# Associate remaining tracks together with unconfirmed tracks using IOU.", "\n", "iou_track_candidates", "=", "unconfirmed_tracks", "+", "[", "\n", "k", "for", "k", "in", "unmatched_tracks_a", "if", "\n", "self", ".", "tracks", "[", "k", "]", ".", "time_since_update", "==", "1", "]", "\n", "unmatched_tracks_a", "=", "[", "\n", "k", "for", "k", "in", "unmatched_tracks_a", "if", "\n", "self", ".", "tracks", "[", "k", "]", ".", "time_since_update", "!=", "1", "]", "\n", "matches_b", ",", "unmatched_tracks_b", ",", "unmatched_detections", "=", "linear_assignment", ".", "min_cost_matching", "(", "\n", "iou_matching", ".", "iou_cost", ",", "self", ".", "max_iou_distance", ",", "self", ".", "tracks", ",", "\n", "detections", ",", "iou_track_candidates", ",", "unmatched_detections", ")", "\n", "\n", "matches", "=", "matches_a", "+", "matches_b", "\n", "unmatched_tracks", "=", "list", "(", "set", "(", "unmatched_tracks_a", "+", "unmatched_tracks_b", ")", ")", "\n", "return", "matches", ",", "unmatched_tracks", ",", "unmatched_detections", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.tracker.Tracker._initiate_track": [[133, 139], ["tracker.Tracker.kf.initiate", "tracker.Tracker.tracks.append", "detection.to_xyah", "track.Track"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.kalman_filter.KalmanFilter.initiate", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.detection.Detection.to_xyah"], ["", "def", "_initiate_track", "(", "self", ",", "detection", ")", ":", "\n", "        ", "mean", ",", "covariance", "=", "self", ".", "kf", ".", "initiate", "(", "detection", ".", "to_xyah", "(", ")", ")", "\n", "self", ".", "tracks", ".", "append", "(", "Track", "(", "\n", "mean", ",", "covariance", ",", "self", ".", "_next_id", ",", "self", ".", "n_init", ",", "self", ".", "max_age", ",", "\n", "detection", ".", "feature", ")", ")", "\n", "self", ".", "_next_id", "+=", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.detection.Detection.__init__": [[29, 33], ["numpy.asarray", "float", "numpy.asarray"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tlwh", ",", "confidence", ",", "feature", ")", ":", "\n", "        ", "self", ".", "tlwh", "=", "np", ".", "asarray", "(", "tlwh", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "confidence", "=", "float", "(", "confidence", ")", "\n", "self", ".", "feature", "=", "np", ".", "asarray", "(", "feature", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.detection.Detection.to_tlbr": [[34, 41], ["detection.Detection.tlwh.copy"], "methods", ["None"], ["", "def", "to_tlbr", "(", "self", ")", ":", "\n", "        ", "\"\"\"Convert bounding box to format `(min x, min y, max x, max y)`, i.e.,\n        `(top left, bottom right)`.\n        \"\"\"", "\n", "ret", "=", "self", ".", "tlwh", ".", "copy", "(", ")", "\n", "ret", "[", "2", ":", "]", "+=", "ret", "[", ":", "2", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.detection.Detection.to_xyah": [[42, 50], ["detection.Detection.tlwh.copy"], "methods", ["None"], ["", "def", "to_xyah", "(", "self", ")", ":", "\n", "        ", "\"\"\"Convert bounding box to format `(center x, center y, aspect ratio,\n        height)`, where the aspect ratio is `width / height`.\n        \"\"\"", "\n", "ret", "=", "self", ".", "tlwh", ".", "copy", "(", ")", "\n", "ret", "[", ":", "2", "]", "+=", "ret", "[", "2", ":", "]", "/", "2", "\n", "ret", "[", "2", "]", "/=", "ret", "[", "3", "]", "\n", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.__init__": [[66, 82], ["track.Track.features.append"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "covariance", ",", "track_id", ",", "n_init", ",", "max_age", ",", "\n", "feature", "=", "None", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "covariance", "=", "covariance", "\n", "self", ".", "track_id", "=", "track_id", "\n", "self", ".", "hits", "=", "1", "\n", "self", ".", "age", "=", "1", "\n", "self", ".", "time_since_update", "=", "0", "\n", "\n", "self", ".", "state", "=", "TrackState", ".", "Tentative", "\n", "self", ".", "features", "=", "[", "]", "\n", "if", "feature", "is", "not", "None", ":", "\n", "            ", "self", ".", "features", ".", "append", "(", "feature", ")", "\n", "\n", "", "self", ".", "_n_init", "=", "n_init", "\n", "self", ".", "_max_age", "=", "max_age", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.to_tlwh": [[83, 97], ["track.Track.mean[].copy"], "methods", ["None"], ["", "def", "to_tlwh", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get current position in bounding box format `(top left x, top left y,\n        width, height)`.\n\n        Returns\n        -------\n        ndarray\n            The bounding box.\n\n        \"\"\"", "\n", "ret", "=", "self", ".", "mean", "[", ":", "4", "]", ".", "copy", "(", ")", "\n", "ret", "[", "2", "]", "*=", "ret", "[", "3", "]", "\n", "ret", "[", ":", "2", "]", "-=", "ret", "[", "2", ":", "]", "/", "2", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.to_tlbr": [[98, 111], ["track.Track.to_tlwh"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.to_tlwh"], ["", "def", "to_tlbr", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get current position in bounding box format `(min x, miny, max x,\n        max y)`.\n\n        Returns\n        -------\n        ndarray\n            The bounding box.\n\n        \"\"\"", "\n", "ret", "=", "self", ".", "to_tlwh", "(", ")", "\n", "ret", "[", "2", ":", "]", "=", "ret", "[", ":", "2", "]", "+", "ret", "[", "2", ":", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.predict": [[112, 125], ["kf.predict"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.predict"], ["", "def", "predict", "(", "self", ",", "kf", ")", ":", "\n", "        ", "\"\"\"Propagate the state distribution to the current time step using a\n        Kalman filter prediction step.\n\n        Parameters\n        ----------\n        kf : kalman_filter.KalmanFilter\n            The Kalman filter.\n\n        \"\"\"", "\n", "self", ".", "mean", ",", "self", ".", "covariance", "=", "kf", ".", "predict", "(", "self", ".", "mean", ",", "self", ".", "covariance", ")", "\n", "self", ".", "age", "+=", "1", "\n", "self", ".", "time_since_update", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.update": [[126, 146], ["kf.update", "track.Track.features.append", "detection.to_xyah"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.update", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.detection.Detection.to_xyah"], ["", "def", "update", "(", "self", ",", "kf", ",", "detection", ")", ":", "\n", "        ", "\"\"\"Perform Kalman filter measurement update step and update the feature\n        cache.\n\n        Parameters\n        ----------\n        kf : kalman_filter.KalmanFilter\n            The Kalman filter.\n        detection : Detection\n            The associated detection.\n\n        \"\"\"", "\n", "self", ".", "mean", ",", "self", ".", "covariance", "=", "kf", ".", "update", "(", "\n", "self", ".", "mean", ",", "self", ".", "covariance", ",", "detection", ".", "to_xyah", "(", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "detection", ".", "feature", ")", "\n", "\n", "self", ".", "hits", "+=", "1", "\n", "self", ".", "time_since_update", "=", "0", "\n", "if", "self", ".", "state", "==", "TrackState", ".", "Tentative", "and", "self", ".", "hits", ">=", "self", ".", "_n_init", ":", "\n", "            ", "self", ".", "state", "=", "TrackState", ".", "Confirmed", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.mark_missed": [[147, 154], ["None"], "methods", ["None"], ["", "", "def", "mark_missed", "(", "self", ")", ":", "\n", "        ", "\"\"\"Mark this track as missed (no association at the current time step).\n        \"\"\"", "\n", "if", "self", ".", "state", "==", "TrackState", ".", "Tentative", ":", "\n", "            ", "self", ".", "state", "=", "TrackState", ".", "Deleted", "\n", "", "elif", "self", ".", "time_since_update", ">", "self", ".", "_max_age", ":", "\n", "            ", "self", ".", "state", "=", "TrackState", ".", "Deleted", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.is_tentative": [[155, 159], ["None"], "methods", ["None"], ["", "", "def", "is_tentative", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns True if this track is tentative (unconfirmed).\n        \"\"\"", "\n", "return", "self", ".", "state", "==", "TrackState", ".", "Tentative", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.is_confirmed": [[160, 163], ["None"], "methods", ["None"], ["", "def", "is_confirmed", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns True if this track is confirmed.\"\"\"", "\n", "return", "self", ".", "state", "==", "TrackState", ".", "Confirmed", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.is_deleted": [[164, 167], ["None"], "methods", ["None"], ["", "def", "is_deleted", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns True if this track is dead and should be deleted.\"\"\"", "\n", "return", "self", ".", "state", "==", "TrackState", ".", "Deleted", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.iou_matching.iou": [[7, 40], ["numpy.maximum", "np.maximum.prod", "bbox[].prod", "candidates[].prod", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum"], "function", ["None"], ["def", "iou", "(", "bbox", ",", "candidates", ")", ":", "\n", "    ", "\"\"\"Computer intersection over union.\n\n    Parameters\n    ----------\n    bbox : ndarray\n        A bounding box in format `(top left x, top left y, width, height)`.\n    candidates : ndarray\n        A matrix of candidate bounding boxes (one per row) in the same format\n        as `bbox`.\n\n    Returns\n    -------\n    ndarray\n        The intersection over union in [0, 1] between the `bbox` and each\n        candidate. A higher score means a larger fraction of the `bbox` is\n        occluded by the candidate.\n\n    \"\"\"", "\n", "bbox_tl", ",", "bbox_br", "=", "bbox", "[", ":", "2", "]", ",", "bbox", "[", ":", "2", "]", "+", "bbox", "[", "2", ":", "]", "\n", "candidates_tl", "=", "candidates", "[", ":", ",", ":", "2", "]", "\n", "candidates_br", "=", "candidates", "[", ":", ",", ":", "2", "]", "+", "candidates", "[", ":", ",", "2", ":", "]", "\n", "\n", "tl", "=", "np", ".", "c_", "[", "np", ".", "maximum", "(", "bbox_tl", "[", "0", "]", ",", "candidates_tl", "[", ":", ",", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ",", "\n", "np", ".", "maximum", "(", "bbox_tl", "[", "1", "]", ",", "candidates_tl", "[", ":", ",", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", "]", "\n", "br", "=", "np", ".", "c_", "[", "np", ".", "minimum", "(", "bbox_br", "[", "0", "]", ",", "candidates_br", "[", ":", ",", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ",", "\n", "np", ".", "minimum", "(", "bbox_br", "[", "1", "]", ",", "candidates_br", "[", ":", ",", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", "]", "\n", "wh", "=", "np", ".", "maximum", "(", "0.", ",", "br", "-", "tl", ")", "\n", "\n", "area_intersection", "=", "wh", ".", "prod", "(", "axis", "=", "1", ")", "\n", "area_bbox", "=", "bbox", "[", "2", ":", "]", ".", "prod", "(", ")", "\n", "area_candidates", "=", "candidates", "[", ":", ",", "2", ":", "]", ".", "prod", "(", "axis", "=", "1", ")", "\n", "return", "area_intersection", "/", "(", "area_bbox", "+", "area_candidates", "-", "area_intersection", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.iou_matching.iou_cost": [[42, 82], ["numpy.zeros", "enumerate", "numpy.arange", "numpy.arange", "tracks[].to_tlwh", "numpy.asarray", "len", "len", "len", "len", "iou_matching.iou"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.to_tlwh", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.iou_matching.iou"], ["", "def", "iou_cost", "(", "tracks", ",", "detections", ",", "track_indices", "=", "None", ",", "\n", "detection_indices", "=", "None", ")", ":", "\n", "    ", "\"\"\"An intersection over union distance metric.\n\n    Parameters\n    ----------\n    tracks : List[deep_sort.track.Track]\n        A list of tracks.\n    detections : List[deep_sort.detection.Detection]\n        A list of detections.\n    track_indices : Optional[List[int]]\n        A list of indices to tracks that should be matched. Defaults to\n        all `tracks`.\n    detection_indices : Optional[List[int]]\n        A list of indices to detections that should be matched. Defaults\n        to all `detections`.\n\n    Returns\n    -------\n    ndarray\n        Returns a cost matrix of shape\n        len(track_indices), len(detection_indices) where entry (i, j) is\n        `1 - iou(tracks[track_indices[i]], detections[detection_indices[j]])`.\n\n    \"\"\"", "\n", "if", "track_indices", "is", "None", ":", "\n", "        ", "track_indices", "=", "np", ".", "arange", "(", "len", "(", "tracks", ")", ")", "\n", "", "if", "detection_indices", "is", "None", ":", "\n", "        ", "detection_indices", "=", "np", ".", "arange", "(", "len", "(", "detections", ")", ")", "\n", "\n", "", "cost_matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "track_indices", ")", ",", "len", "(", "detection_indices", ")", ")", ")", "\n", "for", "row", ",", "track_idx", "in", "enumerate", "(", "track_indices", ")", ":", "\n", "        ", "if", "tracks", "[", "track_idx", "]", ".", "time_since_update", ">", "1", ":", "\n", "            ", "cost_matrix", "[", "row", ",", ":", "]", "=", "linear_assignment", ".", "INFTY_COST", "\n", "continue", "\n", "\n", "", "bbox", "=", "tracks", "[", "track_idx", "]", ".", "to_tlwh", "(", ")", "\n", "candidates", "=", "np", ".", "asarray", "(", "[", "detections", "[", "i", "]", ".", "tlwh", "for", "i", "in", "detection_indices", "]", ")", "\n", "cost_matrix", "[", "row", ",", ":", "]", "=", "1.", "-", "iou", "(", "bbox", ",", "candidates", ")", "\n", "", "return", "cost_matrix", "\n", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.__init__": [[101, 113], ["numpy.zeros"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "update_ms", ",", "window_shape", "=", "(", "640", ",", "480", ")", ",", "caption", "=", "\"Figure 1\"", ")", ":", "\n", "        ", "self", ".", "_window_shape", "=", "window_shape", "\n", "self", ".", "_caption", "=", "caption", "\n", "self", ".", "_update_ms", "=", "update_ms", "\n", "self", ".", "_video_writer", "=", "None", "\n", "self", ".", "_user_fun", "=", "lambda", ":", "None", "\n", "self", ".", "_terminate", "=", "False", "\n", "\n", "self", ".", "image", "=", "np", ".", "zeros", "(", "self", ".", "_window_shape", "+", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "self", ".", "_color", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "self", ".", "text_color", "=", "(", "255", ",", "255", ",", "255", ")", "\n", "self", ".", "thickness", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.color": [[118, 123], ["tuple", "len", "ValueError", "int"], "methods", ["None"], ["", "@", "color", ".", "setter", "\n", "def", "color", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "len", "(", "value", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"color must be tuple of 3\"", ")", "\n", "", "self", ".", "_color", "=", "tuple", "(", "int", "(", "c", ")", "for", "c", "in", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.rectangle": [[124, 155], ["cv2.rectangle", "int", "int", "int", "int", "cv2.getTextSize", "cv2.rectangle", "cv2.putText"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.rectangle", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.rectangle"], ["", "def", "rectangle", "(", "self", ",", "x", ",", "y", ",", "w", ",", "h", ",", "label", "=", "None", ")", ":", "\n", "        ", "\"\"\"Draw a rectangle.\n\n        Parameters\n        ----------\n        x : float | int\n            Top left corner of the rectangle (x-axis).\n        y : float | int\n            Top let corner of the rectangle (y-axis).\n        w : float | int\n            Width of the rectangle.\n        h : float | int\n            Height of the rectangle.\n        label : Optional[str]\n            A text label that is placed at the top left corner of the\n            rectangle.\n\n        \"\"\"", "\n", "pt1", "=", "int", "(", "x", ")", ",", "int", "(", "y", ")", "\n", "pt2", "=", "int", "(", "x", "+", "w", ")", ",", "int", "(", "y", "+", "h", ")", "\n", "cv2", ".", "rectangle", "(", "self", ".", "image", ",", "pt1", ",", "pt2", ",", "self", ".", "_color", ",", "self", ".", "thickness", ")", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "text_size", "=", "cv2", ".", "getTextSize", "(", "\n", "label", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "1", ",", "self", ".", "thickness", ")", "\n", "\n", "center", "=", "pt1", "[", "0", "]", "+", "5", ",", "pt1", "[", "1", "]", "+", "5", "+", "text_size", "[", "0", "]", "[", "1", "]", "\n", "pt2", "=", "pt1", "[", "0", "]", "+", "10", "+", "text_size", "[", "0", "]", "[", "0", "]", ",", "pt1", "[", "1", "]", "+", "10", "+", "text_size", "[", "0", "]", "[", "1", "]", "\n", "cv2", ".", "rectangle", "(", "self", ".", "image", ",", "pt1", ",", "pt2", ",", "self", ".", "_color", ",", "-", "1", ")", "\n", "cv2", ".", "putText", "(", "self", ".", "image", ",", "label", ",", "center", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "\n", "1", ",", "(", "255", ",", "255", ",", "255", ")", ",", "self", ".", "thickness", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.circle": [[156, 185], ["int", "image_viewer.view_roi", "cv2.circle", "int", "int", "int", "int", "image_viewer.is_in_bounds", "int", "cv2.putText"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.view_roi", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.circle", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.is_in_bounds"], ["", "", "def", "circle", "(", "self", ",", "x", ",", "y", ",", "radius", ",", "label", "=", "None", ")", ":", "\n", "        ", "\"\"\"Draw a circle.\n\n        Parameters\n        ----------\n        x : float | int\n            Center of the circle (x-axis).\n        y : float | int\n            Center of the circle (y-axis).\n        radius : float | int\n            Radius of the circle in pixels.\n        label : Optional[str]\n            A text label that is placed at the center of the circle.\n\n        \"\"\"", "\n", "image_size", "=", "int", "(", "radius", "+", "self", ".", "thickness", "+", "1.5", ")", "# actually half size", "\n", "roi", "=", "int", "(", "x", "-", "image_size", ")", ",", "int", "(", "y", "-", "image_size", ")", ",", "int", "(", "2", "*", "image_size", ")", ",", "int", "(", "2", "*", "image_size", ")", "\n", "if", "not", "is_in_bounds", "(", "self", ".", "image", ",", "roi", ")", ":", "\n", "            ", "return", "\n", "\n", "", "image", "=", "view_roi", "(", "self", ".", "image", ",", "roi", ")", "\n", "center", "=", "image", ".", "shape", "[", "1", "]", "//", "2", ",", "image", ".", "shape", "[", "0", "]", "//", "2", "\n", "cv2", ".", "circle", "(", "\n", "image", ",", "center", ",", "int", "(", "radius", "+", ".5", ")", ",", "self", ".", "_color", ",", "self", ".", "thickness", ")", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "cv2", ".", "putText", "(", "\n", "self", ".", "image", ",", "label", ",", "center", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "\n", "2", ",", "self", ".", "text_color", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.gaussian": [[186, 212], ["numpy.linalg.eigh", "int", "cv2.ellipse", "vals.argsort", "numpy.sqrt", "int", "int", "int", "int", "cv2.putText", "numpy.arctan2"], "methods", ["None"], ["", "", "def", "gaussian", "(", "self", ",", "mean", ",", "covariance", ",", "label", "=", "None", ")", ":", "\n", "        ", "\"\"\"Draw 95% confidence ellipse of a 2-D Gaussian distribution.\n\n        Parameters\n        ----------\n        mean : array_like\n            The mean vector of the Gaussian distribution (ndim=1).\n        covariance : array_like\n            The 2x2 covariance matrix of the Gaussian distribution.\n        label : Optional[str]\n            A text label that is placed at the center of the ellipse.\n\n        \"\"\"", "\n", "# chi2inv(0.95, 2) = 5.9915", "\n", "vals", ",", "vecs", "=", "np", ".", "linalg", ".", "eigh", "(", "5.9915", "*", "covariance", ")", "\n", "indices", "=", "vals", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "vals", ",", "vecs", "=", "np", ".", "sqrt", "(", "vals", "[", "indices", "]", ")", ",", "vecs", "[", ":", ",", "indices", "]", "\n", "\n", "center", "=", "int", "(", "mean", "[", "0", "]", "+", ".5", ")", ",", "int", "(", "mean", "[", "1", "]", "+", ".5", ")", "\n", "axes", "=", "int", "(", "vals", "[", "0", "]", "+", ".5", ")", ",", "int", "(", "vals", "[", "1", "]", "+", ".5", ")", "\n", "angle", "=", "int", "(", "180.", "*", "np", ".", "arctan2", "(", "vecs", "[", "1", ",", "0", "]", ",", "vecs", "[", "0", ",", "0", "]", ")", "/", "np", ".", "pi", ")", "\n", "cv2", ".", "ellipse", "(", "\n", "self", ".", "image", ",", "center", ",", "axes", ",", "angle", ",", "0", ",", "360", ",", "self", ".", "_color", ",", "2", ")", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "cv2", ".", "putText", "(", "self", ".", "image", ",", "label", ",", "center", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "\n", "2", ",", "self", ".", "text_color", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.annotate": [[213, 228], ["cv2.putText", "int", "int"], "methods", ["None"], ["", "", "def", "annotate", "(", "self", ",", "x", ",", "y", ",", "text", ")", ":", "\n", "        ", "\"\"\"Draws a text string at a given location.\n\n        Parameters\n        ----------\n        x : int | float\n            Bottom-left corner of the text in the image (x-axis).\n        y : int | float\n            Bottom-left corner of the text in the image (y-axis).\n        text : str\n            The text to be drawn.\n\n        \"\"\"", "\n", "cv2", ".", "putText", "(", "self", ".", "image", ",", "text", ",", "(", "int", "(", "x", ")", ",", "int", "(", "y", ")", ")", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "\n", "2", ",", "self", ".", "text_color", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.colored_points": [[229, 257], ["numpy.logical_and.reduce", "numpy.repeat().reshape", "len", "numpy.repeat", "len"], "methods", ["None"], ["", "def", "colored_points", "(", "self", ",", "points", ",", "colors", "=", "None", ",", "skip_index_check", "=", "False", ")", ":", "\n", "        ", "\"\"\"Draw a collection of points.\n\n        The point size is fixed to 1.\n\n        Parameters\n        ----------\n        points : ndarray\n            The Nx2 array of image locations, where the first dimension is\n            the x-coordinate and the second dimension is the y-coordinate.\n        colors : Optional[ndarray]\n            The Nx3 array of colors (dtype=np.uint8). If None, the current\n            color attribute is used.\n        skip_index_check : Optional[bool]\n            If True, index range checks are skipped. This is faster, but\n            requires all points to lie within the image dimensions.\n\n        \"\"\"", "\n", "if", "not", "skip_index_check", ":", "\n", "            ", "cond1", ",", "cond2", "=", "points", "[", ":", ",", "0", "]", ">=", "0", ",", "points", "[", ":", ",", "0", "]", "<", "480", "\n", "cond3", ",", "cond4", "=", "points", "[", ":", ",", "1", "]", ">=", "0", ",", "points", "[", ":", ",", "1", "]", "<", "640", "\n", "indices", "=", "np", ".", "logical_and", ".", "reduce", "(", "(", "cond1", ",", "cond2", ",", "cond3", ",", "cond4", ")", ")", "\n", "points", "=", "points", "[", "indices", ",", ":", "]", "\n", "", "if", "colors", "is", "None", ":", "\n", "            ", "colors", "=", "np", ".", "repeat", "(", "\n", "self", ".", "_color", ",", "len", "(", "points", ")", ")", ".", "reshape", "(", "3", ",", "len", "(", "points", ")", ")", ".", "T", "\n", "", "indices", "=", "(", "points", "+", ".5", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "self", ".", "image", "[", "indices", "[", ":", ",", "1", "]", ",", "indices", "[", ":", ",", "0", "]", ",", ":", "]", "=", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.enable_videowriter": [[258, 279], ["cv2.VideoWriter_fourcc", "cv2.VideoWriter", "int"], "methods", ["None"], ["", "def", "enable_videowriter", "(", "self", ",", "output_filename", ",", "fourcc_string", "=", "\"MJPG\"", ",", "\n", "fps", "=", "None", ")", ":", "\n", "        ", "\"\"\" Write images to video file.\n\n        Parameters\n        ----------\n        output_filename : str\n            Output filename.\n        fourcc_string : str\n            The OpenCV FOURCC code that defines the video codec (check OpenCV\n            documentation for more information).\n        fps : Optional[float]\n            Frames per second. If None, configured according to current\n            parameters.\n\n        \"\"\"", "\n", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "fourcc_string", ")", "\n", "if", "fps", "is", "None", ":", "\n", "            ", "fps", "=", "int", "(", "1000.", "/", "self", ".", "_update_ms", ")", "\n", "", "self", ".", "_video_writer", "=", "cv2", ".", "VideoWriter", "(", "\n", "output_filename", ",", "fourcc", ",", "fps", ",", "self", ".", "_window_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.disable_videowriter": [[280, 284], ["None"], "methods", ["None"], ["", "def", "disable_videowriter", "(", "self", ")", ":", "\n", "        ", "\"\"\" Disable writing videos.\n        \"\"\"", "\n", "self", ".", "_video_writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.run": [[285, 334], ["cv2.destroyWindow", "cv2.waitKey", "cv2.imshow", "time.time", "time.time", "max", "cv2.imshow", "cv2.waitKey", "int", "cv2.resize", "print", "image_viewer.ImageViewer._user_fun", "image_viewer.ImageViewer._video_writer.write", "print", "cv2.resize", "print", "str", "image_viewer.ImageViewer._user_fun"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "update_fun", "=", "None", ")", ":", "\n", "        ", "\"\"\"Start the image viewer.\n\n        This method blocks until the user requests to close the window.\n\n        Parameters\n        ----------\n        update_fun : Optional[Callable[] -> None]\n            An optional callable that is invoked at each frame. May be used\n            to play an animation/a video sequence.\n\n        \"\"\"", "\n", "if", "update_fun", "is", "not", "None", ":", "\n", "            ", "self", ".", "_user_fun", "=", "update_fun", "\n", "\n", "", "self", ".", "_terminate", ",", "is_paused", "=", "False", ",", "False", "\n", "# print(\"ImageViewer is paused, press space to start.\")", "\n", "while", "not", "self", ".", "_terminate", ":", "\n", "            ", "t0", "=", "time", ".", "time", "(", ")", "\n", "if", "not", "is_paused", ":", "\n", "                ", "self", ".", "_terminate", "=", "not", "self", ".", "_user_fun", "(", ")", "\n", "if", "self", ".", "_video_writer", "is", "not", "None", ":", "\n", "                    ", "self", ".", "_video_writer", ".", "write", "(", "\n", "cv2", ".", "resize", "(", "self", ".", "image", ",", "self", ".", "_window_shape", ")", ")", "\n", "", "", "t1", "=", "time", ".", "time", "(", ")", "\n", "remaining_time", "=", "max", "(", "1", ",", "int", "(", "self", ".", "_update_ms", "-", "1e3", "*", "(", "t1", "-", "t0", ")", ")", ")", "\n", "cv2", ".", "imshow", "(", "\n", "self", ".", "_caption", ",", "cv2", ".", "resize", "(", "self", ".", "image", ",", "self", ".", "_window_shape", "[", ":", "2", "]", ")", ")", "\n", "key", "=", "cv2", ".", "waitKey", "(", "remaining_time", ")", "\n", "if", "key", "&", "255", "==", "27", ":", "# ESC", "\n", "                ", "print", "(", "\"terminating\"", ")", "\n", "self", ".", "_terminate", "=", "True", "\n", "", "elif", "key", "&", "255", "==", "32", ":", "# ' '", "\n", "                ", "print", "(", "\"toggeling pause: \"", "+", "str", "(", "not", "is_paused", ")", ")", "\n", "is_paused", "=", "not", "is_paused", "\n", "", "elif", "key", "&", "255", "==", "115", ":", "# 's'", "\n", "                ", "print", "(", "\"stepping\"", ")", "\n", "self", ".", "_terminate", "=", "not", "self", ".", "_user_fun", "(", ")", "\n", "is_paused", "=", "True", "\n", "\n", "# Due to a bug in OpenCV we must call imshow after destroying the", "\n", "# window. This will make the window appear again as soon as waitKey", "\n", "# is called.", "\n", "#", "\n", "# see https://github.com/Itseez/opencv/issues/4535", "\n", "", "", "self", ".", "image", "[", ":", "]", "=", "0", "\n", "cv2", ".", "destroyWindow", "(", "self", ".", "_caption", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "cv2", ".", "imshow", "(", "self", ".", "_caption", ",", "self", ".", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.stop": [[335, 346], ["None"], "methods", ["None"], ["", "def", "stop", "(", "self", ")", ":", "\n", "        ", "\"\"\"Stop the control loop.\n\n        After calling this method, the viewer will stop execution before the\n        next frame and hand over control flow to the user.\n\n        Parameters\n        ----------\n\n        \"\"\"", "\n", "self", ".", "_terminate", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.is_in_bounds": [[10, 32], ["None"], "function", ["None"], ["def", "is_in_bounds", "(", "mat", ",", "roi", ")", ":", "\n", "    ", "\"\"\"Check if ROI is fully contained in the image.\n\n    Parameters\n    ----------\n    mat : ndarray\n        An ndarray of ndim>=2.\n    roi : (int, int, int, int)\n        Region of interest (x, y, width, height) where (x, y) is the top-left\n        corner.\n\n    Returns\n    -------\n    bool\n        Returns true if the ROI is contain in mat.\n\n    \"\"\"", "\n", "if", "roi", "[", "0", "]", "<", "0", "or", "roi", "[", "0", "]", "+", "roi", "[", "2", "]", ">=", "mat", ".", "shape", "[", "1", "]", ":", "\n", "        ", "return", "False", "\n", "", "if", "roi", "[", "1", "]", "<", "0", "or", "roi", "[", "1", "]", "+", "roi", "[", "3", "]", ">=", "mat", ".", "shape", "[", "0", "]", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.view_roi": [[34, 59], ["None"], "function", ["None"], ["", "def", "view_roi", "(", "mat", ",", "roi", ")", ":", "\n", "    ", "\"\"\"Get sub-array.\n\n    The ROI must be valid, i.e., fully contained in the image.\n\n    Parameters\n    ----------\n    mat : ndarray\n        An ndarray of ndim=2 or ndim=3.\n    roi : (int, int, int, int)\n        Region of interest (x, y, width, height) where (x, y) is the top-left\n        corner.\n\n    Returns\n    -------\n    ndarray\n        A view of the roi.\n\n    \"\"\"", "\n", "sx", ",", "ex", "=", "roi", "[", "0", "]", ",", "roi", "[", "0", "]", "+", "roi", "[", "2", "]", "\n", "sy", ",", "ey", "=", "roi", "[", "1", "]", ",", "roi", "[", "1", "]", "+", "roi", "[", "3", "]", "\n", "if", "mat", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "mat", "[", "sy", ":", "ey", ",", "sx", ":", "ex", "]", "\n", "", "else", ":", "\n", "        ", "return", "mat", "[", "sy", ":", "ey", ",", "sx", ":", "ex", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.NoVisualization.__init__": [[62, 65], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "seq_info", ")", ":", "\n", "        ", "self", ".", "frame_idx", "=", "seq_info", "[", "\"min_frame_idx\"", "]", "\n", "self", ".", "last_idx", "=", "seq_info", "[", "\"max_frame_idx\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.NoVisualization.set_image": [[66, 68], ["None"], "methods", ["None"], ["", "def", "set_image", "(", "self", ",", "image", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.NoVisualization.draw_groundtruth": [[69, 71], ["None"], "methods", ["None"], ["", "def", "draw_groundtruth", "(", "self", ",", "track_ids", ",", "boxes", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.NoVisualization.draw_detections": [[72, 74], ["None"], "methods", ["None"], ["", "def", "draw_detections", "(", "self", ",", "detections", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.NoVisualization.draw_trackers": [[75, 77], ["None"], "methods", ["None"], ["", "def", "draw_trackers", "(", "self", ",", "trackers", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.NoVisualization.run": [[78, 82], ["frame_callback"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "frame_callback", ")", ":", "\n", "        ", "while", "self", ".", "frame_idx", "<=", "self", ".", "last_idx", ":", "\n", "            ", "frame_callback", "(", "self", ",", "self", ".", "frame_idx", ")", "\n", "self", ".", "frame_idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.Visualization.__init__": [[89, 98], ["image_viewer.ImageViewer", "float", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "seq_info", ",", "update_ms", ")", ":", "\n", "        ", "image_shape", "=", "seq_info", "[", "\"image_size\"", "]", "[", ":", ":", "-", "1", "]", "\n", "aspect_ratio", "=", "float", "(", "image_shape", "[", "1", "]", ")", "/", "image_shape", "[", "0", "]", "\n", "image_shape", "=", "1024", ",", "int", "(", "aspect_ratio", "*", "1024", ")", "\n", "self", ".", "viewer", "=", "ImageViewer", "(", "\n", "update_ms", ",", "image_shape", ",", "\"Figure %s\"", "%", "seq_info", "[", "\"sequence_name\"", "]", ")", "\n", "self", ".", "viewer", ".", "thickness", "=", "2", "\n", "self", ".", "frame_idx", "=", "seq_info", "[", "\"min_frame_idx\"", "]", "\n", "self", ".", "last_idx", "=", "seq_info", "[", "\"max_frame_idx\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.Visualization.run": [[99, 101], ["visualization.Visualization.viewer.run", "visualization.Visualization._update_fun"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.Visualization.run", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.Visualization._update_fun"], ["", "def", "run", "(", "self", ",", "frame_callback", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "run", "(", "lambda", ":", "self", ".", "_update_fun", "(", "frame_callback", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.Visualization._update_fun": [[102, 108], ["frame_callback"], "methods", ["None"], ["", "def", "_update_fun", "(", "self", ",", "frame_callback", ")", ":", "\n", "        ", "if", "self", ".", "frame_idx", ">", "self", ".", "last_idx", ":", "\n", "            ", "return", "False", "# Terminate", "\n", "", "frame_callback", "(", "self", ",", "self", ".", "frame_idx", ")", "\n", "self", ".", "frame_idx", "+=", "1", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.Visualization.set_image": [[109, 111], ["None"], "methods", ["None"], ["", "def", "set_image", "(", "self", ",", "image", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "image", "=", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.Visualization.draw_groundtruth": [[112, 117], ["zip", "visualization.create_unique_color_uchar", "visualization.Visualization.viewer.rectangle", "box.astype", "str"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.create_unique_color_uchar", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.rectangle"], ["", "def", "draw_groundtruth", "(", "self", ",", "track_ids", ",", "boxes", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "thickness", "=", "2", "\n", "for", "track_id", ",", "box", "in", "zip", "(", "track_ids", ",", "boxes", ")", ":", "\n", "            ", "self", ".", "viewer", ".", "color", "=", "create_unique_color_uchar", "(", "track_id", ")", "\n", "self", ".", "viewer", ".", "rectangle", "(", "*", "box", ".", "astype", "(", "np", ".", "int", ")", ",", "label", "=", "str", "(", "track_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.Visualization.draw_detections": [[118, 123], ["enumerate", "visualization.Visualization.viewer.rectangle"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.rectangle"], ["", "", "def", "draw_detections", "(", "self", ",", "detections", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "thickness", "=", "2", "\n", "self", ".", "viewer", ".", "color", "=", "0", ",", "0", ",", "255", "\n", "for", "i", ",", "detection", "in", "enumerate", "(", "detections", ")", ":", "\n", "            ", "self", ".", "viewer", ".", "rectangle", "(", "*", "detection", ".", "tlwh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.Visualization.draw_trackers": [[124, 132], ["visualization.create_unique_color_uchar", "visualization.Visualization.viewer.rectangle", "track.is_confirmed", "track.to_tlwh().astype", "str", "track.to_tlwh"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.create_unique_color_uchar", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.image_viewer.ImageViewer.rectangle", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.is_confirmed", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.deep_sort.track.Track.to_tlwh"], ["", "", "def", "draw_trackers", "(", "self", ",", "tracks", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "thickness", "=", "2", "\n", "for", "track", "in", "tracks", ":", "\n", "            ", "if", "not", "track", ".", "is_confirmed", "(", ")", "or", "track", ".", "time_since_update", ">", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "viewer", ".", "color", "=", "create_unique_color_uchar", "(", "track", ".", "track_id", ")", "\n", "self", ".", "viewer", ".", "rectangle", "(", "\n", "*", "track", ".", "to_tlwh", "(", ")", ".", "astype", "(", "np", ".", "int", ")", ",", "label", "=", "str", "(", "track", ".", "track_id", ")", ")", "\n", "# self.viewer.gaussian(track.mean[:2], track.covariance[:2, :2],", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.create_unique_color_float": [[7, 30], ["colorsys.hsv_to_rgb", "int"], "function", ["None"], ["def", "create_unique_color_float", "(", "tag", ",", "hue_step", "=", "0.41", ")", ":", "\n", "    ", "\"\"\"Create a unique RGB color code for a given track id (tag).\n\n    The color code is generated in HSV color space by moving along the\n    hue angle and gradually changing the saturation.\n\n    Parameters\n    ----------\n    tag : int\n        The unique target identifying tag.\n    hue_step : float\n        Difference between two neighboring color codes in HSV space (more\n        specifically, the distance in hue channel).\n\n    Returns\n    -------\n    (float, float, float)\n        RGB color code in range [0, 1]\n\n    \"\"\"", "\n", "h", ",", "v", "=", "(", "tag", "*", "hue_step", ")", "%", "1", ",", "1.", "-", "(", "int", "(", "tag", "*", "hue_step", ")", "%", "4", ")", "/", "5.", "\n", "r", ",", "g", ",", "b", "=", "colorsys", ".", "hsv_to_rgb", "(", "h", ",", "1.", ",", "v", ")", "\n", "return", "r", ",", "g", ",", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.create_unique_color_uchar": [[32, 54], ["visualization.create_unique_color_float", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.create_unique_color_float"], ["", "def", "create_unique_color_uchar", "(", "tag", ",", "hue_step", "=", "0.41", ")", ":", "\n", "    ", "\"\"\"Create a unique RGB color code for a given track id (tag).\n\n    The color code is generated in HSV color space by moving along the\n    hue angle and gradually changing the saturation.\n\n    Parameters\n    ----------\n    tag : int\n        The unique target identifying tag.\n    hue_step : float\n        Difference between two neighboring color codes in HSV space (more\n        specifically, the distance in hue channel).\n\n    Returns\n    -------\n    (int, int, int)\n        RGB color code in range [0, 255]\n\n    \"\"\"", "\n", "r", ",", "g", ",", "b", "=", "create_unique_color_float", "(", "tag", ",", "hue_step", ")", "\n", "return", "int", "(", "255", "*", "r", ")", ",", "int", "(", "255", "*", "g", ")", ",", "int", "(", "255", "*", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.preprocessing.non_max_suppression": [[6, 74], ["boxes.astype.astype", "len", "numpy.argsort", "numpy.argsort", "len", "pick.append", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.delete", "len", "numpy.concatenate", "numpy.where"], "function", ["None"], ["def", "non_max_suppression", "(", "boxes", ",", "max_bbox_overlap", ",", "scores", "=", "None", ")", ":", "\n", "    ", "\"\"\"Suppress overlapping detections.\n\n    Original code from [1]_ has been adapted to include confidence score.\n\n    .. [1] http://www.pyimagesearch.com/2015/02/16/\n           faster-non-maximum-suppression-python/\n\n    Examples\n    --------\n\n        >>> boxes = [d.roi for d in detections]\n        >>> scores = [d.confidence for d in detections]\n        >>> indices = non_max_suppression(boxes, max_bbox_overlap, scores)\n        >>> detections = [detections[i] for i in indices]\n\n    Parameters\n    ----------\n    boxes : ndarray\n        Array of ROIs (x, y, width, height).\n    max_bbox_overlap : float\n        ROIs that overlap more than this values are suppressed.\n    scores : Optional[array_like]\n        Detector confidence score.\n\n    Returns\n    -------\n    List[int]\n        Returns indices of detections that have survived non-maxima suppression.\n\n    \"\"\"", "\n", "if", "len", "(", "boxes", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "\n", "", "boxes", "=", "boxes", ".", "astype", "(", "np", ".", "float", ")", "\n", "pick", "=", "[", "]", "\n", "\n", "x1", "=", "boxes", "[", ":", ",", "0", "]", "\n", "y1", "=", "boxes", "[", ":", ",", "1", "]", "\n", "x2", "=", "boxes", "[", ":", ",", "2", "]", "+", "boxes", "[", ":", ",", "0", "]", "\n", "y2", "=", "boxes", "[", ":", ",", "3", "]", "+", "boxes", "[", ":", ",", "1", "]", "\n", "\n", "area", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "if", "scores", "is", "not", "None", ":", "\n", "        ", "idxs", "=", "np", ".", "argsort", "(", "scores", ")", "\n", "", "else", ":", "\n", "        ", "idxs", "=", "np", ".", "argsort", "(", "y2", ")", "\n", "\n", "", "while", "len", "(", "idxs", ")", ">", "0", ":", "\n", "        ", "last", "=", "len", "(", "idxs", ")", "-", "1", "\n", "i", "=", "idxs", "[", "last", "]", "\n", "pick", ".", "append", "(", "i", ")", "\n", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "idxs", "[", ":", "last", "]", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1", "[", "i", "]", ",", "y1", "[", "idxs", "[", ":", "last", "]", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2", "[", "i", "]", ",", "x2", "[", "idxs", "[", ":", "last", "]", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "y2", "[", "i", "]", ",", "y2", "[", "idxs", "[", ":", "last", "]", "]", ")", "\n", "\n", "w", "=", "np", ".", "maximum", "(", "0", ",", "xx2", "-", "xx1", "+", "1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0", ",", "yy2", "-", "yy1", "+", "1", ")", "\n", "\n", "overlap", "=", "(", "w", "*", "h", ")", "/", "area", "[", "idxs", "[", ":", "last", "]", "]", "\n", "\n", "idxs", "=", "np", ".", "delete", "(", "\n", "idxs", ",", "np", ".", "concatenate", "(", "\n", "(", "[", "last", "]", ",", "np", ".", "where", "(", "overlap", ">", "max_bbox_overlap", ")", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "return", "pick", "\n", "", ""]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model._batch_norm_fn": [[7, 11], ["tensorflow.batch_norm", "tensorflow.get_variable_scope"], "function", ["None"], ["def", "_batch_norm_fn", "(", "x", ",", "scope", "=", "None", ")", ":", "\n", "    ", "if", "scope", "is", "None", ":", "\n", "        ", "scope", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "+", "\"/bn\"", "\n", "", "return", "slim", ".", "batch_norm", "(", "x", ",", "scope", "=", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model.create_link": [[13, 41], ["tensorflow.truncated_normal_initializer", "freeze_model.residual_block.network_builder", "freeze_model._batch_norm_fn", "nonlinearity", "pre_block_network.get_shape().as_list", "network_builder.get_shape().as_list", "tensorflow.conv2d", "tensorflow.summary.histogram", "pre_block_network.get_shape", "network_builder.get_shape"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model._batch_norm_fn"], ["", "def", "create_link", "(", "\n", "incoming", ",", "network_builder", ",", "scope", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "elu", ",", "\n", "weights_initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "1e-3", ")", ",", "\n", "regularizer", "=", "None", ",", "is_first", "=", "False", ",", "summarize_activations", "=", "True", ")", ":", "\n", "    ", "if", "is_first", ":", "\n", "        ", "network", "=", "incoming", "\n", "", "else", ":", "\n", "        ", "network", "=", "_batch_norm_fn", "(", "incoming", ",", "scope", "=", "scope", "+", "\"/bn\"", ")", "\n", "network", "=", "nonlinearity", "(", "network", ")", "\n", "if", "summarize_activations", ":", "\n", "            ", "tf", ".", "summary", ".", "histogram", "(", "scope", "+", "\"/activations\"", ",", "network", ")", "\n", "\n", "", "", "pre_block_network", "=", "network", "\n", "post_block_network", "=", "network_builder", "(", "pre_block_network", ",", "scope", ")", "\n", "\n", "incoming_dim", "=", "pre_block_network", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "outgoing_dim", "=", "post_block_network", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "if", "incoming_dim", "!=", "outgoing_dim", ":", "\n", "        ", "assert", "outgoing_dim", "==", "2", "*", "incoming_dim", ",", "\"%d != %d\"", "%", "(", "outgoing_dim", ",", "2", "*", "incoming", ")", "\n", "projection", "=", "slim", ".", "conv2d", "(", "\n", "incoming", ",", "outgoing_dim", ",", "1", ",", "2", ",", "padding", "=", "\"SAME\"", ",", "activation_fn", "=", "None", ",", "\n", "scope", "=", "scope", "+", "\"/projection\"", ",", "weights_initializer", "=", "weights_initializer", ",", "\n", "biases_initializer", "=", "None", ",", "weights_regularizer", "=", "regularizer", ")", "\n", "network", "=", "projection", "+", "post_block_network", "\n", "", "else", ":", "\n", "        ", "network", "=", "incoming", "+", "post_block_network", "\n", "", "return", "network", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model.create_inner_block": [[43, 70], ["tensorflow.truncated_normal_initializer", "tensorflow.zeros_initializer", "tensorflow.conv2d", "tensorflow.dropout", "tensorflow.conv2d", "slim.conv2d.get_shape().as_list", "tensorflow.summary.histogram", "slim.conv2d.get_shape"], "function", ["None"], ["", "def", "create_inner_block", "(", "\n", "incoming", ",", "scope", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "elu", ",", "\n", "weights_initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "1e-3", ")", ",", "\n", "bias_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "regularizer", "=", "None", ",", "\n", "increase_dim", "=", "False", ",", "summarize_activations", "=", "True", ")", ":", "\n", "    ", "n", "=", "incoming", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "stride", "=", "1", "\n", "if", "increase_dim", ":", "\n", "        ", "n", "*=", "2", "\n", "stride", "=", "2", "\n", "\n", "", "incoming", "=", "slim", ".", "conv2d", "(", "\n", "incoming", ",", "n", ",", "[", "3", ",", "3", "]", ",", "stride", ",", "activation_fn", "=", "nonlinearity", ",", "padding", "=", "\"SAME\"", ",", "\n", "normalizer_fn", "=", "_batch_norm_fn", ",", "weights_initializer", "=", "weights_initializer", ",", "\n", "biases_initializer", "=", "bias_initializer", ",", "weights_regularizer", "=", "regularizer", ",", "\n", "scope", "=", "scope", "+", "\"/1\"", ")", "\n", "if", "summarize_activations", ":", "\n", "        ", "tf", ".", "summary", ".", "histogram", "(", "incoming", ".", "name", "+", "\"/activations\"", ",", "incoming", ")", "\n", "\n", "", "incoming", "=", "slim", ".", "dropout", "(", "incoming", ",", "keep_prob", "=", "0.6", ")", "\n", "\n", "incoming", "=", "slim", ".", "conv2d", "(", "\n", "incoming", ",", "n", ",", "[", "3", ",", "3", "]", ",", "1", ",", "activation_fn", "=", "None", ",", "padding", "=", "\"SAME\"", ",", "\n", "normalizer_fn", "=", "None", ",", "weights_initializer", "=", "weights_initializer", ",", "\n", "biases_initializer", "=", "bias_initializer", ",", "weights_regularizer", "=", "regularizer", ",", "\n", "scope", "=", "scope", "+", "\"/2\"", ")", "\n", "return", "incoming", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model.residual_block": [[72, 86], ["tensorflow.truncated_normal_initializer", "tensorflow.zeros_initializer", "freeze_model.create_link", "freeze_model.create_inner_block"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model.create_link", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model.create_inner_block"], ["", "def", "residual_block", "(", "incoming", ",", "scope", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "elu", ",", "\n", "weights_initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "1e3", ")", ",", "\n", "bias_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "regularizer", "=", "None", ",", "\n", "increase_dim", "=", "False", ",", "is_first", "=", "False", ",", "\n", "summarize_activations", "=", "True", ")", ":", "\n", "\n", "    ", "def", "network_builder", "(", "x", ",", "s", ")", ":", "\n", "        ", "return", "create_inner_block", "(", "\n", "x", ",", "s", ",", "nonlinearity", ",", "weights_initializer", ",", "bias_initializer", ",", "\n", "regularizer", ",", "increase_dim", ",", "summarize_activations", ")", "\n", "\n", "", "return", "create_link", "(", "\n", "incoming", ",", "network_builder", ",", "scope", ",", "nonlinearity", ",", "weights_initializer", ",", "\n", "regularizer", ",", "is_first", ",", "summarize_activations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model._create_network": [[88, 158], ["tensorflow.truncated_normal_initializer", "tensorflow.zeros_initializer", "tensorflow.l2_regularizer", "tensorflow.truncated_normal_initializer", "tensorflow.zeros_initializer", "tensorflow.l2_regularizer", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.max_pool2d", "freeze_model.residual_block", "freeze_model.residual_block", "freeze_model.residual_block", "freeze_model.residual_block", "freeze_model.residual_block", "freeze_model.residual_block", "tensorflow.flatten", "tensorflow.dropout", "tensorflow.fully_connected", "tensorflow.batch_norm", "tensorflow.sqrt", "tensorflow.batch_norm", "slim.fully_connected.get_shape().as_list", "tensorflow.constant", "tensorflow.reduce_sum", "slim.fully_connected.get_shape", "tensorflow.square", "tensorflow.get_variable_scope"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model.residual_block", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model.residual_block", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model.residual_block", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model.residual_block", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model.residual_block", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model.residual_block"], ["", "def", "_create_network", "(", "incoming", ",", "reuse", "=", "None", ",", "weight_decay", "=", "1e-8", ")", ":", "\n", "    ", "nonlinearity", "=", "tf", ".", "nn", ".", "elu", "\n", "conv_weight_init", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "1e-3", ")", "\n", "conv_bias_init", "=", "tf", ".", "zeros_initializer", "(", ")", "\n", "conv_regularizer", "=", "slim", ".", "l2_regularizer", "(", "weight_decay", ")", "\n", "fc_weight_init", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "1e-3", ")", "\n", "fc_bias_init", "=", "tf", ".", "zeros_initializer", "(", ")", "\n", "fc_regularizer", "=", "slim", ".", "l2_regularizer", "(", "weight_decay", ")", "\n", "\n", "def", "batch_norm_fn", "(", "x", ")", ":", "\n", "        ", "return", "slim", ".", "batch_norm", "(", "x", ",", "scope", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "+", "\"/bn\"", ")", "\n", "\n", "", "network", "=", "incoming", "\n", "network", "=", "slim", ".", "conv2d", "(", "\n", "network", ",", "32", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "activation_fn", "=", "nonlinearity", ",", "\n", "padding", "=", "\"SAME\"", ",", "normalizer_fn", "=", "batch_norm_fn", ",", "scope", "=", "\"conv1_1\"", ",", "\n", "weights_initializer", "=", "conv_weight_init", ",", "biases_initializer", "=", "conv_bias_init", ",", "\n", "weights_regularizer", "=", "conv_regularizer", ")", "\n", "network", "=", "slim", ".", "conv2d", "(", "\n", "network", ",", "32", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "activation_fn", "=", "nonlinearity", ",", "\n", "padding", "=", "\"SAME\"", ",", "normalizer_fn", "=", "batch_norm_fn", ",", "scope", "=", "\"conv1_2\"", ",", "\n", "weights_initializer", "=", "conv_weight_init", ",", "biases_initializer", "=", "conv_bias_init", ",", "\n", "weights_regularizer", "=", "conv_regularizer", ")", "\n", "\n", "# NOTE(nwojke): This is missing a padding=\"SAME\" to match the CNN", "\n", "# architecture in Table 1 of the paper. Information on how this affects", "\n", "# performance on MOT 16 training sequences can be found in", "\n", "# issue 10 https://github.com/nwojke/deep_sort/issues/10", "\n", "network", "=", "slim", ".", "max_pool2d", "(", "network", ",", "[", "3", ",", "3", "]", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "\"pool1\"", ")", "\n", "\n", "network", "=", "residual_block", "(", "\n", "network", ",", "\"conv2_1\"", ",", "nonlinearity", ",", "conv_weight_init", ",", "conv_bias_init", ",", "\n", "conv_regularizer", ",", "increase_dim", "=", "False", ",", "is_first", "=", "True", ")", "\n", "network", "=", "residual_block", "(", "\n", "network", ",", "\"conv2_3\"", ",", "nonlinearity", ",", "conv_weight_init", ",", "conv_bias_init", ",", "\n", "conv_regularizer", ",", "increase_dim", "=", "False", ")", "\n", "\n", "network", "=", "residual_block", "(", "\n", "network", ",", "\"conv3_1\"", ",", "nonlinearity", ",", "conv_weight_init", ",", "conv_bias_init", ",", "\n", "conv_regularizer", ",", "increase_dim", "=", "True", ")", "\n", "network", "=", "residual_block", "(", "\n", "network", ",", "\"conv3_3\"", ",", "nonlinearity", ",", "conv_weight_init", ",", "conv_bias_init", ",", "\n", "conv_regularizer", ",", "increase_dim", "=", "False", ")", "\n", "\n", "network", "=", "residual_block", "(", "\n", "network", ",", "\"conv4_1\"", ",", "nonlinearity", ",", "conv_weight_init", ",", "conv_bias_init", ",", "\n", "conv_regularizer", ",", "increase_dim", "=", "True", ")", "\n", "network", "=", "residual_block", "(", "\n", "network", ",", "\"conv4_3\"", ",", "nonlinearity", ",", "conv_weight_init", ",", "conv_bias_init", ",", "\n", "conv_regularizer", ",", "increase_dim", "=", "False", ")", "\n", "\n", "feature_dim", "=", "network", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "network", "=", "slim", ".", "flatten", "(", "network", ")", "\n", "\n", "network", "=", "slim", ".", "dropout", "(", "network", ",", "keep_prob", "=", "0.6", ")", "\n", "network", "=", "slim", ".", "fully_connected", "(", "\n", "network", ",", "feature_dim", ",", "activation_fn", "=", "nonlinearity", ",", "\n", "normalizer_fn", "=", "batch_norm_fn", ",", "weights_regularizer", "=", "fc_regularizer", ",", "\n", "scope", "=", "\"fc1\"", ",", "weights_initializer", "=", "fc_weight_init", ",", "\n", "biases_initializer", "=", "fc_bias_init", ")", "\n", "\n", "features", "=", "network", "\n", "\n", "# Features in rows, normalize axis 1.", "\n", "features", "=", "slim", ".", "batch_norm", "(", "features", ",", "scope", "=", "\"ball\"", ",", "reuse", "=", "reuse", ")", "\n", "feature_norm", "=", "tf", ".", "sqrt", "(", "\n", "tf", ".", "constant", "(", "1e-8", ",", "tf", ".", "float32", ")", "+", "\n", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "features", ")", ",", "[", "1", "]", ",", "keepdims", "=", "True", ")", ")", "\n", "features", "=", "features", "/", "feature_norm", "\n", "return", "features", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model._network_factory": [[160, 173], ["tensorflow.arg_scope", "tensorflow.arg_scope", "freeze_model._create_network"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model._create_network"], ["", "def", "_network_factory", "(", "weight_decay", "=", "1e-8", ")", ":", "\n", "\n", "    ", "def", "factory_fn", "(", "image", ",", "reuse", ")", ":", "\n", "            ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "batch_norm", ",", "slim", ".", "dropout", "]", ",", "\n", "is_training", "=", "False", ")", ":", "\n", "                ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "fully_connected", ",", "\n", "slim", ".", "batch_norm", ",", "slim", ".", "layer_norm", "]", ",", "\n", "reuse", "=", "reuse", ")", ":", "\n", "                    ", "features", ",", "logits", "=", "_create_network", "(", "\n", "image", ",", "reuse", "=", "reuse", ",", "weight_decay", "=", "weight_decay", ")", "\n", "return", "features", ",", "logits", "\n", "\n", "", "", "", "return", "factory_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model._preprocess": [[175, 178], ["None"], "function", ["None"], ["", "def", "_preprocess", "(", "image", ")", ":", "\n", "    ", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# BGR to RGB", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model.parse_args": [[180, 192], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"Parse command line arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Freeze old model\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checkpoint_in\"", ",", "\n", "default", "=", "\"resources/networks/mars-small128.ckpt-68577\"", ",", "\n", "help", "=", "\"Path to checkpoint file\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--graphdef_out\"", ",", "\n", "default", "=", "\"resources/networks/mars-small128.pb\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model.main": [[194, 216], ["freeze_model.parse_args", "tensorflow.Session", "tensorflow.placeholder", "tensorflow.map_fn", "freeze_model._network_factory", "_network_factory.", "tensorflow.identity", "tensorflow.train.Saver", "tf.train.Saver.restore", "tensorflow.graph_util.convert_variables_to_constants", "tensorflow.cast", "tensorflow.get_variables_to_restore", "tensorflow.get_default_graph().as_graph_def", "tensorflow.gfile.GFile", "file_handle.write", "tensorflow.Graph", "freeze_model._preprocess", "tf.graph_util.convert_variables_to_constants.SerializeToString", "tensorflow.get_default_graph", "tf.identity.name.split"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.parse_args", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model._network_factory", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.freeze_model._preprocess"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "with", "tf", ".", "Session", "(", "graph", "=", "tf", ".", "Graph", "(", ")", ")", "as", "session", ":", "\n", "        ", "input_var", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "uint8", ",", "(", "None", ",", "128", ",", "64", ",", "3", ")", ",", "name", "=", "\"images\"", ")", "\n", "image_var", "=", "tf", ".", "map_fn", "(", "\n", "lambda", "x", ":", "_preprocess", "(", "x", ")", ",", "tf", ".", "cast", "(", "input_var", ",", "tf", ".", "float32", ")", ",", "\n", "back_prop", "=", "False", ")", "\n", "\n", "factory_fn", "=", "_network_factory", "(", ")", "\n", "features", ",", "_", "=", "factory_fn", "(", "image_var", ",", "reuse", "=", "None", ")", "\n", "features", "=", "tf", ".", "identity", "(", "features", ",", "name", "=", "\"features\"", ")", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "slim", ".", "get_variables_to_restore", "(", ")", ")", "\n", "saver", ".", "restore", "(", "session", ",", "args", ".", "checkpoint_in", ")", "\n", "\n", "output_graph_def", "=", "tf", ".", "graph_util", ".", "convert_variables_to_constants", "(", "\n", "session", ",", "tf", ".", "get_default_graph", "(", ")", ".", "as_graph_def", "(", ")", ",", "\n", "[", "features", ".", "name", ".", "split", "(", "\":\"", ")", "[", "0", "]", "]", ")", "\n", "with", "tf", ".", "gfile", ".", "GFile", "(", "args", ".", "graphdef_out", ",", "\"wb\"", ")", "as", "file_handle", ":", "\n", "            ", "file_handle", ".", "write", "(", "output_graph_def", ".", "SerializeToString", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.ImageEncoder.__init__": [[73, 89], ["tensorflow.Session", "tensorflow.import_graph_def", "tensorflow.get_default_graph().get_tensor_by_name", "tensorflow.get_default_graph().get_tensor_by_name", "tensorflow.gfile.GFile", "tensorflow.GraphDef", "tensorflow.GraphDef.ParseFromString", "len", "len", "generate_detections.ImageEncoder.output_var.get_shape().as_list", "generate_detections.ImageEncoder.input_var.get_shape().as_list", "file_handle.read", "tensorflow.get_default_graph", "tensorflow.get_default_graph", "generate_detections.ImageEncoder.output_var.get_shape", "generate_detections.ImageEncoder.input_var.get_shape", "generate_detections.ImageEncoder.output_var.get_shape", "generate_detections.ImageEncoder.input_var.get_shape"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "checkpoint_filename", ",", "input_name", "=", "\"images\"", ",", "\n", "output_name", "=", "\"features\"", ")", ":", "\n", "        ", "self", ".", "session", "=", "tf", ".", "Session", "(", ")", "\n", "with", "tf", ".", "gfile", ".", "GFile", "(", "checkpoint_filename", ",", "\"rb\"", ")", "as", "file_handle", ":", "\n", "            ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "file_handle", ".", "read", "(", ")", ")", "\n", "", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "\"net\"", ")", "\n", "self", ".", "input_var", "=", "tf", ".", "get_default_graph", "(", ")", ".", "get_tensor_by_name", "(", "\n", "\"net/%s:0\"", "%", "input_name", ")", "\n", "self", ".", "output_var", "=", "tf", ".", "get_default_graph", "(", ")", ".", "get_tensor_by_name", "(", "\n", "\"net/%s:0\"", "%", "output_name", ")", "\n", "\n", "assert", "len", "(", "self", ".", "output_var", ".", "get_shape", "(", ")", ")", "==", "2", "\n", "assert", "len", "(", "self", ".", "input_var", ".", "get_shape", "(", ")", ")", "==", "4", "\n", "self", ".", "feature_dim", "=", "self", ".", "output_var", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "self", ".", "image_shape", "=", "self", ".", "input_var", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.ImageEncoder.__call__": [[90, 96], ["numpy.zeros", "generate_detections._run_in_batches", "len", "generate_detections.ImageEncoder.session.run"], "methods", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections._run_in_batches", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.application_util.visualization.Visualization.run"], ["", "def", "__call__", "(", "self", ",", "data_x", ",", "batch_size", "=", "32", ")", ":", "\n", "        ", "out", "=", "np", ".", "zeros", "(", "(", "len", "(", "data_x", ")", ",", "self", ".", "feature_dim", ")", ",", "np", ".", "float32", ")", "\n", "_run_in_batches", "(", "\n", "lambda", "x", ":", "self", ".", "session", ".", "run", "(", "self", ".", "output_var", ",", "feed_dict", "=", "x", ")", ",", "\n", "{", "self", ".", "input_var", ":", "data_x", "}", ",", "out", ",", "batch_size", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections._run_in_batches": [[10, 22], ["len", "int", "range", "f", "len", "f", "data_dict.items", "data_dict.items"], "function", ["None"], ["def", "_run_in_batches", "(", "f", ",", "data_dict", ",", "out", ",", "batch_size", ")", ":", "\n", "    ", "data_len", "=", "len", "(", "out", ")", "\n", "num_batches", "=", "int", "(", "data_len", "/", "batch_size", ")", "\n", "\n", "s", ",", "e", "=", "0", ",", "0", "\n", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "        ", "s", ",", "e", "=", "i", "*", "batch_size", ",", "(", "i", "+", "1", ")", "*", "batch_size", "\n", "batch_data_dict", "=", "{", "k", ":", "v", "[", "s", ":", "e", "]", "for", "k", ",", "v", "in", "data_dict", ".", "items", "(", ")", "}", "\n", "out", "[", "s", ":", "e", "]", "=", "f", "(", "batch_data_dict", ")", "\n", "", "if", "e", "<", "len", "(", "out", ")", ":", "\n", "        ", "batch_data_dict", "=", "{", "k", ":", "v", "[", "e", ":", "]", "for", "k", ",", "v", "in", "data_dict", ".", "items", "(", ")", "}", "\n", "out", "[", "e", ":", "]", "=", "f", "(", "batch_data_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.extract_image_patch": [[24, 69], ["numpy.array", "bbox.astype.astype", "numpy.maximum", "numpy.minimum", "numpy.any", "cv2.resize", "tuple", "float", "numpy.asarray"], "function", ["None"], ["", "", "def", "extract_image_patch", "(", "image", ",", "bbox", ",", "patch_shape", ")", ":", "\n", "    ", "\"\"\"Extract image patch from bounding box.\n\n    Parameters\n    ----------\n    image : ndarray\n        The full image.\n    bbox : array_like\n        The bounding box in format (x, y, width, height).\n    patch_shape : Optional[array_like]\n        This parameter can be used to enforce a desired patch shape\n        (height, width). First, the `bbox` is adapted to the aspect ratio\n        of the patch shape, then it is clipped at the image boundaries.\n        If None, the shape is computed from :arg:`bbox`.\n\n    Returns\n    -------\n    ndarray | NoneType\n        An image patch showing the :arg:`bbox`, optionally reshaped to\n        :arg:`patch_shape`.\n        Returns None if the bounding box is empty or fully outside of the image\n        boundaries.\n\n    \"\"\"", "\n", "bbox", "=", "np", ".", "array", "(", "bbox", ")", "\n", "if", "patch_shape", "is", "not", "None", ":", "\n", "# correct aspect ratio to patch shape", "\n", "        ", "target_aspect", "=", "float", "(", "patch_shape", "[", "1", "]", ")", "/", "patch_shape", "[", "0", "]", "\n", "new_width", "=", "target_aspect", "*", "bbox", "[", "3", "]", "\n", "bbox", "[", "0", "]", "-=", "(", "new_width", "-", "bbox", "[", "2", "]", ")", "/", "2", "\n", "bbox", "[", "2", "]", "=", "new_width", "\n", "\n", "# convert to top left, bottom right", "\n", "", "bbox", "[", "2", ":", "]", "+=", "bbox", "[", ":", "2", "]", "\n", "bbox", "=", "bbox", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "# clip at image boundaries", "\n", "bbox", "[", ":", "2", "]", "=", "np", ".", "maximum", "(", "0", ",", "bbox", "[", ":", "2", "]", ")", "\n", "bbox", "[", "2", ":", "]", "=", "np", ".", "minimum", "(", "np", ".", "asarray", "(", "image", ".", "shape", "[", ":", "2", "]", "[", ":", ":", "-", "1", "]", ")", "-", "1", ",", "bbox", "[", "2", ":", "]", ")", "\n", "if", "np", ".", "any", "(", "bbox", "[", ":", "2", "]", ">=", "bbox", "[", "2", ":", "]", ")", ":", "\n", "        ", "return", "None", "\n", "", "sx", ",", "sy", ",", "ex", ",", "ey", "=", "bbox", "\n", "image", "=", "image", "[", "sy", ":", "ey", ",", "sx", ":", "ex", "]", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "tuple", "(", "patch_shape", "[", ":", ":", "-", "1", "]", ")", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.create_box_encoder": [[98, 116], ["generate_detections.ImageEncoder", "numpy.asarray", "ImageEncoder.", "generate_detections.extract_image_patch", "np.asarray.append", "print", "numpy.random.uniform().astype", "str", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.extract_image_patch"], ["", "", "def", "create_box_encoder", "(", "model_filename", ",", "input_name", "=", "\"images\"", ",", "\n", "output_name", "=", "\"features\"", ",", "batch_size", "=", "32", ")", ":", "\n", "    ", "image_encoder", "=", "ImageEncoder", "(", "model_filename", ",", "input_name", ",", "output_name", ")", "\n", "image_shape", "=", "image_encoder", ".", "image_shape", "\n", "\n", "def", "encoder", "(", "image", ",", "boxes", ")", ":", "\n", "        ", "image_patches", "=", "[", "]", "\n", "for", "box", "in", "boxes", ":", "\n", "            ", "patch", "=", "extract_image_patch", "(", "image", ",", "box", ",", "image_shape", "[", ":", "2", "]", ")", "\n", "if", "patch", "is", "None", ":", "\n", "                ", "print", "(", "\"WARNING: Failed to extract image patch: %s.\"", "%", "str", "(", "box", ")", ")", "\n", "patch", "=", "np", ".", "random", ".", "uniform", "(", "\n", "0.", ",", "255.", ",", "image_shape", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "image_patches", ".", "append", "(", "patch", ")", "\n", "", "image_patches", "=", "np", ".", "asarray", "(", "image_patches", ")", "\n", "return", "image_encoder", "(", "image_patches", ",", "batch_size", ")", "\n", "\n", "", "return", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.generate_detections": [[118, 182], ["os.listdir", "os.makedirs", "print", "os.path.join", "os.path.join", "os.path.join", "numpy.loadtxt", "detections_in[].astype", "detections_in[].astype.astype().min", "detections_in[].astype.astype().max", "range", "os.path.join", "numpy.save", "int", "os.path.join", "print", "cv2.imread", "generate_detections.create_box_encoder.encoder", "numpy.asarray", "os.path.isdir", "ValueError", "os.listdir", "detections_in[].astype.astype", "detections_in[].astype.astype", "print", "rows[].copy", "os.path.splitext", "zip"], "function", ["None"], ["", "def", "generate_detections", "(", "encoder", ",", "mot_dir", ",", "output_dir", ",", "detection_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"Generate detections with features.\n\n    Parameters\n    ----------\n    encoder : Callable[image, ndarray] -> ndarray\n        The encoder function takes as input a BGR color image and a matrix of\n        bounding boxes in format `(x, y, w, h)` and returns a matrix of\n        corresponding feature vectors.\n    mot_dir : str\n        Path to the MOTChallenge directory (can be either train or test).\n    output_dir\n        Path to the output directory. Will be created if it does not exist.\n    detection_dir\n        Path to custom detections. The directory structure should be the default\n        MOTChallenge structure: `[sequence]/det/det.txt`. If None, uses the\n        standard MOTChallenge detections.\n\n    \"\"\"", "\n", "if", "detection_dir", "is", "None", ":", "\n", "        ", "detection_dir", "=", "mot_dir", "\n", "", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "except", "OSError", "as", "exception", ":", "\n", "        ", "if", "exception", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Failed to created output directory '%s'\"", "%", "output_dir", ")", "\n", "\n", "", "", "for", "sequence", "in", "os", ".", "listdir", "(", "mot_dir", ")", ":", "\n", "        ", "print", "(", "\"Processing %s\"", "%", "sequence", ")", "\n", "sequence_dir", "=", "os", ".", "path", ".", "join", "(", "mot_dir", ",", "sequence", ")", "\n", "\n", "image_dir", "=", "os", ".", "path", ".", "join", "(", "sequence_dir", ",", "\"img1\"", ")", "\n", "image_filenames", "=", "{", "\n", "int", "(", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", ")", ":", "os", ".", "path", ".", "join", "(", "image_dir", ",", "f", ")", "\n", "for", "f", "in", "os", ".", "listdir", "(", "image_dir", ")", "}", "\n", "\n", "detection_file", "=", "os", ".", "path", ".", "join", "(", "\n", "detection_dir", ",", "sequence", ",", "\"det/det.txt\"", ")", "\n", "detections_in", "=", "np", ".", "loadtxt", "(", "detection_file", ",", "delimiter", "=", "','", ")", "\n", "detections_out", "=", "[", "]", "\n", "\n", "frame_indices", "=", "detections_in", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "min_frame_idx", "=", "frame_indices", ".", "astype", "(", "np", ".", "int", ")", ".", "min", "(", ")", "\n", "max_frame_idx", "=", "frame_indices", ".", "astype", "(", "np", ".", "int", ")", ".", "max", "(", ")", "\n", "for", "frame_idx", "in", "range", "(", "min_frame_idx", ",", "max_frame_idx", "+", "1", ")", ":", "\n", "            ", "print", "(", "\"Frame %05d/%05d\"", "%", "(", "frame_idx", ",", "max_frame_idx", ")", ")", "\n", "mask", "=", "frame_indices", "==", "frame_idx", "\n", "rows", "=", "detections_in", "[", "mask", "]", "\n", "\n", "if", "frame_idx", "not", "in", "image_filenames", ":", "\n", "                ", "print", "(", "\"WARNING could not find image for frame %d\"", "%", "frame_idx", ")", "\n", "continue", "\n", "", "bgr_image", "=", "cv2", ".", "imread", "(", "\n", "image_filenames", "[", "frame_idx", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "features", "=", "encoder", "(", "bgr_image", ",", "rows", "[", ":", ",", "2", ":", "6", "]", ".", "copy", "(", ")", ")", "\n", "detections_out", "+=", "[", "np", ".", "r_", "[", "(", "row", ",", "feature", ")", "]", "for", "row", ",", "feature", "\n", "in", "zip", "(", "rows", ",", "features", ")", "]", "\n", "\n", "", "output_filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"%s.npy\"", "%", "sequence", ")", "\n", "np", ".", "save", "(", "\n", "output_filename", ",", "np", ".", "asarray", "(", "detections_out", ")", ",", "allow_pickle", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.parse_args": [[184, 203], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"Parse command line arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Re-ID feature extractor\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--model\"", ",", "\n", "default", "=", "\"resources/networks/mars-small128.pb\"", ",", "\n", "help", "=", "\"Path to freezed inference graph protobuf.\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mot_dir\"", ",", "help", "=", "\"Path to MOTChallenge directory (train or test)\"", ",", "\n", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--detection_dir\"", ",", "help", "=", "\"Path to custom detections. Defaults to \"", "\n", "\"standard MOT detections Directory structure should be the default \"", "\n", "\"MOTChallenge structure: [sequence]/det/det.txt\"", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_dir\"", ",", "help", "=", "\"Output directory. Will be created if it does not\"", "\n", "\" exist.\"", ",", "default", "=", "\"detections\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.main": [[205, 210], ["generate_detections.parse_args", "generate_detections.create_box_encoder", "generate_detections.generate_detections"], "function", ["home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.parse_args", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.create_box_encoder", "home.repos.pwc.inspect_result.sangminwoo_Temporal-Span-Proposal-Network-VidVRD.tools.generate_detections.generate_detections"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "encoder", "=", "create_box_encoder", "(", "args", ".", "model", ",", "batch_size", "=", "32", ")", "\n", "generate_detections", "(", "encoder", ",", "args", ".", "mot_dir", ",", "args", ".", "output_dir", ",", "\n", "args", ".", "detection_dir", ")", "\n", "\n"]]}