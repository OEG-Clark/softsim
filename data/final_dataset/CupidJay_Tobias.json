{"home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform.AverageMeter.__init__": [[398, 402], ["main_moco_dynamic_transform.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform.AverageMeter.reset": [[403, 408], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform.AverageMeter.update": [[409, 414], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform.AverageMeter.__str__": [[415, 418], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform.ProgressMeter.__init__": [[421, 425], ["main_moco_dynamic_transform.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform.ProgressMeter.display": [[426, 430], ["print", "str", "main_moco_dynamic_transform.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform.ProgressMeter._get_batch_fmtstr": [[431, 435], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform.main": [[112, 160], ["parser.parse_args", "os.path.join", "os.path.join", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "str", "os.path.join", "os.path.exists", "os.makedirs", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "main_moco_dynamic_transform.main_worker", "len", "parser.parse_args.gpus.split", "parser.parse_args.data.split", "parser.parse_args.pretrained.split"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpus", "\n", "\n", "args", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'moco_dynamic_transform'", ",", "str", "(", "args", ".", "input_size", ")", ",", "args", ".", "arch", ")", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "args", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'pretrained_from_{}'", ".", "format", "(", "args", ".", "pretrained", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", ")", "\n", "", "args", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'gpus_{}_lr_{}_to_{}_bs_{}_prob_{}_epochs_{}_path_{}'", ".", "format", "(", "len", "(", "args", ".", "gpus", ".", "split", "(", "','", ")", ")", ",", "\n", "args", ".", "lr", ",", "\n", "args", ".", "end_lr", ",", "\n", "args", ".", "batch_size", ",", "\n", "args", ".", "bg_prob", ",", "\n", "args", ".", "epochs", ",", "\n", "args", ".", "data", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_dir", ")", "\n", "\n", "", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform.main_worker": [[162, 341], ["print", "moco.builder.MoCo", "moco.builder.MoCo", "print", "torch.CrossEntropyLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "os.path.join", "torchvision.Normalize", "moco.dynamic_transform_dataset.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "time.time", "range", "time.time", "print", "print", "torch.init_process_group", "model.cuda.parameters", "os.path.isfile", "os.path.isfile", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "main_moco_dynamic_transform.adjust_learning_rate", "main_moco_dynamic_transform.train", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "model.cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "NotImplementedError", "NotImplementedError", "torch.CrossEntropyLoss", "print", "model.cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "print", "print", "print", "print", "torchvision.RandomResizedCrop", "torchvision.RandomApply", "torchvision.RandomGrayscale", "torchvision.RandomApply", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.RandomResizedCrop", "torchvision.RandomGrayscale", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torch.utils.data.distributed.DistributedSampler.set_epoch", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "state_dict.keys", "state_dict[].size", "[].size", "print", "list", "model.cuda.load_state_dict", "print", "print", "model.cuda.load_state_dict", "main_moco_dynamic_transform.save_checkpoint", "state_dict.keys", "set", "torchvision.ColorJitter", "moco.loader.GaussianBlur", "moco.loader.GaussianBlur", "model.cuda.state_dict", "torch.optim.SGD.state_dict", "model.cuda.state_dict"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.adjust_learning_rate", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.train", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.save_checkpoint"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "args", ".", "gpu", "=", "gpu", "\n", "\n", "# suppress printing if not master", "\n", "if", "args", ".", "multiprocessing_distributed", "and", "args", ".", "gpu", "!=", "0", ":", "\n", "        ", "def", "print_pass", "(", "*", "args", ")", ":", "\n", "            ", "pass", "\n", "", "builtins", ".", "print", "=", "print_pass", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "# create model", "\n", "", "print", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "base_model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "\n", "\n", "model", "=", "moco", ".", "builder", ".", "MoCo", "(", "\n", "base_model", ",", "\n", "args", ".", "moco_dim", ",", "args", ".", "moco_k", ",", "args", ".", "moco_m", ",", "args", ".", "moco_t", ",", "args", ".", "mlp", ")", "\n", "print", "(", "model", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "(", "args", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# comment out the following line for debugging", "\n", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "", "else", ":", "\n", "# AllGather implementation (batch shuffle, queue update, etc.) in", "\n", "# this code only supports DistributedDataParallel.", "\n", "        ", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "if", "args", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "loc", ")", "\n", "", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "\n", "# optionally resume from a checkpoint", "\n", "", "", "if", "args", ".", "pretrained", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "pretrained", ")", ":", "\n", "            ", "print", "(", "\"=> loading pretrain weight '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "if", "args", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ",", "map_location", "=", "loc", ")", "\n", "\n", "", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "print", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "\n", "#not load queue", "\n", "if", "state_dict", "[", "'module.queue'", "]", ".", "size", "(", ")", "!=", "model", ".", "state_dict", "(", ")", "[", "'module.queue'", "]", ".", "size", "(", ")", ":", "\n", "                ", "print", "(", "'queue size not equal, not loading queue'", ")", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "if", "'queue'", "in", "k", ":", "\n", "                        ", "del", "state_dict", "[", "k", "]", "\n", "", "", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "set", "(", "msg", ".", "missing_keys", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'normal loading'", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "print", "(", "\"=> loaded pretrained weight '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no pretrained weight found at '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "args", ".", "aug_plus", ":", "\n", "# MoCo v2's aug: similar to SimCLR https://arxiv.org/abs/2002.05709", "\n", "        ", "augmentation", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "args", ".", "input_size", ",", "scale", "=", "(", "0.2", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.1", ")", "# not strengthened", "\n", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "moco", ".", "loader", ".", "GaussianBlur", "(", "[", ".1", ",", "2.", "]", ")", "]", ",", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", "\n", "", "else", ":", "\n", "# MoCo v1's aug: the same as InstDisc https://arxiv.org/abs/1805.01978", "\n", "        ", "augmentation", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "args", ".", "input_size", ",", "scale", "=", "(", "0.2", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", "\n", "\n", "", "train_dataset", "=", "ImageFolder", "(", "\n", "traindir", ",", "\n", "args", ".", "mask_file", ",", "\n", "args", ".", "bg_prob", ",", "\n", "transforms", ".", "Compose", "(", "augmentation", ")", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "train_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "            ", "if", "epoch", "%", "100", "==", "0", "or", "epoch", "==", "args", ".", "epochs", "-", "1", ":", "\n", "                ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "False", ",", "root", "=", "args", ".", "save_dir", ",", "filename", "=", "'checkpoint_{:04d}.pth.tar'", ".", "format", "(", "epoch", ")", ")", "\n", "", "", "", "train_end", "=", "time", ".", "time", "(", ")", "\n", "\n", "print", "(", "'total training time elapses {} hours'", ".", "format", "(", "(", "train_end", "-", "train_start", ")", "/", "3600.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform.train": [[343, 389], ["main_moco_dynamic_transform.AverageMeter", "main_moco_dynamic_transform.AverageMeter", "main_moco_dynamic_transform.AverageMeter", "main_moco_dynamic_transform.AverageMeter", "main_moco_dynamic_transform.AverageMeter", "main_moco_dynamic_transform.ProgressMeter", "model.train", "time.time", "enumerate", "len", "main_moco_dynamic_transform.AverageMeter.update", "model", "criterion", "main_moco_dynamic_transform.accuracy", "main_moco_dynamic_transform.AverageMeter.update", "main_moco_dynamic_transform.AverageMeter.update", "main_moco_dynamic_transform.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "main_moco_dynamic_transform.AverageMeter.update", "time.time", "images[].cuda", "images[].cuda", "criterion.item", "images[].size", "images[].size", "images[].size", "main_moco_dynamic_transform.ProgressMeter.display", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.train", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.accuracy", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.ProgressMeter.display"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", ",", "(", "images", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "[", "0", "]", "=", "images", "[", "0", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "images", "[", "1", "]", "=", "images", "[", "1", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "output", ",", "target", "=", "model", "(", "im_q", "=", "images", "[", "0", "]", ",", "im_k", "=", "images", "[", "1", "]", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# acc1/acc5 are (K+1)-way contrast classifier accuracy", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform.save_checkpoint": [[390, 394], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "shutil.copyfile", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "root", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ",", "os", ".", "path", ".", "join", "(", "root", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform.adjust_learning_rate": [[437, 447], ["math.cos"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Decay the learning rate based on schedule\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "args", ".", "cos", ":", "# cosine lr schedule", "\n", "        ", "lr", "=", "args", ".", "end_lr", "+", "(", "args", ".", "lr", "-", "args", ".", "end_lr", ")", "*", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch", "/", "args", ".", "epochs", ")", ")", "\n", "", "else", ":", "# stepwise lr schedule", "\n", "        ", "for", "milestone", "in", "args", ".", "schedule", ":", "\n", "            ", "lr", "*=", "0.1", "if", "epoch", ">=", "milestone", "else", "1.", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform.accuracy": [[449, 464], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].contiguous().view().float().sum", "res.append", "correct[].contiguous().view().float().sum.mul_", "target.view", "correct[].contiguous().view().float", "correct[].contiguous().view", "correct[].contiguous"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform_complete_random.AverageMeter.__init__": [[398, 402], ["main_moco_dynamic_transform_complete_random.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform_complete_random.AverageMeter.reset": [[403, 408], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform_complete_random.AverageMeter.update": [[409, 414], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform_complete_random.AverageMeter.__str__": [[415, 418], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform_complete_random.ProgressMeter.__init__": [[421, 425], ["main_moco_dynamic_transform_complete_random.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform_complete_random.ProgressMeter.display": [[426, 430], ["print", "str", "main_moco_dynamic_transform_complete_random.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform_complete_random.ProgressMeter._get_batch_fmtstr": [[431, 435], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform_complete_random.main": [[112, 160], ["parser.parse_args", "os.path.join", "os.path.join", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "str", "os.path.join", "os.path.exists", "os.makedirs", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "main_moco_dynamic_transform_complete_random.main_worker", "len", "parser.parse_args.gpus.split", "parser.parse_args.data.split", "parser.parse_args.pretrained.split"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpus", "\n", "\n", "args", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'moco_dynamic_transform_completely_random'", ",", "str", "(", "args", ".", "input_size", ")", ",", "args", ".", "arch", ")", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "args", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'pretrained_from_{}'", ".", "format", "(", "args", ".", "pretrained", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", ")", "\n", "", "args", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'gpus_{}_lr_{}_to_{}_bs_{}_prob_{}_epochs_{}_path_{}'", ".", "format", "(", "len", "(", "args", ".", "gpus", ".", "split", "(", "','", ")", ")", ",", "\n", "args", ".", "lr", ",", "\n", "args", ".", "end_lr", ",", "\n", "args", ".", "batch_size", ",", "\n", "args", ".", "bg_prob", ",", "\n", "args", ".", "epochs", ",", "\n", "args", ".", "data", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_dir", ")", "\n", "\n", "", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform_complete_random.main_worker": [[162, 341], ["print", "moco.builder.MoCo", "moco.builder.MoCo", "print", "torch.CrossEntropyLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "os.path.join", "torchvision.Normalize", "moco.dynamic_transform_dataset_completely_random.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "time.time", "range", "time.time", "print", "print", "torch.init_process_group", "model.cuda.parameters", "os.path.isfile", "os.path.isfile", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "main_moco_dynamic_transform_complete_random.adjust_learning_rate", "main_moco_dynamic_transform_complete_random.train", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "model.cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "NotImplementedError", "NotImplementedError", "torch.CrossEntropyLoss", "print", "model.cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "print", "print", "print", "print", "torchvision.RandomResizedCrop", "torchvision.RandomApply", "torchvision.RandomGrayscale", "torchvision.RandomApply", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.RandomResizedCrop", "torchvision.RandomGrayscale", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torch.utils.data.distributed.DistributedSampler.set_epoch", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "state_dict.keys", "state_dict[].size", "[].size", "print", "list", "model.cuda.load_state_dict", "print", "print", "model.cuda.load_state_dict", "main_moco_dynamic_transform_complete_random.save_checkpoint", "state_dict.keys", "set", "torchvision.ColorJitter", "moco.loader.GaussianBlur", "moco.loader.GaussianBlur", "model.cuda.state_dict", "torch.optim.SGD.state_dict", "model.cuda.state_dict"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.adjust_learning_rate", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.train", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.save_checkpoint"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "args", ".", "gpu", "=", "gpu", "\n", "\n", "# suppress printing if not master", "\n", "if", "args", ".", "multiprocessing_distributed", "and", "args", ".", "gpu", "!=", "0", ":", "\n", "        ", "def", "print_pass", "(", "*", "args", ")", ":", "\n", "            ", "pass", "\n", "", "builtins", ".", "print", "=", "print_pass", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "# create model", "\n", "", "print", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "base_model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "\n", "\n", "model", "=", "moco", ".", "builder", ".", "MoCo", "(", "\n", "base_model", ",", "\n", "args", ".", "moco_dim", ",", "args", ".", "moco_k", ",", "args", ".", "moco_m", ",", "args", ".", "moco_t", ",", "args", ".", "mlp", ")", "\n", "print", "(", "model", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "(", "args", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# comment out the following line for debugging", "\n", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "", "else", ":", "\n", "# AllGather implementation (batch shuffle, queue update, etc.) in", "\n", "# this code only supports DistributedDataParallel.", "\n", "        ", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "if", "args", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "loc", ")", "\n", "", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "\n", "# optionally resume from a checkpoint", "\n", "", "", "if", "args", ".", "pretrained", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "pretrained", ")", ":", "\n", "            ", "print", "(", "\"=> loading pretrain weight '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "if", "args", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ",", "map_location", "=", "loc", ")", "\n", "\n", "", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "print", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "\n", "#not load queue", "\n", "if", "state_dict", "[", "'module.queue'", "]", ".", "size", "(", ")", "!=", "model", ".", "state_dict", "(", ")", "[", "'module.queue'", "]", ".", "size", "(", ")", ":", "\n", "                ", "print", "(", "'queue size not equal, not loading queue'", ")", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "if", "'queue'", "in", "k", ":", "\n", "                        ", "del", "state_dict", "[", "k", "]", "\n", "", "", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "set", "(", "msg", ".", "missing_keys", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'normal loading'", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "print", "(", "\"=> loaded pretrained weight '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no pretrained weight found at '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "args", ".", "aug_plus", ":", "\n", "# MoCo v2's aug: similar to SimCLR https://arxiv.org/abs/2002.05709", "\n", "        ", "augmentation", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "args", ".", "input_size", ",", "scale", "=", "(", "0.2", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.1", ")", "# not strengthened", "\n", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "moco", ".", "loader", ".", "GaussianBlur", "(", "[", ".1", ",", "2.", "]", ")", "]", ",", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", "\n", "", "else", ":", "\n", "# MoCo v1's aug: the same as InstDisc https://arxiv.org/abs/1805.01978", "\n", "        ", "augmentation", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "args", ".", "input_size", ",", "scale", "=", "(", "0.2", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", "\n", "\n", "", "train_dataset", "=", "ImageFolder", "(", "\n", "traindir", ",", "\n", "args", ".", "mask_file", ",", "\n", "args", ".", "bg_prob", ",", "\n", "transforms", ".", "Compose", "(", "augmentation", ")", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "train_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "            ", "if", "epoch", "%", "100", "==", "0", "or", "epoch", "==", "args", ".", "epochs", "-", "1", ":", "\n", "                ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "False", ",", "root", "=", "args", ".", "save_dir", ",", "filename", "=", "'checkpoint_{:04d}.pth.tar'", ".", "format", "(", "epoch", ")", ")", "\n", "", "", "", "train_end", "=", "time", ".", "time", "(", ")", "\n", "\n", "print", "(", "'total training time elapses {} hours'", ".", "format", "(", "(", "train_end", "-", "train_start", ")", "/", "3600.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform_complete_random.train": [[343, 389], ["main_moco_dynamic_transform_complete_random.AverageMeter", "main_moco_dynamic_transform_complete_random.AverageMeter", "main_moco_dynamic_transform_complete_random.AverageMeter", "main_moco_dynamic_transform_complete_random.AverageMeter", "main_moco_dynamic_transform_complete_random.AverageMeter", "main_moco_dynamic_transform_complete_random.ProgressMeter", "model.train", "time.time", "enumerate", "len", "main_moco_dynamic_transform_complete_random.AverageMeter.update", "model", "criterion", "main_moco_dynamic_transform_complete_random.accuracy", "main_moco_dynamic_transform_complete_random.AverageMeter.update", "main_moco_dynamic_transform_complete_random.AverageMeter.update", "main_moco_dynamic_transform_complete_random.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "main_moco_dynamic_transform_complete_random.AverageMeter.update", "time.time", "images[].cuda", "images[].cuda", "criterion.item", "images[].size", "images[].size", "images[].size", "main_moco_dynamic_transform_complete_random.ProgressMeter.display", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.train", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.accuracy", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.ProgressMeter.display"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", ",", "(", "images", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "[", "0", "]", "=", "images", "[", "0", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "images", "[", "1", "]", "=", "images", "[", "1", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "output", ",", "target", "=", "model", "(", "im_q", "=", "images", "[", "0", "]", ",", "im_k", "=", "images", "[", "1", "]", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# acc1/acc5 are (K+1)-way contrast classifier accuracy", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform_complete_random.save_checkpoint": [[390, 394], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "shutil.copyfile", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "root", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ",", "os", ".", "path", ".", "join", "(", "root", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform_complete_random.adjust_learning_rate": [[437, 447], ["math.cos"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Decay the learning rate based on schedule\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "args", ".", "cos", ":", "# cosine lr schedule", "\n", "        ", "lr", "=", "args", ".", "end_lr", "+", "(", "args", ".", "lr", "-", "args", ".", "end_lr", ")", "*", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch", "/", "args", ".", "epochs", ")", ")", "\n", "", "else", ":", "# stepwise lr schedule", "\n", "        ", "for", "milestone", "in", "args", ".", "schedule", ":", "\n", "            ", "lr", "*=", "0.1", "if", "epoch", ">=", "milestone", "else", "1.", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco_dynamic_transform_complete_random.accuracy": [[449, 464], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].contiguous().view().float().sum", "res.append", "correct[].contiguous().view().float().sum.mul_", "target.view", "correct[].contiguous().view().float", "correct[].contiguous().view", "correct[].contiguous"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_lincls.AverageMeter.__init__": [[438, 442], ["main_lincls.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_lincls.AverageMeter.reset": [[443, 448], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_lincls.AverageMeter.update": [[449, 454], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_lincls.AverageMeter.__str__": [[455, 458], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_lincls.ProgressMeter.__init__": [[461, 465], ["main_lincls.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_lincls.ProgressMeter.display": [[466, 470], ["print", "str", "main_lincls.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_lincls.ProgressMeter._get_batch_fmtstr": [[471, 475], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_lincls.main": [[87, 121], ["parser.parse_args", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "main_lincls.main_worker"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpus", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_lincls.main_worker": [[123, 308], ["print", "torch.nn.DataParallel().cuda.named_parameters", "torch.nn.DataParallel().cuda.fc.weight.data.normal_", "torch.nn.DataParallel().cuda.fc.bias.data.zero_", "torch.CrossEntropyLoss().cuda", "list", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "print", "torch.init_process_group", "os.path.isfile", "filter", "len", "os.path.isfile", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torchvision.ImageFolder", "main_lincls.validate", "main_lincls.adjust_learning_rate", "main_lincls.train", "main_lincls.validate", "max", "int", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "list", "torch.nn.DataParallel().cuda.load_state_dict", "print", "print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "torch.CrossEntropyLoss", "torch.nn.DataParallel().cuda.parameters", "print", "torch.nn.DataParallel().cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler.set_epoch", "main_lincls.save_checkpoint", "state_dict.keys", "set", "args.arch.startswith", "args.arch.startswith", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "best_acc1.to.to", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "main_lincls.sanity_check", "k.startswith", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "torch.nn.DataParallel().cuda.state_dict", "k.startswith", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "len"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_lincls.validate", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.adjust_learning_rate", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.train", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_lincls.validate", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.save_checkpoint", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_lincls.sanity_check"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "global", "best_acc1", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "# suppress printing if not master", "\n", "if", "args", ".", "multiprocessing_distributed", "and", "args", ".", "gpu", "!=", "0", ":", "\n", "        ", "def", "print_pass", "(", "*", "args", ")", ":", "\n", "            ", "pass", "\n", "", "builtins", ".", "print", "=", "print_pass", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "# create model", "\n", "", "print", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", ")", "\n", "\n", "# freeze all layers but the last fc", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "name", "not", "in", "[", "'fc.weight'", ",", "'fc.bias'", "]", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "# init the fc layer", "\n", "", "", "model", ".", "fc", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.01", ")", "\n", "model", ".", "fc", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "# load from pre-trained, before DistributedDataParallel constructor", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "pretrained", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ",", "map_location", "=", "\"cpu\"", ")", "\n", "\n", "# rename moco pre-trained keys", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# retain only encoder_q up to before the embedding layer", "\n", "                ", "if", "k", ".", "startswith", "(", "'module.encoder_q'", ")", "and", "not", "k", ".", "startswith", "(", "'module.encoder_q.fc'", ")", ":", "\n", "# remove prefix", "\n", "                    ", "state_dict", "[", "k", "[", "len", "(", "\"module.encoder_q.\"", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "# delete renamed or unused k", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "args", ".", "start_epoch", "=", "0", "\n", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "assert", "set", "(", "msg", ".", "missing_keys", ")", "==", "{", "\"fc.weight\"", ",", "\"fc.bias\"", "}", "\n", "\n", "print", "(", "\"=> loaded pre-trained model '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "\n", "", "", "if", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "(", "args", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "# DataParallel will divide and allocate batch_size to all available GPUs", "\n", "        ", "if", "args", ".", "arch", ".", "startswith", "(", "'alexnet'", ")", "or", "args", ".", "arch", ".", "startswith", "(", "'vgg'", ")", ":", "\n", "            ", "model", ".", "features", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ".", "features", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "# optimize only the linear classifier", "\n", "parameters", "=", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ")", "\n", "assert", "len", "(", "parameters", ")", "==", "2", "# fc.weight, fc.bias", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "parameters", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "if", "args", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "loc", ")", "\n", "", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_acc1", "=", "checkpoint", "[", "'best_acc1'", "]", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "# best_acc1 may be from a checkpoint from a different GPU", "\n", "                ", "best_acc1", "=", "best_acc1", ".", "to", "(", "args", ".", "gpu", ")", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "return", "\n", "\n", "", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "# evaluate on validation set", "\n", "acc1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "is_best", "=", "acc1", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "\n", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "            ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ")", "\n", "if", "epoch", "==", "args", ".", "start_epoch", ":", "\n", "                ", "sanity_check", "(", "model", ".", "state_dict", "(", ")", ",", "args", ".", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_lincls.train": [[310, 360], ["main_lincls.AverageMeter", "main_lincls.AverageMeter", "main_lincls.AverageMeter", "main_lincls.AverageMeter", "main_lincls.AverageMeter", "main_lincls.ProgressMeter", "model.eval", "time.time", "enumerate", "len", "main_lincls.AverageMeter.update", "target.cuda.cuda", "model", "criterion", "main_lincls.accuracy", "main_lincls.AverageMeter.update", "main_lincls.AverageMeter.update", "main_lincls.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "main_lincls.AverageMeter.update", "time.time", "images.cuda.cuda", "criterion.item", "images.cuda.size", "images.cuda.size", "images.cuda.size", "main_lincls.ProgressMeter.display", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.accuracy", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.ProgressMeter.display"], ["", "", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "\"\"\"\n    Switch to eval mode:\n    Under the protocol of linear classification on frozen features/models,\n    it is not legitimate to change any part of the pre-trained model.\n    BatchNorm in train mode may revise running mean/std (even if it receives\n    no gradient), which are part of the model parameters too.\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_lincls.validate": [[362, 404], ["main_lincls.AverageMeter", "main_lincls.AverageMeter", "main_lincls.AverageMeter", "main_lincls.AverageMeter", "main_lincls.ProgressMeter", "model.eval", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "print", "target.cuda.cuda", "model", "criterion", "main_lincls.accuracy", "main_lincls.AverageMeter.update", "main_lincls.AverageMeter.update", "main_lincls.AverageMeter.update", "main_lincls.AverageMeter.update", "time.time", "images.cuda.cuda", "criterion.item", "images.cuda.size", "images.cuda.size", "images.cuda.size", "main_lincls.ProgressMeter.display", "time.time"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.accuracy", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.ProgressMeter.display"], ["", "", "", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "val_loader", ")", ",", "\n", "[", "batch_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "'Test: '", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "# TODO: this should also be done with the ProgressMeter", "\n", "", "", "print", "(", "' * Acc@1 {top1.avg:.3f} Acc@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_lincls.save_checkpoint": [[406, 410], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "'model_best.pth.tar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_lincls.sanity_check": [[412, 434], ["print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "list", "print", "state_dict.keys", "k.startswith", "state_dict[].cpu", "len"], "function", ["None"], ["", "", "def", "sanity_check", "(", "state_dict", ",", "pretrained_weights", ")", ":", "\n", "    ", "\"\"\"\n    Linear classifier should not change any weights other than the linear layer.\n    This sanity check asserts nothing wrong happens (e.g., BN stats updated).\n    \"\"\"", "\n", "print", "(", "\"=> loading '{}' for sanity check\"", ".", "format", "(", "pretrained_weights", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "pretrained_weights", ",", "map_location", "=", "\"cpu\"", ")", "\n", "state_dict_pre", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# only ignore fc layer", "\n", "        ", "if", "'fc.weight'", "in", "k", "or", "'fc.bias'", "in", "k", ":", "\n", "            ", "continue", "\n", "\n", "# name in pretrained model", "\n", "", "k_pre", "=", "'module.encoder_q.'", "+", "k", "[", "len", "(", "'module.'", ")", ":", "]", "if", "k", ".", "startswith", "(", "'module.'", ")", "else", "'module.encoder_q.'", "+", "k", "\n", "\n", "assert", "(", "(", "state_dict", "[", "k", "]", ".", "cpu", "(", ")", "==", "state_dict_pre", "[", "k_pre", "]", ")", ".", "all", "(", ")", ")", ",", "'{} is changed in linear classifier training.'", ".", "format", "(", "k", ")", "\n", "\n", "", "print", "(", "\"=> sanity check passed.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_lincls.adjust_learning_rate": [[477, 484], ["None"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Decay the learning rate based on schedule\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "for", "milestone", "in", "args", ".", "schedule", ":", "\n", "        ", "lr", "*=", "0.1", "if", "epoch", ">=", "milestone", "else", "1.", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_lincls.accuracy": [[486, 501], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.__init__": [[393, 397], ["main_moco.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.reset": [[398, 403], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update": [[404, 409], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.__str__": [[410, 413], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.ProgressMeter.__init__": [[416, 420], ["main_moco.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.ProgressMeter.display": [[421, 425], ["print", "str", "main_moco.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.ProgressMeter._get_batch_fmtstr": [[426, 430], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.main": [[110, 157], ["parser.parse_args", "os.path.join", "os.path.join", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "str", "os.path.join", "os.path.exists", "os.makedirs", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "main_moco.main_worker", "len", "parser.parse_args.gpus.split", "parser.parse_args.data.split", "parser.parse_args.pretrained.split"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpus", "\n", "\n", "args", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'moco'", ",", "str", "(", "args", ".", "input_size", ")", ",", "args", ".", "arch", ")", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "args", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'pretrained_from_{}'", ".", "format", "(", "args", ".", "pretrained", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", ")", "\n", "", "args", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'gpus_{}_lr_{}_to_{}_bs_{}_epochs_{}_path_{}'", ".", "format", "(", "len", "(", "args", ".", "gpus", ".", "split", "(", "','", ")", ")", ",", "\n", "args", ".", "lr", ",", "\n", "args", ".", "end_lr", ",", "\n", "args", ".", "batch_size", ",", "\n", "args", ".", "epochs", ",", "\n", "args", ".", "data", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_dir", ")", "\n", "\n", "", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.main_worker": [[159, 336], ["print", "moco.builder.MoCo", "moco.builder.MoCo", "print", "torch.CrossEntropyLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "os.path.join", "torchvision.Normalize", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "time.time", "range", "time.time", "print", "print", "torch.init_process_group", "model.cuda.parameters", "os.path.isfile", "os.path.isfile", "moco.loader.TwoCropsTransform", "moco.loader.TwoCropsTransform", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "main_moco.adjust_learning_rate", "main_moco.train", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "model.cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "NotImplementedError", "NotImplementedError", "torch.CrossEntropyLoss", "print", "model.cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "print", "print", "print", "print", "torchvision.RandomResizedCrop", "torchvision.RandomApply", "torchvision.RandomGrayscale", "torchvision.RandomApply", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.RandomResizedCrop", "torchvision.RandomGrayscale", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler.set_epoch", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "state_dict.keys", "state_dict[].size", "[].size", "print", "list", "model.cuda.load_state_dict", "print", "print", "model.cuda.load_state_dict", "main_moco.save_checkpoint", "state_dict.keys", "set", "torchvision.ColorJitter", "moco.loader.GaussianBlur", "moco.loader.GaussianBlur", "model.cuda.state_dict", "torch.optim.SGD.state_dict", "model.cuda.state_dict"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.adjust_learning_rate", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.train", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.save_checkpoint"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "args", ".", "gpu", "=", "gpu", "\n", "\n", "# suppress printing if not master", "\n", "if", "args", ".", "multiprocessing_distributed", "and", "args", ".", "gpu", "!=", "0", ":", "\n", "        ", "def", "print_pass", "(", "*", "args", ")", ":", "\n", "            ", "pass", "\n", "", "builtins", ".", "print", "=", "print_pass", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "# create model", "\n", "", "print", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "base_model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "\n", "\n", "model", "=", "moco", ".", "builder", ".", "MoCo", "(", "\n", "base_model", ",", "\n", "args", ".", "moco_dim", ",", "args", ".", "moco_k", ",", "args", ".", "moco_m", ",", "args", ".", "moco_t", ",", "args", ".", "mlp", ")", "\n", "print", "(", "model", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "(", "args", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# comment out the following line for debugging", "\n", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "", "else", ":", "\n", "# AllGather implementation (batch shuffle, queue update, etc.) in", "\n", "# this code only supports DistributedDataParallel.", "\n", "        ", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "if", "args", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "loc", ")", "\n", "", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "\n", "# optionally resume from a checkpoint", "\n", "", "", "if", "args", ".", "pretrained", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "pretrained", ")", ":", "\n", "            ", "print", "(", "\"=> loading pretrain weight '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "if", "args", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ",", "map_location", "=", "loc", ")", "\n", "\n", "", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "print", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "\n", "#not load queue", "\n", "if", "state_dict", "[", "'module.queue'", "]", ".", "size", "(", ")", "!=", "model", ".", "state_dict", "(", ")", "[", "'module.queue'", "]", ".", "size", "(", ")", ":", "\n", "                ", "print", "(", "'queue size not equal, not loading queue'", ")", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "if", "'queue'", "in", "k", ":", "\n", "                        ", "del", "state_dict", "[", "k", "]", "\n", "", "", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "set", "(", "msg", ".", "missing_keys", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'normal loading'", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "print", "(", "\"=> loaded pretrained weight '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no pretrained weight found at '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "args", ".", "aug_plus", ":", "\n", "# MoCo v2's aug: similar to SimCLR https://arxiv.org/abs/2002.05709", "\n", "        ", "augmentation", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "args", ".", "input_size", ",", "scale", "=", "(", "0.2", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.1", ")", "# not strengthened", "\n", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "moco", ".", "loader", ".", "GaussianBlur", "(", "[", ".1", ",", "2.", "]", ")", "]", ",", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", "\n", "", "else", ":", "\n", "# MoCo v1's aug: the same as InstDisc https://arxiv.org/abs/1805.01978", "\n", "        ", "augmentation", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "args", ".", "input_size", ",", "scale", "=", "(", "0.2", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", "\n", "\n", "", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "moco", ".", "loader", ".", "TwoCropsTransform", "(", "transforms", ".", "Compose", "(", "augmentation", ")", ")", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "train_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "            ", "if", "epoch", "%", "100", "==", "0", "or", "epoch", "==", "args", ".", "epochs", "-", "1", ":", "\n", "                ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "False", ",", "root", "=", "args", ".", "save_dir", ",", "filename", "=", "'checkpoint_{:04d}.pth.tar'", ".", "format", "(", "epoch", ")", ")", "\n", "", "", "", "train_end", "=", "time", ".", "time", "(", ")", "\n", "\n", "print", "(", "'total training time elapses {} hours'", ".", "format", "(", "(", "train_end", "-", "train_start", ")", "/", "3600.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.train": [[338, 384], ["main_moco.AverageMeter", "main_moco.AverageMeter", "main_moco.AverageMeter", "main_moco.AverageMeter", "main_moco.AverageMeter", "main_moco.ProgressMeter", "model.train", "time.time", "enumerate", "len", "main_moco.AverageMeter.update", "model", "criterion", "main_moco.accuracy", "main_moco.AverageMeter.update", "main_moco.AverageMeter.update", "main_moco.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "main_moco.AverageMeter.update", "time.time", "images[].cuda", "images[].cuda", "criterion.item", "images[].size", "images[].size", "images[].size", "main_moco.ProgressMeter.display", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.train", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.accuracy", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.ProgressMeter.display"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", ",", "(", "images", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "[", "0", "]", "=", "images", "[", "0", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "images", "[", "1", "]", "=", "images", "[", "1", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "output", ",", "target", "=", "model", "(", "im_q", "=", "images", "[", "0", "]", ",", "im_k", "=", "images", "[", "1", "]", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# acc1/acc5 are (K+1)-way contrast classifier accuracy", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.save_checkpoint": [[385, 389], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "shutil.copyfile", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "root", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ",", "os", ".", "path", ".", "join", "(", "root", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.adjust_learning_rate": [[432, 442], ["math.cos"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Decay the learning rate based on schedule\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "args", ".", "cos", ":", "# cosine lr schedule", "\n", "        ", "lr", "=", "args", ".", "end_lr", "+", "(", "args", ".", "lr", "-", "args", ".", "end_lr", ")", "*", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch", "/", "args", ".", "epochs", ")", ")", "\n", "", "else", ":", "# stepwise lr schedule", "\n", "        ", "for", "milestone", "in", "args", ".", "schedule", ":", "\n", "            ", "lr", "*=", "0.1", "if", "epoch", ">=", "milestone", "else", "1.", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.accuracy": [[444, 459], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].contiguous().view().float().sum", "res.append", "correct[].contiguous().view().float().sum.mul_", "target.view", "correct[].contiguous().view().float", "correct[].contiguous().view", "correct[].contiguous"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.detection.train_net.Res5ROIHeadsExtraNorm._build_res5_block": [[20, 26], ["super()._build_res5_block", "detectron2.layers.get_norm", "seq.add_module"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.detection.train_net.Res5ROIHeadsExtraNorm._build_res5_block"], ["def", "_build_res5_block", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "seq", ",", "out_channels", "=", "super", "(", ")", ".", "_build_res5_block", "(", "cfg", ")", "\n", "norm", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "NORM", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", "\n", "seq", ".", "add_module", "(", "\"norm\"", ",", "norm", ")", "\n", "return", "seq", ",", "out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.detection.train_net.Trainer.build_evaluator": [[29, 38], ["os.path.join", "detectron2.evaluation.COCOEvaluator", "detectron2.evaluation.PascalVOCDetectionEvaluator"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "build_evaluator", "(", "cls", ",", "cfg", ",", "dataset_name", ",", "output_folder", "=", "None", ")", ":", "\n", "        ", "if", "output_folder", "is", "None", ":", "\n", "            ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"inference\"", ")", "\n", "", "if", "\"coco\"", "in", "dataset_name", ":", "\n", "            ", "return", "COCOEvaluator", "(", "dataset_name", ",", "cfg", ",", "True", ",", "output_folder", ")", "\n", "", "else", ":", "\n", "            ", "assert", "\"voc\"", "in", "dataset_name", "\n", "return", "PascalVOCDetectionEvaluator", "(", "dataset_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.detection.train_net.setup": [[40, 47], ["detectron2.config.get_cfg", "detectron2.config.get_cfg.merge_from_file", "detectron2.config.get_cfg.merge_from_list", "detectron2.config.get_cfg.freeze", "detectron2.engine.default_setup"], "function", ["None"], ["", "", "", "def", "setup", "(", "args", ")", ":", "\n", "    ", "cfg", "=", "get_cfg", "(", ")", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "default_setup", "(", "cfg", ",", "args", ")", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.detection.train_net.main": [[49, 63], ["train_net.setup", "train_net.Trainer", "Trainer.resume_or_load", "Trainer.train", "Trainer.build_model", "detectron2.checkpoint.DetectionCheckpointer().resume_or_load", "Trainer.test", "detectron2.checkpoint.DetectionCheckpointer"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.detection.train_net.setup", "home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.train"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "cfg", "=", "setup", "(", "args", ")", "\n", "\n", "if", "args", ".", "eval_only", ":", "\n", "        ", "model", "=", "Trainer", ".", "build_model", "(", "cfg", ")", "\n", "DetectionCheckpointer", "(", "model", ",", "save_dir", "=", "cfg", ".", "OUTPUT_DIR", ")", ".", "resume_or_load", "(", "\n", "cfg", ".", "MODEL", ".", "WEIGHTS", ",", "resume", "=", "args", ".", "resume", "\n", ")", "\n", "res", "=", "Trainer", ".", "test", "(", "cfg", ",", "model", ")", "\n", "return", "res", "\n", "\n", "", "trainer", "=", "Trainer", "(", "cfg", ")", "\n", "trainer", ".", "resume_or_load", "(", "resume", "=", "args", ".", "resume", ")", "\n", "return", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.tools.create_small_imagenet.sample_per_class": [[7, 19], ["os.path.join", "os.listdir", "os.path.join", "os.listdir", "numpy.random.choice", "os.path.join", "len", "os.path.exists", "os.makedirs", "shutil.copy", "os.path.join", "os.path.join"], "function", ["None"], ["def", "sample_per_class", "(", "src_root", ",", "target_root", ",", "n", "=", "10", ")", ":", "\n", "    ", "target_root", "=", "os", ".", "path", ".", "join", "(", "target_root", ",", "'small_imagenet_class_1000_n_{}'", ".", "format", "(", "n", ")", ",", "'train'", ")", "\n", "for", "category", "in", "os", ".", "listdir", "(", "src_root", ")", ":", "\n", "        ", "category_root", "=", "os", ".", "path", ".", "join", "(", "src_root", ",", "category", ")", "\n", "filenames", "=", "os", ".", "listdir", "(", "category_root", ")", "\n", "\n", "selected_files", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "filenames", ")", ",", "n", ",", "replace", "=", "False", ")", "\n", "dirname", "=", "os", ".", "path", ".", "join", "(", "target_root", ",", "category", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dirname", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "", "for", "i", "in", "selected_files", ":", "\n", "            ", "shutil", ".", "copy", "(", "os", ".", "path", ".", "join", "(", "category_root", ",", "filenames", "[", "i", "]", ")", ",", "os", ".", "path", ".", "join", "(", "dirname", ",", "filenames", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.tools.create_small_imagenet.sample_class": [[23, 43], ["os.path.join", "os.listdir", "numpy.random.choice", "len", "os.path.join", "os.listdir", "numpy.random.choice", "os.path.join", "len", "os.path.exists", "os.makedirs", "shutil.copy", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "", "def", "sample_class", "(", "src_root", ",", "target_root", ",", "class_number", "=", "10", ",", "total_number", "=", "10000", ")", ":", "\n", "    ", "target_root", "=", "os", ".", "path", ".", "join", "(", "target_root", ",", "'small_imagenet_class_{}_total_{}'", ".", "format", "(", "class_number", ",", "total_number", ")", ",", "'train'", ")", "\n", "\n", "categories", "=", "os", ".", "listdir", "(", "src_root", ")", "\n", "selected_categories", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "categories", ")", ",", "class_number", ",", "replace", "=", "False", ")", "\n", "\n", "n", "=", "total_number", "//", "class_number", "\n", "\n", "for", "i", "in", "selected_categories", ":", "\n", "        ", "category", "=", "categories", "[", "i", "]", "\n", "\n", "category_root", "=", "os", ".", "path", ".", "join", "(", "src_root", ",", "category", ")", "\n", "filenames", "=", "os", ".", "listdir", "(", "category_root", ")", "\n", "\n", "selected_files", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "filenames", ")", ",", "n", ",", "replace", "=", "False", ")", "\n", "dirname", "=", "os", ".", "path", ".", "join", "(", "target_root", ",", "category", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dirname", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "", "for", "i", "in", "selected_files", ":", "\n", "            ", "shutil", ".", "copy", "(", "os", ".", "path", ".", "join", "(", "category_root", ",", "filenames", "[", "i", "]", ")", ",", "os", ".", "path", ".", "join", "(", "dirname", ",", "filenames", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.tools.create_small_imagenet.sample_total": [[47, 72], ["os.path.join", "os.listdir", "print", "numpy.random.choice", "os.path.join", "os.listdir", "len", "len", "os.path.join", "os.path.join", "shutil.copy", "all_filenames.append", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "filename.split", "filename.split"], "function", ["None"], ["", "", "", "def", "sample_total", "(", "src_root", ",", "target_root", ",", "total_number", "=", "10000", ")", ":", "\n", "    ", "target_root", "=", "os", ".", "path", ".", "join", "(", "target_root", ",", "'small_imagenet_total_{}'", ".", "format", "(", "total_number", ")", ",", "'train'", ")", "\n", "\n", "all_filenames", "=", "[", "]", "\n", "for", "category", "in", "os", ".", "listdir", "(", "src_root", ")", ":", "\n", "        ", "category_root", "=", "os", ".", "path", ".", "join", "(", "src_root", ",", "category", ")", "\n", "filenames", "=", "os", ".", "listdir", "(", "category_root", ")", "\n", "for", "filename", "in", "filenames", ":", "\n", "            ", "temp", "=", "'{}/{}'", ".", "format", "(", "category", ",", "filename", ")", "\n", "all_filenames", ".", "append", "(", "temp", ")", "\n", "\n", "", "", "print", "(", "len", "(", "all_filenames", ")", ")", "\n", "\n", "selected_files", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "all_filenames", ")", ",", "total_number", ",", "replace", "=", "False", ")", "\n", "\n", "for", "i", "in", "selected_files", ":", "\n", "        ", "filename", "=", "all_filenames", "[", "i", "]", "\n", "category", ",", "name", "=", "filename", ".", "split", "(", "'/'", ")", "[", "0", "]", ",", "filename", ".", "split", "(", "'/'", ")", "[", "1", "]", "\n", "category_root", "=", "os", ".", "path", ".", "join", "(", "src_root", ",", "category", ")", "\n", "\n", "dirname", "=", "os", ".", "path", ".", "join", "(", "target_root", ",", "category", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dirname", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "\n", "", "shutil", ".", "copy", "(", "os", ".", "path", ".", "join", "(", "category_root", ",", "name", ")", ",", "os", ".", "path", ".", "join", "(", "dirname", ",", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.tools.generate_mask.to_variable": [[18, 22], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "x.cuda.cuda"], "function", ["None"], ["def", "to_variable", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "", "return", "Variable", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.tools.generate_mask.to_data": [[23, 27], ["torch.cuda.is_available", "torch.cuda.is_available", "x.cpu.cpu"], "function", ["None"], ["", "def", "to_data", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cpu", "(", ")", "\n", "", "return", "x", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.tools.generate_mask.get_mask": [[67, 92], ["transform", "torch.unsqueeze", "torch.unsqueeze", "generate_mask.to_variable", "model", "generate_mask.to_data", "torch.squeeze", "torch.squeeze", "np.transpose.numpy", "numpy.transpose", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.ImageNet_SCDA_heatmap.to_variable", "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.ImageNet_SCDA_heatmap.to_data"], ["def", "get_mask", "(", "raw_img", ")", ":", "\n", "    ", "img", "=", "transform", "(", "raw_img", ")", "\n", "img", "=", "torch", ".", "unsqueeze", "(", "img", ",", "0", ")", "\n", "img", "=", "to_variable", "(", "img", ")", "\n", "\n", "vis", "=", "model", "(", "img", ")", "\n", "vis", "=", "to_data", "(", "vis", ")", "\n", "\n", "#print(vis.size())", "\n", "\n", "# DDT", "\n", "vis", "=", "torch", ".", "squeeze", "(", "vis", ")", "\n", "vis", "=", "vis", ".", "numpy", "(", ")", "\n", "\n", "vis", "=", "np", ".", "transpose", "(", "vis", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "he", ",", "we", ",", "ce", "=", "vis", ".", "shape", "\n", "\n", "vis_sum", "=", "np", ".", "sum", "(", "vis", ",", "axis", "=", "2", ")", "\n", "#vis_mean = np.mean(vis_sum)", "\n", "#vis_mean = np.percentile(vis_sum, 49)", "\n", "\n", "#highlight = np.zeros((he, we))", "\n", "#highlight[vis_sum > vis_mean] = 1", "\n", "\n", "return", "vis_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.tools.generate_mask.convert_index_to_list": [[94, 96], ["list", "zip"], "function", ["None"], ["", "def", "convert_index_to_list", "(", "index", ")", ":", "\n", "    ", "return", "list", "(", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.tools.generate_mask.crop_patches": [[97, 110], ["numpy.asarray", "range", "range", "postive_patches.append", "negative_patches.append"], "function", ["None"], ["", "def", "crop_patches", "(", "img", ",", "FG_index", ",", "BG_index", ",", "feat_size", ",", "patch_size", ")", ":", "\n", "    ", "postive_patches", "=", "[", "]", "\n", "negative_patches", "=", "[", "]", "\n", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "for", "i", "in", "range", "(", "feat_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "feat_size", ")", ":", "\n", "            ", "temp", "=", "img", "[", "i", "*", "patch_size", ":", "(", "i", "+", "1", ")", "*", "patch_size", ",", "j", "*", "patch_size", ":", "(", "j", "+", "1", ")", "*", "patch_size", "]", "\n", "if", "(", "i", ",", "j", ")", "in", "FG_index", ":", "\n", "                ", "postive_patches", ".", "append", "(", "temp", ")", "\n", "", "if", "(", "i", ",", "j", ")", "in", "BG_index", ":", "\n", "                ", "negative_patches", ".", "append", "(", "temp", ")", "\n", "\n", "", "", "", "return", "postive_patches", ",", "negative_patches", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.tools.generate_mask.merge_patches": [[111, 144], ["patches.extend", "patches.extend", "print", "numpy.random.permutation", "print", "numpy.zeros", "range", "print", "PIL.Image.fromarray", "Image.fromarray.show", "len", "len", "len", "numpy.array", "range"], "function", ["None"], ["", "def", "merge_patches", "(", "patches_A", ",", "patches_B", ",", "feat_size", ",", "patch_size", ")", ":", "\n", "    ", "patches", "=", "[", "]", "\n", "patches", ".", "extend", "(", "patches_A", ")", "\n", "patches", ".", "extend", "(", "patches_B", ")", "\n", "\n", "print", "(", "len", "(", "patches_A", ")", ",", "len", "(", "patches_B", ")", ")", "\n", "\n", "#for i in range(5):", "\n", "#    patch = Image.fromarray(patches_A[i])", "\n", "#    patch.show()", "\n", "\n", "m", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "patches", ")", ")", "\n", "print", "(", "m", ")", "\n", "\n", "selected_patches", "=", "np", ".", "array", "(", "patches", ")", "[", "m", "]", "\n", "\n", "new_img", "=", "np", ".", "zeros", "(", "(", "feat_size", "*", "patch_size", ",", "feat_size", "*", "patch_size", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "for", "i", "in", "range", "(", "feat_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "feat_size", ")", ":", "\n", "            ", "new_img", "[", "i", "*", "patch_size", ":", "(", "i", "+", "1", ")", "*", "patch_size", ",", "j", "*", "patch_size", ":", "(", "j", "+", "1", ")", "*", "patch_size", "]", "=", "selected_patches", "[", "i", "*", "feat_size", "+", "j", "]", "\n", "\n", "", "", "print", "(", "new_img", ".", "shape", ")", "\n", "#print(new_img.shape)", "\n", "\n", "#new_img = Image.new('RGB', (patch_size, patch_size*feat_size*feat_size), 255)", "\n", "\n", "#for i, patch in enumerate(selected_patches):", "\n", "#    new_img.paste(Image.fromarray(patch), (0, patch_size*i))", "\n", "\n", "#new_img = new_img.resize(feat_size*patch_size, feat_size*patch_size)", "\n", "new_img", "=", "Image", ".", "fromarray", "(", "new_img", ")", "\n", "new_img", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset_completely_random.DatasetFolder.__init__": [[217, 255], ["torch.utils.data.Dataset.__init__", "dynamic_transform_dataset_completely_random.DatasetFolder.find_classes", "dynamic_transform_dataset_completely_random.DatasetFolder.make_dataset", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.find_classes", "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.make_dataset"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ":", "str", ",", "\n", "mask_file", ":", "str", ",", "\n", "bg_prob", ":", "float", ",", "\n", "loader", ":", "Callable", "[", "[", "str", "]", ",", "Any", "]", ",", "\n", "extensions", ":", "Optional", "[", "Tuple", "[", "str", ",", "...", "]", "]", "=", "None", ",", "\n", "transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "is_valid_file", ":", "Optional", "[", "Callable", "[", "[", "str", "]", ",", "bool", "]", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "DatasetFolder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "self", ".", "bg_prob", "=", "bg_prob", "\n", "\n", "classes", ",", "class_to_idx", "=", "self", ".", "find_classes", "(", "self", ".", "root", ")", "\n", "samples", "=", "self", ".", "make_dataset", "(", "self", ".", "root", ",", "class_to_idx", ",", "extensions", ",", "is_valid_file", ")", "\n", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "extensions", "=", "extensions", "\n", "\n", "\n", "with", "open", "(", "mask_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "t", "=", "json", ".", "load", "(", "f", ")", "\n", "self", ".", "mask", "=", "t", "\n", "#keys = list(t.keys())", "\n", "#mask = np.array(t[keys[0]])", "\n", "#print(mask.shape)", "\n", "\n", "\n", "", "self", ".", "classes", "=", "classes", "\n", "self", ".", "class_to_idx", "=", "class_to_idx", "\n", "self", ".", "samples", "=", "samples", "\n", "self", ".", "targets", "=", "[", "s", "[", "1", "]", "for", "s", "in", "samples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset_completely_random.DatasetFolder.make_dataset": [[256, 264], ["dynamic_transform_dataset_completely_random.DatasetFolder.make_dataset"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.make_dataset"], ["", "@", "staticmethod", "\n", "def", "make_dataset", "(", "\n", "directory", ":", "str", ",", "\n", "class_to_idx", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "extensions", ":", "Optional", "[", "Tuple", "[", "str", ",", "...", "]", "]", "=", "None", ",", "\n", "is_valid_file", ":", "Optional", "[", "Callable", "[", "[", "str", "]", ",", "bool", "]", "]", "=", "None", ",", "\n", ")", "->", "List", "[", "Tuple", "[", "str", ",", "int", "]", "]", ":", "\n", "        ", "return", "make_dataset", "(", "directory", ",", "class_to_idx", ",", "extensions", "=", "extensions", ",", "is_valid_file", "=", "is_valid_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset_completely_random.DatasetFolder.find_classes": [[265, 271], ["dynamic_transform_dataset_completely_random.DatasetFolder.find_classes"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.find_classes"], ["", "def", "find_classes", "(", "self", ",", "dir", ":", "str", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "Dict", "[", "str", ",", "int", "]", "]", ":", "\n", "        ", "\"\"\"Same as :func:`find_classes`.\n        This method can be overridden to only consider\n        a subset of classes, or to adapt to a different dataset directory structure.\n        \"\"\"", "\n", "return", "find_classes", "(", "dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset_completely_random.DatasetFolder.__getitem__": [[272, 354], ["dynamic_transform_dataset_completely_random.DatasetFolder.loader", "numpy.array", "numpy.dstack", "dynamic_transform_dataset_completely_random.convert_index_to_list", "random.sample", "random.uniform", "random.uniform", "numpy.unravel_index", "list", "random.choice", "dynamic_transform_dataset_completely_random.DatasetFolder.loader", "numpy.array", "numpy.dstack", "dynamic_transform_dataset_completely_random.convert_index_to_list", "random.sample", "copy.deepcopy", "dynamic_transform_dataset_completely_random.merge_crop_patches", "dynamic_transform_dataset_completely_random.DatasetFolder.transform", "dynamic_transform_dataset_completely_random.DatasetFolder.transform", "dynamic_transform_dataset_completely_random.DatasetFolder.target_transform", "path.split", "numpy.argsort", "range", "numpy.unravel_index", "len", "path_B.split", "numpy.argsort", "numpy.array.ravel", "numpy.array.ravel"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.convert_index_to_list", "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.convert_index_to_list", "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.merge_crop_patches"], ["", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", "->", "Tuple", "[", "Any", ",", "Any", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (sample, target) where target is class_index of the target class.\n        \"\"\"", "\n", "input_size", "=", "224", "\n", "\n", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "img_A", "=", "self", ".", "loader", "(", "path", ")", "\n", "key_A", "=", "'/'", ".", "join", "(", "path", ".", "split", "(", "'/'", ")", "[", "-", "2", ":", "]", ")", "\n", "mask_A", "=", "np", ".", "array", "(", "self", ".", "mask", "[", "key_A", "]", ")", "\n", "\n", "\n", "#print(len(FG_index_A), len(BG_index_A), len(FG_index_B), len(BG_index_B))", "\n", "feat_size", "=", "mask_A", ".", "shape", "[", "0", "]", "\n", "patch_size", "=", "input_size", "//", "mask_A", ".", "shape", "[", "0", "]", "#should be 32", "\n", "#print('feat size, patch size', feat_size, patch_size)", "\n", "\n", "index_A", "=", "np", ".", "dstack", "(", "np", ".", "unravel_index", "(", "np", ".", "argsort", "(", "-", "mask_A", ".", "ravel", "(", ")", ")", ",", "(", "feat_size", ",", "feat_size", ")", ")", ")", "\n", "index_A", "=", "convert_index_to_list", "(", "index_A", ")", "\n", "\n", "#FG_index_A = index_A[:8]", "\n", "#BG_index_A = index_A[8:]", "\n", "FG_index_A", "=", "random", ".", "sample", "(", "index_A", ",", "8", ")", "\n", "\n", "temp1", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "temp2", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "\n", "#print(temp)", "\n", "if", "temp1", "<", "self", ".", "bg_prob", ":", "\n", "            ", "all_index", "=", "list", "(", "range", "(", "len", "(", "self", ".", "samples", ")", ")", ")", "\n", "index_B", "=", "random", ".", "choice", "(", "all_index", ")", "\n", "\n", "path_B", ",", "_", "=", "self", ".", "samples", "[", "index_B", "]", "\n", "img_B", "=", "self", ".", "loader", "(", "path_B", ")", "\n", "key_B", "=", "'/'", ".", "join", "(", "path_B", ".", "split", "(", "'/'", ")", "[", "-", "2", ":", "]", ")", "\n", "mask_B", "=", "np", ".", "array", "(", "self", ".", "mask", "[", "key_B", "]", ")", "\n", "index_B", "=", "np", ".", "dstack", "(", "np", ".", "unravel_index", "(", "np", ".", "argsort", "(", "-", "mask_B", ".", "ravel", "(", ")", ")", ",", "(", "feat_size", ",", "feat_size", ")", ")", ")", "\n", "index_B", "=", "convert_index_to_list", "(", "index_B", ")", "\n", "#FG_index_B = index_B[:8]", "\n", "#BG_index_B = index_B[8:]", "\n", "\n", "BG_index_B", "=", "random", ".", "sample", "(", "index_B", ",", "8", ")", "\n", "\n", "temp_img_A", "=", "deepcopy", "(", "img_A", ")", "\n", "img1", "=", "merge_crop_patches", "(", "temp_img_A", ",", "img_B", ",", "FG_index_A", ",", "BG_index_B", ",", "feat_size", ",", "patch_size", ")", "\n", "", "else", ":", "\n", "            ", "img1", "=", "img_A", "\n", "", "'''\n        if temp2<self.bg_prob:\n            all_index = list(range(len(self.samples)))\n            index_B = random.choice(all_index)\n\n            path_B, _ = self.samples[index_B]\n            img_B = self.loader(path_B)\n            key_B = '/'.join(path_B.split('/')[-2:])\n            mask_B = np.array(self.mask[key_B])\n            index_B = np.dstack(np.unravel_index(np.argsort(-mask_B.ravel()), (feat_size, feat_size)))\n            index_B = convert_index_to_list(index_B)\n            FG_index_B = index_B[:8]\n            BG_index_B = index_B[8:]\n\n            temp_img_A = deepcopy(img_A)\n            img2 = merge_crop_patches(temp_img_A, img_B, FG_index_A, BG_index_B, feat_size, patch_size)\n        else:\n            img2 = img_A\n        '''", "\n", "\n", "img2", "=", "img_A", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "#sample = self.transform(sample)", "\n", "            ", "img1", "=", "self", ".", "transform", "(", "img1", ")", "\n", "img2", "=", "self", ".", "transform", "(", "img2", ")", "\n", "#neg_A_neg_B = self.transform(neg_A_neg_B)", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "[", "img1", ",", "img2", "]", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset_completely_random.DatasetFolder.__len__": [[355, 357], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset_completely_random.ImageFolder.__init__": [[410, 425], ["dynamic_transform_dataset_completely_random.DatasetFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ":", "str", ",", "\n", "mask_file", ":", "str", ",", "\n", "bg_prob", ":", "float", ",", "\n", "transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "loader", ":", "Callable", "[", "[", "str", "]", ",", "Any", "]", "=", "default_loader", ",", "\n", "is_valid_file", ":", "Optional", "[", "Callable", "[", "[", "str", "]", ",", "bool", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ImageFolder", ",", "self", ")", ".", "__init__", "(", "root", ",", "mask_file", ",", "bg_prob", ",", "loader", ",", "IMG_EXTENSIONS", "if", "is_valid_file", "is", "None", "else", "None", ",", "\n", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ",", "\n", "is_valid_file", "=", "is_valid_file", ")", "\n", "self", ".", "imgs", "=", "self", ".", "samples", "", "", "", ""]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset_completely_random.has_file_allowed_extension": [[13, 22], ["filename.lower().endswith", "filename.lower"], "function", ["None"], ["def", "has_file_allowed_extension", "(", "filename", ":", "str", ",", "extensions", ":", "Tuple", "[", "str", ",", "...", "]", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Checks if a file is an allowed extension.\n    Args:\n        filename (string): path to a file\n        extensions (tuple of strings): extensions to consider (lowercase)\n    Returns:\n        bool: True if the filename ends with one of given extensions\n    \"\"\"", "\n", "return", "filename", ".", "lower", "(", ")", ".", "endswith", "(", "extensions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset_completely_random.is_image_file": [[24, 32], ["dynamic_transform_dataset_completely_random.has_file_allowed_extension"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.has_file_allowed_extension"], ["", "def", "is_image_file", "(", "filename", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Checks if a file is an allowed image extension.\n    Args:\n        filename (string): path to a file\n    Returns:\n        bool: True if the filename ends with a known image extension\n    \"\"\"", "\n", "return", "has_file_allowed_extension", "(", "filename", ",", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset_completely_random.find_classes": [[34, 61], ["sorted", "FileNotFoundError", "enumerate", "os.scandir", "os.scandir", "entry.is_dir"], "function", ["None"], ["", "def", "find_classes", "(", "directory", ":", "str", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "Dict", "[", "str", ",", "int", "]", "]", ":", "\n", "    ", "\"\"\"Finds the class folders in a dataset structured as follows:\n    .. code::\n        directory/\n        \u00c2\u00a9\u00c3\u0080\u00c2\u00a9\u00c2\u00a4\u00c2\u00a9\u00c2\u00a4 class_x\n        \u00c2\u00a9\u00c2\u00a6   \u00c2\u00a9\u00c3\u0080\u00c2\u00a9\u00c2\u00a4\u00c2\u00a9\u00c2\u00a4 xxx.ext\n        \u00c2\u00a9\u00c2\u00a6   \u00c2\u00a9\u00c3\u0080\u00c2\u00a9\u00c2\u00a4\u00c2\u00a9\u00c2\u00a4 xxy.ext\n        \u00c2\u00a9\u00c2\u00a6   \u00c2\u00a9\u00c2\u00b8\u00c2\u00a9\u00c2\u00a4\u00c2\u00a9\u00c2\u00a4 ...\n        \u00c2\u00a9\u00c2\u00a6       \u00c2\u00a9\u00c2\u00b8\u00c2\u00a9\u00c2\u00a4\u00c2\u00a9\u00c2\u00a4 xxz.ext\n        \u00c2\u00a9\u00c2\u00b8\u00c2\u00a9\u00c2\u00a4\u00c2\u00a9\u00c2\u00a4 class_y\n            \u00c2\u00a9\u00c3\u0080\u00c2\u00a9\u00c2\u00a4\u00c2\u00a9\u00c2\u00a4 123.ext\n            \u00c2\u00a9\u00c3\u0080\u00c2\u00a9\u00c2\u00a4\u00c2\u00a9\u00c2\u00a4 nsdf3.ext\n            \u00c2\u00a9\u00c2\u00b8\u00c2\u00a9\u00c2\u00a4\u00c2\u00a9\u00c2\u00a4 ...\n                \u00c2\u00a9\u00c2\u00b8\u00c2\u00a9\u00c2\u00a4\u00c2\u00a9\u00c2\u00a4 asd932_.ext\n    Args:\n        directory (str): Root directory path.\n    Raises:\n        FileNotFoundError: If ``directory`` has no class folders.\n    Returns:\n        (Tuple[List[str], Dict[str, int]]): List of all classes and dictionary mapping each class to an index.\n    \"\"\"", "\n", "classes", "=", "sorted", "(", "entry", ".", "name", "for", "entry", "in", "os", ".", "scandir", "(", "directory", ")", "if", "entry", ".", "is_dir", "(", ")", ")", "\n", "if", "not", "classes", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "f\"Couldn't find any class folder in {directory}.\"", ")", "\n", "\n", "", "class_to_idx", "=", "{", "cls_name", ":", "i", "for", "i", ",", "cls_name", "in", "enumerate", "(", "classes", ")", "}", "\n", "return", "classes", ",", "class_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset_completely_random.make_dataset": [[63, 131], ["os.path.expanduser", "os.path.expanduser", "typing.cast", "set", "sorted", "dynamic_transform_dataset_completely_random.find_classes", "ValueError", "class_to_idx.keys", "os.path.join", "os.path.join", "sorted", "set", "FileNotFoundError", "ValueError", "dynamic_transform_dataset_completely_random.has_file_allowed_extension", "os.path.isdir", "os.path.isdir", "os.walk", "os.walk", "sorted", "class_to_idx.keys", "typing.cast", "os.path.join", "os.path.join", "typing.cast."], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.find_classes", "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.has_file_allowed_extension"], ["", "def", "make_dataset", "(", "\n", "directory", ":", "str", ",", "\n", "class_to_idx", ":", "Optional", "[", "Dict", "[", "str", ",", "int", "]", "]", "=", "None", ",", "\n", "extensions", ":", "Optional", "[", "Tuple", "[", "str", ",", "...", "]", "]", "=", "None", ",", "\n", "is_valid_file", ":", "Optional", "[", "Callable", "[", "[", "str", "]", ",", "bool", "]", "]", "=", "None", ",", "\n", ")", "->", "List", "[", "Tuple", "[", "str", ",", "int", "]", "]", ":", "\n", "    ", "\"\"\"Generates a list of samples of a form (path_to_sample, class).\n    Args:\n        directory (str): root dataset directory\n        class_to_idx (Optional[Dict[str, int]]): Dictionary mapping class name to class index. If omitted, is generated\n            by :func:`find_classes`.\n        extensions (optional): A list of allowed extensions.\n            Either extensions or is_valid_file should be passed. Defaults to None.\n        is_valid_file (optional): A function that takes path of a file\n            and checks if the file is a valid file\n            (used to check of corrupt files) both extensions and\n            is_valid_file should not be passed. Defaults to None.\n    Raises:\n        ValueError: In case ``class_to_idx`` is empty.\n        ValueError: In case ``extensions`` and ``is_valid_file`` are None or both are not None.\n        FileNotFoundError: In case no valid file was found for any class.\n    Returns:\n        List[Tuple[str, int]]: samples of a form (path_to_sample, class)\n    \"\"\"", "\n", "directory", "=", "os", ".", "path", ".", "expanduser", "(", "directory", ")", "\n", "\n", "if", "class_to_idx", "is", "None", ":", "\n", "        ", "_", ",", "class_to_idx", "=", "find_classes", "(", "directory", ")", "\n", "", "elif", "not", "class_to_idx", ":", "\n", "        ", "raise", "ValueError", "(", "\"'class_to_index' must have at least one entry to collect any samples.\"", ")", "\n", "\n", "", "both_none", "=", "extensions", "is", "None", "and", "is_valid_file", "is", "None", "\n", "both_something", "=", "extensions", "is", "not", "None", "and", "is_valid_file", "is", "not", "None", "\n", "if", "both_none", "or", "both_something", ":", "\n", "        ", "raise", "ValueError", "(", "\"Both extensions and is_valid_file cannot be None or not None at the same time\"", ")", "\n", "\n", "", "if", "extensions", "is", "not", "None", ":", "\n", "\n", "        ", "def", "is_valid_file", "(", "x", ":", "str", ")", "->", "bool", ":", "\n", "            ", "return", "has_file_allowed_extension", "(", "x", ",", "cast", "(", "Tuple", "[", "str", ",", "...", "]", ",", "extensions", ")", ")", "\n", "\n", "", "", "is_valid_file", "=", "cast", "(", "Callable", "[", "[", "str", "]", ",", "bool", "]", ",", "is_valid_file", ")", "\n", "\n", "instances", "=", "[", "]", "\n", "available_classes", "=", "set", "(", ")", "\n", "for", "target_class", "in", "sorted", "(", "class_to_idx", ".", "keys", "(", ")", ")", ":", "\n", "        ", "class_index", "=", "class_to_idx", "[", "target_class", "]", "\n", "target_dir", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "target_class", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "target_dir", ")", ":", "\n", "            ", "continue", "\n", "", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "target_dir", ",", "followlinks", "=", "True", ")", ")", ":", "\n", "            ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "if", "is_valid_file", "(", "path", ")", ":", "\n", "                    ", "item", "=", "path", ",", "class_index", "\n", "instances", ".", "append", "(", "item", ")", "\n", "\n", "if", "target_class", "not", "in", "available_classes", ":", "\n", "                        ", "available_classes", ".", "add", "(", "target_class", ")", "\n", "\n", "", "", "", "", "", "empty_classes", "=", "set", "(", "class_to_idx", ".", "keys", "(", ")", ")", "-", "available_classes", "\n", "if", "empty_classes", ":", "\n", "        ", "msg", "=", "f\"Found no valid file for the classes {', '.join(sorted(empty_classes))}. \"", "\n", "if", "extensions", "is", "not", "None", ":", "\n", "            ", "msg", "+=", "f\"Supported extensions are: {', '.join(extensions)}\"", "\n", "", "raise", "FileNotFoundError", "(", "msg", ")", "\n", "\n", "", "return", "instances", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset_completely_random.convert_index_to_list": [[132, 136], ["list", "zip"], "function", ["None"], ["", "def", "convert_index_to_list", "(", "index", ")", ":", "\n", "#print(index)", "\n", "    ", "index", "=", "index", "[", "0", "]", "\n", "return", "list", "(", "zip", "(", "index", "[", ":", ",", "0", "]", ",", "index", "[", ":", ",", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset_completely_random.merge_crop_patches": [[138, 186], ["numpy.zeros", "np.asarray.resize", "np.asarray.resize", "numpy.asarray", "numpy.asarray", "range", "numpy.random.permutation", "range", "PIL.Image.fromarray", "new_img.resize.resize", "range", "len", "numpy.array", "range", "postive_patches_B.append"], "function", ["None"], ["", "def", "merge_crop_patches", "(", "img_A", ",", "img_B", ",", "FG_index_A", ",", "FG_index_B", ",", "feat_size", ",", "patch_size", ")", ":", "\n", "    ", "new_img", "=", "np", ".", "zeros", "(", "(", "feat_size", "*", "patch_size", ",", "feat_size", "*", "patch_size", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "origin_shape", "=", "img_A", ".", "size", "\n", "\n", "input_size", "=", "224", "\n", "\n", "#print(origin_shape)", "\n", "\n", "img_A", "=", "img_A", ".", "resize", "(", "(", "input_size", ",", "input_size", ")", ")", "\n", "img_B", "=", "img_B", ".", "resize", "(", "(", "input_size", ",", "input_size", ")", ")", "\n", "\n", "img_A", "=", "np", ".", "asarray", "(", "img_A", ")", "\n", "img_B", "=", "np", ".", "asarray", "(", "img_B", ")", "\n", "\n", "postive_patches_B", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "feat_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "feat_size", ")", ":", "\n", "            ", "temp", "=", "img_B", "[", "i", "*", "patch_size", ":", "(", "i", "+", "1", ")", "*", "patch_size", ",", "j", "*", "patch_size", ":", "(", "j", "+", "1", ")", "*", "patch_size", "]", "\n", "if", "(", "i", ",", "j", ")", "in", "FG_index_B", ":", "\n", "                ", "postive_patches_B", ".", "append", "(", "temp", ")", "\n", "\n", "", "", "", "m", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "postive_patches_B", ")", ")", "\n", "postive_patches_B", "=", "np", ".", "array", "(", "postive_patches_B", ")", "[", "m", "]", "\n", "\n", "cnt", "=", "0", "\n", "for", "i", "in", "range", "(", "feat_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "feat_size", ")", ":", "\n", "            ", "if", "(", "i", ",", "j", ")", "in", "FG_index_A", ":", "\n", "                ", "new_img", "[", "i", "*", "patch_size", ":", "(", "i", "+", "1", ")", "*", "patch_size", ",", "j", "*", "patch_size", ":", "(", "j", "+", "1", ")", "*", "patch_size", "]", "=", "img_A", "[", "i", "*", "patch_size", ":", "(", "i", "+", "1", ")", "*", "patch_size", ",", "j", "*", "patch_size", ":", "(", "j", "+", "1", ")", "*", "patch_size", "]", "\n", "", "else", ":", "\n", "                ", "new_img", "[", "i", "*", "patch_size", ":", "(", "i", "+", "1", ")", "*", "patch_size", ",", "j", "*", "patch_size", ":", "(", "j", "+", "1", ")", "*", "patch_size", "]", "=", "postive_patches_B", "[", "cnt", "]", "\n", "cnt", "+=", "1", "\n", "\n", "#print(new_img.shape)", "\n", "\n", "\n", "#print(new_img.shape)", "\n", "\n", "#new_img = Image.new('RGB', (patch_size, patch_size*feat_size*feat_size), 255)", "\n", "\n", "#for i, patch in enumerate(selected_patches):", "\n", "#    new_img.paste(Image.fromarray(patch), (0, patch_size*i))", "\n", "\n", "#new_img = new_img.resize(feat_size*patch_size, feat_size*patch_size)", "\n", "", "", "", "new_img", "=", "Image", ".", "fromarray", "(", "new_img", ")", "\n", "\n", "new_img", "=", "new_img", ".", "resize", "(", "origin_shape", ")", "\n", "return", "new_img", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset_completely_random.pil_loader": [[362, 367], ["open", "PIL.Image.open", "Image.open.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ":", "str", ")", "->", "Image", ".", "Image", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset_completely_random.accimage_loader": [[370, 377], ["accimage.Image", "dynamic_transform_dataset_completely_random.pil_loader"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.pil_loader"], ["", "", "def", "accimage_loader", "(", "path", ":", "str", ")", "->", "Any", ":", "\n", "    ", "import", "accimage", "\n", "try", ":", "\n", "        ", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset_completely_random.default_loader": [[379, 385], ["get_image_backend", "dynamic_transform_dataset_completely_random.accimage_loader", "dynamic_transform_dataset_completely_random.pil_loader"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.accimage_loader", "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.pil_loader"], ["", "", "def", "default_loader", "(", "path", ":", "str", ")", "->", "Any", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.builder.MoCo.__init__": [[11, 43], ["torch.Module.__init__", "base_encoder", "base_encoder", "zip", "builder.MoCo.register_buffer", "torch.functional.normalize", "torch.functional.normalize", "builder.MoCo.register_buffer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "builder.MoCo.encoder_q.parameters", "builder.MoCo.encoder_k.parameters", "param_k.data.copy_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "base_encoder", ",", "dim", "=", "128", ",", "K", "=", "65536", ",", "m", "=", "0.999", ",", "T", "=", "0.07", ",", "mlp", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        dim: feature dimension (default: 128)\n        K: queue size; number of negative keys (default: 65536)\n        m: moco momentum of updating key encoder (default: 0.999)\n        T: softmax temperature (default: 0.07)\n        \"\"\"", "\n", "super", "(", "MoCo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "T", "=", "T", "\n", "\n", "# create the encoders", "\n", "# num_classes is the output fc dimension", "\n", "self", ".", "encoder_q", "=", "base_encoder", "(", "num_classes", "=", "dim", ")", "\n", "self", ".", "encoder_k", "=", "base_encoder", "(", "num_classes", "=", "dim", ")", "\n", "\n", "if", "mlp", ":", "# hack: brute-force replacement", "\n", "            ", "dim_mlp", "=", "self", ".", "encoder_q", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "self", ".", "encoder_q", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "encoder_q", ".", "fc", ")", "\n", "self", ".", "encoder_k", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "encoder_k", ".", "fc", ")", "\n", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "# create the queue", "\n", "", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "dim", ",", "K", ")", ")", "\n", "self", ".", "queue", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.builder.MoCo._momentum_update_key_encoder": [[44, 51], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "builder.MoCo.encoder_q.parameters", "builder.MoCo.encoder_k.parameters"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.builder.MoCo._dequeue_and_enqueue": [[52, 67], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.concat_all_gather", "int"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.moco.builder.concat_all_gather"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n", "# gather keys before updating queue", "\n", "        ", "keys", "=", "concat_all_gather", "(", "keys", ")", "\n", "\n", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "assert", "self", ".", "K", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.builder.MoCo._batch_shuffle_ddp": [[68, 95], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.concat_all_gather", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.moco.builder.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_shuffle_ddp", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Batch shuffle, for making use of BatchNorm.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# random shuffle index", "\n", "idx_shuffle", "=", "torch", ".", "randperm", "(", "batch_size_all", ")", ".", "cuda", "(", ")", "\n", "\n", "# broadcast to all gpus", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "idx_shuffle", ",", "src", "=", "0", ")", "\n", "\n", "# index for restoring", "\n", "idx_unshuffle", "=", "torch", ".", "argsort", "(", "idx_shuffle", ")", "\n", "\n", "# shuffled index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_shuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", ",", "idx_unshuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.builder.MoCo._batch_unshuffle_ddp": [[96, 114], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.concat_all_gather", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "idx_unshuffle.view"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.moco.builder.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_unshuffle_ddp", "(", "self", ",", "x", ",", "idx_unshuffle", ")", ":", "\n", "        ", "\"\"\"\n        Undo batch shuffle.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# restored index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_unshuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.builder.MoCo.forward": [[115, 161], ["builder.MoCo.encoder_q", "torch.functional.normalize", "torch.functional.normalize", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "builder.MoCo._dequeue_and_enqueue", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.MoCo._momentum_update_key_encoder", "builder.MoCo._batch_shuffle_ddp", "builder.MoCo.encoder_k", "torch.functional.normalize", "torch.functional.normalize", "builder.MoCo._batch_unshuffle_ddp", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "builder.MoCo.queue.clone().detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "builder.MoCo.queue.clone"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.moco.builder.MoCo._dequeue_and_enqueue", "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.builder.MoCo._momentum_update_key_encoder", "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.builder.MoCo._batch_shuffle_ddp", "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.builder.MoCo._batch_unshuffle_ddp"], ["", "def", "forward", "(", "self", ",", "im_q", ",", "im_k", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            im_q: a batch of query images\n            im_k: a batch of key images\n        Output:\n            logits, targets\n        \"\"\"", "\n", "\n", "# compute query features", "\n", "q", "=", "self", ".", "encoder_q", "(", "im_q", ")", "# queries: NxC", "\n", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "            ", "self", ".", "_momentum_update_key_encoder", "(", ")", "# update the key encoder", "\n", "\n", "# shuffle for making use of BN", "\n", "im_k", ",", "idx_unshuffle", "=", "self", ".", "_batch_shuffle_ddp", "(", "im_k", ")", "\n", "\n", "k", "=", "self", ".", "encoder_k", "(", "im_k", ")", "# keys: NxC", "\n", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "# undo shuffle", "\n", "k", "=", "self", ".", "_batch_unshuffle_ddp", "(", "k", ",", "idx_unshuffle", ")", "\n", "\n", "# compute logits", "\n", "# Einstein sum is more intuitive", "\n", "# positive logits: Nx1", "\n", "", "l_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q", ",", "k", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# negative logits: NxK", "\n", "l_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q", ",", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "\n", "\n", "# logits: Nx(1+K)", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_neg", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# apply temperature", "\n", "logits", "/=", "self", ".", "T", "\n", "\n", "# labels: positive key indicators", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "# dequeue and enqueue", "\n", "self", ".", "_dequeue_and_enqueue", "(", "k", ")", "\n", "\n", "return", "logits", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.builder.concat_all_gather": [[164, 176], ["torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.DatasetFolder.__init__": [[217, 255], ["torch.utils.data.Dataset.__init__", "dynamic_transform_dataset.DatasetFolder.find_classes", "dynamic_transform_dataset.DatasetFolder.make_dataset", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.find_classes", "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.make_dataset"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ":", "str", ",", "\n", "mask_file", ":", "str", ",", "\n", "bg_prob", ":", "float", ",", "\n", "loader", ":", "Callable", "[", "[", "str", "]", ",", "Any", "]", ",", "\n", "extensions", ":", "Optional", "[", "Tuple", "[", "str", ",", "...", "]", "]", "=", "None", ",", "\n", "transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "is_valid_file", ":", "Optional", "[", "Callable", "[", "[", "str", "]", ",", "bool", "]", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "DatasetFolder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "self", ".", "bg_prob", "=", "bg_prob", "\n", "\n", "classes", ",", "class_to_idx", "=", "self", ".", "find_classes", "(", "self", ".", "root", ")", "\n", "samples", "=", "self", ".", "make_dataset", "(", "self", ".", "root", ",", "class_to_idx", ",", "extensions", ",", "is_valid_file", ")", "\n", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "extensions", "=", "extensions", "\n", "\n", "\n", "with", "open", "(", "mask_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "t", "=", "json", ".", "load", "(", "f", ")", "\n", "self", ".", "mask", "=", "t", "\n", "#keys = list(t.keys())", "\n", "#mask = np.array(t[keys[0]])", "\n", "#print(mask.shape)", "\n", "\n", "\n", "", "self", ".", "classes", "=", "classes", "\n", "self", ".", "class_to_idx", "=", "class_to_idx", "\n", "self", ".", "samples", "=", "samples", "\n", "self", ".", "targets", "=", "[", "s", "[", "1", "]", "for", "s", "in", "samples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.DatasetFolder.make_dataset": [[256, 264], ["dynamic_transform_dataset.DatasetFolder.make_dataset"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.make_dataset"], ["", "@", "staticmethod", "\n", "def", "make_dataset", "(", "\n", "directory", ":", "str", ",", "\n", "class_to_idx", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "extensions", ":", "Optional", "[", "Tuple", "[", "str", ",", "...", "]", "]", "=", "None", ",", "\n", "is_valid_file", ":", "Optional", "[", "Callable", "[", "[", "str", "]", ",", "bool", "]", "]", "=", "None", ",", "\n", ")", "->", "List", "[", "Tuple", "[", "str", ",", "int", "]", "]", ":", "\n", "        ", "return", "make_dataset", "(", "directory", ",", "class_to_idx", ",", "extensions", "=", "extensions", ",", "is_valid_file", "=", "is_valid_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.DatasetFolder.find_classes": [[265, 271], ["dynamic_transform_dataset.DatasetFolder.find_classes"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.find_classes"], ["", "def", "find_classes", "(", "self", ",", "dir", ":", "str", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "Dict", "[", "str", ",", "int", "]", "]", ":", "\n", "        ", "\"\"\"Same as :func:`find_classes`.\n        This method can be overridden to only consider\n        a subset of classes, or to adapt to a different dataset directory structure.\n        \"\"\"", "\n", "return", "find_classes", "(", "dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.DatasetFolder.__getitem__": [[272, 350], ["dynamic_transform_dataset.DatasetFolder.loader", "numpy.array", "numpy.dstack", "dynamic_transform_dataset.convert_index_to_list", "random.uniform", "random.uniform", "numpy.unravel_index", "list", "random.choice", "dynamic_transform_dataset.DatasetFolder.loader", "numpy.array", "numpy.dstack", "dynamic_transform_dataset.convert_index_to_list", "copy.deepcopy", "dynamic_transform_dataset.merge_crop_patches", "dynamic_transform_dataset.DatasetFolder.transform", "dynamic_transform_dataset.DatasetFolder.transform", "dynamic_transform_dataset.DatasetFolder.target_transform", "path.split", "numpy.argsort", "range", "numpy.unravel_index", "len", "path_B.split", "numpy.argsort", "numpy.array.ravel", "numpy.array.ravel"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.convert_index_to_list", "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.convert_index_to_list", "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.merge_crop_patches"], ["", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", "->", "Tuple", "[", "Any", ",", "Any", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (sample, target) where target is class_index of the target class.\n        \"\"\"", "\n", "input_size", "=", "224", "\n", "\n", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "img_A", "=", "self", ".", "loader", "(", "path", ")", "\n", "key_A", "=", "'/'", ".", "join", "(", "path", ".", "split", "(", "'/'", ")", "[", "-", "2", ":", "]", ")", "\n", "mask_A", "=", "np", ".", "array", "(", "self", ".", "mask", "[", "key_A", "]", ")", "\n", "\n", "\n", "#print(len(FG_index_A), len(BG_index_A), len(FG_index_B), len(BG_index_B))", "\n", "feat_size", "=", "mask_A", ".", "shape", "[", "0", "]", "\n", "patch_size", "=", "input_size", "//", "mask_A", ".", "shape", "[", "0", "]", "#should be 32", "\n", "#print('feat size, patch size', feat_size, patch_size)", "\n", "\n", "index_A", "=", "np", ".", "dstack", "(", "np", ".", "unravel_index", "(", "np", ".", "argsort", "(", "-", "mask_A", ".", "ravel", "(", ")", ")", ",", "(", "feat_size", ",", "feat_size", ")", ")", ")", "\n", "index_A", "=", "convert_index_to_list", "(", "index_A", ")", "\n", "FG_index_A", "=", "index_A", "[", ":", "8", "]", "\n", "BG_index_A", "=", "index_A", "[", "8", ":", "]", "\n", "\n", "temp1", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "temp2", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "\n", "#print(temp)", "\n", "if", "temp1", "<", "self", ".", "bg_prob", ":", "\n", "            ", "all_index", "=", "list", "(", "range", "(", "len", "(", "self", ".", "samples", ")", ")", ")", "\n", "index_B", "=", "random", ".", "choice", "(", "all_index", ")", "\n", "\n", "path_B", ",", "_", "=", "self", ".", "samples", "[", "index_B", "]", "\n", "img_B", "=", "self", ".", "loader", "(", "path_B", ")", "\n", "key_B", "=", "'/'", ".", "join", "(", "path_B", ".", "split", "(", "'/'", ")", "[", "-", "2", ":", "]", ")", "\n", "mask_B", "=", "np", ".", "array", "(", "self", ".", "mask", "[", "key_B", "]", ")", "\n", "index_B", "=", "np", ".", "dstack", "(", "np", ".", "unravel_index", "(", "np", ".", "argsort", "(", "-", "mask_B", ".", "ravel", "(", ")", ")", ",", "(", "feat_size", ",", "feat_size", ")", ")", ")", "\n", "index_B", "=", "convert_index_to_list", "(", "index_B", ")", "\n", "FG_index_B", "=", "index_B", "[", ":", "8", "]", "\n", "BG_index_B", "=", "index_B", "[", "8", ":", "]", "\n", "\n", "temp_img_A", "=", "deepcopy", "(", "img_A", ")", "\n", "img1", "=", "merge_crop_patches", "(", "temp_img_A", ",", "img_B", ",", "FG_index_A", ",", "BG_index_B", ",", "feat_size", ",", "patch_size", ")", "\n", "", "else", ":", "\n", "            ", "img1", "=", "img_A", "\n", "", "'''\n        if temp2<self.bg_prob:\n            all_index = list(range(len(self.samples)))\n            index_B = random.choice(all_index)\n\n            path_B, _ = self.samples[index_B]\n            img_B = self.loader(path_B)\n            key_B = '/'.join(path_B.split('/')[-2:])\n            mask_B = np.array(self.mask[key_B])\n            index_B = np.dstack(np.unravel_index(np.argsort(-mask_B.ravel()), (feat_size, feat_size)))\n            index_B = convert_index_to_list(index_B)\n            FG_index_B = index_B[:8]\n            BG_index_B = index_B[8:]\n\n            temp_img_A = deepcopy(img_A)\n            img2 = merge_crop_patches(temp_img_A, img_B, FG_index_A, BG_index_B, feat_size, patch_size)\n        else:\n            img2 = img_A\n        '''", "\n", "\n", "img2", "=", "img_A", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "#sample = self.transform(sample)", "\n", "            ", "img1", "=", "self", ".", "transform", "(", "img1", ")", "\n", "img2", "=", "self", ".", "transform", "(", "img2", ")", "\n", "#neg_A_neg_B = self.transform(neg_A_neg_B)", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "[", "img1", ",", "img2", "]", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.DatasetFolder.__len__": [[351, 353], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.ImageFolder.__init__": [[406, 421], ["dynamic_transform_dataset.DatasetFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ":", "str", ",", "\n", "mask_file", ":", "str", ",", "\n", "bg_prob", ":", "float", ",", "\n", "transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "loader", ":", "Callable", "[", "[", "str", "]", ",", "Any", "]", "=", "default_loader", ",", "\n", "is_valid_file", ":", "Optional", "[", "Callable", "[", "[", "str", "]", ",", "bool", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ImageFolder", ",", "self", ")", ".", "__init__", "(", "root", ",", "mask_file", ",", "bg_prob", ",", "loader", ",", "IMG_EXTENSIONS", "if", "is_valid_file", "is", "None", "else", "None", ",", "\n", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ",", "\n", "is_valid_file", "=", "is_valid_file", ")", "\n", "self", ".", "imgs", "=", "self", ".", "samples", "", "", "", ""]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.has_file_allowed_extension": [[13, 22], ["filename.lower().endswith", "filename.lower"], "function", ["None"], ["def", "has_file_allowed_extension", "(", "filename", ":", "str", ",", "extensions", ":", "Tuple", "[", "str", ",", "...", "]", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Checks if a file is an allowed extension.\n    Args:\n        filename (string): path to a file\n        extensions (tuple of strings): extensions to consider (lowercase)\n    Returns:\n        bool: True if the filename ends with one of given extensions\n    \"\"\"", "\n", "return", "filename", ".", "lower", "(", ")", ".", "endswith", "(", "extensions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.is_image_file": [[24, 32], ["dynamic_transform_dataset.has_file_allowed_extension"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.has_file_allowed_extension"], ["", "def", "is_image_file", "(", "filename", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Checks if a file is an allowed image extension.\n    Args:\n        filename (string): path to a file\n    Returns:\n        bool: True if the filename ends with a known image extension\n    \"\"\"", "\n", "return", "has_file_allowed_extension", "(", "filename", ",", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.find_classes": [[34, 61], ["sorted", "FileNotFoundError", "enumerate", "os.scandir", "os.scandir", "entry.is_dir"], "function", ["None"], ["", "def", "find_classes", "(", "directory", ":", "str", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "Dict", "[", "str", ",", "int", "]", "]", ":", "\n", "    ", "\"\"\"Finds the class folders in a dataset structured as follows:\n    .. code::\n        directory/\n        \u00c2\u00a9\u00c3\u0080\u00c2\u00a9\u00c2\u00a4\u00c2\u00a9\u00c2\u00a4 class_x\n        \u00c2\u00a9\u00c2\u00a6   \u00c2\u00a9\u00c3\u0080\u00c2\u00a9\u00c2\u00a4\u00c2\u00a9\u00c2\u00a4 xxx.ext\n        \u00c2\u00a9\u00c2\u00a6   \u00c2\u00a9\u00c3\u0080\u00c2\u00a9\u00c2\u00a4\u00c2\u00a9\u00c2\u00a4 xxy.ext\n        \u00c2\u00a9\u00c2\u00a6   \u00c2\u00a9\u00c2\u00b8\u00c2\u00a9\u00c2\u00a4\u00c2\u00a9\u00c2\u00a4 ...\n        \u00c2\u00a9\u00c2\u00a6       \u00c2\u00a9\u00c2\u00b8\u00c2\u00a9\u00c2\u00a4\u00c2\u00a9\u00c2\u00a4 xxz.ext\n        \u00c2\u00a9\u00c2\u00b8\u00c2\u00a9\u00c2\u00a4\u00c2\u00a9\u00c2\u00a4 class_y\n            \u00c2\u00a9\u00c3\u0080\u00c2\u00a9\u00c2\u00a4\u00c2\u00a9\u00c2\u00a4 123.ext\n            \u00c2\u00a9\u00c3\u0080\u00c2\u00a9\u00c2\u00a4\u00c2\u00a9\u00c2\u00a4 nsdf3.ext\n            \u00c2\u00a9\u00c2\u00b8\u00c2\u00a9\u00c2\u00a4\u00c2\u00a9\u00c2\u00a4 ...\n                \u00c2\u00a9\u00c2\u00b8\u00c2\u00a9\u00c2\u00a4\u00c2\u00a9\u00c2\u00a4 asd932_.ext\n    Args:\n        directory (str): Root directory path.\n    Raises:\n        FileNotFoundError: If ``directory`` has no class folders.\n    Returns:\n        (Tuple[List[str], Dict[str, int]]): List of all classes and dictionary mapping each class to an index.\n    \"\"\"", "\n", "classes", "=", "sorted", "(", "entry", ".", "name", "for", "entry", "in", "os", ".", "scandir", "(", "directory", ")", "if", "entry", ".", "is_dir", "(", ")", ")", "\n", "if", "not", "classes", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "f\"Couldn't find any class folder in {directory}.\"", ")", "\n", "\n", "", "class_to_idx", "=", "{", "cls_name", ":", "i", "for", "i", ",", "cls_name", "in", "enumerate", "(", "classes", ")", "}", "\n", "return", "classes", ",", "class_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.make_dataset": [[63, 131], ["os.path.expanduser", "os.path.expanduser", "typing.cast", "set", "sorted", "dynamic_transform_dataset.find_classes", "ValueError", "class_to_idx.keys", "os.path.join", "os.path.join", "sorted", "set", "FileNotFoundError", "ValueError", "dynamic_transform_dataset.has_file_allowed_extension", "os.path.isdir", "os.path.isdir", "os.walk", "os.walk", "sorted", "class_to_idx.keys", "typing.cast", "os.path.join", "os.path.join", "typing.cast."], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.find_classes", "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.has_file_allowed_extension"], ["", "def", "make_dataset", "(", "\n", "directory", ":", "str", ",", "\n", "class_to_idx", ":", "Optional", "[", "Dict", "[", "str", ",", "int", "]", "]", "=", "None", ",", "\n", "extensions", ":", "Optional", "[", "Tuple", "[", "str", ",", "...", "]", "]", "=", "None", ",", "\n", "is_valid_file", ":", "Optional", "[", "Callable", "[", "[", "str", "]", ",", "bool", "]", "]", "=", "None", ",", "\n", ")", "->", "List", "[", "Tuple", "[", "str", ",", "int", "]", "]", ":", "\n", "    ", "\"\"\"Generates a list of samples of a form (path_to_sample, class).\n    Args:\n        directory (str): root dataset directory\n        class_to_idx (Optional[Dict[str, int]]): Dictionary mapping class name to class index. If omitted, is generated\n            by :func:`find_classes`.\n        extensions (optional): A list of allowed extensions.\n            Either extensions or is_valid_file should be passed. Defaults to None.\n        is_valid_file (optional): A function that takes path of a file\n            and checks if the file is a valid file\n            (used to check of corrupt files) both extensions and\n            is_valid_file should not be passed. Defaults to None.\n    Raises:\n        ValueError: In case ``class_to_idx`` is empty.\n        ValueError: In case ``extensions`` and ``is_valid_file`` are None or both are not None.\n        FileNotFoundError: In case no valid file was found for any class.\n    Returns:\n        List[Tuple[str, int]]: samples of a form (path_to_sample, class)\n    \"\"\"", "\n", "directory", "=", "os", ".", "path", ".", "expanduser", "(", "directory", ")", "\n", "\n", "if", "class_to_idx", "is", "None", ":", "\n", "        ", "_", ",", "class_to_idx", "=", "find_classes", "(", "directory", ")", "\n", "", "elif", "not", "class_to_idx", ":", "\n", "        ", "raise", "ValueError", "(", "\"'class_to_index' must have at least one entry to collect any samples.\"", ")", "\n", "\n", "", "both_none", "=", "extensions", "is", "None", "and", "is_valid_file", "is", "None", "\n", "both_something", "=", "extensions", "is", "not", "None", "and", "is_valid_file", "is", "not", "None", "\n", "if", "both_none", "or", "both_something", ":", "\n", "        ", "raise", "ValueError", "(", "\"Both extensions and is_valid_file cannot be None or not None at the same time\"", ")", "\n", "\n", "", "if", "extensions", "is", "not", "None", ":", "\n", "\n", "        ", "def", "is_valid_file", "(", "x", ":", "str", ")", "->", "bool", ":", "\n", "            ", "return", "has_file_allowed_extension", "(", "x", ",", "cast", "(", "Tuple", "[", "str", ",", "...", "]", ",", "extensions", ")", ")", "\n", "\n", "", "", "is_valid_file", "=", "cast", "(", "Callable", "[", "[", "str", "]", ",", "bool", "]", ",", "is_valid_file", ")", "\n", "\n", "instances", "=", "[", "]", "\n", "available_classes", "=", "set", "(", ")", "\n", "for", "target_class", "in", "sorted", "(", "class_to_idx", ".", "keys", "(", ")", ")", ":", "\n", "        ", "class_index", "=", "class_to_idx", "[", "target_class", "]", "\n", "target_dir", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "target_class", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "target_dir", ")", ":", "\n", "            ", "continue", "\n", "", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "target_dir", ",", "followlinks", "=", "True", ")", ")", ":", "\n", "            ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "if", "is_valid_file", "(", "path", ")", ":", "\n", "                    ", "item", "=", "path", ",", "class_index", "\n", "instances", ".", "append", "(", "item", ")", "\n", "\n", "if", "target_class", "not", "in", "available_classes", ":", "\n", "                        ", "available_classes", ".", "add", "(", "target_class", ")", "\n", "\n", "", "", "", "", "", "empty_classes", "=", "set", "(", "class_to_idx", ".", "keys", "(", ")", ")", "-", "available_classes", "\n", "if", "empty_classes", ":", "\n", "        ", "msg", "=", "f\"Found no valid file for the classes {', '.join(sorted(empty_classes))}. \"", "\n", "if", "extensions", "is", "not", "None", ":", "\n", "            ", "msg", "+=", "f\"Supported extensions are: {', '.join(extensions)}\"", "\n", "", "raise", "FileNotFoundError", "(", "msg", ")", "\n", "\n", "", "return", "instances", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.convert_index_to_list": [[132, 136], ["list", "zip"], "function", ["None"], ["", "def", "convert_index_to_list", "(", "index", ")", ":", "\n", "#print(index)", "\n", "    ", "index", "=", "index", "[", "0", "]", "\n", "return", "list", "(", "zip", "(", "index", "[", ":", ",", "0", "]", ",", "index", "[", ":", ",", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.merge_crop_patches": [[138, 186], ["numpy.zeros", "np.asarray.resize", "np.asarray.resize", "numpy.asarray", "numpy.asarray", "range", "numpy.random.permutation", "range", "PIL.Image.fromarray", "new_img.resize.resize", "range", "len", "numpy.array", "range", "postive_patches_B.append"], "function", ["None"], ["", "def", "merge_crop_patches", "(", "img_A", ",", "img_B", ",", "FG_index_A", ",", "FG_index_B", ",", "feat_size", ",", "patch_size", ")", ":", "\n", "    ", "new_img", "=", "np", ".", "zeros", "(", "(", "feat_size", "*", "patch_size", ",", "feat_size", "*", "patch_size", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "origin_shape", "=", "img_A", ".", "size", "\n", "\n", "input_size", "=", "224", "\n", "\n", "#print(origin_shape)", "\n", "\n", "img_A", "=", "img_A", ".", "resize", "(", "(", "input_size", ",", "input_size", ")", ")", "\n", "img_B", "=", "img_B", ".", "resize", "(", "(", "input_size", ",", "input_size", ")", ")", "\n", "\n", "img_A", "=", "np", ".", "asarray", "(", "img_A", ")", "\n", "img_B", "=", "np", ".", "asarray", "(", "img_B", ")", "\n", "\n", "postive_patches_B", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "feat_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "feat_size", ")", ":", "\n", "            ", "temp", "=", "img_B", "[", "i", "*", "patch_size", ":", "(", "i", "+", "1", ")", "*", "patch_size", ",", "j", "*", "patch_size", ":", "(", "j", "+", "1", ")", "*", "patch_size", "]", "\n", "if", "(", "i", ",", "j", ")", "in", "FG_index_B", ":", "\n", "                ", "postive_patches_B", ".", "append", "(", "temp", ")", "\n", "\n", "", "", "", "m", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "postive_patches_B", ")", ")", "\n", "postive_patches_B", "=", "np", ".", "array", "(", "postive_patches_B", ")", "[", "m", "]", "\n", "\n", "cnt", "=", "0", "\n", "for", "i", "in", "range", "(", "feat_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "feat_size", ")", ":", "\n", "            ", "if", "(", "i", ",", "j", ")", "in", "FG_index_A", ":", "\n", "                ", "new_img", "[", "i", "*", "patch_size", ":", "(", "i", "+", "1", ")", "*", "patch_size", ",", "j", "*", "patch_size", ":", "(", "j", "+", "1", ")", "*", "patch_size", "]", "=", "img_A", "[", "i", "*", "patch_size", ":", "(", "i", "+", "1", ")", "*", "patch_size", ",", "j", "*", "patch_size", ":", "(", "j", "+", "1", ")", "*", "patch_size", "]", "\n", "", "else", ":", "\n", "                ", "new_img", "[", "i", "*", "patch_size", ":", "(", "i", "+", "1", ")", "*", "patch_size", ",", "j", "*", "patch_size", ":", "(", "j", "+", "1", ")", "*", "patch_size", "]", "=", "postive_patches_B", "[", "cnt", "]", "\n", "cnt", "+=", "1", "\n", "\n", "#print(new_img.shape)", "\n", "\n", "\n", "#print(new_img.shape)", "\n", "\n", "#new_img = Image.new('RGB', (patch_size, patch_size*feat_size*feat_size), 255)", "\n", "\n", "#for i, patch in enumerate(selected_patches):", "\n", "#    new_img.paste(Image.fromarray(patch), (0, patch_size*i))", "\n", "\n", "#new_img = new_img.resize(feat_size*patch_size, feat_size*patch_size)", "\n", "", "", "", "new_img", "=", "Image", ".", "fromarray", "(", "new_img", ")", "\n", "\n", "new_img", "=", "new_img", ".", "resize", "(", "origin_shape", ")", "\n", "return", "new_img", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.pil_loader": [[358, 363], ["open", "PIL.Image.open", "Image.open.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ":", "str", ")", "->", "Image", ".", "Image", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.accimage_loader": [[366, 373], ["accimage.Image", "dynamic_transform_dataset.pil_loader"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.pil_loader"], ["", "", "def", "accimage_loader", "(", "path", ":", "str", ")", "->", "Any", ":", "\n", "    ", "import", "accimage", "\n", "try", ":", "\n", "        ", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.default_loader": [[375, 381], ["get_image_backend", "dynamic_transform_dataset.accimage_loader", "dynamic_transform_dataset.pil_loader"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.accimage_loader", "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.dynamic_transform_dataset.pil_loader"], ["", "", "def", "default_loader", "(", "path", ":", "str", ")", "->", "Any", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.loader.TwoCropsTransform.__init__": [[9, 11], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "base_transform", ")", ":", "\n", "        ", "self", ".", "base_transform", "=", "base_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.loader.TwoCropsTransform.__call__": [[12, 16], ["loader.TwoCropsTransform.base_transform", "loader.TwoCropsTransform.base_transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "q", "=", "self", ".", "base_transform", "(", "x", ")", "\n", "k", "=", "self", ".", "base_transform", "(", "x", ")", "\n", "return", "[", "q", ",", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.loader.GaussianBlur.__init__": [[21, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigma", "=", "[", ".1", ",", "2.", "]", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.moco.loader.GaussianBlur.__call__": [[24, 28], ["random.uniform", "x.filter.filter.filter", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "sigma", "=", "random", ".", "uniform", "(", "self", ".", "sigma", "[", "0", "]", ",", "self", ".", "sigma", "[", "1", "]", ")", "\n", "x", "=", "x", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "sigma", ")", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.ImageNet_CAM_fast.to_variable": [[24, 28], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "x.cuda.cuda"], "function", ["None"], ["def", "to_variable", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "", "return", "Variable", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.ImageNet_CAM_fast.to_data": [[29, 33], ["torch.cuda.is_available", "torch.cuda.is_available", "x.cpu.cpu"], "function", ["None"], ["", "def", "to_data", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cpu", "(", ")", "\n", "", "return", "x", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.ImageNet_CAM_fast.copy_parameters": [[41, 52], ["model.state_dict", "pretrained.state_dict", "pretrained.state_dict.items", "model.state_dict.update", "model.load_state_dict", "print", "pretrained.state_dict.items", "pretrained_dict[].size", "model_dict[].size"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update"], ["def", "copy_parameters", "(", "model", ",", "pretrained", ")", ":", "\n", "    ", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "pretrained", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "and", "pretrained_dict", "[", "k", "]", ".", "size", "(", ")", "==", "model_dict", "[", "k", "]", ".", "size", "(", ")", "}", "\n", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "k", ")", "\n", "\n", "", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.ImageNet_CAM_fast.extract_bbox_from_map": [[101, 108], ["numpy.any", "numpy.any", "numpy.where", "numpy.where"], "function", ["None"], ["def", "extract_bbox_from_map", "(", "input", ")", ":", "\n", "    ", "assert", "input", ".", "ndim", "==", "2", ",", "'Invalid input shape'", "\n", "rows", "=", "np", ".", "any", "(", "input", ",", "axis", "=", "1", ")", "\n", "cols", "=", "np", ".", "any", "(", "input", ",", "axis", "=", "0", ")", "\n", "ymin", ",", "ymax", "=", "np", ".", "where", "(", "rows", ")", "[", "0", "]", "[", "[", "0", ",", "-", "1", "]", "]", "\n", "xmin", ",", "xmax", "=", "np", ".", "where", "(", "cols", ")", "[", "0", "]", "[", "[", "0", ",", "-", "1", "]", "]", "\n", "return", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.ImageNet_CAM_fast.localize_from_map": [[109, 121], ["scipy.ndimage.label", "range", "ImageNet_CAM_fast.extract_bbox_from_map", "class_response_map.mean", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_CAM.extract_bbox_from_map"], ["", "def", "localize_from_map", "(", "class_response_map", ")", ":", "\n", "    ", "foreground_map", "=", "class_response_map", ">", "class_response_map", ".", "mean", "(", ")", "\n", "objects", ",", "count", "=", "label", "(", "foreground_map", ")", "\n", "max_idx", "=", "0", "\n", "max_count", "=", "0", "\n", "for", "obj_idx", "in", "range", "(", "count", ")", ":", "\n", "        ", "count", "=", "np", ".", "sum", "(", "objects", "==", "(", "obj_idx", "+", "1", ")", ")", "\n", "if", "count", ">", "max_count", ":", "\n", "            ", "max_count", "=", "count", "\n", "max_idx", "=", "obj_idx", "+", "1", "\n", "", "", "obj", "=", "objects", "==", "max_idx", "\n", "return", "extract_bbox_from_map", "(", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.ImageNet_CAM_fast.returnCAM": [[122, 135], ["weight_softmax[].dot", "cam.reshape.reshape", "numpy.uint8", "output_cam.append", "feature_conv.reshape", "numpy.min", "numpy.max", "cv2.resize"], "function", ["None"], ["", "def", "returnCAM", "(", "feature_conv", ",", "weight_softmax", ",", "class_idx", ")", ":", "\n", "# generate the class activation maps upsample to 256x256", "\n", "    ", "size_upsample", "=", "(", "256", ",", "256", ")", "\n", "bz", ",", "nc", ",", "h", ",", "w", "=", "feature_conv", ".", "shape", "\n", "output_cam", "=", "[", "]", "\n", "for", "idx", "in", "class_idx", ":", "\n", "        ", "cam", "=", "weight_softmax", "[", "idx", "]", ".", "dot", "(", "feature_conv", ".", "reshape", "(", "(", "nc", ",", "h", "*", "w", ")", ")", ")", "\n", "cam", "=", "cam", ".", "reshape", "(", "h", ",", "w", ")", "\n", "cam", "=", "cam", "-", "np", ".", "min", "(", "cam", ")", "\n", "cam_img", "=", "cam", "/", "np", ".", "max", "(", "cam", ")", "\n", "cam_img", "=", "np", ".", "uint8", "(", "255", "*", "cam_img", ")", "\n", "output_cam", ".", "append", "(", "cv2", ".", "resize", "(", "cam_img", ",", "size_upsample", ")", ")", "\n", "", "return", "output_cam", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.VOC_SCDA_heatmap.to_variable": [[21, 25], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "x.cuda.cuda"], "function", ["None"], ["def", "to_variable", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "", "return", "Variable", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.VOC_SCDA_heatmap.to_data": [[26, 30], ["torch.cuda.is_available", "torch.cuda.is_available", "x.cpu.cpu"], "function", ["None"], ["", "def", "to_data", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cpu", "(", ")", "\n", "", "return", "x", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_CAM_fast.to_variable": [[24, 28], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "x.cuda.cuda"], "function", ["None"], ["def", "to_variable", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "", "return", "Variable", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_CAM_fast.to_data": [[29, 33], ["torch.cuda.is_available", "torch.cuda.is_available", "x.cpu.cpu"], "function", ["None"], ["", "def", "to_data", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cpu", "(", ")", "\n", "", "return", "x", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_CAM_fast.copy_parameters": [[41, 52], ["model.state_dict", "pretrained.state_dict", "pretrained.state_dict.items", "model.state_dict.update", "model.load_state_dict", "print", "pretrained.state_dict.items", "pretrained_dict[].size", "model_dict[].size"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update"], ["def", "copy_parameters", "(", "model", ",", "pretrained", ")", ":", "\n", "    ", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "pretrained", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "and", "pretrained_dict", "[", "k", "]", ".", "size", "(", ")", "==", "model_dict", "[", "k", "]", ".", "size", "(", ")", "}", "\n", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "k", ")", "\n", "\n", "", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_CAM_fast.extract_bbox_from_map": [[101, 108], ["numpy.any", "numpy.any", "numpy.where", "numpy.where"], "function", ["None"], ["def", "extract_bbox_from_map", "(", "input", ")", ":", "\n", "    ", "assert", "input", ".", "ndim", "==", "2", ",", "'Invalid input shape'", "\n", "rows", "=", "np", ".", "any", "(", "input", ",", "axis", "=", "1", ")", "\n", "cols", "=", "np", ".", "any", "(", "input", ",", "axis", "=", "0", ")", "\n", "ymin", ",", "ymax", "=", "np", ".", "where", "(", "rows", ")", "[", "0", "]", "[", "[", "0", ",", "-", "1", "]", "]", "\n", "xmin", ",", "xmax", "=", "np", ".", "where", "(", "cols", ")", "[", "0", "]", "[", "[", "0", ",", "-", "1", "]", "]", "\n", "return", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_CAM_fast.localize_from_map": [[109, 121], ["scipy.ndimage.label", "range", "CUB_CAM_fast.extract_bbox_from_map", "class_response_map.mean", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_CAM.extract_bbox_from_map"], ["", "def", "localize_from_map", "(", "class_response_map", ")", ":", "\n", "    ", "foreground_map", "=", "class_response_map", ">", "class_response_map", ".", "mean", "(", ")", "\n", "objects", ",", "count", "=", "label", "(", "foreground_map", ")", "\n", "max_idx", "=", "0", "\n", "max_count", "=", "0", "\n", "for", "obj_idx", "in", "range", "(", "count", ")", ":", "\n", "        ", "count", "=", "np", ".", "sum", "(", "objects", "==", "(", "obj_idx", "+", "1", ")", ")", "\n", "if", "count", ">", "max_count", ":", "\n", "            ", "max_count", "=", "count", "\n", "max_idx", "=", "obj_idx", "+", "1", "\n", "", "", "obj", "=", "objects", "==", "max_idx", "\n", "return", "extract_bbox_from_map", "(", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_CAM_fast.returnCAM": [[122, 135], ["weight_softmax[].dot", "cam.reshape.reshape", "numpy.uint8", "output_cam.append", "feature_conv.reshape", "numpy.min", "numpy.max", "cv2.resize"], "function", ["None"], ["", "def", "returnCAM", "(", "feature_conv", ",", "weight_softmax", ",", "class_idx", ")", ":", "\n", "# generate the class activation maps upsample to 256x256", "\n", "    ", "size_upsample", "=", "(", "256", ",", "256", ")", "\n", "bz", ",", "nc", ",", "h", ",", "w", "=", "feature_conv", ".", "shape", "\n", "output_cam", "=", "[", "]", "\n", "for", "idx", "in", "class_idx", ":", "\n", "        ", "cam", "=", "weight_softmax", "[", "idx", "]", ".", "dot", "(", "feature_conv", ".", "reshape", "(", "(", "nc", ",", "h", "*", "w", ")", ")", ")", "\n", "cam", "=", "cam", ".", "reshape", "(", "h", ",", "w", ")", "\n", "cam", "=", "cam", "-", "np", ".", "min", "(", "cam", ")", "\n", "cam_img", "=", "cam", "/", "np", ".", "max", "(", "cam", ")", "\n", "cam_img", "=", "np", ".", "uint8", "(", "255", "*", "cam_img", ")", "\n", "output_cam", ".", "append", "(", "cv2", ".", "resize", "(", "cam_img", ",", "size_upsample", ")", ")", "\n", "", "return", "output_cam", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.ImageNet_SCDA.to_variable": [[22, 26], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "x.cuda.cuda"], "function", ["None"], ["def", "to_variable", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "", "return", "Variable", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.ImageNet_SCDA.to_data": [[27, 31], ["torch.cuda.is_available", "torch.cuda.is_available", "x.cpu.cpu"], "function", ["None"], ["", "def", "to_data", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cpu", "(", ")", "\n", "", "return", "x", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.ImageNet_SCDA.copy_parameters": [[39, 50], ["model.state_dict", "pretrained.state_dict", "pretrained.state_dict.items", "model.state_dict.update", "model.load_state_dict", "print", "pretrained.state_dict.items", "pretrained_dict[].size", "model_dict[].size"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update"], ["def", "copy_parameters", "(", "model", ",", "pretrained", ")", ":", "\n", "    ", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "pretrained", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "and", "pretrained_dict", "[", "k", "]", ".", "size", "(", ")", "==", "model_dict", "[", "k", "]", ".", "size", "(", ")", "}", "\n", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "k", ")", "\n", "\n", "", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_SCDA_heatmap.to_variable": [[21, 25], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "x.cuda.cuda"], "function", ["None"], ["def", "to_variable", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "", "return", "Variable", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_SCDA_heatmap.to_data": [[26, 30], ["torch.cuda.is_available", "torch.cuda.is_available", "x.cpu.cpu"], "function", ["None"], ["", "def", "to_data", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cpu", "(", ")", "\n", "", "return", "x", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_SCDA.to_variable": [[22, 26], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "x.cuda.cuda"], "function", ["None"], ["def", "to_variable", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "", "return", "Variable", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_SCDA.to_data": [[27, 31], ["torch.cuda.is_available", "torch.cuda.is_available", "x.cpu.cpu"], "function", ["None"], ["", "def", "to_data", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cpu", "(", ")", "\n", "", "return", "x", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_SCDA.copy_parameters": [[39, 50], ["model.state_dict", "pretrained.state_dict", "pretrained.state_dict.items", "model.state_dict.update", "model.load_state_dict", "print", "pretrained.state_dict.items", "pretrained_dict[].size", "model_dict[].size"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update"], ["def", "copy_parameters", "(", "model", ",", "pretrained", ")", ":", "\n", "    ", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "pretrained", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "and", "pretrained_dict", "[", "k", "]", ".", "size", "(", ")", "==", "model_dict", "[", "k", "]", ".", "size", "(", ")", "}", "\n", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "k", ")", "\n", "\n", "", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_CAM.to_variable": [[24, 28], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "x.cuda.cuda"], "function", ["None"], ["def", "to_variable", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "", "return", "Variable", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_CAM.to_data": [[29, 33], ["torch.cuda.is_available", "torch.cuda.is_available", "x.cpu.cpu"], "function", ["None"], ["", "def", "to_data", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cpu", "(", ")", "\n", "", "return", "x", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_CAM.copy_parameters": [[41, 52], ["model.state_dict", "pretrained.state_dict", "pretrained.state_dict.items", "model.state_dict.update", "model.load_state_dict", "print", "pretrained.state_dict.items", "pretrained_dict[].size", "model_dict[].size"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.None.main_moco.AverageMeter.update"], ["def", "copy_parameters", "(", "model", ",", "pretrained", ")", ":", "\n", "    ", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "pretrained", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "and", "pretrained_dict", "[", "k", "]", ".", "size", "(", ")", "==", "model_dict", "[", "k", "]", ".", "size", "(", ")", "}", "\n", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "k", ")", "\n", "\n", "", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_CAM.hook_feature": [[98, 100], ["features_blobs.append", "output.data.cpu().numpy", "output.data.cpu"], "function", ["None"], ["def", "hook_feature", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "features_blobs", ".", "append", "(", "output", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_CAM.extract_bbox_from_map": [[106, 113], ["numpy.any", "numpy.any", "numpy.where", "numpy.where"], "function", ["None"], ["def", "extract_bbox_from_map", "(", "input", ")", ":", "\n", "    ", "assert", "input", ".", "ndim", "==", "2", ",", "'Invalid input shape'", "\n", "rows", "=", "np", ".", "any", "(", "input", ",", "axis", "=", "1", ")", "\n", "cols", "=", "np", ".", "any", "(", "input", ",", "axis", "=", "0", ")", "\n", "ymin", ",", "ymax", "=", "np", ".", "where", "(", "rows", ")", "[", "0", "]", "[", "[", "0", ",", "-", "1", "]", "]", "\n", "xmin", ",", "xmax", "=", "np", ".", "where", "(", "cols", ")", "[", "0", "]", "[", "[", "0", ",", "-", "1", "]", "]", "\n", "return", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_CAM.localize_from_map": [[114, 126], ["scipy.ndimage.label", "range", "CUB_CAM.extract_bbox_from_map", "class_response_map.mean", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_CAM.extract_bbox_from_map"], ["", "def", "localize_from_map", "(", "class_response_map", ")", ":", "\n", "    ", "foreground_map", "=", "class_response_map", ">", "class_response_map", ".", "mean", "(", ")", "\n", "objects", ",", "count", "=", "label", "(", "foreground_map", ")", "\n", "max_idx", "=", "0", "\n", "max_count", "=", "0", "\n", "for", "obj_idx", "in", "range", "(", "count", ")", ":", "\n", "        ", "count", "=", "np", ".", "sum", "(", "objects", "==", "(", "obj_idx", "+", "1", ")", ")", "\n", "if", "count", ">", "max_count", ":", "\n", "            ", "max_count", "=", "count", "\n", "max_idx", "=", "obj_idx", "+", "1", "\n", "", "", "obj", "=", "objects", "==", "max_idx", "\n", "return", "extract_bbox_from_map", "(", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_CAM.returnCAM": [[127, 140], ["weight_softmax[].dot", "cam.reshape.reshape", "numpy.uint8", "output_cam.append", "feature_conv.reshape", "numpy.min", "numpy.max", "cv2.resize"], "function", ["None"], ["", "def", "returnCAM", "(", "feature_conv", ",", "weight_softmax", ",", "class_idx", ")", ":", "\n", "# generate the class activation maps upsample to 256x256", "\n", "    ", "size_upsample", "=", "(", "256", ",", "256", ")", "\n", "bz", ",", "nc", ",", "h", ",", "w", "=", "feature_conv", ".", "shape", "\n", "output_cam", "=", "[", "]", "\n", "for", "idx", "in", "class_idx", ":", "\n", "        ", "cam", "=", "weight_softmax", "[", "idx", "]", ".", "dot", "(", "feature_conv", ".", "reshape", "(", "(", "nc", ",", "h", "*", "w", ")", ")", ")", "\n", "cam", "=", "cam", ".", "reshape", "(", "h", ",", "w", ")", "\n", "cam", "=", "cam", "-", "np", ".", "min", "(", "cam", ")", "\n", "cam_img", "=", "cam", "/", "np", ".", "max", "(", "cam", ")", "\n", "cam_img", "=", "np", ".", "uint8", "(", "255", "*", "cam_img", ")", "\n", "output_cam", ".", "append", "(", "cv2", ".", "resize", "(", "cam_img", ",", "size_upsample", ")", ")", "\n", "", "return", "output_cam", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.ImageNet_CAM.hook_feature": [[24, 26], ["features_blobs.append", "output.data.cpu().numpy", "output.data.cpu"], "function", ["None"], ["def", "hook_feature", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "features_blobs", ".", "append", "(", "output", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.ImageNet_CAM.returnCAM": [[33, 46], ["weight_softmax[].dot", "cam.reshape.reshape", "numpy.uint8", "output_cam.append", "feature_conv.reshape", "numpy.min", "numpy.max", "cv2.resize"], "function", ["None"], ["def", "returnCAM", "(", "feature_conv", ",", "weight_softmax", ",", "class_idx", ")", ":", "\n", "# generate the class activation maps upsample to 256x256", "\n", "    ", "size_upsample", "=", "(", "256", ",", "256", ")", "\n", "bz", ",", "nc", ",", "h", ",", "w", "=", "feature_conv", ".", "shape", "\n", "output_cam", "=", "[", "]", "\n", "for", "idx", "in", "class_idx", ":", "\n", "        ", "cam", "=", "weight_softmax", "[", "idx", "]", ".", "dot", "(", "feature_conv", ".", "reshape", "(", "(", "nc", ",", "h", "*", "w", ")", ")", ")", "\n", "cam", "=", "cam", ".", "reshape", "(", "h", ",", "w", ")", "\n", "cam", "=", "cam", "-", "np", ".", "min", "(", "cam", ")", "\n", "cam_img", "=", "cam", "/", "np", ".", "max", "(", "cam", ")", "\n", "cam_img", "=", "np", ".", "uint8", "(", "255", "*", "cam_img", ")", "\n", "output_cam", ".", "append", "(", "cv2", ".", "resize", "(", "cam_img", ",", "size_upsample", ")", ")", "\n", "", "return", "output_cam", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_SCDA_heatmap_paper_vis.to_variable": [[21, 25], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "x.cuda.cuda"], "function", ["None"], ["def", "to_variable", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "", "return", "Variable", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.CUB_SCDA_heatmap_paper_vis.to_data": [[26, 30], ["torch.cuda.is_available", "torch.cuda.is_available", "x.cpu.cpu"], "function", ["None"], ["", "def", "to_data", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cpu", "(", ")", "\n", "", "return", "x", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.ImageNet_SCDA_heatmap.to_variable": [[21, 25], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "x.cuda.cuda"], "function", ["None"], ["def", "to_variable", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "", "return", "Variable", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.localization_code.ImageNet_SCDA_heatmap.to_data": [[26, 30], ["torch.cuda.is_available", "torch.cuda.is_available", "x.cpu.cpu"], "function", ["None"], ["", "def", "to_data", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cpu", "(", ")", "\n", "", "return", "x", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.utils.nms.nms": [[3, 37], ["numpy.array", "numpy.array", "len", "numpy.argsort", "keep_boxes.append", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.where"], "function", ["None"], ["def", "nms", "(", "boxes", ",", "scores", ",", "thresh", ")", ":", "\n", "    ", "if", "len", "(", "boxes", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "", "boxes", "=", "np", ".", "array", "(", "boxes", ")", "\n", "#scores = np.array(scores)", "\n", "x1", "=", "boxes", "[", ":", ",", "0", "]", "\n", "y1", "=", "boxes", "[", ":", ",", "1", "]", "\n", "x2", "=", "boxes", "[", ":", ",", "2", "]", "\n", "y2", "=", "boxes", "[", ":", ",", "3", "]", "\n", "\n", "areas", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "\n", "scores", "=", "np", ".", "array", "(", "scores", ")", "\n", "\n", "order", "=", "np", ".", "argsort", "(", "scores", ")", "[", "-", "100", ":", "]", "\n", "keep_boxes", "=", "[", "]", "\n", "while", "order", ".", "size", ">", "0", ":", "\n", "        ", "i", "=", "order", "[", "-", "1", "]", "\n", "keep_boxes", ".", "append", "(", "boxes", "[", "i", "]", ")", "\n", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "order", "[", ":", "-", "1", "]", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1", "[", "i", "]", ",", "y1", "[", "order", "[", ":", "-", "1", "]", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2", "[", "i", "]", ",", "x2", "[", "order", "[", ":", "-", "1", "]", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "y2", "[", "i", "]", ",", "y2", "[", "order", "[", ":", "-", "1", "]", "]", ")", "\n", "\n", "w", "=", "np", ".", "maximum", "(", "0.0", ",", "xx2", "-", "xx1", "+", "1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0.0", ",", "yy2", "-", "yy1", "+", "1", ")", "\n", "inter", "=", "w", "*", "h", "\n", "\n", "ovr", "=", "inter", "/", "(", "areas", "[", "i", "]", "+", "areas", "[", "order", "[", ":", "-", "1", "]", "]", "-", "inter", ")", "\n", "inds", "=", "np", ".", "where", "(", "ovr", "<=", "thresh", ")", "\n", "order", "=", "order", "[", "inds", "]", "\n", "\n", "", "return", "keep_boxes", "\n", "", ""]], "home.repos.pwc.inspect_result.CupidJay_Tobias.utils.func.load_pretrained_model": [[12, 48], ["os.path.isfile", "print", "torch.load", "list", "model.load_state_dict", "print", "print", "checkpoint.state_dict.keys", "print", "torch.load.state_dict", "checkpoint.state_dict.pop", "checkpoint.state_dict.pop", "model.load_state_dict", "print", "print", "k.startswith", "set", "k.startswith", "k.startswith", "k.startswith", "len", "len"], "function", ["None"], ["def", "load_pretrained_model", "(", "model", ",", "pretrained", ")", ":", "\n", "#loading from mocov2 pretrained models", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "pretrained", ")", ":", "\n", "        ", "print", "(", "\"=> loading pretrained from checkpoint {}\"", ".", "format", "(", "pretrained", ")", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "pretrained", ",", "map_location", "=", "\"cpu\"", ")", "\n", "# rename moco pre-trained keys", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "#state_dict = checkpoint", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# retain only encoder_q up to before the embedding layer", "\n", "            ", "if", "k", ".", "startswith", "(", "'module.encoder_q'", ")", "and", "not", "k", ".", "startswith", "(", "'module.encoder_q.fc'", ")", ":", "\n", "# remove prefix", "\n", "                ", "state_dict", "[", "k", "[", "len", "(", "\"module.encoder_q.\"", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "# delete renamed or unused k", "\n", "", "elif", "k", ".", "startswith", "(", "'module.'", ")", "and", "not", "k", ".", "startswith", "(", "'module.fc'", ")", ":", "\n", "                ", "state_dict", "[", "k", "[", "len", "(", "\"module.\"", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "msg", ".", "missing_keys", ")", "\n", "#assert set(msg.missing_keys) == {\"fc.weight\", \"fc.bias\"}", "\n", "print", "(", "\"=> loaded pre-trained model '{}'\"", ".", "format", "(", "pretrained", ")", ")", "\n", "#loading from ImageNet pretrained models", "\n", "", "elif", "pretrained", "in", "model_names", ":", "\n", "        ", "print", "(", "\"=> loading pretrained from ImageNet pretrained {}\"", ".", "format", "(", "pretrained", ")", ")", "\n", "checkpoint", "=", "models", ".", "__dict__", "[", "pretrained", "]", "(", "pretrained", "=", "True", ")", "\n", "state_dict", "=", "checkpoint", ".", "state_dict", "(", ")", "\n", "state_dict", ".", "pop", "(", "'fc.weight'", ")", "\n", "state_dict", ".", "pop", "(", "'fc.bias'", ")", "\n", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "assert", "set", "(", "msg", ".", "missing_keys", ")", "==", "{", "\"fc.weight\"", ",", "\"fc.bias\"", "}", "\n", "print", "(", "\"=> loaded pretrained from ImageNet pretrained {}\"", ".", "format", "(", "pretrained", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"=> NOT load pretrained\"", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.utils.func.count_max": [[49, 62], ["sorted", "sorted.items", "sorted.keys"], "function", ["None"], ["", "def", "count_max", "(", "x", ")", ":", "\n", "    ", "count_dict", "=", "{", "}", "\n", "for", "xlist", "in", "x", ":", "\n", "        ", "for", "item", "in", "xlist", ":", "\n", "            ", "if", "item", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "item", "not", "in", "count_dict", ".", "keys", "(", ")", ":", "\n", "                ", "count_dict", "[", "item", "]", "=", "0", "\n", "", "count_dict", "[", "item", "]", "+=", "1", "\n", "", "", "if", "count_dict", "==", "{", "}", ":", "\n", "        ", "return", "-", "1", "\n", "", "count_dict", "=", "sorted", "(", "count_dict", ".", "items", "(", ")", ",", "key", "=", "lambda", "d", ":", "d", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "return", "count_dict", "[", "0", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.utils.func.sk_pca": [[64, 71], ["PCA", "PCA.fit"], "function", ["None"], ["", "def", "sk_pca", "(", "X", ",", "k", ")", ":", "\n", "    ", "from", "sklearn", ".", "decomposition", "import", "PCA", "\n", "pca", "=", "PCA", "(", "k", ")", "\n", "pca", ".", "fit", "(", "X", ")", "\n", "vec", "=", "pca", ".", "components_", "\n", "#print(vec.shape)", "\n", "return", "vec", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.utils.func.fld": [[72, 94], ["numpy.mean", "numpy.mean", "numpy.mean", "print", "numpy.cov", "numpy.cov", "print", "numpy.dot", "print", "numpy.mat", "numpy.mat", "numpy.concatenate", "numpy.linalg.inv", "numpy.linalg.norm", "numpy.mean", "numpy.mean", "numpy.dot", "numpy.dot"], "function", ["None"], ["", "def", "fld", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "x1", ",", "x2", "=", "np", ".", "mat", "(", "x1", ")", ",", "np", ".", "mat", "(", "x2", ")", "\n", "n1", "=", "x1", ".", "shape", "[", "0", "]", "\n", "n2", "=", "x2", ".", "shape", "[", "0", "]", "\n", "k", "=", "x1", ".", "shape", "[", "1", "]", "\n", "\n", "m1", "=", "np", ".", "mean", "(", "x1", ",", "axis", "=", "0", ")", "\n", "m2", "=", "np", ".", "mean", "(", "x2", ",", "axis", "=", "0", ")", "\n", "m", "=", "np", ".", "mean", "(", "np", ".", "concatenate", "(", "(", "x1", ",", "x2", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", "\n", "print", "(", "x1", ".", "shape", ",", "m1", ".", "shape", ")", "\n", "\n", "\n", "c1", "=", "np", ".", "cov", "(", "x1", ".", "T", ")", "\n", "s1", "=", "c1", "*", "(", "n1", "-", "1", ")", "\n", "c2", "=", "np", ".", "cov", "(", "x2", ".", "T", ")", "\n", "s2", "=", "c2", "*", "(", "n2", "-", "1", ")", "\n", "Sw", "=", "s1", "/", "n1", "+", "s2", "/", "n2", "\n", "print", "(", "Sw", ".", "shape", ")", "\n", "W", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "Sw", ")", ",", "(", "m1", "-", "m2", ")", ".", "T", ")", "\n", "print", "(", "W", ".", "shape", ")", "\n", "W", "=", "W", "/", "np", ".", "linalg", ".", "norm", "(", "W", ",", "2", ")", "\n", "return", "np", ".", "mean", "(", "np", ".", "dot", "(", "x1", ",", "W", ")", ")", ",", "np", ".", "mean", "(", "np", ".", "dot", "(", "x2", ",", "W", ")", ")", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.utils.func.pca": [[95, 116], ["numpy.mean", "numpy.cov", "numpy.cov", "numpy.linalg.eig", "numpy.argsort", "numpy.matrix"], "function", ["None"], ["", "def", "pca", "(", "X", ",", "k", ")", ":", "\n", "    ", "n", ",", "m", "=", "X", ".", "shape", "\n", "mean", "=", "np", ".", "mean", "(", "X", ",", "0", ")", "\n", "#print(mean.shape)", "\n", "temp", "=", "X", "-", "mean", "\n", "conv", "=", "np", ".", "cov", "(", "X", ".", "T", ")", "\n", "#print(conv.shape)", "\n", "conv1", "=", "np", ".", "cov", "(", "temp", ".", "T", ")", "\n", "#print(conv-conv1)", "\n", "\n", "w", ",", "v", "=", "np", ".", "linalg", ".", "eig", "(", "conv", ")", "\n", "#print(w.shape)", "\n", "#print(v.shape)", "\n", "index", "=", "np", ".", "argsort", "(", "-", "w", ")", "\n", "vec", "=", "np", ".", "matrix", "(", "v", ".", "T", "[", "index", "[", ":", "k", "]", "]", ")", "\n", "#print(vec.shape)", "\n", "\n", "recon", "=", "(", "temp", "*", "vec", ".", "T", ")", "*", "vec", "+", "mean", "\n", "\n", "#print(X-recon)", "\n", "return", "vec", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.utils.func.get_bbox_dict": [[118, 141], ["print", "name_idx_dict.keys", "open", "f.readlines", "open", "f.readlines", "os.path.join", "fileline.strip().split.strip().split", "os.path.join", "fileline.strip().split.strip().split", "list", "fileline.strip().split.strip", "fileline.strip().split.strip", "map"], "function", ["None"], ["", "def", "get_bbox_dict", "(", "root", ")", ":", "\n", "    ", "print", "(", "'loading from ground truth bbox'", ")", "\n", "name_idx_dict", "=", "{", "}", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'images.txt'", ")", ")", "as", "f", ":", "\n", "        ", "filelines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "fileline", "in", "filelines", ":", "\n", "            ", "fileline", "=", "fileline", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", ")", "\n", "idx", ",", "name", "=", "fileline", "[", "0", "]", ",", "fileline", "[", "1", "]", "\n", "name_idx_dict", "[", "name", "]", "=", "idx", "\n", "\n", "", "", "idx_bbox_dict", "=", "{", "}", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'bounding_boxes.txt'", ")", ")", "as", "f", ":", "\n", "        ", "filelines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "fileline", "in", "filelines", ":", "\n", "            ", "fileline", "=", "fileline", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", ")", "\n", "idx", ",", "bbox", "=", "fileline", "[", "0", "]", ",", "list", "(", "map", "(", "float", ",", "fileline", "[", "1", ":", "]", ")", ")", "\n", "idx_bbox_dict", "[", "idx", "]", "=", "bbox", "\n", "\n", "", "", "name_bbox_dict", "=", "{", "}", "\n", "for", "name", "in", "name_idx_dict", ".", "keys", "(", ")", ":", "\n", "        ", "name_bbox_dict", "[", "name", "]", "=", "idx_bbox_dict", "[", "name_idx_dict", "[", "name", "]", "]", "\n", "\n", "", "return", "name_bbox_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.utils.IoU.get_gt_boxes": [[4, 19], ["xml.parse", "ET.parse.findall", "len", "obj.find", "gt_boxes.append", "float", "float", "float", "float", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find"], "function", ["None"], ["def", "get_gt_boxes", "(", "xmlfile", ")", ":", "\n", "    ", "'''get ground-truth bbox from VOC xml file'''", "\n", "tree", "=", "ET", ".", "parse", "(", "xmlfile", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "'object'", ")", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "gt_boxes", "=", "[", "]", "\n", "for", "obj", "in", "objs", ":", "\n", "        ", "bbox", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "'xmin'", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "'ymin'", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "'xmax'", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "-", "1", "\n", "\n", "gt_boxes", ".", "append", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ")", "\n", "", "return", "gt_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.utils.IoU.get_cls_gt_boxes": [[20, 46], ["xml.parse", "ET.parse.findall", "len", "obj.find", "int", "int", "gt_boxes.append", "len", "obj.find", "float", "float", "float", "float", "obj.find", "obj.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find"], "function", ["None"], ["", "def", "get_cls_gt_boxes", "(", "xmlfile", ",", "cls", ")", ":", "\n", "    ", "'''get ground-truth bbox from VOC xml file'''", "\n", "tree", "=", "ET", ".", "parse", "(", "xmlfile", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "'object'", ")", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "gt_boxes", "=", "[", "]", "\n", "for", "obj", "in", "objs", ":", "\n", "        ", "bbox", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "cls_name", "=", "obj", ".", "find", "(", "'name'", ")", ".", "text", "\n", "truncated", "=", "int", "(", "obj", ".", "find", "(", "'truncated'", ")", ".", "text", ")", "\n", "difficult", "=", "int", "(", "obj", ".", "find", "(", "'difficult'", ")", ".", "text", ")", "\n", "#print(cls_name, cls)", "\n", "if", "cls_name", "!=", "cls", ":", "\n", "#if cls_name != cls or truncated == 1 or difficult == 1:", "\n", "            ", "continue", "\n", "", "x1", "=", "float", "(", "bbox", ".", "find", "(", "'xmin'", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "'ymin'", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "'xmax'", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "-", "1", "\n", "\n", "gt_boxes", ".", "append", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ")", "\n", "", "if", "len", "(", "gt_boxes", ")", "==", "0", ":", "\n", "        ", "pass", "\n", "#print('%s bbox = 0'%cls)", "\n", "\n", "", "return", "gt_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.utils.IoU.convert_boxes": [[48, 55], ["converted_boxes.append", "min", "min", "max", "max"], "function", ["None"], ["", "def", "convert_boxes", "(", "boxes", ")", ":", "\n", "    ", "''' convert the bbox to the format (x1, y1, x2, y2) where x1,y1<x2,y2'''", "\n", "converted_boxes", "=", "[", "]", "\n", "for", "bbox", "in", "boxes", ":", "\n", "        ", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", "=", "bbox", "\n", "converted_boxes", ".", "append", "(", "(", "min", "(", "x1", ",", "x2", ")", ",", "min", "(", "y1", ",", "y2", ")", ",", "max", "(", "x1", ",", "x2", ")", ",", "max", "(", "y1", ",", "y2", ")", ")", ")", "\n", "", "return", "converted_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.utils.IoU.IoU": [[56, 84], ["max", "max", "min", "min", "IoU.IoU.compute_area"], "function", ["None"], ["", "def", "IoU", "(", "a", ",", "b", ")", ":", "\n", "#print(a, b)", "\n", "    ", "x1", "=", "max", "(", "a", "[", "0", "]", ",", "b", "[", "0", "]", ")", "\n", "y1", "=", "max", "(", "a", "[", "1", "]", ",", "b", "[", "1", "]", ")", "\n", "x2", "=", "min", "(", "a", "[", "2", "]", ",", "b", "[", "2", "]", ")", "\n", "y2", "=", "min", "(", "a", "[", "3", "]", ",", "b", "[", "3", "]", ")", "\n", "\n", "def", "compute_area", "(", "box", ")", ":", "\n", "#dx = box[2]-box[0]", "\n", "#dy = box[3]-box[1]", "\n", "        ", "dx", "=", "max", "(", "0", ",", "box", "[", "2", "]", "-", "box", "[", "0", "]", ")", "\n", "dy", "=", "max", "(", "0", ",", "box", "[", "3", "]", "-", "box", "[", "1", "]", ")", "\n", "return", "dx", "*", "dy", "\n", "\n", "#print(x1, y1, x2, y2)", "\n", "#inter = w*h", "\n", "#aarea = (a[2]-a[0]+1)*(a[3]-a[1]+1)", "\n", "#barea = (b[2]-b[0]+1)*(b[3]-b[1]+1)", "\n", "", "inter", "=", "compute_area", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ")", "\n", "aarea", "=", "compute_area", "(", "a", ")", "\n", "barea", "=", "compute_area", "(", "b", ")", "\n", "\n", "#assert aarea+barea-inter>0", "\n", "\n", "o", "=", "inter", "/", "(", "aarea", "+", "barea", "-", "inter", ")", "\n", "#if w<=0 or h<=0:", "\n", "#    o = 0", "\n", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.utils.utils.load_pretrained_model": [[9, 49], ["os.path.isfile", "print", "torch.load", "list", "model.load_state_dict", "print", "print", "checkpoint.state_dict.keys", "set", "print", "torch.load.state_dict", "checkpoint.state_dict.pop", "checkpoint.state_dict.pop", "model.load_state_dict", "print", "print", "k.startswith", "set", "k.startswith", "k.startswith", "k.startswith", "k.startswith", "k.startswith", "k.startswith", "len", "len", "len"], "function", ["None"], ["def", "load_pretrained_model", "(", "model", ",", "pretrained", ")", ":", "\n", "#loading from mocov2 pretrained models", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "pretrained", ")", ":", "\n", "        ", "print", "(", "\"=> loading pretrained from checkpoint {}\"", ".", "format", "(", "pretrained", ")", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "pretrained", ",", "map_location", "=", "\"cpu\"", ")", "\n", "# rename moco pre-trained keys", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "#state_dict = checkpoint", "\n", "#print(state_dict.keys())", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# retain only encoder_q up to before the embedding layer", "\n", "            ", "if", "k", ".", "startswith", "(", "'module.encoder_q'", ")", "and", "not", "k", ".", "startswith", "(", "'module.encoder_q.fc'", ")", ":", "\n", "# remove prefix", "\n", "                ", "state_dict", "[", "k", "[", "len", "(", "\"module.encoder_q.\"", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "# delete renamed or unused k", "\n", "", "elif", "k", ".", "startswith", "(", "'encoder_q'", ")", "and", "not", "k", ".", "startswith", "(", "'encoder_q.fc'", ")", ":", "\n", "                ", "state_dict", "[", "k", "[", "len", "(", "\"encoder_q.\"", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "", "elif", "k", ".", "startswith", "(", "'module'", ")", "and", "not", "k", ".", "startswith", "(", "'module.fc'", ")", "and", "not", "k", ".", "startswith", "(", "'module.final_conv'", ")", ":", "\n", "#elif k.startswith('module'):", "\n", "                ", "state_dict", "[", "k", "[", "len", "(", "\"module.\"", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "#assert set(msg.missing_keys) == {\"fc.weight\", \"fc.bias\"}", "\n", "print", "(", "set", "(", "msg", ".", "missing_keys", ")", ")", "\n", "print", "(", "\"=> loaded pre-trained model '{}'\"", ".", "format", "(", "pretrained", ")", ")", "\n", "#loading from ImageNet pretrained models", "\n", "", "elif", "pretrained", "in", "model_names", ":", "\n", "        ", "print", "(", "\"=> loading pretrained from ImageNet pretrained {}\"", ".", "format", "(", "pretrained", ")", ")", "\n", "checkpoint", "=", "models", ".", "__dict__", "[", "pretrained", "]", "(", "pretrained", "=", "True", ")", "\n", "state_dict", "=", "checkpoint", ".", "state_dict", "(", ")", "\n", "state_dict", ".", "pop", "(", "'fc.weight'", ")", "\n", "state_dict", ".", "pop", "(", "'fc.bias'", ")", "\n", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "assert", "set", "(", "msg", ".", "missing_keys", ")", "==", "{", "\"fc.weight\"", ",", "\"fc.bias\"", "}", "\n", "print", "(", "\"=> loaded pretrained from ImageNet pretrained {}\"", ".", "format", "(", "pretrained", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"=> NOT load pretrained\"", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.utils.utils.load_pretrained_model_no_conv5": [[51, 93], ["os.path.isfile", "print", "torch.load", "list", "model.load_state_dict", "print", "print", "checkpoint.state_dict.keys", "set", "print", "torch.load.state_dict", "checkpoint.state_dict.pop", "checkpoint.state_dict.pop", "model.load_state_dict", "print", "print", "k.startswith", "set", "k.startswith", "k.startswith", "k.startswith", "k.startswith", "k.startswith", "len", "len", "len"], "function", ["None"], ["", "def", "load_pretrained_model_no_conv5", "(", "model", ",", "pretrained", ")", ":", "\n", "#loading from mocov2 pretrained models", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "pretrained", ")", ":", "\n", "        ", "print", "(", "\"=> loading pretrained from checkpoint {}\"", ".", "format", "(", "pretrained", ")", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "pretrained", ",", "map_location", "=", "\"cpu\"", ")", "\n", "# rename moco pre-trained keys", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "#print(state_dict.keys())", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "'layer4'", "in", "k", ":", "\n", "                ", "del", "state_dict", "[", "k", "]", "\n", "continue", "\n", "\n", "# retain only encoder_q up to before the embedding layer", "\n", "", "if", "k", ".", "startswith", "(", "'module.encoder_q'", ")", "and", "not", "k", ".", "startswith", "(", "'module.encoder_q.fc'", ")", ":", "\n", "# remove prefix", "\n", "                ", "state_dict", "[", "k", "[", "len", "(", "\"module.encoder_q.\"", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "# delete renamed or unused k", "\n", "", "elif", "k", ".", "startswith", "(", "'encoder_q'", ")", "and", "not", "k", ".", "startswith", "(", "'encoder_q.fc'", ")", ":", "\n", "                ", "state_dict", "[", "k", "[", "len", "(", "\"encoder_q.\"", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "", "elif", "k", ".", "startswith", "(", "'module'", ")", "and", "not", "k", ".", "startswith", "(", "'module.fc'", ")", ":", "\n", "                ", "state_dict", "[", "k", "[", "len", "(", "\"module.\"", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "#assert set(msg.missing_keys) == {\"fc.weight\", \"fc.bias\"}", "\n", "print", "(", "set", "(", "msg", ".", "missing_keys", ")", ")", "\n", "print", "(", "\"=> loaded pre-trained model '{}'\"", ".", "format", "(", "pretrained", ")", ")", "\n", "#loading from ImageNet pretrained models", "\n", "", "elif", "pretrained", "in", "model_names", ":", "\n", "        ", "print", "(", "\"=> loading pretrained from ImageNet pretrained {}\"", ".", "format", "(", "pretrained", ")", ")", "\n", "checkpoint", "=", "models", ".", "__dict__", "[", "pretrained", "]", "(", "pretrained", "=", "True", ")", "\n", "state_dict", "=", "checkpoint", ".", "state_dict", "(", ")", "\n", "state_dict", ".", "pop", "(", "'fc.weight'", ")", "\n", "state_dict", ".", "pop", "(", "'fc.bias'", ")", "\n", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "assert", "set", "(", "msg", ".", "missing_keys", ")", "==", "{", "\"fc.weight\"", ",", "\"fc.bias\"", "}", "\n", "print", "(", "\"=> loaded pretrained from ImageNet pretrained {}\"", ".", "format", "(", "pretrained", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"=> NOT load pretrained\"", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.CupidJay_Tobias.utils.vis.vis_bbox": [[10, 16], ["img.astype.astype", "cv2.rectangle", "int", "int", "int", "int"], "function", ["None"], ["def", "vis_bbox", "(", "img", ",", "bbox", ",", "color", "=", "_GREEN", ",", "thick", "=", "1", ")", ":", "\n", "    ", "'''Visualize a bounding box'''", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "=", "bbox", "\n", "cv2", ".", "rectangle", "(", "img", ",", "(", "int", "(", "x0", ")", ",", "int", "(", "y0", ")", ")", ",", "(", "int", "(", "x1", ")", ",", "int", "(", "y1", ")", ")", ",", "color", ",", "thickness", "=", "thick", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.utils.vis.vis_one_image": [[17, 21], ["vis.vis_bbox"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.utils.vis.vis_bbox"], ["", "def", "vis_one_image", "(", "img", ",", "boxes", ",", "color", "=", "_GREEN", ")", ":", "\n", "    ", "for", "bbox", "in", "boxes", ":", "\n", "        ", "img", "=", "vis_bbox", "(", "img", ",", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ",", "bbox", "[", "2", "]", ",", "bbox", "[", "3", "]", ")", ",", "color", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1.BasicBlock.__init__": [[42, 68], ["torch.Module.__init__", "resnet_conv1.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet_conv1.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1.BasicBlock.forward": [[69, 86], ["resnet_conv1.BasicBlock.conv1", "resnet_conv1.BasicBlock.bn1", "resnet_conv1.BasicBlock.relu", "resnet_conv1.BasicBlock.conv2", "resnet_conv1.BasicBlock.bn2", "resnet_conv1.BasicBlock.relu", "resnet_conv1.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1.BasicBlock_no_relu.__init__": [[90, 116], ["torch.Module.__init__", "resnet_conv1.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet_conv1.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicBlock_no_relu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1.BasicBlock_no_relu.forward": [[117, 134], ["resnet_conv1.BasicBlock_no_relu.conv1", "resnet_conv1.BasicBlock_no_relu.bn1", "resnet_conv1.BasicBlock_no_relu.relu", "resnet_conv1.BasicBlock_no_relu.conv2", "resnet_conv1.BasicBlock_no_relu.bn2", "resnet_conv1.BasicBlock_no_relu.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "#out = self.relu(out)", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1.Bottleneck.__init__": [[144, 169], ["torch.Module.__init__", "resnet_conv1.conv1x1", "norm_layer", "resnet_conv1.conv3x3", "norm_layer", "resnet_conv1.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1.Bottleneck.forward": [[170, 191], ["resnet_conv1.Bottleneck.conv1", "resnet_conv1.Bottleneck.bn1", "resnet_conv1.Bottleneck.relu", "resnet_conv1.Bottleneck.conv2", "resnet_conv1.Bottleneck.bn2", "resnet_conv1.Bottleneck.relu", "resnet_conv1.Bottleneck.conv3", "resnet_conv1.Bottleneck.bn3", "resnet_conv1.Bottleneck.relu", "resnet_conv1.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1.ResNet.__init__": [[195, 250], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet_conv1.ResNet.modules", "len", "ValueError", "isinstance", "resnet_conv1.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "zero_init_residual", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "replace_stride_with_dilation", ":", "Optional", "[", "List", "[", "bool", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "#nninit.normal(m.weight.data, 0, 1)", "\n", "#m.weight.data.normal_(0, 5)", "\n", "#m.weight.data.uniform_(-2,2)", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1.ResNet._make_layer": [[251, 275], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_conv1.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "planes", ":", "int", ",", "blocks", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "dilate", ":", "bool", "=", "False", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1.ResNet._forward_impl": [[276, 288], ["resnet_conv1.ResNet.conv1", "resnet_conv1.ResNet.bn1", "resnet_conv1.ResNet.relu", "resnet_conv1.ResNet.maxpool", "resnet_conv1.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet_conv1.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1.ResNet.forward": [[289, 291], ["resnet_conv1.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1.conv3x3": [[28, 32], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1.conv1x1": [[34, 37], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1._resnet": [[293, 307], ["resnet_conv1.ResNet", "load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "\n", "arch", ":", "str", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "pretrained", ":", "bool", ",", "\n", "progress", ":", "bool", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "ResNet", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1.resnet50_conv1": [[309, 318], ["resnet_conv1._resnet"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet._resnet"], ["", "def", "resnet50_conv1", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_2.BasicBlock.__init__": [[42, 68], ["torch.Module.__init__", "resnet_conv1_2.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet_conv1_2.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_2.BasicBlock.forward": [[69, 86], ["resnet_conv1_2.BasicBlock.conv1", "resnet_conv1_2.BasicBlock.bn1", "resnet_conv1_2.BasicBlock.relu", "resnet_conv1_2.BasicBlock.conv2", "resnet_conv1_2.BasicBlock.bn2", "resnet_conv1_2.BasicBlock.relu", "resnet_conv1_2.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_2.Bottleneck.__init__": [[97, 122], ["torch.Module.__init__", "resnet_conv1_2.conv1x1", "norm_layer", "resnet_conv1_2.conv3x3", "norm_layer", "resnet_conv1_2.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_2.Bottleneck.forward": [[123, 144], ["resnet_conv1_2.Bottleneck.conv1", "resnet_conv1_2.Bottleneck.bn1", "resnet_conv1_2.Bottleneck.relu", "resnet_conv1_2.Bottleneck.conv2", "resnet_conv1_2.Bottleneck.bn2", "resnet_conv1_2.Bottleneck.relu", "resnet_conv1_2.Bottleneck.conv3", "resnet_conv1_2.Bottleneck.bn3", "resnet_conv1_2.Bottleneck.relu", "resnet_conv1_2.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_2.ResNet.__init__": [[149, 205], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_conv1_2.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet_conv1_2.ResNet.modules", "len", "ValueError", "isinstance", "resnet_conv1_2.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "zero_init_residual", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "replace_stride_with_dilation", ":", "Optional", "[", "List", "[", "bool", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "#nninit.normal(m.weight.data, 0, 1)", "\n", "#m.weight.data.normal_(0, 5)", "\n", "#m.weight.data.uniform_(-2,2)", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_2.ResNet._make_layer": [[206, 230], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_conv1_2.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "planes", ":", "int", ",", "blocks", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "dilate", ":", "bool", "=", "False", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_2.ResNet._forward_impl": [[231, 246], ["resnet_conv1_2.ResNet.conv1", "resnet_conv1_2.ResNet.bn1", "resnet_conv1_2.ResNet.relu", "resnet_conv1_2.ResNet.maxpool", "resnet_conv1_2.ResNet.layer1", "resnet_conv1_2.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet_conv1_2.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_2.ResNet.forward": [[247, 249], ["resnet_conv1_2.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_2.conv3x3": [[28, 32], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_2.conv1x1": [[34, 37], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_2._resnet": [[251, 265], ["resnet_conv1_2.ResNet", "load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "\n", "arch", ":", "str", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "pretrained", ":", "bool", ",", "\n", "progress", ":", "bool", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "ResNet", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_2.resnet50_conv1_2": [[267, 276], ["resnet_conv1_2._resnet"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet._resnet"], ["", "def", "resnet50_conv1_2", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.cam_resnet.BasicBlock.__init__": [[42, 68], ["torch.Module.__init__", "cam_resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "cam_resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.cam_resnet.BasicBlock.forward": [[69, 86], ["cam_resnet.BasicBlock.conv1", "cam_resnet.BasicBlock.bn1", "cam_resnet.BasicBlock.relu", "cam_resnet.BasicBlock.conv2", "cam_resnet.BasicBlock.bn2", "cam_resnet.BasicBlock.relu", "cam_resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.cam_resnet.Bottleneck.__init__": [[97, 122], ["torch.Module.__init__", "cam_resnet.conv1x1", "norm_layer", "cam_resnet.conv3x3", "norm_layer", "cam_resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.cam_resnet.Bottleneck.forward": [[123, 144], ["cam_resnet.Bottleneck.conv1", "cam_resnet.Bottleneck.bn1", "cam_resnet.Bottleneck.relu", "cam_resnet.Bottleneck.conv2", "cam_resnet.Bottleneck.bn2", "cam_resnet.Bottleneck.relu", "cam_resnet.Bottleneck.conv3", "cam_resnet.Bottleneck.bn3", "cam_resnet.Bottleneck.relu", "cam_resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.cam_resnet.ResNet.__init__": [[149, 210], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "cam_resnet.ResNet._make_layer", "cam_resnet.ResNet._make_layer", "cam_resnet.ResNet._make_layer", "cam_resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "cam_resnet.ResNet.modules", "len", "ValueError", "isinstance", "cam_resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "zero_init_residual", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "replace_stride_with_dilation", ":", "Optional", "[", "List", "[", "bool", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "#nninit.normal(m.weight.data, 0, 1)", "\n", "#m.weight.data.normal_(0, 5)", "\n", "#m.weight.data.uniform_(-2,2)", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.cam_resnet.ResNet._make_layer": [[211, 235], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "cam_resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "planes", ":", "int", ",", "blocks", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "dilate", ":", "bool", "=", "False", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.cam_resnet.ResNet._forward_impl": [[236, 253], ["cam_resnet.ResNet.conv1", "cam_resnet.ResNet.bn1", "cam_resnet.ResNet.relu", "cam_resnet.ResNet.maxpool", "cam_resnet.ResNet.layer1", "cam_resnet.ResNet.layer2", "cam_resnet.ResNet.layer3", "cam_resnet.ResNet.layer4", "cam_resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "cam_resnet.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "feat", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "feat", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", ",", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.cam_resnet.ResNet.forward": [[254, 256], ["cam_resnet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.cam_resnet.conv3x3": [[28, 32], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.cam_resnet.conv1x1": [[34, 37], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.cam_resnet._resnet": [[258, 272], ["cam_resnet.ResNet", "load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "\n", "arch", ":", "str", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "pretrained", ":", "bool", ",", "\n", "progress", ":", "bool", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "ResNet", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.cam_resnet.cam_resnet50": [[274, 283], ["cam_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet._resnet"], ["", "def", "cam_resnet50", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_3.BasicBlock.__init__": [[42, 68], ["torch.Module.__init__", "resnet_conv1_3.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet_conv1_3.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_3.BasicBlock.forward": [[69, 86], ["resnet_conv1_3.BasicBlock.conv1", "resnet_conv1_3.BasicBlock.bn1", "resnet_conv1_3.BasicBlock.relu", "resnet_conv1_3.BasicBlock.conv2", "resnet_conv1_3.BasicBlock.bn2", "resnet_conv1_3.BasicBlock.relu", "resnet_conv1_3.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_3.Bottleneck.__init__": [[97, 122], ["torch.Module.__init__", "resnet_conv1_3.conv1x1", "norm_layer", "resnet_conv1_3.conv3x3", "norm_layer", "resnet_conv1_3.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_3.Bottleneck.forward": [[123, 144], ["resnet_conv1_3.Bottleneck.conv1", "resnet_conv1_3.Bottleneck.bn1", "resnet_conv1_3.Bottleneck.relu", "resnet_conv1_3.Bottleneck.conv2", "resnet_conv1_3.Bottleneck.bn2", "resnet_conv1_3.Bottleneck.relu", "resnet_conv1_3.Bottleneck.conv3", "resnet_conv1_3.Bottleneck.bn3", "resnet_conv1_3.Bottleneck.relu", "resnet_conv1_3.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_3.ResNet.__init__": [[149, 207], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_conv1_3.ResNet._make_layer", "resnet_conv1_3.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet_conv1_3.ResNet.modules", "len", "ValueError", "isinstance", "resnet_conv1_3.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "zero_init_residual", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "replace_stride_with_dilation", ":", "Optional", "[", "List", "[", "bool", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "#nninit.normal(m.weight.data, 0, 1)", "\n", "#m.weight.data.normal_(0, 5)", "\n", "#m.weight.data.uniform_(-2,2)", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_3.ResNet._make_layer": [[208, 232], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_conv1_3.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "planes", ":", "int", ",", "blocks", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "dilate", ":", "bool", "=", "False", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_3.ResNet._forward_impl": [[233, 248], ["resnet_conv1_3.ResNet.conv1", "resnet_conv1_3.ResNet.bn1", "resnet_conv1_3.ResNet.relu", "resnet_conv1_3.ResNet.maxpool", "resnet_conv1_3.ResNet.layer1", "resnet_conv1_3.ResNet.layer2", "resnet_conv1_3.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet_conv1_3.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_3.ResNet.forward": [[249, 251], ["resnet_conv1_3.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_3.conv3x3": [[28, 32], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_3.conv1x1": [[34, 37], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_3._resnet": [[253, 267], ["resnet_conv1_3.ResNet", "load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "\n", "arch", ":", "str", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "pretrained", ":", "bool", ",", "\n", "progress", ":", "bool", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "ResNet", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_3.resnet50_conv1_3": [[269, 278], ["resnet_conv1_3._resnet"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet._resnet"], ["", "def", "resnet50_conv1_3", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.sigmoid_resnet.BasicBlock.__init__": [[43, 71], ["torch.Module.__init__", "sigmoid_resnet.conv3x3", "norm_layer", "torch.Sigmoid", "torch.Sigmoid", "sigmoid_resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "#self.relu = nn.ReLU(inplace=True)", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.sigmoid_resnet.BasicBlock.forward": [[72, 89], ["sigmoid_resnet.BasicBlock.conv1", "sigmoid_resnet.BasicBlock.bn1", "sigmoid_resnet.BasicBlock.sigmoid", "sigmoid_resnet.BasicBlock.conv2", "sigmoid_resnet.BasicBlock.bn2", "sigmoid_resnet.BasicBlock.sigmoid", "sigmoid_resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "sigmoid", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "sigmoid", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.sigmoid_resnet.Bottleneck.__init__": [[100, 125], ["torch.Module.__init__", "sigmoid_resnet.conv1x1", "norm_layer", "sigmoid_resnet.conv3x3", "norm_layer", "sigmoid_resnet.conv1x1", "norm_layer", "torch.Sigmoid", "torch.Sigmoid", "int"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.sigmoid_resnet.Bottleneck.forward": [[126, 147], ["sigmoid_resnet.Bottleneck.conv1", "sigmoid_resnet.Bottleneck.bn1", "sigmoid_resnet.Bottleneck.sigmoid", "sigmoid_resnet.Bottleneck.conv2", "sigmoid_resnet.Bottleneck.bn2", "sigmoid_resnet.Bottleneck.sigmoid", "sigmoid_resnet.Bottleneck.conv3", "sigmoid_resnet.Bottleneck.bn3", "sigmoid_resnet.Bottleneck.sigmoid", "sigmoid_resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "sigmoid", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "sigmoid", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "sigmoid", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.sigmoid_resnet.sigmoid_ResNet.__init__": [[151, 209], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Sigmoid", "torch.Sigmoid", "torch.MaxPool2d", "torch.MaxPool2d", "sigmoid_resnet.sigmoid_ResNet._make_layer", "sigmoid_resnet.sigmoid_ResNet._make_layer", "sigmoid_resnet.sigmoid_ResNet._make_layer", "sigmoid_resnet.sigmoid_ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "sigmoid_resnet.sigmoid_ResNet.modules", "len", "ValueError", "isinstance", "sigmoid_resnet.sigmoid_ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "zero_init_residual", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "replace_stride_with_dilation", ":", "Optional", "[", "List", "[", "bool", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "sigmoid_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.sigmoid_resnet.sigmoid_ResNet._make_layer": [[210, 234], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "sigmoid_resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "planes", ":", "int", ",", "blocks", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "dilate", ":", "bool", "=", "False", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.sigmoid_resnet.sigmoid_ResNet._forward_impl": [[235, 252], ["sigmoid_resnet.sigmoid_ResNet.conv1", "sigmoid_resnet.sigmoid_ResNet.bn1", "sigmoid_resnet.sigmoid_ResNet.sigmoid", "sigmoid_resnet.sigmoid_ResNet.maxpool", "sigmoid_resnet.sigmoid_ResNet.layer1", "sigmoid_resnet.sigmoid_ResNet.layer2", "sigmoid_resnet.sigmoid_ResNet.layer3", "sigmoid_resnet.sigmoid_ResNet.layer4", "sigmoid_resnet.sigmoid_ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "sigmoid_resnet.sigmoid_ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.sigmoid_resnet.sigmoid_ResNet.forward": [[253, 255], ["sigmoid_resnet.sigmoid_ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.sigmoid_resnet.conv3x3": [[29, 33], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.sigmoid_resnet.conv1x1": [[35, 38], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.sigmoid_resnet._resnet": [[257, 271], ["sigmoid_resnet.sigmoid_ResNet", "load_state_dict_from_url", "sigmoid_ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "\n", "arch", ":", "str", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "pretrained", ":", "bool", ",", "\n", "progress", ":", "bool", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "sigmoid_ResNet", ":", "\n", "    ", "model", "=", "sigmoid_ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.sigmoid_resnet.resnet50_sigmoid": [[274, 283], ["sigmoid_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet._resnet"], ["", "def", "resnet50_sigmoid", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "sigmoid_ResNet", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.uniform_resnet.BasicBlock.__init__": [[42, 68], ["torch.Module.__init__", "uniform_resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "uniform_resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.uniform_resnet.BasicBlock.forward": [[69, 86], ["uniform_resnet.BasicBlock.conv1", "uniform_resnet.BasicBlock.bn1", "uniform_resnet.BasicBlock.relu", "uniform_resnet.BasicBlock.conv2", "uniform_resnet.BasicBlock.bn2", "uniform_resnet.BasicBlock.relu", "uniform_resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.uniform_resnet.Bottleneck.__init__": [[97, 122], ["torch.Module.__init__", "uniform_resnet.conv1x1", "norm_layer", "uniform_resnet.conv3x3", "norm_layer", "uniform_resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.uniform_resnet.Bottleneck.forward": [[123, 144], ["uniform_resnet.Bottleneck.conv1", "uniform_resnet.Bottleneck.bn1", "uniform_resnet.Bottleneck.relu", "uniform_resnet.Bottleneck.conv2", "uniform_resnet.Bottleneck.bn2", "uniform_resnet.Bottleneck.relu", "uniform_resnet.Bottleneck.conv3", "uniform_resnet.Bottleneck.bn3", "uniform_resnet.Bottleneck.relu", "uniform_resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.uniform_resnet.ResNet.__init__": [[149, 212], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "uniform_resnet.ResNet._make_layer", "uniform_resnet.ResNet._make_layer", "uniform_resnet.ResNet._make_layer", "uniform_resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "uniform_resnet.ResNet.modules", "len", "ValueError", "isinstance", "uniform_resnet.ResNet.modules", "m.weight.data.uniform_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "zero_init_residual", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "replace_stride_with_dilation", ":", "Optional", "[", "List", "[", "bool", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "#nninit.normal(m.weight.data, 0, 1)", "\n", "#m.weight.data.normal_(0, 5)", "\n", "                ", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "#nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')", "\n", "#nn.init.xavier_normal_(m.weight)", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.uniform_resnet.ResNet._make_layer": [[213, 237], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "uniform_resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "planes", ":", "int", ",", "blocks", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "dilate", ":", "bool", "=", "False", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.uniform_resnet.ResNet._forward_impl": [[238, 255], ["uniform_resnet.ResNet.conv1", "uniform_resnet.ResNet.bn1", "uniform_resnet.ResNet.relu", "uniform_resnet.ResNet.maxpool", "uniform_resnet.ResNet.layer1", "uniform_resnet.ResNet.layer2", "uniform_resnet.ResNet.layer3", "uniform_resnet.ResNet.layer4", "uniform_resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "uniform_resnet.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.uniform_resnet.ResNet.forward": [[256, 258], ["uniform_resnet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.uniform_resnet.conv3x3": [[28, 32], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.uniform_resnet.conv1x1": [[34, 37], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.uniform_resnet._resnet": [[260, 274], ["uniform_resnet.ResNet", "load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "\n", "arch", ":", "str", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "pretrained", ":", "bool", ",", "\n", "progress", ":", "bool", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "ResNet", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.uniform_resnet.uniform_resnet50": [[276, 285], ["uniform_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet._resnet"], ["", "def", "uniform_resnet50", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet.BasicBlock.__init__": [[42, 68], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet.BasicBlock.forward": [[69, 86], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet.Bottleneck.__init__": [[97, 122], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet.Bottleneck.forward": [[123, 144], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet.ResNet.__init__": [[149, 210], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "len", "ValueError", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "zero_init_residual", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "replace_stride_with_dilation", ":", "Optional", "[", "List", "[", "bool", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "#nninit.normal(m.weight.data, 0, 1)", "\n", "#m.weight.data.normal_(0, 5)", "\n", "#m.weight.data.uniform_(-2,2)", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet.ResNet._make_layer": [[211, 235], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "planes", ":", "int", ",", "blocks", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "dilate", ":", "bool", "=", "False", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet.ResNet._forward_impl": [[236, 253], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet.ResNet.forward": [[254, 256], ["resnet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet.conv3x3": [[28, 32], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet.conv1x1": [[34, 37], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet._resnet": [[258, 272], ["resnet.ResNet", "load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "\n", "arch", ":", "str", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "pretrained", ":", "bool", ",", "\n", "progress", ":", "bool", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "ResNet", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet.resnet50": [[274, 283], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet._resnet"], ["", "def", "resnet50", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.arctan_resnet.BasicBlock.__init__": [[43, 70], ["torch.Module.__init__", "arctan_resnet.conv3x3", "norm_layer", "arctan_resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "#self.relu = nn.ReLU(inplace=True)", "\n", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.arctan_resnet.BasicBlock.forward": [[71, 88], ["arctan_resnet.BasicBlock.conv1", "arctan_resnet.BasicBlock.bn1", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "arctan_resnet.BasicBlock.conv2", "arctan_resnet.BasicBlock.bn2", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "arctan_resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "torch", ".", "atan", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "torch", ".", "atan", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.arctan_resnet.Bottleneck.__init__": [[99, 123], ["torch.Module.__init__", "arctan_resnet.conv1x1", "norm_layer", "arctan_resnet.conv3x3", "norm_layer", "arctan_resnet.conv1x1", "norm_layer", "int"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.arctan_resnet.Bottleneck.forward": [[124, 145], ["arctan_resnet.Bottleneck.conv1", "arctan_resnet.Bottleneck.bn1", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "arctan_resnet.Bottleneck.conv2", "arctan_resnet.Bottleneck.bn2", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "arctan_resnet.Bottleneck.conv3", "arctan_resnet.Bottleneck.bn3", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "arctan_resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "torch", ".", "atan", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "torch", ".", "atan", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "torch", ".", "atan", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.arctan_resnet.arctan_ResNet.__init__": [[149, 206], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.MaxPool2d", "torch.MaxPool2d", "arctan_resnet.arctan_ResNet._make_layer", "arctan_resnet.arctan_ResNet._make_layer", "arctan_resnet.arctan_ResNet._make_layer", "arctan_resnet.arctan_ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "arctan_resnet.arctan_ResNet.modules", "len", "ValueError", "isinstance", "arctan_resnet.arctan_ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "zero_init_residual", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "replace_stride_with_dilation", ":", "Optional", "[", "List", "[", "bool", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "arctan_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'tanh'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.arctan_resnet.arctan_ResNet._make_layer": [[207, 231], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "arctan_resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "planes", ":", "int", ",", "blocks", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "dilate", ":", "bool", "=", "False", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.arctan_resnet.arctan_ResNet._forward_impl": [[232, 249], ["arctan_resnet.arctan_ResNet.conv1", "arctan_resnet.arctan_ResNet.bn1", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "arctan_resnet.arctan_ResNet.maxpool", "arctan_resnet.arctan_ResNet.layer1", "arctan_resnet.arctan_ResNet.layer2", "arctan_resnet.arctan_ResNet.layer3", "arctan_resnet.arctan_ResNet.layer4", "arctan_resnet.arctan_ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "arctan_resnet.arctan_ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "torch", ".", "atan", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.arctan_resnet.arctan_ResNet.forward": [[250, 252], ["arctan_resnet.arctan_ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.arctan_resnet.conv3x3": [[29, 33], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.arctan_resnet.conv1x1": [[35, 38], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.arctan_resnet._resnet": [[254, 268], ["arctan_resnet.arctan_ResNet", "load_state_dict_from_url", "arctan_ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "\n", "arch", ":", "str", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "pretrained", ":", "bool", ",", "\n", "progress", ":", "bool", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "arctan_ResNet", ":", "\n", "    ", "model", "=", "arctan_ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.arctan_resnet.resnet50_arctan": [[271, 280], ["arctan_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet._resnet"], ["", "def", "resnet50_arctan", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "arctan_ResNet", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.kaiming_uniform_resnet.BasicBlock.__init__": [[42, 68], ["torch.Module.__init__", "kaiming_uniform_resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "kaiming_uniform_resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.kaiming_uniform_resnet.BasicBlock.forward": [[69, 86], ["kaiming_uniform_resnet.BasicBlock.conv1", "kaiming_uniform_resnet.BasicBlock.bn1", "kaiming_uniform_resnet.BasicBlock.relu", "kaiming_uniform_resnet.BasicBlock.conv2", "kaiming_uniform_resnet.BasicBlock.bn2", "kaiming_uniform_resnet.BasicBlock.relu", "kaiming_uniform_resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.kaiming_uniform_resnet.Bottleneck.__init__": [[97, 122], ["torch.Module.__init__", "kaiming_uniform_resnet.conv1x1", "norm_layer", "kaiming_uniform_resnet.conv3x3", "norm_layer", "kaiming_uniform_resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.kaiming_uniform_resnet.Bottleneck.forward": [[123, 144], ["kaiming_uniform_resnet.Bottleneck.conv1", "kaiming_uniform_resnet.Bottleneck.bn1", "kaiming_uniform_resnet.Bottleneck.relu", "kaiming_uniform_resnet.Bottleneck.conv2", "kaiming_uniform_resnet.Bottleneck.bn2", "kaiming_uniform_resnet.Bottleneck.relu", "kaiming_uniform_resnet.Bottleneck.conv3", "kaiming_uniform_resnet.Bottleneck.bn3", "kaiming_uniform_resnet.Bottleneck.relu", "kaiming_uniform_resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.kaiming_uniform_resnet.ResNet.__init__": [[149, 210], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "kaiming_uniform_resnet.ResNet._make_layer", "kaiming_uniform_resnet.ResNet._make_layer", "kaiming_uniform_resnet.ResNet._make_layer", "kaiming_uniform_resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "kaiming_uniform_resnet.ResNet.modules", "len", "ValueError", "isinstance", "kaiming_uniform_resnet.ResNet.modules", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "zero_init_residual", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "replace_stride_with_dilation", ":", "Optional", "[", "List", "[", "bool", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "#nninit.normal(m.weight.data, 0, 1)", "\n", "#m.weight.data.normal_(0, 5)", "\n", "#m.weight.data.uniform_(-2,2)", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.kaiming_uniform_resnet.ResNet._make_layer": [[211, 235], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "kaiming_uniform_resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "planes", ":", "int", ",", "blocks", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "dilate", ":", "bool", "=", "False", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.kaiming_uniform_resnet.ResNet._forward_impl": [[236, 253], ["kaiming_uniform_resnet.ResNet.conv1", "kaiming_uniform_resnet.ResNet.bn1", "kaiming_uniform_resnet.ResNet.relu", "kaiming_uniform_resnet.ResNet.maxpool", "kaiming_uniform_resnet.ResNet.layer1", "kaiming_uniform_resnet.ResNet.layer2", "kaiming_uniform_resnet.ResNet.layer3", "kaiming_uniform_resnet.ResNet.layer4", "kaiming_uniform_resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "kaiming_uniform_resnet.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.kaiming_uniform_resnet.ResNet.forward": [[254, 256], ["kaiming_uniform_resnet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.kaiming_uniform_resnet.conv3x3": [[28, 32], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.kaiming_uniform_resnet.conv1x1": [[34, 37], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.kaiming_uniform_resnet._resnet": [[258, 272], ["kaiming_uniform_resnet.ResNet", "load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "\n", "arch", ":", "str", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "pretrained", ":", "bool", ",", "\n", "progress", ":", "bool", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "ResNet", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.kaiming_uniform_resnet.kaiming_uniform_resnet50": [[274, 283], ["kaiming_uniform_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet._resnet"], ["", "def", "kaiming_uniform_resnet50", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.gauss_resnet.BasicBlock.__init__": [[42, 68], ["torch.Module.__init__", "gauss_resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "gauss_resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.gauss_resnet.BasicBlock.forward": [[69, 86], ["gauss_resnet.BasicBlock.conv1", "gauss_resnet.BasicBlock.bn1", "gauss_resnet.BasicBlock.relu", "gauss_resnet.BasicBlock.conv2", "gauss_resnet.BasicBlock.bn2", "gauss_resnet.BasicBlock.relu", "gauss_resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.gauss_resnet.Bottleneck.__init__": [[97, 122], ["torch.Module.__init__", "gauss_resnet.conv1x1", "norm_layer", "gauss_resnet.conv3x3", "norm_layer", "gauss_resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.gauss_resnet.Bottleneck.forward": [[123, 144], ["gauss_resnet.Bottleneck.conv1", "gauss_resnet.Bottleneck.bn1", "gauss_resnet.Bottleneck.relu", "gauss_resnet.Bottleneck.conv2", "gauss_resnet.Bottleneck.bn2", "gauss_resnet.Bottleneck.relu", "gauss_resnet.Bottleneck.conv3", "gauss_resnet.Bottleneck.bn3", "gauss_resnet.Bottleneck.relu", "gauss_resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.gauss_resnet.ResNet.__init__": [[149, 212], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "gauss_resnet.ResNet._make_layer", "gauss_resnet.ResNet._make_layer", "gauss_resnet.ResNet._make_layer", "gauss_resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "gauss_resnet.ResNet.modules", "len", "ValueError", "isinstance", "gauss_resnet.ResNet.modules", "m.weight.data.normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "zero_init_residual", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "replace_stride_with_dilation", ":", "Optional", "[", "List", "[", "bool", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "#nninit.normal(m.weight.data, 0, 1)", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.1", ")", "\n", "#m.weight.data.uniform_(-1,1)", "\n", "#nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')", "\n", "#nn.init.xavier_normal_(m.weight)", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.gauss_resnet.ResNet._make_layer": [[213, 237], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "gauss_resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "planes", ":", "int", ",", "blocks", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "dilate", ":", "bool", "=", "False", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.gauss_resnet.ResNet._forward_impl": [[238, 255], ["gauss_resnet.ResNet.conv1", "gauss_resnet.ResNet.bn1", "gauss_resnet.ResNet.relu", "gauss_resnet.ResNet.maxpool", "gauss_resnet.ResNet.layer1", "gauss_resnet.ResNet.layer2", "gauss_resnet.ResNet.layer3", "gauss_resnet.ResNet.layer4", "gauss_resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "gauss_resnet.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.gauss_resnet.ResNet.forward": [[256, 258], ["gauss_resnet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.gauss_resnet.conv3x3": [[28, 32], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.gauss_resnet.conv1x1": [[34, 37], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.gauss_resnet._resnet": [[260, 274], ["gauss_resnet.ResNet", "load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "\n", "arch", ":", "str", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "pretrained", ":", "bool", ",", "\n", "progress", ":", "bool", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "ResNet", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.gauss_resnet.gauss_resnet50": [[276, 285], ["gauss_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet._resnet"], ["", "def", "gauss_resnet50", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_4.BasicBlock.__init__": [[42, 68], ["torch.Module.__init__", "resnet_conv1_4.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet_conv1_4.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_4.BasicBlock.forward": [[69, 86], ["resnet_conv1_4.BasicBlock.conv1", "resnet_conv1_4.BasicBlock.bn1", "resnet_conv1_4.BasicBlock.relu", "resnet_conv1_4.BasicBlock.conv2", "resnet_conv1_4.BasicBlock.bn2", "resnet_conv1_4.BasicBlock.relu", "resnet_conv1_4.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_4.Bottleneck.__init__": [[97, 122], ["torch.Module.__init__", "resnet_conv1_4.conv1x1", "norm_layer", "resnet_conv1_4.conv3x3", "norm_layer", "resnet_conv1_4.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_4.Bottleneck.forward": [[123, 144], ["resnet_conv1_4.Bottleneck.conv1", "resnet_conv1_4.Bottleneck.bn1", "resnet_conv1_4.Bottleneck.relu", "resnet_conv1_4.Bottleneck.conv2", "resnet_conv1_4.Bottleneck.bn2", "resnet_conv1_4.Bottleneck.relu", "resnet_conv1_4.Bottleneck.conv3", "resnet_conv1_4.Bottleneck.bn3", "resnet_conv1_4.Bottleneck.relu", "resnet_conv1_4.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_4.ResNet.__init__": [[149, 209], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_conv1_4.ResNet._make_layer", "resnet_conv1_4.ResNet._make_layer", "resnet_conv1_4.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet_conv1_4.ResNet.modules", "len", "ValueError", "isinstance", "resnet_conv1_4.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "zero_init_residual", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "replace_stride_with_dilation", ":", "Optional", "[", "List", "[", "bool", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "#nninit.normal(m.weight.data, 0, 1)", "\n", "#m.weight.data.normal_(0, 5)", "\n", "#m.weight.data.uniform_(-2,2)", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_4.ResNet._make_layer": [[210, 234], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_conv1_4.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "planes", ":", "int", ",", "blocks", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "dilate", ":", "bool", "=", "False", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_4.ResNet._forward_impl": [[235, 251], ["resnet_conv1_4.ResNet.conv1", "resnet_conv1_4.ResNet.bn1", "resnet_conv1_4.ResNet.relu", "resnet_conv1_4.ResNet.maxpool", "resnet_conv1_4.ResNet.layer1", "resnet_conv1_4.ResNet.layer2", "resnet_conv1_4.ResNet.layer3", "resnet_conv1_4.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet_conv1_4.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_4.ResNet.forward": [[252, 254], ["resnet_conv1_4.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_4.conv3x3": [[28, 32], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_4.conv1x1": [[34, 37], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_4._resnet": [[256, 270], ["resnet_conv1_4.ResNet", "load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "\n", "arch", ":", "str", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "pretrained", ":", "bool", ",", "\n", "progress", ":", "bool", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "ResNet", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.resnet_conv1_4.resnet50_conv1_4": [[272, 281], ["resnet_conv1_4._resnet"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet._resnet"], ["", "def", "resnet50_conv1_4", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_resnet.BasicBlock.__init__": [[42, 68], ["torch.Module.__init__", "xavier_resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "xavier_resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_resnet.BasicBlock.forward": [[69, 86], ["xavier_resnet.BasicBlock.conv1", "xavier_resnet.BasicBlock.bn1", "xavier_resnet.BasicBlock.relu", "xavier_resnet.BasicBlock.conv2", "xavier_resnet.BasicBlock.bn2", "xavier_resnet.BasicBlock.relu", "xavier_resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_resnet.Bottleneck.__init__": [[97, 122], ["torch.Module.__init__", "xavier_resnet.conv1x1", "norm_layer", "xavier_resnet.conv3x3", "norm_layer", "xavier_resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_resnet.Bottleneck.forward": [[123, 144], ["xavier_resnet.Bottleneck.conv1", "xavier_resnet.Bottleneck.bn1", "xavier_resnet.Bottleneck.relu", "xavier_resnet.Bottleneck.conv2", "xavier_resnet.Bottleneck.bn2", "xavier_resnet.Bottleneck.relu", "xavier_resnet.Bottleneck.conv3", "xavier_resnet.Bottleneck.bn3", "xavier_resnet.Bottleneck.relu", "xavier_resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_resnet.ResNet.__init__": [[149, 212], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "xavier_resnet.ResNet._make_layer", "xavier_resnet.ResNet._make_layer", "xavier_resnet.ResNet._make_layer", "xavier_resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "xavier_resnet.ResNet.modules", "len", "ValueError", "isinstance", "xavier_resnet.ResNet.modules", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "zero_init_residual", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "replace_stride_with_dilation", ":", "Optional", "[", "List", "[", "bool", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "#nninit.normal(m.weight.data, 0, 1)", "\n", "#m.weight.data.normal_(0, 5)", "\n", "#m.weight.data.uniform_(-2,2)", "\n", "#nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_resnet.ResNet._make_layer": [[213, 237], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "xavier_resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "planes", ":", "int", ",", "blocks", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "dilate", ":", "bool", "=", "False", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_resnet.ResNet._forward_impl": [[238, 255], ["xavier_resnet.ResNet.conv1", "xavier_resnet.ResNet.bn1", "xavier_resnet.ResNet.relu", "xavier_resnet.ResNet.maxpool", "xavier_resnet.ResNet.layer1", "xavier_resnet.ResNet.layer2", "xavier_resnet.ResNet.layer3", "xavier_resnet.ResNet.layer4", "xavier_resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "xavier_resnet.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_resnet.ResNet.forward": [[256, 258], ["xavier_resnet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_resnet.conv3x3": [[28, 32], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_resnet.conv1x1": [[34, 37], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_resnet._resnet": [[260, 274], ["xavier_resnet.ResNet", "load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "\n", "arch", ":", "str", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "pretrained", ":", "bool", ",", "\n", "progress", ":", "bool", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "ResNet", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_resnet.xavier_resnet50": [[276, 285], ["xavier_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet._resnet"], ["", "def", "xavier_resnet50", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.BasicBlock.__init__": [[42, 68], ["torch.Module.__init__", "xavier_uniform_resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "xavier_uniform_resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.BasicBlock.forward": [[69, 86], ["xavier_uniform_resnet.BasicBlock.conv1", "xavier_uniform_resnet.BasicBlock.bn1", "xavier_uniform_resnet.BasicBlock.relu", "xavier_uniform_resnet.BasicBlock.conv2", "xavier_uniform_resnet.BasicBlock.bn2", "xavier_uniform_resnet.BasicBlock.relu", "xavier_uniform_resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.Bottleneck.__init__": [[97, 122], ["torch.Module.__init__", "xavier_uniform_resnet.conv1x1", "norm_layer", "xavier_uniform_resnet.conv3x3", "norm_layer", "xavier_uniform_resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.Bottleneck.forward": [[123, 144], ["xavier_uniform_resnet.Bottleneck.conv1", "xavier_uniform_resnet.Bottleneck.bn1", "xavier_uniform_resnet.Bottleneck.relu", "xavier_uniform_resnet.Bottleneck.conv2", "xavier_uniform_resnet.Bottleneck.bn2", "xavier_uniform_resnet.Bottleneck.relu", "xavier_uniform_resnet.Bottleneck.conv3", "xavier_uniform_resnet.Bottleneck.bn3", "xavier_uniform_resnet.Bottleneck.relu", "xavier_uniform_resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__": [[149, 212], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "xavier_uniform_resnet.ResNet._make_layer", "xavier_uniform_resnet.ResNet._make_layer", "xavier_uniform_resnet.ResNet._make_layer", "xavier_uniform_resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "xavier_uniform_resnet.ResNet.modules", "len", "ValueError", "isinstance", "xavier_uniform_resnet.ResNet.modules", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.__init__", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "zero_init_residual", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "replace_stride_with_dilation", ":", "Optional", "[", "List", "[", "bool", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "#nninit.normal(m.weight.data, 0, 1)", "\n", "#m.weight.data.normal_(0, 5)", "\n", "#m.weight.data.uniform_(-2,2)", "\n", "#nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._make_layer": [[213, 237], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "xavier_uniform_resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "planes", ":", "int", ",", "blocks", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "dilate", ":", "bool", "=", "False", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._forward_impl": [[238, 255], ["xavier_uniform_resnet.ResNet.conv1", "xavier_uniform_resnet.ResNet.bn1", "xavier_uniform_resnet.ResNet.relu", "xavier_uniform_resnet.ResNet.maxpool", "xavier_uniform_resnet.ResNet.layer1", "xavier_uniform_resnet.ResNet.layer2", "xavier_uniform_resnet.ResNet.layer3", "xavier_uniform_resnet.ResNet.layer4", "xavier_uniform_resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "xavier_uniform_resnet.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet.forward": [[256, 258], ["xavier_uniform_resnet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv3x3": [[28, 32], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.conv1x1": [[34, 37], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet._resnet": [[260, 274], ["xavier_uniform_resnet.ResNet", "load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "\n", "arch", ":", "str", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "pretrained", ":", "bool", ",", "\n", "progress", ":", "bool", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "ResNet", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet.xavier_uniform_resnet50": [[276, 285], ["xavier_uniform_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.CupidJay_Tobias.custom_models.xavier_uniform_resnet._resnet"], ["", "def", "xavier_uniform_resnet50", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "", ""]]}