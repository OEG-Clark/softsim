{"home.repos.pwc.inspect_result.mcg-nju_camliflow.None.driving.Driving.__init__": [[11, 18], ["os.path.isdir", "str", "list", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfgs", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isdir", "(", "cfgs", ".", "root_dir", ")", "\n", "\n", "self", ".", "root_dir", "=", "str", "(", "cfgs", ".", "root_dir", ")", "\n", "self", ".", "cfgs", "=", "cfgs", "\n", "\n", "self", ".", "indices", "=", "list", "(", "range", "(", "1", ",", "300", ")", ")", "# 1, 2, ... 299", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.driving.Driving.__len__": [[19, 21], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.driving.Driving.__getitem__": [[22, 94], ["random.choice", "random.choice", "random.choice", "random.choice", "numpy.load", "utils.load_flow_png", "numpy.load", "numpy.concatenate", "augmentation.joint_augmentation", "numpy.random.choice", "numpy.random.choice", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate.transpose", "numpy.concatenate.transpose", "numpy.concatenate.transpose", "numpy.load.transpose", "numpy.float32", "numpy.random.seed", "os.path.join", "os.path.join", "os.path.join", "cv2.imread", "cv2.imread", "os.path.join", "os.path.join", "flow_mask_2d[].astype"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_flow_png", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.joint_augmentation"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "if", "not", "self", ".", "cfgs", ".", "augmentation", ".", "enabled", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "", "idx", "=", "self", ".", "indices", "[", "i", "]", "\n", "\n", "focal_type", "=", "random", ".", "choice", "(", "self", ".", "cfgs", ".", "focal_type", ")", "\n", "moving_dir", "=", "random", ".", "choice", "(", "self", ".", "cfgs", ".", "moving_dir", ")", "\n", "speed", "=", "random", ".", "choice", "(", "self", ".", "cfgs", ".", "speed", ")", "\n", "flow_dir", "=", "random", ".", "choice", "(", "self", ".", "cfgs", ".", "flow_dir", ")", "\n", "\n", "if", "flow_dir", "==", "'into_future'", ":", "\n", "            ", "idx1", "=", "idx", "\n", "idx2", "=", "idx", "+", "1", "\n", "", "elif", "flow_dir", "==", "'into_past'", ":", "\n", "            ", "idx1", "=", "idx", "+", "1", "\n", "idx2", "=", "idx", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n", "", "data_dict", "=", "{", "'index'", ":", "idx1", "}", "\n", "\n", "# camera intrinsics", "\n", "f", "=", "450.0", "if", "focal_type", "==", "'15mm_focallength'", "else", "1050.0", "\n", "baseline", ",", "cx", ",", "cy", "=", "1.0", ",", "479.5", ",", "269.5", "\n", "\n", "# load data", "\n", "pcs", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root_dir", ",", "'pc'", ",", "focal_type", ",", "moving_dir", ",", "speed", ",", "flow_dir", ",", "'%04d.npz'", "%", "idx1", "\n", ")", ")", "\n", "flow_2d", ",", "flow_mask_2d", "=", "load_flow_png", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root_dir", ",", "'flow_2d'", ",", "focal_type", ",", "moving_dir", ",", "speed", ",", "flow_dir", ",", "'%04d.png'", "%", "idx1", "\n", ")", ",", "scale", "=", "32.0", ")", "\n", "flow_3d", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root_dir", ",", "'flow_3d'", ",", "focal_type", ",", "moving_dir", ",", "speed", ",", "flow_dir", ",", "'%04d.npy'", "%", "idx1", "\n", ")", ")", "\n", "pc1", ",", "pc2", "=", "pcs", "[", "'pc1'", "]", ",", "pcs", "[", "'pc2'", "]", "\n", "\n", "# depth mask", "\n", "mask1", "=", "pc1", "[", "...", ",", "-", "1", "]", "<", "self", ".", "cfgs", ".", "max_depth", "\n", "mask2", "=", "pc2", "[", "...", ",", "-", "1", "]", "<", "self", ".", "cfgs", ".", "max_depth", "\n", "pc1", ",", "pc2", ",", "flow_3d", "=", "pc1", "[", "mask1", "]", ",", "pc2", "[", "mask2", "]", ",", "flow_3d", "[", "mask1", "]", "\n", "\n", "image1", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root_dir", ",", "'image'", ",", "focal_type", ",", "moving_dir", ",", "speed", ",", "'left'", ",", "'%04d.png'", "%", "idx1", "\n", ")", ")", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "image2", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root_dir", ",", "'image'", ",", "focal_type", ",", "moving_dir", ",", "speed", ",", "'left'", ",", "'%04d.png'", "%", "idx2", "\n", ")", ")", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "flow_2d", "=", "np", ".", "concatenate", "(", "[", "\n", "flow_2d", ",", "flow_mask_2d", "[", "...", ",", "None", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "]", ",", "axis", "=", "2", ")", "\n", "\n", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", "=", "joint_augmentation", "(", "\n", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", ",", "self", ".", "cfgs", ".", "augmentation", "\n", ")", "\n", "\n", "# random sampling", "\n", "indices1", "=", "np", ".", "random", ".", "choice", "(", "pc1", ".", "shape", "[", "0", "]", ",", "size", "=", "self", ".", "cfgs", ".", "n_points", ",", "replace", "=", "pc1", ".", "shape", "[", "0", "]", "<", "self", ".", "cfgs", ".", "n_points", ")", "\n", "indices2", "=", "np", ".", "random", ".", "choice", "(", "pc2", ".", "shape", "[", "0", "]", ",", "size", "=", "self", ".", "cfgs", ".", "n_points", ",", "replace", "=", "pc2", ".", "shape", "[", "0", "]", "<", "self", ".", "cfgs", ".", "n_points", ")", "\n", "pc1", ",", "pc2", ",", "flow_3d", "=", "pc1", "[", "indices1", "]", ",", "pc2", "[", "indices2", "]", ",", "flow_3d", "[", "indices1", "]", "\n", "\n", "images", "=", "np", ".", "concatenate", "(", "[", "image1", ",", "image2", "]", ",", "axis", "=", "-", "1", ")", "\n", "pcs", "=", "np", ".", "concatenate", "(", "[", "pc1", ",", "pc2", "]", ",", "axis", "=", "1", ")", "\n", "\n", "data_dict", "[", "'images'", "]", "=", "images", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "data_dict", "[", "'flow_2d'", "]", "=", "flow_2d", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "data_dict", "[", "'pcs'", "]", "=", "pcs", ".", "transpose", "(", ")", "\n", "data_dict", "[", "'flow_3d'", "]", "=", "flow_3d", ".", "transpose", "(", ")", "\n", "data_dict", "[", "'intrinsics'", "]", "=", "np", ".", "float32", "(", "[", "f", ",", "cx", ",", "cy", "]", ")", "\n", "\n", "return", "data_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.eval_things.Evaluator.__init__": [[17, 35], ["logging.info", "factory.FlyingThings3D", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "logging.info", "factory.model_factory().to", "logging.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "eval_things.Evaluator.model.load_state_dict", "factory.model_factory"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.factory.model_factory"], ["    ", "def", "__init__", "(", "self", ",", "device", ":", "torch", ".", "device", ",", "cfgs", ":", "DictConfig", ")", ":", "\n", "        ", "self", ".", "cfgs", "=", "cfgs", "\n", "self", ".", "device", "=", "device", "\n", "\n", "logging", ".", "info", "(", "'Loading test set from %s'", "%", "self", ".", "cfgs", ".", "testset", ".", "root_dir", ")", "\n", "self", ".", "test_dataset", "=", "FlyingThings3D", "(", "self", ".", "cfgs", ".", "testset", ")", "\n", "self", ".", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "test_dataset", ",", "\n", "batch_size", "=", "self", ".", "cfgs", ".", "model", ".", "batch_size", ",", "\n", "num_workers", "=", "self", ".", "cfgs", ".", "testset", ".", "n_workers", "\n", ")", "\n", "\n", "logging", ".", "info", "(", "'Creating model: CamLiFlow'", ")", "\n", "self", ".", "model", "=", "model_factory", "(", "self", ".", "cfgs", ".", "model", ")", ".", "to", "(", "device", "=", "self", ".", "device", ")", "\n", "\n", "logging", ".", "info", "(", "'Loading checkpoint from %s'", "%", "self", ".", "cfgs", ".", "ckpt", ".", "path", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "cfgs", ".", "ckpt", ".", "path", ",", "self", ".", "device", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "strict", "=", "self", ".", "cfgs", ".", "ckpt", ".", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.eval_things.Evaluator.run": [[36, 108], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "logging.info", "eval_things.Evaluator.model.eval", "tqdm.tqdm.tqdm", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "utils.copy_to_device", "eval_things.Evaluator.model.forward", "range", "utils.size_of_batch", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "epe2d_map[].sum().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "fl_err_map[].float().sum().item", "epe3d_map[].sum().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "epe3d_map_noc.sum().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "epe2d_map[].sum", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "fl_err_map[].float().sum", "epe3d_map[].sum", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "epe3d_map_noc.sum", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "fl_err_map[].float"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.eval", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.copy_to_device", "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.CorrelationFunction.forward", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.size_of_batch"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "run", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'Running evaluation...'", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "metrics_2d", "=", "{", "'counts'", ":", "0", ",", "'EPE2d'", ":", "0.0", ",", "'1px'", ":", "0.0", ",", "'Fl'", ":", "0.0", "}", "\n", "metrics_3d", "=", "{", "'counts'", ":", "0", ",", "'EPE3d'", ":", "0.0", ",", "'5cm'", ":", "0.0", ",", "'10cm'", ":", "0.0", "}", "\n", "metrics_3d_noc", "=", "{", "'counts'", ":", "0", ",", "'EPE3d'", ":", "0.0", ",", "'5cm'", ":", "0.0", ",", "'10cm'", ":", "0.0", "}", "\n", "\n", "for", "inputs", "in", "tqdm", "(", "self", ".", "test_loader", ")", ":", "\n", "            ", "inputs", "=", "copy_to_device", "(", "inputs", ",", "self", ".", "device", ")", "\n", "outputs", "=", "self", ".", "model", ".", "forward", "(", "inputs", ")", "\n", "\n", "for", "batch_id", "in", "range", "(", "size_of_batch", "(", "inputs", ")", ")", ":", "\n", "                ", "flow_2d_pred", "=", "outputs", "[", "'flow_2d'", "]", "[", "batch_id", "]", "\n", "flow_3d_pred", "=", "outputs", "[", "'flow_3d'", "]", "[", "batch_id", "]", "\n", "flow_2d_target", "=", "inputs", "[", "'flow_2d'", "]", "[", "batch_id", "]", "\n", "flow_3d_target", "=", "inputs", "[", "'flow_3d'", "]", "[", "batch_id", "]", "\n", "\n", "if", "flow_2d_target", ".", "shape", "[", "0", "]", ">", "2", ":", "\n", "                    ", "flow_2d_mask", "=", "flow_2d_target", "[", "2", "]", ">", "0", "\n", "flow_2d_target", "=", "flow_2d_target", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "                    ", "flow_2d_mask", "=", "torch", ".", "ones", "(", "flow_2d_target", ".", "shape", "[", "1", ":", "]", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "", "if", "flow_3d_target", ".", "shape", "[", "0", "]", ">", "3", ":", "\n", "                    ", "flow_3d_mask", "=", "flow_3d_target", "[", "3", "]", ">", "0", "\n", "flow_3d_target", "=", "flow_3d_target", "[", ":", "3", "]", "\n", "", "else", ":", "\n", "                    ", "flow_3d_mask", "=", "torch", ".", "ones", "(", "flow_3d_target", ".", "shape", "[", "1", "]", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "", "epe2d_map", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "(", "flow_2d_pred", "-", "flow_2d_target", ")", "**", "2", ",", "dim", "=", "0", ")", ")", "\n", "epe3d_map", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "(", "flow_3d_pred", "-", "flow_3d_target", ")", "**", "2", ",", "dim", "=", "0", ")", ")", "\n", "\n", "flow_2d_mask", "=", "torch", ".", "logical_and", "(", "flow_2d_mask", ",", "torch", ".", "logical_not", "(", "torch", ".", "isnan", "(", "epe2d_map", ")", ")", ")", "\n", "flow_3d_mask", "=", "torch", ".", "logical_and", "(", "flow_3d_mask", ",", "torch", ".", "logical_not", "(", "torch", ".", "isnan", "(", "epe3d_map", ")", ")", ")", "\n", "\n", "flow_2d_target_mag", "=", "torch", ".", "linalg", ".", "norm", "(", "flow_2d_target", ",", "dim", "=", "0", ")", "\n", "fl_err_map", "=", "torch", ".", "logical_and", "(", "epe2d_map", ">", "3.0", ",", "epe2d_map", "/", "flow_2d_target_mag", ">", "0.05", ")", "\n", "\n", "metrics_2d", "[", "'counts'", "]", "+=", "epe2d_map", "[", "flow_2d_mask", "]", ".", "shape", "[", "0", "]", "\n", "metrics_2d", "[", "'EPE2d'", "]", "+=", "epe2d_map", "[", "flow_2d_mask", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "metrics_2d", "[", "'1px'", "]", "+=", "torch", ".", "count_nonzero", "(", "epe2d_map", "[", "flow_2d_mask", "]", "<", "1.0", ")", ".", "item", "(", ")", "\n", "metrics_2d", "[", "'Fl'", "]", "+=", "fl_err_map", "[", "flow_2d_mask", "]", ".", "float", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "metrics_3d", "[", "'counts'", "]", "+=", "epe3d_map", "[", "flow_3d_mask", "]", ".", "shape", "[", "0", "]", "\n", "metrics_3d", "[", "'EPE3d'", "]", "+=", "epe3d_map", "[", "flow_3d_mask", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "metrics_3d", "[", "'5cm'", "]", "+=", "torch", ".", "count_nonzero", "(", "epe3d_map", "[", "flow_3d_mask", "]", "<", "0.05", ")", ".", "item", "(", ")", "\n", "metrics_3d", "[", "'10cm'", "]", "+=", "torch", ".", "count_nonzero", "(", "epe3d_map", "[", "flow_3d_mask", "]", "<", "0.1", ")", ".", "item", "(", ")", "\n", "\n", "# evaluate on non-occluded points", "\n", "occ_mask_3d", "=", "inputs", "[", "'occ_mask_3d'", "]", "[", "batch_id", "]", "\n", "epe3d_map_noc", "=", "epe3d_map", "[", "torch", ".", "logical_and", "(", "occ_mask_3d", "==", "0", ",", "flow_3d_mask", ")", "]", "\n", "metrics_3d_noc", "[", "'counts'", "]", "+=", "epe3d_map_noc", ".", "shape", "[", "0", "]", "\n", "metrics_3d_noc", "[", "'EPE3d'", "]", "+=", "epe3d_map_noc", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "metrics_3d_noc", "[", "'5cm'", "]", "+=", "torch", ".", "count_nonzero", "(", "epe3d_map_noc", "<", "0.05", ")", ".", "item", "(", ")", "\n", "metrics_3d_noc", "[", "'10cm'", "]", "+=", "torch", ".", "count_nonzero", "(", "epe3d_map_noc", "<", "0.1", ")", ".", "item", "(", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "'#### 2D Metrics ####'", ")", "\n", "logging", ".", "info", "(", "'EPE: %.3f'", "%", "(", "metrics_2d", "[", "'EPE2d'", "]", "/", "metrics_2d", "[", "'counts'", "]", ")", ")", "\n", "logging", ".", "info", "(", "'1px: %.2f%%'", "%", "(", "metrics_2d", "[", "'1px'", "]", "/", "metrics_2d", "[", "'counts'", "]", "*", "100.0", ")", ")", "\n", "logging", ".", "info", "(", "'Fl:  %.2f%%'", "%", "(", "metrics_2d", "[", "'Fl'", "]", "/", "metrics_2d", "[", "'counts'", "]", "*", "100.0", ")", ")", "\n", "\n", "logging", ".", "info", "(", "'#### 3D Metrics ####'", ")", "\n", "logging", ".", "info", "(", "'EPE: %.3f'", "%", "(", "metrics_3d", "[", "'EPE3d'", "]", "/", "metrics_3d", "[", "'counts'", "]", ")", ")", "\n", "logging", ".", "info", "(", "'5cm: %.2f%%'", "%", "(", "metrics_3d", "[", "'5cm'", "]", "/", "metrics_3d", "[", "'counts'", "]", "*", "100.0", ")", ")", "\n", "logging", ".", "info", "(", "'10cm: %.2f%%'", "%", "(", "metrics_3d", "[", "'10cm'", "]", "/", "metrics_3d", "[", "'counts'", "]", "*", "100.0", ")", ")", "\n", "\n", "logging", ".", "info", "(", "'#### 3D Metrics (Non-occluded) ####'", ")", "\n", "logging", ".", "info", "(", "'EPE: %.3f'", "%", "(", "metrics_3d_noc", "[", "'EPE3d'", "]", "/", "metrics_3d_noc", "[", "'counts'", "]", ")", ")", "\n", "logging", ".", "info", "(", "'5cm: %.2f%%'", "%", "(", "metrics_3d_noc", "[", "'5cm'", "]", "/", "metrics_3d_noc", "[", "'counts'", "]", "*", "100.0", ")", ")", "\n", "logging", ".", "info", "(", "'10cm: %.2f%%'", "%", "(", "metrics_3d_noc", "[", "'10cm'", "]", "/", "metrics_3d_noc", "[", "'counts'", "]", "*", "100.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.demo.Demo.__init__": [[17, 27], ["logging.info", "factory.model_factory().to", "logging.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "demo.Demo.model.load_state_dict", "factory.model_factory"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.factory.model_factory"], ["    ", "def", "__init__", "(", "self", ",", "device", ":", "torch", ".", "device", ",", "cfgs", ":", "DictConfig", ")", ":", "\n", "        ", "self", ".", "cfgs", "=", "cfgs", "\n", "self", ".", "device", "=", "device", "\n", "\n", "logging", ".", "info", "(", "'Creating model: CamLiFlow'", ")", "\n", "self", ".", "model", "=", "model_factory", "(", "self", ".", "cfgs", ".", "model", ")", ".", "to", "(", "device", "=", "self", ".", "device", ")", "\n", "\n", "logging", ".", "info", "(", "'Loading checkpoint from %s'", "%", "self", ".", "cfgs", ".", "ckpt", ".", "path", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "cfgs", ".", "ckpt", ".", "path", ",", "self", ".", "device", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "strict", "=", "self", ".", "cfgs", ".", "ckpt", ".", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.demo.Demo.prepare_images_and_depths": [[28, 57], ["utils.disp2pc", "utils.disp2pc", "numpy.logical_not", "numpy.logical_not", "numpy.random.choice", "numpy.random.choice", "cv2.imread", "cv2.imread", "utils.load_fpm", "utils.load_fpm", "numpy.isnan", "numpy.isnan", "numpy.sum", "numpy.sum", "min", "min"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.disp2pc", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.disp2pc", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_fpm", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_fpm"], ["", "def", "prepare_images_and_depths", "(", "self", ")", ":", "\n", "# load images", "\n", "        ", "image1", "=", "cv2", ".", "imread", "(", "args", ".", "image1", ")", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "image2", "=", "cv2", ".", "imread", "(", "args", ".", "image2", ")", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "\n", "# load disparity maps", "\n", "disp1", "=", "-", "load_fpm", "(", "args", ".", "disp1", ")", "\n", "disp2", "=", "-", "load_fpm", "(", "args", ".", "disp2", ")", "\n", "\n", "# lift disparity maps into point clouds", "\n", "pc1", "=", "disp2pc", "(", "disp1", ",", "args", ".", "baseline", ",", "args", ".", "f", ",", "args", ".", "cx", ",", "args", ".", "cy", ")", "\n", "pc2", "=", "disp2pc", "(", "disp2", ",", "args", ".", "baseline", ",", "args", ".", "f", ",", "args", ".", "cx", ",", "args", ".", "cy", ")", "\n", "\n", "# apply depth mask", "\n", "mask1", "=", "(", "pc1", "[", "...", ",", "-", "1", "]", "<", "args", ".", "max_depth", ")", "\n", "mask2", "=", "(", "pc2", "[", "...", ",", "-", "1", "]", "<", "args", ".", "max_depth", ")", "\n", "pc1", ",", "pc2", "=", "pc1", "[", "mask1", "]", ",", "pc2", "[", "mask2", "]", "\n", "\n", "# NaN check", "\n", "mask1", "=", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "np", ".", "sum", "(", "pc1", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "mask2", "=", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "np", ".", "sum", "(", "pc2", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "pc1", ",", "pc2", "=", "pc1", "[", "mask1", "]", ",", "pc2", "[", "mask2", "]", "\n", "\n", "# random sampling", "\n", "indices1", "=", "np", ".", "random", ".", "choice", "(", "pc1", ".", "shape", "[", "0", "]", ",", "size", "=", "min", "(", "args", ".", "n_points", ",", "pc1", ".", "shape", "[", "0", "]", ")", ",", "replace", "=", "False", ")", "\n", "indices2", "=", "np", ".", "random", ".", "choice", "(", "pc2", ".", "shape", "[", "0", "]", ",", "size", "=", "min", "(", "args", ".", "n_points", ",", "pc2", ".", "shape", "[", "0", "]", ")", ",", "replace", "=", "False", ")", "\n", "pc1", ",", "pc2", "=", "pc1", "[", "indices1", "]", ",", "pc2", "[", "indices2", "]", "\n", "\n", "return", "image1", ",", "image2", ",", "pc1", ",", "pc2", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.demo.Demo.display": [[58, 77], ["utils.viz_optical_flow", "numpy.concatenate", "cv2.resize", "cv2.imshow", "cv2.waitKey", "open3d.geometry.PointCloud", "open3d.geometry.PointCloud", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.visualization.draw_geometries", "numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.viz_optical_flow"], ["", "def", "display", "(", "self", ",", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ")", ":", "\n", "# visualize optical flow", "\n", "        ", "flow_2d_img", "=", "viz_optical_flow", "(", "flow_2d", ")", "\n", "images", "=", "np", ".", "concatenate", "(", "[", "image1", ",", "image2", ",", "flow_2d_img", "]", ",", "axis", "=", "0", ")", "\n", "images", "=", "cv2", ".", "resize", "(", "images", ",", "dsize", "=", "None", ",", "fx", "=", "0.5", ",", "fy", "=", "0.5", ")", "\n", "cv2", ".", "imshow", "(", "''", ",", "images", "[", "...", ",", ":", ":", "-", "1", "]", ")", "\n", "cv2", ".", "waitKey", "(", "0", ")", "\n", "\n", "# visualize scene flow", "\n", "point_cloud1", "=", "open3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "point_cloud2", "=", "open3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "point_cloud3", "=", "open3d", ".", "geometry", ".", "PointCloud", "(", ")", "# pc1 + flow3d", "\n", "point_cloud1", ".", "points", "=", "open3d", ".", "utility", ".", "Vector3dVector", "(", "pc1", ")", "\n", "point_cloud2", ".", "points", "=", "open3d", ".", "utility", ".", "Vector3dVector", "(", "pc2", ")", "\n", "point_cloud3", ".", "points", "=", "open3d", ".", "utility", ".", "Vector3dVector", "(", "pc1", "+", "flow_3d", ")", "\n", "point_cloud1", ".", "colors", "=", "open3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "zeros_like", "(", "pc1", ")", "+", "[", "1", ",", "0", ",", "0", "]", ")", "\n", "point_cloud2", ".", "colors", "=", "open3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "zeros_like", "(", "pc2", ")", "+", "[", "0", ",", "1", ",", "0", "]", ")", "\n", "point_cloud3", ".", "colors", "=", "open3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "zeros_like", "(", "pc1", ")", "+", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "open3d", ".", "visualization", ".", "draw_geometries", "(", "[", "point_cloud1", ",", "point_cloud2", ",", "point_cloud3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.demo.Demo.run": [[78, 102], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "logging.info", "demo.Demo.model.eval", "demo.Demo.prepare_images_and_depths", "numpy.concatenate().transpose", "torch.from_numpy().float().unsqueeze", "torch.from_numpy().float().unsqueeze", "torch.from_numpy().float().unsqueeze", "torch.from_numpy().float().unsqueeze", "torch.from_numpy().float().unsqueeze", "torch.from_numpy().float().unsqueeze", "torch.from_numpy().float().unsqueeze", "torch.from_numpy().float().unsqueeze", "torch.from_numpy().float().unsqueeze", "numpy.concatenate().transpose", "torch.from_numpy().float().unsqueeze", "torch.from_numpy().float().unsqueeze", "torch.from_numpy().float().unsqueeze", "torch.from_numpy().float().unsqueeze", "torch.from_numpy().float().unsqueeze", "torch.from_numpy().float().unsqueeze", "torch.from_numpy().float().unsqueeze", "torch.from_numpy().float().unsqueeze", "torch.from_numpy().float().unsqueeze", "torch.as_tensor().unsqueeze", "torch.as_tensor().unsqueeze", "torch.as_tensor().unsqueeze", "torch.as_tensor().unsqueeze", "torch.as_tensor().unsqueeze", "torch.as_tensor().unsqueeze", "torch.as_tensor().unsqueeze", "torch.as_tensor().unsqueeze", "torch.as_tensor().unsqueeze", "utils.copy_to_device", "demo.Demo.model", "[].cpu().numpy().transpose", "[].cpu().numpy().transpose", "demo.Demo.display", "numpy.concatenate", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.concatenate", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "[].cpu().numpy", "[].cpu().numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "[].cpu", "[].cpu"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.eval", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.demo.Demo.prepare_images_and_depths", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.copy_to_device", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.demo.Demo.display"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "run", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'Running demo...'", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "image1", ",", "image2", ",", "pc1", ",", "pc2", "=", "self", ".", "prepare_images_and_depths", "(", ")", "\n", "\n", "# numpy -> torch", "\n", "images", "=", "np", ".", "concatenate", "(", "[", "image1", ",", "image2", "]", ",", "axis", "=", "-", "1", ")", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "images", "=", "torch", ".", "from_numpy", "(", "images", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "pcs", "=", "np", ".", "concatenate", "(", "[", "pc1", ",", "pc2", "]", ",", "axis", "=", "1", ")", ".", "transpose", "(", ")", "\n", "pcs", "=", "torch", ".", "from_numpy", "(", "pcs", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "intrinsics", "=", "torch", ".", "as_tensor", "(", "[", "args", ".", "f", ",", "args", ".", "cx", ",", "args", ".", "cy", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# inference", "\n", "inputs", "=", "{", "'images'", ":", "images", ",", "'pcs'", ":", "pcs", ",", "'intrinsics'", ":", "intrinsics", "}", "\n", "inputs", "=", "copy_to_device", "(", "inputs", ",", "self", ".", "device", ")", "\n", "outputs", "=", "self", ".", "model", "(", "inputs", ")", "\n", "\n", "# NCHW -> NHWC", "\n", "flow_2d", "=", "outputs", "[", "'flow_2d'", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "flow_3d", "=", "outputs", "[", "'flow_3d'", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", ")", "\n", "\n", "self", ".", "display", "(", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.refine_utils.triangulation": [[46, 56], ["numpy.concatenate().reshape", "numpy.concatenate", "numpy.concatenate", "numpy.ones"], "function", ["None"], ["def", "triangulation", "(", "disp", ",", "xcoord", ",", "ycoord", ",", "bl", "=", "1", ",", "fl", "=", "450", ",", "cx", "=", "479.5", ",", "cy", "=", "269.5", ")", ":", "\n", "    ", "mask", "=", "(", "disp", "<=", "0", ")", ".", "flatten", "(", ")", "\n", "depth", "=", "bl", "*", "fl", "/", "(", "disp", ")", "# 450px->15mm focal length", "\n", "X", "=", "(", "xcoord", "-", "cx", ")", "*", "depth", "/", "fl", "\n", "Y", "=", "(", "ycoord", "-", "cy", ")", "*", "depth", "/", "fl", "\n", "Z", "=", "depth", "\n", "P", "=", "np", ".", "concatenate", "(", "(", "X", "[", "np", ".", "newaxis", "]", ",", "Y", "[", "np", ".", "newaxis", "]", ",", "Z", "[", "np", ".", "newaxis", "]", ")", ",", "0", ")", ".", "reshape", "(", "3", ",", "-", "1", ")", "\n", "P", "=", "np", ".", "concatenate", "(", "(", "P", ",", "np", ".", "ones", "(", "(", "1", ",", "P", ".", "shape", "[", "-", "1", "]", ")", ")", ")", ",", "0", ")", "\n", "P", "[", ":", ",", "mask", "]", "=", "0", "\n", "return", "P", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.refine_utils.midpoint_triangulate": [[59, 111], ["len", "numpy.eye", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "np.zeros.transpose", "np.zeros.transpose", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.matmul", "C.inverse", "torch.matmul", "numpy.asarray", "torch.sum", "torch.matmul", "numpy.asarray", "numpy.linalg.inv().dot", "numpy.linalg.pinv().dot", "numpy.linalg.pinv().dot", "torch.matmul", "numpy.linalg.norm", "np.linalg.pinv().dot.T.dot().reshape", "numpy.linalg.inv", "numpy.linalg.pinv", "numpy.linalg.pinv", "np.linalg.pinv().dot.T.dot"], "function", ["None"], ["", "def", "midpoint_triangulate", "(", "x", ",", "cam", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x:   Set of 2D points in homogeneous coords, (3 x n x N) matrix\n        cam: Collection of n objects, each containing member variables\n                 cam.P - 3x4 camera matrix [0]\n                 cam.R - 3x3 rotation matrix [1]\n                 cam.T - 3x1 translation matrix [2]\n    Returns:\n        midpoint: 3D point in homogeneous coords, (4 x 1) matrix\n    \"\"\"", "\n", "n", "=", "len", "(", "cam", ")", "# No. of cameras", "\n", "N", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "\n", "I", "=", "np", ".", "eye", "(", "3", ")", "# 3x3 identity matrix", "\n", "A", "=", "np", ".", "zeros", "(", "(", "3", ",", "n", ")", ")", "\n", "B", "=", "np", ".", "zeros", "(", "(", "3", ",", "n", ",", "N", ")", ")", "\n", "sigma2", "=", "np", ".", "zeros", "(", "(", "3", ",", "N", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "a", "=", "-", "np", ".", "linalg", ".", "inv", "(", "cam", "[", "i", "]", "[", ":", "3", ",", ":", "3", "]", ")", ".", "dot", "(", "cam", "[", "i", "]", "[", ":", "3", ",", "-", "1", ":", "]", ")", "# ith camera position #", "\n", "A", "[", ":", ",", "i", ",", "None", "]", "=", "a", "\n", "if", "i", "==", "0", ":", "\n", "            ", "b", "=", "np", ".", "linalg", ".", "pinv", "(", "cam", "[", "i", "]", "[", ":", "3", ",", ":", "3", "]", ")", ".", "dot", "(", "x", "[", ":", ",", "i", "]", ")", "# Directional vector # 4, N", "\n", "", "else", ":", "\n", "            ", "b", "=", "np", ".", "linalg", ".", "pinv", "(", "cam", "[", "i", "]", ")", ".", "dot", "(", "x", "[", ":", ",", "i", "]", ")", "# Directional vector # 4, N", "\n", "b", "=", "b", "/", "b", "[", "3", ":", "]", "\n", "b", "=", "b", "[", ":", "3", ",", ":", "]", "-", "a", "# 3,N", "\n", "", "b", "=", "b", "/", "np", ".", "linalg", ".", "norm", "(", "b", ",", "2", ",", "0", ")", "[", "np", ".", "newaxis", "]", "\n", "B", "[", ":", ",", "i", ",", ":", "]", "=", "b", "\n", "\n", "sigma2", "=", "sigma2", "+", "b", "*", "(", "b", ".", "T", ".", "dot", "(", "a", ")", ".", "reshape", "(", "-", "1", ",", "N", ")", ")", "# 3,N", "\n", "\n", "", "Bo", "=", "B", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "Bt", "=", "B", ".", "transpose", "(", "[", "2", ",", "1", ",", "0", "]", ")", "\n", "\n", "Bo", "=", "torch", ".", "DoubleTensor", "(", "Bo", ")", "\n", "Bt", "=", "torch", ".", "DoubleTensor", "(", "Bt", ")", "\n", "A", "=", "torch", ".", "DoubleTensor", "(", "A", ")", "\n", "sigma2", "=", "torch", ".", "DoubleTensor", "(", "sigma2", ")", "\n", "I", "=", "torch", ".", "DoubleTensor", "(", "I", ")", "\n", "\n", "BoBt", "=", "torch", ".", "matmul", "(", "Bo", ",", "Bt", ")", "\n", "C", "=", "(", "n", "*", "I", ")", "[", "np", ".", "newaxis", "]", "-", "BoBt", "# N,3,3", "\n", "Cinv", "=", "C", ".", "inverse", "(", ")", "\n", "sigma1", "=", "torch", ".", "sum", "(", "A", ",", "dim", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "m1", "=", "I", "[", "np", ".", "newaxis", "]", "+", "torch", ".", "matmul", "(", "BoBt", ",", "Cinv", ")", "\n", "m2", "=", "torch", ".", "matmul", "(", "Cinv", ",", "sigma2", ".", "T", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "midpoint", "=", "(", "1", "/", "n", ")", "*", "torch", ".", "matmul", "(", "m1", ",", "sigma1", "[", "np", ".", "newaxis", "]", ")", "-", "m2", "\n", "\n", "midpoint", "=", "np", ".", "asarray", "(", "midpoint", ")", "\n", "return", "midpoint", "[", ":", ",", ":", ",", "0", "]", ".", "T", ",", "np", ".", "asarray", "(", "Bo", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.refine_utils.register_disp_fast": [[114, 146], ["id_mono.flatten.flatten", "min", "numpy.random.seed", "numpy.random.choice", "len", "numpy.random.choice", "numpy.abs", "numpy.argmax", "numpy.abs", "len", "range", "range", "id_flow.reshape", "len", "numpy.log", "numpy.log", "numpy.log", "numpy.log"], "function", ["None"], ["", "def", "register_disp_fast", "(", "id_flow", ",", "id_mono", ",", "mask", ",", "inlier_th", "=", "0.01", ",", "niters", "=", "100", ")", ":", "\n", "    ", "\"\"\" \n    input: disp_flow, disp_mono, mask\n    output: inlier_mask, registered\n    register up-to-scale rough depth to motion-based depth\n    \"\"\"", "\n", "shape", "=", "id_mono", ".", "shape", "\n", "id_mono", "=", "id_mono", ".", "flatten", "(", ")", "\n", "disp_flow", "=", "id_flow", "[", "mask", "]", "# register to flow with mono", "\n", "disp_mono", "=", "id_mono", "[", "mask", "]", "\n", "\n", "num_samp", "=", "min", "(", "3000", ",", "len", "(", "disp_flow", ")", ")", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "submask", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "disp_flow", ")", ")", ",", "num_samp", ")", "\n", "disp_flow", "=", "disp_flow", "[", "submask", "]", "\n", "disp_mono", "=", "disp_mono", "[", "submask", "]", "\n", "\n", "n", "=", "len", "(", "disp_flow", ")", "\n", "sample_size", "=", "niters", "\n", "rand_idx", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "n", ")", ",", "sample_size", ")", "\n", "scale_cand", "=", "(", "disp_flow", "/", "disp_mono", ")", "[", "rand_idx", "]", "\n", "dis_cand", "=", "np", ".", "abs", "(", "np", ".", "log", "(", "disp_mono", "[", ":", ",", "np", ".", "newaxis", "]", "*", "scale_cand", "[", "np", ".", "newaxis", "]", ")", "-", "np", ".", "log", "(", "disp_flow", "[", ":", ",", "np", ".", "newaxis", "]", ")", ")", "\n", "\n", "rank_metric", "=", "(", "dis_cand", "<", "inlier_th", ")", ".", "sum", "(", "0", ")", "\n", "scale_idx", "=", "np", ".", "argmax", "(", "rank_metric", ")", "\n", "scale", "=", "scale_cand", "[", "scale_idx", "]", "\n", "\n", "dis", "=", "np", ".", "abs", "(", "np", ".", "log", "(", "disp_mono", "*", "scale", ")", "-", "np", ".", "log", "(", "disp_flow", ")", ")", "\n", "ninliers", "=", "(", "dis", "<", "inlier_th", ")", ".", "sum", "(", ")", "/", "n", "\n", "registered_flow", "=", "(", "id_flow", ".", "reshape", "(", "shape", ")", ")", "/", "scale", "\n", "\n", "return", "registered_flow", ",", "scale", ",", "ninliers", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.refine_utils.F_ngransac": [[149, 211], ["numpy.asarray", "numpy.asarray", "Ks.inverse().matmul().permute", "Kn.inverse().matmul().permute", "torch.zeros", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros", "torch.zeros", "range", "Ks.inverse().matmul().permute.cpu", "Kn.inverse().matmul().permute.cpu", "numpy.ones().astype", "numpy.random.choice", "numpy.random.randint", "torch.Tensor", "np.random.choice.sum", "probs.size", "probs.size", "hp0[].cpu", "hp1[].cpu", "torch.cat", "correspondences.permute.permute", "numpy.asarray", "numpy.asarray", "cv2.decomposeEssentialMat", "torch.Tensor().cuda", "torch.Tensor().cuda", "Ks.inverse().matmul", "Kn.inverse().matmul", "numpy.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "cv2.findEssentialMat", "torch.Tensor", "ngransac.find_essential_mat", "numpy.asarray", "numpy.asarray", "np.random.choice.copy", "Kn[].cpu", "Ks[].cpu", "refine_utils.testEss", "locals", "numpy.asarray", "numpy.eye", "numpy.ones", "Ks.inverse().matmul().permute.permute", "Kn.inverse().matmul().permute.permute", "np.random.choice.sum", "numpy.asarray", "numpy.asarray", "numpy.eye", "torch.Tensor", "torch.Tensor", "Ks.inverse", "Kn.inverse", "np.eye.dot", "cv2.Rodrigues"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.refine_utils.testEss"], ["", "def", "F_ngransac", "(", "hp0", ",", "hp1", ",", "Ks", ",", "rand", ",", "unc_occ", ",", "iters", "=", "1000", ",", "cv", "=", "False", ",", "Kn", "=", "None", ")", ":", "\n", "    ", "if", "Kn", "is", "None", ":", "\n", "        ", "Kn", "=", "Ks", "\n", "", "import", "cv2", "\n", "\n", "b", "=", "hp1", ".", "shape", "[", "0", "]", "\n", "hp0_cpu", "=", "np", ".", "asarray", "(", "hp0", ".", "cpu", "(", ")", ")", "\n", "hp1_cpu", "=", "np", ".", "asarray", "(", "hp1", ".", "cpu", "(", ")", ")", "\n", "if", "not", "rand", ":", "\n", "        ", "fmask", "=", "np", ".", "ones", "(", "hp0", ".", "shape", "[", "1", "]", ")", ".", "astype", "(", "bool", ")", "\n", "rand_seed", "=", "0", "\n", "", "else", ":", "\n", "        ", "fmask", "=", "np", ".", "random", ".", "choice", "(", "[", "True", ",", "False", "]", ",", "size", "=", "hp0", ".", "shape", "[", "1", "]", ",", "p", "=", "[", "0.1", ",", "0.9", "]", ")", "\n", "rand_seed", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "1000", ")", "# random seed to by used in C++", "\n", "", "hp0", "=", "Ks", ".", "inverse", "(", ")", ".", "matmul", "(", "hp0", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "hp1", "=", "Kn", ".", "inverse", "(", ")", ".", "matmul", "(", "hp1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "ratios", "=", "torch", ".", "zeros", "(", "hp0", "[", ":", "1", ",", ":", ",", ":", "1", "]", ".", "shape", ")", "\n", "probs", "=", "torch", ".", "Tensor", "(", "np", ".", "ones", "(", "fmask", ".", "sum", "(", ")", ")", ")", "/", "fmask", ".", "sum", "(", ")", "\n", "probs", "=", "probs", "[", "np", ".", "newaxis", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "Es", "=", "torch", ".", "zeros", "(", "(", "b", ",", "3", ",", "3", ")", ")", ".", "float", "(", ")", "# estimated model", "\n", "rot", "=", "torch", ".", "zeros", "(", "(", "b", ",", "3", ")", ")", ".", "float", "(", ")", "# estimated model", "\n", "trans", "=", "torch", ".", "zeros", "(", "(", "b", ",", "3", ")", ")", ".", "float", "(", ")", "# estimated model", "\n", "out_model", "=", "torch", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", ".", "float", "(", ")", "# estimated model", "\n", "out_inliers", "=", "torch", ".", "zeros", "(", "probs", ".", "size", "(", ")", ")", "# inlier mask of estimated model", "\n", "out_gradients", "=", "torch", ".", "zeros", "(", "probs", ".", "size", "(", ")", ")", "# gradient tensor (only used during training)", "\n", "\n", "for", "i", "in", "range", "(", "b", ")", ":", "\n", "        ", "pts1", "=", "hp0", "[", "i", ":", "i", "+", "1", ",", "fmask", ",", ":", "2", "]", ".", "cpu", "(", ")", "\n", "pts2", "=", "hp1", "[", "i", ":", "i", "+", "1", ",", "fmask", ",", ":", "2", "]", ".", "cpu", "(", ")", "\n", "# create data tensor of feature coordinates and matching ratios", "\n", "correspondences", "=", "torch", ".", "cat", "(", "[", "pts1", ",", "pts2", ",", "ratios", "]", ",", "dim", "=", "2", ")", "\n", "correspondences", "=", "correspondences", ".", "permute", "(", "2", ",", "1", ",", "0", ")", "\n", "\n", "if", "cv", "==", "True", ":", "\n", "            ", "E", ",", "ffmask", "=", "cv2", ".", "findEssentialMat", "(", "np", ".", "asarray", "(", "pts1", "[", "0", "]", ")", ",", "np", ".", "asarray", "(", "pts2", "[", "0", "]", ")", ",", "np", ".", "eye", "(", "3", ")", ",", "cv2", ".", "FM_RANSAC", ",", "\n", "threshold", "=", "0.0001", ")", "\n", "ffmask", "=", "ffmask", "[", ":", ",", "0", "]", "\n", "Es", "[", "i", "]", "=", "torch", ".", "Tensor", "(", "E", ")", "\n", "", "else", ":", "\n", "            ", "import", "ngransac", "\n", "incount", "=", "ngransac", ".", "find_essential_mat", "(", "correspondences", ",", "probs", ",", "rand_seed", ",", "iters", ",", "0.0001", ",", "out_model", ",", "\n", "out_inliers", ",", "out_gradients", ")", "\n", "Es", "[", "i", "]", "=", "out_model", "\n", "E", "=", "np", ".", "asarray", "(", "out_model", ")", "\n", "maskk", "=", "np", ".", "asarray", "(", "out_inliers", "[", "0", ",", ":", ",", "0", "]", ")", "\n", "ffmask", "=", "fmask", ".", "copy", "(", ")", "\n", "ffmask", "[", "fmask", "]", "=", "maskk", "\n", "", "K1", "=", "np", ".", "asarray", "(", "Kn", "[", "i", "]", ".", "cpu", "(", ")", ")", "\n", "K0", "=", "np", ".", "asarray", "(", "Ks", "[", "i", "]", ".", "cpu", "(", ")", ")", "\n", "R1", ",", "R2", ",", "T", "=", "cv2", ".", "decomposeEssentialMat", "(", "E", ")", "\n", "for", "rott", "in", "[", "(", "R1", ",", "T", ")", ",", "(", "R2", ",", "T", ")", ",", "(", "R1", ",", "-", "T", ")", ",", "(", "R2", ",", "-", "T", ")", "]", ":", "\n", "            ", "if", "testEss", "(", "K0", ",", "K1", ",", "rott", "[", "0", "]", ",", "rott", "[", "1", "]", ",", "hp0_cpu", "[", "0", ",", "ffmask", "]", ".", "T", ",", "hp1_cpu", "[", "i", ",", "ffmask", "]", ".", "T", ")", ":", "\n", "                ", "R01", "=", "rott", "[", "0", "]", ".", "T", "\n", "t10", "=", "-", "R01", ".", "dot", "(", "rott", "[", "1", "]", "[", ":", ",", "0", "]", ")", "\n", "", "", "if", "'t10'", "not", "in", "locals", "(", ")", ":", "\n", "            ", "t10", "=", "np", ".", "asarray", "(", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "R01", "=", "np", ".", "eye", "(", "3", ")", "\n", "", "rot", "[", "i", "]", "=", "torch", ".", "Tensor", "(", "cv2", ".", "Rodrigues", "(", "R01", ")", "[", "0", "]", "[", ":", ",", "0", "]", ")", ".", "cuda", "(", ")", "\n", "trans", "[", "i", "]", "=", "torch", ".", "Tensor", "(", "t10", ")", ".", "cuda", "(", ")", "\n", "\n", "", "return", "rot", ",", "trans", ",", "Es", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.refine_utils.testEss": [[214, 224], ["cv2.triangulatePoints", "K0.dot", "K1.dot", "numpy.concatenate", "numpy.concatenate", "R.dot", "numpy.eye", "numpy.zeros", "numpy.linalg.inv().dot", "numpy.linalg.inv"], "function", ["None"], ["", "def", "testEss", "(", "K0", ",", "K1", ",", "R", ",", "T", ",", "p1", ",", "p2", ")", ":", "\n", "    ", "testP", "=", "cv2", ".", "triangulatePoints", "(", "K0", ".", "dot", "(", "np", ".", "concatenate", "(", "(", "np", ".", "eye", "(", "3", ")", ",", "np", ".", "zeros", "(", "(", "3", ",", "1", ")", ")", ")", ",", "-", "1", ")", ")", ",", "\n", "K1", ".", "dot", "(", "np", ".", "concatenate", "(", "(", "R", ",", "T", ")", ",", "-", "1", ")", ")", ",", "\n", "p1", "[", ":", "2", "]", ",", "p2", "[", ":", "2", "]", ")", "\n", "Z1", "=", "testP", "[", "2", ",", ":", "]", "/", "testP", "[", "-", "1", ",", ":", "]", "\n", "Z2", "=", "(", "R", ".", "dot", "(", "Z1", "*", "np", ".", "linalg", ".", "inv", "(", "K0", ")", ".", "dot", "(", "p1", ")", ")", "+", "T", ")", "[", "-", "1", ",", ":", "]", "\n", "if", "(", "(", "Z1", ">", "0", ")", ".", "sum", "(", ")", ">", "(", "Z1", "<=", "0", ")", ".", "sum", "(", ")", ")", "and", "(", "(", "Z2", ">", "0", ")", ".", "sum", "(", ")", ">", "(", "Z2", "<=", "0", ")", ".", "sum", "(", ")", ")", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.refine_utils.pose_estimate": [[227, 259], ["min", "numpy.random.choice", "refine_utils.F_ngransac", "numpy.asarray", "numpy.asarray", "cv2.decomposeEssentialMat", "K0.dot().dot", "K0.dot().dot.dot", "range", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "cv2.Rodrigues", "refine_utils.testEss", "numpy.asarray", "numpy.eye", "numpy.linalg.inv", "torch.Tensor().cuda", "numpy.asarray", "locals", "K0.dot", "torch.Tensor", "torch.Tensor", "torch.Tensor", "np.eye.dot", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.refine_utils.F_ngransac", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.refine_utils.testEss"], ["", "", "def", "pose_estimate", "(", "K0", ",", "K1", ",", "hp0", ",", "hp1", ",", "strict_mask", ",", "rot", ",", "th", "=", "0.0001", ")", ":", "\n", "# epipolar geometry", "\n", "    ", "tmphp0", "=", "hp0", "[", ":", ",", "strict_mask", "]", "\n", "tmphp1", "=", "hp1", "[", ":", ",", "strict_mask", "]", "\n", "num_samp", "=", "min", "(", "3000", ",", "tmphp0", ".", "shape", "[", "1", "]", ")", "\n", "submask", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "tmphp0", ".", "shape", "[", "1", "]", ")", ",", "num_samp", ")", "\n", "tmphp0", "=", "tmphp0", "[", ":", ",", "submask", "]", "\n", "tmphp1", "=", "tmphp1", "[", ":", ",", "submask", "]", "\n", "\n", "rotx", ",", "transx", ",", "Ex", "=", "F_ngransac", "(", "torch", ".", "Tensor", "(", "tmphp0", ".", "T", "[", "np", ".", "newaxis", "]", ")", ".", "cuda", "(", ")", ",", "\n", "torch", ".", "Tensor", "(", "tmphp1", ".", "T", "[", "np", ".", "newaxis", "]", ")", ".", "cuda", "(", ")", ",", "\n", "torch", ".", "Tensor", "(", "K0", "[", "np", ".", "newaxis", "]", ")", ".", "cuda", "(", ")", ",", "\n", "False", ",", "0", ",", "\n", "Kn", "=", "torch", ".", "Tensor", "(", "K1", "[", "np", ".", "newaxis", "]", ")", ".", "cuda", "(", ")", ")", "\n", "R01", "=", "cv2", ".", "Rodrigues", "(", "np", ".", "asarray", "(", "rotx", "[", "0", "]", ")", ")", "[", "0", "]", "\n", "T01", "=", "np", ".", "asarray", "(", "transx", "[", "0", "]", ")", "\n", "E", "=", "np", ".", "asarray", "(", "Ex", "[", "0", "]", ")", "\n", "\n", "R1", ",", "R2", ",", "T", "=", "cv2", ".", "decomposeEssentialMat", "(", "E", ")", "\n", "for", "rott", "in", "[", "(", "R1", ",", "T", ")", ",", "(", "R2", ",", "T", ")", ",", "(", "R1", ",", "-", "T", ")", ",", "(", "R2", ",", "-", "T", ")", "]", ":", "\n", "        ", "if", "testEss", "(", "K0", ",", "K1", ",", "rott", "[", "0", "]", ",", "rott", "[", "1", "]", ",", "tmphp0", ",", "tmphp1", ")", ":", "\n", "            ", "R01", "=", "rott", "[", "0", "]", ".", "T", "\n", "T01", "=", "-", "R01", ".", "dot", "(", "rott", "[", "1", "]", "[", ":", ",", "0", "]", ")", "\n", "", "", "if", "not", "'T01'", "in", "locals", "(", ")", ":", "\n", "        ", "T01", "=", "np", ".", "asarray", "(", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "R01", "=", "np", ".", "eye", "(", "3", ")", "\n", "\n", "# compensate R", "\n", "", "H01", "=", "K0", ".", "dot", "(", "R01", ")", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "K1", ")", ")", "# plane at infinity", "\n", "comp_hp1", "=", "H01", ".", "dot", "(", "hp1", ")", "\n", "comp_hp1", "=", "comp_hp1", "/", "comp_hp1", "[", "-", "1", ":", "]", "\n", "return", "R01", ",", "T01", ",", "H01", ",", "comp_hp1", ",", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.refine_utils.evaluate_tri": [[262, 289], ["refine_utils.midpoint_triangulate", "numpy.clip", "numpy.logical_and", "entmask[].copy", "numpy.median", "numpy.logical_and", "refine_utils.register_disp_fast", "numpy.abs", "numpy.argsort", "K0.dot", "K1.dot", "numpy.concatenate", "numpy.logical_and", "np.logical_and.sum", "numpy.log", "numpy.log", "disp0.flatten", "numpy.concatenate", "numpy.concatenate", "numpy.isinf", "numpy.argsort", "registered_p3d.flatten", "disp0.flatten", "numpy.eye", "numpy.zeros", "R01.T.dot", "np.logical_and.sum"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.refine_utils.midpoint_triangulate", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.refine_utils.register_disp_fast"], ["", "def", "evaluate_tri", "(", "t10", ",", "R01", ",", "K0", ",", "K1", ",", "hp0", ",", "hp1", ",", "disp0", ",", "bl", ",", "inlier_th", "=", "0.1", ",", "select_th", "=", "0.4", ",", "valid_mask", "=", "None", ")", ":", "\n", "    ", "if", "valid_mask", "is", "not", "None", ":", "\n", "        ", "hp0", "=", "hp0", "[", ":", ",", "valid_mask", "]", "\n", "hp1", "=", "hp1", "[", ":", ",", "valid_mask", "]", "\n", "disp0", "=", "disp0", ".", "flatten", "(", ")", "[", "valid_mask", "]", "\n", "# triangluation", "\n", "", "cams", "=", "[", "K0", ".", "dot", "(", "np", ".", "concatenate", "(", "(", "np", ".", "eye", "(", "3", ")", ",", "np", ".", "zeros", "(", "(", "3", ",", "1", ")", ")", ")", ",", "-", "1", ")", ")", ",", "\n", "K1", ".", "dot", "(", "np", ".", "concatenate", "(", "(", "R01", ".", "T", ",", "-", "R01", ".", "T", ".", "dot", "(", "t10", "[", ":", ",", "np", ".", "newaxis", "]", ")", ")", ",", "-", "1", ")", ")", "]", "\n", "P_pred", ",", "_", "=", "midpoint_triangulate", "(", "np", ".", "concatenate", "(", "[", "hp0", "[", ":", ",", "np", ".", "newaxis", "]", ",", "hp1", "[", ":", ",", "np", ".", "newaxis", "]", "]", ",", "1", ")", ",", "cams", ")", "\n", "idepth_p3d", "=", "np", ".", "clip", "(", "K0", "[", "0", ",", "0", "]", "*", "bl", "/", "P_pred", "[", "2", "]", ",", "1e-6", ",", "np", ".", "inf", ")", "\n", "\n", "# discard points with small disp", "\n", "entmask", "=", "np", ".", "logical_and", "(", "idepth_p3d", ">", "1e-12", ",", "~", "np", ".", "isinf", "(", "idepth_p3d", ")", ")", "\n", "entmask_tmp", "=", "entmask", "[", "entmask", "]", ".", "copy", "(", ")", "\n", "entmask_tmp", "[", "np", ".", "argsort", "(", "-", "idepth_p3d", "[", "entmask", "]", ")", "[", "entmask", ".", "sum", "(", ")", "//", "2", ":", "]", "]", "=", "False", "# remove sky", "\n", "entmask", "[", "entmask", "]", "=", "entmask_tmp", "\n", "med", "=", "np", ".", "median", "(", "idepth_p3d", "[", "entmask", "]", ")", "\n", "entmask", "=", "np", ".", "logical_and", "(", "entmask", ",", "np", ".", "logical_and", "(", "idepth_p3d", ">", "med", "/", "5.", ",", "idepth_p3d", "<", "med", "*", "5", ")", ")", "\n", "if", "entmask", ".", "sum", "(", ")", "<", "10", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", "\n", "", "registered_p3d", ",", "scale", ",", "ninliers", "=", "register_disp_fast", "(", "idepth_p3d", ",", "disp0", ",", "entmask", ",", "\n", "inlier_th", "=", "inlier_th", ",", "niters", "=", "100", ")", "\n", "\n", "disp_ratio", "=", "np", ".", "abs", "(", "np", ".", "log", "(", "registered_p3d", ".", "flatten", "(", ")", "/", "disp0", ".", "flatten", "(", ")", ")", ")", "\n", "agree_mask", "=", "disp_ratio", "<", "np", ".", "log", "(", "select_th", ")", "\n", "rank", "=", "np", ".", "argsort", "(", "disp_ratio", ")", "\n", "return", "agree_mask", ",", "t10", "*", "scale", ",", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.refine_utils.mod_flow": [[292, 342], ["flow.copy.copy", "numpy.meshgrid", "x0.astype.astype", "y0.astype.astype", "numpy.concatenate().reshape", "numpy.concatenate().reshape", "numpy.logical_and().flatten", "refine_utils.pose_estimate", "numpy.transpose().reshape", "numpy.linalg.norm", "range", "range", "refine_utils.triangulation", "parallax_mag[].mean", "refine_utils.evaluate_tri", "np.logical_and().flatten.copy", "cv2.solvePnP", "cv2.solvePnP", "numpy.concatenate", "numpy.concatenate", "numpy.logical_and", "numpy.transpose", "K0.dot", "numpy.logical_and", "cv2.Rodrigues", "R01.dot", "numpy.isinf", "R01.T.dot", "numpy.linalg.norm", "R01.T.dot", "reg_flow_PP[].reshape", "numpy.ones", "numpy.ones", "aligned_mask.flatten", "aligned_mask.flatten"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.refine_utils.pose_estimate", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.refine_utils.triangulation", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.refine_utils.evaluate_tri"], ["", "def", "mod_flow", "(", "bg_mask", ",", "disp", ",", "disp_change", ",", "flow", ",", "K0", ",", "K1", ",", "bl", ",", "noc_mask", ",", "parallax_th", "=", "8", ")", ":", "\n", "# prepare data", "\n", "    ", "flow", "=", "flow", ".", "copy", "(", ")", "\n", "h", ",", "w", "=", "flow", ".", "shape", "[", ":", "2", "]", "\n", "x0", ",", "y0", "=", "np", ".", "meshgrid", "(", "range", "(", "w", ")", ",", "range", "(", "h", ")", ")", "\n", "x0", "=", "x0", ".", "astype", "(", "np", ".", "float32", ")", "\n", "y0", "=", "y0", ".", "astype", "(", "np", ".", "float32", ")", "\n", "x1", "=", "x0", "+", "flow", "[", ":", ",", ":", ",", "0", "]", "\n", "y1", "=", "y0", "+", "flow", "[", ":", ",", ":", ",", "1", "]", "\n", "hp0", "=", "np", ".", "concatenate", "(", "(", "x0", "[", "np", ".", "newaxis", "]", ",", "y0", "[", "np", ".", "newaxis", "]", ",", "np", ".", "ones", "(", "x1", ".", "shape", ")", "[", "np", ".", "newaxis", "]", ")", ",", "0", ")", ".", "reshape", "(", "(", "3", ",", "-", "1", ")", ")", "\n", "hp1", "=", "np", ".", "concatenate", "(", "(", "x1", "[", "np", ".", "newaxis", "]", ",", "y1", "[", "np", ".", "newaxis", "]", ",", "np", ".", "ones", "(", "x1", ".", "shape", ")", "[", "np", ".", "newaxis", "]", ")", ",", "0", ")", ".", "reshape", "(", "(", "3", ",", "-", "1", ")", ")", "\n", "\n", "# use bg + valid pixels to compute R/t", "\n", "valid_mask", "=", "np", ".", "logical_and", "(", "disp", ">", "0", ",", "np", ".", "logical_and", "(", "bg_mask", ",", "noc_mask", ")", ")", ".", "flatten", "(", ")", "\n", "\n", "R01", ",", "T01", ",", "_", ",", "comp_hp1", ",", "_", "=", "pose_estimate", "(", "K0", ",", "K1", ",", "hp0", ",", "hp1", ",", "valid_mask", ",", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "\n", "parallax", "=", "np", ".", "transpose", "(", "(", "comp_hp1", "[", ":", "2", "]", "-", "hp0", "[", ":", "2", "]", ")", ",", "[", "1", ",", "0", "]", ")", ".", "reshape", "(", "x1", ".", "shape", "+", "(", "2", ",", ")", ")", "\n", "parallax_mag", "=", "np", ".", "linalg", ".", "norm", "(", "parallax", "[", ":", ",", ":", ",", ":", "2", "]", ",", "2", ",", "2", ")", "\n", "\n", "reg_flow_P", "=", "triangulation", "(", "disp", ",", "x0", ",", "y0", ",", "bl", "=", "bl", ",", "fl", "=", "K0", "[", "0", ",", "0", "]", ",", "cx", "=", "K0", "[", "0", ",", "2", "]", ",", "cy", "=", "K0", "[", "1", ",", "2", "]", ")", "[", ":", "3", "]", "\n", "\n", "is_static", "=", "parallax_mag", "[", "bg_mask", "]", ".", "mean", "(", ")", "<", "parallax_th", "\n", "\n", "# modify motion fields", "\n", "if", "not", "is_static", ":", "\n", "        ", "aligned_mask", ",", "T01_c", ",", "ranked_p", "=", "evaluate_tri", "(", "T01", ",", "R01", ",", "K0", ",", "K1", ",", "hp0", ",", "hp1", ",", "disp", ",", "bl", ",", "inlier_th", "=", "0.01", ",", "\n", "select_th", "=", "1.2", ",", "valid_mask", "=", "valid_mask", ")", "\n", "# PnP refine", "\n", "aligned_mask", "[", "ranked_p", "[", "50000", ":", "]", "]", "=", "False", "\n", "tmp", "=", "valid_mask", ".", "copy", "(", ")", "\n", "tmp", "[", "tmp", "]", "=", "aligned_mask", "\n", "aligned_mask", "=", "tmp", "\n", "_", ",", "rvec", ",", "T01", "=", "cv2", ".", "solvePnP", "(", "reg_flow_P", ".", "T", "[", "aligned_mask", ".", "flatten", "(", ")", ",", "np", ".", "newaxis", "]", ",", "\n", "hp1", "[", ":", "2", "]", ".", "T", "[", "aligned_mask", ".", "flatten", "(", ")", ",", "np", ".", "newaxis", "]", ",", "K0", ",", "0", ",", "\n", "flags", "=", "cv2", ".", "SOLVEPNP_DLS", ")", "\n", "_", ",", "rvec", ",", "T01", ",", "=", "cv2", ".", "solvePnP", "(", "reg_flow_P", ".", "T", "[", "aligned_mask", ",", "np", ".", "newaxis", "]", ",", "\n", "hp1", "[", ":", "2", "]", ".", "T", "[", "aligned_mask", ",", "np", ".", "newaxis", "]", ",", "K0", ",", "0", ",", "rvec", ",", "T01", ",", "useExtrinsicGuess", "=", "True", ",", "\n", "flags", "=", "cv2", ".", "SOLVEPNP_ITERATIVE", ")", "\n", "R01", "=", "cv2", ".", "Rodrigues", "(", "rvec", ")", "[", "0", "]", ".", "T", "\n", "T01_c", "=", "-", "R01", ".", "dot", "(", "T01", ")", "[", ":", ",", "0", "]", "\n", "\n", "if", "not", "(", "T01_c", "is", "None", "or", "np", ".", "isinf", "(", "np", ".", "linalg", ".", "norm", "(", "T01_c", ")", ")", ")", ":", "\n", "            ", "reg_flow_PP", "=", "R01", ".", "T", ".", "dot", "(", "reg_flow_P", ")", "-", "R01", ".", "T", ".", "dot", "(", "T01_c", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "hpp1", "=", "K0", ".", "dot", "(", "reg_flow_PP", ")", "\n", "hpp1", "=", "hpp1", "/", "hpp1", "[", "-", "1", ":", "]", "\n", "flow", "[", "bg_mask", "]", "=", "(", "hpp1", "-", "hp0", ")", ".", "T", ".", "reshape", "(", "h", ",", "w", ",", "3", ")", "[", "bg_mask", "]", "[", ":", ",", ":", "2", "]", "\n", "disp_change", "[", "bg_mask", "]", "=", "bl", "*", "K0", "[", "0", ",", "0", "]", "/", "reg_flow_PP", "[", "-", "1", "]", ".", "reshape", "(", "h", ",", "w", ")", "[", "bg_mask", "]", "\n", "\n", "", "", "return", "flow", ",", "disp_change", "\n", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.kitti_submission.Evaluator.__init__": [[39, 60], ["logging.info", "logging.info", "kitti.KITTITest", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "logging.info", "factory.model_factory().to", "logging.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "kitti_submission.Evaluator.model.load_state_dict", "factory.model_factory"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.factory.model_factory"], ["    ", "def", "__init__", "(", "self", ",", "device", ":", "torch", ".", "device", ",", "cfgs", ":", "DictConfig", ")", ":", "\n", "        ", "self", ".", "cfgs", "=", "cfgs", "\n", "self", ".", "device", "=", "device", "\n", "\n", "logging", ".", "info", "(", "'Loading test set from %s'", "%", "self", ".", "cfgs", ".", "testset", ".", "root_dir", ")", "\n", "logging", ".", "info", "(", "'Dataset split: %s'", "%", "self", ".", "cfgs", ".", "testset", ".", "split", ")", "\n", "self", ".", "test_dataset", "=", "KITTITest", "(", "self", ".", "cfgs", ".", "testset", ")", "\n", "\n", "self", ".", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "test_dataset", ",", "\n", "batch_size", "=", "self", ".", "cfgs", ".", "model", ".", "batch_size", ",", "\n", "num_workers", "=", "self", ".", "cfgs", ".", "testset", ".", "n_workers", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "\n", "logging", ".", "info", "(", "'Creating model: CamLiFlow'", ")", "\n", "self", ".", "model", "=", "model_factory", "(", "self", ".", "cfgs", ".", "model", ")", ".", "to", "(", "device", "=", "self", ".", "device", ")", "\n", "\n", "logging", ".", "info", "(", "'Loading checkpoint from %s'", "%", "self", ".", "cfgs", ".", "ckpt", ".", "path", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "cfgs", ".", "ckpt", ".", "path", ",", "self", ".", "device", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "strict", "=", "self", ".", "cfgs", ".", "ckpt", ".", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.kitti_submission.Evaluator.run": [[61, 130], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "logging.info", "kitti_submission.Evaluator.model.eval", "os.makedirs", "os.makedirs", "os.makedirs", "tqdm.tqdm.tqdm", "logging.info", "utils.copy_to_device", "range", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "kitti_submission.Evaluator.model.forward", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item", "flow_2d_pred.permute().clamp().cpu().numpy.permute().clamp().cpu().numpy.permute().clamp().cpu().numpy", "utils.disp2pc", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "utils.save_disp_png", "utils.save_disp_png", "utils.save_flow_png", "utils.load_disp_png", "models.utils.knn_interpolation", "pc1_dense_warp[].cpu().numpy().reshape", "[].numpy", "numpy.logical_or", "numpy.logical_or", "kitti_submission.rigid_refinement", "os.path.join", "flow_2d_pred.permute().clamp().cpu().numpy.permute().clamp().cpu().numpy.permute().clamp().cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.logical_or().astype", "torch.from_numpy().to.reshape().transpose", "torch.from_numpy().to.reshape().transpose", "torch.from_numpy().to.reshape().transpose", "torch.from_numpy().to.reshape().transpose", "pc1_dense_warp[].cpu().numpy", "flow_2d_pred.permute().clamp().cpu().numpy.permute().clamp().cpu().numpy.permute().clamp", "models.utils.mesh_grid", "numpy.logical_or", "torch.from_numpy().to.reshape", "torch.from_numpy().to.reshape", "torch.from_numpy().to.reshape", "torch.from_numpy().to.reshape", "pc1_dense_warp[].cpu", "flow_2d_pred.permute().clamp().cpu().numpy.permute().clamp().cpu().numpy.permute"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.eval", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.copy_to_device", "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.CorrelationFunction.forward", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.disp2pc", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.save_disp_png", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.save_disp_png", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.save_flow_png", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_disp_png", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.knn_interpolation", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.kitti_submission.rigid_refinement", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.mesh_grid"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "run", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'Generating results for KITTI submission...'", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "out_dir", "=", "self", ".", "cfgs", ".", "out_dir", "\n", "os", ".", "makedirs", "(", "'%s/disp_0'", "%", "out_dir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "'%s/disp_1'", "%", "out_dir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "'%s/flow'", "%", "out_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "inputs", "in", "tqdm", "(", "self", ".", "test_loader", ")", ":", "\n", "            ", "inputs", "=", "copy_to_device", "(", "inputs", ",", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "False", ")", ":", "\n", "                ", "outputs", "=", "self", ".", "model", ".", "forward", "(", "inputs", ")", "\n", "\n", "", "for", "batch_id", "in", "range", "(", "self", ".", "cfgs", ".", "model", ".", "batch_size", ")", ":", "\n", "                ", "flow_2d_pred", "=", "outputs", "[", "'flow_2d'", "]", "[", "batch_id", "]", "\n", "flow_3d_pred", "=", "outputs", "[", "'flow_3d'", "]", "[", "batch_id", "]", "\n", "\n", "test_id", "=", "inputs", "[", "'index'", "]", "[", "batch_id", "]", ".", "item", "(", ")", "\n", "input_h", "=", "inputs", "[", "'input_h'", "]", "[", "batch_id", "]", ".", "item", "(", ")", "\n", "input_w", "=", "inputs", "[", "'input_w'", "]", "[", "batch_id", "]", ".", "item", "(", ")", "\n", "\n", "f", "=", "inputs", "[", "'intrinsics'", "]", "[", "batch_id", "]", "[", "0", "]", ".", "item", "(", ")", "\n", "cx", "=", "inputs", "[", "'intrinsics'", "]", "[", "batch_id", "]", "[", "1", "]", ".", "item", "(", ")", "\n", "cy", "=", "inputs", "[", "'intrinsics'", "]", "[", "batch_id", "]", "[", "2", "]", ".", "item", "(", ")", "\n", "\n", "# disp_0: from GA-Net", "\n", "disp_0", "=", "load_disp_png", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "test_dataset", ".", "root_dir", ",", "'disp_ganet'", ",", "'%06d_10.png'", "%", "test_id", ")", "\n", ")", "[", "0", "]", "\n", "\n", "# predicted flow", "\n", "flow_2d_pred", "=", "flow_2d_pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "clamp", "(", "-", "500", ",", "500", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flow_2d_pred", "=", "flow_2d_pred", "[", ":", "input_h", ",", ":", "input_w", "]", "\n", "\n", "# densification", "\n", "pc1_dense", "=", "disp2pc", "(", "disp_0", ",", "baseline", "=", "0.54", ",", "f", "=", "f", ",", "cx", "=", "cx", ",", "cy", "=", "cy", ")", "\n", "pc1_dense", "=", "torch", ".", "from_numpy", "(", "pc1_dense", ".", "reshape", "(", "[", "-", "1", ",", "3", "]", ")", ".", "transpose", "(", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "pc1", "=", "inputs", "[", "'pcs'", "]", "[", "batch_id", ",", ":", "3", "]", "\n", "flow_3d_dense", "=", "knn_interpolation", "(", "\n", "input_xyz", "=", "pc1", "[", "None", ",", "...", "]", ",", "\n", "input_features", "=", "flow_3d_pred", "[", "None", ",", "...", "]", ",", "\n", "query_xyz", "=", "pc1_dense", "[", "None", ",", "...", "]", ",", "\n", ")", "[", "0", "]", "\n", "\n", "# compute disp_change (dense)", "\n", "pc1_dense_warp", "=", "pc1_dense", "+", "flow_3d_dense", "\n", "disp_c", "=", "0.54", "*", "f", "/", "pc1_dense_warp", "[", "2", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "input_h", ",", "input_w", ")", "\n", "disp_c", "[", "disp_0", "<", "0", "]", "=", "-", "1.0", "\n", "\n", "if", "self", ".", "cfgs", ".", "refine", ":", "\n", "# generate a coarse occlusion mask for rigid background refinement", "\n", "                    ", "grid", "=", "mesh_grid", "(", "1", ",", "input_h", ",", "input_w", ",", "device", "=", "'cpu'", ",", "channel_first", "=", "False", ")", "[", "0", "]", ".", "numpy", "(", ")", "\n", "grid_warp", "=", "grid", "+", "flow_2d_pred", "\n", "x_out", "=", "np", ".", "logical_or", "(", "grid_warp", "[", "...", ",", "0", "]", "<", "0", ",", "grid_warp", "[", "...", ",", "0", "]", ">", "input_w", ")", "\n", "y_out", "=", "np", ".", "logical_or", "(", "grid_warp", "[", "...", ",", "1", "]", "<", "0", ",", "grid_warp", "[", "...", ",", "1", "]", ">", "input_h", ")", "\n", "occ_mask1_2d", "=", "np", ".", "logical_or", "(", "x_out", ",", "y_out", ")", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "\n", "\n", "flow_2d_pred", ",", "disp_c", "=", "rigid_refinement", "(", "\n", "test_id", ",", "disp_0", ",", "disp_c", ",", "flow_2d_pred", ",", "occ_mask1_2d", "==", "0", "\n", ")", "\n", "\n", "", "save_disp_png", "(", "'%s/disp_0/%06d_10.png'", "%", "(", "out_dir", ",", "test_id", ")", ",", "disp_0", ")", "\n", "save_disp_png", "(", "'%s/disp_1/%06d_10.png'", "%", "(", "out_dir", ",", "test_id", ")", ",", "disp_c", ")", "\n", "save_flow_png", "(", "'%s/flow/%06d_10.png'", "%", "(", "out_dir", ",", "test_id", ")", ",", "flow_2d_pred", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "'Results have been saved to %s'", "%", "out_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.kitti_submission.rigid_refinement": [[21, 36], ["numpy.random.seed", "refine_utils.mod_flow", "numpy.clip", "cv2.imread", "utils.load_calib", "bg_mask.copy", "disp.copy", "disp_c.copy", "flow.copy", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.refine_utils.mod_flow", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_calib"], ["def", "rigid_refinement", "(", "test_id", ",", "disp", ",", "disp_c", ",", "flow", ",", "noc_mask", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "bg_mask", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "\n", "cfgs", ".", "testset", ".", "root_dir", ",", "'testing'", ",", "'semantic_ddr'", ",", "'%06d_10.png'", "%", "test_id", ")", ",", "0", ")", "<=", "22", "\n", "K0", "=", "load_calib", "(", "os", ".", "path", ".", "join", "(", "\n", "cfgs", ".", "testset", ".", "root_dir", ",", "'testing'", ",", "'calib_cam_to_cam'", ",", "'%06d.txt'", "%", "test_id", ")", ")", "[", "0", ":", "3", ",", "0", ":", "3", "]", "\n", "\n", "flow_refine", ",", "disp_c_refine", "=", "mod_flow", "(", "\n", "bg_mask", ".", "copy", "(", ")", ",", "disp", ".", "copy", "(", ")", ",", "disp_c", ".", "copy", "(", ")", ",", "flow", ".", "copy", "(", ")", ",", "K0", ",", "\n", "K1", "=", "K0", ",", "bl", "=", "0.54", ",", "noc_mask", "=", "noc_mask", "\n", ")", "\n", "flow_refine", "=", "np", ".", "clip", "(", "flow_refine", ",", "-", "500", ",", "500", ")", "\n", "\n", "return", "flow_refine", ",", "disp_c_refine", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.preprocess_flyingthings3d_subset.Preprocessor.__init__": [[58, 72], ["super().__init__", "os.listdir", "os.path.join", "int", "preprocess_flyingthings3d_subset.Preprocessor.indices.append", "filename.split"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dir", ",", "output_dir", ",", "split", ",", "n_points", ",", "max_depth", ",", "remove_occluded_points", ")", ":", "\n", "        ", "super", "(", "Preprocessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_dir", "=", "input_dir", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "n_points", "=", "n_points", "\n", "self", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "remove_occluded_points", "=", "remove_occluded_points", "\n", "\n", "self", ".", "indices", "=", "[", "]", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "input_dir", ",", "split", ",", "'flow'", ",", "'left'", ",", "'into_future'", ")", ")", ":", "\n", "            ", "index", "=", "int", "(", "filename", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "self", ".", "indices", ".", "append", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.preprocess_flyingthings3d_subset.Preprocessor.__len__": [[73, 75], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.preprocess_flyingthings3d_subset.Preprocessor.__getitem__": [[76, 167], ["numpy.random.seed", "utils.load_flow", "cv2.imread", "numpy.random.choice", "numpy.random.choice", "numpy.savez", "numpy.save", "numpy.logical_and", "utils.save_flow_png", "numpy.save", "utils.load_fpm", "utils.load_fpm", "utils.load_fpm", "os.path.join", "os.path.join", "utils.disp2pc", "utils.disp2pc", "numpy.logical_not", "numpy.logical_and", "numpy.logical_not", "numpy.zeros", "utils.disp2pc", "utils.disp2pc", "numpy.logical_not", "numpy.logical_not", "os.path.join", "os.path.join", "numpy.packbits", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.isnan", "len", "utils.disp2pc", "numpy.isnan", "numpy.isnan", "min", "min", "numpy.abs", "numpy.abs", "numpy.logical_not", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_flow", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.save_flow_png", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_fpm", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_fpm", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_fpm", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.disp2pc", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.disp2pc", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.disp2pc", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.disp2pc", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.disp2pc"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "index1", "=", "self", ".", "indices", "[", "i", "]", "\n", "index2", "=", "index1", "+", "1", "\n", "\n", "# camera intrinsics", "\n", "baseline", ",", "f", ",", "cx", ",", "cy", "=", "1.0", ",", "1050.0", ",", "479.5", ",", "269.5", "\n", "\n", "# load data", "\n", "disp1", "=", "-", "load_fpm", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "input_dir", ",", "self", ".", "split", ",", "'disparity'", ",", "'left'", ",", "'%07d.pfm'", "%", "index1", "\n", ")", ")", "\n", "disp2", "=", "-", "load_fpm", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "input_dir", ",", "self", ".", "split", ",", "'disparity'", ",", "'left'", ",", "'%07d.pfm'", "%", "index2", "\n", ")", ")", "\n", "disp1_change", "=", "-", "load_fpm", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "input_dir", ",", "self", ".", "split", ",", "'disparity_change'", ",", "'left'", ",", "'into_future'", ",", "'%07d.pfm'", "%", "index1", "\n", ")", ")", "\n", "flow_2d", "=", "load_flow", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "input_dir", ",", "self", ".", "split", ",", "'flow'", ",", "'left'", ",", "'into_future'", ",", "'%07d.flo'", "%", "index1", "\n", ")", ")", "\n", "occ_mask_2d", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "input_dir", ",", "self", ".", "split", ",", "'flow_occlusions'", ",", "'left'", ",", "'into_future'", ",", "'%07d.png'", "%", "index1", "\n", ")", ")", "\n", "occ_mask_2d", "=", "occ_mask_2d", "[", "...", ",", "0", "]", ">", "1", "\n", "\n", "if", "self", ".", "remove_occluded_points", ":", "\n", "            ", "pc1", "=", "disp2pc", "(", "disp1", ",", "baseline", ",", "f", ",", "cx", ",", "cy", ")", "\n", "pc2", "=", "disp2pc", "(", "disp1", "+", "disp1_change", ",", "baseline", ",", "f", ",", "cx", ",", "cy", ",", "flow_2d", ")", "\n", "\n", "# apply non-occlusion mask", "\n", "noc_mask_2d", "=", "np", ".", "logical_not", "(", "occ_mask_2d", ")", "\n", "pc1", ",", "pc2", "=", "pc1", "[", "noc_mask_2d", "]", ",", "pc2", "[", "noc_mask_2d", "]", "\n", "\n", "# apply depth mask", "\n", "mask", "=", "np", ".", "logical_and", "(", "pc1", "[", "...", ",", "-", "1", "]", "<", "self", ".", "max_depth", ",", "pc2", "[", "...", ",", "-", "1", "]", "<", "self", ".", "max_depth", ")", "\n", "pc1", ",", "pc2", "=", "pc1", "[", "mask", "]", ",", "pc2", "[", "mask", "]", "\n", "\n", "# NaN check", "\n", "mask", "=", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "np", ".", "sum", "(", "pc1", ",", "axis", "=", "-", "1", ")", "+", "np", ".", "sum", "(", "pc2", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "pc1", ",", "pc2", "=", "pc1", "[", "mask", "]", ",", "pc2", "[", "mask", "]", "\n", "\n", "# compute scene flow", "\n", "flow_3d", "=", "pc2", "-", "pc1", "\n", "occ_mask_3d", "=", "np", ".", "zeros", "(", "len", "(", "pc1", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "", "else", ":", "\n", "            ", "pc1", "=", "disp2pc", "(", "disp1", ",", "baseline", ",", "f", ",", "cx", ",", "cy", ")", "\n", "pc2", "=", "disp2pc", "(", "disp2", ",", "baseline", ",", "f", ",", "cx", ",", "cy", ")", "\n", "flow_3d", "=", "disp2pc", "(", "disp1", "+", "disp1_change", ",", "baseline", ",", "f", ",", "cx", ",", "cy", ",", "flow_2d", ")", "-", "pc1", "\n", "\n", "# apply depth mask", "\n", "mask1", "=", "(", "pc1", "[", "...", ",", "-", "1", "]", "<", "self", ".", "max_depth", ")", "\n", "mask2", "=", "(", "pc2", "[", "...", ",", "-", "1", "]", "<", "self", ".", "max_depth", ")", "\n", "pc1", ",", "pc2", ",", "flow_3d", ",", "occ_mask_3d", "=", "pc1", "[", "mask1", "]", ",", "pc2", "[", "mask2", "]", ",", "flow_3d", "[", "mask1", "]", ",", "occ_mask_2d", "[", "mask1", "]", "\n", "\n", "# NaN check", "\n", "mask1", "=", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "np", ".", "sum", "(", "pc1", ",", "axis", "=", "-", "1", ")", "+", "np", ".", "sum", "(", "flow_3d", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "mask2", "=", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "np", ".", "sum", "(", "pc2", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "pc1", ",", "pc2", ",", "flow_3d", ",", "occ_mask_3d", "=", "pc1", "[", "mask1", "]", ",", "pc2", "[", "mask2", "]", ",", "flow_3d", "[", "mask1", "]", ",", "occ_mask_3d", "[", "mask1", "]", "\n", "\n", "# random sampling", "\n", "", "indices1", "=", "np", ".", "random", ".", "choice", "(", "pc1", ".", "shape", "[", "0", "]", ",", "size", "=", "min", "(", "self", ".", "n_points", ",", "pc1", ".", "shape", "[", "0", "]", ")", ",", "replace", "=", "False", ")", "\n", "indices2", "=", "np", ".", "random", ".", "choice", "(", "pc2", ".", "shape", "[", "0", "]", ",", "size", "=", "min", "(", "self", ".", "n_points", ",", "pc2", ".", "shape", "[", "0", "]", ")", ",", "replace", "=", "False", ")", "\n", "pc1", ",", "pc2", ",", "flow_3d", ",", "occ_mask_3d", "=", "pc1", "[", "indices1", "]", ",", "pc2", "[", "indices2", "]", ",", "flow_3d", "[", "indices1", "]", ",", "occ_mask_3d", "[", "indices1", "]", "\n", "\n", "# save point clouds and occ mask", "\n", "np", ".", "savez", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "self", ".", "split", ",", "'pc'", ",", "'%07d.npz'", "%", "index1", ")", ",", "\n", "pc1", "=", "pc1", ",", "pc2", "=", "pc2", "\n", ")", "\n", "np", ".", "save", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "self", ".", "split", ",", "'occ_mask_3d'", ",", "'%07d.npy'", "%", "index1", ")", ",", "\n", "np", ".", "packbits", "(", "occ_mask_3d", ")", "\n", ")", "\n", "\n", "# mask regions moving extremely fast", "\n", "flow_mask", "=", "np", ".", "logical_and", "(", "np", ".", "abs", "(", "flow_2d", "[", "...", ",", "0", "]", ")", "<", "500", ",", "np", ".", "abs", "(", "flow_2d", "[", "...", ",", "1", "]", ")", "<", "500", ")", "\n", "flow_2d", "[", "np", ".", "logical_not", "(", "flow_mask", ")", "]", "=", "0.0", "\n", "\n", "# save ground-truth flow", "\n", "save_flow_png", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "self", ".", "split", ",", "'flow_2d'", ",", "'%07d.png'", "%", "index1", ")", ",", "\n", "flow_2d", ",", "flow_mask", "\n", ")", "\n", "np", ".", "save", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "self", ".", "split", ",", "'flow_3d'", ",", "'%07d.npy'", "%", "index1", ")", ",", "\n", "flow_3d", "\n", ")", "\n", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.preprocess_flyingthings3d_subset.main": [[169, 208], ["enumerate", "logging.info", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "logging.info", "preprocess_flyingthings3d_subset.Preprocessor", "torch.utils.data.DataLoader", "tqdm.tqdm", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "logging.info", "shutil.copytree", "os.path.exists", "logging.info", "shutil.copytree", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "for", "split_idx", ",", "split", "in", "enumerate", "(", "[", "'train'", ",", "'val'", "]", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "input_dir", ",", "split", ")", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "logging", ".", "info", "(", "'Processing \"%s\" split...'", "%", "split", ")", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "split", ",", "'pc'", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "split", ",", "'flow_2d'", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "split", ",", "'flow_3d'", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "split", ",", "'occ_mask_3d'", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "split", ",", "'image'", ")", ")", ":", "\n", "            ", "logging", ".", "info", "(", "'Copying images...'", ")", "\n", "shutil", ".", "copytree", "(", "\n", "src", "=", "os", ".", "path", ".", "join", "(", "args", ".", "input_dir", ",", "split", ",", "'image_clean'", ",", "'left'", ")", ",", "\n", "dst", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "split", ",", "'image'", ")", "\n", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "split", ",", "'occ_mask_2d'", ")", ")", ":", "\n", "            ", "logging", ".", "info", "(", "'Copying occ_mask_2d...'", ")", "\n", "shutil", ".", "copytree", "(", "\n", "src", "=", "os", ".", "path", ".", "join", "(", "args", ".", "input_dir", ",", "split", ",", "'flow_occlusions'", ",", "'left'", ",", "'into_future'", ")", ",", "\n", "dst", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "split", ",", "'occ_mask_2d'", ")", "\n", ")", "\n", "\n", "", "logging", ".", "info", "(", "'Generating point clouds...'", ")", "\n", "preprocessor", "=", "Preprocessor", "(", "\n", "args", ".", "input_dir", ",", "\n", "args", ".", "output_dir", ",", "\n", "split", ",", "\n", "args", ".", "n_points", "[", "split_idx", "]", ",", "\n", "args", ".", "max_depth", ",", "\n", "args", ".", "remove_occluded_points", ",", "\n", ")", "\n", "preprocessor", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "preprocessor", ",", "num_workers", "=", "4", ")", "\n", "\n", "for", "_", "in", "tqdm", "(", "preprocessor", ")", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.train.Trainer.__init__": [[23, 97], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "utils.init_logging", "logging.info", "factory.dataset_factory", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "logging.info", "factory.dataset_factory", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "logging.info", "factory.model_factory().to", "logging.info", "logging.info", "factory.optimizer_factory", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "os.path.join", "logging.info", "logging.info", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "logging.info", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "logging.info", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "train.Trainer.load_ckpt", "train.Trainer.model.named_parameters", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "int", "int", "int", "factory.model_factory", "sum", "omegaconf.OmegaConf.to_yaml", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "p.numel", "train.Trainer.model.parameters"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.init_logging", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.factory.dataset_factory", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.factory.dataset_factory", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.factory.optimizer_factory", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.train.Trainer.load_ckpt", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.factory.model_factory"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "cfgs", ")", ":", "\n", "        ", "os", ".", "environ", "[", "'MKL_NUM_THREADS'", "]", "=", "'1'", "\n", "os", ".", "environ", "[", "'OPENBLAS_NUM_THREADS'", "]", "=", "'1'", "\n", "\n", "self", ".", "cfgs", "=", "cfgs", "\n", "self", ".", "curr_epoch", ",", "self", ".", "curr_step", "=", "1", ",", "1", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "n_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "self", ".", "is_main", "=", "device", ".", "index", "is", "None", "or", "device", ".", "index", "==", "0", "\n", "utils", ".", "init_logging", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cfgs", ".", "log", ".", "dir", ",", "'train.log'", ")", ")", "\n", "\n", "if", "device", ".", "index", "is", "None", ":", "\n", "            ", "logging", ".", "info", "(", "'No CUDA device detected, using CPU for training'", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "'Using GPU %d: %s'", "%", "(", "device", ".", "index", ",", "torch", ".", "cuda", ".", "get_device_name", "(", "device", ")", ")", ")", "\n", "if", "self", ".", "n_gpus", ">", "1", ":", "\n", "                ", "init_process_group", "(", "'nccl'", ",", "'tcp://localhost:6789'", ",", "world_size", "=", "self", ".", "n_gpus", ",", "rank", "=", "self", ".", "device", ".", "index", ")", "\n", "self", ".", "cfgs", ".", "model", ".", "batch_size", "=", "int", "(", "self", ".", "cfgs", ".", "model", ".", "batch_size", "/", "self", ".", "n_gpus", ")", "\n", "self", ".", "cfgs", ".", "trainset", ".", "n_workers", "=", "int", "(", "self", ".", "cfgs", ".", "trainset", ".", "n_workers", "/", "self", ".", "n_gpus", ")", "\n", "self", ".", "cfgs", ".", "valset", ".", "n_workers", "=", "int", "(", "self", ".", "cfgs", ".", "valset", ".", "n_workers", "/", "self", ".", "n_gpus", ")", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "device", ")", "\n", "\n", "", "if", "self", ".", "is_main", ":", "\n", "            ", "logging", ".", "info", "(", "'Logs will be saved to %s'", "%", "self", ".", "cfgs", ".", "log", ".", "dir", ")", "\n", "self", ".", "summary_writer", "=", "SummaryWriter", "(", "self", ".", "cfgs", ".", "log", ".", "dir", ")", "\n", "logging", ".", "info", "(", "'Configurations:\\n'", "+", "OmegaConf", ".", "to_yaml", "(", "self", ".", "cfgs", ")", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "root", ".", "disabled", "=", "True", "\n", "\n", "", "logging", ".", "info", "(", "'Loading training set from %s'", "%", "self", ".", "cfgs", ".", "trainset", ".", "root_dir", ")", "\n", "self", ".", "train_dataset", "=", "dataset_factory", "(", "self", ".", "cfgs", ".", "trainset", ")", "\n", "self", ".", "train_sampler", "=", "DistributedSampler", "(", "self", ".", "train_dataset", ")", "if", "self", ".", "n_gpus", ">", "1", "else", "None", "\n", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "train_dataset", ",", "\n", "batch_size", "=", "self", ".", "cfgs", ".", "model", ".", "batch_size", ",", "\n", "shuffle", "=", "(", "self", ".", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "self", ".", "cfgs", ".", "trainset", ".", "n_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "self", ".", "train_sampler", ",", "\n", "drop_last", "=", "self", ".", "cfgs", ".", "trainset", ".", "drop_last", ",", "\n", ")", "\n", "\n", "logging", ".", "info", "(", "'Loading validation set from %s'", "%", "self", ".", "cfgs", ".", "valset", ".", "root_dir", ")", "\n", "self", ".", "val_dataset", "=", "dataset_factory", "(", "self", ".", "cfgs", ".", "valset", ")", "\n", "self", ".", "val_sampler", "=", "DistributedSampler", "(", "self", ".", "val_dataset", ")", "if", "self", ".", "n_gpus", ">", "1", "else", "None", "\n", "self", ".", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "val_dataset", ",", "\n", "batch_size", "=", "self", ".", "cfgs", ".", "model", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "cfgs", ".", "valset", ".", "n_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "self", ".", "val_sampler", ",", "\n", ")", "\n", "\n", "logging", ".", "info", "(", "'Creating model: CamLiFlow'", ")", "\n", "self", ".", "model", "=", "model_factory", "(", "self", ".", "cfgs", ".", "model", ")", ".", "to", "(", "device", "=", "self", ".", "device", ")", "\n", "\n", "logging", ".", "info", "(", "'Trainable parameters: %d'", "%", "\n", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", ")", ")", "\n", "\n", "if", "self", ".", "n_gpus", ">", "1", ":", "\n", "            ", "self", ".", "model", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "self", ".", "model", ")", "\n", "self", ".", "ddp", "=", "DistributedDataParallel", "(", "self", ".", "model", ",", "[", "self", ".", "device", ".", "index", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ddp", "=", "self", ".", "model", "\n", "\n", "", "self", ".", "best_metrics", "=", "None", "\n", "if", "self", ".", "cfgs", ".", "ckpt", ".", "path", "is", "not", "None", ":", "\n", "            ", "self", ".", "load_ckpt", "(", "self", ".", "cfgs", ".", "ckpt", ".", "path", ",", "resume", "=", "self", ".", "cfgs", ".", "ckpt", ".", "resume", ")", "\n", "\n", "", "logging", ".", "info", "(", "'Creating optimizer: %s'", "%", "self", ".", "cfgs", ".", "training", ".", "optimizer", ")", "\n", "self", ".", "optimizer", ",", "self", ".", "lr_scheduler", "=", "optimizer_factory", "(", "self", ".", "cfgs", ".", "training", ",", "self", ".", "model", ".", "named_parameters", "(", ")", ",", "self", ".", "curr_epoch", "-", "1", ")", "\n", "self", ".", "amp_scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.train.Trainer.run": [[98, 115], ["train.Trainer.save_scalar_summary", "train.Trainer.train_one_epoch", "train.Trainer.validate", "train.Trainer.lr_scheduler.step", "train.Trainer.train_sampler.set_epoch", "train.Trainer.val_sampler.set_epoch", "train.Trainer.save_ckpt"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.train.Trainer.save_scalar_summary", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.train.Trainer.train_one_epoch", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.train.Trainer.validate", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.train.Trainer.save_ckpt"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "while", "self", ".", "curr_epoch", "<=", "self", ".", "cfgs", ".", "training", ".", "max_epochs", ":", "\n", "            ", "if", "self", ".", "train_sampler", "is", "not", "None", ":", "\n", "                ", "self", ".", "train_sampler", ".", "set_epoch", "(", "self", ".", "curr_epoch", ")", "\n", "", "if", "self", ".", "val_sampler", "is", "not", "None", ":", "\n", "                ", "self", ".", "val_sampler", ".", "set_epoch", "(", "self", ".", "curr_epoch", ")", "\n", "\n", "", "self", ".", "save_scalar_summary", "(", "{", "'learning_rate'", ":", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "}", ",", "self", ".", "curr_epoch", ")", "\n", "\n", "self", ".", "train_one_epoch", "(", ")", "\n", "self", ".", "validate", "(", ")", "\n", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "curr_epoch", "%", "self", ".", "cfgs", ".", "log", ".", "save_ckpt_every_n_epochs", "==", "0", ":", "\n", "                ", "self", ".", "save_ckpt", "(", ")", "\n", "\n", "", "self", ".", "curr_epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.train.Trainer.train_one_epoch": [[116, 141], ["train.Trainer.ddp.train", "time.time", "enumerate", "utils.copy_to_device", "train.Trainer.optimizer.zero_grad", "train.Trainer.amp_scaler.scale().backward", "train.Trainer.amp_scaler.step", "train.Trainer.amp_scaler.update", "time.time", "logging.info", "train.Trainer.save_scalar_summary", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "train.Trainer.ddp.forward", "train.Trainer.model.get_loss", "time.time", "train.Trainer.model.get_scalar_summary", "train.Trainer.amp_scaler.scale", "train.Trainer.model.get_log_string", "len"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.train", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.copy_to_device", "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.CorrelationFunction.backward", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.train.Trainer.save_scalar_summary", "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.CorrelationFunction.forward", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.get_loss", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.get_scalar_summary", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.get_log_string"], ["", "", "def", "train_one_epoch", "(", "self", ")", ":", "\n", "        ", "self", ".", "ddp", ".", "train", "(", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "inputs", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "            ", "inputs", "=", "copy_to_device", "(", "inputs", ",", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "self", ".", "cfgs", ".", "amp", ")", ":", "\n", "                ", "self", ".", "ddp", ".", "forward", "(", "inputs", ")", "\n", "loss", "=", "self", ".", "model", ".", "get_loss", "(", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "amp_scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "self", ".", "amp_scaler", ".", "step", "(", "self", ".", "optimizer", ")", "\n", "self", ".", "amp_scaler", ".", "update", "(", ")", "\n", "\n", "timing", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "logging", ".", "info", "(", "'E: [%d/%d] '", "%", "(", "self", ".", "curr_epoch", ",", "self", ".", "cfgs", ".", "training", ".", "max_epochs", ")", "+", "\n", "'S: [%d/%d] '", "%", "(", "i", "+", "1", ",", "len", "(", "self", ".", "train_loader", ")", ")", "+", "\n", "'| %s, timing: %.2fs'", "%", "(", "self", ".", "model", ".", "get_log_string", "(", ")", ",", "timing", ")", ")", "\n", "\n", "self", ".", "save_scalar_summary", "(", "self", ".", "model", ".", "get_scalar_summary", "(", ")", ",", "self", ".", "curr_step", ",", "prefix", "=", "'train/'", ")", "\n", "self", ".", "curr_step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.train.Trainer.validate": [[142, 174], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train.Trainer.ddp.eval", "time.time", "enumerate", "logging.info", "train.Trainer.save_scalar_summary", "train.Trainer.model.is_better", "utils.copy_to_device", "time.time", "logging.info", "train.Trainer.model.get_scalar_summary", "train.Trainer.save_ckpt", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "train.Trainer.ddp.forward", "time.time", "utils.dist_reduce_sum", "len", "str", "utils.size_of_batch", "len", "train.Trainer.model.get_log_string", "utils.size_of_batch"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.eval", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.train.Trainer.save_scalar_summary", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.is_better", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.copy_to_device", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.get_scalar_summary", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.train.Trainer.save_ckpt", "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.CorrelationFunction.forward", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.dist_reduce_sum", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.size_of_batch", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.get_log_string", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.size_of_batch"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate", "(", "self", ")", ":", "\n", "        ", "self", ".", "ddp", ".", "eval", "(", ")", "\n", "epoch_summary", "=", "None", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "inputs", "in", "enumerate", "(", "self", ".", "val_loader", ")", ":", "\n", "            ", "inputs", "=", "copy_to_device", "(", "inputs", ",", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "False", ")", ":", "\n", "                ", "self", ".", "ddp", ".", "forward", "(", "inputs", ")", "\n", "\n", "", "timing", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "logging", ".", "info", "(", "'S: [%d/%d] '", "%", "(", "i", "+", "1", ",", "len", "(", "self", ".", "val_loader", ")", ")", "+", "\n", "'| %s, timing: %.2fs'", "%", "(", "self", ".", "model", ".", "get_log_string", "(", ")", ",", "timing", ")", ")", "\n", "\n", "batch_summary", "=", "self", ".", "model", ".", "get_scalar_summary", "(", ")", "\n", "\n", "if", "epoch_summary", "is", "None", ":", "\n", "                ", "epoch_summary", "=", "{", "k", ":", "batch_summary", "[", "k", "]", "*", "size_of_batch", "(", "inputs", ")", "for", "k", "in", "batch_summary", "}", "\n", "", "else", ":", "\n", "                ", "epoch_summary", "=", "{", "k", ":", "batch_summary", "[", "k", "]", "*", "size_of_batch", "(", "inputs", ")", "+", "epoch_summary", "[", "k", "]", "for", "k", "in", "batch_summary", "}", "\n", "\n", "", "", "epoch_summary", "=", "{", "k", ":", "dist_reduce_sum", "(", "epoch_summary", "[", "k", "]", ",", "self", ".", "n_gpus", ")", "/", "len", "(", "self", ".", "val_dataset", ")", "for", "k", "in", "epoch_summary", "}", "\n", "logging", ".", "info", "(", "'Statistics on validation set: %s'", "%", "str", "(", "epoch_summary", ")", ")", "\n", "self", ".", "save_scalar_summary", "(", "epoch_summary", ",", "self", ".", "curr_epoch", ",", "prefix", "=", "'val/'", ")", "\n", "\n", "if", "self", ".", "model", ".", "is_better", "(", "epoch_summary", ",", "self", ".", "best_metrics", ")", ":", "\n", "            ", "self", ".", "best_metrics", "=", "epoch_summary", "\n", "self", ".", "save_ckpt", "(", "'best.pt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.train.Trainer.save_scalar_summary": [[175, 179], ["scalar_summary.keys", "train.Trainer.summary_writer.add_scalar"], "methods", ["None"], ["", "", "def", "save_scalar_summary", "(", "self", ",", "scalar_summary", ":", "dict", ",", "curr_step", ":", "int", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "if", "self", ".", "is_main", ":", "\n", "            ", "for", "name", "in", "scalar_summary", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "summary_writer", ".", "add_scalar", "(", "prefix", "+", "name", ",", "scalar_summary", "[", "name", "]", ",", "curr_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.train.Trainer.save_ckpt": [[180, 192], ["os.path.join", "os.makedirs", "os.path.join", "logging.info", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "train.Trainer.model.state_dict"], "methods", ["None"], ["", "", "", "def", "save_ckpt", "(", "self", ",", "filename", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "is_main", "and", "self", ".", "cfgs", ".", "log", ".", "save_ckpt", ":", "\n", "            ", "ckpt_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfgs", ".", "log", ".", "dir", ",", "'ckpts'", ")", "\n", "os", ".", "makedirs", "(", "ckpt_dir", ",", "exist_ok", "=", "True", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "filename", "or", "'epoch-%03d.pt'", "%", "self", ".", "curr_epoch", ")", "\n", "logging", ".", "info", "(", "'Saving checkpoint to %s'", "%", "filepath", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'last_epoch'", ":", "self", ".", "curr_epoch", ",", "\n", "'last_step'", ":", "self", ".", "curr_step", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_metrics'", ":", "self", ".", "best_metrics", "\n", "}", ",", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.train.Trainer.load_ckpt": [[193, 202], ["logging.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "train.Trainer.model.load_state_dict", "logging.info", "str"], "methods", ["None"], ["", "", "def", "load_ckpt", "(", "self", ",", "filepath", ",", "resume", "=", "True", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'Loading checkpoint from %s'", "%", "filepath", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "filepath", ",", "self", ".", "device", ")", "\n", "if", "resume", ":", "\n", "            ", "self", ".", "curr_epoch", "=", "checkpoint", "[", "'last_epoch'", "]", "+", "1", "\n", "self", ".", "curr_step", "=", "checkpoint", "[", "'last_step'", "]", "+", "1", "\n", "self", ".", "best_metrics", "=", "checkpoint", "[", "'best_metrics'", "]", "\n", "logging", ".", "info", "(", "'Current best metrics: %s'", "%", "str", "(", "self", ".", "best_metrics", ")", ")", "\n", "", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "strict", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.train.create_trainer": [[204, 208], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "train.Trainer", "train.Trainer.run"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.train.Trainer.run"], ["", "", "def", "create_trainer", "(", "device_id", ",", "cfgs", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cpu'", "if", "device_id", "is", "None", "else", "'cuda:%d'", "%", "device_id", ")", "\n", "trainer", "=", "Trainer", "(", "device", ",", "cfgs", ")", "\n", "trainer", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.kitti.KITTI.__init__": [[10, 24], ["os.path.isdir", "os.path.join", "numpy.arange", "range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfgs", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isdir", "(", "cfgs", ".", "root_dir", ")", "\n", "assert", "cfgs", ".", "split", "in", "[", "'training200'", ",", "'training160'", ",", "'training40'", "]", "\n", "\n", "self", ".", "root_dir", "=", "os", ".", "path", ".", "join", "(", "cfgs", ".", "root_dir", ",", "'training'", ")", "\n", "self", ".", "split", "=", "cfgs", ".", "split", "\n", "self", ".", "cfgs", "=", "cfgs", "\n", "\n", "if", "self", ".", "split", "==", "'training200'", ":", "\n", "            ", "self", ".", "indices", "=", "np", ".", "arange", "(", "200", ")", "\n", "", "elif", "self", ".", "split", "==", "'training160'", ":", "\n", "            ", "self", ".", "indices", "=", "[", "i", "for", "i", "in", "range", "(", "200", ")", "if", "i", "%", "5", "!=", "0", "]", "\n", "", "elif", "self", ".", "split", "==", "'training40'", ":", "\n", "            ", "self", ".", "indices", "=", "[", "i", "for", "i", "in", "range", "(", "200", ")", "if", "i", "%", "5", "==", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.kitti.KITTI.__len__": [[25, 27], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.kitti.KITTI.__getitem__": [[28, 89], ["utils.load_calib", "utils.load_flow_png", "utils.load_disp_png", "utils.load_disp_png", "numpy.logical_and", "numpy.ones", "utils.project_pc2image", "numpy.logical_and", "numpy.concatenate", "numpy.concatenate", "utils.zero_padding", "utils.zero_padding", "utils.zero_padding", "augmentation.joint_augmentation", "numpy.random.choice", "numpy.random.choice", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate.transpose", "utils.zero_padding.transpose", "numpy.concatenate.transpose", "numpy.concatenate.transpose", "numpy.float32", "numpy.random.seed", "os.path.join", "cv2.imread", "cv2.imread", "os.path.join", "os.path.join", "os.path.join", "numpy.logical_and", "utils.disp2pc", "utils.disp2pc", "numpy.logical_and", "numpy.logical_and", "os.path.join", "os.path.join", "flow_2d_mask[].astype", "flow_3d_mask[].astype"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_calib", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_flow_png", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_disp_png", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_disp_png", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.project_pc2image", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.zero_padding", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.zero_padding", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.zero_padding", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.joint_augmentation", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.disp2pc", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.disp2pc"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "if", "not", "self", ".", "cfgs", ".", "augmentation", ".", "enabled", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "23333", ")", "\n", "\n", "", "index", "=", "self", ".", "indices", "[", "i", "]", "\n", "data_dict", "=", "{", "'index'", ":", "index", "}", "\n", "\n", "proj_mat", "=", "load_calib", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'calib_cam_to_cam'", ",", "'%06d.txt'", "%", "index", ")", ")", "\n", "f", ",", "cx", ",", "cy", "=", "proj_mat", "[", "0", ",", "0", "]", ",", "proj_mat", "[", "0", ",", "2", "]", ",", "proj_mat", "[", "1", ",", "2", "]", "\n", "\n", "image1", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'image_2'", ",", "'%06d_10.png'", "%", "index", ")", ")", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "image2", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'image_2'", ",", "'%06d_11.png'", "%", "index", ")", ")", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "flow_2d", ",", "flow_2d_mask", "=", "load_flow_png", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'flow_occ'", ",", "'%06d_10.png'", "%", "index", ")", ")", "\n", "\n", "disp1", ",", "mask1", "=", "load_disp_png", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'disp_occ_0'", ",", "'%06d_10.png'", "%", "index", ")", ")", "\n", "disp2", ",", "mask2", "=", "load_disp_png", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'disp_occ_1'", ",", "'%06d_10.png'", "%", "index", ")", ")", "\n", "mask", "=", "np", ".", "logical_and", "(", "np", ".", "logical_and", "(", "mask1", ",", "mask2", ")", ",", "flow_2d_mask", ")", "\n", "\n", "pc1", "=", "disp2pc", "(", "disp1", ",", "baseline", "=", "0.54", ",", "f", "=", "f", ",", "cx", "=", "cx", ",", "cy", "=", "cy", ")", "[", "mask", "]", "\n", "pc2", "=", "disp2pc", "(", "disp2", ",", "baseline", "=", "0.54", ",", "f", "=", "f", ",", "cx", "=", "cx", ",", "cy", "=", "cy", ",", "flow", "=", "flow_2d", ")", "[", "mask", "]", "\n", "flow_3d", "=", "pc2", "-", "pc1", "\n", "flow_3d_mask", "=", "np", ".", "ones", "(", "flow_3d", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# remove out-of-boundary regions of pc2 to create occlusion", "\n", "image_h", ",", "image_w", "=", "disp2", ".", "shape", "[", ":", "2", "]", "\n", "xy2", "=", "project_pc2image", "(", "pc2", ",", "image_h", ",", "image_w", ",", "f", ",", "cx", ",", "cy", ",", "clip", "=", "False", ")", "\n", "boundary_mask", "=", "np", ".", "logical_and", "(", "\n", "np", ".", "logical_and", "(", "xy2", "[", "...", ",", "0", "]", ">=", "0", ",", "xy2", "[", "...", ",", "0", "]", "<", "image_w", ")", ",", "\n", "np", ".", "logical_and", "(", "xy2", "[", "...", ",", "1", "]", ">=", "0", ",", "xy2", "[", "...", ",", "1", "]", "<", "image_h", ")", "\n", ")", "\n", "pc2", "=", "pc2", "[", "boundary_mask", "]", "\n", "\n", "flow_2d", "=", "np", ".", "concatenate", "(", "[", "flow_2d", ",", "flow_2d_mask", "[", "...", ",", "None", "]", ".", "astype", "(", "np", ".", "float32", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "flow_3d", "=", "np", ".", "concatenate", "(", "[", "flow_3d", ",", "flow_3d_mask", "[", "...", ",", "None", "]", ".", "astype", "(", "np", ".", "float32", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# images from KITTI have various sizes, padding them to a unified size of 1242x376", "\n", "padding_h", ",", "padding_w", "=", "376", ",", "1242", "\n", "image1", "=", "zero_padding", "(", "image1", ",", "padding_h", ",", "padding_w", ")", "\n", "image2", "=", "zero_padding", "(", "image2", ",", "padding_h", ",", "padding_w", ")", "\n", "flow_2d", "=", "zero_padding", "(", "flow_2d", ",", "padding_h", ",", "padding_w", ")", "\n", "\n", "# data augmentation", "\n", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", "=", "joint_augmentation", "(", "\n", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", ",", "self", ".", "cfgs", ".", "augmentation", ",", "\n", ")", "\n", "\n", "# random sampling", "\n", "indices1", "=", "np", ".", "random", ".", "choice", "(", "pc1", ".", "shape", "[", "0", "]", ",", "size", "=", "self", ".", "cfgs", ".", "n_points", ",", "replace", "=", "pc1", ".", "shape", "[", "0", "]", "<", "self", ".", "cfgs", ".", "n_points", ")", "\n", "indices2", "=", "np", ".", "random", ".", "choice", "(", "pc2", ".", "shape", "[", "0", "]", ",", "size", "=", "self", ".", "cfgs", ".", "n_points", ",", "replace", "=", "pc2", ".", "shape", "[", "0", "]", "<", "self", ".", "cfgs", ".", "n_points", ")", "\n", "pc1", ",", "pc2", ",", "flow_3d", "=", "pc1", "[", "indices1", "]", ",", "pc2", "[", "indices2", "]", ",", "flow_3d", "[", "indices1", "]", "\n", "\n", "pcs", "=", "np", ".", "concatenate", "(", "[", "pc1", ",", "pc2", "]", ",", "axis", "=", "1", ")", "\n", "images", "=", "np", ".", "concatenate", "(", "[", "image1", ",", "image2", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "data_dict", "[", "'images'", "]", "=", "images", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "data_dict", "[", "'flow_2d'", "]", "=", "flow_2d", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "data_dict", "[", "'pcs'", "]", "=", "pcs", ".", "transpose", "(", ")", "\n", "data_dict", "[", "'flow_3d'", "]", "=", "flow_3d", ".", "transpose", "(", ")", "\n", "data_dict", "[", "'intrinsics'", "]", "=", "np", ".", "float32", "(", "[", "f", ",", "cx", ",", "cy", "]", ")", "\n", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.kitti.KITTITest.__init__": [[92, 100], ["os.path.isdir", "os.path.join", "numpy.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfgs", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isdir", "(", "cfgs", ".", "root_dir", ")", "\n", "assert", "cfgs", ".", "split", "in", "[", "'testing200'", "]", "\n", "\n", "self", ".", "root_dir", "=", "os", ".", "path", ".", "join", "(", "cfgs", ".", "root_dir", ",", "'testing'", ")", "\n", "self", ".", "split", "=", "cfgs", ".", "split", "\n", "self", ".", "cfgs", "=", "cfgs", "\n", "self", ".", "indices", "=", "np", ".", "arange", "(", "200", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.kitti.KITTITest.__len__": [[101, 103], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.kitti.KITTITest.__getitem__": [[104, 154], ["numpy.random.seed", "utils.load_calib", "utils.load_disp_png", "utils.load_disp_png", "kitti.KITTITest.clip_point_cloud", "utils.zero_padding", "utils.zero_padding", "numpy.random.choice", "numpy.random.choice", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate.transpose", "numpy.concatenate.transpose", "numpy.float32", "os.path.join", "cv2.imread", "cv2.imread", "os.path.join", "os.path.join", "utils.disp2pc", "utils.disp2pc", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_calib", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_disp_png", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_disp_png", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.kitti.KITTITest.clip_point_cloud", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.zero_padding", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.zero_padding", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.disp2pc", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.disp2pc"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "23333", ")", "\n", "\n", "index", "=", "self", ".", "indices", "[", "i", "]", "\n", "data_dict", "=", "{", "'index'", ":", "index", "}", "\n", "\n", "proj_mat", "=", "load_calib", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'calib_cam_to_cam'", ",", "'%06d.txt'", "%", "index", ")", ")", "\n", "f", ",", "cx", ",", "cy", "=", "proj_mat", "[", "0", ",", "0", "]", ",", "proj_mat", "[", "0", ",", "2", "]", ",", "proj_mat", "[", "1", ",", "2", "]", "\n", "\n", "image1", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'image_2'", ",", "'%06d_10.png'", "%", "index", ")", ")", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "image2", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'image_2'", ",", "'%06d_11.png'", "%", "index", ")", ")", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "data_dict", "[", "'input_h'", "]", "=", "image1", ".", "shape", "[", "0", "]", "\n", "data_dict", "[", "'input_w'", "]", "=", "image1", ".", "shape", "[", "1", "]", "\n", "\n", "disp1", ",", "mask1", "=", "load_disp_png", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'disp_ganet'", ",", "'%06d_10.png'", "%", "index", ")", ")", "\n", "disp2", ",", "mask2", "=", "load_disp_png", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'disp_ganet'", ",", "'%06d_11.png'", "%", "index", ")", ")", "\n", "\n", "# ignore top 100 rows without evaluation", "\n", "mask1", "[", ":", "100", "]", "=", "0", "\n", "mask2", "[", ":", "100", "]", "=", "0", "\n", "\n", "# disparity -> point clouds", "\n", "pc1", "=", "disp2pc", "(", "disp1", ",", "baseline", "=", "0.54", ",", "f", "=", "f", ",", "cx", "=", "cx", ",", "cy", "=", "cy", ")", "[", "mask1", "]", "\n", "pc2", "=", "disp2pc", "(", "disp2", ",", "baseline", "=", "0.54", ",", "f", "=", "f", ",", "cx", "=", "cx", ",", "cy", "=", "cy", ")", "[", "mask2", "]", "\n", "\n", "# limit max height", "\n", "pc1", ",", "pc2", "=", "self", ".", "clip_point_cloud", "(", "pc1", ",", "pc2", ")", "\n", "\n", "# limit max depth", "\n", "pc1", "=", "pc1", "[", "pc1", "[", "...", ",", "-", "1", "]", "<", "self", ".", "cfgs", ".", "max_depth", "]", "\n", "pc2", "=", "pc2", "[", "pc2", "[", "...", ",", "-", "1", "]", "<", "self", ".", "cfgs", ".", "max_depth", "]", "\n", "\n", "# images from KITTI have various sizes, padding them to a unified size of 1242x376", "\n", "padding_h", ",", "padding_w", "=", "376", ",", "1242", "\n", "image1", "=", "zero_padding", "(", "image1", ",", "padding_h", ",", "padding_w", ")", "\n", "image2", "=", "zero_padding", "(", "image2", ",", "padding_h", ",", "padding_w", ")", "\n", "\n", "# random sampling", "\n", "indices1", "=", "np", ".", "random", ".", "choice", "(", "pc1", ".", "shape", "[", "0", "]", ",", "size", "=", "self", ".", "cfgs", ".", "n_points", ",", "replace", "=", "pc1", ".", "shape", "[", "0", "]", "<", "self", ".", "cfgs", ".", "n_points", ")", "\n", "indices2", "=", "np", ".", "random", ".", "choice", "(", "pc2", ".", "shape", "[", "0", "]", ",", "size", "=", "self", ".", "cfgs", ".", "n_points", ",", "replace", "=", "pc2", ".", "shape", "[", "0", "]", "<", "self", ".", "cfgs", ".", "n_points", ")", "\n", "pc1", ",", "pc2", "=", "pc1", "[", "indices1", "]", ",", "pc2", "[", "indices2", "]", "\n", "\n", "pcs", "=", "np", ".", "concatenate", "(", "[", "pc1", ",", "pc2", "]", ",", "axis", "=", "1", ")", "\n", "images", "=", "np", ".", "concatenate", "(", "[", "image1", ",", "image2", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "data_dict", "[", "'images'", "]", "=", "images", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "data_dict", "[", "'pcs'", "]", "=", "pcs", ".", "transpose", "(", ")", "\n", "data_dict", "[", "'intrinsics'", "]", "=", "np", ".", "float32", "(", "[", "f", ",", "cx", ",", "cy", "]", ")", "\n", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.kitti.KITTITest.clip_point_cloud": [[155, 176], ["numpy.array", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "clip_point_cloud", "(", "pc1", ",", "pc2", ")", ":", "\n", "        ", "\"\"\"\n        Rotate pc1 and pc2 by a small angle (1.6\u00b0), then apply clipping and rotate back.\n        \"\"\"", "\n", "theta", "=", "-", "np", ".", "pi", "*", "1.6", "/", "180.0", "\n", "rot", "=", "np", ".", "array", "(", "[", "\n", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "np", ".", "cos", "(", "theta", ")", ",", "-", "np", ".", "sin", "(", "theta", ")", "]", ",", "\n", "[", "0", ",", "np", ".", "sin", "(", "theta", ")", ",", "np", ".", "cos", "(", "theta", ")", "]", ",", "\n", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "pc1", "=", "np", ".", "dot", "(", "rot", ",", "pc1", ".", "T", ")", ".", "T", "\n", "pc1", "=", "pc1", "[", "pc1", "[", "...", ",", "1", "]", ">", "-", "1", "]", "# limit max height", "\n", "pc1", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "rot", ")", ",", "pc1", ".", "T", ")", ".", "T", "\n", "\n", "pc2", "=", "np", ".", "dot", "(", "rot", ",", "pc2", ".", "T", ")", ".", "T", "\n", "pc2", "=", "pc2", "[", "pc2", "[", "...", ",", "1", "]", ">", "-", "1", "]", "# limit max height", "\n", "pc2", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "rot", ")", ",", "pc2", ".", "T", ")", ".", "T", "\n", "\n", "return", "pc1", ",", "pc2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.factory.dataset_factory": [[9, 18], ["driving.Driving", "flyingthings3d.FlyingThings3D", "kitti.KITTI", "NotImplementedError"], "function", ["None"], ["def", "dataset_factory", "(", "cfgs", ":", "DictConfig", ")", ":", "\n", "    ", "if", "cfgs", ".", "name", "==", "'driving'", ":", "\n", "        ", "return", "Driving", "(", "cfgs", ")", "\n", "", "elif", "cfgs", ".", "name", "==", "'flyingthings3d'", ":", "\n", "        ", "return", "FlyingThings3D", "(", "cfgs", ")", "\n", "", "elif", "cfgs", ".", "name", "==", "'kitti'", ":", "\n", "        ", "return", "KITTI", "(", "cfgs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Unknown dataset: %s'", "%", "cfgs", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.factory.model_factory": [[20, 22], ["models.PWCFusionProSupervised"], "function", ["None"], ["", "", "def", "model_factory", "(", "cfgs", ":", "DictConfig", ")", ":", "\n", "    ", "return", "PWCFusionProSupervised", "(", "cfgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.factory.optimizer_factory": [[24, 65], ["isinstance", "range", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.SGD.step", "torch.optim.lr_scheduler.MultiStepLR.step", "torch.optim.SGD", "NotImplementedError"], "function", ["None"], ["", "def", "optimizer_factory", "(", "cfgs", ",", "named_params", ",", "last_epoch", ")", ":", "\n", "    ", "param_groups", "=", "[", "\n", "{", "'params'", ":", "[", "p", "for", "name", ",", "p", "in", "named_params", "if", "'weight'", "in", "name", "]", ",", "\n", "'weight_decay'", ":", "cfgs", ".", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "name", ",", "p", "in", "named_params", "if", "'bias'", "in", "name", "]", ",", "\n", "'weight_decay'", ":", "cfgs", ".", "bias_decay", "}", "\n", "]", "\n", "\n", "if", "cfgs", ".", "optimizer", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "params", "=", "param_groups", ",", "\n", "lr", "=", "cfgs", ".", "lr", ".", "init_value", ",", "\n", "eps", "=", "1e-7", "\n", ")", "\n", "", "elif", "cfgs", ".", "optimizer", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "params", "=", "param_groups", ",", "\n", "lr", "=", "cfgs", ".", "lr", ".", "init_value", ",", "\n", "momentum", "=", "cfgs", ".", "lr", ".", "momentum", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Unknown optimizer: %s'", "%", "cfgs", ".", "optimizer", ")", "\n", "\n", "", "if", "isinstance", "(", "cfgs", ".", "lr", ".", "decay_milestones", ",", "int", ")", ":", "\n", "        ", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "\n", "optimizer", "=", "optimizer", ",", "\n", "step_size", "=", "cfgs", ".", "lr", ".", "decay_milestones", ",", "\n", "gamma", "=", "cfgs", ".", "lr", ".", "decay_rate", "\n", ")", "\n", "", "else", ":", "\n", "        ", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", "=", "optimizer", ",", "\n", "milestones", "=", "cfgs", ".", "lr", ".", "decay_milestones", ",", "\n", "gamma", "=", "cfgs", ".", "lr", ".", "decay_rate", "\n", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "last_epoch", ")", ":", "\n", "        ", "optimizer", ".", "step", "(", ")", "\n", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "return", "optimizer", ",", "lr_scheduler", "\n", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.preprocess_driving.Preprocessor.__init__": [[45, 65], ["super().__init__", "range", "preprocess_driving.Preprocessor.samples.append"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dir", ",", "output_dir", ",", "n_points", ",", "max_depth", ")", ":", "\n", "        ", "super", "(", "Preprocessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_dir", "=", "input_dir", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "n_points", "=", "n_points", "\n", "self", ".", "max_depth", "=", "max_depth", "\n", "\n", "self", ".", "samples", "=", "[", "]", "\n", "for", "focal_type", "in", "[", "'15mm_focallength'", ",", "'35mm_focallength'", "]", ":", "\n", "            ", "for", "moving_dir", "in", "[", "'scene_forwards'", ",", "'scene_backwards'", "]", ":", "\n", "                ", "for", "speed", "in", "[", "'slow'", ",", "'fast'", "]", ":", "\n", "                    ", "for", "flow_dir", "in", "[", "'into_future'", ",", "'into_past'", "]", ":", "\n", "                        ", "for", "idx", "in", "range", "(", "1", ",", "300", ")", ":", "\n", "                            ", "self", ".", "samples", ".", "append", "(", "{", "\n", "'focal_type'", ":", "focal_type", ",", "\n", "'moving_dir'", ":", "moving_dir", ",", "\n", "'speed'", ":", "speed", ",", "\n", "'flow_dir'", ":", "flow_dir", ",", "\n", "'idx'", ":", "idx", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.preprocess_driving.Preprocessor.__len__": [[67, 69], ["len"], "methods", ["None"], ["", "", "", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.preprocess_driving.Preprocessor.__getitem__": [[70, 150], ["utils.load_fpm", "utils.load_fpm", "utils.load_fpm", "utils.disp2pc", "utils.disp2pc", "numpy.random.choice", "numpy.random.choice", "numpy.logical_not", "numpy.logical_not", "os.makedirs", "os.makedirs", "os.makedirs", "numpy.savez", "numpy.logical_and", "utils.save_flow_png", "numpy.save", "os.path.join", "os.path.join", "os.path.join", "utils.load_fpm", "utils.disp2pc", "numpy.isnan", "numpy.isnan", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "min", "min", "numpy.sum", "numpy.abs", "numpy.abs", "numpy.logical_not", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_fpm", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_fpm", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_fpm", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.disp2pc", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.disp2pc", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.save_flow_png", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_fpm", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.disp2pc"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "sample", "=", "self", ".", "samples", "[", "i", "]", "\n", "\n", "focal_type", "=", "sample", "[", "'focal_type'", "]", "\n", "moving_dir", "=", "sample", "[", "'moving_dir'", "]", "\n", "speed", "=", "sample", "[", "'speed'", "]", "\n", "flow_dir", "=", "sample", "[", "'flow_dir'", "]", "\n", "idx", "=", "sample", "[", "'idx'", "]", "\n", "\n", "if", "flow_dir", "==", "'into_future'", ":", "\n", "            ", "idx1", "=", "idx", "\n", "idx2", "=", "idx", "+", "1", "\n", "", "elif", "flow_dir", "==", "'into_past'", ":", "\n", "            ", "idx1", "=", "idx", "+", "1", "\n", "idx2", "=", "idx", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n", "# camera intrinsics", "\n", "", "baseline", ",", "cx", ",", "cy", "=", "1.0", ",", "479.5", ",", "269.5", "\n", "f", "=", "450.0", "if", "sample", "[", "'focal_type'", "]", "==", "'15mm_focallength'", "else", "1050.0", "\n", "\n", "disp1", "=", "load_fpm", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "input_dir", ",", "'disparity'", ",", "focal_type", ",", "moving_dir", ",", "speed", ",", "'left'", ",", "'%04d.pfm'", "%", "idx1", "\n", ")", ")", "\n", "disp2", "=", "load_fpm", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "input_dir", ",", "'disparity'", ",", "focal_type", ",", "moving_dir", ",", "speed", ",", "'left'", ",", "'%04d.pfm'", "%", "idx2", "\n", ")", ")", "\n", "disp1_c", "=", "load_fpm", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "input_dir", ",", "'disparity_change'", ",", "focal_type", ",", "moving_dir", ",", "speed", ",", "flow_dir", ",", "'left'", ",", "'%04d.pfm'", "%", "idx1", "\n", ")", ")", "\n", "flow_2d", "=", "load_fpm", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "input_dir", ",", "'optical_flow'", ",", "focal_type", ",", "moving_dir", ",", "speed", ",", "flow_dir", ",", "'left'", ",", "\n", "'OpticalFlowInto%s_%04d_L.pfm'", "%", "(", "'Future'", "if", "flow_dir", "==", "'into_future'", "else", "'Past'", ",", "idx1", ")", "\n", ")", ")", "[", "...", ",", ":", "2", "]", "\n", "\n", "pc1", "=", "disp2pc", "(", "disp1", ",", "baseline", ",", "f", ",", "cx", ",", "cy", ")", "\n", "pc2", "=", "disp2pc", "(", "disp2", ",", "baseline", ",", "f", ",", "cx", ",", "cy", ")", "\n", "flow_3d", "=", "disp2pc", "(", "disp1", "+", "disp1_c", ",", "baseline", ",", "f", ",", "cx", ",", "cy", ",", "flow_2d", ")", "-", "pc1", "\n", "\n", "# apply depth mask", "\n", "mask1", "=", "(", "pc1", "[", "...", ",", "-", "1", "]", "<", "self", ".", "max_depth", ")", "\n", "mask2", "=", "(", "pc2", "[", "...", ",", "-", "1", "]", "<", "self", ".", "max_depth", ")", "\n", "pc1", ",", "pc2", ",", "flow_3d", "=", "pc1", "[", "mask1", "]", ",", "pc2", "[", "mask2", "]", ",", "flow_3d", "[", "mask1", "]", "\n", "\n", "# random sampling", "\n", "indices1", "=", "np", ".", "random", ".", "choice", "(", "pc1", ".", "shape", "[", "0", "]", ",", "size", "=", "min", "(", "self", ".", "n_points", ",", "pc1", ".", "shape", "[", "0", "]", ")", ",", "replace", "=", "False", ")", "\n", "indices2", "=", "np", ".", "random", ".", "choice", "(", "pc2", ".", "shape", "[", "0", "]", ",", "size", "=", "min", "(", "self", ".", "n_points", ",", "pc2", ".", "shape", "[", "0", "]", ")", ",", "replace", "=", "False", ")", "\n", "pc1", ",", "pc2", ",", "flow_3d", "=", "pc1", "[", "indices1", "]", ",", "pc2", "[", "indices2", "]", ",", "flow_3d", "[", "indices1", "]", "\n", "\n", "# NaN check", "\n", "mask1", "=", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "np", ".", "sum", "(", "pc1", ",", "axis", "=", "-", "1", ")", "+", "np", ".", "sum", "(", "flow_3d", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "mask2", "=", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "np", ".", "sum", "(", "pc2", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "pc1", ",", "pc2", ",", "flow_3d", "=", "pc1", "[", "mask1", "]", ",", "pc2", "[", "mask2", "]", ",", "flow_3d", "[", "mask1", "]", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'pc'", ",", "focal_type", ",", "moving_dir", ",", "speed", ",", "flow_dir", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'flow_2d'", ",", "focal_type", ",", "moving_dir", ",", "speed", ",", "flow_dir", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'flow_3d'", ",", "focal_type", ",", "moving_dir", ",", "speed", ",", "flow_dir", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# save point clouds and occ mask", "\n", "np", ".", "savez", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'pc'", ",", "focal_type", ",", "moving_dir", ",", "speed", ",", "flow_dir", ",", "'%04d.npz'", "%", "idx1", ")", ",", "\n", "pc1", "=", "pc1", ",", "pc2", "=", "pc2", "\n", ")", "\n", "\n", "# mask regions moving extremely fast", "\n", "flow_mask", "=", "np", ".", "logical_and", "(", "np", ".", "abs", "(", "flow_2d", "[", "...", ",", "0", "]", ")", "<", "1000", ",", "np", ".", "abs", "(", "flow_2d", "[", "...", ",", "1", "]", ")", "<", "1000", ")", "\n", "flow_2d", "[", "np", ".", "logical_not", "(", "flow_mask", ")", "]", "=", "0.0", "\n", "\n", "# save ground-truth flow", "\n", "save_flow_png", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'flow_2d'", ",", "focal_type", ",", "moving_dir", ",", "speed", ",", "flow_dir", ",", "'%04d.png'", "%", "idx1", ")", ",", "\n", "flow_2d", ",", "flow_mask", ",", "scale", "=", "32.0", "\n", ")", "\n", "np", ".", "save", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'flow_3d'", ",", "focal_type", ",", "moving_dir", ",", "speed", ",", "flow_dir", ",", "'%04d.npy'", "%", "idx1", ")", ",", "\n", "flow_3d", "\n", ")", "\n", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.preprocess_driving.main": [[152, 175], ["os.makedirs", "os.makedirs", "os.makedirs", "logging.info", "logging.info", "preprocess_driving.Preprocessor", "torch.utils.data.DataLoader", "tqdm.tqdm", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "shutil.copytree", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'pc'", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'flow_2d'", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'flow_3d'", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "logging", ".", "info", "(", "'Copying images...'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'image'", ")", ")", ":", "\n", "        ", "shutil", ".", "copytree", "(", "\n", "src", "=", "os", ".", "path", ".", "join", "(", "args", ".", "input_dir", ",", "'frames_finalpass'", ")", ",", "\n", "dst", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'image'", ")", "\n", ")", "\n", "\n", "", "logging", ".", "info", "(", "'Generating point clouds...'", ")", "\n", "preprocessor", "=", "Preprocessor", "(", "\n", "args", ".", "input_dir", ",", "\n", "args", ".", "output_dir", ",", "\n", "args", ".", "n_points", ",", "\n", "args", ".", "max_depth", ",", "\n", ")", "\n", "preprocessor", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "preprocessor", ",", "num_workers", "=", "4", ")", "\n", "\n", "for", "_", "in", "tqdm", "(", "preprocessor", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.flyingthings3d.FlyingThings3D.__init__": [[10, 21], ["os.path.isdir", "str", "str", "os.path.join", "os.listdir", "os.path.join", "flyingthings3d.FlyingThings3D.indices.append", "int", "filename.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfgs", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isdir", "(", "cfgs", ".", "root_dir", ")", "\n", "\n", "self", ".", "root_dir", "=", "str", "(", "cfgs", ".", "root_dir", ")", "\n", "self", ".", "split", "=", "str", "(", "cfgs", ".", "split", ")", "\n", "self", ".", "split_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "split", ")", "\n", "self", ".", "cfgs", "=", "cfgs", "\n", "\n", "self", ".", "indices", "=", "[", "]", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "split", ",", "'flow_2d'", ")", ")", ":", "\n", "            ", "self", ".", "indices", ".", "append", "(", "int", "(", "filename", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.flyingthings3d.FlyingThings3D.__len__": [[22, 24], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.flyingthings3d.FlyingThings3D.__getitem__": [[25, 74], ["numpy.load", "utils.load_flow_png", "numpy.load", "numpy.load", "numpy.unpackbits", "numpy.logical_and", "numpy.concatenate", "augmentation.joint_augmentation", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate.transpose", "numpy.concatenate.transpose", "numpy.concatenate.transpose", "numpy.load.transpose", "numpy.float32", "numpy.random.seed", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "cv2.imread", "cv2.imread", "numpy.random.choice", "numpy.random.choice", "len", "os.path.join", "os.path.join", "numpy.linalg.norm", "flow_mask_2d[].astype"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_flow_png", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.joint_augmentation"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "if", "not", "self", ".", "cfgs", ".", "augmentation", ".", "enabled", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "", "idx1", "=", "self", ".", "indices", "[", "i", "]", "\n", "idx2", "=", "idx1", "+", "1", "\n", "data_dict", "=", "{", "'index'", ":", "idx1", "}", "\n", "\n", "# camera intrinsics", "\n", "f", ",", "cx", ",", "cy", "=", "1050", ",", "479.5", ",", "269.5", "\n", "\n", "# load data", "\n", "pcs", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'pc'", ",", "'%07d.npz'", "%", "idx1", ")", ")", "\n", "pc1", ",", "pc2", "=", "pcs", "[", "'pc1'", "]", ",", "pcs", "[", "'pc2'", "]", "\n", "\n", "flow_2d", ",", "flow_mask_2d", "=", "load_flow_png", "(", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'flow_2d'", ",", "'%07d.png'", "%", "idx1", ")", ")", "\n", "flow_3d", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'flow_3d'", ",", "'%07d.npy'", "%", "idx1", ")", ")", "\n", "\n", "occ_mask_3d", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'occ_mask_3d'", ",", "'%07d.npy'", "%", "idx1", ")", ")", "\n", "occ_mask_3d", "=", "np", ".", "unpackbits", "(", "occ_mask_3d", ",", "count", "=", "len", "(", "pc1", ")", ")", "\n", "\n", "image1", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'image'", ",", "'%07d.png'", "%", "idx1", ")", ")", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "image2", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'image'", ",", "'%07d.png'", "%", "idx2", ")", ")", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "\n", "# ignore fast moving objects", "\n", "flow_mask_2d", "=", "np", ".", "logical_and", "(", "flow_mask_2d", ",", "np", ".", "linalg", ".", "norm", "(", "flow_2d", ",", "axis", "=", "-", "1", ")", "<", "250.0", ")", "\n", "flow_2d", "=", "np", ".", "concatenate", "(", "[", "flow_2d", ",", "flow_mask_2d", "[", "...", ",", "None", "]", ".", "astype", "(", "np", ".", "float32", ")", "]", ",", "axis", "=", "2", ")", "\n", "\n", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", "=", "joint_augmentation", "(", "\n", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", ",", "self", ".", "cfgs", ".", "augmentation", "\n", ")", "\n", "\n", "# random sampling during training", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "indices1", "=", "np", ".", "random", ".", "choice", "(", "pc1", ".", "shape", "[", "0", "]", ",", "size", "=", "self", ".", "cfgs", ".", "n_points", ",", "replace", "=", "pc1", ".", "shape", "[", "0", "]", "<", "self", ".", "cfgs", ".", "n_points", ")", "\n", "indices2", "=", "np", ".", "random", ".", "choice", "(", "pc2", ".", "shape", "[", "0", "]", ",", "size", "=", "self", ".", "cfgs", ".", "n_points", ",", "replace", "=", "pc2", ".", "shape", "[", "0", "]", "<", "self", ".", "cfgs", ".", "n_points", ")", "\n", "pc1", ",", "pc2", ",", "flow_3d", ",", "occ_mask_3d", "=", "pc1", "[", "indices1", "]", ",", "pc2", "[", "indices2", "]", ",", "flow_3d", "[", "indices1", "]", ",", "occ_mask_3d", "[", "indices1", "]", "\n", "\n", "", "images", "=", "np", ".", "concatenate", "(", "[", "image1", ",", "image2", "]", ",", "axis", "=", "-", "1", ")", "\n", "pcs", "=", "np", ".", "concatenate", "(", "[", "pc1", ",", "pc2", "]", ",", "axis", "=", "1", ")", "\n", "\n", "data_dict", "[", "'images'", "]", "=", "images", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "data_dict", "[", "'flow_2d'", "]", "=", "flow_2d", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "data_dict", "[", "'pcs'", "]", "=", "pcs", ".", "transpose", "(", ")", "\n", "data_dict", "[", "'flow_3d'", "]", "=", "flow_3d", ".", "transpose", "(", ")", "\n", "data_dict", "[", "'occ_mask_3d'", "]", "=", "occ_mask_3d", "\n", "data_dict", "[", "'intrinsics'", "]", "=", "np", ".", "float32", "(", "[", "f", ",", "cx", ",", "cy", "]", ")", "\n", "\n", "return", "data_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.init_logging": [[11, 23], ["logging.RootLogger", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.root.addHandler", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.root.addHandler"], "function", ["None"], ["def", "init_logging", "(", "filename", "=", "None", ",", "debug", "=", "False", ")", ":", "\n", "    ", "logging", ".", "root", "=", "logging", ".", "RootLogger", "(", "'DEBUG'", "if", "debug", "else", "'INFO'", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'[%(asctime)s][%(levelname)s] - %(message)s'", ")", "\n", "\n", "stream_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "stream_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logging", ".", "root", ".", "addHandler", "(", "stream_handler", ")", "\n", "\n", "if", "filename", "is", "not", "None", ":", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "filename", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logging", ".", "root", ".", "addHandler", "(", "file_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.dist_reduce_sum": [[25, 31], ["torch.Tensor().cuda", "torch.Tensor().cuda", "torch.all_reduce", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "", "def", "dist_reduce_sum", "(", "value", ",", "n_gpus", ")", ":", "\n", "    ", "if", "n_gpus", "<=", "1", ":", "\n", "        ", "return", "value", "\n", "", "tensor", "=", "torch", ".", "Tensor", "(", "[", "value", "]", ")", ".", "cuda", "(", ")", "\n", "dist", ".", "all_reduce", "(", "tensor", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.copy_to_device": [[33, 43], ["isinstance", "isinstance", "utils.copy_to_device", "isinstance", "utils.copy_to_device", "inputs.to.to", "TypeError", "inputs.to.items", "str", "type"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.copy_to_device", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.copy_to_device"], ["", "def", "copy_to_device", "(", "inputs", ",", "device", ",", "non_blocking", "=", "True", ")", ":", "\n", "    ", "if", "isinstance", "(", "inputs", ",", "list", ")", ":", "\n", "        ", "inputs", "=", "[", "copy_to_device", "(", "item", ",", "device", ",", "non_blocking", ")", "for", "item", "in", "inputs", "]", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "        ", "inputs", "=", "{", "k", ":", "copy_to_device", "(", "v", ",", "device", ",", "non_blocking", ")", "for", "k", ",", "v", "in", "inputs", ".", "items", "(", ")", "}", "\n", "", "elif", "isinstance", "(", "inputs", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "inputs", "=", "inputs", ".", "to", "(", "device", "=", "device", ",", "non_blocking", "=", "non_blocking", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'Unknown type: %s'", "%", "str", "(", "type", "(", "inputs", ")", ")", ")", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.size_of_batch": [[45, 54], ["isinstance", "utils.size_of_batch", "isinstance", "utils.size_of_batch", "isinstance", "TypeError", "list", "inputs.values", "str", "type"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.size_of_batch", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.size_of_batch"], ["", "def", "size_of_batch", "(", "inputs", ")", ":", "\n", "    ", "if", "isinstance", "(", "inputs", ",", "list", ")", ":", "\n", "        ", "return", "size_of_batch", "(", "inputs", "[", "0", "]", ")", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "        ", "return", "size_of_batch", "(", "list", "(", "inputs", ".", "values", "(", ")", ")", "[", "0", "]", ")", "\n", "", "elif", "isinstance", "(", "inputs", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "inputs", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'Unknown type: %s'", "%", "str", "(", "type", "(", "inputs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_fpm": [[56, 84], ["open", "f.readline().rstrip", "re.match", "float", "numpy.fromfile", "numpy.reshape", "numpy.flipud", "f.readline().rstrip.decode", "f.readline().decode", "list", "Exception", "f.readline().decode().rstrip", "f.readline", "f.readline().rstrip.decode", "Exception", "map", "f.readline", "re.match.groups", "f.readline().decode", "f.readline"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.PWCFusionCore.decode", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.PWCFusionCore.decode", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.PWCFusionCore.decode", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.PWCFusionCore.decode"], ["", "", "def", "load_fpm", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "header", "=", "f", ".", "readline", "(", ")", ".", "rstrip", "(", ")", "\n", "if", "header", ".", "decode", "(", "\"ascii\"", ")", "==", "'PF'", ":", "\n", "            ", "color", "=", "True", "\n", "", "elif", "header", ".", "decode", "(", "\"ascii\"", ")", "==", "'Pf'", ":", "\n", "            ", "color", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Not a PFM file.'", ")", "\n", "\n", "", "dim_match", "=", "re", ".", "match", "(", "r'^(\\d+)\\s(\\d+)\\s$'", ",", "f", ".", "readline", "(", ")", ".", "decode", "(", "\"ascii\"", ")", ")", "\n", "if", "dim_match", ":", "\n", "            ", "width", ",", "height", "=", "list", "(", "map", "(", "int", ",", "dim_match", ".", "groups", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Malformed PFM header.'", ")", "\n", "\n", "", "scale", "=", "float", "(", "f", ".", "readline", "(", ")", ".", "decode", "(", "\"ascii\"", ")", ".", "rstrip", "(", ")", ")", "\n", "if", "scale", "<", "0", ":", "# little-endian", "\n", "            ", "endian", "=", "'<'", "\n", "", "else", ":", "\n", "            ", "endian", "=", "'>'", "# big-endian", "\n", "\n", "", "data", "=", "np", ".", "fromfile", "(", "f", ",", "endian", "+", "'f'", ")", "\n", "shape", "=", "(", "height", ",", "width", ",", "3", ")", "if", "color", "else", "(", "height", ",", "width", ")", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "shape", ")", "\n", "data", "=", "np", ".", "flipud", "(", "data", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_flow": [[86, 95], ["open", "numpy.fromfile", "numpy.fromfile().reshape", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile"], "function", ["None"], ["", "def", "load_flow", "(", "filepath", ")", ":", "\n", "    ", "with", "open", "(", "filepath", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "magic", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", "=", "1", ")", "\n", "assert", "(", "202021.25", "==", "magic", ")", ",", "'Invalid .flo file: incorrect magic number'", "\n", "w", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "h", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "flow", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", "=", "2", "*", "w", "*", "h", ")", ".", "reshape", "(", "[", "h", ",", "w", ",", "2", "]", ")", "\n", "\n", "", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_flow_png": [[97, 108], ["cv2.imread", "flow_img[].astype"], "function", ["None"], ["", "def", "load_flow_png", "(", "filepath", ",", "scale", "=", "64.0", ")", ":", "\n", "# for KITTI which uses 16bit PNG images", "\n", "# see 'https://github.com/ClementPinard/FlowNetPytorch/blob/master/datasets/KITTI.py'", "\n", "# The -1 is here to specify not to change the image depth (16bit), and is compatible", "\n", "# with both OpenCV2 and OpenCV3", "\n", "    ", "flow_img", "=", "cv2", ".", "imread", "(", "filepath", ",", "-", "1", ")", "\n", "flow", "=", "flow_img", "[", ":", ",", ":", ",", "2", ":", "0", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mask", "=", "flow_img", "[", ":", ",", ":", ",", "0", "]", ">", "0", "\n", "flow", "=", "flow", "-", "32768.0", "\n", "flow", "=", "flow", "/", "scale", "\n", "return", "flow", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.save_flow": [[110, 120], ["numpy.array", "numpy.array", "numpy.array", "open", "f.write", "f.write", "f.write", "f.write", "np.array.tobytes", "np.array.tobytes", "np.array.tobytes", "flow.tobytes"], "function", ["None"], ["", "def", "save_flow", "(", "filepath", ",", "flow", ")", ":", "\n", "    ", "assert", "flow", ".", "shape", "[", "2", "]", "==", "2", "\n", "magic", "=", "np", ".", "array", "(", "202021.25", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "h", "=", "np", ".", "array", "(", "flow", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "w", "=", "np", ".", "array", "(", "flow", ".", "shape", "[", "1", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "with", "open", "(", "filepath", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "magic", ".", "tobytes", "(", ")", ")", "\n", "f", ".", "write", "(", "w", ".", "tobytes", "(", ")", ")", "\n", "f", ".", "write", "(", "h", ".", "tobytes", "(", ")", ")", "\n", "f", ".", "write", "(", "flow", ".", "tobytes", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.save_flow_png": [[122, 140], ["numpy.concatenate().astype", "cv2.imwrite", "numpy.abs().max", "numpy.float32", "numpy.ones_like", "numpy.concatenate", "numpy.abs"], "function", ["None"], ["", "", "def", "save_flow_png", "(", "filepath", ",", "flow", ",", "mask", "=", "None", ",", "scale", "=", "64.0", ")", ":", "\n", "    ", "assert", "flow", ".", "shape", "[", "2", "]", "==", "2", "\n", "assert", "np", ".", "abs", "(", "flow", ")", ".", "max", "(", ")", "<", "32767.0", "/", "scale", "\n", "flow", "=", "flow", "*", "scale", "\n", "flow", "=", "flow", "+", "32768.0", "\n", "\n", "if", "mask", "is", "None", ":", "\n", "        ", "mask", "=", "np", ".", "ones_like", "(", "flow", ")", "[", "...", ",", "0", "]", "\n", "", "else", ":", "\n", "        ", "mask", "=", "np", ".", "float32", "(", "mask", ">", "0", ")", "\n", "\n", "", "flow_img", "=", "np", ".", "concatenate", "(", "[", "\n", "mask", "[", "...", ",", "None", "]", ",", "\n", "flow", "[", "...", ",", "1", ":", "2", "]", ",", "\n", "flow", "[", "...", ",", "0", ":", "1", "]", "\n", "]", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "filepath", ",", "flow_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_disp_png": [[142, 148], ["cv2.imread", "cv2.imread.astype", "numpy.logical_not"], "function", ["None"], ["", "def", "load_disp_png", "(", "filepath", ")", ":", "\n", "    ", "array", "=", "cv2", ".", "imread", "(", "filepath", ",", "-", "1", ")", "\n", "valid_mask", "=", "array", ">", "0", "\n", "disp", "=", "array", ".", "astype", "(", "np", ".", "float32", ")", "/", "256.0", "\n", "disp", "[", "np", ".", "logical_not", "(", "valid_mask", ")", "]", "=", "-", "1.0", "\n", "return", "disp", ",", "valid_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.save_disp_png": [[150, 156], ["numpy.uint16", "cv2.imwrite", "numpy.logical_not"], "function", ["None"], ["", "def", "save_disp_png", "(", "filepath", ",", "disp", ",", "mask", "=", "None", ")", ":", "\n", "    ", "if", "mask", "is", "None", ":", "\n", "        ", "mask", "=", "disp", ">", "0", "\n", "", "disp", "=", "np", ".", "uint16", "(", "disp", "*", "256.0", ")", "\n", "disp", "[", "np", ".", "logical_not", "(", "mask", ")", "]", "=", "0", "\n", "cv2", ".", "imwrite", "(", "filepath", ",", "disp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.load_calib": [[158, 172], ["open", "f.readlines", "line.startswith", "numpy.array().reshape", "line.split", "float", "numpy.array"], "function", ["None"], ["", "def", "load_calib", "(", "filepath", ")", ":", "\n", "    ", "with", "open", "(", "filepath", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "if", "line", ".", "startswith", "(", "'P_rect_02'", ")", ":", "\n", "                ", "proj_mat", "=", "line", ".", "split", "(", ")", "[", "1", ":", "]", "\n", "proj_mat", "=", "[", "float", "(", "param", ")", "for", "param", "in", "proj_mat", "]", "\n", "proj_mat", "=", "np", ".", "array", "(", "proj_mat", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "3", ",", "4", ")", "\n", "assert", "proj_mat", "[", "0", ",", "1", "]", "==", "proj_mat", "[", "1", ",", "0", "]", "==", "0", "\n", "assert", "proj_mat", "[", "2", ",", "0", "]", "==", "proj_mat", "[", "2", ",", "1", "]", "==", "0", "\n", "assert", "proj_mat", "[", "0", ",", "0", "]", "==", "proj_mat", "[", "1", ",", "1", "]", "\n", "assert", "proj_mat", "[", "2", ",", "2", "]", "==", "1", "\n", "\n", "", "", "", "return", "proj_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.zero_padding": [[174, 191], ["len", "numpy.zeros"], "function", ["None"], ["", "def", "zero_padding", "(", "inputs", ",", "pad_h", ",", "pad_w", ")", ":", "\n", "    ", "input_dim", "=", "len", "(", "inputs", ".", "shape", ")", "\n", "assert", "input_dim", "in", "[", "2", ",", "3", "]", "\n", "\n", "if", "input_dim", "==", "2", ":", "\n", "        ", "inputs", "=", "inputs", "[", "...", ",", "None", "]", "\n", "\n", "", "h", ",", "w", ",", "c", "=", "inputs", ".", "shape", "\n", "assert", "h", "<=", "pad_h", "and", "w", "<=", "pad_w", "\n", "\n", "result", "=", "np", ".", "zeros", "(", "[", "pad_h", ",", "pad_w", ",", "c", "]", ",", "dtype", "=", "inputs", ".", "dtype", ")", "\n", "result", "[", ":", "h", ",", ":", "w", "]", "=", "inputs", "\n", "\n", "if", "input_dim", "==", "2", ":", "\n", "        ", "result", "=", "result", "[", "...", ",", "0", "]", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.disp2pc": [[193, 214], ["numpy.tile", "numpy.tile", "numpy.concatenate", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "disp2pc", "(", "disp", ",", "baseline", ",", "f", ",", "cx", ",", "cy", ",", "flow", "=", "None", ")", ":", "\n", "    ", "h", ",", "w", "=", "disp", ".", "shape", "\n", "depth", "=", "baseline", "*", "f", "/", "(", "disp", "+", "1e-5", ")", "\n", "\n", "xx", "=", "np", ".", "tile", "(", "np", ".", "arange", "(", "w", ",", "dtype", "=", "np", ".", "float32", ")", "[", "None", ",", ":", "]", ",", "(", "h", ",", "1", ")", ")", "\n", "yy", "=", "np", ".", "tile", "(", "np", ".", "arange", "(", "h", ",", "dtype", "=", "np", ".", "float32", ")", "[", ":", ",", "None", "]", ",", "(", "1", ",", "w", ")", ")", "\n", "\n", "if", "flow", "is", "None", ":", "\n", "        ", "x", "=", "(", "xx", "-", "cx", ")", "*", "depth", "/", "f", "\n", "y", "=", "(", "yy", "-", "cy", ")", "*", "depth", "/", "f", "\n", "", "else", ":", "\n", "        ", "x", "=", "(", "xx", "-", "cx", "+", "flow", "[", "...", ",", "0", "]", ")", "*", "depth", "/", "f", "\n", "y", "=", "(", "yy", "-", "cy", "+", "flow", "[", "...", ",", "1", "]", ")", "*", "depth", "/", "f", "\n", "\n", "", "pc", "=", "np", ".", "concatenate", "(", "[", "\n", "x", "[", ":", ",", ":", ",", "None", "]", ",", "\n", "y", "[", ":", ",", ":", ",", "None", "]", ",", "\n", "depth", "[", ":", ",", ":", ",", "None", "]", ",", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.project_pc2image": [[216, 235], ["numpy.concatenate", "numpy.concatenate", "numpy.clip", "numpy.clip"], "function", ["None"], ["", "def", "project_pc2image", "(", "pc", ",", "image_h", ",", "image_w", ",", "f", ",", "cx", "=", "None", ",", "cy", "=", "None", ",", "clip", "=", "True", ")", ":", "\n", "    ", "pc_x", ",", "pc_y", ",", "depth", "=", "pc", "[", "...", ",", "0", "]", ",", "pc", "[", "...", ",", "1", "]", ",", "pc", "[", "...", ",", "2", "]", "\n", "\n", "cx", "=", "(", "image_w", "-", "1", ")", "/", "2", "if", "cx", "is", "None", "else", "cx", "\n", "cy", "=", "(", "image_h", "-", "1", ")", "/", "2", "if", "cy", "is", "None", "else", "cy", "\n", "\n", "image_x", "=", "cx", "+", "(", "f", "/", "depth", ")", "*", "pc_x", "\n", "image_y", "=", "cy", "+", "(", "f", "/", "depth", ")", "*", "pc_y", "\n", "\n", "if", "clip", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "np", ".", "clip", "(", "image_x", "[", ":", ",", "None", "]", ",", "a_min", "=", "0", ",", "a_max", "=", "image_w", "-", "1", ")", ",", "\n", "np", ".", "clip", "(", "image_y", "[", ":", ",", "None", "]", ",", "a_min", "=", "0", ",", "a_max", "=", "image_h", "-", "1", ")", ",", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "image_x", "[", ":", ",", "None", "]", ",", "\n", "image_y", "[", ":", ",", "None", "]", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.utils.viz_optical_flow": [[237, 252], ["numpy.sqrt", "numpy.arctan2", "numpy.mod", "numpy.clip", "numpy.ones_like", "numpy.stack", "matplotlib.colors.hsv_to_rgb", "numpy.uint8", "numpy.square", "numpy.square"], "function", ["None"], ["", "", "def", "viz_optical_flow", "(", "flow", ",", "max_flow", "=", "512", ")", ":", "\n", "    ", "n", "=", "8", "\n", "u", ",", "v", "=", "flow", "[", ":", ",", ":", ",", "0", "]", ",", "flow", "[", ":", ",", ":", ",", "1", "]", "\n", "mag", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "u", ")", "+", "np", ".", "square", "(", "v", ")", ")", "\n", "angle", "=", "np", ".", "arctan2", "(", "v", ",", "u", ")", "\n", "\n", "image_h", "=", "np", ".", "mod", "(", "angle", "/", "(", "2", "*", "np", ".", "pi", ")", "+", "1", ",", "1", ")", "\n", "image_s", "=", "np", ".", "clip", "(", "mag", "*", "n", "/", "max_flow", ",", "a_min", "=", "0", ",", "a_max", "=", "1", ")", "\n", "image_v", "=", "np", ".", "ones_like", "(", "image_s", ")", "\n", "\n", "image_hsv", "=", "np", ".", "stack", "(", "[", "image_h", ",", "image_s", ",", "image_v", "]", ",", "axis", "=", "2", ")", "\n", "image_rgb", "=", "hsv_to_rgb", "(", "image_hsv", ")", "\n", "image_rgb", "=", "np", ".", "uint8", "(", "image_rgb", "*", "255", ")", "\n", "\n", "return", "image_rgb", "\n", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.color_jitter": [[7, 18], ["torchvision.transforms.ColorJitter", "numpy.concatenate", "torch.from_numpy", "torch.from_numpy.numpy().astype().transpose", "images_t.numpy().astype().transpose.transpose().copy", "torchvision.transforms.ColorJitter.forward", "torch.from_numpy.numpy().astype", "images_t.numpy().astype().transpose.transpose", "torch.from_numpy.numpy"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.CorrelationFunction.forward"], ["def", "color_jitter", "(", "image1", ",", "image2", ",", "brightness", ",", "contrast", ",", "saturation", ",", "hue", ")", ":", "\n", "    ", "assert", "image1", ".", "shape", "==", "image2", ".", "shape", "\n", "cj_module", "=", "torchvision", ".", "transforms", ".", "ColorJitter", "(", "brightness", ",", "contrast", ",", "saturation", ",", "hue", ")", "\n", "\n", "images", "=", "np", ".", "concatenate", "(", "[", "image1", ",", "image2", "]", ",", "axis", "=", "0", ")", "\n", "images_t", "=", "torch", ".", "from_numpy", "(", "images", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ".", "copy", "(", ")", ")", "\n", "images_t", "=", "cj_module", ".", "forward", "(", "images_t", "/", "255.0", ")", "*", "255.0", "\n", "images", "=", "images_t", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "image1", ",", "image2", "=", "images", "[", ":", "image1", ".", "shape", "[", "0", "]", "]", ",", "images", "[", "image1", ".", "shape", "[", "0", "]", ":", "]", "\n", "\n", "return", "image1", ",", "image2", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.flip_point_cloud": [[20, 37], ["numpy.concatenate"], "function", ["None"], ["", "def", "flip_point_cloud", "(", "pc", ",", "image_h", ",", "image_w", ",", "f", ",", "cx", ",", "cy", ",", "flip_mode", ")", ":", "\n", "    ", "assert", "flip_mode", "in", "[", "'lr'", ",", "'ud'", "]", "\n", "pc_x", ",", "pc_y", ",", "depth", "=", "pc", "[", "...", ",", "0", "]", ",", "pc", "[", "...", ",", "1", "]", ",", "pc", "[", "...", ",", "2", "]", "\n", "\n", "image_x", "=", "cx", "+", "(", "f", "/", "depth", ")", "*", "pc_x", "\n", "image_y", "=", "cy", "+", "(", "f", "/", "depth", ")", "*", "pc_y", "\n", "\n", "if", "flip_mode", "==", "'lr'", ":", "\n", "        ", "image_x", "=", "image_w", "-", "1", "-", "image_x", "\n", "", "else", ":", "\n", "        ", "image_y", "=", "image_h", "-", "1", "-", "image_y", "\n", "\n", "", "pc_x", "=", "(", "image_x", "-", "cx", ")", "*", "depth", "/", "f", "\n", "pc_y", "=", "(", "image_y", "-", "cy", ")", "*", "depth", "/", "f", "\n", "pc", "=", "np", ".", "concatenate", "(", "[", "pc_x", "[", ":", ",", "None", "]", ",", "pc_y", "[", ":", ",", "None", "]", ",", "depth", "[", ":", ",", "None", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.flip_scene_flow": [[39, 43], ["augmentation.flip_point_cloud", "augmentation.flip_point_cloud", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.flip_point_cloud", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.flip_point_cloud"], ["", "def", "flip_scene_flow", "(", "pc1", ",", "flow_3d", ",", "image_h", ",", "image_w", ",", "f", ",", "cx", ",", "cy", ",", "flip_mode", ")", ":", "\n", "    ", "new_pc1", "=", "flip_point_cloud", "(", "pc1", ",", "image_h", ",", "image_w", ",", "f", ",", "cx", ",", "cy", ",", "flip_mode", ")", "\n", "new_pc1_warp", "=", "flip_point_cloud", "(", "pc1", "+", "flow_3d", "[", ":", ",", ":", "3", "]", ",", "image_h", ",", "image_w", ",", "f", ",", "cx", ",", "cy", ",", "flip_mode", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "new_pc1_warp", "-", "new_pc1", ",", "flow_3d", "[", ":", ",", "3", ":", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.flip_image": [[45, 50], ["numpy.fliplr().copy", "numpy.flipud().copy", "numpy.fliplr", "numpy.flipud"], "function", ["None"], ["", "def", "flip_image", "(", "image", ",", "flip_mode", ")", ":", "\n", "    ", "if", "flip_mode", "==", "'lr'", ":", "\n", "        ", "return", "np", ".", "fliplr", "(", "image", ")", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "image", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.flip_optical_flow": [[52, 61], ["numpy.fliplr().copy", "numpy.flipud().copy", "numpy.fliplr", "numpy.flipud"], "function", ["None"], ["", "", "def", "flip_optical_flow", "(", "flow", ",", "flip_mode", ")", ":", "\n", "    ", "assert", "flip_mode", "in", "[", "'lr'", ",", "'ud'", "]", "\n", "if", "flip_mode", "==", "'lr'", ":", "\n", "        ", "flow", "=", "np", ".", "fliplr", "(", "flow", ")", ".", "copy", "(", ")", "\n", "flow", "[", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "", "else", ":", "\n", "        ", "flow", "=", "np", ".", "flipud", "(", "flow", ")", ".", "copy", "(", ")", "\n", "flow", "[", ":", ",", ":", ",", "1", "]", "*=", "-", "1", "\n", "", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.random_flip": [[63, 84], ["augmentation.flip_image", "augmentation.flip_image", "augmentation.flip_point_cloud", "augmentation.flip_point_cloud", "augmentation.flip_optical_flow", "augmentation.flip_scene_flow", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.flip_image", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.flip_image", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.flip_point_cloud", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.flip_point_cloud", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.flip_optical_flow", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.flip_scene_flow"], ["", "def", "random_flip", "(", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", ",", "flip_mode", ")", ":", "\n", "    ", "assert", "flow_3d", ".", "shape", "[", "1", "]", "<=", "4", "\n", "assert", "flip_mode", "in", "[", "'lr'", ",", "'ud'", "]", "\n", "image_h", ",", "image_w", "=", "image1", ".", "shape", "[", ":", "2", "]", "\n", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "# do nothing", "\n", "        ", "return", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", "\n", "\n", "# flip images", "\n", "", "new_image1", "=", "flip_image", "(", "image1", ",", "flip_mode", ")", "\n", "new_image2", "=", "flip_image", "(", "image2", ",", "flip_mode", ")", "\n", "\n", "# flip point clouds", "\n", "new_pc1", "=", "flip_point_cloud", "(", "pc1", ",", "image_h", ",", "image_w", ",", "f", ",", "cx", ",", "cy", ",", "flip_mode", ")", "\n", "new_pc2", "=", "flip_point_cloud", "(", "pc2", ",", "image_h", ",", "image_w", ",", "f", ",", "cx", ",", "cy", ",", "flip_mode", ")", "\n", "\n", "# flip optical flow and scene flow", "\n", "new_flow_2d", "=", "flip_optical_flow", "(", "flow_2d", ",", "flip_mode", ")", "\n", "new_flow_3d", "=", "flip_scene_flow", "(", "pc1", ",", "flow_3d", ",", "image_h", ",", "image_w", ",", "f", ",", "cx", ",", "cy", ",", "flip_mode", ")", "\n", "\n", "return", "new_image1", ",", "new_image2", ",", "new_pc1", ",", "new_pc2", ",", "new_flow_2d", ",", "new_flow_3d", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.crop_image_with_pc": [[86, 125], ["image1[].copy", "image2[].copy", "flow_2d[].copy", "len", "numpy.where", "numpy.where", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and"], "function", ["None"], ["", "def", "crop_image_with_pc", "(", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", ",", "crop_window", ")", ":", "\n", "    ", "assert", "len", "(", "crop_window", ")", "==", "4", "# [x1, y1, x2, y2]", "\n", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "crop_window", "\n", "image_h", ",", "image_w", "=", "image1", ".", "shape", "[", ":", "2", "]", "\n", "\n", "# project points to image plane", "\n", "cx", "=", "(", "image_w", "-", "1", ")", "/", "2", "if", "cx", "is", "None", "else", "cx", "\n", "cy", "=", "(", "image_h", "-", "1", ")", "/", "2", "if", "cy", "is", "None", "else", "cy", "\n", "\n", "xyz1_x", ",", "xyz1_y", ",", "xyz1_z", "=", "pc1", "[", "...", ",", "0", "]", ",", "pc1", "[", "...", ",", "1", "]", ",", "pc1", "[", "...", ",", "2", "]", "\n", "xyz2_x", ",", "xyz2_y", ",", "xyz2_z", "=", "pc2", "[", "...", ",", "0", "]", ",", "pc2", "[", "...", ",", "1", "]", ",", "pc2", "[", "...", ",", "2", "]", "\n", "\n", "xy1_x", "=", "cx", "+", "(", "f", "/", "xyz1_z", ")", "*", "xyz1_x", "\n", "xy1_y", "=", "cy", "+", "(", "f", "/", "xyz1_z", ")", "*", "xyz1_y", "\n", "xy2_x", "=", "cx", "+", "(", "f", "/", "xyz2_z", ")", "*", "xyz2_x", "\n", "xy2_y", "=", "cy", "+", "(", "f", "/", "xyz2_z", ")", "*", "xyz2_y", "\n", "\n", "# crop images", "\n", "image1", "=", "image1", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", ".", "copy", "(", ")", "\n", "image2", "=", "image2", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", ".", "copy", "(", ")", "\n", "flow_2d", "=", "flow_2d", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", ".", "copy", "(", ")", "\n", "\n", "# crop points", "\n", "crop_mask1", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "\n", "np", ".", "logical_and", "(", "xy1_x", ">", "x1", ",", "xy1_x", "<", "x2", ")", ",", "\n", "np", ".", "logical_and", "(", "xy1_y", ">", "y1", ",", "xy1_y", "<", "y2", ")", "\n", ")", ")", "[", "0", "]", "\n", "crop_mask2", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "\n", "np", ".", "logical_and", "(", "xy2_x", ">", "x1", ",", "xy2_x", "<", "x2", ")", ",", "\n", "np", ".", "logical_and", "(", "xy2_y", ">", "y1", ",", "xy2_y", "<", "y2", ")", "\n", ")", ")", "[", "0", "]", "\n", "pc1", ",", "pc2", ",", "flow_3d", "=", "pc1", "[", "crop_mask1", "]", ",", "pc2", "[", "crop_mask2", "]", ",", "flow_3d", "[", "crop_mask1", "]", "\n", "\n", "# adjust camera params", "\n", "cx", "=", "cx", "-", "x1", "\n", "cy", "=", "cy", "-", "y1", "\n", "\n", "return", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.random_crop": [[127, 141], ["numpy.random.randint", "numpy.random.randint", "augmentation.crop_image_with_pc", "len"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.crop_image_with_pc"], ["", "def", "random_crop", "(", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", ",", "crop_size", ")", ":", "\n", "    ", "assert", "flow_3d", ".", "shape", "[", "1", "]", "<=", "4", "\n", "assert", "len", "(", "crop_size", ")", "==", "2", "\n", "crop_w", ",", "crop_h", "=", "crop_size", "\n", "\n", "image_h", ",", "image_w", "=", "image1", ".", "shape", "[", ":", "2", "]", "\n", "assert", "crop_w", "<=", "image_w", "and", "crop_h", "<=", "image_h", "\n", "\n", "# top left of the cropping window", "\n", "x1", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "image_w", "-", "crop_w", "+", "1", ")", "\n", "y1", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "image_h", "-", "crop_h", "+", "1", ")", "\n", "crop_window", "=", "[", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", "]", "\n", "\n", "return", "crop_image_with_pc", "(", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", ",", "crop_window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.resize_sparse_flow_map": [[143, 168], ["numpy.meshgrid", "numpy.stack().astype", "numpy.round().astype", "numpy.round().astype", "numpy.zeros", "numpy.arange", "numpy.arange", "numpy.stack", "numpy.round", "numpy.round"], "function", ["None"], ["", "def", "resize_sparse_flow_map", "(", "flow", ",", "target_w", ",", "target_h", ")", ":", "\n", "    ", "curr_h", ",", "curr_w", "=", "flow", ".", "shape", "[", ":", "2", "]", "\n", "\n", "coords", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "curr_w", ")", ",", "np", ".", "arange", "(", "curr_h", ")", ")", "\n", "coords", "=", "np", ".", "stack", "(", "coords", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "mask", "=", "flow", "[", "...", ",", "-", "1", "]", ">", "0", "\n", "coords0", ",", "flow0", "=", "coords", "[", "mask", "]", ",", "flow", "[", "mask", "]", "[", ":", ",", ":", "2", "]", "\n", "\n", "scale_ratio_w", "=", "(", "target_w", "-", "1", ")", "/", "(", "curr_w", "-", "1", ")", "\n", "scale_ratio_h", "=", "(", "target_h", "-", "1", ")", "/", "(", "curr_h", "-", "1", ")", "\n", "\n", "coords1", "=", "coords0", "*", "[", "scale_ratio_w", ",", "scale_ratio_h", "]", "\n", "flow1", "=", "flow0", "*", "[", "scale_ratio_w", ",", "scale_ratio_h", "]", "\n", "\n", "xx", "=", "np", ".", "round", "(", "coords1", "[", ":", ",", "0", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "yy", "=", "np", ".", "round", "(", "coords1", "[", ":", ",", "1", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "valid", "=", "(", "xx", ">=", "0", ")", "&", "(", "xx", "<", "target_w", ")", "&", "(", "yy", ">=", "0", ")", "&", "(", "yy", "<", "target_h", ")", "\n", "xx", ",", "yy", ",", "flow1", "=", "xx", "[", "valid", "]", ",", "yy", "[", "valid", "]", ",", "flow1", "[", "valid", "]", "\n", "\n", "flow_resized", "=", "np", ".", "zeros", "(", "[", "target_h", ",", "target_w", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "flow_resized", "[", "yy", ",", "xx", ",", ":", "2", "]", "=", "flow1", "\n", "flow_resized", "[", "yy", ",", "xx", ",", "2", ":", "]", "=", "1.0", "\n", "\n", "return", "flow_resized", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.random_scale": [[170, 210], ["numpy.random.uniform", "numpy.random.randint", "numpy.random.randint", "augmentation.crop_image_with_pc", "cv2.resize", "cv2.resize", "augmentation.resize_sparse_flow_map", "len", "numpy.random.rand", "int", "int"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.crop_image_with_pc", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.resize_sparse_flow_map"], ["", "def", "random_scale", "(", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", ",", "scale_range", ")", ":", "\n", "    ", "assert", "len", "(", "scale_range", ")", "==", "2", "\n", "assert", "1", "<=", "scale_range", "[", "0", "]", "<", "scale_range", "[", "1", "]", "\n", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "        ", "return", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", "\n", "\n", "", "scale_ratio", "=", "np", ".", "random", ".", "uniform", "(", "scale_range", "[", "0", "]", ",", "scale_range", "[", "1", "]", ")", "\n", "image_h", ",", "image_w", "=", "image1", ".", "shape", "[", ":", "2", "]", "\n", "crop_h", ",", "crop_w", "=", "int", "(", "image_h", "/", "scale_ratio", ")", ",", "int", "(", "image_w", "/", "scale_ratio", ")", "\n", "\n", "# top left of the cropping window", "\n", "x1", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "image_w", "-", "crop_w", "+", "1", ")", "\n", "y1", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "image_h", "-", "crop_h", "+", "1", ")", "\n", "crop_window", "=", "[", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", "]", "\n", "\n", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", "=", "crop_image_with_pc", "(", "\n", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", ",", "crop_window", "\n", ")", "\n", "\n", "# resize images and optical flow", "\n", "image1", "=", "cv2", ".", "resize", "(", "image1", ",", "(", "image_w", ",", "image_h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "image2", "=", "cv2", ".", "resize", "(", "image2", ",", "(", "image_w", ",", "image_h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "flow_2d", "=", "resize_sparse_flow_map", "(", "flow_2d", ",", "image_w", ",", "image_h", ")", "\n", "\n", "# resize points and scene flow", "\n", "scale_ratio_w", "=", "(", "image_w", "-", "1", ")", "/", "(", "crop_w", "-", "1", ")", "\n", "scale_ratio_h", "=", "(", "image_h", "-", "1", ")", "/", "(", "crop_h", "-", "1", ")", "\n", "pc1", "[", ":", ",", "0", "]", "*=", "scale_ratio_w", "\n", "pc1", "[", ":", ",", "1", "]", "*=", "scale_ratio_h", "\n", "pc2", "[", ":", ",", "0", "]", "*=", "scale_ratio_w", "\n", "pc2", "[", ":", ",", "1", "]", "*=", "scale_ratio_h", "\n", "flow_3d", "[", ":", ",", "0", "]", "*=", "scale_ratio_w", "\n", "flow_3d", "[", ":", ",", "1", "]", "*=", "scale_ratio_h", "\n", "\n", "# adjust camera params", "\n", "cx", "*=", "scale_ratio_w", "\n", "cy", "*=", "scale_ratio_h", "\n", "\n", "return", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.joint_augmentation": [[212, 248], ["augmentation.color_jitter", "augmentation.random_flip", "augmentation.random_flip", "augmentation.random_crop", "augmentation.random_scale"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.color_jitter", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.random_flip", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.random_flip", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.random_crop", "home.repos.pwc.inspect_result.mcg-nju_camliflow.None.augmentation.random_scale"], ["", "def", "joint_augmentation", "(", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", ",", "cfgs", ")", ":", "\n", "    ", "if", "not", "cfgs", ".", "enabled", ":", "\n", "        ", "return", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", "\n", "\n", "", "if", "cfgs", ".", "color_jitter", ".", "enabled", ":", "\n", "        ", "image1", ",", "image2", "=", "color_jitter", "(", "\n", "image1", ",", "image2", ",", "\n", "brightness", "=", "cfgs", ".", "color_jitter", ".", "brightness", ",", "\n", "contrast", "=", "cfgs", ".", "color_jitter", ".", "contrast", ",", "\n", "saturation", "=", "cfgs", ".", "color_jitter", ".", "saturation", ",", "\n", "hue", "=", "cfgs", ".", "color_jitter", ".", "hue", ",", "\n", ")", "\n", "\n", "", "if", "cfgs", ".", "random_horizontal_flip", ".", "enabled", ":", "\n", "        ", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", "=", "random_flip", "(", "\n", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", ",", "flip_mode", "=", "'lr'", "\n", ")", "\n", "\n", "", "if", "cfgs", ".", "random_vertical_flip", ".", "enabled", ":", "\n", "        ", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", "=", "random_flip", "(", "\n", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", ",", "flip_mode", "=", "'ud'", "\n", ")", "\n", "\n", "", "if", "cfgs", ".", "random_crop", ".", "enabled", ":", "\n", "        ", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", "=", "random_crop", "(", "\n", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", ",", "\n", "crop_size", "=", "cfgs", ".", "random_crop", ".", "crop_size", "\n", ")", "\n", "\n", "", "if", "cfgs", ".", "random_scale", ".", "enabled", ":", "\n", "        ", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", "=", "random_scale", "(", "\n", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", ",", "\n", "scale_range", "=", "cfgs", ".", "random_scale", ".", "scale_range", "\n", ")", "\n", "\n", "", "return", "image1", ",", "image2", ",", "pc1", ",", "pc2", ",", "flow_2d", ",", "flow_3d", ",", "f", ",", "cx", ",", "cy", "\n", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses3d.calc_supervised_loss_3d": [[6, 31], ["enumerate", "len", "len", "zip", "utils.batch_indexing_channel_first", "[].mean", "[].mean", "torch.pow().mean", "torch.linalg.norm().mean", "torch.pow", "torch.linalg.norm", "torch.pow", "torch.linalg.norm", "diff.abs().sum", "diff.abs().sum", "diff.abs", "diff.abs"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.batch_indexing_channel_first"], ["def", "calc_supervised_loss_3d", "(", "flows", ",", "target", ",", "cfgs", ",", "indices", ")", ":", "\n", "    ", "assert", "len", "(", "flows", ")", "<=", "len", "(", "cfgs", ".", "level_weights", ")", "\n", "\n", "total_loss", "=", "0", "\n", "for", "idx", ",", "(", "flow", ",", "level_weight", ")", "in", "enumerate", "(", "zip", "(", "flows", ",", "cfgs", ".", "level_weights", ")", ")", ":", "\n", "        ", "level_target", "=", "batch_indexing_channel_first", "(", "target", ",", "indices", "[", "idx", "]", ")", "\n", "\n", "if", "level_target", ".", "shape", "[", "1", "]", "==", "4", ":", "\n", "            ", "flow_mask", "=", "level_target", "[", ":", ",", "3", ",", ":", "]", ">", "0", "\n", "diff", "=", "flow", "-", "level_target", "[", ":", ",", ":", "3", ",", ":", "]", "\n", "epe_l1", "=", "torch", ".", "pow", "(", "diff", ".", "abs", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", "+", "0.01", ",", "0.4", ")", "[", "flow_mask", "]", ".", "mean", "(", ")", "\n", "epe_l2", "=", "torch", ".", "linalg", ".", "norm", "(", "diff", ",", "dim", "=", "1", ")", "[", "flow_mask", "]", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "diff", "=", "flow", "-", "level_target", "\n", "epe_l1", "=", "torch", ".", "pow", "(", "diff", ".", "abs", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", "+", "0.01", ",", "0.4", ")", ".", "mean", "(", ")", "\n", "epe_l2", "=", "torch", ".", "linalg", ".", "norm", "(", "diff", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "", "if", "cfgs", ".", "order", "==", "'l1'", ":", "\n", "            ", "total_loss", "+=", "level_weight", "*", "epe_l1", "\n", "", "elif", "cfgs", ".", "order", "==", "'l2'", ":", "\n", "            ", "total_loss", "+=", "level_weight", "*", "epe_l2", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses3d.calc_chamfer_loss_3d": [[33, 53], ["zip", "chamfer_distance", "torch.zeros", "torch.zeros", "pc1.transpose", "pc2.transpose", "len", "len", "losses3d.calc_chamfer_loss_3d._calc_chamfer_loss_single_level"], "function", ["None"], ["", "def", "calc_chamfer_loss_3d", "(", "xyzs1", ",", "xyzs2", ",", "flows", ",", "level_weights", ",", "occ_masks1", "=", "None", ",", "occ_masks2", "=", "None", ")", ":", "\n", "    ", "def", "_calc_chamfer_loss_single_level", "(", "pc1", ",", "pc2", ",", "occ_mask1", "=", "None", ",", "occ_mask2", "=", "None", ")", ":", "\n", "        ", "batch_size", ",", "n_points_1", ",", "n_points_2", "=", "pc1", ".", "shape", "[", "0", "]", ",", "pc1", ".", "shape", "[", "2", "]", ",", "pc2", ".", "shape", "[", "2", "]", "\n", "\n", "occ_mask1", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "n_points_1", "]", ",", "device", "=", "pc1", ".", "device", ")", "if", "occ_mask1", "is", "None", "else", "occ_mask1", "\n", "occ_mask2", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "n_points_2", "]", ",", "device", "=", "pc2", ".", "device", ")", "if", "occ_mask2", "is", "None", "else", "occ_mask2", "\n", "noc_mask1", ",", "noc_mask2", "=", "1", "-", "occ_mask1", ",", "1", "-", "occ_mask2", "\n", "\n", "dists1", ",", "dists2", "=", "chamfer_distance", "(", "pc1", ".", "transpose", "(", "1", ",", "2", ")", ",", "pc2", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "loss1", "=", "(", "dists1", "*", "noc_mask1", ")", ".", "mean", "(", ")", "/", "(", "noc_mask1", ".", "mean", "(", ")", "+", "1e-7", ")", "\n", "loss2", "=", "(", "dists2", "*", "noc_mask2", ")", ".", "mean", "(", ")", "/", "(", "noc_mask2", ".", "mean", "(", ")", "+", "1e-7", ")", "\n", "return", "loss1", "+", "loss2", "\n", "\n", "", "occ_masks1", "=", "[", "None", "]", "*", "len", "(", "xyzs1", ")", "if", "occ_masks1", "is", "None", "else", "occ_masks1", "\n", "occ_masks2", "=", "[", "None", "]", "*", "len", "(", "xyzs2", ")", "if", "occ_masks2", "is", "None", "else", "occ_masks2", "\n", "\n", "chamfer_loss", "=", "0", "\n", "for", "xyz1", ",", "xyz2", ",", "flow", ",", "level_weight", ",", "occ_mask1", ",", "occ_mask2", "in", "zip", "(", "xyzs1", ",", "xyzs2", ",", "flows", ",", "level_weights", ",", "occ_masks1", ",", "occ_masks2", ")", ":", "\n", "        ", "chamfer_loss", "+=", "level_weight", "*", "_calc_chamfer_loss_single_level", "(", "xyz1", "+", "flow", ",", "xyz2", ",", "occ_mask1", ",", "occ_mask2", ")", "\n", "", "return", "chamfer_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses3d.calc_smooth_loss_3d": [[55, 82], ["zip", "utils.batch_indexing_channel_first", "diff.mean", "csrc.k_nearest_neighbor", "torch.norm().sum", "losses3d.calc_smooth_loss_3d._calc_smooth_loss_single_level"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.batch_indexing_channel_first", "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.k_nearest_neighbor"], ["", "def", "calc_smooth_loss_3d", "(", "xyzs1", ",", "flows", ",", "knns1", ",", "level_weights", ")", ":", "\n", "    ", "def", "_calc_smooth_loss_single_level", "(", "pc", ",", "flow", ",", "k", "=", "9", ",", "knn_indices", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param pc: [batch_size, 3, n_points]\n        :param flow: [batch_size, 3, n_points]\n        :param k: k-nearest-neighbor, int\n        :param knn_indices: [batch_size, n_points]\n        \"\"\"", "\n", "batch_size", ",", "n_points", "=", "pc", ".", "shape", "[", "0", "]", ",", "pc", ".", "shape", "[", "2", "]", "\n", "\n", "# Calculate k nearest neighbors", "\n", "if", "knn_indices", "is", "not", "None", ":", "# knn indices are pre-computed", "\n", "            ", "assert", "knn_indices", ".", "shape", "[", ":", "2", "]", "==", "torch", ".", "Size", "(", "[", "batch_size", ",", "n_points", "]", ")", "\n", "assert", "knn_indices", ".", "shape", "[", "2", "]", ">=", "k", "\n", "knn_indices", "=", "knn_indices", "[", ":", ",", ":", ",", ":", "k", "]", "\n", "", "else", ":", "\n", "            ", "knn_indices", "=", "k_nearest_neighbor", "(", "pc", ",", "pc", ",", "k", ")", "# [bs, n_points, k]", "\n", "\n", "", "knn_flow", "=", "batch_indexing_channel_first", "(", "flow", ",", "knn_indices", ")", "# [bs, 3, n_points, k]", "\n", "diff", "=", "torch", ".", "norm", "(", "knn_flow", "-", "flow", ".", "unsqueeze", "(", "3", ")", ",", "dim", "=", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "/", "(", "k", "-", "1", ")", "# [bs, n_points]", "\n", "loss", "=", "diff", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n", "", "smooth_loss", "=", "0", "\n", "for", "xyz1", ",", "flow", ",", "knn1", ",", "level_weight", "in", "zip", "(", "xyzs1", ",", "flows", ",", "knns1", ",", "level_weights", ")", ":", "\n", "        ", "smooth_loss", "+=", "level_weight", "*", "_calc_smooth_loss_single_level", "(", "xyz1", ",", "flow", ",", "knn_indices", "=", "knn1", ")", "\n", "", "return", "smooth_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses3d.calc_unsupervised_loss_3d_bidirection": [[84, 96], ["losses3d.calc_chamfer_loss_3d", "losses3d.calc_chamfer_loss_3d", "losses3d.calc_smooth_loss_3d", "losses3d.calc_smooth_loss_3d", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses3d.calc_chamfer_loss_3d", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses3d.calc_chamfer_loss_3d", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses3d.calc_smooth_loss_3d", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses3d.calc_smooth_loss_3d"], ["", "def", "calc_unsupervised_loss_3d_bidirection", "(", "xyzs1", ",", "xyzs2", ",", "flows12_3d", ",", "flows21_3d", ",", "knns_1", ",", "knns_2", ",", "cfgs", ",", "occ_masks1", "=", "None", ",", "occ_masks2", "=", "None", ")", ":", "\n", "    ", "assert", "len", "(", "xyzs1", ")", "==", "len", "(", "xyzs2", ")", "==", "len", "(", "flows12_3d", ")", "==", "len", "(", "flows21_3d", ")", "==", "len", "(", "cfgs", ".", "level_weights", ")", "\n", "\n", "chamfer_loss1", "=", "calc_chamfer_loss_3d", "(", "xyzs1", ",", "xyzs2", ",", "flows12_3d", ",", "cfgs", ".", "level_weights", ",", "occ_masks1", ",", "occ_masks2", ")", "\n", "chamfer_loss2", "=", "calc_chamfer_loss_3d", "(", "xyzs2", ",", "xyzs1", ",", "flows21_3d", ",", "cfgs", ".", "level_weights", ",", "occ_masks2", ",", "occ_masks1", ")", "\n", "chamfer_loss", "=", "(", "chamfer_loss1", "+", "chamfer_loss2", ")", "/", "2.0", "\n", "\n", "smooth_loss1", "=", "calc_smooth_loss_3d", "(", "xyzs1", ",", "flows12_3d", ",", "knns_1", ",", "cfgs", ".", "level_weights", ")", "\n", "smooth_loss2", "=", "calc_smooth_loss_3d", "(", "xyzs2", ",", "flows21_3d", ",", "knns_2", ",", "cfgs", ".", "level_weights", ")", "\n", "smooth_loss", "=", "(", "smooth_loss1", "+", "smooth_loss2", ")", "/", "2.0", "\n", "\n", "return", "chamfer_loss", "*", "cfgs", ".", "chamfer_weight", ",", "smooth_loss", "*", "cfgs", ".", "smooth_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses3d.calc_unsupervised_loss_3d": [[98, 102], ["losses3d.calc_chamfer_loss_3d", "losses3d.calc_smooth_loss_3d"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses3d.calc_chamfer_loss_3d", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses3d.calc_smooth_loss_3d"], ["", "def", "calc_unsupervised_loss_3d", "(", "xyzs1", ",", "xyzs2", ",", "flows12_3d", ",", "knns_1", ",", "cfgs", ",", "occ_masks1", "=", "None", ",", "occ_masks2", "=", "None", ")", ":", "\n", "    ", "chamfer_loss", "=", "calc_chamfer_loss_3d", "(", "xyzs1", ",", "xyzs2", ",", "flows12_3d", ",", "cfgs", ".", "level_weights", ",", "occ_masks1", ",", "occ_masks2", ")", "\n", "smooth_loss", "=", "calc_smooth_loss_3d", "(", "xyzs1", ",", "flows12_3d", ",", "knns_1", ",", "cfgs", ".", "level_weights", ")", "\n", "return", "chamfer_loss", "*", "cfgs", ".", "chamfer_weight", ",", "smooth_loss", "*", "cfgs", ".", "smooth_weight", "\n", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc3d_core.FeaturePyramid3D.__init__": [[32, 43], ["torch.Module.__init__", "utils.MLP1d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "pwc3d_core.FeaturePyramid3D.pyramid_mlps.append", "pwc3d_core.FeaturePyramid3D.pyramid_convs.append", "len", "utils.MLP1d", "pointconv.PointConvDownSampling"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "norm", "=", "None", ",", "k", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "level0_mlp", "=", "MLP1d", "(", "3", ",", "[", "n_channels", "[", "0", "]", ",", "n_channels", "[", "0", "]", "]", ")", "\n", "\n", "self", ".", "pyramid_mlps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "pyramid_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "n_channels", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "pyramid_mlps", ".", "append", "(", "MLP1d", "(", "n_channels", "[", "i", "]", ",", "[", "n_channels", "[", "i", "]", ",", "n_channels", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "pyramid_convs", ".", "append", "(", "PointConvDownSampling", "(", "n_channels", "[", "i", "+", "1", "]", ",", "n_channels", "[", "i", "+", "1", "]", ",", "norm", "=", "norm", ",", "k", "=", "k", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc3d_core.FeaturePyramid3D.forward": [[44, 58], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "len", "pwc3d_core.FeaturePyramid3D.level0_mlp", "feats.append", "len", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "xyzs", ")", ":", "\n", "        ", "\"\"\"\n        :param xyzs: pyramid of points\n        :return feats: pyramid of features\n        \"\"\"", "\n", "assert", "len", "(", "xyzs", ")", "==", "len", "(", "self", ".", "pyramid_mlps", ")", "+", "1", "\n", "\n", "inputs", "=", "torch", ".", "zeros_like", "(", "xyzs", "[", "0", "]", ")", "# [bs, 3, n_points]", "\n", "feats", "=", "[", "self", ".", "level0_mlp", "(", "inputs", ")", "]", "# [bs, 32, n_points]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "xyzs", ")", "-", "1", ")", ":", "\n", "            ", "feats", ".", "append", "(", "self", ".", "pyramid_convs", "[", "i", "]", "(", "xyzs", "[", "i", "]", ",", "self", ".", "pyramid_mlps", "[", "i", "]", "(", "feats", "[", "-", "1", "]", ")", ",", "xyzs", "[", "i", "+", "1", "]", ")", ")", "\n", "\n", "", "return", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc3d_core.Correlation3D.__init__": [[61, 68], ["torch.Module.__init__", "utils.MLP2d", "utils.MLP2d", "utils.MLP2d"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "k", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "cost_mlp", "=", "MLP2d", "(", "3", "+", "2", "*", "in_channels", ",", "[", "out_channels", ",", "out_channels", "]", ",", "activation", "=", "'leaky_relu'", ")", "\n", "self", ".", "weight_net1", "=", "MLP2d", "(", "3", ",", "[", "8", ",", "8", ",", "out_channels", "]", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "weight_net2", "=", "MLP2d", "(", "3", ",", "[", "8", ",", "8", ",", "out_channels", "]", ",", "activation", "=", "'relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc3d_core.Correlation3D.forward": [[69, 118], ["csrc.k_nearest_neighbor", "utils.batch_indexing_channel_first", "utils.batch_indexing_channel_first", "feat1[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pwc3d_core.Correlation3D.cost_mlp", "pwc3d_core.Correlation3D.weight_net2", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "utils.batch_indexing_channel_first", "pwc3d_core.Correlation3D.weight_net1", "utils.batch_indexing_channel_first", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "xyz1.view", "csrc.k_nearest_neighbor", "xyz1.view", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.k_nearest_neighbor", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.batch_indexing_channel_first", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.batch_indexing_channel_first", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.batch_indexing_channel_first", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.batch_indexing_channel_first", "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.k_nearest_neighbor"], ["", "def", "forward", "(", "self", ",", "xyz1", ",", "feat1", ",", "xyz2", ",", "feat2", ",", "knn_indices_1in1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param xyz1: [batch_size, 3, n_points]\n        :param feat1: [batch_size, in_channels, n_points]\n        :param xyz2: [batch_size, 3, n_points]\n        :param feat2: [batch_size, in_channels, n_points]\n        :param knn_indices_1in1: for each point in xyz1, find its neighbors in xyz1, [batch_size, n_points, k]\n        :return cost volume for each point in xyz1: [batch_size, n_cost_channels, n_points]\n        \"\"\"", "\n", "batch_size", ",", "in_channels", ",", "n_points", "=", "feat1", ".", "shape", "\n", "\n", "# Step1: for each point in xyz1, find its neighbors in xyz2", "\n", "knn_indices_1in2", "=", "k_nearest_neighbor", "(", "input_xyz", "=", "xyz2", ",", "query_xyz", "=", "xyz1", ",", "k", "=", "self", ".", "k", ")", "\n", "# knn_xyz2: [bs, 3, n_points, k]", "\n", "knn_xyz2", "=", "batch_indexing_channel_first", "(", "xyz2", ",", "knn_indices_1in2", ")", "\n", "# knn_xyz2_norm: [bs, 3, n_points, k]", "\n", "knn_xyz2_norm", "=", "knn_xyz2", "-", "xyz1", ".", "view", "(", "batch_size", ",", "3", ",", "n_points", ",", "1", ")", "\n", "# knn_features2: [bs, in_channels, n_points, k]", "\n", "knn_features2", "=", "batch_indexing_channel_first", "(", "feat2", ",", "knn_indices_1in2", ")", "\n", "# features1_expand: [bs, in_channels, n_points, k]", "\n", "features1_expand", "=", "feat1", "[", ":", ",", ":", ",", ":", ",", "None", "]", ".", "expand", "(", "batch_size", ",", "in_channels", ",", "n_points", ",", "self", ".", "k", ")", "\n", "# concatenated_features: [bs, 2 * in_channels + 3, n_points, k]", "\n", "concatenated_features", "=", "torch", ".", "cat", "(", "[", "features1_expand", ",", "knn_features2", ",", "knn_xyz2_norm", "]", ",", "dim", "=", "1", ")", "\n", "# p2p_cost (point-to-point cost): [bs, out_channels, n_points, k]", "\n", "p2p_cost", "=", "self", ".", "cost_mlp", "(", "concatenated_features", ")", "\n", "\n", "# weights2: [bs, out_channels, n_points, k]", "\n", "weights2", "=", "self", ".", "weight_net2", "(", "knn_xyz2_norm", ")", "\n", "# p2n_cost (point-to-neighbor cost): [bs, out_channels, n_points]", "\n", "p2n_cost", "=", "torch", ".", "sum", "(", "weights2", "*", "p2p_cost", ",", "dim", "=", "3", ")", "\n", "\n", "# Step2: for each point in xyz1, find its neighbors in xyz1", "\n", "if", "knn_indices_1in1", "is", "not", "None", ":", "\n", "            ", "assert", "knn_indices_1in1", ".", "shape", "==", "torch", ".", "Size", "(", "[", "batch_size", ",", "n_points", ",", "self", ".", "k", "]", ")", "\n", "", "else", ":", "\n", "            ", "knn_indices_1in1", "=", "k_nearest_neighbor", "(", "input_xyz", "=", "xyz1", ",", "query_xyz", "=", "xyz1", ",", "k", "=", "self", ".", "k", ")", "# [bs, n_points, k]", "\n", "# knn_xyz1: [bs, 3, n_points, k]", "\n", "", "knn_xyz1", "=", "batch_indexing_channel_first", "(", "xyz1", ",", "knn_indices_1in1", ")", "\n", "# knn_xyz1_norm: [bs, 3, n_points, k]", "\n", "knn_xyz1_norm", "=", "knn_xyz1", "-", "xyz1", ".", "view", "(", "batch_size", ",", "3", ",", "n_points", ",", "1", ")", "\n", "\n", "# weights1: [bs, out_channels, n_points, k]", "\n", "weights1", "=", "self", ".", "weight_net1", "(", "knn_xyz1_norm", ")", "\n", "# n2n_cost: [bs, out_channels, n_points, k]", "\n", "n2n_cost", "=", "batch_indexing_channel_first", "(", "p2n_cost", ",", "knn_indices_1in1", ")", "\n", "# n2n_cost (neighbor-to-neighbor cost): [bs, out_channels, n_points]", "\n", "n2n_cost", "=", "torch", ".", "sum", "(", "weights1", "*", "n2n_cost", ",", "dim", "=", "3", ")", "\n", "\n", "return", "n2n_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc3d_core.FlowEstimator3D.__init__": [[121, 131], ["torch.Module.__init__", "pointconv.PointConvNoSampling", "pointconv.PointConvNoSampling", "utils.MLP1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "norm", "=", "None", ",", "conv_last", "=", "True", ",", "k", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "point_conv1", "=", "PointConvNoSampling", "(", "in_channels", "=", "n_channels", "[", "0", "]", ",", "out_channels", "=", "n_channels", "[", "1", "]", ",", "norm", "=", "norm", ",", "k", "=", "k", ")", "\n", "self", ".", "point_conv2", "=", "PointConvNoSampling", "(", "in_channels", "=", "n_channels", "[", "1", "]", ",", "out_channels", "=", "n_channels", "[", "2", "]", ",", "norm", "=", "norm", ",", "k", "=", "k", ")", "\n", "self", ".", "mlp", "=", "MLP1d", "(", "n_channels", "[", "2", "]", ",", "[", "n_channels", "[", "2", "]", ",", "n_channels", "[", "3", "]", "]", ")", "\n", "\n", "if", "conv_last", ":", "\n", "            ", "self", ".", "conv_last", "=", "nn", ".", "Conv1d", "(", "n_channels", "[", "3", "]", ",", "3", ",", "kernel_size", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_last", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc3d_core.FlowEstimator3D.forward": [[132, 149], ["pwc3d_core.FlowEstimator3D.point_conv1.forward", "pwc3d_core.FlowEstimator3D.point_conv2.forward", "pwc3d_core.FlowEstimator3D.mlp", "pwc3d_core.FlowEstimator3D.conv_last"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.CorrelationFunction.forward", "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.CorrelationFunction.forward"], ["", "", "def", "forward", "(", "self", ",", "xyz", ",", "feat", ",", "knn_indices", ")", ":", "\n", "        ", "\"\"\"\n        :param xyz: 3D locations of points, [batch_size, 3, n_points]\n        :param feat: features of points, [batch_size, in_channels, n_points]\n        :param knn_indices: knn indices of points, [batch_size, n_points, k]\n        :return flow_feat: [batch_size, 64, n_points]\n        :return flow: [batch_size, 3, n_points]\n        \"\"\"", "\n", "feat", "=", "self", ".", "point_conv1", ".", "forward", "(", "xyz", ",", "feat", ",", "knn_indices", ")", "# [bs, 128, n_points]", "\n", "feat", "=", "self", ".", "point_conv2", ".", "forward", "(", "xyz", ",", "feat", ",", "knn_indices", ")", "# [bs, 128, n_points]", "\n", "feat", "=", "self", ".", "mlp", "(", "feat", ")", "# [bs, 64, n_points]", "\n", "\n", "if", "self", ".", "conv_last", "is", "not", "None", ":", "\n", "            ", "flow", "=", "self", ".", "conv_last", "(", "feat", ")", "# [bs, 3, n_points]", "\n", "return", "feat", ",", "flow", "\n", "", "else", ":", "\n", "            ", "return", "feat", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc3d_core.build_pc_pyramid": [[8, 29], ["torch.cat", "torch.cat", "csrc.furthest_point_sampling", "torch.arange", "torch.arange", "lv0_index[].expand", "torch.cat.transpose", "max", "sample_indices1.append", "sample_indices2.append", "xyzs1.append", "xyzs2.append", "utils.batch_indexing_channel_first", "utils.batch_indexing_channel_first"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.furthest_point_sampling", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.batch_indexing_channel_first", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.batch_indexing_channel_first"], ["def", "build_pc_pyramid", "(", "pc1", ",", "pc2", ",", "n_samples_list", ")", ":", "\n", "    ", "batch_size", ",", "_", ",", "n_points", "=", "pc1", ".", "shape", "\n", "\n", "# sub-sampling point cloud", "\n", "pc_both", "=", "torch", ".", "cat", "(", "[", "pc1", ",", "pc2", "]", ",", "dim", "=", "0", ")", "\n", "sample_index_both", "=", "furthest_point_sampling", "(", "pc_both", ".", "transpose", "(", "1", ",", "2", ")", ",", "max", "(", "n_samples_list", ")", ")", "# 1/4", "\n", "sample_index1", "=", "sample_index_both", "[", ":", "batch_size", "]", "\n", "sample_index2", "=", "sample_index_both", "[", "batch_size", ":", "]", "\n", "\n", "# build point cloud pyramid", "\n", "lv0_index", "=", "torch", ".", "arange", "(", "n_points", ",", "device", "=", "pc1", ".", "device", ")", "\n", "lv0_index", "=", "lv0_index", "[", "None", ",", ":", "]", ".", "expand", "(", "batch_size", ",", "n_points", ")", "\n", "xyzs1", ",", "xyzs2", ",", "sample_indices1", ",", "sample_indices2", "=", "[", "pc1", "]", ",", "[", "pc2", "]", ",", "[", "lv0_index", "]", ",", "[", "lv0_index", "]", "\n", "\n", "for", "n_samples", "in", "n_samples_list", ":", "# 1/4", "\n", "        ", "sample_indices1", ".", "append", "(", "sample_index1", "[", ":", ",", ":", "n_samples", "]", ")", "\n", "sample_indices2", ".", "append", "(", "sample_index2", "[", ":", ",", ":", "n_samples", "]", ")", "\n", "xyzs1", ".", "append", "(", "batch_indexing_channel_first", "(", "pc1", ",", "sample_index1", "[", ":", ",", ":", "n_samples", "]", ")", ")", "\n", "xyzs2", ".", "append", "(", "batch_indexing_channel_first", "(", "pc2", ",", "sample_index2", "[", ":", ",", ":", "n_samples", "]", ")", ")", "\n", "\n", "", "return", "xyzs1", ",", "xyzs2", ",", "sample_indices1", ",", "sample_indices2", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses2d.calc_supervised_loss_2d": [[7, 33], ["zip", "len", "len", "torch.abs", "torch.abs", "torch.pow", "torch.pow", "loss_l1_map[].mean", "utils.resize_flow2d", "torch.linalg.norm", "torch.linalg.norm", "loss_l2_map[].mean", "torch.ones_like", "torch.ones_like", "torch.abs.sum"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.resize_flow2d"], ["def", "calc_supervised_loss_2d", "(", "flows", ",", "target", ",", "cfgs", ")", ":", "\n", "    ", "assert", "len", "(", "flows", ")", "<=", "len", "(", "cfgs", ".", "level_weights", ")", "\n", "\n", "total_loss", "=", "0", "\n", "for", "pred", ",", "level_weight", "in", "zip", "(", "flows", ",", "cfgs", ".", "level_weights", ")", ":", "\n", "        ", "assert", "pred", ".", "shape", "[", "1", "]", "==", "2", "# [B, 2, H, W]", "\n", "\n", "if", "target", ".", "shape", "[", "1", "]", "==", "3", ":", "\n", "            ", "flow_mask", "=", "target", "[", ":", ",", "2", "]", ">", "0", "\n", "", "else", ":", "\n", "            ", "flow_mask", "=", "torch", ".", "ones_like", "(", "target", ")", "[", ":", ",", "0", "]", ">", "0", "\n", "\n", "", "diff", "=", "torch", ".", "abs", "(", "resize_flow2d", "(", "pred", ",", "target", ".", "shape", "[", "2", "]", ",", "target", ".", "shape", "[", "3", "]", ")", "-", "target", "[", ":", ",", ":", "2", "]", ")", "\n", "\n", "if", "cfgs", ".", "order", "==", "'l1'", ":", "\n", "            ", "loss_l1_map", "=", "torch", ".", "pow", "(", "diff", ".", "sum", "(", "dim", "=", "1", ")", "+", "0.01", ",", "0.4", ")", "\n", "loss_l1", "=", "loss_l1_map", "[", "flow_mask", "]", ".", "mean", "(", ")", "\n", "total_loss", "+=", "level_weight", "*", "loss_l1", "\n", "", "elif", "cfgs", ".", "order", "==", "'l2'", ":", "\n", "            ", "loss_l2_map", "=", "torch", ".", "linalg", ".", "norm", "(", "diff", ",", "dim", "=", "1", ")", "\n", "loss_l2", "=", "loss_l2_map", "[", "flow_mask", "]", ".", "mean", "(", ")", "\n", "total_loss", "+=", "level_weight", "*", "loss_l2", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses2d.calc_census_loss_2d": [[35, 82], ["losses2d.calc_census_loss_2d.rgb_to_grayscale"], "function", ["None"], ["", "def", "calc_census_loss_2d", "(", "image1", ",", "image2", ",", "noc_mask", "=", "None", ",", "max_distance", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Calculate photometric loss based on census transform.\n    :param image1: [N, 3, H, W] float tensor, ranging from 0 to 1, RGB\n    :param image2: [N, 3, H, W] float tensor, ranging from 0 to 1, RGB\n    :param noc_mask: [N, 1, H, W] float tensor, ranging from 0 to 1\n    :param max_distance: int\n    \"\"\"", "\n", "def", "rgb_to_grayscale", "(", "image", ")", ":", "\n", "        ", "grayscale", "=", "image", "[", ":", ",", "0", ",", ":", ",", ":", "]", "*", "0.2989", "+", "image", "[", ":", ",", "1", ",", ":", ",", ":", "]", "*", "0.5870", "+", "image", "[", ":", ",", "2", ",", ":", ",", ":", "]", "*", "0.1140", "\n", "return", "grayscale", ".", "unsqueeze", "(", "1", ")", "*", "255.0", "\n", "\n", "", "def", "census_transform", "(", "gray_image", ")", ":", "\n", "        ", "patch_size", "=", "2", "*", "max_distance", "+", "1", "\n", "out_channels", "=", "patch_size", "*", "patch_size", "# 9", "\n", "weights", "=", "torch", ".", "eye", "(", "out_channels", ",", "dtype", "=", "gray_image", ".", "dtype", ",", "device", "=", "gray_image", ".", "device", ")", "\n", "weights", "=", "weights", ".", "view", "(", "[", "out_channels", ",", "1", ",", "patch_size", ",", "patch_size", "]", ")", "# [9, 1, 3, 3]", "\n", "patches", "=", "nn", ".", "functional", ".", "conv2d", "(", "gray_image", ",", "weights", ",", "padding", "=", "max_distance", ")", "\n", "result", "=", "patches", "-", "gray_image", "\n", "result", "=", "result", "/", "torch", ".", "sqrt", "(", "0.81", "+", "torch", ".", "pow", "(", "result", ",", "2", ")", ")", "\n", "return", "result", "\n", "\n", "", "if", "noc_mask", "is", "not", "None", ":", "\n", "        ", "image1", "=", "noc_mask", "*", "image1", "\n", "image2", "=", "noc_mask", "*", "image2", "\n", "\n", "", "gray_image1", "=", "rgb_to_grayscale", "(", "image1", ")", "\n", "gray_image2", "=", "rgb_to_grayscale", "(", "image2", ")", "\n", "\n", "t1", "=", "census_transform", "(", "gray_image1", ")", "\n", "t2", "=", "census_transform", "(", "gray_image2", ")", "\n", "\n", "dist", "=", "torch", ".", "pow", "(", "t1", "-", "t2", ",", "2", ")", "\n", "dist_norm", "=", "dist", "/", "(", "0.1", "+", "dist", ")", "\n", "dist_mean", "=", "torch", ".", "mean", "(", "dist_norm", ",", "1", ",", "keepdim", "=", "True", ")", "# instead of sum", "\n", "\n", "n", ",", "_", ",", "h", ",", "w", "=", "image1", ".", "shape", "\n", "inner", "=", "torch", ".", "ones", "(", "[", "n", ",", "1", ",", "h", "-", "2", "*", "max_distance", ",", "w", "-", "2", "*", "max_distance", "]", ",", "dtype", "=", "image1", ".", "dtype", ",", "device", "=", "image1", ".", "device", ")", "\n", "inner_mask", "=", "nn", ".", "functional", ".", "pad", "(", "inner", ",", "[", "max_distance", "]", "*", "4", ")", "\n", "loss", "=", "dist_mean", "*", "inner_mask", "\n", "\n", "if", "noc_mask", "is", "not", "None", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "/", "(", "noc_mask", ".", "mean", "(", ")", "+", "1e-7", ")", "\n", "", "else", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses2d.calc_smooth_loss_2d": [[84, 114], ["torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "losses2d.calc_smooth_loss_2d.gradient"], "function", ["None"], ["", "", "@", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "False", ")", "\n", "def", "calc_smooth_loss_2d", "(", "image", ",", "flow", ",", "derivative", "=", "'first'", ")", ":", "\n", "    ", "\"\"\"\n    :param image: [N, 3, H, W] float tensor, ranging from 0 to 1, RGB\n    :param flow: [N, 2, H, W] float tensor\n    :param derivative: 'first' or 'second'\n    \"\"\"", "\n", "def", "gradient", "(", "inputs", ")", ":", "\n", "        ", "dy", "=", "inputs", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "inputs", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "\n", "dx", "=", "inputs", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "inputs", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "return", "dx", ",", "dy", "\n", "\n", "", "image_dx", ",", "image_dy", "=", "gradient", "(", "image", ")", "\n", "flow_dx", ",", "flow_dy", "=", "gradient", "(", "flow", ")", "\n", "\n", "weights_x", "=", "torch", ".", "exp", "(", "-", "torch", ".", "mean", "(", "image_dx", ".", "abs", "(", ")", ",", "1", ",", "keepdim", "=", "True", ")", "*", "10", ")", "\n", "weights_y", "=", "torch", ".", "exp", "(", "-", "torch", ".", "mean", "(", "image_dy", ".", "abs", "(", ")", ",", "1", ",", "keepdim", "=", "True", ")", "*", "10", ")", "\n", "\n", "if", "derivative", "==", "'first'", ":", "\n", "        ", "loss_x", "=", "weights_x", "*", "flow_dx", ".", "abs", "(", ")", "/", "2.0", "\n", "loss_y", "=", "weights_y", "*", "flow_dy", ".", "abs", "(", ")", "/", "2.0", "\n", "", "elif", "derivative", "==", "'second'", ":", "\n", "        ", "flow_dx2", "=", "flow_dx", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "flow_dx", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "flow_dy2", "=", "flow_dy", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "flow_dy", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "\n", "loss_x", "=", "weights_x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "*", "flow_dx2", ".", "abs", "(", ")", "\n", "loss_y", "=", "weights_y", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "*", "flow_dy2", ".", "abs", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Unknown derivative: %s'", "%", "derivative", ")", "\n", "\n", "", "return", "loss_x", ".", "mean", "(", ")", "/", "2", "+", "loss_y", ".", "mean", "(", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses2d.calc_ssim_loss_2d": [[116, 149], ["torch.clamp", "torch.clamp", "torch.AvgPool2d", "torch.AvgPool2d", "mu_x.pow", "mu_y.pow", "torch.clamp.mean", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.clamp.mean", "noc_mask.mean"], "function", ["None"], ["", "def", "calc_ssim_loss_2d", "(", "image1", ",", "image2", ",", "noc_mask", "=", "None", ",", "max_distance", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Calculate photometric loss based on SSIM.\n    :param image1: [N, 3, H, W] float tensor, ranging from 0 to 1, RGB\n    :param image2: [N, 3, H, W] float tensor, ranging from 0 to 1, RGB\n    :param noc_mask: [N, 1, H, W] float tensor, ranging from 0 to 1\n    :param max_distance: int\n    \"\"\"", "\n", "patch_size", "=", "2", "*", "max_distance", "+", "1", "\n", "c1", ",", "c2", "=", "0.01", "**", "2", ",", "0.03", "**", "2", "\n", "\n", "if", "noc_mask", "is", "not", "None", ":", "\n", "        ", "image1", "=", "noc_mask", "*", "image1", "\n", "image2", "=", "noc_mask", "*", "image2", "\n", "\n", "", "mu_x", "=", "nn", ".", "AvgPool2d", "(", "patch_size", ",", "1", ",", "0", ")", "(", "image1", ")", "\n", "mu_y", "=", "nn", ".", "AvgPool2d", "(", "patch_size", ",", "1", ",", "0", ")", "(", "image2", ")", "\n", "mu_x_square", ",", "mu_y_square", "=", "mu_x", ".", "pow", "(", "2", ")", ",", "mu_y", ".", "pow", "(", "2", ")", "\n", "mu_xy", "=", "mu_x", "*", "mu_y", "\n", "\n", "sigma_x", "=", "nn", ".", "AvgPool2d", "(", "patch_size", ",", "1", ",", "0", ")", "(", "image1", "*", "image1", ")", "-", "mu_x_square", "\n", "sigma_y", "=", "nn", ".", "AvgPool2d", "(", "patch_size", ",", "1", ",", "0", ")", "(", "image2", "*", "image2", ")", "-", "mu_y_square", "\n", "sigma_xy", "=", "nn", ".", "AvgPool2d", "(", "patch_size", ",", "1", ",", "0", ")", "(", "image1", "*", "image2", ")", "-", "mu_xy", "\n", "\n", "ssim_n", "=", "(", "2", "*", "mu_xy", "+", "c1", ")", "*", "(", "2", "*", "sigma_xy", "+", "c2", ")", "\n", "ssim_d", "=", "(", "mu_x_square", "+", "mu_y_square", "+", "c1", ")", "*", "(", "sigma_x", "+", "sigma_y", "+", "c2", ")", "\n", "ssim", "=", "ssim_n", "/", "ssim_d", "\n", "loss", "=", "torch", ".", "clamp", "(", "(", "1", "-", "ssim", ")", "/", "2", ",", "min", "=", "0.0", ",", "max", "=", "1.0", ")", "\n", "\n", "if", "noc_mask", "is", "not", "None", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "/", "(", "noc_mask", ".", "mean", "(", ")", "+", "1e-7", ")", "\n", "", "else", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses2d.calc_unsupervised_loss_2d": [[151, 185], ["enumerate", "zip", "utils.backwarp_2d", "utils.backwarp_2d", "min", "losses2d.calc_smooth_loss_2d", "losses2d.calc_smooth_loss_2d", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "losses2d.calc_ssim_loss_2d", "losses2d.calc_ssim_loss_2d", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "losses2d.calc_census_loss_2d", "losses2d.calc_census_loss_2d", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.backwarp_2d", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.backwarp_2d", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses2d.calc_smooth_loss_2d", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses2d.calc_smooth_loss_2d", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses2d.calc_ssim_loss_2d", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses2d.calc_ssim_loss_2d", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses2d.calc_census_loss_2d", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses2d.calc_census_loss_2d"], ["", "", "def", "calc_unsupervised_loss_2d", "(", "pyramid_flows12", ",", "pyramid_flows21", ",", "image1", ",", "image2", ",", "occ_mask1", ",", "occ_mask2", ",", "cfgs", ")", ":", "\n", "    ", "photo_loss", "=", "smooth_loss", "=", "0", "\n", "for", "lv", ",", "(", "pyramid_flow12", ",", "pyramid_flow21", ")", "in", "enumerate", "(", "zip", "(", "pyramid_flows12", ",", "pyramid_flows21", ")", ")", ":", "\n", "        ", "if", "lv", "==", "0", ":", "\n", "            ", "image1_scaled", ",", "noc_mask1_scaled", "=", "image1", ",", "1", "-", "occ_mask1", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "image2_scaled", ",", "noc_mask2_scaled", "=", "image2", ",", "1", "-", "occ_mask2", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "curr_h", ",", "curr_w", "=", "pyramid_flow12", ".", "shape", "[", "2", "]", ",", "pyramid_flow12", ".", "shape", "[", "3", "]", "\n", "image1_scaled", "=", "interpolate", "(", "image1", ",", "(", "curr_h", ",", "curr_w", ")", ",", "mode", "=", "'area'", ")", "\n", "image2_scaled", "=", "interpolate", "(", "image2", ",", "(", "curr_h", ",", "curr_w", ")", ",", "mode", "=", "'area'", ")", "\n", "noc_mask1_scaled", "=", "1", "-", "interpolate", "(", "occ_mask1", "[", ":", ",", "None", ",", ":", ",", ":", "]", ",", "(", "curr_h", ",", "curr_w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "noc_mask2_scaled", "=", "1", "-", "interpolate", "(", "occ_mask2", "[", ":", ",", "None", ",", ":", ",", ":", "]", ",", "(", "curr_h", ",", "curr_w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "", "image1_scaled_warp", "=", "backwarp_2d", "(", "image1_scaled", ",", "pyramid_flow21", ",", "padding_mode", "=", "'border'", ")", "\n", "image2_scaled_warp", "=", "backwarp_2d", "(", "image2_scaled", ",", "pyramid_flow12", ",", "padding_mode", "=", "'border'", ")", "\n", "\n", "# calculate photometric loss", "\n", "if", "cfgs", ".", "photometric_loss", "==", "'ssim'", ":", "\n", "            ", "photo_loss1", "=", "calc_ssim_loss_2d", "(", "image1_scaled", ",", "image2_scaled_warp", ",", "noc_mask1_scaled", ")", "\n", "photo_loss2", "=", "calc_ssim_loss_2d", "(", "image2_scaled", ",", "image1_scaled_warp", ",", "noc_mask2_scaled", ")", "\n", "", "elif", "cfgs", ".", "photometric_loss", "==", "'census'", ":", "\n", "            ", "photo_loss1", "=", "calc_census_loss_2d", "(", "image1_scaled", ",", "image2_scaled_warp", ",", "noc_mask1_scaled", ")", "\n", "photo_loss2", "=", "calc_census_loss_2d", "(", "image2_scaled", ",", "image1_scaled_warp", ",", "noc_mask2_scaled", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Unknown photometric loss: %s'", "%", "cfgs", ".", "photometric_loss", ")", "\n", "", "photo_loss", "+=", "cfgs", ".", "photometric_weights", "[", "lv", "]", "*", "(", "photo_loss1", "+", "photo_loss2", ")", "/", "2", "\n", "\n", "# calculate smooth loss", "\n", "scale", "=", "min", "(", "pyramid_flows12", "[", "0", "]", ".", "shape", "[", "2", "]", ",", "pyramid_flows12", "[", "0", "]", ".", "shape", "[", "3", "]", ")", "\n", "smooth_loss1", "=", "calc_smooth_loss_2d", "(", "image1_scaled", ",", "pyramid_flow12", "/", "scale", ",", "cfgs", ".", "smooth_derivative", ")", "\n", "smooth_loss2", "=", "calc_smooth_loss_2d", "(", "image2_scaled", ",", "pyramid_flow21", "/", "scale", ",", "cfgs", ".", "smooth_derivative", ")", "\n", "smooth_loss", "+=", "cfgs", ".", "smooth_weights", "[", "lv", "]", "*", "(", "smooth_loss1", "+", "smooth_loss2", ")", "/", "2", "\n", "\n", "", "return", "photo_loss", ",", "smooth_loss", "\n", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc2d_core.ResidualBlock.__init__": [[7, 20], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "utils.Conv2dNormRelu", "utils.Conv2dNormRelu", "utils.Conv2dNormRelu", "torch.Identity", "torch.Identity", "utils.Conv2dNormRelu", "utils.Conv2dNormRelu"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "down_sample", "=", "True", ",", "norm", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "down_sample", ":", "\n", "            ", "self", ".", "down0", "=", "Conv2dNormRelu", "(", "in_channels", ",", "out_channels", ",", "stride", "=", "2", ",", "norm", "=", "norm", ",", "activation", "=", "None", ")", "\n", "self", ".", "conv0", "=", "Conv2dNormRelu", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "norm", "=", "norm", ")", "\n", "self", ".", "conv1", "=", "Conv2dNormRelu", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "norm", "=", "norm", ",", "activation", "=", "None", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "down0", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "conv0", "=", "Conv2dNormRelu", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "norm", "=", "norm", ")", "\n", "self", ".", "conv1", "=", "Conv2dNormRelu", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "norm", "=", "norm", ",", "activation", "=", "None", ")", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc2d_core.ResidualBlock.forward": [[21, 26], ["pwc2d_core.ResidualBlock.conv0", "pwc2d_core.ResidualBlock.conv1", "pwc2d_core.ResidualBlock.relu", "pwc2d_core.ResidualBlock.down0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv0", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", "+", "self", ".", "down0", "(", "x", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc2d_core.FeaturePyramid2D.__init__": [[29, 34], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "zip", "pwc2d_core.FeaturePyramid2D.pyramid_convs.append", "pwc2d_core.ResidualBlock"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "norm", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pyramid_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "in_channels", ",", "out_channels", "in", "zip", "(", "n_channels", "[", ":", "-", "1", "]", ",", "n_channels", "[", "1", ":", "]", ")", ":", "\n", "            ", "self", ".", "pyramid_convs", ".", "append", "(", "ResidualBlock", "(", "in_channels", ",", "out_channels", ",", "norm", "=", "norm", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc2d_core.FeaturePyramid2D.forward": [[35, 41], ["conv", "outputs.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "for", "conv", "in", "self", ".", "pyramid_convs", ":", "\n", "            ", "x", "=", "conv", "(", "x", ")", "\n", "outputs", ".", "append", "(", "x", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc2d_core.FlowEstimatorDense2D.__init__": [[44, 77], ["torch.Module.__init__", "utils.Conv2dNormRelu", "utils.Conv2dNormRelu", "utils.Conv2dNormRelu", "utils.Conv2dNormRelu", "utils.Conv2dNormRelu", "sum", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "norm", "=", "None", ",", "conv_last", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "Conv2dNormRelu", "(", "\n", "n_channels", "[", "0", "]", ",", "\n", "n_channels", "[", "1", "]", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "norm", "=", "norm", "\n", ")", "\n", "self", ".", "conv2", "=", "Conv2dNormRelu", "(", "\n", "n_channels", "[", "0", "]", "+", "n_channels", "[", "1", "]", ",", "\n", "n_channels", "[", "2", "]", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "norm", "=", "norm", "\n", ")", "\n", "self", ".", "conv3", "=", "Conv2dNormRelu", "(", "\n", "n_channels", "[", "0", "]", "+", "n_channels", "[", "1", "]", "+", "n_channels", "[", "2", "]", ",", "\n", "n_channels", "[", "3", "]", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "norm", "=", "norm", "\n", ")", "\n", "self", ".", "conv4", "=", "Conv2dNormRelu", "(", "\n", "n_channels", "[", "0", "]", "+", "n_channels", "[", "1", "]", "+", "n_channels", "[", "2", "]", "+", "n_channels", "[", "3", "]", ",", "\n", "n_channels", "[", "4", "]", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "norm", "=", "norm", "\n", ")", "\n", "self", ".", "conv5", "=", "Conv2dNormRelu", "(", "\n", "n_channels", "[", "0", "]", "+", "n_channels", "[", "1", "]", "+", "n_channels", "[", "2", "]", "+", "n_channels", "[", "3", "]", "+", "n_channels", "[", "4", "]", ",", "\n", "n_channels", "[", "5", "]", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "norm", "=", "norm", "\n", ")", "\n", "self", ".", "flow_feat_dim", "=", "sum", "(", "n_channels", ")", "\n", "\n", "if", "conv_last", ":", "\n", "            ", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "self", ".", "flow_feat_dim", ",", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_last", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc2d_core.FlowEstimatorDense2D.forward": [[78, 90], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pwc2d_core.FlowEstimatorDense2D.conv_last", "pwc2d_core.FlowEstimatorDense2D.conv1", "pwc2d_core.FlowEstimatorDense2D.conv2", "pwc2d_core.FlowEstimatorDense2D.conv3", "pwc2d_core.FlowEstimatorDense2D.conv4", "pwc2d_core.FlowEstimatorDense2D.conv5"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv1", "(", "x", ")", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "x2", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv2", "(", "x1", ")", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "x3", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv3", "(", "x2", ")", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "x4", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv4", "(", "x3", ")", ",", "x3", "]", ",", "dim", "=", "1", ")", "\n", "flow_feat", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv5", "(", "x4", ")", ",", "x4", "]", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "conv_last", "is", "not", "None", ":", "\n", "            ", "flow", "=", "self", ".", "conv_last", "(", "flow_feat", ")", "\n", "return", "flow_feat", ",", "flow", "\n", "", "else", ":", "\n", "            ", "return", "flow_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc2d_core.ContextNetwork2D.__init__": [[93, 99], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "zip", "torch.Conv2d", "torch.Conv2d", "pwc2d_core.ContextNetwork2D.convs.append", "utils.Conv2dNormRelu"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "dilations", ",", "norm", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "in_channels", ",", "out_channels", ",", "dilation", "in", "zip", "(", "n_channels", "[", ":", "-", "1", "]", ",", "n_channels", "[", "1", ":", "]", ",", "dilations", ")", ":", "\n", "            ", "self", ".", "convs", ".", "append", "(", "Conv2dNormRelu", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "norm", "=", "norm", ")", ")", "\n", "", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "n_channels", "[", "-", "1", "]", ",", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc2d_core.ContextNetwork2D.forward": [[100, 105], ["pwc2d_core.ContextNetwork2D.conv_last", "conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "x", "=", "conv", "(", "x", ")", "\n", "", "outputs", "=", "self", ".", "conv_last", "(", "x", ")", "\n", "return", "x", ",", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pointconv.PointConvDownSampling.__init__": [[8, 32], ["torch.Module.__init__", "utils.MLP2d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Identity", "torch.Identity", "NotImplementedError", "torch.Identity", "torch.Identity", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "norm", "=", "None", ",", "activation", "=", "'leaky_relu'", ",", "k", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "\n", "self", ".", "weight_net", "=", "MLP2d", "(", "3", ",", "[", "8", ",", "16", "]", ",", "activation", "=", "activation", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "16", "*", "(", "in_channels", "+", "3", ")", ",", "out_channels", ")", "\n", "\n", "if", "norm", "==", "'batch_norm'", ":", "\n", "            ", "self", ".", "norm_fn", "=", "nn", ".", "BatchNorm1d", "(", "out_channels", ")", "\n", "", "elif", "norm", "==", "'instance_norm'", ":", "\n", "            ", "self", ".", "norm_fn", "=", "nn", ".", "InstanceNorm1d", "(", "out_channels", ")", "\n", "", "elif", "norm", "is", "None", ":", "\n", "            ", "self", ".", "norm_fn", "=", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Unknown normalization function: %s'", "%", "norm", ")", "\n", "\n", "", "if", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation_fn", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'leaky_relu'", ":", "\n", "            ", "self", ".", "activation_fn", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "is", "None", ":", "\n", "            ", "self", ".", "activation_fn", "=", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Unknown activation function: %s'", "%", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pointconv.PointConvDownSampling.forward": [[33, 62], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.transpose", "torch.cat.transpose", "csrc.k_nearest_neighbor", "utils.batch_indexing_channel_first", "pointconv.PointConvDownSampling.weight_net", "weights.transpose.transpose.transpose", "utils.batch_indexing_channel_last", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "pointconv.PointConvDownSampling.view", "pointconv.PointConvDownSampling.linear", "pointconv.PointConvDownSampling.activation_fn", "pointconv.PointConvDownSampling.norm_fn", "pointconv.PointConvDownSampling.transpose"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.k_nearest_neighbor", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.batch_indexing_channel_first", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.batch_indexing_channel_last"], ["", "", "def", "forward", "(", "self", ",", "xyz", ",", "features", ",", "sampled_xyz", ")", ":", "\n", "        ", "\"\"\"\n        :param xyz: 3D locations of points, [batch_size, 3, n_points]\n        :param features: features of points, [batch_size, in_channels, n_points]\n        :param sampled_xyz: 3D locations of sampled points, [batch_size, 3, n_samples]\n        :return weighted_features: features of sampled points, [batch_size, out_channels, n_samples]\n        \"\"\"", "\n", "batch_size", ",", "n_points", ",", "n_samples", "=", "xyz", ".", "shape", "[", "0", "]", ",", "xyz", ".", "shape", "[", "2", "]", ",", "sampled_xyz", ".", "shape", "[", "2", "]", "\n", "\n", "features", "=", "torch", ".", "cat", "(", "[", "xyz", ",", "features", "]", ",", "dim", "=", "1", ")", "# [bs, in_channels + 3, n_points]", "\n", "features_cl", "=", "features", ".", "transpose", "(", "1", ",", "2", ")", "# [bs, n_points, n_channels + 3]", "\n", "\n", "# Calculate k nearest neighbors", "\n", "knn_indices", "=", "k_nearest_neighbor", "(", "xyz", ",", "sampled_xyz", ",", "self", ".", "k", ")", "# [bs, n_samples, k]", "\n", "\n", "# Calculate weights", "\n", "knn_xyz", "=", "batch_indexing_channel_first", "(", "xyz", ",", "knn_indices", ")", "# [bs, 3, n_samples, k]", "\n", "knn_xyz_norm", "=", "knn_xyz", "-", "sampled_xyz", "[", ":", ",", ":", ",", ":", ",", "None", "]", "# [bs, 3, n_samples, k]", "\n", "weights", "=", "self", ".", "weight_net", "(", "knn_xyz_norm", ")", "# [bs, n_weights, n_samples, k]", "\n", "\n", "# Calculate weighted features", "\n", "weights", "=", "weights", ".", "transpose", "(", "1", ",", "2", ")", "# [bs, n_samples, n_weights, k]", "\n", "knn_features", "=", "batch_indexing_channel_last", "(", "features_cl", ",", "knn_indices", ")", "# [bs, n_samples, k, 3 + in_channels]", "\n", "weighted_features", "=", "torch", ".", "matmul", "(", "weights", ",", "knn_features", ")", "# [bs, n_samples, n_weights, 3 + in_channels]", "\n", "weighted_features", "=", "weighted_features", ".", "view", "(", "batch_size", ",", "n_samples", ",", "-", "1", ")", "# [bs, n_samples, (3 + in_channels) * n_weights]", "\n", "weighted_features", "=", "self", ".", "linear", "(", "weighted_features", ")", "# [bs, n_samples, out_channels]", "\n", "weighted_features", "=", "self", ".", "activation_fn", "(", "self", ".", "norm_fn", "(", "weighted_features", ".", "transpose", "(", "1", ",", "2", ")", ")", ")", "# [bs, out_channels, n_samples]", "\n", "\n", "return", "weighted_features", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pointconv.PointConvNoSampling.__init__": [[65, 89], ["torch.Module.__init__", "utils.MLP2d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Identity", "torch.Identity", "NotImplementedError", "torch.Identity", "torch.Identity", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "norm", "=", "None", ",", "activation", "=", "'leaky_relu'", ",", "k", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "\n", "self", ".", "weight_net", "=", "MLP2d", "(", "3", ",", "[", "8", ",", "16", "]", ",", "activation", "=", "activation", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "16", "*", "(", "in_channels", "+", "3", ")", ",", "out_channels", ")", "\n", "\n", "if", "norm", "==", "'batch_norm'", ":", "\n", "            ", "self", ".", "norm_fn", "=", "nn", ".", "BatchNorm1d", "(", "out_channels", ")", "\n", "", "elif", "norm", "==", "'instance_norm'", ":", "\n", "            ", "self", ".", "norm_fn", "=", "nn", ".", "InstanceNorm1d", "(", "out_channels", ")", "\n", "", "elif", "norm", "is", "None", ":", "\n", "            ", "self", ".", "norm_fn", "=", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Unknown normalization function: %s'", "%", "norm", ")", "\n", "\n", "", "if", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation_fn", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'leaky_relu'", ":", "\n", "            ", "self", ".", "activation_fn", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "is", "None", ":", "\n", "            ", "self", ".", "activation_fn", "=", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Unknown activation function: %s'", "%", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pointconv.PointConvNoSampling.forward": [[90, 123], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.transpose", "torch.cat.transpose", "utils.batch_indexing_channel_first", "pointconv.PointConvNoSampling.weight_net", "weights.transpose.transpose.transpose", "utils.batch_indexing_channel_last", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "pointconv.PointConvNoSampling.view", "pointconv.PointConvNoSampling.linear().float", "pointconv.PointConvNoSampling.activation_fn", "csrc.k_nearest_neighbor", "pointconv.PointConvNoSampling.norm_fn", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "pointconv.PointConvNoSampling.linear", "pointconv.PointConvNoSampling.transpose"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.batch_indexing_channel_first", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.batch_indexing_channel_last", "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.k_nearest_neighbor"], ["", "", "def", "forward", "(", "self", ",", "xyz", ",", "features", ",", "knn_indices", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param xyz: 3D locations of points, [batch_size, 3, n_points]\n        :param features: features of points, [batch_size, in_channels, n_points]\n        :param knn_indices: optional pre-computed knn indices, [batch_size, n_points, k]\n        :return weighted_features: features of sampled points, [batch_size, out_channels, n_samples]\n        \"\"\"", "\n", "batch_size", ",", "n_points", "=", "xyz", ".", "shape", "[", "0", "]", ",", "xyz", ".", "shape", "[", "2", "]", "\n", "features", "=", "torch", ".", "cat", "(", "[", "xyz", ",", "features", "]", ",", "dim", "=", "1", ")", "# [bs, in_channels + 3, n_points]", "\n", "features_cl", "=", "features", ".", "transpose", "(", "1", ",", "2", ")", "# [bs, n_points, n_channels + 3]", "\n", "\n", "# Calculate k nearest neighbors", "\n", "if", "knn_indices", "is", "not", "None", ":", "# if knn indices are pre-computed", "\n", "            ", "assert", "knn_indices", ".", "shape", "[", ":", "2", "]", "==", "torch", ".", "Size", "(", "[", "batch_size", ",", "n_points", "]", ")", "\n", "assert", "knn_indices", ".", "shape", "[", "2", "]", ">=", "self", ".", "k", "\n", "knn_indices", "=", "knn_indices", "[", ":", ",", ":", ",", ":", "self", ".", "k", "]", "\n", "", "else", ":", "\n", "            ", "knn_indices", "=", "k_nearest_neighbor", "(", "xyz", ",", "xyz", ",", "self", ".", "k", ")", "# [bs, n_samples, k]", "\n", "\n", "# Calculate weights", "\n", "", "knn_xyz", "=", "batch_indexing_channel_first", "(", "xyz", ",", "knn_indices", ")", "# [bs, 3, n_points, k]", "\n", "knn_xyz_norm", "=", "knn_xyz", "-", "xyz", "[", ":", ",", ":", ",", ":", ",", "None", "]", "# [bs, 3, n_points, k]", "\n", "weights", "=", "self", ".", "weight_net", "(", "knn_xyz_norm", ")", "# [bs, n_weights, n_points, k]", "\n", "\n", "# Calculate weighted features", "\n", "weights", "=", "weights", ".", "transpose", "(", "1", ",", "2", ")", "# [bs, n_points, n_weights, k]", "\n", "knn_features", "=", "batch_indexing_channel_last", "(", "features_cl", ",", "knn_indices", ")", "# [bs, n_points, k, 3 + in_channels]", "\n", "weighted_features", "=", "torch", ".", "matmul", "(", "weights", ",", "knn_features", ")", "# [bs, n_points, n_weights, 3 + in_channels]", "\n", "weighted_features", "=", "weighted_features", ".", "view", "(", "batch_size", ",", "n_points", ",", "-", "1", ")", "# [bs, n_points, (3 + in_channels) * n_weights]", "\n", "weighted_features", "=", "self", ".", "linear", "(", "weighted_features", ")", ".", "float", "(", ")", "# [bs, n_points, out_channels]", "\n", "weighted_features", "=", "self", ".", "activation_fn", "(", "self", ".", "norm_fn", "(", "weighted_features", ".", "transpose", "(", "1", ",", "2", ")", ")", ")", "# [bs, out_channels, n_points]", "\n", "\n", "return", "weighted_features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.Conv1dNormRelu.__init__": [[9, 30], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Identity", "torch.Identity", "NotImplementedError", "torch.Identity", "torch.Identity", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["\n", "\n", "def", "init_logging", "(", "filename", "=", "None", ",", "debug", "=", "False", ")", ":", "\n", "    ", "logging", ".", "root", "=", "logging", ".", "RootLogger", "(", "'DEBUG'", "if", "debug", "else", "'INFO'", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'[%(asctime)s][%(levelname)s] - %(message)s'", ")", "\n", "\n", "stream_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "stream_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logging", ".", "root", ".", "addHandler", "(", "stream_handler", ")", "\n", "\n", "if", "filename", "is", "not", "None", ":", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "filename", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logging", ".", "root", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "\n", "", "", "def", "dist_reduce_sum", "(", "value", ",", "n_gpus", ")", ":", "\n", "    ", "if", "n_gpus", "<=", "1", ":", "\n", "        ", "return", "value", "\n", "", "tensor", "=", "torch", ".", "Tensor", "(", "[", "value", "]", ")", ".", "cuda", "(", ")", "\n", "dist", ".", "all_reduce", "(", "tensor", ")", "\n", "return", "tensor", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.Conv1dNormRelu.forward": [[31, 36], ["utils.Conv1dNormRelu.conv_fn", "utils.Conv1dNormRelu.norm_fn", "utils.Conv1dNormRelu.relu_fn"], "methods", ["None"], ["\n", "\n", "", "def", "copy_to_device", "(", "inputs", ",", "device", ",", "non_blocking", "=", "True", ")", ":", "\n", "    ", "if", "isinstance", "(", "inputs", ",", "list", ")", ":", "\n", "        ", "inputs", "=", "[", "copy_to_device", "(", "item", ",", "device", ",", "non_blocking", ")", "for", "item", "in", "inputs", "]", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.Conv2dNormRelu.__init__": [[39, 60], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Identity", "torch.Identity", "NotImplementedError", "torch.Identity", "torch.Identity", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["        ", "inputs", "=", "inputs", ".", "to", "(", "device", "=", "device", ",", "non_blocking", "=", "non_blocking", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'Unknown type: %s'", "%", "str", "(", "type", "(", "inputs", ")", ")", ")", "\n", "", "return", "inputs", "\n", "\n", "\n", "", "def", "size_of_batch", "(", "inputs", ")", ":", "\n", "    ", "if", "isinstance", "(", "inputs", ",", "list", ")", ":", "\n", "        ", "return", "size_of_batch", "(", "inputs", "[", "0", "]", ")", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "        ", "return", "size_of_batch", "(", "list", "(", "inputs", ".", "values", "(", ")", ")", "[", "0", "]", ")", "\n", "", "elif", "isinstance", "(", "inputs", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "inputs", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'Unknown type: %s'", "%", "str", "(", "type", "(", "inputs", ")", ")", ")", "\n", "\n", "\n", "", "", "def", "load_fpm", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "header", "=", "f", ".", "readline", "(", ")", ".", "rstrip", "(", ")", "\n", "if", "header", ".", "decode", "(", "\"ascii\"", ")", "==", "'PF'", ":", "\n", "            ", "color", "=", "True", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.Conv2dNormRelu.forward": [[61, 66], ["utils.Conv2dNormRelu.conv_fn", "utils.Conv2dNormRelu.norm_fn", "utils.Conv2dNormRelu.relu_fn"], "methods", ["None"], ["", "elif", "header", ".", "decode", "(", "\"ascii\"", ")", "==", "'Pf'", ":", "\n", "            ", "color", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Not a PFM file.'", ")", "\n", "\n", "", "dim_match", "=", "re", ".", "match", "(", "r'^(\\d+)\\s(\\d+)\\s$'", ",", "f", ".", "readline", "(", ")", ".", "decode", "(", "\"ascii\"", ")", ")", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.MLP1d.__init__": [[69, 78], ["torch.Module.__init__", "isinstance", "isinstance", "torch.ModuleList", "torch.ModuleList", "zip", "utils.MLP1d.convs.append", "utils.Conv1dNormRelu"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Malformed PFM header.'", ")", "\n", "\n", "", "scale", "=", "float", "(", "f", ".", "readline", "(", ")", ".", "decode", "(", "\"ascii\"", ")", ".", "rstrip", "(", ")", ")", "\n", "if", "scale", "<", "0", ":", "# little-endian", "\n", "            ", "endian", "=", "'<'", "\n", "", "else", ":", "\n", "            ", "endian", "=", "'>'", "# big-endian", "\n", "\n", "", "data", "=", "np", ".", "fromfile", "(", "f", ",", "endian", "+", "'f'", ")", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.MLP1d.forward": [[79, 83], ["conv"], "methods", ["None"], ["shape", "=", "(", "height", ",", "width", ",", "3", ")", "if", "color", "else", "(", "height", ",", "width", ")", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "shape", ")", "\n", "data", "=", "np", ".", "flipud", "(", "data", ")", "\n", "\n", "", "return", "data", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.MLP2d.__init__": [[86, 95], ["torch.Module.__init__", "isinstance", "isinstance", "torch.ModuleList", "torch.ModuleList", "zip", "utils.MLP2d.convs.append", "utils.Conv2dNormRelu"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["", "def", "load_flow", "(", "filepath", ")", ":", "\n", "    ", "with", "open", "(", "filepath", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "magic", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", "=", "1", ")", "\n", "assert", "(", "202021.25", "==", "magic", ")", ",", "'Invalid .flo file: incorrect magic number'", "\n", "w", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "h", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "flow", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", "=", "2", "*", "w", "*", "h", ")", ".", "reshape", "(", "[", "h", ",", "w", ",", "2", "]", ")", "\n", "\n", "", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.MLP2d.forward": [[96, 100], ["conv"], "methods", ["None"], ["\n", "", "def", "load_flow_png", "(", "filepath", ",", "scale", "=", "64.0", ")", ":", "\n", "# for KITTI which uses 16bit PNG images", "\n", "# see 'https://github.com/ClementPinard/FlowNetPytorch/blob/master/datasets/KITTI.py'", "\n", "# The -1 is here to specify not to change the image depth (16bit), and is compatible", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.batch_indexing_channel_last": [[102, 118], ["torch.arange", "torch.arange", "indices_of_batch.view().expand.view().expand", "len", "list", "indices_of_batch.view().expand.view", "len", "batched_indices.to", "batched_indices.to"], "function", ["None"], ["    ", "flow_img", "=", "cv2", ".", "imread", "(", "filepath", ",", "-", "1", ")", "\n", "flow", "=", "flow_img", "[", ":", ",", ":", ",", "2", ":", "0", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mask", "=", "flow_img", "[", ":", ",", ":", ",", "0", "]", ">", "0", "\n", "flow", "=", "flow", "-", "32768.0", "\n", "flow", "=", "flow", "/", "scale", "\n", "return", "flow", ",", "mask", "\n", "\n", "\n", "", "def", "save_flow", "(", "filepath", ",", "flow", ")", ":", "\n", "    ", "assert", "flow", ".", "shape", "[", "2", "]", "==", "2", "\n", "magic", "=", "np", ".", "array", "(", "202021.25", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "h", "=", "np", ".", "array", "(", "flow", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "w", "=", "np", ".", "array", "(", "flow", ".", "shape", "[", "1", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "with", "open", "(", "filepath", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "magic", ".", "tobytes", "(", ")", ")", "\n", "f", ".", "write", "(", "w", ".", "tobytes", "(", ")", ")", "\n", "f", ".", "write", "(", "h", ".", "tobytes", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.batch_indexing_channel_first": [[120, 139], ["list", "batched_indices.expand.reshape", "batched_indices.expand.expand", "torch.gather", "torch.gather", "result.view.view", "utils.batch_indexing_channel_first.product"], "function", ["None"], ["\n", "\n", "", "", "def", "save_flow_png", "(", "filepath", ",", "flow", ",", "mask", "=", "None", ",", "scale", "=", "64.0", ")", ":", "\n", "    ", "assert", "flow", ".", "shape", "[", "2", "]", "==", "2", "\n", "assert", "np", ".", "abs", "(", "flow", ")", ".", "max", "(", ")", "<", "32767.0", "/", "scale", "\n", "flow", "=", "flow", "*", "scale", "\n", "flow", "=", "flow", "+", "32768.0", "\n", "\n", "if", "mask", "is", "None", ":", "\n", "        ", "mask", "=", "np", ".", "ones_like", "(", "flow", ")", "[", "...", ",", "0", "]", "\n", "", "else", ":", "\n", "        ", "mask", "=", "np", ".", "float32", "(", "mask", ">", "0", ")", "\n", "\n", "", "flow_img", "=", "np", ".", "concatenate", "(", "[", "\n", "mask", "[", "...", ",", "None", "]", ",", "\n", "flow", "[", "...", ",", "1", ":", "2", "]", ",", "\n", "flow", "[", "...", ",", "0", ":", "1", "]", "\n", "]", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "filepath", ",", "flow_img", ")", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.knn_interpolation": [[141, 158], ["csrc.k_nearest_neighbor", "utils.batch_indexing_channel_first", "torch.linalg.norm().clamp", "torch.linalg.norm().clamp", "utils.batch_indexing_channel_first", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.linalg.norm", "torch.linalg.norm"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.k_nearest_neighbor", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.batch_indexing_channel_first", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.batch_indexing_channel_first"], ["\n", "", "def", "load_disp_png", "(", "filepath", ")", ":", "\n", "    ", "array", "=", "cv2", ".", "imread", "(", "filepath", ",", "-", "1", ")", "\n", "valid_mask", "=", "array", ">", "0", "\n", "disp", "=", "array", ".", "astype", "(", "np", ".", "float32", ")", "/", "256.0", "\n", "disp", "[", "np", ".", "logical_not", "(", "valid_mask", ")", "]", "=", "-", "1.0", "\n", "return", "disp", ",", "valid_mask", "\n", "\n", "\n", "", "def", "save_disp_png", "(", "filepath", ",", "disp", ",", "mask", "=", "None", ")", ":", "\n", "    ", "if", "mask", "is", "None", ":", "\n", "        ", "mask", "=", "disp", ">", "0", "\n", "", "disp", "=", "np", ".", "uint16", "(", "disp", "*", "256.0", ")", "\n", "disp", "[", "np", ".", "logical_not", "(", "mask", ")", "]", "=", "0", "\n", "cv2", ".", "imwrite", "(", "filepath", ",", "disp", ")", "\n", "\n", "\n", "", "def", "load_calib", "(", "filepath", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.backwarp_3d": [[160, 171], ["utils.knn_interpolation"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.knn_interpolation"], ["        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "if", "line", ".", "startswith", "(", "'P_rect_02'", ")", ":", "\n", "                ", "proj_mat", "=", "line", ".", "split", "(", ")", "[", "1", ":", "]", "\n", "proj_mat", "=", "[", "float", "(", "param", ")", "for", "param", "in", "proj_mat", "]", "\n", "proj_mat", "=", "np", ".", "array", "(", "proj_mat", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "3", ",", "4", ")", "\n", "assert", "proj_mat", "[", "0", ",", "1", "]", "==", "proj_mat", "[", "1", ",", "0", "]", "==", "0", "\n", "assert", "proj_mat", "[", "2", ",", "0", "]", "==", "proj_mat", "[", "2", ",", "1", "]", "==", "0", "\n", "assert", "proj_mat", "[", "0", ",", "0", "]", "==", "proj_mat", "[", "1", ",", "1", "]", "\n", "assert", "proj_mat", "[", "2", ",", "2", "]", "==", "1", "\n", "\n", "", "", "", "return", "proj_mat", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.mesh_grid": [[174, 185], ["[].expand", "[].expand", "torch.stack", "torch.stack", "grid.permute.permute", "[].expand.transpose", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "zero_padding", "(", "inputs", ",", "pad_h", ",", "pad_w", ")", ":", "\n", "    ", "input_dim", "=", "len", "(", "inputs", ".", "shape", ")", "\n", "assert", "input_dim", "in", "[", "2", ",", "3", "]", "\n", "\n", "if", "input_dim", "==", "2", ":", "\n", "        ", "inputs", "=", "inputs", "[", "...", ",", "None", "]", "\n", "\n", "", "h", ",", "w", ",", "c", "=", "inputs", ".", "shape", "\n", "assert", "h", "<=", "pad_h", "and", "w", "<=", "pad_w", "\n", "\n", "result", "=", "np", ".", "zeros", "(", "[", "pad_h", ",", "pad_w", ",", "c", "]", ",", "dtype", "=", "inputs", ".", "dtype", ")", "\n", "result", "[", ":", "h", ",", ":", "w", "]", "=", "inputs", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.backwarp_2d": [[187, 200], ["x.size", "utils.mesh_grid", "utils.backwarp_2d.norm_grid"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.mesh_grid"], ["if", "input_dim", "==", "2", ":", "\n", "        ", "result", "=", "result", "[", "...", ",", "0", "]", "\n", "\n", "", "return", "result", "\n", "\n", "\n", "", "def", "disp2pc", "(", "disp", ",", "baseline", ",", "f", ",", "cx", ",", "cy", ",", "flow", "=", "None", ")", ":", "\n", "    ", "h", ",", "w", "=", "disp", ".", "shape", "\n", "depth", "=", "baseline", "*", "f", "/", "(", "disp", "+", "1e-5", ")", "\n", "\n", "xx", "=", "np", ".", "tile", "(", "np", ".", "arange", "(", "w", ",", "dtype", "=", "np", ".", "float32", ")", "[", "None", ",", ":", "]", ",", "(", "h", ",", "1", ")", ")", "\n", "yy", "=", "np", ".", "tile", "(", "np", ".", "arange", "(", "h", ",", "dtype", "=", "np", ".", "float32", ")", "[", ":", ",", "None", "]", ",", "(", "1", ",", "w", ")", ")", "\n", "\n", "if", "flow", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.convex_upsample": [[202, 216], ["torch.softmax.view", "torch.softmax", "torch.softmax", "torch.nn.functional.unfold", "torch.nn.functional.unfold", "up_flow.permute.view", "torch.sum", "torch.sum", "up_flow.permute.permute", "up_flow.permute.reshape"], "function", ["None"], ["y", "=", "(", "yy", "-", "cy", ")", "*", "depth", "/", "f", "\n", "", "else", ":", "\n", "        ", "x", "=", "(", "xx", "-", "cx", "+", "flow", "[", "...", ",", "0", "]", ")", "*", "depth", "/", "f", "\n", "y", "=", "(", "yy", "-", "cy", "+", "flow", "[", "...", ",", "1", "]", ")", "*", "depth", "/", "f", "\n", "\n", "", "pc", "=", "np", ".", "concatenate", "(", "[", "\n", "x", "[", ":", ",", ":", ",", "None", "]", ",", "\n", "y", "[", ":", ",", ":", ",", "None", "]", ",", "\n", "depth", "[", ":", ",", ":", ",", "None", "]", ",", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "pc", "\n", "\n", "\n", "", "def", "project_pc2image", "(", "pc", ",", "image_h", ",", "image_w", ",", "f", ",", "cx", "=", "None", ",", "cy", "=", "None", ",", "clip", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.resize_flow2d": [[218, 226], ["torch.nn.functional.interpolate"], "function", ["None"], ["\n", "cx", "=", "(", "image_w", "-", "1", ")", "/", "2", "if", "cx", "is", "None", "else", "cx", "\n", "cy", "=", "(", "image_h", "-", "1", ")", "/", "2", "if", "cy", "is", "None", "else", "cy", "\n", "\n", "image_x", "=", "cx", "+", "(", "f", "/", "depth", ")", "*", "pc_x", "\n", "image_y", "=", "cy", "+", "(", "f", "/", "depth", ")", "*", "pc_y", "\n", "\n", "if", "clip", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.resize_to_64x": [[228, 243], ["torch.nn.functional.interpolate", "torch.nn.functional.interpolate"], "function", ["None"], ["np", ".", "clip", "(", "image_y", "[", ":", ",", "None", "]", ",", "a_min", "=", "0", ",", "a_max", "=", "image_h", "-", "1", ")", ",", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "image_x", "[", ":", ",", "None", "]", ",", "\n", "image_y", "[", ":", ",", "None", "]", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "\n", "", "", "def", "viz_optical_flow", "(", "flow", ",", "max_flow", "=", "512", ")", ":", "\n", "    ", "n", "=", "8", "\n", "u", ",", "v", "=", "flow", "[", ":", ",", ":", ",", "0", "]", ",", "flow", "[", ":", ",", ":", ",", "1", "]", "\n", "mag", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "u", ")", "+", "np", ".", "square", "(", "v", ")", ")", "\n", "angle", "=", "np", ".", "arctan2", "(", "v", ",", "u", ")", "\n", "\n", "image_h", "=", "np", ".", "mod", "(", "angle", "/", "(", "2", "*", "np", ".", "pi", ")", "+", "1", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.pad_to_64x": [[245, 259], ["torch.nn.functional.pad", "torch.nn.functional.pad"], "function", ["None"], ["image_v", "=", "np", ".", "ones_like", "(", "image_s", ")", "\n", "\n", "image_hsv", "=", "np", ".", "stack", "(", "[", "image_h", ",", "image_s", ",", "image_v", "]", ",", "axis", "=", "2", ")", "\n", "image_rgb", "=", "hsv_to_rgb", "(", "image_hsv", ")", "\n", "image_rgb", "=", "np", ".", "uint8", "(", "image_rgb", "*", "255", ")", "\n", "\n", "return", "image_rgb", "\n", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.project_pc2image": [[261, 287], ["isinstance", "torch.cat", "torch.cat", "[].expand", "[].expand", "[].expand"], "function", ["None"], []], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.grid_sample_wrapper": [[289, 296], ["torch.cat", "torch.cat", "torch.nn.functional.grid_sample"], "function", ["None"], []], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.project_feat_with_nn_corr": [[298, 319], ["torch.no_grad", "torch.no_grad", "utils.mesh_grid", "grid.reshape.reshape", "utils.batch_indexing_channel_first", "utils.batch_indexing_channel_first", "torch.mean", "torch.mean", "torch.cat", "torch.cat", "final.reshape.reshape", "utils.grid_sample_wrapper", "utils.batch_indexing_channel_first", "csrc.k_nearest_neighbor", "feat_2d.reshape"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.mesh_grid", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.batch_indexing_channel_first", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.batch_indexing_channel_first", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.grid_sample_wrapper", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.batch_indexing_channel_first", "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.k_nearest_neighbor"], []], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.perspect2parallel": [[321, 348], ["[].expand", "[].expand", "[].expand", "torch.cat", "torch.cat", "torch.log", "torch.log", "min"], "function", ["None"], []], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.parallel2perspect": [[350, 379], ["[].expand", "[].expand", "[].expand", "torch.exp", "torch.exp", "torch.cat", "torch.cat", "min"], "function", ["None"], []], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.timer_func": [[381, 392], ["time.time", "func", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "print"], "function", ["None"], []], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.PyramidFeatureFuser2D.__init__": [[18, 27], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "utils.Conv2dNormRelu", "utils.Conv2dNormRelu", "utils.Conv2dNormRelu", "utils.Conv2dNormRelu"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["def", "__init__", "(", "self", ",", "in_channels_2d", ",", "in_channels_3d", ",", "norm", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mlps", "=", "nn", ".", "Sequential", "(", "\n", "Conv2dNormRelu", "(", "in_channels_3d", "+", "3", ",", "in_channels_3d", ",", "norm", "=", "norm", ")", ",", "\n", "Conv2dNormRelu", "(", "in_channels_3d", ",", "in_channels_3d", ",", "norm", "=", "norm", ")", ",", "\n", "Conv2dNormRelu", "(", "in_channels_3d", ",", "in_channels_3d", ",", "norm", "=", "norm", ")", ",", "\n", ")", "\n", "self", ".", "fuse", "=", "Conv2dNormRelu", "(", "in_channels_2d", "+", "in_channels_3d", ",", "in_channels_2d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.PyramidFeatureFuser2D.forward": [[28, 35], ["utils.project_feat_with_nn_corr", "pwc_fusion_core.PyramidFeatureFuser2D.mlps", "pwc_fusion_core.PyramidFeatureFuser2D.fuse", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.project_feat_with_nn_corr"], ["", "def", "forward", "(", "self", ",", "xy", ",", "feat_2d", ",", "feat_3d", ",", "nn_proj", "=", "None", ")", ":", "\n", "        ", "feat_3d_to_2d", "=", "project_feat_with_nn_corr", "(", "xy", ",", "feat_2d", ",", "feat_3d", ",", "nn_proj", "[", "...", ",", "0", "]", ")", "\n", "\n", "out", "=", "self", ".", "mlps", "(", "feat_3d_to_2d", ")", "\n", "out", "=", "self", ".", "fuse", "(", "torch", ".", "cat", "(", "[", "out", ",", "feat_2d", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.PyramidFeatureFuser3D.__init__": [[39, 48], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "utils.Conv1dNormRelu", "utils.Conv1dNormRelu", "utils.Conv1dNormRelu", "utils.Conv1dNormRelu"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["def", "__init__", "(", "self", ",", "in_channels_2d", ",", "in_channels_3d", ",", "norm", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mlps", "=", "nn", ".", "Sequential", "(", "\n", "Conv1dNormRelu", "(", "in_channels_2d", ",", "in_channels_2d", ",", "norm", "=", "norm", ")", ",", "\n", "Conv1dNormRelu", "(", "in_channels_2d", ",", "in_channels_2d", ",", "norm", "=", "norm", ")", ",", "\n", "Conv1dNormRelu", "(", "in_channels_2d", ",", "in_channels_2d", ",", "norm", "=", "norm", ")", ",", "\n", ")", "\n", "self", ".", "fuse", "=", "Conv1dNormRelu", "(", "in_channels_2d", "+", "in_channels_3d", ",", "in_channels_3d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.PyramidFeatureFuser3D.forward": [[49, 57], ["pwc_fusion_core.PyramidFeatureFuser3D.mlps", "pwc_fusion_core.PyramidFeatureFuser3D.fuse", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.grid_sample_wrapper", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.grid_sample_wrapper"], ["", "def", "forward", "(", "self", ",", "xy", ",", "feat_2d", ",", "feat_3d", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "feat_2d_to_3d", "=", "grid_sample_wrapper", "(", "feat_2d", ",", "xy", ")", "\n", "\n", "", "out", "=", "self", ".", "mlps", "(", "feat_2d_to_3d", ")", "\n", "out", "=", "self", ".", "fuse", "(", "torch", ".", "cat", "(", "[", "out", ",", "feat_3d", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.CorrFeatureFuser2D.__init__": [[61, 70], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "utils.Conv2dNormRelu", "utils.Conv2dNormRelu", "utils.Conv2dNormRelu", "utils.Conv2dNormRelu"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["def", "__init__", "(", "self", ",", "in_channels_2d", ",", "in_channels_3d", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mlps", "=", "nn", ".", "Sequential", "(", "\n", "Conv2dNormRelu", "(", "in_channels_3d", "+", "5", ",", "in_channels_3d", ")", ",", "\n", "Conv2dNormRelu", "(", "in_channels_3d", ",", "in_channels_3d", ")", ",", "\n", "Conv2dNormRelu", "(", "in_channels_3d", ",", "in_channels_3d", ")", ",", "\n", ")", "\n", "self", ".", "fuse", "=", "Conv2dNormRelu", "(", "in_channels_2d", "+", "in_channels_3d", ",", "in_channels_2d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.CorrFeatureFuser2D.forward": [[71, 81], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.project_feat_with_nn_corr", "last_flow_2d.detach", "pwc_fusion_core.CorrFeatureFuser2D.mlps", "pwc_fusion_core.CorrFeatureFuser2D.fuse", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.project_feat_with_nn_corr"], ["", "def", "forward", "(", "self", ",", "xy", ",", "feat_2d", ",", "feat_3d", ",", "last_flow_2d", ",", "last_flow_3d_to_2d", ",", "nn_proj", "=", "None", ")", ":", "\n", "        ", "feat_3d", "=", "torch", ".", "cat", "(", "[", "feat_3d", ",", "last_flow_3d_to_2d", "]", ",", "dim", "=", "1", ")", "\n", "\n", "feat_3d_to_2d", "=", "project_feat_with_nn_corr", "(", "xy", ",", "feat_2d", ",", "feat_3d", ",", "nn_proj", "[", "...", ",", "0", "]", ")", "\n", "feat_3d_to_2d", "[", ":", ",", "-", "2", ":", "]", "-=", "last_flow_2d", ".", "detach", "(", ")", "\n", "\n", "out", "=", "self", ".", "mlps", "(", "feat_3d_to_2d", ")", "\n", "out", "=", "self", ".", "fuse", "(", "torch", ".", "cat", "(", "[", "out", ",", "feat_2d", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.CorrFeatureFuser3D.__init__": [[85, 94], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "utils.Conv1dNormRelu", "utils.Conv1dNormRelu", "utils.Conv1dNormRelu", "utils.Conv1dNormRelu"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["def", "__init__", "(", "self", ",", "in_channels_2d", ",", "in_channels_3d", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mlps", "=", "nn", ".", "Sequential", "(", "\n", "Conv1dNormRelu", "(", "in_channels_2d", "+", "2", ",", "in_channels_2d", ")", ",", "\n", "Conv1dNormRelu", "(", "in_channels_2d", ",", "in_channels_2d", ")", ",", "\n", "Conv1dNormRelu", "(", "in_channels_2d", ",", "in_channels_2d", ")", ",", "\n", ")", "\n", "self", ".", "fuse", "=", "Conv1dNormRelu", "(", "in_channels_2d", "+", "in_channels_3d", ",", "in_channels_3d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.CorrFeatureFuser3D.forward": [[95, 106], ["pwc_fusion_core.CorrFeatureFuser3D.mlps", "pwc_fusion_core.CorrFeatureFuser3D.fuse", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.grid_sample_wrapper", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.grid_sample_wrapper"], ["", "def", "forward", "(", "self", ",", "xy", ",", "feat_corr_2d", ",", "feat_corr_3d", ",", "last_flow_3d", ",", "last_flow_2d_to_3d", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "feat_2d_with_flow", "=", "torch", ".", "cat", "(", "[", "feat_corr_2d", ",", "last_flow_2d_to_3d", "]", ",", "dim", "=", "1", ")", "\n", "feat_2d_to_3d_with_flow", "=", "grid_sample_wrapper", "(", "feat_2d_with_flow", ",", "xy", ")", "\n", "feat_2d_to_3d", "=", "feat_2d_to_3d_with_flow", "\n", "feat_2d_to_3d", "[", ":", ",", "-", "2", ":", "]", "-=", "last_flow_3d", "[", ":", ",", ":", "2", "]", "\n", "\n", "", "out", "=", "self", ".", "mlps", "(", "feat_2d_to_3d", ")", "\n", "out", "=", "self", ".", "fuse", "(", "torch", ".", "cat", "(", "[", "out", ",", "feat_corr_3d", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.DecoderFeatureFuser2D.__init__": [[110, 119], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "utils.Conv2dNormRelu", "utils.Conv2dNormRelu", "utils.Conv2dNormRelu", "utils.Conv2dNormRelu"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["def", "__init__", "(", "self", ",", "in_channels_2d", ",", "in_channels_3d", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mlps", "=", "nn", ".", "Sequential", "(", "\n", "Conv2dNormRelu", "(", "in_channels_3d", "+", "3", ",", "in_channels_3d", ")", ",", "\n", "Conv2dNormRelu", "(", "in_channels_3d", ",", "in_channels_3d", ")", ",", "\n", "Conv2dNormRelu", "(", "in_channels_3d", ",", "in_channels_3d", ")", ",", "\n", ")", "\n", "self", ".", "fuse", "=", "Conv2dNormRelu", "(", "in_channels_2d", "+", "in_channels_3d", ",", "in_channels_2d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.DecoderFeatureFuser2D.forward": [[120, 127], ["utils.project_feat_with_nn_corr", "pwc_fusion_core.DecoderFeatureFuser2D.mlps", "pwc_fusion_core.DecoderFeatureFuser2D.fuse", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.project_feat_with_nn_corr"], ["", "def", "forward", "(", "self", ",", "xy", ",", "feat_2d", ",", "feat_3d", ",", "nn_proj", "=", "None", ")", ":", "\n", "        ", "feat_3d_to_2d", "=", "project_feat_with_nn_corr", "(", "xy", ",", "feat_2d", ",", "feat_3d", ",", "nn_proj", "[", "...", ",", "0", "]", ")", "\n", "\n", "out", "=", "self", ".", "mlps", "(", "feat_3d_to_2d", ")", "\n", "out", "=", "self", ".", "fuse", "(", "torch", ".", "cat", "(", "[", "out", ",", "feat_2d", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.DecoderFeatureFuser3D.__init__": [[131, 134], ["torch.Module.__init__", "utils.Conv1dNormRelu"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["def", "__init__", "(", "self", ",", "in_channels_2d", ",", "in_channels_3d", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fuse", "=", "Conv1dNormRelu", "(", "in_channels_2d", "+", "in_channels_3d", ",", "in_channels_3d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.DecoderFeatureFuser3D.forward": [[135, 140], ["pwc_fusion_core.DecoderFeatureFuser3D.fuse", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.grid_sample_wrapper", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.grid_sample_wrapper"], ["", "def", "forward", "(", "self", ",", "xy", ",", "feat_2d", ",", "feat_3d", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "feat_2d_to_3d", "=", "grid_sample_wrapper", "(", "feat_2d", ",", "xy", ")", "\n", "", "out", "=", "self", ".", "fuse", "(", "torch", ".", "cat", "(", "[", "feat_2d_to_3d", ",", "feat_3d", "]", ",", "dim", "=", "1", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.PWCFusionCore.__init__": [[146, 258], ["torch.Module.__init__", "pwc2d_core.FeaturePyramid2D", "torch.ModuleList", "torch.ModuleList", "pwc2d_core.FlowEstimatorDense2D", "pwc2d_core.ContextNetwork2D", "torch.Sequential", "torch.Sequential", "pwc3d_core.FeaturePyramid3D", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pwc3d_core.FlowEstimator3D", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pwc_fusion_core.DecoderFeatureFuser2D", "pwc_fusion_core.DecoderFeatureFuser3D", "torch.Conv2d", "torch.Conv2d", "torch.Conv1d", "torch.Conv1d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Identity", "torch.Identity", "utils.Conv2dNormRelu", "utils.Conv2dNormRelu", "utils.Conv2dNormRelu", "utils.Conv2dNormRelu", "utils.Conv2dNormRelu", "torch.Identity", "torch.Identity", "utils.Conv1dNormRelu", "utils.Conv1dNormRelu", "utils.Conv1dNormRelu", "utils.Conv1dNormRelu", "utils.Conv1dNormRelu", "torch.Identity", "torch.Identity", "pwc3d_core.Correlation3D", "pwc3d_core.Correlation3D", "pwc3d_core.Correlation3D", "pwc3d_core.Correlation3D", "pwc3d_core.Correlation3D", "torch.Identity", "torch.Identity", "utils.Conv1dNormRelu", "utils.Conv1dNormRelu", "utils.Conv1dNormRelu", "utils.Conv1dNormRelu", "utils.Conv1dNormRelu", "torch.Identity", "torch.Identity", "pwc_fusion_core.PyramidFeatureFuser2D", "pwc_fusion_core.PyramidFeatureFuser2D", "pwc_fusion_core.PyramidFeatureFuser2D", "pwc_fusion_core.PyramidFeatureFuser2D", "pwc_fusion_core.PyramidFeatureFuser2D", "torch.Identity", "torch.Identity", "pwc_fusion_core.PyramidFeatureFuser3D", "pwc_fusion_core.PyramidFeatureFuser3D", "pwc_fusion_core.PyramidFeatureFuser3D", "pwc_fusion_core.PyramidFeatureFuser3D", "pwc_fusion_core.PyramidFeatureFuser3D", "torch.Identity", "torch.Identity", "pwc_fusion_core.CorrFeatureFuser2D", "pwc_fusion_core.CorrFeatureFuser2D", "pwc_fusion_core.CorrFeatureFuser2D", "pwc_fusion_core.CorrFeatureFuser2D", "pwc_fusion_core.CorrFeatureFuser2D", "torch.Identity", "torch.Identity", "pwc_fusion_core.CorrFeatureFuser3D", "pwc_fusion_core.CorrFeatureFuser3D", "pwc_fusion_core.CorrFeatureFuser3D", "pwc_fusion_core.CorrFeatureFuser3D", "pwc_fusion_core.CorrFeatureFuser3D"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["def", "__init__", "(", "self", ",", "cfgs2d", ",", "cfgs3d", ",", "debug", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfgs2d", ",", "self", ".", "cfgs3d", ",", "self", ".", "debug", "=", "cfgs2d", ",", "cfgs3d", ",", "debug", "\n", "corr_channels_2d", "=", "(", "2", "*", "cfgs2d", ".", "max_displacement", "+", "1", ")", "**", "2", "\n", "\n", "# PWC-Net 2D (IRR-PWC)", "\n", "self", ".", "feature_pyramid_2d", "=", "FeaturePyramid2D", "(", "\n", "[", "3", ",", "16", ",", "32", ",", "64", ",", "96", ",", "128", ",", "192", "]", ",", "\n", "norm", "=", "cfgs2d", ".", "norm", ".", "feature_pyramid", "\n", ")", "\n", "self", ".", "feature_aligners_2d", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Identity", "(", ")", ",", "\n", "Conv2dNormRelu", "(", "32", ",", "64", ")", ",", "\n", "Conv2dNormRelu", "(", "64", ",", "64", ")", ",", "\n", "Conv2dNormRelu", "(", "96", ",", "64", ")", ",", "\n", "Conv2dNormRelu", "(", "128", ",", "64", ")", ",", "\n", "Conv2dNormRelu", "(", "192", ",", "64", ")", ",", "\n", "]", ")", "\n", "self", ".", "flow_estimator_2d", "=", "FlowEstimatorDense2D", "(", "\n", "[", "64", "+", "corr_channels_2d", "+", "2", "+", "32", ",", "128", ",", "128", ",", "96", ",", "64", ",", "32", "]", ",", "\n", "norm", "=", "cfgs2d", ".", "norm", ".", "flow_estimator", ",", "\n", "conv_last", "=", "False", ",", "\n", ")", "\n", "self", ".", "context_network_2d", "=", "ContextNetwork2D", "(", "\n", "[", "self", ".", "flow_estimator_2d", ".", "flow_feat_dim", "+", "2", ",", "128", ",", "128", ",", "128", ",", "96", ",", "64", ",", "32", "]", ",", "\n", "dilations", "=", "[", "1", ",", "2", ",", "4", ",", "8", ",", "16", ",", "1", "]", ",", "\n", "norm", "=", "cfgs2d", ".", "norm", ".", "context_network", "\n", ")", "\n", "self", ".", "up_mask_head_2d", "=", "nn", ".", "Sequential", "(", "# for convex upsampling (see RAFT)", "\n", "nn", ".", "Conv2d", "(", "32", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "4", "*", "4", "*", "9", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", ")", "\n", "\n", "# PWC-Net 3D (Point-PWC)", "\n", "self", ".", "feature_pyramid_3d", "=", "FeaturePyramid3D", "(", "\n", "[", "16", ",", "32", ",", "64", ",", "96", ",", "128", ",", "192", "]", ",", "\n", "norm", "=", "cfgs3d", ".", "norm", ".", "feature_pyramid", ",", "\n", "k", "=", "cfgs3d", ".", "k", ",", "\n", ")", "\n", "self", ".", "feature_aligners_3d", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Identity", "(", ")", ",", "\n", "Conv1dNormRelu", "(", "32", ",", "64", ")", ",", "\n", "Conv1dNormRelu", "(", "64", ",", "64", ")", ",", "\n", "Conv1dNormRelu", "(", "96", ",", "64", ")", ",", "\n", "Conv1dNormRelu", "(", "128", ",", "64", ")", ",", "\n", "Conv1dNormRelu", "(", "192", ",", "64", ")", ",", "\n", "]", ")", "\n", "self", ".", "correlations_3d", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Identity", "(", ")", ",", "\n", "Correlation3D", "(", "32", ",", "32", ",", "k", "=", "self", ".", "cfgs3d", ".", "k", ")", ",", "\n", "Correlation3D", "(", "64", ",", "64", ",", "k", "=", "self", ".", "cfgs3d", ".", "k", ")", ",", "\n", "Correlation3D", "(", "96", ",", "96", ",", "k", "=", "self", ".", "cfgs3d", ".", "k", ")", ",", "\n", "Correlation3D", "(", "128", ",", "128", ",", "k", "=", "self", ".", "cfgs3d", ".", "k", ")", ",", "\n", "Correlation3D", "(", "192", ",", "192", ",", "k", "=", "self", ".", "cfgs3d", ".", "k", ")", ",", "\n", "]", ")", "\n", "self", ".", "correlation_aligners_3d", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Identity", "(", ")", ",", "\n", "Conv1dNormRelu", "(", "32", ",", "64", ")", ",", "\n", "Conv1dNormRelu", "(", "64", ",", "64", ")", ",", "\n", "Conv1dNormRelu", "(", "96", ",", "64", ")", ",", "\n", "Conv1dNormRelu", "(", "128", ",", "64", ")", ",", "\n", "Conv1dNormRelu", "(", "192", ",", "64", ")", ",", "\n", "]", ")", "\n", "self", ".", "flow_estimator_3d", "=", "FlowEstimator3D", "(", "\n", "[", "64", "+", "64", "+", "3", "+", "64", ",", "128", ",", "128", ",", "64", "]", ",", "\n", "cfgs3d", ".", "norm", ".", "flow_estimator", ",", "\n", "conv_last", "=", "False", ",", "\n", "k", "=", "self", ".", "cfgs3d", ".", "k", ",", "\n", ")", "\n", "\n", "# Bi-CLFM for pyramid features", "\n", "self", ".", "pyramid_feat_fusers_2d", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Identity", "(", ")", ",", "\n", "PyramidFeatureFuser2D", "(", "32", ",", "32", ",", "norm", "=", "cfgs2d", ".", "norm", ".", "feature_pyramid", ")", ",", "\n", "PyramidFeatureFuser2D", "(", "64", ",", "64", ",", "norm", "=", "cfgs2d", ".", "norm", ".", "feature_pyramid", ")", ",", "\n", "PyramidFeatureFuser2D", "(", "96", ",", "96", ",", "norm", "=", "cfgs2d", ".", "norm", ".", "feature_pyramid", ")", ",", "\n", "PyramidFeatureFuser2D", "(", "128", ",", "128", ",", "norm", "=", "cfgs2d", ".", "norm", ".", "feature_pyramid", ")", ",", "\n", "PyramidFeatureFuser2D", "(", "192", ",", "192", ",", "norm", "=", "cfgs2d", ".", "norm", ".", "feature_pyramid", ")", ",", "\n", "]", ")", "\n", "self", ".", "pyramid_feat_fusers_3d", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Identity", "(", ")", ",", "\n", "PyramidFeatureFuser3D", "(", "32", ",", "32", ",", "norm", "=", "cfgs3d", ".", "norm", ".", "feature_pyramid", ")", ",", "\n", "PyramidFeatureFuser3D", "(", "64", ",", "64", ",", "norm", "=", "cfgs3d", ".", "norm", ".", "feature_pyramid", ")", ",", "\n", "PyramidFeatureFuser3D", "(", "96", ",", "96", ",", "norm", "=", "cfgs3d", ".", "norm", ".", "feature_pyramid", ")", ",", "\n", "PyramidFeatureFuser3D", "(", "128", ",", "128", ",", "norm", "=", "cfgs3d", ".", "norm", ".", "feature_pyramid", ")", ",", "\n", "PyramidFeatureFuser3D", "(", "192", ",", "192", ",", "norm", "=", "cfgs3d", ".", "norm", ".", "feature_pyramid", ")", ",", "\n", "]", ")", "\n", "\n", "# Bi-CLFM for correlation features", "\n", "self", ".", "corr_feat_fusers_2d", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Identity", "(", ")", ",", "\n", "CorrFeatureFuser2D", "(", "corr_channels_2d", ",", "32", ")", ",", "\n", "CorrFeatureFuser2D", "(", "corr_channels_2d", ",", "64", ")", ",", "\n", "CorrFeatureFuser2D", "(", "corr_channels_2d", ",", "96", ")", ",", "\n", "CorrFeatureFuser2D", "(", "corr_channels_2d", ",", "128", ")", ",", "\n", "CorrFeatureFuser2D", "(", "corr_channels_2d", ",", "192", ")", ",", "\n", "]", ")", "\n", "self", ".", "corr_feat_fusers_3d", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Identity", "(", ")", ",", "\n", "CorrFeatureFuser3D", "(", "corr_channels_2d", ",", "32", ")", ",", "\n", "CorrFeatureFuser3D", "(", "corr_channels_2d", ",", "64", ")", ",", "\n", "CorrFeatureFuser3D", "(", "corr_channels_2d", ",", "96", ")", ",", "\n", "CorrFeatureFuser3D", "(", "corr_channels_2d", ",", "128", ")", ",", "\n", "CorrFeatureFuser3D", "(", "corr_channels_2d", ",", "192", ")", ",", "\n", "]", ")", "\n", "\n", "# Bi-CLFM for decoder features", "\n", "self", ".", "estimator_feat_fuser_2d", "=", "DecoderFeatureFuser2D", "(", "self", ".", "flow_estimator_2d", ".", "flow_feat_dim", ",", "64", ")", "\n", "self", ".", "estimator_feat_fuser_3d", "=", "DecoderFeatureFuser3D", "(", "self", ".", "flow_estimator_2d", ".", "flow_feat_dim", ",", "64", ")", "\n", "self", ".", "conv_last_2d", "=", "nn", ".", "Conv2d", "(", "self", ".", "flow_estimator_2d", ".", "flow_feat_dim", ",", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_last_3d", "=", "nn", ".", "Conv1d", "(", "64", ",", "3", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.PWCFusionCore.encode": [[259, 263], ["pwc_fusion_core.PWCFusionCore.feature_pyramid_2d", "pwc_fusion_core.PWCFusionCore.feature_pyramid_3d"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "image", ",", "xyzs", ")", ":", "\n", "        ", "feats_2d", "=", "self", ".", "feature_pyramid_2d", "(", "image", ")", "\n", "feats_3d", "=", "self", ".", "feature_pyramid_3d", "(", "xyzs", ")", "\n", "return", "feats_2d", ",", "feats_3d", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.PWCFusionCore.decode": [[264, 388], ["range", "utils.convex_upsample", "range", "range", "len", "len", "len", "len", "len", "len", "utils.project_pc2image", "utils.project_pc2image", "utils.mesh_grid", "grid.reshape.reshape.reshape", "csrc.k_nearest_neighbor", "csrc.k_nearest_neighbor", "csrc.k_nearest_neighbor", "torch.nn.functional.leaky_relu", "torch.nn.functional.leaky_relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pwc_fusion_core.PWCFusionCore.flow_estimator_2d", "pwc_fusion_core.PWCFusionCore.flow_estimator_3d", "pwc_fusion_core.PWCFusionCore.estimator_feat_fuser_2d", "pwc_fusion_core.PWCFusionCore.estimator_feat_fuser_3d", "pwc_fusion_core.PWCFusionCore.conv_last_2d", "pwc_fusion_core.PWCFusionCore.conv_last_3d", "pwc_fusion_core.PWCFusionCore.context_network_2d", "flows_2d.append", "flows_3d.append", "flow_feats_2d.append", "flow_feats_3d.append", "pwc_fusion_core.PWCFusionCore.up_mask_head_2d", "len", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "len", "utils.knn_interpolation", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "utils.backwarp_2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.knn_interpolation", "utils.backwarp_3d", "csrc.correlation2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "f.float", "f.float", "len"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.convex_upsample", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.project_pc2image", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.project_pc2image", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.mesh_grid", "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.k_nearest_neighbor", "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.k_nearest_neighbor", "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.k_nearest_neighbor", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.knn_interpolation", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.backwarp_2d", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.knn_interpolation", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.backwarp_3d", "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.correlation2d"], ["", "def", "decode", "(", "self", ",", "xyzs1", ",", "xyzs2", ",", "feats1_2d", ",", "feats2_2d", ",", "feats1_3d", ",", "feats2_3d", ",", "camera_info", ")", ":", "\n", "        ", "assert", "len", "(", "xyzs1", ")", "==", "len", "(", "xyzs2", ")", "==", "len", "(", "feats1_2d", ")", "==", "len", "(", "feats2_2d", ")", "==", "len", "(", "feats1_3d", ")", "==", "len", "(", "feats2_3d", ")", "\n", "\n", "flows_2d", ",", "flows_3d", ",", "flow_feats_2d", ",", "flow_feats_3d", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "level", "in", "range", "(", "len", "(", "xyzs1", ")", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "xyz1", ",", "feat1_2d", ",", "feat1_3d", "=", "xyzs1", "[", "level", "]", ",", "feats1_2d", "[", "level", "]", ",", "feats1_3d", "[", "level", "]", "\n", "xyz2", ",", "feat2_2d", ",", "feat2_3d", "=", "xyzs2", "[", "level", "]", ",", "feats2_2d", "[", "level", "]", ",", "feats2_3d", "[", "level", "]", "\n", "\n", "batch_size", ",", "image_h", ",", "image_w", "=", "feat1_2d", ".", "shape", "[", "0", "]", ",", "feat1_2d", ".", "shape", "[", "2", "]", ",", "feat1_2d", ".", "shape", "[", "3", "]", "\n", "n_points", "=", "xyz1", ".", "shape", "[", "-", "1", "]", "\n", "\n", "# project point cloud to image", "\n", "xy1", "=", "project_pc2image", "(", "xyz1", ",", "camera_info", ")", "\n", "xy2", "=", "project_pc2image", "(", "xyz2", ",", "camera_info", ")", "\n", "\n", "# sensor coordinate -> image coordinate", "\n", "sensor_h", ",", "sensor_w", "=", "camera_info", "[", "'sensor_h'", "]", ",", "camera_info", "[", "'sensor_w'", "]", "\n", "xy1", "[", ":", ",", "0", "]", "*=", "(", "image_w", "-", "1", ")", "/", "(", "sensor_w", "-", "1", ")", "\n", "xy1", "[", ":", ",", "1", "]", "*=", "(", "image_h", "-", "1", ")", "/", "(", "sensor_h", "-", "1", ")", "\n", "xy2", "[", ":", ",", "0", "]", "*=", "(", "image_w", "-", "1", ")", "/", "(", "sensor_w", "-", "1", ")", "\n", "xy2", "[", ":", ",", "1", "]", "*=", "(", "image_h", "-", "1", ")", "/", "(", "sensor_h", "-", "1", ")", "\n", "\n", "# pre-compute knn indices", "\n", "grid", "=", "mesh_grid", "(", "batch_size", ",", "image_h", ",", "image_w", ",", "xy1", ".", "device", ")", "# [B, 2, H, W]", "\n", "grid", "=", "grid", ".", "reshape", "(", "[", "batch_size", ",", "2", ",", "-", "1", "]", ")", "# [B, 2, HW]", "\n", "nn_proj1", "=", "k_nearest_neighbor", "(", "xy1", ",", "grid", ",", "k", "=", "1", ")", "# [B, HW, k]", "\n", "nn_proj2", "=", "k_nearest_neighbor", "(", "xy2", ",", "grid", ",", "k", "=", "1", ")", "# [B, HW, k]", "\n", "knn_1in1", "=", "k_nearest_neighbor", "(", "xyz1", ",", "xyz1", ",", "k", "=", "self", ".", "cfgs3d", ".", "k", ")", "# [bs, n_points, k]", "\n", "\n", "# fuse pyramid features", "\n", "feat1_2d_fused", "=", "self", ".", "pyramid_feat_fusers_2d", "[", "level", "]", "(", "xy1", ",", "feat1_2d", ",", "feat1_3d", ",", "nn_proj1", ")", "\n", "feat2_2d_fused", "=", "self", ".", "pyramid_feat_fusers_2d", "[", "level", "]", "(", "xy2", ",", "feat2_2d", ",", "feat2_3d", ",", "nn_proj2", ")", "\n", "feat1_3d_fused", "=", "self", ".", "pyramid_feat_fusers_3d", "[", "level", "]", "(", "xy1", ",", "feat1_2d", ",", "feat1_3d", ")", "\n", "feat2_3d_fused", "=", "self", ".", "pyramid_feat_fusers_3d", "[", "level", "]", "(", "xy2", ",", "feat2_2d", ",", "feat2_3d", ")", "\n", "feat1_2d", ",", "feat2_2d", "=", "feat1_2d_fused", ",", "feat2_2d_fused", "\n", "feat1_3d", ",", "feat2_3d", "=", "feat1_3d_fused", ",", "feat2_3d_fused", "\n", "\n", "if", "level", "==", "len", "(", "xyzs1", ")", "-", "1", ":", "\n", "                ", "last_flow_2d", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "2", ",", "image_h", ",", "image_w", "]", ",", "dtype", "=", "xy1", ".", "dtype", ",", "device", "=", "xy1", ".", "device", ")", "\n", "last_flow_3d", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "3", ",", "n_points", "]", ",", "dtype", "=", "xy1", ".", "dtype", ",", "device", "=", "xy1", ".", "device", ")", "\n", "last_flow_feat_2d", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "32", ",", "image_h", ",", "image_w", "]", ",", "dtype", "=", "xy1", ".", "dtype", ",", "device", "=", "xy1", ".", "device", ")", "\n", "last_flow_feat_3d", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "64", ",", "n_points", "]", ",", "dtype", "=", "xy1", ".", "dtype", ",", "device", "=", "xy1", ".", "device", ")", "\n", "xyz2_warp", ",", "feat2_2d_warp", "=", "xyz2", ",", "feat2_2d", "\n", "", "else", ":", "\n", "# upsample 2d flow and backwarp", "\n", "                ", "last_flow_2d", "=", "interpolate", "(", "flows_2d", "[", "-", "1", "]", "*", "2", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "last_flow_feat_2d", "=", "interpolate", "(", "flow_feats_2d", "[", "-", "1", "]", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "feat2_2d_warp", "=", "backwarp_2d", "(", "feat2_2d", ",", "last_flow_2d", ",", "padding_mode", "=", "'border'", ")", "\n", "\n", "# upsample 3d flow and backwarp", "\n", "flow_with_feat_3d", "=", "torch", ".", "cat", "(", "[", "flows_3d", "[", "-", "1", "]", ",", "flow_feats_3d", "[", "-", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "flow_with_feat_upsampled_3d", "=", "knn_interpolation", "(", "xyzs1", "[", "level", "+", "1", "]", ",", "flow_with_feat_3d", ",", "xyz1", ")", "\n", "last_flow_3d", "=", "flow_with_feat_upsampled_3d", "[", ":", ",", ":", "3", ",", ":", "]", "\n", "last_flow_feat_3d", "=", "flow_with_feat_upsampled_3d", "[", ":", ",", "3", ":", ",", ":", "]", "\n", "xyz2_warp", "=", "backwarp_3d", "(", "xyz1", ",", "xyz2", ",", "last_flow_3d", ")", "\n", "\n", "# correlation (2D & 3D)", "\n", "", "feat_corr_3d", "=", "self", ".", "correlations_3d", "[", "level", "]", "(", "xyz1", ",", "feat1_3d", ",", "xyz2_warp", ",", "feat2_3d", ",", "knn_1in1", ")", "\n", "feat_corr_2d", "=", "leaky_relu", "(", "correlation2d", "(", "feat1_2d", ",", "feat2_2d_warp", ",", "self", ".", "cfgs2d", ".", "max_displacement", ")", ",", "0.1", ")", "\n", "\n", "# fuse correlation features", "\n", "last_flow_3d_to_2d", "=", "torch", ".", "cat", "(", "[", "\n", "last_flow_3d", "[", ":", ",", "0", ":", "1", "]", "*", "(", "image_w", "-", "1", ")", "/", "(", "sensor_w", "-", "1", ")", ",", "\n", "last_flow_3d", "[", ":", ",", "1", ":", "2", "]", "*", "(", "image_h", "-", "1", ")", "/", "(", "sensor_h", "-", "1", ")", ",", "\n", "]", ",", "dim", "=", "1", ")", "\n", "last_flow_2d_to_3d", "=", "torch", ".", "cat", "(", "[", "\n", "last_flow_2d", "[", ":", ",", "0", ":", "1", "]", "*", "(", "sensor_w", "-", "1", ")", "/", "(", "image_w", "-", "1", ")", ",", "\n", "last_flow_2d", "[", ":", ",", "1", ":", "2", "]", "*", "(", "sensor_h", "-", "1", ")", "/", "(", "image_h", "-", "1", ")", ",", "\n", "]", ",", "dim", "=", "1", ")", "\n", "feat_corr_2d_fused", "=", "self", ".", "corr_feat_fusers_2d", "[", "level", "]", "(", "\n", "xy1", ",", "feat_corr_2d", ",", "feat_corr_3d", ",", "last_flow_2d", ",", "last_flow_3d_to_2d", ",", "nn_proj1", "\n", ")", "\n", "feat_corr_3d_fused", "=", "self", ".", "corr_feat_fusers_3d", "[", "level", "]", "(", "\n", "xy1", ",", "feat_corr_2d", ",", "feat_corr_3d", ",", "last_flow_3d", ",", "last_flow_2d_to_3d", "\n", ")", "\n", "feat_corr_2d", ",", "feat_corr_3d", "=", "feat_corr_2d_fused", ",", "feat_corr_3d_fused", "\n", "\n", "# align features using 1x1 convolution", "\n", "feat1_2d", "=", "self", ".", "feature_aligners_2d", "[", "level", "]", "(", "feat1_2d", ")", "\n", "feat1_3d", "=", "self", ".", "feature_aligners_3d", "[", "level", "]", "(", "feat1_3d", ")", "\n", "feat_corr_3d", "=", "self", ".", "correlation_aligners_3d", "[", "level", "]", "(", "feat_corr_3d", ")", "\n", "\n", "# flow decoder (or estimator)", "\n", "x_2d", "=", "torch", ".", "cat", "(", "[", "feat_corr_2d", ",", "feat1_2d", ",", "last_flow_2d", ",", "last_flow_feat_2d", "]", ",", "dim", "=", "1", ")", "\n", "x_3d", "=", "torch", ".", "cat", "(", "[", "feat_corr_3d", ",", "feat1_3d", ",", "last_flow_3d", ",", "last_flow_feat_3d", "]", ",", "dim", "=", "1", ")", "\n", "flow_feat_2d", "=", "self", ".", "flow_estimator_2d", "(", "x_2d", ")", "# [bs, 96, image_h, image_w]", "\n", "flow_feat_3d", "=", "self", ".", "flow_estimator_3d", "(", "xyz1", ",", "x_3d", ",", "knn_1in1", ")", "# [bs, 64, n_points]", "\n", "\n", "# fuse decoder features", "\n", "flow_feat_2d_fused", "=", "self", ".", "estimator_feat_fuser_2d", "(", "xy1", ",", "flow_feat_2d", ",", "flow_feat_3d", ",", "nn_proj1", ")", "\n", "flow_feat_3d_fused", "=", "self", ".", "estimator_feat_fuser_3d", "(", "xy1", ",", "flow_feat_2d", ",", "flow_feat_3d", ")", "\n", "flow_feat_2d", ",", "flow_feat_3d", "=", "flow_feat_2d_fused", ",", "flow_feat_3d_fused", "\n", "\n", "# flow prediction", "\n", "flow_delta_2d", "=", "self", ".", "conv_last_2d", "(", "flow_feat_2d", ")", "\n", "flow_delta_3d", "=", "self", ".", "conv_last_3d", "(", "flow_feat_3d", ")", "\n", "\n", "# residual connection", "\n", "flow_2d", "=", "last_flow_2d", "+", "flow_delta_2d", "\n", "flow_3d", "=", "last_flow_3d", "+", "flow_delta_3d", "\n", "\n", "# context network (2D only)", "\n", "flow_feat_2d", ",", "flow_delta_2d", "=", "self", ".", "context_network_2d", "(", "torch", ".", "cat", "(", "[", "flow_feat_2d", ",", "flow_2d", "]", ",", "dim", "=", "1", ")", ")", "\n", "flow_2d", "=", "flow_delta_2d", "+", "flow_2d", "\n", "\n", "# save results", "\n", "flows_2d", ".", "append", "(", "flow_2d", ")", "\n", "flows_3d", ".", "append", "(", "flow_3d", ")", "\n", "flow_feats_2d", ".", "append", "(", "flow_feat_2d", ")", "\n", "flow_feats_3d", ".", "append", "(", "flow_feat_3d", ")", "\n", "\n", "", "flows_2d", "=", "[", "f", ".", "float", "(", ")", "for", "f", "in", "flows_2d", "]", "[", ":", ":", "-", "1", "]", "\n", "flows_3d", "=", "[", "f", ".", "float", "(", ")", "for", "f", "in", "flows_3d", "]", "[", ":", ":", "-", "1", "]", "\n", "\n", "# convex upsamling module, from RAFT", "\n", "flows_2d", "[", "0", "]", "=", "convex_upsample", "(", "flows_2d", "[", "0", "]", ",", "self", ".", "up_mask_head_2d", "(", "flow_feats_2d", "[", "-", "1", "]", ")", ",", "scale_factor", "=", "4", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "flows_2d", ")", ")", ":", "\n", "            ", "flows_2d", "[", "i", "]", "=", "interpolate", "(", "flows_2d", "[", "i", "]", "*", "4", ",", "scale_factor", "=", "4", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "flows_3d", ")", ")", ":", "\n", "            ", "flows_3d", "[", "i", "]", "=", "knn_interpolation", "(", "xyzs1", "[", "i", "+", "1", "]", ",", "flows_3d", "[", "i", "]", ",", "xyzs1", "[", "i", "]", ")", "\n", "\n", "", "return", "flows_2d", ",", "flows_3d", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__": [[11, 17], ["torch.Module.__init__", "pwc_fusion_core.PWCFusionCore"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfgs", ")", ":", "\n", "        ", "super", "(", "PWCFusionProSupervised", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfgs", "=", "cfgs", "\n", "self", ".", "pwc_fusion_core", "=", "PWCFusionCore", "(", "cfgs", ".", "pwc2d", ",", "cfgs", ".", "pwc3d", ")", "\n", "self", ".", "loss", "=", "None", "\n", "self", ".", "scalar_summary", ",", "self", ".", "image_summary", "=", "{", "}", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.train": [[18, 30], ["pwc_fusion_pro_supervised.PWCFusionProSupervised.children", "module.train", "pwc_fusion_pro_supervised.PWCFusionProSupervised.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.train", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.eval"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "self", ".", "training", "=", "mode", "\n", "\n", "for", "module", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "module", ".", "train", "(", "mode", ")", "\n", "\n", "", "if", "self", ".", "cfgs", ".", "freeze_bn", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "\n", "", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.eval": [[31, 33], ["pwc_fusion_pro_supervised.PWCFusionProSupervised.train"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.train"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "train", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.forward": [[34, 152], ["pwc3d_core.build_pc_pyramid", "pwc_fusion_pro_supervised.PWCFusionProSupervised.pwc_fusion_core.encode", "pwc_fusion_pro_supervised.PWCFusionProSupervised.pwc_fusion_core.encode", "pwc_fusion_pro_supervised.PWCFusionProSupervised.pwc_fusion_core.decode", "utils.resize_flow2d", "inputs[].float", "inputs[].float", "losses2d.calc_supervised_loss_2d", "losses3d.calc_supervised_loss_3d", "inputs[].float", "utils.resize_to_64x", "utils.perspect2parallel", "utils.perspect2parallel", "utils.parallel2perspect", "utils.parallel2perspect", "enumerate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "epe2d_bat.mean", "acc1_2d_bat.mean", "outlier_2d_bat.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "epe3d_bat.mean", "acc5_3d_bat.mean", "zip", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "epe2d_map.sum", "target_2d_mask.sum", "acc1_2d_map.sum", "target_2d_mask.sum", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.logical_and().float", "torch.logical_and().float", "torch.logical_and().float", "torch.logical_and().float", "outlier_2d_map.sum", "target_2d_mask.sum", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "epe3d_map.sum", "target_3d_mask.sum", "acc5_3d_map.sum", "target_3d_mask.sum", "utils.parallel2perspect", "utils.parallel2perspect", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc3d_core.build_pc_pyramid", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.PWCFusionCore.encode", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.PWCFusionCore.encode", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_core.PWCFusionCore.decode", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.resize_flow2d", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses2d.calc_supervised_loss_2d", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.losses3d.calc_supervised_loss_3d", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.resize_to_64x", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.perspect2parallel", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.perspect2parallel", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.parallel2perspect", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.parallel2perspect", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.parallel2perspect", "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.utils.parallel2perspect"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "images", "=", "inputs", "[", "'images'", "]", ".", "float", "(", ")", "/", "255.0", "\n", "pc1", ",", "pc2", "=", "inputs", "[", "'pcs'", "]", "[", ":", ",", ":", "3", "]", ",", "inputs", "[", "'pcs'", "]", "[", ":", ",", "3", ":", "]", "\n", "intrinsics", "=", "inputs", "[", "'intrinsics'", "]", "\n", "\n", "# assert images.shape[2] % 64 == 0 and images.shape[3] % 64 == 0", "\n", "origin_h", ",", "origin_w", "=", "images", ".", "shape", "[", "2", ":", "]", "\n", "images", "=", "resize_to_64x", "(", "images", ",", "None", ")", "[", "0", "]", "\n", "image1", ",", "image2", "=", "images", "[", ":", ",", ":", "3", "]", ",", "images", "[", ":", ",", "3", ":", "]", "\n", "\n", "persp_cam_info", "=", "{", "\n", "'projection_mode'", ":", "'perspective'", ",", "\n", "'sensor_h'", ":", "origin_h", ",", "\n", "'sensor_w'", ":", "origin_w", ",", "\n", "'f'", ":", "intrinsics", "[", ":", ",", "0", "]", ",", "\n", "'cx'", ":", "intrinsics", "[", ":", ",", "1", "]", ",", "\n", "'cy'", ":", "intrinsics", "[", ":", ",", "2", "]", ",", "\n", "}", "\n", "\n", "if", "self", ".", "cfgs", ".", "ids", ".", "enabled", ":", "\n", "            ", "parallel_sensor_size", "=", "(", "\n", "images", ".", "shape", "[", "2", "]", "//", "self", ".", "cfgs", ".", "ids", ".", "sensor_size_divisor", ",", "\n", "images", ".", "shape", "[", "3", "]", "//", "self", ".", "cfgs", ".", "ids", ".", "sensor_size_divisor", ",", "\n", ")", "\n", "paral_cam_info", "=", "{", "\n", "'projection_mode'", ":", "'parallel'", ",", "\n", "'sensor_h'", ":", "parallel_sensor_size", "[", "0", "]", ",", "\n", "'sensor_w'", ":", "parallel_sensor_size", "[", "1", "]", ",", "\n", "'cx'", ":", "(", "parallel_sensor_size", "[", "1", "]", "-", "1", ")", "/", "2", ",", "\n", "'cy'", ":", "(", "parallel_sensor_size", "[", "0", "]", "-", "1", ")", "/", "2", ",", "\n", "}", "\n", "pc1", "=", "perspect2parallel", "(", "pc1", ",", "persp_cam_info", ",", "paral_cam_info", ")", "\n", "pc2", "=", "perspect2parallel", "(", "pc2", ",", "persp_cam_info", ",", "paral_cam_info", ")", "\n", "", "else", ":", "\n", "            ", "paral_cam_info", "=", "None", "\n", "\n", "# encode features", "\n", "", "xyzs1", ",", "xyzs2", ",", "sample_indices1", ",", "_", "=", "build_pc_pyramid", "(", "pc1", ",", "pc2", ",", "[", "4096", ",", "2048", ",", "1024", ",", "512", ",", "256", "]", ")", "\n", "feats1_2d", ",", "feats1_3d", "=", "self", ".", "pwc_fusion_core", ".", "encode", "(", "image1", ",", "xyzs1", ")", "\n", "feats2_2d", ",", "feats2_3d", "=", "self", ".", "pwc_fusion_core", ".", "encode", "(", "image2", ",", "xyzs2", ")", "\n", "\n", "# predict flows (1->2)", "\n", "flows_2d", ",", "flows_3d", "=", "self", ".", "pwc_fusion_core", ".", "decode", "(", "\n", "xyzs1", ",", "xyzs2", ",", "feats1_2d", ",", "feats2_2d", ",", "feats1_3d", ",", "feats2_3d", ",", "\n", "paral_cam_info", "if", "self", ".", "cfgs", ".", "ids", ".", "enabled", "else", "persp_cam_info", "\n", ")", "\n", "\n", "if", "self", ".", "cfgs", ".", "ids", ".", "enabled", ":", "\n", "            ", "pc1", "=", "parallel2perspect", "(", "pc1", ",", "persp_cam_info", ",", "paral_cam_info", ")", "\n", "pc2", "=", "parallel2perspect", "(", "pc2", ",", "persp_cam_info", ",", "paral_cam_info", ")", "\n", "for", "idx", ",", "(", "xyz1", ",", "flow12_3d", ")", "in", "enumerate", "(", "zip", "(", "xyzs1", ",", "flows_3d", ")", ")", ":", "\n", "                ", "flows_3d", "[", "idx", "]", "=", "parallel2perspect", "(", "xyz1", "+", "flow12_3d", ",", "persp_cam_info", ",", "paral_cam_info", ")", "-", "parallel2perspect", "(", "xyz1", ",", "persp_cam_info", ",", "paral_cam_info", ")", "\n", "\n", "", "", "final_flow_2d", "=", "resize_flow2d", "(", "flows_2d", "[", "0", "]", ",", "origin_h", ",", "origin_w", ")", "\n", "final_flow_3d", "=", "flows_3d", "[", "0", "]", "\n", "\n", "if", "'flow_2d'", "not", "in", "inputs", "or", "'flow_3d'", "not", "in", "inputs", ":", "\n", "            ", "return", "{", "\n", "'flow_2d'", ":", "final_flow_2d", ",", "\n", "'flow_3d'", ":", "final_flow_3d", "\n", "}", "\n", "\n", "# calculate losses", "\n", "", "target_2d", "=", "inputs", "[", "'flow_2d'", "]", ".", "float", "(", ")", "\n", "target_3d", "=", "inputs", "[", "'flow_3d'", "]", ".", "float", "(", ")", "\n", "final_loss_2d", "=", "calc_supervised_loss_2d", "(", "flows_2d", ",", "target_2d", ",", "self", ".", "cfgs", ".", "loss2d", ")", "\n", "final_loss_3d", "=", "calc_supervised_loss_3d", "(", "flows_3d", ",", "target_3d", ",", "self", ".", "cfgs", ".", "loss3d", ",", "sample_indices1", ")", "\n", "self", ".", "loss", "=", "final_loss_2d", "+", "final_loss_3d", "\n", "\n", "# prepare scalar summary", "\n", "self", ".", "scalar_summary", "=", "{", "'loss'", ":", "self", ".", "loss", "}", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "target_2d", ".", "shape", "[", "1", "]", "==", "3", ":", "# sparse evaluation", "\n", "                ", "target_2d_mask", "=", "target_2d", "[", ":", ",", "2", ",", ":", ",", ":", "]", ">", "0", "\n", "target_2d", "=", "target_2d", "[", ":", ",", ":", "2", ",", ":", ",", ":", "]", "\n", "", "else", ":", "# dense evaluation", "\n", "                ", "target_2d_mask", "=", "torch", ".", "ones_like", "(", "target_2d", ")", "[", ":", ",", "0", ",", ":", ",", ":", "]", ">", "0", "\n", "\n", "# compute endpoint error", "\n", "", "diff", "=", "final_flow_2d", "-", "target_2d", "\n", "epe2d_map", "=", "torch", ".", "linalg", ".", "norm", "(", "diff", ",", "dim", "=", "1", ")", "*", "target_2d_mask", "\n", "epe2d_bat", "=", "epe2d_map", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", "]", ")", "/", "target_2d_mask", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", "]", ")", "\n", "self", ".", "scalar_summary", "[", "'epe2d'", "]", "=", "epe2d_bat", ".", "mean", "(", ")", "\n", "\n", "# compute 1px accuracy", "\n", "acc1_2d_map", "=", "(", "epe2d_map", "<", "1.0", ")", ".", "float", "(", ")", "*", "target_2d_mask", "\n", "acc1_2d_bat", "=", "acc1_2d_map", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", "]", ")", "/", "target_2d_mask", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", "]", ")", "\n", "self", ".", "scalar_summary", "[", "'acc2d_1px'", "]", "=", "acc1_2d_bat", ".", "mean", "(", ")", "\n", "\n", "# compute flow outliers", "\n", "target_2d_mag", "=", "torch", ".", "linalg", ".", "norm", "(", "target_2d", ",", "dim", "=", "1", ")", "+", "1e-5", "\n", "outlier_2d_map", "=", "torch", ".", "logical_and", "(", "epe2d_map", ">", "3.0", ",", "epe2d_map", "/", "target_2d_mag", ">", "0.05", ")", ".", "float", "(", ")", "*", "target_2d_mask", "\n", "outlier_2d_bat", "=", "outlier_2d_map", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", "]", ")", "/", "target_2d_mask", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", "]", ")", "\n", "self", ".", "scalar_summary", "[", "'outlier2d'", "]", "=", "outlier_2d_bat", ".", "mean", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "target_3d", ".", "shape", "[", "1", "]", "==", "4", ":", "\n", "                ", "target_3d_mask", "=", "target_3d", "[", ":", ",", "3", ",", ":", "]", ">", "0", "\n", "target_3d", "=", "target_3d", "[", ":", ",", ":", "3", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "target_3d_mask", "=", "torch", ".", "ones_like", "(", "target_3d", ")", "[", ":", ",", "0", ",", ":", "]", ">", "0", "\n", "\n", "# compute endpoint error", "\n", "", "diff", "=", "final_flow_3d", "-", "target_3d", "\n", "epe3d_map", "=", "torch", ".", "linalg", ".", "norm", "(", "diff", ",", "dim", "=", "1", ")", "*", "target_3d_mask", "\n", "epe3d_bat", "=", "epe3d_map", ".", "sum", "(", "dim", "=", "1", ")", "/", "target_3d_mask", ".", "sum", "(", "dim", "=", "1", ")", "\n", "self", ".", "scalar_summary", "[", "'epe3d'", "]", "=", "epe3d_bat", ".", "mean", "(", ")", "\n", "\n", "# compute 5cm accuracy", "\n", "acc5_3d_map", "=", "(", "epe3d_map", "<", "0.05", ")", ".", "float", "(", ")", "*", "target_3d_mask", "\n", "acc5_3d_bat", "=", "acc5_3d_map", ".", "sum", "(", "dim", "=", "1", ")", "/", "target_3d_mask", ".", "sum", "(", "dim", "=", "1", ")", "\n", "self", ".", "scalar_summary", "[", "'acc3d_5cm'", "]", "=", "acc5_3d_bat", ".", "mean", "(", ")", "\n", "\n", "", "return", "{", "\n", "'flow_2d'", ":", "final_flow_2d", ",", "\n", "'flow_3d'", ":", "final_flow_3d", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.get_loss": [[154, 156], ["None"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.get_scalar_summary": [[157, 159], ["None"], "methods", ["None"], ["", "def", "get_scalar_summary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "scalar_summary", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.get_image_summary": [[160, 162], ["None"], "methods", ["None"], ["", "def", "get_image_summary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_summary", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.get_log_string": [[163, 172], ["pwc_fusion_pro_supervised.PWCFusionProSupervised.get_scalar_summary"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.get_scalar_summary"], ["", "def", "get_log_string", "(", "self", ",", "scalar_summary", "=", "None", ")", ":", "\n", "        ", "if", "scalar_summary", "is", "None", ":", "\n", "            ", "scalar_summary", "=", "self", ".", "get_scalar_summary", "(", ")", "\n", "", "log_strings", "=", "[", "\n", "'loss: %.1f'", "%", "scalar_summary", "[", "'loss'", "]", ",", "\n", "'epe2d: %.3f'", "%", "scalar_summary", "[", "'epe2d'", "]", ",", "\n", "'epe3d: %.3f'", "%", "scalar_summary", "[", "'epe3d'", "]", ",", "\n", "]", "\n", "return", "', '", ".", "join", "(", "log_strings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.models.pwc_fusion_pro_supervised.PWCFusionProSupervised.is_better": [[173, 178], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "is_better", "(", "curr_summary", ",", "best_summary", ")", ":", "\n", "        ", "if", "best_summary", "is", "None", ":", "\n", "            ", "return", "True", "\n", "", "return", "curr_summary", "[", "'outlier2d'", "]", "<", "best_summary", "[", "'outlier2d'", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.setup.get_ext_modules": [[5, 31], ["torch.utils.cpp_extension.CUDAExtension", "torch.utils.cpp_extension.CUDAExtension", "torch.utils.cpp_extension.CUDAExtension"], "function", ["None"], ["def", "get_ext_modules", "(", ")", ":", "\n", "    ", "return", "[", "\n", "CUDAExtension", "(", "\n", "name", "=", "'_correlation_cuda'", ",", "\n", "sources", "=", "[", "\n", "'correlation/correlation.cpp'", ",", "\n", "'correlation/correlation_forward_kernel.cu'", ",", "\n", "'correlation/correlation_backward_kernel.cu'", "\n", "]", ",", "\n", "include_dirs", "=", "[", "'correlation'", "]", "\n", ")", ",", "\n", "CUDAExtension", "(", "\n", "name", "=", "'_furthest_point_sampling_cuda'", ",", "\n", "sources", "=", "[", "\n", "'furthest_point_sampling/furthest_point_sampling.cpp'", ",", "\n", "'furthest_point_sampling/furthest_point_sampling_kernel.cu'", "\n", "]", ",", "\n", "include_dirs", "=", "[", "'furthest_point_sampling'", "]", "\n", ")", ",", "\n", "CUDAExtension", "(", "\n", "name", "=", "'_k_nearest_neighbor_cuda'", ",", "\n", "sources", "=", "[", "\n", "'k_nearest_neighbor/k_nearest_neighbor.cpp'", ",", "\n", "'k_nearest_neighbor/k_nearest_neighbor_kernel.cu'", "\n", "]", ",", "\n", "include_dirs", "=", "[", "'k_nearest_neighbor'", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.CorrelationFunction.forward": [[19, 25], ["ctx.save_for_backward", "callable", "_correlation_forward_cuda"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input1", ",", "input2", ",", "max_displacement", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "input1", ",", "input2", ")", "\n", "ctx", ".", "max_displacement", "=", "max_displacement", "\n", "assert", "callable", "(", "_correlation_forward_cuda", ")", "\n", "return", "_correlation_forward_cuda", "(", "input1", ",", "input2", ",", "max_displacement", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.CorrelationFunction.backward": [[26, 38], ["callable", "_correlation_backward_cuda", "grad_input1.permute().contiguous.permute().contiguous.permute().contiguous", "grad_input2.permute().contiguous.permute().contiguous.permute().contiguous", "grad_input1.permute().contiguous.permute().contiguous.permute", "grad_input2.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input1", ",", "input2", "=", "ctx", ".", "saved_tensors", "\n", "\n", "assert", "callable", "(", "_correlation_backward_cuda", ")", "\n", "grad_input1", ",", "grad_input2", "=", "_correlation_backward_cuda", "(", "\n", "grad_output", ",", "input1", ",", "input2", ",", "ctx", ".", "max_displacement", "\n", ")", "\n", "grad_input1", "=", "grad_input1", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "grad_input2", "=", "grad_input2", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "grad_input1", ",", "grad_input2", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.squared_distance": [[40, 53], ["torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.matmul", "torch.matmul", "xyz2.permute", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.long", "torch.long"], "function", ["None"], ["", "", "def", "squared_distance", "(", "xyz1", ":", "torch", ".", "Tensor", ",", "xyz2", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the Euclidean squared distance between every two points.\n    :param xyz1: the 1st set of points, [batch_size, n_points_1, 3]\n    :param xyz2: the 2nd set of points, [batch_size, n_points_2, 3]\n    :return: squared distance between every two points, [batch_size, n_points_1, n_points_2]\n    \"\"\"", "\n", "assert", "xyz1", ".", "shape", "[", "-", "1", "]", "==", "xyz2", ".", "shape", "[", "-", "1", "]", "and", "xyz1", ".", "shape", "[", "-", "1", "]", "<=", "3", "# assert channel_last", "\n", "batch_size", ",", "n_points1", ",", "n_points2", "=", "xyz1", ".", "shape", "[", "0", "]", ",", "xyz1", ".", "shape", "[", "1", "]", ",", "xyz2", ".", "shape", "[", "1", "]", "\n", "dist", "=", "-", "2", "*", "torch", ".", "matmul", "(", "xyz1", ",", "xyz2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "xyz1", "**", "2", ",", "-", "1", ")", ".", "view", "(", "batch_size", ",", "n_points1", ",", "1", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "xyz2", "**", "2", ",", "-", "1", ")", ".", "view", "(", "batch_size", ",", "1", ",", "n_points2", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.correlation2d": [[55, 73], ["torch.nn.functional.pad", "torch.nn.functional.pad", "range", "torch.cat", "torch.cat", "callable", "callable", "input1.permute().contiguous().float.permute().contiguous().float", "input2.permute().contiguous().float.permute().contiguous().float", "CorrelationFunction.apply", "wrapper.correlation2d._correlation_py"], "function", ["None"], ["", "def", "correlation2d", "(", "input1", ":", "torch", ".", "Tensor", ",", "input2", ":", "torch", ".", "Tensor", ",", "max_displacement", ":", "int", ",", "cpp_impl", "=", "True", ")", ":", "\n", "    ", "def", "_correlation_py", "(", "_input1", ",", "_input2", ",", "_max_displacement", ")", ":", "\n", "        ", "height", ",", "width", "=", "_input1", ".", "shape", "[", "2", ":", "]", "\n", "_input2", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "_input2", ",", "[", "_max_displacement", "]", "*", "4", ")", "\n", "cost_volumes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", "*", "_max_displacement", "+", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "2", "*", "_max_displacement", "+", "1", ")", ":", "\n", "                ", "cost_volume", "=", "_input1", "*", "_input2", "[", ":", ",", ":", ",", "i", ":", "(", "i", "+", "height", ")", ",", "j", ":", "(", "j", "+", "width", ")", "]", "\n", "cost_volume", "=", "torch", ".", "mean", "(", "cost_volume", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "cost_volumes", ".", "append", "(", "cost_volume", ")", "\n", "", "", "return", "torch", ".", "cat", "(", "cost_volumes", ",", "1", ")", "\n", "\n", "", "if", "cpp_impl", "and", "callable", "(", "_correlation_forward_cuda", ")", "and", "callable", "(", "_correlation_backward_cuda", ")", "and", "input1", ".", "is_cuda", "and", "input2", ".", "is_cuda", ":", "\n", "        ", "input1", "=", "input1", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "float", "(", ")", "\n", "input2", "=", "input2", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "float", "(", ")", "\n", "return", "CorrelationFunction", ".", "apply", "(", "input1", ",", "input2", ",", "max_displacement", ")", "\n", "", "else", ":", "\n", "        ", "return", "_correlation_py", "(", "input1", ",", "input2", ",", "max_displacement", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.furthest_point_sampling": [[75, 104], ["torch.zeros", "torch.zeros", "torch.arange", "torch.arange", "torch.zeros", "torch.zeros", "range", "callable", "_furthest_point_sampling_cuda().to", "_furthest_point_sampling_py().to", "torch.ones", "torch.ones", "_xyz[].view", "torch.sum", "torch.sum", "torch.max", "torch.max", "_furthest_point_sampling_cuda", "wrapper.furthest_point_sampling._furthest_point_sampling_py"], "function", ["None"], ["", "", "def", "furthest_point_sampling", "(", "xyz", ":", "torch", ".", "Tensor", ",", "n_samples", ":", "int", ",", "cpp_impl", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Perform furthest point sampling on a set of points.\n    :param xyz: a set of points, [batch_size, n_points, 3]\n    :param n_samples: number of samples, int\n    :param cpp_impl: whether to use the CUDA C++ implementation of furthest-point-sampling\n    :return: indices of sampled points, [batch_size, n_samples]\n    \"\"\"", "\n", "def", "_furthest_point_sampling_py", "(", "_xyz", ":", "torch", ".", "Tensor", ",", "_n_samples", ":", "int", ")", ":", "\n", "        ", "batch_size", ",", "n_points", ",", "_", "=", "_xyz", ".", "shape", "\n", "farthest_indices", "=", "torch", ".", "zeros", "(", "batch_size", ",", "_n_samples", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "_xyz", ".", "device", ")", "\n", "distances", "=", "torch", ".", "ones", "(", "batch_size", ",", "n_points", ",", "device", "=", "_xyz", ".", "device", ")", "*", "1e10", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "batch_size", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "_xyz", ".", "device", ")", "\n", "curr_farthest_idx", "=", "torch", ".", "zeros", "(", "batch_size", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "_xyz", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "_n_samples", ")", ":", "\n", "            ", "farthest_indices", "[", ":", ",", "i", "]", "=", "curr_farthest_idx", "\n", "curr_farthest", "=", "_xyz", "[", "batch_indices", ",", "curr_farthest_idx", ",", ":", "]", ".", "view", "(", "batch_size", ",", "1", ",", "3", ")", "\n", "new_distances", "=", "torch", ".", "sum", "(", "(", "_xyz", "-", "curr_farthest", ")", "**", "2", ",", "-", "1", ")", "\n", "mask", "=", "new_distances", "<", "distances", "\n", "distances", "[", "mask", "]", "=", "new_distances", "[", "mask", "]", "\n", "curr_farthest_idx", "=", "torch", ".", "max", "(", "distances", ",", "-", "1", ")", "[", "1", "]", "\n", "", "return", "farthest_indices", "\n", "\n", "", "assert", "xyz", ".", "shape", "[", "2", "]", "==", "3", "and", "xyz", ".", "shape", "[", "1", "]", ">", "n_samples", "\n", "\n", "if", "cpp_impl", "and", "callable", "(", "_furthest_point_sampling_cuda", ")", "and", "xyz", ".", "is_cuda", ":", "\n", "        ", "return", "_furthest_point_sampling_cuda", "(", "xyz", ".", "contiguous", "(", ")", ",", "n_samples", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "", "else", ":", "\n", "        ", "return", "_furthest_point_sampling_py", "(", "xyz", ",", "n_samples", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.k_nearest_neighbor": [[106, 128], ["wrapper.squared_distance", "squared_distance.topk().indices.to", "input_xyz.transpose().contiguous.transpose().contiguous", "query_xyz.transpose().contiguous.transpose().contiguous", "callable", "_k_nearest_neighbor_cuda", "wrapper.k_nearest_neighbor._k_nearest_neighbor_py"], "function", ["home.repos.pwc.inspect_result.mcg-nju_camliflow.csrc.wrapper.squared_distance"], ["", "", "def", "k_nearest_neighbor", "(", "input_xyz", ":", "torch", ".", "Tensor", ",", "query_xyz", ":", "torch", ".", "Tensor", ",", "k", ":", "int", ",", "cpp_impl", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Calculate k-nearest neighbor for each query.\n    :param input_xyz: a set of points, [batch_size, n_points, 3] or [batch_size, 3, n_points]\n    :param query_xyz: a set of centroids, [batch_size, n_queries, 3] or [batch_size, 3, n_queries]\n    :param k: int\n    :param cpp_impl: whether to use the CUDA C++ implementation of k-nearest-neighbor\n    :return: indices of k-nearest neighbors, [batch_size, n_queries, k]\n    \"\"\"", "\n", "def", "_k_nearest_neighbor_py", "(", "_input_xyz", ":", "torch", ".", "Tensor", ",", "_query_xyz", ":", "torch", ".", "Tensor", ",", "_k", ":", "int", ")", ":", "\n", "        ", "dists", "=", "squared_distance", "(", "_query_xyz", ",", "_input_xyz", ")", "\n", "return", "dists", ".", "topk", "(", "_k", ",", "dim", "=", "2", ",", "largest", "=", "False", ")", ".", "indices", ".", "to", "(", "torch", ".", "long", ")", "\n", "\n", "", "if", "input_xyz", ".", "shape", "[", "1", "]", "<=", "3", ":", "# channel_first to channel_last", "\n", "        ", "assert", "query_xyz", ".", "shape", "[", "1", "]", "==", "input_xyz", ".", "shape", "[", "1", "]", "\n", "input_xyz", "=", "input_xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "query_xyz", "=", "query_xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "if", "cpp_impl", "and", "callable", "(", "_k_nearest_neighbor_cuda", ")", "and", "input_xyz", ".", "is_cuda", "and", "query_xyz", ".", "is_cuda", ":", "\n", "        ", "return", "_k_nearest_neighbor_cuda", "(", "input_xyz", ".", "contiguous", "(", ")", ",", "query_xyz", ".", "contiguous", "(", ")", ",", "k", ")", "\n", "", "else", ":", "\n", "        ", "return", "_k_nearest_neighbor_py", "(", "input_xyz", ",", "query_xyz", ",", "k", ")", "\n", "", "", ""]]}