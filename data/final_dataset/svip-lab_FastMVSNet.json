{"home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.config.load_cfg_from_file": [[153, 169], ["cfg_template.merge_from_other_cfg", "open", "yacs.config.load_cfg"], "function", ["None"], ["def", "load_cfg_from_file", "(", "cfg_filename", ")", ":", "\n", "    ", "\"\"\"Load config from a file\n\n    Args:\n        cfg_filename (str):\n\n    Returns:\n        CfgNode: loaded configuration\n\n    \"\"\"", "\n", "with", "open", "(", "cfg_filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "cfg", "=", "load_cfg", "(", "f", ")", "\n", "\n", "", "cfg_template", "=", "_C", "\n", "cfg_template", ".", "merge_from_other_cfg", "(", "cfg", ")", "\n", "return", "cfg_template", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.networks.ImageConv.__init__": [[10, 29], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "Conv2d", "Conv2d", "Conv2d", "Conv2d", "Conv2d", "Conv2d", "Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_channels", ",", "in_channels", "=", "3", ")", ":", "\n", "        ", "super", "(", "ImageConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_channels", "=", "base_channels", "\n", "self", ".", "out_channels", "=", "8", "*", "base_channels", "\n", "self", ".", "conv0", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "in_channels", ",", "base_channels", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "base_channels", ",", "base_channels", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "base_channels", ",", "base_channels", "*", "2", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "Conv2d", "(", "base_channels", "*", "2", ",", "base_channels", "*", "2", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "base_channels", "*", "2", ",", "base_channels", "*", "2", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "base_channels", "*", "2", ",", "base_channels", "*", "4", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "Conv2d", "(", "base_channels", "*", "4", ",", "base_channels", "*", "4", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "base_channels", "*", "4", ",", "base_channels", "*", "4", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.networks.ImageConv.forward": [[32, 43], ["networks.ImageConv.conv0", "networks.ImageConv.conv1", "networks.ImageConv.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "out_dict", "=", "{", "}", "\n", "\n", "conv0", "=", "self", ".", "conv0", "(", "imgs", ")", "\n", "out_dict", "[", "\"conv0\"", "]", "=", "conv0", "\n", "conv1", "=", "self", ".", "conv1", "(", "conv0", ")", "\n", "out_dict", "[", "\"conv1\"", "]", "=", "conv1", "\n", "conv2", "=", "self", ".", "conv2", "(", "conv1", ")", "\n", "out_dict", "[", "\"conv2\"", "]", "=", "conv2", "\n", "\n", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.networks.PropagationNet.__init__": [[47, 69], ["torch.Module.__init__", "networks.ImageConv", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Unfold", "torch.Unfold", "torch.Unfold", "Conv2d", "Conv2d", "Conv2d", "Conv2d", "Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_channels", ")", ":", "\n", "        ", "super", "(", "PropagationNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_channels", "=", "base_channels", "\n", "\n", "self", ".", "img_conv", "=", "ImageConv", "(", "base_channels", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "base_channels", "*", "4", ",", "base_channels", "*", "4", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "base_channels", "*", "4", ",", "base_channels", "*", "2", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "base_channels", "*", "4", ",", "base_channels", "*", "2", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "base_channels", "*", "2", ",", "base_channels", "*", "2", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "base_channels", "*", "4", ",", "base_channels", "*", "2", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "base_channels", "*", "2", ",", "9", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "self", ".", "unfold", "=", "nn", ".", "Unfold", "(", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.networks.PropagationNet.forward": [[70, 86], ["networks.PropagationNet.img_conv", "networks.PropagationNet.conv3", "torch.softmax", "torch.softmax", "torch.softmax", "torch.pad", "torch.pad", "torch.pad", "networks.PropagationNet.unfold", "prob.view.view.size", "prob.view.view.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "result_depth.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "depth", ",", "img", ")", ":", "\n", "        ", "img_featues", "=", "self", ".", "img_conv", "(", "img", ")", "\n", "img_conv2", "=", "img_featues", "[", "\"conv2\"", "]", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "img_conv2", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n", "depth_pad", "=", "F", ".", "pad", "(", "depth", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "mode", "=", "'replicate'", ")", "\n", "depth_unfold", "=", "self", ".", "unfold", "(", "depth_pad", ")", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "prob", ".", "size", "(", ")", "\n", "prob", "=", "prob", ".", "view", "(", "b", ",", "9", ",", "h", "*", "w", ")", "\n", "\n", "result_depth", "=", "torch", ".", "sum", "(", "depth_unfold", "*", "prob", ",", "dim", "=", "1", ")", "\n", "result_depth", "=", "result_depth", ".", "view", "(", "b", ",", "1", ",", "h", ",", "w", ")", "\n", "return", "result_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.networks.VolumeConv.__init__": [[89, 109], ["torch.Module.__init__", "Conv3d", "Conv3d", "Conv3d", "Conv3d", "Conv3d", "Conv3d", "Conv3d", "Deconv3d", "Deconv3d", "Deconv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "base_channels", ")", ":", "\n", "        ", "super", "(", "VolumeConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "base_channels", "*", "8", "\n", "self", ".", "base_channels", "=", "base_channels", "\n", "self", ".", "conv1_0", "=", "Conv3d", "(", "in_channels", ",", "base_channels", "*", "2", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2_0", "=", "Conv3d", "(", "base_channels", "*", "2", ",", "base_channels", "*", "4", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_0", "=", "Conv3d", "(", "base_channels", "*", "4", ",", "base_channels", "*", "8", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "conv0_1", "=", "Conv3d", "(", "in_channels", ",", "base_channels", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "conv1_1", "=", "Conv3d", "(", "base_channels", "*", "2", ",", "base_channels", "*", "2", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2_1", "=", "Conv3d", "(", "base_channels", "*", "4", ",", "base_channels", "*", "4", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "conv3_1", "=", "Conv3d", "(", "base_channels", "*", "8", ",", "base_channels", "*", "8", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_0", "=", "Deconv3d", "(", "base_channels", "*", "8", ",", "base_channels", "*", "4", ",", "3", ",", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "conv5_0", "=", "Deconv3d", "(", "base_channels", "*", "4", ",", "base_channels", "*", "2", ",", "3", ",", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "conv6_0", "=", "Deconv3d", "(", "base_channels", "*", "2", ",", "base_channels", ",", "3", ",", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "\n", "self", ".", "conv6_2", "=", "nn", ".", "Conv3d", "(", "base_channels", ",", "1", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.networks.VolumeConv.forward": [[110, 129], ["networks.VolumeConv.conv0_1", "networks.VolumeConv.conv1_0", "networks.VolumeConv.conv2_0", "networks.VolumeConv.conv3_0", "networks.VolumeConv.conv1_1", "networks.VolumeConv.conv2_1", "networks.VolumeConv.conv3_1", "networks.VolumeConv.conv4_0", "networks.VolumeConv.conv5_0", "networks.VolumeConv.conv6_0", "networks.VolumeConv.conv6_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv0_1", "=", "self", ".", "conv0_1", "(", "x", ")", "\n", "\n", "conv1_0", "=", "self", ".", "conv1_0", "(", "x", ")", "\n", "conv2_0", "=", "self", ".", "conv2_0", "(", "conv1_0", ")", "\n", "conv3_0", "=", "self", ".", "conv3_0", "(", "conv2_0", ")", "\n", "\n", "conv1_1", "=", "self", ".", "conv1_1", "(", "conv1_0", ")", "\n", "conv2_1", "=", "self", ".", "conv2_1", "(", "conv2_0", ")", "\n", "conv3_1", "=", "self", ".", "conv3_1", "(", "conv3_0", ")", "\n", "\n", "conv4_0", "=", "self", ".", "conv4_0", "(", "conv3_1", ")", "\n", "\n", "conv5_0", "=", "self", ".", "conv5_0", "(", "conv4_0", "+", "conv2_1", ")", "\n", "conv6_0", "=", "self", ".", "conv6_0", "(", "conv5_0", "+", "conv1_1", ")", "\n", "\n", "conv6_2", "=", "self", ".", "conv6_2", "(", "conv6_0", "+", "conv0_1", ")", "\n", "\n", "return", "conv6_2", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.networks.MAELoss.forward": [[132, 143], ["depth_interval.view.view.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "pred_depth_image", ",", "gt_depth_image", ",", "depth_interval", ")", ":", "\n", "        ", "\"\"\"non zero mean absolute loss for one batch\"\"\"", "\n", "# shape = list(pred_depth_image)", "\n", "depth_interval", "=", "depth_interval", ".", "view", "(", "-", "1", ")", "\n", "mask_valid", "=", "(", "~", "torch", ".", "eq", "(", "gt_depth_image", ",", "0.0", ")", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "denom", "=", "torch", ".", "sum", "(", "mask_valid", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "+", "1e-7", "\n", "masked_abs_error", "=", "mask_valid", "*", "torch", ".", "abs", "(", "pred_depth_image", "-", "gt_depth_image", ")", "\n", "masked_mae", "=", "torch", ".", "sum", "(", "masked_abs_error", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "masked_mae", "=", "torch", ".", "sum", "(", "(", "masked_mae", "/", "depth_interval", ")", "/", "denom", ")", "\n", "\n", "return", "masked_mae", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.networks.Valid_MAELoss.__init__": [[146, 149], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "valid_threshold", "=", "2.0", ")", ":", "\n", "        ", "super", "(", "Valid_MAELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "valid_threshold", "=", "valid_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.networks.Valid_MAELoss.forward": [[150, 169], ["pred_depth_image.size", "pred_depth_image.size", "depth_interval.view.view.view", "torch.interpolate.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "depth_interval.view.view.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred_depth_image", ",", "gt_depth_image", ",", "depth_interval", ",", "before_depth_image", ")", ":", "\n", "        ", "\"\"\"non zero mean absolute loss for one batch\"\"\"", "\n", "# shape = list(pred_depth_image)", "\n", "pred_height", "=", "pred_depth_image", ".", "size", "(", "2", ")", "\n", "pred_width", "=", "pred_depth_image", ".", "size", "(", "3", ")", "\n", "depth_interval", "=", "depth_interval", ".", "view", "(", "-", "1", ")", "\n", "mask_true", "=", "(", "~", "torch", ".", "eq", "(", "gt_depth_image", ",", "0.0", ")", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "before_hight", "=", "before_depth_image", ".", "size", "(", "2", ")", "\n", "if", "before_hight", "!=", "pred_height", ":", "\n", "            ", "before_depth_image", "=", "F", ".", "interpolate", "(", "before_depth_image", ",", "(", "pred_height", ",", "pred_width", ")", ")", "\n", "", "diff", "=", "torch", ".", "abs", "(", "gt_depth_image", "-", "before_depth_image", ")", "/", "depth_interval", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "mask_valid", "=", "(", "diff", "<", "self", ".", "valid_threshold", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "mask_valid", "=", "mask_true", "*", "mask_valid", "\n", "denom", "=", "torch", ".", "sum", "(", "mask_valid", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "+", "1e-7", "\n", "masked_abs_error", "=", "mask_valid", "*", "torch", ".", "abs", "(", "pred_depth_image", "-", "gt_depth_image", ")", "\n", "masked_mae", "=", "torch", ".", "sum", "(", "masked_abs_error", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "masked_mae", "=", "torch", ".", "sum", "(", "(", "masked_mae", "/", "depth_interval", ")", "/", "denom", ")", "\n", "\n", "return", "masked_mae", "\n", "", "", ""]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.solver.build_optimizer": [[17, 32], ["hasattr", "solver.build_optimizer.builder"], "function", ["None"], ["def", "build_optimizer", "(", "cfg", ",", "model", ")", ":", "\n", "    ", "name", "=", "cfg", ".", "SOLVER", ".", "TYPE", "\n", "if", "hasattr", "(", "torch", ".", "optim", ",", "name", ")", ":", "\n", "        ", "def", "builder", "(", "cfg", ",", "model", ")", ":", "\n", "            ", "return", "getattr", "(", "torch", ".", "optim", ",", "name", ")", "(", "\n", "group_weight", "(", "model", ",", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ")", ",", "\n", "lr", "=", "cfg", ".", "SOLVER", ".", "BASE_LR", ",", "\n", "**", "cfg", ".", "SOLVER", "[", "name", "]", ",", "\n", ")", "\n", "", "", "elif", "name", "in", "_OPTIMIZER_BUILDERS", ":", "\n", "        ", "builder", "=", "_OPTIMIZER_BUILDERS", "[", "name", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported type of optimizer.\"", ")", "\n", "\n", "", "return", "builder", "(", "cfg", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.solver.group_weight": [[34, 54], ["list", "module.named_parameters", "len", "dict", "dict", "print", "group_decay.append", "list", "len", "len", "print", "group_no_decay.append", "module.parameters"], "function", ["None"], ["", "def", "group_weight", "(", "module", ",", "weight_decay", ")", ":", "\n", "    ", "group_decay", "=", "[", "]", "\n", "group_no_decay", "=", "[", "]", "\n", "keywords", "=", "[", "\".bn.\"", "]", "\n", "\n", "for", "m", "in", "list", "(", "module", ".", "named_parameters", "(", ")", ")", ":", "\n", "        ", "exclude", "=", "False", "\n", "for", "k", "in", "keywords", ":", "\n", "            ", "if", "k", "in", "m", "[", "0", "]", ":", "\n", "                ", "print", "(", "\"Weight decay exclude: \"", "+", "m", "[", "0", "]", ")", "\n", "group_no_decay", ".", "append", "(", "m", "[", "1", "]", ")", "\n", "exclude", "=", "True", "\n", "break", "\n", "", "", "if", "not", "exclude", ":", "\n", "            ", "print", "(", "\"Weight decay include: \"", "+", "m", "[", "0", "]", ")", "\n", "group_decay", ".", "append", "(", "m", "[", "1", "]", ")", "\n", "\n", "", "", "assert", "len", "(", "list", "(", "module", ".", "parameters", "(", ")", ")", ")", "==", "len", "(", "group_decay", ")", "+", "len", "(", "group_no_decay", ")", "\n", "groups", "=", "[", "dict", "(", "params", "=", "group_decay", ",", "weight_decay", "=", "weight_decay", ")", ",", "dict", "(", "params", "=", "group_no_decay", ",", "weight_decay", "=", ".0", ")", "]", "\n", "return", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.solver.register_optimizer_builder": [[56, 62], ["KeyError"], "function", ["None"], ["", "def", "register_optimizer_builder", "(", "name", ",", "builder", ")", ":", "\n", "    ", "if", "name", "in", "_OPTIMIZER_BUILDERS", ":", "\n", "        ", "raise", "KeyError", "(", "\n", "\"Duplicate keys for {:s} with {} and {}.\"", "\n", "\"Solve key conflicts first!\"", ".", "format", "(", "name", ",", "_OPTIMIZER_BUILDERS", "[", "name", "]", ",", "builder", ")", ")", "\n", "", "_OPTIMIZER_BUILDERS", "[", "name", "]", "=", "builder", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.solver.build_scheduler": [[64, 78], ["hasattr", "solver.build_optimizer.builder"], "function", ["None"], ["", "def", "build_scheduler", "(", "cfg", ",", "optimizer", ")", ":", "\n", "    ", "name", "=", "cfg", ".", "SCHEDULER", ".", "TYPE", "\n", "if", "hasattr", "(", "torch", ".", "optim", ".", "lr_scheduler", ",", "name", ")", ":", "\n", "        ", "def", "builder", "(", "cfg", ",", "optimizer", ")", ":", "\n", "            ", "return", "getattr", "(", "torch", ".", "optim", ".", "lr_scheduler", ",", "name", ")", "(", "\n", "optimizer", ",", "\n", "**", "cfg", ".", "SCHEDULER", "[", "name", "]", ",", "\n", ")", "\n", "", "", "elif", "name", "in", "_OPTIMIZER_BUILDERS", ":", "\n", "        ", "builder", "=", "_OPTIMIZER_BUILDERS", "[", "name", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported type of optimizer.\"", ")", "\n", "\n", "", "return", "builder", "(", "cfg", ",", "optimizer", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.train.parse_args": [[25, 44], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch Fast-MVSNet Training\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cfg\"", ",", "\n", "dest", "=", "\"config_file\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.train.train_model": [[46, 113], ["logging.getLogger", "fastmvsnet.utils.metric_logger.MetricLogger", "model.train", "time.time", "data_loader.__len__", "enumerate", "path_list.extend", "model", "optimizer.zero_grad", "loss_fn", "metric_fn", "sum", "fastmvsnet.utils.metric_logger.MetricLogger.update", "sum.backward", "optimizer.step", "time.time", "fastmvsnet.utils.metric_logger.MetricLogger.update", "time.time", "v.cuda", "loss_fn.values", "time.time", "logging.getLogger.info", "tensorboard_logger.add_scalars", "tensorboard_logger.add_scalars", "fastmvsnet.utils.file_logger.file_logger", "data_batch.items", "isinstance", "fastmvsnet.utils.metric_logger.MetricLogger.delimiter.join().format", "fastmvsnet.utils.metric_logger.MetricLogger.delimiter.join", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.train.train", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.dataset.DTU_Test_Set.__len__", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.tensorboard_logger.TensorboardLogger.add_scalars", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.tensorboard_logger.TensorboardLogger.add_scalars", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.file_logger.file_logger"], ["", "def", "train_model", "(", "model", ",", "\n", "loss_fn", ",", "\n", "metric_fn", ",", "\n", "image_scales", ",", "\n", "inter_scales", ",", "\n", "isFlow", ",", "\n", "data_loader", ",", "\n", "optimizer", ",", "\n", "curr_epoch", ",", "\n", "tensorboard_logger", ",", "\n", "log_period", "=", "1", ",", "\n", "output_dir", "=", "\"\"", ",", "\n", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"fastmvsnet.train\"", ")", "\n", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "model", ".", "train", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "total_iteration", "=", "data_loader", ".", "__len__", "(", ")", "\n", "path_list", "=", "[", "]", "\n", "\n", "for", "iteration", ",", "data_batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "data_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "curr_ref_img_path", "=", "data_batch", "[", "\"ref_img_path\"", "]", "\n", "path_list", ".", "extend", "(", "curr_ref_img_path", ")", "\n", "data_batch", "=", "{", "k", ":", "v", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "k", ",", "v", "in", "data_batch", ".", "items", "(", ")", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", "}", "\n", "\n", "preds", "=", "model", "(", "data_batch", ",", "image_scales", ",", "inter_scales", ",", "isFlow", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss_dict", "=", "loss_fn", "(", "preds", ",", "data_batch", ",", "isFlow", ")", "\n", "metric_dict", "=", "metric_fn", "(", "preds", ",", "data_batch", ",", "isFlow", ")", "\n", "losses", "=", "sum", "(", "loss_dict", ".", "values", "(", ")", ")", "\n", "meters", ".", "update", "(", "loss", "=", "losses", ",", "**", "loss_dict", ",", "**", "metric_dict", ")", "\n", "\n", "losses", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "batch_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "meters", ".", "update", "(", "time", "=", "batch_time", ",", "data", "=", "data_time", ")", "\n", "\n", "if", "iteration", "%", "log_period", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "meters", ".", "delimiter", ".", "join", "(", "\n", "[", "\n", "\"EPOCH: {epoch:2d}\"", ",", "\n", "\"iter: {iter:4d}\"", ",", "\n", "\"{meters}\"", ",", "\n", "\"lr: {lr:.2e}\"", ",", "\n", "\"max mem: {memory:.0f}\"", ",", "\n", "]", "\n", ")", ".", "format", "(", "\n", "epoch", "=", "curr_epoch", ",", "\n", "iter", "=", "iteration", ",", "\n", "meters", "=", "str", "(", "meters", ")", ",", "\n", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "(", "1024.0", "**", "2", ")", ",", "\n", ")", "\n", ")", "\n", "tensorboard_logger", ".", "add_scalars", "(", "loss_dict", ",", "curr_epoch", "*", "total_iteration", "+", "iteration", ",", "prefix", "=", "\"train\"", ")", "\n", "tensorboard_logger", ".", "add_scalars", "(", "metric_dict", ",", "curr_epoch", "*", "total_iteration", "+", "iteration", ",", "prefix", "=", "\"train\"", ")", "\n", "\n", "", "if", "iteration", "%", "(", "100", "*", "log_period", ")", "==", "0", ":", "\n", "            ", "file_logger", "(", "data_batch", ",", "preds", ",", "curr_epoch", "*", "total_iteration", "+", "iteration", ",", "output_dir", ",", "prefix", "=", "\"train\"", ")", "\n", "\n", "", "", "return", "meters", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.train.validate_model": [[115, 168], ["logging.getLogger", "fastmvsnet.utils.metric_logger.MetricLogger", "model.train", "time.time", "data_loader.__len__", "torch.no_grad", "torch.no_grad", "enumerate", "model", "loss_fn", "metric_fn", "sum", "fastmvsnet.utils.metric_logger.MetricLogger.update", "time.time", "fastmvsnet.utils.metric_logger.MetricLogger.update", "time.time", "v.cuda", "loss_fn.values", "time.time", "logging.getLogger.info", "tensorboard_logger.add_scalars", "fastmvsnet.utils.file_logger.file_logger", "data_batch.items", "isinstance", "fastmvsnet.utils.metric_logger.MetricLogger.delimiter.join().format", "fastmvsnet.utils.metric_logger.MetricLogger.delimiter.join", "str"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.train.train", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.dataset.DTU_Test_Set.__len__", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.tensorboard_logger.TensorboardLogger.add_scalars", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.file_logger.file_logger"], ["", "def", "validate_model", "(", "model", ",", "\n", "loss_fn", ",", "\n", "metric_fn", ",", "\n", "image_scales", ",", "\n", "inter_scales", ",", "\n", "isFlow", ",", "\n", "data_loader", ",", "\n", "curr_epoch", ",", "\n", "tensorboard_logger", ",", "\n", "log_period", "=", "1", ",", "\n", "output_dir", "=", "\"\"", ",", "\n", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"fastmvsnet.validate\"", ")", "\n", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "model", ".", "train", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "total_iteration", "=", "data_loader", ".", "__len__", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "iteration", ",", "data_batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "data_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "curr_ref_img_path", "=", "data_batch", "[", "\"ref_img_path\"", "]", "\n", "\n", "data_batch", "=", "{", "k", ":", "v", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "k", ",", "v", "in", "data_batch", ".", "items", "(", ")", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", "}", "\n", "\n", "preds", "=", "model", "(", "data_batch", ",", "image_scales", ",", "inter_scales", ",", "isFlow", ")", "\n", "loss_dict", "=", "loss_fn", "(", "preds", ",", "data_batch", ",", "isFlow", ")", "\n", "metric_dict", "=", "metric_fn", "(", "preds", ",", "data_batch", ",", "isFlow", ")", "\n", "losses", "=", "sum", "(", "loss_dict", ".", "values", "(", ")", ")", "\n", "meters", ".", "update", "(", "loss", "=", "losses", ",", "**", "loss_dict", ",", "**", "metric_dict", ")", "\n", "batch_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "meters", ".", "update", "(", "time", "=", "batch_time", ",", "data", "=", "data_time", ")", "\n", "\n", "if", "iteration", "%", "log_period", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "meters", ".", "delimiter", ".", "join", "(", "\n", "[", "\n", "\"EPOCH: {epoch:2d}\"", ",", "\n", "\"iter: {iter:4d}\"", ",", "\n", "\"{meters}\"", ",", "\n", "]", "\n", ")", ".", "format", "(", "\n", "epoch", "=", "curr_epoch", ",", "\n", "iter", "=", "iteration", ",", "\n", "meters", "=", "str", "(", "meters", ")", ",", "\n", ")", "\n", ")", "\n", "tensorboard_logger", ".", "add_scalars", "(", "meters", ".", "meters", ",", "curr_epoch", "*", "total_iteration", "+", "iteration", ",", "prefix", "=", "\"valid\"", ")", "\n", "\n", "", "if", "iteration", "%", "(", "100", "*", "log_period", ")", "==", "0", ":", "\n", "                ", "file_logger", "(", "data_batch", ",", "preds", ",", "curr_epoch", "*", "total_iteration", "+", "iteration", ",", "output_dir", ",", "prefix", "=", "\"valid\"", ")", "\n", "\n", "", "", "", "return", "meters", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.train.train": [[170, 265], ["logging.getLogger", "fastmvsnet.utils.torch_utils.set_random_seed", "fastmvsnet.model.build_pointmvsnet", "logging.getLogger.info", "torch.DataParallel().cuda", "fastmvsnet.solver.build_optimizer", "fastmvsnet.solver.build_scheduler", "fastmvsnet.utils.checkpoint.Checkpointer", "fastmvsnet.utils.checkpoint.Checkpointer.load", "fastmvsnet.dataset.build_data_loader", "fastmvsnet.utils.tensorboard_logger.TensorboardLogger", "checkpointer.load.get", "checkpointer.load.get", "logging.getLogger.info", "range", "logging.getLogger.info", "fastmvsnet.dataset.build_data_loader", "fastmvsnet.solver.build_scheduler.step", "time.time", "train.train_model", "logging.getLogger.info", "str", "torch.DataParallel", "time.time", "fastmvsnet.utils.checkpoint.Checkpointer.save", "train.validate_model", "logging.getLogger.info", "fastmvsnet.utils.checkpoint.Checkpointer.save"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.torch_utils.set_random_seed", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.model.build_pointmvsnet", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.solver.build_optimizer", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.solver.build_scheduler", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.dataset.build_data_loader", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.dataset.build_data_loader", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.train.train_model", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.train.validate_model", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.checkpoint.Checkpointer.save"], ["", "def", "train", "(", "cfg", ",", "output_dir", "=", "\"\"", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"fastmvsnet.trainer\"", ")", "\n", "\n", "# build model", "\n", "set_random_seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "model", ",", "loss_fn", ",", "metric_fn", "=", "build_model", "(", "cfg", ")", "\n", "logger", ".", "info", "(", "\"Build model:\\n{}\"", ".", "format", "(", "str", "(", "model", ")", ")", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# build optimizer", "\n", "optimizer", "=", "build_optimizer", "(", "cfg", ",", "model", ")", "\n", "\n", "# build lr scheduler", "\n", "scheduler", "=", "build_scheduler", "(", "cfg", ",", "optimizer", ")", "\n", "\n", "# build checkpointer", "\n", "checkpointer", "=", "Checkpointer", "(", "model", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "scheduler", "=", "scheduler", ",", "\n", "save_dir", "=", "output_dir", ",", "\n", "logger", "=", "logger", ")", "\n", "\n", "checkpoint_data", "=", "checkpointer", ".", "load", "(", "cfg", ".", "MODEL", ".", "WEIGHT", ",", "resume", "=", "cfg", ".", "AUTO_RESUME", ")", "\n", "ckpt_period", "=", "cfg", ".", "TRAIN", ".", "CHECKPOINT_PERIOD", "\n", "\n", "# build data loader", "\n", "train_data_loader", "=", "build_data_loader", "(", "cfg", ",", "mode", "=", "\"train\"", ")", "\n", "val_period", "=", "cfg", ".", "TRAIN", ".", "VAL_PERIOD", "\n", "val_data_loader", "=", "build_data_loader", "(", "cfg", ",", "mode", "=", "\"val\"", ")", "if", "val_period", ">", "0", "else", "None", "\n", "\n", "# build tensorboard logger (optionally by comment)", "\n", "tensorboard_logger", "=", "TensorboardLogger", "(", "output_dir", ")", "\n", "\n", "# train", "\n", "max_epoch", "=", "cfg", ".", "SCHEDULER", ".", "MAX_EPOCH", "\n", "start_epoch", "=", "checkpoint_data", ".", "get", "(", "\"epoch\"", ",", "0", ")", "\n", "best_metric_name", "=", "\"best_{}\"", ".", "format", "(", "cfg", ".", "TRAIN", ".", "VAL_METRIC", ")", "\n", "best_metric", "=", "checkpoint_data", ".", "get", "(", "best_metric_name", ",", "None", ")", "\n", "logger", ".", "info", "(", "\"Start training from epoch {}\"", ".", "format", "(", "start_epoch", ")", ")", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "max_epoch", ")", ":", "\n", "        ", "cur_epoch", "=", "epoch", "+", "1", "\n", "scheduler", ".", "step", "(", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "train_meters", "=", "train_model", "(", "model", ",", "\n", "loss_fn", ",", "\n", "metric_fn", ",", "\n", "image_scales", "=", "cfg", ".", "MODEL", ".", "TRAIN", ".", "IMG_SCALES", ",", "\n", "inter_scales", "=", "cfg", ".", "MODEL", ".", "TRAIN", ".", "INTER_SCALES", ",", "\n", "isFlow", "=", "(", "cur_epoch", ">", "cfg", ".", "SCHEDULER", ".", "INIT_EPOCH", ")", ",", "\n", "data_loader", "=", "train_data_loader", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "curr_epoch", "=", "epoch", ",", "\n", "tensorboard_logger", "=", "tensorboard_logger", ",", "\n", "log_period", "=", "cfg", ".", "TRAIN", ".", "LOG_PERIOD", ",", "\n", "output_dir", "=", "output_dir", ",", "\n", ")", "\n", "epoch_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "logger", ".", "info", "(", "\"Epoch[{}]-Train {}  total_time: {:.2f}s\"", ".", "format", "(", "\n", "cur_epoch", ",", "train_meters", ".", "summary_str", ",", "epoch_time", ")", ")", "\n", "\n", "# checkpoint", "\n", "if", "cur_epoch", "%", "ckpt_period", "==", "0", "or", "cur_epoch", "==", "max_epoch", ":", "\n", "            ", "checkpoint_data", "[", "\"epoch\"", "]", "=", "cur_epoch", "\n", "checkpoint_data", "[", "best_metric_name", "]", "=", "best_metric", "\n", "checkpointer", ".", "save", "(", "\"model_{:03d}\"", ".", "format", "(", "cur_epoch", ")", ",", "**", "checkpoint_data", ")", "\n", "\n", "# validate", "\n", "", "if", "val_period", "<", "1", ":", "\n", "            ", "continue", "\n", "", "if", "cur_epoch", "%", "val_period", "==", "0", "or", "cur_epoch", "==", "max_epoch", ":", "\n", "            ", "val_meters", "=", "validate_model", "(", "model", ",", "\n", "loss_fn", ",", "\n", "metric_fn", ",", "\n", "image_scales", "=", "cfg", ".", "MODEL", ".", "VAL", ".", "IMG_SCALES", ",", "\n", "inter_scales", "=", "cfg", ".", "MODEL", ".", "VAL", ".", "INTER_SCALES", ",", "\n", "isFlow", "=", "(", "cur_epoch", ">", "cfg", ".", "SCHEDULER", ".", "INIT_EPOCH", ")", ",", "\n", "data_loader", "=", "val_data_loader", ",", "\n", "curr_epoch", "=", "epoch", ",", "\n", "tensorboard_logger", "=", "tensorboard_logger", ",", "\n", "log_period", "=", "cfg", ".", "TEST", ".", "LOG_PERIOD", ",", "\n", "output_dir", "=", "output_dir", ",", "\n", ")", "\n", "logger", ".", "info", "(", "\"Epoch[{}]-Val {}\"", ".", "format", "(", "cur_epoch", ",", "val_meters", ".", "summary_str", ")", ")", "\n", "\n", "# best validation", "\n", "cur_metric", "=", "val_meters", ".", "meters", "[", "cfg", ".", "TRAIN", ".", "VAL_METRIC", "]", ".", "global_avg", "\n", "if", "best_metric", "is", "None", "or", "cur_metric", ">", "best_metric", ":", "\n", "                ", "best_metric", "=", "cur_metric", "\n", "checkpoint_data", "[", "\"epoch\"", "]", "=", "cur_epoch", "\n", "checkpoint_data", "[", "best_metric_name", "]", "=", "best_metric", "\n", "checkpointer", ".", "save", "(", "\"model_best\"", ",", "**", "checkpoint_data", ")", "\n", "\n", "", "", "", "logger", ".", "info", "(", "\"Best val-{} = {}\"", ".", "format", "(", "cfg", ".", "TRAIN", ".", "VAL_METRIC", ",", "best_metric", ")", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.train.main": [[267, 290], ["train.parse_args", "torch.cuda.device_count", "torch.cuda.device_count", "fastmvsnet.config.load_cfg_from_file", "fastmvsnet.config.load_cfg_from_file.merge_from_list", "fastmvsnet.config.load_cfg_from_file.freeze", "fastmvsnet.utils.logger.setup_logger", "fastmvsnet.utils.logger.setup_logger.info", "fastmvsnet.utils.logger.setup_logger.info", "fastmvsnet.utils.logger.setup_logger.info", "fastmvsnet.utils.logger.setup_logger.info", "train.train", "config_path.replace.replace", "output_dir.replace.replace", "fastmvsnet.utils.io.mkdir", "os.splitext"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.test.parse_args", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.config.load_cfg_from_file", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.logger.setup_logger", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.train.train", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.mkdir"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "cfg", "=", "load_cfg_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "if", "output_dir", ":", "\n", "        ", "config_path", "=", "osp", ".", "splitext", "(", "args", ".", "config_file", ")", "[", "0", "]", "\n", "config_path", "=", "config_path", ".", "replace", "(", "\"configs\"", ",", "\"outputs\"", ")", "\n", "output_dir", "=", "output_dir", ".", "replace", "(", "'@'", ",", "config_path", ")", "\n", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "\"fastmvsnet\"", ",", "output_dir", ",", "prefix", "=", "\"train\"", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUs\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "logger", ".", "info", "(", "\"Loaded configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "train", "(", "cfg", ",", "output_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.dataset.DTU_Train_Val_Set.__init__": [[32, 56], ["os.join", "os.join", "open().read().split", "dataset.DTU_Train_Val_Set._load_dataset", "open().read", "open"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.dataset.DTU_Test_Set._load_dataset"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "dataset_name", ",", "\n", "num_view", "=", "3", ",", "\n", "num_virtual_plane", "=", "128", ",", "\n", "interval_scale", "=", "1.6", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "num_view", "=", "num_view", "\n", "self", ".", "interval_scale", "=", "interval_scale", "\n", "self", ".", "num_virtual_plane", "=", "num_virtual_plane", "\n", "\n", "self", ".", "cluster_file_path", "=", "osp", ".", "join", "(", "root_dir", ",", "self", ".", "cluster_file_path", ")", "\n", "self", ".", "cluster_list", "=", "open", "(", "self", ".", "cluster_file_path", ")", ".", "read", "(", ")", ".", "split", "(", ")", "\n", "# self.cluster_list =", "\n", "assert", "(", "dataset_name", "in", "[", "\"train\"", ",", "\"valid\"", "]", ")", ",", "\"Unknown dataset_name: {}\"", ".", "format", "(", "dataset_name", ")", "\n", "\n", "if", "dataset_name", "==", "\"train\"", ":", "\n", "            ", "self", ".", "data_set", "=", "self", ".", "training_set", "\n", "self", ".", "lighting_set", "=", "self", ".", "training_lighting_set", "\n", "", "elif", "dataset_name", "==", "\"valid\"", ":", "\n", "            ", "self", ".", "data_set", "=", "self", ".", "validation_set", "\n", "self", ".", "lighting_set", "=", "self", ".", "validation_lighting_set", "\n", "\n", "", "self", ".", "path_list", "=", "self", ".", "_load_dataset", "(", "self", ".", "data_set", ",", "self", ".", "lighting_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.dataset.DTU_Train_Val_Set._load_dataset": [[57, 101], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "range", "int", "int", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "view_image_paths.append", "view_cam_paths.append", "view_depth_paths.append", "range", "path_list.append", "int", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "view_image_paths.append", "view_cam_paths.append", "view_depth_paths.append"], "methods", ["None"], ["", "def", "_load_dataset", "(", "self", ",", "dataset", ",", "lighting_set", ")", ":", "\n", "        ", "path_list", "=", "[", "]", "\n", "for", "ind", "in", "dataset", ":", "\n", "            ", "image_folder", "=", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "\"Rectified/scan{}_train\"", ".", "format", "(", "ind", ")", ")", "\n", "cam_folder", "=", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "\"Cameras/train\"", ")", "\n", "depth_folder", "=", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "\"Depths/scan{}_train\"", ".", "format", "(", "ind", ")", ")", "\n", "\n", "for", "lighting_ind", "in", "lighting_set", ":", "\n", "# for each reference image", "\n", "                ", "for", "p", "in", "range", "(", "0", ",", "int", "(", "self", ".", "cluster_list", "[", "0", "]", ")", ")", ":", "\n", "                    ", "paths", "=", "{", "}", "\n", "pts_paths", "=", "[", "]", "\n", "view_image_paths", "=", "[", "]", "\n", "view_cam_paths", "=", "[", "]", "\n", "view_depth_paths", "=", "[", "]", "\n", "\n", "# ref image", "\n", "ref_index", "=", "int", "(", "self", ".", "cluster_list", "[", "22", "*", "p", "+", "1", "]", ")", "\n", "ref_image_path", "=", "osp", ".", "join", "(", "\n", "image_folder", ",", "\"rect_{:03d}_{}_r5000.png\"", ".", "format", "(", "ref_index", "+", "1", ",", "lighting_ind", ")", ")", "\n", "ref_cam_path", "=", "osp", ".", "join", "(", "cam_folder", ",", "\"{:08d}_cam.txt\"", ".", "format", "(", "ref_index", ")", ")", "\n", "ref_depth_path", "=", "osp", ".", "join", "(", "depth_folder", ",", "\"depth_map_{:04d}.pfm\"", ".", "format", "(", "ref_index", ")", ")", "\n", "\n", "view_image_paths", ".", "append", "(", "ref_image_path", ")", "\n", "view_cam_paths", ".", "append", "(", "ref_cam_path", ")", "\n", "view_depth_paths", ".", "append", "(", "ref_depth_path", ")", "\n", "\n", "# view images", "\n", "for", "view", "in", "range", "(", "self", ".", "num_view", "-", "1", ")", ":", "\n", "                        ", "view_index", "=", "int", "(", "self", ".", "cluster_list", "[", "22", "*", "p", "+", "2", "*", "view", "+", "3", "]", ")", "\n", "view_image_path", "=", "osp", ".", "join", "(", "\n", "image_folder", ",", "\"rect_{:03d}_{}_r5000.png\"", ".", "format", "(", "view_index", "+", "1", ",", "lighting_ind", ")", ")", "\n", "view_cam_path", "=", "osp", ".", "join", "(", "cam_folder", ",", "\"{:08d}_cam.txt\"", ".", "format", "(", "view_index", ")", ")", "\n", "view_depth_path", "=", "osp", ".", "join", "(", "depth_folder", ",", "\"depth_map_{:04d}.pfm\"", ".", "format", "(", "view_index", ")", ")", "\n", "view_image_paths", ".", "append", "(", "view_image_path", ")", "\n", "view_cam_paths", ".", "append", "(", "view_cam_path", ")", "\n", "view_depth_paths", ".", "append", "(", "view_depth_path", ")", "\n", "", "paths", "[", "\"view_image_paths\"", "]", "=", "view_image_paths", "\n", "paths", "[", "\"view_cam_paths\"", "]", "=", "view_cam_paths", "\n", "paths", "[", "\"view_depth_paths\"", "]", "=", "view_depth_paths", "\n", "\n", "path_list", ".", "append", "(", "paths", ")", "\n", "\n", "", "", "", "return", "path_list", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.dataset.DTU_Train_Val_Set.__getitem__": [[102, 151], ["range", "fastmvsnet.utils.preprocess.mask_depth_image", "numpy.stack", "numpy.stack", "numpy.stack", "torch.tensor().permute().type", "torch.tensor().type", "torch.tensor().permute().type", "torch.tensor().unsqueeze().permute().type", "fastmvsnet.load_cam_dtu", "images.append", "cams.append", "depth_images.append", "open", "fastmvsnet.load_pfm", "torch.tensor().permute", "torch.tensor", "torch.tensor().permute", "torch.tensor().unsqueeze().permute", "cv2.imread", "print", "torch.tensor", "torch.tensor", "torch.tensor().unsqueeze", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.preprocess.mask_depth_image", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.load_cam_dtu", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.load_pfm"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "paths", "=", "self", ".", "path_list", "[", "index", "]", "\n", "images", "=", "[", "]", "\n", "cams", "=", "[", "]", "\n", "for", "view", "in", "range", "(", "self", ".", "num_view", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "try", ":", "\n", "                    ", "image", "=", "cv2", ".", "imread", "(", "paths", "[", "\"view_image_paths\"", "]", "[", "view", "]", ")", "\n", "#todo", "\n", "# image = norm_image(image)", "\n", "", "except", "Exception", ":", "\n", "                    ", "print", "(", "paths", "[", "\"view_image_paths\"", "]", "[", "view", "]", ")", "\n", "continue", "\n", "", "break", "\n", "", "cam", "=", "io", ".", "load_cam_dtu", "(", "open", "(", "paths", "[", "\"view_cam_paths\"", "]", "[", "view", "]", ")", ",", "\n", "num_depth", "=", "self", ".", "num_virtual_plane", ",", "\n", "interval_scale", "=", "self", ".", "interval_scale", ")", "\n", "images", ".", "append", "(", "image", ")", "\n", "cams", ".", "append", "(", "cam", ")", "\n", "\n", "", "depth_images", "=", "[", "]", "\n", "for", "depth_path", "in", "paths", "[", "\"view_depth_paths\"", "]", ":", "\n", "            ", "depth_image", "=", "io", ".", "load_pfm", "(", "depth_path", ")", "[", "0", "]", "\n", "depth_images", ".", "append", "(", "depth_image", ")", "\n", "\n", "# mask out-of-range depth pixels (in a relaxed range)", "\n", "", "ref_depth", "=", "depth_images", "[", "0", "]", "\n", "depth_start", "=", "cams", "[", "0", "]", "[", "1", ",", "3", ",", "0", "]", "+", "cams", "[", "0", "]", "[", "1", ",", "3", ",", "1", "]", "\n", "depth_end", "=", "cams", "[", "0", "]", "[", "1", ",", "3", ",", "0", "]", "+", "(", "self", ".", "num_virtual_plane", "-", "2", ")", "*", "cams", "[", "0", "]", "[", "1", ",", "3", ",", "1", "]", "\n", "ref_depth", "=", "mask_depth_image", "(", "ref_depth", ",", "depth_start", ",", "depth_end", ")", "\n", "\n", "depth_list", "=", "np", ".", "stack", "(", "depth_images", ",", "axis", "=", "0", ")", "\n", "img_list", "=", "np", ".", "stack", "(", "images", ",", "axis", "=", "0", ")", "\n", "cam_params_list", "=", "np", ".", "stack", "(", "cams", ",", "axis", "=", "0", ")", "\n", "\n", "img_list", "=", "torch", ".", "tensor", "(", "img_list", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "cam_params_list", "=", "torch", ".", "tensor", "(", "cam_params_list", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "ref_depth", "=", "torch", ".", "tensor", "(", "ref_depth", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "depth_list", "=", "torch", ".", "tensor", "(", "depth_list", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "depth_list", "=", "depth_list", "*", "(", "depth_list", ">", "depth_start", ")", ".", "float", "(", ")", "*", "(", "depth_list", "<", "depth_end", ")", ".", "float", "(", ")", "\n", "\n", "return", "{", "\n", "\"img_list\"", ":", "img_list", ",", "\n", "\"cam_params_list\"", ":", "cam_params_list", ",", "\n", "\"gt_depth_img\"", ":", "ref_depth", ",", "\n", "\"depth_list\"", ":", "depth_list", ",", "\n", "\"ref_img_path\"", ":", "paths", "[", "\"view_image_paths\"", "]", "[", "0", "]", ",", "\n", "\"mean\"", ":", "self", ".", "mean", ",", "\n", "\"std\"", ":", "self", ".", "std", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.dataset.DTU_Train_Val_Set.__len__": [[153, 155], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "path_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.dataset.DTU_Test_Set.__init__": [[167, 193], ["os.join", "os.join", "open().read().split", "dataset.DTU_Test_Set._load_dataset", "open().read", "open"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.dataset.DTU_Test_Set._load_dataset"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "dataset_name", ",", "\n", "num_view", "=", "3", ",", "\n", "height", "=", "1152", ",", "width", "=", "1600", ",", "\n", "num_virtual_plane", "=", "128", ",", "\n", "interval_scale", "=", "1.6", ",", "\n", "base_image_size", "=", "64", ",", "\n", "depth_folder", "=", "\"\"", ")", ":", "\n", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "num_view", "=", "num_view", "\n", "self", ".", "interval_scale", "=", "interval_scale", "\n", "self", ".", "num_virtual_plane", "=", "num_virtual_plane", "\n", "self", ".", "base_image_size", "=", "base_image_size", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "depth_folder", "=", "depth_folder", "\n", "\n", "self", ".", "cluster_file_path", "=", "osp", ".", "join", "(", "root_dir", ",", "self", ".", "cluster_file_path", ")", "\n", "self", ".", "cluster_list", "=", "open", "(", "self", ".", "cluster_file_path", ")", ".", "read", "(", ")", ".", "split", "(", ")", "\n", "# self.cluster_list =", "\n", "assert", "(", "dataset_name", "in", "[", "\"test\"", "]", ")", ",", "\"Unknown dataset_name: {}\"", ".", "format", "(", "dataset_name", ")", "\n", "\n", "self", ".", "data_set", "=", "self", ".", "test_set", "\n", "self", ".", "lighting_set", "=", "self", ".", "test_lighting_set", "\n", "\n", "self", ".", "path_list", "=", "self", ".", "_load_dataset", "(", "self", ".", "data_set", ",", "self", ".", "lighting_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.dataset.DTU_Test_Set._load_dataset": [[194, 238], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "range", "int", "int", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "view_image_paths.append", "view_cam_paths.append", "view_depth_paths.append", "range", "path_list.append", "int", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "view_image_paths.append", "view_cam_paths.append", "view_depth_paths.append"], "methods", ["None"], ["", "def", "_load_dataset", "(", "self", ",", "dataset", ",", "lighting_set", ")", ":", "\n", "        ", "path_list", "=", "[", "]", "\n", "for", "ind", "in", "dataset", ":", "\n", "            ", "image_folder", "=", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "\"Eval/Rectified/scan{}\"", ".", "format", "(", "ind", ")", ")", "\n", "cam_folder", "=", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "\"Cameras\"", ")", "\n", "depth_folder", "=", "osp", ".", "join", "(", "self", ".", "depth_folder", ",", "\"scan{}\"", ".", "format", "(", "ind", ")", ")", "\n", "\n", "for", "lighting_ind", "in", "lighting_set", ":", "\n", "# for each reference image", "\n", "                ", "for", "p", "in", "range", "(", "0", ",", "int", "(", "self", ".", "cluster_list", "[", "0", "]", ")", ")", ":", "\n", "                    ", "paths", "=", "{", "}", "\n", "# pts_paths = []", "\n", "view_image_paths", "=", "[", "]", "\n", "view_cam_paths", "=", "[", "]", "\n", "view_depth_paths", "=", "[", "]", "\n", "\n", "# ref image", "\n", "ref_index", "=", "int", "(", "self", ".", "cluster_list", "[", "22", "*", "p", "+", "1", "]", ")", "\n", "ref_image_path", "=", "osp", ".", "join", "(", "\n", "image_folder", ",", "\"rect_{:03d}_{}_r5000.png\"", ".", "format", "(", "ref_index", "+", "1", ",", "lighting_ind", ")", ")", "\n", "ref_cam_path", "=", "osp", ".", "join", "(", "cam_folder", ",", "\"{:08d}_cam.txt\"", ".", "format", "(", "ref_index", ")", ")", "\n", "ref_depth_path", "=", "osp", ".", "join", "(", "depth_folder", ",", "\"depth_map_{:04d}.pfm\"", ".", "format", "(", "ref_index", ")", ")", "\n", "\n", "view_image_paths", ".", "append", "(", "ref_image_path", ")", "\n", "view_cam_paths", ".", "append", "(", "ref_cam_path", ")", "\n", "view_depth_paths", ".", "append", "(", "ref_depth_path", ")", "\n", "\n", "# view images", "\n", "for", "view", "in", "range", "(", "self", ".", "num_view", "-", "1", ")", ":", "\n", "                        ", "view_index", "=", "int", "(", "self", ".", "cluster_list", "[", "22", "*", "p", "+", "2", "*", "view", "+", "3", "]", ")", "\n", "view_image_path", "=", "osp", ".", "join", "(", "\n", "image_folder", ",", "\"rect_{:03d}_{}_r5000.png\"", ".", "format", "(", "view_index", "+", "1", ",", "lighting_ind", ")", ")", "\n", "view_cam_path", "=", "osp", ".", "join", "(", "cam_folder", ",", "\"{:08d}_cam.txt\"", ".", "format", "(", "view_index", ")", ")", "\n", "view_depth_path", "=", "osp", ".", "join", "(", "depth_folder", ",", "\"depth_map_{:04d}.pfm\"", ".", "format", "(", "view_index", ")", ")", "\n", "view_image_paths", ".", "append", "(", "view_image_path", ")", "\n", "view_cam_paths", ".", "append", "(", "view_cam_path", ")", "\n", "view_depth_paths", ".", "append", "(", "view_depth_path", ")", "\n", "", "paths", "[", "\"view_image_paths\"", "]", "=", "view_image_paths", "\n", "paths", "[", "\"view_cam_paths\"", "]", "=", "view_cam_paths", "\n", "paths", "[", "\"view_depth_paths\"", "]", "=", "view_depth_paths", "\n", "\n", "path_list", ".", "append", "(", "paths", ")", "\n", "\n", "", "", "", "return", "path_list", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.dataset.DTU_Test_Set.__getitem__": [[239, 309], ["range", "depth_images[].copy", "fastmvsnet.utils.preprocess.scale_dtu_input", "fastmvsnet.utils.preprocess.crop_dtu_input", "croped_images[].copy", "enumerate", "numpy.stack", "numpy.stack", "numpy.stack", "torch.tensor().permute().float", "torch.tensor().float", "torch.tensor().unsqueeze().permute().float", "fastmvsnet.load_cam_dtu", "images.append", "cams.append", "float", "float", "print", "exit", "fastmvsnet.utils.preprocess.norm_image", "open", "depth_images.append", "depth_images.append", "torch.tensor().permute", "torch.tensor", "torch.tensor().unsqueeze().permute", "cv2.imread", "fastmvsnet.load_pfm", "numpy.zeros", "print", "torch.tensor", "torch.tensor().unsqueeze", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.preprocess.scale_dtu_input", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.preprocess.crop_dtu_input", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.load_cam_dtu", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.preprocess.norm_image", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.load_pfm"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "paths", "=", "self", ".", "path_list", "[", "index", "]", "\n", "depth_images", "=", "[", "]", "\n", "\n", "images", "=", "[", "]", "\n", "cams", "=", "[", "]", "\n", "for", "view", "in", "range", "(", "self", ".", "num_view", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "try", ":", "\n", "                    ", "image", "=", "cv2", ".", "imread", "(", "paths", "[", "\"view_image_paths\"", "]", "[", "view", "]", ")", "\n", "", "except", "Exception", ":", "\n", "                    ", "print", "(", "paths", "[", "\"view_image_paths\"", "]", "[", "view", "]", ")", "\n", "continue", "\n", "", "break", "\n", "\n", "", "cam", "=", "io", ".", "load_cam_dtu", "(", "open", "(", "paths", "[", "\"view_cam_paths\"", "]", "[", "view", "]", ")", ",", "\n", "num_depth", "=", "self", ".", "num_virtual_plane", ",", "\n", "interval_scale", "=", "self", ".", "interval_scale", ")", "\n", "\n", "images", ".", "append", "(", "image", ")", "\n", "cams", ".", "append", "(", "cam", ")", "\n", "\n", "", "if", "self", ".", "depth_folder", ":", "\n", "            ", "for", "depth_path", "in", "paths", "[", "\"view_depth_paths\"", "]", ":", "\n", "                ", "depth_image", "=", "io", ".", "load_pfm", "(", "depth_path", ")", "[", "0", "]", "\n", "depth_images", ".", "append", "(", "depth_image", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "depth_path", "in", "paths", "[", "\"view_depth_paths\"", "]", ":", "\n", "                ", "depth_images", ".", "append", "(", "np", ".", "zeros", "(", "(", "self", ".", "height", ",", "self", ".", "width", ")", ",", "np", ".", "float", ")", ")", "\n", "\n", "", "", "ref_depth", "=", "depth_images", "[", "0", "]", ".", "copy", "(", ")", "\n", "\n", "h_scale", "=", "float", "(", "self", ".", "height", ")", "/", "images", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "w_scale", "=", "float", "(", "self", ".", "width", ")", "/", "images", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "if", "h_scale", ">", "1", "or", "w_scale", ">", "1", ":", "\n", "            ", "print", "(", "\"max_h, max_w should < W and H!\"", ")", "\n", "exit", "(", ")", "\n", "", "resize_scale", "=", "h_scale", "\n", "if", "w_scale", ">", "h_scale", ":", "\n", "            ", "resize_scale", "=", "w_scale", "\n", "", "scaled_input_images", ",", "scaled_input_cams", ",", "ref_depth", "=", "scale_dtu_input", "(", "images", ",", "cams", ",", "depth_image", "=", "ref_depth", ",", "\n", "scale", "=", "resize_scale", ")", "\n", "\n", "# crop to fit network", "\n", "croped_images", ",", "croped_cams", ",", "ref_depth", "=", "crop_dtu_input", "(", "scaled_input_images", ",", "scaled_input_cams", ",", "\n", "height", "=", "self", ".", "height", ",", "width", "=", "self", ".", "width", ",", "\n", "base_image_size", "=", "self", ".", "base_image_size", ",", "\n", "depth_image", "=", "ref_depth", ")", "\n", "ref_image", "=", "croped_images", "[", "0", "]", ".", "copy", "(", ")", "\n", "for", "i", ",", "image", "in", "enumerate", "(", "croped_images", ")", ":", "\n", "            ", "croped_images", "[", "i", "]", "=", "norm_image", "(", "image", ")", "\n", "\n", "", "depth_list", "=", "np", ".", "stack", "(", "depth_images", ",", "axis", "=", "0", ")", "\n", "img_list", "=", "np", ".", "stack", "(", "croped_images", ",", "axis", "=", "0", ")", "\n", "cam_params_list", "=", "np", ".", "stack", "(", "croped_cams", ",", "axis", "=", "0", ")", "\n", "# cam_pos_list = np.stack(camspos, axis=0)", "\n", "\n", "img_list", "=", "torch", ".", "tensor", "(", "img_list", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "cam_params_list", "=", "torch", ".", "tensor", "(", "cam_params_list", ")", ".", "float", "(", ")", "\n", "depth_list", "=", "torch", ".", "tensor", "(", "depth_list", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "\n", "return", "{", "\n", "\"img_list\"", ":", "img_list", ",", "\n", "\"cam_params_list\"", ":", "cam_params_list", ",", "\n", "\"gt_depth_img\"", ":", "ref_depth", ",", "\n", "\"depth_list\"", ":", "depth_list", ",", "\n", "\"ref_img_path\"", ":", "paths", "[", "\"view_image_paths\"", "]", "[", "0", "]", ",", "\n", "\"ref_img\"", ":", "ref_image", ",", "\n", "\"mean\"", ":", "self", ".", "mean", ",", "\n", "\"std\"", ":", "self", ".", "std", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.dataset.DTU_Test_Set.__len__": [[311, 313], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "path_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.dataset.build_data_loader": [[315, 358], ["torch.utils.data.DataLoader", "dataset.DTU_Train_Val_Set", "dataset.DTU_Train_Val_Set", "dataset.DTU_Test_Set", "ValueError"], "function", ["None"], ["", "", "def", "build_data_loader", "(", "cfg", ",", "mode", "=", "\"train\"", ")", ":", "\n", "    ", "if", "mode", "==", "\"train\"", ":", "\n", "        ", "dataset", "=", "DTU_Train_Val_Set", "(", "\n", "root_dir", "=", "cfg", ".", "DATA", ".", "TRAIN", ".", "ROOT_DIR", ",", "\n", "dataset_name", "=", "\"train\"", ",", "\n", "num_view", "=", "cfg", ".", "DATA", ".", "TRAIN", ".", "NUM_VIEW", ",", "\n", "interval_scale", "=", "cfg", ".", "DATA", ".", "TRAIN", ".", "INTER_SCALE", ",", "\n", "num_virtual_plane", "=", "cfg", ".", "DATA", ".", "TRAIN", ".", "NUM_VIRTUAL_PLANE", ",", "\n", ")", "\n", "", "elif", "mode", "==", "\"val\"", ":", "\n", "        ", "dataset", "=", "DTU_Train_Val_Set", "(", "\n", "root_dir", "=", "cfg", ".", "DATA", ".", "VAL", ".", "ROOT_DIR", ",", "\n", "dataset_name", "=", "\"val\"", ",", "\n", "num_view", "=", "cfg", ".", "DATA", ".", "VAL", ".", "NUM_VIEW", ",", "\n", "interval_scale", "=", "cfg", ".", "DATA", ".", "TRAIN", ".", "INTER_SCALE", ",", "\n", "num_virtual_plane", "=", "cfg", ".", "DATA", ".", "TRAIN", ".", "NUM_VIRTUAL_PLANE", ",", "\n", ")", "\n", "", "elif", "mode", "==", "\"test\"", ":", "\n", "        ", "dataset", "=", "DTU_Test_Set", "(", "\n", "root_dir", "=", "cfg", ".", "DATA", ".", "TEST", ".", "ROOT_DIR", ",", "\n", "dataset_name", "=", "\"test\"", ",", "\n", "num_view", "=", "cfg", ".", "DATA", ".", "TEST", ".", "NUM_VIEW", ",", "\n", "height", "=", "cfg", ".", "DATA", ".", "TEST", ".", "IMG_HEIGHT", ",", "\n", "width", "=", "cfg", ".", "DATA", ".", "TEST", ".", "IMG_WIDTH", ",", "\n", "interval_scale", "=", "cfg", ".", "DATA", ".", "TEST", ".", "INTER_SCALE", ",", "\n", "num_virtual_plane", "=", "cfg", ".", "DATA", ".", "TEST", ".", "NUM_VIRTUAL_PLANE", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown mode: {}.\"", ".", "format", "(", "mode", ")", ")", "\n", "\n", "", "if", "mode", "==", "\"train\"", ":", "\n", "        ", "batch_size", "=", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "cfg", ".", "TEST", ".", "BATCH_SIZE", "\n", "\n", "", "data_loader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", ",", "\n", "shuffle", "=", "(", "mode", "==", "\"train\"", ")", ",", "\n", "num_workers", "=", "cfg", ".", "DATA", ".", "NUM_WORKERS", ",", "\n", ")", "\n", "\n", "return", "data_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.test.parse_args": [[22, 47], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch Fast-MVSNet Evaluation\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cfg\"", ",", "\n", "dest", "=", "\"config_file\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cpu\"", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"whether to only use cpu for test\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.test.test_model": [[49, 77], ["logging.getLogger", "fastmvsnet.utils.metric_logger.MetricLogger", "model.train", "time.time", "data_loader.__len__", "torch.no_grad", "torch.no_grad", "enumerate", "path_list.extend", "model", "time.time", "fastmvsnet.utils.metric_logger.MetricLogger.update", "logging.getLogger.info", "fastmvsnet.utils.eval_file_logger.eval_file_logger", "time.time", "time.time", "v.cuda", "str", "data_batch.items", "isinstance"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.train.train", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.dataset.DTU_Test_Set.__len__", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.eval_file_logger.eval_file_logger"], ["", "def", "test_model", "(", "model", ",", "\n", "image_scales", ",", "\n", "inter_scales", ",", "\n", "data_loader", ",", "\n", "folder", ",", "\n", "isCPU", "=", "False", ",", "\n", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"fastmvsnet.train\"", ")", "\n", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "model", ".", "train", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "total_iteration", "=", "data_loader", ".", "__len__", "(", ")", "\n", "path_list", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "iteration", ",", "data_batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "data_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "curr_ref_img_path", "=", "data_batch", "[", "\"ref_img_path\"", "]", "[", "0", "]", "\n", "path_list", ".", "extend", "(", "curr_ref_img_path", ")", "\n", "if", "not", "isCPU", ":", "\n", "                ", "data_batch", "=", "{", "k", ":", "v", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "k", ",", "v", "in", "data_batch", ".", "items", "(", ")", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", "}", "\n", "", "preds", "=", "model", "(", "data_batch", ",", "image_scales", ",", "inter_scales", ",", "isGN", "=", "True", ",", "isTest", "=", "True", ")", "\n", "\n", "batch_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "meters", ".", "update", "(", "time", "=", "batch_time", ",", "data", "=", "data_time", ")", "\n", "logger", ".", "info", "(", "\n", "\"{} finished.\"", ".", "format", "(", "curr_ref_img_path", ")", "+", "str", "(", "meters", ")", ")", "\n", "eval_file_logger", "(", "data_batch", ",", "preds", ",", "curr_ref_img_path", ",", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.test.test": [[79, 107], ["logging.getLogger", "fastmvsnet.model.build_pointmvsnet", "fastmvsnet.utils.checkpoint.Checkpointer", "fastmvsnet.dataset.build_data_loader", "time.time", "test.test_model", "logging.getLogger.info", "torch.DataParallel().cuda", "cfg.TEST.WEIGHT.replace", "fastmvsnet.utils.checkpoint.Checkpointer.load", "fastmvsnet.utils.checkpoint.Checkpointer.load", "time.time", "torch.DataParallel", "output_dir.split"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.model.build_pointmvsnet", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.dataset.build_data_loader", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.test.test_model", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.checkpoint.Checkpointer.load"], ["", "", "", "def", "test", "(", "cfg", ",", "output_dir", ",", "isCPU", "=", "False", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"fastmvsnet.tester\"", ")", "\n", "# build model", "\n", "model", ",", "_", ",", "_", "=", "build_model", "(", "cfg", ")", "\n", "if", "not", "isCPU", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# build checkpointer", "\n", "", "checkpointer", "=", "Checkpointer", "(", "model", ",", "save_dir", "=", "output_dir", ")", "\n", "\n", "if", "cfg", ".", "TEST", ".", "WEIGHT", ":", "\n", "        ", "weight_path", "=", "cfg", ".", "TEST", ".", "WEIGHT", ".", "replace", "(", "\"@\"", ",", "output_dir", ")", "\n", "checkpointer", ".", "load", "(", "weight_path", ",", "resume", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "checkpointer", ".", "load", "(", "None", ",", "resume", "=", "True", ")", "\n", "\n", "# build data loader", "\n", "", "test_data_loader", "=", "build_data_loader", "(", "cfg", ",", "mode", "=", "\"test\"", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "test_model", "(", "model", ",", "\n", "image_scales", "=", "cfg", ".", "MODEL", ".", "TEST", ".", "IMG_SCALES", ",", "\n", "inter_scales", "=", "cfg", ".", "MODEL", ".", "TEST", ".", "INTER_SCALES", ",", "\n", "data_loader", "=", "test_data_loader", ",", "\n", "folder", "=", "output_dir", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ",", "\n", "isCPU", "=", "isCPU", ",", "\n", ")", "\n", "test_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "logger", ".", "info", "(", "\"Test forward time: {:.2f}s\"", ".", "format", "(", "test_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.test.main": [[109, 138], ["test.parse_args", "torch.cuda.device_count", "torch.cuda.device_count", "fastmvsnet.config.load_cfg_from_file", "fastmvsnet.config.load_cfg_from_file.merge_from_list", "fastmvsnet.config.load_cfg_from_file.freeze", "fastmvsnet.utils.logger.setup_logger", "fastmvsnet.utils.logger.setup_logger.info", "fastmvsnet.utils.logger.setup_logger.info", "fastmvsnet.utils.logger.setup_logger.info", "test.test", "config_path.replace.replace", "output_dir.replace.replace", "fastmvsnet.utils.io.mkdir", "fastmvsnet.utils.logger.setup_logger.info", "fastmvsnet.utils.logger.setup_logger.info", "os.splitext"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.test.parse_args", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.config.load_cfg_from_file", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.logger.setup_logger", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.test.test", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.mkdir"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "cfg", "=", "load_cfg_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "assert", "cfg", ".", "TEST", ".", "BATCH_SIZE", "==", "1", "\n", "\n", "isCPU", "=", "args", ".", "cpu", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "if", "output_dir", ":", "\n", "        ", "config_path", "=", "osp", ".", "splitext", "(", "args", ".", "config_file", ")", "[", "0", "]", "\n", "config_path", "=", "config_path", ".", "replace", "(", "\"configs\"", ",", "\"outputs\"", ")", "\n", "output_dir", "=", "output_dir", ".", "replace", "(", "'@'", ",", "config_path", ")", "\n", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "\"fastmvsnet\"", ",", "output_dir", ",", "prefix", "=", "\"test\"", ")", "\n", "if", "isCPU", ":", "\n", "        ", "logger", ".", "info", "(", "\"Using CPU\"", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"Using {} GPUs\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "", "logger", ".", "info", "(", "args", ")", "\n", "\n", "logger", ".", "info", "(", "\"Loaded configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "test", "(", "cfg", ",", "output_dir", ",", "isCPU", "=", "isCPU", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.model.FastMVSNet.__init__": [[14, 31], ["torch.Module.__init__", "fastmvsnet.utils.feature_fetcher.FeatureFetcher", "fastmvsnet.utils.feature_fetcher.FeatureGradFetcher", "fastmvsnet.utils.feature_fetcher.PointGrad", "ImageConv", "VolumeConv", "PropagationNet", "ImageConv"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "img_base_channels", "=", "8", ",", "\n", "vol_base_channels", "=", "8", ",", "\n", "flow_channels", "=", "(", "64", ",", "64", ",", "16", ",", "1", ")", ",", "\n", "k", "=", "16", ",", "\n", ")", ":", "\n", "        ", "super", "(", "FastMVSNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "\n", "self", ".", "feature_fetcher", "=", "FeatureFetcher", "(", ")", "\n", "self", ".", "feature_grad_fetcher", "=", "FeatureGradFetcher", "(", ")", "\n", "self", ".", "point_grad_fetcher", "=", "PointGrad", "(", ")", "\n", "\n", "self", ".", "coarse_img_conv", "=", "ImageConv", "(", "img_base_channels", ")", "\n", "self", ".", "coarse_vol_conv", "=", "VolumeConv", "(", "img_base_channels", "*", "4", ",", "vol_base_channels", ")", "\n", "self", ".", "propagation_net", "=", "PropagationNet", "(", "img_base_channels", ")", "\n", "self", ".", "flow_img_conv", "=", "ImageConv", "(", "img_base_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.model.FastMVSNet.forward": [[32, 256], ["collections.OrderedDict", "cam_params_list[].clone", "cam_extrinsic[].unsqueeze", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "cam_params_list[].clone", "cam_params_list[].long", "list", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "fastmvsnet.functions.functions.get_pixel_grids", "[].contiguous", "fastmvsnet.functions.functions.get_pixel_grids().view().expand().to.view().expand().to", "cam_intrinsic[].clone", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view.size", "torch.matmul().transpose().contiguous().view.size", "torch.matmul().transpose().contiguous().view.size", "model.FastMVSNet.feature_fetcher", "ref_feature[].contiguous", "ref_feature.unsqueeze().expand().contiguous().view.unsqueeze().expand().contiguous().view.unsqueeze().expand().contiguous().view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "model.FastMVSNet.view", "model.FastMVSNet.coarse_vol_conv().squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "depth_volume.view().expand.view().expand.view().expand", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "fastmvsnet.functions.functions.get_propability_map", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "model.FastMVSNet.propagation_net", "img_list.size", "coarse_feature_maps.append", "list", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.inverse().unsqueeze", "torch.inverse().unsqueeze", "torch.inverse().unsqueeze", "torch.inverse().unsqueeze", "torch.inverse().unsqueeze", "torch.inverse().unsqueeze", "torch.inverse().unsqueeze", "torch.inverse().unsqueeze", "torch.inverse().unsqueeze", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "depth_volume.view().expand.view().expand.append", "range", "enumerate", "model.FastMVSNet.coarse_img_conv", "curr_feature_map.size", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "fastmvsnet.functions.functions.get_pixel_grids().view().expand().to.view().expand", "torch.matmul().transpose().contiguous", "torch.matmul().transpose().contiguous", "torch.matmul().transpose().contiguous", "torch.matmul().transpose().contiguous", "torch.matmul().transpose().contiguous", "torch.matmul().transpose().contiguous", "torch.matmul().transpose().contiguous", "torch.matmul().transpose().contiguous", "torch.matmul().transpose().contiguous", "ref_feature.unsqueeze().expand().contiguous().view.unsqueeze().expand().contiguous().view.unsqueeze().expand().contiguous", "model.FastMVSNet.coarse_vol_conv", "depth_volume.view().expand.view().expand.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "model.FastMVSNet.flow_img_conv", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "cam_params_list[].clone", "cam_intrinsic[].clone", "fastmvsnet.functions.functions.get_pixel_grids().view().expand().to", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "model.FastMVSNet.point_grad_fetcher", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "R_tar_ref.view.view.view", "torch.matmul.unsqueeze().permute().contiguous().repeat", "torch.matmul.unsqueeze().permute().contiguous().repeat", "torch.matmul.unsqueeze().permute().contiguous().repeat", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.bmm().view.repeat", "torch.bmm().view.repeat", "torch.bmm().view.repeat", "[].contiguous().permute().contiguous().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "resid.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "estimated_depth_map.detach.detach.size", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "model.FastMVSNet.feature_fetcher", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "zip", "model.FastMVSNet.forward.gn_update"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.functions.functions.get_pixel_grids", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.functions.functions.get_propability_map"], ["", "def", "forward", "(", "self", ",", "data_batch", ",", "img_scales", ",", "inter_scales", ",", "isGN", ",", "isTest", "=", "False", ")", ":", "\n", "        ", "preds", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "img_list", "=", "data_batch", "[", "\"img_list\"", "]", "\n", "cam_params_list", "=", "data_batch", "[", "\"cam_params_list\"", "]", "\n", "\n", "cam_extrinsic", "=", "cam_params_list", "[", ":", ",", ":", ",", "0", ",", ":", "3", ",", ":", "4", "]", ".", "clone", "(", ")", "# (B, V, 3, 4)", "\n", "R", "=", "cam_extrinsic", "[", ":", ",", ":", ",", ":", "3", ",", ":", "3", "]", "\n", "t", "=", "cam_extrinsic", "[", ":", ",", ":", ",", ":", "3", ",", "3", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "R_inv", "=", "torch", ".", "inverse", "(", "R", ")", "\n", "cam_intrinsic", "=", "cam_params_list", "[", ":", ",", ":", ",", "1", ",", ":", "3", ",", ":", "3", "]", ".", "clone", "(", ")", "\n", "\n", "if", "isTest", ":", "\n", "            ", "cam_intrinsic", "[", ":", ",", ":", ",", ":", "2", ",", ":", "3", "]", "=", "cam_intrinsic", "[", ":", ",", ":", ",", ":", "2", ",", ":", "3", "]", "/", "4.0", "\n", "\n", "", "depth_start", "=", "cam_params_list", "[", ":", ",", "0", ",", "1", ",", "3", ",", "0", "]", "\n", "depth_interval", "=", "cam_params_list", "[", ":", ",", "0", ",", "1", ",", "3", ",", "1", "]", "\n", "num_depth", "=", "cam_params_list", "[", "0", ",", "0", ",", "1", ",", "3", ",", "2", "]", ".", "long", "(", ")", "\n", "\n", "depth_end", "=", "depth_start", "+", "(", "num_depth", "-", "1", ")", "*", "depth_interval", "\n", "\n", "batch_size", ",", "num_view", ",", "img_channel", ",", "img_height", ",", "img_width", "=", "list", "(", "img_list", ".", "size", "(", ")", ")", "\n", "\n", "coarse_feature_maps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_view", ")", ":", "\n", "            ", "curr_img", "=", "img_list", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "curr_feature_map", "=", "self", ".", "coarse_img_conv", "(", "curr_img", ")", "[", "\"conv2\"", "]", "\n", "coarse_feature_maps", ".", "append", "(", "curr_feature_map", ")", "\n", "\n", "", "feature_list", "=", "torch", ".", "stack", "(", "coarse_feature_maps", ",", "dim", "=", "1", ")", "\n", "\n", "feature_channels", ",", "feature_height", ",", "feature_width", "=", "list", "(", "curr_feature_map", ".", "size", "(", ")", ")", "[", "1", ":", "]", "\n", "\n", "depths", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "depths", ".", "append", "(", "torch", ".", "linspace", "(", "depth_start", "[", "i", "]", ",", "depth_end", "[", "i", "]", ",", "num_depth", ",", "device", "=", "img_list", ".", "device", ")", ".", "view", "(", "1", ",", "1", ",", "num_depth", ",", "1", ")", ")", "\n", "", "depths", "=", "torch", ".", "stack", "(", "depths", ",", "dim", "=", "0", ")", "# (B, 1, 1, D, 1)", "\n", "\n", "feature_map_indices_grid", "=", "get_pixel_grids", "(", "feature_height", ",", "feature_width", ")", "\n", "# print(\"before:\", feature_map_indices_grid.size())", "\n", "feature_map_indices_grid", "=", "feature_map_indices_grid", ".", "view", "(", "1", ",", "3", ",", "feature_height", ",", "feature_width", ")", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ".", "contiguous", "(", ")", "\n", "# print(\"after:\", feature_map_indices_grid.size())", "\n", "feature_map_indices_grid", "=", "feature_map_indices_grid", ".", "view", "(", "1", ",", "1", ",", "3", ",", "-", "1", ")", ".", "expand", "(", "batch_size", ",", "1", ",", "3", ",", "-", "1", ")", ".", "to", "(", "img_list", ".", "device", ")", "\n", "\n", "ref_cam_intrinsic", "=", "cam_intrinsic", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "uv", "=", "torch", ".", "matmul", "(", "torch", ".", "inverse", "(", "ref_cam_intrinsic", ")", ".", "unsqueeze", "(", "1", ")", ",", "feature_map_indices_grid", ")", "# (B, 1, 3, FH*FW)", "\n", "\n", "cam_points", "=", "(", "uv", ".", "unsqueeze", "(", "3", ")", "*", "depths", ")", ".", "view", "(", "batch_size", ",", "1", ",", "3", ",", "-", "1", ")", "# (B, 1, 3, D*FH*FW)", "\n", "world_points", "=", "torch", ".", "matmul", "(", "R_inv", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ",", "cam_points", "-", "t", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "3", ",", "-", "1", ")", "# (B, 3, D*FH*FW)", "\n", "\n", "preds", "[", "\"world_points\"", "]", "=", "world_points", "\n", "\n", "num_world_points", "=", "world_points", ".", "size", "(", "-", "1", ")", "\n", "assert", "num_world_points", "==", "feature_height", "*", "feature_width", "*", "num_depth", "/", "4", "\n", "\n", "point_features", "=", "self", ".", "feature_fetcher", "(", "feature_list", ",", "world_points", ",", "cam_intrinsic", ",", "cam_extrinsic", ")", "\n", "ref_feature", "=", "coarse_feature_maps", "[", "0", "]", "\n", "#print(\"before ref feature:\", ref_feature.size())", "\n", "ref_feature", "=", "ref_feature", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ".", "contiguous", "(", ")", "\n", "#print(\"after ref feature:\", ref_feature.size())", "\n", "ref_feature", "=", "ref_feature", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "num_depth", ",", "-", "1", ",", "-", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "feature_channels", ",", "-", "1", ")", "\n", "point_features", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "ref_feature", "\n", "\n", "avg_point_features", "=", "torch", ".", "mean", "(", "point_features", ",", "dim", "=", "1", ")", "\n", "avg_point_features_2", "=", "torch", ".", "mean", "(", "point_features", "**", "2", ",", "dim", "=", "1", ")", "\n", "\n", "point_features", "=", "avg_point_features_2", "-", "(", "avg_point_features", "**", "2", ")", "\n", "\n", "cost_volume", "=", "point_features", ".", "view", "(", "batch_size", ",", "feature_channels", ",", "num_depth", ",", "feature_height", "//", "2", ",", "feature_width", "//", "2", ")", "\n", "\n", "filtered_cost_volume", "=", "self", ".", "coarse_vol_conv", "(", "cost_volume", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "probability_volume", "=", "F", ".", "softmax", "(", "-", "filtered_cost_volume", ",", "dim", "=", "1", ")", "\n", "depth_volume", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "depth_array", "=", "torch", ".", "linspace", "(", "depth_start", "[", "i", "]", ",", "depth_end", "[", "i", "]", ",", "num_depth", ",", "device", "=", "depth_start", ".", "device", ")", "\n", "depth_volume", ".", "append", "(", "depth_array", ")", "\n", "", "depth_volume", "=", "torch", ".", "stack", "(", "depth_volume", ",", "dim", "=", "0", ")", "# (B, D)", "\n", "depth_volume", "=", "depth_volume", ".", "view", "(", "batch_size", ",", "num_depth", ",", "1", ",", "1", ")", ".", "expand", "(", "probability_volume", ".", "shape", ")", "\n", "pred_depth_img", "=", "torch", ".", "sum", "(", "depth_volume", "*", "probability_volume", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "# (B, 1, FH, FW)", "\n", "\n", "prob_map", "=", "get_propability_map", "(", "probability_volume", ",", "pred_depth_img", ",", "depth_start", ",", "depth_interval", ")", "\n", "\n", "# image guided depth map propagation", "\n", "pred_depth_img", "=", "F", ".", "interpolate", "(", "pred_depth_img", ",", "(", "feature_height", ",", "feature_width", ")", ",", "mode", "=", "\"nearest\"", ")", "\n", "prob_map", "=", "F", ".", "interpolate", "(", "prob_map", ",", "(", "feature_height", ",", "feature_width", ")", ",", "mode", "=", "\"bilinear\"", ")", "\n", "pred_depth_img", "=", "self", ".", "propagation_net", "(", "pred_depth_img", ",", "img_list", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "\n", "preds", "[", "\"coarse_depth_map\"", "]", "=", "pred_depth_img", "\n", "preds", "[", "\"coarse_prob_map\"", "]", "=", "prob_map", "\n", "\n", "if", "isGN", ":", "\n", "            ", "feature_pyramids", "=", "{", "}", "\n", "chosen_conv", "=", "[", "\"conv1\"", ",", "\"conv2\"", "]", "\n", "for", "conv", "in", "chosen_conv", ":", "\n", "                ", "feature_pyramids", "[", "conv", "]", "=", "[", "]", "\n", "", "for", "i", "in", "range", "(", "num_view", ")", ":", "\n", "                ", "curr_img", "=", "img_list", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "curr_feature_pyramid", "=", "self", ".", "flow_img_conv", "(", "curr_img", ")", "\n", "for", "conv", "in", "chosen_conv", ":", "\n", "                    ", "feature_pyramids", "[", "conv", "]", ".", "append", "(", "curr_feature_pyramid", "[", "conv", "]", ")", "\n", "\n", "", "", "for", "conv", "in", "chosen_conv", ":", "\n", "                ", "feature_pyramids", "[", "conv", "]", "=", "torch", ".", "stack", "(", "feature_pyramids", "[", "conv", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "isTest", ":", "\n", "                ", "for", "conv", "in", "chosen_conv", ":", "\n", "                    ", "feature_pyramids", "[", "conv", "]", "=", "torch", ".", "detach", "(", "feature_pyramids", "[", "conv", "]", ")", "\n", "\n", "\n", "", "", "def", "gn_update", "(", "estimated_depth_map", ",", "interval", ",", "image_scale", ",", "it", ")", ":", "\n", "                ", "nonlocal", "chosen_conv", "\n", "# print(estimated_depth_map.size(), image_scale)", "\n", "flow_height", ",", "flow_width", "=", "list", "(", "estimated_depth_map", ".", "size", "(", ")", ")", "[", "2", ":", "]", "\n", "if", "flow_height", "!=", "int", "(", "img_height", "*", "image_scale", ")", ":", "\n", "                    ", "flow_height", "=", "int", "(", "img_height", "*", "image_scale", ")", "\n", "flow_width", "=", "int", "(", "img_width", "*", "image_scale", ")", "\n", "estimated_depth_map", "=", "F", ".", "interpolate", "(", "estimated_depth_map", ",", "(", "flow_height", ",", "flow_width", ")", ",", "mode", "=", "\"nearest\"", ")", "\n", "", "else", ":", "\n", "# if it is the same size return directly", "\n", "                    ", "return", "estimated_depth_map", "\n", "# pass", "\n", "\n", "", "if", "isTest", ":", "\n", "                    ", "estimated_depth_map", "=", "estimated_depth_map", ".", "detach", "(", ")", "\n", "\n", "# GN step", "\n", "", "cam_intrinsic", "=", "cam_params_list", "[", ":", ",", ":", ",", "1", ",", ":", "3", ",", ":", "3", "]", ".", "clone", "(", ")", "\n", "if", "isTest", ":", "\n", "                    ", "cam_intrinsic", "[", ":", ",", ":", ",", ":", "2", ",", ":", "3", "]", "*=", "image_scale", "\n", "", "else", ":", "\n", "                    ", "cam_intrinsic", "[", ":", ",", ":", ",", ":", "2", ",", ":", "3", "]", "*=", "(", "4", "*", "image_scale", ")", "\n", "\n", "", "ref_cam_intrinsic", "=", "cam_intrinsic", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "feature_map_indices_grid", "=", "get_pixel_grids", "(", "flow_height", ",", "flow_width", ")", ".", "view", "(", "1", ",", "1", ",", "3", ",", "-", "1", ")", ".", "expand", "(", "batch_size", ",", "1", ",", "3", ",", "-", "1", ")", ".", "to", "(", "img_list", ".", "device", ")", "\n", "\n", "uv", "=", "torch", ".", "matmul", "(", "torch", ".", "inverse", "(", "ref_cam_intrinsic", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "feature_map_indices_grid", ")", "# (B, 1, 3, FH*FW)", "\n", "\n", "interval_depth_map", "=", "estimated_depth_map", "\n", "cam_points", "=", "(", "uv", "*", "interval_depth_map", ".", "view", "(", "batch_size", ",", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "world_points", "=", "torch", ".", "matmul", "(", "R_inv", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ",", "cam_points", "-", "t", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "3", ",", "-", "1", ")", "# (B, 3, D*FH*FW)", "\n", "\n", "grad_pts", "=", "self", ".", "point_grad_fetcher", "(", "world_points", ",", "cam_intrinsic", ",", "cam_extrinsic", ")", "\n", "\n", "R_tar_ref", "=", "torch", ".", "bmm", "(", "R", ".", "view", "(", "batch_size", "*", "num_view", ",", "3", ",", "3", ")", ",", "\n", "R_inv", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ".", "repeat", "(", "1", ",", "num_view", ",", "1", ",", "1", ")", ".", "view", "(", "batch_size", "*", "num_view", ",", "3", ",", "3", ")", ")", "\n", "\n", "R_tar_ref", "=", "R_tar_ref", ".", "view", "(", "batch_size", ",", "num_view", ",", "3", ",", "3", ")", "\n", "d_pts_d_d", "=", "uv", ".", "unsqueeze", "(", "-", "1", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ")", ".", "contiguous", "(", ")", ".", "repeat", "(", "1", ",", "num_view", ",", "1", ",", "1", ",", "1", ")", "\n", "d_pts_d_d", "=", "R_tar_ref", ".", "unsqueeze", "(", "2", ")", "@", "d_pts_d_d", "\n", "d_uv_d_d", "=", "torch", ".", "bmm", "(", "grad_pts", ".", "view", "(", "-", "1", ",", "2", ",", "3", ")", ",", "d_pts_d_d", ".", "view", "(", "-", "1", ",", "3", ",", "1", ")", ")", ".", "view", "(", "batch_size", ",", "num_view", ",", "1", ",", "\n", "-", "1", ",", "2", ",", "1", ")", "\n", "all_features", "=", "[", "]", "\n", "for", "conv", "in", "chosen_conv", ":", "\n", "                    ", "curr_feature", "=", "feature_pyramids", "[", "conv", "]", "\n", "c", ",", "h", ",", "w", "=", "list", "(", "curr_feature", ".", "size", "(", ")", ")", "[", "2", ":", "]", "\n", "curr_feature", "=", "curr_feature", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "c", ",", "h", ",", "w", ")", "\n", "curr_feature", "=", "F", ".", "interpolate", "(", "curr_feature", ",", "(", "flow_height", ",", "flow_width", ")", ",", "mode", "=", "\"bilinear\"", ")", "\n", "curr_feature", "=", "curr_feature", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "num_view", ",", "c", ",", "flow_height", ",", "flow_width", ")", "\n", "\n", "all_features", ".", "append", "(", "curr_feature", ")", "\n", "\n", "", "all_features", "=", "torch", ".", "cat", "(", "all_features", ",", "dim", "=", "2", ")", "\n", "\n", "if", "isTest", ":", "\n", "                    ", "point_features", ",", "point_features_grad", "=", "self", ".", "feature_grad_fetcher", ".", "test_forward", "(", "all_features", ",", "world_points", ",", "cam_intrinsic", ",", "cam_extrinsic", ")", "\n", "", "else", ":", "\n", "                    ", "point_features", ",", "point_features_grad", "=", "self", ".", "feature_grad_fetcher", "(", "all_features", ",", "world_points", ",", "cam_intrinsic", ",", "cam_extrinsic", ")", "\n", "\n", "", "c", "=", "all_features", ".", "size", "(", "2", ")", "\n", "d_uv_d_d_tmp", "=", "d_uv_d_d", ".", "repeat", "(", "1", ",", "1", ",", "c", ",", "1", ",", "1", ",", "1", ")", "\n", "# print(\"d_uv_d_d tmp size:\", d_uv_d_d_tmp.size())", "\n", "J", "=", "point_features_grad", ".", "view", "(", "-", "1", ",", "1", ",", "2", ")", "@", "d_uv_d_d_tmp", ".", "view", "(", "-", "1", ",", "2", ",", "1", ")", "\n", "J", "=", "J", ".", "view", "(", "batch_size", ",", "num_view", ",", "c", ",", "-", "1", ",", "1", ")", "[", ":", ",", "1", ":", ",", "...", "]", ".", "contiguous", "(", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ",", "4", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "c", "*", "(", "num_view", "-", "1", ")", ",", "1", ")", "\n", "\n", "# print(J.size())", "\n", "resid", "=", "point_features", "[", ":", ",", "1", ":", ",", "...", "]", "-", "point_features", "[", ":", ",", "0", ":", "1", ",", "...", "]", "\n", "first_resid", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "resid", ")", ",", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "# print(resid.size())", "\n", "resid", "=", "resid", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "c", "*", "(", "num_view", "-", "1", ")", ",", "1", ")", "\n", "\n", "J_t", "=", "torch", ".", "transpose", "(", "J", ",", "1", ",", "2", ")", "\n", "H", "=", "J_t", "@", "J", "\n", "b", "=", "-", "J_t", "@", "resid", "\n", "delta", "=", "b", "/", "(", "H", "+", "1e-6", ")", "\n", "# #print(delta.size())", "\n", "_", ",", "_", ",", "h", ",", "w", "=", "estimated_depth_map", ".", "size", "(", ")", "\n", "flow_result", "=", "estimated_depth_map", "+", "delta", ".", "view", "(", "-", "1", ",", "1", ",", "h", ",", "w", ")", "\n", "\n", "# check update results", "\n", "interval_depth_map", "=", "flow_result", "\n", "cam_points", "=", "(", "uv", "*", "interval_depth_map", ".", "view", "(", "batch_size", ",", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "world_points", "=", "torch", ".", "matmul", "(", "R_inv", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ",", "cam_points", "-", "t", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "3", ",", "-", "1", ")", "# (B, 3, D*FH*FW)", "\n", "\n", "point_features", "=", "self", ".", "feature_fetcher", "(", "all_features", ",", "world_points", ",", "cam_intrinsic", ",", "cam_extrinsic", ")", "\n", "\n", "resid", "=", "point_features", "[", ":", ",", "1", ":", ",", "...", "]", "-", "point_features", "[", ":", ",", "0", ":", "1", ",", "...", "]", "\n", "second_resid", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "resid", ")", ",", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "# print(first_resid.size(), second_resid.size())", "\n", "\n", "# only accept good update", "\n", "flow_result", "=", "torch", ".", "where", "(", "(", "second_resid", "<", "first_resid", ")", ".", "view", "(", "batch_size", ",", "1", ",", "flow_height", ",", "flow_width", ")", ",", "\n", "flow_result", ",", "estimated_depth_map", ")", "\n", "return", "flow_result", "\n", "\n", "", "for", "i", ",", "(", "img_scale", ",", "inter_scale", ")", "in", "enumerate", "(", "zip", "(", "img_scales", ",", "inter_scales", ")", ")", ":", "\n", "                ", "if", "isTest", ":", "\n", "                    ", "pred_depth_img", "=", "torch", ".", "detach", "(", "pred_depth_img", ")", "\n", "print", "(", "\"update: {}\"", ".", "format", "(", "i", ")", ")", "\n", "", "flow", "=", "gn_update", "(", "pred_depth_img", ",", "inter_scale", "*", "depth_interval", ",", "img_scale", ",", "i", ")", "\n", "preds", "[", "\"flow{}\"", ".", "format", "(", "i", "+", "1", ")", "]", "=", "flow", "\n", "pred_depth_img", "=", "flow", "\n", "\n", "", "", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.model.PointMVSNetLoss.__init__": [[259, 263], ["torch.Module.__init__", "MAELoss", "Valid_MAELoss"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "valid_threshold", ")", ":", "\n", "        ", "super", "(", "PointMVSNetLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "maeloss", "=", "MAELoss", "(", ")", "\n", "self", ".", "valid_maeloss", "=", "Valid_MAELoss", "(", "valid_threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.model.PointMVSNetLoss.forward": [[264, 290], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "model.PointMVSNetLoss.maeloss", "losses.keys", "torch.interpolate", "torch.interpolate", "torch.interpolate", "model.PointMVSNetLoss.maeloss", "torch.interpolate", "torch.interpolate", "torch.interpolate", "model.PointMVSNetLoss.maeloss", "float", "len", "losses.keys"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "preds", ",", "labels", ",", "isFlow", ")", ":", "\n", "        ", "gt_depth_img", "=", "labels", "[", "\"gt_depth_img\"", "]", "\n", "depth_interval", "=", "labels", "[", "\"cam_params_list\"", "]", "[", ":", ",", "0", ",", "1", ",", "3", ",", "1", "]", "\n", "\n", "coarse_depth_map", "=", "preds", "[", "\"coarse_depth_map\"", "]", "\n", "resize_gt_depth", "=", "F", ".", "interpolate", "(", "gt_depth_img", ",", "(", "coarse_depth_map", ".", "shape", "[", "2", "]", ",", "coarse_depth_map", ".", "shape", "[", "3", "]", ")", ")", "\n", "coarse_loss", "=", "self", ".", "maeloss", "(", "coarse_depth_map", ",", "resize_gt_depth", ",", "depth_interval", ")", "\n", "\n", "losses", "=", "{", "}", "\n", "losses", "[", "\"coarse_loss\"", "]", "=", "coarse_loss", "\n", "\n", "if", "isFlow", ":", "\n", "            ", "flow1", "=", "preds", "[", "\"flow1\"", "]", "\n", "resize_gt_depth", "=", "F", ".", "interpolate", "(", "gt_depth_img", ",", "(", "flow1", ".", "shape", "[", "2", "]", ",", "flow1", ".", "shape", "[", "3", "]", ")", ")", "\n", "flow1_loss", "=", "self", ".", "maeloss", "(", "flow1", ",", "resize_gt_depth", ",", "0.75", "*", "depth_interval", ")", "\n", "losses", "[", "\"flow1_loss\"", "]", "=", "flow1_loss", "\n", "\n", "flow2", "=", "preds", "[", "\"flow2\"", "]", "\n", "resize_gt_depth", "=", "F", ".", "interpolate", "(", "gt_depth_img", ",", "(", "flow2", ".", "shape", "[", "2", "]", ",", "flow2", ".", "shape", "[", "3", "]", ")", ")", "\n", "flow2_loss", "=", "self", ".", "maeloss", "(", "flow2", ",", "resize_gt_depth", ",", "0.375", "*", "depth_interval", ")", "\n", "losses", "[", "\"flow2_loss\"", "]", "=", "flow2_loss", "\n", "\n", "", "for", "k", "in", "losses", ".", "keys", "(", ")", ":", "\n", "            ", "losses", "[", "k", "]", "/=", "float", "(", "len", "(", "losses", ".", "keys", "(", ")", ")", ")", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.model.PointMVSNetMetric.__init__": [[328, 331], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "valid_threshold", ")", ":", "\n", "        ", "super", "(", "PointMVSNetMetric", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "valid_threshold", "=", "valid_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.model.PointMVSNetMetric.forward": [[332, 371], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "model.cal_less_percentage", "model.cal_less_percentage", "torch.interpolate", "torch.interpolate", "torch.interpolate", "model.cal_valid_less_percentage", "model.cal_valid_less_percentage", "torch.interpolate", "torch.interpolate", "torch.interpolate", "model.cal_valid_less_percentage", "model.cal_valid_less_percentage"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.model.cal_less_percentage", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.model.cal_less_percentage", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.model.cal_valid_less_percentage", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.model.cal_valid_less_percentage", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.model.cal_valid_less_percentage", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.model.cal_valid_less_percentage"], ["", "def", "forward", "(", "self", ",", "preds", ",", "labels", ",", "isFlow", ")", ":", "\n", "        ", "gt_depth_img", "=", "labels", "[", "\"gt_depth_img\"", "]", "\n", "depth_interval", "=", "labels", "[", "\"cam_params_list\"", "]", "[", ":", ",", "0", ",", "1", ",", "3", ",", "1", "]", "\n", "\n", "coarse_depth_map", "=", "preds", "[", "\"coarse_depth_map\"", "]", "\n", "resize_gt_depth", "=", "F", ".", "interpolate", "(", "gt_depth_img", ",", "(", "coarse_depth_map", ".", "shape", "[", "2", "]", ",", "coarse_depth_map", ".", "shape", "[", "3", "]", ")", ")", "\n", "\n", "less_one_pct_coarse", "=", "cal_less_percentage", "(", "coarse_depth_map", ",", "resize_gt_depth", ",", "depth_interval", ",", "1.0", ")", "\n", "less_three_pct_coarse", "=", "cal_less_percentage", "(", "coarse_depth_map", ",", "resize_gt_depth", ",", "depth_interval", ",", "3.0", ")", "\n", "\n", "metrics", "=", "{", "\n", "\"<1_pct_cor\"", ":", "less_one_pct_coarse", ",", "\n", "\"<3_pct_cor\"", ":", "less_three_pct_coarse", ",", "\n", "}", "\n", "\n", "if", "isFlow", ":", "\n", "            ", "flow1", "=", "preds", "[", "\"flow1\"", "]", "\n", "resize_gt_depth", "=", "F", ".", "interpolate", "(", "gt_depth_img", ",", "(", "flow1", ".", "shape", "[", "2", "]", ",", "flow1", ".", "shape", "[", "3", "]", ")", ")", "\n", "\n", "less_one_pct_flow1", "=", "cal_valid_less_percentage", "(", "flow1", ",", "resize_gt_depth", ",", "coarse_depth_map", ",", "\n", "0.75", "*", "depth_interval", ",", "1.0", ",", "self", ".", "valid_threshold", ")", "\n", "less_three_pct_flow1", "=", "cal_valid_less_percentage", "(", "flow1", ",", "resize_gt_depth", ",", "coarse_depth_map", ",", "\n", "0.75", "*", "depth_interval", ",", "3.0", ",", "self", ".", "valid_threshold", ")", "\n", "\n", "metrics", "[", "\"<1_pct_flow1\"", "]", "=", "less_one_pct_flow1", "\n", "metrics", "[", "\"<3_pct_flow1\"", "]", "=", "less_three_pct_flow1", "\n", "\n", "flow2", "=", "preds", "[", "\"flow2\"", "]", "\n", "resize_gt_depth", "=", "F", ".", "interpolate", "(", "gt_depth_img", ",", "(", "flow2", ".", "shape", "[", "2", "]", ",", "flow2", ".", "shape", "[", "3", "]", ")", ")", "\n", "\n", "less_one_pct_flow2", "=", "cal_valid_less_percentage", "(", "flow2", ",", "resize_gt_depth", ",", "flow1", ",", "\n", "0.375", "*", "depth_interval", ",", "1.0", ",", "self", ".", "valid_threshold", ")", "\n", "less_three_pct_flow2", "=", "cal_valid_less_percentage", "(", "flow2", ",", "resize_gt_depth", ",", "flow1", ",", "\n", "0.375", "*", "depth_interval", ",", "3.0", ",", "self", ".", "valid_threshold", ")", "\n", "\n", "metrics", "[", "\"<1_pct_flow2\"", "]", "=", "less_one_pct_flow2", "\n", "metrics", "[", "\"<3_pct_flow2\"", "]", "=", "less_three_pct_flow2", "\n", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.model.cal_less_percentage": [[292, 304], ["list", "depth_interval.view().expand", "pred_depth.size", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "depth_interval.view", "torch.eq", "torch.eq", "torch.eq"], "function", ["None"], ["", "", "def", "cal_less_percentage", "(", "pred_depth", ",", "gt_depth", ",", "depth_interval", ",", "threshold", ")", ":", "\n", "    ", "shape", "=", "list", "(", "pred_depth", ".", "size", "(", ")", ")", "\n", "mask_valid", "=", "(", "~", "torch", ".", "eq", "(", "gt_depth", ",", "0.0", ")", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "denom", "=", "torch", ".", "sum", "(", "mask_valid", ")", "+", "1e-7", "\n", "interval_image", "=", "depth_interval", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "shape", ")", "\n", "abs_diff_image", "=", "torch", ".", "abs", "(", "pred_depth", "-", "gt_depth", ")", "/", "interval_image", "\n", "\n", "pct", "=", "mask_valid", "*", "(", "abs_diff_image", "<=", "threshold", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "\n", "pct", "=", "torch", ".", "sum", "(", "pct", ")", "/", "denom", "\n", "\n", "return", "pct", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.model.cal_valid_less_percentage": [[306, 325], ["list", "depth_interval.view().expand", "pred_depth.size", "torch.abs", "torch.abs", "torch.abs", "F.interpolate.size", "torch.interpolate", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "depth_interval.view", "torch.eq", "torch.eq", "torch.eq"], "function", ["None"], ["", "def", "cal_valid_less_percentage", "(", "pred_depth", ",", "gt_depth", ",", "before_depth", ",", "depth_interval", ",", "threshold", ",", "valid_threshold", ")", ":", "\n", "    ", "shape", "=", "list", "(", "pred_depth", ".", "size", "(", ")", ")", "\n", "mask_true", "=", "(", "~", "torch", ".", "eq", "(", "gt_depth", ",", "0.0", ")", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "interval_image", "=", "depth_interval", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "shape", ")", "\n", "abs_diff_image", "=", "torch", ".", "abs", "(", "pred_depth", "-", "gt_depth", ")", "/", "interval_image", "\n", "\n", "if", "before_depth", ".", "size", "(", "2", ")", "!=", "shape", "[", "2", "]", ":", "\n", "        ", "before_depth", "=", "F", ".", "interpolate", "(", "before_depth", ",", "(", "shape", "[", "2", "]", ",", "shape", "[", "3", "]", ")", ")", "\n", "\n", "", "diff", "=", "torch", ".", "abs", "(", "before_depth", "-", "gt_depth", ")", "/", "interval_image", "\n", "mask_valid", "=", "(", "diff", "<", "valid_threshold", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "mask_valid", "=", "mask_valid", "*", "mask_true", "\n", "\n", "denom", "=", "torch", ".", "sum", "(", "mask_valid", ")", "+", "1e-7", "\n", "pct", "=", "mask_valid", "*", "(", "abs_diff_image", "<=", "threshold", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "\n", "pct", "=", "torch", ".", "sum", "(", "pct", ")", "/", "denom", "\n", "\n", "return", "pct", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.fastmvsnet.model.build_pointmvsnet": [[373, 389], ["model.FastMVSNet", "model.PointMVSNetLoss", "model.PointMVSNetMetric"], "function", ["None"], ["", "", "def", "build_pointmvsnet", "(", "cfg", ")", ":", "\n", "    ", "net", "=", "FastMVSNet", "(", "\n", "img_base_channels", "=", "cfg", ".", "MODEL", ".", "IMG_BASE_CHANNELS", ",", "\n", "vol_base_channels", "=", "cfg", ".", "MODEL", ".", "VOL_BASE_CHANNELS", ",", "\n", "flow_channels", "=", "cfg", ".", "MODEL", ".", "FLOW_CHANNELS", ",", "\n", ")", "\n", "\n", "loss_fn", "=", "PointMVSNetLoss", "(", "\n", "valid_threshold", "=", "cfg", ".", "MODEL", ".", "VALID_THRESHOLD", ",", "\n", ")", "\n", "\n", "metric_fn", "=", "PointMVSNetMetric", "(", "\n", "valid_threshold", "=", "cfg", ".", "MODEL", ".", "VALID_THRESHOLD", ",", "\n", ")", "\n", "\n", "return", "net", ",", "loss_fn", ",", "metric_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.tensorboard_logger.TensorboardLogger.__init__": [[13, 18], ["os.join", "io.mkdir", "tensorboardX.SummaryWriter", "time.strftime"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.mkdir"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ",", "keywords", "=", "_KEYWORDS", ")", ":", "\n", "        ", "self", ".", "log_dir", "=", "osp", ".", "join", "(", "log_dir", ",", "\"events.{}\"", ".", "format", "(", "time", ".", "strftime", "(", "\"%m_%d_%H_%M_%S\"", ")", ")", ")", "\n", "mkdir", "(", "self", ".", "log_dir", ")", "\n", "self", ".", "keywords", "=", "keywords", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "self", ".", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.tensorboard_logger.TensorboardLogger.add_scalars": [[19, 33], ["meters.items", "isinstance", "tensorboard_logger.TensorboardLogger.writer.add_scalar", "isinstance", "os.join", "isinstance", "meter.cpu().item", "TypeError", "meter.cpu"], "methods", ["None"], ["", "def", "add_scalars", "(", "self", ",", "meters", ",", "step", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "for", "k", ",", "meter", "in", "meters", ".", "items", "(", ")", ":", "\n", "            ", "for", "keyword", "in", "_KEYWORDS", ":", "\n", "                ", "if", "keyword", "in", "k", ":", "\n", "                    ", "if", "isinstance", "(", "meter", ",", "AverageMeter", ")", ":", "\n", "                        ", "v", "=", "meter", ".", "global_avg", "\n", "", "elif", "isinstance", "(", "meter", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "                        ", "v", "=", "meter", "\n", "", "elif", "isinstance", "(", "meter", ",", "torch", ".", "Tensor", ")", ":", "\n", "                        ", "v", "=", "meter", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "TypeError", "(", ")", "\n", "\n", "", "self", ".", "writer", ".", "add_scalar", "(", "osp", ".", "join", "(", "prefix", ",", "k", ")", ",", "v", ",", "global_step", "=", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.tensorboard_logger.TensorboardLogger.add_image": [[34, 37], ["tensorboard_logger.TensorboardLogger.writer.add_image", "len", "os.join", "img.size"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.tensorboard_logger.TensorboardLogger.add_image"], ["", "", "", "", "def", "add_image", "(", "self", ",", "img", ",", "step", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "assert", "len", "(", "img", ".", "size", "(", ")", ")", "==", "3", "\n", "self", ".", "writer", ".", "add_image", "(", "osp", ".", "join", "(", "prefix", ",", "\"_img\"", ")", ",", "img", ",", "global_step", "=", "step", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.feature_fetcher.FeatureFetcher.__init__": [[9, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "\"bilinear\"", ")", ":", "\n", "        ", "super", "(", "FeatureFetcher", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.feature_fetcher.FeatureFetcher.forward": [[13, 63], ["list", "feature_maps.view.view.view", "cam_intrinsics.view.view.view", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "pts_feature.view.view.squeeze", "pts_feature.view.view.view", "feature_maps.view.view.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pts.size", "pts.unsqueeze().contiguous().expand().contiguous().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "pts.unsqueeze().contiguous().expand().contiguous().view.type().transpose", "cam_extrinsics.view.view.view", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "transformed_pts.type().transpose.type().transpose.type().transpose", "cam_intrinsics.view.view.transpose", "pts.unsqueeze().contiguous().expand().contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.ones_like().unsqueeze", "torch.ones_like().unsqueeze", "torch.ones_like().unsqueeze", "torch.ones_like().unsqueeze", "torch.ones_like().unsqueeze", "torch.ones_like().unsqueeze", "torch.ones_like().unsqueeze", "torch.ones_like().unsqueeze", "torch.ones_like().unsqueeze", "pts.unsqueeze().contiguous().expand().contiguous().view.type", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "transformed_pts.type().transpose.type().transpose.type", "float", "float", "pts.unsqueeze().contiguous().expand", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "pts.unsqueeze().contiguous", "pts.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feature_maps", ",", "pts", ",", "cam_intrinsics", ",", "cam_extrinsics", ")", ":", "\n", "        ", "\"\"\"\n\n        :param feature_maps: torch.tensor, [B, V, C, H, W]\n        :param pts: torch.tensor, [B, 3, N]\n        :param cam_intrinsics: torch.tensor, [B, V, 3, 3]\n        :param cam_extrinsics: torch.tensor, [B, V, 3, 4], [R|t], p_cam = R*p_world + t\n        :return:\n            pts_feature: torch.tensor, [B, V, C, N]\n        \"\"\"", "\n", "batch_size", ",", "num_view", ",", "channels", ",", "height", ",", "width", "=", "list", "(", "feature_maps", ".", "size", "(", ")", ")", "\n", "feature_maps", "=", "feature_maps", ".", "view", "(", "batch_size", "*", "num_view", ",", "channels", ",", "height", ",", "width", ")", "\n", "\n", "curr_batch_size", "=", "batch_size", "*", "num_view", "\n", "cam_intrinsics", "=", "cam_intrinsics", ".", "view", "(", "curr_batch_size", ",", "3", ",", "3", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "num_pts", "=", "pts", ".", "size", "(", "2", ")", "\n", "pts_expand", "=", "pts", ".", "unsqueeze", "(", "1", ")", ".", "contiguous", "(", ")", ".", "expand", "(", "batch_size", ",", "num_view", ",", "3", ",", "num_pts", ")", ".", "contiguous", "(", ")", ".", "view", "(", "curr_batch_size", ",", "3", ",", "num_pts", ")", "\n", "if", "cam_extrinsics", "is", "None", ":", "\n", "                ", "transformed_pts", "=", "pts_expand", ".", "type", "(", "torch", ".", "float", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "cam_extrinsics", "=", "cam_extrinsics", ".", "view", "(", "curr_batch_size", ",", "3", ",", "4", ")", "\n", "R", "=", "torch", ".", "narrow", "(", "cam_extrinsics", ",", "2", ",", "0", ",", "3", ")", "\n", "t", "=", "torch", ".", "narrow", "(", "cam_extrinsics", ",", "2", ",", "3", ",", "1", ")", ".", "expand", "(", "curr_batch_size", ",", "3", ",", "num_pts", ")", "\n", "transformed_pts", "=", "torch", ".", "bmm", "(", "R", ",", "pts_expand", ")", "+", "t", "\n", "transformed_pts", "=", "transformed_pts", ".", "type", "(", "torch", ".", "float", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "x", "=", "transformed_pts", "[", "...", ",", "0", "]", "\n", "y", "=", "transformed_pts", "[", "...", ",", "1", "]", "\n", "z", "=", "transformed_pts", "[", "...", ",", "2", "]", "\n", "\n", "normal_uv", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "div", "(", "x", ",", "z", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "torch", ".", "div", "(", "y", ",", "z", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "torch", ".", "ones_like", "(", "x", ")", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "\n", "dim", "=", "-", "1", ")", "\n", "uv", "=", "torch", ".", "bmm", "(", "normal_uv", ",", "cam_intrinsics", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "uv", "=", "uv", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "\n", "grid", "=", "(", "uv", "-", "0.5", ")", ".", "view", "(", "curr_batch_size", ",", "num_pts", ",", "1", ",", "2", ")", "\n", "grid", "[", "...", ",", "0", "]", "=", "(", "grid", "[", "...", ",", "0", "]", "/", "float", "(", "width", "-", "1", ")", ")", "*", "2", "-", "1.0", "\n", "grid", "[", "...", ",", "1", "]", "=", "(", "grid", "[", "...", ",", "1", "]", "/", "float", "(", "height", "-", "1", ")", ")", "*", "2", "-", "1.0", "\n", "\n", "# pts_feature = F.grid_sample(feature_maps, grid, mode=self.mode, padding_mode='border')", "\n", "# print(\"without border pad-----------------------\")", "\n", "", "pts_feature", "=", "F", ".", "grid_sample", "(", "feature_maps", ",", "grid", ",", "mode", "=", "self", ".", "mode", ")", "\n", "pts_feature", "=", "pts_feature", ".", "squeeze", "(", "3", ")", "\n", "\n", "pts_feature", "=", "pts_feature", ".", "view", "(", "batch_size", ",", "num_view", ",", "channels", ",", "num_pts", ")", "\n", "\n", "return", "pts_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.feature_fetcher.FeatureGradFetcher.__init__": [[66, 69], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "\"bilinear\"", ")", ":", "\n", "        ", "super", "(", "FeatureGradFetcher", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.feature_fetcher.FeatureGradFetcher.forward": [[70, 149], ["list", "feature_maps.view.view.view", "cam_intrinsics.view.view.view", "feature_fetcher.FeatureGradFetcher.forward.get_features"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feature_maps", ",", "pts", ",", "cam_intrinsics", ",", "cam_extrinsics", ")", ":", "\n", "        ", "\"\"\"\n\n        :param feature_maps: torch.tensor, [B, V, C, H, W]\n        :param pts: torch.tensor, [B, 3, N]\n        :param cam_intrinsics: torch.tensor, [B, V, 3, 3]\n        :param cam_extrinsics: torch.tensor, [B, V, 3, 4], [R|t], p_cam = R*p_world + t\n        :return:\n            pts_feature: torch.tensor, [B, V, C, N]\n        \"\"\"", "\n", "batch_size", ",", "num_view", ",", "channels", ",", "height", ",", "width", "=", "list", "(", "feature_maps", ".", "size", "(", ")", ")", "\n", "feature_maps", "=", "feature_maps", ".", "view", "(", "batch_size", "*", "num_view", ",", "channels", ",", "height", ",", "width", ")", "\n", "\n", "curr_batch_size", "=", "batch_size", "*", "num_view", "\n", "cam_intrinsics", "=", "cam_intrinsics", ".", "view", "(", "curr_batch_size", ",", "3", ",", "3", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "num_pts", "=", "pts", ".", "size", "(", "2", ")", "\n", "pts_expand", "=", "pts", ".", "unsqueeze", "(", "1", ")", ".", "contiguous", "(", ")", ".", "expand", "(", "batch_size", ",", "num_view", ",", "3", ",", "num_pts", ")", ".", "contiguous", "(", ")", ".", "view", "(", "curr_batch_size", ",", "3", ",", "num_pts", ")", "\n", "if", "cam_extrinsics", "is", "None", ":", "\n", "                ", "transformed_pts", "=", "pts_expand", ".", "type", "(", "torch", ".", "float", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "cam_extrinsics", "=", "cam_extrinsics", ".", "view", "(", "curr_batch_size", ",", "3", ",", "4", ")", "\n", "R", "=", "torch", ".", "narrow", "(", "cam_extrinsics", ",", "2", ",", "0", ",", "3", ")", "\n", "t", "=", "torch", ".", "narrow", "(", "cam_extrinsics", ",", "2", ",", "3", ",", "1", ")", ".", "expand", "(", "curr_batch_size", ",", "3", ",", "num_pts", ")", "\n", "transformed_pts", "=", "torch", ".", "bmm", "(", "R", ",", "pts_expand", ")", "+", "t", "\n", "transformed_pts", "=", "transformed_pts", ".", "type", "(", "torch", ".", "float", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "x", "=", "transformed_pts", "[", "...", ",", "0", "]", "\n", "y", "=", "transformed_pts", "[", "...", ",", "1", "]", "\n", "z", "=", "transformed_pts", "[", "...", ",", "2", "]", "\n", "\n", "normal_uv", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "div", "(", "x", ",", "z", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "torch", ".", "div", "(", "y", ",", "z", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "torch", ".", "ones_like", "(", "x", ")", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "\n", "dim", "=", "-", "1", ")", "\n", "uv", "=", "torch", ".", "bmm", "(", "normal_uv", ",", "cam_intrinsics", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "uv", "=", "uv", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "\n", "grid", "=", "(", "uv", "-", "0.5", ")", ".", "view", "(", "curr_batch_size", ",", "num_pts", ",", "1", ",", "2", ")", "\n", "grid", "[", "...", ",", "0", "]", "=", "(", "grid", "[", "...", ",", "0", "]", "/", "float", "(", "width", "-", "1", ")", ")", "*", "2", "-", "1.0", "\n", "grid", "[", "...", ",", "1", "]", "=", "(", "grid", "[", "...", ",", "1", "]", "/", "float", "(", "height", "-", "1", ")", ")", "*", "2", "-", "1.0", "\n", "\n", "#todo check bug", "\n", "grid_l", "=", "grid", ".", "clone", "(", ")", "\n", "grid_l", "[", "...", ",", "0", "]", "-=", "(", "1.", "/", "float", "(", "width", "-", "1", ")", ")", "*", "2", "\n", "\n", "grid_r", "=", "grid", ".", "clone", "(", ")", "\n", "grid_r", "[", "...", ",", "0", "]", "+=", "(", "1.", "/", "float", "(", "width", "-", "1", ")", ")", "*", "2", "\n", "\n", "grid_t", "=", "grid", ".", "clone", "(", ")", "\n", "grid_t", "[", "...", ",", "1", "]", "-=", "(", "1.", "/", "float", "(", "height", "-", "1", ")", ")", "*", "2", "\n", "\n", "grid_b", "=", "grid", ".", "clone", "(", ")", "\n", "grid_b", "[", "...", ",", "1", "]", "+=", "(", "1.", "/", "float", "(", "height", "-", "1", ")", ")", "*", "2", "\n", "\n", "\n", "", "def", "get_features", "(", "grid_uv", ")", ":", "\n", "            ", "pts_feature", "=", "F", ".", "grid_sample", "(", "feature_maps", ",", "grid_uv", ",", "mode", "=", "self", ".", "mode", ")", "\n", "pts_feature", "=", "pts_feature", ".", "squeeze", "(", "3", ")", "\n", "\n", "pts_feature", "=", "pts_feature", ".", "view", "(", "batch_size", ",", "num_view", ",", "channels", ",", "num_pts", ")", "\n", "return", "pts_feature", "\n", "\n", "", "pts_feature", "=", "get_features", "(", "grid", ")", "\n", "\n", "pts_feature_l", "=", "get_features", "(", "grid_l", ")", "\n", "pts_feature_r", "=", "get_features", "(", "grid_r", ")", "\n", "pts_feature_t", "=", "get_features", "(", "grid_t", ")", "\n", "pts_feature_b", "=", "get_features", "(", "grid_b", ")", "\n", "\n", "pts_feature_grad_x", "=", "0.5", "*", "(", "pts_feature_r", "-", "pts_feature_l", ")", "\n", "pts_feature_grad_y", "=", "0.5", "*", "(", "pts_feature_b", "-", "pts_feature_t", ")", "\n", "\n", "pts_feature_grad", "=", "torch", ".", "stack", "(", "(", "pts_feature_grad_x", ",", "pts_feature_grad_y", ")", ",", "dim", "=", "-", "1", ")", "\n", "# print(\"================features++++++++++++\")", "\n", "# print(feature_maps)", "\n", "# print (\"===========grad+++++++++++++++\")", "\n", "# print (pts_feature_grad)", "\n", "return", "pts_feature", ",", "pts_feature_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.feature_fetcher.FeatureGradFetcher.get_result": [[150, 214], ["list", "feature_maps.view.view.view", "cam_intrinsics.view.view.view", "pts.size", "pts.unsqueeze().contiguous().expand().contiguous().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "feature_fetcher.FeatureGradFetcher.forward.get_features"], "methods", ["None"], ["", "def", "get_result", "(", "self", ",", "feature_maps", ",", "pts", ",", "cam_intrinsics", ",", "cam_extrinsics", ")", ":", "\n", "        ", "batch_size", ",", "num_view", ",", "channels", ",", "height", ",", "width", "=", "list", "(", "feature_maps", ".", "size", "(", ")", ")", "\n", "feature_maps", "=", "feature_maps", ".", "view", "(", "batch_size", "*", "num_view", ",", "channels", ",", "height", ",", "width", ")", "\n", "\n", "curr_batch_size", "=", "batch_size", "*", "num_view", "\n", "cam_intrinsics", "=", "cam_intrinsics", ".", "view", "(", "curr_batch_size", ",", "3", ",", "3", ")", "\n", "\n", "num_pts", "=", "pts", ".", "size", "(", "2", ")", "\n", "pts_expand", "=", "pts", ".", "unsqueeze", "(", "1", ")", ".", "contiguous", "(", ")", ".", "expand", "(", "batch_size", ",", "num_view", ",", "3", ",", "num_pts", ")", ".", "contiguous", "(", ")", ".", "view", "(", "curr_batch_size", ",", "3", ",", "num_pts", ")", "\n", "if", "cam_extrinsics", "is", "None", ":", "\n", "            ", "transformed_pts", "=", "pts_expand", ".", "type", "(", "torch", ".", "float", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "cam_extrinsics", "=", "cam_extrinsics", ".", "view", "(", "curr_batch_size", ",", "3", ",", "4", ")", "\n", "R", "=", "torch", ".", "narrow", "(", "cam_extrinsics", ",", "2", ",", "0", ",", "3", ")", "\n", "t", "=", "torch", ".", "narrow", "(", "cam_extrinsics", ",", "2", ",", "3", ",", "1", ")", ".", "expand", "(", "curr_batch_size", ",", "3", ",", "num_pts", ")", "\n", "transformed_pts", "=", "torch", ".", "bmm", "(", "R", ",", "pts_expand", ")", "+", "t", "\n", "transformed_pts", "=", "transformed_pts", ".", "type", "(", "torch", ".", "float", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "x", "=", "transformed_pts", "[", "...", ",", "0", "]", "\n", "y", "=", "transformed_pts", "[", "...", ",", "1", "]", "\n", "z", "=", "transformed_pts", "[", "...", ",", "2", "]", "\n", "\n", "normal_uv", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "div", "(", "x", ",", "z", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "torch", ".", "div", "(", "y", ",", "z", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "torch", ".", "ones_like", "(", "x", ")", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "\n", "dim", "=", "-", "1", ")", "\n", "uv", "=", "torch", ".", "bmm", "(", "normal_uv", ",", "cam_intrinsics", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "uv", "=", "uv", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "\n", "grid", "=", "(", "uv", "-", "0.5", ")", ".", "view", "(", "curr_batch_size", ",", "num_pts", ",", "1", ",", "2", ")", "\n", "grid", "[", "...", ",", "0", "]", "=", "(", "grid", "[", "...", ",", "0", "]", "/", "float", "(", "width", "-", "1", ")", ")", "*", "2", "-", "1.0", "\n", "grid", "[", "...", ",", "1", "]", "=", "(", "grid", "[", "...", ",", "1", "]", "/", "float", "(", "height", "-", "1", ")", ")", "*", "2", "-", "1.0", "\n", "\n", "def", "get_features", "(", "grid_uv", ")", ":", "\n", "            ", "pts_feature", "=", "F", ".", "grid_sample", "(", "feature_maps", ",", "grid_uv", ",", "mode", "=", "self", ".", "mode", ")", "\n", "pts_feature", "=", "pts_feature", ".", "squeeze", "(", "3", ")", "\n", "\n", "pts_feature", "=", "pts_feature", ".", "view", "(", "batch_size", ",", "num_view", ",", "channels", ",", "num_pts", ")", "\n", "return", "pts_feature", ".", "detach", "(", ")", "\n", "\n", "", "pts_feature", "=", "get_features", "(", "grid", ")", "\n", "\n", "# todo check bug", "\n", "grid", "[", "...", ",", "0", "]", "-=", "(", "1.", "/", "float", "(", "width", "-", "1", ")", ")", "*", "2", "\n", "pts_feature_l", "=", "get_features", "(", "grid", ")", "\n", "grid", "[", "...", ",", "0", "]", "+=", "(", "1.", "/", "float", "(", "width", "-", "1", ")", ")", "*", "2", "\n", "\n", "grid", "[", "...", ",", "0", "]", "+=", "(", "1.", "/", "float", "(", "width", "-", "1", ")", ")", "*", "2", "\n", "pts_feature_r", "=", "get_features", "(", "grid", ")", "\n", "grid", "[", "...", ",", "0", "]", "-=", "(", "1.", "/", "float", "(", "width", "-", "1", ")", ")", "*", "2", "\n", "\n", "grid", "[", "...", ",", "1", "]", "-=", "(", "1.", "/", "float", "(", "height", "-", "1", ")", ")", "*", "2", "\n", "pts_feature_t", "=", "get_features", "(", "grid", ")", "\n", "grid", "[", "...", ",", "1", "]", "+=", "(", "1.", "/", "float", "(", "height", "-", "1", ")", ")", "*", "2", "\n", "\n", "grid", "[", "...", ",", "1", "]", "+=", "(", "1.", "/", "float", "(", "height", "-", "1", ")", ")", "*", "2", "\n", "pts_feature_b", "=", "get_features", "(", "grid", ")", "\n", "grid", "[", "...", ",", "1", "]", "-=", "(", "1.", "/", "float", "(", "height", "-", "1", ")", ")", "*", "2", "\n", "\n", "pts_feature_r", "-=", "pts_feature_l", "\n", "pts_feature_r", "*=", "0.5", "\n", "pts_feature_b", "-=", "pts_feature_t", "\n", "pts_feature_b", "*=", "0.5", "\n", "\n", "return", "pts_feature", ".", "detach", "(", ")", ",", "pts_feature_r", ".", "detach", "(", ")", ",", "pts_feature_b", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.feature_fetcher.FeatureGradFetcher.test_forward": [[215, 232], ["torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "feature_fetcher.FeatureGradFetcher.get_result", "pts_feature.detach", "torch.stack.detach", "torch.stack.detach", "torch.stack.detach"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.feature_fetcher.FeatureGradFetcher.get_result"], ["", "def", "test_forward", "(", "self", ",", "feature_maps", ",", "pts", ",", "cam_intrinsics", ",", "cam_extrinsics", ")", ":", "\n", "        ", "\"\"\"\n\n        :param feature_maps: torch.tensor, [B, V, C, H, W]\n        :param pts: torch.tensor, [B, 3, N]\n        :param cam_intrinsics: torch.tensor, [B, V, 3, 3]\n        :param cam_extrinsics: torch.tensor, [B, V, 3, 4], [R|t], p_cam = R*p_world + t\n        :return:\n            pts_feature: torch.tensor, [B, V, C, N]\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pts_feature", ",", "grad_x", ",", "grad_y", "=", "self", ".", "get_result", "(", "feature_maps", ",", "pts", ",", "cam_intrinsics", ",", "cam_extrinsics", ")", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "pts_feature_grad", "=", "torch", ".", "stack", "(", "(", "grad_x", ",", "grad_y", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "pts_feature", ".", "detach", "(", ")", ",", "pts_feature_grad", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.feature_fetcher.PointGrad.__init__": [[235, 237], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PointGrad", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.feature_fetcher.PointGrad.forward": [[238, 281], ["list", "cam_intrinsics.view.view.view", "cam_extrinsics.view.view.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pts.size", "pts.unsqueeze().contiguous().expand().contiguous().view", "cam_intrinsics[].view", "cam_intrinsics[].view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "grad_p.view.view.view", "pts.unsqueeze().contiguous().expand().contiguous().view.type().transpose", "cam_extrinsics.view.view.view", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "transformed_pts.type().transpose.type().transpose.type().transpose", "pts.unsqueeze().contiguous().expand().contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "pts.unsqueeze().contiguous().expand().contiguous().view.type", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "transformed_pts.type().transpose.type().transpose.type", "pts.unsqueeze().contiguous().expand", "pts.unsqueeze().contiguous", "pts.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pts", ",", "cam_intrinsics", ",", "cam_extrinsics", ")", ":", "\n", "        ", "\"\"\"\n        :param pts: torch.tensor, [B, 3, N]\n        :param cam_intrinsics: torch.tensor, [B, V, 3, 3]\n        :param cam_extrinsics: torch.tensor, [B, V, 3, 4], [R|t], p_cam = R*p_world + t\n        :return:\n            pts_feature: torch.tensor, [B, V, C, N]\n        \"\"\"", "\n", "batch_size", ",", "num_view", ",", "_", ",", "_", "=", "list", "(", "cam_extrinsics", ".", "size", "(", ")", ")", "\n", "\n", "curr_batch_size", "=", "batch_size", "*", "num_view", "\n", "cam_intrinsics", "=", "cam_intrinsics", ".", "view", "(", "curr_batch_size", ",", "3", ",", "3", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "num_pts", "=", "pts", ".", "size", "(", "2", ")", "\n", "pts_expand", "=", "pts", ".", "unsqueeze", "(", "1", ")", ".", "contiguous", "(", ")", ".", "expand", "(", "batch_size", ",", "num_view", ",", "3", ",", "num_pts", ")", ".", "contiguous", "(", ")", ".", "view", "(", "curr_batch_size", ",", "3", ",", "num_pts", ")", "\n", "if", "cam_extrinsics", "is", "None", ":", "\n", "                ", "transformed_pts", "=", "pts_expand", ".", "type", "(", "torch", ".", "float", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "cam_extrinsics", "=", "cam_extrinsics", ".", "view", "(", "curr_batch_size", ",", "3", ",", "4", ")", "\n", "R", "=", "torch", ".", "narrow", "(", "cam_extrinsics", ",", "2", ",", "0", ",", "3", ")", "\n", "t", "=", "torch", ".", "narrow", "(", "cam_extrinsics", ",", "2", ",", "3", ",", "1", ")", ".", "expand", "(", "curr_batch_size", ",", "3", ",", "num_pts", ")", "\n", "transformed_pts", "=", "torch", ".", "bmm", "(", "R", ",", "pts_expand", ")", "+", "t", "\n", "transformed_pts", "=", "transformed_pts", ".", "type", "(", "torch", ".", "float", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "x", "=", "transformed_pts", "[", "...", ",", "0", "]", "\n", "y", "=", "transformed_pts", "[", "...", ",", "1", "]", "\n", "z", "=", "transformed_pts", "[", "...", ",", "2", "]", "\n", "\n", "fx", "=", "cam_intrinsics", "[", "...", ",", "0", ",", "0", "]", ".", "view", "(", "curr_batch_size", ",", "1", ")", "\n", "fy", "=", "cam_intrinsics", "[", "...", ",", "1", ",", "1", "]", ".", "view", "(", "curr_batch_size", ",", "1", ")", "\n", "\n", "# print(\"x\", x.size())", "\n", "# print(\"fx\", fx.size(), fx, fy)", "\n", "\n", "zero", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "grad_u", "=", "torch", ".", "stack", "(", "[", "fx", "/", "z", ",", "zero", ",", "-", "fx", "*", "x", "/", "(", "z", "**", "2", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "grad_v", "=", "torch", ".", "stack", "(", "[", "zero", ",", "fy", "/", "z", ",", "-", "fy", "*", "y", "/", "(", "z", "**", "2", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "grad_p", "=", "torch", ".", "stack", "(", "(", "grad_u", ",", "grad_v", ")", ",", "dim", "=", "-", "2", ")", "\n", "# print(\"grad_u size:\", grad_u.size())", "\n", "# print(\"grad_p size:\", grad_p.size())", "\n", "grad_p", "=", "grad_p", ".", "view", "(", "batch_size", ",", "num_view", ",", "num_pts", ",", "2", ",", "3", ")", "\n", "", "return", "grad_p", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.feature_fetcher.ProjectUVFetcher.__init__": [[285, 288], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "\"bilinear\"", ")", ":", "\n", "        ", "super", "(", "ProjectUVFetcher", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.feature_fetcher.ProjectUVFetcher.forward": [[289, 328], ["cam_intrinsics.view.view.view", "grid.view", "cam_extrinsics.view.view.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pts.size", "pts.unsqueeze().contiguous().expand().contiguous().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "pts.unsqueeze().contiguous().expand().contiguous().view.type().transpose", "cam_extrinsics.view.view.view", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "torch.narrow().expand", "transformed_pts.type().transpose.type().transpose.type().transpose", "cam_intrinsics.view.view.transpose", "pts.unsqueeze().contiguous().expand().contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.div().unsqueeze", "torch.ones_like().unsqueeze", "torch.ones_like().unsqueeze", "torch.ones_like().unsqueeze", "torch.ones_like().unsqueeze", "torch.ones_like().unsqueeze", "torch.ones_like().unsqueeze", "torch.ones_like().unsqueeze", "torch.ones_like().unsqueeze", "torch.ones_like().unsqueeze", "pts.unsqueeze().contiguous().expand().contiguous().view.type", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "torch.narrow", "transformed_pts.type().transpose.type().transpose.type", "pts.unsqueeze().contiguous().expand", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "pts.unsqueeze().contiguous", "pts.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pts", ",", "cam_intrinsics", ",", "cam_extrinsics", ")", ":", "\n", "        ", "\"\"\"\n\n        :param pts: torch.tensor, [B, 3, N]\n        :param cam_intrinsics: torch.tensor, [B, V, 3, 3]\n        :param cam_extrinsics: torch.tensor, [B, V, 3, 4], [R|t], p_cam = R*p_world + t\n        :return:\n            pts_feature: torch.tensor, [B, V, C, N]\n        \"\"\"", "\n", "batch_size", ",", "num_view", "=", "cam_extrinsics", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "\n", "curr_batch_size", "=", "batch_size", "*", "num_view", "\n", "cam_intrinsics", "=", "cam_intrinsics", ".", "view", "(", "curr_batch_size", ",", "3", ",", "3", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "num_pts", "=", "pts", ".", "size", "(", "2", ")", "\n", "pts_expand", "=", "pts", ".", "unsqueeze", "(", "1", ")", ".", "contiguous", "(", ")", ".", "expand", "(", "batch_size", ",", "num_view", ",", "3", ",", "num_pts", ")", ".", "contiguous", "(", ")", ".", "view", "(", "curr_batch_size", ",", "3", ",", "num_pts", ")", "\n", "if", "cam_extrinsics", "is", "None", ":", "\n", "                ", "transformed_pts", "=", "pts_expand", ".", "type", "(", "torch", ".", "float", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "cam_extrinsics", "=", "cam_extrinsics", ".", "view", "(", "curr_batch_size", ",", "3", ",", "4", ")", "\n", "R", "=", "torch", ".", "narrow", "(", "cam_extrinsics", ",", "2", ",", "0", ",", "3", ")", "\n", "t", "=", "torch", ".", "narrow", "(", "cam_extrinsics", ",", "2", ",", "3", ",", "1", ")", ".", "expand", "(", "curr_batch_size", ",", "3", ",", "num_pts", ")", "\n", "transformed_pts", "=", "torch", ".", "bmm", "(", "R", ",", "pts_expand", ")", "+", "t", "\n", "transformed_pts", "=", "transformed_pts", ".", "type", "(", "torch", ".", "float", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "x", "=", "transformed_pts", "[", "...", ",", "0", "]", "\n", "y", "=", "transformed_pts", "[", "...", ",", "1", "]", "\n", "z", "=", "transformed_pts", "[", "...", ",", "2", "]", "\n", "\n", "normal_uv", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "div", "(", "x", ",", "z", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "torch", ".", "div", "(", "y", ",", "z", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "torch", ".", "ones_like", "(", "x", ")", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "\n", "dim", "=", "-", "1", ")", "\n", "uv", "=", "torch", ".", "bmm", "(", "normal_uv", ",", "cam_intrinsics", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "uv", "=", "uv", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "\n", "grid", "=", "(", "uv", "-", "0.5", ")", ".", "view", "(", "curr_batch_size", ",", "num_pts", ",", "1", ",", "2", ")", "\n", "\n", "", "return", "grid", ".", "view", "(", "batch_size", ",", "num_view", ",", "num_pts", ",", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.feature_fetcher.test_feature_fetching": [[330, 365], ["torch.tensor().float().view().expand().cuda", "torch.tensor().float().view().expand().cuda", "torch.tensor().float().view().expand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "FeatureFetcher().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.tensor().view().expand().cuda", "torch.tensor().view().expand().cuda", "torch.tensor().view().expand().cuda", "torch.matmul", "torch.matmul", "torch.matmul", "FeatureFetcher().cuda.", "numpy.savetxt", "numpy.savetxt", "print", "torch.matmul", "torch.matmul", "torch.matmul", "torch.inverse", "torch.inverse", "torch.inverse", "feature_fetcher.detach().cpu().numpy", "groundtruth_feature.detach().cpu().numpy", "numpy.allclose", "torch.tensor().float().view().expand", "torch.tensor().float().view().expand", "torch.tensor().float().view().expand", "torch.rand", "torch.rand", "torch.rand", "feature_fetcher.FeatureFetcher", "torch.rand", "torch.rand", "torch.rand", "torch.tensor().view().expand", "torch.tensor().view().expand", "torch.tensor().view().expand", "torch.inverse", "torch.inverse", "torch.inverse", "cam_extrinsic[].unsqueeze", "feature_fetcher.detach().cpu().numpy", "groundtruth_feature.detach().cpu().numpy", "feature_fetcher.detach().cpu", "groundtruth_feature.detach().cpu", "torch.tensor().float().view", "torch.tensor().float().view", "torch.tensor().float().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "feature_fetcher.detach().cpu", "groundtruth_feature.detach().cpu", "feature_fetcher.detach", "groundtruth_feature.detach", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "feature_fetcher.detach", "groundtruth_feature.detach", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "", "def", "test_feature_fetching", "(", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "batch_size", "=", "3", "\n", "num_view", "=", "2", "\n", "channels", "=", "16", "\n", "height", "=", "240", "\n", "width", "=", "320", "\n", "num_pts", "=", "32", "\n", "\n", "cam_intrinsic", "=", "torch", ".", "tensor", "(", "[", "[", "10", ",", "0", ",", "1", "]", ",", "[", "0", ",", "10", ",", "1", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", ".", "float", "(", ")", ".", "view", "(", "1", ",", "1", ",", "3", ",", "3", ")", ".", "expand", "(", "batch_size", ",", "num_view", ",", "3", ",", "3", ")", ".", "cuda", "(", ")", "\n", "cam_extrinsic", "=", "torch", ".", "rand", "(", "batch_size", ",", "num_view", ",", "3", ",", "4", ")", ".", "cuda", "(", ")", "\n", "\n", "feature_fetcher", "=", "FeatureFetcher", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "features", "=", "torch", ".", "rand", "(", "batch_size", ",", "num_view", ",", "channels", ",", "height", ",", "width", ")", ".", "cuda", "(", ")", "\n", "\n", "imgpt", "=", "torch", ".", "tensor", "(", "[", "60.5", ",", "80.5", ",", "1.0", "]", ")", ".", "view", "(", "1", ",", "1", ",", "3", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "num_view", ",", "3", ",", "num_pts", ")", ".", "cuda", "(", ")", "\n", "\n", "z", "=", "200", "\n", "\n", "pt", "=", "torch", ".", "matmul", "(", "torch", ".", "inverse", "(", "cam_intrinsic", ")", ",", "imgpt", ")", "*", "z", "\n", "\n", "pt", "=", "torch", ".", "matmul", "(", "torch", ".", "inverse", "(", "cam_extrinsic", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ")", ",", "\n", "(", "pt", "-", "cam_extrinsic", "[", ":", ",", ":", ",", ":", ",", "3", "]", ".", "unsqueeze", "(", "-", "1", ")", ")", ")", "# Xc = [R|T] Xw", "\n", "\n", "gathered_feature", "=", "feature_fetcher", "(", "features", ",", "pt", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "cam_intrinsic", ",", "cam_extrinsic", ")", "\n", "\n", "gathered_feature", "=", "gathered_feature", "[", ":", ",", "0", ",", ":", ",", "0", "]", "\n", "np", ".", "savetxt", "(", "\"gathered_feature.txt\"", ",", "gathered_feature", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "fmt", "=", "\"%.4f\"", ")", "\n", "\n", "groundtruth_feature", "=", "features", "[", ":", ",", ":", ",", ":", ",", "80", ",", "60", "]", "[", ":", ",", "0", ",", ":", "]", "\n", "np", ".", "savetxt", "(", "\"groundtruth_feature.txt\"", ",", "groundtruth_feature", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "fmt", "=", "\"%.4f\"", ")", "\n", "\n", "print", "(", "np", ".", "allclose", "(", "gathered_feature", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "groundtruth_feature", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "1.e-2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.mkdir": [[11, 13], ["os.makedirs"], "function", ["None"], ["def", "mkdir", "(", "path", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.load_cam_dtu": [[15, 53], ["numpy.zeros", "file.read().split", "range", "range", "range", "range", "len", "file.read", "float", "len", "float", "len", "float"], "function", ["None"], ["", "def", "load_cam_dtu", "(", "file", ",", "num_depth", "=", "0", ",", "interval_scale", "=", "1.0", ")", ":", "\n", "    ", "\"\"\" read camera txt file \"\"\"", "\n", "cam", "=", "np", ".", "zeros", "(", "(", "2", ",", "4", ",", "4", ")", ")", "\n", "words", "=", "file", ".", "read", "(", ")", ".", "split", "(", ")", "\n", "# read extrinsic", "\n", "for", "i", "in", "range", "(", "0", ",", "4", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "4", ")", ":", "\n", "            ", "extrinsic_index", "=", "4", "*", "i", "+", "j", "+", "1", "\n", "cam", "[", "0", "]", "[", "i", "]", "[", "j", "]", "=", "words", "[", "extrinsic_index", "]", "\n", "\n", "# read intrinsic", "\n", "", "", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "            ", "intrinsic_index", "=", "3", "*", "i", "+", "j", "+", "18", "\n", "cam", "[", "1", "]", "[", "i", "]", "[", "j", "]", "=", "words", "[", "intrinsic_index", "]", "\n", "\n", "", "", "if", "len", "(", "words", ")", "==", "29", ":", "\n", "        ", "cam", "[", "1", "]", "[", "3", "]", "[", "0", "]", "=", "words", "[", "27", "]", "\n", "cam", "[", "1", "]", "[", "3", "]", "[", "1", "]", "=", "float", "(", "words", "[", "28", "]", ")", "*", "interval_scale", "\n", "cam", "[", "1", "]", "[", "3", "]", "[", "2", "]", "=", "num_depth", "\n", "cam", "[", "1", "]", "[", "3", "]", "[", "3", "]", "=", "cam", "[", "1", "]", "[", "3", "]", "[", "0", "]", "+", "cam", "[", "1", "]", "[", "3", "]", "[", "1", "]", "*", "(", "num_depth", "-", "1", ")", "\n", "", "elif", "len", "(", "words", ")", "==", "30", ":", "\n", "        ", "cam", "[", "1", "]", "[", "3", "]", "[", "0", "]", "=", "words", "[", "27", "]", "\n", "cam", "[", "1", "]", "[", "3", "]", "[", "1", "]", "=", "float", "(", "words", "[", "28", "]", ")", "*", "interval_scale", "\n", "cam", "[", "1", "]", "[", "3", "]", "[", "2", "]", "=", "words", "[", "29", "]", "\n", "cam", "[", "1", "]", "[", "3", "]", "[", "3", "]", "=", "cam", "[", "1", "]", "[", "3", "]", "[", "0", "]", "+", "cam", "[", "1", "]", "[", "3", "]", "[", "1", "]", "*", "(", "num_depth", "-", "1", ")", "\n", "", "elif", "len", "(", "words", ")", "==", "31", ":", "\n", "        ", "cam", "[", "1", "]", "[", "3", "]", "[", "0", "]", "=", "words", "[", "27", "]", "\n", "cam", "[", "1", "]", "[", "3", "]", "[", "1", "]", "=", "float", "(", "words", "[", "28", "]", ")", "*", "interval_scale", "\n", "cam", "[", "1", "]", "[", "3", "]", "[", "2", "]", "=", "words", "[", "29", "]", "\n", "cam", "[", "1", "]", "[", "3", "]", "[", "3", "]", "=", "words", "[", "30", "]", "\n", "", "else", ":", "\n", "        ", "cam", "[", "1", "]", "[", "3", "]", "[", "0", "]", "=", "0", "\n", "cam", "[", "1", "]", "[", "3", "]", "[", "1", "]", "=", "0", "\n", "cam", "[", "1", "]", "[", "3", "]", "[", "2", "]", "=", "0", "\n", "cam", "[", "1", "]", "[", "3", "]", "[", "3", "]", "=", "0", "\n", "\n", "", "return", "cam", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.write_cam_dtu": [[55, 76], ["open", "open.write", "range", "open.write", "open.write", "range", "open.write", "open.close", "range", "open.write", "range", "open.write", "open.write", "open.write", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "write_cam_dtu", "(", "file", ",", "cam", ")", ":", "\n", "# f = open(file, \"w\")", "\n", "    ", "f", "=", "open", "(", "file", ",", "\"w\"", ")", "\n", "\n", "f", ".", "write", "(", "'extrinsic\\n'", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "4", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "4", ")", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "cam", "[", "0", "]", "[", "i", "]", "[", "j", "]", ")", "+", "' '", ")", "\n", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "f", ".", "write", "(", "'intrinsic\\n'", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "cam", "[", "1", "]", "[", "i", "]", "[", "j", "]", ")", "+", "' '", ")", "\n", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "f", ".", "write", "(", "\n", "'\\n'", "+", "str", "(", "cam", "[", "1", "]", "[", "3", "]", "[", "0", "]", ")", "+", "' '", "+", "str", "(", "cam", "[", "1", "]", "[", "3", "]", "[", "1", "]", ")", "+", "' '", "+", "str", "(", "cam", "[", "1", "]", "[", "3", "]", "[", "2", "]", ")", "+", "' '", "+", "str", "(", "cam", "[", "1", "]", "[", "3", "]", "[", "3", "]", ")", "+", "'\\n'", ")", "\n", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.load_pfm": [[78, 114], ["open", "open.readline().rstrip", "re.match", "float", "numpy.fromfile", "numpy.reshape", "numpy.flipud", "file.readline().rstrip.decode", "open.readline().decode", "list", "Exception", "open.readline().decode().rstrip", "open.readline", "file.readline().rstrip.decode", "Exception", "map", "open.readline", "re.match.groups", "open.readline().decode", "open.readline"], "function", ["None"], ["", "def", "load_pfm", "(", "file", ")", ":", "\n", "    ", "file", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "\n", "color", "=", "None", "\n", "width", "=", "None", "\n", "height", "=", "None", "\n", "scale", "=", "None", "\n", "endian", "=", "None", "\n", "\n", "header", "=", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", "\n", "if", "header", ".", "decode", "(", "\"ascii\"", ")", "==", "'PF'", ":", "\n", "        ", "color", "=", "True", "\n", "", "elif", "header", ".", "decode", "(", "\"ascii\"", ")", "==", "'Pf'", ":", "\n", "        ", "color", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Not a PFM file.'", ")", "\n", "\n", "", "dim_match", "=", "re", ".", "match", "(", "r'^(\\d+)\\s(\\d+)\\s$'", ",", "file", ".", "readline", "(", ")", ".", "decode", "(", "\"ascii\"", ")", ")", "\n", "if", "dim_match", ":", "\n", "        ", "width", ",", "height", "=", "list", "(", "map", "(", "int", ",", "dim_match", ".", "groups", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Malformed PFM header.'", ")", "\n", "\n", "", "scale", "=", "float", "(", "file", ".", "readline", "(", ")", ".", "decode", "(", "\"ascii\"", ")", ".", "rstrip", "(", ")", ")", "\n", "if", "scale", "<", "0", ":", "# little-endian", "\n", "        ", "endian", "=", "'<'", "\n", "scale", "=", "-", "scale", "\n", "", "else", ":", "\n", "        ", "endian", "=", "'>'", "# big-endian", "\n", "\n", "", "data", "=", "np", ".", "fromfile", "(", "file", ",", "endian", "+", "'f'", ")", "\n", "shape", "=", "(", "height", ",", "width", ",", "3", ")", "if", "color", "else", "(", "height", ",", "width", ")", "\n", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "shape", ")", "\n", "data", "=", "np", ".", "flipud", "(", "data", ")", "\n", "return", "data", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.write_pfm": [[116, 146], ["open", "numpy.flipud", "open.write", "open.write", "open.write", "np.flipud.tostring", "open.write", "open.close", "Exception", "len", "Exception", "len", "len"], "function", ["None"], ["", "def", "write_pfm", "(", "file", ",", "image", ",", "scale", "=", "1", ")", ":", "\n", "    ", "file", "=", "open", "(", "file", ",", "mode", "=", "'wb'", ")", "\n", "color", "=", "None", "\n", "\n", "if", "image", ".", "dtype", ".", "name", "!=", "'float32'", ":", "\n", "        ", "raise", "Exception", "(", "'Image dtype must be float32.'", ")", "\n", "\n", "", "image", "=", "np", ".", "flipud", "(", "image", ")", "\n", "\n", "if", "len", "(", "image", ".", "shape", ")", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "==", "3", ":", "# color image", "\n", "        ", "color", "=", "True", "\n", "", "elif", "len", "(", "image", ".", "shape", ")", "==", "2", "or", "len", "(", "image", ".", "shape", ")", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "==", "1", ":", "# greyscale", "\n", "        ", "color", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Image must have H x W x 3, H x W x 1 or H x W dimensions.'", ")", "\n", "\n", "", "file", ".", "write", "(", "'PF\\n'", "if", "color", "else", "'Pf\\n'", ".", "encode", "(", ")", ")", "\n", "file", ".", "write", "(", "'%d %d\\n'", ".", "encode", "(", ")", "%", "(", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "endian", "=", "image", ".", "dtype", ".", "byteorder", "\n", "\n", "if", "endian", "==", "'<'", "or", "endian", "==", "'='", "and", "sys", ".", "byteorder", "==", "'little'", ":", "\n", "        ", "scale", "=", "-", "scale", "\n", "\n", "", "file", ".", "write", "(", "'%f\\n'", ".", "encode", "(", ")", "%", "scale", ")", "\n", "\n", "image_string", "=", "image", ".", "tostring", "(", ")", "\n", "file", ".", "write", "(", "image_string", ")", "\n", "\n", "file", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.logger.setup_logger": [[12, 32], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "time.strftime"], "function", ["None"], ["def", "setup_logger", "(", "name", ",", "save_dir", ",", "prefix", "=", "\"\"", ",", "timestamp", "=", "True", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(name)s %(levelname)s: %(message)s\"", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "save_dir", ":", "\n", "        ", "timestamp", "=", "time", ".", "strftime", "(", "\".%m_%d_%H_%M_%S\"", ")", "if", "timestamp", "else", "\"\"", "\n", "prefix", "=", "\".\"", "+", "prefix", "if", "prefix", "else", "\"\"", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"log{}.txt\"", ".", "format", "(", "prefix", "+", "timestamp", ")", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "log_file", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "logger", ".", "propagate", "=", "False", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.logger.shutdown_logger": [[34, 36], ["None"], "function", ["None"], ["", "def", "shutdown_logger", "(", "logger", ")", ":", "\n", "    ", "logger", ".", "handlers", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.file_logger.file_logger": [[12, 58], ["os.join", "fastmvsnet.utils.io.mkdir", "print", "list", "range", "numpy.savetxt", "numpy.savetxt", "cam_params_list[].clone", "cam_params_list[].clone", "world_points[].cpu().numpy().transpose", "file_logger.save_points", "[].cpu().numpy", "file_logger.depth2pts", "file_logger.save_points", "file_logger.depth2pts", "file_logger.save_points", "print", "img_list.size", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "os.join", "[].detach().cpu().numpy", "os.join", "[].detach().cpu().numpy", "os.join", "os.join", "os.join", "preds.keys", "file_logger.depth2pts", "file_logger.save_points", "preds.keys", "file_logger.depth2pts", "file_logger.save_points", "os.join", "img_list[].detach().cpu().numpy", "os.join", "cam_params_list[].detach().cpu().numpy", "os.join", "cam_params_list[].detach().cpu().numpy", "world_points[].cpu().numpy", "[].cpu", "os.join", "os.join", "[].detach().cpu", "[].detach().cpu", "img_list[].detach().cpu", "cam_params_list[].detach().cpu", "cam_params_list[].detach().cpu", "world_points[].cpu", "[].detach", "[].detach", "img_list[].detach", "cam_params_list[].detach", "cam_params_list[].detach"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.mkdir", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.eval_file_logger.save_points", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.file_logger.depth2pts", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.eval_file_logger.save_points", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.file_logger.depth2pts", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.eval_file_logger.save_points", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.file_logger.depth2pts", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.eval_file_logger.save_points", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.file_logger.depth2pts", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.eval_file_logger.save_points"], ["def", "file_logger", "(", "data_batch", ",", "preds", ",", "step", ",", "output_dir", ",", "prefix", ")", ":", "\n", "    ", "step_dir", "=", "osp", ".", "join", "(", "output_dir", ",", "\"{}_step{:05d}\"", ".", "format", "(", "prefix", ",", "step", ")", ")", "\n", "mkdir", "(", "step_dir", ")", "\n", "print", "(", "\"start saving files in \"", ",", "step_dir", ")", "\n", "\n", "img_list", "=", "data_batch", "[", "\"img_list\"", "]", "\n", "batch_size", ",", "num_view", ",", "img_channel", ",", "img_height", ",", "img_width", "=", "list", "(", "img_list", ".", "size", "(", ")", ")", "\n", "\n", "cam_params_list", "=", "data_batch", "[", "\"cam_params_list\"", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_view", ")", ":", "\n", "        ", "np", ".", "savetxt", "(", "osp", ".", "join", "(", "step_dir", ",", "\"img{}.txt\"", ".", "format", "(", "i", ")", ")", ",", "img_list", "[", "0", ",", "i", ",", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "fmt", "=", "\"%.4f\"", ")", "\n", "np", ".", "savetxt", "(", "osp", ".", "join", "(", "step_dir", ",", "\"cam{}_extrinsic.txt\"", ".", "format", "(", "i", ")", ")", ",", "cam_params_list", "[", "0", ",", "i", ",", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "fmt", "=", "\"%.4f\"", ")", "\n", "np", ".", "savetxt", "(", "osp", ".", "join", "(", "step_dir", ",", "\"cam{}_intrinsic.txt\"", ".", "format", "(", "i", ")", ")", ",", "cam_params_list", "[", "0", ",", "i", ",", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "fmt", "=", "\"%.4f\"", ")", "\n", "", "np", ".", "savetxt", "(", "osp", ".", "join", "(", "step_dir", ",", "\"gt_depth_img.txt\"", ")", ",", "data_batch", "[", "\"gt_depth_img\"", "]", "[", "0", ",", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "fmt", "=", "\"%.4f\"", ")", "\n", "np", ".", "savetxt", "(", "osp", ".", "join", "(", "step_dir", ",", "\"coarse_depth_img.txt\"", ")", ",", "preds", "[", "\"coarse_depth_map\"", "]", "[", "0", ",", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "fmt", "=", "\"%.4f\"", ")", "\n", "\n", "cam_extrinsic", "=", "cam_params_list", "[", "0", ",", "0", ",", "0", ",", ":", "3", ",", ":", "4", "]", ".", "clone", "(", ")", "# (3, 4)", "\n", "\n", "cam_intrinsic", "=", "cam_params_list", "[", "0", ",", "0", ",", "1", ",", ":", "3", ",", ":", "3", "]", ".", "clone", "(", ")", "\n", "\n", "world_points", "=", "preds", "[", "\"world_points\"", "]", "\n", "world_points", "=", "world_points", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", ")", "\n", "save_points", "(", "osp", ".", "join", "(", "step_dir", ",", "\"world_points.xyz\"", ")", ",", "world_points", ")", "\n", "\n", "prob_map", "=", "preds", "[", "\"coarse_prob_map\"", "]", "[", "0", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "coarse_points", "=", "depth2pts", "(", "preds", "[", "\"coarse_depth_map\"", "]", ",", "prob_map", ",", "\n", "cam_intrinsic", ",", "cam_extrinsic", ",", "(", "img_height", ",", "img_width", ")", ")", "\n", "save_points", "(", "osp", ".", "join", "(", "step_dir", ",", "\"coarse_point.xyz\"", ")", ",", "coarse_points", ")", "\n", "\n", "gt_points", "=", "depth2pts", "(", "data_batch", "[", "\"gt_depth_img\"", "]", ",", "prob_map", ",", "\n", "cam_intrinsic", ",", "cam_extrinsic", ",", "(", "img_height", ",", "img_width", ")", ")", "\n", "save_points", "(", "osp", ".", "join", "(", "step_dir", ",", "\"gt_points.xyz\"", ")", ",", "gt_points", ")", "\n", "\n", "if", "\"flow1\"", "in", "preds", ".", "keys", "(", ")", ":", "\n", "        ", "flow1_points", "=", "depth2pts", "(", "preds", "[", "\"flow1\"", "]", ",", "prob_map", ",", "\n", "cam_intrinsic", ",", "cam_extrinsic", ",", "(", "img_height", ",", "img_width", ")", ")", "\n", "save_points", "(", "osp", ".", "join", "(", "step_dir", ",", "\"flow1_points.xyz\"", ")", ",", "flow1_points", ")", "\n", "\n", "", "if", "\"flow2\"", "in", "preds", ".", "keys", "(", ")", ":", "\n", "        ", "flow2_points", "=", "depth2pts", "(", "preds", "[", "\"flow2\"", "]", ",", "prob_map", ",", "\n", "cam_intrinsic", ",", "cam_extrinsic", ",", "(", "img_height", ",", "img_width", ")", ")", "\n", "save_points", "(", "osp", ".", "join", "(", "step_dir", ",", "\"flow2_points.xyz\"", ")", ",", "flow2_points", ")", "\n", "\n", "", "print", "(", "\"saving finished.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.file_logger.depth2pts": [[60, 85], ["fastmvsnet.functions.functions.get_pixel_grids().to", "cam_intrinsic.clone", "torch.matmul", "torch.matmul", "cam_extrinsic[].unsqueeze", "torch.inverse", "torch.inverse", "torch.matmul().detach().cpu().numpy().transpose", "torch.matmul().detach().cpu().numpy().transpose", "prob_map.copy", "numpy.reshape", "numpy.concatenate", "torch.inverse", "torch.inverse", "depth_map[].view", "depth_map.size", "cv2.resize", "fastmvsnet.functions.functions.get_pixel_grids", "torch.matmul().detach().cpu().numpy", "torch.matmul().detach().cpu().numpy", "depth_map.size", "depth_map.size", "depth_map.size", "depth_map.size", "depth_map.size", "torch.matmul().detach().cpu", "torch.matmul().detach().cpu", "torch.matmul().detach", "torch.matmul().detach", "torch.matmul", "torch.matmul"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.functions.functions.get_pixel_grids"], ["", "def", "depth2pts", "(", "depth_map", ",", "prob_map", ",", "cam_intrinsic", ",", "cam_extrinsic", ",", "img_size", ")", ":", "\n", "    ", "feature_map_indices_grid", "=", "get_pixel_grids", "(", "depth_map", ".", "size", "(", "2", ")", ",", "depth_map", ".", "size", "(", "3", ")", ")", ".", "to", "(", "depth_map", ".", "device", ")", "# (3, H*W)", "\n", "\n", "curr_cam_intrinsic", "=", "cam_intrinsic", ".", "clone", "(", ")", "\n", "scale", "=", "(", "depth_map", ".", "size", "(", "2", ")", "+", "0.0", ")", "/", "(", "img_size", "[", "0", "]", "+", "0.0", ")", "*", "4.0", "\n", "curr_cam_intrinsic", "[", ":", "2", ",", ":", "3", "]", "*=", "scale", "\n", "\n", "uv", "=", "torch", ".", "matmul", "(", "torch", ".", "inverse", "(", "curr_cam_intrinsic", ")", ",", "feature_map_indices_grid", ")", "\n", "cam_points", "=", "uv", "*", "depth_map", "[", "0", "]", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "R", "=", "cam_extrinsic", "[", ":", "3", ",", ":", "3", "]", "\n", "t", "=", "cam_extrinsic", "[", ":", "3", ",", "3", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "R_inv", "=", "torch", ".", "inverse", "(", "R", ")", "\n", "\n", "world_points", "=", "torch", ".", "matmul", "(", "R_inv", ",", "cam_points", "-", "t", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", ")", "\n", "\n", "curr_prob_map", "=", "prob_map", ".", "copy", "(", ")", "\n", "if", "curr_prob_map", ".", "shape", "[", "0", "]", "!=", "depth_map", ".", "size", "(", "2", ")", ":", "\n", "        ", "curr_prob_map", "=", "cv2", ".", "resize", "(", "curr_prob_map", ",", "(", "depth_map", ".", "size", "(", "3", ")", ",", "depth_map", ".", "size", "(", "2", ")", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "", "curr_prob_map", "=", "np", ".", "reshape", "(", "curr_prob_map", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "world_points", "=", "np", ".", "concatenate", "(", "[", "world_points", ",", "curr_prob_map", "]", ",", "axis", "=", "1", ")", "\n", "\n", "return", "world_points", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.file_logger.save_points": [[87, 89], ["numpy.savetxt"], "function", ["None"], ["", "def", "save_points", "(", "path", ",", "points", ")", ":", "\n", "    ", "np", ".", "savetxt", "(", "path", ",", "points", ",", "delimiter", "=", "' '", ",", "fmt", "=", "'%.4f'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.metric_logger.AverageMeter.__init__": [[14, 19], ["collections.deque", "collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ")", ":", "\n", "        ", "self", ".", "values", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "counts", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "sum", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.metric_logger.AverageMeter.update": [[20, 25], ["metric_logger.AverageMeter.values.append", "metric_logger.AverageMeter.counts.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "count", "=", "1", ")", ":", "\n", "        ", "self", ".", "values", ".", "append", "(", "value", ")", "\n", "self", ".", "counts", ".", "append", "(", "count", ")", "\n", "self", ".", "sum", "+=", "value", "\n", "self", ".", "count", "+=", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.metric_logger.AverageMeter.avg": [[26, 31], ["numpy.sum", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "if", "np", ".", "sum", "(", "self", ".", "counts", ")", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "return", "np", ".", "sum", "(", "self", ".", "values", ")", "/", "np", ".", "sum", "(", "self", ".", "counts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.metric_logger.AverageMeter.global_avg": [[32, 37], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "count", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "return", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.metric_logger.MetricLogger.__init__": [[40, 43], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "AverageMeter", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.metric_logger.MetricLogger.update": [[44, 55], ["kwargs.items", "isinstance", "isinstance", "metric_logger.MetricLogger.meters[].update", "v.sum().item.sum().item.numel", "v.sum().item.sum().item.item", "v.sum().item.sum().item.numel", "v.sum().item.sum().item.sum().item", "v.sum().item.sum().item.sum"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.metric_logger.MetricLogger.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "count", "=", "1", "\n", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "if", "v", ".", "numel", "(", ")", "==", "1", ":", "\n", "                    ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                    ", "count", "=", "v", ".", "numel", "(", ")", "\n", "v", "=", "v", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ",", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.metric_logger.MetricLogger.__getattr__": [[56, 60], ["object.__getattr__"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.metric_logger.MetricLogger.__getattr__"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "return", "object", ".", "__getattr__", "(", "self", ",", "attr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.metric_logger.MetricLogger.__str__": [[61, 68], ["metric_logger.MetricLogger.meters.items", "metric_logger.MetricLogger.delimiter.join", "metric_str.append"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "metric_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "metric_str", ".", "append", "(", "\n", "\"{}: {:.4f} ({:.4f})\"", ".", "format", "(", "name", ",", "meter", ".", "avg", ",", "meter", ".", "global_avg", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "metric_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.metric_logger.MetricLogger.summary_str": [[69, 77], ["metric_logger.MetricLogger.meters.items", "metric_logger.MetricLogger.delimiter.join", "metric_str.append"], "methods", ["None"], ["", "@", "property", "\n", "def", "summary_str", "(", "self", ")", ":", "\n", "        ", "metric_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "metric_str", ".", "append", "(", "\n", "\"{}: {:.4f}\"", ".", "format", "(", "name", ",", "meter", ".", "global_avg", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "metric_str", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.preprocess.norm_image": [[6, 12], ["img.astype.astype", "numpy.var", "numpy.mean", "numpy.sqrt"], "function", ["None"], ["def", "norm_image", "(", "img", ")", ":", "\n", "    ", "\"\"\" normalize image input \"\"\"", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "var", "=", "np", ".", "var", "(", "img", ",", "axis", "=", "(", "0", ",", "1", ")", ",", "keepdims", "=", "True", ")", "\n", "mean", "=", "np", ".", "mean", "(", "img", ",", "axis", "=", "(", "0", ",", "1", ")", ",", "keepdims", "=", "True", ")", "\n", "return", "(", "img", "-", "mean", ")", "/", "(", "np", ".", "sqrt", "(", "var", ")", "+", "1e-7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.preprocess.mask_depth_image": [[14, 21], ["cv2.threshold", "cv2.threshold", "numpy.expand_dims"], "function", ["None"], ["", "def", "mask_depth_image", "(", "depth_image", ",", "min_depth", ",", "max_depth", ")", ":", "\n", "    ", "\"\"\" mask out-of-range pixel to zero \"\"\"", "\n", "# print ('mask min max', min_depth, max_depth)", "\n", "ret", ",", "depth_image", "=", "cv2", ".", "threshold", "(", "depth_image", ",", "min_depth", ",", "100000", ",", "cv2", ".", "THRESH_TOZERO", ")", "\n", "ret", ",", "depth_image", "=", "cv2", ".", "threshold", "(", "depth_image", ",", "max_depth", ",", "100000", ",", "cv2", ".", "THRESH_TOZERO_INV", ")", "\n", "depth_image", "=", "np", ".", "expand_dims", "(", "depth_image", ",", "2", ")", "\n", "return", "depth_image", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.preprocess.scale_camera": [[23, 33], ["numpy.copy"], "function", ["None"], ["", "def", "scale_camera", "(", "cam", ",", "scale", "=", "1", ")", ":", "\n", "    ", "\"\"\" resize input in order to produce sampled depth map \"\"\"", "\n", "new_cam", "=", "np", ".", "copy", "(", "cam", ")", "\n", "# focal:", "\n", "new_cam", "[", "1", "]", "[", "0", "]", "[", "0", "]", "=", "cam", "[", "1", "]", "[", "0", "]", "[", "0", "]", "*", "scale", "\n", "new_cam", "[", "1", "]", "[", "1", "]", "[", "1", "]", "=", "cam", "[", "1", "]", "[", "1", "]", "[", "1", "]", "*", "scale", "\n", "# principle point:", "\n", "new_cam", "[", "1", "]", "[", "0", "]", "[", "2", "]", "=", "cam", "[", "1", "]", "[", "0", "]", "[", "2", "]", "*", "scale", "\n", "new_cam", "[", "1", "]", "[", "1", "]", "[", "2", "]", "=", "cam", "[", "1", "]", "[", "1", "]", "[", "2", "]", "*", "scale", "\n", "return", "new_cam", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.preprocess.scale_image": [[35, 41], ["cv2.resize", "cv2.resize"], "function", ["None"], ["", "def", "scale_image", "(", "image", ",", "scale", "=", "1", ",", "interpolation", "=", "'linear'", ")", ":", "\n", "    ", "\"\"\" resize image using cv2 \"\"\"", "\n", "if", "interpolation", "==", "'linear'", ":", "\n", "        ", "return", "cv2", ".", "resize", "(", "image", ",", "None", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "", "if", "interpolation", "==", "'nearest'", ":", "\n", "        ", "return", "cv2", ".", "resize", "(", "image", ",", "None", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.preprocess.scale_dtu_input": [[43, 54], ["range", "len", "preprocess.scale_image", "preprocess.scale_camera", "preprocess.scale_image"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.preprocess.scale_image", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.preprocess.scale_camera", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.preprocess.scale_image"], ["", "", "def", "scale_dtu_input", "(", "images", ",", "cams", ",", "depth_image", "=", "None", ",", "scale", "=", "1", ")", ":", "\n", "    ", "\"\"\" resize input to fit into the memory \"\"\"", "\n", "for", "view", "in", "range", "(", "len", "(", "images", ")", ")", ":", "\n", "        ", "images", "[", "view", "]", "=", "scale_image", "(", "images", "[", "view", "]", ",", "scale", "=", "scale", ")", "\n", "cams", "[", "view", "]", "=", "scale_camera", "(", "cams", "[", "view", "]", ",", "scale", "=", "scale", ")", "\n", "\n", "", "if", "depth_image", "is", "None", ":", "\n", "        ", "return", "images", ",", "cams", "\n", "", "else", ":", "\n", "        ", "depth_image", "=", "scale_image", "(", "depth_image", ",", "scale", "=", "scale", ",", "interpolation", "=", "'nearest'", ")", "\n", "return", "images", ",", "cams", ",", "depth_image", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.preprocess.crop_dtu_input": [[56, 86], ["range", "len", "int", "int", "int", "int", "math.floor", "math.floor", "math.floor", "math.floor"], "function", ["None"], ["", "", "def", "crop_dtu_input", "(", "images", ",", "cams", ",", "height", ",", "width", ",", "base_image_size", ",", "depth_image", "=", "None", ")", ":", "\n", "    ", "\"\"\" resize images and cameras to fit the network (can be divided by base image size) \"\"\"", "\n", "\n", "# crop images and cameras", "\n", "for", "view", "in", "range", "(", "len", "(", "images", ")", ")", ":", "\n", "        ", "h", ",", "w", "=", "images", "[", "view", "]", ".", "shape", "[", "0", ":", "2", "]", "\n", "new_h", "=", "h", "\n", "new_w", "=", "w", "\n", "if", "new_h", ">", "height", ":", "\n", "            ", "new_h", "=", "height", "\n", "", "else", ":", "\n", "            ", "new_h", "=", "int", "(", "math", ".", "floor", "(", "h", "/", "base_image_size", ")", "*", "base_image_size", ")", "\n", "", "if", "new_w", ">", "width", ":", "\n", "            ", "new_w", "=", "width", "\n", "", "else", ":", "\n", "            ", "new_w", "=", "int", "(", "math", ".", "floor", "(", "w", "/", "base_image_size", ")", "*", "base_image_size", ")", "\n", "", "start_h", "=", "int", "(", "math", ".", "floor", "(", "(", "h", "-", "new_h", ")", "/", "2", ")", ")", "\n", "start_w", "=", "int", "(", "math", ".", "floor", "(", "(", "w", "-", "new_w", ")", "/", "2", ")", ")", "\n", "finish_h", "=", "start_h", "+", "new_h", "\n", "finish_w", "=", "start_w", "+", "new_w", "\n", "images", "[", "view", "]", "=", "images", "[", "view", "]", "[", "start_h", ":", "finish_h", ",", "start_w", ":", "finish_w", "]", "\n", "cams", "[", "view", "]", "[", "1", "]", "[", "0", "]", "[", "2", "]", "=", "cams", "[", "view", "]", "[", "1", "]", "[", "0", "]", "[", "2", "]", "-", "start_w", "\n", "cams", "[", "view", "]", "[", "1", "]", "[", "1", "]", "[", "2", "]", "=", "cams", "[", "view", "]", "[", "1", "]", "[", "1", "]", "[", "2", "]", "-", "start_h", "\n", "\n", "# crop depth image", "\n", "", "if", "not", "depth_image", "is", "None", ":", "\n", "        ", "depth_image", "=", "depth_image", "[", "start_h", ":", "finish_h", ",", "start_w", ":", "finish_w", "]", "\n", "return", "images", ",", "cams", ",", "depth_image", "\n", "", "else", ":", "\n", "        ", "return", "images", ",", "cams", "\n", "", "", ""]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.eval_file_logger.eval_file_logger": [[12, 87], ["ref_img_path.split", "os.join", "data_batch[].cpu().numpy", "[].cpu().numpy", "fastmvsnet.utils.io.write_pfm", "fastmvsnet.utils.io.write_pfm", "cv2.imwrite", "ref_cam_paras.copy", "fastmvsnet.utils.io.write_cam_dtu", "numpy.array", "numpy.reshape", "enumerate", "os.isdir", "fastmvsnet.utils.io.mkdir", "print", "int", "preds[].cpu().numpy", "preds[].cpu().numpy", "float", "preds.keys", "numpy.savez", "data_batch[].cpu", "[].cpu", "preds[].cpu().numpy", "preds[].cpu", "preds[].cpu", "[].cpu().permute().numpy", "numpy.clip", "numpy.clip", "numpy.tile", "numpy.tile", "numpy.squeeze", "numpy.squeeze", "fastmvsnet.utils.io.write_pfm", "[].cpu().numpy", "fastmvsnet.utils.io.write_pfm", "ref_cam_paras.copy", "fastmvsnet.utils.io.write_cam_dtu", "eval_file_logger.depth2pts_np", "eval_file_logger.save_points", "numpy.sum", "numpy.floor().astype", "numpy.reshape", "numpy.reshape", "float", "float", "os.join", "preds[].cpu", "[].cpu().permute", "numpy.arange", "numpy.arange", "[].cpu", "numpy.floor", "[].cpu"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.write_pfm", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.write_pfm", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.write_cam_dtu", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.mkdir", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.write_pfm", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.write_pfm", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.write_cam_dtu", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.eval_file_logger.depth2pts_np", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.eval_file_logger.save_points"], ["def", "eval_file_logger", "(", "data_batch", ",", "preds", ",", "ref_img_path", ",", "folder", ",", "scene_name_index", "=", "-", "2", ",", "out_index_minus", "=", "1", ",", "save_prob_volume", "=", "False", ")", ":", "\n", "    ", "l", "=", "ref_img_path", ".", "split", "(", "\"/\"", ")", "\n", "eval_folder", "=", "\"/\"", ".", "join", "(", "l", "[", ":", "-", "3", "]", ")", "\n", "\n", "scene", "=", "l", "[", "scene_name_index", "]", "\n", "\n", "scene_folder", "=", "osp", ".", "join", "(", "eval_folder", ",", "folder", ",", "scene", ")", "\n", "\n", "if", "not", "osp", ".", "isdir", "(", "scene_folder", ")", ":", "\n", "        ", "mkdir", "(", "scene_folder", ")", "\n", "print", "(", "\"**** {} ****\"", ".", "format", "(", "scene", ")", ")", "\n", "\n", "", "out_index", "=", "int", "(", "l", "[", "-", "1", "]", "[", "5", ":", "8", "]", ")", "-", "out_index_minus", "\n", "\n", "cam_params_list", "=", "data_batch", "[", "\"cam_params_list\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "ref_cam_paras", "=", "cam_params_list", "[", "0", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "init_depth_map_path", "=", "scene_folder", "+", "(", "'/%08d_init.pfm'", "%", "out_index", ")", "\n", "init_prob_map_path", "=", "scene_folder", "+", "(", "'/%08d_init_prob.pfm'", "%", "out_index", ")", "\n", "out_ref_image_path", "=", "scene_folder", "+", "(", "'/%08d.jpg'", "%", "out_index", ")", "\n", "\n", "init_depth_map", "=", "preds", "[", "\"coarse_depth_map\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", "\n", "init_prob_map", "=", "preds", "[", "\"coarse_prob_map\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", "\n", "ref_image", "=", "data_batch", "[", "\"ref_img\"", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "write_pfm", "(", "init_depth_map_path", ",", "init_depth_map", ")", "\n", "write_pfm", "(", "init_prob_map_path", ",", "init_prob_map", ")", "\n", "cv2", ".", "imwrite", "(", "out_ref_image_path", ",", "ref_image", ")", "\n", "\n", "out_init_cam_path", "=", "scene_folder", "+", "(", "'/cam_%08d_init.txt'", "%", "out_index", ")", "\n", "init_cam_paras", "=", "ref_cam_paras", ".", "copy", "(", ")", "\n", "init_cam_paras", "[", "1", ",", ":", "2", ",", ":", "3", "]", "*=", "(", "float", "(", "init_depth_map", ".", "shape", "[", "0", "]", ")", "/", "ref_image", ".", "shape", "[", "0", "]", ")", "\n", "write_cam_dtu", "(", "out_init_cam_path", ",", "init_cam_paras", ")", "\n", "\n", "interval_list", "=", "np", ".", "array", "(", "[", "-", "2.0", ",", "-", "1.0", ",", "0.0", ",", "1.0", ",", "2.0", "]", ")", "\n", "interval_list", "=", "np", ".", "reshape", "(", "interval_list", ",", "[", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "preds", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "\"flow\"", "in", "k", ":", "\n", "            ", "if", "\"prob\"", "in", "k", ":", "\n", "                ", "out_flow_prob_map", "=", "preds", "[", "k", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "num_interval", "=", "out_flow_prob_map", ".", "shape", "[", "-", "1", "]", "\n", "assert", "num_interval", "==", "interval_list", ".", "size", "\n", "pred_interval", "=", "np", ".", "sum", "(", "out_flow_prob_map", "*", "interval_list", ",", "axis", "=", "-", "1", ")", "+", "2.0", "\n", "pred_floor", "=", "np", ".", "floor", "(", "pred_interval", ")", ".", "astype", "(", "np", ".", "int", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "pred_ceil", "=", "pred_floor", "+", "1", "\n", "pred_ceil", "=", "np", ".", "clip", "(", "pred_ceil", ",", "0", ",", "num_interval", "-", "1", ")", "\n", "pred_floor", "=", "np", ".", "clip", "(", "pred_floor", ",", "0", ",", "num_interval", "-", "1", ")", "\n", "prob_height", ",", "prob_width", "=", "pred_floor", ".", "shape", "[", ":", "2", "]", "\n", "prob_height_ind", "=", "np", ".", "tile", "(", "np", ".", "reshape", "(", "np", ".", "arange", "(", "prob_height", ")", ",", "[", "-", "1", ",", "1", ",", "1", "]", ")", ",", "[", "1", ",", "prob_width", ",", "1", "]", ")", "\n", "prob_width_ind", "=", "np", ".", "tile", "(", "np", ".", "reshape", "(", "np", ".", "arange", "(", "prob_width", ")", ",", "[", "1", ",", "-", "1", ",", "1", "]", ")", ",", "[", "prob_height", ",", "1", ",", "1", "]", ")", "\n", "\n", "floor_prob", "=", "np", ".", "squeeze", "(", "out_flow_prob_map", "[", "prob_height_ind", ",", "prob_width_ind", ",", "pred_floor", "]", ",", "-", "1", ")", "\n", "ceil_prob", "=", "np", ".", "squeeze", "(", "out_flow_prob_map", "[", "prob_height_ind", ",", "prob_width_ind", ",", "pred_ceil", "]", ",", "-", "1", ")", "\n", "flow_prob", "=", "floor_prob", "+", "ceil_prob", "\n", "flow_prob_map_path", "=", "scene_folder", "+", "\"/{:08d}_{}.pfm\"", ".", "format", "(", "out_index", ",", "k", ")", "\n", "write_pfm", "(", "flow_prob_map_path", ",", "flow_prob", ")", "\n", "\n", "", "else", ":", "\n", "                ", "out_flow_depth_map", "=", "preds", "[", "k", "]", "[", "0", ",", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flow_depth_map_path", "=", "scene_folder", "+", "\"/{:08d}_{}.pfm\"", ".", "format", "(", "out_index", ",", "k", ")", "\n", "write_pfm", "(", "flow_depth_map_path", ",", "out_flow_depth_map", ")", "\n", "out_flow_cam_path", "=", "scene_folder", "+", "\"/cam_{:08d}_{}.txt\"", ".", "format", "(", "out_index", ",", "k", ")", "\n", "flow_cam_paras", "=", "ref_cam_paras", ".", "copy", "(", ")", "\n", "flow_cam_paras", "[", "1", ",", ":", "2", ",", ":", "3", "]", "*=", "(", "float", "(", "out_flow_depth_map", ".", "shape", "[", "0", "]", ")", "/", "float", "(", "ref_image", ".", "shape", "[", "0", "]", ")", ")", "\n", "write_cam_dtu", "(", "out_flow_cam_path", ",", "flow_cam_paras", ")", "\n", "\n", "world_pts", "=", "depth2pts_np", "(", "out_flow_depth_map", ",", "flow_cam_paras", "[", "1", "]", "[", ":", "3", ",", ":", "3", "]", ",", "flow_cam_paras", "[", "0", "]", ")", "\n", "save_points", "(", "osp", ".", "join", "(", "scene_folder", ",", "\"{:08d}_{}pts.xyz\"", ".", "format", "(", "out_index", ",", "k", ")", ")", ",", "world_pts", ")", "\n", "# save cost volume", "\n", "", "", "", "if", "save_prob_volume", ":", "\n", "        ", "probability_volume", "=", "preds", "[", "\"coarse_prob_volume\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "init_prob_volume_path", "=", "scene_folder", "+", "(", "'/%08d_init_prob_volume.npz'", "%", "out_index", ")", "\n", "np", ".", "savez", "(", "init_prob_volume_path", ",", "probability_volume", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.eval_file_logger.depth2pts_np": [[89, 101], ["eval_file_logger.get_pixel_grids_np", "numpy.matmul", "numpy.linalg.inv", "numpy.matmul().transpose", "numpy.linalg.inv", "numpy.reshape", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.eval_file_logger.get_pixel_grids_np"], ["", "", "def", "depth2pts_np", "(", "depth_map", ",", "cam_intrinsic", ",", "cam_extrinsic", ")", ":", "\n", "    ", "feature_grid", "=", "get_pixel_grids_np", "(", "depth_map", ".", "shape", "[", "0", "]", ",", "depth_map", ".", "shape", "[", "1", "]", ")", "\n", "\n", "uv", "=", "np", ".", "matmul", "(", "np", ".", "linalg", ".", "inv", "(", "cam_intrinsic", ")", ",", "feature_grid", ")", "\n", "cam_points", "=", "uv", "*", "np", ".", "reshape", "(", "depth_map", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "R", "=", "cam_extrinsic", "[", ":", "3", ",", ":", "3", "]", "\n", "t", "=", "cam_extrinsic", "[", ":", "3", ",", "3", ":", "4", "]", "\n", "R_inv", "=", "np", ".", "linalg", ".", "inv", "(", "R", ")", "\n", "\n", "world_points", "=", "np", ".", "matmul", "(", "R_inv", ",", "cam_points", "-", "t", ")", ".", "transpose", "(", ")", "\n", "return", "world_points", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.eval_file_logger.get_pixel_grids_np": [[103, 113], ["numpy.linspace", "numpy.linspace", "numpy.meshgrid", "numpy.reshape", "numpy.reshape", "numpy.ones_like().astype", "numpy.concatenate", "numpy.ones_like"], "function", ["None"], ["", "def", "get_pixel_grids_np", "(", "height", ",", "width", ")", ":", "\n", "    ", "x_linspace", "=", "np", ".", "linspace", "(", "0.5", ",", "width", "-", "0.5", ",", "width", ")", "\n", "y_linspace", "=", "np", ".", "linspace", "(", "0.5", ",", "height", "-", "0.5", ",", "height", ")", "\n", "x_coordinates", ",", "y_coordinates", "=", "np", ".", "meshgrid", "(", "x_linspace", ",", "y_linspace", ")", "\n", "x_coordinates", "=", "np", ".", "reshape", "(", "x_coordinates", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "y_coordinates", "=", "np", ".", "reshape", "(", "y_coordinates", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "ones", "=", "np", ".", "ones_like", "(", "x_coordinates", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "grid", "=", "np", ".", "concatenate", "(", "[", "x_coordinates", ",", "y_coordinates", ",", "ones", "]", ",", "axis", "=", "0", ")", "\n", "\n", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.eval_file_logger.save_points": [[115, 117], ["numpy.savetxt"], "function", ["None"], ["", "def", "save_points", "(", "path", ",", "points", ")", ":", "\n", "    ", "np", ".", "savetxt", "(", "path", ",", "points", ",", "delimiter", "=", "' '", ",", "fmt", "=", "'%.4f'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.torch_utils.set_random_seed": [[7, 14], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "if", "seed", "<", "0", ":", "\n", "        ", "return", "\n", "", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.torch_utils.get_knn_3d": [[16, 62], ["list", "numpy.zeros", "range", "numpy.zeros", "torch.tensor().float", "torch.tensor().float", "torch.Tensor().to", "torch.Tensor().to", "torch.conv3d", "F.conv3d.contiguous().view", "torch.sum", "torch.sum", "torch.topk", "torch.topk", "nn_idx.permute.permute", "torch.arange().to", "torch.arange().to", "torch.clamp.view().expand", "torch.clamp", "torch.clamp", "xyz.size", "range", "range", "torch.tensor", "torch.tensor", "torch.Tensor", "torch.Tensor", "F.conv3d.contiguous", "torch.arange", "torch.arange", "torch.clamp.view", "torch.tensor().float.permute"], "function", ["None"], ["", "def", "get_knn_3d", "(", "xyz", ",", "kernel_size", "=", "5", ",", "knn", "=", "20", ")", ":", "\n", "    ", "\"\"\" Use 3D Conv to compute neighbour distance and find k nearest neighbour\n          xyz: (B, 3, D, H, W)\n\n      Returns:\n        idx: (B, D*H*W, k)\n    \"\"\"", "\n", "batch_size", ",", "_", ",", "depth", ",", "height", ",", "width", "=", "list", "(", "xyz", ".", "size", "(", ")", ")", "\n", "assert", "(", "kernel_size", "%", "2", "==", "1", ")", "\n", "hk", "=", "(", "kernel_size", "//", "2", ")", "\n", "k2", "=", "kernel_size", "**", "2", "\n", "k3", "=", "kernel_size", "**", "3", "\n", "\n", "t", "=", "np", ".", "zeros", "(", "(", "kernel_size", ",", "kernel_size", ",", "kernel_size", ",", "1", ",", "kernel_size", "**", "3", ")", ")", "\n", "ind", "=", "0", "\n", "for", "i", "in", "range", "(", "kernel_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "kernel_size", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "kernel_size", ")", ":", "\n", "                ", "t", "[", "i", ",", "j", ",", "k", ",", "0", ",", "ind", "]", "-=", "1.0", "\n", "t", "[", "hk", ",", "hk", ",", "hk", ",", "0", ",", "ind", "]", "+=", "1.0", "\n", "ind", "+=", "1", "\n", "", "", "", "weight", "=", "np", ".", "zeros", "(", "(", "kernel_size", ",", "kernel_size", ",", "kernel_size", ",", "3", ",", "3", "*", "k3", ")", ")", "\n", "weight", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", ",", ":", "k3", "]", "=", "t", "\n", "weight", "[", ":", ",", ":", ",", ":", ",", "1", ":", "2", ",", "k3", ":", "2", "*", "k3", "]", "=", "t", "\n", "weight", "[", ":", ",", ":", ",", ":", ",", "2", ":", "3", ",", "2", "*", "k3", ":", "3", "*", "k3", "]", "=", "t", "\n", "weight", "=", "torch", ".", "tensor", "(", "weight", ")", ".", "float", "(", ")", "\n", "\n", "weights_torch", "=", "torch", ".", "Tensor", "(", "weight", ".", "permute", "(", "(", "4", ",", "3", ",", "0", ",", "1", ",", "2", ")", ")", ")", ".", "to", "(", "xyz", ".", "device", ")", "\n", "dist", "=", "F", ".", "conv3d", "(", "xyz", ",", "weights_torch", ",", "padding", "=", "hk", ")", "\n", "\n", "dist_flat", "=", "dist", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "3", ",", "k3", ",", "-", "1", ")", "\n", "dist2", "=", "torch", ".", "sum", "(", "dist_flat", "**", "2", ",", "dim", "=", "1", ")", "\n", "\n", "_", ",", "nn_idx", "=", "torch", ".", "topk", "(", "-", "dist2", ",", "k", "=", "knn", ",", "dim", "=", "1", ")", "\n", "nn_idx", "=", "nn_idx", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "d_offset", "=", "nn_idx", "//", "k2", "-", "hk", "\n", "h_offset", "=", "(", "nn_idx", "%", "k2", ")", "//", "kernel_size", "-", "hk", "\n", "w_offset", "=", "nn_idx", "%", "kernel_size", "-", "hk", "\n", "\n", "idx", "=", "torch", ".", "arange", "(", "depth", "*", "height", "*", "width", ")", ".", "to", "(", "xyz", ".", "device", ")", "\n", "idx", "=", "idx", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "knn", ")", "\n", "idx", "=", "idx", "+", "(", "d_offset", "*", "height", "*", "width", ")", "+", "(", "h_offset", "*", "width", ")", "+", "w_offset", "\n", "\n", "idx", "=", "torch", ".", "clamp", "(", "idx", ",", "0", ",", "depth", "*", "height", "*", "width", "-", "1", ")", "\n", "\n", "return", "idx", "\n", "", ""]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.checkpoint.Checkpointer.__init__": [[9, 24], ["logging.getLogger"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "optimizer", "=", "None", ",", "\n", "scheduler", "=", "None", ",", "\n", "save_dir", "=", "\"\"", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "save_dir", "=", "save_dir", "\n", "if", "logger", "is", "None", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.checkpoint.Checkpointer.save": [[25, 41], ["checkpoint.Checkpointer.model.state_dict", "data.update", "os.path.join", "checkpoint.Checkpointer.logger.info", "torch.save", "checkpoint.Checkpointer.tag_last_checkpoint", "checkpoint.Checkpointer.optimizer.state_dict", "checkpoint.Checkpointer.scheduler.state_dict"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.checkpoint.Checkpointer.tag_last_checkpoint"], ["", "def", "save", "(", "self", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "save_dir", ":", "\n", "            ", "return", "\n", "\n", "", "data", "=", "{", "}", "\n", "data", "[", "\"model\"", "]", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "if", "self", ".", "optimizer", "is", "not", "None", ":", "\n", "            ", "data", "[", "\"optimizer\"", "]", "=", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "", "if", "self", ".", "scheduler", "is", "not", "None", ":", "\n", "            ", "data", "[", "\"scheduler\"", "]", "=", "self", ".", "scheduler", ".", "state_dict", "(", ")", "\n", "", "data", ".", "update", "(", "kwargs", ")", "\n", "\n", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"{}.pth\"", ".", "format", "(", "name", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saving checkpoint to {}\"", ".", "format", "(", "save_file", ")", ")", "\n", "torch", ".", "save", "(", "data", ",", "save_file", ")", "\n", "self", ".", "tag_last_checkpoint", "(", "save_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.checkpoint.Checkpointer.load": [[42, 62], ["checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer._load_file", "checkpoint.Checkpointer.Checkpointer.model.load_state_dict", "checkpoint.Checkpointer.Checkpointer.has_checkpoint", "checkpoint.Checkpointer.Checkpointer.get_checkpoint_file", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.pop", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.scheduler.load_state_dict", "checkpoint.Checkpointer.Checkpointer.pop"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.checkpoint.Checkpointer._load_file", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.checkpoint.Checkpointer.has_checkpoint", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.checkpoint.Checkpointer.get_checkpoint_file"], ["", "def", "load", "(", "self", ",", "f", "=", "None", ",", "resume", "=", "True", ")", ":", "\n", "        ", "if", "resume", "and", "self", ".", "has_checkpoint", "(", ")", ":", "\n", "# override argument with existing checkpoint", "\n", "            ", "f", "=", "self", ".", "get_checkpoint_file", "(", ")", "\n", "", "if", "not", "f", ":", "\n", "# no checkpoint could be found", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"No checkpoint found. Initializing model from scratch\"", ")", "\n", "return", "{", "}", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Loading checkpoint from {}\"", ".", "format", "(", "f", ")", ")", "\n", "checkpoint", "=", "self", ".", "_load_file", "(", "f", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "\"model\"", ")", ",", "False", ")", "\n", "# if \"optimizer\" in checkpoint and self.optimizer:", "\n", "#     self.logger.info(\"Loading optimizer from {}\".format(f))", "\n", "#     self.optimizer.load_state_dict(checkpoint.pop(\"optimizer\"))", "\n", "if", "\"scheduler\"", "in", "checkpoint", "and", "self", ".", "scheduler", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Loading scheduler from {}\"", ".", "format", "(", "f", ")", ")", "\n", "self", ".", "scheduler", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "\"scheduler\"", ")", ")", "\n", "\n", "# return any further checkpoint data", "\n", "", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.checkpoint.Checkpointer.has_checkpoint": [[63, 66], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "has_checkpoint", "(", "self", ")", ":", "\n", "        ", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"last_checkpoint\"", ")", "\n", "return", "os", ".", "path", ".", "exists", "(", "save_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.checkpoint.Checkpointer.get_checkpoint_file": [[67, 77], ["os.path.join", "open", "f.read().strip", "f.read"], "methods", ["None"], ["", "def", "get_checkpoint_file", "(", "self", ")", ":", "\n", "        ", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"last_checkpoint\"", ")", "\n", "try", ":", "\n", "            ", "with", "open", "(", "save_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "last_saved", "=", "f", ".", "read", "(", ")", ".", "strip", "(", ")", "\n", "", "", "except", "IOError", ":", "\n", "# if file doesn't exist, maybe because it has just been", "\n", "# deleted by a separate process", "\n", "            ", "last_saved", "=", "\"\"", "\n", "", "return", "last_saved", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.checkpoint.Checkpointer.tag_last_checkpoint": [[78, 82], ["os.path.join", "open", "f.write"], "methods", ["None"], ["", "def", "tag_last_checkpoint", "(", "self", ",", "last_filename", ")", ":", "\n", "        ", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"last_checkpoint\"", ")", "\n", "with", "open", "(", "save_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "last_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.checkpoint.Checkpointer._load_file": [[83, 85], ["torch.load", "torch.device"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.checkpoint.Checkpointer.load"], ["", "", "def", "_load_file", "(", "self", ",", "f", ")", ":", "\n", "        ", "return", "torch", ".", "load", "(", "f", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.init.init_bn": [[4, 10], ["torch.nn.init.ones_", "torch.nn.init.zeros_"], "function", ["None"], ["def", "init_bn", "(", "module", ")", ":", "\n", "    ", "if", "module", ".", "weight", "is", "not", "None", ":", "\n", "        ", "nn", ".", "init", ".", "ones_", "(", "module", ".", "weight", ")", "\n", "", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.init.set_bn": [[12, 16], ["model.modules", "isinstance"], "function", ["None"], ["", "def", "set_bn", "(", "model", ",", "momentum", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", ")", ")", ":", "\n", "            ", "m", ".", "momentum", "=", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.init.init_uniform": [[18, 25], ["torch.nn.init.xavier_uniform_", "torch.nn.init.zeros_"], "function", ["None"], ["", "", "", "def", "init_uniform", "(", "module", ")", ":", "\n", "    ", "if", "module", ".", "weight", "is", "not", "None", ":", "\n", "# nn.init.kaiming_uniform_(module.weight)", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "module", ".", "weight", ")", "\n", "", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.init.set_eps": [[27, 31], ["model.modules", "isinstance"], "function", ["None"], ["", "def", "set_eps", "(", "model", ",", "eps", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", ")", ")", ":", "\n", "            ", "m", ".", "eps", "=", "eps", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Conv1d.__init__": [[18, 28], ["torch.nn.Module.__init__", "torch.nn.Conv1d", "conv.Conv1d.init_weights", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.init_weights"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "relu", "=", "True", ",", "bn", "=", "True", ",", "bn_momentum", "=", "0.1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Conv1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "bias", "=", "(", "not", "bn", ")", ",", "**", "kwargs", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "out_channels", ",", "momentum", "=", "bn_momentum", ")", "if", "bn", "else", "None", "\n", "self", ".", "relu", "=", "relu", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Conv1d.forward": [[29, 36], ["conv.Conv1d.conv", "conv.Conv1d.bn", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "relu", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Conv1d.init_weights": [[37, 42], ["init.init_uniform", "init.init_bn"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.init.init_uniform", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.init.init_bn"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"default initialization\"\"\"", "\n", "init_uniform", "(", "self", ".", "conv", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "init_bn", "(", "self", ".", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Conv2d.__init__": [[58, 70], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "conv.Conv2d.init_weights", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.init_weights"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "relu", "=", "True", ",", "bn", "=", "True", ",", "bn_momentum", "=", "0.1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Conv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "bias", "=", "(", "not", "bn", ")", ",", "**", "kwargs", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ",", "momentum", "=", "bn_momentum", ")", "if", "bn", "else", "None", "\n", "self", ".", "relu", "=", "relu", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Conv2d.forward": [[71, 78], ["conv.Conv2d.conv", "conv.Conv2d.bn", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "relu", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Conv2d.init_weights": [[79, 84], ["init.init_uniform", "init.init_bn"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.init.init_uniform", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.init.init_bn"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"default initialization\"\"\"", "\n", "init_uniform", "(", "self", ".", "conv", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "init_bn", "(", "self", ".", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Conv2d_gn.__init__": [[100, 113], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "max", "conv.Conv2d_gn.init_weights", "torch.nn.GroupNorm"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.init_weights"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "relu", "=", "True", ",", "gn", "=", "True", ",", "group_channel", "=", "8", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Conv2d_gn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "bias", "=", "(", "not", "gn", ")", ",", "**", "kwargs", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "G", "=", "max", "(", "1", ",", "out_channels", "//", "group_channel", ")", "\n", "self", ".", "gn", "=", "nn", ".", "GroupNorm", "(", "G", ",", "out_channels", ")", "if", "gn", "else", "None", "\n", "self", ".", "relu", "=", "relu", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Conv2d_gn.forward": [[114, 121], ["conv.Conv2d_gn.conv", "conv.Conv2d_gn.gn", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "gn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "gn", "(", "x", ")", "\n", "", "if", "self", ".", "relu", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Conv2d_gn.init_weights": [[122, 125], ["init.init_uniform"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.init.init_uniform"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"default initialization\"\"\"", "\n", "init_uniform", "(", "self", ".", "conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Conv3d.__init__": [[141, 155], ["torch.nn.Module.__init__", "torch.nn.Conv3d", "conv.Conv3d.init_weights", "torch.nn.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.init_weights"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "relu", "=", "True", ",", "bn", "=", "True", ",", "bn_momentum", "=", "0.1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Conv3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "bias", "=", "(", "not", "bn", ")", ",", "**", "kwargs", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ",", "momentum", "=", "bn_momentum", ")", "if", "bn", "else", "None", "\n", "self", ".", "relu", "=", "relu", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Conv3d.forward": [[156, 163], ["conv.Conv3d.conv", "conv.Conv3d.bn", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "relu", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Conv3d.init_weights": [[164, 169], ["init.init_uniform", "init.init_bn"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.init.init_uniform", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.init.init_bn"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"default initialization\"\"\"", "\n", "init_uniform", "(", "self", ".", "conv", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "init_bn", "(", "self", ".", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Deconv2d.__init__": [[185, 198], ["torch.nn.Module.__init__", "torch.nn.ConvTranspose2d", "conv.Deconv2d.init_weights", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.init_weights"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "relu", "=", "True", ",", "bn", "=", "True", ",", "bn_momentum", "=", "0.1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Deconv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "bias", "=", "(", "not", "bn", ")", ",", "**", "kwargs", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ",", "momentum", "=", "bn_momentum", ")", "if", "bn", "else", "None", "\n", "self", ".", "relu", "=", "relu", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Deconv2d.forward": [[199, 209], ["conv.Deconv2d.conv", "y[].contiguous", "conv.Deconv2d.bn", "torch.relu", "list", "torch.relu.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "h", ",", "w", "=", "list", "(", "x", ".", "size", "(", ")", ")", "[", "2", ":", "]", "\n", "y", "=", "y", "[", ":", ",", ":", ",", ":", "2", "*", "h", ",", ":", "2", "*", "w", "]", ".", "contiguous", "(", ")", "\n", "", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "y", ")", "\n", "", "if", "self", ".", "relu", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Deconv2d.init_weights": [[210, 215], ["init.init_uniform", "init.init_bn"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.init.init_uniform", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.init.init_bn"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"default initialization\"\"\"", "\n", "init_uniform", "(", "self", ".", "conv", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "init_bn", "(", "self", ".", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Deconv2d_gn.__init__": [[231, 245], ["torch.nn.Module.__init__", "torch.nn.ConvTranspose2d", "max", "conv.Deconv2d_gn.init_weights", "torch.nn.GroupNorm"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.init_weights"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "relu", "=", "True", ",", "gn", "=", "True", ",", "group_channel", "=", "8", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Deconv2d_gn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "bias", "=", "(", "not", "gn", ")", ",", "**", "kwargs", ")", "\n", "G", "=", "max", "(", "1", ",", "out_channels", "//", "group_channel", ")", "\n", "self", ".", "gn", "=", "nn", ".", "GroupNorm", "(", "G", ",", "out_channels", ")", "if", "gn", "else", "None", "\n", "self", ".", "relu", "=", "relu", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Deconv2d_gn.forward": [[246, 256], ["conv.Deconv2d_gn.conv", "y[].contiguous", "conv.Deconv2d_gn.gn", "torch.relu", "list", "torch.relu.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "h", ",", "w", "=", "list", "(", "x", ".", "size", "(", ")", ")", "[", "2", ":", "]", "\n", "y", "=", "y", "[", ":", ",", ":", ",", ":", "2", "*", "h", ",", ":", "2", "*", "w", "]", ".", "contiguous", "(", ")", "\n", "", "if", "self", ".", "gn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "gn", "(", "y", ")", "\n", "", "if", "self", ".", "relu", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Deconv2d_gn.init_weights": [[257, 260], ["init.init_uniform"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.init.init_uniform"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"default initialization\"\"\"", "\n", "init_uniform", "(", "self", ".", "conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Deconv3d.__init__": [[275, 288], ["torch.nn.Module.__init__", "torch.nn.ConvTranspose3d", "conv.Deconv3d.init_weights", "torch.nn.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.init_weights"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "relu", "=", "True", ",", "bn", "=", "True", ",", "bn_momentum", "=", "0.1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Deconv3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "ConvTranspose3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "bias", "=", "(", "not", "bn", ")", ",", "**", "kwargs", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ",", "momentum", "=", "bn_momentum", ")", "if", "bn", "else", "None", "\n", "self", ".", "relu", "=", "relu", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Deconv3d.forward": [[289, 296], ["conv.Deconv3d.conv", "conv.Deconv3d.bn", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "y", ")", "\n", "", "if", "self", ".", "relu", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.conv.Deconv3d.init_weights": [[297, 302], ["init.init_uniform", "init.init_bn"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.init.init_uniform", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.init.init_bn"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"default initialization\"\"\"", "\n", "init_uniform", "(", "self", ".", "conv", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "init_bn", "(", "self", ".", "bn", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.mlp.MLP.__init__": [[19, 36], ["torch.nn.ModuleList.__init__", "enumerate", "mlp.MLP.append", "linear.FC"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "mlp_channels", ",", "\n", "dropout", "=", "None", ",", "\n", "bn", "=", "True", ",", "\n", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "for", "ind", ",", "out_channels", "in", "enumerate", "(", "mlp_channels", ")", ":", "\n", "            ", "self", ".", "append", "(", "FC", "(", "in_channels", ",", "out_channels", ",", "\n", "relu", "=", "True", ",", "bn", "=", "bn", ",", "bn_momentum", "=", "bn_momentum", ")", ")", "\n", "in_channels", "=", "out_channels", "\n", "\n", "", "self", ".", "out_channels", "=", "in_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.mlp.MLP.forward": [[37, 43], ["module", "torch.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "module", "in", "self", ":", "\n", "            ", "x", "=", "module", "(", "x", ")", "\n", "if", "self", ".", "dropout", ":", "\n", "                ", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "self", ".", "training", ",", "inplace", "=", "False", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.mlp.SharedMLP.__init__": [[46, 77], ["torch.nn.ModuleList.__init__", "enumerate", "mlp.SharedMLP.append", "ValueError", "mlp_module"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "mlp_channels", ",", "\n", "ndim", "=", "1", ",", "\n", "bn", "=", "True", ",", "\n", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "\"\"\"Multilayer perceptron shared on resolution (1D or 2D)\n\n        Args:\n            in_channels (int): the number of channels of input tensor\n            mlp_channels (tuple): the numbers of channels of fully connected layers\n            ndim (int): the number of dimensions to share\n            bn (bool): whether to use batch normalization\n        \"\"\"", "\n", "super", "(", "SharedMLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "\n", "if", "ndim", "==", "1", ":", "\n", "            ", "mlp_module", "=", "Conv1d", "\n", "", "elif", "ndim", "==", "2", ":", "\n", "            ", "mlp_module", "=", "Conv2d", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "\n", "", "for", "ind", ",", "out_channels", "in", "enumerate", "(", "mlp_channels", ")", ":", "\n", "            ", "self", ".", "append", "(", "mlp_module", "(", "in_channels", ",", "out_channels", ",", "1", ",", "\n", "relu", "=", "True", ",", "bn", "=", "bn", ",", "bn_momentum", "=", "bn_momentum", ")", ")", "\n", "in_channels", "=", "out_channels", "\n", "\n", "", "self", ".", "out_channels", "=", "in_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.mlp.SharedMLP.forward": [[78, 82], ["module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "module", "in", "self", ":", "\n", "            ", "x", "=", "module", "(", "x", ")", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.freeze_weight.freeze_bn": [[8, 29], ["module.named_modules", "isinstance", "m.eval", "m.named_parameters"], "function", ["None"], ["def", "freeze_bn", "(", "module", ",", "bn_eval", ",", "bn_frozen", ")", ":", "\n", "    ", "\"\"\"Freeze Batch Normalization in Module\n\n    Args:\n        module (torch.nn.Module):\n        bn_eval (bool): flag to using global stats\n        bn_frozen (bool): flag to freeze bn params\n\n    Returns:\n\n    \"\"\"", "\n", "for", "module_name", ",", "m", "in", "module", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "if", "bn_eval", ":", "\n", "# Notice the difference between the behaviors of", "\n", "# BatchNorm.eval() and BatchNorm(track_running_stats=False)", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "# print('BN: %s in eval mode.' % module_name)", "\n", "", "if", "bn_frozen", ":", "\n", "                ", "for", "param_name", ",", "params", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "params", ".", "requires_grad", "=", "False", "\n", "# print('BN: %s is frozen.' % (module_name + '.' + param_name))", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.freeze_weight.freeze_params": [[32, 50], ["module.named_parameters", "print", "isinstance", "re.search", "print"], "function", ["None"], ["", "", "", "", "", "def", "freeze_params", "(", "module", ",", "frozen_params", ")", ":", "\n", "    ", "\"\"\"Freeze params and/or convert them into eval mode\n\n    Args:\n        module (torch.nn.Module):\n        frozen_params: a list/tuple of strings,\n            which define all the patterns of interests\n\n    Returns:\n\n    \"\"\"", "\n", "for", "name", ",", "params", "in", "module", ".", "named_parameters", "(", ")", ":", "\n", "        ", "print", "(", "name", ")", "\n", "for", "pattern", "in", "frozen_params", ":", "\n", "            ", "assert", "isinstance", "(", "pattern", ",", "str", ")", "\n", "if", "re", ".", "search", "(", "pattern", ",", "name", ")", ":", "\n", "                ", "params", ".", "requires_grad", "=", "False", "\n", "print", "(", "'Params %s is frozen.'", "%", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.freeze_weight.freeze_modules": [[52, 72], ["module._modules.items", "isinstance", "re.search", "m.eval", "freeze_weight._freeze_all_params", "print", "freeze_weight.freeze_modules"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.freeze_weight._freeze_all_params", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.freeze_weight.freeze_modules"], ["", "", "", "", "def", "freeze_modules", "(", "module", ",", "frozen_modules", ",", "prefix", "=", "''", ")", ":", "\n", "    ", "\"\"\"Set module's eval mode and freeze its params\n\n    Args:\n        module (torch.nn.Module):\n        frozen_modules (list[str]):\n\n    Returns:\n\n    \"\"\"", "\n", "for", "name", ",", "m", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "        ", "for", "pattern", "in", "frozen_modules", ":", "\n", "            ", "assert", "isinstance", "(", "pattern", ",", "str", ")", "\n", "full_name", "=", "prefix", "+", "(", "'.'", "if", "prefix", "else", "''", ")", "+", "name", "\n", "if", "re", ".", "search", "(", "pattern", ",", "full_name", ")", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "_freeze_all_params", "(", "m", ")", "\n", "print", "(", "'Module %s is frozen.'", "%", "full_name", ")", "\n", "", "else", ":", "\n", "                ", "freeze_modules", "(", "m", ",", "frozen_modules", ",", "prefix", "=", "full_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.freeze_weight.freeze_by_patterns": [[74, 85], ["freeze_weight.freeze_params", "freeze_weight.freeze_modules", "pattern.startswith", "frozen_modules.append", "frozen_params.append"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.freeze_weight.freeze_params", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.freeze_weight.freeze_modules"], ["", "", "", "", "def", "freeze_by_patterns", "(", "module", ",", "patterns", ")", ":", "\n", "    ", "\"\"\"Freeze Module by matching patterns\"\"\"", "\n", "frozen_params", "=", "[", "]", "\n", "frozen_modules", "=", "[", "]", "\n", "for", "pattern", "in", "patterns", ":", "\n", "        ", "if", "pattern", ".", "startswith", "(", "'module:'", ")", ":", "\n", "            ", "frozen_modules", ".", "append", "(", "pattern", "[", "7", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "frozen_params", ".", "append", "(", "pattern", ")", "\n", "", "", "freeze_params", "(", "module", ",", "frozen_params", ")", "\n", "freeze_modules", "(", "module", ",", "frozen_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.freeze_weight._freeze_all_params": [[87, 91], ["module.named_parameters"], "function", ["None"], ["", "def", "_freeze_all_params", "(", "module", ")", ":", "\n", "    ", "\"\"\"Freeze all params in a module\"\"\"", "\n", "for", "name", ",", "params", "in", "module", ".", "named_parameters", "(", ")", ":", "\n", "        ", "params", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.freeze_weight.unfreeze_params": [[93, 111], ["module.named_parameters", "print", "isinstance", "re.search", "print"], "function", ["None"], ["", "", "def", "unfreeze_params", "(", "module", ",", "frozen_params", ")", ":", "\n", "    ", "\"\"\"Unfreeze params and/or convert them into eval mode\n\n    Args:\n        module (torch.nn.Module):\n        frozen_params: a list/tuple of strings,\n            which define all the patterns of interests\n\n    Returns:\n\n    \"\"\"", "\n", "for", "name", ",", "params", "in", "module", ".", "named_parameters", "(", ")", ":", "\n", "        ", "print", "(", "name", ")", "\n", "for", "pattern", "in", "frozen_params", ":", "\n", "            ", "assert", "isinstance", "(", "pattern", ",", "str", ")", "\n", "if", "re", ".", "search", "(", "pattern", ",", "name", ")", ":", "\n", "                ", "params", ".", "requires_grad", "=", "True", "\n", "print", "(", "'Params %s is unfrozen.'", "%", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.freeze_weight.unfreeze_modules": [[113, 133], ["module._modules.items", "isinstance", "re.search", "m.eval", "freeze_weight._unfreeze_all_params", "print", "freeze_weight.unfreeze_modules"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.freeze_weight._unfreeze_all_params", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.freeze_weight.unfreeze_modules"], ["", "", "", "", "def", "unfreeze_modules", "(", "module", ",", "frozen_modules", ",", "prefix", "=", "''", ")", ":", "\n", "    ", "\"\"\"Set module's eval mode and freeze its params\n\n    Args:\n        module (torch.nn.Module):\n        frozen_modules (list[str]):\n\n    Returns:\n\n    \"\"\"", "\n", "for", "name", ",", "m", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "        ", "for", "pattern", "in", "frozen_modules", ":", "\n", "            ", "assert", "isinstance", "(", "pattern", ",", "str", ")", "\n", "full_name", "=", "prefix", "+", "(", "'.'", "if", "prefix", "else", "''", ")", "+", "name", "\n", "if", "re", ".", "search", "(", "pattern", ",", "full_name", ")", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "_unfreeze_all_params", "(", "m", ")", "\n", "print", "(", "'Module %s is unfrozen.'", "%", "full_name", ")", "\n", "", "else", ":", "\n", "                ", "unfreeze_modules", "(", "m", ",", "frozen_modules", ",", "prefix", "=", "full_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.freeze_weight.unfreeze_by_patterns": [[135, 144], ["pattern.startswith", "unfreeze_modules.append", "unfreeze_params.append"], "function", ["None"], ["", "", "", "", "def", "unfreeze_by_patterns", "(", "module", ",", "patterns", ")", ":", "\n", "    ", "\"\"\"Defrost Module by matching patterns\"\"\"", "\n", "unfreeze_params", "=", "[", "]", "\n", "unfreeze_modules", "=", "[", "]", "\n", "for", "pattern", "in", "patterns", ":", "\n", "        ", "if", "pattern", ".", "startswith", "(", "'module:'", ")", ":", "\n", "            ", "unfreeze_modules", ".", "append", "(", "pattern", "[", "7", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "unfreeze_params", ".", "append", "(", "pattern", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.freeze_weight._unfreeze_all_params": [[146, 151], ["module.named_parameters", "print"], "function", ["None"], ["", "", "", "def", "_unfreeze_all_params", "(", "module", ")", ":", "\n", "    ", "\"\"\"Freeze all params in a module\"\"\"", "\n", "for", "name", ",", "params", "in", "module", ".", "named_parameters", "(", ")", ":", "\n", "        ", "params", ".", "requires_grad", "=", "True", "\n", "print", "(", "'Params %s is unfrozen.'", "%", "name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.functional.pdist": [[9, 27], ["torch.sum", "torch.sum", "torch.baddbmm", "torch.baddbmm", "torch.sum.transpose", "feature.transpose"], "function", ["None"], ["def", "pdist", "(", "feature", ")", ":", "\n", "    ", "\"\"\"Compute pairwise distances of features.\n\n    Args:\n        feature (torch.Tensor): (batch_size, channels, num_features)\n\n    Returns:\n        distance (torch.Tensor): (batch_size, num_features, num_features)\n\n    Notes:\n        This method returns square distances, and is optimized for lower memory and faster speed.\n        Sqaure sum is more efficient than gather diagonal from inner product.\n\n    \"\"\"", "\n", "square_sum", "=", "torch", ".", "sum", "(", "feature", "**", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "square_sum", "=", "square_sum", "+", "square_sum", ".", "transpose", "(", "1", ",", "2", ")", "\n", "distance", "=", "torch", ".", "baddbmm", "(", "square_sum", ",", "feature", ".", "transpose", "(", "1", ",", "2", ")", ",", "feature", ",", "alpha", "=", "-", "2.0", ")", "\n", "return", "distance", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.functional.pdist2": [[29, 49], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.baddbmm", "torch.baddbmm", "torch.sum.transpose", "feature1.transpose"], "function", ["None"], ["", "def", "pdist2", "(", "feature1", ",", "feature2", ")", ":", "\n", "    ", "\"\"\"Compute pairwise distances of two sets of features.\n\n    Args:\n        feature1 (torch.Tensor): (batch_size, channels, num_features1)\n        feature2 (torch.Tensor): (batch_size, channels, num_features2)\n\n    Returns:\n        distance (torch.Tensor): (batch_size, num_features1, num_features2)\n\n    Notes:\n        This method returns square distances, and is optimized for lower memory and faster speed.\n        Sqaure sum is more efficient than gather diagonal from inner product.\n\n    \"\"\"", "\n", "square_sum1", "=", "torch", ".", "sum", "(", "feature1", "**", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "square_sum2", "=", "torch", ".", "sum", "(", "feature2", "**", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "square_sum", "=", "square_sum1", ".", "transpose", "(", "1", ",", "2", ")", "+", "square_sum2", "\n", "distance", "=", "torch", ".", "baddbmm", "(", "square_sum", ",", "feature1", ".", "transpose", "(", "1", ",", "2", ")", ",", "feature2", ",", "alpha", "=", "-", "2.0", ")", "\n", "return", "distance", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.functional.encode_one_hot": [[55, 69], ["target.new_zeros", "one_hot.scatter.scatter", "one_hot.scatter.float", "target.size", "target.unsqueeze"], "function", ["None"], ["", "def", "encode_one_hot", "(", "target", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"Encode integer labels into one-hot vectors\n\n    Args:\n        target (torch.Tensor): (N,)\n        num_classes (int): the number of classes\n\n    Returns:\n        torch.FloatTensor: (N, C)\n\n    \"\"\"", "\n", "one_hot", "=", "target", ".", "new_zeros", "(", "target", ".", "size", "(", "0", ")", ",", "num_classes", ")", "\n", "one_hot", "=", "one_hot", ".", "scatter", "(", "1", ",", "target", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "return", "one_hot", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.functional.smooth_cross_entropy": [[71, 91], ["isinstance", "torch.zeros_like().scatter", "torch.zeros_like().scatter", "torch.log_softmax", "target.unsqueeze", "input.dim", "target.dim", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "def", "smooth_cross_entropy", "(", "input", ",", "target", ",", "label_smoothing", ")", ":", "\n", "    ", "\"\"\"Cross entropy loss with label smoothing\n\n    Args:\n        input (torch.Tensor): (N, C)\n        target (torch.Tensor): (N,)\n        label_smoothing (float):\n\n    Returns:\n        loss (torch.Tensor): scalar\n\n    \"\"\"", "\n", "assert", "input", ".", "dim", "(", ")", "==", "2", "and", "target", ".", "dim", "(", ")", "==", "1", "\n", "assert", "isinstance", "(", "label_smoothing", ",", "float", ")", "\n", "batch_size", ",", "num_classes", "=", "input", ".", "shape", "\n", "one_hot", "=", "torch", ".", "zeros_like", "(", "input", ")", ".", "scatter", "(", "1", ",", "target", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "smooth_one_hot", "=", "one_hot", "*", "(", "1", "-", "label_smoothing", ")", "+", "torch", ".", "ones_like", "(", "input", ")", "*", "(", "label_smoothing", "/", "num_classes", ")", "\n", "log_prob", "=", "F", ".", "log_softmax", "(", "input", ",", "dim", "=", "1", ")", "\n", "loss", "=", "(", "-", "smooth_one_hot", "*", "log_prob", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__": [[18, 27], ["torch.nn.Module.__init__", "torch.nn.Linear", "linear.FC.init_weights", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.__init__", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.init_weights"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "\n", "relu", "=", "True", ",", "bn", "=", "True", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "FC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ",", "bias", "=", "(", "not", "bn", ")", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "out_channels", ",", "momentum", "=", "bn_momentum", ")", "if", "bn", "else", "None", "\n", "self", ".", "relu", "=", "relu", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.forward": [[28, 35], ["linear.FC.fc", "linear.FC.bn", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "relu", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.linear.FC.init_weights": [[36, 41], ["init.init_uniform", "init.init_bn"], "methods", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.init.init_uniform", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.nn.init.init_bn"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"default initialization\"\"\"", "\n", "init_uniform", "(", "self", ".", "fc", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "init_bn", "(", "self", ".", "bn", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.functions.functions.get_pixel_grids": [[6, 17], ["torch.no_grad", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.linspace().view().expand.contiguous().view", "torch.linspace().view().expand.contiguous().view", "torch.ones", "torch.stack", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view().expand.contiguous", "torch.linspace().view().expand.contiguous", "torch.linspace", "torch.linspace"], "function", ["None"], ["def", "get_pixel_grids", "(", "height", ",", "width", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# texture coordinate", "\n", "        ", "x_linspace", "=", "torch", ".", "linspace", "(", "0.5", ",", "width", "-", "0.5", ",", "width", ")", ".", "view", "(", "1", ",", "width", ")", ".", "expand", "(", "height", ",", "width", ")", "\n", "y_linspace", "=", "torch", ".", "linspace", "(", "0.5", ",", "height", "-", "0.5", ",", "height", ")", ".", "view", "(", "height", ",", "1", ")", ".", "expand", "(", "height", ",", "width", ")", "\n", "# y_coordinates, x_coordinates = torch.meshgrid(y_linspace, x_linspace)", "\n", "x_coordinates", "=", "x_linspace", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "y_coordinates", "=", "y_linspace", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "ones", "=", "torch", ".", "ones", "(", "height", "*", "width", ")", "\n", "indices_grid", "=", "torch", ".", "stack", "(", "[", "x_coordinates", ",", "y_coordinates", ",", "ones", "]", ",", "dim", "=", "0", ")", "\n", "", "return", "indices_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.functions.functions.get_propability_map": [[19, 54], ["torch.no_grad", "list", "cv.size", "torch.arange", "torch.arange", "torch.arange", "b_coordinates.contiguous().view().type.view().expand", "y_coordinates.contiguous().view().type.view().expand", "x_coordinates.contiguous().view().type.view().expand", "b_coordinates.contiguous().view().type.contiguous().view().type", "y_coordinates.contiguous().view().type.contiguous().view().type", "x_coordinates.contiguous().view().type.contiguous().view().type", "torch.detach", "torch.clamp().type", "torch.clamp().type", "prob_map.view.view", "depth_map.size", "b_coordinates.contiguous().view().type.view", "y_coordinates.contiguous().view().type.view", "x_coordinates.contiguous().view().type.view", "b_coordinates.contiguous().view().type.contiguous().view", "y_coordinates.contiguous().view().type.contiguous().view", "x_coordinates.contiguous().view().type.contiguous().view", "torch.clamp", "torch.clamp", "depth_interval.view", "torch.detach.floor", "torch.detach.ceil", "b_coordinates.contiguous().view().type.contiguous", "y_coordinates.contiguous().view().type.contiguous", "x_coordinates.contiguous().view().type.contiguous", "depth_start.view"], "function", ["None"], ["", "def", "get_propability_map", "(", "cv", ",", "depth_map", ",", "depth_start", ",", "depth_interval", ")", ":", "\n", "    ", "\"\"\"get probability map from cost volume\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "list", "(", "depth_map", ".", "size", "(", ")", ")", "\n", "depth", "=", "cv", ".", "size", "(", "1", ")", "\n", "\n", "# byx coordinates, batched & flattened", "\n", "b_coordinates", "=", "torch", ".", "arange", "(", "batch_size", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "y_coordinates", "=", "torch", ".", "arange", "(", "height", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "x_coordinates", "=", "torch", ".", "arange", "(", "width", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "b_coordinates", "=", "b_coordinates", ".", "view", "(", "batch_size", ",", "1", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "height", ",", "width", ")", "\n", "y_coordinates", "=", "y_coordinates", ".", "view", "(", "1", ",", "height", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "height", ",", "width", ")", "\n", "x_coordinates", "=", "x_coordinates", ".", "view", "(", "1", ",", "1", ",", "width", ")", ".", "expand", "(", "batch_size", ",", "height", ",", "width", ")", "\n", "\n", "b_coordinates", "=", "b_coordinates", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "type", "(", "torch", ".", "long", ")", "\n", "y_coordinates", "=", "y_coordinates", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "type", "(", "torch", ".", "long", ")", "\n", "x_coordinates", "=", "x_coordinates", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "type", "(", "torch", ".", "long", ")", "\n", "# b_coordinates = _repeat_(b_coordinates, batch_size)", "\n", "# y_coordinates = _repeat_(y_coordinates, batch_size)", "\n", "# x_coordinates = _repeat_(x_coordinates, batch_size)", "\n", "\n", "# d coordinates (floored and ceiled), batched & flattened", "\n", "d_coordinates", "=", "(", "(", "depth_map", "-", "depth_start", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "/", "depth_interval", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "d_coordinates", "=", "torch", ".", "detach", "(", "d_coordinates", ")", "\n", "d_coordinates_left0", "=", "torch", ".", "clamp", "(", "d_coordinates", ".", "floor", "(", ")", ",", "0", ",", "depth", "-", "1", ")", ".", "type", "(", "torch", ".", "long", ")", "\n", "d_coordinates_right0", "=", "torch", ".", "clamp", "(", "d_coordinates", ".", "ceil", "(", ")", ",", "0", ",", "depth", "-", "1", ")", ".", "type", "(", "torch", ".", "long", ")", "\n", "\n", "# # get probability image by gathering", "\n", "prob_map_left0", "=", "cv", "[", "b_coordinates", ",", "d_coordinates_left0", ",", "y_coordinates", ",", "x_coordinates", "]", "\n", "prob_map_right0", "=", "cv", "[", "b_coordinates", ",", "d_coordinates_right0", ",", "y_coordinates", ",", "x_coordinates", "]", "\n", "\n", "prob_map", "=", "prob_map_left0", "+", "prob_map_right0", "\n", "prob_map", "=", "prob_map", ".", "view", "(", "batch_size", ",", "1", ",", "height", ",", "width", ")", "\n", "\n", "", "return", "prob_map", "\n", "", ""]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.mkdir": [[20, 27], ["os.makedirs", "os.makedirs"], "function", ["None"], ["def", "mkdir", "(", "path", ")", ":", "\n", "    ", "import", "errno", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.read_gipuma_dmb": [[29, 41], ["np.fromfile.reshape", "np.transpose().squeeze", "open", "np.fromfile", "unpack", "unpack", "unpack", "unpack", "np.transpose", "fid.read", "fid.read", "fid.read", "fid.read"], "function", ["None"], ["", "", "", "def", "read_gipuma_dmb", "(", "path", ")", ":", "\n", "    ", "'''read Gipuma .dmb format image'''", "\n", "\n", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "        ", "image_type", "=", "unpack", "(", "'<i'", ",", "fid", ".", "read", "(", "4", ")", ")", "[", "0", "]", "\n", "height", "=", "unpack", "(", "'<i'", ",", "fid", ".", "read", "(", "4", ")", ")", "[", "0", "]", "\n", "width", "=", "unpack", "(", "'<i'", ",", "fid", ".", "read", "(", "4", ")", ")", "[", "0", "]", "\n", "channel", "=", "unpack", "(", "'<i'", ",", "fid", ".", "read", "(", "4", ")", ")", "[", "0", "]", "\n", "\n", "array", "=", "np", ".", "fromfile", "(", "fid", ",", "np", ".", "float32", ")", "\n", "", "array", "=", "array", ".", "reshape", "(", "(", "width", ",", "height", ",", "channel", ")", ",", "order", "=", "\"F\"", ")", "\n", "return", "np", ".", "transpose", "(", "array", ",", "(", "1", ",", "0", ",", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.write_gipuma_dmb": [[43, 65], ["np.shape", "len", "len", "np.transpose().squeeze", "open", "fid.write", "fid.write", "fid.write", "fid.write", "np.transpose().squeeze.tofile", "pack", "pack", "pack", "pack", "np.transpose"], "function", ["None"], ["", "def", "write_gipuma_dmb", "(", "path", ",", "image", ")", ":", "\n", "    ", "'''write Gipuma .dmb format image'''", "\n", "\n", "image_shape", "=", "np", ".", "shape", "(", "image", ")", "\n", "width", "=", "image_shape", "[", "1", "]", "\n", "height", "=", "image_shape", "[", "0", "]", "\n", "if", "len", "(", "image_shape", ")", "==", "3", ":", "\n", "        ", "channels", "=", "image_shape", "[", "2", "]", "\n", "", "else", ":", "\n", "        ", "channels", "=", "1", "\n", "\n", "", "if", "len", "(", "image_shape", ")", "==", "3", ":", "\n", "        ", "image", "=", "np", ".", "transpose", "(", "image", ",", "(", "2", ",", "0", ",", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "", "with", "open", "(", "path", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "# fid.write(pack(1))", "\n", "        ", "fid", ".", "write", "(", "pack", "(", "'<i'", ",", "1", ")", ")", "\n", "fid", ".", "write", "(", "pack", "(", "'<i'", ",", "height", ")", ")", "\n", "fid", ".", "write", "(", "pack", "(", "'<i'", ",", "width", ")", ")", "\n", "fid", ".", "write", "(", "pack", "(", "'<i'", ",", "channels", ")", ")", "\n", "image", ".", "tofile", "(", "fid", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.mvsnet_to_gipuma_dmb": [[67, 74], ["depthfusion.write_gipuma_dmb", "load_pfm"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.write_gipuma_dmb", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.load_pfm"], ["", "def", "mvsnet_to_gipuma_dmb", "(", "in_path", ",", "out_path", ")", ":", "\n", "    ", "'''convert mvsnet .pfm output to Gipuma .dmb format'''", "\n", "\n", "image", "=", "load_pfm", "(", "in_path", ")", "[", "0", "]", "\n", "write_gipuma_dmb", "(", "out_path", ",", "image", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.mvsnet_to_gipuma_cam": [[76, 103], ["load_cam_dtu", "np.matmul", "open", "range", "open.write", "open.close", "open", "range", "open.write", "open.write", "str"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.load_cam_dtu"], ["", "def", "mvsnet_to_gipuma_cam", "(", "in_path", ",", "out_path", ")", ":", "\n", "    ", "'''convert mvsnet camera to gipuma camera format'''", "\n", "\n", "cam", "=", "load_cam_dtu", "(", "open", "(", "in_path", ")", ")", "\n", "\n", "extrinsic", "=", "cam", "[", "0", ":", "4", "]", "[", "0", ":", "4", "]", "[", "0", "]", "\n", "intrinsic", "=", "cam", "[", "0", ":", "4", "]", "[", "0", ":", "4", "]", "[", "1", "]", "\n", "# intrinsic[0][0] = intrinsic[1][1]", "\n", "# intrinsic[0][2] = 81.5", "\n", "# intrinsic[1][2] = 61.5", "\n", "# print(intrinsic)", "\n", "intrinsic", "[", "3", "]", "[", "0", "]", "=", "0", "\n", "intrinsic", "[", "3", "]", "[", "1", "]", "=", "0", "\n", "intrinsic", "[", "3", "]", "[", "2", "]", "=", "0", "\n", "intrinsic", "[", "3", "]", "[", "3", "]", "=", "0", "\n", "projection_matrix", "=", "np", ".", "matmul", "(", "intrinsic", ",", "extrinsic", ")", "\n", "projection_matrix", "=", "projection_matrix", "[", "0", ":", "3", "]", "[", ":", "]", "\n", "\n", "f", "=", "open", "(", "out_path", ",", "\"w\"", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "4", ")", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "projection_matrix", "[", "i", "]", "[", "j", "]", ")", "+", "' '", ")", "\n", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.fake_colmap_normal": [[105, 124], ["depthfusion.read_gipuma_dmb", "np.shape", "np.ones_like", "np.reshape", "np.tile", "np.squeeze", "np.reshape", "np.tile", "np.float32", "np.multiply", "np.float32", "depthfusion.write_gipuma_dmb", "np.where"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.read_gipuma_dmb", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.write_gipuma_dmb"], ["", "def", "fake_colmap_normal", "(", "in_depth_path", ",", "out_normal_path", ")", ":", "\n", "    ", "depth_image", "=", "read_gipuma_dmb", "(", "in_depth_path", ")", "\n", "image_shape", "=", "np", ".", "shape", "(", "depth_image", ")", "\n", "\n", "normal_image", "=", "np", ".", "ones_like", "(", "depth_image", ")", "\n", "normal_image", "=", "np", ".", "reshape", "(", "normal_image", ",", "(", "image_shape", "[", "0", "]", ",", "image_shape", "[", "1", "]", ",", "1", ")", ")", "\n", "normal_image", "=", "np", ".", "tile", "(", "normal_image", ",", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "normal_image", "=", "normal_image", "/", "1.732050808", "\n", "\n", "mask_image", "=", "np", ".", "squeeze", "(", "np", ".", "where", "(", "depth_image", ">", "0", ",", "1", ",", "0", ")", ")", "\n", "mask_image", "=", "np", ".", "reshape", "(", "mask_image", ",", "(", "image_shape", "[", "0", "]", ",", "image_shape", "[", "1", "]", ",", "1", ")", ")", "\n", "mask_image", "=", "np", ".", "tile", "(", "mask_image", ",", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "mask_image", "=", "np", ".", "float32", "(", "mask_image", ")", "\n", "\n", "normal_image", "=", "np", ".", "multiply", "(", "normal_image", ",", "mask_image", ")", "\n", "normal_image", "=", "np", ".", "float32", "(", "normal_image", ")", "\n", "\n", "write_gipuma_dmb", "(", "out_normal_path", ",", "normal_image", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.mvsnet_to_gipuma": [[126, 158], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "depthfusion.mkdir", "depthfusion.mkdir", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "depthfusion.mvsnet_to_gipuma_cam", "os.path.join", "os.path.join", "depthfusion.mkdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "depthfusion.mvsnet_to_gipuma_dmb", "depthfusion.fake_colmap_normal", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "cv2.imread", "cv2.imwrite", "load_pfm", "cv2.resize"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.mkdir", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.mkdir", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.mvsnet_to_gipuma_cam", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.mkdir", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.mvsnet_to_gipuma_dmb", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.fake_colmap_normal", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.load_pfm"], ["", "def", "mvsnet_to_gipuma", "(", "scene_folder", ",", "gipuma_point_folder", ",", "name", ",", "view_num", ")", ":", "\n", "    ", "gipuma_cam_folder", "=", "os", ".", "path", ".", "join", "(", "gipuma_point_folder", ",", "'cams'", ")", "\n", "gipuma_image_folder", "=", "os", ".", "path", ".", "join", "(", "gipuma_point_folder", ",", "'images'", ")", "\n", "mkdir", "(", "gipuma_cam_folder", ")", "\n", "mkdir", "(", "gipuma_image_folder", ")", "\n", "\n", "for", "v", "in", "range", "(", "view_num", ")", ":", "\n", "# convert cameras", "\n", "        ", "in_cam_file", "=", "os", ".", "path", ".", "join", "(", "scene_folder", ",", "'cam_{:08d}_{}.txt'", ".", "format", "(", "v", ",", "name", ")", ")", "\n", "out_cam_file", "=", "os", ".", "path", ".", "join", "(", "gipuma_cam_folder", ",", "'{:08d}.jpg.P'", ".", "format", "(", "v", ")", ")", "\n", "mvsnet_to_gipuma_cam", "(", "in_cam_file", ",", "out_cam_file", ")", "\n", "\n", "# convert depth maps and fake normal maps", "\n", "gipuma_prefix", "=", "'2333__'", "\n", "sub_depth_folder", "=", "os", ".", "path", ".", "join", "(", "gipuma_point_folder", ",", "gipuma_prefix", "+", "\"{:08d}\"", ".", "format", "(", "v", ")", ")", "\n", "mkdir", "(", "sub_depth_folder", ")", "\n", "in_depth_pfm", "=", "os", ".", "path", ".", "join", "(", "scene_folder", ",", "\"{:08d}_{}_prob_filtered.pfm\"", ".", "format", "(", "v", ",", "name", ")", ")", "\n", "out_depth_dmb", "=", "os", ".", "path", ".", "join", "(", "sub_depth_folder", ",", "'disp.dmb'", ")", "\n", "fake_normal_dmb", "=", "os", ".", "path", ".", "join", "(", "sub_depth_folder", ",", "'normals.dmb'", ")", "\n", "mvsnet_to_gipuma_dmb", "(", "in_depth_pfm", ",", "out_depth_dmb", ")", "\n", "fake_colmap_normal", "(", "out_depth_dmb", ",", "fake_normal_dmb", ")", "\n", "\n", "# copy images to gipuma image folder", "\n", "in_image_file", "=", "os", ".", "path", ".", "join", "(", "scene_folder", ",", "'{:08d}.jpg'", ".", "format", "(", "v", ")", ")", "\n", "out_image_file", "=", "os", ".", "path", ".", "join", "(", "gipuma_image_folder", ",", "'{:08d}.jpg'", ".", "format", "(", "v", ")", ")", "\n", "in_image", "=", "cv2", ".", "imread", "(", "in_image_file", ")", "\n", "\n", "depth_image", "=", "load_pfm", "(", "in_depth_pfm", ")", "[", "0", "]", "\n", "if", "in_image", ".", "shape", "[", ":", "2", "]", "!=", "depth_image", ".", "shape", "[", ":", "2", "]", ":", "\n", "            ", "in_image", "=", "cv2", ".", "resize", "(", "in_image", ",", "(", "depth_image", ".", "shape", "[", "1", "]", ",", "depth_image", ".", "shape", "[", "0", "]", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "", "cv2", ".", "imwrite", "(", "out_image_file", ",", "in_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.probability_filter": [[160, 184], ["range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "write_pfm", "load_pfm", "load_pfm", "load_pfm", "cv2.resize", "cv2.resize"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.write_pfm", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.load_pfm", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.load_pfm", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.load_pfm"], ["", "", "def", "probability_filter", "(", "scene_folder", ",", "init_prob_threshold", ",", "flow_prob_threshold", ",", "name", ",", "view_num", ",", "mode", ")", ":", "\n", "    ", "name_bak", "=", "name", "\n", "for", "v", "in", "range", "(", "view_num", ")", ":", "\n", "# name = 'init'", "\n", "        ", "init_prob_map_path", "=", "os", ".", "path", ".", "join", "(", "scene_folder", ",", "\"{:08d}_init_prob.pfm\"", ".", "format", "(", "v", ")", ")", "\n", "prob_map_path", "=", "os", ".", "path", ".", "join", "(", "scene_folder", ",", "\"{:08d}_{}_prob.pfm\"", ".", "format", "(", "v", ",", "name", ")", ")", "\n", "init_depth_map_path", "=", "os", ".", "path", ".", "join", "(", "scene_folder", ",", "\"{:08d}_{}.pfm\"", ".", "format", "(", "v", ",", "name", ")", ")", "\n", "# name = name_bak", "\n", "out_depth_map_path", "=", "os", ".", "path", ".", "join", "(", "scene_folder", ",", "\"{:08d}_{}_prob_filtered.pfm\"", ".", "format", "(", "v", ",", "name", ")", ")", "\n", "\n", "depth_map", "=", "load_pfm", "(", "init_depth_map_path", ")", "[", "0", "]", "\n", "prob_map", "=", "load_pfm", "(", "prob_map_path", ")", "[", "0", "]", "\n", "init_prob_map", "=", "load_pfm", "(", "init_prob_map_path", ")", "[", "0", "]", "\n", "\n", "# depth_map = cv2.resize(depth_map, (640, 480), interpolation=cv2.INTER_NEAREST)", "\n", "\n", "if", "prob_map", ".", "shape", "!=", "depth_map", ".", "shape", ":", "\n", "            ", "prob_map", "=", "cv2", ".", "resize", "(", "prob_map", ",", "(", "depth_map", ".", "shape", "[", "1", "]", ",", "depth_map", ".", "shape", "[", "0", "]", ")", ",", "interpolation", "=", "mode", ")", "\n", "", "if", "init_prob_map", ".", "shape", "!=", "depth_map", ".", "shape", ":", "\n", "            ", "init_prob_map", "=", "cv2", ".", "resize", "(", "init_prob_map", ",", "(", "depth_map", ".", "shape", "[", "1", "]", ",", "depth_map", ".", "shape", "[", "0", "]", ")", ",", "interpolation", "=", "mode", ")", "\n", "\n", "", "depth_map", "[", "prob_map", "<", "flow_prob_threshold", "]", "=", "0", "\n", "depth_map", "[", "init_prob_map", "<", "init_prob_threshold", "]", "=", "0", "\n", "write_pfm", "(", "out_depth_map_path", ",", "depth_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.probability_filter2": [[186, 205], ["range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "write_pfm", "load_pfm", "load_pfm", "cv2.resize"], "function", ["home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.write_pfm", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.load_pfm", "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.utils.io.load_pfm"], ["", "", "def", "probability_filter2", "(", "scene_folder", ",", "init_prob_threshold", ",", "flow_prob_threshold", ",", "name", ",", "view_num", ",", "mode", ")", ":", "\n", "    ", "name_bak", "=", "name", "\n", "for", "v", "in", "range", "(", "view_num", ")", ":", "\n", "# name = 'init'", "\n", "        ", "init_prob_map_path", "=", "os", ".", "path", ".", "join", "(", "scene_folder", ",", "\"{:08d}_init_prob.pfm\"", ".", "format", "(", "v", ")", ")", "\n", "init_depth_map_path", "=", "os", ".", "path", ".", "join", "(", "scene_folder", ",", "\"{:08d}_{}.pfm\"", ".", "format", "(", "v", ",", "name", ")", ")", "\n", "# name = name_bak", "\n", "out_depth_map_path", "=", "os", ".", "path", ".", "join", "(", "scene_folder", ",", "\"{:08d}_{}_prob_filtered.pfm\"", ".", "format", "(", "v", ",", "name", ")", ")", "\n", "\n", "depth_map", "=", "load_pfm", "(", "init_depth_map_path", ")", "[", "0", "]", "\n", "init_prob_map", "=", "load_pfm", "(", "init_prob_map_path", ")", "[", "0", "]", "\n", "# print(depth_map.shape)", "\n", "# depth_map = cv2.resize(depth_map, (640, 480), interpolation=cv2.INTER_NEAREST)", "\n", "# print(depth_map.shape)", "\n", "if", "init_prob_map", ".", "shape", "!=", "depth_map", ".", "shape", ":", "\n", "            ", "init_prob_map", "=", "cv2", ".", "resize", "(", "init_prob_map", ",", "(", "depth_map", ".", "shape", "[", "1", "]", ",", "depth_map", ".", "shape", "[", "0", "]", ")", ",", "interpolation", "=", "mode", ")", "\n", "\n", "", "depth_map", "[", "init_prob_map", "<", "init_prob_threshold", "]", "=", "0", "\n", "write_pfm", "(", "out_depth_map_path", ",", "depth_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.svip-lab_FastMVSNet.tools.depthfusion.depth_map_fusion": [[207, 227], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "print", "os.system", "os.system", "str", "str", "str", "str", "str"], "function", ["None"], ["", "", "def", "depth_map_fusion", "(", "point_folder", ",", "fusibile_exe_path", ",", "disp_thresh", ",", "num_consistent", ")", ":", "\n", "    ", "cam_folder", "=", "os", ".", "path", ".", "join", "(", "point_folder", ",", "'cams'", ")", "\n", "image_folder", "=", "os", ".", "path", ".", "join", "(", "point_folder", ",", "'images'", ")", "\n", "depth_min", "=", "0.001", "\n", "depth_max", "=", "100000", "\n", "normal_thresh", "=", "360", "\n", "\n", "cmd", "=", "fusibile_exe_path", "\n", "cmd", "=", "cmd", "+", "' -input_folder '", "+", "point_folder", "+", "'/'", "\n", "cmd", "=", "cmd", "+", "' -p_folder '", "+", "cam_folder", "+", "'/'", "\n", "cmd", "=", "cmd", "+", "' -images_folder '", "+", "image_folder", "+", "'/'", "\n", "cmd", "=", "cmd", "+", "' --depth_min='", "+", "str", "(", "depth_min", ")", "\n", "cmd", "=", "cmd", "+", "' --depth_max='", "+", "str", "(", "depth_max", ")", "\n", "cmd", "=", "cmd", "+", "' --normal_thresh='", "+", "str", "(", "normal_thresh", ")", "\n", "cmd", "=", "cmd", "+", "' --disp_thresh='", "+", "str", "(", "disp_thresh", ")", "\n", "cmd", "=", "cmd", "+", "' --num_consistent='", "+", "str", "(", "num_consistent", ")", "\n", "print", "(", "cmd", ")", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "\n", "return", "\n", "\n"]]}