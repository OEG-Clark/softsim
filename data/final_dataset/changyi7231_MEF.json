{"home.repos.pwc.inspect_result.changyi7231_MEF.optim.adamax.Adamax.__init__": [[6, 23], ["dict", "super().__init__", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Conv2d.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "polyak", "=", "0", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "weight_decay", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid weight_decay value: {}\"", ".", "format", "(", "weight_decay", ")", ")", "\n", "", "if", "not", "0.0", "<=", "polyak", "<=", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid polyak decay term: {}\"", ".", "format", "(", "polyak", ")", ")", "\n", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "polyak", "=", "polyak", ")", "\n", "super", "(", "Adamax", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.optim.adamax.Adamax.step": [[24, 74], ["closure", "exp_avg.mul_().add_", "torch.cat", "torch.max", "p.data.addcdiv_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "grad.add.add.add", "exp_avg.mul_", "exp_inf.mul_().unsqueeze", "grad.add.add.abs().add_().unsqueeze_", "exp_inf.new().long", "exp_inf.mul_", "grad.add.add.abs().add_", "exp_inf.new", "grad.add.add.abs"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adamax does not support sparse gradients'", ")", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "state", "[", "'exp_inf'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of param", "\n", "state", "[", "'exp_avg_param'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "exp_avg", ",", "exp_inf", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_inf'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "eps", "=", "group", "[", "'eps'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "grad", "=", "grad", ".", "add", "(", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "# Update biased first moment estimate.", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "# Update the exponentially weighted infinity norm.", "\n", "norm_buf", "=", "torch", ".", "cat", "(", "[", "\n", "exp_inf", ".", "mul_", "(", "beta2", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "grad", ".", "abs", "(", ")", ".", "add_", "(", "eps", ")", ".", "unsqueeze_", "(", "0", ")", "\n", "]", ",", "0", ")", "\n", "torch", ".", "max", "(", "norm_buf", ",", "0", ",", "keepdim", "=", "False", ",", "out", "=", "(", "exp_inf", ",", "exp_inf", ".", "new", "(", ")", ".", "long", "(", ")", ")", ")", "\n", "\n", "bias_correction", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "clr", "=", "group", "[", "'lr'", "]", "/", "bias_correction", "\n", "\n", "p", ".", "data", ".", "addcdiv_", "(", "-", "clr", ",", "exp_avg", ",", "exp_inf", ")", "\n", "\n", "polyak", "=", "self", ".", "defaults", "[", "'polyak'", "]", "\n", "state", "[", "'exp_avg_param'", "]", "=", "polyak", "*", "state", "[", "'exp_avg_param'", "]", "+", "(", "1", "-", "polyak", ")", "*", "p", ".", "data", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.optim.adamax.Adamax.swap": [[75, 85], ["None"], "methods", ["None"], ["", "def", "swap", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Swap the params for the params using polyak averaging\n        \"\"\"", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "new", "=", "p", ".", "data", "\n", "p", ".", "data", "=", "state", "[", "'exp_avg_param'", "]", "\n", "state", "[", "'exp_avg_param'", "]", "=", "new", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.changyi7231_MEF.optim.adam.Adam.__init__": [[7, 22], ["dict", "super().__init__", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Conv2d.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "amsgrad", "=", "False", ",", "polyak", "=", "0", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "polyak", "<=", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid polyak decay term: {}\"", ".", "format", "(", "polyak", ")", ")", "\n", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "amsgrad", "=", "amsgrad", ",", "polyak", "=", "polyak", ")", "\n", "super", "(", "Adam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.optim.adam.Adam.__setstate__": [[23, 27], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.changyi7231_MEF.optim.adam.Adam.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "Adam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'amsgrad'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.optim.adam.Adam.step": [[28, 94], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "p.data.addcdiv_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "grad.add_", "torch.max", "max_exp_avg_sq.sqrt().add_", "exp_avg_sq.sqrt().add_", "torch.zeros_like", "exp_avg.mul_", "exp_avg_sq.mul_", "math.sqrt", "max_exp_avg_sq.sqrt", "exp_avg_sq.sqrt"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "", "amsgrad", "=", "group", "[", "'amsgrad'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of param", "\n", "state", "[", "'exp_avg_param'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains max of all exp. moving avg. of sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsgrad", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "grad", ".", "add_", "(", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "max_exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "p", ".", "data", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "polyak", "=", "self", ".", "defaults", "[", "'polyak'", "]", "\n", "state", "[", "'exp_avg_param'", "]", "=", "polyak", "*", "state", "[", "'exp_avg_param'", "]", "+", "(", "1", "-", "polyak", ")", "*", "p", ".", "data", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.optim.adam.Adam.swap": [[95, 105], ["None"], "methods", ["None"], ["", "def", "swap", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Swap the params for the params using polyak averaging\n        \"\"\"", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "new", "=", "p", ".", "data", "\n", "p", ".", "data", "=", "state", "[", "'exp_avg_param'", "]", "\n", "state", "[", "'exp_avg_param'", "]", "=", "new", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.nets.Model.__init__": [[8, 22], ["torch.Module.__init__", "range", "torch.ModuleList", "blocks.append", "nets.Flow", "nets.Sequential", "range"], "methods", ["home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Conv2d.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_levels", ",", "num_flows", ",", "conv_type", ",", "flow_type", ",", "num_blocks", ",", "hidden_channels", ",", "image_size", "=", "32", ",", "\n", "in_channels", "=", "3", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_levels", "=", "num_levels", "\n", "blocks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "in_channels", "=", "in_channels", "*", "4", "\n", "image_size", "=", "image_size", "//", "2", "\n", "flows", "=", "[", "Flow", "(", "conv_type", ",", "flow_type", ",", "num_blocks", ",", "in_channels", ",", "hidden_channels", ",", "image_size", ")", "for", "_", "in", "\n", "range", "(", "num_flows", "[", "i", "]", ")", "]", "\n", "if", "i", "<", "num_levels", "-", "1", ":", "\n", "                ", "in_channels", "=", "in_channels", "//", "2", "\n", "", "blocks", ".", "append", "(", "Sequential", "(", "*", "flows", ")", ")", "\n", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.nets.Model.forward": [[23, 58], ["x.new_zeros", "range", "models.utils.unsqueeze2d", "range", "x.new_zeros", "models.utils.squeeze2d", "range", "reversed", "x.size", "models.utils.squeeze2d", "outputs.pop", "models.utils.unsqueeze2d", "x.size", "models.utils.split2d", "outputs.append", "models.utils.squeeze2d", "range", "models.utils.unsqueeze2d", "models.utils.split2d", "outputs.append", "models.utils.unsplit2d", "outputs.pop", "models.utils.unsplit2d", "models.utils.unsplit2d.size", "models.utils.unsplit2d.size"], "methods", ["home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.unsqueeze2d", "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.squeeze2d", "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.squeeze2d", "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.unsqueeze2d", "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.split2d", "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.squeeze2d", "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.unsqueeze2d", "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.split2d", "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.unsplit2d", "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.unsplit2d"], ["", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ",", "init", "=", "False", ")", ":", "\n", "        ", "if", "not", "reverse", ":", "\n", "            ", "out", "=", "x", "\n", "outputs", "=", "[", "]", "\n", "log_det_sum", "=", "x", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "                ", "out", "=", "squeeze2d", "(", "out", ")", "\n", "out", ",", "log_det", "=", "self", ".", "blocks", "[", "i", "]", "(", "out", ",", "init", "=", "init", ")", "\n", "log_det_sum", "=", "log_det_sum", "+", "log_det", "\n", "if", "i", "<", "self", ".", "num_levels", "-", "1", ":", "\n", "                    ", "out1", ",", "out2", "=", "split2d", "(", "out", ",", "out", ".", "size", "(", "1", ")", "//", "2", ")", "\n", "outputs", ".", "append", "(", "out2", ")", "\n", "out", "=", "out1", "\n", "", "", "out", "=", "unsqueeze2d", "(", "out", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_levels", "-", "1", ")", ":", "\n", "                ", "out2", "=", "outputs", ".", "pop", "(", ")", "\n", "out", "=", "unsqueeze2d", "(", "unsplit2d", "(", "[", "out", ",", "out2", "]", ")", ",", "factor", "=", "2", ")", "\n", "", "", "else", ":", "\n", "            ", "out", "=", "x", "\n", "outputs", "=", "[", "]", "\n", "log_det_sum", "=", "x", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "out", "=", "squeeze2d", "(", "out", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_levels", "-", "1", ")", ":", "\n", "                ", "out1", ",", "out2", "=", "split2d", "(", "out", ",", "out", ".", "size", "(", "1", ")", "//", "2", ")", "\n", "outputs", ".", "append", "(", "out2", ")", "\n", "out", "=", "squeeze2d", "(", "out1", ")", "\n", "", "for", "i", "in", "reversed", "(", "range", "(", "self", ".", "num_levels", ")", ")", ":", "\n", "                ", "if", "i", "<", "self", ".", "num_levels", "-", "1", ":", "\n", "                    ", "out2", "=", "outputs", ".", "pop", "(", ")", "\n", "out", "=", "unsplit2d", "(", "[", "out", ",", "out2", "]", ")", "\n", "", "out", ",", "log_det", "=", "self", ".", "blocks", "[", "i", "]", "(", "out", ",", "reverse", "=", "reverse", ")", "\n", "log_det_sum", "=", "log_det_sum", "+", "log_det", "\n", "out", "=", "unsqueeze2d", "(", "out", ",", "factor", "=", "2", ")", "\n", "\n", "", "", "return", "out", ",", "log_det_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.nets.Sequential.forward": [[62, 75], ["x.new_zeros", "nets.Sequential._modules.values", "x.new_zeros", "reversed", "x.size", "module", "x.size", "nets.Sequential._modules.values", "module"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ",", "init", "=", "False", ")", ":", "\n", "        ", "if", "not", "reverse", ":", "\n", "            ", "log_det_sum", "=", "x", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "for", "module", "in", "self", ".", "_modules", ".", "values", "(", ")", ":", "\n", "                ", "x", ",", "log_det", "=", "module", "(", "x", ",", "init", "=", "init", ")", "\n", "log_det_sum", "=", "log_det_sum", "+", "log_det", "\n", "", "", "else", ":", "\n", "            ", "log_det_sum", "=", "x", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "for", "module", "in", "reversed", "(", "self", ".", "_modules", ".", "values", "(", ")", ")", ":", "\n", "                ", "x", ",", "log_det", "=", "module", "(", "x", ",", "reverse", "=", "reverse", ")", "\n", "log_det_sum", "=", "log_det_sum", "+", "log_det", "\n", "\n", "", "", "return", "x", ",", "log_det_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.nets.Flow.__init__": [[79, 84], ["torch.Sequential.__init__", "nets.Flow.add_module", "nets.Flow.add_module", "nets.Flow.add_module", "models.flows.ActNorm", "models.flows.Conv1x1", "models.flows.CouplingLayer"], "methods", ["home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Conv2d.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conv_type", ",", "flow_type", ",", "num_blocks", ",", "in_channels", ",", "hidden_channels", ",", "image_size", ")", ":", "\n", "        ", "super", "(", "Flow", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'actnorm'", ",", "ActNorm", "(", "in_channels", ",", "image_size", ")", ")", "\n", "self", ".", "add_module", "(", "'conv1x1'", ",", "Conv1x1", "(", "in_channels", ",", "conv_type", ")", ")", "\n", "self", ".", "add_module", "(", "'couplinglayer'", ",", "CouplingLayer", "(", "flow_type", ",", "num_blocks", ",", "in_channels", ",", "hidden_channels", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.main": [[20, 87], ["torch.device", "torch.device", "main.get_save_dir", "main.get_model", "torch.nn.DataParallel.to", "main.get_optimizer", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "main.get_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "main.get_init_data", "main.train", "torch.device", "torch.device", "main.get_save_dir", "main.get_model", "torch.nn.DataParallel.to", "main.get_optimizer", "main.get_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "os.path.join", "os.path.join", "print", "torch.load", "torch.load", "torch.nn.DataParallel.load_state_dict", "get_optimizer.load_state_dict", "get_optimizer.swap", "main.test", "get_optimizer.swap", "os.path.isfile", "RuntimeError", "torch.device", "torch.device", "main.get_save_dir", "main.get_model", "torch.nn.DataParallel.to", "torch.nn.DataParallel", "torch.nn.DataParallel", "main.get_optimizer", "os.path.join", "os.path.join", "print", "torch.load", "torch.load", "torch.nn.DataParallel.load_state_dict", "get_optimizer.load_state_dict", "get_optimizer.swap", "main.sample", "get_optimizer.swap", "ValueError", "os.path.isfile", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.changyi7231_MEF.models.main.get_save_dir", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.get_model", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.get_optimizer", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.get_dataset", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.get_init_data", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.train", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.get_save_dir", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.get_model", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.get_optimizer", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.get_dataset", "home.repos.pwc.inspect_result.changyi7231_MEF.optim.adam.Adam.swap", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.test", "home.repos.pwc.inspect_result.changyi7231_MEF.optim.adam.Adam.swap", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.get_save_dir", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.get_model", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.get_optimizer", "home.repos.pwc.inspect_result.changyi7231_MEF.optim.adam.Adam.swap", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.sample", "home.repos.pwc.inspect_result.changyi7231_MEF.optim.adam.Adam.swap"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "mode", "==", "'train'", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "save_dir", "=", "get_save_dir", "(", "args", ")", "\n", "# file_name = os.path.join(save_dir, args.dataset + '.json')", "\n", "# with open(file_name, 'w') as f_obj:", "\n", "#    json.dump(args.__dict__, f_obj)", "\n", "model", "=", "get_model", "(", "args", ")", "\n", "# model = torch.nn.DataParallel(model)", "\n", "model", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "get_optimizer", "(", "args", ",", "model", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "args", ".", "step_size", ",", "args", ".", "lr_decay", ")", "\n", "train_data", ",", "test_data", "=", "get_dataset", "(", "args", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "shuffle", "=", "True", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "shuffle", "=", "False", ")", "\n", "init_data", "=", "get_init_data", "(", "args", ",", "train_data", ")", "\n", "# param_num = sum(p.numel() for p in model.parameters())", "\n", "# print('parameter number  ', param_num)", "\n", "train", "(", "args", ",", "device", ",", "save_dir", ",", "model", ",", "optimizer", ",", "scheduler", ",", "train_loader", ",", "test_loader", ",", "init_data", ")", "\n", "\n", "", "elif", "args", ".", "mode", "==", "'test'", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "save_dir", "=", "get_save_dir", "(", "args", ")", "\n", "model", "=", "get_model", "(", "args", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "# model = torch.nn.DataParallel(model)", "\n", "optimizer", "=", "get_optimizer", "(", "args", ",", "model", ")", "\n", "_", ",", "test_data", "=", "get_dataset", "(", "args", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "shuffle", "=", "False", ")", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'models'", ")", "\n", "file_name", "=", "'epoch_{}.pth'", ".", "format", "(", "args", ".", "test_epoch", ")", "\n", "state_file", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "state_file", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'file {} is not found'", ".", "format", "(", "state_file", ")", ")", "\n", "", "print", "(", "'load checkpoint {}'", ".", "format", "(", "state_file", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "state_file", ",", "device", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "optimizer", ".", "swap", "(", ")", "\n", "test", "(", "args", ",", "device", ",", "model", ",", "test_loader", ",", "args", ".", "test_epoch", ")", "\n", "optimizer", ".", "swap", "(", ")", "\n", "\n", "", "elif", "args", ".", "mode", "==", "'sample'", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "save_dir", "=", "get_save_dir", "(", "args", ")", "\n", "model", "=", "get_model", "(", "args", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "optimizer", "=", "get_optimizer", "(", "args", ",", "model", ")", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'models'", ")", "\n", "file_name", "=", "'epoch_{}.pth'", ".", "format", "(", "args", ".", "sample_epoch", ")", "\n", "state_file", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "state_file", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'file {} is not found'", ".", "format", "(", "state_file", ")", ")", "\n", "", "print", "(", "'load checkpoint {}'", ".", "format", "(", "state_file", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "state_file", ",", "device", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "optimizer", ".", "swap", "(", ")", "\n", "sample", "(", "args", ",", "device", ",", "save_dir", ",", "model", ",", "args", ".", "sample_epoch", ")", "\n", "optimizer", ".", "swap", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'wrong mode'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.train": [[89, 155], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "print", "range", "os.path.join", "print", "torch.load", "torch.load", "model.module.load_state_dict", "optimizer.load_state_dict", "scheduler.load_state_dict", "model.eval", "model.train", "time.time", "train_log[].append", "time.time", "train_log[].append", "print", "scheduler.step", "os.path.isfile", "RuntimeError", "torch.no_grad", "torch.no_grad", "models.utils.preprocess.to", "torch.rand_like", "torch.rand_like", "models.utils.preprocess", "model", "models.utils.preprocess.to", "torch.rand_like", "torch.rand_like", "models.utils.preprocess", "model", "main.compute_loss", "train_log[].append", "models.utils.preprocess.size", "optimizer.zero_grad", "compute_loss.backward", "optimizer.step", "optimizer.swap", "main.test", "optimizer.swap", "main.test", "train_log[].append", "main.save", "len", "compute_loss.item", "models.utils.preprocess.size", "torch.optim.lr_scheduler.LambdaLR.step", "numpy.log", "main.save", "str", "compute_loss.item", "numpy.log"], "function", ["home.repos.pwc.inspect_result.changyi7231_MEF.models.main.train", "home.repos.pwc.inspect_result.changyi7231_MEF.optim.adam.Adam.step", "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.preprocess", "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.preprocess", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.compute_loss", "home.repos.pwc.inspect_result.changyi7231_MEF.optim.adam.Adam.step", "home.repos.pwc.inspect_result.changyi7231_MEF.optim.adam.Adam.swap", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.test", "home.repos.pwc.inspect_result.changyi7231_MEF.optim.adam.Adam.swap", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.test", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.save", "home.repos.pwc.inspect_result.changyi7231_MEF.optim.adam.Adam.step", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.save"], ["", "", "def", "train", "(", "args", ",", "device", ",", "save_dir", ",", "model", ",", "optimizer", ",", "scheduler", ",", "train_loader", ",", "test_loader", ",", "init_data", ")", ":", "\n", "    ", "train_log", "=", "{", "'train_loss'", ":", "[", "]", ",", "'epoch_loss'", ":", "[", "]", ",", "'epoch_time'", ":", "[", "]", ",", "'test_loss'", ":", "[", "]", "}", "\n", "start_epoch", "=", "1", "\n", "best_loss", "=", "1e8", "\n", "lr_lambda", "=", "lambda", "step", ":", "(", "step", "+", "1", ")", "/", "(", "len", "(", "train_loader", ")", "*", "args", ".", "warmup_epoch", ")", "\n", "warmup_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ")", "\n", "\n", "if", "args", ".", "resume_epoch", "is", "not", "None", ":", "\n", "        ", "state_file", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'models'", ",", "'epoch_'", "+", "str", "(", "args", ".", "resume_epoch", ")", "+", "'.pth'", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "state_file", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'file {} is not found'", ".", "format", "(", "state_file", ")", ")", "\n", "", "print", "(", "'load checkpoint {}'", ".", "format", "(", "state_file", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "state_file", ",", "device", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "train_log", "=", "checkpoint", "[", "'train_log'", "]", "\n", "model", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "init_data", "=", "init_data", ".", "to", "(", "device", ")", "\n", "z", "=", "torch", ".", "rand_like", "(", "init_data", ")", "\n", "init_data", "=", "preprocess", "(", "init_data", ",", "args", ".", "bits", ",", "z", ")", "\n", "_", ",", "_", "=", "model", "(", "init_data", ",", "init", "=", "True", ")", "\n", "\n", "", "", "print", "(", "'start training'", ")", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "total_loss", "=", "0.", "\n", "number", "=", "0", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "data", ",", "_", "in", "train_loader", ":", "\n", "            ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "z", "=", "torch", ".", "rand_like", "(", "data", ")", "\n", "data", "=", "preprocess", "(", "data", ",", "args", ".", "bits", ",", "z", ")", "\n", "output", ",", "log_det", "=", "model", "(", "data", ")", "\n", "loss", "=", "compute_loss", "(", "args", ",", "output", ",", "log_det", ")", "\n", "train_log", "[", "'train_loss'", "]", ".", "append", "(", "loss", ".", "item", "(", ")", "/", "(", "np", ".", "log", "(", "2", ")", "*", "args", ".", "dimension", ")", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "data", ".", "size", "(", "0", ")", "\n", "number", "+=", "data", ".", "size", "(", "0", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "epoch", "<=", "args", ".", "warmup_epoch", ":", "\n", "                ", "warmup_scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "bits_per_dim", "=", "total_loss", "/", "number", "/", "(", "np", ".", "log", "(", "2", ")", "*", "args", ".", "dimension", ")", "\n", "train_log", "[", "'epoch_loss'", "]", ".", "append", "(", "(", "epoch", ",", "bits_per_dim", ")", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "train_log", "[", "'epoch_time'", "]", ".", "append", "(", "(", "epoch", ",", "t1", "-", "t0", ")", ")", "\n", "print", "(", "'[train:epoch {}]. loss: {:.8f},time:{:.1f}s '", ".", "format", "(", "epoch", ",", "bits_per_dim", ",", "t1", "-", "t0", ")", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "if", "not", "(", "epoch", "%", "args", ".", "test_interval", ")", ":", "\n", "            ", "optimizer", ".", "swap", "(", ")", "\n", "test_loss", "=", "test", "(", "args", ",", "device", ",", "model", ",", "test_loader", ",", "epoch", ")", "\n", "optimizer", ".", "swap", "(", ")", "\n", "test_loss1", "=", "test", "(", "args", ",", "device", ",", "model", ",", "test_loader", ",", "epoch", ")", "\n", "train_log", "[", "'test_loss'", "]", ".", "append", "(", "(", "epoch", ",", "test_loss", ",", "test_loss1", ")", ")", "\n", "if", "test_loss", "<", "best_loss", ":", "\n", "                ", "best_loss", "=", "test_loss", "\n", "save", "(", "save_dir", ",", "epoch", ",", "train_log", ",", "model", ",", "optimizer", ",", "scheduler", ",", "is_best", "=", "True", ")", "\n", "", "", "if", "not", "(", "epoch", "%", "args", ".", "save_interval", ")", ":", "\n", "            ", "save", "(", "save_dir", ",", "epoch", ",", "train_log", ",", "model", ",", "optimizer", ",", "scheduler", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.test": [[157, 173], ["model.eval", "print", "torch.no_grad", "torch.no_grad", "models.utils.preprocess.to", "torch.rand_like", "torch.rand_like", "models.utils.preprocess", "model", "main.compute_loss", "models.utils.preprocess.size", "numpy.log", "compute_loss.item", "models.utils.preprocess.size"], "function", ["home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.preprocess", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.compute_loss"], ["", "def", "test", "(", "args", ",", "device", ",", "model", ",", "test_loader", ",", "epoch", ")", ":", "\n", "    ", "total_loss", "=", "0.", "\n", "number", "=", "0", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "_", "in", "test_loader", ":", "\n", "            ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "z", "=", "torch", ".", "rand_like", "(", "data", ")", "\n", "data", "=", "preprocess", "(", "data", ",", "args", ".", "bits", ",", "z", ")", "\n", "output", ",", "log_det", "=", "model", "(", "data", ")", "\n", "loss", "=", "compute_loss", "(", "args", ",", "output", ",", "log_det", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "data", ".", "size", "(", "0", ")", "\n", "number", "+=", "data", ".", "size", "(", "0", ")", "\n", "", "", "bits_per_dim", "=", "total_loss", "/", "number", "/", "(", "np", ".", "log", "(", "2", ")", "*", "args", ".", "dimension", ")", "\n", "print", "(", "'[test:epoch {}]. loss: {:.8f} '", ".", "format", "(", "epoch", ",", "bits_per_dim", ")", ")", "\n", "return", "bits_per_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.sample": [[175, 187], ["torch.randn().to", "torch.randn().to", "model.eval", "os.path.join", "torchvision.utils.save_image", "torch.no_grad", "torch.no_grad", "model", "models.utils.postprocess", "os.path.isdir", "os.makedirs", "os.path.join", "torch.randn", "torch.randn", "int"], "function", ["home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.postprocess"], ["", "def", "sample", "(", "args", ",", "device", ",", "save_dir", ",", "model", ",", "epoch", ")", ":", "\n", "    ", "z", "=", "torch", ".", "randn", "(", "args", ".", "sample_size", ",", "3", ",", "args", ".", "image_size", ",", "args", ".", "image_size", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", ",", "_", "=", "model", "(", "z", ",", "reverse", "=", "True", ")", "\n", "output", "=", "postprocess", "(", "output", ",", "args", ".", "bits", ")", "\n", "", "sample_dir", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'samples'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "sample_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "sample_dir", ")", "\n", "", "torchvision", ".", "utils", ".", "save_image", "(", "output", ",", "os", ".", "path", ".", "join", "(", "sample_dir", ",", "'epoch_{}.png'", ".", "format", "(", "epoch", ")", ")", ",", "\n", "nrow", "=", "int", "(", "args", ".", "sample_size", "**", "0.5", ")", ",", "pad_value", "=", "1", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.get_save_dir": [[189, 198], ["os.path.join", "os.path.isdir", "os.makedirs", "[].replace().replace", "os.path.dirname", "os.path.realpath", "[].replace", "str", "datetime.datetime.now"], "function", ["None"], ["", "def", "get_save_dir", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "save_dir", ":", "\n", "        ", "save_dir", "=", "args", ".", "save_dir", "\n", "", "else", ":", "\n", "        ", "name", "=", "args", ".", "dataset", "+", "'_'", "+", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "[", ":", "-", "7", "]", ".", "replace", "(", "' '", ",", "'-'", ")", ".", "replace", "(", "':'", ",", "'-'", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'save'", ",", "name", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "return", "save_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.get_model": [[200, 204], ["models.nets.Model"], "function", ["None"], ["", "def", "get_model", "(", "args", ")", ":", "\n", "    ", "model", "=", "Model", "(", "args", ".", "levels", ",", "args", ".", "num_flows", ",", "args", ".", "conv_type", ",", "args", ".", "flow_type", ",", "args", ".", "num_blocks", ",", "args", ".", "hidden_channels", ",", "\n", "args", ".", "image_size", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.get_dataset": [[206, 244], ["torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "os.path.join", "os.path.join", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "ValueError", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "os.path.join", "os.path.join", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "get_dataset", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "train_data", "=", "datasets", ".", "CIFAR10", "(", "args", ".", "dataset_dir", ",", "train", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", ")", "\n", "test_data", "=", "datasets", ".", "CIFAR10", "(", "args", ".", "dataset_dir", ",", "train", "=", "False", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", ")", "\n", "assert", "args", ".", "image_size", "==", "32", "\n", "assert", "args", ".", "dimension", "==", "3072", "\n", "", "elif", "args", ".", "dataset", "==", "'imagenet32'", ":", "\n", "        ", "train_data", "=", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dataset_dir", ",", "'train_32x32'", ")", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", ")", "\n", "test_data", "=", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dataset_dir", ",", "'valid_32x32'", ")", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", ")", "\n", "assert", "args", ".", "image_size", "==", "32", "\n", "assert", "args", ".", "dimension", "==", "3072", "\n", "", "elif", "args", ".", "dataset", "==", "'imagenet64'", ":", "\n", "        ", "train_data", "=", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dataset_dir", ",", "'train_64x64'", ")", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", ")", "\n", "test_data", "=", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dataset_dir", ",", "'valid_64x64'", ")", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", ")", "\n", "assert", "args", ".", "image_size", "==", "64", "\n", "assert", "args", ".", "dimension", "==", "12288", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'wrong dataset'", ")", "\n", "", "return", "train_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.get_init_data": [[246, 255], ["numpy.arange", "numpy.random.shuffle", "numpy.random.choice", "torch.stack", "torch.stack", "len", "images.append"], "function", ["None"], ["", "def", "get_init_data", "(", "args", ",", "train_data", ")", ":", "\n", "    ", "train_index", "=", "np", ".", "arange", "(", "len", "(", "train_data", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_index", ")", "\n", "init_index", "=", "np", ".", "random", ".", "choice", "(", "train_index", ",", "args", ".", "init_batch_size", ",", "replace", "=", "False", ")", "\n", "images", "=", "[", "]", "\n", "for", "index", "in", "init_index", ":", "\n", "        ", "image", ",", "_", "=", "train_data", "[", "index", "]", "\n", "images", ".", "append", "(", "image", ")", "\n", "", "return", "torch", ".", "stack", "(", "images", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.get_optimizer": [[257, 267], ["optim.adam.Adam", "optim.adamax.Adamax", "ValueError", "model.parameters", "model.parameters"], "function", ["None"], ["", "def", "get_optimizer", "(", "args", ",", "model", ")", ":", "\n", "    ", "if", "args", ".", "optimizer", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "Adam", "(", "[", "{", "'params'", ":", "model", ".", "parameters", "(", ")", "}", "]", ",", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "polyak", "=", "args", ".", "polyak", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "'adamax'", ":", "\n", "        ", "optimizer", "=", "Adamax", "(", "[", "{", "'params'", ":", "model", ".", "parameters", "(", ")", "}", "]", ",", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "polyak", "=", "args", ".", "polyak", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'wrong optimizer'", ")", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.compute_loss": [[269, 274], ["torch.distributions.Normal().log_prob().view().sum", "torch.distributions.Normal().log_prob().view().sum", "torch.distributions.Normal().log_prob().view", "torch.distributions.Normal().log_prob().view", "output.size", "torch.distributions.Normal().log_prob", "torch.distributions.Normal().log_prob", "numpy.log", "torch.distributions.Normal", "torch.distributions.Normal", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "def", "compute_loss", "(", "args", ",", "output", ",", "log_det", ")", ":", "\n", "    ", "log_p", "=", "torch", ".", "distributions", ".", "Normal", "(", "torch", ".", "zeros_like", "(", "output", ")", ",", "torch", ".", "ones_like", "(", "output", ")", ")", ".", "log_prob", "(", "output", ")", ".", "view", "(", "\n", "output", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "\n", "loss", "=", "-", "(", "log_p", "+", "log_det", "-", "np", ".", "log", "(", "(", "2.0", "**", "args", ".", "bits", ")", "/", "2.0", ")", "*", "args", ".", "dimension", ")", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.save": [[276, 290], ["os.path.join", "os.path.join", "torch.save", "torch.save", "os.path.isdir", "os.makedirs", "model.state_dict", "optimizer.state_dict", "scheduler.state_dict"], "function", ["home.repos.pwc.inspect_result.changyi7231_MEF.models.main.save", "home.repos.pwc.inspect_result.changyi7231_MEF.models.main.save"], ["", "def", "save", "(", "save_dir", ",", "epoch", ",", "train_log", ",", "model", ",", "optimizer", ",", "scheduler", ",", "is_best", "=", "False", ")", ":", "\n", "    ", "model_dir", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'models'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "model_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "model_dir", ")", "\n", "", "file_name", "=", "'epoch_best.pth'", "if", "is_best", "else", "'epoch_{}.pth'", ".", "format", "(", "epoch", ")", "\n", "state_path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "file_name", ")", "\n", "state", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'train_log'", ":", "train_log", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "state", ",", "state_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.ActNorm.__init__": [[22, 28], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Conv2d.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "image_size", ")", ":", "\n", "        ", "super", "(", "ActNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "in_channels", ",", "image_size", ",", "image_size", ")", ")", "\n", "self", ".", "shift", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "in_channels", ",", "image_size", ",", "image_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.ActNorm.forward": [[29, 46], ["x.mean", "x.std", "flows.ActNorm.scale.data.copy_", "flows.ActNorm.shift.data.copy_", "torch.softplus", "torch.softplus", "torch.softplus", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.softplus", "torch.softplus", "torch.softplus", "torch.log().sum().mul", "torch.log().sum().mul", "torch.log().sum().mul", "torch.log().sum().mul", "torch.log().sum().mul", "torch.log().sum().mul", "torch.log().sum().mul", "torch.log().sum().mul", "torch.log().sum().mul", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ",", "init", "=", "False", ",", "init_scale", "=", "1.0", ")", ":", "\n", "        ", "if", "init", ":", "\n", "            ", "mean", "=", "x", ".", "mean", "(", "dim", "=", "0", ")", "\n", "std", "=", "x", ".", "std", "(", "dim", "=", "0", ")", "\n", "inv_std", "=", "init_scale", "/", "(", "std", "+", "eps", ")", "\n", "self", ".", "scale", ".", "data", ".", "copy_", "(", "torch", ".", "log", "(", "-", "1", "+", "torch", ".", "exp", "(", "inv_std", ")", ")", ")", "\n", "self", ".", "shift", ".", "data", ".", "copy_", "(", "-", "mean", "*", "inv_std", ")", "\n", "\n", "", "if", "not", "reverse", ":", "\n", "            ", "scale", "=", "F", ".", "softplus", "(", "self", ".", "scale", ")", "\n", "x", "=", "scale", "*", "x", "+", "self", ".", "shift", "\n", "log_det", "=", "torch", ".", "log", "(", "scale", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "scale", "=", "F", ".", "softplus", "(", "self", ".", "scale", ")", "\n", "x", "=", "(", "x", "-", "self", ".", "shift", ")", "/", "scale", "\n", "log_det", "=", "torch", ".", "log", "(", "scale", ")", ".", "sum", "(", ")", ".", "mul", "(", "-", "1", ")", "\n", "", "return", "x", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.ActNorm.extra_repr": [[47, 49], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'in_channels={}, image_size={}'", ".", "format", "(", "self", ".", "in_channels", ",", "self", ".", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Norm.__init__": [[58, 63], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Conv2d.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "Norm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "in_channels", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "shift", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "in_channels", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Norm.forward": [[64, 75], ["x.transpose().contiguous().view", "x.transpose().contiguous().view.mean().view", "x.transpose().contiguous().view.std().view", "flows.Norm.scale.data.copy_", "flows.Norm.shift.data.copy_", "x.transpose().contiguous", "x.transpose().contiguous().view.mean", "x.transpose().contiguous().view.std", "x.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "init", "=", "False", ",", "init_scale", "=", "1.0", ")", ":", "\n", "        ", "if", "init", ":", "\n", "            ", "out", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "in_channels", ",", "-", "1", ")", "\n", "mean", "=", "out", ".", "mean", "(", "dim", "=", "1", ")", ".", "view", "(", "self", ".", "in_channels", ",", "1", ",", "1", ")", "\n", "std", "=", "out", ".", "std", "(", "dim", "=", "1", ")", ".", "view", "(", "self", ".", "in_channels", ",", "1", ",", "1", ")", "\n", "inv_std", "=", "init_scale", "/", "(", "std", "+", "eps", ")", "\n", "self", ".", "scale", ".", "data", ".", "copy_", "(", "inv_std", ")", "\n", "self", ".", "shift", ".", "data", ".", "copy_", "(", "-", "mean", "*", "inv_std", ")", "\n", "\n", "", "x", "=", "self", ".", "scale", "*", "x", "+", "self", ".", "shift", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Norm.extra_repr": [[76, 78], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'in_channels={}'", ".", "format", "(", "self", ".", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Conv1x1.__init__": [[88, 105], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.tril().t", "torch.tril().t", "torch.tril().t", "torch.tril().t", "torch.tril().t", "torch.tril().t", "torch.tril().t", "torch.tril().t", "torch.tril().t", "flows.Conv1x1.register_buffer", "flows.Conv1x1.register_buffer", "flows.Conv1x1.register_buffer", "flows.Conv1x1.register_buffer", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Conv2d.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "conv_type", ")", ":", "\n", "        ", "super", "(", "Conv1x1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "conv_type", "=", "conv_type", "\n", "if", "not", "conv_type", "==", "'decomposition'", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "rand", "(", "in_channels", ",", "in_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "l", "=", "nn", ".", "Parameter", "(", "torch", ".", "rand", "(", "in_channels", ",", "in_channels", ")", ")", "\n", "self", ".", "u", "=", "nn", ".", "Parameter", "(", "torch", ".", "rand", "(", "in_channels", ",", "in_channels", ")", ")", "\n", "p", "=", "torch", ".", "rand", "(", "in_channels", ",", "in_channels", ")", "\n", "l_mask", "=", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "in_channels", ",", "in_channels", ")", ",", "diagonal", "=", "-", "1", ")", "\n", "identity", "=", "torch", ".", "eye", "(", "in_channels", ")", "\n", "u_mask", "=", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "in_channels", ",", "in_channels", ")", ",", "diagonal", "=", "0", ")", ".", "t", "(", ")", "\n", "self", ".", "register_buffer", "(", "'p'", ",", "p", ")", "\n", "self", ".", "register_buffer", "(", "'l_mask'", ",", "l_mask", ")", "\n", "self", ".", "register_buffer", "(", "'identity'", ",", "identity", ")", "\n", "self", ".", "register_buffer", "(", "'u_mask'", ",", "u_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Conv1x1.forward": [[106, 159], ["scipy.stats.special_ortho_group.rvs", "scipy.linalg.logm", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "flows.Conv1x1.weight.data.copy_", "models.utils.expm", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "models.utils.expm", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.diagonal().sum().mul().mul", "torch.diagonal().sum().mul().mul", "torch.diagonal().sum().mul().mul", "torch.diagonal().sum().mul().mul", "torch.diagonal().sum().mul().mul", "torch.diagonal().sum().mul().mul", "torch.diagonal().sum().mul().mul", "torch.diagonal().sum().mul().mul", "torch.diagonal().sum().mul().mul", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.matmul.view", "torch.matmul.view", "torch.matmul.view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.diagonal().sum().mul().mul.mul", "torch.diagonal().sum().mul().mul.mul", "torch.diagonal().sum().mul().mul.mul", "torch.matmul.view", "torch.matmul.view", "torch.matmul.view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.diagonal().sum().mul().mul.mul().mul", "torch.diagonal().sum().mul().mul.mul().mul", "torch.diagonal().sum().mul().mul.mul().mul", "scipy.stats.ortho_group.rvs", "scipy.linalg.lu", "flows.Conv1x1.p.copy_", "flows.Conv1x1.l.data.copy_", "flows.Conv1x1.u.data.copy_", "ValueError", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.conv2d.size", "torch.conv2d.size", "flows.Conv1x1.weight.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.diagonal().abs().log().sum().mul", "torch.diagonal().abs().log().sum().mul", "torch.diagonal().abs().log().sum().mul", "torch.diagonal().abs().log().sum().mul", "torch.diagonal().abs().log().sum().mul", "torch.diagonal().abs().log().sum().mul", "torch.diagonal().abs().log().sum().mul", "torch.diagonal().abs().log().sum().mul", "torch.diagonal().abs().log().sum().mul", "ValueError", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.inverse().view", "torch.inverse().view", "torch.inverse().view", "torch.inverse().view", "torch.inverse().view", "torch.inverse().view", "torch.inverse().view", "torch.inverse().view", "torch.inverse().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.diagonal().sum().mul().mul", "torch.diagonal().sum().mul().mul", "torch.diagonal().sum().mul().mul", "torch.diagonal().sum().mul().mul", "torch.diagonal().sum().mul().mul", "torch.diagonal().sum().mul().mul", "torch.diagonal().sum().mul().mul", "torch.diagonal().sum().mul().mul", "torch.diagonal().sum().mul().mul", "ValueError", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.conv2d.size", "torch.conv2d.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.view", "torch.matmul.view", "torch.matmul.view", "torch.diagonal().sum().mul().mul.mul", "torch.diagonal().sum().mul().mul.mul", "torch.diagonal().sum().mul().mul.mul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.inverse().view", "torch.inverse().view", "torch.inverse().view", "torch.inverse().view", "torch.inverse().view", "torch.inverse().view", "torch.inverse().view", "torch.inverse().view", "torch.inverse().view", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal().abs().log().sum", "torch.diagonal().abs().log().sum", "torch.diagonal().abs().log().sum", "torch.diagonal().abs().log().sum", "torch.diagonal().abs().log().sum", "torch.diagonal().abs().log().sum", "torch.diagonal().abs().log().sum", "torch.diagonal().abs().log().sum", "torch.diagonal().abs().log().sum", "torch.conv2d.size", "torch.conv2d.size", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.conv2d.size", "torch.conv2d.size", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.conv2d.size", "torch.conv2d.size", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.diagonal().abs().log", "torch.diagonal().abs().log", "torch.diagonal().abs().log", "torch.diagonal().abs().log", "torch.diagonal().abs().log", "torch.diagonal().abs().log", "torch.diagonal().abs().log", "torch.diagonal().abs().log", "torch.diagonal().abs().log", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.conv2d.size", "torch.conv2d.size", "torch.diagonal().abs", "torch.diagonal().abs", "torch.diagonal().abs", "torch.diagonal().abs", "torch.diagonal().abs", "torch.diagonal().abs", "torch.diagonal().abs", "torch.diagonal().abs", "torch.diagonal().abs", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal"], "methods", ["home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.expm", "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.expm"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ",", "init", "=", "False", ")", ":", "\n", "        ", "if", "init", ":", "\n", "            ", "if", "self", ".", "conv_type", "==", "'matrixexp'", ":", "\n", "                ", "rand", "=", "special_ortho_group", ".", "rvs", "(", "self", ".", "in_channels", ")", "\n", "rand", "=", "logm", "(", "rand", ")", "\n", "rand", "=", "torch", ".", "from_numpy", "(", "rand", ".", "real", ")", "\n", "self", ".", "weight", ".", "data", ".", "copy_", "(", "rand", ")", "\n", "", "elif", "self", ".", "conv_type", "==", "'standard'", ":", "\n", "                ", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "weight", ")", "\n", "", "elif", "self", ".", "conv_type", "==", "'decomposition'", ":", "\n", "                ", "w", "=", "ortho_group", ".", "rvs", "(", "self", ".", "in_channels", ")", "\n", "p", ",", "l", ",", "u", "=", "scipy", ".", "linalg", ".", "lu", "(", "w", ")", "\n", "self", ".", "p", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "p", ")", ")", "\n", "self", ".", "l", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "l", ")", ")", "\n", "self", ".", "u", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "u", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'wrong 1x1 conlution type'", ")", "\n", "\n", "", "", "if", "not", "reverse", ":", "\n", "            ", "if", "self", ".", "conv_type", "==", "'matrixexp'", ":", "\n", "                ", "weight", "=", "expm", "(", "self", ".", "weight", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "weight", ".", "view", "(", "self", ".", "in_channels", ",", "self", ".", "in_channels", ",", "1", ",", "1", ")", ")", "\n", "log_det", "=", "torch", ".", "diagonal", "(", "self", ".", "weight", ")", ".", "sum", "(", ")", ".", "mul", "(", "x", ".", "size", "(", "2", ")", "*", "x", ".", "size", "(", "3", ")", ")", "\n", "", "elif", "self", ".", "conv_type", "==", "'standard'", ":", "\n", "                ", "x", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", ".", "view", "(", "self", ".", "in_channels", ",", "self", ".", "in_channels", ",", "1", ",", "1", ")", ")", "\n", "_", ",", "log_det", "=", "torch", ".", "slogdet", "(", "self", ".", "weight", ")", "\n", "log_det", "=", "log_det", ".", "mul", "(", "x", ".", "size", "(", "2", ")", "*", "x", ".", "size", "(", "3", ")", ")", "\n", "", "elif", "self", ".", "conv_type", "==", "'decomposition'", ":", "\n", "                ", "l", "=", "self", ".", "l", "*", "self", ".", "l_mask", "+", "self", ".", "identity", "\n", "u", "=", "self", ".", "u", "*", "self", ".", "u_mask", "\n", "weight", "=", "torch", ".", "matmul", "(", "self", ".", "p", ",", "torch", ".", "matmul", "(", "l", ",", "u", ")", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "weight", ".", "view", "(", "self", ".", "in_channels", ",", "self", ".", "in_channels", ",", "1", ",", "1", ")", ")", "\n", "log_det", "=", "torch", ".", "diagonal", "(", "self", ".", "u", ")", ".", "abs", "(", ")", ".", "log", "(", ")", ".", "sum", "(", ")", ".", "mul", "(", "x", ".", "size", "(", "2", ")", "*", "x", ".", "size", "(", "3", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'wrong 1x1 conlution type'", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "conv_type", "==", "'matrixexp'", ":", "\n", "                ", "weight", "=", "expm", "(", "-", "self", ".", "weight", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "weight", ".", "view", "(", "self", ".", "in_channels", ",", "self", ".", "in_channels", ",", "1", ",", "1", ")", ")", "\n", "log_det", "=", "torch", ".", "diagonal", "(", "self", ".", "weight", ")", ".", "sum", "(", ")", ".", "mul", "(", "x", ".", "size", "(", "2", ")", "*", "x", ".", "size", "(", "3", ")", ")", ".", "mul", "(", "-", "1", ")", "\n", "", "elif", "self", ".", "conv_type", "==", "'standard'", ":", "\n", "                ", "x", "=", "F", ".", "conv2d", "(", "x", ",", "torch", ".", "inverse", "(", "self", ".", "weight", ")", ".", "view", "(", "self", ".", "in_channels", ",", "self", ".", "in_channels", ",", "1", ",", "1", ")", ")", "\n", "_", ",", "log_det", "=", "torch", ".", "slogdet", "(", "self", ".", "weight", ")", "\n", "log_det", "=", "log_det", ".", "mul", "(", "x", ".", "size", "(", "2", ")", "*", "x", ".", "size", "(", "3", ")", ")", ".", "mul", "(", "-", "1", ")", "\n", "", "elif", "self", ".", "conv_type", "==", "'decomposition'", ":", "\n", "                ", "l", "=", "self", ".", "l", "*", "self", ".", "l_mask", "+", "self", ".", "identity", "\n", "u", "=", "self", ".", "u", "*", "self", ".", "u_mask", "\n", "weight", "=", "torch", ".", "matmul", "(", "self", ".", "p", ",", "torch", ".", "matmul", "(", "l", ",", "u", ")", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "torch", ".", "inverse", "(", "weight", ")", ".", "view", "(", "self", ".", "in_channels", ",", "self", ".", "in_channels", ",", "1", ",", "1", ")", ")", "\n", "log_det", "=", "torch", ".", "diagonal", "(", "self", ".", "u", ")", ".", "sum", "(", ")", ".", "mul", "(", "x", ".", "size", "(", "2", ")", "*", "x", ".", "size", "(", "3", ")", ")", ".", "mul", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'wrong 1x1 conlution type'", ")", "\n", "", "", "return", "x", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Conv1x1.extra_repr": [[160, 162], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'in_channels={}, conv_type={}'", ".", "format", "(", "self", ".", "in_channels", ",", "self", ".", "conv_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.CouplingLayer.__init__": [[172, 201], ["torch.Module.__init__", "flows.ConvBlock", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ValueError", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Conv2d.__init__"], ["def", "__init__", "(", "self", ",", "flow_type", ",", "num_blocks", ",", "in_channels", ",", "hidden_channels", ")", ":", "\n", "        ", "super", "(", "CouplingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "flow_type", "=", "flow_type", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "hidden_channels", "=", "hidden_channels", "\n", "self", ".", "x2_channels", "=", "in_channels", "//", "2", "\n", "self", ".", "x1_channels", "=", "in_channels", "-", "self", ".", "x2_channels", "\n", "if", "flow_type", "==", "'additive'", ":", "\n", "            ", "self", ".", "num_out", "=", "1", "\n", "", "elif", "flow_type", "==", "'affine'", ":", "\n", "            ", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", "/", "8", ")", "\n", "self", ".", "shift", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "rescale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", ")", "\n", "self", ".", "reshift", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "num_out", "=", "2", "\n", "", "elif", "flow_type", "==", "'matrixexp'", ":", "\n", "            ", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", "/", "8", ")", "\n", "self", ".", "shift", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "rescale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", "/", "self", ".", "x2_channels", ")", "\n", "self", ".", "reshift", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "max_out", "=", "24", "\n", "if", "self", ".", "x2_channels", "<=", "self", ".", "max_out", ":", "\n", "                ", "self", ".", "num_out", "=", "(", "self", ".", "x2_channels", "+", "1", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "k", "=", "3", "\n", "self", ".", "num_out", "=", "2", "*", "self", ".", "k", "+", "1", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'wrong flow type'", ")", "\n", "", "self", ".", "net", "=", "ConvBlock", "(", "num_blocks", ",", "self", ".", "x1_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "x2_channels", "*", "self", ".", "num_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.CouplingLayer.forward": [[202, 288], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.new_zeros", "flows.CouplingLayer.net", "x.size", "flows.CouplingLayer.net", "x.size", "flows.CouplingLayer.net", "torch.cat.chunk", "torch.cat.chunk", "torch.cat.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "log_scale.sum", "flows.CouplingLayer.net", "torch.cat.chunk", "torch.cat.chunk", "torch.cat.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "log_scale.sum().mul", "ValueError", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "log_scale.sum", "flows.CouplingLayer.net().unsqueeze", "torch.cat.chunk", "torch.cat.chunk", "torch.cat.chunk", "outs[].squeeze", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.matmul().permute().squeeze.unsqueeze().permute", "torch.matmul().permute().squeeze.unsqueeze().permute", "torch.matmul().permute().squeeze.unsqueeze().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "flows.CouplingLayer.net().unsqueeze", "torch.cat.chunk", "torch.cat.chunk", "torch.cat.chunk", "outs[].squeeze", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul().permute().squeeze.unsqueeze().permute", "torch.matmul().permute().squeeze.unsqueeze().permute", "torch.matmul().permute().squeeze.unsqueeze().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "flows.CouplingLayer.net().unsqueeze", "torch.cat.chunk", "torch.cat.chunk", "torch.cat.chunk", "outs[].squeeze", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "flows.CouplingLayer.net().unsqueeze", "torch.cat.chunk", "torch.cat.chunk", "torch.cat.chunk", "outs[].squeeze", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.diagonal().sum().mul", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.matmul().permute().squeeze", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "flows.CouplingLayer.net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.matmul().permute().squeeze.unsqueeze", "torch.matmul().permute().squeeze.unsqueeze", "torch.matmul().permute().squeeze.unsqueeze", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "flows.CouplingLayer.net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul().permute().squeeze.unsqueeze", "torch.matmul().permute().squeeze.unsqueeze", "torch.matmul().permute().squeeze.unsqueeze", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "flows.CouplingLayer.net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "flows.CouplingLayer.net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "models.utils.series", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "models.utils.series", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "models.utils.expm", "models.utils.expm"], "methods", ["home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.series", "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.series", "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.expm", "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.expm"], ["", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ",", "init", "=", "False", ")", ":", "\n", "        ", "x1", "=", "x", "[", ":", ",", ":", "self", ".", "x1_channels", "]", "\n", "x2", "=", "x", "[", ":", ",", "self", ".", "x1_channels", ":", "]", "\n", "if", "self", ".", "flow_type", "==", "'additive'", ":", "\n", "            ", "if", "not", "reverse", ":", "\n", "                ", "x2", "=", "x2", "+", "self", ".", "net", "(", "x1", ",", "init", "=", "init", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "log_det", "=", "x", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "                ", "x2", "=", "x2", "-", "self", ".", "net", "(", "x1", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "log_det", "=", "x", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "", "", "elif", "self", ".", "flow_type", "==", "'affine'", ":", "\n", "            ", "if", "not", "reverse", ":", "\n", "                ", "out", "=", "self", ".", "net", "(", "x1", ",", "init", "=", "init", ")", "\n", "outs", "=", "out", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", "\n", "shift", "=", "outs", "[", "0", "]", "\n", "log_scale", "=", "self", ".", "rescale", "*", "torch", ".", "tanh", "(", "self", ".", "scale", "*", "outs", "[", "1", "]", "+", "self", ".", "shift", ")", "+", "self", ".", "reshift", "\n", "x2", "=", "torch", ".", "exp", "(", "log_scale", ")", "*", "x2", "+", "shift", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "log_det", "=", "log_scale", ".", "sum", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "self", ".", "net", "(", "x1", ")", "\n", "outs", "=", "out", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", "\n", "shift", "=", "outs", "[", "0", "]", "\n", "log_scale", "=", "self", ".", "rescale", "*", "torch", ".", "tanh", "(", "self", ".", "scale", "*", "outs", "[", "1", "]", "+", "self", ".", "shift", ")", "+", "self", ".", "reshift", "\n", "x2", "=", "torch", ".", "exp", "(", "-", "log_scale", ")", "*", "(", "x2", "-", "shift", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "log_det", "=", "log_scale", ".", "sum", "(", "[", "1", ",", "2", ",", "3", "]", ")", ".", "mul", "(", "-", "1", ")", "\n", "", "", "elif", "self", ".", "flow_type", "==", "'matrixexp'", ":", "\n", "            ", "if", "not", "reverse", ":", "\n", "                ", "if", "self", ".", "x2_channels", "<=", "self", ".", "max_out", ":", "\n", "                    ", "out", "=", "self", ".", "net", "(", "x1", ",", "init", "=", "init", ")", ".", "unsqueeze", "(", "2", ")", "\n", "outs", "=", "out", ".", "chunk", "(", "self", ".", "num_out", ",", "dim", "=", "1", ")", "\n", "shift", "=", "outs", "[", "0", "]", ".", "squeeze", "(", "2", ")", "\n", "weight", "=", "torch", ".", "cat", "(", "outs", "[", "1", ":", "]", ",", "dim", "=", "2", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", "weight", "=", "self", ".", "rescale", "*", "torch", ".", "tanh", "(", "self", ".", "scale", "*", "weight", "+", "self", ".", "shift", ")", "+", "self", ".", "reshift", "\n", "x2", "=", "x2", ".", "unsqueeze", "(", "2", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", "x2", "=", "torch", ".", "matmul", "(", "expm", "(", "weight", ")", ",", "x2", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", ".", "squeeze", "(", "2", ")", "+", "shift", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "log_det", "=", "torch", ".", "diagonal", "(", "weight", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ".", "sum", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "                    ", "out", "=", "self", ".", "net", "(", "x1", ",", "init", "=", "init", ")", ".", "unsqueeze", "(", "2", ")", "\n", "outs", "=", "out", ".", "chunk", "(", "self", ".", "num_out", ",", "dim", "=", "1", ")", "\n", "shift", "=", "outs", "[", "0", "]", ".", "squeeze", "(", "2", ")", "\n", "weight1", "=", "torch", ".", "cat", "(", "outs", "[", "1", ":", "self", ".", "k", "+", "1", "]", ",", "dim", "=", "2", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "2", ",", "1", ")", "\n", "weight2", "=", "torch", ".", "cat", "(", "outs", "[", "self", ".", "k", "+", "1", ":", "2", "*", "self", ".", "k", "+", "1", "]", ",", "dim", "=", "2", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", "weight1", "=", "self", ".", "rescale", "*", "torch", ".", "tanh", "(", "self", ".", "scale", "*", "weight1", "+", "self", ".", "shift", ")", "+", "self", ".", "reshift", "+", "eps", "\n", "weight2", "=", "self", ".", "rescale", "*", "torch", ".", "tanh", "(", "self", ".", "scale", "*", "weight2", "+", "self", ".", "shift", ")", "+", "self", ".", "reshift", "+", "eps", "\n", "weight3", "=", "torch", ".", "matmul", "(", "weight1", ",", "weight2", ")", "\n", "weight", "=", "torch", ".", "eye", "(", "self", ".", "x2_channels", ",", "device", "=", "x", ".", "device", ")", "+", "torch", ".", "matmul", "(", "\n", "torch", ".", "matmul", "(", "weight2", ",", "series", "(", "weight3", ")", ")", ",", "weight1", ")", "\n", "x2", "=", "x2", ".", "unsqueeze", "(", "2", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", "x2", "=", "torch", ".", "matmul", "(", "weight", ",", "x2", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", ".", "squeeze", "(", "2", ")", "+", "shift", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "log_det", "=", "torch", ".", "diagonal", "(", "weight3", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ".", "sum", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "x2_channels", "<=", "self", ".", "max_out", ":", "\n", "                    ", "out", "=", "self", ".", "net", "(", "x1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "outs", "=", "out", ".", "chunk", "(", "self", ".", "num_out", ",", "dim", "=", "1", ")", "\n", "shift", "=", "outs", "[", "0", "]", ".", "squeeze", "(", "2", ")", "\n", "weight", "=", "torch", ".", "cat", "(", "outs", "[", "1", ":", "]", ",", "dim", "=", "2", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", "weight", "=", "self", ".", "rescale", "*", "torch", ".", "tanh", "(", "self", ".", "scale", "*", "weight", "+", "self", ".", "shift", ")", "+", "self", ".", "reshift", "\n", "x2", "=", "(", "x2", "-", "shift", ")", ".", "unsqueeze", "(", "2", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", "x2", "=", "torch", ".", "matmul", "(", "expm", "(", "-", "weight", ")", ",", "x2", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", ".", "squeeze", "(", "2", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "log_det", "=", "torch", ".", "diagonal", "(", "weight", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ".", "sum", "(", "[", "1", ",", "2", ",", "3", "]", ")", ".", "mul", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                    ", "out", "=", "self", ".", "net", "(", "x1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "outs", "=", "out", ".", "chunk", "(", "self", ".", "num_out", ",", "dim", "=", "1", ")", "\n", "shift", "=", "outs", "[", "0", "]", ".", "squeeze", "(", "2", ")", "\n", "weight1", "=", "torch", ".", "cat", "(", "outs", "[", "1", ":", "self", ".", "k", "+", "1", "]", ",", "dim", "=", "2", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "2", ",", "1", ")", "\n", "weight2", "=", "torch", ".", "cat", "(", "outs", "[", "self", ".", "k", "+", "1", ":", "2", "*", "self", ".", "k", "+", "1", "]", ",", "dim", "=", "2", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", "weight1", "=", "self", ".", "rescale", "*", "torch", ".", "tanh", "(", "self", ".", "scale", "*", "weight1", "+", "self", ".", "shift", ")", "+", "self", ".", "reshift", "+", "eps", "\n", "weight2", "=", "self", ".", "rescale", "*", "torch", ".", "tanh", "(", "self", ".", "scale", "*", "weight2", "+", "self", ".", "shift", ")", "+", "self", ".", "reshift", "+", "eps", "\n", "weight3", "=", "torch", ".", "matmul", "(", "weight1", ",", "weight2", ")", "\n", "weight", "=", "torch", ".", "eye", "(", "self", ".", "x2_channels", ",", "device", "=", "x", ".", "device", ")", "-", "torch", ".", "matmul", "(", "\n", "torch", ".", "matmul", "(", "weight2", ",", "series", "(", "-", "weight3", ")", ")", ",", "weight1", ")", "\n", "x2", "=", "(", "x2", "-", "shift", ")", ".", "unsqueeze", "(", "2", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", "x2", "=", "torch", ".", "matmul", "(", "weight", ",", "x2", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", ".", "squeeze", "(", "2", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "log_det", "=", "torch", ".", "diagonal", "(", "weight3", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ".", "sum", "(", "[", "1", ",", "2", ",", "3", "]", ")", ".", "mul", "(", "-", "1", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'wrong flow type'", ")", "\n", "\n", "", "return", "out", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.CouplingLayer.extra_repr": [[289, 294], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'in_channels={}, hidden_channels={}, out_channels={},flow_type={}'", ".", "format", "(", "self", ".", "in_channels", ",", "\n", "self", ".", "hidden_channels", ",", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "flow_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.ConvBlock.__init__": [[297, 307], ["torch.Module.__init__", "list", "list.append", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "flows.Conv2d", "list.append", "flows.Block"], "methods", ["home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Conv2d.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_blocks", ",", "in_channels", ",", "hidden_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "list", "(", ")", "\n", "layers", ".", "append", "(", "Conv2d", "(", "in_channels", ",", "hidden_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "activ", "=", "True", ")", ")", "\n", "for", "_", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Block", "(", "hidden_channels", ")", ")", "\n", "", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "layers", ")", "\n", "self", ".", "out_layer", "=", "nn", ".", "Conv2d", "(", "hidden_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "out_layer", ".", "weight", ",", "0.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "out_layer", ".", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.ConvBlock.forward": [[308, 313], ["flows.ConvBlock.out_layer", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "init", "=", "False", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "init", "=", "init", ")", "\n", "", "x", "=", "self", ".", "out_layer", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Block.__init__": [[316, 322], ["torch.Module.__init__", "flows.Conv2d", "flows.Conv2d", "flows.Conv2d", "torch.ELU", "torch.ELU", "torch.ELU"], "methods", ["home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Conv2d.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv3", "=", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "elu", "=", "nn", ".", "ELU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Block.forward": [[323, 331], ["flows.Block.elu", "flows.Block.elu", "flows.Block.conv3", "flows.Block.elu", "flows.Block.conv1", "flows.Block.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "init", "=", "False", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "out", "=", "self", ".", "elu", "(", "self", ".", "conv1", "(", "x", ",", "init", "=", "init", ")", ")", "\n", "out", "=", "self", ".", "elu", "(", "self", ".", "conv2", "(", "out", ",", "init", "=", "init", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ",", "init", "=", "init", ",", "init_scale", "=", "0.0", ")", "\n", "out", "+=", "identity", "\n", "out", "=", "self", ".", "elu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Conv2d.__init__": [[334, 346], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "flows.Norm", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.ELU", "torch.ELU", "torch.ELU"], "methods", ["home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Conv2d.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", ",", "activ", "=", "False", ")", ":", "\n", "        ", "super", "(", "Conv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "activ", "=", "activ", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm", "=", "Norm", "(", "out_channels", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "conv", ".", "weight", ")", "\n", "if", "self", ".", "conv", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv", ".", "bias", ",", "0.0", ")", "\n", "", "if", "activ", ":", "\n", "            ", "self", ".", "elu", "=", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Conv2d.forward": [[347, 364], ["flows.Conv2d.conv", "flows.Conv2d.norm", "flows.Conv2d.forward", "out.transpose().contiguous().view.transpose().contiguous().view.size", "out.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "out.transpose().contiguous().view.transpose().contiguous().view.mean", "out.transpose().contiguous().view.transpose().contiguous().view.std", "flows.Conv2d.conv.weight.data.mul_", "flows.Conv2d.elu", "inv_std.view", "flows.Conv2d.conv.bias.data.add_().mul_", "out.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "flows.Conv2d.conv.bias.data.add_", "out.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Conv2d.forward"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "init", "=", "False", ",", "init_scale", "=", "1.0", ")", ":", "\n", "        ", "if", "init", ":", "\n", "            ", "out", "=", "self", ".", "forward", "(", "x", ")", "\n", "n_channels", "=", "out", ".", "size", "(", "1", ")", "\n", "out", "=", "out", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "n_channels", ",", "-", "1", ")", "\n", "mean", "=", "out", ".", "mean", "(", "dim", "=", "1", ")", "\n", "std", "=", "out", ".", "std", "(", "dim", "=", "1", ")", "\n", "inv_std", "=", "1.0", "/", "(", "std", "+", "eps", ")", "\n", "self", ".", "conv", ".", "weight", ".", "data", ".", "mul_", "(", "inv_std", ".", "view", "(", "n_channels", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "if", "self", ".", "conv", ".", "bias", "is", "not", "None", ":", "\n", "                ", "self", ".", "conv", ".", "bias", ".", "data", ".", "add_", "(", "-", "mean", ")", ".", "mul_", "(", "inv_std", ")", "\n", "\n", "", "", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ",", "init", "=", "init", ",", "init_scale", "=", "init_scale", ")", "\n", "if", "self", ".", "activ", ":", "\n", "            ", "x", "=", "self", ".", "elu", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.flows.Conv2d.extra_repr": [[365, 367], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'in_channels={}, out_channels={}'", ".", "format", "(", "self", ".", "in_channels", ",", "self", ".", "out_channels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.squeeze2d": [[7, 14], ["x.view.size", "x.view.view", "x.view.permute().contiguous", "x.view.view", "x.view.permute"], "function", ["None"], ["def", "squeeze2d", "(", "x", ",", "factor", "=", "2", ")", ":", "\n", "    ", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "assert", "h", "%", "factor", "==", "0", "and", "w", "%", "factor", "==", "0", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "c", ",", "h", "//", "factor", ",", "factor", ",", "w", "//", "factor", ",", "factor", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "5", ",", "1", ",", "2", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "factor", "*", "factor", "*", "c", ",", "h", "//", "factor", ",", "w", "//", "factor", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.unsqueeze2d": [[16, 24], ["x.view.size", "x.view.view", "x.view.permute().contiguous", "x.view.view", "x.view.permute"], "function", ["None"], ["", "def", "unsqueeze2d", "(", "x", ",", "factor", "=", "2", ")", ":", "\n", "    ", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "number", "=", "factor", "**", "2", "\n", "assert", "c", ">=", "number", "and", "c", "%", "number", "==", "0", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "factor", ",", "factor", ",", "c", "//", "number", ",", "h", ",", "w", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "5", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "c", "//", "number", ",", "h", "*", "factor", ",", "w", "*", "factor", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.split2d": [[26, 30], ["None"], "function", ["None"], ["", "def", "split2d", "(", "x", ",", "channels", ")", ":", "\n", "    ", "z1", "=", "x", "[", ":", ",", ":", "channels", "]", "\n", "z2", "=", "x", "[", ":", ",", "channels", ":", "]", "\n", "return", "z1", ",", "z2", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.unsplit2d": [[32, 34], ["torch.cat"], "function", ["None"], ["", "def", "unsplit2d", "(", "x", ")", ":", "\n", "    ", "return", "torch", ".", "cat", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.preprocess": [[36, 46], ["torch.floor.mul", "torch.floor.div", "torch.floor", "torch.floor.div"], "function", ["None"], ["", "def", "preprocess", "(", "image", ",", "bits", ",", "noise", "=", "None", ")", ":", "\n", "    ", "bins", "=", "2.", "**", "bits", "\n", "image", "=", "image", ".", "mul", "(", "255", ")", "\n", "if", "bits", "<", "8", ":", "\n", "        ", "image", "=", "torch", ".", "floor", "(", "image", ".", "div", "(", "256.", "/", "bins", ")", ")", "\n", "", "if", "noise", "is", "not", "None", ":", "\n", "        ", "image", "=", "image", "+", "noise", "\n", "", "image", "=", "image", ".", "div", "(", "bins", ")", "\n", "image", "=", "(", "image", "-", "0.5", ")", ".", "div", "(", "0.5", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.postprocess": [[48, 55], ["image.clamp().div.mul", "image.clamp().div.clamp().div", "image.clamp().div.mul", "torch.floor", "image.clamp().div.clamp"], "function", ["None"], ["", "def", "postprocess", "(", "image", ",", "bits", ")", ":", "\n", "    ", "bins", "=", "2.", "**", "bits", "\n", "image", "=", "image", ".", "mul", "(", "0.5", ")", "+", "0.5", "\n", "image", "=", "image", ".", "mul", "(", "bins", ")", "\n", "image", "=", "torch", ".", "floor", "(", "image", ")", "*", "(", "256.", "/", "bins", ")", "\n", "image", "=", "image", ".", "clamp", "(", "0", ",", "255", ")", ".", "div", "(", "255", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.expm": [[57, 73], ["int", "torch.eye", "range", "x.size", "torch.norm().max().item", "torch.matmul", "numpy.ceil", "torch.matmul", "numpy.log2", "torch.norm().max", "numpy.max", "torch.norm", "torch.norm().max().item", "torch.norm().max", "torch.norm"], "function", ["None"], ["", "def", "expm", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    compute the matrix exponential: \\sum_{k=0}^{\\infty}\\frac{x^{k}}{k!}\n    \"\"\"", "\n", "scale", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "log2", "(", "np", ".", "max", "(", "[", "torch", ".", "norm", "(", "x", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", ".", "max", "(", ")", ".", "item", "(", ")", ",", "0.5", "]", ")", ")", ")", "+", "1", ")", "\n", "x", "=", "x", "/", "(", "2", "**", "scale", ")", "\n", "s", "=", "torch", ".", "eye", "(", "x", ".", "size", "(", "-", "1", ")", ",", "device", "=", "x", ".", "device", ")", "\n", "t", "=", "x", "\n", "k", "=", "2", "\n", "while", "torch", ".", "norm", "(", "t", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", ".", "max", "(", ")", ".", "item", "(", ")", ">", "eps", ":", "\n", "        ", "s", "=", "s", "+", "t", "\n", "t", "=", "torch", ".", "matmul", "(", "x", ",", "t", ")", "/", "k", "\n", "k", "=", "k", "+", "1", "\n", "", "for", "i", "in", "range", "(", "scale", ")", ":", "\n", "        ", "s", "=", "torch", ".", "matmul", "(", "s", ",", "s", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.changyi7231_MEF.models.utils.series": [[75, 87], ["torch.eye", "x.size", "torch.norm().max().item", "torch.matmul", "torch.norm().max", "torch.norm"], "function", ["None"], ["", "def", "series", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    compute the matrix series: \\sum_{k=0}^{\\infty}\\frac{x^{k}}{(k+1)!}\n    \"\"\"", "\n", "s", "=", "torch", ".", "eye", "(", "x", ".", "size", "(", "-", "1", ")", ",", "device", "=", "x", ".", "device", ")", "\n", "t", "=", "x", "/", "2", "\n", "k", "=", "3", "\n", "while", "torch", ".", "norm", "(", "t", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", ".", "max", "(", ")", ".", "item", "(", ")", ">", "eps", ":", "\n", "        ", "s", "=", "s", "+", "t", "\n", "t", "=", "torch", ".", "matmul", "(", "x", ",", "t", ")", "/", "k", "\n", "k", "=", "k", "+", "1", "\n", "", "return", "s", "\n", "", ""]]}