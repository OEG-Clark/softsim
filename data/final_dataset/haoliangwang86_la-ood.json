{"home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.detect_oods.detect_oods_for_all_ood_datasets": [[19, 31], ["parser.parse_args", "print", "print", "range", "detect_oods.detect_oods", "results.append", "len", "print"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.detect_oods.detect_oods"], ["def", "detect_oods_for_all_ood_datasets", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "results", "=", "[", "]", "\n", "for", "ood_name", "in", "OOD_LIST", ":", "\n", "        ", "result", "=", "detect_oods", "(", "args", ".", "model", ",", "args", ".", "ind", ",", "ood_name", ")", "\n", "results", ".", "append", "(", "result", ")", "\n", "\n", "", "print", "(", "f\"LA-OOD results for {args.model} backbone, {args.ind} InD:\"", ")", "\n", "print", "(", "f\"{'OOD': <15}{'FPR-at-95%-TPR' : ^15}{'AUROC' : ^15}{'AUPR-out' : ^15}{'AUPR-in' : >15}\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "OOD_LIST", ")", ")", ":", "\n", "        ", "print", "(", "f\"{OOD_LIST[i]: <15}{100*results[i][0]:^15.2f}{100*results[i][1]:^15.2f}\"", "\n", "f\"{100*results[i][2]:^15.2f}{100*results[i][3]:>15.2f}\"", ")", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.detect_oods.detect_oods": [[34, 87], ["print", "print", "detect_oods.compute_ood_scores_of_all_layers", "scores.max", "utility.get_statistics", "utility.sort_csv_results", "numpy.argmax", "numpy.unique", "numpy.argmax", "numpy.unique", "range", "print", "print", "os.path.exists", "os.makedirs", "open", "csv.writer", "csv.writer.writerow", "len", "results[].append", "numpy.argmax", "open", "csv.writer", "csv.writer.writerow", "csv.writer.writerows", "csv.writer.writerow", "csv.writer.writerow", "csv.writer.writerow", "numpy.where", "numpy.where"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.detect_oods.compute_ood_scores_of_all_layers", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.get_statistics", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.sort_csv_results"], ["", "", "def", "detect_oods", "(", "model_name", ",", "ind_name", ",", "ood_name", ")", ":", "\n", "    ", "print", "(", "f\"Detecting OODs for {model_name}, {ind_name} vs. {ood_name}:\"", ")", "\n", "print", "(", "f\"Layer idx\\tAUROC\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"results\"", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "\"results\"", ")", "\n", "", "result_filename", "=", "f\"results/{model_name}-{ind_name}-vs-{ood_name}.csv\"", "\n", "fields", "=", "[", "'Layer'", ",", "'FPR-at-95%-TPR'", ",", "'AUROC'", ",", "'AUPR-out'", ",", "'AUPR-in'", ",", "\n", "'InD-correct'", ",", "'OOD-correct'", ",", "'Max-score-counts(ID/OOD)'", "]", "\n", "\n", "with", "open", "(", "result_filename", ",", "'w'", ")", "as", "csvfile", ":", "\n", "        ", "csvwriter", "=", "csv", ".", "writer", "(", "csvfile", ")", "\n", "csvwriter", ".", "writerow", "(", "fields", ")", "\n", "\n", "", "scores", ",", "ind_length", ",", "ood_length", "=", "compute_ood_scores_of_all_layers", "(", "model_name", ",", "ind_name", ",", "ood_name", ",", "result_filename", ")", "\n", "\n", "max_scores", "=", "scores", ".", "max", "(", "axis", "=", "0", ")", "\n", "\n", "y_test", "=", "[", "-", "1", "]", "*", "ind_length", "+", "[", "1", "]", "*", "ood_length", "# OOD as positive, ID as negative", "\n", "\n", "auroc", ",", "fpr_at_95_tpr", ",", "aupr_out", ",", "aupr_in", "=", "get_statistics", "(", "y_test", ",", "max_scores", ")", "\n", "\n", "headers", ",", "results", "=", "sort_csv_results", "(", "result_filename", ")", "\n", "\n", "# Append the number of samples received their max scores at each layer", "\n", "max_score_ind_idx", "=", "np", ".", "argmax", "(", "scores", "[", ":", ",", ":", "ind_length", "]", ",", "axis", "=", "0", ")", "\n", "max_score_ind_unique", ",", "max_score_ind_counts", "=", "np", ".", "unique", "(", "max_score_ind_idx", ",", "return_counts", "=", "True", ")", "\n", "max_score_ood_idx", "=", "np", ".", "argmax", "(", "scores", "[", ":", ",", "ind_length", ":", "]", ",", "axis", "=", "0", ")", "\n", "max_score_ood_unique", ",", "max_score_ood_counts", "=", "np", ".", "unique", "(", "max_score_ood_idx", ",", "return_counts", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "results", ")", ")", ":", "\n", "        ", "ind_counts", "=", "0", "\n", "ood_counts", "=", "0", "\n", "if", "i", "in", "max_score_ind_unique", ":", "\n", "            ", "ind_counts", "=", "max_score_ind_counts", "[", "np", ".", "where", "(", "max_score_ind_unique", "==", "i", ")", "[", "0", "]", "[", "0", "]", "]", "\n", "", "if", "i", "in", "max_score_ood_unique", ":", "\n", "            ", "ood_counts", "=", "max_score_ood_counts", "[", "np", ".", "where", "(", "max_score_ood_unique", "==", "i", ")", "[", "0", "]", "[", "0", "]", "]", "\n", "", "results", "[", "i", "]", ".", "append", "(", "f\"{ind_counts}/{ood_counts}\"", ")", "\n", "\n", "", "best_idx", "=", "np", ".", "argmax", "(", "results", ",", "axis", "=", "0", ")", "[", "2", "]", "# best layer", "\n", "best", "=", "results", "[", "best_idx", "]", "\n", "\n", "la_ood", "=", "[", "\"LA-OOD\"", ",", "f'{100*fpr_at_95_tpr:.2f}'", ",", "f'{100*auroc:.2f}'", ",", "f'{100*aupr_out:.2f}'", ",", "f'{100*aupr_in:.2f}'", "]", "\n", "with", "open", "(", "result_filename", ",", "'w'", ")", "as", "csvfile", ":", "\n", "        ", "csvwriter", "=", "csv", ".", "writer", "(", "csvfile", ")", "\n", "csvwriter", ".", "writerow", "(", "headers", ")", "\n", "csvwriter", ".", "writerows", "(", "results", ")", "\n", "csvwriter", ".", "writerow", "(", "[", "\"Best layer:\"", "]", ")", "\n", "csvwriter", ".", "writerow", "(", "best", ")", "\n", "csvwriter", ".", "writerow", "(", "la_ood", ")", "\n", "\n", "", "print", "(", "f\"LA-OOD:\\t\\t{100*auroc:.2f}\"", ")", "\n", "print", "(", ")", "\n", "return", "auroc", ",", "fpr_at_95_tpr", ",", "aupr_out", ",", "aupr_in", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.detect_oods.compute_ood_scores_of_all_layers": [[89, 111], ["min", "torch.multiprocessing.cpu_count", "len", "torch.multiprocessing.Pool", "p.starmap_async().get", "p.close", "p.join", "results.append", "numpy.array", "p.starmap_async", "itertools.product"], "function", ["None"], ["", "def", "compute_ood_scores_of_all_layers", "(", "model_name", ",", "ind_name", ",", "ood_name", ",", "result_filename", ")", ":", "\n", "    ", "layers", "=", "0", "\n", "if", "model_name", "==", "'vgg16'", ":", "\n", "        ", "layers", "=", "VGG16_LAYERS", "\n", "", "elif", "model_name", "==", "'resnet34'", ":", "\n", "        ", "layers", "=", "RESNET34_LAYERS", "\n", "", "elif", "model_name", "==", "'densenet100'", ":", "\n", "        ", "layers", "=", "DENSENET100_LAYERS", "\n", "\n", "", "cpus", "=", "cpu_count", "(", ")", "-", "1", "# spare one cpu to avoid locking up the system", "\n", "processes", "=", "min", "(", "cpus", ",", "len", "(", "layers", ")", ")", "\n", "\n", "with", "Pool", "(", "processes", "=", "processes", ")", "as", "p", ":", "\n", "        ", "outputs", "=", "p", ".", "starmap_async", "(", "\n", "compute_ood_scores", ",", "product", "(", "[", "model_name", "]", ",", "[", "ind_name", "]", ",", "[", "ood_name", "]", ",", "layers", ",", "[", "result_filename", "]", ")", ")", ".", "get", "(", ")", "\n", "p", ".", "close", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "\n", "", "results", "=", "[", "]", "\n", "for", "output", "in", "outputs", ":", "\n", "        ", "results", ".", "append", "(", "output", "[", "0", "]", ")", "\n", "", "return", "np", ".", "array", "(", "results", ")", ",", "outputs", "[", "0", "]", "[", "1", "]", ",", "outputs", "[", "0", "]", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.detect_oods.compute_ood_scores": [[113, 166], ["utility.load_ood_detector", "utility.get_inter_outputs", "utility.get_inter_outputs", "len", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler.fit", "sklearn.preprocessing.StandardScaler.transform", "sklearn.preprocessing.StandardScaler.transform", "numpy.vstack", "utility.load_ood_detector.predict", "numpy.count_nonzero", "numpy.count_nonzero", "utility.get_statistics", "print", "range", "len", "utility.get_inter_outputs", "len", "min", "utility.load_ood_detector.decision_function", "open", "csv.writer", "csv.writer.writerow", "len", "utility.get_inter_outputs", "numpy.concatenate", "utility.get_inter_outputs"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.load_ood_detector", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.get_inter_outputs", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.get_inter_outputs", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.get_statistics", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.get_inter_outputs", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.get_inter_outputs", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.get_inter_outputs"], ["", "def", "compute_ood_scores", "(", "model_name", ",", "ind_name", ",", "ood_name", ",", "layer_idx", ",", "result_filename", ")", ":", "\n", "    ", "ood_detector", "=", "load_ood_detector", "(", "model_name", ",", "ind_name", ",", "layer_idx", ")", "\n", "\n", "ind_training_features", "=", "get_inter_outputs", "(", "model_name", ",", "ind_name", ",", "ind_name", ",", "layer_idx", ",", "is_training_set", "=", "True", ")", "\n", "ind_testing_features", "=", "get_inter_outputs", "(", "model_name", ",", "ind_name", ",", "ind_name", ",", "layer_idx", ")", "\n", "ind_length", "=", "len", "(", "ind_testing_features", ")", "\n", "\n", "if", "ood_name", "==", "\"combined\"", ":", "\n", "        ", "ood_features", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "OOD_LIST", ")", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "ood_features", "=", "get_inter_outputs", "(", "model_name", ",", "ind_name", ",", "OOD_LIST", "[", "i", "]", ",", "layer_idx", ")", "\n", "", "else", ":", "\n", "                ", "ood_features", "=", "np", ".", "concatenate", "(", "(", "ood_features", ",", "get_inter_outputs", "(", "model_name", ",", "ind_name", ",", "OOD_LIST", "[", "i", "]", ",", "layer_idx", ")", ")", ")", "\n", "", "", "ood_length", "=", "len", "(", "ood_features", ")", "\n", "", "else", ":", "\n", "        ", "ood_features", "=", "get_inter_outputs", "(", "model_name", ",", "ind_name", ",", "ood_name", ",", "layer_idx", ")", "\n", "ood_length", "=", "len", "(", "ood_features", ")", "\n", "ind_length", "=", "ood_length", "=", "min", "(", "ind_length", ",", "ood_length", ")", "# balanced testing set", "\n", "\n", "", "ind_testing_features", "=", "ind_testing_features", "[", ":", "ind_length", "]", "\n", "ood_features", "=", "ood_features", "[", ":", "ood_length", "]", "\n", "\n", "# Standardize the features", "\n", "ss", "=", "StandardScaler", "(", ")", "\n", "ss", ".", "fit", "(", "ind_training_features", ")", "\n", "ind_testing_features", "=", "ss", ".", "transform", "(", "ind_testing_features", ")", "\n", "ood_features", "=", "ss", ".", "transform", "(", "ood_features", ")", "\n", "\n", "data", "=", "np", ".", "vstack", "(", "(", "ind_testing_features", ",", "ood_features", ")", ")", "\n", "\n", "preds", "=", "ood_detector", ".", "predict", "(", "data", ")", "\n", "\n", "id_correct", "=", "np", ".", "count_nonzero", "(", "preds", "[", ":", "ind_length", "]", "==", "1", ")", "# ID is positive for OCSVM", "\n", "ood_correct", "=", "np", ".", "count_nonzero", "(", "preds", "[", "ind_length", ":", "]", "==", "-", "1", ")", "# OOD is negative for OCSVM", "\n", "\n", "# calculate the average and std of OOD samples' scores", "\n", "scores", "=", "-", "ood_detector", ".", "decision_function", "(", "data", ")", "# negated scores, positive for OOD, negative for InD", "\n", "\n", "# calculate statistics for current layer", "\n", "y_test", "=", "[", "-", "1", "]", "*", "ind_length", "+", "[", "1", "]", "*", "ood_length", "\n", "auroc", ",", "fpr_at_95_tpr", ",", "aupr_out", ",", "aupr_in", "=", "get_statistics", "(", "y_test", ",", "scores", ")", "\n", "print", "(", "f'layer {layer_idx}:\\t{100*auroc:.2f}'", ")", "\n", "\n", "# Save results to file", "\n", "row", "=", "[", "layer_idx", "+", "1", ",", "f'{100*fpr_at_95_tpr:.2f}'", ",", "f'{100*auroc:.2f}'", ",", "f'{100*aupr_out:.2f}'", ",", "f'{100*aupr_in:.2f}'", ",", "\n", "id_correct", ",", "ood_correct", "]", "\n", "with", "open", "(", "result_filename", ",", "'a'", ")", "as", "csvfile", ":", "\n", "        ", "csvwriter", "=", "csv", ".", "writer", "(", "csvfile", ")", "\n", "csvwriter", ".", "writerow", "(", "row", ")", "\n", "\n", "", "return", "scores", ",", "ind_length", ",", "ood_length", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.CustomDataset.__init__": [[46, 57], ["utility.get_dataset", "len", "random.sample", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.get_dataset"], ["    ", "def", "__init__", "(", "self", ",", "ds_name", ",", "is_training", "=", "False", ",", "transform", "=", "None", ",", "sample_size", "=", "None", ")", ":", "\n", "        ", "self", ".", "ds_name", "=", "ds_name", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "images", "=", "get_dataset", "(", "ds_name", ",", "is_training", ")", "\n", "\n", "if", "not", "is_training", "and", "sample_size", "is", "not", "None", "and", "len", "(", "self", ".", "images", ")", ">", "sample_size", ":", "\n", "# randomly select OOD samples if there are more samples than required", "\n", "            ", "idx", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "self", ".", "images", ")", ")", ",", "sample_size", ")", "\n", "self", ".", "images", "=", "self", ".", "images", "[", "idx", "]", "\n", "\n", "", "self", ".", "size", "=", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.CustomDataset.__len__": [[58, 60], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.CustomDataset.__getitem__": [[61, 71], ["utility.CustomDataset.astype", "PIL.Image.fromarray", "utility.CustomDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "images", "[", "idx", "]", "\n", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "1", "# pseudo target", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.save_data_hdf5": [[12, 24], ["h5py.File", "h5py.File.create_dataset", "h5py.File.close"], "function", ["None"], ["def", "save_data_hdf5", "(", "data", ",", "ds_name", ",", "file_address", ",", "mode", "=", "\"w\"", ")", ":", "\n", "    ", "\"\"\"\n    r: Readonly, file must exist\n    r+: Read/write, file must exist\n    w:Create file, truncate if exists\n    w- or x:Create file, fail if exists\n    a:Read/write if exists, create otherwise (default)\n    \"\"\"", "\n", "h5_file", "=", "h5py", ".", "File", "(", "file_address", "+", "\".hdf5\"", ",", "mode", ")", "\n", "dset", "=", "h5_file", ".", "create_dataset", "(", "ds_name", ",", "shape", "=", "data", ".", "shape", ",", "dtype", "=", "'float64'", ")", "\n", "dset", "[", ":", "]", "=", "data", "\n", "h5_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.get_dataset_hdf5": [[26, 34], ["h5py.File", "numpy.copy", "h5py.File.close"], "function", ["None"], ["", "def", "get_dataset_hdf5", "(", "ds_name", ",", "file_address", ",", "without_Ext", "=", "True", ")", ":", "\n", "    ", "if", "without_Ext", ":", "\n", "        ", "file_address", "=", "file_address", "+", "\".hdf5\"", "\n", "\n", "", "h5_file", "=", "h5py", ".", "File", "(", "file_address", ",", "\"r\"", ")", "\n", "data", "=", "np", ".", "copy", "(", "h5_file", "[", "ds_name", "]", ")", "\n", "h5_file", ".", "close", "(", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.get_dataset": [[36, 43], ["utility.get_dataset_hdf5"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.get_dataset_hdf5"], ["", "def", "get_dataset", "(", "ds_name", ",", "is_training_set", "=", "False", ")", ":", "\n", "    ", "if", "is_training_set", ":", "\n", "        ", "file_address", "=", "f'datasets/{ds_name}_train'", "\n", "", "else", ":", "\n", "        ", "file_address", "=", "f'datasets/{ds_name}'", "\n", "", "data", "=", "get_dataset_hdf5", "(", "'data'", ",", "file_address", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.get_inter_outputs": [[73, 80], ["utility.get_dataset_hdf5", "str"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.get_dataset_hdf5"], ["", "", "def", "get_inter_outputs", "(", "model_name", ",", "ind_name", ",", "ds_name", ",", "layer_idx", ",", "is_training_set", "=", "False", ")", ":", "\n", "    ", "if", "is_training_set", ":", "\n", "        ", "file_address", "=", "f'inter_outputs/{model_name}/{ind_name}_vs_others/{ds_name}_train'", "\n", "", "else", ":", "\n", "        ", "file_address", "=", "f'inter_outputs/{model_name}/{ind_name}_vs_others/{ds_name}_test'", "\n", "", "data", "=", "get_dataset_hdf5", "(", "str", "(", "layer_idx", ")", ",", "file_address", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.sort_csv_results": [[82, 93], ["range", "sorted", "open", "csv.reader", "next", "len", "int", "sorted.append", "float"], "function", ["None"], ["", "def", "sort_csv_results", "(", "filename", ")", ":", "\n", "    ", "results", "=", "[", "]", "\n", "with", "open", "(", "filename", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "        ", "statreader", "=", "csv", ".", "reader", "(", "csvfile", ",", "delimiter", "=", "','", ",", "quotechar", "=", "'|'", ")", "\n", "headers", "=", "next", "(", "statreader", ",", "None", ")", "\n", "for", "row", "in", "statreader", ":", "\n", "            ", "results", ".", "append", "(", "[", "float", "(", "x", ")", "for", "x", "in", "row", "]", ")", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "results", ")", ")", ":", "\n", "        ", "results", "[", "i", "]", "[", "0", "]", "=", "int", "(", "results", "[", "i", "]", "[", "0", "]", ")", "\n", "", "results", "=", "sorted", "(", "results", ",", "key", "=", "lambda", "row", ":", "row", "[", "0", "]", ")", "\n", "return", "headers", ",", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.get_fpr_at_95_tpr": [[95, 106], ["all", "all", "min", "numpy.interp", "map", "enumerate"], "function", ["None"], ["", "def", "get_fpr_at_95_tpr", "(", "tpr", ",", "fpr", ")", ":", "\n", "    ", "if", "all", "(", "tpr", "<", "0.95", ")", ":", "\n", "# No threshold allows TPR >= 0.95", "\n", "        ", "return", "0", "\n", "", "elif", "all", "(", "tpr", ">=", "0.95", ")", ":", "\n", "# All thresholds allow TPR >= 0.95, so find lowest possible FPR", "\n", "        ", "idxs", "=", "[", "i", "for", "i", ",", "x", "in", "enumerate", "(", "tpr", ")", "if", "x", ">=", "0.95", "]", "\n", "return", "min", "(", "map", "(", "lambda", "idx", ":", "fpr", "[", "idx", "]", ",", "idxs", ")", ")", "\n", "", "else", ":", "\n", "# Linear interp between values to get FPR at TPR == 0.95", "\n", "        ", "return", "np", ".", "interp", "(", "0.95", ",", "tpr", ",", "fpr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.get_statistics": [[108, 124], ["numpy.array", "numpy.array", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "utility.get_fpr_at_95_tpr", "sklearn.metrics.precision_recall_curve", "sklearn.metrics.auc", "sklearn.metrics.precision_recall_curve", "sklearn.metrics.auc"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.get_fpr_at_95_tpr"], ["", "", "def", "get_statistics", "(", "labels", ",", "scores", ")", ":", "\n", "    ", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "scores", "=", "np", ".", "array", "(", "scores", ")", "\n", "\n", "fpr", ",", "tpr", ",", "thresholds", "=", "roc_curve", "(", "labels", ",", "scores", ")", "\n", "auroc", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "\n", "fpr_at_95_tpr", "=", "get_fpr_at_95_tpr", "(", "tpr", ",", "fpr", ")", "\n", "\n", "precision", ",", "recall", ",", "thresholds", "=", "precision_recall_curve", "(", "labels", ",", "scores", ")", "\n", "aupr", "=", "auc", "(", "recall", ",", "precision", ")", "\n", "\n", "precision", ",", "recall", ",", "thresholds", "=", "precision_recall_curve", "(", "-", "labels", ",", "-", "scores", ")", "\n", "aupr_reverse", "=", "auc", "(", "recall", ",", "precision", ")", "\n", "\n", "return", "auroc", ",", "fpr_at_95_tpr", ",", "aupr", ",", "aupr_reverse", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.load_ood_detector": [[126, 134], ["os.path.exists", "joblib.load", "print"], "function", ["None"], ["", "def", "load_ood_detector", "(", "model_name", ",", "ind_name", ",", "layer_idx", ")", ":", "\n", "    ", "filename", "=", "f\"saved_models/{model_name}/{ind_name}_best/{layer_idx}.joblib\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "        ", "model", "=", "load", "(", "filename", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"OOD detector of layer{layer_idx} not found!\"", ")", "\n", "return", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.self_adaptive_shifting.SelfAdaptiveShifting.__init__": [[7, 16], ["math.ceil", "math.log10", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "self", ".", "k", "=", "math", ".", "ceil", "(", "5", "*", "math", ".", "log10", "(", "len", "(", "self", ".", "data", ")", ")", ")", "\n", "self", ".", "distances", "=", "None", "\n", "self", ".", "all_neighbor_indices", "=", "None", "\n", "self", ".", "edge_indice", "=", "None", "\n", "self", ".", "normal_vectors", "=", "None", "\n", "self", ".", "pseudo_outliers", "=", "None", "\n", "self", ".", "pseudo_targets", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.self_adaptive_shifting.SelfAdaptiveShifting.edge_pattern_detection": [[17, 33], ["sklearn.neighbors.NearestNeighbors().fit", "sklearn.neighbors.NearestNeighbors().fit.kneighbors", "range", "numpy.array", "len", "numpy.tile", "numpy.sum", "normal_vectors.append", "numpy.dot", "numpy.mean", "sklearn.neighbors.NearestNeighbors", "numpy.sum.squeeze", "numpy.sum.transpose", "edge_indice.append", "numpy.expand_dims"], "methods", ["None"], ["", "def", "edge_pattern_detection", "(", "self", ",", "threshold", "=", "0.01", ")", ":", "\n", "        ", "edge_indice", ",", "normal_vectors", "=", "[", "]", ",", "[", "]", "\n", "nbrs", "=", "NearestNeighbors", "(", "n_neighbors", "=", "self", ".", "k", "+", "1", ")", ".", "fit", "(", "self", ".", "data", ")", "\n", "self", ".", "distances", ",", "self", ".", "all_neighbor_indices", "=", "nbrs", ".", "kneighbors", "(", "self", ".", "data", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "data", ")", ")", ":", "\n", "            ", "neighbors", "=", "self", ".", "data", "[", "self", ".", "all_neighbor_indices", "[", "i", "]", "[", "1", ":", "]", "]", "\n", "x_i", "=", "np", ".", "tile", "(", "self", ".", "data", "[", "i", "]", ",", "(", "self", ".", "k", ",", "1", ")", ")", "\n", "v", "=", "(", "x_i", "-", "neighbors", ")", "/", "(", "np", ".", "expand_dims", "(", "self", ".", "distances", "[", "i", "]", "[", "1", ":", "]", ",", "axis", "=", "1", ")", "+", "1e-8", ")", "\n", "n", "=", "np", ".", "sum", "(", "v", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "normal_vectors", ".", "append", "(", "n", ".", "squeeze", "(", ")", ")", "\n", "theta", "=", "np", ".", "dot", "(", "v", ",", "n", ".", "transpose", "(", ")", ")", "\n", "l", "=", "np", ".", "mean", "(", "theta", ">=", "0", ")", "\n", "if", "l", ">", "1", "-", "threshold", ":", "\n", "                ", "edge_indice", ".", "append", "(", "i", ")", "\n", "", "", "self", ".", "normal_vectors", "=", "np", ".", "array", "(", "normal_vectors", ")", "\n", "self", ".", "edge_indice", "=", "edge_indice", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.self_adaptive_shifting.SelfAdaptiveShifting.generate_pseudo_outliers": [[34, 42], ["numpy.mean", "Exception", "numpy.linalg.norm"], "methods", ["None"], ["", "def", "generate_pseudo_outliers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "edge_indice", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "\"You should call edge_pattern_detection function first.\"", ")", "\n", "", "edge_data", "=", "self", ".", "data", "[", "self", ".", "edge_indice", "]", "\n", "l_ns", "=", "np", ".", "mean", "(", "self", ".", "distances", "[", "self", ".", "edge_indice", "]", "[", "1", ":", "]", ")", "\n", "edge_normal_vectors", "=", "self", ".", "normal_vectors", "[", "self", ".", "edge_indice", "]", "\n", "self", ".", "pseudo_outliers", "=", "edge_data", "+", "edge_normal_vectors", "/", "(", "np", ".", "linalg", ".", "norm", "(", "edge_normal_vectors", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "+", "1e-8", ")", "*", "l_ns", "\n", "return", "self", ".", "pseudo_outliers", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.self_adaptive_shifting.SelfAdaptiveShifting.generate_pseudo_targets": [[43, 55], ["range", "numpy.array", "Exception", "len", "self_adaptive_shifting.SelfAdaptiveShifting.SelfAdaptiveShifting.get_product_minimum", "pseudo_targets.append", "pseudo_targets.append", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.self_adaptive_shifting.SelfAdaptiveShifting.get_product_minimum"], ["", "def", "generate_pseudo_targets", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "edge_indice", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "\"You should call edge_pattern_detection function first.\"", ")", "\n", "", "shift_directions", "=", "-", "self", ".", "normal_vectors", "\n", "unit_shift_directions", "=", "shift_directions", "/", "(", "np", ".", "linalg", ".", "norm", "(", "shift_directions", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "+", "1e-8", ")", "\n", "pseudo_targets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "data", ")", ")", ":", "\n", "            ", "min_product", "=", "self", ".", "get_product_minimum", "(", "self", ".", "data", "[", "i", "]", ",", "unit_shift_directions", "[", "i", "]", ",", "self", ".", "all_neighbor_indices", "[", "i", "]", ")", "\n", "pseudo_targets", ".", "append", "(", "self", ".", "data", "[", "i", "]", "+", "min_product", "*", "unit_shift_directions", "[", "i", "]", ")", "\n", "pseudo_targets", ".", "append", "(", "self", ".", "data", "[", "i", "]", "-", "min_product", "*", "unit_shift_directions", "[", "i", "]", ")", "\n", "", "self", ".", "pseudo_targets", "=", "np", ".", "array", "(", "pseudo_targets", ")", "\n", "return", "self", ".", "pseudo_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.self_adaptive_shifting.SelfAdaptiveShifting.get_product_minimum": [[56, 68], ["float", "numpy.dot"], "methods", ["None"], ["", "def", "get_product_minimum", "(", "self", ",", "x_i", ",", "unit_shift_direction", ",", "neighbor_indices", ")", ":", "\n", "        ", "x_ij_min", "=", "x_i", "\n", "min_product", "=", "float", "(", "\"inf\"", ")", "\n", "for", "neighbor_index", "in", "neighbor_indices", "[", "1", ":", "]", ":", "\n", "            ", "x_ij", "=", "self", ".", "data", "[", "neighbor_index", "]", "\n", "inp", "=", "np", ".", "dot", "(", "unit_shift_direction", ",", "x_ij", "-", "x_i", ")", "\n", "if", "0", "<", "inp", "<", "min_product", ":", "\n", "                ", "min_product", "=", "inp", "\n", "x_ij_min", "=", "x_ij", "\n", "", "", "if", "x_ij_min", "is", "x_i", ":", "\n", "            ", "min_product", "=", "0", "\n", "", "return", "min_product", "\n", "", "", ""]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.train_backbone_model.AverageMeter.__init__": [[278, 280], ["train_backbone_model.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.train_backbone_model.AverageMeter.reset": [[281, 286], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.train_backbone_model.AverageMeter.update": [[287, 292], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.train_backbone_model.main": [[42, 169], ["parser.parse_args", "densenet.DenseNet100.cuda", "torchvision.Normalize", "torch.CrossEntropyLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "range", "list", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "densenet.DenseNet100.half", "nn.CrossEntropyLoss().cuda.half", "densenet.DenseNet100.parameters", "train_backbone_model.validate", "print", "train_backbone_model.train", "torch.optim.lr_scheduler.MultiStepLR.step", "train_backbone_model.validate", "max", "print", "range", "backbone_models.vgg16_cifar100", "backbone_models.vgg16", "torchvision.CIFAR10", "torchvision.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.CrossEntropyLoss", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "backbone_models.ResNet34_cifar100", "backbone_models.ResNet34", "torchvision.CIFAR100", "torchvision.CIFAR100", "densenet.DenseNet100.state_dict", "backbone_models.DenseNet100_cifar100", "backbone_models.DenseNet100", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.ToTensor"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.validate", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.train", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.validate", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.vgg.vgg16_cifar100", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.vgg.vgg16", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet34_cifar100", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet34", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet100_cifar100", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet100"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_prec1", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "model", "==", "\"vgg16\"", ":", "\n", "        ", "epochs", "=", "300", "\n", "batch_size", "=", "128", "\n", "lr", "=", "0.05", "\n", "weight_decay", "=", "5e-4", "\n", "milestones", "=", "list", "(", "range", "(", "30", ",", "epochs", ",", "30", ")", ")", "\n", "gamma", "=", "0.5", "\n", "\n", "if", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "            ", "model", "=", "vgg", ".", "vgg16_cifar100", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "vgg", ".", "vgg16", "(", ")", "\n", "\n", "", "", "elif", "args", ".", "model", "==", "\"resnet34\"", ":", "\n", "        ", "epochs", "=", "200", "\n", "batch_size", "=", "128", "\n", "lr", "=", "0.1", "\n", "weight_decay", "=", "1e-4", "\n", "milestones", "=", "[", "100", ",", "150", "]", "\n", "gamma", "=", "0.1", "\n", "\n", "if", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "            ", "model", "=", "resnet", ".", "ResNet34_cifar100", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "resnet", ".", "ResNet34", "(", ")", "\n", "\n", "", "", "elif", "args", ".", "model", "==", "\"densenet100\"", ":", "\n", "        ", "epochs", "=", "300", "\n", "batch_size", "=", "64", "\n", "lr", "=", "0.1", "\n", "weight_decay", "=", "1e-4", "\n", "milestones", "=", "[", "150", ",", "225", "]", "\n", "gamma", "=", "0.1", "\n", "\n", "if", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "            ", "model", "=", "densenet", ".", "DenseNet100_cifar100", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "densenet", ".", "DenseNet100", "(", ")", "\n", "\n", "", "", "model", ".", "cuda", "(", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "\n", "if", "args", ".", "dataset", "==", "\"cifar10\"", ":", "\n", "        ", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "download", "=", "True", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "        ", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "download", "=", "True", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "args", ".", "half", ":", "\n", "        ", "model", ".", "half", "(", ")", "\n", "criterion", ".", "half", "(", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "\n", "milestones", "=", "milestones", ",", "\n", "gamma", "=", "gamma", ",", "\n", "last_epoch", "=", "args", ".", "start_epoch", "-", "1", ")", "\n", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ")", "\n", "return", "\n", "\n", "", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "epochs", ")", ":", "\n", "\n", "# train for one epoch", "\n", "        ", "print", "(", "'current lr {:.5e}'", ".", "format", "(", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", "\n", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "# evaluate on validation set", "\n", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ")", "\n", "\n", "# remember best prec@1 and save checkpoint", "\n", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "\n", "if", "epoch", ">", "0", "and", "is_best", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "f\"pre_trained_backbones/{args.model}-{args.dataset}.h5\"", ")", "\n", "\n", "", "print", "(", "'Best prec@1 {:.3f}'", ".", "format", "(", "best_prec1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.train_backbone_model.train": [[172, 223], ["train_backbone_model.AverageMeter", "train_backbone_model.AverageMeter", "train_backbone_model.AverageMeter", "train_backbone_model.AverageMeter", "model.train", "time.time", "enumerate", "train_backbone_model.AverageMeter.update", "target.cuda.cuda", "input.cuda", "model", "criterion", "optimizer.zero_grad", "loss.float.backward", "optimizer.step", "output.float.float", "loss.float.float", "train_backbone_model.AverageMeter.update", "train_backbone_model.AverageMeter.update", "train_backbone_model.AverageMeter.update", "time.time", "input_var.half.half", "train_backbone_model.accuracy", "loss.float.item", "input.size", "prec1.item", "input.size", "print", "time.time", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.train", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.AverageMeter.update", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.AverageMeter.update", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.AverageMeter.update", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.AverageMeter.update", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.accuracy"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"\n        Run one train epoch\n    \"\"\"", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "input_var", "=", "input", ".", "cuda", "(", ")", "\n", "target_var", "=", "target", "\n", "if", "args", ".", "half", ":", "\n", "            ", "input_var", "=", "input_var", ".", "half", "(", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "output", "=", "output", ".", "float", "(", ")", "\n", "loss", "=", "loss", ".", "float", "(", ")", "\n", "# measure accuracy and record loss", "\n", "prec1", "=", "accuracy", "(", "output", ".", "data", ",", "target", ")", "[", "0", "]", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.train_backbone_model.validate": [[225, 274], ["train_backbone_model.AverageMeter", "train_backbone_model.AverageMeter", "train_backbone_model.AverageMeter", "model.eval", "time.time", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "target.cuda.cuda", "input.cuda", "target.cuda.cuda", "model", "criterion", "output.float.float", "loss.float.float", "train_backbone_model.AverageMeter.update", "train_backbone_model.AverageMeter.update", "train_backbone_model.AverageMeter.update", "time.time", "input_var.half.half", "train_backbone_model.accuracy", "loss.float.item", "input.size", "prec1.item", "input.size", "print", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.AverageMeter.update", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.AverageMeter.update", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.AverageMeter.update", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.accuracy"], ["", "", "", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ")", ":", "\n", "    ", "\"\"\"\n    Run evaluation\n    \"\"\"", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "target", "=", "target", ".", "cuda", "(", ")", "\n", "input_var", "=", "input", ".", "cuda", "(", ")", "\n", "target_var", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "if", "args", ".", "half", ":", "\n", "                ", "input_var", "=", "input_var", ".", "half", "(", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "\n", "output", "=", "output", ".", "float", "(", ")", "\n", "loss", "=", "loss", ".", "float", "(", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", "=", "accuracy", "(", "output", ".", "data", ",", "target", ")", "[", "0", "]", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})'", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ")", ")", "\n", "\n", "", "", "", "print", "(", "' * Prec@1 {top1.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ")", ")", "\n", "\n", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.train_backbone_model.accuracy": [[294, 308], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.generate_datasets.PureColorDataset.__init__": [[120, 125], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "height", ",", "width", ",", "size", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.generate_datasets.PureColorDataset.__len__": [[126, 128], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.generate_datasets.PureColorDataset.__getitem__": [[129, 138], ["generate_datasets.PureColorDataset.numpy().astype", "PIL.Image.fromarray", "generate_datasets.PureColorDataset.transform", "torch.ones", "generate_datasets.PureColorDataset.numpy", "torch.rand"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "torch", ".", "ones", "(", "self", ".", "height", ",", "self", ".", "width", ",", "3", ")", "*", "torch", ".", "rand", "(", "3", ")", "[", "None", ",", "None", ",", ":", "]", "*", "255", "\n", "img", "=", "img", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "1", "# pseudo target", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.generate_datasets.DTDDataset.__init__": [[143, 157], ["os.listdir", "len", "os.listdir", "os.path.join", "filename.endswith", "PIL.Image.open", "PIL.Image.open.copy", "generate_datasets.DTDDataset.images.append", "PIL.Image.open.close", "os.path.join"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "images", "=", "[", "]", "\n", "\n", "directory", "=", "'data/dtd/images'", "\n", "for", "subdir", "in", "os", ".", "listdir", "(", "directory", ")", ":", "\n", "            ", "for", "filename", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "subdir", ")", ")", ":", "\n", "                ", "if", "filename", ".", "endswith", "(", "'.jpg'", ")", ":", "\n", "                    ", "temp", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "subdir", ",", "filename", ")", ")", "\n", "image", "=", "temp", ".", "copy", "(", ")", "\n", "self", ".", "images", ".", "append", "(", "image", ")", "\n", "temp", ".", "close", "(", ")", "\n", "\n", "", "", "", "self", ".", "size", "=", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.generate_datasets.DTDDataset.__len__": [[158, 160], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.generate_datasets.DTDDataset.__getitem__": [[161, 168], ["generate_datasets.DTDDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "images", "[", "idx", "]", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "1", "# pseudo target", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.generate_datasets.main": [[12, 22], ["generate_datasets.generate_dataset", "generate_datasets.generate_dataset", "generate_datasets.generate_dataset", "generate_datasets.generate_dataset", "print", "generate_datasets.generate_dataset"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.generate_datasets.generate_dataset", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.generate_datasets.generate_dataset", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.generate_datasets.generate_dataset", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.generate_datasets.generate_dataset", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.generate_datasets.generate_dataset"], ["def", "main", "(", ")", ":", "\n", "    ", "generate_dataset", "(", "'cifar10'", ",", "is_training_set", "=", "True", ")", "\n", "generate_dataset", "(", "'cifar10'", ")", "\n", "generate_dataset", "(", "'cifar100'", ",", "is_training_set", "=", "True", ")", "\n", "generate_dataset", "(", "'cifar100'", ")", "\n", "\n", "for", "ood_name", "in", "OOD_LIST", ":", "\n", "        ", "generate_dataset", "(", "ood_name", ")", "\n", "\n", "", "print", "(", "'All datasets have been successfully generated!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.generate_datasets.generate_dataset": [[24, 54], ["generate_datasets.get_data_loader", "print", "print", "next", "features.permute.permute", "print", "print", "len", "len", "iter", "features.permute.numpy", "os.path.exists", "os.makedirs", "utility.save_data_hdf5", "utility.save_data_hdf5", "len"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.generate_datasets.get_data_loader", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.save_data_hdf5", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.save_data_hdf5"], ["", "def", "generate_dataset", "(", "ds_name", ",", "is_training_set", "=", "False", ")", ":", "\n", "    ", "save_dir", "=", "'datasets'", "\n", "if", "is_training_set", ":", "\n", "        ", "sample_size", "=", "IND_SAMPLE_SIZE", "\n", "", "else", ":", "\n", "        ", "sample_size", "=", "OOD_SAMPLE_SIZE", "\n", "", "data_loader", "=", "get_data_loader", "(", "ds_name", ",", "is_training_set", ",", "batch_size", "=", "sample_size", ",", "sample_size", "=", "sample_size", ")", "\n", "\n", "if", "len", "(", "data_loader", ".", "dataset", ")", "<", "sample_size", ":", "\n", "        ", "sample_size", "=", "len", "(", "data_loader", ".", "dataset", ")", "\n", "\n", "", "print", "(", "f'{ds_name} number of available samples: {len(data_loader.dataset)}'", ")", "\n", "print", "(", "f'{ds_name} number of outputting samples: {sample_size}'", ")", "\n", "\n", "features", ",", "_", "=", "next", "(", "iter", "(", "data_loader", ")", ")", "# B x C x H x W", "\n", "\n", "# Convert to numpy array with shape B x H x W x C and value range [0, 255]", "\n", "features", "=", "features", ".", "permute", "(", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "features", "=", "features", ".", "numpy", "(", ")", "*", "255", "\n", "\n", "# save data to hdf5 file", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "if", "is_training_set", ":", "\n", "        ", "save_data_hdf5", "(", "features", ",", "\"data\"", ",", "f\"{save_dir}/{ds_name}_train\"", ",", "\"a\"", ")", "\n", "", "else", ":", "\n", "        ", "save_data_hdf5", "(", "features", ",", "\"data\"", ",", "f\"{save_dir}/{ds_name}\"", ",", "\"a\"", ")", "\n", "\n", "", "print", "(", "f\"{ds_name} dataset successfully generated!\"", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.generate_datasets.get_data_loader": [[56, 115], ["torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "generate_datasets.PureColorDataset", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "generate_datasets.DTDDataset", "torch.utils.data.DataLoader", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torchvision.datasets.SVHN", "torch.utils.data.DataLoader", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torchvision.datasets.LSUN", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "get_data_loader", "(", "ds_name", ",", "is_training", "=", "False", ",", "\n", "height", "=", "IMAGE_HEIGHT", ",", "width", "=", "IMAGE_WIDTH", ",", "\n", "batch_size", "=", "OOD_SAMPLE_SIZE", ",", "sample_size", "=", "OOD_SAMPLE_SIZE", ")", ":", "\n", "    ", "data_loader", "=", "None", "\n", "\n", "if", "ds_name", "==", "\"cifar10\"", ":", "\n", "        ", "data_loader", "=", "DataLoader", "(", "\n", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "is_training", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", ",", "download", "=", "True", ")", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "\n", "", "elif", "ds_name", "==", "\"cifar100\"", ":", "\n", "        ", "data_loader", "=", "DataLoader", "(", "\n", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data'", ",", "train", "=", "is_training", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", ",", "download", "=", "True", ")", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "\n", "", "elif", "ds_name", "==", "\"pure_color\"", ":", "\n", "        ", "data_loader", "=", "DataLoader", "(", "\n", "PureColorDataset", "(", "height", "=", "height", ",", "width", "=", "width", ",", "size", "=", "sample_size", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "\n", "", "elif", "ds_name", "==", "\"dtd\"", ":", "\n", "        ", "data_loader", "=", "DataLoader", "(", "\n", "DTDDataset", "(", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "[", "32", ",", "32", "]", ",", "interpolation", "=", "InterpolationMode", ".", "LANCZOS", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "\n", "", "elif", "ds_name", "==", "\"svhn\"", ":", "\n", "        ", "data_loader", "=", "DataLoader", "(", "\n", "datasets", ".", "SVHN", "(", "root", "=", "'./data'", ",", "split", "=", "'test'", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", ",", "download", "=", "True", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ")", "# shuffle", "\n", "\n", "", "elif", "ds_name", "==", "\"tiny\"", ":", "\n", "        ", "data_loader", "=", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "root", "=", "'./data/tiny-imagenet-200/test'", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "[", "32", ",", "32", "]", ",", "interpolation", "=", "InterpolationMode", ".", "LANCZOS", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "\n", "", "elif", "ds_name", "==", "\"lsun\"", ":", "\n", "        ", "data_loader", "=", "DataLoader", "(", "\n", "datasets", ".", "LSUN", "(", "root", "=", "'./data'", ",", "classes", "=", "'test'", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "[", "32", ",", "32", "]", ",", "interpolation", "=", "InterpolationMode", ".", "LANCZOS", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "\n", "", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.save_inter_outputs.main": [[22, 28], ["parser.parse_args", "save_inter_outputs.save_inter_outputs", "save_inter_outputs.save_inter_outputs", "save_inter_outputs.save_inter_outputs"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.save_inter_outputs.save_inter_outputs", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.save_inter_outputs.save_inter_outputs", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.save_inter_outputs.save_inter_outputs"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "save_inter_outputs", "(", "args", ".", "model", ",", "args", ".", "ind", ",", "args", ".", "ind", ",", "is_training_set", "=", "True", ")", "\n", "save_inter_outputs", "(", "args", ".", "model", ",", "args", ".", "ind", ",", "args", ".", "ind", ")", "\n", "for", "ood_name", "in", "OOD_LIST", ":", "\n", "        ", "save_inter_outputs", "(", "args", ".", "model", ",", "args", ".", "ind", ",", "ood_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.save_inter_outputs.save_inter_outputs": [[30, 136], ["os.path.exists", "torchvision.transforms.Normalize", "torch.utils.data.DataLoader", "print", "print", "os.path.exists", "densenet.DenseNet100().cuda.cuda().eval", "print", "print", "print", "os.path.exists", "os.makedirs", "print", "print", "utility.CustomDataset", "len", "len", "print", "densenet.DenseNet100().cuda.load_state_dict", "print", "print", "torch.no_grad", "range", "print", "print", "backbone_models.vgg16_cifar100().cuda", "torch.load", "densenet.DenseNet100().cuda.cuda", "data.cuda.cuda", "densenet.DenseNet100().cuda.get_inter_outputs", "range", "len", "utility.save_data_hdf5", "torchvision.transforms.Compose", "len", "backbone_models.vgg16().cuda", "backbone_models.ResNet34_cifar100().cuda", "backbone_models.ResNet34().cuda", "len", "range", "str", "backbone_models.vgg16_cifar100", "backbone_models.DenseNet100_cifar100().cuda", "len", "numpy.mean", "len", "numpy.vstack", "torchvision.transforms.ToTensor", "backbone_models.vgg16", "backbone_models.ResNet34_cifar100", "backbone_models.ResNet34", "backbone_models.DenseNet100().cuda", "backbone_models.DenseNet100_cifar100", "backbone_models.DenseNet100"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.get_inter_outputs", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.save_data_hdf5", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.vgg.vgg16_cifar100", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.vgg.vgg16", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet34_cifar100", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet34", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet100_cifar100", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet100"], ["", "", "def", "save_inter_outputs", "(", "model_name", ",", "id_name", ",", "ds_name", "=", "None", ",", "is_training_set", "=", "False", ")", ":", "\n", "    ", "if", "not", "is_training_set", "and", "ds_name", "==", "None", ":", "\n", "        ", "print", "(", "\"Must set the test dataset name!\"", ")", "\n", "return", "\n", "\n", "", "save_dir", "=", "f\"inter_outputs/{model_name}/{id_name}_vs_others\"", "\n", "\n", "if", "is_training_set", ":", "\n", "        ", "file_address", "=", "f\"{save_dir}/{ds_name}_train\"", "\n", "", "else", ":", "\n", "        ", "file_address", "=", "f\"{save_dir}/{ds_name}_test\"", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "f\"{file_address}.hdf5\"", ")", ":", "\n", "        ", "print", "(", "\"Features already exists.\"", ")", "\n", "return", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "if", "is_training_set", ":", "\n", "        ", "print", "(", "f\"saving {ds_name} training set outputs ...\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"saving {ds_name} testing set outputs ...\"", ")", "\n", "\n", "", "if", "is_training_set", ":", "\n", "        ", "sample_size", "=", "IND_SAMPLE_SIZE", "\n", "", "else", ":", "\n", "        ", "sample_size", "=", "OOD_SAMPLE_SIZE", "\n", "", "batch_size", "=", "BATCH_SIZE", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "\n", "CustomDataset", "(", "ds_name", "=", "ds_name", ",", "is_training", "=", "is_training_set", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "sample_size", "=", "sample_size", ")", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "\n", "if", "len", "(", "data_loader", ".", "dataset", ")", "<", "sample_size", ":", "\n", "        ", "sample_size", "=", "len", "(", "data_loader", ".", "dataset", ")", "\n", "\n", "", "print", "(", "f'{ds_name} number of available samples: {len(data_loader.dataset)}'", ")", "\n", "print", "(", "f'{ds_name} number of outputting samples: {sample_size}'", ")", "\n", "\n", "# Load pre-trained model", "\n", "if", "model_name", "==", "\"vgg16\"", ":", "\n", "        ", "if", "id_name", "==", "\"cifar100\"", ":", "\n", "            ", "model", "=", "vgg", ".", "vgg16_cifar100", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "id_name", "==", "\"cifar10\"", ":", "\n", "            ", "model", "=", "vgg", ".", "vgg16", "(", ")", ".", "cuda", "(", ")", "\n", "", "", "elif", "model_name", "==", "\"resnet34\"", ":", "\n", "        ", "if", "id_name", "==", "\"cifar100\"", ":", "\n", "            ", "model", "=", "resnet", ".", "ResNet34_cifar100", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "resnet", ".", "ResNet34", "(", ")", ".", "cuda", "(", ")", "\n", "", "", "elif", "model_name", "==", "\"densenet100\"", ":", "\n", "        ", "if", "id_name", "==", "\"cifar100\"", ":", "\n", "            ", "model", "=", "densenet", ".", "DenseNet100_cifar100", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "id_name", "==", "\"cifar10\"", ":", "\n", "            ", "model", "=", "densenet", ".", "DenseNet100", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "", "", "if", "os", ".", "path", ".", "exists", "(", "f'pre_trained_backbones/{model_name}-{id_name}.h5'", ")", ":", "\n", "        ", "print", "(", "f'Loading pre-trained {model_name}-{id_name} model ...'", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "f'pre_trained_backbones/{model_name}-{id_name}.h5'", ")", ")", "\n", "print", "(", "f'Pre-trained {model_name}-{id_name} model successfully loaded.'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Pre-trained model not found!\"", ")", "\n", "return", "\n", "\n", "", "model", ".", "cuda", "(", ")", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "total", "=", "0", "\n", "features", "=", "None", "\n", "for", "data", ",", "_", "in", "data_loader", ":", "\n", "            ", "total", "+=", "batch_size", "\n", "if", "total", ">", "sample_size", ":", "\n", "                ", "remains", "=", "batch_size", "-", "(", "total", "-", "sample_size", ")", "\n", "data", "=", "data", "[", ":", "remains", "]", "\n", "", "data", "=", "data", ".", "cuda", "(", ")", "\n", "outputs", "=", "model", ".", "get_inter_outputs", "(", "data", ")", "# layers x batch_size x C x H X W", "\n", "\n", "# get channel mean", "\n", "for", "i", "in", "range", "(", "len", "(", "outputs", ")", ")", ":", "\n", "                ", "if", "len", "(", "outputs", "[", "i", "]", ".", "shape", ")", "==", "4", ":", "\n", "                    ", "outputs", "[", "i", "]", "=", "np", ".", "mean", "(", "outputs", "[", "i", "]", ",", "axis", "=", "(", "2", ",", "3", ")", ")", "# batch_size x C", "\n", "\n", "", "", "if", "features", "is", "None", ":", "\n", "                ", "features", "=", "outputs", "# layers x batch_size x C", "\n", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "features", ")", ")", ":", "\n", "                    ", "features", "[", "i", "]", "=", "np", ".", "vstack", "(", "(", "features", "[", "i", "]", ",", "outputs", "[", "i", "]", ")", ")", "# stack each batch", "\n", "\n", "", "", "if", "total", ">=", "sample_size", ":", "\n", "                ", "break", "\n", "\n", "# save data", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "features", ")", ")", ":", "\n", "            ", "save_data_hdf5", "(", "features", "[", "i", "]", ",", "str", "(", "i", ")", ",", "file_address", ",", "\"a\"", ")", "\n", "\n", "", "", "if", "is_training_set", ":", "\n", "        ", "print", "(", "f\"{ds_name} training set intermediate outputs successfully saved!\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"{ds_name} testing set intermediate outputs successfully saved!\"", ")", "\n", "", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.AverageMeter.__init__": [[277, 279], ["co_train.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.AverageMeter.reset": [[280, 285], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.AverageMeter.update": [[286, 291], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.main": [[55, 162], ["parser.parse_args", "densenet.DenseNet100.cuda", "torchvision.Normalize", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "densenet.DenseNet100.half", "criterion.half", "densenet.DenseNet100.parameters", "co_train.validate", "print", "co_train.train", "co_train.validate", "max", "print", "backbone_models.vgg16_cifar100", "backbone_models.vgg16", "torchvision.CIFAR10", "torchvision.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "backbone_models.ResNet34_cifar100", "backbone_models.ResNet34", "torchvision.CIFAR100", "torchvision.CIFAR100", "densenet.DenseNet100.state_dict", "backbone_models.DenseNet100_cifar100", "backbone_models.DenseNet100", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.ToTensor"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.validate", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.train", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.validate", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.vgg.vgg16_cifar100", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.vgg.vgg16", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet34_cifar100", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet34", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet100_cifar100", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet100"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_prec1", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "model", "==", "\"vgg16\"", ":", "\n", "        ", "batch_size", "=", "128", "\n", "if", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "            ", "model", "=", "vgg", ".", "vgg16_cifar100", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "vgg", ".", "vgg16", "(", ")", "\n", "\n", "", "", "elif", "args", ".", "model", "==", "\"resnet34\"", ":", "\n", "        ", "batch_size", "=", "128", "\n", "if", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "            ", "model", "=", "resnet", ".", "ResNet34_cifar100", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "resnet", ".", "ResNet34", "(", ")", "\n", "\n", "", "", "elif", "args", ".", "model", "==", "\"densenet100\"", ":", "\n", "        ", "batch_size", "=", "64", "\n", "if", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "            ", "model", "=", "densenet", ".", "DenseNet100_cifar100", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "densenet", ".", "DenseNet100", "(", ")", "\n", "\n", "", "", "model", ".", "cuda", "(", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "\n", "if", "args", ".", "dataset", "==", "\"cifar10\"", ":", "\n", "        ", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "download", "=", "True", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "        ", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "download", "=", "True", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "criterion", "=", "co_train_loss", "\n", "\n", "if", "args", ".", "half", ":", "\n", "        ", "model", ".", "half", "(", ")", "\n", "criterion", ".", "half", "(", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ")", "\n", "return", "\n", "\n", "# prec1 = validate(val_loader, model, criterion)", "\n", "# print('Before co-training, Best prec@1 {:.3f}'.format(prec1))", "\n", "\n", "", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "\n", "# train for one epoch", "\n", "        ", "print", "(", "'current lr {:.5e}'", ".", "format", "(", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", "\n", "\n", "# evaluate on validation set", "\n", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ")", "\n", "\n", "# remember best prec@1 and save checkpoint", "\n", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "\n", "if", "epoch", "in", "[", "0", ",", "1", ",", "2", ",", "4", "]", ":", "\n", "            ", "torch", ".", "save", "(", "\n", "model", ".", "state_dict", "(", ")", ",", "\n", "f\"pre_trained_backbones/{args.model}-{args.dataset}-lambda-{args.lambda_value}-epoch-{epoch+1}.h5\"", ")", "\n", "\n", "", "print", "(", "'Best prec@1 {:.3f}'", ".", "format", "(", "best_prec1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.train": [[165, 219], ["co_train.AverageMeter", "co_train.AverageMeter", "co_train.AverageMeter", "co_train.AverageMeter", "co_train.get_feature_mean_and_std", "co_train.load_all_ood_detectors", "model.train", "time.time", "enumerate", "co_train.AverageMeter.update", "target.cuda.cuda", "input.cuda", "model.intermediate_forward", "criterion", "optimizer.zero_grad", "loss.float.backward", "optimizer.step", "output_list[].float", "loss.float.float", "co_train.AverageMeter.update", "co_train.AverageMeter.update", "co_train.AverageMeter.update", "time.time", "input_var.half.half", "co_train.accuracy", "loss.float.item", "input.size", "prec1.item", "input.size", "print", "time.time", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.get_feature_mean_and_std", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.load_all_ood_detectors", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.train", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.AverageMeter.update", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet.intermediate_forward", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.AverageMeter.update", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.AverageMeter.update", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.AverageMeter.update", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.accuracy"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"\n        Run one train epoch\n    \"\"\"", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "mean_list", ",", "std_list", "=", "get_feature_mean_and_std", "(", "model", ",", "train_loader", ")", "\n", "ood_detectors", "=", "load_all_ood_detectors", "(", "args", ".", "model", ",", "args", ".", "dataset", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "input_var", "=", "input", ".", "cuda", "(", ")", "\n", "target_var", "=", "target", "\n", "if", "args", ".", "half", ":", "\n", "            ", "input_var", "=", "input_var", ".", "half", "(", ")", "\n", "\n", "# compute output", "\n", "", "output_list", "=", "model", ".", "intermediate_forward", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output_list", ",", "target_var", ",", "ood_detectors", ",", "mean_list", ",", "std_list", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "output", "=", "output_list", "[", "-", "1", "]", ".", "float", "(", ")", "\n", "loss", "=", "loss", ".", "float", "(", ")", "\n", "# measure accuracy and record loss", "\n", "prec1", "=", "accuracy", "(", "output", ".", "data", ",", "target", ")", "[", "0", "]", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.validate": [[221, 273], ["co_train.AverageMeter", "co_train.AverageMeter", "co_train.AverageMeter", "co_train.get_feature_mean_and_std", "co_train.load_all_ood_detectors", "model.eval", "time.time", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "target.cuda.cuda", "input.cuda", "target.cuda.cuda", "model.intermediate_forward", "criterion", "output_list[].float", "loss.float.float", "co_train.AverageMeter.update", "co_train.AverageMeter.update", "co_train.AverageMeter.update", "time.time", "input_var.half.half", "co_train.accuracy", "loss.float.item", "input.size", "prec1.item", "input.size", "print", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.get_feature_mean_and_std", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.load_all_ood_detectors", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet.intermediate_forward", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.AverageMeter.update", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.AverageMeter.update", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.AverageMeter.update", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.accuracy"], ["", "", "", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ")", ":", "\n", "    ", "\"\"\"\n    Run evaluation\n    \"\"\"", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "mean_list", ",", "std_list", "=", "get_feature_mean_and_std", "(", "model", ",", "val_loader", ")", "\n", "ood_detectors", "=", "load_all_ood_detectors", "(", "args", ".", "model", ",", "args", ".", "dataset", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "target", "=", "target", ".", "cuda", "(", ")", "\n", "input_var", "=", "input", ".", "cuda", "(", ")", "\n", "target_var", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "if", "args", ".", "half", ":", "\n", "                ", "input_var", "=", "input_var", ".", "half", "(", ")", "\n", "\n", "# compute output", "\n", "", "output_list", "=", "model", ".", "intermediate_forward", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output_list", ",", "target_var", ",", "ood_detectors", ",", "mean_list", ",", "std_list", ")", "\n", "\n", "output", "=", "output_list", "[", "-", "1", "]", ".", "float", "(", ")", "\n", "loss", "=", "loss", ".", "float", "(", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", "=", "accuracy", "(", "output", ".", "data", ",", "target", ")", "[", "0", "]", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})'", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ")", ")", "\n", "\n", "", "", "", "print", "(", "' * Prec@1 {top1.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ")", ")", "\n", "\n", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.accuracy": [[293, 307], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.get_feature_mean_and_std": [[309, 343], ["model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler.fit", "mean_list.append", "std_list.append", "input.cuda", "model.intermediate_forward", "range", "input_var.half.half", "len", "outputs[].cpu().numpy", "range", "len", "numpy.mean", "len", "numpy.vstack", "outputs[].cpu"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet.intermediate_forward"], ["", "def", "get_feature_mean_and_std", "(", "model", ",", "train_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "features", "=", "None", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "input", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "input_var", "=", "input", ".", "cuda", "(", ")", "\n", "if", "args", ".", "half", ":", "\n", "                ", "input_var", "=", "input_var", ".", "half", "(", ")", "\n", "\n", "# compute output", "\n", "", "outputs", "=", "model", ".", "intermediate_forward", "(", "input_var", ")", "\n", "\n", "# get channel mean", "\n", "for", "i", "in", "range", "(", "len", "(", "outputs", ")", ")", ":", "\n", "                ", "outputs", "[", "i", "]", "=", "outputs", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "len", "(", "outputs", "[", "i", "]", ".", "shape", ")", "==", "4", ":", "\n", "                    ", "outputs", "[", "i", "]", "=", "np", ".", "mean", "(", "outputs", "[", "i", "]", ",", "axis", "=", "(", "2", ",", "3", ")", ")", "# batchsize x C", "\n", "\n", "", "", "if", "features", "is", "None", ":", "\n", "                ", "features", "=", "outputs", "# layers x batchsize x C", "\n", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "features", ")", ")", ":", "\n", "                    ", "features", "[", "i", "]", "=", "np", ".", "vstack", "(", "(", "features", "[", "i", "]", ",", "outputs", "[", "i", "]", ")", ")", "# stack each batch", "\n", "\n", "", "", "", "", "mean_list", "=", "[", "]", "\n", "std_list", "=", "[", "]", "\n", "for", "feature", "in", "features", ":", "\n", "        ", "ss", "=", "StandardScaler", "(", ")", "\n", "ss", ".", "fit", "(", "feature", ")", "\n", "mean_list", ".", "append", "(", "ss", ".", "mean_", ")", "\n", "std_list", ".", "append", "(", "ss", ".", "scale_", ")", "\n", "\n", "", "return", "mean_list", ",", "std_list", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.load_all_ood_detectors": [[345, 360], ["print", "utility.load_ood_detector", "ood_detectors.append"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.load_ood_detector"], ["", "def", "load_all_ood_detectors", "(", "model_name", ",", "ind_name", ")", ":", "\n", "    ", "ood_detectors", "=", "[", "]", "\n", "layers", "=", "[", "]", "\n", "if", "args", ".", "model", "==", "\"vgg16\"", ":", "\n", "        ", "layers", "=", "VGG16_LAYERS", "\n", "", "elif", "args", ".", "model", "==", "\"resnet34\"", ":", "\n", "        ", "layers", "=", "RESNET34_LAYERS", "\n", "", "elif", "args", ".", "model", "==", "\"densenet100\"", ":", "\n", "        ", "layers", "=", "DENSENET100_LAYERS", "\n", "\n", "", "for", "layer", "in", "layers", ":", "\n", "        ", "model", "=", "load_ood_detector", "(", "model_name", ",", "ind_name", ",", "layer", ")", "\n", "ood_detectors", ".", "append", "(", "model", ")", "\n", "", "print", "(", "\"OOD detectors are loaded.\"", ")", "\n", "return", "ood_detectors", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.rbf_kernel": [[362, 368], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "rbf_kernel", "(", "feature", ",", "support_vector", ",", "gamma", ")", ":", "\n", "    ", "norm", "=", "torch", ".", "norm", "(", "feature", "-", "support_vector", ",", "dim", "=", "1", ")", "\n", "norm", "=", "norm", "*", "norm", "\n", "result", "=", "-", "gamma", "*", "norm", "\n", "result", "=", "torch", ".", "exp", "(", "result", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.prepare_detector_inputs": [[370, 381], ["range", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len"], "function", ["None"], ["", "def", "prepare_detector_inputs", "(", "output", ",", "mean", ",", "std", ")", ":", "\n", "    ", "if", "len", "(", "output", ".", "shape", ")", "==", "4", ":", "\n", "        ", "output", "=", "torch", ".", "mean", "(", "output", ",", "dim", "=", "(", "2", ",", "3", ")", ")", "\n", "\n", "# normalize feature", "\n", "", "for", "i", "in", "range", "(", "output", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "output", "[", ":", ",", "i", "]", "=", "(", "output", "[", ":", ",", "i", "]", "-", "mean", "[", "i", "]", ")", "/", "std", "[", "i", "]", "\n", "\n", "", "X", "=", "output", "\n", "Y", "=", "torch", ".", "ones", "(", "len", "(", "X", ")", ")", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.co_train_loss": [[383, 422], ["torch.CrossEntropyLoss().cuda", "nn.CrossEntropyLoss().cuda.", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "print", "print", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "co_train.prepare_detector_inputs", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "range", "torch.CrossEntropyLoss", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "random.sample", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "random.sample", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "co_train.rbf_kernel"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.prepare_detector_inputs", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.co_train.rbf_kernel"], ["", "def", "co_train_loss", "(", "output_list", ",", "target", ",", "ood_detectors", ",", "mean_list", ",", "std_list", ")", ":", "\n", "    ", "classification_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "classification_loss", "=", "classification_criterion", "(", "output_list", "[", "-", "1", "]", ",", "target", ")", "\n", "\n", "detector_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "args", ".", "model", "==", "\"vgg16\"", ":", "\n", "        ", "detector_idx", "=", "VGG16_LAYERS", "\n", "", "elif", "args", ".", "model", "==", "\"resnet34\"", ":", "\n", "        ", "detector_idx", "=", "random", ".", "sample", "(", "RESNET34_LAYERS", ",", "10", ")", "\n", "", "elif", "args", ".", "model", "==", "\"densenet100\"", ":", "\n", "        ", "detector_idx", "=", "random", ".", "sample", "(", "RESNET34_LAYERS", ",", "10", ")", "\n", "\n", "", "for", "i", "in", "detector_idx", ":", "\n", "        ", "detector", "=", "ood_detectors", "[", "i", "]", "\n", "gamma", "=", "detector", ".", "gamma", "\n", "support_vectors", "=", "detector", ".", "support_vectors_", "\n", "dual_coef", "=", "detector", ".", "dual_coef_", "[", "0", "]", "\n", "\n", "gamma", "=", "torch", ".", "tensor", "(", "gamma", ")", ".", "cuda", "(", ")", "\n", "support_vectors", "=", "torch", ".", "tensor", "(", "support_vectors", ")", ".", "cuda", "(", ")", "\n", "dual_coef", "=", "torch", ".", "tensor", "(", "dual_coef", ")", ".", "cuda", "(", ")", "\n", "\n", "features", ",", "_", "=", "prepare_detector_inputs", "(", "output_list", "[", "i", "]", ",", "mean_list", "[", "i", "]", ",", "std_list", "[", "i", "]", ")", "\n", "\n", "current_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "cuda", "(", ")", "\n", "sum", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "cuda", "(", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "support_vectors", ")", ")", ":", "\n", "            ", "sum", "+=", "torch", ".", "sum", "(", "dual_coef", "[", "j", "]", "*", "rbf_kernel", "(", "features", ",", "support_vectors", "[", "j", "]", ",", "gamma", ")", ")", "\n", "\n", "", "current_loss", "+=", "sum", "\n", "detector_loss", "+=", "current_loss", "\n", "\n", "", "detector_final_loss", "=", "detector_loss", "/", "(", "2", "*", "len", "(", "detector_idx", ")", ")", "\n", "\n", "print", "(", "f\"Classification loss: {classification_loss:.4f}\"", ")", "\n", "print", "(", "f\"OOD detector loss: {-args.lambda_value * detector_final_loss:.4f}\"", ")", "\n", "loss", "=", "classification_loss", "-", "args", ".", "lambda_value", "*", "detector_final_loss", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.train_ood_detectors.main": [[32, 75], ["parser.parse_args", "min", "print", "os.path.exists", "os.makedirs", "open", "csv.writer", "csv.writer.writerow", "open", "csv.writer", "csv.writer.writerow", "torch.multiprocessing.cpu_count", "len", "torch.multiprocessing.Pool", "p.starmap_async().get", "p.close", "p.join", "utility.sort_csv_results", "open", "csv.writer", "csv.writer.writerow", "csv.writer.writerows", "p.starmap_async", "itertools.product"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.utility.sort_csv_results"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "basedir", "=", "f\"saved_models/{args.model}/{args.ind}_best/\"", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "basedir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "basedir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "best_param_filename", "=", "basedir", "+", "\"best_hyperparam.csv\"", "\n", "fields", "=", "[", "'Layer'", ",", "'nu'", ",", "'gamma'", ",", "'error'", "]", "\n", "with", "open", "(", "best_param_filename", ",", "'w'", ")", "as", "csvfile", ":", "\n", "        ", "csvwriter", "=", "csv", ".", "writer", "(", "csvfile", ")", "\n", "csvwriter", ".", "writerow", "(", "fields", ")", "\n", "\n", "", "fitting_process_filename", "=", "basedir", "+", "\"fitting_process.csv\"", "\n", "fields", "=", "[", "'Layer'", ",", "'nu'", ",", "'gamma'", ",", "'error'", ",", "'error_ind'", ",", "'error_ood'", "]", "\n", "with", "open", "(", "fitting_process_filename", ",", "'w'", ")", "as", "csvfile", ":", "\n", "        ", "csvwriter", "=", "csv", ".", "writer", "(", "csvfile", ")", "\n", "csvwriter", ".", "writerow", "(", "fields", ")", "\n", "\n", "", "layers", "=", "0", "\n", "if", "args", ".", "model", "==", "'vgg16'", ":", "\n", "        ", "layers", "=", "VGG16_LAYERS", "\n", "", "elif", "args", ".", "model", "==", "'resnet34'", ":", "\n", "        ", "layers", "=", "RESNET34_LAYERS", "\n", "", "elif", "args", ".", "model", "==", "'densenet100'", ":", "\n", "        ", "layers", "=", "DENSENET100_LAYERS", "\n", "\n", "", "cpus", "=", "cpu_count", "(", ")", "-", "1", "# spare one cpu to avoid locking up the system", "\n", "processes", "=", "min", "(", "cpus", ",", "len", "(", "layers", ")", ")", "\n", "\n", "with", "Pool", "(", "processes", "=", "processes", ")", "as", "p", ":", "\n", "        ", "p", ".", "starmap_async", "(", "find_best_ocsvm", ",", "product", "(", "[", "args", ".", "model", "]", ",", "[", "args", ".", "ind", "]", ",", "layers", ",", "[", "args", ".", "error_rate", "]", ")", ")", ".", "get", "(", ")", "\n", "p", ".", "close", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "\n", "", "for", "filename", "in", "[", "best_param_filename", ",", "fitting_process_filename", "]", ":", "\n", "        ", "headers", ",", "results", "=", "sort_csv_results", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'w'", ")", "as", "csvfile", ":", "\n", "            ", "csvwriter", "=", "csv", ".", "writer", "(", "csvfile", ")", "\n", "csvwriter", ".", "writerow", "(", "headers", ")", "\n", "csvwriter", ".", "writerows", "(", "results", ")", "\n", "\n", "", "", "print", "(", "\"All OOD detectors have been trained!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.train_ood_detectors.find_best_ocsvm": [[77, 143], ["print", "parser.parse_args", "random.seed", "numpy.array", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler.fit", "sklearn.preprocessing.StandardScaler.transform", "sklearn.model_selection.train_test_split", "self_adaptive_shifting.SelfAdaptiveShifting", "self_adaptive_shifting.SelfAdaptiveShifting.edge_pattern_detection", "self_adaptive_shifting.SelfAdaptiveShifting.generate_pseudo_outliers", "numpy.ones", "print", "numpy.std", "print", "sklearn.svm.OneClassSVM().fit", "joblib.dump", "print", "utility.get_inter_outputs", "numpy.ones", "len", "tqdm.tqdm", "open", "csv.writer", "csv.writer.writerow", "len", "sklearn.svm.OneClassSVM().fit", "sklearn.svm.OneClassSVM", "numpy.size", "numpy.mean", "numpy.mean", "print", "sklearn.svm.OneClassSVM", "open", "csv.writer", "csv.writer.writerow", "OneClassSVM().fit.predict", "OneClassSVM().fit.predict"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.self_adaptive_shifting.SelfAdaptiveShifting.edge_pattern_detection", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.None.self_adaptive_shifting.SelfAdaptiveShifting.generate_pseudo_outliers", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.get_inter_outputs"], ["", "def", "find_best_ocsvm", "(", "model_name", ",", "ds_name", ",", "layer_idx", ",", "ood_error_rate", ")", ":", "\n", "    ", "print", "(", "f\"layer {layer_idx} OOD detector training started!\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "X", "=", "np", ".", "array", "(", "get_inter_outputs", "(", "model_name", ",", "ds_name", ",", "ds_name", ",", "layer_idx", ",", "'train'", ")", ")", "\n", "\n", "ss", "=", "StandardScaler", "(", ")", "\n", "ss", ".", "fit", "(", "X", ")", "\n", "X", "=", "ss", ".", "transform", "(", "X", ")", "\n", "\n", "train_X", ",", "val_X", "=", "train_test_split", "(", "X", ",", "test_size", "=", "args", ".", "val_size", ",", "random_state", "=", "args", ".", "seed", ")", "\n", "\n", "self_adaptive_shifting", "=", "SelfAdaptiveShifting", "(", "val_X", ")", "\n", "self_adaptive_shifting", ".", "edge_pattern_detection", "(", "args", ".", "threshold", ")", "\n", "\n", "pseudo_outlier_X", "=", "self_adaptive_shifting", ".", "generate_pseudo_outliers", "(", ")", "\n", "pseudo_outlier_Y", "=", "-", "np", ".", "ones", "(", "len", "(", "pseudo_outlier_X", ")", ")", "\n", "\n", "val_Y", "=", "np", ".", "ones", "(", "len", "(", "val_X", ")", ")", "\n", "print", "(", "f\"layer {layer_idx} pseudo feature generated.\"", ")", "\n", "\n", "std", "=", "np", ".", "std", "(", "train_X", ")", "\n", "\n", "nu_candidates", "=", "[", "0.001", "]", "\n", "\n", "if", "args", ".", "model", "==", "\"densenet\"", ":", "\n", "        ", "gamma_candidates", "=", "[", "0.001", ",", "0.0025", ",", "0.005", ",", "0.01", ",", "0.025", ",", "0.05", ",", "0.1", ",", "0.25", ",", "0.5", ",", "1.0", "]", "\n", "", "else", ":", "\n", "        ", "gamma_candidates", "=", "[", "0.001", ",", "0.0025", ",", "0.005", ",", "0.01", ",", "0.025", ",", "0.05", ",", "0.1", "]", "\n", "\n", "", "best_err", "=", "1.0", "\n", "best_gamma", ",", "best_nu", "=", "1", "/", "(", "np", ".", "size", "(", "train_X", ",", "-", "1", ")", "*", "std", ")", ",", "0.5", "\n", "\n", "basedir", "=", "f\"saved_models/{model_name}/{ds_name}_best/\"", "\n", "\n", "print", "(", "f\"layer {layer_idx} fitting started.\"", ")", "\n", "for", "nu", "in", "nu_candidates", ":", "\n", "        ", "for", "gamma", "in", "tqdm", "(", "gamma_candidates", ")", ":", "\n", "            ", "model", "=", "OneClassSVM", "(", "gamma", "=", "gamma", ",", "nu", "=", "nu", ")", ".", "fit", "(", "train_X", ")", "\n", "err_o", "=", "1", "-", "np", ".", "mean", "(", "model", ".", "predict", "(", "pseudo_outlier_X", ")", "==", "pseudo_outlier_Y", ")", "\n", "err_t", "=", "1", "-", "np", ".", "mean", "(", "model", ".", "predict", "(", "val_X", ")", "==", "val_Y", ")", "\n", "err", "=", "ood_error_rate", "*", "err_o", "+", "(", "1.", "-", "ood_error_rate", ")", "*", "err_t", "\n", "if", "err", "<", "best_err", ":", "\n", "                ", "best_err", "=", "err", "\n", "best_gamma", "=", "gamma", "\n", "best_nu", "=", "nu", "\n", "print", "(", "f\"new best - layer {layer_idx}: nu-{nu}, gamma-{gamma}\"", ")", "\n", "\n", "filename", "=", "basedir", "+", "\"fitting_process.csv\"", "\n", "row", "=", "[", "layer_idx", "+", "1", ",", "best_nu", ",", "best_gamma", ",", "f'{best_err:.4f}'", ",", "f'{err_t:.4f}'", ",", "f'{err_o:.4f}'", "]", "\n", "with", "open", "(", "filename", ",", "'a'", ")", "as", "csvfile", ":", "\n", "                    ", "csvwriter", "=", "csv", ".", "writer", "(", "csvfile", ")", "\n", "csvwriter", ".", "writerow", "(", "row", ")", "\n", "\n", "", "", "", "", "filename", "=", "basedir", "+", "f\"{layer_idx}.joblib\"", "\n", "best_model", "=", "OneClassSVM", "(", "kernel", "=", "args", ".", "kernel", ",", "gamma", "=", "best_gamma", ",", "nu", "=", "best_nu", ")", ".", "fit", "(", "X", ")", "\n", "dump", "(", "best_model", ",", "filename", ")", "\n", "\n", "filename", "=", "basedir", "+", "\"best_hyperparam.csv\"", "\n", "row", "=", "[", "layer_idx", "+", "1", ",", "best_nu", ",", "best_gamma", ",", "f'{best_err:.4f}'", "]", "\n", "with", "open", "(", "filename", ",", "'a'", ")", "as", "csvfile", ":", "\n", "        ", "csvwriter", "=", "csv", ".", "writer", "(", "csvfile", ")", "\n", "csvwriter", ".", "writerow", "(", "row", ")", "\n", "\n", "", "print", "(", "f\"layer {layer_idx} OOD detector training finished!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.vgg.VGG.__init__": [[15, 28], ["torch.Module.__init__", "vgg.VGG._make_layers", "torch.Sequential", "torch.Sequential", "vgg.VGG._initialize_weights", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.__init__", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.vgg.VGG._make_layers", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.vgg.VGG._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "vgg_name", ",", "num_classes", ",", "fc_size", "=", "512", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", ")", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.vgg.VGG.forward": [[29, 34], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.vgg.VGG.intermediate_forward": [[35, 45], ["l.view", "vgg.VGG.classifier", "outputs.append", "list", "l", "l.size", "l.clone", "vgg.VGG.features.modules", "type", "outputs.append", "l.clone"], "methods", ["None"], ["", "def", "intermediate_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "for", "l", "in", "list", "(", "self", ".", "features", ".", "modules", "(", ")", ")", "[", "1", ":", "]", ":", "\n", "            ", "x", "=", "l", "(", "x", ")", "\n", "if", "type", "(", "l", ")", "==", "nn", ".", "Conv2d", ":", "\n", "                ", "outputs", ".", "append", "(", "x", ".", "clone", "(", ")", ")", "\n", "", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "outputs", ".", "append", "(", "x", ".", "clone", "(", ")", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.vgg.VGG.get_inter_outputs": [[46, 62], ["l.view", "vgg.VGG.classifier", "outputs.append", "list", "l", "l.size", "l.cpu().numpy", "vgg.VGG.features.modules", "type", "outputs.append", "l.cpu().numpy", "l.cpu", "l.cpu"], "methods", ["None"], ["", "def", "get_inter_outputs", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "for", "l", "in", "list", "(", "self", ".", "features", ".", "modules", "(", ")", ")", "[", "1", ":", "]", ":", "\n", "            ", "x", "=", "l", "(", "x", ")", "\n", "if", "type", "(", "l", ")", "==", "nn", ".", "Conv2d", ":", "\n", "                ", "outputs", ".", "append", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# outputs.append(x.cpu().numpy())", "\n", "", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# for l in list(self.classifier.modules())[1:]:", "\n", "#     x = l(x)", "\n", "# if type(l) == nn.Conv2d or type(l) == nn.MaxPool2d:", "\n", "#     outputs.append(x.cpu().numpy())", "\n", "# outputs.append(x.cpu().numpy())", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "outputs", ".", "append", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.vgg.VGG._initialize_weights": [[63, 75], ["vgg.VGG.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", "->", "None", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.vgg.VGG._make_layers": [[76, 89], ["torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "", "", "def", "_make_layers", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "x", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channels", "=", "x", "\n", "", "", "layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.vgg.vgg16": [[90, 92], ["vgg.VGG"], "function", ["None"], ["", "", "def", "vgg16", "(", ")", ":", "\n", "    ", "return", "VGG", "(", "'VGG16'", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.vgg.vgg16_cifar100": [[93, 95], ["vgg.VGG"], "function", ["None"], ["", "def", "vgg16_cifar100", "(", ")", ":", "\n", "    ", "return", "VGG", "(", "'VGG16'", ",", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.vgg.test": [[96, 101], ["vgg.VGG", "torch.randn", "torch.randn", "VGG.", "print", "net.size"], "function", ["None"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "VGG", "(", "'VGG16'", ",", "10", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.BasicBlock.__init__": [[17, 32], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.BasicBlock.forward": [[34, 40], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.BasicBlock.intermediate_forward": [[41, 60], ["resnet.BasicBlock.conv1", "outputs.append", "resnet.BasicBlock.bn1", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.conv2", "outputs.append", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu.clone", "torch.relu.clone"], "methods", ["None"], ["", "def", "intermediate_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "outputs", ".", "append", "(", "out", ".", "clone", "(", ")", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "# outputs.append(out.cpu().numpy())", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "# outputs.append(out.cpu().numpy())", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "outputs", ".", "append", "(", "out", ".", "clone", "(", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "# outputs.append(out.cpu().numpy())", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "# outputs.append(out.cpu().numpy())", "\n", "\n", "return", "out", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.BasicBlock.get_inter_outputs": [[62, 81], ["resnet.BasicBlock.conv1", "outputs.append", "resnet.BasicBlock.bn1", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.conv2", "outputs.append", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu.cpu().numpy", "torch.relu.cpu().numpy", "torch.relu.cpu", "torch.relu.cpu"], "methods", ["None"], ["", "def", "get_inter_outputs", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "outputs", ".", "append", "(", "out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "# outputs.append(out.cpu().numpy())", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "# outputs.append(out.cpu().numpy())", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "outputs", ".", "append", "(", "out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "# outputs.append(out.cpu().numpy())", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "# outputs.append(out.cpu().numpy())", "\n", "\n", "return", "out", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.Bottleneck.__init__": [[86, 103], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "\n", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.Bottleneck.forward": [[105, 112], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet.__init__": [[115, 127], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.__init__", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseBlock._make_layer", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseBlock._make_layer", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseBlock._make_layer", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet._make_layer": [[128, 135], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet.forward": [[136, 146], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet.intermediate_forward": [[147, 188], ["resnet.ResNet.conv1", "outputs.append", "resnet.ResNet.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "outputs.append", "resnet.ResNet.clone", "list", "list", "list", "list", "resnet.ResNet.size", "resnet.ResNet.clone", "resnet.ResNet.layer1.modules", "type", "l.intermediate_forward", "resnet.ResNet.layer2.modules", "type", "l.intermediate_forward", "resnet.ResNet.layer3.modules", "type", "l.intermediate_forward", "resnet.ResNet.layer4.modules", "type", "l.intermediate_forward", "outputs.append", "outputs.append", "outputs.append", "outputs.append"], "methods", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet.intermediate_forward", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet.intermediate_forward", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet.intermediate_forward", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet.intermediate_forward"], ["", "def", "intermediate_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "outputs", ".", "append", "(", "x", ".", "clone", "(", ")", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "# outputs.append(x.cpu().numpy())", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "# outputs.append(x.cpu().numpy())", "\n", "\n", "for", "l", "in", "list", "(", "self", ".", "layer1", ".", "modules", "(", ")", ")", "[", "1", ":", "]", ":", "\n", "            ", "if", "type", "(", "l", ")", "==", "BasicBlock", ":", "\n", "                ", "x", ",", "previous_outputs", "=", "l", ".", "intermediate_forward", "(", "x", ")", "\n", "for", "out", "in", "previous_outputs", ":", "\n", "                    ", "outputs", ".", "append", "(", "out", ")", "\n", "\n", "", "", "", "for", "l", "in", "list", "(", "self", ".", "layer2", ".", "modules", "(", ")", ")", "[", "1", ":", "]", ":", "\n", "            ", "if", "type", "(", "l", ")", "==", "BasicBlock", ":", "\n", "                ", "x", ",", "previous_outputs", "=", "l", ".", "intermediate_forward", "(", "x", ")", "\n", "for", "out", "in", "previous_outputs", ":", "\n", "                    ", "outputs", ".", "append", "(", "out", ")", "\n", "\n", "", "", "", "for", "l", "in", "list", "(", "self", ".", "layer3", ".", "modules", "(", ")", ")", "[", "1", ":", "]", ":", "\n", "            ", "if", "type", "(", "l", ")", "==", "BasicBlock", ":", "\n", "                ", "x", ",", "previous_outputs", "=", "l", ".", "intermediate_forward", "(", "x", ")", "\n", "for", "out", "in", "previous_outputs", ":", "\n", "                    ", "outputs", ".", "append", "(", "out", ")", "\n", "\n", "", "", "", "for", "l", "in", "list", "(", "self", ".", "layer4", ".", "modules", "(", ")", ")", "[", "1", ":", "]", ":", "\n", "            ", "if", "type", "(", "l", ")", "==", "BasicBlock", ":", "\n", "                ", "x", ",", "previous_outputs", "=", "l", ".", "intermediate_forward", "(", "x", ")", "\n", "for", "out", "in", "previous_outputs", ":", "\n", "                    ", "outputs", ".", "append", "(", "out", ")", "\n", "\n", "", "", "", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "4", ")", "\n", "# outputs.append(x.cpu().numpy())", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "outputs", ".", "append", "(", "x", ".", "clone", "(", ")", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet.get_inter_outputs": [[189, 230], ["resnet.ResNet.conv1", "outputs.append", "resnet.ResNet.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "outputs.append", "resnet.ResNet.cpu().numpy", "list", "list", "list", "list", "resnet.ResNet.size", "resnet.ResNet.cpu().numpy", "resnet.ResNet.layer1.modules", "type", "l.get_inter_outputs", "resnet.ResNet.layer2.modules", "type", "l.get_inter_outputs", "resnet.ResNet.layer3.modules", "type", "l.get_inter_outputs", "resnet.ResNet.layer4.modules", "type", "l.get_inter_outputs", "resnet.ResNet.cpu", "outputs.append", "outputs.append", "outputs.append", "outputs.append", "resnet.ResNet.cpu"], "methods", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.get_inter_outputs", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.get_inter_outputs", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.get_inter_outputs", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.get_inter_outputs"], ["", "def", "get_inter_outputs", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "outputs", ".", "append", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "# outputs.append(x.cpu().numpy())", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "# outputs.append(x.cpu().numpy())", "\n", "\n", "for", "l", "in", "list", "(", "self", ".", "layer1", ".", "modules", "(", ")", ")", "[", "1", ":", "]", ":", "\n", "            ", "if", "type", "(", "l", ")", "==", "BasicBlock", ":", "\n", "                ", "x", ",", "previous_outputs", "=", "l", ".", "get_inter_outputs", "(", "x", ")", "\n", "for", "out", "in", "previous_outputs", ":", "\n", "                    ", "outputs", ".", "append", "(", "out", ")", "\n", "\n", "", "", "", "for", "l", "in", "list", "(", "self", ".", "layer2", ".", "modules", "(", ")", ")", "[", "1", ":", "]", ":", "\n", "            ", "if", "type", "(", "l", ")", "==", "BasicBlock", ":", "\n", "                ", "x", ",", "previous_outputs", "=", "l", ".", "get_inter_outputs", "(", "x", ")", "\n", "for", "out", "in", "previous_outputs", ":", "\n", "                    ", "outputs", ".", "append", "(", "out", ")", "\n", "\n", "", "", "", "for", "l", "in", "list", "(", "self", ".", "layer3", ".", "modules", "(", ")", ")", "[", "1", ":", "]", ":", "\n", "            ", "if", "type", "(", "l", ")", "==", "BasicBlock", ":", "\n", "                ", "x", ",", "previous_outputs", "=", "l", ".", "get_inter_outputs", "(", "x", ")", "\n", "for", "out", "in", "previous_outputs", ":", "\n", "                    ", "outputs", ".", "append", "(", "out", ")", "\n", "\n", "", "", "", "for", "l", "in", "list", "(", "self", ".", "layer4", ".", "modules", "(", ")", ")", "[", "1", ":", "]", ":", "\n", "            ", "if", "type", "(", "l", ")", "==", "BasicBlock", ":", "\n", "                ", "x", ",", "previous_outputs", "=", "l", ".", "get_inter_outputs", "(", "x", ")", "\n", "for", "out", "in", "previous_outputs", ":", "\n", "                    ", "outputs", ".", "append", "(", "out", ")", "\n", "\n", "", "", "", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "4", ")", "\n", "# outputs.append(x.cpu().numpy())", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "outputs", ".", "append", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet18": [[232, 234], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet34": [[236, 238], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet34_cifar100": [[240, 242], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34_cifar100", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet50": [[244, 246], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet101": [[248, 250], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet152": [[252, 254], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.test": [[256, 266], ["ResNet34_cifar100().cuda", "ResNet34_cifar100().cuda.eval", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "ResNet34_cifar100().cuda.get_inter_outputs", "ResNet34_cifar100().cuda.", "resnet.ResNet34_cifar100", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.get_inter_outputs", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.resnet.ResNet34_cifar100"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet34_cifar100", "(", ")", ".", "cuda", "(", ")", "\n", "# summary(net, (3, 32, 32))", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", ".", "cuda", "(", ")", "\n", "out", ",", "outputs", "=", "net", ".", "get_inter_outputs", "(", "x", ")", "\n", "out2", "=", "net", "(", "x", ")", "\n", "", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.BasicBlock.__init__": [[8, 15], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.BasicBlock.forward": [[16, 21], ["densenet.BasicBlock.conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "densenet.BasicBlock.relu", "torch.dropout", "torch.dropout", "torch.dropout", "densenet.BasicBlock.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", ",", "out", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.BottleneckBlock.__init__": [[24, 35], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BottleneckBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inter_planes", "=", "out_planes", "*", "4", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "inter_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "inter_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "inter_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.BottleneckBlock.forward": [[36, 44], ["densenet.BottleneckBlock.conv1", "densenet.BottleneckBlock.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "densenet.BottleneckBlock.relu", "torch.dropout", "torch.dropout", "torch.dropout", "densenet.BottleneckBlock.relu", "torch.dropout", "torch.dropout", "torch.dropout", "densenet.BottleneckBlock.bn1", "densenet.BottleneckBlock.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "inplace", "=", "False", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "self", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "inplace", "=", "False", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", ",", "out", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.BottleneckBlock.get_inter_outputs": [[45, 56], ["densenet.BottleneckBlock.conv1", "outputs.append", "densenet.BottleneckBlock.conv2", "outputs.append", "densenet.BottleneckBlock.relu", "torch.dropout.cpu().numpy", "torch.dropout", "torch.dropout", "torch.dropout", "densenet.BottleneckBlock.relu", "torch.dropout.cpu().numpy", "torch.dropout", "torch.dropout", "torch.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "densenet.BottleneckBlock.bn1", "densenet.BottleneckBlock.bn2", "torch.dropout.cpu", "torch.dropout.cpu"], "methods", ["None"], ["", "def", "get_inter_outputs", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "out", "=", "self", ".", "conv1", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "outputs", ".", "append", "(", "out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "inplace", "=", "False", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "self", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "outputs", ".", "append", "(", "out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "inplace", "=", "False", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", ",", "out", "]", ",", "1", ")", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.TransitionBlock.__init__": [[59, 66], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "TransitionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.TransitionBlock.forward": [[67, 72], ["densenet.TransitionBlock.conv1", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet.TransitionBlock.relu", "torch.dropout", "torch.dropout", "torch.dropout", "densenet.TransitionBlock.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "inplace", "=", "False", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.TransitionBlock.get_inter_outputs": [[73, 79], ["densenet.TransitionBlock.conv1", "densenet.TransitionBlock.relu", "torch.dropout.cpu().numpy", "torch.dropout", "torch.dropout", "torch.dropout", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet.TransitionBlock.bn1", "torch.dropout.cpu"], "methods", ["None"], ["", "def", "get_inter_outputs", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "outputs", "=", "[", "out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "inplace", "=", "False", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseBlock.__init__": [[82, 85], ["torch.Module.__init__", "densenet.DenseBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.__init__", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "growth_rate", ",", "block", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "growth_rate", ",", "nb_layers", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseBlock._make_layer": [[86, 91], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "growth_rate", ",", "nb_layers", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nb_layers", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "in_planes", "+", "i", "*", "growth_rate", ",", "growth_rate", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseBlock.forward": [[92, 94], ["densenet.DenseBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseBlock.get_inter_outputs": [[95, 103], ["list", "densenet.DenseBlock.layer.modules", "type", "l.get_inter_outputs", "outputs.append"], "methods", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.get_inter_outputs"], ["", "def", "get_inter_outputs", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "for", "l", "in", "list", "(", "self", ".", "layer", ".", "modules", "(", ")", ")", "[", "1", ":", "]", ":", "\n", "            ", "if", "type", "(", "l", ")", "==", "BottleneckBlock", ":", "\n", "                ", "x", ",", "previous_outputs", "=", "l", ".", "get_inter_outputs", "(", "x", ")", "\n", "for", "out", "in", "previous_outputs", ":", "\n", "                    ", "outputs", ".", "append", "(", "out", ")", "\n", "", "", "", "return", "x", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.__init__": [[106, 147], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet.DenseBlock", "int", "densenet.TransitionBlock", "int", "densenet.DenseBlock", "int", "densenet.TransitionBlock", "int", "densenet.DenseBlock", "int", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "densenet.DenseNet.modules", "int", "math.floor", "int", "math.floor", "isinstance", "math.floor", "math.floor", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "growth_rate", "=", "12", ",", "\n", "reduction", "=", "0.5", ",", "bottleneck", "=", "True", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", "=", "2", "*", "growth_rate", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "3", "\n", "if", "bottleneck", "==", "True", ":", "\n", "            ", "n", "=", "n", "/", "2", "\n", "block", "=", "BottleneckBlock", "\n", "", "else", ":", "\n", "            ", "block", "=", "BasicBlock", "\n", "# 1st conv before any dense block", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "DenseBlock", "(", "n", ",", "in_planes", ",", "growth_rate", ",", "block", ",", "dropRate", ")", "\n", "in_planes", "=", "int", "(", "in_planes", "+", "n", "*", "growth_rate", ")", "\n", "self", ".", "trans1", "=", "TransitionBlock", "(", "in_planes", ",", "int", "(", "math", ".", "floor", "(", "in_planes", "*", "reduction", ")", ")", ",", "dropRate", "=", "dropRate", ")", "\n", "in_planes", "=", "int", "(", "math", ".", "floor", "(", "in_planes", "*", "reduction", ")", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "DenseBlock", "(", "n", ",", "in_planes", ",", "growth_rate", ",", "block", ",", "dropRate", ")", "\n", "in_planes", "=", "int", "(", "in_planes", "+", "n", "*", "growth_rate", ")", "\n", "self", ".", "trans2", "=", "TransitionBlock", "(", "in_planes", ",", "int", "(", "math", ".", "floor", "(", "in_planes", "*", "reduction", ")", ")", ",", "dropRate", "=", "dropRate", ")", "\n", "in_planes", "=", "int", "(", "math", ".", "floor", "(", "in_planes", "*", "reduction", ")", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "DenseBlock", "(", "n", ",", "in_planes", ",", "growth_rate", ",", "block", ",", "dropRate", ")", "\n", "in_planes", "=", "int", "(", "in_planes", "+", "n", "*", "growth_rate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_planes", ",", "num_classes", ")", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.forward": [[148, 158], ["densenet.DenseNet.conv1", "densenet.DenseNet.trans1", "densenet.DenseNet.trans2", "densenet.DenseNet.block3", "densenet.DenseNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet.DenseNet.view", "densenet.DenseNet.fc", "densenet.DenseNet.block1", "densenet.DenseNet.block2", "densenet.DenseNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "block1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "block2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "in_planes", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.get_inter_outputs": [[160, 192], ["densenet.DenseNet.conv1", "outputs.append", "densenet.DenseNet.block1.get_inter_outputs", "densenet.DenseNet.trans1.get_inter_outputs", "densenet.DenseNet.block2.get_inter_outputs", "densenet.DenseNet.trans2.get_inter_outputs", "densenet.DenseNet.block3.get_inter_outputs", "densenet.DenseNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet.DenseNet.view", "densenet.DenseNet.fc", "outputs.append", "densenet.DenseNet.cpu().numpy", "outputs.append", "outputs.append", "outputs.append", "outputs.append", "outputs.append", "densenet.DenseNet.bn1", "densenet.DenseNet.cpu().numpy", "densenet.DenseNet.cpu", "densenet.DenseNet.cpu"], "methods", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.get_inter_outputs", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.get_inter_outputs", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.get_inter_outputs", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.get_inter_outputs", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.get_inter_outputs"], ["", "def", "get_inter_outputs", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "outputs", ".", "append", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "x", ",", "previous_outputs", "=", "self", ".", "block1", ".", "get_inter_outputs", "(", "x", ")", "\n", "for", "out", "in", "previous_outputs", ":", "\n", "            ", "outputs", ".", "append", "(", "out", ")", "\n", "\n", "", "x", ",", "previous_outputs", "=", "self", ".", "trans1", ".", "get_inter_outputs", "(", "x", ")", "\n", "for", "out", "in", "previous_outputs", ":", "\n", "            ", "outputs", ".", "append", "(", "out", ")", "\n", "\n", "", "x", ",", "previous_outputs", "=", "self", ".", "block2", ".", "get_inter_outputs", "(", "x", ")", "\n", "for", "out", "in", "previous_outputs", ":", "\n", "            ", "outputs", ".", "append", "(", "out", ")", "\n", "\n", "", "x", ",", "previous_outputs", "=", "self", ".", "trans2", ".", "get_inter_outputs", "(", "x", ")", "\n", "for", "out", "in", "previous_outputs", ":", "\n", "            ", "outputs", ".", "append", "(", "out", ")", "\n", "\n", "", "x", ",", "previous_outputs", "=", "self", ".", "block3", ".", "get_inter_outputs", "(", "x", ")", "\n", "for", "out", "in", "previous_outputs", ":", "\n", "            ", "outputs", ".", "append", "(", "out", ")", "\n", "\n", "", "x", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "8", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "in_planes", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "outputs", ".", "append", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet100": [[194, 196], ["densenet.DenseNet"], "function", ["None"], ["", "", "def", "DenseNet100", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "100", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet100_cifar100": [[198, 200], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet100_cifar100", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "100", ",", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.test": [[202, 212], ["DenseNet100_cifar100().cuda", "DenseNet100_cifar100().cuda.eval", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "DenseNet100_cifar100().cuda.get_inter_outputs", "DenseNet100_cifar100().cuda.", "densenet.DenseNet100_cifar100", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet.get_inter_outputs", "home.repos.pwc.inspect_result.haoliangwang86_la-ood.backbone_models.densenet.DenseNet100_cifar100"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "DenseNet100_cifar100", "(", ")", ".", "cuda", "(", ")", "\n", "# summary(net, (3, 32, 32))", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", ".", "cuda", "(", ")", "\n", "outputs", "=", "net", ".", "get_inter_outputs", "(", "x", ")", "\n", "out2", "=", "net", "(", "x", ")", "\n", "", "print", "(", ")", "\n", "\n"]]}