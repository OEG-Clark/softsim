{"home.repos.pwc.inspect_result.YichiZhang98_DTML.code.test_util.getLargestCC": [[12, 17], ["skimage.measure.label", "skimage.measure.label.max", "numpy.argmax", "numpy.bincount", "numpy.np.float32"], "function", ["None"], ["def", "getLargestCC", "(", "segmentation", ")", ":", "\n", "    ", "labels", "=", "label", "(", "segmentation", ")", "\n", "assert", "(", "labels", ".", "max", "(", ")", "!=", "0", ")", "# assume at least 1 CC", "\n", "largestCC", "=", "labels", "==", "np", ".", "argmax", "(", "np", ".", "bincount", "(", "labels", ".", "flat", ")", "[", "1", ":", "]", ")", "+", "1", "\n", "return", "largestCC", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.code.test_util.test_all_case": [[19, 58], ["print", "tqdm.tqdm", "h5py.File", "test_util.test_single_case", "numpy.asarray", "len", "preproc_fn", "test_util.getLargestCC", "numpy.sum", "test_util.calculate_metric_percase", "print", "nibabel.save", "nibabel.save", "nibabel.save", "nibabel.Nifti1Image", "nibabel.Nifti1Image", "nibabel.Nifti1Image", "getLargestCC.astype", "numpy.eye", "image[].astype", "numpy.eye", "label[].astype", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.code.test_util.test_single_case", "home.repos.pwc.inspect_result.YichiZhang98_DTML.code.test_util.getLargestCC", "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.metrics.calculate_metric_percase"], ["", "def", "test_all_case", "(", "net_seg", ",", "net_dis", ",", "image_list", ",", "num_classes", ",", "patch_size", "=", "(", "112", ",", "112", ",", "80", ")", ",", "stride_xy", "=", "18", ",", "stride_z", "=", "4", ",", "save_result", "=", "True", ",", "test_save_path", "=", "None", ",", "preproc_fn", "=", "None", ",", "metric_detail", "=", "0", ",", "nms", "=", "0", ")", ":", "\n", "    ", "total_metric", "=", "0.0", "\n", "loader", "=", "tqdm", "(", "image_list", ")", "if", "not", "metric_detail", "else", "image_list", "\n", "ith", "=", "0", "\n", "for", "image_path", "in", "loader", ":", "\n", "# id = image_path.split('/')[-2]", "\n", "        ", "h5f", "=", "h5py", ".", "File", "(", "image_path", ",", "'r'", ")", "\n", "image", "=", "h5f", "[", "'image'", "]", "[", ":", "]", "\n", "label", "=", "h5f", "[", "'label'", "]", "[", ":", "]", "\n", "if", "preproc_fn", "is", "not", "None", ":", "\n", "            ", "image", "=", "preproc_fn", "(", "image", ")", "\n", "", "prediction", ",", "score_map", "=", "test_single_case", "(", "\n", "net_seg", ",", "net_dis", ",", "image", ",", "stride_xy", ",", "stride_z", ",", "patch_size", ",", "num_classes", "=", "num_classes", ")", "\n", "if", "nms", ":", "\n", "            ", "prediction", "=", "getLargestCC", "(", "prediction", ")", "\n", "\n", "", "if", "np", ".", "sum", "(", "prediction", ")", "==", "0", ":", "\n", "            ", "single_metric", "=", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "single_metric", "=", "calculate_metric_percase", "(", "prediction", ",", "label", "[", ":", "]", ")", "\n", "", "if", "metric_detail", ":", "\n", "            ", "print", "(", "'%02d,\\t%.5f, %.5f, %.5f, %.5f'", "%", "(", "\n", "ith", ",", "single_metric", "[", "0", "]", ",", "single_metric", "[", "1", "]", ",", "single_metric", "[", "2", "]", ",", "single_metric", "[", "3", "]", ")", ")", "\n", "\n", "", "total_metric", "+=", "np", ".", "asarray", "(", "single_metric", ")", "\n", "\n", "if", "save_result", ":", "\n", "            ", "nib", ".", "save", "(", "nib", ".", "Nifti1Image", "(", "prediction", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "np", ".", "eye", "(", "4", ")", ")", ",", "test_save_path", "+", "\"%02d_pred.nii.gz\"", "%", "ith", ")", "\n", "nib", ".", "save", "(", "nib", ".", "Nifti1Image", "(", "image", "[", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", ",", "np", ".", "eye", "(", "\n", "4", ")", ")", ",", "test_save_path", "+", "\"%02d_img.nii.gz\"", "%", "ith", ")", "\n", "nib", ".", "save", "(", "nib", ".", "Nifti1Image", "(", "label", "[", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", ",", "np", ".", "eye", "(", "\n", "4", ")", ")", ",", "test_save_path", "+", "\"%02d_gt.nii.gz\"", "%", "ith", ")", "\n", "", "ith", "+=", "1", "\n", "\n", "", "avg_metric", "=", "total_metric", "/", "len", "(", "image_list", ")", "\n", "print", "(", "'average metric is {}'", ".", "format", "(", "avg_metric", ")", ")", "\n", "\n", "return", "avg_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.code.test_util.test_single_case": [[60, 131], ["numpy.zeros().astype", "numpy.zeros().astype", "range", "numpy.pad", "math.ceil", "math.ceil", "math.ceil", "min", "range", "numpy.expand_dims", "numpy.zeros", "numpy.zeros", "min", "range", "min", "numpy.expand_dims().astype", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.sigmoid.cpu().data.numpy", "torch.sigmoid.cpu().data.numpy", "torch.no_grad", "torch.no_grad", "net_seg", "net_seg", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "numpy.expand_dims", "torch.from_numpy", "torch.from_numpy", "numpy.expand_dims", "torch.sigmoid.cpu", "torch.sigmoid.cpu"], "function", ["None"], ["", "def", "test_single_case", "(", "net_seg", ",", "net_dis", ",", "image", ",", "stride_xy", ",", "stride_z", ",", "patch_size", ",", "num_classes", "=", "1", ")", ":", "\n", "    ", "w", ",", "h", ",", "d", "=", "image", ".", "shape", "\n", "\n", "# if the size of image is less than patch_size, then padding it", "\n", "add_pad", "=", "False", "\n", "if", "w", "<", "patch_size", "[", "0", "]", ":", "\n", "        ", "w_pad", "=", "patch_size", "[", "0", "]", "-", "w", "\n", "add_pad", "=", "True", "\n", "", "else", ":", "\n", "        ", "w_pad", "=", "0", "\n", "", "if", "h", "<", "patch_size", "[", "1", "]", ":", "\n", "        ", "h_pad", "=", "patch_size", "[", "1", "]", "-", "h", "\n", "add_pad", "=", "True", "\n", "", "else", ":", "\n", "        ", "h_pad", "=", "0", "\n", "", "if", "d", "<", "patch_size", "[", "2", "]", ":", "\n", "        ", "d_pad", "=", "patch_size", "[", "2", "]", "-", "d", "\n", "add_pad", "=", "True", "\n", "", "else", ":", "\n", "        ", "d_pad", "=", "0", "\n", "", "wl_pad", ",", "wr_pad", "=", "w_pad", "//", "2", ",", "w_pad", "-", "w_pad", "//", "2", "\n", "hl_pad", ",", "hr_pad", "=", "h_pad", "//", "2", ",", "h_pad", "-", "h_pad", "//", "2", "\n", "dl_pad", ",", "dr_pad", "=", "d_pad", "//", "2", ",", "d_pad", "-", "d_pad", "//", "2", "\n", "if", "add_pad", ":", "\n", "        ", "image", "=", "np", ".", "pad", "(", "image", ",", "[", "(", "wl_pad", ",", "wr_pad", ")", ",", "(", "hl_pad", ",", "hr_pad", ")", ",", "\n", "(", "dl_pad", ",", "dr_pad", ")", "]", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "", "ww", ",", "hh", ",", "dd", "=", "image", ".", "shape", "\n", "\n", "sx", "=", "math", ".", "ceil", "(", "(", "ww", "-", "patch_size", "[", "0", "]", ")", "/", "stride_xy", ")", "+", "1", "\n", "sy", "=", "math", ".", "ceil", "(", "(", "hh", "-", "patch_size", "[", "1", "]", ")", "/", "stride_xy", ")", "+", "1", "\n", "sz", "=", "math", ".", "ceil", "(", "(", "dd", "-", "patch_size", "[", "2", "]", ")", "/", "stride_z", ")", "+", "1", "\n", "# print(\"{}, {}, {}\".format(sx, sy, sz))", "\n", "score_map", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", ")", "+", "image", ".", "shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "cnt", "=", "np", ".", "zeros", "(", "image", ".", "shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "for", "x", "in", "range", "(", "0", ",", "sx", ")", ":", "\n", "        ", "xs", "=", "min", "(", "stride_xy", "*", "x", ",", "ww", "-", "patch_size", "[", "0", "]", ")", "\n", "for", "y", "in", "range", "(", "0", ",", "sy", ")", ":", "\n", "            ", "ys", "=", "min", "(", "stride_xy", "*", "y", ",", "hh", "-", "patch_size", "[", "1", "]", ")", "\n", "for", "z", "in", "range", "(", "0", ",", "sz", ")", ":", "\n", "                ", "zs", "=", "min", "(", "stride_z", "*", "z", ",", "dd", "-", "patch_size", "[", "2", "]", ")", "\n", "test_patch", "=", "image", "[", "xs", ":", "xs", "+", "patch_size", "[", "0", "]", ",", "\n", "ys", ":", "ys", "+", "patch_size", "[", "1", "]", ",", "zs", ":", "zs", "+", "patch_size", "[", "2", "]", "]", "\n", "test_patch", "=", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "\n", "test_patch", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "test_patch", "=", "torch", ".", "from_numpy", "(", "test_patch", ")", ".", "cuda", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "y1_dis", ",", "y1", "=", "net_seg", "(", "test_patch", ")", "\n", "y2", ",", "y2_seg", "=", "net_seg", "(", "test_patch", ")", "\n", "# ensemble", "\n", "y", "=", "torch", ".", "sigmoid", "(", "y1", ")", "\n", "dis_to_mask", "=", "torch", ".", "sigmoid", "(", "-", "1500", "*", "y2", ")", "\n", "\n", "", "y", "=", "y", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "dis2mask", "=", "dis_to_mask", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "y", "=", "y", "[", "0", ",", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "dis2mask", "=", "dis2mask", "[", "0", ",", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "score_map", "[", ":", ",", "xs", ":", "xs", "+", "patch_size", "[", "0", "]", ",", "ys", ":", "ys", "+", "patch_size", "[", "1", "]", ",", "zs", ":", "zs", "+", "patch_size", "[", "2", "]", "]", "=", "score_map", "[", ":", ",", "xs", ":", "xs", "+", "patch_size", "[", "0", "]", ",", "ys", ":", "ys", "+", "patch_size", "[", "1", "]", ",", "zs", ":", "zs", "+", "patch_size", "[", "2", "]", "]", "+", "y", "\n", "cnt", "[", "xs", ":", "xs", "+", "patch_size", "[", "0", "]", ",", "ys", ":", "ys", "+", "patch_size", "[", "1", "]", ",", "zs", ":", "zs", "+", "patch_size", "[", "2", "]", "]", "=", "cnt", "[", "xs", ":", "xs", "+", "patch_size", "[", "0", "]", ",", "ys", ":", "ys", "+", "patch_size", "[", "1", "]", ",", "zs", ":", "zs", "+", "patch_size", "[", "2", "]", "]", "+", "1", "\n", "", "", "", "score_map", "=", "score_map", "/", "np", ".", "expand_dims", "(", "cnt", ",", "axis", "=", "0", ")", "\n", "label_map", "=", "(", "score_map", "[", "0", "]", ">", "0.5", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "if", "add_pad", ":", "\n", "        ", "label_map", "=", "label_map", "[", "wl_pad", ":", "wl_pad", "+", "w", ",", "\n", "hl_pad", ":", "hl_pad", "+", "h", ",", "dl_pad", ":", "dl_pad", "+", "d", "]", "\n", "score_map", "=", "score_map", "[", ":", ",", "wl_pad", ":", "wl_pad", "+", "\n", "w", ",", "hl_pad", ":", "hl_pad", "+", "h", ",", "dl_pad", ":", "dl_pad", "+", "d", "]", "\n", "", "return", "label_map", ",", "score_map", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.code.test_util.cal_dice": [[133, 146], ["numpy.zeros", "range", "prediction_tmp.astype.astype", "label_tmp.astype.astype", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "cal_dice", "(", "prediction", ",", "label", ",", "num", "=", "2", ")", ":", "\n", "    ", "total_dice", "=", "np", ".", "zeros", "(", "num", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "num", ")", ":", "\n", "        ", "prediction_tmp", "=", "(", "prediction", "==", "i", ")", "\n", "label_tmp", "=", "(", "label", "==", "i", ")", "\n", "prediction_tmp", "=", "prediction_tmp", ".", "astype", "(", "np", ".", "float", ")", "\n", "label_tmp", "=", "label_tmp", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n", "dice", "=", "2", "*", "np", ".", "sum", "(", "prediction_tmp", "*", "label_tmp", ")", "/", "(", "np", ".", "sum", "(", "prediction_tmp", ")", "+", "np", ".", "sum", "(", "label_tmp", ")", ")", "\n", "total_dice", "[", "i", "-", "1", "]", "+=", "dice", "\n", "\n", "", "return", "total_dice", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.code.test_util.calculate_metric_percase": [[148, 155], ["medpy.metric.binary.dc", "medpy.metric.binary.jc", "medpy.metric.binary.hd95", "medpy.metric.binary.asd"], "function", ["None"], ["", "def", "calculate_metric_percase", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "dice", "=", "metric", ".", "binary", ".", "dc", "(", "pred", ",", "gt", ")", "\n", "jc", "=", "metric", ".", "binary", ".", "jc", "(", "pred", ",", "gt", ")", "\n", "hd", "=", "metric", ".", "binary", ".", "hd95", "(", "pred", ",", "gt", ")", "\n", "asd", "=", "metric", ".", "binary", ".", "asd", "(", "pred", ",", "gt", ")", "\n", "\n", "return", "dice", ",", "jc", ",", "hd", ",", "asd", "\n", "", ""]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.code.train_la_dtml.get_current_consistency_weight": [[72, 74], ["utils.ramps.sigmoid_rampup"], "function", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.ramps.sigmoid_rampup"], ["def", "get_current_consistency_weight", "(", "epoch", ")", ":", "\n", "    ", "return", "args", ".", "consistency", "*", "ramps", ".", "sigmoid_rampup", "(", "epoch", ",", "args", ".", "consistency_rampup", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.code.test_LA.test_calculate_metric": [[36, 57], ["networks.vnet_sdf.VNet().cuda", "networks.vnet_sdf.VNet().cuda", "os.path.join", "os.path.join", "VNet().cuda.load_state_dict", "VNet().cuda.load_state_dict", "print", "VNet().cuda.eval", "VNet().cuda.eval", "test_util.test_all_case", "torch.load", "torch.load", "networks.vnet_sdf.VNet", "networks.vnet_sdf.VNet"], "function", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.code.test_util.test_all_case"], ["def", "test_calculate_metric", "(", ")", ":", "\n", "    ", "net_seg", "=", "VNet", "(", "n_channels", "=", "1", ",", "n_classes", "=", "num_classes", "-", "1", ",", "\n", "normalization", "=", "'batchnorm'", ",", "has_dropout", "=", "False", ")", ".", "cuda", "(", ")", "\n", "net_dis", "=", "VNet", "(", "n_channels", "=", "1", ",", "n_classes", "=", "num_classes", "-", "1", ",", "\n", "normalization", "=", "'batchnorm'", ",", "has_dropout", "=", "False", ")", ".", "cuda", "(", ")", "\n", "save_mode_path_seg", "=", "os", ".", "path", ".", "join", "(", "snapshot_path", ",", "'best_model_seg.pth'", ")", "\n", "save_mode_path_dis", "=", "os", ".", "path", ".", "join", "(", "snapshot_path", ",", "'best_model_dis.pth'", ")", "\n", "\n", "net_seg", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_mode_path_seg", ")", ")", "\n", "net_dis", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_mode_path_dis", ")", ")", "\n", "\n", "print", "(", "\"init weight from {}\"", ".", "format", "(", "save_mode_path_seg", "+", "save_mode_path_dis", ")", ")", "\n", "net_seg", ".", "eval", "(", ")", "\n", "net_dis", ".", "eval", "(", ")", "\n", "\n", "avg_metric", "=", "test_all_case", "(", "net_seg", ",", "net_dis", ",", "image_list", ",", "num_classes", "=", "num_classes", ",", "\n", "patch_size", "=", "(", "112", ",", "112", ",", "80", ")", ",", "stride_xy", "=", "18", ",", "stride_z", "=", "4", ",", "\n", "save_result", "=", "True", ",", "test_save_path", "=", "test_save_path", ",", "\n", "metric_detail", "=", "FLAGS", ".", "detail", ",", "nms", "=", "FLAGS", ".", "nms", ")", "\n", "\n", "return", "avg_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.metrics.cal_dice": [[13, 25], ["numpy.zeros", "range", "prediction_tmp.astype.astype", "label_tmp.astype.astype", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["def", "cal_dice", "(", "prediction", ",", "label", ",", "num", "=", "2", ")", ":", "\n", "    ", "total_dice", "=", "np", ".", "zeros", "(", "num", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "num", ")", ":", "\n", "        ", "prediction_tmp", "=", "(", "prediction", "==", "i", ")", "\n", "label_tmp", "=", "(", "label", "==", "i", ")", "\n", "prediction_tmp", "=", "prediction_tmp", ".", "astype", "(", "np", ".", "float", ")", "\n", "label_tmp", "=", "label_tmp", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n", "dice", "=", "2", "*", "np", ".", "sum", "(", "prediction_tmp", "*", "label_tmp", ")", "/", "(", "np", ".", "sum", "(", "prediction_tmp", ")", "+", "np", ".", "sum", "(", "label_tmp", ")", ")", "\n", "total_dice", "[", "i", "-", "1", "]", "+=", "dice", "\n", "\n", "", "return", "total_dice", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.metrics.calculate_metric_percase": [[27, 34], ["medpy.metric.binary.dc", "medpy.metric.binary.jc", "medpy.metric.binary.hd95", "medpy.metric.binary.asd"], "function", ["None"], ["", "def", "calculate_metric_percase", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "dc", "=", "metric", ".", "binary", ".", "dc", "(", "pred", ",", "gt", ")", "\n", "jc", "=", "metric", ".", "binary", ".", "jc", "(", "pred", ",", "gt", ")", "\n", "hd", "=", "metric", ".", "binary", ".", "hd95", "(", "pred", ",", "gt", ")", "\n", "asd", "=", "metric", ".", "binary", ".", "asd", "(", "pred", ",", "gt", ")", "\n", "\n", "return", "dc", ",", "jc", ",", "hd", ",", "asd", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.metrics.dice": [[36, 48], ["input.clone().view", "target.clone().view", "input.clone", "target.clone", "input.clone().view.sum", "target.clone().view.sum"], "function", ["None"], ["", "def", "dice", "(", "input", ",", "target", ",", "ignore_index", "=", "None", ")", ":", "\n", "    ", "smooth", "=", "1.", "\n", "# using clone, so that it can do change to original target.", "\n", "iflat", "=", "input", ".", "clone", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "tflat", "=", "target", ".", "clone", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "ignore_index", "is", "not", "None", ":", "\n", "        ", "mask", "=", "tflat", "==", "ignore_index", "\n", "tflat", "[", "mask", "]", "=", "0", "\n", "iflat", "[", "mask", "]", "=", "0", "\n", "", "intersection", "=", "(", "iflat", "*", "tflat", ")", ".", "sum", "(", ")", "\n", "\n", "return", "(", "2.", "*", "intersection", "+", "smooth", ")", "/", "(", "iflat", ".", "sum", "(", ")", "+", "tflat", ".", "sum", "(", ")", "+", "smooth", ")", "", "", ""]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.ramps.sigmoid_rampup": [[19, 27], ["numpy.clip", "float", "numpy.exp"], "function", ["None"], ["def", "sigmoid_rampup", "(", "current", ",", "rampup_length", ")", ":", "\n", "    ", "\"\"\"Exponential rampup from https://arxiv.org/abs/1610.02242\"\"\"", "\n", "if", "rampup_length", "==", "0", ":", "\n", "        ", "return", "1.0", "\n", "", "else", ":", "\n", "        ", "current", "=", "np", ".", "clip", "(", "current", ",", "0.0", ",", "rampup_length", ")", "\n", "phase", "=", "1.0", "-", "current", "/", "rampup_length", "\n", "return", "float", "(", "np", ".", "exp", "(", "-", "5.0", "*", "phase", "*", "phase", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.ramps.linear_rampup": [[29, 36], ["None"], "function", ["None"], ["", "", "def", "linear_rampup", "(", "current", ",", "rampup_length", ")", ":", "\n", "    ", "\"\"\"Linear rampup\"\"\"", "\n", "assert", "current", ">=", "0", "and", "rampup_length", ">=", "0", "\n", "if", "current", ">=", "rampup_length", ":", "\n", "        ", "return", "1.0", "\n", "", "else", ":", "\n", "        ", "return", "current", "/", "rampup_length", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.ramps.cosine_rampdown": [[38, 42], ["float", "numpy.cos"], "function", ["None"], ["", "", "def", "cosine_rampdown", "(", "current", ",", "rampdown_length", ")", ":", "\n", "    ", "\"\"\"Cosine rampdown from https://arxiv.org/abs/1608.03983\"\"\"", "\n", "assert", "0", "<=", "current", "<=", "rampdown_length", "\n", "return", "float", "(", ".5", "*", "(", "np", ".", "cos", "(", "np", ".", "pi", "*", "current", "/", "rampdown_length", ")", "+", "1", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.losses_2.compute_dtm": [[7, 42], ["numpy.zeros", "range", "img_gt[].astype", "img_gt[].astype.any", "img_gt[].astype.any", "scipy.ndimage.distance_transform_edt", "scipy.ndimage.distance_transform_edt", "skimage.segmentation.find_boundaries().astype", "scipy.ndimage.distance_transform_edt", "skimage.segmentation.find_boundaries().astype", "skimage.segmentation.find_boundaries", "skimage.segmentation.find_boundaries", "numpy.min", "numpy.max", "numpy.min", "numpy.min", "numpy.max", "numpy.min", "numpy.min", "numpy.max", "numpy.min"], "function", ["None"], ["def", "compute_dtm", "(", "img_gt", ",", "out_shape", ",", "normalize", "=", "False", ",", "fg", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    compute the distance transform map of foreground in binary mask\n    input: segmentation, shape = (batch_size, x, y, z)\n    output: the foreground Distance Map (SDM)\n    dtm(x) = 0; x in segmentation boundary\n             inf|x-y|; x in segmentation\n    \"\"\"", "\n", "\n", "fg_dtm", "=", "np", ".", "zeros", "(", "out_shape", ")", "\n", "\n", "for", "b", "in", "range", "(", "out_shape", "[", "0", "]", ")", ":", "# batch size", "\n", "        ", "posmask", "=", "img_gt", "[", "b", "]", ".", "astype", "(", "np", ".", "bool", ")", "\n", "if", "not", "fg", ":", "\n", "            ", "if", "posmask", ".", "any", "(", ")", ":", "\n", "                ", "negmask", "=", "1", "-", "posmask", "\n", "posdis", "=", "distance", "(", "posmask", ")", "\n", "negdis", "=", "distance", "(", "negmask", ")", "\n", "boundary", "=", "skimage_seg", ".", "find_boundaries", "(", "posmask", ",", "mode", "=", "'inner'", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "normalize", ":", "\n", "                    ", "fg_dtm", "[", "b", "]", "=", "(", "negdis", "-", "np", ".", "min", "(", "negdis", ")", ")", "/", "(", "np", ".", "max", "(", "negdis", ")", "-", "np", ".", "min", "(", "negdis", ")", ")", "+", "(", "posdis", "-", "np", ".", "min", "(", "posdis", ")", ")", "/", "(", "np", ".", "max", "(", "posdis", ")", "-", "np", ".", "min", "(", "posdis", ")", ")", "\n", "", "else", ":", "\n", "                    ", "fg_dtm", "[", "b", "]", "=", "posdis", "+", "negdis", "\n", "", "fg_dtm", "[", "b", "]", "[", "boundary", "==", "1", "]", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "if", "posmask", ".", "any", "(", ")", ":", "\n", "                ", "posdis", "=", "distance", "(", "posmask", ")", "\n", "boundary", "=", "skimage_seg", ".", "find_boundaries", "(", "posmask", ",", "mode", "=", "'inner'", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "normalize", ":", "\n", "                    ", "fg_dtm", "[", "b", "]", "=", "(", "posdis", "-", "np", ".", "min", "(", "posdis", ")", ")", "/", "(", "np", ".", "max", "(", "posdis", ")", "-", "np", ".", "min", "(", "posdis", ")", ")", "\n", "", "else", ":", "\n", "                    ", "fg_dtm", "[", "b", "]", "=", "posdis", "\n", "", "fg_dtm", "[", "b", "]", "[", "boundary", "==", "1", "]", "=", "0", "\n", "\n", "", "", "", "return", "fg_dtm", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.losses_2.hd_loss": [[43, 61], ["torch.einsum", "torch.einsum.mean", "gt.float"], "function", ["None"], ["", "def", "hd_loss", "(", "seg_soft", ",", "gt", ",", "gt_dtm", "=", "None", ",", "one_side", "=", "True", ",", "seg_dtm", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    compute huasdorff distance loss for binary segmentation\n    input: seg_soft: softmax results,  shape=(b,x,y,z)\n           gt: ground truth, shape=(b,x,y,z)\n           seg_dtm: segmentation distance transform map; shape=(b,x,y,z)\n           gt_dtm: ground truth distance transform map; shape=(b,x,y,z)\n    output: boundary_loss; sclar\n    \"\"\"", "\n", "\n", "delta_s", "=", "(", "seg_soft", "-", "gt", ".", "float", "(", ")", ")", "**", "2", "\n", "g_dtm", "=", "gt_dtm", "**", "2", "\n", "dtm", "=", "g_dtm", "if", "one_side", "else", "g_dtm", "+", "seg_dtm", "**", "2", "\n", "multipled", "=", "torch", ".", "einsum", "(", "'bxyz, bxyz->bxyz'", ",", "delta_s", ",", "dtm", ")", "\n", "# hd_loss = multipled.sum()*1.0/(gt_dtm > 0).sum()", "\n", "hd_loss", "=", "multipled", ".", "mean", "(", ")", "\n", "\n", "return", "hd_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.losses_2.save_sdf": [[64, 86], ["nib.load", "nib.load.get_data().astype", "gt_img.get_data().astype.astype", "scipy.ndimage.distance_transform_edt", "scipy.ndimage.distance_transform_edt", "skimage.segmentation.find_boundaries().astype", "nib.Nifti1Image.astype", "nib.Nifti1Image", "nib.save", "nib.load.get_data", "skimage.segmentation.find_boundaries", "numpy.min", "numpy.max", "numpy.min"], "function", ["None"], ["", "def", "save_sdf", "(", "gt_path", "=", "None", ")", ":", "\n", "    ", "'''\n    generate SDM for gt segmentation\n    '''", "\n", "import", "nibabel", "as", "nib", "\n", "dir_path", "=", "'C:/Seolen/PycharmProjects/semi_seg/semantic-semi-supervised-master/model/gan_sdfloss3D_0229_04/test'", "\n", "gt_path", "=", "dir_path", "+", "'/00_gt.nii.gz'", "\n", "gt_img", "=", "nib", ".", "load", "(", "gt_path", ")", "\n", "gt", "=", "gt_img", ".", "get_data", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "posmask", "=", "gt", ".", "astype", "(", "np", ".", "bool", ")", "\n", "negmask", "=", "~", "posmask", "\n", "posdis", "=", "distance", "(", "posmask", ")", "\n", "negdis", "=", "distance", "(", "negmask", ")", "\n", "boundary", "=", "skimage_seg", ".", "find_boundaries", "(", "posmask", ",", "mode", "=", "'inner'", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# sdf = (negdis - np.min(negdis)) / (np.max(negdis) - np.min(negdis)) - (posdis - np.min(posdis)) / ( np.max(posdis) - np.min(posdis))", "\n", "sdf", "=", "(", "posdis", "-", "np", ".", "min", "(", "posdis", ")", ")", "/", "(", "np", ".", "max", "(", "posdis", ")", "-", "np", ".", "min", "(", "posdis", ")", ")", "\n", "sdf", "[", "boundary", "==", "1", "]", "=", "0", "\n", "sdf", "=", "sdf", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "sdf", "=", "nib", ".", "Nifti1Image", "(", "sdf", ",", "gt_img", ".", "affine", ")", "\n", "save_path", "=", "dir_path", "+", "'/00_sdm_pos.nii.gz'", "\n", "nib", ".", "save", "(", "sdf", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.losses_2.compute_sdf": [[89, 117], ["img_gt.astype.astype", "numpy.zeros", "range", "img_gt[].astype", "img_gt[].astype.any", "scipy.ndimage.distance_transform_edt", "scipy.ndimage.distance_transform_edt", "skimage.segmentation.find_boundaries().astype", "skimage.segmentation.find_boundaries", "numpy.min", "numpy.max", "numpy.min", "numpy.min", "numpy.max", "numpy.min"], "function", ["None"], ["", "def", "compute_sdf", "(", "img_gt", ",", "out_shape", ")", ":", "\n", "    ", "\"\"\"\n    compute the signed distance map of binary mask\n    input: segmentation, shape = (batch_size, x, y, z)\n    output: the Signed Distance Map (SDM)\n    sdf(x) = 0; x in segmentation boundary\n             -inf|x-y|; x in segmentation\n             +inf|x-y|; x out of segmentation\n    normalize sdf to [-1,1]\n    \"\"\"", "\n", "\n", "img_gt", "=", "img_gt", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "normalized_sdf", "=", "np", ".", "zeros", "(", "out_shape", ")", "\n", "\n", "for", "b", "in", "range", "(", "out_shape", "[", "0", "]", ")", ":", "# batch size", "\n", "        ", "posmask", "=", "img_gt", "[", "b", "]", ".", "astype", "(", "np", ".", "bool", ")", "\n", "if", "posmask", ".", "any", "(", ")", ":", "\n", "            ", "negmask", "=", "~", "posmask", "\n", "posdis", "=", "distance", "(", "posmask", ")", "\n", "negdis", "=", "distance", "(", "negmask", ")", "\n", "boundary", "=", "skimage_seg", ".", "find_boundaries", "(", "posmask", ",", "mode", "=", "'inner'", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "sdf", "=", "(", "negdis", "-", "np", ".", "min", "(", "negdis", ")", ")", "/", "(", "np", ".", "max", "(", "negdis", ")", "-", "np", ".", "min", "(", "negdis", ")", ")", "-", "(", "posdis", "-", "np", ".", "min", "(", "posdis", ")", ")", "/", "(", "np", ".", "max", "(", "posdis", ")", "-", "np", ".", "min", "(", "posdis", ")", ")", "\n", "sdf", "[", "boundary", "==", "1", "]", "=", "0", "\n", "normalized_sdf", "[", "b", "]", "=", "sdf", "\n", "# assert np.min(sdf) == -1.0, print(np.min(posdis), np.max(posdis), np.min(negdis), np.max(negdis))", "\n", "# assert np.max(sdf) ==  1.0, print(np.min(posdis), np.min(negdis), np.max(posdis), np.max(negdis))", "\n", "\n", "", "", "return", "normalized_sdf", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.losses_2.sdf_loss": [[118, 132], ["torch.sum", "torch.sum", "torch.sum", "torch.norm", "torch.numel"], "function", ["None"], ["", "def", "sdf_loss", "(", "net_output", ",", "gt_sdm", ")", ":", "\n", "# print('net_output.shape, gt_sdm.shape', net_output.shape, gt_sdm.shape)", "\n", "# ([4, 1, 112, 112, 80])", "\n", "\n", "    ", "smooth", "=", "1e-5", "\n", "# compute eq (4)", "\n", "intersect", "=", "torch", ".", "sum", "(", "net_output", "*", "gt_sdm", ")", "\n", "pd_sum", "=", "torch", ".", "sum", "(", "net_output", "**", "2", ")", "\n", "gt_sum", "=", "torch", ".", "sum", "(", "gt_sdm", "**", "2", ")", "\n", "L_product", "=", "(", "intersect", "+", "smooth", ")", "/", "(", "intersect", "+", "pd_sum", "+", "gt_sum", "+", "smooth", ")", "\n", "# print('L_product.shape', L_product.shape) (4,2)", "\n", "L_SDF", "=", "1", "/", "3", "-", "L_product", "+", "torch", ".", "norm", "(", "net_output", "-", "gt_sdm", ",", "1", ")", "/", "torch", ".", "numel", "(", "net_output", ")", "\n", "\n", "return", "L_SDF", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.losses_2.boundary_loss": [[137, 150], ["torch.einsum", "torch.einsum.mean"], "function", ["None"], ["", "def", "boundary_loss", "(", "outputs_soft", ",", "gt_sdf", ")", ":", "\n", "    ", "\"\"\"\n    compute boundary loss for binary segmentation\n    input: outputs_soft: sigmoid results,  shape=(b,2,x,y,z)\n           gt_sdf: sdf of ground truth (can be original or normalized sdf); shape=(b,2,x,y,z)\n    output: boundary_loss; sclar\n    \"\"\"", "\n", "pc", "=", "outputs_soft", "[", ":", ",", "1", ",", "...", "]", "\n", "dc", "=", "gt_sdf", "[", ":", ",", "1", ",", "...", "]", "\n", "multipled", "=", "torch", ".", "einsum", "(", "'bxyz, bxyz->bxyz'", ",", "pc", ",", "dc", ")", "\n", "bd_loss", "=", "multipled", ".", "mean", "(", ")", "\n", "\n", "return", "bd_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.UnifLabelSampler.__init__": [[56, 60], ["util.UnifLabelSampler.generate_indexes_epoch"], "methods", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.UnifLabelSampler.generate_indexes_epoch"], ["def", "__init__", "(", "self", ",", "N", ",", "images_lists", ")", ":", "\n", "        ", "self", ".", "N", "=", "N", "\n", "self", ".", "images_lists", "=", "images_lists", "\n", "self", ".", "indexes", "=", "self", ".", "generate_indexes_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.UnifLabelSampler.generate_indexes_epoch": [[61, 75], ["numpy.zeros", "range", "numpy.random.shuffle", "res[].astype", "int", "len", "numpy.random.choice", "len", "len", "len"], "methods", ["None"], ["", "def", "generate_indexes_epoch", "(", "self", ")", ":", "\n", "        ", "size_per_pseudolabel", "=", "int", "(", "self", ".", "N", "/", "len", "(", "self", ".", "images_lists", ")", ")", "+", "1", "\n", "res", "=", "np", ".", "zeros", "(", "size_per_pseudolabel", "*", "len", "(", "self", ".", "images_lists", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "images_lists", ")", ")", ":", "\n", "            ", "indexes", "=", "np", ".", "random", ".", "choice", "(", "\n", "self", ".", "images_lists", "[", "i", "]", ",", "\n", "size_per_pseudolabel", ",", "\n", "replace", "=", "(", "len", "(", "self", ".", "images_lists", "[", "i", "]", ")", "<=", "size_per_pseudolabel", ")", "\n", ")", "\n", "res", "[", "i", "*", "size_per_pseudolabel", ":", "(", "i", "+", "1", ")", "*", "size_per_pseudolabel", "]", "=", "indexes", "\n", "\n", "", "np", ".", "random", ".", "shuffle", "(", "res", ")", "\n", "return", "res", "[", ":", "self", ".", "N", "]", ".", "astype", "(", "'int'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.UnifLabelSampler.__iter__": [[76, 78], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "indexes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.UnifLabelSampler.__len__": [[79, 81], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.AverageMeter.__init__": [[85, 87], ["util.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.AverageMeter.reset": [[88, 93], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.AverageMeter.update": [[94, 99], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.Logger.__init__": [[113, 116], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "data", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.Logger.log": [[117, 121], ["util.Logger.data.append", "open", "pickle.dump", "os.path.join"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "train_point", ")", ":", "\n", "        ", "self", ".", "data", ".", "append", "(", "train_point", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "path", ")", ",", "'wb'", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ".", "data", ",", "fp", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.load_model": [[17, 47], ["os.path.isfile", "print", "torch.load", "[].size", "model.load_state_dict", "print", "print", "checkpoint[].keys", "util.load_model.rename_key"], "function", ["None"], ["def", "load_model", "(", "path", ")", ":", "\n", "    ", "\"\"\"Loads model and return it without DataParallel table.\"\"\"", "\n", "if", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "        ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "path", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "\n", "# size of the top layer", "\n", "N", "=", "checkpoint", "[", "'state_dict'", "]", "[", "'top_layer.bias'", "]", ".", "size", "(", ")", "\n", "\n", "# build skeleton of the model", "\n", "sob", "=", "'sobel.0.weight'", "in", "checkpoint", "[", "'state_dict'", "]", ".", "keys", "(", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "checkpoint", "[", "'arch'", "]", "]", "(", "sobel", "=", "sob", ",", "out", "=", "int", "(", "N", "[", "0", "]", ")", ")", "\n", "\n", "# deal with a dataparallel table", "\n", "def", "rename_key", "(", "key", ")", ":", "\n", "            ", "if", "not", "'module'", "in", "key", ":", "\n", "                ", "return", "key", "\n", "", "return", "''", ".", "join", "(", "key", ".", "split", "(", "'.module'", ")", ")", "\n", "\n", "", "checkpoint", "[", "'state_dict'", "]", "=", "{", "rename_key", "(", "key", ")", ":", "val", "\n", "for", "key", ",", "val", "\n", "in", "checkpoint", "[", "'state_dict'", "]", ".", "items", "(", ")", "}", "\n", "\n", "# load weights", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "\"Loaded\"", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "None", "\n", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "path", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.learning_rate_decay": [[101, 105], ["numpy.sqrt"], "function", ["None"], ["", "", "def", "learning_rate_decay", "(", "optimizer", ",", "t", ",", "lr_0", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "lr", "=", "lr_0", "/", "np", ".", "sqrt", "(", "1", "+", "lr_0", "*", "param_group", "[", "'weight_decay'", "]", "*", "t", ")", "\n", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.compute_sdf": [[123, 151], ["img_gt.astype.astype", "numpy.zeros", "range", "img_gt[].astype", "img_gt[].astype.any", "scipy.ndimage.distance_transform_edt", "scipy.ndimage.distance_transform_edt", "skimage.segmentation.find_boundaries().astype", "skimage.segmentation.find_boundaries", "numpy.min", "numpy.max", "numpy.min", "numpy.min", "numpy.max", "numpy.min"], "function", ["None"], ["", "", "", "def", "compute_sdf", "(", "img_gt", ",", "out_shape", ")", ":", "\n", "    ", "\"\"\"\n    compute the signed distance map of binary mask\n    input: segmentation, shape = (batch_size, x, y, z)\n    output: the Signed Distance Map (SDM)\n    sdf(x) = 0; x in segmentation boundary\n             -inf|x-y|; x in segmentation\n             +inf|x-y|; x out of segmentation\n    normalize sdf to [-1,1]\n    \"\"\"", "\n", "\n", "img_gt", "=", "img_gt", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "normalized_sdf", "=", "np", ".", "zeros", "(", "out_shape", ")", "\n", "\n", "for", "b", "in", "range", "(", "out_shape", "[", "0", "]", ")", ":", "# batch size", "\n", "        ", "posmask", "=", "img_gt", "[", "b", "]", ".", "astype", "(", "np", ".", "bool", ")", "\n", "if", "posmask", ".", "any", "(", ")", ":", "\n", "            ", "negmask", "=", "~", "posmask", "\n", "posdis", "=", "distance", "(", "posmask", ")", "\n", "negdis", "=", "distance", "(", "negmask", ")", "\n", "boundary", "=", "skimage_seg", ".", "find_boundaries", "(", "posmask", ",", "mode", "=", "'inner'", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "sdf", "=", "(", "negdis", "-", "np", ".", "min", "(", "negdis", ")", ")", "/", "(", "np", ".", "max", "(", "negdis", ")", "-", "np", ".", "min", "(", "negdis", ")", ")", "-", "(", "posdis", "-", "np", ".", "min", "(", "posdis", ")", ")", "/", "(", "np", ".", "max", "(", "posdis", ")", "-", "np", ".", "min", "(", "posdis", ")", ")", "\n", "sdf", "[", "boundary", "==", "1", "]", "=", "0", "\n", "normalized_sdf", "[", "b", "]", "=", "sdf", "\n", "# assert np.min(sdf) == -1.0, print(np.min(posdis), np.max(posdis), np.min(negdis), np.max(negdis))", "\n", "# assert np.max(sdf) ==  1.0, print(np.min(posdis), np.min(negdis), np.max(posdis), np.max(negdis))", "\n", "\n", "", "", "return", "normalized_sdf", "", "", ""]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.losses.FocalLoss.__init__": [[120, 129], ["torch.Module.__init__", "isinstance", "isinstance", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.TwoStreamBatchSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "2", ",", "alpha", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "if", "isinstance", "(", "alpha", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "            ", "self", ".", "alpha", "=", "torch", ".", "Tensor", "(", "[", "alpha", ",", "1", "-", "alpha", "]", ")", "\n", "", "if", "isinstance", "(", "alpha", ",", "list", ")", ":", "\n", "            ", "self", ".", "alpha", "=", "torch", ".", "Tensor", "(", "alpha", ")", "\n", "", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.losses.FocalLoss.forward": [[130, 154], ["target.view.view.view", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "logpt.view.view.gather", "logpt.view.view.view", "torch.autograd.Variable", "torch.autograd.Variable", "input.contiguous().view.contiguous().view.dim", "input.contiguous().view.contiguous().view.view", "input.contiguous().view.contiguous().view.transpose", "input.contiguous().view.contiguous().view.contiguous().view", "logpt.view.view.data.exp", "losses.FocalLoss.alpha.gather", "loss.mean", "loss.sum", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "losses.FocalLoss.alpha.type", "input.contiguous().view.contiguous().view.data.type", "losses.FocalLoss.alpha.type_as", "target.view.view.data.view", "torch.autograd.Variable", "torch.autograd.Variable", "input.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", ">", "2", ":", "\n", "# N,C,H,W => N,C,H*W", "\n", "            ", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "input", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "input", "=", "input", ".", "transpose", "(", "1", ",", "2", ")", "# N,C,H*W => N,H*W,C", "\n", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "2", ")", ")", "# N,H*W,C => N*H*W,C", "\n", "", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "logpt", "=", "F", ".", "log_softmax", "(", "input", ",", "dim", "=", "1", ")", "\n", "logpt", "=", "logpt", ".", "gather", "(", "1", ",", "target", ")", "\n", "logpt", "=", "logpt", ".", "view", "(", "-", "1", ")", "\n", "pt", "=", "Variable", "(", "logpt", ".", "data", ".", "exp", "(", ")", ")", "\n", "\n", "if", "self", ".", "alpha", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "alpha", ".", "type", "(", ")", "!=", "input", ".", "data", ".", "type", "(", ")", ":", "\n", "                ", "self", ".", "alpha", "=", "self", ".", "alpha", ".", "type_as", "(", "input", ".", "data", ")", "\n", "", "at", "=", "self", ".", "alpha", ".", "gather", "(", "0", ",", "target", ".", "data", ".", "view", "(", "-", "1", ")", ")", "\n", "logpt", "=", "logpt", "*", "Variable", "(", "at", ")", "\n", "\n", "", "loss", "=", "-", "1", "*", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", "*", "logpt", "\n", "if", "self", ".", "size_average", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.losses.dice_loss": [[8, 17], ["target.float.float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["def", "dice_loss", "(", "score", ",", "target", ")", ":", "\n", "    ", "target", "=", "target", ".", "float", "(", ")", "\n", "smooth", "=", "1e-5", "\n", "intersect", "=", "torch", ".", "sum", "(", "score", "*", "target", ")", "\n", "y_sum", "=", "torch", ".", "sum", "(", "target", "*", "target", ")", "\n", "z_sum", "=", "torch", ".", "sum", "(", "score", "*", "score", ")", "\n", "loss", "=", "(", "2", "*", "intersect", "+", "smooth", ")", "/", "(", "z_sum", "+", "y_sum", "+", "smooth", ")", "\n", "loss", "=", "1", "-", "loss", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.losses.dice_loss1": [[19, 28], ["target.float.float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "dice_loss1", "(", "score", ",", "target", ")", ":", "\n", "    ", "target", "=", "target", ".", "float", "(", ")", "\n", "smooth", "=", "1e-5", "\n", "intersect", "=", "torch", ".", "sum", "(", "score", "*", "target", ")", "\n", "y_sum", "=", "torch", ".", "sum", "(", "target", ")", "\n", "z_sum", "=", "torch", ".", "sum", "(", "score", ")", "\n", "loss", "=", "(", "2", "*", "intersect", "+", "smooth", ")", "/", "(", "z_sum", "+", "y_sum", "+", "smooth", ")", "\n", "loss", "=", "1", "-", "loss", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.losses.entropy_loss": [[30, 37], ["torch.mean", "torch.mean", "torch.tensor().cuda", "torch.tensor().cuda", "torch.sum", "torch.sum", "torch.tensor", "torch.tensor", "torch.log", "torch.log", "numpy.log"], "function", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.Logger.log", "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.Logger.log", "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.Logger.log"], ["", "def", "entropy_loss", "(", "p", ",", "C", "=", "2", ")", ":", "\n", "# p N*C*W*H*D", "\n", "    ", "y1", "=", "-", "1", "*", "torch", ".", "sum", "(", "p", "*", "torch", ".", "log", "(", "p", "+", "1e-6", ")", ",", "dim", "=", "1", ")", "/", "torch", ".", "tensor", "(", "np", ".", "log", "(", "C", ")", ")", ".", "cuda", "(", ")", "\n", "ent", "=", "torch", ".", "mean", "(", "y1", ")", "\n", "\n", "return", "ent", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.losses.softmax_dice_loss": [[39, 57], ["torch.nn.functional.softmax", "torch.nn.functional.softmax", "range", "input_logits.size", "target_logits.size", "losses.dice_loss1"], "function", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.losses.dice_loss1"], ["", "def", "softmax_dice_loss", "(", "input_logits", ",", "target_logits", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns MSE loss\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "assert", "input_logits", ".", "size", "(", ")", "==", "target_logits", ".", "size", "(", ")", "\n", "input_softmax", "=", "F", ".", "softmax", "(", "input_logits", ",", "dim", "=", "1", ")", "\n", "target_softmax", "=", "F", ".", "softmax", "(", "target_logits", ",", "dim", "=", "1", ")", "\n", "n", "=", "input_logits", ".", "shape", "[", "1", "]", "\n", "dice", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "dice", "+=", "dice_loss1", "(", "input_softmax", "[", ":", ",", "i", "]", ",", "target_softmax", "[", ":", ",", "i", "]", ")", "\n", "", "mean_dice", "=", "dice", "/", "n", "\n", "\n", "return", "mean_dice", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.losses.entropy_loss_map": [[59, 63], ["torch.tensor().cuda", "torch.tensor().cuda", "torch.sum", "torch.sum", "torch.tensor", "torch.tensor", "torch.log", "torch.log", "numpy.log"], "function", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.Logger.log", "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.Logger.log", "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.Logger.log"], ["", "def", "entropy_loss_map", "(", "p", ",", "C", "=", "2", ")", ":", "\n", "    ", "ent", "=", "-", "1", "*", "torch", ".", "sum", "(", "p", "*", "torch", ".", "log", "(", "p", "+", "1e-6", ")", ",", "dim", "=", "1", ",", "\n", "keepdim", "=", "True", ")", "/", "torch", ".", "tensor", "(", "np", ".", "log", "(", "C", ")", ")", ".", "cuda", "(", ")", "\n", "return", "ent", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.losses.softmax_mse_loss": [[65, 83], ["input_logits.size", "target_logits.size", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.nn.functional.softmax", "torch.nn.functional.softmax"], "function", ["None"], ["", "def", "softmax_mse_loss", "(", "input_logits", ",", "target_logits", ",", "sigmoid", "=", "False", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns MSE loss\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "assert", "input_logits", ".", "size", "(", ")", "==", "target_logits", ".", "size", "(", ")", "\n", "if", "sigmoid", ":", "\n", "        ", "input_softmax", "=", "torch", ".", "sigmoid", "(", "input_logits", ")", "\n", "target_softmax", "=", "torch", ".", "sigmoid", "(", "target_logits", ")", "\n", "", "else", ":", "\n", "        ", "input_softmax", "=", "F", ".", "softmax", "(", "input_logits", ",", "dim", "=", "1", ")", "\n", "target_softmax", "=", "F", ".", "softmax", "(", "target_logits", ",", "dim", "=", "1", ")", "\n", "\n", "", "mse_loss", "=", "(", "input_softmax", "-", "target_softmax", ")", "**", "2", "\n", "return", "mse_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.losses.softmax_kl_loss": [[85, 105], ["torch.nn.functional.kl_div", "input_logits.size", "target_logits.size", "torch.log", "torch.log", "torch.sigmoid", "torch.sigmoid", "torch.nn.functional.log_softmax", "torch.nn.functional.softmax", "torch.sigmoid", "torch.sigmoid"], "function", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.Logger.log", "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.Logger.log"], ["", "def", "softmax_kl_loss", "(", "input_logits", ",", "target_logits", ",", "sigmoid", "=", "False", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns KL divergence\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "assert", "input_logits", ".", "size", "(", ")", "==", "target_logits", ".", "size", "(", ")", "\n", "if", "sigmoid", ":", "\n", "        ", "input_log_softmax", "=", "torch", ".", "log", "(", "torch", ".", "sigmoid", "(", "input_logits", ")", ")", "\n", "target_softmax", "=", "torch", ".", "sigmoid", "(", "target_logits", ")", "\n", "", "else", ":", "\n", "        ", "input_log_softmax", "=", "F", ".", "log_softmax", "(", "input_logits", ",", "dim", "=", "1", ")", "\n", "target_softmax", "=", "F", ".", "softmax", "(", "target_logits", ",", "dim", "=", "1", ")", "\n", "\n", "# return F.kl_div(input_log_softmax, target_softmax)", "\n", "", "kl_div", "=", "F", ".", "kl_div", "(", "input_log_softmax", ",", "target_softmax", ",", "reduction", "=", "'mean'", ")", "\n", "# mean_kl_div = torch.mean(0.2*kl_div[:,0,...]+0.8*kl_div[:,1,...])", "\n", "return", "kl_div", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.losses.symmetric_mse_loss": [[107, 117], ["torch.mean", "torch.mean", "input1.size", "input2.size"], "function", ["None"], ["", "def", "symmetric_mse_loss", "(", "input1", ",", "input2", ")", ":", "\n", "    ", "\"\"\"Like F.mse_loss but sends gradients to both directions\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to both input1 and input2.\n    \"\"\"", "\n", "assert", "input1", ".", "size", "(", ")", "==", "input2", ".", "size", "(", ")", "\n", "return", "torch", ".", "mean", "(", "(", "input1", "-", "input2", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.losses.entropy_minmization": [[156, 161], ["torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.Logger.log", "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.Logger.log"], ["", "", "", "def", "entropy_minmization", "(", "p", ")", ":", "\n", "    ", "y1", "=", "-", "1", "*", "torch", ".", "sum", "(", "p", "*", "torch", ".", "log", "(", "p", "+", "1e-6", ")", ",", "dim", "=", "1", ")", "\n", "ent", "=", "torch", ".", "mean", "(", "y1", ")", "\n", "\n", "return", "ent", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.losses.entropy_map": [[163, 167], ["torch.sum", "torch.sum", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.Logger.log", "home.repos.pwc.inspect_result.YichiZhang98_DTML.utils.util.Logger.log"], ["", "def", "entropy_map", "(", "p", ")", ":", "\n", "    ", "ent_map", "=", "-", "1", "*", "torch", ".", "sum", "(", "p", "*", "torch", ".", "log", "(", "p", "+", "1e-6", ")", ",", "dim", "=", "1", ",", "\n", "keepdim", "=", "True", ")", "\n", "return", "ent_map", "\n", "", ""]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet_sdf.ConvBlock.__init__": [[11, 33], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Sequential", "ops.append", "ops.append", "torch.nn.Conv3d", "torch.nn.Conv3d", "ops.append", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "ops.append", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "ops.append", "torch.nn.InstanceNorm3d", "torch.nn.InstanceNorm3d"], "methods", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.TwoStreamBatchSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_stages", ",", "n_filters_in", ",", "n_filters_out", ",", "normalization", "=", "'none'", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "ops", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_stages", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "input_channel", "=", "n_filters_in", "\n", "", "else", ":", "\n", "                ", "input_channel", "=", "n_filters_out", "\n", "\n", "", "ops", ".", "append", "(", "nn", ".", "Conv3d", "(", "input_channel", ",", "n_filters_out", ",", "3", ",", "padding", "=", "1", ")", ")", "\n", "if", "normalization", "==", "'batchnorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "BatchNorm3d", "(", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "==", "'groupnorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "GroupNorm", "(", "num_groups", "=", "16", ",", "num_channels", "=", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "==", "'instancenorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "InstanceNorm3d", "(", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "!=", "'none'", ":", "\n", "                ", "assert", "False", "\n", "", "ops", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "\n", "", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet_sdf.ConvBlock.forward": [[34, 37], ["vnet_sdf.ConvBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet_sdf.ResidualConvBlock.__init__": [[40, 65], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.ReLU", "ops.append", "torch.nn.Conv3d", "torch.nn.Conv3d", "ops.append", "ops.append", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "ops.append", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "ops.append", "torch.nn.InstanceNorm3d", "torch.nn.InstanceNorm3d"], "methods", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.TwoStreamBatchSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_stages", ",", "n_filters_in", ",", "n_filters_out", ",", "normalization", "=", "'none'", ")", ":", "\n", "        ", "super", "(", "ResidualConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "ops", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_stages", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "input_channel", "=", "n_filters_in", "\n", "", "else", ":", "\n", "                ", "input_channel", "=", "n_filters_out", "\n", "\n", "", "ops", ".", "append", "(", "nn", ".", "Conv3d", "(", "input_channel", ",", "n_filters_out", ",", "3", ",", "padding", "=", "1", ")", ")", "\n", "if", "normalization", "==", "'batchnorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "BatchNorm3d", "(", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "==", "'groupnorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "GroupNorm", "(", "num_groups", "=", "16", ",", "num_channels", "=", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "==", "'instancenorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "InstanceNorm3d", "(", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "!=", "'none'", ":", "\n", "                ", "assert", "False", "\n", "\n", "", "if", "i", "!=", "n_stages", "-", "1", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "\n", "", "", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "ops", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet_sdf.ResidualConvBlock.forward": [[66, 70], ["vnet_sdf.ResidualConvBlock.relu", "vnet_sdf.ResidualConvBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "(", "self", ".", "conv", "(", "x", ")", "+", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet_sdf.DownsamplingConvBlock.__init__": [[73, 93], ["torch.nn.Module.__init__", "ops.append", "torch.nn.Sequential", "torch.nn.Sequential", "ops.append", "ops.append", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "ops.append", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "ops.append", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "ops.append", "torch.nn.InstanceNorm3d", "torch.nn.InstanceNorm3d"], "methods", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.TwoStreamBatchSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_filters_in", ",", "n_filters_out", ",", "stride", "=", "2", ",", "normalization", "=", "'none'", ")", ":", "\n", "        ", "super", "(", "DownsamplingConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "ops", "=", "[", "]", "\n", "if", "normalization", "!=", "'none'", ":", "\n", "            ", "ops", ".", "append", "(", "nn", ".", "Conv3d", "(", "n_filters_in", ",", "n_filters_out", ",", "stride", ",", "padding", "=", "0", ",", "stride", "=", "stride", ")", ")", "\n", "if", "normalization", "==", "'batchnorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "BatchNorm3d", "(", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "==", "'groupnorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "GroupNorm", "(", "num_groups", "=", "16", ",", "num_channels", "=", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "==", "'instancenorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "InstanceNorm3d", "(", "n_filters_out", ")", ")", "\n", "", "else", ":", "\n", "                ", "assert", "False", "\n", "", "", "else", ":", "\n", "            ", "ops", ".", "append", "(", "nn", ".", "Conv3d", "(", "n_filters_in", ",", "n_filters_out", ",", "stride", ",", "padding", "=", "0", ",", "stride", "=", "stride", ")", ")", "\n", "\n", "", "ops", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet_sdf.DownsamplingConvBlock.forward": [[94, 97], ["vnet_sdf.DownsamplingConvBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet_sdf.UpsamplingDeconvBlock.__init__": [[100, 120], ["torch.nn.Module.__init__", "ops.append", "torch.nn.Sequential", "torch.nn.Sequential", "ops.append", "ops.append", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ConvTranspose3d", "torch.nn.ConvTranspose3d", "ops.append", "torch.nn.ConvTranspose3d", "torch.nn.ConvTranspose3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "ops.append", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "ops.append", "torch.nn.InstanceNorm3d", "torch.nn.InstanceNorm3d"], "methods", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.TwoStreamBatchSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_filters_in", ",", "n_filters_out", ",", "stride", "=", "2", ",", "normalization", "=", "'none'", ")", ":", "\n", "        ", "super", "(", "UpsamplingDeconvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "ops", "=", "[", "]", "\n", "if", "normalization", "!=", "'none'", ":", "\n", "            ", "ops", ".", "append", "(", "nn", ".", "ConvTranspose3d", "(", "n_filters_in", ",", "n_filters_out", ",", "stride", ",", "padding", "=", "0", ",", "stride", "=", "stride", ")", ")", "\n", "if", "normalization", "==", "'batchnorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "BatchNorm3d", "(", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "==", "'groupnorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "GroupNorm", "(", "num_groups", "=", "16", ",", "num_channels", "=", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "==", "'instancenorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "InstanceNorm3d", "(", "n_filters_out", ")", ")", "\n", "", "else", ":", "\n", "                ", "assert", "False", "\n", "", "", "else", ":", "\n", "            ", "ops", ".", "append", "(", "nn", ".", "ConvTranspose3d", "(", "n_filters_in", ",", "n_filters_out", ",", "stride", ",", "padding", "=", "0", ",", "stride", "=", "stride", ")", ")", "\n", "\n", "", "ops", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet_sdf.UpsamplingDeconvBlock.forward": [[121, 124], ["vnet_sdf.UpsamplingDeconvBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet_sdf.Upsampling.__init__": [[127, 144], ["torch.nn.Module.__init__", "ops.append", "ops.append", "ops.append", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Conv3d", "torch.nn.Conv3d", "ops.append", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "ops.append", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "ops.append", "torch.nn.InstanceNorm3d", "torch.nn.InstanceNorm3d"], "methods", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.TwoStreamBatchSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_filters_in", ",", "n_filters_out", ",", "stride", "=", "2", ",", "normalization", "=", "'none'", ")", ":", "\n", "        ", "super", "(", "Upsampling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "ops", "=", "[", "]", "\n", "ops", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "stride", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", ")", "\n", "ops", ".", "append", "(", "nn", ".", "Conv3d", "(", "n_filters_in", ",", "n_filters_out", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", "\n", "if", "normalization", "==", "'batchnorm'", ":", "\n", "            ", "ops", ".", "append", "(", "nn", ".", "BatchNorm3d", "(", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "==", "'groupnorm'", ":", "\n", "            ", "ops", ".", "append", "(", "nn", ".", "GroupNorm", "(", "num_groups", "=", "16", ",", "num_channels", "=", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "==", "'instancenorm'", ":", "\n", "            ", "ops", ".", "append", "(", "nn", ".", "InstanceNorm3d", "(", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "!=", "'none'", ":", "\n", "            ", "assert", "False", "\n", "", "ops", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet_sdf.Upsampling.forward": [[145, 148], ["vnet_sdf.Upsampling.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet_sdf.VNet.__init__": [[151, 186], ["torch.nn.Module.__init__", "convBlock", "vnet_sdf.DownsamplingConvBlock", "convBlock", "vnet_sdf.DownsamplingConvBlock", "convBlock", "vnet_sdf.DownsamplingConvBlock", "convBlock", "vnet_sdf.DownsamplingConvBlock", "convBlock", "vnet_sdf.UpsamplingDeconvBlock", "convBlock", "vnet_sdf.UpsamplingDeconvBlock", "convBlock", "vnet_sdf.UpsamplingDeconvBlock", "convBlock", "vnet_sdf.UpsamplingDeconvBlock", "convBlock", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Dropout3d", "torch.nn.Dropout3d"], "methods", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.TwoStreamBatchSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", "=", "3", ",", "n_classes", "=", "2", ",", "n_filters", "=", "16", ",", "normalization", "=", "'none'", ",", "has_dropout", "=", "False", ",", "has_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "VNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "has_dropout", "=", "has_dropout", "\n", "convBlock", "=", "ConvBlock", "if", "not", "has_residual", "else", "ResidualConvBlock", "\n", "\n", "self", ".", "block_one", "=", "convBlock", "(", "1", ",", "n_channels", ",", "n_filters", ",", "normalization", "=", "normalization", ")", "\n", "self", ".", "block_one_dw", "=", "DownsamplingConvBlock", "(", "n_filters", ",", "2", "*", "n_filters", ",", "normalization", "=", "normalization", ")", "\n", "\n", "self", ".", "block_two", "=", "convBlock", "(", "2", ",", "n_filters", "*", "2", ",", "n_filters", "*", "2", ",", "normalization", "=", "normalization", ")", "\n", "self", ".", "block_two_dw", "=", "DownsamplingConvBlock", "(", "n_filters", "*", "2", ",", "n_filters", "*", "4", ",", "normalization", "=", "normalization", ")", "\n", "\n", "self", ".", "block_three", "=", "convBlock", "(", "3", ",", "n_filters", "*", "4", ",", "n_filters", "*", "4", ",", "normalization", "=", "normalization", ")", "\n", "self", ".", "block_three_dw", "=", "DownsamplingConvBlock", "(", "n_filters", "*", "4", ",", "n_filters", "*", "8", ",", "normalization", "=", "normalization", ")", "\n", "\n", "self", ".", "block_four", "=", "convBlock", "(", "3", ",", "n_filters", "*", "8", ",", "n_filters", "*", "8", ",", "normalization", "=", "normalization", ")", "\n", "self", ".", "block_four_dw", "=", "DownsamplingConvBlock", "(", "n_filters", "*", "8", ",", "n_filters", "*", "16", ",", "normalization", "=", "normalization", ")", "\n", "\n", "self", ".", "block_five", "=", "convBlock", "(", "3", ",", "n_filters", "*", "16", ",", "n_filters", "*", "16", ",", "normalization", "=", "normalization", ")", "\n", "self", ".", "block_five_up", "=", "UpsamplingDeconvBlock", "(", "n_filters", "*", "16", ",", "n_filters", "*", "8", ",", "normalization", "=", "normalization", ")", "\n", "\n", "self", ".", "block_six", "=", "convBlock", "(", "3", ",", "n_filters", "*", "8", ",", "n_filters", "*", "8", ",", "normalization", "=", "normalization", ")", "\n", "self", ".", "block_six_up", "=", "UpsamplingDeconvBlock", "(", "n_filters", "*", "8", ",", "n_filters", "*", "4", ",", "normalization", "=", "normalization", ")", "\n", "\n", "self", ".", "block_seven", "=", "convBlock", "(", "3", ",", "n_filters", "*", "4", ",", "n_filters", "*", "4", ",", "normalization", "=", "normalization", ")", "\n", "self", ".", "block_seven_up", "=", "UpsamplingDeconvBlock", "(", "n_filters", "*", "4", ",", "n_filters", "*", "2", ",", "normalization", "=", "normalization", ")", "\n", "\n", "self", ".", "block_eight", "=", "convBlock", "(", "2", ",", "n_filters", "*", "2", ",", "n_filters", "*", "2", ",", "normalization", "=", "normalization", ")", "\n", "self", ".", "block_eight_up", "=", "UpsamplingDeconvBlock", "(", "n_filters", "*", "2", ",", "n_filters", ",", "normalization", "=", "normalization", ")", "\n", "\n", "self", ".", "block_nine", "=", "convBlock", "(", "1", ",", "n_filters", ",", "n_filters", ",", "normalization", "=", "normalization", ")", "\n", "self", ".", "out_conv", "=", "nn", ".", "Conv3d", "(", "n_filters", ",", "n_classes", ",", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "out_conv2", "=", "nn", ".", "Conv3d", "(", "n_filters", ",", "n_classes", ",", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout3d", "(", "p", "=", "0.5", ",", "inplace", "=", "False", ")", "\n", "# self.__init_weight()", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet_sdf.VNet.encoder": [[188, 209], ["vnet_sdf.VNet.block_one", "vnet_sdf.VNet.block_one_dw", "vnet_sdf.VNet.block_two", "vnet_sdf.VNet.block_two_dw", "vnet_sdf.VNet.block_three", "vnet_sdf.VNet.block_three_dw", "vnet_sdf.VNet.block_four", "vnet_sdf.VNet.block_four_dw", "vnet_sdf.VNet.block_five", "vnet_sdf.VNet.dropout"], "methods", ["None"], ["", "def", "encoder", "(", "self", ",", "input", ")", ":", "\n", "        ", "x1", "=", "self", ".", "block_one", "(", "input", ")", "\n", "x1_dw", "=", "self", ".", "block_one_dw", "(", "x1", ")", "\n", "\n", "x2", "=", "self", ".", "block_two", "(", "x1_dw", ")", "\n", "x2_dw", "=", "self", ".", "block_two_dw", "(", "x2", ")", "\n", "\n", "x3", "=", "self", ".", "block_three", "(", "x2_dw", ")", "\n", "x3_dw", "=", "self", ".", "block_three_dw", "(", "x3", ")", "\n", "\n", "x4", "=", "self", ".", "block_four", "(", "x3_dw", ")", "\n", "x4_dw", "=", "self", ".", "block_four_dw", "(", "x4", ")", "\n", "\n", "x5", "=", "self", ".", "block_five", "(", "x4_dw", ")", "\n", "# x5 = F.dropout3d(x5, p=0.5, training=True)", "\n", "if", "self", ".", "has_dropout", ":", "\n", "            ", "x5", "=", "self", ".", "dropout", "(", "x5", ")", "\n", "\n", "", "res", "=", "[", "x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5", "]", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet_sdf.VNet.decoder": [[210, 239], ["vnet_sdf.VNet.block_five_up", "vnet_sdf.VNet.block_six", "vnet_sdf.VNet.block_six_up", "vnet_sdf.VNet.block_seven", "vnet_sdf.VNet.block_seven_up", "vnet_sdf.VNet.block_eight", "vnet_sdf.VNet.block_eight_up", "vnet_sdf.VNet.block_nine", "vnet_sdf.VNet.out_conv", "vnet_sdf.VNet.tanh", "vnet_sdf.VNet.out_conv2", "vnet_sdf.VNet.dropout"], "methods", ["None"], ["", "def", "decoder", "(", "self", ",", "features", ")", ":", "\n", "        ", "x1", "=", "features", "[", "0", "]", "\n", "x2", "=", "features", "[", "1", "]", "\n", "x3", "=", "features", "[", "2", "]", "\n", "x4", "=", "features", "[", "3", "]", "\n", "x5", "=", "features", "[", "4", "]", "\n", "\n", "x5_up", "=", "self", ".", "block_five_up", "(", "x5", ")", "\n", "x5_up", "=", "x5_up", "+", "x4", "\n", "\n", "x6", "=", "self", ".", "block_six", "(", "x5_up", ")", "\n", "x6_up", "=", "self", ".", "block_six_up", "(", "x6", ")", "\n", "x6_up", "=", "x6_up", "+", "x3", "\n", "\n", "x7", "=", "self", ".", "block_seven", "(", "x6_up", ")", "\n", "x7_up", "=", "self", ".", "block_seven_up", "(", "x7", ")", "\n", "x7_up", "=", "x7_up", "+", "x2", "\n", "\n", "x8", "=", "self", ".", "block_eight", "(", "x7_up", ")", "\n", "x8_up", "=", "self", ".", "block_eight_up", "(", "x8", ")", "\n", "x8_up", "=", "x8_up", "+", "x1", "\n", "x9", "=", "self", ".", "block_nine", "(", "x8_up", ")", "\n", "# x9 = F.dropout3d(x9, p=0.5, training=True)", "\n", "if", "self", ".", "has_dropout", ":", "\n", "            ", "x9", "=", "self", ".", "dropout", "(", "x9", ")", "\n", "", "out", "=", "self", ".", "out_conv", "(", "x9", ")", "\n", "out_tanh", "=", "self", ".", "tanh", "(", "out", ")", "\n", "out_seg", "=", "self", ".", "out_conv2", "(", "x9", ")", "\n", "return", "out_tanh", ",", "out_seg", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet_sdf.VNet.forward": [[241, 250], ["vnet_sdf.VNet.encoder", "vnet_sdf.VNet.decoder"], "methods", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet.VNet.encoder", "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet.VNet.decoder"], ["", "def", "forward", "(", "self", ",", "input", ",", "turnoff_drop", "=", "False", ")", ":", "\n", "        ", "if", "turnoff_drop", ":", "\n", "            ", "has_dropout", "=", "self", ".", "has_dropout", "\n", "self", ".", "has_dropout", "=", "False", "\n", "", "features", "=", "self", ".", "encoder", "(", "input", ")", "\n", "out_tanh", ",", "out_seg", "=", "self", ".", "decoder", "(", "features", ")", "\n", "if", "turnoff_drop", ":", "\n", "            ", "self", ".", "has_dropout", "=", "has_dropout", "\n", "", "return", "out_tanh", ",", "out_seg", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet.ConvBlock.__init__": [[6, 28], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Sequential", "ops.append", "ops.append", "torch.nn.Conv3d", "torch.nn.Conv3d", "ops.append", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "ops.append", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "ops.append", "torch.nn.InstanceNorm3d", "torch.nn.InstanceNorm3d"], "methods", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.TwoStreamBatchSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_stages", ",", "n_filters_in", ",", "n_filters_out", ",", "normalization", "=", "'none'", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "ops", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_stages", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "input_channel", "=", "n_filters_in", "\n", "", "else", ":", "\n", "                ", "input_channel", "=", "n_filters_out", "\n", "\n", "", "ops", ".", "append", "(", "nn", ".", "Conv3d", "(", "input_channel", ",", "n_filters_out", ",", "3", ",", "padding", "=", "1", ")", ")", "\n", "if", "normalization", "==", "'batchnorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "BatchNorm3d", "(", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "==", "'groupnorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "GroupNorm", "(", "num_groups", "=", "16", ",", "num_channels", "=", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "==", "'instancenorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "InstanceNorm3d", "(", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "!=", "'none'", ":", "\n", "                ", "assert", "False", "\n", "", "ops", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet.ConvBlock.forward": [[29, 32], ["vnet.ConvBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet.ResidualConvBlock.__init__": [[35, 60], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.ReLU", "ops.append", "torch.nn.Conv3d", "torch.nn.Conv3d", "ops.append", "ops.append", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "ops.append", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "ops.append", "torch.nn.InstanceNorm3d", "torch.nn.InstanceNorm3d"], "methods", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.TwoStreamBatchSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_stages", ",", "n_filters_in", ",", "n_filters_out", ",", "normalization", "=", "'none'", ")", ":", "\n", "        ", "super", "(", "ResidualConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "ops", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_stages", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "input_channel", "=", "n_filters_in", "\n", "", "else", ":", "\n", "                ", "input_channel", "=", "n_filters_out", "\n", "\n", "", "ops", ".", "append", "(", "nn", ".", "Conv3d", "(", "input_channel", ",", "n_filters_out", ",", "3", ",", "padding", "=", "1", ")", ")", "\n", "if", "normalization", "==", "'batchnorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "BatchNorm3d", "(", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "==", "'groupnorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "GroupNorm", "(", "num_groups", "=", "16", ",", "num_channels", "=", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "==", "'instancenorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "InstanceNorm3d", "(", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "!=", "'none'", ":", "\n", "                ", "assert", "False", "\n", "\n", "", "if", "i", "!=", "n_stages", "-", "1", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "", "", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "ops", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet.ResidualConvBlock.forward": [[61, 65], ["vnet.ResidualConvBlock.relu", "vnet.ResidualConvBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "(", "self", ".", "conv", "(", "x", ")", "+", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet.DownsamplingConvBlock.__init__": [[68, 88], ["torch.nn.Module.__init__", "ops.append", "torch.nn.Sequential", "torch.nn.Sequential", "ops.append", "ops.append", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "ops.append", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "ops.append", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "ops.append", "torch.nn.InstanceNorm3d", "torch.nn.InstanceNorm3d"], "methods", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.TwoStreamBatchSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_filters_in", ",", "n_filters_out", ",", "stride", "=", "2", ",", "normalization", "=", "'none'", ")", ":", "\n", "        ", "super", "(", "DownsamplingConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "ops", "=", "[", "]", "\n", "if", "normalization", "!=", "'none'", ":", "\n", "            ", "ops", ".", "append", "(", "nn", ".", "Conv3d", "(", "n_filters_in", ",", "n_filters_out", ",", "stride", ",", "padding", "=", "0", ",", "stride", "=", "stride", ")", ")", "\n", "if", "normalization", "==", "'batchnorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "BatchNorm3d", "(", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "==", "'groupnorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "GroupNorm", "(", "num_groups", "=", "16", ",", "num_channels", "=", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "==", "'instancenorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "InstanceNorm3d", "(", "n_filters_out", ")", ")", "\n", "", "else", ":", "\n", "                ", "assert", "False", "\n", "", "", "else", ":", "\n", "            ", "ops", ".", "append", "(", "nn", ".", "Conv3d", "(", "n_filters_in", ",", "n_filters_out", ",", "stride", ",", "padding", "=", "0", ",", "stride", "=", "stride", ")", ")", "\n", "\n", "", "ops", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet.DownsamplingConvBlock.forward": [[89, 92], ["vnet.DownsamplingConvBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet.UpsamplingDeconvBlock.__init__": [[95, 115], ["torch.nn.Module.__init__", "ops.append", "torch.nn.Sequential", "torch.nn.Sequential", "ops.append", "ops.append", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ConvTranspose3d", "torch.nn.ConvTranspose3d", "ops.append", "torch.nn.ConvTranspose3d", "torch.nn.ConvTranspose3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "ops.append", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "ops.append", "torch.nn.InstanceNorm3d", "torch.nn.InstanceNorm3d"], "methods", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.TwoStreamBatchSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_filters_in", ",", "n_filters_out", ",", "stride", "=", "2", ",", "normalization", "=", "'none'", ")", ":", "\n", "        ", "super", "(", "UpsamplingDeconvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "ops", "=", "[", "]", "\n", "if", "normalization", "!=", "'none'", ":", "\n", "            ", "ops", ".", "append", "(", "nn", ".", "ConvTranspose3d", "(", "n_filters_in", ",", "n_filters_out", ",", "stride", ",", "padding", "=", "0", ",", "stride", "=", "stride", ")", ")", "\n", "if", "normalization", "==", "'batchnorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "BatchNorm3d", "(", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "==", "'groupnorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "GroupNorm", "(", "num_groups", "=", "16", ",", "num_channels", "=", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "==", "'instancenorm'", ":", "\n", "                ", "ops", ".", "append", "(", "nn", ".", "InstanceNorm3d", "(", "n_filters_out", ")", ")", "\n", "", "else", ":", "\n", "                ", "assert", "False", "\n", "", "", "else", ":", "\n", "            ", "ops", ".", "append", "(", "nn", ".", "ConvTranspose3d", "(", "n_filters_in", ",", "n_filters_out", ",", "stride", ",", "padding", "=", "0", ",", "stride", "=", "stride", ")", ")", "\n", "\n", "", "ops", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet.UpsamplingDeconvBlock.forward": [[116, 119], ["vnet.UpsamplingDeconvBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet.Upsampling.__init__": [[122, 139], ["torch.nn.Module.__init__", "ops.append", "ops.append", "ops.append", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Conv3d", "torch.nn.Conv3d", "ops.append", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "ops.append", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "ops.append", "torch.nn.InstanceNorm3d", "torch.nn.InstanceNorm3d"], "methods", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.TwoStreamBatchSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_filters_in", ",", "n_filters_out", ",", "stride", "=", "2", ",", "normalization", "=", "'none'", ")", ":", "\n", "        ", "super", "(", "Upsampling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "ops", "=", "[", "]", "\n", "ops", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "stride", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", ")", "\n", "ops", ".", "append", "(", "nn", ".", "Conv3d", "(", "n_filters_in", ",", "n_filters_out", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", "\n", "if", "normalization", "==", "'batchnorm'", ":", "\n", "            ", "ops", ".", "append", "(", "nn", ".", "BatchNorm3d", "(", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "==", "'groupnorm'", ":", "\n", "            ", "ops", ".", "append", "(", "nn", ".", "GroupNorm", "(", "num_groups", "=", "16", ",", "num_channels", "=", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "==", "'instancenorm'", ":", "\n", "            ", "ops", ".", "append", "(", "nn", ".", "InstanceNorm3d", "(", "n_filters_out", ")", ")", "\n", "", "elif", "normalization", "!=", "'none'", ":", "\n", "            ", "assert", "False", "\n", "", "ops", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet.Upsampling.forward": [[140, 143], ["vnet.Upsampling.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet.VNet.__init__": [[146, 178], ["torch.nn.Module.__init__", "vnet.ConvBlock", "vnet.DownsamplingConvBlock", "vnet.ConvBlock", "vnet.DownsamplingConvBlock", "vnet.ConvBlock", "vnet.DownsamplingConvBlock", "vnet.ConvBlock", "vnet.DownsamplingConvBlock", "vnet.ConvBlock", "vnet.UpsamplingDeconvBlock", "vnet.ConvBlock", "vnet.UpsamplingDeconvBlock", "vnet.ConvBlock", "vnet.UpsamplingDeconvBlock", "vnet.ConvBlock", "vnet.UpsamplingDeconvBlock", "vnet.ConvBlock", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.Dropout3d", "torch.nn.Dropout3d"], "methods", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.TwoStreamBatchSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", "=", "3", ",", "n_classes", "=", "2", ",", "n_filters", "=", "16", ",", "normalization", "=", "'none'", ",", "has_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "VNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "has_dropout", "=", "has_dropout", "\n", "\n", "self", ".", "block_one", "=", "ConvBlock", "(", "1", ",", "n_channels", ",", "n_filters", ",", "normalization", "=", "normalization", ")", "\n", "self", ".", "block_one_dw", "=", "DownsamplingConvBlock", "(", "n_filters", ",", "2", "*", "n_filters", ",", "normalization", "=", "normalization", ")", "\n", "\n", "self", ".", "block_two", "=", "ConvBlock", "(", "2", ",", "n_filters", "*", "2", ",", "n_filters", "*", "2", ",", "normalization", "=", "normalization", ")", "\n", "self", ".", "block_two_dw", "=", "DownsamplingConvBlock", "(", "n_filters", "*", "2", ",", "n_filters", "*", "4", ",", "normalization", "=", "normalization", ")", "\n", "\n", "self", ".", "block_three", "=", "ConvBlock", "(", "3", ",", "n_filters", "*", "4", ",", "n_filters", "*", "4", ",", "normalization", "=", "normalization", ")", "\n", "self", ".", "block_three_dw", "=", "DownsamplingConvBlock", "(", "n_filters", "*", "4", ",", "n_filters", "*", "8", ",", "normalization", "=", "normalization", ")", "\n", "\n", "self", ".", "block_four", "=", "ConvBlock", "(", "3", ",", "n_filters", "*", "8", ",", "n_filters", "*", "8", ",", "normalization", "=", "normalization", ")", "\n", "self", ".", "block_four_dw", "=", "DownsamplingConvBlock", "(", "n_filters", "*", "8", ",", "n_filters", "*", "16", ",", "normalization", "=", "normalization", ")", "\n", "\n", "self", ".", "block_five", "=", "ConvBlock", "(", "3", ",", "n_filters", "*", "16", ",", "n_filters", "*", "16", ",", "normalization", "=", "normalization", ")", "\n", "self", ".", "block_five_up", "=", "UpsamplingDeconvBlock", "(", "n_filters", "*", "16", ",", "n_filters", "*", "8", ",", "normalization", "=", "normalization", ")", "\n", "\n", "self", ".", "block_six", "=", "ConvBlock", "(", "3", ",", "n_filters", "*", "8", ",", "n_filters", "*", "8", ",", "normalization", "=", "normalization", ")", "\n", "self", ".", "block_six_up", "=", "UpsamplingDeconvBlock", "(", "n_filters", "*", "8", ",", "n_filters", "*", "4", ",", "normalization", "=", "normalization", ")", "\n", "\n", "self", ".", "block_seven", "=", "ConvBlock", "(", "3", ",", "n_filters", "*", "4", ",", "n_filters", "*", "4", ",", "normalization", "=", "normalization", ")", "\n", "self", ".", "block_seven_up", "=", "UpsamplingDeconvBlock", "(", "n_filters", "*", "4", ",", "n_filters", "*", "2", ",", "normalization", "=", "normalization", ")", "\n", "\n", "self", ".", "block_eight", "=", "ConvBlock", "(", "2", ",", "n_filters", "*", "2", ",", "n_filters", "*", "2", ",", "normalization", "=", "normalization", ")", "\n", "self", ".", "block_eight_up", "=", "UpsamplingDeconvBlock", "(", "n_filters", "*", "2", ",", "n_filters", ",", "normalization", "=", "normalization", ")", "\n", "\n", "self", ".", "block_nine", "=", "ConvBlock", "(", "1", ",", "n_filters", ",", "n_filters", ",", "normalization", "=", "normalization", ")", "\n", "self", ".", "out_conv", "=", "nn", ".", "Conv3d", "(", "n_filters", ",", "n_classes", ",", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout3d", "(", "p", "=", "0.5", ",", "inplace", "=", "False", ")", "\n", "# self.__init_weight()", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet.VNet.encoder": [[180, 201], ["vnet.VNet.block_one", "vnet.VNet.block_one_dw", "vnet.VNet.block_two", "vnet.VNet.block_two_dw", "vnet.VNet.block_three", "vnet.VNet.block_three_dw", "vnet.VNet.block_four", "vnet.VNet.block_four_dw", "vnet.VNet.block_five", "vnet.VNet.dropout"], "methods", ["None"], ["", "def", "encoder", "(", "self", ",", "input", ")", ":", "\n", "        ", "x1", "=", "self", ".", "block_one", "(", "input", ")", "\n", "x1_dw", "=", "self", ".", "block_one_dw", "(", "x1", ")", "\n", "\n", "x2", "=", "self", ".", "block_two", "(", "x1_dw", ")", "\n", "x2_dw", "=", "self", ".", "block_two_dw", "(", "x2", ")", "\n", "\n", "x3", "=", "self", ".", "block_three", "(", "x2_dw", ")", "\n", "x3_dw", "=", "self", ".", "block_three_dw", "(", "x3", ")", "\n", "\n", "x4", "=", "self", ".", "block_four", "(", "x3_dw", ")", "\n", "x4_dw", "=", "self", ".", "block_four_dw", "(", "x4", ")", "\n", "\n", "x5", "=", "self", ".", "block_five", "(", "x4_dw", ")", "\n", "# x5 = F.dropout3d(x5, p=0.5, training=True)", "\n", "if", "self", ".", "has_dropout", ":", "\n", "            ", "x5", "=", "self", ".", "dropout", "(", "x5", ")", "\n", "\n", "", "res", "=", "[", "x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5", "]", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet.VNet.decoder": [[202, 229], ["vnet.VNet.block_five_up", "vnet.VNet.block_six", "vnet.VNet.block_six_up", "vnet.VNet.block_seven", "vnet.VNet.block_seven_up", "vnet.VNet.block_eight", "vnet.VNet.block_eight_up", "vnet.VNet.block_nine", "vnet.VNet.out_conv", "vnet.VNet.dropout"], "methods", ["None"], ["", "def", "decoder", "(", "self", ",", "features", ")", ":", "\n", "        ", "x1", "=", "features", "[", "0", "]", "\n", "x2", "=", "features", "[", "1", "]", "\n", "x3", "=", "features", "[", "2", "]", "\n", "x4", "=", "features", "[", "3", "]", "\n", "x5", "=", "features", "[", "4", "]", "\n", "\n", "x5_up", "=", "self", ".", "block_five_up", "(", "x5", ")", "\n", "x5_up", "=", "x5_up", "+", "x4", "\n", "\n", "x6", "=", "self", ".", "block_six", "(", "x5_up", ")", "\n", "x6_up", "=", "self", ".", "block_six_up", "(", "x6", ")", "\n", "x6_up", "=", "x6_up", "+", "x3", "\n", "\n", "x7", "=", "self", ".", "block_seven", "(", "x6_up", ")", "\n", "x7_up", "=", "self", ".", "block_seven_up", "(", "x7", ")", "\n", "x7_up", "=", "x7_up", "+", "x2", "\n", "\n", "x8", "=", "self", ".", "block_eight", "(", "x7_up", ")", "\n", "x8_up", "=", "self", ".", "block_eight_up", "(", "x8", ")", "\n", "x8_up", "=", "x8_up", "+", "x1", "\n", "x9", "=", "self", ".", "block_nine", "(", "x8_up", ")", "\n", "# x9 = F.dropout3d(x9, p=0.5, training=True)", "\n", "if", "self", ".", "has_dropout", ":", "\n", "            ", "x9", "=", "self", ".", "dropout", "(", "x9", ")", "\n", "", "out", "=", "self", ".", "out_conv", "(", "x9", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet.VNet.forward": [[231, 240], ["vnet.VNet.encoder", "vnet.VNet.decoder"], "methods", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet.VNet.encoder", "home.repos.pwc.inspect_result.YichiZhang98_DTML.networks.vnet.VNet.decoder"], ["", "def", "forward", "(", "self", ",", "input", ",", "turnoff_drop", "=", "False", ")", ":", "\n", "        ", "if", "turnoff_drop", ":", "\n", "            ", "has_dropout", "=", "self", ".", "has_dropout", "\n", "self", ".", "has_dropout", "=", "False", "\n", "", "features", "=", "self", ".", "encoder", "(", "input", ")", "\n", "out", "=", "self", ".", "decoder", "(", "features", ")", "\n", "if", "turnoff_drop", ":", "\n", "            ", "self", ".", "has_dropout", "=", "has_dropout", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart_processing.covert_h5": [[9, 41], ["glob.glob", "tqdm.tqdm", "nrrd.read", "nrrd.read", "numpy.nonzero", "max", "min", "max", "min", "max", "min", "image.astype.astype", "print", "h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.close", "item.replace", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "max", "max", "max", "numpy.std", "item.replace", "numpy.mean", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint"], "function", ["None"], ["def", "covert_h5", "(", ")", ":", "\n", "    ", "listt", "=", "glob", "(", "'../../LA_dataset/2018LA_Seg_Training Set/*/lgemri.nrrd'", ")", "\n", "for", "item", "in", "tqdm", "(", "listt", ")", ":", "\n", "        ", "image", ",", "img_header", "=", "nrrd", ".", "read", "(", "item", ")", "\n", "label", ",", "gt_header", "=", "nrrd", ".", "read", "(", "item", ".", "replace", "(", "'lgemri.nrrd'", ",", "'laendo.nrrd'", ")", ")", "\n", "label", "=", "(", "label", "==", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "w", ",", "h", ",", "d", "=", "label", ".", "shape", "\n", "\n", "tempL", "=", "np", ".", "nonzero", "(", "label", ")", "\n", "minx", ",", "maxx", "=", "np", ".", "min", "(", "tempL", "[", "0", "]", ")", ",", "np", ".", "max", "(", "tempL", "[", "0", "]", ")", "\n", "miny", ",", "maxy", "=", "np", ".", "min", "(", "tempL", "[", "1", "]", ")", ",", "np", ".", "max", "(", "tempL", "[", "1", "]", ")", "\n", "minz", ",", "maxz", "=", "np", ".", "min", "(", "tempL", "[", "2", "]", ")", ",", "np", ".", "max", "(", "tempL", "[", "2", "]", ")", "\n", "\n", "px", "=", "max", "(", "output_size", "[", "0", "]", "-", "(", "maxx", "-", "minx", ")", ",", "0", ")", "//", "2", "\n", "py", "=", "max", "(", "output_size", "[", "1", "]", "-", "(", "maxy", "-", "miny", ")", ",", "0", ")", "//", "2", "\n", "pz", "=", "max", "(", "output_size", "[", "2", "]", "-", "(", "maxz", "-", "minz", ")", ",", "0", ")", "//", "2", "\n", "minx", "=", "max", "(", "minx", "-", "np", ".", "random", ".", "randint", "(", "10", ",", "20", ")", "-", "px", ",", "0", ")", "\n", "maxx", "=", "min", "(", "maxx", "+", "np", ".", "random", ".", "randint", "(", "10", ",", "20", ")", "+", "px", ",", "w", ")", "\n", "miny", "=", "max", "(", "miny", "-", "np", ".", "random", ".", "randint", "(", "10", ",", "20", ")", "-", "py", ",", "0", ")", "\n", "maxy", "=", "min", "(", "maxy", "+", "np", ".", "random", ".", "randint", "(", "10", ",", "20", ")", "+", "py", ",", "h", ")", "\n", "minz", "=", "max", "(", "minz", "-", "np", ".", "random", ".", "randint", "(", "5", ",", "10", ")", "-", "pz", ",", "0", ")", "\n", "maxz", "=", "min", "(", "maxz", "+", "np", ".", "random", ".", "randint", "(", "5", ",", "10", ")", "+", "pz", ",", "d", ")", "\n", "\n", "image", "=", "(", "image", "-", "np", ".", "mean", "(", "image", ")", ")", "/", "np", ".", "std", "(", "image", ")", "\n", "image", "=", "image", ".", "astype", "(", "np", ".", "float32", ")", "\n", "image", "=", "image", "[", "minx", ":", "maxx", ",", "miny", ":", "maxy", "]", "\n", "label", "=", "label", "[", "minx", ":", "maxx", ",", "miny", ":", "maxy", "]", "\n", "print", "(", "label", ".", "shape", ")", "\n", "f", "=", "h5py", ".", "File", "(", "item", ".", "replace", "(", "'lgemri.nrrd'", ",", "'mri_norm2.h5'", ")", ",", "'w'", ")", "\n", "f", ".", "create_dataset", "(", "'image'", ",", "data", "=", "image", ",", "compression", "=", "\"gzip\"", ")", "\n", "f", ".", "create_dataset", "(", "'label'", ",", "data", "=", "label", ",", "compression", "=", "\"gzip\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.LAHeart.__init__": [[12, 31], ["print", "item.replace", "open", "f.readlines", "len", "open", "f.readlines"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "base_dir", "=", "None", ",", "split", "=", "'train'", ",", "num", "=", "None", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "_base_dir", "=", "base_dir", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "sample_list", "=", "[", "]", "\n", "\n", "train_path", "=", "self", ".", "_base_dir", "+", "'/train.list'", "\n", "test_path", "=", "self", ".", "_base_dir", "+", "'/test.list'", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "            ", "with", "open", "(", "train_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "image_list", "=", "f", ".", "readlines", "(", ")", "\n", "", "", "elif", "split", "==", "'test'", ":", "\n", "            ", "with", "open", "(", "test_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "image_list", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "", "self", ".", "image_list", "=", "[", "item", ".", "replace", "(", "'\\n'", ",", "''", ")", "for", "item", "in", "self", ".", "image_list", "]", "\n", "if", "num", "is", "not", "None", ":", "\n", "            ", "self", ".", "image_list", "=", "self", ".", "image_list", "[", ":", "num", "]", "\n", "", "print", "(", "\"total {} samples\"", ".", "format", "(", "len", "(", "self", ".", "image_list", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.LAHeart.__len__": [[32, 34], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.LAHeart.__getitem__": [[35, 45], ["h5py.File", "la_heart.LAHeart.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "image_name", "=", "self", ".", "image_list", "[", "idx", "]", "\n", "h5f", "=", "h5py", ".", "File", "(", "self", ".", "_base_dir", "+", "\"/\"", "+", "image_name", "+", "\"/mri_norm2.h5\"", ",", "'r'", ")", "\n", "image", "=", "h5f", "[", "'image'", "]", "[", ":", "]", "\n", "label", "=", "h5f", "[", "'label'", "]", "[", ":", "]", "\n", "sample", "=", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.CenterCrop.__init__": [[48, 50], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ")", ":", "\n", "        ", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.CenterCrop.__call__": [[51, 73], ["int", "int", "int", "max", "max", "max", "numpy.pad", "numpy.pad", "round", "round", "round"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", ",", "label", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "\n", "# pad the sample if necessary", "\n", "if", "label", ".", "shape", "[", "0", "]", "<=", "self", ".", "output_size", "[", "0", "]", "or", "label", ".", "shape", "[", "1", "]", "<=", "self", ".", "output_size", "[", "1", "]", "or", "label", ".", "shape", "[", "2", "]", "<=", "self", ".", "output_size", "[", "2", "]", ":", "\n", "            ", "pw", "=", "max", "(", "(", "self", ".", "output_size", "[", "0", "]", "-", "label", ".", "shape", "[", "0", "]", ")", "//", "2", "+", "3", ",", "0", ")", "\n", "ph", "=", "max", "(", "(", "self", ".", "output_size", "[", "1", "]", "-", "label", ".", "shape", "[", "1", "]", ")", "//", "2", "+", "3", ",", "0", ")", "\n", "pd", "=", "max", "(", "(", "self", ".", "output_size", "[", "2", "]", "-", "label", ".", "shape", "[", "2", "]", ")", "//", "2", "+", "3", ",", "0", ")", "\n", "image", "=", "np", ".", "pad", "(", "image", ",", "[", "(", "pw", ",", "pw", ")", ",", "(", "ph", ",", "ph", ")", ",", "(", "pd", ",", "pd", ")", "]", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "label", "=", "np", ".", "pad", "(", "label", ",", "[", "(", "pw", ",", "pw", ")", ",", "(", "ph", ",", "ph", ")", ",", "(", "pd", ",", "pd", ")", "]", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "\n", "", "(", "w", ",", "h", ",", "d", ")", "=", "image", ".", "shape", "\n", "\n", "w1", "=", "int", "(", "round", "(", "(", "w", "-", "self", ".", "output_size", "[", "0", "]", ")", "/", "2.", ")", ")", "\n", "h1", "=", "int", "(", "round", "(", "(", "h", "-", "self", ".", "output_size", "[", "1", "]", ")", "/", "2.", ")", ")", "\n", "d1", "=", "int", "(", "round", "(", "(", "d", "-", "self", ".", "output_size", "[", "2", "]", ")", "/", "2.", ")", ")", "\n", "\n", "label", "=", "label", "[", "w1", ":", "w1", "+", "self", ".", "output_size", "[", "0", "]", ",", "h1", ":", "h1", "+", "self", ".", "output_size", "[", "1", "]", ",", "d1", ":", "d1", "+", "self", ".", "output_size", "[", "2", "]", "]", "\n", "image", "=", "image", "[", "w1", ":", "w1", "+", "self", ".", "output_size", "[", "0", "]", ",", "h1", ":", "h1", "+", "self", ".", "output_size", "[", "1", "]", ",", "d1", ":", "d1", "+", "self", ".", "output_size", "[", "2", "]", "]", "\n", "\n", "return", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.RandomCrop.__init__": [[82, 85], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_size", ",", "with_sdf", "=", "False", ")", ":", "\n", "        ", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "with_sdf", "=", "with_sdf", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.RandomCrop.__call__": [[86, 118], ["numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "max", "max", "max", "numpy.pad", "numpy.pad", "numpy.pad"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", ",", "label", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "if", "self", ".", "with_sdf", ":", "\n", "            ", "sdf", "=", "sample", "[", "'sdf'", "]", "\n", "\n", "# pad the sample if necessary", "\n", "", "if", "label", ".", "shape", "[", "0", "]", "<=", "self", ".", "output_size", "[", "0", "]", "or", "label", ".", "shape", "[", "1", "]", "<=", "self", ".", "output_size", "[", "1", "]", "or", "label", ".", "shape", "[", "2", "]", "<=", "self", ".", "output_size", "[", "2", "]", ":", "\n", "            ", "pw", "=", "max", "(", "(", "self", ".", "output_size", "[", "0", "]", "-", "label", ".", "shape", "[", "0", "]", ")", "//", "2", "+", "3", ",", "0", ")", "\n", "ph", "=", "max", "(", "(", "self", ".", "output_size", "[", "1", "]", "-", "label", ".", "shape", "[", "1", "]", ")", "//", "2", "+", "3", ",", "0", ")", "\n", "pd", "=", "max", "(", "(", "self", ".", "output_size", "[", "2", "]", "-", "label", ".", "shape", "[", "2", "]", ")", "//", "2", "+", "3", ",", "0", ")", "\n", "image", "=", "np", ".", "pad", "(", "image", ",", "[", "(", "pw", ",", "pw", ")", ",", "(", "ph", ",", "ph", ")", ",", "(", "pd", ",", "pd", ")", "]", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "label", "=", "np", ".", "pad", "(", "label", ",", "[", "(", "pw", ",", "pw", ")", ",", "(", "ph", ",", "ph", ")", ",", "(", "pd", ",", "pd", ")", "]", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "if", "self", ".", "with_sdf", ":", "\n", "                ", "sdf", "=", "np", ".", "pad", "(", "sdf", ",", "[", "(", "pw", ",", "pw", ")", ",", "(", "ph", ",", "ph", ")", ",", "(", "pd", ",", "pd", ")", "]", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "\n", "", "", "(", "w", ",", "h", ",", "d", ")", "=", "image", ".", "shape", "\n", "# if np.random.uniform() > 0.33:", "\n", "#     w1 = np.random.randint((w - self.output_size[0])//4, 3*(w - self.output_size[0])//4)", "\n", "#     h1 = np.random.randint((h - self.output_size[1])//4, 3*(h - self.output_size[1])//4)", "\n", "# else:", "\n", "w1", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "w", "-", "self", ".", "output_size", "[", "0", "]", ")", "\n", "h1", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "h", "-", "self", ".", "output_size", "[", "1", "]", ")", "\n", "d1", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "d", "-", "self", ".", "output_size", "[", "2", "]", ")", "\n", "\n", "label", "=", "label", "[", "w1", ":", "w1", "+", "self", ".", "output_size", "[", "0", "]", ",", "h1", ":", "h1", "+", "self", ".", "output_size", "[", "1", "]", ",", "d1", ":", "d1", "+", "self", ".", "output_size", "[", "2", "]", "]", "\n", "image", "=", "image", "[", "w1", ":", "w1", "+", "self", ".", "output_size", "[", "0", "]", ",", "h1", ":", "h1", "+", "self", ".", "output_size", "[", "1", "]", ",", "d1", ":", "d1", "+", "self", ".", "output_size", "[", "2", "]", "]", "\n", "if", "self", ".", "with_sdf", ":", "\n", "            ", "sdf", "=", "sdf", "[", "w1", ":", "w1", "+", "self", ".", "output_size", "[", "0", "]", ",", "h1", ":", "h1", "+", "self", ".", "output_size", "[", "1", "]", ",", "d1", ":", "d1", "+", "self", ".", "output_size", "[", "2", "]", "]", "\n", "return", "{", "'image'", ":", "image", ",", "'label'", ":", "label", ",", "'sdf'", ":", "sdf", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.RandomRotFlip.__call__": [[127, 137], ["numpy.random.randint", "numpy.rot90", "numpy.rot90", "numpy.random.randint", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip", "numpy.flip"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", ",", "label", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "k", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "4", ")", "\n", "image", "=", "np", ".", "rot90", "(", "image", ",", "k", ")", "\n", "label", "=", "np", ".", "rot90", "(", "label", ",", "k", ")", "\n", "axis", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "image", "=", "np", ".", "flip", "(", "image", ",", "axis", "=", "axis", ")", ".", "copy", "(", ")", "\n", "label", "=", "np", ".", "flip", "(", "label", ",", "axis", "=", "axis", ")", ".", "copy", "(", ")", "\n", "\n", "return", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.RandomNoise.__init__": [[140, 143], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mu", "=", "0", ",", "sigma", "=", "0.1", ")", ":", "\n", "        ", "self", ".", "mu", "=", "mu", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.RandomNoise.__call__": [[144, 150], ["numpy.clip", "numpy.random.randn"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", ",", "label", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "noise", "=", "np", ".", "clip", "(", "self", ".", "sigma", "*", "np", ".", "random", ".", "randn", "(", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "2", "]", ")", ",", "-", "2", "*", "self", ".", "sigma", ",", "2", "*", "self", ".", "sigma", ")", "\n", "noise", "=", "noise", "+", "self", ".", "mu", "\n", "image", "=", "image", "+", "noise", "\n", "return", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.CreateOnehotLabel.__init__": [[153, 155], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.CreateOnehotLabel.__call__": [[156, 162], ["numpy.zeros", "range"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", ",", "label", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "onehot_label", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ",", "label", ".", "shape", "[", "0", "]", ",", "label", ".", "shape", "[", "1", "]", ",", "label", ".", "shape", "[", "2", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "onehot_label", "[", "i", ",", ":", ",", ":", ",", ":", "]", "=", "(", "label", "==", "i", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "return", "{", "'image'", ":", "image", ",", "'label'", ":", "label", ",", "'onehot_label'", ":", "onehot_label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.ToTensor.__call__": [[167, 175], ["image.reshape().astype.reshape().astype.reshape().astype", "image.reshape().astype.reshape().astype.reshape", "torch.from_numpy", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", "=", "sample", "[", "'image'", "]", "\n", "image", "=", "image", ".", "reshape", "(", "1", ",", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "2", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "'onehot_label'", "in", "sample", ":", "\n", "            ", "return", "{", "'image'", ":", "torch", ".", "from_numpy", "(", "image", ")", ",", "'label'", ":", "torch", ".", "from_numpy", "(", "sample", "[", "'label'", "]", ")", ".", "long", "(", ")", ",", "\n", "'onehot_label'", ":", "torch", ".", "from_numpy", "(", "sample", "[", "'onehot_label'", "]", ")", ".", "long", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "'image'", ":", "torch", ".", "from_numpy", "(", "image", ")", ",", "'label'", ":", "torch", ".", "from_numpy", "(", "sample", "[", "'label'", "]", ")", ".", "long", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.TwoStreamBatchSampler.__init__": [[184, 192], ["len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "primary_indices", ",", "secondary_indices", ",", "batch_size", ",", "secondary_batch_size", ")", ":", "\n", "        ", "self", ".", "primary_indices", "=", "primary_indices", "\n", "self", ".", "secondary_indices", "=", "secondary_indices", "\n", "self", ".", "secondary_batch_size", "=", "secondary_batch_size", "\n", "self", ".", "primary_batch_size", "=", "batch_size", "-", "secondary_batch_size", "\n", "\n", "assert", "len", "(", "self", ".", "primary_indices", ")", ">=", "self", ".", "primary_batch_size", ">", "0", "\n", "assert", "len", "(", "self", ".", "secondary_indices", ")", ">=", "self", ".", "secondary_batch_size", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.TwoStreamBatchSampler.__iter__": [[193, 201], ["la_heart.iterate_once", "la_heart.iterate_eternally", "zip", "la_heart.grouper", "la_heart.grouper"], "methods", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.iterate_once", "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.iterate_eternally", "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.grouper", "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.grouper"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "primary_iter", "=", "iterate_once", "(", "self", ".", "primary_indices", ")", "\n", "secondary_iter", "=", "iterate_eternally", "(", "self", ".", "secondary_indices", ")", "\n", "return", "(", "\n", "primary_batch", "+", "secondary_batch", "\n", "for", "(", "primary_batch", ",", "secondary_batch", ")", "\n", "in", "zip", "(", "grouper", "(", "primary_iter", ",", "self", ".", "primary_batch_size", ")", ",", "\n", "grouper", "(", "secondary_iter", ",", "self", ".", "secondary_batch_size", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.TwoStreamBatchSampler.__len__": [[203, 205], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "primary_indices", ")", "//", "self", ".", "primary_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.iterate_once": [[206, 208], ["numpy.random.permutation"], "function", ["None"], ["", "", "def", "iterate_once", "(", "iterable", ")", ":", "\n", "    ", "return", "np", ".", "random", ".", "permutation", "(", "iterable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.iterate_eternally": [[210, 215], ["itertools.chain.from_iterable", "la_heart.iterate_eternally.infinite_shuffles"], "function", ["None"], ["", "def", "iterate_eternally", "(", "indices", ")", ":", "\n", "    ", "def", "infinite_shuffles", "(", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "yield", "np", ".", "random", ".", "permutation", "(", "indices", ")", "\n", "", "", "return", "itertools", ".", "chain", ".", "from_iterable", "(", "infinite_shuffles", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.la_heart.grouper": [[217, 222], ["zip", "iter"], "function", ["None"], ["", "def", "grouper", "(", "iterable", ",", "n", ")", ":", "\n", "    ", "\"Collect data into fixed-length chunks or blocks\"", "\n", "# grouper('ABCDEFG', 3) --> ABC DEF\"", "\n", "args", "=", "[", "iter", "(", "iterable", ")", "]", "*", "n", "\n", "return", "zip", "(", "*", "args", ")", "", "", ""]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.utils.recursive_glob": [[10, 18], ["os.path.join", "os.walk", "filename.endswith"], "function", ["None"], ["def", "recursive_glob", "(", "rootdir", "=", "'.'", ",", "suffix", "=", "''", ")", ":", "\n", "    ", "\"\"\"Performs recursive glob with given suffix and rootdir\n        :param rootdir is the root directory\n        :param suffix is the suffix to be searched\n    \"\"\"", "\n", "return", "[", "os", ".", "path", ".", "join", "(", "looproot", ",", "filename", ")", "\n", "for", "looproot", ",", "_", ",", "filenames", "in", "os", ".", "walk", "(", "rootdir", ")", "\n", "for", "filename", "in", "filenames", "if", "filename", ".", "endswith", "(", "suffix", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.utils.get_cityscapes_labels": [[19, 41], ["numpy.array"], "function", ["None"], ["", "def", "get_cityscapes_labels", "(", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "\n", "# [  0,   0,   0],", "\n", "[", "128", ",", "64", ",", "128", "]", ",", "\n", "[", "244", ",", "35", ",", "232", "]", ",", "\n", "[", "70", ",", "70", ",", "70", "]", ",", "\n", "[", "102", ",", "102", ",", "156", "]", ",", "\n", "[", "190", ",", "153", ",", "153", "]", ",", "\n", "[", "153", ",", "153", ",", "153", "]", ",", "\n", "[", "250", ",", "170", ",", "30", "]", ",", "\n", "[", "220", ",", "220", ",", "0", "]", ",", "\n", "[", "107", ",", "142", ",", "35", "]", ",", "\n", "[", "152", ",", "251", ",", "152", "]", ",", "\n", "[", "0", ",", "130", ",", "180", "]", ",", "\n", "[", "220", ",", "20", ",", "60", "]", ",", "\n", "[", "255", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "142", "]", ",", "\n", "[", "0", ",", "0", ",", "70", "]", ",", "\n", "[", "0", ",", "60", ",", "100", "]", ",", "\n", "[", "0", ",", "80", ",", "100", "]", ",", "\n", "[", "0", ",", "0", ",", "230", "]", ",", "\n", "[", "119", ",", "11", ",", "32", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.utils.get_pascal_labels": [[42, 53], ["numpy.asarray"], "function", ["None"], ["", "def", "get_pascal_labels", "(", ")", ":", "\n", "    ", "\"\"\"Load the mapping that associates pascal classes with label colors\n    Returns:\n        np.ndarray with dimensions (21, 3)\n    \"\"\"", "\n", "return", "np", ".", "asarray", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "128", ",", "0", ",", "0", "]", ",", "[", "0", ",", "128", ",", "0", "]", ",", "[", "128", ",", "128", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "128", "]", ",", "[", "128", ",", "0", ",", "128", "]", ",", "[", "0", ",", "128", ",", "128", "]", ",", "[", "128", ",", "128", ",", "128", "]", ",", "\n", "[", "64", ",", "0", ",", "0", "]", ",", "[", "192", ",", "0", ",", "0", "]", ",", "[", "64", ",", "128", ",", "0", "]", ",", "[", "192", ",", "128", ",", "0", "]", ",", "\n", "[", "64", ",", "0", ",", "128", "]", ",", "[", "192", ",", "0", ",", "128", "]", ",", "[", "64", ",", "128", ",", "128", "]", ",", "[", "192", ",", "128", ",", "128", "]", ",", "\n", "[", "0", ",", "64", ",", "0", "]", ",", "[", "128", ",", "64", ",", "0", "]", ",", "[", "0", ",", "192", ",", "0", "]", ",", "[", "128", ",", "192", ",", "0", "]", ",", "\n", "[", "0", ",", "64", ",", "128", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.utils.encode_segmap": [[55, 70], ["mask.astype.astype", "numpy.zeros", "enumerate", "label_mask.astype.astype", "utils.get_pascal_labels", "numpy.where", "numpy.all"], "function", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.utils.get_pascal_labels"], ["", "def", "encode_segmap", "(", "mask", ")", ":", "\n", "    ", "\"\"\"Encode segmentation label images as pascal classes\n    Args:\n        mask (np.ndarray): raw segmentation label image of dimension\n          (M, N, 3), in which the Pascal classes are encoded as colours.\n    Returns:\n        (np.ndarray): class map with dimensions (M,N), where the value at\n        a given location is the integer denoting the class index.\n    \"\"\"", "\n", "mask", "=", "mask", ".", "astype", "(", "int", ")", "\n", "label_mask", "=", "np", ".", "zeros", "(", "(", "mask", ".", "shape", "[", "0", "]", ",", "mask", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "for", "ii", ",", "label", "in", "enumerate", "(", "get_pascal_labels", "(", ")", ")", ":", "\n", "        ", "label_mask", "[", "np", ".", "where", "(", "np", ".", "all", "(", "mask", "==", "label", ",", "axis", "=", "-", "1", ")", ")", "[", ":", "2", "]", "]", "=", "ii", "\n", "", "label_mask", "=", "label_mask", ".", "astype", "(", "int", ")", "\n", "return", "label_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.utils.decode_seg_map_sequence": [[72, 79], ["torch.from_numpy", "torch.from_numpy", "utils.decode_segmap", "torch.from_numpy.append", "numpy.array().transpose", "numpy.array"], "function", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.utils.decode_segmap"], ["", "def", "decode_seg_map_sequence", "(", "label_masks", ",", "dataset", "=", "'pascal'", ")", ":", "\n", "    ", "rgb_masks", "=", "[", "]", "\n", "for", "label_mask", "in", "label_masks", ":", "\n", "        ", "rgb_mask", "=", "decode_segmap", "(", "label_mask", ",", "dataset", ")", "\n", "rgb_masks", ".", "append", "(", "rgb_mask", ")", "\n", "", "rgb_masks", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "rgb_masks", ")", ".", "transpose", "(", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", ")", "\n", "return", "rgb_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.utils.decode_segmap": [[80, 115], ["label_mask.copy", "label_mask.copy", "label_mask.copy", "range", "numpy.zeros", "utils.get_pascal_labels", "plt.imshow", "plt.show", "utils.get_cityscapes_labels"], "function", ["home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.utils.get_pascal_labels", "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.utils.get_cityscapes_labels"], ["", "def", "decode_segmap", "(", "label_mask", ",", "dataset", ",", "plot", "=", "False", ")", ":", "\n", "    ", "\"\"\"Decode segmentation class labels into a color image\n    Args:\n        label_mask (np.ndarray): an (M,N) array of integer values denoting\n          the class label at each spatial location.\n        plot (bool, optional): whether to show the resulting color image\n          in a figure.\n    Returns:\n        (np.ndarray, optional): the resulting decoded color image.\n    \"\"\"", "\n", "if", "dataset", "==", "'pascal'", ":", "\n", "        ", "n_classes", "=", "21", "\n", "label_colours", "=", "get_pascal_labels", "(", ")", "\n", "", "elif", "dataset", "==", "'cityscapes'", ":", "\n", "        ", "n_classes", "=", "19", "\n", "label_colours", "=", "get_cityscapes_labels", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "r", "=", "label_mask", ".", "copy", "(", ")", "\n", "g", "=", "label_mask", ".", "copy", "(", ")", "\n", "b", "=", "label_mask", ".", "copy", "(", ")", "\n", "for", "ll", "in", "range", "(", "0", ",", "n_classes", ")", ":", "\n", "        ", "r", "[", "label_mask", "==", "ll", "]", "=", "label_colours", "[", "ll", ",", "0", "]", "\n", "g", "[", "label_mask", "==", "ll", "]", "=", "label_colours", "[", "ll", ",", "1", "]", "\n", "b", "[", "label_mask", "==", "ll", "]", "=", "label_colours", "[", "ll", ",", "2", "]", "\n", "", "rgb", "=", "np", ".", "zeros", "(", "(", "label_mask", ".", "shape", "[", "0", "]", ",", "label_mask", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "rgb", "[", ":", ",", ":", ",", "0", "]", "=", "r", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "1", "]", "=", "g", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "2", "]", "=", "b", "/", "255.0", "\n", "if", "plot", ":", "\n", "        ", "plt", ".", "imshow", "(", "rgb", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.utils.generate_param_report": [[116, 122], ["open", "open.write", "open.close", "str"], "function", ["None"], ["", "", "def", "generate_param_report", "(", "logfile", ",", "param", ")", ":", "\n", "    ", "log_file", "=", "open", "(", "logfile", ",", "'w'", ")", "\n", "# for key, val in param.items():", "\n", "#     log_file.write(key + ':' + str(val) + '\\n')", "\n", "log_file", ".", "write", "(", "str", "(", "param", ")", ")", "\n", "log_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.utils.cross_entropy2d": [[123, 140], ["logit.size", "target.squeeze.squeeze", "nn.CrossEntropyLoss.", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "target.squeeze.long", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "function", ["None"], ["", "def", "cross_entropy2d", "(", "logit", ",", "target", ",", "ignore_index", "=", "255", ",", "weight", "=", "None", ",", "size_average", "=", "True", ",", "batch_average", "=", "True", ")", ":", "\n", "    ", "n", ",", "c", ",", "h", ",", "w", "=", "logit", ".", "size", "(", ")", "\n", "# logit = logit.permute(0, 2, 3, 1)", "\n", "target", "=", "target", ".", "squeeze", "(", "1", ")", "\n", "if", "weight", "is", "None", ":", "\n", "        ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "weight", ",", "ignore_index", "=", "ignore_index", ",", "size_average", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "weight", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "ignore_index", "=", "ignore_index", ",", "size_average", "=", "False", ")", "\n", "", "loss", "=", "criterion", "(", "logit", ",", "target", ".", "long", "(", ")", ")", "\n", "\n", "if", "size_average", ":", "\n", "        ", "loss", "/=", "(", "h", "*", "w", ")", "\n", "\n", "", "if", "batch_average", ":", "\n", "        ", "loss", "/=", "n", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.utils.lr_poly": [[141, 143], ["float"], "function", ["None"], ["", "def", "lr_poly", "(", "base_lr", ",", "iter_", ",", "max_iter", "=", "100", ",", "power", "=", "0.9", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter_", ")", "/", "max_iter", ")", "**", "power", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.utils.get_iou": [[145, 172], ["range", "len", "range", "range", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "iou.append", "sum", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "get_iou", "(", "pred", ",", "gt", ",", "n_classes", "=", "21", ")", ":", "\n", "    ", "total_iou", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "pred", ")", ")", ":", "\n", "        ", "pred_tmp", "=", "pred", "[", "i", "]", "\n", "gt_tmp", "=", "gt", "[", "i", "]", "\n", "\n", "intersect", "=", "[", "0", "]", "*", "n_classes", "\n", "union", "=", "[", "0", "]", "*", "n_classes", "\n", "for", "j", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "match", "=", "(", "pred_tmp", "==", "j", ")", "+", "(", "gt_tmp", "==", "j", ")", "\n", "\n", "it", "=", "torch", ".", "sum", "(", "match", "==", "2", ")", ".", "item", "(", ")", "\n", "un", "=", "torch", ".", "sum", "(", "match", ">", "0", ")", ".", "item", "(", ")", "\n", "\n", "intersect", "[", "j", "]", "+=", "it", "\n", "union", "[", "j", "]", "+=", "un", "\n", "\n", "", "iou", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "if", "union", "[", "k", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "iou", ".", "append", "(", "intersect", "[", "k", "]", "/", "union", "[", "k", "]", ")", "\n", "\n", "", "img_iou", "=", "(", "sum", "(", "iou", ")", "/", "len", "(", "iou", ")", ")", "\n", "total_iou", "+=", "img_iou", "\n", "\n", "", "return", "total_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.utils.get_dice": [[173, 185], ["pred.long.long", "gt.long.long", "range", "len", "print", "torch.sum().item", "torch.sum().item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "get_dice", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "total_dice", "=", "0.0", "\n", "pred", "=", "pred", ".", "long", "(", ")", "\n", "gt", "=", "gt", ".", "long", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "pred", ")", ")", ":", "\n", "        ", "pred_tmp", "=", "pred", "[", "i", "]", "\n", "gt_tmp", "=", "gt", "[", "i", "]", "\n", "dice", "=", "2.0", "*", "torch", ".", "sum", "(", "pred_tmp", "*", "gt_tmp", ")", ".", "item", "(", ")", "/", "(", "1.0", "+", "torch", ".", "sum", "(", "pred_tmp", "**", "2", ")", "+", "torch", ".", "sum", "(", "gt_tmp", "**", "2", ")", ")", ".", "item", "(", ")", "\n", "print", "(", "dice", ")", "\n", "total_dice", "+=", "dice", "\n", "\n", "", "return", "total_dice", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.utils.get_mc_dice": [[186, 198], ["numpy.zeros", "pred.long.long", "gt.long.long", "range", "len", "range", "torch.sum().item", "torch.sum().item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "get_mc_dice", "(", "pred", ",", "gt", ",", "num", "=", "2", ")", ":", "\n", "# num is the total number of classes, include the background", "\n", "    ", "total_dice", "=", "np", ".", "zeros", "(", "num", "-", "1", ")", "\n", "pred", "=", "pred", ".", "long", "(", ")", "\n", "gt", "=", "gt", ".", "long", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "pred", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "num", ")", ":", "\n", "            ", "pred_tmp", "=", "(", "pred", "[", "i", "]", "==", "j", ")", "\n", "gt_tmp", "=", "(", "gt", "[", "i", "]", "==", "j", ")", "\n", "dice", "=", "2.0", "*", "torch", ".", "sum", "(", "pred_tmp", "*", "gt_tmp", ")", ".", "item", "(", ")", "/", "(", "1.0", "+", "torch", ".", "sum", "(", "pred_tmp", "**", "2", ")", "+", "torch", ".", "sum", "(", "gt_tmp", "**", "2", ")", ")", ".", "item", "(", ")", "\n", "total_dice", "[", "j", "-", "1", "]", "+=", "dice", "\n", "", "", "return", "total_dice", "\n", "\n"]], "home.repos.pwc.inspect_result.YichiZhang98_DTML.dataloaders.utils.post_processing": [[199, 211], ["scipy.binary_fill_holes", "skimage.measure.label", "numpy.sum", "skimage.measure.regionprops", "range", "numpy.sum"], "function", ["None"], ["", "def", "post_processing", "(", "prediction", ")", ":", "\n", "    ", "prediction", "=", "nd", ".", "binary_fill_holes", "(", "prediction", ")", "\n", "label_cc", ",", "num_cc", "=", "measure", ".", "label", "(", "prediction", ",", "return_num", "=", "True", ")", "\n", "total_cc", "=", "np", ".", "sum", "(", "prediction", ")", "\n", "measure", ".", "regionprops", "(", "label_cc", ")", "\n", "for", "cc", "in", "range", "(", "1", ",", "num_cc", "+", "1", ")", ":", "\n", "        ", "single_cc", "=", "(", "label_cc", "==", "cc", ")", "\n", "single_vol", "=", "np", ".", "sum", "(", "single_cc", ")", "\n", "if", "single_vol", "/", "total_cc", "<", "0.2", ":", "\n", "            ", "prediction", "[", "single_cc", "]", "=", "0", "\n", "\n", "", "", "return", "prediction", "\n", "\n"]]}