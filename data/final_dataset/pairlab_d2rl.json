{"home.repos.pwc.inspect_result.pairlab_d2rl.TD3.main.eval_policy": [[16, 31], ["gym.make", "gym.make.seed", "range", "gym.make.reset", "policy.select_action", "gym.make.step", "numpy.array"], "function", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.reset", "home.repos.pwc.inspect_result.pairlab_d2rl.sac.sac.SAC.select_action", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.step"], ["def", "eval_policy", "(", "policy", ",", "env_name", ",", "seed", ",", "eval_episodes", "=", "10", ")", ":", "\n", "    ", "eval_env", "=", "gym", ".", "make", "(", "env_name", ")", "\n", "eval_env", ".", "seed", "(", "seed", "+", "100", ")", "\n", "\n", "avg_reward", "=", "0.", "\n", "for", "_", "in", "range", "(", "eval_episodes", ")", ":", "\n", "        ", "state", ",", "done", "=", "eval_env", ".", "reset", "(", ")", ",", "False", "\n", "while", "not", "done", ":", "\n", "            ", "action", "=", "policy", ".", "select_action", "(", "np", ".", "array", "(", "state", ")", ")", "\n", "state", ",", "reward", ",", "done", ",", "_", "=", "eval_env", ".", "step", "(", "action", ")", "\n", "avg_reward", "+=", "reward", "\n", "\n", "", "", "avg_reward", "/=", "eval_episodes", "\n", "\n", "return", "avg_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.OurDDPG.Actor.__init__": [[15, 23], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "state_dim", ",", "action_dim", ",", "max_action", ")", ":", "\n", "\t\t", "super", "(", "Actor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "state_dim", ",", "400", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "400", ",", "300", ")", "\n", "self", ".", "l3", "=", "nn", ".", "Linear", "(", "300", ",", "action_dim", ")", "\n", "\n", "self", ".", "max_action", "=", "max_action", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.OurDDPG.Actor.forward": [[25, 29], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "OurDDPG.Actor.l1", "OurDDPG.Actor.l2", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "OurDDPG.Actor.l3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ")", ":", "\n", "\t\t", "a", "=", "F", ".", "relu", "(", "self", ".", "l1", "(", "state", ")", ")", "\n", "a", "=", "F", ".", "relu", "(", "self", ".", "l2", "(", "a", ")", ")", "\n", "return", "self", ".", "max_action", "*", "torch", ".", "tanh", "(", "self", ".", "l3", "(", "a", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.OurDDPG.Critic.__init__": [[32, 38], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "state_dim", ",", "action_dim", ")", ":", "\n", "\t\t", "super", "(", "Critic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "state_dim", "+", "action_dim", ",", "400", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "400", ",", "300", ")", "\n", "self", ".", "l3", "=", "nn", ".", "Linear", "(", "300", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.OurDDPG.Critic.forward": [[40, 44], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "OurDDPG.Critic.l3", "OurDDPG.Critic.l1", "OurDDPG.Critic.l2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "\t\t", "q", "=", "F", ".", "relu", "(", "self", ".", "l1", "(", "torch", ".", "cat", "(", "[", "state", ",", "action", "]", ",", "1", ")", ")", ")", "\n", "q", "=", "F", ".", "relu", "(", "self", ".", "l2", "(", "q", ")", ")", "\n", "return", "self", ".", "l3", "(", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.OurDDPG.DDPG.__init__": [[47, 58], ["Actor().to", "copy.deepcopy", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "Critic().to", "copy.deepcopy", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "OurDDPG.DDPG.actor.parameters", "OurDDPG.DDPG.critic.parameters", "OurDDPG.Actor", "OurDDPG.Critic"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "state_dim", ",", "action_dim", ",", "max_action", ",", "discount", "=", "0.99", ",", "tau", "=", "0.005", ")", ":", "\n", "\t\t", "self", ".", "actor", "=", "Actor", "(", "state_dim", ",", "action_dim", ",", "max_action", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "actor_target", "=", "copy", ".", "deepcopy", "(", "self", ".", "actor", ")", "\n", "self", ".", "actor_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "actor", ".", "parameters", "(", ")", ")", "\n", "\n", "self", ".", "critic", "=", "Critic", "(", "state_dim", ",", "action_dim", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "critic_target", "=", "copy", ".", "deepcopy", "(", "self", ".", "critic", ")", "\n", "self", ".", "critic_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "critic", ".", "parameters", "(", ")", ")", "\n", "\n", "self", ".", "discount", "=", "discount", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.OurDDPG.DDPG.select_action": [[60, 63], ["torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "OurDDPG.DDPG.actor().cpu().data.numpy().flatten", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "OurDDPG.DDPG.actor().cpu().data.numpy", "torch.FloatTensor().to.reshape", "torch.FloatTensor().to.reshape", "torch.FloatTensor().to.reshape", "OurDDPG.DDPG.actor().cpu", "OurDDPG.DDPG.actor"], "methods", ["None"], ["", "def", "select_action", "(", "self", ",", "state", ")", ":", "\n", "\t\t", "state", "=", "torch", ".", "FloatTensor", "(", "state", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "return", "self", ".", "actor", "(", "state", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.OurDDPG.DDPG.train": [[65, 98], ["replay_buffer.sample", "OurDDPG.DDPG.critic_target", "OurDDPG.DDPG.critic", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "OurDDPG.DDPG.critic_optimizer.zero_grad", "torch.mse_loss.backward", "OurDDPG.DDPG.critic_optimizer.step", "OurDDPG.DDPG.actor_optimizer.zero_grad", "actor_loss.backward", "OurDDPG.DDPG.actor_optimizer.step", "zip", "zip", "OurDDPG.DDPG.actor_target", "OurDDPG.DDPG.critic().mean", "OurDDPG.DDPG.critic.parameters", "OurDDPG.DDPG.critic_target.parameters", "target_param.data.copy_", "OurDDPG.DDPG.actor.parameters", "OurDDPG.DDPG.actor_target.parameters", "target_param.data.copy_", "OurDDPG.DDPG.critic", "OurDDPG.DDPG.actor"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.sample", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.step", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.step"], ["", "def", "train", "(", "self", ",", "replay_buffer", ",", "batch_size", "=", "100", ")", ":", "\n", "# Sample replay buffer ", "\n", "\t\t", "state", ",", "action", ",", "next_state", ",", "reward", ",", "not_done", "=", "replay_buffer", ".", "sample", "(", "batch_size", ")", "\n", "\n", "# Compute the target Q value", "\n", "target_Q", "=", "self", ".", "critic_target", "(", "next_state", ",", "self", ".", "actor_target", "(", "next_state", ")", ")", "\n", "target_Q", "=", "reward", "+", "(", "not_done", "*", "self", ".", "discount", "*", "target_Q", ")", ".", "detach", "(", ")", "\n", "\n", "# Get current Q estimate", "\n", "current_Q", "=", "self", ".", "critic", "(", "state", ",", "action", ")", "\n", "\n", "# Compute critic loss", "\n", "critic_loss", "=", "F", ".", "mse_loss", "(", "current_Q", ",", "target_Q", ")", "\n", "\n", "# Optimize the critic", "\n", "self", ".", "critic_optimizer", ".", "zero_grad", "(", ")", "\n", "critic_loss", ".", "backward", "(", ")", "\n", "self", ".", "critic_optimizer", ".", "step", "(", ")", "\n", "\n", "# Compute actor loss", "\n", "actor_loss", "=", "-", "self", ".", "critic", "(", "state", ",", "self", ".", "actor", "(", "state", ")", ")", ".", "mean", "(", ")", "\n", "\n", "# Optimize the actor ", "\n", "self", ".", "actor_optimizer", ".", "zero_grad", "(", ")", "\n", "actor_loss", ".", "backward", "(", ")", "\n", "self", ".", "actor_optimizer", ".", "step", "(", ")", "\n", "\n", "# Update the frozen target models", "\n", "for", "param", ",", "target_param", "in", "zip", "(", "self", ".", "critic", ".", "parameters", "(", ")", ",", "self", ".", "critic_target", ".", "parameters", "(", ")", ")", ":", "\n", "\t\t\t", "target_param", ".", "data", ".", "copy_", "(", "self", ".", "tau", "*", "param", ".", "data", "+", "(", "1", "-", "self", ".", "tau", ")", "*", "target_param", ".", "data", ")", "\n", "\n", "", "for", "param", ",", "target_param", "in", "zip", "(", "self", ".", "actor", ".", "parameters", "(", ")", ",", "self", ".", "actor_target", ".", "parameters", "(", ")", ")", ":", "\n", "\t\t\t", "target_param", ".", "data", ".", "copy_", "(", "self", ".", "tau", "*", "param", ".", "data", "+", "(", "1", "-", "self", ".", "tau", ")", "*", "target_param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.OurDDPG.DDPG.save": [[100, 106], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "OurDDPG.DDPG.critic.state_dict", "OurDDPG.DDPG.critic_optimizer.state_dict", "OurDDPG.DDPG.actor.state_dict", "OurDDPG.DDPG.actor_optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save"], ["", "", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "\t\t", "torch", ".", "save", "(", "self", ".", "critic", ".", "state_dict", "(", ")", ",", "filename", "+", "\"_critic\"", ")", "\n", "torch", ".", "save", "(", "self", ".", "critic_optimizer", ".", "state_dict", "(", ")", ",", "filename", "+", "\"_critic_optimizer\"", ")", "\n", "\n", "torch", ".", "save", "(", "self", ".", "actor", ".", "state_dict", "(", ")", ",", "filename", "+", "\"_actor\"", ")", "\n", "torch", ".", "save", "(", "self", ".", "actor_optimizer", ".", "state_dict", "(", ")", ",", "filename", "+", "\"_actor_optimizer\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.OurDDPG.DDPG.load": [[108, 116], ["OurDDPG.DDPG.critic.load_state_dict", "OurDDPG.DDPG.critic_optimizer.load_state_dict", "copy.deepcopy", "OurDDPG.DDPG.actor.load_state_dict", "OurDDPG.DDPG.actor_optimizer.load_state_dict", "copy.deepcopy", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load"], ["", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "\t\t", "self", ".", "critic", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", "+", "\"_critic\"", ")", ")", "\n", "self", ".", "critic_optimizer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", "+", "\"_critic_optimizer\"", ")", ")", "\n", "self", ".", "critic_target", "=", "copy", ".", "deepcopy", "(", "self", ".", "critic", ")", "\n", "\n", "self", ".", "actor", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", "+", "\"_actor\"", ")", ")", "\n", "self", ".", "actor_optimizer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", "+", "\"_actor_optimizer\"", ")", ")", "\n", "self", ".", "actor_target", "=", "copy", ".", "deepcopy", "(", "self", ".", "actor", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.DDPG.Actor.__init__": [[16, 24], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "state_dim", ",", "action_dim", ",", "max_action", ")", ":", "\n", "\t\t", "super", "(", "Actor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "state_dim", ",", "400", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "400", ",", "300", ")", "\n", "self", ".", "l3", "=", "nn", ".", "Linear", "(", "300", ",", "action_dim", ")", "\n", "\n", "self", ".", "max_action", "=", "max_action", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.DDPG.Actor.forward": [[26, 30], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "DDPG.Actor.l1", "DDPG.Actor.l2", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "DDPG.Actor.l3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ")", ":", "\n", "\t\t", "a", "=", "F", ".", "relu", "(", "self", ".", "l1", "(", "state", ")", ")", "\n", "a", "=", "F", ".", "relu", "(", "self", ".", "l2", "(", "a", ")", ")", "\n", "return", "self", ".", "max_action", "*", "torch", ".", "tanh", "(", "self", ".", "l3", "(", "a", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.DDPG.Critic.__init__": [[33, 39], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "state_dim", ",", "action_dim", ")", ":", "\n", "\t\t", "super", "(", "Critic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "state_dim", ",", "400", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "400", "+", "action_dim", ",", "300", ")", "\n", "self", ".", "l3", "=", "nn", ".", "Linear", "(", "300", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.DDPG.Critic.forward": [[41, 45], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "DDPG.Critic.l3", "DDPG.Critic.l1", "DDPG.Critic.l2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "\t\t", "q", "=", "F", ".", "relu", "(", "self", ".", "l1", "(", "state", ")", ")", "\n", "q", "=", "F", ".", "relu", "(", "self", ".", "l2", "(", "torch", ".", "cat", "(", "[", "q", ",", "action", "]", ",", "1", ")", ")", ")", "\n", "return", "self", ".", "l3", "(", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.DDPG.DDPG.__init__": [[48, 59], ["Actor().to", "copy.deepcopy", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "Critic().to", "copy.deepcopy", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "DDPG.DDPG.actor.parameters", "DDPG.DDPG.critic.parameters", "DDPG.Actor", "DDPG.Critic"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "state_dim", ",", "action_dim", ",", "max_action", ",", "discount", "=", "0.99", ",", "tau", "=", "0.001", ")", ":", "\n", "\t\t", "self", ".", "actor", "=", "Actor", "(", "state_dim", ",", "action_dim", ",", "max_action", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "actor_target", "=", "copy", ".", "deepcopy", "(", "self", ".", "actor", ")", "\n", "self", ".", "actor_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "actor", ".", "parameters", "(", ")", ",", "lr", "=", "1e-4", ")", "\n", "\n", "self", ".", "critic", "=", "Critic", "(", "state_dim", ",", "action_dim", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "critic_target", "=", "copy", ".", "deepcopy", "(", "self", ".", "critic", ")", "\n", "self", ".", "critic_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "critic", ".", "parameters", "(", ")", ",", "weight_decay", "=", "1e-2", ")", "\n", "\n", "self", ".", "discount", "=", "discount", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.DDPG.DDPG.select_action": [[61, 64], ["torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "DDPG.DDPG.actor().cpu().data.numpy().flatten", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "DDPG.DDPG.actor().cpu().data.numpy", "torch.FloatTensor().to.reshape", "torch.FloatTensor().to.reshape", "torch.FloatTensor().to.reshape", "DDPG.DDPG.actor().cpu", "DDPG.DDPG.actor"], "methods", ["None"], ["", "def", "select_action", "(", "self", ",", "state", ")", ":", "\n", "\t\t", "state", "=", "torch", ".", "FloatTensor", "(", "state", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "return", "self", ".", "actor", "(", "state", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.DDPG.DDPG.train": [[66, 99], ["replay_buffer.sample", "DDPG.DDPG.critic_target", "DDPG.DDPG.critic", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "DDPG.DDPG.critic_optimizer.zero_grad", "torch.mse_loss.backward", "DDPG.DDPG.critic_optimizer.step", "DDPG.DDPG.actor_optimizer.zero_grad", "actor_loss.backward", "DDPG.DDPG.actor_optimizer.step", "zip", "zip", "DDPG.DDPG.actor_target", "DDPG.DDPG.critic().mean", "DDPG.DDPG.critic.parameters", "DDPG.DDPG.critic_target.parameters", "target_param.data.copy_", "DDPG.DDPG.actor.parameters", "DDPG.DDPG.actor_target.parameters", "target_param.data.copy_", "DDPG.DDPG.critic", "DDPG.DDPG.actor"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.sample", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.step", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.step"], ["", "def", "train", "(", "self", ",", "replay_buffer", ",", "batch_size", "=", "64", ")", ":", "\n", "# Sample replay buffer ", "\n", "\t\t", "state", ",", "action", ",", "next_state", ",", "reward", ",", "not_done", "=", "replay_buffer", ".", "sample", "(", "batch_size", ")", "\n", "\n", "# Compute the target Q value", "\n", "target_Q", "=", "self", ".", "critic_target", "(", "next_state", ",", "self", ".", "actor_target", "(", "next_state", ")", ")", "\n", "target_Q", "=", "reward", "+", "(", "not_done", "*", "self", ".", "discount", "*", "target_Q", ")", ".", "detach", "(", ")", "\n", "\n", "# Get current Q estimate", "\n", "current_Q", "=", "self", ".", "critic", "(", "state", ",", "action", ")", "\n", "\n", "# Compute critic loss", "\n", "critic_loss", "=", "F", ".", "mse_loss", "(", "current_Q", ",", "target_Q", ")", "\n", "\n", "# Optimize the critic", "\n", "self", ".", "critic_optimizer", ".", "zero_grad", "(", ")", "\n", "critic_loss", ".", "backward", "(", ")", "\n", "self", ".", "critic_optimizer", ".", "step", "(", ")", "\n", "\n", "# Compute actor loss", "\n", "actor_loss", "=", "-", "self", ".", "critic", "(", "state", ",", "self", ".", "actor", "(", "state", ")", ")", ".", "mean", "(", ")", "\n", "\n", "# Optimize the actor ", "\n", "self", ".", "actor_optimizer", ".", "zero_grad", "(", ")", "\n", "actor_loss", ".", "backward", "(", ")", "\n", "self", ".", "actor_optimizer", ".", "step", "(", ")", "\n", "\n", "# Update the frozen target models", "\n", "for", "param", ",", "target_param", "in", "zip", "(", "self", ".", "critic", ".", "parameters", "(", ")", ",", "self", ".", "critic_target", ".", "parameters", "(", ")", ")", ":", "\n", "\t\t\t", "target_param", ".", "data", ".", "copy_", "(", "self", ".", "tau", "*", "param", ".", "data", "+", "(", "1", "-", "self", ".", "tau", ")", "*", "target_param", ".", "data", ")", "\n", "\n", "", "for", "param", ",", "target_param", "in", "zip", "(", "self", ".", "actor", ".", "parameters", "(", ")", ",", "self", ".", "actor_target", ".", "parameters", "(", ")", ")", ":", "\n", "\t\t\t", "target_param", ".", "data", ".", "copy_", "(", "self", ".", "tau", "*", "param", ".", "data", "+", "(", "1", "-", "self", ".", "tau", ")", "*", "target_param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.DDPG.DDPG.save": [[101, 107], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "DDPG.DDPG.critic.state_dict", "DDPG.DDPG.critic_optimizer.state_dict", "DDPG.DDPG.actor.state_dict", "DDPG.DDPG.actor_optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save"], ["", "", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "\t\t", "torch", ".", "save", "(", "self", ".", "critic", ".", "state_dict", "(", ")", ",", "filename", "+", "\"_critic\"", ")", "\n", "torch", ".", "save", "(", "self", ".", "critic_optimizer", ".", "state_dict", "(", ")", ",", "filename", "+", "\"_critic_optimizer\"", ")", "\n", "\n", "torch", ".", "save", "(", "self", ".", "actor", ".", "state_dict", "(", ")", ",", "filename", "+", "\"_actor\"", ")", "\n", "torch", ".", "save", "(", "self", ".", "actor_optimizer", ".", "state_dict", "(", ")", ",", "filename", "+", "\"_actor_optimizer\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.DDPG.DDPG.load": [[109, 117], ["DDPG.DDPG.critic.load_state_dict", "DDPG.DDPG.critic_optimizer.load_state_dict", "copy.deepcopy", "DDPG.DDPG.actor.load_state_dict", "DDPG.DDPG.actor_optimizer.load_state_dict", "copy.deepcopy", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load"], ["", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "\t\t", "self", ".", "critic", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", "+", "\"_critic\"", ")", ")", "\n", "self", ".", "critic_optimizer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", "+", "\"_critic_optimizer\"", ")", ")", "\n", "self", ".", "critic_target", "=", "copy", ".", "deepcopy", "(", "self", ".", "critic", ")", "\n", "\n", "self", ".", "actor", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", "+", "\"_actor\"", ")", ")", "\n", "self", ".", "actor_optimizer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", "+", "\"_actor_optimizer\"", ")", ")", "\n", "self", ".", "actor_target", "=", "copy", ".", "deepcopy", "(", "self", ".", "actor", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.TD3.D2RLActor.__init__": [[15, 25], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "state_dim", ",", "action_dim", ",", "max_action", ")", ":", "\n", "        ", "super", "(", "D2RLActor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "state_dim", ",", "256", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "256", "+", "state_dim", ",", "256", ")", "\n", "self", ".", "l3", "=", "nn", ".", "Linear", "(", "256", "+", "state_dim", ",", "256", ")", "\n", "self", ".", "l4", "=", "nn", ".", "Linear", "(", "256", "+", "state_dim", ",", "256", ")", "\n", "self", ".", "l5", "=", "nn", ".", "Linear", "(", "256", ",", "action_dim", ")", "\n", "\n", "self", ".", "max_action", "=", "max_action", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.TD3.D2RLActor.forward": [[27, 40], ["torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "TD3.D2RLActor.l1", "TD3.D2RLActor.l2", "TD3.D2RLActor.l3", "TD3.D2RLActor.l4", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "TD3.D2RLActor.l5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ")", ":", "\n", "        ", "a", "=", "F", ".", "relu", "(", "self", ".", "l1", "(", "state", ")", ")", "\n", "\n", "a", "=", "torch", ".", "cat", "(", "[", "a", ",", "state", "]", ",", "1", ")", "\n", "a", "=", "F", ".", "relu", "(", "self", ".", "l2", "(", "a", ")", ")", "\n", "\n", "a", "=", "torch", ".", "cat", "(", "[", "a", ",", "state", "]", ",", "1", ")", "\n", "a", "=", "F", ".", "relu", "(", "self", ".", "l3", "(", "a", ")", ")", "\n", "\n", "a", "=", "torch", ".", "cat", "(", "[", "a", ",", "state", "]", ",", "1", ")", "\n", "a", "=", "F", ".", "relu", "(", "self", ".", "l4", "(", "a", ")", ")", "\n", "\n", "return", "self", ".", "max_action", "*", "torch", ".", "tanh", "(", "self", ".", "l5", "(", "a", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.TD3.D2RLCritic.__init__": [[42, 60], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "state_dim", ",", "action_dim", ")", ":", "\n", "        ", "super", "(", "D2RLCritic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "in_dim", "=", "state_dim", "+", "action_dim", "\n", "\n", "# Q1 architecture", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "in_dim", ",", "256", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "256", "+", "in_dim", ",", "256", ")", "\n", "self", ".", "l3", "=", "nn", ".", "Linear", "(", "256", "+", "in_dim", ",", "256", ")", "\n", "self", ".", "l4", "=", "nn", ".", "Linear", "(", "256", "+", "in_dim", ",", "256", ")", "\n", "self", ".", "l5", "=", "nn", ".", "Linear", "(", "256", ",", "1", ")", "\n", "\n", "# Q2 architecture", "\n", "self", ".", "l6", "=", "nn", ".", "Linear", "(", "in_dim", ",", "256", ")", "\n", "self", ".", "l7", "=", "nn", ".", "Linear", "(", "256", "+", "in_dim", ",", "256", ")", "\n", "self", ".", "l8", "=", "nn", ".", "Linear", "(", "256", "+", "in_dim", ",", "256", ")", "\n", "self", ".", "l9", "=", "nn", ".", "Linear", "(", "256", "+", "in_dim", ",", "256", ")", "\n", "self", ".", "l0", "=", "nn", ".", "Linear", "(", "256", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.TD3.D2RLCritic.forward": [[62, 90], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "TD3.D2RLCritic.l5", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "TD3.D2RLCritic.l0", "TD3.D2RLCritic.l1", "TD3.D2RLCritic.l2", "TD3.D2RLCritic.l3", "TD3.D2RLCritic.l4", "TD3.D2RLCritic.l6", "TD3.D2RLCritic.l7", "TD3.D2RLCritic.l8", "TD3.D2RLCritic.l9"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "sa", "=", "torch", ".", "cat", "(", "[", "state", ",", "action", "]", ",", "1", ")", "\n", "q1", "=", "F", ".", "relu", "(", "self", ".", "l1", "(", "sa", ")", ")", "\n", "\n", "q1", "=", "torch", ".", "cat", "(", "[", "q1", ",", "sa", "]", ",", "1", ")", "\n", "q1", "=", "F", ".", "relu", "(", "self", ".", "l2", "(", "q1", ")", ")", "\n", "\n", "q1", "=", "torch", ".", "cat", "(", "[", "q1", ",", "sa", "]", ",", "1", ")", "\n", "q1", "=", "F", ".", "relu", "(", "self", ".", "l3", "(", "q1", ")", ")", "\n", "\n", "q1", "=", "torch", ".", "cat", "(", "[", "q1", ",", "sa", "]", ",", "1", ")", "\n", "q1", "=", "F", ".", "relu", "(", "self", ".", "l4", "(", "q1", ")", ")", "\n", "\n", "q1", "=", "self", ".", "l5", "(", "q1", ")", "\n", "\n", "q2", "=", "F", ".", "relu", "(", "self", ".", "l6", "(", "sa", ")", ")", "\n", "\n", "q2", "=", "torch", ".", "cat", "(", "[", "q2", ",", "sa", "]", ",", "1", ")", "\n", "q2", "=", "F", ".", "relu", "(", "self", ".", "l7", "(", "q2", ")", ")", "\n", "\n", "q2", "=", "torch", ".", "cat", "(", "[", "q2", ",", "sa", "]", ",", "1", ")", "\n", "q2", "=", "F", ".", "relu", "(", "self", ".", "l8", "(", "q2", ")", ")", "\n", "\n", "q2", "=", "torch", ".", "cat", "(", "[", "q2", ",", "sa", "]", ",", "1", ")", "\n", "q2", "=", "F", ".", "relu", "(", "self", ".", "l9", "(", "q2", ")", ")", "\n", "\n", "q2", "=", "self", ".", "l0", "(", "q2", ")", "\n", "return", "q1", ",", "q2", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.TD3.D2RLCritic.Q1": [[92, 107], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "TD3.D2RLCritic.l5", "TD3.D2RLCritic.l1", "TD3.D2RLCritic.l2", "TD3.D2RLCritic.l3", "TD3.D2RLCritic.l4"], "methods", ["None"], ["", "def", "Q1", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "sa", "=", "torch", ".", "cat", "(", "[", "state", ",", "action", "]", ",", "1", ")", "\n", "q1", "=", "F", ".", "relu", "(", "self", ".", "l1", "(", "sa", ")", ")", "\n", "\n", "q1", "=", "torch", ".", "cat", "(", "[", "q1", ",", "sa", "]", ",", "1", ")", "\n", "q1", "=", "F", ".", "relu", "(", "self", ".", "l2", "(", "q1", ")", ")", "\n", "\n", "q1", "=", "torch", ".", "cat", "(", "[", "q1", ",", "sa", "]", ",", "1", ")", "\n", "q1", "=", "F", ".", "relu", "(", "self", ".", "l3", "(", "q1", ")", ")", "\n", "\n", "q1", "=", "torch", ".", "cat", "(", "[", "q1", ",", "sa", "]", ",", "1", ")", "\n", "q1", "=", "F", ".", "relu", "(", "self", ".", "l4", "(", "q1", ")", ")", "\n", "\n", "q1", "=", "self", ".", "l5", "(", "q1", ")", "\n", "return", "q1", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.TD3.TD3.__init__": [[110, 145], ["actor_prototype().to", "copy.deepcopy", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "critic_prototype().to", "copy.deepcopy", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "TD3.TD3.actor.parameters", "TD3.TD3.critic.parameters", "actor_prototype", "critic_prototype"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "state_dim", ",", "\n", "action_dim", ",", "\n", "max_action", ",", "\n", "discount", "=", "0.99", ",", "\n", "tau", "=", "0.005", ",", "\n", "policy_noise", "=", "0.2", ",", "\n", "noise_clip", "=", "0.5", ",", "\n", "policy_freq", "=", "2", ",", "\n", "args", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "actor_prototype", "=", "D2RLActor", "\n", "\n", "self", ".", "actor", "=", "actor_prototype", "(", "state_dim", ",", "action_dim", ",", "max_action", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "actor_target", "=", "copy", ".", "deepcopy", "(", "self", ".", "actor", ")", "\n", "self", ".", "actor_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "actor", ".", "parameters", "(", ")", ",", "lr", "=", "3e-4", ")", "\n", "\n", "critic_prototype", "=", "D2RLCritic", "\n", "\n", "self", ".", "critic", "=", "critic_prototype", "(", "state_dim", ",", "action_dim", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "critic_target", "=", "copy", ".", "deepcopy", "(", "self", ".", "critic", ")", "\n", "self", ".", "critic_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "critic", ".", "parameters", "(", ")", ",", "lr", "=", "3e-4", ")", "\n", "\n", "self", ".", "max_action", "=", "max_action", "\n", "self", ".", "discount", "=", "discount", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "policy_noise", "=", "policy_noise", "\n", "self", ".", "noise_clip", "=", "noise_clip", "\n", "self", ".", "policy_freq", "=", "policy_freq", "\n", "\n", "self", ".", "total_it", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.TD3.TD3.select_action": [[147, 150], ["torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "TD3.TD3.actor().cpu().data.numpy().flatten", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "TD3.TD3.actor().cpu().data.numpy", "torch.FloatTensor().to.reshape", "torch.FloatTensor().to.reshape", "torch.FloatTensor().to.reshape", "TD3.TD3.actor().cpu", "TD3.TD3.actor"], "methods", ["None"], ["", "def", "select_action", "(", "self", ",", "state", ")", ":", "\n", "        ", "state", "=", "torch", ".", "FloatTensor", "(", "state", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "return", "self", ".", "actor", "(", "state", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.TD3.TD3.train": [[152, 201], ["replay_buffer.sample", "TD3.TD3.critic", "TD3.TD3.critic_optimizer.zero_grad", "critic_loss.backward", "TD3.TD3.critic_optimizer.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "TD3.TD3.critic_target", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "TD3.TD3.actor_optimizer.zero_grad", "actor_loss.backward", "TD3.TD3.actor_optimizer.step", "zip", "zip", "TD3.TD3.critic.Q1().mean", "TD3.TD3.critic.parameters", "TD3.TD3.critic_target.parameters", "target_param.data.copy_", "TD3.TD3.actor.parameters", "TD3.TD3.actor_target.parameters", "target_param.data.copy_", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "TD3.TD3.actor_target", "TD3.TD3.critic.Q1", "TD3.TD3.actor"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.sample", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.step", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.step", "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.TD3.D2RLCritic.Q1"], ["", "def", "train", "(", "self", ",", "replay_buffer", ",", "batch_size", "=", "100", ")", ":", "\n", "        ", "self", ".", "total_it", "+=", "1", "\n", "\n", "# Sample replay buffer", "\n", "state", ",", "action", ",", "next_state", ",", "reward", ",", "not_done", "=", "replay_buffer", ".", "sample", "(", "batch_size", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Select action according to policy and add clipped noise", "\n", "            ", "noise", "=", "(", "\n", "torch", ".", "randn_like", "(", "action", ")", "*", "self", ".", "policy_noise", "\n", ")", ".", "clamp", "(", "-", "self", ".", "noise_clip", ",", "self", ".", "noise_clip", ")", "\n", "\n", "next_action", "=", "(", "\n", "self", ".", "actor_target", "(", "next_state", ")", "+", "noise", "\n", ")", ".", "clamp", "(", "-", "self", ".", "max_action", ",", "self", ".", "max_action", ")", "\n", "\n", "# Compute the target Q value", "\n", "target_Q1", ",", "target_Q2", "=", "self", ".", "critic_target", "(", "next_state", ",", "next_action", ")", "\n", "target_Q", "=", "torch", ".", "min", "(", "target_Q1", ",", "target_Q2", ")", "\n", "target_Q", "=", "reward", "+", "not_done", "*", "self", ".", "discount", "*", "target_Q", "\n", "\n", "# Get current Q estimates", "\n", "", "current_Q1", ",", "current_Q2", "=", "self", ".", "critic", "(", "state", ",", "action", ")", "\n", "\n", "# Compute critic loss", "\n", "critic_loss", "=", "F", ".", "mse_loss", "(", "current_Q1", ",", "target_Q", ")", "+", "F", ".", "mse_loss", "(", "current_Q2", ",", "target_Q", ")", "\n", "\n", "# Optimize the critic", "\n", "self", ".", "critic_optimizer", ".", "zero_grad", "(", ")", "\n", "critic_loss", ".", "backward", "(", ")", "\n", "self", ".", "critic_optimizer", ".", "step", "(", ")", "\n", "\n", "# Delayed policy updates", "\n", "if", "self", ".", "total_it", "%", "self", ".", "policy_freq", "==", "0", ":", "\n", "\n", "# Compute actor losse", "\n", "            ", "actor_loss", "=", "-", "self", ".", "critic", ".", "Q1", "(", "state", ",", "self", ".", "actor", "(", "state", ")", ")", ".", "mean", "(", ")", "\n", "\n", "# Optimize the actor", "\n", "self", ".", "actor_optimizer", ".", "zero_grad", "(", ")", "\n", "actor_loss", ".", "backward", "(", ")", "\n", "self", ".", "actor_optimizer", ".", "step", "(", ")", "\n", "\n", "# Update the frozen target models", "\n", "for", "param", ",", "target_param", "in", "zip", "(", "self", ".", "critic", ".", "parameters", "(", ")", ",", "self", ".", "critic_target", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "target_param", ".", "data", ".", "copy_", "(", "self", ".", "tau", "*", "param", ".", "data", "+", "(", "1", "-", "self", ".", "tau", ")", "*", "target_param", ".", "data", ")", "\n", "\n", "", "for", "param", ",", "target_param", "in", "zip", "(", "self", ".", "actor", ".", "parameters", "(", ")", ",", "self", ".", "actor_target", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "target_param", ".", "data", ".", "copy_", "(", "self", ".", "tau", "*", "param", ".", "data", "+", "(", "1", "-", "self", ".", "tau", ")", "*", "target_param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.TD3.TD3.save": [[203, 209], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "TD3.TD3.critic.state_dict", "TD3.TD3.critic_optimizer.state_dict", "TD3.TD3.actor.state_dict", "TD3.TD3.actor_optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save"], ["", "", "", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "torch", ".", "save", "(", "self", ".", "critic", ".", "state_dict", "(", ")", ",", "filename", "+", "\"_critic\"", ")", "\n", "torch", ".", "save", "(", "self", ".", "critic_optimizer", ".", "state_dict", "(", ")", ",", "filename", "+", "\"_critic_optimizer\"", ")", "\n", "\n", "torch", ".", "save", "(", "self", ".", "actor", ".", "state_dict", "(", ")", ",", "filename", "+", "\"_actor\"", ")", "\n", "torch", ".", "save", "(", "self", ".", "actor_optimizer", ".", "state_dict", "(", ")", ",", "filename", "+", "\"_actor_optimizer\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.TD3.TD3.load": [[211, 219], ["TD3.TD3.critic.load_state_dict", "TD3.TD3.critic_optimizer.load_state_dict", "copy.deepcopy", "TD3.TD3.actor.load_state_dict", "TD3.TD3.actor_optimizer.load_state_dict", "copy.deepcopy", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load"], ["", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "critic", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", "+", "\"_critic\"", ")", ")", "\n", "self", ".", "critic_optimizer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", "+", "\"_critic_optimizer\"", ")", ")", "\n", "self", ".", "critic_target", "=", "copy", ".", "deepcopy", "(", "self", ".", "critic", ")", "\n", "\n", "self", ".", "actor", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", "+", "\"_actor\"", ")", ")", "\n", "self", ".", "actor_optimizer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", "+", "\"_actor_optimizer\"", ")", ")", "\n", "self", ".", "actor_target", "=", "copy", ".", "deepcopy", "(", "self", ".", "actor", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.utils.ReplayBuffer.__init__": [[6, 18], ["int", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "torch.device", "torch.cuda.is_available"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "state_dim", ",", "action_dim", ",", "max_size", "=", "int", "(", "1e6", ")", ")", ":", "\n", "\t\t", "self", ".", "max_size", "=", "max_size", "\n", "self", ".", "ptr", "=", "0", "\n", "self", ".", "size", "=", "0", "\n", "\n", "self", ".", "state", "=", "np", ".", "zeros", "(", "(", "max_size", ",", "state_dim", ")", ")", "\n", "self", ".", "action", "=", "np", ".", "zeros", "(", "(", "max_size", ",", "action_dim", ")", ")", "\n", "self", ".", "next_state", "=", "np", ".", "zeros", "(", "(", "max_size", ",", "state_dim", ")", ")", "\n", "self", ".", "reward", "=", "np", ".", "zeros", "(", "(", "max_size", ",", "1", ")", ")", "\n", "self", ".", "not_done", "=", "np", ".", "zeros", "(", "(", "max_size", ",", "1", ")", ")", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.utils.ReplayBuffer.add": [[20, 29], ["min"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "state", ",", "action", ",", "next_state", ",", "reward", ",", "done", ")", ":", "\n", "\t\t", "self", ".", "state", "[", "self", ".", "ptr", "]", "=", "state", "\n", "self", ".", "action", "[", "self", ".", "ptr", "]", "=", "action", "\n", "self", ".", "next_state", "[", "self", ".", "ptr", "]", "=", "next_state", "\n", "self", ".", "reward", "[", "self", ".", "ptr", "]", "=", "reward", "\n", "self", ".", "not_done", "[", "self", ".", "ptr", "]", "=", "1.", "-", "done", "\n", "\n", "self", ".", "ptr", "=", "(", "self", ".", "ptr", "+", "1", ")", "%", "self", ".", "max_size", "\n", "self", ".", "size", "=", "min", "(", "self", ".", "size", "+", "1", ",", "self", ".", "max_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.TD3.utils.ReplayBuffer.sample": [[31, 40], ["numpy.random.randint", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "\t\t", "ind", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "size", ",", "size", "=", "batch_size", ")", "\n", "\n", "return", "(", "\n", "torch", ".", "FloatTensor", "(", "self", ".", "state", "[", "ind", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "self", ".", "action", "[", "ind", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "self", ".", "next_state", "[", "ind", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "self", ".", "reward", "[", "ind", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "self", ".", "not_done", "[", "ind", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ""]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.PixelEncoder.__init__": [[19, 39], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "dict", "len", "encoder.PixelEncoder.convs.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.__init__"], ["def", "__init__", "(", "self", ",", "obs_shape", ",", "feature_dim", ",", "num_layers", "=", "2", ",", "num_filters", "=", "32", ",", "output_logits", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "obs_shape", ")", "==", "3", "\n", "self", ".", "obs_shape", "=", "obs_shape", "\n", "self", ".", "feature_dim", "=", "feature_dim", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Conv2d", "(", "obs_shape", "[", "0", "]", ",", "num_filters", ",", "3", ",", "stride", "=", "2", ")", "]", "\n", ")", "\n", "for", "i", "in", "range", "(", "num_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "convs", ".", "append", "(", "nn", ".", "Conv2d", "(", "num_filters", ",", "num_filters", ",", "3", ",", "stride", "=", "1", ")", ")", "\n", "\n", "", "out_dim", "=", "OUT_DIM_64", "[", "num_layers", "]", "if", "obs_shape", "[", "-", "1", "]", "==", "64", "else", "OUT_DIM", "[", "num_layers", "]", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "num_filters", "*", "out_dim", "*", "out_dim", ",", "self", ".", "feature_dim", ")", "\n", "self", ".", "ln", "=", "nn", ".", "LayerNorm", "(", "self", ".", "feature_dim", ")", "\n", "\n", "self", ".", "outputs", "=", "dict", "(", ")", "\n", "self", ".", "output_logits", "=", "output_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.PixelEncoder.reparameterize": [[40, 44], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logstd", ")", ":", "\n", "        ", "std", "=", "torch", ".", "exp", "(", "logstd", ")", "\n", "eps", "=", "torch", ".", "randn_like", "(", "std", ")", "\n", "return", "mu", "+", "eps", "*", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.PixelEncoder.forward_conv": [[45, 58], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "range", "torch.relu.view", "torch.relu.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu.size", "torch.relu.size"], "methods", ["None"], ["", "def", "forward_conv", "(", "self", ",", "obs", ")", ":", "\n", "        ", "obs", "=", "obs", "/", "255.", "\n", "self", ".", "outputs", "[", "'obs'", "]", "=", "obs", "\n", "\n", "conv", "=", "torch", ".", "relu", "(", "self", ".", "convs", "[", "0", "]", "(", "obs", ")", ")", "\n", "self", ".", "outputs", "[", "'conv1'", "]", "=", "conv", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_layers", ")", ":", "\n", "            ", "conv", "=", "torch", ".", "relu", "(", "self", ".", "convs", "[", "i", "]", "(", "conv", ")", ")", "\n", "self", ".", "outputs", "[", "'conv%s'", "%", "(", "i", "+", "1", ")", "]", "=", "conv", "\n", "\n", "", "h", "=", "conv", ".", "view", "(", "conv", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.PixelEncoder.forward": [[59, 78], ["encoder.PixelEncoder.forward_conv", "encoder.PixelEncoder.fc", "encoder.PixelEncoder.ln", "h.detach.detach.detach", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.PixelEncoder.forward_conv"], ["", "def", "forward", "(", "self", ",", "obs", ",", "detach", "=", "False", ")", ":", "\n", "        ", "h", "=", "self", ".", "forward_conv", "(", "obs", ")", "\n", "\n", "if", "detach", ":", "\n", "            ", "h", "=", "h", ".", "detach", "(", ")", "\n", "\n", "", "h_fc", "=", "self", ".", "fc", "(", "h", ")", "\n", "self", ".", "outputs", "[", "'fc'", "]", "=", "h_fc", "\n", "\n", "h_norm", "=", "self", ".", "ln", "(", "h_fc", ")", "\n", "self", ".", "outputs", "[", "'ln'", "]", "=", "h_norm", "\n", "\n", "if", "self", ".", "output_logits", ":", "\n", "            ", "out", "=", "h_norm", "\n", "", "else", ":", "\n", "            ", "out", "=", "torch", ".", "tanh", "(", "h_norm", ")", "\n", "self", ".", "outputs", "[", "'tanh'", "]", "=", "out", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.PixelEncoder.copy_conv_weights_from": [[79, 84], ["range", "encoder.tie_weights"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.tie_weights"], ["", "def", "copy_conv_weights_from", "(", "self", ",", "source", ")", ":", "\n", "        ", "\"\"\"Tie convolutional layers\"\"\"", "\n", "# only tie conv layers", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "tie_weights", "(", "src", "=", "source", ".", "convs", "[", "i", "]", ",", "trg", "=", "self", ".", "convs", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.PixelEncoder.log": [[85, 98], ["encoder.PixelEncoder.outputs.items", "range", "L.log_param", "L.log_param", "L.log_histogram", "L.log_param", "len", "L.log_image"], "methods", ["None"], ["", "", "def", "log", "(", "self", ",", "L", ",", "step", ",", "log_freq", ")", ":", "\n", "        ", "if", "step", "%", "log_freq", "!=", "0", ":", "\n", "            ", "return", "\n", "\n", "", "for", "k", ",", "v", "in", "self", ".", "outputs", ".", "items", "(", ")", ":", "\n", "            ", "L", ".", "log_histogram", "(", "'train_encoder/%s_hist'", "%", "k", ",", "v", ",", "step", ")", "\n", "if", "len", "(", "v", ".", "shape", ")", ">", "2", ":", "\n", "                ", "L", ".", "log_image", "(", "'train_encoder/%s_img'", "%", "k", ",", "v", "[", "0", "]", ",", "step", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "L", ".", "log_param", "(", "'train_encoder/conv%s'", "%", "(", "i", "+", "1", ")", ",", "self", ".", "convs", "[", "i", "]", ",", "step", ")", "\n", "", "L", ".", "log_param", "(", "'train_encoder/fc'", ",", "self", ".", "fc", ",", "step", ")", "\n", "L", ".", "log_param", "(", "'train_encoder/ln'", ",", "self", ".", "ln", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.__init__": [[101, 106], ["torch.Module.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "obs_shape", ",", "feature_dim", ",", "num_layers", ",", "num_filters", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "obs_shape", ")", "==", "1", "\n", "self", ".", "feature_dim", "=", "obs_shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.forward": [[107, 109], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "obs", ",", "detach", "=", "False", ")", ":", "\n", "        ", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.copy_conv_weights_from": [[110, 112], ["None"], "methods", ["None"], ["", "def", "copy_conv_weights_from", "(", "self", ",", "source", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log": [[113, 115], ["None"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "L", ",", "step", ",", "log_freq", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.tie_weights": [[5, 9], ["type", "type"], "function", ["None"], ["def", "tie_weights", "(", "src", ",", "trg", ")", ":", "\n", "    ", "assert", "type", "(", "src", ")", "==", "type", "(", "trg", ")", "\n", "trg", ".", "weight", "=", "src", ".", "weight", "\n", "trg", ".", "bias", "=", "src", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.make_encoder": [[120, 126], ["None"], "function", ["None"], ["def", "make_encoder", "(", "\n", "encoder_type", ",", "obs_shape", ",", "feature_dim", ",", "num_layers", ",", "num_filters", ",", "output_logits", "=", "False", "\n", ")", ":", "\n", "    ", "assert", "encoder_type", "in", "_AVAILABLE_ENCODERS", "\n", "return", "_AVAILABLE_ENCODERS", "[", "encoder_type", "]", "(", "\n", "obs_shape", ",", "feature_dim", ",", "num_layers", ",", "num_filters", ",", "output_logits", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.train.parse_args": [[22, 80], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.train.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# environment", "\n", "parser", ".", "add_argument", "(", "'--env'", ",", "default", "=", "'cheetah'", ",", "choices", "=", "[", "'cheetah'", ",", "'finger'", ",", "'cartpole'", ",", "'reacher'", ",", "'walker'", ",", "'ball'", ",", "'humanoid'", ",", "'bring_ball'", ",", "'bring_peg'", ",", "'insert_ball'", ",", "'insert_peg'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--pre_transform_image_size'", ",", "default", "=", "100", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--image_size'", ",", "default", "=", "84", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--action_repeat'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--frame_stack'", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "# replay buffer", "\n", "parser", ".", "add_argument", "(", "'--replay_buffer_capacity'", ",", "default", "=", "100000", ",", "type", "=", "int", ")", "\n", "# train", "\n", "parser", ".", "add_argument", "(", "'--agent'", ",", "default", "=", "'curl_sac'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--init_steps'", ",", "default", "=", "1000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--num_train_steps'", ",", "default", "=", "501000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_dim'", ",", "default", "=", "1024", ",", "type", "=", "int", ")", "\n", "# eval", "\n", "parser", ".", "add_argument", "(", "'--eval_freq'", ",", "default", "=", "1000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--num_eval_episodes'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "# critic", "\n", "parser", ".", "add_argument", "(", "'--critic_lr'", ",", "default", "=", "3e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--critic_beta'", ",", "default", "=", "0.9", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--critic_tau'", ",", "default", "=", "0.01", ",", "type", "=", "float", ")", "# try 0.05 or 0.1", "\n", "parser", ".", "add_argument", "(", "'--critic_target_update_freq'", ",", "default", "=", "2", ",", "type", "=", "int", ")", "# try to change it to 1 and retain 0.01 above", "\n", "# actor", "\n", "parser", ".", "add_argument", "(", "'--actor_lr'", ",", "default", "=", "3e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--actor_beta'", ",", "default", "=", "0.9", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--actor_log_std_min'", ",", "default", "=", "-", "10", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--actor_log_std_max'", ",", "default", "=", "2", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--actor_update_freq'", ",", "default", "=", "2", ",", "type", "=", "int", ")", "\n", "# encoder", "\n", "parser", ".", "add_argument", "(", "'--encoder_type'", ",", "default", "=", "'pixel'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder_feature_dim'", ",", "default", "=", "50", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder_lr'", ",", "default", "=", "1e-3", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder_tau'", ",", "default", "=", "0.05", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--num_layers'", ",", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--num_filters'", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--curl_latent_dim'", ",", "default", "=", "128", ",", "type", "=", "int", ")", "\n", "# sac", "\n", "parser", ".", "add_argument", "(", "'--discount'", ",", "default", "=", "0.99", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--init_temperature'", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha_lr'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha_beta'", ",", "default", "=", "0.5", ",", "type", "=", "float", ")", "\n", "# misc", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--work_dir'", ",", "default", "=", "'.'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--save_tb'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_buffer'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_video'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_model'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--detach_encoder'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "default", "=", "100", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--num_mlp_layers'", ",", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.train.evaluate": [[82, 115], ["train.evaluate.run_eval_loop"], "function", ["None"], ["", "def", "evaluate", "(", "env", ",", "agent", ",", "num_episodes", ",", "step", ",", "args", ")", ":", "\n", "    ", "all_ep_rewards", "=", "[", "]", "\n", "\n", "def", "run_eval_loop", "(", "sample_stochastically", "=", "True", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "prefix", "=", "'stochastic_'", "if", "sample_stochastically", "else", "''", "\n", "for", "i", "in", "range", "(", "num_episodes", ")", ":", "\n", "            ", "obs", "=", "env", ".", "reset", "(", ")", "\n", "done", "=", "False", "\n", "episode_reward", "=", "0", "\n", "while", "not", "done", ":", "\n", "# center crop image", "\n", "                ", "if", "args", ".", "encoder_type", "==", "'pixel'", ":", "\n", "                    ", "obs", "=", "utils", ".", "center_crop_image", "(", "obs", ",", "args", ".", "image_size", ")", "\n", "", "with", "utils", ".", "eval_mode", "(", "agent", ")", ":", "\n", "                    ", "if", "sample_stochastically", ":", "\n", "                        ", "action", "=", "agent", ".", "sample_action", "(", "obs", ")", "\n", "", "else", ":", "\n", "                        ", "action", "=", "agent", ".", "select_action", "(", "obs", ")", "\n", "", "", "obs", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "episode_reward", "+=", "reward", "\n", "\n", "", "all_ep_rewards", ".", "append", "(", "episode_reward", ")", "\n", "\n", "", "mean_ep_reward", "=", "np", ".", "mean", "(", "all_ep_rewards", ")", "\n", "best_ep_reward", "=", "np", ".", "max", "(", "all_ep_rewards", ")", "\n", "\n", "logger", ".", "log", "(", "{", "\n", "'mean_reward'", ":", "mean_ep_reward", ",", "\n", "'max_reward'", ":", "best_ep_reward", ",", "\n", "}", "\n", ")", "\n", "", "run_eval_loop", "(", "sample_stochastically", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.train.make_agent": [[117, 150], ["curl_sac.CurlSacAgent"], "function", ["None"], ["", "def", "make_agent", "(", "obs_shape", ",", "action_shape", ",", "args", ",", "device", ")", ":", "\n", "    ", "if", "args", ".", "agent", "==", "'curl_sac'", ":", "\n", "        ", "return", "CurlSacAgent", "(", "\n", "obs_shape", "=", "obs_shape", ",", "\n", "action_shape", "=", "action_shape", ",", "\n", "device", "=", "device", ",", "\n", "hidden_dim", "=", "args", ".", "hidden_dim", ",", "\n", "discount", "=", "args", ".", "discount", ",", "\n", "init_temperature", "=", "args", ".", "init_temperature", ",", "\n", "alpha_lr", "=", "args", ".", "alpha_lr", ",", "\n", "alpha_beta", "=", "args", ".", "alpha_beta", ",", "\n", "actor_lr", "=", "args", ".", "actor_lr", ",", "\n", "actor_beta", "=", "args", ".", "actor_beta", ",", "\n", "actor_log_std_min", "=", "args", ".", "actor_log_std_min", ",", "\n", "actor_log_std_max", "=", "args", ".", "actor_log_std_max", ",", "\n", "actor_update_freq", "=", "args", ".", "actor_update_freq", ",", "\n", "critic_lr", "=", "args", ".", "critic_lr", ",", "\n", "critic_beta", "=", "args", ".", "critic_beta", ",", "\n", "critic_tau", "=", "args", ".", "critic_tau", ",", "\n", "critic_target_update_freq", "=", "args", ".", "critic_target_update_freq", ",", "\n", "encoder_type", "=", "args", ".", "encoder_type", ",", "\n", "encoder_feature_dim", "=", "args", ".", "encoder_feature_dim", ",", "\n", "encoder_lr", "=", "args", ".", "encoder_lr", ",", "\n", "encoder_tau", "=", "args", ".", "encoder_tau", ",", "\n", "num_layers", "=", "args", ".", "num_layers", ",", "\n", "num_filters", "=", "args", ".", "num_filters", ",", "\n", "log_interval", "=", "args", ".", "log_interval", ",", "\n", "detach_encoder", "=", "args", ".", "detach_encoder", ",", "\n", "curl_latent_dim", "=", "args", ".", "curl_latent_dim", ",", "\n", "num_mlp_layers", "=", "args", ".", "num_mlp_layers", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "assert", "'agent is not supported: %s'", "%", "args", ".", "agent", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.train.main": [[151, 283], ["train.parse_args", "wandb.init", "utils.set_seed_everywhere", "dmc2gym.make", "utils.FrameStack.seed", "time.gmtime", "time.strftime", "torch.device", "utils.ReplayBuffer", "train.make_agent", "time.time", "range", "numpy.random.randint", "utils.FrameStack", "utils.FrameStack.step", "utils.ReplayBuffer.add", "torch.cuda.is_available", "train.evaluate", "utils.FrameStack.reset", "utils.FrameStack.action_space.sample", "range", "float", "str", "make_agent.save_curl", "utils.ReplayBuffer.save", "utils.eval_mode", "make_agent.sample_action", "make_agent.update", "str", "str"], "function", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.train.parse_args", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.set_seed_everywhere", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.train.make_agent", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.step", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.ReplayBuffer.add", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.train.evaluate", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.reset", "home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.sample", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save_curl", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.sample_action", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.update"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "dm_envs", "=", "{", "\n", "'finger'", ":", "[", "'finger'", ",", "'spin'", "]", ",", "\n", "'cartpole'", ":", "[", "'cartpole'", ",", "'swingup'", "]", ",", "\n", "'reacher'", ":", "[", "'reacher'", ",", "'easy'", "]", ",", "\n", "'cheetah'", ":", "[", "'cheetah'", ",", "'run'", "]", ",", "\n", "'walker'", ":", "[", "'walker'", ",", "'walk'", "]", ",", "\n", "'ball'", ":", "[", "'ball_in_cup'", ",", "'catch'", "]", ",", "\n", "'humanoid'", ":", "[", "'humanoid'", ",", "'stand'", "]", ",", "\n", "'bring_ball'", ":", "[", "'manipulator'", ",", "'bring_ball'", "]", ",", "\n", "'bring_peg'", ":", "[", "'manipulator'", ",", "'bring_peg'", "]", ",", "\n", "'insert_ball'", ":", "[", "'manipulator'", ",", "'insert_ball'", "]", ",", "\n", "'insert_peg'", ":", "[", "'manipulator'", ",", "'insert_peg'", "]", ",", "\n", "}", "\n", "\n", "if", "args", ".", "env", "==", "'cartpole'", ":", "\n", "        ", "args", ".", "action_repeat", "=", "8", "\n", "", "elif", "args", ".", "env", "in", "[", "'finger'", ",", "'walker'", "]", ":", "\n", "        ", "args", ".", "action_repeat", "=", "2", "\n", "", "else", ":", "\n", "        ", "args", ".", "action_repeat", "=", "4", "\n", "\n", "", "args", ".", "domain_name", ",", "args", ".", "task_name", "=", "dm_envs", "[", "args", ".", "env", "]", "\n", "\n", "global", "logger", "\n", "logger", "=", "wandb", ".", "init", "(", "\n", "project", "=", "'d2rl'", ",", "\n", "config", "=", "args", ",", "\n", "dir", "=", "'wandb_logs'", ",", "\n", "group", "=", "'{}_{}'", ".", "format", "(", "args", ".", "env", ")", ",", "\n", ")", "\n", "\n", "if", "args", ".", "seed", "==", "-", "1", ":", "\n", "        ", "args", ".", "__dict__", "[", "\"seed\"", "]", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "1000000", ")", "\n", "", "utils", ".", "set_seed_everywhere", "(", "args", ".", "seed", ")", "\n", "env", "=", "dmc2gym", ".", "make", "(", "\n", "domain_name", "=", "args", ".", "domain_name", ",", "\n", "task_name", "=", "args", ".", "task_name", ",", "\n", "seed", "=", "args", ".", "seed", ",", "\n", "visualize_reward", "=", "False", ",", "\n", "from_pixels", "=", "(", "args", ".", "encoder_type", "==", "'pixel'", ")", ",", "\n", "height", "=", "args", ".", "pre_transform_image_size", ",", "\n", "width", "=", "args", ".", "pre_transform_image_size", ",", "\n", "frame_skip", "=", "args", ".", "action_repeat", "\n", ")", "\n", "\n", "env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "# stack several consecutive frames together", "\n", "if", "args", ".", "encoder_type", "==", "'pixel'", ":", "\n", "        ", "env", "=", "utils", ".", "FrameStack", "(", "env", ",", "k", "=", "args", ".", "frame_stack", ")", "\n", "\n", "# make directory", "\n", "", "ts", "=", "time", ".", "gmtime", "(", ")", "\n", "ts", "=", "time", ".", "strftime", "(", "\"%m-%d\"", ",", "ts", ")", "\n", "env_name", "=", "args", ".", "domain_name", "+", "'-'", "+", "args", ".", "task_name", "\n", "exp_name", "=", "env_name", "+", "'-'", "+", "ts", "+", "'-im'", "+", "str", "(", "args", ".", "image_size", ")", "+", "'-b'", "+", "str", "(", "args", ".", "batch_size", ")", "+", "'-s'", "+", "str", "(", "args", ".", "seed", ")", "+", "'-'", "+", "args", ".", "encoder_type", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", "\n", "\n", "if", "args", ".", "encoder_type", "==", "'pixel'", ":", "\n", "        ", "obs_shape", "=", "(", "3", "*", "args", ".", "frame_stack", ",", "args", ".", "image_size", ",", "args", ".", "image_size", ")", "\n", "pre_aug_obs_shape", "=", "(", "3", "*", "args", ".", "frame_stack", ",", "args", ".", "pre_transform_image_size", ",", "args", ".", "pre_transform_image_size", ")", "\n", "", "else", ":", "\n", "        ", "obs_shape", "=", "env", ".", "observation_space", ".", "shape", "\n", "pre_aug_obs_shape", "=", "obs_shape", "\n", "\n", "", "replay_buffer", "=", "utils", ".", "ReplayBuffer", "(", "\n", "obs_shape", "=", "pre_aug_obs_shape", ",", "\n", "action_shape", "=", "action_shape", ",", "\n", "capacity", "=", "args", ".", "replay_buffer_capacity", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "device", "=", "device", ",", "\n", "image_size", "=", "args", ".", "image_size", ",", "\n", ")", "\n", "\n", "agent", "=", "make_agent", "(", "\n", "obs_shape", "=", "obs_shape", ",", "\n", "action_shape", "=", "action_shape", ",", "\n", "args", "=", "args", ",", "\n", "device", "=", "device", "\n", ")", "\n", "\n", "episode", ",", "episode_reward", ",", "done", "=", "0", ",", "0", ",", "True", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "step", "in", "range", "(", "args", ".", "num_train_steps", ")", ":", "\n", "# evaluate agent periodically", "\n", "\n", "        ", "if", "step", "%", "args", ".", "eval_freq", "==", "0", ":", "\n", "            ", "evaluate", "(", "env", ",", "agent", ",", "args", ".", "num_eval_episodes", ",", "step", ",", "args", ")", "\n", "if", "args", ".", "save_model", ":", "\n", "                ", "agent", ".", "save_curl", "(", "model_dir", ",", "step", ")", "\n", "", "if", "args", ".", "save_buffer", ":", "\n", "                ", "replay_buffer", ".", "save", "(", "buffer_dir", ")", "\n", "\n", "", "", "if", "done", ":", "\n", "            ", "obs", "=", "env", ".", "reset", "(", ")", "\n", "done", "=", "False", "\n", "episode_reward", "=", "0", "\n", "episode_step", "=", "0", "\n", "episode", "+=", "1", "\n", "\n", "# sample action for data collection", "\n", "", "if", "step", "<", "args", ".", "init_steps", ":", "\n", "            ", "action", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "", "else", ":", "\n", "            ", "with", "utils", ".", "eval_mode", "(", "agent", ")", ":", "\n", "                ", "action", "=", "agent", ".", "sample_action", "(", "obs", ")", "\n", "\n", "# run training update", "\n", "", "", "if", "step", ">=", "args", ".", "init_steps", ":", "\n", "            ", "num_updates", "=", "1", "\n", "for", "_", "in", "range", "(", "num_updates", ")", ":", "\n", "                ", "agent", ".", "update", "(", "replay_buffer", ",", "step", ")", "\n", "\n", "", "", "next_obs", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "\n", "# allow infinit bootstrap", "\n", "done_bool", "=", "0", "if", "episode_step", "+", "1", "==", "env", ".", "_max_episode_steps", "else", "float", "(", "\n", "done", "\n", ")", "\n", "episode_reward", "+=", "reward", "\n", "replay_buffer", ".", "add", "(", "obs", ",", "action", ",", "reward", ",", "next_obs", ",", "done_bool", ")", "\n", "\n", "obs", "=", "next_obs", "\n", "episode_step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.model.D2RLNetwork.__init__": [[20, 45], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.D2RLNetwork.apply", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "hidden_dim", ",", "output_dim", ",", "num_layers", "=", "4", ")", ":", "\n", "        ", "super", "(", "D2RLNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "in_dim", "=", "num_inputs", "+", "hidden_dim", "\n", "# Q1 architecture", "\n", "self", ".", "l1_1", "=", "nn", ".", "Linear", "(", "num_inputs", ",", "hidden_dim", ")", "\n", "self", ".", "l1_2", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "\n", "if", "num_layers", ">", "2", ":", "\n", "            ", "self", ".", "l1_3", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "self", ".", "l1_4", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "\n", "", "if", "num_layers", ">", "4", ":", "\n", "            ", "self", ".", "l1_5", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "self", ".", "l1_6", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "\n", "", "if", "num_layers", "==", "8", ":", "\n", "            ", "self", ".", "l1_7", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "self", ".", "l1_8", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "\n", "", "self", ".", "out1", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init_", ")", "\n", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.model.D2RLNetwork.forward": [[46, 81], ["torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "model.D2RLNetwork.out1", "model.D2RLNetwork.l1_1", "model.D2RLNetwork.l1_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "model.D2RLNetwork.l1_3", "model.D2RLNetwork.l1_4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.D2RLNetwork.l1_5", "model.D2RLNetwork.l1_6", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.D2RLNetwork.l1_7", "model.D2RLNetwork.l1_8"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "network_input", ")", ":", "\n", "        ", "xu", "=", "network_input", "\n", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "l1_1", "(", "xu", ")", ")", "\n", "x1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "xu", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "l1_2", "(", "x1", ")", ")", "\n", "if", "not", "self", ".", "num_layers", "==", "2", ":", "\n", "            ", "x1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "xu", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "num_layers", ">", "2", ":", "\n", "            ", "x1", "=", "F", ".", "relu", "(", "self", ".", "l1_3", "(", "x1", ")", ")", "\n", "x1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "xu", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "l1_4", "(", "x1", ")", ")", "\n", "if", "not", "self", ".", "num_layers", "==", "4", ":", "\n", "                ", "x1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "xu", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "if", "self", ".", "num_layers", ">", "4", ":", "\n", "            ", "x1", "=", "F", ".", "relu", "(", "self", ".", "l1_5", "(", "x1", ")", ")", "\n", "x1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "xu", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "l1_6", "(", "x1", ")", ")", "\n", "if", "not", "self", ".", "num_layers", "==", "6", ":", "\n", "                ", "x1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "xu", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "if", "self", ".", "num_layers", "==", "8", ":", "\n", "            ", "x1", "=", "F", ".", "relu", "(", "self", ".", "l1_7", "(", "x1", ")", ")", "\n", "x1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "xu", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "l1_8", "(", "x1", ")", ")", "\n", "\n", "", "x1", "=", "self", ".", "out1", "(", "x1", ")", "\n", "\n", "return", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.model.D2RLGaussianPolicy.__init__": [[84, 117], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.D2RLGaussianPolicy.apply", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_actions", ",", "hidden_dim", ",", "num_layers", ",", "action_space", "=", "None", ")", ":", "\n", "        ", "super", "(", "D2RLGaussianPolicy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "in_dim", "=", "hidden_dim", "+", "num_inputs", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "num_inputs", ",", "hidden_dim", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "\n", "\n", "if", "num_layers", ">", "2", ":", "\n", "            ", "self", ".", "linear3", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "self", ".", "linear4", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "", "if", "num_layers", ">", "4", ":", "\n", "            ", "self", ".", "linear5", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "self", ".", "linear6", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "", "if", "num_layers", "==", "8", ":", "\n", "            ", "self", ".", "linear7", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "self", ".", "linear8", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "\n", "", "self", ".", "mean_linear", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "num_actions", ")", "\n", "self", ".", "log_std_linear", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "num_actions", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init_", ")", "\n", "\n", "# action rescaling", "\n", "if", "action_space", "is", "None", ":", "\n", "            ", "self", ".", "action_scale", "=", "torch", ".", "tensor", "(", "1.", ")", "\n", "self", ".", "action_bias", "=", "torch", ".", "tensor", "(", "0.", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "action_scale", "=", "torch", ".", "FloatTensor", "(", "\n", "(", "action_space", ".", "high", "-", "action_space", ".", "low", ")", "/", "2.", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "action_bias", "=", "torch", ".", "FloatTensor", "(", "\n", "(", "action_space", ".", "high", "+", "action_space", ".", "low", ")", "/", "2.", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.model.D2RLGaussianPolicy.forward": [[118, 149], ["torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "model.D2RLGaussianPolicy.mean_linear", "model.D2RLGaussianPolicy.log_std_linear", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "model.D2RLGaussianPolicy.linear1", "model.D2RLGaussianPolicy.linear2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "model.D2RLGaussianPolicy.linear3", "model.D2RLGaussianPolicy.linear4", "model.D2RLGaussianPolicy.linear5", "model.D2RLGaussianPolicy.linear6", "model.D2RLGaussianPolicy.linear7", "model.D2RLGaussianPolicy.linear8"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "state", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "linear1", "(", "state", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "state", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "linear2", "(", "x", ")", ")", "\n", "\n", "if", "self", ".", "num_layers", ">", "2", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "state", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "linear3", "(", "x", ")", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "state", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "linear4", "(", "x", ")", ")", "\n", "\n", "", "if", "self", ".", "num_layers", ">", "4", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "state", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "linear5", "(", "x", ")", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "state", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "linear6", "(", "x", ")", ")", "\n", "\n", "", "if", "self", ".", "num_layers", "==", "8", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "state", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "linear7", "(", "x", ")", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "state", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "linear8", "(", "x", ")", ")", "\n", "\n", "", "mean", "=", "self", ".", "mean_linear", "(", "x", ")", "\n", "log_std", "=", "self", ".", "log_std_linear", "(", "x", ")", "\n", "log_std", "=", "torch", ".", "clamp", "(", "log_std", ",", "min", "=", "LOG_SIG_MIN", ",", "max", "=", "LOG_SIG_MAX", ")", "\n", "return", "mean", ",", "log_std", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.model.D2RLGaussianPolicy.sample": [[150, 163], ["model.D2RLGaussianPolicy.forward", "log_std.exp", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal.rsample", "torch.distributions.Normal.rsample", "torch.distributions.Normal.rsample", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.distributions.Normal.log_prob", "torch.distributions.Normal.log_prob", "torch.distributions.Normal.log_prob", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "log_prob.sum.sum.sum", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh.pow", "torch.tanh.pow", "torch.tanh.pow"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.forward", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log"], ["", "def", "sample", "(", "self", ",", "state", ")", ":", "\n", "        ", "mean", ",", "log_std", "=", "self", ".", "forward", "(", "state", ")", "\n", "std", "=", "log_std", ".", "exp", "(", ")", "\n", "normal", "=", "Normal", "(", "mean", ",", "std", ")", "\n", "x_t", "=", "normal", ".", "rsample", "(", ")", "# for reparameterization trick (mean + std * N(0,1))", "\n", "y_t", "=", "torch", ".", "tanh", "(", "x_t", ")", "\n", "action", "=", "y_t", "*", "self", ".", "action_scale", "+", "self", ".", "action_bias", "\n", "log_prob", "=", "normal", ".", "log_prob", "(", "x_t", ")", "\n", "# Enforcing Action Bound", "\n", "log_prob", "-=", "torch", ".", "log", "(", "self", ".", "action_scale", "*", "(", "1", "-", "y_t", ".", "pow", "(", "2", ")", ")", "+", "epsilon", ")", "\n", "log_prob", "=", "log_prob", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "mean", "=", "torch", ".", "tanh", "(", "mean", ")", "*", "self", ".", "action_scale", "+", "self", ".", "action_bias", "\n", "return", "action", ",", "log_prob", ",", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.model.weights_init_": [[13, 17], ["isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "function", ["None"], ["def", "weights_init_", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.eval_mode.__init__": [[13, 15], ["None"], "methods", ["None"], ["self", ".", "next_state", "=", "np", ".", "zeros", "(", "(", "max_size", ",", "state_dim", ")", ")", "\n", "self", ".", "reward", "=", "np", ".", "zeros", "(", "(", "max_size", ",", "1", ")", ")", "\n", "self", ".", "not_done", "=", "np", ".", "zeros", "(", "(", "max_size", ",", "1", ")", ")", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.eval_mode.__enter__": [[16, 21], ["utils.eval_mode.prev_states.append", "model.train"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.train"], ["\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "\n", "", "def", "add", "(", "self", ",", "state", ",", "action", ",", "next_state", ",", "reward", ",", "done", ")", ":", "\n", "\t\t", "self", ".", "state", "[", "self", ".", "ptr", "]", "=", "state", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.eval_mode.__exit__": [[22, 26], ["zip", "model.train"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.train"], ["self", ".", "action", "[", "self", ".", "ptr", "]", "=", "action", "\n", "self", ".", "next_state", "[", "self", ".", "ptr", "]", "=", "next_state", "\n", "self", ".", "reward", "[", "self", ".", "ptr", "]", "=", "reward", "\n", "self", ".", "not_done", "[", "self", ".", "ptr", "]", "=", "1.", "-", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.ReplayBuffer.__init__": [[72, 90], ["numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.ReplayBuffer.add": [[94, 104], ["numpy.copyto", "numpy.copyto", "numpy.copyto", "numpy.copyto", "numpy.copyto"], "methods", ["None"], []], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.ReplayBuffer.sample_proprio": [[105, 122], ["numpy.random.randint", "torch.as_tensor().float", "torch.as_tensor().float", "torch.as_tensor().float", "torch.as_tensor().float", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor().float", "torch.as_tensor().float", "torch.as_tensor().float", "torch.as_tensor().float", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.ReplayBuffer.sample_cpc": [[123, 151], ["time.time", "numpy.random.randint", "torch.as_tensor().float.copy", "torch.as_tensor().float.copy", "utils.random_crop", "utils.random_crop", "utils.random_crop", "torch.as_tensor().float", "torch.as_tensor().float", "torch.as_tensor().float", "torch.as_tensor().float", "torch.as_tensor().float", "torch.as_tensor().float", "torch.as_tensor().float", "torch.as_tensor().float", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor().float", "torch.as_tensor().float", "torch.as_tensor().float", "torch.as_tensor().float", "dict", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.random_crop", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.random_crop", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.random_crop"], []], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.ReplayBuffer.save": [[152, 165], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save"], []], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.ReplayBuffer.load": [[166, 180], ["os.listdir", "sorted", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "int", "int", "[].split", "x.split", "chunk.split"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load"], []], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.ReplayBuffer.__getitem__": [[181, 197], ["numpy.random.randint", "utils.ReplayBuffer.transform", "utils.ReplayBuffer.transform"], "methods", ["None"], []], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.ReplayBuffer.__len__": [[198, 200], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.__init__": [[202, 214], ["gym.Wrapper.__init__", "collections.deque", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.__init__"], []], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.reset": [[215, 220], ["utils.FrameStack.env.reset", "range", "utils.FrameStack._get_obs", "utils.FrameStack._frames.append"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.reset", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack._get_obs"], []], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.step": [[221, 225], ["utils.FrameStack.env.step", "utils.FrameStack._frames.append", "utils.FrameStack._get_obs"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.step", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack._get_obs"], []], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack._get_obs": [[226, 229], ["numpy.concatenate", "len", "list"], "methods", ["None"], []], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.soft_update_params": [[28, 32], ["zip", "net.parameters", "target_net.parameters", "target_param.data.copy_"], "function", ["None"], ["self", ".", "size", "=", "min", "(", "self", ".", "size", "+", "1", ",", "self", ".", "max_size", ")", "\n", "\n", "\n", "", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "\t\t", "ind", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "size", ",", "size", "=", "batch_size", ")", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.set_seed_everywhere": [[35, 41], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["torch", ".", "FloatTensor", "(", "self", ".", "state", "[", "ind", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "self", ".", "action", "[", "ind", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "self", ".", "next_state", "[", "ind", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "self", ".", "reward", "[", "ind", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "self", ".", "not_done", "[", "ind", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.module_hash": [[43, 48], ["module.state_dict().values", "tensor.sum().item", "module.state_dict", "tensor.sum"], "function", ["None"], []], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.make_dir": [[50, 56], ["os.mkdir"], "function", ["None"], []], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.preprocess_obs": [[58, 68], ["torch.floor", "torch.floor", "torch.rand_like", "torch.rand_like"], "function", ["None"], []], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.random_crop": [[231, 252], ["numpy.transpose", "numpy.random.randint", "numpy.random.randint", "skimage.util.shape.view_as_windows", "numpy.arange"], "function", ["None"], []], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.center_crop_image": [[253, 262], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.Actor.__init__": [[50, 74], ["torch.Module.__init__", "encoder.make_encoder", "model.D2RLNetwork", "dict", "curl_sac.Actor.apply"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.__init__", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.make_encoder"], ["def", "__init__", "(", "\n", "self", ",", "obs_shape", ",", "action_shape", ",", "hidden_dim", ",", "encoder_type", ",", "\n", "encoder_feature_dim", ",", "log_std_min", ",", "log_std_max", ",", "num_layers", ",", "num_filters", ",", "\n", "num_mlp_layers", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "make_encoder", "(", "\n", "encoder_type", ",", "obs_shape", ",", "encoder_feature_dim", ",", "num_layers", ",", "\n", "num_filters", ",", "output_logits", "=", "True", "\n", ")", "\n", "\n", "self", ".", "log_std_min", "=", "log_std_min", "\n", "self", ".", "log_std_max", "=", "log_std_max", "\n", "\n", "self", ".", "trunk", "=", "D2RLNetwork", "(", "\n", "self", ".", "encoder", ".", "feature_dim", ",", "\n", "hidden_dim", ",", "\n", "2", "*", "action_shape", "[", "0", "]", ",", "\n", "num_mlp_layers", "\n", ")", "\n", "\n", "self", ".", "outputs", "=", "dict", "(", ")", "\n", "self", ".", "apply", "(", "weight_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.Actor.forward": [[75, 118], ["curl_sac.Actor.encoder", "curl_sac.Actor.trunk().chunk", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh.exp", "torch.tanh.exp", "torch.tanh.exp", "curl_sac.squash", "curl_sac.Actor.outputs.items", "L.log_param", "L.log_param", "L.log_param", "torch.tanh.exp", "torch.tanh.exp", "torch.tanh.exp", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "curl_sac.gaussian_logprob", "L.log_histogram", "curl_sac.Actor.trunk"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.squash", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.gaussian_logprob"], ["", "def", "forward", "(", "\n", "self", ",", "obs", ",", "compute_pi", "=", "True", ",", "compute_log_pi", "=", "True", ",", "detach_encoder", "=", "False", "\n", ")", ":", "\n", "        ", "obs", "=", "self", ".", "encoder", "(", "obs", ",", "detach", "=", "detach_encoder", ")", "\n", "\n", "mu", ",", "log_std", "=", "self", ".", "trunk", "(", "obs", ")", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# constrain log_std inside [log_std_min, log_std_max]", "\n", "log_std", "=", "torch", ".", "tanh", "(", "log_std", ")", "\n", "log_std", "=", "self", ".", "log_std_min", "+", "0.5", "*", "(", "\n", "self", ".", "log_std_max", "-", "self", ".", "log_std_min", "\n", ")", "*", "(", "log_std", "+", "1", ")", "\n", "\n", "self", ".", "outputs", "[", "'mu'", "]", "=", "mu", "\n", "self", ".", "outputs", "[", "'std'", "]", "=", "log_std", ".", "exp", "(", ")", "\n", "\n", "if", "compute_pi", ":", "\n", "            ", "std", "=", "log_std", ".", "exp", "(", ")", "\n", "noise", "=", "torch", ".", "randn_like", "(", "mu", ")", "\n", "pi", "=", "mu", "+", "noise", "*", "std", "\n", "", "else", ":", "\n", "            ", "pi", "=", "None", "\n", "entropy", "=", "None", "\n", "\n", "", "if", "compute_log_pi", ":", "\n", "            ", "log_pi", "=", "gaussian_logprob", "(", "noise", ",", "log_std", ")", "\n", "", "else", ":", "\n", "            ", "log_pi", "=", "None", "\n", "\n", "", "mu", ",", "pi", ",", "log_pi", "=", "squash", "(", "mu", ",", "pi", ",", "log_pi", ")", "\n", "\n", "return", "mu", ",", "pi", ",", "log_pi", ",", "log_std", "\n", "\n", "#    def log(self, L, step, log_freq=LOG_FREQ):", "\n", "#        if step % log_freq != 0:", "\n", "#            return", "\n", "\n", "for", "k", ",", "v", "in", "self", ".", "outputs", ".", "items", "(", ")", ":", "\n", "            ", "L", ".", "log_histogram", "(", "'train_actor/%s_hist'", "%", "k", ",", "v", ",", "step", ")", "\n", "\n", "", "L", ".", "log_param", "(", "'train_actor/fc1'", ",", "self", ".", "trunk", "[", "0", "]", ",", "step", ")", "\n", "L", ".", "log_param", "(", "'train_actor/fc2'", ",", "self", ".", "trunk", "[", "2", "]", ",", "step", ")", "\n", "L", ".", "log_param", "(", "'train_actor/fc3'", ",", "self", ".", "trunk", "[", "4", "]", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.Critic.__init__": [[140, 161], ["torch.Module.__init__", "encoder.make_encoder", "model.D2RLNetwork", "model.D2RLNetwork", "dict", "curl_sac.Critic.apply"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.__init__", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.make_encoder"], ["def", "__init__", "(", "\n", "self", ",", "obs_shape", ",", "action_shape", ",", "hidden_dim", ",", "encoder_type", ",", "\n", "encoder_feature_dim", ",", "num_layers", ",", "num_filters", ",", "num_mlp_layers", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "self", ".", "encoder", "=", "make_encoder", "(", "\n", "encoder_type", ",", "obs_shape", ",", "encoder_feature_dim", ",", "num_layers", ",", "\n", "num_filters", ",", "output_logits", "=", "True", "\n", ")", "\n", "\n", "self", ".", "Q1", "=", "D2RLNetwork", "(", "\n", "self", ".", "encoder", ".", "feature_dim", "+", "action_shape", "[", "0", "]", ",", "hidden_dim", ",", "1", ",", "num_mlp_layers", ",", "\n", ")", "\n", "self", ".", "Q2", "=", "D2RLNetwork", "(", "\n", "self", ".", "encoder", ".", "feature_dim", "+", "action_shape", "[", "0", "]", ",", "hidden_dim", ",", "1", ",", "num_mlp_layers", ",", "\n", ")", "\n", "\n", "self", ".", "outputs", "=", "dict", "(", ")", "\n", "self", ".", "apply", "(", "weight_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.Critic.forward": [[162, 187], ["curl_sac.Critic.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "curl_sac.Critic.Q1", "curl_sac.Critic.Q2", "curl_sac.Critic.outputs.items", "range", "L.log_histogram", "L.log_param", "L.log_param"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.TD3.TD3.D2RLCritic.Q1"], ["", "def", "forward", "(", "self", ",", "obs", ",", "action", ",", "detach_encoder", "=", "False", ")", ":", "\n", "# detach_encoder allows to stop gradient propogation to encoder", "\n", "        ", "obs", "=", "self", ".", "encoder", "(", "obs", ",", "detach", "=", "detach_encoder", ")", "\n", "\n", "q_input", "=", "torch", ".", "cat", "(", "[", "obs", ",", "action", "]", ",", "dim", "=", "1", ")", "\n", "q1", "=", "self", ".", "Q1", "(", "q_input", ")", "\n", "q2", "=", "self", ".", "Q2", "(", "q_input", ")", "\n", "\n", "self", ".", "outputs", "[", "'q1'", "]", "=", "q1", "\n", "self", ".", "outputs", "[", "'q2'", "]", "=", "q2", "\n", "\n", "return", "q1", ",", "q2", "\n", "\n", "#    def log(self, L, step, log_freq=LOG_FREQ):", "\n", "#        if step % log_freq != 0:", "\n", "#            return", "\n", "\n", "#        self.encoder.log(L, step, log_freq)", "\n", "\n", "for", "k", ",", "v", "in", "self", ".", "outputs", ".", "items", "(", ")", ":", "\n", "            ", "L", ".", "log_histogram", "(", "'train_critic/%s_hist'", "%", "k", ",", "v", ",", "step", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "L", ".", "log_param", "(", "'train_critic/q1_fc%d'", "%", "i", ",", "self", ".", "Q1", ".", "trunk", "[", "i", "*", "2", "]", ",", "step", ")", "\n", "L", ".", "log_param", "(", "'train_critic/q2_fc%d'", "%", "i", ",", "self", ".", "Q2", ".", "trunk", "[", "i", "*", "2", "]", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CURL.__init__": [[194, 204], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.__init__"], ["def", "__init__", "(", "self", ",", "obs_shape", ",", "z_dim", ",", "batch_size", ",", "critic", ",", "critic_target", ",", "output_type", "=", "\"continuous\"", ")", ":", "\n", "        ", "super", "(", "CURL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "self", ".", "encoder", "=", "critic", ".", "encoder", "\n", "\n", "self", ".", "encoder_target", "=", "critic_target", ".", "encoder", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "rand", "(", "z_dim", ",", "z_dim", ")", ")", "\n", "self", ".", "output_type", "=", "output_type", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CURL.encode": [[205, 220], ["curl_sac.CURL.encoder", "curl_sac.CURL.detach", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "curl_sac.CURL.encoder_target"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ",", "detach", "=", "False", ",", "ema", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Encoder: z_t = e(x_t)\n        :param x: x_t, x y coordinates\n        :return: z_t, value in r2\n        \"\"\"", "\n", "if", "ema", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "z_out", "=", "self", ".", "encoder_target", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "z_out", "=", "self", ".", "encoder", "(", "x", ")", "\n", "\n", "", "if", "detach", ":", "\n", "            ", "z_out", "=", "z_out", ".", "detach", "(", ")", "\n", "", "return", "z_out", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CURL.compute_logits": [[221, 233], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "compute_logits", "(", "self", ",", "z_a", ",", "z_pos", ")", ":", "\n", "        ", "\"\"\"\n        Uses logits trick for CURL:\n        - compute (B,B) matrix z_a (W z_pos.T)\n        - positives are all diagonal elements\n        - negatives are all other elements\n        - to compute loss use multiclass cross entropy with identity matrix for labels\n        \"\"\"", "\n", "Wz", "=", "torch", ".", "matmul", "(", "self", ".", "W", ",", "z_pos", ".", "T", ")", "# (z_dim,B)", "\n", "logits", "=", "torch", ".", "matmul", "(", "z_a", ",", "Wz", ")", "# (B,B)", "\n", "logits", "=", "logits", "-", "torch", ".", "max", "(", "logits", ",", "1", ")", "[", "0", "]", "[", ":", ",", "None", "]", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.__init__": [[236, 336], ["Actor().to", "Critic().to", "Critic().to", "curl_sac.CurlSacAgent.critic_target.load_state_dict", "curl_sac.CurlSacAgent.actor.encoder.copy_conv_weights_from", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "curl_sac.CurlSacAgent.train", "curl_sac.CurlSacAgent.critic_target.train", "curl_sac.CurlSacAgent.critic.state_dict", "numpy.prod", "curl_sac.CurlSacAgent.actor.parameters", "curl_sac.CurlSacAgent.critic.parameters", "CURL().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "curl_sac.Actor", "curl_sac.Critic", "curl_sac.Critic", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "curl_sac.CurlSacAgent.critic.encoder.parameters", "curl_sac.CurlSacAgent.CURL.parameters", "numpy.log", "curl_sac.CURL"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.copy_conv_weights_from", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.train", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.train", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log"], ["def", "__init__", "(", "\n", "self", ",", "\n", "obs_shape", ",", "\n", "action_shape", ",", "\n", "device", ",", "\n", "hidden_dim", "=", "256", ",", "\n", "discount", "=", "0.99", ",", "\n", "init_temperature", "=", "0.01", ",", "\n", "alpha_lr", "=", "1e-3", ",", "\n", "alpha_beta", "=", "0.9", ",", "\n", "actor_lr", "=", "1e-3", ",", "\n", "actor_beta", "=", "0.9", ",", "\n", "actor_log_std_min", "=", "-", "10", ",", "\n", "actor_log_std_max", "=", "2", ",", "\n", "actor_update_freq", "=", "2", ",", "\n", "critic_lr", "=", "1e-3", ",", "\n", "critic_beta", "=", "0.9", ",", "\n", "critic_tau", "=", "0.005", ",", "\n", "critic_target_update_freq", "=", "2", ",", "\n", "encoder_type", "=", "'pixel'", ",", "\n", "encoder_feature_dim", "=", "50", ",", "\n", "encoder_lr", "=", "1e-3", ",", "\n", "encoder_tau", "=", "0.005", ",", "\n", "num_layers", "=", "4", ",", "\n", "num_filters", "=", "32", ",", "\n", "cpc_update_freq", "=", "1", ",", "\n", "log_interval", "=", "100", ",", "\n", "detach_encoder", "=", "False", ",", "\n", "curl_latent_dim", "=", "128", ",", "\n", "num_mlp_layers", "=", "4", ",", "\n", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "self", ".", "discount", "=", "discount", "\n", "self", ".", "critic_tau", "=", "critic_tau", "\n", "self", ".", "encoder_tau", "=", "encoder_tau", "\n", "self", ".", "actor_update_freq", "=", "actor_update_freq", "\n", "self", ".", "critic_target_update_freq", "=", "critic_target_update_freq", "\n", "self", ".", "cpc_update_freq", "=", "cpc_update_freq", "\n", "self", ".", "log_interval", "=", "log_interval", "\n", "self", ".", "image_size", "=", "obs_shape", "[", "-", "1", "]", "\n", "self", ".", "curl_latent_dim", "=", "curl_latent_dim", "\n", "self", ".", "detach_encoder", "=", "detach_encoder", "\n", "self", ".", "encoder_type", "=", "encoder_type", "\n", "\n", "self", ".", "actor", "=", "Actor", "(", "\n", "obs_shape", ",", "action_shape", ",", "hidden_dim", ",", "encoder_type", ",", "\n", "encoder_feature_dim", ",", "actor_log_std_min", ",", "actor_log_std_max", ",", "\n", "num_layers", ",", "num_filters", ",", "num_mlp_layers", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "critic", "=", "Critic", "(", "\n", "obs_shape", ",", "action_shape", ",", "hidden_dim", ",", "encoder_type", ",", "\n", "encoder_feature_dim", ",", "num_layers", ",", "num_filters", ",", "num_mlp_layers", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "critic_target", "=", "Critic", "(", "\n", "obs_shape", ",", "action_shape", ",", "hidden_dim", ",", "encoder_type", ",", "\n", "encoder_feature_dim", ",", "num_layers", ",", "num_filters", ",", "num_mlp_layers", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "critic_target", ".", "load_state_dict", "(", "self", ".", "critic", ".", "state_dict", "(", ")", ")", "\n", "\n", "# tie encoders between actor and critic, and CURL and critic", "\n", "self", ".", "actor", ".", "encoder", ".", "copy_conv_weights_from", "(", "self", ".", "critic", ".", "encoder", ")", "\n", "\n", "self", ".", "log_alpha", "=", "torch", ".", "tensor", "(", "np", ".", "log", "(", "init_temperature", ")", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "log_alpha", ".", "requires_grad", "=", "True", "\n", "# set target entropy to -|A|", "\n", "self", ".", "target_entropy", "=", "-", "np", ".", "prod", "(", "action_shape", ")", "\n", "\n", "# optimizers", "\n", "self", ".", "actor_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "actor", ".", "parameters", "(", ")", ",", "lr", "=", "actor_lr", ",", "betas", "=", "(", "actor_beta", ",", "0.999", ")", "\n", ")", "\n", "\n", "self", ".", "critic_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "critic", ".", "parameters", "(", ")", ",", "lr", "=", "critic_lr", ",", "betas", "=", "(", "critic_beta", ",", "0.999", ")", "\n", ")", "\n", "\n", "self", ".", "log_alpha_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "[", "self", ".", "log_alpha", "]", ",", "lr", "=", "alpha_lr", ",", "betas", "=", "(", "alpha_beta", ",", "0.999", ")", "\n", ")", "\n", "\n", "if", "self", ".", "encoder_type", "==", "'pixel'", ":", "\n", "# create CURL encoder (the 128 batch size is probably unnecessary)", "\n", "            ", "self", ".", "CURL", "=", "CURL", "(", "obs_shape", ",", "encoder_feature_dim", ",", "\n", "self", ".", "curl_latent_dim", ",", "self", ".", "critic", ",", "self", ".", "critic_target", ",", "output_type", "=", "'continuous'", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# optimizer for critic encoder for reconstruction loss", "\n", "self", ".", "encoder_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "critic", ".", "encoder", ".", "parameters", "(", ")", ",", "lr", "=", "encoder_lr", "\n", ")", "\n", "\n", "self", ".", "cpc_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "CURL", ".", "parameters", "(", ")", ",", "lr", "=", "encoder_lr", "\n", ")", "\n", "", "self", ".", "cross_entropy_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "self", ".", "train", "(", ")", "\n", "self", ".", "critic_target", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.train": [[337, 343], ["curl_sac.CurlSacAgent.actor.train", "curl_sac.CurlSacAgent.critic.train", "curl_sac.CurlSacAgent.CURL.train"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.train", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.train", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.train"], ["", "def", "train", "(", "self", ",", "training", "=", "True", ")", ":", "\n", "        ", "self", ".", "training", "=", "training", "\n", "self", ".", "actor", ".", "train", "(", "training", ")", "\n", "self", ".", "critic", ".", "train", "(", "training", ")", "\n", "if", "self", ".", "encoder_type", "==", "'pixel'", ":", "\n", "            ", "self", ".", "CURL", ".", "train", "(", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.alpha": [[344, 347], ["curl_sac.CurlSacAgent.log_alpha.exp"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "alpha", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "log_alpha", ".", "exp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.select_action": [[348, 356], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "obs.unsqueeze.unsqueeze.unsqueeze", "curl_sac.CurlSacAgent.actor", "mu.cpu().data.numpy().flatten", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "mu.cpu().data.numpy", "mu.cpu"], "methods", ["None"], ["", "def", "select_action", "(", "self", ",", "obs", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "obs", "=", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "obs", "=", "obs", ".", "unsqueeze", "(", "0", ")", "\n", "mu", ",", "_", ",", "_", ",", "_", "=", "self", ".", "actor", "(", "\n", "obs", ",", "compute_pi", "=", "False", ",", "compute_log_pi", "=", "False", "\n", ")", "\n", "return", "mu", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.sample_action": [[357, 366], ["utils.center_crop_image", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "obs.unsqueeze.unsqueeze.unsqueeze", "curl_sac.CurlSacAgent.actor", "pi.cpu().data.numpy().flatten", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "pi.cpu().data.numpy", "pi.cpu"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.center_crop_image"], ["", "", "def", "sample_action", "(", "self", ",", "obs", ")", ":", "\n", "        ", "if", "obs", ".", "shape", "[", "-", "1", "]", "!=", "self", ".", "image_size", ":", "\n", "            ", "obs", "=", "utils", ".", "center_crop_image", "(", "obs", ",", "self", ".", "image_size", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "obs", "=", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "obs", "=", "obs", ".", "unsqueeze", "(", "0", ")", "\n", "mu", ",", "pi", ",", "_", ",", "_", "=", "self", ".", "actor", "(", "obs", ",", "compute_log_pi", "=", "False", ")", "\n", "return", "pi", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.update_critic": [[367, 388], ["curl_sac.CurlSacAgent.critic", "curl_sac.CurlSacAgent.critic_optimizer.zero_grad", "critic_loss.backward", "curl_sac.CurlSacAgent.critic_optimizer.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "curl_sac.CurlSacAgent.actor", "curl_sac.CurlSacAgent.critic_target", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "curl_sac.CurlSacAgent.alpha.detach"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.step"], ["", "", "def", "update_critic", "(", "self", ",", "obs", ",", "action", ",", "reward", ",", "next_obs", ",", "not_done", ",", "step", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "_", ",", "policy_action", ",", "log_pi", ",", "_", "=", "self", ".", "actor", "(", "next_obs", ")", "\n", "target_Q1", ",", "target_Q2", "=", "self", ".", "critic_target", "(", "next_obs", ",", "policy_action", ")", "\n", "target_V", "=", "torch", ".", "min", "(", "target_Q1", ",", "\n", "target_Q2", ")", "-", "self", ".", "alpha", ".", "detach", "(", ")", "*", "log_pi", "\n", "target_Q", "=", "reward", "+", "(", "not_done", "*", "self", ".", "discount", "*", "target_V", ")", "\n", "\n", "# get current Q estimates", "\n", "", "current_Q1", ",", "current_Q2", "=", "self", ".", "critic", "(", "\n", "obs", ",", "action", ",", "detach_encoder", "=", "self", ".", "detach_encoder", ")", "\n", "critic_loss", "=", "F", ".", "mse_loss", "(", "current_Q1", ",", "\n", "target_Q", ")", "+", "F", ".", "mse_loss", "(", "current_Q2", ",", "target_Q", ")", "\n", "#        if step % self.log_interval == 0:", "\n", "#            L.log('train_critic/loss', critic_loss, step)", "\n", "\n", "\n", "# Optimize the critic", "\n", "self", ".", "critic_optimizer", ".", "zero_grad", "(", ")", "\n", "critic_loss", ".", "backward", "(", ")", "\n", "self", ".", "critic_optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.update_actor_and_alpha": [[391, 422], ["curl_sac.CurlSacAgent.actor", "curl_sac.CurlSacAgent.critic", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "curl_sac.CurlSacAgent.actor_optimizer.zero_grad", "actor_loss.backward", "curl_sac.CurlSacAgent.actor_optimizer.step", "curl_sac.CurlSacAgent.log_alpha_optimizer.zero_grad", "alpha_loss.backward", "curl_sac.CurlSacAgent.log_alpha_optimizer.step", "log_std.sum", "numpy.log", "curl_sac.CurlSacAgent.alpha.detach"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.step", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.step", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log"], ["", "def", "update_actor_and_alpha", "(", "self", ",", "obs", ",", "step", ")", ":", "\n", "# detach encoder, so we don't update it with the actor loss", "\n", "        ", "_", ",", "pi", ",", "log_pi", ",", "log_std", "=", "self", ".", "actor", "(", "obs", ",", "detach_encoder", "=", "True", ")", "\n", "actor_Q1", ",", "actor_Q2", "=", "self", ".", "critic", "(", "obs", ",", "pi", ",", "detach_encoder", "=", "True", ")", "\n", "\n", "actor_Q", "=", "torch", ".", "min", "(", "actor_Q1", ",", "actor_Q2", ")", "\n", "actor_loss", "=", "(", "self", ".", "alpha", ".", "detach", "(", ")", "*", "log_pi", "-", "actor_Q", ")", ".", "mean", "(", ")", "\n", "\n", "#        if step % self.log_interval == 0:", "\n", "#            L.log('train_actor/loss', actor_loss, step)", "\n", "#            L.log('train_actor/target_entropy', self.target_entropy, step)", "\n", "entropy", "=", "0.5", "*", "log_std", ".", "shape", "[", "1", "]", "*", "(", "1.0", "+", "np", ".", "log", "(", "2", "*", "np", ".", "pi", ")", ")", "+", "log_std", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "#        if step % self.log_interval == 0:                                    ", "\n", "#            L.log('train_actor/entropy', entropy.mean(), step)", "\n", "\n", "# optimize the actor", "\n", "self", ".", "actor_optimizer", ".", "zero_grad", "(", ")", "\n", "actor_loss", ".", "backward", "(", ")", "\n", "self", ".", "actor_optimizer", ".", "step", "(", ")", "\n", "\n", "#        self.actor.log(L, step)", "\n", "\n", "self", ".", "log_alpha_optimizer", ".", "zero_grad", "(", ")", "\n", "alpha_loss", "=", "(", "self", ".", "alpha", "*", "\n", "(", "-", "log_pi", "-", "self", ".", "target_entropy", ")", ".", "detach", "(", ")", ")", ".", "mean", "(", ")", "\n", "#        if step % self.log_interval == 0:", "\n", "#            L.log('train_alpha/loss', alpha_loss, step)", "\n", "#            L.log('train_alpha/value', self.alpha, step)", "\n", "alpha_loss", ".", "backward", "(", ")", "\n", "self", ".", "log_alpha_optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.update_cpc": [[423, 438], ["curl_sac.CurlSacAgent.CURL.encode", "curl_sac.CurlSacAgent.CURL.encode", "curl_sac.CurlSacAgent.CURL.compute_logits", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "curl_sac.CurlSacAgent.cross_entropy_loss", "curl_sac.CurlSacAgent.encoder_optimizer.zero_grad", "curl_sac.CurlSacAgent.cpc_optimizer.zero_grad", "curl_sac.CurlSacAgent.backward", "curl_sac.CurlSacAgent.encoder_optimizer.step", "curl_sac.CurlSacAgent.cpc_optimizer.step", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CURL.encode", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CURL.encode", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CURL.compute_logits", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.step", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.step"], ["", "def", "update_cpc", "(", "self", ",", "obs_anchor", ",", "obs_pos", ",", "cpc_kwargs", ",", "step", ")", ":", "\n", "\n", "        ", "z_a", "=", "self", ".", "CURL", ".", "encode", "(", "obs_anchor", ")", "\n", "z_pos", "=", "self", ".", "CURL", ".", "encode", "(", "obs_pos", ",", "ema", "=", "True", ")", "\n", "\n", "logits", "=", "self", ".", "CURL", ".", "compute_logits", "(", "z_a", ",", "z_pos", ")", "\n", "labels", "=", "torch", ".", "arange", "(", "logits", ".", "shape", "[", "0", "]", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "loss", "=", "self", ".", "cross_entropy_loss", "(", "logits", ",", "labels", ")", "\n", "\n", "self", ".", "encoder_optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "cpc_optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "encoder_optimizer", ".", "step", "(", ")", "\n", "self", ".", "cpc_optimizer", ".", "step", "(", ")", "\n", "#        if step % self.log_interval == 0:", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.update": [[442, 471], ["curl_sac.CurlSacAgent.update_critic", "replay_buffer.sample_cpc", "replay_buffer.sample_proprio", "curl_sac.CurlSacAgent.update_actor_and_alpha", "utils.soft_update_params", "utils.soft_update_params", "utils.soft_update_params", "curl_sac.CurlSacAgent.update_cpc"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.update_critic", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.ReplayBuffer.sample_cpc", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.ReplayBuffer.sample_proprio", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.update_actor_and_alpha", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.soft_update_params", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.soft_update_params", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.soft_update_params", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.update_cpc"], ["", "def", "update", "(", "self", ",", "replay_buffer", ",", "step", ")", ":", "\n", "        ", "if", "self", ".", "encoder_type", "==", "'pixel'", ":", "\n", "            ", "obs", ",", "action", ",", "reward", ",", "next_obs", ",", "not_done", ",", "cpc_kwargs", "=", "replay_buffer", ".", "sample_cpc", "(", ")", "\n", "", "else", ":", "\n", "            ", "obs", ",", "action", ",", "reward", ",", "next_obs", ",", "not_done", "=", "replay_buffer", ".", "sample_proprio", "(", ")", "\n", "\n", "#        if step % self.log_interval == 0:", "\n", "#            L.log('train/batch_reward', reward.mean(), step)", "\n", "\n", "", "self", ".", "update_critic", "(", "obs", ",", "action", ",", "reward", ",", "next_obs", ",", "not_done", ",", "step", ")", "\n", "\n", "if", "step", "%", "self", ".", "actor_update_freq", "==", "0", ":", "\n", "            ", "self", ".", "update_actor_and_alpha", "(", "obs", ",", "step", ")", "\n", "\n", "", "if", "step", "%", "self", ".", "critic_target_update_freq", "==", "0", ":", "\n", "            ", "utils", ".", "soft_update_params", "(", "\n", "self", ".", "critic", ".", "Q1", ",", "self", ".", "critic_target", ".", "Q1", ",", "self", ".", "critic_tau", "\n", ")", "\n", "utils", ".", "soft_update_params", "(", "\n", "self", ".", "critic", ".", "Q2", ",", "self", ".", "critic_target", ".", "Q2", ",", "self", ".", "critic_tau", "\n", ")", "\n", "utils", ".", "soft_update_params", "(", "\n", "self", ".", "critic", ".", "encoder", ",", "self", ".", "critic_target", ".", "encoder", ",", "\n", "self", ".", "encoder_tau", "\n", ")", "\n", "\n", "", "if", "step", "%", "self", ".", "cpc_update_freq", "==", "0", "and", "self", ".", "encoder_type", "==", "'pixel'", ":", "\n", "            ", "obs_anchor", ",", "obs_pos", "=", "cpc_kwargs", "[", "\"obs_anchor\"", "]", ",", "cpc_kwargs", "[", "\"obs_pos\"", "]", "\n", "self", ".", "update_cpc", "(", "obs_anchor", ",", "obs_pos", ",", "cpc_kwargs", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save": [[472, 478], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "curl_sac.CurlSacAgent.actor.state_dict", "curl_sac.CurlSacAgent.critic.state_dict"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save"], ["", "", "def", "save", "(", "self", ",", "model_dir", ",", "step", ")", ":", "\n", "        ", "torch", ".", "save", "(", "\n", "self", ".", "actor", ".", "state_dict", "(", ")", ",", "'%s/actor_%s.pt'", "%", "(", "model_dir", ",", "step", ")", "\n", ")", "\n", "torch", ".", "save", "(", "\n", "self", ".", "critic", ".", "state_dict", "(", ")", ",", "'%s/critic_%s.pt'", "%", "(", "model_dir", ",", "step", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save_curl": [[480, 483], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "curl_sac.CurlSacAgent.CURL.state_dict"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save"], ["", "def", "save_curl", "(", "self", ",", "model_dir", ",", "step", ")", ":", "\n", "        ", "torch", ".", "save", "(", "\n", "self", ".", "CURL", ".", "state_dict", "(", ")", ",", "'%s/curl_%s.pt'", "%", "(", "model_dir", ",", "step", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load": [[485, 491], ["curl_sac.CurlSacAgent.actor.load_state_dict", "curl_sac.CurlSacAgent.critic.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load"], ["", "def", "load", "(", "self", ",", "model_dir", ",", "step", ")", ":", "\n", "        ", "self", ".", "actor", ".", "load_state_dict", "(", "\n", "torch", ".", "load", "(", "'%s/actor_%s.pt'", "%", "(", "model_dir", ",", "step", ")", ")", "\n", ")", "\n", "self", ".", "critic", ".", "load_state_dict", "(", "\n", "torch", ".", "load", "(", "'%s/critic_%s.pt'", "%", "(", "model_dir", ",", "step", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.gaussian_logprob": [[15, 19], ["noise.size", "numpy.log", "noise.pow"], "function", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log"], ["def", "gaussian_logprob", "(", "noise", ",", "log_std", ")", ":", "\n", "    ", "\"\"\"Compute Gaussian log probability.\"\"\"", "\n", "residual", "=", "(", "-", "0.5", "*", "noise", ".", "pow", "(", "2", ")", "-", "log_std", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "residual", "-", "0.5", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", ")", "*", "noise", ".", "size", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.squash": [[21, 31], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log", "torch.log", "torch.log", "torch.relu", "torch.tanh.pow"], "function", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log"], ["", "def", "squash", "(", "mu", ",", "pi", ",", "log_pi", ")", ":", "\n", "    ", "\"\"\"Apply squashing function.\n    See appendix C from https://arxiv.org/pdf/1812.05905.pdf.\n    \"\"\"", "\n", "mu", "=", "torch", ".", "tanh", "(", "mu", ")", "\n", "if", "pi", "is", "not", "None", ":", "\n", "        ", "pi", "=", "torch", ".", "tanh", "(", "pi", ")", "\n", "", "if", "log_pi", "is", "not", "None", ":", "\n", "        ", "log_pi", "-=", "torch", ".", "log", "(", "F", ".", "relu", "(", "1", "-", "pi", ".", "pow", "(", "2", ")", ")", "+", "1e-6", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "", "return", "mu", ",", "pi", ",", "log_pi", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.weight_init": [[33, 46], ["isinstance", "torch.init.orthogonal_", "m.bias.data.fill_", "isinstance", "isinstance", "m.weight.data.fill_", "m.bias.data.fill_", "torch.init.calculate_gain", "torch.init.orthogonal_", "m.weight.size", "m.weight.size", "m.weight.size"], "function", ["None"], ["", "def", "weight_init", "(", "m", ")", ":", "\n", "    ", "\"\"\"Custom weight init for Conv2D and Linear layers.\"\"\"", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "# delta-orthogonal init from https://arxiv.org/pdf/1806.05393.pdf", "\n", "        ", "assert", "m", ".", "weight", ".", "size", "(", "2", ")", "==", "m", ".", "weight", ".", "size", "(", "3", ")", "\n", "m", ".", "weight", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "mid", "=", "m", ".", "weight", ".", "size", "(", "2", ")", "//", "2", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", "\n", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", "[", ":", ",", ":", ",", "mid", ",", "mid", "]", ",", "gain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.sac.sac.SAC.__init__": [[10, 57], ["torch.device", "torch.device", "torch.device", "torch.device", "model.D2RLQNetwork().to", "torch.optim.Adam", "torch.optim.Adam", "model.D2RLQNetwork().to", "utils.hard_update", "model.D2RLGaussianPolicy().to", "torch.optim.Adam", "torch.optim.Adam", "sac.SAC.critic.parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "sac.SAC.policy.parameters", "model.D2RLQNetwork", "model.D2RLQNetwork", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "model.D2RLGaussianPolicy", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.utils.hard_update"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "action_space", ",", "args", ")", ":", "\n", "\n", "        ", "self", ".", "gamma", "=", "args", ".", "gamma", "\n", "self", ".", "tau", "=", "args", ".", "tau", "\n", "self", ".", "alpha", "=", "args", ".", "alpha", "\n", "\n", "self", ".", "policy_type", "=", "args", ".", "policy", "\n", "self", ".", "target_update_interval", "=", "args", ".", "target_update_interval", "\n", "self", ".", "automatic_entropy_tuning", "=", "args", ".", "automatic_entropy_tuning", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "args", ".", "cuda", "else", "\"cpu\"", ")", "\n", "\n", "self", ".", "critic", "=", "D2RLQNetwork", "(", "\n", "num_inputs", ",", "\n", "action_space", ".", "shape", "[", "0", "]", ",", "\n", "args", ".", "hidden_size", ",", "\n", "num_layers", "=", "args", ".", "num_q_layers", ",", "\n", ")", ".", "to", "(", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "critic_optim", "=", "Adam", "(", "self", ".", "critic", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "self", ".", "critic_target", "=", "D2RLQNetwork", "(", "\n", "num_inputs", ",", "\n", "action_space", ".", "shape", "[", "0", "]", ",", "\n", "args", ".", "hidden_size", ",", "\n", "num_layers", "=", "args", ".", "num_q_layers", ",", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "hard_update", "(", "self", ".", "critic_target", ",", "self", ".", "critic", ")", "\n", "\n", "# Target Entropy = \u2212dim(A) (e.g. , -6 for HalfCheetah-v2) as given in the paper", "\n", "if", "self", ".", "automatic_entropy_tuning", "is", "True", ":", "\n", "            ", "self", ".", "target_entropy", "=", "-", "torch", ".", "prod", "(", "torch", ".", "Tensor", "(", "action_space", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ")", ".", "item", "(", ")", "\n", "self", ".", "log_alpha", "=", "torch", ".", "zeros", "(", "1", ",", "requires_grad", "=", "True", ",", "device", "=", "self", ".", "device", ")", "\n", "if", "args", ".", "dmc", ":", "\n", "                ", "self", ".", "alpha_optim", "=", "Adam", "(", "[", "self", ".", "log_alpha", "]", ",", "lr", "=", "1e-4", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "alpha_optim", "=", "Adam", "(", "[", "self", ".", "log_alpha", "]", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "\n", "", "", "self", ".", "policy", "=", "D2RLGaussianPolicy", "(", "\n", "num_inputs", ",", "\n", "action_space", ".", "shape", "[", "0", "]", ",", "\n", "args", ".", "hidden_size", ",", "\n", "args", ".", "num_layers", ",", "\n", "action_space", ",", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "policy_optim", "=", "Adam", "(", "self", ".", "policy", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.sac.sac.SAC.select_action": [[58, 65], ["torch.FloatTensor().to().unsqueeze", "torch.FloatTensor().to().unsqueeze", "torch.FloatTensor().to().unsqueeze", "torch.FloatTensor().to().unsqueeze", "sac.SAC.policy.sample", "sac.SAC.policy.sample", "action.detach().cpu().numpy", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "action.detach().cpu", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "action.detach"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.sample", "home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.sample"], ["", "def", "select_action", "(", "self", ",", "state", ",", "evaluate", "=", "False", ")", ":", "\n", "        ", "state", "=", "torch", ".", "FloatTensor", "(", "state", ")", ".", "to", "(", "self", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "if", "evaluate", "is", "False", ":", "\n", "            ", "action", ",", "_", ",", "_", "=", "self", ".", "policy", ".", "sample", "(", "state", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "_", ",", "action", "=", "self", ".", "policy", ".", "sample", "(", "state", ")", "\n", "", "return", "action", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.sac.sac.SAC.update_parameters": [[66, 119], ["memory.sample", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to().unsqueeze", "torch.FloatTensor().to().unsqueeze", "torch.FloatTensor().to().unsqueeze", "torch.FloatTensor().to().unsqueeze", "torch.FloatTensor().to().unsqueeze", "torch.FloatTensor().to().unsqueeze", "torch.FloatTensor().to().unsqueeze", "torch.FloatTensor().to().unsqueeze", "sac.SAC.critic", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "sac.SAC.critic_optim.zero_grad", "qf_loss.backward", "sac.SAC.critic_optim.step", "sac.SAC.policy.sample", "sac.SAC.critic", "torch.min", "torch.min", "torch.min", "torch.min", "sac.SAC.policy_optim.zero_grad", "policy_loss.backward", "sac.SAC.policy_optim.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sac.SAC.policy.sample", "sac.SAC.critic_target", "sac.SAC.alpha_optim.zero_grad", "torch.tensor().to.backward", "torch.tensor().to.backward", "sac.SAC.alpha_optim.step", "sac.SAC.log_alpha.exp", "sac.SAC.alpha.clone", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "utils.soft_update", "torch.mse_loss.item", "torch.mse_loss.item", "policy_loss.item", "torch.tensor().to.item", "torch.tensor().to.item", "torch.tensor.item", "torch.tensor.item", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.min", "torch.min", "torch.min", "torch.min", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.sample", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.step", "home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.sample", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.step", "home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.sample", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.utils.FrameStack.step", "home.repos.pwc.inspect_result.pairlab_d2rl.sac.utils.soft_update"], ["", "def", "update_parameters", "(", "self", ",", "memory", ",", "batch_size", ",", "updates", ")", ":", "\n", "# Sample a batch from memory", "\n", "        ", "state_batch", ",", "action_batch", ",", "reward_batch", ",", "next_state_batch", ",", "mask_batch", "=", "memory", ".", "sample", "(", "batch_size", "=", "batch_size", ")", "\n", "\n", "state_batch", "=", "torch", ".", "FloatTensor", "(", "state_batch", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "next_state_batch", "=", "torch", ".", "FloatTensor", "(", "next_state_batch", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "action_batch", "=", "torch", ".", "FloatTensor", "(", "action_batch", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "reward_batch", "=", "torch", ".", "FloatTensor", "(", "reward_batch", ")", ".", "to", "(", "self", ".", "device", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mask_batch", "=", "torch", ".", "FloatTensor", "(", "mask_batch", ")", ".", "to", "(", "self", ".", "device", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "next_state_action", ",", "next_state_log_pi", ",", "_", "=", "self", ".", "policy", ".", "sample", "(", "next_state_batch", ")", "\n", "qf1_next_target", ",", "qf2_next_target", "=", "self", ".", "critic_target", "(", "next_state_batch", ",", "next_state_action", ")", "\n", "min_qf_next_target", "=", "torch", ".", "min", "(", "qf1_next_target", ",", "qf2_next_target", ")", "-", "self", ".", "alpha", "*", "next_state_log_pi", "\n", "next_q_value", "=", "reward_batch", "+", "mask_batch", "*", "self", ".", "gamma", "*", "(", "min_qf_next_target", ")", "\n", "", "qf1", ",", "qf2", "=", "self", ".", "critic", "(", "state_batch", ",", "action_batch", ")", "# Two Q-functions to mitigate positive bias in the policy improvement step", "\n", "qf1_loss", "=", "F", ".", "mse_loss", "(", "qf1", ",", "next_q_value", ")", "# JQ = \ud835\udd3c(st,at)~D[0.5(Q1(st,at) - r(st,at) - \u03b3(\ud835\udd3cst+1~p[V(st+1)]))^2]", "\n", "qf2_loss", "=", "F", ".", "mse_loss", "(", "qf2", ",", "next_q_value", ")", "# JQ = \ud835\udd3c(st,at)~D[0.5(Q1(st,at) - r(st,at) - \u03b3(\ud835\udd3cst+1~p[V(st+1)]))^2]", "\n", "qf_loss", "=", "qf1_loss", "+", "qf2_loss", "\n", "\n", "self", ".", "critic_optim", ".", "zero_grad", "(", ")", "\n", "qf_loss", ".", "backward", "(", ")", "\n", "self", ".", "critic_optim", ".", "step", "(", ")", "\n", "\n", "pi", ",", "log_pi", ",", "_", "=", "self", ".", "policy", ".", "sample", "(", "state_batch", ")", "\n", "\n", "qf1_pi", ",", "qf2_pi", "=", "self", ".", "critic", "(", "state_batch", ",", "pi", ")", "\n", "min_qf_pi", "=", "torch", ".", "min", "(", "qf1_pi", ",", "qf2_pi", ")", "\n", "\n", "policy_loss", "=", "(", "(", "self", ".", "alpha", "*", "log_pi", ")", "-", "min_qf_pi", ")", ".", "mean", "(", ")", "# J\u03c0 = \ud835\udd3cst\u223cD,\u03b5t\u223cN[\u03b1 * log\u03c0(f(\u03b5t;st)|st) \u2212 Q(st,f(\u03b5t;st))]", "\n", "\n", "self", ".", "policy_optim", ".", "zero_grad", "(", ")", "\n", "policy_loss", ".", "backward", "(", ")", "\n", "self", ".", "policy_optim", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "automatic_entropy_tuning", ":", "\n", "            ", "alpha_loss", "=", "-", "(", "self", ".", "log_alpha", "*", "(", "log_pi", "+", "self", ".", "target_entropy", ")", ".", "detach", "(", ")", ")", ".", "mean", "(", ")", "\n", "\n", "self", ".", "alpha_optim", ".", "zero_grad", "(", ")", "\n", "alpha_loss", ".", "backward", "(", ")", "\n", "self", ".", "alpha_optim", ".", "step", "(", ")", "\n", "\n", "self", ".", "alpha", "=", "self", ".", "log_alpha", ".", "exp", "(", ")", "\n", "alpha_tlogs", "=", "self", ".", "alpha", ".", "clone", "(", ")", "# For TensorboardX logs", "\n", "", "else", ":", "\n", "            ", "alpha_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "alpha_tlogs", "=", "torch", ".", "tensor", "(", "self", ".", "alpha", ")", "# For TensorboardX logs", "\n", "\n", "\n", "", "if", "updates", "%", "self", ".", "target_update_interval", "==", "0", ":", "\n", "            ", "soft_update", "(", "self", ".", "critic_target", ",", "self", ".", "critic", ",", "self", ".", "tau", ")", "\n", "\n", "", "return", "qf1_loss", ".", "item", "(", ")", ",", "qf2_loss", ".", "item", "(", ")", ",", "policy_loss", ".", "item", "(", ")", ",", "alpha_loss", ".", "item", "(", ")", ",", "alpha_tlogs", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.sac.sac.SAC.save_model": [[121, 132], ["print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.exists", "os.makedirs", "sac.SAC.policy.state_dict", "sac.SAC.critic.state_dict"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.save"], ["", "def", "save_model", "(", "self", ",", "env_name", ",", "suffix", "=", "\"\"", ",", "actor_path", "=", "None", ",", "critic_path", "=", "None", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "'models/'", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "'models/'", ")", "\n", "\n", "", "if", "actor_path", "is", "None", ":", "\n", "            ", "actor_path", "=", "\"models/sac_actor_{}_{}\"", ".", "format", "(", "env_name", ",", "suffix", ")", "\n", "", "if", "critic_path", "is", "None", ":", "\n", "            ", "critic_path", "=", "\"models/sac_critic_{}_{}\"", ".", "format", "(", "env_name", ",", "suffix", ")", "\n", "", "print", "(", "'Saving models to {} and {}'", ".", "format", "(", "actor_path", ",", "critic_path", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "policy", ".", "state_dict", "(", ")", ",", "actor_path", ")", "\n", "torch", ".", "save", "(", "self", ".", "critic", ".", "state_dict", "(", ")", ",", "critic_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.sac.sac.SAC.load_model": [[134, 140], ["print", "sac.SAC.policy.load_state_dict", "sac.SAC.critic.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.curl_sac.CurlSacAgent.load"], ["", "def", "load_model", "(", "self", ",", "actor_path", ",", "critic_path", ")", ":", "\n", "        ", "print", "(", "'Loading models from {} and {}'", ".", "format", "(", "actor_path", ",", "critic_path", ")", ")", "\n", "if", "actor_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "policy", ".", "load_state_dict", "(", "torch", ".", "load", "(", "actor_path", ")", ")", "\n", "", "if", "critic_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "critic", ".", "load_state_dict", "(", "torch", ".", "load", "(", "critic_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.sac.replay_memory.ReplayMemory.__init__": [[5, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "buffer", "=", "[", "]", "\n", "self", ".", "position", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.sac.replay_memory.ReplayMemory.push": [[10, 15], ["len", "replay_memory.ReplayMemory.buffer.append"], "methods", ["None"], ["", "def", "push", "(", "self", ",", "state", ",", "action", ",", "reward", ",", "next_state", ",", "done", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "buffer", ")", "<", "self", ".", "capacity", ":", "\n", "            ", "self", ".", "buffer", ".", "append", "(", "None", ")", "\n", "", "self", ".", "buffer", "[", "self", ".", "position", "]", "=", "(", "state", ",", "action", ",", "reward", ",", "next_state", ",", "done", ")", "\n", "self", ".", "position", "=", "(", "self", ".", "position", "+", "1", ")", "%", "self", ".", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.sac.replay_memory.ReplayMemory.sample": [[16, 20], ["random.sample", "map", "zip"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.sample"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "batch", "=", "random", ".", "sample", "(", "self", ".", "buffer", ",", "batch_size", ")", "\n", "state", ",", "action", ",", "reward", ",", "next_state", ",", "done", "=", "map", "(", "np", ".", "stack", ",", "zip", "(", "*", "batch", ")", ")", "\n", "return", "state", ",", "action", ",", "reward", ",", "next_state", ",", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.sac.replay_memory.ReplayMemory.__len__": [[21, 23], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "buffer", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLQNetwork.__init__": [[20, 58], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.D2RLQNetwork.apply", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "hidden_dim", ",", "output_dim", ",", "num_layers", "=", "4", ")", ":", "\n", "        ", "super", "(", "D2RLNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "in_dim", "=", "num_inputs", "+", "hidden_dim", "\n", "# Q1 architecture", "\n", "self", ".", "l1_1", "=", "nn", ".", "Linear", "(", "num_inputs", ",", "hidden_dim", ")", "\n", "self", ".", "l1_2", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "\n", "if", "num_layers", ">", "2", ":", "\n", "            ", "self", ".", "l1_3", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "self", ".", "l1_4", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "\n", "", "if", "num_layers", ">", "4", ":", "\n", "            ", "self", ".", "l1_5", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "self", ".", "l1_6", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "\n", "", "if", "num_layers", "==", "8", ":", "\n", "            ", "self", ".", "l1_7", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "self", ".", "l1_8", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "\n", "", "self", ".", "out1", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init_", ")", "\n", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "", "def", "forward", "(", "self", ",", "network_input", ")", ":", "\n", "        ", "xu", "=", "network_input", "\n", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "l1_1", "(", "xu", ")", ")", "\n", "x1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "xu", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "l1_2", "(", "x1", ")", ")", "\n", "if", "not", "self", ".", "num_layers", "==", "2", ":", "\n", "            ", "x1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "xu", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "num_layers", ">", "2", ":", "\n", "            ", "x1", "=", "F", ".", "relu", "(", "self", ".", "l1_3", "(", "x1", ")", ")", "\n", "x1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "xu", "]", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLQNetwork.forward": [[59, 110], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.D2RLQNetwork.out1", "model.D2RLQNetwork.out2", "model.D2RLQNetwork.l1_1", "model.D2RLQNetwork.l2_1", "model.D2RLQNetwork.l1_2", "model.D2RLQNetwork.l2_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.D2RLQNetwork.l1_3", "model.D2RLQNetwork.l2_3", "model.D2RLQNetwork.l1_4", "model.D2RLQNetwork.l2_4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.D2RLQNetwork.l1_5", "model.D2RLQNetwork.l2_5", "model.D2RLQNetwork.l1_6", "model.D2RLQNetwork.l2_6", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.D2RLQNetwork.l1_7", "model.D2RLQNetwork.l2_7", "model.D2RLQNetwork.l1_8", "model.D2RLQNetwork.l2_8"], "methods", ["None"], ["\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "l1_4", "(", "x1", ")", ")", "\n", "if", "not", "self", ".", "num_layers", "==", "4", ":", "\n", "                ", "x1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "xu", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "if", "self", ".", "num_layers", ">", "4", ":", "\n", "            ", "x1", "=", "F", ".", "relu", "(", "self", ".", "l1_5", "(", "x1", ")", ")", "\n", "x1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "xu", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "l1_6", "(", "x1", ")", ")", "\n", "if", "not", "self", ".", "num_layers", "==", "6", ":", "\n", "                ", "x1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "xu", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "if", "self", ".", "num_layers", "==", "8", ":", "\n", "            ", "x1", "=", "F", ".", "relu", "(", "self", ".", "l1_7", "(", "x1", ")", ")", "\n", "x1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "xu", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "l1_8", "(", "x1", ")", ")", "\n", "\n", "", "x1", "=", "self", ".", "out1", "(", "x1", ")", "\n", "\n", "return", "x1", "\n", "\n", "\n", "", "", "class", "D2RLGaussianPolicy", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_actions", ",", "hidden_dim", ",", "num_layers", ",", "action_space", "=", "None", ")", ":", "\n", "        ", "super", "(", "D2RLGaussianPolicy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "in_dim", "=", "hidden_dim", "+", "num_inputs", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "num_inputs", ",", "hidden_dim", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "\n", "\n", "if", "num_layers", ">", "2", ":", "\n", "            ", "self", ".", "linear3", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "self", ".", "linear4", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "", "if", "num_layers", ">", "4", ":", "\n", "            ", "self", ".", "linear5", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "self", ".", "linear6", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "", "if", "num_layers", "==", "8", ":", "\n", "            ", "self", ".", "linear7", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "self", ".", "linear8", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "\n", "", "self", ".", "mean_linear", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "num_actions", ")", "\n", "self", ".", "log_std_linear", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "num_actions", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init_", ")", "\n", "\n", "# action rescaling", "\n", "if", "action_space", "is", "None", ":", "\n", "            ", "self", ".", "action_scale", "=", "torch", ".", "tensor", "(", "1.", ")", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.__init__": [[113, 146], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.D2RLGaussianPolicy.apply", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.__init__"], ["            ", "self", ".", "action_scale", "=", "torch", ".", "FloatTensor", "(", "\n", "(", "action_space", ".", "high", "-", "action_space", ".", "low", ")", "/", "2.", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "action_bias", "=", "torch", ".", "FloatTensor", "(", "\n", "(", "action_space", ".", "high", "+", "action_space", ".", "low", ")", "/", "2.", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "state", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "linear1", "(", "state", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "state", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "linear2", "(", "x", ")", ")", "\n", "\n", "if", "self", ".", "num_layers", ">", "2", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "state", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "linear3", "(", "x", ")", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "state", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "linear4", "(", "x", ")", ")", "\n", "\n", "", "if", "self", ".", "num_layers", ">", "4", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "state", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "linear5", "(", "x", ")", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "state", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "linear6", "(", "x", ")", ")", "\n", "\n", "", "if", "self", ".", "num_layers", "==", "8", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "state", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "linear7", "(", "x", ")", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "state", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "linear8", "(", "x", ")", ")", "\n", "\n", "", "mean", "=", "self", ".", "mean_linear", "(", "x", ")", "\n", "log_std", "=", "self", ".", "log_std_linear", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.forward": [[147, 178], ["torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "model.D2RLGaussianPolicy.mean_linear", "model.D2RLGaussianPolicy.log_std_linear", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "model.D2RLGaussianPolicy.linear1", "model.D2RLGaussianPolicy.linear2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "model.D2RLGaussianPolicy.linear3", "model.D2RLGaussianPolicy.linear4", "model.D2RLGaussianPolicy.linear5", "model.D2RLGaussianPolicy.linear6", "model.D2RLGaussianPolicy.linear7", "model.D2RLGaussianPolicy.linear8"], "methods", ["None"], ["log_std", "=", "torch", ".", "clamp", "(", "log_std", ",", "min", "=", "LOG_SIG_MIN", ",", "max", "=", "LOG_SIG_MAX", ")", "\n", "return", "mean", ",", "log_std", "\n", "\n", "", "def", "sample", "(", "self", ",", "state", ")", ":", "\n", "        ", "mean", ",", "log_std", "=", "self", ".", "forward", "(", "state", ")", "\n", "std", "=", "log_std", ".", "exp", "(", ")", "\n", "normal", "=", "Normal", "(", "mean", ",", "std", ")", "\n", "x_t", "=", "normal", ".", "rsample", "(", ")", "# for reparameterization trick (mean + std * N(0,1))", "\n", "y_t", "=", "torch", ".", "tanh", "(", "x_t", ")", "\n", "action", "=", "y_t", "*", "self", ".", "action_scale", "+", "self", ".", "action_bias", "\n", "log_prob", "=", "normal", ".", "log_prob", "(", "x_t", ")", "\n", "# Enforcing Action Bound", "\n", "log_prob", "-=", "torch", ".", "log", "(", "self", ".", "action_scale", "*", "(", "1", "-", "y_t", ".", "pow", "(", "2", ")", ")", "+", "epsilon", ")", "\n", "log_prob", "=", "log_prob", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "mean", "=", "torch", ".", "tanh", "(", "mean", ")", "*", "self", ".", "action_scale", "+", "self", ".", "action_bias", "\n", "return", "action", ",", "log_prob", ",", "mean", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.sample": [[179, 192], ["model.D2RLGaussianPolicy.forward", "log_std.exp", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal.rsample", "torch.distributions.Normal.rsample", "torch.distributions.Normal.rsample", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.distributions.Normal.log_prob", "torch.distributions.Normal.log_prob", "torch.distributions.Normal.log_prob", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "log_prob.sum.sum.sum", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh.pow", "torch.tanh.pow", "torch.tanh.pow"], "methods", ["home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.D2RLGaussianPolicy.forward", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log", "home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log"], []], "home.repos.pwc.inspect_result.pairlab_d2rl.sac.model.weights_init_": [[13, 17], ["isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "function", ["None"], ["def", "weights_init_", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.sac.utils.create_log_gaussian": [[4, 11], ["math.log", "quadratic.sum", "log_z.sum", "log_std.exp"], "function", ["home.repos.pwc.inspect_result.pairlab_d2rl.curl.encoder.IdentityEncoder.log"], ["\n", "class", "ReplayBuffer", "(", "object", ")", ":", "\n", "\t", "def", "__init__", "(", "self", ",", "state_dim", ",", "action_dim", ",", "max_size", "=", "int", "(", "1e6", ")", ")", ":", "\n", "\t\t", "self", ".", "max_size", "=", "max_size", "\n", "self", ".", "ptr", "=", "0", "\n", "self", ".", "size", "=", "0", "\n", "\n", "self", ".", "state", "=", "np", ".", "zeros", "(", "(", "max_size", ",", "state_dim", ")", ")", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.sac.utils.logsumexp": [[12, 21], ["torch.max", "inputs.view.view", "outputs.squeeze.squeeze"], "function", ["None"], ["self", ".", "action", "=", "np", ".", "zeros", "(", "(", "max_size", ",", "action_dim", ")", ")", "\n", "self", ".", "next_state", "=", "np", ".", "zeros", "(", "(", "max_size", ",", "state_dim", ")", ")", "\n", "self", ".", "reward", "=", "np", ".", "zeros", "(", "(", "max_size", ",", "1", ")", ")", "\n", "self", ".", "not_done", "=", "np", ".", "zeros", "(", "(", "max_size", ",", "1", ")", ")", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "\n", "", "def", "add", "(", "self", ",", "state", ",", "action", ",", "next_state", ",", "reward", ",", "done", ")", ":", "\n", "\t\t", "self", ".", "state", "[", "self", ".", "ptr", "]", "=", "state", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.sac.utils.soft_update": [[22, 25], ["zip", "target.parameters", "source.parameters", "target_param.data.copy_"], "function", ["None"], ["self", ".", "action", "[", "self", ".", "ptr", "]", "=", "action", "\n", "self", ".", "next_state", "[", "self", ".", "ptr", "]", "=", "next_state", "\n", "self", ".", "reward", "[", "self", ".", "ptr", "]", "=", "reward", "\n", "self", ".", "not_done", "[", "self", ".", "ptr", "]", "=", "1.", "-", "done", "\n"]], "home.repos.pwc.inspect_result.pairlab_d2rl.sac.utils.hard_update": [[26, 29], ["zip", "target.parameters", "source.parameters", "target_param.data.copy_"], "function", ["None"], ["\n", "self", ".", "ptr", "=", "(", "self", ".", "ptr", "+", "1", ")", "%", "self", ".", "max_size", "\n", "self", ".", "size", "=", "min", "(", "self", ".", "size", "+", "1", ",", "self", ".", "max_size", ")", "\n", "\n"]]}