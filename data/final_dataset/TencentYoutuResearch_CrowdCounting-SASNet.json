{"home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.main.AverageMeter.__init__": [[45, 47], ["main.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.main.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.main.AverageMeter.reset": [[48, 53], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "# update the moving average", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.main.AverageMeter.update": [[54, 59], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "cur_val", ")", ":", "\n", "        ", "self", ".", "cur_val", "=", "cur_val", "\n", "self", ".", "sum", "+=", "cur_val", "\n", "self", ".", "count", "+=", "1", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.main.get_args_parser": [[28, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_args_parser", "(", ")", ":", "\n", "# define the argparse for the script", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'Inference setting'", ",", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "help", "=", "'path of pre-trained model'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "type", "=", "str", ",", "help", "=", "'root path of the dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'batch size in training'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_para'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'magnify the target density map'", ")", "\n", "parser", ".", "add_argument", "(", "'--block_size'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'patch size for feature level selection'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.main.prepare_dataset": [[40, 42], ["datasets.loading_data.loading_data"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.datasets.loading_data.loading_data"], ["", "def", "prepare_dataset", "(", "args", ")", ":", "\n", "    ", "return", "loading_data", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.main.main": [[60, 101], ["main.prepare_dataset", "model.SASNet().cuda", "SASNet().cuda.load_state_dict", "print", "torch.load", "torch.no_grad", "SASNet().cuda.eval", "main.AverageMeter", "main.AverageMeter", "enumerate", "numpy.sqrt", "print", "print", "print", "print", "print", "model.SASNet", "img.cuda.cuda", "gt_map.data.cpu().numpy.type().unsqueeze().cuda", "SASNet().cuda.", "pred_map.data.cpu().numpy.data.cpu().numpy", "gt_map.data.cpu().numpy.data.cpu().numpy", "range", "numpy.sum", "main.AverageMeter.update", "main.AverageMeter.update", "gt_map.data.cpu().numpy.type().unsqueeze", "pred_map.data.cpu().numpy.data.cpu", "gt_map.data.cpu().numpy.data.cpu", "numpy.sum", "abs", "gt_map.data.cpu().numpy.type"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.main.prepare_dataset", "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.main.AverageMeter.update"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "\"\"\"the main process of inference\"\"\"", "\n", "test_loader", "=", "prepare_dataset", "(", "args", ")", "\n", "\n", "model", "=", "SASNet", "(", "args", "=", "args", ")", ".", "cuda", "(", ")", "\n", "# load the trained model", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "model_path", ")", ")", "\n", "print", "(", "'successfully load model from'", ",", "args", ".", "model_path", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "\n", "maes", "=", "AverageMeter", "(", ")", "\n", "mses", "=", "AverageMeter", "(", ")", "\n", "# iterate over the dataset", "\n", "for", "vi", ",", "data", "in", "enumerate", "(", "test_loader", ",", "0", ")", ":", "\n", "            ", "img", ",", "gt_map", "=", "data", "\n", "\n", "img", "=", "img", ".", "cuda", "(", ")", "\n", "gt_map", "=", "gt_map", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "# get the predicted density map", "\n", "pred_map", "=", "model", "(", "img", ")", "\n", "\n", "pred_map", "=", "pred_map", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gt_map", "=", "gt_map", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# evaluation over the batch", "\n", "for", "i_img", "in", "range", "(", "pred_map", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "pred_cnt", "=", "np", ".", "sum", "(", "pred_map", "[", "i_img", "]", ")", "/", "args", ".", "log_para", "\n", "gt_count", "=", "np", ".", "sum", "(", "gt_map", "[", "i_img", "]", ")", "\n", "\n", "maes", ".", "update", "(", "abs", "(", "gt_count", "-", "pred_cnt", ")", ")", "\n", "mses", ".", "update", "(", "(", "gt_count", "-", "pred_cnt", ")", "*", "(", "gt_count", "-", "pred_cnt", ")", ")", "\n", "# calculation mae and mre", "\n", "", "", "mae", "=", "maes", ".", "avg", "\n", "mse", "=", "np", ".", "sqrt", "(", "mses", ".", "avg", ")", "\n", "# print the results", "\n", "print", "(", "'='", "*", "50", ")", "\n", "print", "(", "'    '", "+", "'-'", "*", "20", ")", "\n", "print", "(", "'    [mae %.3f mse %.3f]'", "%", "(", "mae", ",", "mse", ")", ")", "\n", "print", "(", "'    '", "+", "'-'", "*", "20", ")", "\n", "print", "(", "'='", "*", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.prepare_dataset.get_args_parser": [[28, 33], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_args_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'Data Preprocess'", ",", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "type", "=", "str", ",", "help", "=", "'root path of the dataset'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.prepare_dataset.generate_density_map": [[35, 87], ["numpy.zeros", "range", "len", "len", "prepare_dataset.matlab_style_gauss2D", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.int32", "numpy.int32", "numpy.int32", "numpy.int32", "prepare_dataset.matlab_style_gauss2D", "numpy.abs", "numpy.abs", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.abs", "numpy.abs", "numpy.int32", "numpy.int32", "numpy.floor", "numpy.floor"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.prepare_dataset.matlab_style_gauss2D", "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.prepare_dataset.matlab_style_gauss2D"], ["", "def", "generate_density_map", "(", "shape", "=", "(", "5", ",", "5", ")", ",", "points", "=", "None", ",", "f_sz", "=", "15", ",", "sigma", "=", "4", ")", ":", "\n", "    ", "\"\"\"\n    generate density map given head coordinations\n    \"\"\"", "\n", "im_density", "=", "np", ".", "zeros", "(", "shape", "[", "0", ":", "2", "]", ")", "\n", "h", ",", "w", "=", "shape", "[", "0", ":", "2", "]", "\n", "if", "len", "(", "points", ")", "==", "0", ":", "\n", "        ", "return", "im_density", "\n", "# iterate over all the points", "\n", "", "for", "j", "in", "range", "(", "len", "(", "points", ")", ")", ":", "\n", "# create the gaussian kernel", "\n", "        ", "H", "=", "matlab_style_gauss2D", "(", "(", "f_sz", ",", "f_sz", ")", ",", "sigma", ")", "\n", "# limit the bound", "\n", "x", "=", "np", ".", "minimum", "(", "w", ",", "np", ".", "maximum", "(", "1", ",", "np", ".", "abs", "(", "np", ".", "int32", "(", "np", ".", "floor", "(", "points", "[", "j", ",", "0", "]", ")", ")", ")", ")", ")", "\n", "y", "=", "np", ".", "minimum", "(", "h", ",", "np", ".", "maximum", "(", "1", ",", "np", ".", "abs", "(", "np", ".", "int32", "(", "np", ".", "floor", "(", "points", "[", "j", ",", "1", "]", ")", ")", ")", ")", ")", "\n", "if", "x", ">", "w", "or", "y", ">", "h", ":", "\n", "            ", "continue", "\n", "# get the rect around each head", "\n", "", "x1", "=", "x", "-", "np", ".", "int32", "(", "np", ".", "floor", "(", "f_sz", "/", "2", ")", ")", "\n", "y1", "=", "y", "-", "np", ".", "int32", "(", "np", ".", "floor", "(", "f_sz", "/", "2", ")", ")", "\n", "x2", "=", "x", "+", "np", ".", "int32", "(", "np", ".", "floor", "(", "f_sz", "/", "2", ")", ")", "\n", "y2", "=", "y", "+", "np", ".", "int32", "(", "np", ".", "floor", "(", "f_sz", "/", "2", ")", ")", "\n", "dx1", "=", "0", "\n", "dy1", "=", "0", "\n", "dx2", "=", "0", "\n", "dy2", "=", "0", "\n", "change_H", "=", "False", "\n", "if", "x1", "<", "1", ":", "\n", "            ", "dx1", "=", "np", ".", "abs", "(", "x1", ")", "+", "1", "\n", "x1", "=", "1", "\n", "change_H", "=", "True", "\n", "", "if", "y1", "<", "1", ":", "\n", "            ", "dy1", "=", "np", ".", "abs", "(", "y1", ")", "+", "1", "\n", "y1", "=", "1", "\n", "change_H", "=", "True", "\n", "", "if", "x2", ">", "w", ":", "\n", "            ", "dx2", "=", "x2", "-", "w", "\n", "x2", "=", "w", "\n", "change_H", "=", "True", "\n", "", "if", "y2", ">", "h", ":", "\n", "            ", "dy2", "=", "y2", "-", "h", "\n", "y2", "=", "h", "\n", "change_H", "=", "True", "\n", "", "x1h", "=", "1", "+", "dx1", "\n", "y1h", "=", "1", "+", "dy1", "\n", "x2h", "=", "f_sz", "-", "dx2", "\n", "y2h", "=", "f_sz", "-", "dy2", "\n", "if", "change_H", ":", "\n", "            ", "H", "=", "matlab_style_gauss2D", "(", "(", "y2h", "-", "y1h", "+", "1", ",", "x2h", "-", "x1h", "+", "1", ")", ",", "sigma", ")", "\n", "# attach the gaussian kernel to the rect of this head", "\n", "", "im_density", "[", "y1", "-", "1", ":", "y2", ",", "x1", "-", "1", ":", "x2", "]", "=", "im_density", "[", "y1", "-", "1", ":", "y2", ",", "x1", "-", "1", ":", "x2", "]", "+", "H", "\n", "", "return", "im_density", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.prepare_dataset.matlab_style_gauss2D": [[89, 98], ["numpy.exp", "np.exp.sum", "np.exp.max", "numpy.finfo"], "function", ["None"], ["", "def", "matlab_style_gauss2D", "(", "shape", "=", "(", "3", ",", "3", ")", ",", "sigma", "=", "0.5", ")", ":", "\n", "    ", "m", ",", "n", "=", "[", "(", "ss", "-", "1.", ")", "/", "2.", "for", "ss", "in", "shape", "]", "\n", "y", ",", "x", "=", "np", ".", "ogrid", "[", "-", "m", ":", "m", "+", "1", ",", "-", "n", ":", "n", "+", "1", "]", "\n", "h", "=", "np", ".", "exp", "(", "-", "(", "x", "*", "x", "+", "y", "*", "y", ")", "/", "(", "2.", "*", "sigma", "*", "sigma", ")", ")", "\n", "h", "[", "h", "<", "np", ".", "finfo", "(", "h", ".", "dtype", ")", ".", "eps", "*", "h", ".", "max", "(", ")", "]", "=", "0", "\n", "sumh", "=", "h", ".", "sum", "(", ")", "\n", "if", "sumh", "!=", "0", ":", "\n", "        ", "h", "/=", "sumh", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.model.Conv2d.__init__": [[21, 37], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Identity", "torch.Identity", "torch.Identity", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.datasets.crowd_dataset.CrowdDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "NL", "=", "'relu'", ",", "same_padding", "=", "False", ",", "bn", "=", "False", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "Conv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "int", "(", "(", "kernel_size", "-", "1", ")", "//", "2", ")", "if", "same_padding", "else", "0", "\n", "self", ".", "conv", "=", "[", "]", "\n", "if", "dilation", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ")", "\n", "", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ",", "eps", "=", "0.001", ",", "momentum", "=", "0", ",", "affine", "=", "True", ")", "if", "bn", "else", "nn", ".", "Identity", "(", ")", "\n", "if", "NL", "==", "'relu'", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "NL", "==", "'prelu'", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relu", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.model.Conv2d.forward": [[38, 45], ["model.Conv2d.conv", "model.Conv2d.bn", "model.Conv2d.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "relu", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.model.SASNet.__init__": [[48, 137], ["torch.Module.__init__", "torchvision.models.vgg16_bn", "list", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torchvision.models.vgg16_bn.features.children", "model.Conv2d", "model.Conv2d", "model.Conv2d", "model.Conv2d", "model.Conv2d", "model.Conv2d", "model.Conv2d", "model.Conv2d", "model.Conv2d", "model.Conv2d", "model.MultiBranchModule", "model.Conv2d", "model.MultiBranchModule", "model.Conv2d", "model.MultiBranchModule", "model.Conv2d", "model.MultiBranchModule", "model.Conv2d", "model.MultiBranchModule", "model.Conv2d", "model.Conv2d", "model.Conv2d", "model.Conv2d", "model.Conv2d", "model.Conv2d", "model.Conv2d", "model.Conv2d", "model.Conv2d", "model.Conv2d", "model.Conv2d"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.datasets.crowd_dataset.CrowdDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pretrained", "=", "False", ",", "args", "=", "None", ")", ":", "\n", "        ", "super", "(", "SASNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# define the backbone network", "\n", "vgg", "=", "models", ".", "vgg16_bn", "(", "pretrained", "=", "pretrained", ")", "\n", "\n", "features", "=", "list", "(", "vgg", ".", "features", ".", "children", "(", ")", ")", "\n", "# get each stage of the backbone", "\n", "self", ".", "features1", "=", "nn", ".", "Sequential", "(", "*", "features", "[", "0", ":", "6", "]", ")", "\n", "self", ".", "features2", "=", "nn", ".", "Sequential", "(", "*", "features", "[", "6", ":", "13", "]", ")", "\n", "self", ".", "features3", "=", "nn", ".", "Sequential", "(", "*", "features", "[", "13", ":", "23", "]", ")", "\n", "self", ".", "features4", "=", "nn", ".", "Sequential", "(", "*", "features", "[", "23", ":", "33", "]", ")", "\n", "self", ".", "features5", "=", "nn", ".", "Sequential", "(", "*", "features", "[", "33", ":", "43", "]", ")", "\n", "# docoder definition", "\n", "self", ".", "de_pred5", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "512", ",", "1024", ",", "3", ",", "same_padding", "=", "True", ",", "NL", "=", "'relu'", ")", ",", "\n", "Conv2d", "(", "1024", ",", "512", ",", "3", ",", "same_padding", "=", "True", ",", "NL", "=", "'relu'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "de_pred4", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "512", "+", "512", ",", "512", ",", "3", ",", "same_padding", "=", "True", ",", "NL", "=", "'relu'", ")", ",", "\n", "Conv2d", "(", "512", ",", "256", ",", "3", ",", "same_padding", "=", "True", ",", "NL", "=", "'relu'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "de_pred3", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "256", "+", "256", ",", "256", ",", "3", ",", "same_padding", "=", "True", ",", "NL", "=", "'relu'", ")", ",", "\n", "Conv2d", "(", "256", ",", "128", ",", "3", ",", "same_padding", "=", "True", ",", "NL", "=", "'relu'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "de_pred2", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "128", "+", "128", ",", "128", ",", "3", ",", "same_padding", "=", "True", ",", "NL", "=", "'relu'", ")", ",", "\n", "Conv2d", "(", "128", ",", "64", ",", "3", ",", "same_padding", "=", "True", ",", "NL", "=", "'relu'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "de_pred1", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "64", "+", "64", ",", "64", ",", "3", ",", "same_padding", "=", "True", ",", "NL", "=", "'relu'", ")", ",", "\n", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "same_padding", "=", "True", ",", "NL", "=", "'relu'", ")", ",", "\n", ")", "\n", "# density head definition", "\n", "self", ".", "density_head5", "=", "nn", ".", "Sequential", "(", "\n", "MultiBranchModule", "(", "512", ")", ",", "\n", "Conv2d", "(", "2048", ",", "1", ",", "1", ",", "same_padding", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "density_head4", "=", "nn", ".", "Sequential", "(", "\n", "MultiBranchModule", "(", "256", ")", ",", "\n", "Conv2d", "(", "1024", ",", "1", ",", "1", ",", "same_padding", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "density_head3", "=", "nn", ".", "Sequential", "(", "\n", "MultiBranchModule", "(", "128", ")", ",", "\n", "Conv2d", "(", "512", ",", "1", ",", "1", ",", "same_padding", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "density_head2", "=", "nn", ".", "Sequential", "(", "\n", "MultiBranchModule", "(", "64", ")", ",", "\n", "Conv2d", "(", "256", ",", "1", ",", "1", ",", "same_padding", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "density_head1", "=", "nn", ".", "Sequential", "(", "\n", "MultiBranchModule", "(", "64", ")", ",", "\n", "Conv2d", "(", "256", ",", "1", ",", "1", ",", "same_padding", "=", "True", ")", "\n", ")", "\n", "# confidence head definition", "\n", "self", ".", "confidence_head5", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "512", ",", "256", ",", "1", ",", "same_padding", "=", "True", ",", "NL", "=", "'relu'", ")", ",", "\n", "Conv2d", "(", "256", ",", "1", ",", "1", ",", "same_padding", "=", "True", ",", "NL", "=", "None", ")", "\n", ")", "\n", "\n", "self", ".", "confidence_head4", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "256", ",", "128", ",", "1", ",", "same_padding", "=", "True", ",", "NL", "=", "'relu'", ")", ",", "\n", "Conv2d", "(", "128", ",", "1", ",", "1", ",", "same_padding", "=", "True", ",", "NL", "=", "None", ")", "\n", ")", "\n", "\n", "self", ".", "confidence_head3", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "128", ",", "64", ",", "1", ",", "same_padding", "=", "True", ",", "NL", "=", "'relu'", ")", ",", "\n", "Conv2d", "(", "64", ",", "1", ",", "1", ",", "same_padding", "=", "True", ",", "NL", "=", "None", ")", "\n", ")", "\n", "\n", "self", ".", "confidence_head2", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "64", ",", "32", ",", "1", ",", "same_padding", "=", "True", ",", "NL", "=", "'relu'", ")", ",", "\n", "Conv2d", "(", "32", ",", "1", ",", "1", ",", "same_padding", "=", "True", ",", "NL", "=", "None", ")", "\n", ")", "\n", "\n", "self", ".", "confidence_head1", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "64", ",", "32", ",", "1", ",", "same_padding", "=", "True", ",", "NL", "=", "'relu'", ")", ",", "\n", "Conv2d", "(", "32", ",", "1", ",", "1", ",", "same_padding", "=", "True", ",", "NL", "=", "None", ")", "\n", ")", "\n", "\n", "self", ".", "block_size", "=", "args", ".", "block_size", "\n", "# the forward process", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.model.SASNet.forward": [[138, 214], ["model.SASNet.size", "model.SASNet.features1", "model.SASNet.features2", "model.SASNet.features3", "model.SASNet.features4", "model.SASNet.features5", "model.SASNet.de_pred5", "torch.upsample_bilinear", "torch.upsample_bilinear", "torch.upsample_bilinear", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.SASNet.de_pred4", "torch.upsample_bilinear", "torch.upsample_bilinear", "torch.upsample_bilinear", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.SASNet.de_pred3", "torch.upsample_bilinear", "torch.upsample_bilinear", "torch.upsample_bilinear", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.SASNet.de_pred2", "torch.upsample_bilinear", "torch.upsample_bilinear", "torch.upsample_bilinear", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.SASNet.de_pred1", "model.SASNet.density_head5", "model.SASNet.density_head4", "model.SASNet.density_head3", "model.SASNet.density_head2", "model.SASNet.density_head1", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "model.SASNet.confidence_head5", "model.SASNet.confidence_head4", "model.SASNet.confidence_head3", "model.SASNet.confidence_head2", "model.SASNet.confidence_head1", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.upsample_nearest", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "model.SASNet.size", "model.SASNet.size", "model.SASNet.size", "model.SASNet.size", "model.SASNet.size", "model.SASNet.size", "model.SASNet.size", "model.SASNet.size", "model.SASNet.size", "model.SASNet.size", "model.SASNet.size", "model.SASNet.size", "model.SASNet.size", "model.SASNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "size", "=", "x", ".", "size", "(", ")", "\n", "x1", "=", "self", ".", "features1", "(", "x", ")", "\n", "x2", "=", "self", ".", "features2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "features3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "features4", "(", "x3", ")", "\n", "x5", "=", "self", ".", "features5", "(", "x4", ")", "\n", "# begining of decoding", "\n", "x", "=", "self", ".", "de_pred5", "(", "x5", ")", "\n", "x5_out", "=", "x", "\n", "x", "=", "F", ".", "upsample_bilinear", "(", "x", ",", "size", "=", "x4", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x4", ",", "x", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "de_pred4", "(", "x", ")", "\n", "x4_out", "=", "x", "\n", "x", "=", "F", ".", "upsample_bilinear", "(", "x", ",", "size", "=", "x3", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x3", ",", "x", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "de_pred3", "(", "x", ")", "\n", "x3_out", "=", "x", "\n", "x", "=", "F", ".", "upsample_bilinear", "(", "x", ",", "size", "=", "x2", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "de_pred2", "(", "x", ")", "\n", "x2_out", "=", "x", "\n", "x", "=", "F", ".", "upsample_bilinear", "(", "x", ",", "size", "=", "x1", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "de_pred1", "(", "x", ")", "\n", "x1_out", "=", "x", "\n", "# density prediction", "\n", "x5_density", "=", "self", ".", "density_head5", "(", "x5_out", ")", "\n", "x4_density", "=", "self", ".", "density_head4", "(", "x4_out", ")", "\n", "x3_density", "=", "self", ".", "density_head3", "(", "x3_out", ")", "\n", "x2_density", "=", "self", ".", "density_head2", "(", "x2_out", ")", "\n", "x1_density", "=", "self", ".", "density_head1", "(", "x1_out", ")", "\n", "# get patch features for confidence prediction", "\n", "x5_confi", "=", "F", ".", "adaptive_avg_pool2d", "(", "x5_out", ",", "output_size", "=", "(", "size", "[", "-", "2", "]", "//", "self", ".", "block_size", ",", "size", "[", "-", "1", "]", "//", "self", ".", "block_size", ")", ")", "\n", "x4_confi", "=", "F", ".", "adaptive_avg_pool2d", "(", "x4_out", ",", "output_size", "=", "(", "size", "[", "-", "2", "]", "//", "self", ".", "block_size", ",", "size", "[", "-", "1", "]", "//", "self", ".", "block_size", ")", ")", "\n", "x3_confi", "=", "F", ".", "adaptive_avg_pool2d", "(", "x3_out", ",", "output_size", "=", "(", "size", "[", "-", "2", "]", "//", "self", ".", "block_size", ",", "size", "[", "-", "1", "]", "//", "self", ".", "block_size", ")", ")", "\n", "x2_confi", "=", "F", ".", "adaptive_avg_pool2d", "(", "x2_out", ",", "output_size", "=", "(", "size", "[", "-", "2", "]", "//", "self", ".", "block_size", ",", "size", "[", "-", "1", "]", "//", "self", ".", "block_size", ")", ")", "\n", "x1_confi", "=", "F", ".", "adaptive_avg_pool2d", "(", "x1_out", ",", "output_size", "=", "(", "size", "[", "-", "2", "]", "//", "self", ".", "block_size", ",", "size", "[", "-", "1", "]", "//", "self", ".", "block_size", ")", ")", "\n", "# confidence prediction", "\n", "x5_confi", "=", "self", ".", "confidence_head5", "(", "x5_confi", ")", "\n", "x4_confi", "=", "self", ".", "confidence_head4", "(", "x4_confi", ")", "\n", "x3_confi", "=", "self", ".", "confidence_head3", "(", "x3_confi", ")", "\n", "x2_confi", "=", "self", ".", "confidence_head2", "(", "x2_confi", ")", "\n", "x1_confi", "=", "self", ".", "confidence_head1", "(", "x1_confi", ")", "\n", "# upsample the density prediction to be the same with the input size", "\n", "x5_density", "=", "F", ".", "upsample_nearest", "(", "x5_density", ",", "size", "=", "x1", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "x4_density", "=", "F", ".", "upsample_nearest", "(", "x4_density", ",", "size", "=", "x1", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "x3_density", "=", "F", ".", "upsample_nearest", "(", "x3_density", ",", "size", "=", "x1", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "x2_density", "=", "F", ".", "upsample_nearest", "(", "x2_density", ",", "size", "=", "x1", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "x1_density", "=", "F", ".", "upsample_nearest", "(", "x1_density", ",", "size", "=", "x1", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "# upsample the confidence prediction to be the same with the input size", "\n", "x5_confi_upsample", "=", "F", ".", "upsample_nearest", "(", "x5_confi", ",", "size", "=", "x1", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "x4_confi_upsample", "=", "F", ".", "upsample_nearest", "(", "x4_confi", ",", "size", "=", "x1", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "x3_confi_upsample", "=", "F", ".", "upsample_nearest", "(", "x3_confi", ",", "size", "=", "x1", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "x2_confi_upsample", "=", "F", ".", "upsample_nearest", "(", "x2_confi", ",", "size", "=", "x1", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "x1_confi_upsample", "=", "F", ".", "upsample_nearest", "(", "x1_confi", ",", "size", "=", "x1", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "# =============================================================================================================", "\n", "# soft \u221a", "\n", "confidence_map", "=", "torch", ".", "cat", "(", "[", "x5_confi_upsample", ",", "x4_confi_upsample", ",", "\n", "x3_confi_upsample", ",", "x2_confi_upsample", ",", "x1_confi_upsample", "]", ",", "1", ")", "\n", "confidence_map", "=", "torch", ".", "nn", ".", "functional", ".", "sigmoid", "(", "confidence_map", ")", "\n", "\n", "# use softmax to normalize", "\n", "confidence_map", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "confidence_map", ",", "1", ")", "\n", "\n", "density_map", "=", "torch", ".", "cat", "(", "[", "x5_density", ",", "x4_density", ",", "x3_density", ",", "x2_density", ",", "x1_density", "]", ",", "1", ")", "\n", "# soft selection", "\n", "density_map", "*=", "confidence_map", "\n", "density", "=", "torch", ".", "sum", "(", "density_map", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "return", "density", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.model.MultiBranchModule.__init__": [[217, 227], ["torch.Module.__init__", "model.BasicConv2d", "model.BasicConv2d", "model.BasicConv2d", "model.BasicConv2d", "model.BasicConv2d", "model.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.datasets.crowd_dataset.CrowdDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "sync", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiBranchModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "branch1x1", "=", "BasicConv2d", "(", "in_channels", ",", "in_channels", "//", "2", ",", "kernel_size", "=", "1", ",", "sync", "=", "sync", ")", "\n", "self", ".", "branch1x1_1", "=", "BasicConv2d", "(", "in_channels", "//", "2", ",", "in_channels", ",", "kernel_size", "=", "1", ",", "sync", "=", "sync", ")", "\n", "\n", "self", ".", "branch3x3_1", "=", "BasicConv2d", "(", "in_channels", ",", "in_channels", "//", "2", ",", "kernel_size", "=", "1", ",", "sync", "=", "sync", ")", "\n", "self", ".", "branch3x3_2", "=", "BasicConv2d", "(", "in_channels", "//", "2", ",", "in_channels", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "sync", "=", "sync", ")", "\n", "\n", "self", ".", "branch3x3dbl_1", "=", "BasicConv2d", "(", "in_channels", ",", "in_channels", "//", "2", ",", "kernel_size", "=", "1", ",", "sync", "=", "sync", ")", "\n", "self", ".", "branch3x3dbl_2", "=", "BasicConv2d", "(", "in_channels", "//", "2", ",", "in_channels", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ",", "sync", "=", "sync", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.model.MultiBranchModule.forward": [[228, 240], ["model.MultiBranchModule.branch1x1", "model.MultiBranchModule.branch1x1_1", "model.MultiBranchModule.branch3x3_1", "model.MultiBranchModule.branch3x3_2", "model.MultiBranchModule.branch3x3dbl_1", "model.MultiBranchModule.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "branch1x1", "=", "self", ".", "branch1x1_1", "(", "branch1x1", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "self", ".", "branch3x3_2", "(", "branch3x3", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "x", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.model.BasicConv2d.__init__": [[244, 253], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "print", "torch.SyncBatchNorm", "torch.SyncBatchNorm", "torch.SyncBatchNorm", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.datasets.crowd_dataset.CrowdDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "sync", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BasicConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "bias", "=", "False", ",", "**", "kwargs", ")", "\n", "if", "sync", ":", "\n", "# for sync bn", "\n", "            ", "print", "(", "'use sync inception'", ")", "\n", "self", ".", "bn", "=", "nn", ".", "SyncBatchNorm", "(", "out_channels", ",", "eps", "=", "0.001", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ",", "eps", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.None.model.BasicConv2d.forward": [[254, 258], ["model.BasicConv2d.conv", "model.BasicConv2d.bn", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.datasets.loading_data.loading_data": [[20, 31], ["torchvision.Compose", "crowd_dataset.CrowdDataset", "torch.utils.data.DataLoader", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["def", "loading_data", "(", "args", ")", ":", "\n", "# the augumentations", "\n", "    ", "transform", "=", "standard_transforms", ".", "Compose", "(", "[", "\n", "standard_transforms", ".", "ToTensor", "(", ")", ",", "standard_transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "# dcreate  the dataset", "\n", "test_set", "=", "CrowdDataset", "(", "root_path", "=", "args", ".", "data_path", ",", "transform", "=", "transform", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_set", ",", "batch_size", "=", "1", ",", "num_workers", "=", "4", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ")", "\n", "\n", "return", "test_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.datasets.crowd_dataset.CrowdDataset.__init__": [[28, 35], ["glob.glob", "len", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "transform", "=", "None", ")", ":", "\n", "# get all images to be tested", "\n", "        ", "root", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root_path", ",", "'test_data/images/*.jpg'", ")", ")", "\n", "\n", "self", ".", "nSamples", "=", "len", "(", "root", ")", "\n", "self", ".", "lines", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.datasets.crowd_dataset.CrowdDataset.__len__": [[36, 38], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.datasets.crowd_dataset.CrowdDataset.__getitem__": [[39, 53], ["crowd_dataset.load_data", "torch.Tensor", "torch.Tensor", "len", "crowd_dataset.CrowdDataset.transform"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.datasets.crowd_dataset.load_data"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "# get the image path", "\n", "img_path", "=", "self", ".", "lines", "[", "index", "]", "\n", "\n", "img", ",", "target", "=", "load_data", "(", "img_path", ")", "\n", "# perform data augumentation", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "img", "=", "torch", ".", "Tensor", "(", "img", ")", "\n", "target", "=", "torch", ".", "Tensor", "(", "target", ")", "\n", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_CrowdCounting-SASNet.datasets.crowd_dataset.load_data": [[54, 69], ["img_path.replace().replace", "PIL.Image.open().convert", "numpy.asarray", "img_path.replace", "PIL.Image.open", "h5py.File", "time.sleep"], "function", ["None"], ["", "", "def", "load_data", "(", "img_path", ")", ":", "\n", "# get the path of the ground truth", "\n", "    ", "gt_path", "=", "img_path", ".", "replace", "(", "'.jpg'", ",", "'_sigma4.h5'", ")", ".", "replace", "(", "'images'", ",", "'ground_truth'", ")", "\n", "# open the image", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "# load the ground truth", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "gt_file", "=", "h5py", ".", "File", "(", "gt_path", ")", "\n", "break", "\n", "", "except", ":", "\n", "            ", "sleep", "(", "2", ")", "\n", "", "", "target", "=", "np", ".", "asarray", "(", "gt_file", "[", "'density'", "]", ")", "\n", "\n", "return", "img", ",", "target", "", "", ""]]}