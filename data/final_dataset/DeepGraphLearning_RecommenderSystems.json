{"home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.base.LSTMNet.__init__": [[11, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "layers", "=", "1", ",", "hidden_units", "=", "100", ",", "hidden_activation", "=", "\"tanh\"", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "self", ".", "layers", "=", "layers", "\n", "self", ".", "hidden_units", "=", "hidden_units", "\n", "if", "hidden_activation", "==", "\"tanh\"", ":", "\n", "            ", "self", ".", "hidden_activation", "=", "tf", ".", "nn", ".", "tanh", "\n", "", "elif", "hidden_activation", "==", "\"relu\"", ":", "\n", "            ", "self", ".", "hidden_activation", "=", "tf", ".", "nn", ".", "relu", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.base.LSTMNet.__call__": [[22, 37], ["range", "tensorflow.contrib.rnn.MultiRNNCell", "tensorflow.contrib.rnn.DropoutWrapper.zero_state", "tensorflow.count_nonzero", "tensorflow.nn.dynamic_rnn", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.contrib.rnn.DropoutWrapper", "cells.append", "tensorflow.squeeze", "tensorflow.shape"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "mask", ")", ":", "\n", "        ", "'''\n        inputs: the embeddings of a batch of sequences. (batch_size, seq_length, emb_size)\n        mask: mask for imcomplete sequences. (batch_size, seq_length, 1)\n        '''", "\n", "cells", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "layers", ")", ":", "\n", "            ", "cell", "=", "rnn", ".", "BasicLSTMCell", "(", "self", ".", "hidden_units", ",", "activation", "=", "self", ".", "hidden_activation", ")", "\n", "cell", "=", "rnn", ".", "DropoutWrapper", "(", "cell", ",", "output_keep_prob", "=", "1.", "-", "self", ".", "dropout", ")", "\n", "cells", ".", "append", "(", "cell", ")", "\n", "", "self", ".", "cell", "=", "cell", "=", "rnn", ".", "MultiRNNCell", "(", "cells", ")", "\n", "zero_state", "=", "cell", ".", "zero_state", "(", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "sequence_length", "=", "tf", ".", "count_nonzero", "(", "tf", ".", "squeeze", "(", "mask", ",", "[", "-", "1", "]", ")", ",", "-", "1", ")", "\n", "outputs", ",", "state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "cell", ",", "inputs", ",", "sequence_length", "=", "sequence_length", ",", "initial_state", "=", "zero_state", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.base.TemporalConvNet.__init__": [[39, 45], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_channels", ",", "stride", "=", "1", ",", "kernel_size", "=", "2", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "num_levels", "=", "len", "(", "num_channels", ")", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.base.TemporalConvNet.__call__": [[46, 59], ["inputs.get_shape().as_list", "range", "base.TemporalConvNet._TemporalBlock", "outputs.append", "inputs.get_shape"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.base.TemporalConvNet._TemporalBlock"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "mask", ")", ":", "\n", "        ", "inputs_shape", "=", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "outputs", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "dilation_size", "=", "2", "**", "i", "\n", "in_channels", "=", "inputs_shape", "[", "-", "1", "]", "if", "i", "==", "0", "else", "self", ".", "num_channels", "[", "i", "-", "1", "]", "\n", "out_channels", "=", "self", ".", "num_channels", "[", "i", "]", "\n", "output", "=", "self", ".", "_TemporalBlock", "(", "outputs", "[", "-", "1", "]", ",", "in_channels", ",", "out_channels", ",", "self", ".", "kernel_size", ",", "\n", "self", ".", "stride", ",", "dilation", "=", "dilation_size", ",", "padding", "=", "(", "self", ".", "kernel_size", "-", "1", ")", "*", "dilation_size", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "level", "=", "i", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "\n", "", "return", "outputs", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.base.TemporalConvNet._TemporalBlock": [[60, 98], ["tensorflow.pad", "tensorflow.layers.conv1d", "tensorflow.nn.dropout", "tensorflow.pad", "tensorflow.layers.conv1d", "tensorflow.nn.dropout", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.layers.conv1d", "tensorflow.random_normal_initializer", "tensorflow.zeros_initializer", "tensorflow.random_normal_initializer", "tensorflow.zeros_initializer", "tensorflow.random_normal_initializer", "tensorflow.zeros_initializer", "str", "str", "str"], "methods", ["None"], ["", "def", "_TemporalBlock", "(", "self", ",", "value", ",", "n_inputs", ",", "n_outputs", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "padding", ",", "dropout", "=", "0.2", ",", "level", "=", "0", ")", ":", "\n", "        ", "padded_value1", "=", "tf", ".", "pad", "(", "value", ",", "[", "[", "0", ",", "0", "]", ",", "[", "padding", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "self", ".", "conv1", "=", "tf", ".", "layers", ".", "conv1d", "(", "inputs", "=", "padded_value1", ",", "\n", "filters", "=", "n_outputs", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "stride", ",", "\n", "padding", "=", "'valid'", ",", "\n", "dilation_rate", "=", "dilation", ",", "\n", "activation", "=", "None", ",", "\n", "kernel_initializer", "=", "tf", ".", "random_normal_initializer", "(", "0", ",", "0.01", ")", ",", "\n", "bias_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "name", "=", "'layer'", "+", "str", "(", "level", ")", "+", "'_conv1'", ")", "\n", "self", ".", "output1", "=", "tf", ".", "nn", ".", "dropout", "(", "tf", ".", "nn", ".", "relu", "(", "self", ".", "conv1", ")", ",", "keep_prob", "=", "1", "-", "dropout", ")", "\n", "\n", "padded_value2", "=", "tf", ".", "pad", "(", "self", ".", "output1", ",", "[", "[", "0", ",", "0", "]", ",", "[", "padding", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "self", ".", "conv2", "=", "tf", ".", "layers", ".", "conv1d", "(", "inputs", "=", "padded_value2", ",", "\n", "filters", "=", "n_outputs", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "stride", ",", "\n", "padding", "=", "'valid'", ",", "\n", "dilation_rate", "=", "dilation", ",", "\n", "activation", "=", "None", ",", "\n", "kernel_initializer", "=", "tf", ".", "random_normal_initializer", "(", "0", ",", "0.01", ")", ",", "\n", "bias_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "name", "=", "'layer'", "+", "str", "(", "level", ")", "+", "'_conv2'", ")", "\n", "self", ".", "output2", "=", "tf", ".", "nn", ".", "dropout", "(", "tf", ".", "nn", ".", "relu", "(", "self", ".", "conv2", ")", ",", "keep_prob", "=", "1", "-", "dropout", ")", "\n", "\n", "if", "n_inputs", "!=", "n_outputs", ":", "\n", "            ", "res_x", "=", "tf", ".", "layers", ".", "conv1d", "(", "inputs", "=", "value", ",", "\n", "filters", "=", "n_outputs", ",", "\n", "kernel_size", "=", "1", ",", "\n", "activation", "=", "None", ",", "\n", "kernel_initializer", "=", "tf", ".", "random_normal_initializer", "(", "0", ",", "0.01", ")", ",", "\n", "bias_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "name", "=", "'layer'", "+", "str", "(", "level", ")", "+", "'_conv'", ")", "\n", "", "else", ":", "\n", "            ", "res_x", "=", "value", "\n", "", "return", "tf", ".", "nn", ".", "relu", "(", "res_x", "+", "self", ".", "output2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.base.TransformerNet.__init__": [[275, 284], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_units", ",", "num_blocks", ",", "num_heads", ",", "maxlen", ",", "dropout_rate", ",", "pos_fixed", ",", "l2_reg", "=", "0.0", ")", ":", "\n", "        ", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "maxlen", "=", "maxlen", "\n", "self", ".", "dropout_keep_prob", "=", "1.", "-", "dropout_rate", "\n", "self", ".", "position_encoding_matrix", "=", "None", "\n", "self", ".", "pos_fixed", "=", "pos_fixed", "\n", "self", ".", "l2_reg", "=", "l2_reg", "\n", "#self.position_encoding = position_encoding(self.maxlen, self.num_units) # (maxlen, num_units)", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.base.TransformerNet.position_embedding": [[286, 291], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.contrib.layers.l2_regularizer"], "methods", ["None"], ["", "def", "position_embedding", "(", "self", ",", "inputs", ",", "maxlen", ",", "num_units", ",", "l2_reg", "=", "0.0", ",", "scope", "=", "\"pos_embedding\"", ",", "reuse", "=", "None", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "pos_embedding_table", "=", "tf", ".", "get_variable", "(", "'pos_embedding_table'", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "maxlen", ",", "num_units", "]", ",", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "l2_reg", ")", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "pos_embedding_table", ",", "inputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.base.TransformerNet.get_position_encoding": [[292, 306], ["tensorflow.variable_scope", "tensorflow.tile", "tensorflow.nn.embedding_lookup", "numpy.array", "numpy.sin", "numpy.cos", "tensorflow.convert_to_tensor", "tensorflow.shape", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.convert_to_tensor.reshape", "tensorflow.range", "numpy.power", "range", "range"], "methods", ["None"], ["", "def", "get_position_encoding", "(", "self", ",", "inputs", ",", "scope", "=", "\"pos_embedding/\"", ",", "reuse", "=", "None", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "if", "self", ".", "position_encoding_matrix", "is", "None", ":", "\n", "                ", "encoded_vec", "=", "np", ".", "array", "(", "[", "pos", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "i", "/", "self", ".", "num_units", ")", "for", "pos", "in", "range", "(", "self", ".", "maxlen", ")", "for", "i", "in", "range", "(", "self", ".", "num_units", ")", "]", ")", "\n", "encoded_vec", "[", ":", ":", "2", "]", "=", "np", ".", "sin", "(", "encoded_vec", "[", ":", ":", "2", "]", ")", "\n", "encoded_vec", "[", "1", ":", ":", "2", "]", "=", "np", ".", "cos", "(", "encoded_vec", "[", "1", ":", ":", "2", "]", ")", "\n", "encoded_vec", "=", "tf", ".", "convert_to_tensor", "(", "encoded_vec", ".", "reshape", "(", "[", "self", ".", "maxlen", ",", "self", ".", "num_units", "]", ")", ",", "dtype", "=", "dtype", ")", "\n", "self", ".", "position_encoding_matrix", "=", "encoded_vec", "# (maxlen, num_units)", "\n", "\n", "", "N", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", "\n", "T", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "1", "]", "\n", "position_ind", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "T", ")", ",", "0", ")", ",", "[", "N", ",", "1", "]", ")", "# (batch_size , len)", "\n", "position_encoding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "position_encoding_matrix", ",", "position_ind", ")", "# (batch_size, len, num_units)", "\n", "", "return", "position_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.base.TransformerNet.__call__": [[308, 339], ["range", "base.normalize", "base.TransformerNet.get_position_encoding", "base.TransformerNet.position_embedding", "tensorflow.tile", "tensorflow.variable_scope", "base.multihead_attention", "base.feedforward", "tensorflow.expand_dims", "base.normalize", "tensorflow.range", "base.normalize", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.normalize", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.base.TransformerNet.get_position_encoding", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.base.TransformerNet.position_embedding", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.multihead_attention", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.base.feedforward", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.normalize", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.normalize"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "mask", ")", ":", "\n", "        ", "'''\n        Args:\n        inputs: sequence embeddings (item_embeddings +  pos_embeddings) shape: (batch_size , maxlen, embedding_size)\n        Return:\n        Output sequences which has the same shape with inputs\n        '''", "\n", "if", "self", ".", "pos_fixed", ":", "# use sin /cos positional embedding", "\n", "            ", "position_encoding", "=", "self", ".", "get_position_encoding", "(", "inputs", ")", "# (batch_size, len, num_units)", "\n", "", "else", ":", "\n", "            ", "position_encoding", "=", "self", ".", "position_embedding", "(", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "tf", ".", "shape", "(", "inputs", ")", "[", "1", "]", ")", ",", "0", ")", ",", "[", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", ",", "1", "]", ")", ",", "self", ".", "maxlen", ",", "self", ".", "num_units", ",", "self", ".", "l2_reg", ")", "\n", "", "inputs", "+=", "position_encoding", "\n", "inputs", "*=", "mask", "\n", "for", "i", "in", "range", "(", "self", ".", "num_blocks", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"num_blocks_%d\"", "%", "i", ")", ":", "\n", "# Self-attention", "\n", "                ", "inputs", "=", "multihead_attention", "(", "queries", "=", "normalize", "(", "inputs", ")", ",", "\n", "keys", "=", "inputs", ",", "\n", "num_units", "=", "self", ".", "num_units", ",", "\n", "num_heads", "=", "self", ".", "num_heads", ",", "\n", "dropout_keep_prob", "=", "self", ".", "dropout_keep_prob", ",", "\n", "causality", "=", "True", ",", "\n", "scope", "=", "\"self_attention\"", ")", "\n", "\n", "# Feed forward", "\n", "inputs", "=", "feedforward", "(", "normalize", "(", "inputs", ")", ",", "num_units", "=", "[", "self", ".", "num_units", ",", "self", ".", "num_units", "]", ",", "\n", "dropout_keep_prob", "=", "self", ".", "dropout_keep_prob", ")", "\n", "\n", "inputs", "*=", "mask", "\n", "", "", "outputs", "=", "normalize", "(", "inputs", ")", "# (batch_size, maxlen, num_units)", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.base.normalize": [[100, 130], ["tensorflow.variable_scope", "inputs.get_shape", "tensorflow.nn.moments", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.zeros", "tensorflow.ones"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.ones"], ["", "", "def", "normalize", "(", "inputs", ",", "\n", "epsilon", "=", "1e-8", ",", "\n", "scope", "=", "\"ln\"", ",", "\n", "reuse", "=", "None", ")", ":", "\n", "\n", "    ", "'''Applies layer normalization.\n    \n    Args:\n      inputs: A tensor with 2 or more dimensions, where the first dimension has\n        `batch_size`.\n      epsilon: A floating number. A very small number for preventing ZeroDivision Error.\n      scope: Optional scope for `variable_scope`.\n      reuse: Boolean, whether to reuse the weights of a previous layer\n        by the same name.\n      \n    Returns:\n      A tensor with the same shape and data dtype as `inputs`.\n    '''", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "inputs_shape", "=", "inputs", ".", "get_shape", "(", ")", "\n", "params_shape", "=", "inputs_shape", "[", "-", "1", ":", "]", "\n", "\n", "mean", ",", "variance", "=", "tf", ".", "nn", ".", "moments", "(", "inputs", ",", "[", "-", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "beta", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "params_shape", ")", ")", "\n", "gamma", "=", "tf", ".", "Variable", "(", "tf", ".", "ones", "(", "params_shape", ")", ")", "\n", "normalized", "=", "(", "inputs", "-", "mean", ")", "/", "(", "(", "variance", "+", "epsilon", ")", "**", "(", ".5", ")", ")", "\n", "outputs", "=", "gamma", "*", "normalized", "+", "beta", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.base.multihead_attention": [[132, 231], ["tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.matmul", "tensorflow.sign", "tensorflow.tile", "tensorflow.tile", "tensorflow.where", "tensorflow.nn.softmax", "tensorflow.sign", "tensorflow.tile", "tensorflow.tile", "tensorflow.nn.dropout", "tensorflow.matmul", "tensorflow.concat", "tensorflow.split", "tensorflow.split", "tensorflow.split", "tensorflow.transpose", "tensorflow.abs", "tensorflow.expand_dims", "tensorflow.ones_like", "tensorflow.equal", "tensorflow.ones_like", "tensorflow.tile", "tensorflow.where", "tensorflow.abs", "tensorflow.expand_dims", "tensorflow.split", "tensorflow.reduce_sum", "tensorflow.contrib.linalg.LinearOperatorLowerTriangular().to_dense", "tensorflow.expand_dims", "tensorflow.ones_like", "tensorflow.equal", "tensorflow.reduce_sum", "queries.get_shape", "tf.concat.get_shape().as_list", "tensorflow.shape", "tensorflow.contrib.linalg.LinearOperatorTriL().to_dense", "tensorflow.shape", "tensorflow.contrib.linalg.LinearOperatorLowerTriangular", "tensorflow.shape", "tf.concat.get_shape", "tensorflow.contrib.linalg.LinearOperatorTriL"], "function", ["None"], ["", "def", "multihead_attention", "(", "queries", ",", "\n", "keys", ",", "\n", "num_units", "=", "None", ",", "\n", "num_heads", "=", "8", ",", "\n", "dropout_keep_prob", "=", "1.0", ",", "\n", "causality", "=", "False", ",", "\n", "scope", "=", "\"multihead_attention\"", ",", "\n", "reuse", "=", "None", ",", "\n", "with_qk", "=", "False", ")", ":", "\n", "    ", "'''\n    Applies multihead attention.\n    \n    Args:\n        queries: A 3d tensor with shape of [N, T_q, C_q].\n        keys: A 3d tensor with shape of [N, T_k, C_k].\n        num_units: A scalar. Attention size.\n        dropout_rate: A floating point number.\n        is_training: Boolean. Controller of mechanism for dropout.\n        causality: Boolean. If true, units that reference the future are masked. \n        num_heads: An int. Number of heads.\n        scope: Optional scope for `variable_scope`.\n        reuse: Boolean, whether to reuse the weights of a previous layer\n          by the same name.\n        \n    Returns\n        A 3d tensor with shape of (N, T_q, C)  \n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "# Set the fall back option for num_units", "\n", "        ", "if", "num_units", "is", "None", ":", "\n", "            ", "num_units", "=", "queries", ".", "get_shape", "(", ")", ".", "as_list", "[", "-", "1", "]", "\n", "\n", "# Linear projections", "\n", "# Q = tf.layers.dense(queries, num_units, activation=tf.nn.relu) # (N, T_q, C)", "\n", "# K = tf.layers.dense(keys, num_units, activation=tf.nn.relu) # (N, T_k, C)", "\n", "# V = tf.layers.dense(keys, num_units, activation=tf.nn.relu) # (N, T_k, C)", "\n", "", "Q", "=", "tf", ".", "layers", ".", "dense", "(", "queries", ",", "num_units", ",", "activation", "=", "None", ")", "# (N, T_q, C)", "\n", "K", "=", "tf", ".", "layers", ".", "dense", "(", "keys", ",", "num_units", ",", "activation", "=", "None", ")", "# (N, T_k, C)", "\n", "V", "=", "tf", ".", "layers", ".", "dense", "(", "keys", ",", "num_units", ",", "activation", "=", "None", ")", "# (N, T_k, C)", "\n", "\n", "# Split and concat", "\n", "Q_", "=", "tf", ".", "concat", "(", "tf", ".", "split", "(", "Q", ",", "num_heads", ",", "axis", "=", "2", ")", ",", "axis", "=", "0", ")", "# (h*N, T_q, C/h) ", "\n", "K_", "=", "tf", ".", "concat", "(", "tf", ".", "split", "(", "K", ",", "num_heads", ",", "axis", "=", "2", ")", ",", "axis", "=", "0", ")", "# (h*N, T_k, C/h) ", "\n", "V_", "=", "tf", ".", "concat", "(", "tf", ".", "split", "(", "V", ",", "num_heads", ",", "axis", "=", "2", ")", ",", "axis", "=", "0", ")", "# (h*N, T_k, C/h) ", "\n", "\n", "# Multiplication", "\n", "outputs", "=", "tf", ".", "matmul", "(", "Q_", ",", "tf", ".", "transpose", "(", "K_", ",", "[", "0", ",", "2", ",", "1", "]", ")", ")", "# (h*N, T_q, T_k)", "\n", "\n", "# Scale", "\n", "outputs", "=", "outputs", "/", "(", "K_", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "**", "0.5", ")", "\n", "\n", "# Key Masking", "\n", "key_masks", "=", "tf", ".", "sign", "(", "tf", ".", "abs", "(", "tf", ".", "reduce_sum", "(", "keys", ",", "axis", "=", "-", "1", ")", ")", ")", "# (N, T_k)", "\n", "key_masks", "=", "tf", ".", "tile", "(", "key_masks", ",", "[", "num_heads", ",", "1", "]", ")", "# (h*N, T_k)", "\n", "key_masks", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "key_masks", ",", "1", ")", ",", "[", "1", ",", "tf", ".", "shape", "(", "queries", ")", "[", "1", "]", ",", "1", "]", ")", "# (h*N, T_q, T_k)", "\n", "\n", "paddings", "=", "tf", ".", "ones_like", "(", "outputs", ")", "*", "(", "-", "2", "**", "32", "+", "1", ")", "\n", "outputs", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "key_masks", ",", "0", ")", ",", "paddings", ",", "outputs", ")", "# (h*N, T_q, T_k)", "\n", "\n", "# Causality = Future blinding", "\n", "if", "causality", ":", "\n", "            ", "diag_vals", "=", "tf", ".", "ones_like", "(", "outputs", "[", "0", ",", ":", ",", ":", "]", ")", "# (T_q, T_k)", "\n", "try", ":", "\n", "                ", "tril", "=", "tf", ".", "contrib", ".", "linalg", ".", "LinearOperatorLowerTriangular", "(", "diag_vals", ")", ".", "to_dense", "(", ")", "# (T_q, T_k)", "\n", "", "except", ":", "\n", "                ", "tril", "=", "tf", ".", "contrib", ".", "linalg", ".", "LinearOperatorTriL", "(", "diag_vals", ")", ".", "to_dense", "(", ")", "# (T_q, T_k)", "\n", "", "masks", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tril", ",", "0", ")", ",", "[", "tf", ".", "shape", "(", "outputs", ")", "[", "0", "]", ",", "1", ",", "1", "]", ")", "# (h*N, T_q, T_k)", "\n", "\n", "paddings", "=", "tf", ".", "ones_like", "(", "masks", ")", "*", "(", "-", "2", "**", "32", "+", "1", ")", "\n", "outputs", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "masks", ",", "0", ")", ",", "paddings", ",", "outputs", ")", "# (h*N, T_q, T_k)", "\n", "\n", "# Activation", "\n", "", "outputs", "=", "tf", ".", "nn", ".", "softmax", "(", "outputs", ")", "# (h*N, T_q, T_k)", "\n", "\n", "# Query Masking", "\n", "query_masks", "=", "tf", ".", "sign", "(", "tf", ".", "abs", "(", "tf", ".", "reduce_sum", "(", "queries", ",", "axis", "=", "-", "1", ")", ")", ")", "# (N, T_q)", "\n", "query_masks", "=", "tf", ".", "tile", "(", "query_masks", ",", "[", "num_heads", ",", "1", "]", ")", "# (h*N, T_q)", "\n", "query_masks", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "query_masks", ",", "-", "1", ")", ",", "[", "1", ",", "1", ",", "tf", ".", "shape", "(", "keys", ")", "[", "1", "]", "]", ")", "# (h*N, T_q, T_k)", "\n", "outputs", "*=", "query_masks", "# broadcasting. (N, T_q, C)", "\n", "\n", "# Dropouts", "\n", "outputs", "=", "tf", ".", "nn", ".", "dropout", "(", "outputs", ",", "keep_prob", "=", "dropout_keep_prob", ")", "\n", "\n", "# Weighted sum", "\n", "outputs", "=", "tf", ".", "matmul", "(", "outputs", ",", "V_", ")", "# ( h*N, T_q, C/h)", "\n", "\n", "# Restore shape", "\n", "outputs", "=", "tf", ".", "concat", "(", "tf", ".", "split", "(", "outputs", ",", "num_heads", ",", "axis", "=", "0", ")", ",", "axis", "=", "2", ")", "# (N, T_q, C)", "\n", "\n", "# Residual connection", "\n", "outputs", "+=", "queries", "\n", "\n", "# Normalize", "\n", "#outputs = normalize(outputs) # (N, T_q, C)", "\n", "\n", "", "if", "with_qk", ":", "\n", "        ", "return", "Q", ",", "K", "\n", "", "else", ":", "\n", "        ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.base.feedforward": [[233, 272], ["tensorflow.variable_scope", "tensorflow.layers.conv1d", "tensorflow.nn.dropout", "tensorflow.layers.conv1d", "tensorflow.nn.dropout"], "function", ["None"], ["", "", "def", "feedforward", "(", "inputs", ",", "\n", "num_units", "=", "[", "2048", ",", "512", "]", ",", "\n", "scope", "=", "\"multihead_attention\"", ",", "\n", "dropout_keep_prob", "=", "1.0", ",", "\n", "reuse", "=", "None", ")", ":", "\n", "    ", "'''\n    Point-wise feed forward net.\n    \n    Args:\n      inputs: A 3d tensor with shape of [N, T, C].\n      num_units: A list of two integers.\n      scope: Optional scope for `variable_scope`.\n      reuse: Boolean, whether to reuse the weights of a previous layer\n        by the same name.\n        \n    Returns:\n      A 3d tensor with the same shape and dtype as inputs\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "# Inner layer", "\n", "        ", "params", "=", "{", "\"inputs\"", ":", "inputs", ",", "\"filters\"", ":", "num_units", "[", "0", "]", ",", "\"kernel_size\"", ":", "1", ",", "\n", "\"activation\"", ":", "tf", ".", "nn", ".", "relu", ",", "\"use_bias\"", ":", "True", "}", "\n", "outputs", "=", "tf", ".", "layers", ".", "conv1d", "(", "**", "params", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "dropout", "(", "outputs", ",", "keep_prob", "=", "dropout_keep_prob", ")", "\n", "#outputs = tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))", "\n", "# Readout layer", "\n", "params", "=", "{", "\"inputs\"", ":", "outputs", ",", "\"filters\"", ":", "num_units", "[", "1", "]", ",", "\"kernel_size\"", ":", "1", ",", "\n", "\"activation\"", ":", "None", ",", "\"use_bias\"", ":", "True", "}", "\n", "outputs", "=", "tf", ".", "layers", ".", "conv1d", "(", "**", "params", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "dropout", "(", "outputs", ",", "keep_prob", "=", "dropout_keep_prob", ")", "\n", "#outputs = tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))", "\n", "\n", "# Residual connection", "\n", "outputs", "+=", "inputs", "\n", "\n", "# Normalize", "\n", "#outputs = normalize(outputs)", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.eval.Evaluation.__init__": [[9, 13], ["eval.Evaluation.clear"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.eval.Evaluation.clear"], ["def", "__init__", "(", "self", ",", "ks", "=", "[", "1", ",", "5", ",", "10", ",", "20", "]", ",", "ndcg_cutoff", "=", "20", ")", ":", "\n", "        ", "self", ".", "k", "=", "ks", "\n", "self", ".", "ndcg_cutoff", "=", "ndcg_cutoff", "\n", "self", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.eval.Evaluation.clear": [[14, 19], ["numpy.zeros_like", "numpy.zeros_like"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "P", "=", "np", ".", "zeros_like", "(", "self", ".", "k", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "R", "=", "np", ".", "zeros_like", "(", "self", ".", "k", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "MAP", "=", "[", "]", "\n", "self", ".", "NDCG", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.eval.Evaluation.eval": [[20, 63], ["numpy.zeros_like", "enumerate", "enumerate", "float", "eval.Evaluation.MAP.append", "numpy.zeros_like", "enumerate", "float", "eval.Evaluation.NDCG.append", "float", "len", "enumerate", "len", "float", "enumerate", "ranking.get", "len", "numpy.log2"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.log2"], ["", "def", "eval", "(", "self", ",", "user_id", ",", "target", ",", "prediction", ")", ":", "\n", "        ", "'''\n        :param user_id: int\n        :param target: list of int\n        :param prediction:  list of int\n        :return:\n        '''", "\n", "ranking", "=", "{", "}", "\n", "num_hits", "=", "0.", "\n", "ap_score", "=", "0.", "\n", "\n", "P", "=", "np", ".", "zeros_like", "(", "self", ".", "k", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "prediction", ")", ":", "\n", "            ", "ranking", "[", "item", "]", "=", "idx", "+", "1", "\n", "if", "item", "in", "target", ":", "\n", "                ", "for", "i", ",", "k", "in", "enumerate", "(", "self", ".", "k", ")", ":", "\n", "                    ", "if", "idx", "<", "k", ":", "\n", "                        ", "P", "[", "i", "]", "+=", "1.0", "# the predicted item is in top-k (Precise@K)", "\n", "", "", "", "if", "item", "in", "target", "and", "item", "not", "in", "prediction", "[", ":", "idx", "]", ":", "\n", "                ", "num_hits", "+=", "1.0", "\n", "ap_score", "+=", "num_hits", "/", "(", "idx", "+", "1.0", ")", "\n", "\n", "", "", "for", "i", ",", "k", "in", "enumerate", "(", "self", ".", "k", ")", ":", "\n", "            ", "P", "[", "i", "]", "/=", "float", "(", "k", ")", "# Precise@K should be divided by K", "\n", "\n", "", "self", ".", "P", "=", "self", ".", "P", "+", "P", "\n", "\n", "ap_score", "/=", "float", "(", "len", "(", "prediction", ")", ")", "\n", "self", ".", "MAP", ".", "append", "(", "ap_score", ")", "\n", "\n", "R", "=", "np", ".", "zeros_like", "(", "self", ".", "k", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ndcg", "=", "0", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "target", ")", ":", "\n", "            ", "for", "i", ",", "k", "in", "enumerate", "(", "self", ".", "k", ")", ":", "\n", "                ", "if", "item", "in", "prediction", "[", ":", "k", "]", ":", "\n", "                    ", "R", "[", "i", "]", "+=", "1", "# the target is in top-k prediction (Recall@K)", "\n", "", "", "if", "ranking", ".", "get", "(", "item", ",", "1e9", ")", "<=", "self", ".", "ndcg_cutoff", ":", "\n", "                ", "ndcg", "+=", "1.0", "/", "np", ".", "log2", "(", "1.0", "+", "ranking", "[", "item", "]", ")", "\n", "", "", "ndcg", "/=", "float", "(", "len", "(", "target", ")", ")", "\n", "self", ".", "NDCG", ".", "append", "(", "ndcg", ")", "\n", "\n", "R", "=", "R", "/", "float", "(", "len", "(", "target", ")", ")", "# Recall@K should be divided by number of targets", "\n", "self", ".", "R", "=", "self", ".", "R", "+", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.eval.Evaluation.result": [[64, 78], ["len", "print", "print", "print", "enumerate", "enumerate", "print", "float", "float", "print", "print", "numpy.mean", "numpy.mean"], "methods", ["None"], ["", "def", "result", "(", "self", ")", ":", "\n", "        ", "num_data", "=", "len", "(", "self", ".", "MAP", ")", "\n", "self", ".", "P", "=", "self", ".", "P", "/", "float", "(", "num_data", ")", "\n", "self", ".", "R", "=", "self", ".", "R", "/", "float", "(", "num_data", ")", "\n", "print", "(", "\"==========================================\"", ")", "\n", "print", "(", "\"NDCG@%d = %8.4f\"", "%", "(", "self", ".", "ndcg_cutoff", ",", "np", ".", "mean", "(", "self", ".", "NDCG", ")", ")", ")", "\n", "print", "(", "\"MAP  = %8.4f\"", "%", "np", ".", "mean", "(", "self", ".", "MAP", ")", ")", "\n", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "self", ".", "k", ")", ":", "\n", "            ", "print", "(", "\"Precise @%2d = %6.4f\"", "%", "(", "k", ",", "self", ".", "P", "[", "i", "]", ")", ")", "\n", "\n", "", "for", "i", ",", "k", "in", "enumerate", "(", "self", ".", "k", ")", ":", "\n", "            ", "print", "(", "\"Recall @%2d  = %6.4f\"", "%", "(", "k", ",", "self", ".", "R", "[", "i", "]", ")", ")", "\n", "", "print", "(", "\"==========================================\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.train.evaluate": [[77, 93], ["sess.run"], "function", ["None"], ["def", "evaluate", "(", "source", ",", "sess", ")", ":", "\n", "    ", "total_hit_k", "=", "0.0", "\n", "total_ndcg_k", "=", "0.0", "\n", "count", "=", "0.0", "\n", "for", "batch", "in", "source", ":", "\n", "        ", "feed_dict", "=", "{", "model", ".", "inp", ":", "batch", "[", "1", "]", ",", "model", ".", "dropout", ":", "0.", "}", "\n", "feed_dict", "[", "model", ".", "pos", "]", "=", "batch", "[", "2", "]", "\n", "hit", ",", "ndcg", ",", "n_target", "=", "sess", ".", "run", "(", "[", "model", ".", "hit_at_k", ",", "model", ".", "ndcg_at_k", ",", "model", ".", "num_target", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "count", "+=", "n_target", "\n", "total_hit_k", "+=", "hit", "\n", "total_ndcg_k", "+=", "ndcg", "\n", "\n", "", "val_hit", "=", "total_hit_k", "/", "count", "\n", "val_ndcg", "=", "total_ndcg_k", "/", "count", "\n", "\n", "return", "[", "val_hit", ",", "val_ndcg", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.train.main": [[94, 153], ["tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.global_variables_initializer", "tf.Session.run", "time.time", "print", "train_sampler.close", "print", "train_sampler.next_batch", "numpy.array", "numpy.array", "numpy.array", "tf.Session.run", "print", "train_sampler.close", "exit", "print", "sys.stdout.flush", "time.time", "train.evaluate", "all_val_hit.append", "print", "print", "print", "sys.stdout.flush", "time.time", "str", "time.time", "max", "model.saver.save", "print", "sys.stdout.flush"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.sampler.Sampler.close", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.sampler.Sampler.next_batch", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.sampler.Sampler.close", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.evaluate"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "lr", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "all_val_hit", "=", "[", "-", "1", "]", "\n", "early_stop_cn", "=", "0", "\n", "step_count", "=", "0", "\n", "train_loss_l", "=", "0.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Start training...'", ")", "\n", "try", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "cur_batch", "=", "train_sampler", ".", "next_batch", "(", ")", "\n", "inp", "=", "np", ".", "array", "(", "cur_batch", "[", "1", "]", ")", "\n", "feed_dict", "=", "{", "model", ".", "inp", ":", "inp", ",", "model", ".", "lr", ":", "lr", ",", "model", ".", "dropout", ":", "args", ".", "dropout", "}", "\n", "feed_dict", "[", "model", ".", "pos", "]", "=", "np", ".", "array", "(", "cur_batch", "[", "2", "]", ")", "\n", "feed_dict", "[", "model", ".", "neg", "]", "=", "np", ".", "array", "(", "cur_batch", "[", "3", "]", ")", "\n", "_", ",", "train_loss", "=", "sess", ".", "run", "(", "[", "model", ".", "train_op", ",", "model", ".", "loss", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "train_loss_l", "+=", "train_loss", "\n", "step_count", "+=", "1", "\n", "if", "step_count", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "                ", "cur_loss", "=", "train_loss_l", "/", "args", ".", "log_interval", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "'| Totol step {:10d} | lr {:02.5f} | ms/batch {:5.2f} | loss {:5.3f}'", ".", "format", "(", "\n", "step_count", ",", "lr", ",", "elapsed", "*", "1000", "/", "args", ".", "log_interval", ",", "cur_loss", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "train_loss_l", "=", "0.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "if", "step_count", "%", "args", ".", "eval_interval", "==", "0", ":", "\n", "                ", "val_hit", ",", "val_ndcg", "=", "evaluate", "(", "val_data", ",", "sess", ")", "\n", "all_val_hit", ".", "append", "(", "val_hit", ")", "\n", "print", "(", "'-'", "*", "90", ")", "\n", "print", "(", "'| End of step {:10d} | valid hit@20 {:8.5f} | valid ndcg@20 {:8.5f}'", ".", "format", "(", "\n", "step_count", ",", "val_hit", ",", "val_ndcg", ")", ")", "\n", "print", "(", "'='", "*", "90", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "if", "all_val_hit", "[", "-", "1", "]", "<=", "all_val_hit", "[", "-", "2", "]", ":", "\n", "                    ", "lr", "/=", "2.", "\n", "lr", "=", "max", "(", "lr", ",", "1e-6", ")", "\n", "early_stop_cn", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "early_stop_cn", "=", "0", "\n", "model", ".", "saver", ".", "save", "(", "sess", ",", "checkpoint_dir", "+", "'/model.ckpt'", ")", "\n", "", "if", "early_stop_cn", "==", "3", ":", "\n", "                    ", "print", "(", "'Validation hit decreases in three consecutive epochs. Stop Training!'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "break", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "str", "(", "e", ")", ")", "\n", "train_sampler", ".", "close", "(", ")", "\n", "exit", "(", "1", ")", "\n", "", "train_sampler", ".", "close", "(", ")", "\n", "print", "(", "'Done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.sampler.Sampler.__init__": [[73, 89], ["multiprocessing.Queue", "range", "sampler.Sampler.processors.append", "sampler.Sampler.processors[].start", "int", "multiprocessing.Process", "numpy.random.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "n_items", ",", "n_users", ",", "batch_size", "=", "128", ",", "max_len", "=", "20", ",", "neg_size", "=", "10", ",", "n_workers", "=", "10", ",", "neg_method", "=", "'rand'", ")", ":", "\n", "        ", "self", ".", "result_queue", "=", "Queue", "(", "maxsize", "=", "int", "(", "2e5", ")", ")", "\n", "self", ".", "processors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_workers", ")", ":", "\n", "            ", "self", ".", "processors", ".", "append", "(", "\n", "Process", "(", "target", "=", "sample_function", ",", "args", "=", "(", "data", ",", "\n", "n_items", ",", "\n", "n_users", ",", "\n", "batch_size", ",", "\n", "max_len", ",", "\n", "neg_size", ",", "\n", "self", ".", "result_queue", ",", "\n", "np", ".", "random", ".", "randint", "(", "2e9", ")", ",", "\n", "neg_method", ")", ")", ")", "\n", "self", ".", "processors", "[", "-", "1", "]", ".", "daemon", "=", "True", "\n", "self", ".", "processors", "[", "-", "1", "]", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.sampler.Sampler.next_batch": [[90, 92], ["sampler.Sampler.result_queue.get"], "methods", ["None"], ["", "", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "result_queue", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.sampler.Sampler.close": [[93, 97], ["p.terminate", "p.join"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "processors", ":", "\n", "            ", "p", ".", "terminate", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.sampler.random_neg": [[15, 28], ["set", "range", "list", "numpy.random.randint", "set.add", "numpy.random.randint"], "function", ["None"], ["def", "random_neg", "(", "pos", ",", "n", ",", "s", ")", ":", "\n", "    ", "'''\n    p: positive one\n    n: number of items\n    s: size of samples.\n    '''", "\n", "neg", "=", "set", "(", ")", "\n", "for", "_", "in", "range", "(", "s", ")", ":", "\n", "        ", "t", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "n", "+", "1", ")", "\n", "while", "t", "in", "pos", "or", "t", "in", "neg", ":", "\n", "            ", "t", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "n", "+", "1", ")", "\n", "", "neg", ".", "add", "(", "t", ")", "\n", "", "return", "list", "(", "neg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.sampler.sample_function": [[29, 71], ["numpy.array", "numpy.random.seed", "numpy.random.choice", "str", "numpy.zeros", "enumerate", "numpy.zeros", "numpy.zeros", "min", "range", "range", "result_queue.put", "len", "numpy.sum", "len", "numpy.random.randint", "one_batch.append", "list", "range", "range", "len", "sampler.random_neg", "sampler.sample_function.sample"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.sampler.random_neg", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.sample"], ["", "def", "sample_function", "(", "data", ",", "n_items", ",", "n_users", ",", "batch_size", ",", "max_len", ",", "neg_size", ",", "result_queue", ",", "SEED", ",", "neg_method", "=", "'rand'", ")", ":", "\n", "    ", "'''\n    data: list of train data, key: user, value: a set of all user's clicks.\n    tensors: list of train tensors, each element of list is also a list.\n    masks: list of train masks, each element of list is also a list.\n    batch_size: number of samples in a batch.\n    neg_size: number of negative samples.\n    '''", "\n", "num_samples", "=", "np", ".", "array", "(", "[", "len", "(", "data", "[", "str", "(", "u", ")", "]", ")", "for", "u", "in", "range", "(", "1", ",", "n_users", "+", "1", ")", "]", ")", "\n", "prob_", "=", "num_samples", "/", "(", "1.0", "*", "np", ".", "sum", "(", "num_samples", ")", ")", "\n", "def", "sample", "(", ")", ":", "\n", "# sample a user based on behavior frequency.", "\n", "        ", "user", "=", "np", ".", "random", ".", "choice", "(", "a", "=", "range", "(", "1", ",", "1", "+", "n_users", ")", ",", "p", "=", "prob_", ")", "\n", "u", "=", "str", "(", "user", ")", "\n", "\n", "# sample a slice from user u randomly. ", "\n", "if", "len", "(", "data", "[", "u", "]", ")", "<=", "max_len", ":", "\n", "            ", "idx", "=", "0", "\n", "", "else", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "data", "[", "u", "]", ")", "-", "max_len", "+", "1", ")", "\n", "", "seq", "=", "np", ".", "zeros", "(", "[", "max_len", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", ",", "itemid", "in", "enumerate", "(", "data", "[", "u", "]", "[", "idx", ":", "idx", "+", "max_len", "]", ")", ":", "\n", "            ", "seq", "[", "i", "]", "=", "itemid", "\n", "\n", "", "pos", "=", "np", ".", "zeros", "(", "[", "max_len", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "neg", "=", "np", ".", "zeros", "(", "[", "max_len", ",", "neg_size", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "l", "=", "len", "(", "data", "[", "u", "]", ")", "-", "idx", "-", "1", "\n", "l", "=", "min", "(", "l", ",", "max_len", ")", "\n", "for", "j", "in", "range", "(", "l", ")", ":", "\n", "            ", "pos", "[", "j", "]", "=", "data", "[", "u", "]", "[", "idx", "+", "1", "+", "j", "]", "\n", "if", "neg_method", "==", "'rand'", ":", "\n", "                ", "neg", "[", "j", ",", ":", "]", "=", "random_neg", "(", "[", "pos", "[", "j", "]", "]", ",", "n_items", ",", "neg_size", ")", "\n", "", "else", ":", "# Currently we only support random negative samples.", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "return", "(", "user", ",", "seq", ",", "pos", ",", "neg", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "SEED", ")", "\n", "while", "True", ":", "\n", "        ", "one_batch", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "one_batch", ".", "append", "(", "sample", "(", ")", ")", "\n", "", "result_queue", ".", "put", "(", "list", "(", "zip", "(", "*", "one_batch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.test.evaluate_subsequent": [[67, 83], ["eval.Evaluation", "source.keys", "eval.Evaluation.result", "int", "min", "sess.run", "prediction.flatten.flatten", "range", "len", "eval.Evaluation.eval", "numpy.argsort", "int"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.eval.Evaluation.result", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.eval.Evaluation.eval"], ["def", "evaluate_subsequent", "(", "source", ",", "sess", ")", ":", "\n", "    ", "EV", "=", "Evaluation", "(", ")", "\n", "for", "u", "in", "source", ".", "keys", "(", ")", ":", "\n", "        ", "itemids", "=", "source", "[", "u", "]", "\n", "uid", "=", "int", "(", "u", ")", "\n", "l", "=", "min", "(", "len", "(", "itemids", ")", ",", "max_test_len", ")", "\n", "if", "l", "<", "2", ":", "\n", "            ", "continue", "\n", "", "feed_dict", "=", "{", "model", ".", "inp", ":", "[", "itemids", "[", ":", "l", "-", "1", "]", "]", ",", "model", ".", "dropout", ":", "0", "}", "\n", "prediction", "=", "sess", ".", "run", "(", "model", ".", "prediction", ",", "feed_dict", "=", "feed_dict", ")", "\n", "prediction", "=", "prediction", ".", "flatten", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "l", ")", ":", "\n", "            ", "i_pred", "=", "prediction", "[", "(", "i", "-", "1", ")", "*", "(", "n_items", "+", "1", ")", ":", "i", "*", "(", "n_items", "+", "1", ")", "]", "\n", "rank", "=", "np", ".", "argsort", "(", "-", "i_mi", "[", "1", ":", "]", ")", "+", "1", "\n", "EV", ".", "eval", "(", "int", "(", "u", ")", ",", "itemids", "[", "i", ":", "l", "]", ",", "rank", "[", ":", "20", "]", ")", "\n", "", "", "EV", ".", "result", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.test.evaluate": [[84, 100], ["sess.run"], "function", ["None"], ["", "def", "evaluate", "(", "source", ",", "sess", ")", ":", "\n", "    ", "total_hit_k", "=", "0.0", "\n", "total_ndcg_k", "=", "0.0", "\n", "count", "=", "0.0", "\n", "for", "batch", "in", "source", ":", "\n", "        ", "feed_dict", "=", "{", "model", ".", "inp", ":", "batch", "[", "1", "]", ",", "model", ".", "dropout", ":", "0.", "}", "\n", "feed_dict", "[", "model", ".", "pos", "]", "=", "batch", "[", "2", "]", "\n", "hit", ",", "ndcg", ",", "n_target", "=", "sess", ".", "run", "(", "[", "model", ".", "hit_at_k", ",", "model", ".", "ndcg_at_k", ",", "model", ".", "num_target", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "count", "+=", "n_target", "\n", "total_hit_k", "+=", "hit", "\n", "total_ndcg_k", "+=", "ndcg", "\n", "\n", "", "val_hit", "=", "total_hit_k", "/", "count", "\n", "val_ndcg", "=", "total_ndcg_k", "/", "count", "\n", "\n", "return", "[", "val_hit", ",", "val_ndcg", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.test.main": [[101, 114], ["tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.train.get_checkpoint_state", "test.evaluate", "print", "model.saver.restore", "print", "print"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.evaluate", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.restore"], ["", "def", "main", "(", ")", ":", "\n", "    ", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "checkpoint_dir", ")", "\n", "if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "        ", "model", ".", "saver", ".", "restore", "(", "sess", ",", "'{}/{}'", ".", "format", "(", "checkpoint_dir", ",", "'model.ckpt'", ")", ")", "\n", "print", "(", "'Restore model successfully'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Restore model failed!!!!!'", ")", "\n", "\n", "", "test_hit", ",", "test_ndcg", "=", "evaluate", "(", "test_data_per_step", ",", "sess", ")", "\n", "print", "(", "'Step-wise test :\\nRecall@20 {:8.5f} | Ndcg@20 {:8.5f}'", ".", "format", "(", "test_hit", ",", "test_ndcg", ")", ")", "\n", "#print('Subsequent as targets:\\n')", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.model.NeuralSeqRecommender.__init__": [[19, 26], ["model.NeuralSeqRecommender._build", "tensorflow.train.Saver"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.model.FPMC._build"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "n_items", ",", "n_users", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "n_items", "=", "n_items", "\n", "self", ".", "n_users", "=", "n_users", "\n", "self", ".", "_build", "(", ")", "\n", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.model.NeuralSeqRecommender._build": [[27, 110], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder_with_default", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.expand_dims", "model.NeuralSeqRecommender.net", "tensorflow.reshape", "tensorflow.shape", "tensorflow.reshape", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.tile", "tensorflow.matmul", "tensorflow.get_collection", "sum", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.compute_gradients", "tensorflow.train.AdamOptimizer.apply_gradients", "model.NeuralSeqRecommender._metric_at_k", "tensorflow.to_float", "base.TemporalConvNet", "tensorflow.to_float", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.squeeze", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.not_equal", "base.LSTMNet", "tensorflow.not_equal", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.concat", "tensorflow.concat", "tensorflow.nn.softmax", "tensorflow.clip_by_value", "base.TransformerNet", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.log", "tensorflow.log", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.model.FPMC._metric_at_k"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "inp", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "None", ")", ",", "name", "=", "'inp'", ")", "\n", "self", ".", "pos", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "None", ")", ",", "name", "=", "'pos'", ")", "\n", "self", ".", "neg", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "None", ",", "self", ".", "args", ".", "neg_size", ")", ",", "name", "=", "'neg'", ")", "\n", "\n", "self", ".", "lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "None", ",", "name", "=", "'lr'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "placeholder_with_default", "(", "0.", ",", "shape", "=", "(", ")", ")", "\n", "self", ".", "item_embedding", "=", "item_embedding", "=", "tf", ".", "get_variable", "(", "'item_embedding'", ",", "shape", "=", "(", "self", ".", "n_items", "+", "1", ",", "self", ".", "args", ".", "emsize", ")", ",", "dtype", "=", "tf", ".", "float32", ",", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "self", ".", "args", ".", "l2_reg", ")", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "\n", "input_item", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "item_embedding", ",", "self", ".", "inp", ")", "\n", "mask", "=", "tf", ".", "expand_dims", "(", "tf", ".", "to_float", "(", "tf", ".", "not_equal", "(", "self", ".", "inp", ",", "0", ")", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "args", ".", "model", "==", "'tcn'", ":", "\n", "            ", "num_channels", "=", "[", "self", ".", "args", ".", "nhid", "]", "*", "(", "self", ".", "args", ".", "levels", "-", "1", ")", "+", "[", "self", ".", "args", ".", "emsize", "]", "\n", "self", ".", "net", "=", "TemporalConvNet", "(", "num_channels", ",", "stride", "=", "1", ",", "kernel_size", "=", "self", ".", "args", ".", "ksize", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "", "elif", "self", ".", "args", ".", "model", "==", "'rnn'", ":", "\n", "            ", "self", ".", "net", "=", "LSTMNet", "(", "layers", "=", "self", ".", "args", ".", "levels", ",", "hidden_units", "=", "self", ".", "args", ".", "nhid", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "", "elif", "self", ".", "args", ".", "model", "==", "'transformer'", ":", "\n", "            ", "self", ".", "net", "=", "TransformerNet", "(", "self", ".", "args", ".", "emsize", ",", "self", ".", "args", ".", "levels", ",", "self", ".", "args", ".", "num_heads", ",", "self", ".", "args", ".", "seq_len", ",", "dropout_rate", "=", "self", ".", "dropout", ",", "pos_fixed", "=", "self", ".", "args", ".", "pos_fixed", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "outputs", "=", "self", ".", "net", "(", "input_item", ",", "mask", ")", "\n", "outputs", "*=", "mask", "\n", "ct_vec", "=", "tf", ".", "reshape", "(", "outputs", ",", "(", "-", "1", ",", "self", ".", "args", ".", "emsize", ")", ")", "\n", "outputs_shape", "=", "tf", ".", "shape", "(", "outputs", ")", "\n", "\n", "self", ".", "total_loss", "=", "0.", "\n", "\n", "self", ".", "istarget", "=", "istarget", "=", "tf", ".", "reshape", "(", "tf", ".", "to_float", "(", "tf", ".", "not_equal", "(", "self", ".", "pos", ",", "0", ")", ")", ",", "[", "-", "1", "]", ")", "\n", "\n", "_pos_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embedding", ",", "self", ".", "pos", ")", "\n", "pos_emb", "=", "tf", ".", "reshape", "(", "_pos_emb", ",", "(", "-", "1", ",", "self", ".", "args", ".", "emsize", ")", ")", "\n", "_neg_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embedding", ",", "self", ".", "neg", ")", "\n", "neg_emb", "=", "tf", ".", "reshape", "(", "_neg_emb", ",", "(", "-", "1", ",", "self", ".", "args", ".", "neg_size", ",", "self", ".", "args", ".", "emsize", ")", ")", "\n", "\n", "temp_vec_neg", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "ct_vec", ",", "[", "1", "]", ")", ",", "[", "1", ",", "self", ".", "args", ".", "neg_size", ",", "1", "]", ")", "\n", "\n", "if", "self", ".", "args", ".", "loss", "==", "'ns'", ":", "\n", "            ", "assert", "self", ".", "args", ".", "neg_size", "==", "1", "\n", "pos_logit", "=", "tf", ".", "reduce_sum", "(", "ct_vec", "*", "pos_emb", ",", "-", "1", ")", "\n", "neg_logit", "=", "tf", ".", "squeeze", "(", "tf", ".", "reduce_sum", "(", "temp_vec_neg", "*", "neg_emb", ",", "-", "1", ")", ",", "1", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "\n", "-", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "pos_logit", ")", "+", "1e-24", ")", "*", "istarget", "-", "tf", ".", "log", "(", "1", "-", "tf", ".", "sigmoid", "(", "neg_logit", ")", "+", "1e-24", ")", "*", "istarget", ")", "/", "tf", ".", "reduce_sum", "(", "istarget", ")", "\n", "", "elif", "self", ".", "args", ".", "loss", "==", "'sampled_sm'", ":", "\n", "            ", "pos_logit", "=", "tf", ".", "reduce_sum", "(", "ct_vec", "*", "pos_emb", ",", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "neg_logit", "=", "tf", ".", "reduce_sum", "(", "temp_vec_neg", "*", "neg_emb", ",", "-", "1", ")", "\n", "label_1", "=", "tf", ".", "ones_like", "(", "pos_logit", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "label_0", "=", "tf", ".", "zeros_like", "(", "neg_logit", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "labels", "=", "tf", ".", "concat", "(", "[", "label_1", ",", "label_0", "]", ",", "-", "1", ")", "\n", "logit", "=", "tf", ".", "concat", "(", "[", "pos_logit", ",", "neg_logit", "]", ",", "-", "1", ")", "\n", "softmax_logit", "=", "tf", ".", "nn", ".", "softmax", "(", "logit", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "-", "labels", "*", "tf", ".", "log", "(", "softmax_logit", "+", "1e-24", ")", "-", "(", "1.", "-", "labels", ")", "*", "tf", ".", "log", "(", "1.", "-", "softmax_logit", "+", "1e-24", ")", ",", "-", "1", ")", "*", "istarget", ")", "/", "tf", ".", "reduce_sum", "(", "istarget", ")", "\n", "", "elif", "self", ".", "args", ".", "loss", "==", "'full_sm'", ":", "\n", "            ", "full_logits", "=", "tf", ".", "matmul", "(", "ct_vec", ",", "self", ".", "item_embedding", ",", "transpose_b", "=", "True", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "labels", "=", "tf", ".", "reshape", "(", "self", ".", "pos", ",", "[", "-", "1", "]", ")", ",", "logits", "=", "full_logits", ")", "*", "istarget", ")", "/", "tf", ".", "reduce_sum", "(", "istarget", ")", "\n", "\n", "", "full_logits", "=", "tf", ".", "matmul", "(", "ct_vec", ",", "self", ".", "item_embedding", ",", "transpose_b", "=", "True", ")", "\n", "self", ".", "prediction", "=", "full_logits", "\n", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "total_loss", "+=", "loss", "\n", "reg_losses", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ")", "\n", "self", ".", "total_loss", "+=", "sum", "(", "reg_losses", ")", "\n", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ")", "\n", "gvs", "=", "optimizer", ".", "compute_gradients", "(", "self", ".", "total_loss", ")", "\n", "capped_gvs", "=", "[", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "self", ".", "args", ".", "clip", ",", "self", ".", "args", ".", "clip", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "gvs", "]", "\n", "self", ".", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "capped_gvs", ")", "\n", "self", ".", "hit_at_k", ",", "self", ".", "ndcg_at_k", ",", "self", ".", "num_target", "=", "self", ".", "_metric_at_k", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.model.NeuralSeqRecommender._metric_at_k": [[112, 129], ["tensorflow.transpose", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.reshape", "tensorflow.nn.in_top_k", "tensorflow.cast", "tensorflow.reshape", "tensorflow.diag_part", "tensorflow.reduce_sum", "model.log2", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.embedding_lookup", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.log2"], ["", "def", "_metric_at_k", "(", "self", ",", "k", "=", "20", ")", ":", "\n", "        ", "prediction", "=", "self", ".", "prediction", "\n", "prediction_transposed", "=", "tf", ".", "transpose", "(", "prediction", ")", "\n", "labels", "=", "tf", ".", "reshape", "(", "self", ".", "pos", ",", "shape", "=", "(", "-", "1", ",", ")", ")", "\n", "pred_values", "=", "tf", ".", "expand_dims", "(", "tf", ".", "diag_part", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "prediction_transposed", ",", "labels", ")", ")", ",", "-", "1", ")", "\n", "tile_pred_values", "=", "tf", ".", "tile", "(", "pred_values", ",", "[", "1", ",", "self", ".", "n_items", "]", ")", "\n", "ranks", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "prediction", "[", ":", ",", "1", ":", "]", ">", "tile_pred_values", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "-", "1", ")", "+", "1", "\n", "\n", "istarget", "=", "tf", ".", "reshape", "(", "self", ".", "istarget", ",", "shape", "=", "(", "-", "1", ",", ")", ")", "\n", "ndcg", "=", "1.", "/", "(", "log2", "(", "1.0", "+", "ranks", ")", ")", "\n", "hit_at_k", "=", "tf", ".", "nn", ".", "in_top_k", "(", "prediction", ",", "labels", ",", "k", "=", "k", ")", "# also known as Recall@k", "\n", "hit_at_k", "=", "tf", ".", "cast", "(", "hit_at_k", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "istarget", "=", "tf", ".", "reshape", "(", "self", ".", "istarget", ",", "shape", "=", "(", "-", "1", ",", ")", ")", "\n", "hit_at_k", "*=", "istarget", "\n", "ndcg_at_k", "=", "ndcg", "*", "istarget", "*", "hit_at_k", "\n", "\n", "return", "(", "tf", ".", "reduce_sum", "(", "hit_at_k", ")", ",", "tf", ".", "reduce_sum", "(", "ndcg_at_k", ")", ",", "tf", ".", "reduce_sum", "(", "istarget", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.model.log2": [[13, 17], ["tensorflow.log", "tensorflow.log", "tensorflow.constant"], "function", ["None"], ["def", "log2", "(", "x", ")", ":", "\n", "    ", "numerator", "=", "tf", ".", "log", "(", "x", ")", "\n", "denominator", "=", "tf", ".", "log", "(", "tf", ".", "constant", "(", "2", ",", "dtype", "=", "numerator", ".", "dtype", ")", ")", "\n", "return", "numerator", "/", "denominator", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.utils.Dictionary.__init__": [[18, 22], ["collections.Counter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "item2idx", "=", "{", "}", "\n", "self", ".", "idx2item", "=", "[", "]", "\n", "self", ".", "counter", "=", "Counter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.utils.Dictionary.add_item": [[23, 25], ["None"], "methods", ["None"], ["", "def", "add_item", "(", "self", ",", "item", ")", ":", "\n", "        ", "self", ".", "counter", "[", "item", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.utils.Dictionary.prep_dict": [[26, 31], ["utils.Dictionary.idx2item.append", "len"], "methods", ["None"], ["", "def", "prep_dict", "(", "self", ")", ":", "\n", "        ", "for", "item", "in", "self", ".", "counter", ":", "\n", "            ", "if", "item", "not", "in", "self", ".", "item2idx", ":", "\n", "                ", "self", ".", "idx2item", ".", "append", "(", "item", ")", "\n", "self", ".", "item2idx", "[", "item", "]", "=", "len", "(", "self", ".", "idx2item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.utils.Dictionary.__len__": [[32, 34], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idx2item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.utils.Corpus.__init__": [[37, 42], ["utils.Dictionary", "utils.Corpus.dict.prep_dict", "utils.Corpus.dict.add_item"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.utils.Dictionary.prep_dict", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.utils.Dictionary.add_item"], ["    ", "def", "__init__", "(", "self", ",", "ItemId", ")", ":", "\n", "        ", "self", ".", "dict", "=", "Dictionary", "(", ")", "\n", "for", "item", "in", "ItemId", ":", "\n", "            ", "self", ".", "dict", ".", "add_item", "(", "item", ")", "\n", "", "self", ".", "dict", ".", "prep_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.utils.data_generator": [[43, 75], ["numpy.load", "numpy.load", "os.path.exists", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "utils.Corpus", "utils.Corpus", "numpy.save", "numpy.save", "[].apply().to_dict", "[].apply().to_dict", "[].apply().to_dict", "utils.prepare_data", "utils.prepare_data", "utils.prepare_data", "open", "json.load", "open", "json.load", "open", "json.load", "numpy.asarray", "numpy.asarray", "[].apply", "[].apply", "[].apply", "pd.read_csv.sort_values().groupby", "pd.read_csv.sort_values().groupby", "pd.read_csv.sort_values().groupby", "pd.read_csv.sort_values", "pd.read_csv.sort_values", "pd.read_csv.sort_values"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.utils.prepare_data", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.utils.prepare_data", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.utils.prepare_data"], ["", "", "def", "data_generator", "(", "args", ")", ":", "\n", "    ", "path_to_data", "=", "data_path", "+", "args", ".", "data", "+", "'/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_to_data", "+", "args", ".", "data", "+", "'_train_tr.json'", ")", ":", "\n", "        ", "tr_df", "=", "pd", ".", "read_csv", "(", "path_to_data", "+", "args", ".", "data", "+", "'_train_tr.txt'", ",", "sep", "=", "'\\t'", ")", "\n", "val_df", "=", "pd", ".", "read_csv", "(", "path_to_data", "+", "args", ".", "data", "+", "'_train_valid.txt'", ",", "sep", "=", "'\\t'", ")", "\n", "test_df", "=", "pd", ".", "read_csv", "(", "path_to_data", "+", "args", ".", "data", "+", "'_test.txt'", ",", "sep", "=", "'\\t'", ")", "\n", "corpus_item", "=", "Corpus", "(", "tr_df", "[", "'ItemId'", "]", ")", "\n", "corpus_user", "=", "Corpus", "(", "tr_df", "[", "'UserId'", "]", ")", "\n", "np", ".", "save", "(", "path_to_data", "+", "args", ".", "data", "+", "'_item_dict'", ",", "np", ".", "asarray", "(", "corpus_item", ".", "dict", ".", "idx2item", ")", ")", "\n", "np", ".", "save", "(", "path_to_data", "+", "args", ".", "data", "+", "'_user_dict'", ",", "np", ".", "asarray", "(", "corpus_user", ".", "dict", ".", "idx2item", ")", ")", "\n", "\n", "tr", "=", "tr_df", ".", "sort_values", "(", "[", "'UserId'", ",", "'Time'", "]", ")", ".", "groupby", "(", "'UserId'", ")", "[", "'ItemId'", "]", ".", "apply", "(", "list", ")", ".", "to_dict", "(", ")", "\n", "val", "=", "val_df", ".", "sort_values", "(", "[", "'UserId'", ",", "'Time'", "]", ")", ".", "groupby", "(", "'UserId'", ")", "[", "'ItemId'", "]", ".", "apply", "(", "list", ")", ".", "to_dict", "(", ")", "\n", "test", "=", "test_df", ".", "sort_values", "(", "[", "'UserId'", ",", "'Time'", "]", ")", ".", "groupby", "(", "'UserId'", ")", "[", "'ItemId'", "]", ".", "apply", "(", "list", ")", ".", "to_dict", "(", ")", "\n", "\n", "_", "=", "prepare_data", "(", "corpus_item", ",", "corpus_user", ",", "tr", ",", "args", ".", "data", "+", "'_train_tr'", ",", "path_to_data", ")", "\n", "_", "=", "prepare_data", "(", "corpus_item", ",", "corpus_user", ",", "val", ",", "args", ".", "data", "+", "'_train_valid'", ",", "path_to_data", ")", "\n", "_", "=", "prepare_data", "(", "corpus_item", ",", "corpus_user", ",", "test", ",", "args", ".", "data", "+", "'_test'", ",", "path_to_data", ")", "\n", "\n", "", "with", "open", "(", "path_to_data", "+", "args", ".", "data", "+", "'_train_tr.json'", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "train_data", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "with", "open", "(", "path_to_data", "+", "args", ".", "data", "+", "'_train_valid.json'", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "val_data", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "with", "open", "(", "path_to_data", "+", "args", ".", "data", "+", "'_test.json'", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "test_data", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "item2idx", "=", "np", ".", "load", "(", "path_to_data", "+", "args", ".", "data", "+", "'_item_dict.npy'", ")", "\n", "user2idx", "=", "np", ".", "load", "(", "path_to_data", "+", "args", ".", "data", "+", "'_user_dict.npy'", ")", "\n", "n_items", "=", "item2idx", ".", "size", "\n", "n_users", "=", "user2idx", ".", "size", "\n", "\n", "return", "[", "train_data", ",", "val_data", ",", "test_data", ",", "n_items", ",", "n_users", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.utils.prepare_data": [[76, 90], ["data.keys", "open", "json.dump", "i_int_ids.append"], "function", ["None"], ["", "def", "prepare_data", "(", "corpus_item", ",", "corpus_user", ",", "data", ",", "dname", ",", "path_to_data", ")", ":", "\n", "    ", "ret", "=", "{", "}", "\n", "user_str_ids", "=", "data", ".", "keys", "(", ")", "\n", "for", "u", "in", "user_str_ids", ":", "\n", "        ", "u_int_id", "=", "corpus_user", ".", "dict", ".", "item2idx", "[", "u", "]", "\n", "i_int_ids", "=", "[", "]", "\n", "item_str_ids", "=", "data", "[", "u", "]", "\n", "for", "i", "in", "item_str_ids", ":", "\n", "            ", "i_int_ids", ".", "append", "(", "corpus_item", ".", "dict", ".", "item2idx", "[", "i", "]", ")", "\n", "", "ret", "[", "u_int_id", "]", "=", "i_int_ids", "\n", "", "with", "open", "(", "path_to_data", "+", "dname", "+", "'.json'", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "ret", ",", "fp", ")", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.utils.prepare_eval_test": [[91, 120], ["data.keys", "int", "range", "all_u.append", "numpy.zeros", "numpy.zeros", "min", "all_inp.append", "all_pos.append", "batches.append", "len", "batches.append", "int", "len", "len"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros"], ["", "def", "prepare_eval_test", "(", "data", ",", "batch_size", ",", "max_test_len", "=", "100", ")", ":", "\n", "    ", "if", "batch_size", "<", "2", ":", "\n", "        ", "batch_size", "=", "2", "\n", "", "uids", "=", "data", ".", "keys", "(", ")", "\n", "all_u", "=", "[", "]", "\n", "all_inp", "=", "[", "]", "\n", "all_pos", "=", "[", "]", "\n", "for", "u", "in", "uids", ":", "\n", "        ", "all_u", ".", "append", "(", "int", "(", "u", ")", ")", "\n", "itemids", "=", "data", "[", "u", "]", "\n", "inp", "=", "np", ".", "zeros", "(", "[", "max_test_len", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "pos", "=", "np", ".", "zeros", "(", "[", "max_test_len", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "l", "=", "min", "(", "max_test_len", ",", "len", "(", "itemids", ")", ")", "\n", "inp", "[", ":", "l", "]", "=", "itemids", "[", ":", "l", "]", "\n", "pos", "[", ":", "l", "-", "1", "]", "=", "itemids", "[", "1", ":", "l", "]", "\n", "all_inp", ".", "append", "(", "inp", ")", "\n", "all_pos", ".", "append", "(", "pos", ")", "\n", "\n", "", "num_batches", "=", "int", "(", "len", "(", "all_u", ")", "/", "batch_size", ")", "\n", "batches", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "        ", "batch_u", "=", "all_u", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "batch_inp", "=", "all_inp", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "batch_pos", "=", "all_pos", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "batches", ".", "append", "(", "(", "batch_u", ",", "batch_inp", ",", "batch_pos", ")", ")", "\n", "", "if", "num_batches", "*", "batch_size", "<", "len", "(", "all_u", ")", ":", "\n", "        ", "batches", ".", "append", "(", "(", "all_u", "[", "num_batches", "*", "batch_size", ":", "]", ",", "all_inp", "[", "num_batches", "*", "batch_size", ":", "]", ",", "all_pos", "[", "num_batches", "*", "batch_size", ":", "]", ")", ")", "\n", "\n", "", "return", "batches", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.utils.preprocess_session": [[121, 166], ["pandas.read_csv", "pd.read_csv.groupby().size", "pd.read_csv.groupby().size", "print", "pd.read_csv.groupby().size", "print", "pd.read_csv.groupby().size", "print", "pd.read_csv.groupby().Time.max", "pd.read_csv.Time.max", "test.groupby().size", "test.SessionId.unique", "numpy.random.choice", "print", "print", "print", "train.to_csv", "test_.to_csv", "val_.to_csv", "int", "pd.read_csv.groupby", "numpy.in1d", "pd.read_csv.groupby", "numpy.in1d", "pd.read_csv.ItemId.nunique", "pd.read_csv.groupby", "data.groupby().size.mean", "numpy.in1d", "pd.read_csv.groupby", "data.groupby().size.mean", "numpy.in1d", "numpy.in1d", "numpy.in1d", "test.groupby", "numpy.in1d", "test[].isin", "len", "len", "len", "pd.read_csv.groupby", "len", "test[].isin"], "function", ["None"], ["", "def", "preprocess_session", "(", "dname", ")", ":", "\n", "    ", "'''\n    The model can be applied for session-based recommendation, where a sequence is seen as a user's history.\n    The data should contain three columns, i.e., SessionId, ItemId and Time with Tab as separator.\n    '''", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_path", "+", "dname", "+", "'/'", "+", "dname", "+", "'.tsv'", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "data", ".", "columns", "=", "[", "'SessionId'", ",", "'ItemId'", ",", "'Time'", "]", "\n", "session_lengths", "=", "data", ".", "groupby", "(", "'SessionId'", ")", ".", "size", "(", ")", "\n", "data", "=", "data", "[", "np", ".", "in1d", "(", "data", ".", "SessionId", ",", "session_lengths", "[", "session_lengths", ">", "2", "]", ".", "index", ")", "]", "\n", "\n", "item_supports", "=", "data", ".", "groupby", "(", "'ItemId'", ")", ".", "size", "(", ")", "\n", "data", "=", "data", "[", "np", ".", "in1d", "(", "data", ".", "ItemId", ",", "item_supports", "[", "item_supports", ">=", "10", "]", ".", "index", ")", "]", "\n", "print", "(", "'Unique items: {}'", ".", "format", "(", "data", ".", "ItemId", ".", "nunique", "(", ")", ")", ")", "\n", "\n", "session_lengths", "=", "data", ".", "groupby", "(", "'SessionId'", ")", ".", "size", "(", ")", "\n", "print", "(", "'Average session length: {}'", ".", "format", "(", "session_lengths", ".", "mean", "(", ")", ")", ")", "\n", "data", "=", "data", "[", "np", ".", "in1d", "(", "data", ".", "SessionId", ",", "session_lengths", "[", "session_lengths", ">", "2", "]", ".", "index", ")", "]", "\n", "\n", "session_lengths", "=", "data", ".", "groupby", "(", "'SessionId'", ")", ".", "size", "(", ")", "\n", "print", "(", "'Average session length after removing sessions with less than two event: {}'", ".", "format", "(", "session_lengths", ".", "mean", "(", ")", ")", ")", "\n", "\n", "session_max_times", "=", "data", ".", "groupby", "(", "'SessionId'", ")", ".", "Time", ".", "max", "(", ")", "\n", "tmax", "=", "data", ".", "Time", ".", "max", "(", ")", "\n", "session_train", "=", "session_max_times", "[", "session_max_times", "<", "tmax", "-", "86400", "*", "2", "]", ".", "index", "# We preserve sessions of last two days as validation and test data", "\n", "session_test", "=", "session_max_times", "[", "session_max_times", ">=", "tmax", "-", "86400", "*", "2", "]", ".", "index", "\n", "train", "=", "data", "[", "np", ".", "in1d", "(", "data", ".", "SessionId", ",", "session_train", ")", "]", "\n", "test", "=", "data", "[", "np", ".", "in1d", "(", "data", ".", "SessionId", ",", "session_test", ")", "]", "\n", "test", "=", "test", "[", "np", ".", "in1d", "(", "test", ".", "ItemId", ",", "train", ".", "ItemId", ")", "]", "\n", "\n", "tslength", "=", "test", ".", "groupby", "(", "'SessionId'", ")", ".", "size", "(", ")", "\n", "test", "=", "test", "[", "np", ".", "in1d", "(", "test", ".", "SessionId", ",", "tslength", "[", "tslength", ">", "2", "]", ".", "index", ")", "]", "\n", "\n", "test_session", "=", "test", ".", "SessionId", ".", "unique", "(", ")", "\n", "test_session_", "=", "np", ".", "random", ".", "choice", "(", "test_session", ",", "int", "(", "len", "(", "test_session", ")", "/", "2", ")", ",", "replace", "=", "False", ")", "\n", "test_", "=", "test", ".", "loc", "[", "test", "[", "'SessionId'", "]", ".", "isin", "(", "test_session_", ")", "]", "\n", "val_", "=", "test", ".", "loc", "[", "~", "test", "[", "'SessionId'", "]", ".", "isin", "(", "test_session_", ")", "]", "\n", "print", "(", "'Train size: {}'", ".", "format", "(", "len", "(", "train", ")", ")", ")", "\n", "print", "(", "'Dev size: {}'", ".", "format", "(", "len", "(", "val_", ")", ")", ")", "\n", "print", "(", "'Test size: {}'", ".", "format", "(", "len", "(", "test_", ")", ")", ")", "\n", "\n", "columns", "=", "[", "'SessionId'", ",", "'ItemId'", ",", "'Time'", "]", "\n", "header", "=", "[", "'UserId'", ",", "'ItemId'", ",", "'Time'", "]", "\n", "train", ".", "to_csv", "(", "data_path", "+", "dname", "+", "'/'", "+", "dname", "+", "'_train_tr.txt'", ",", "sep", "=", "'\\t'", ",", "columns", "=", "columns", ",", "header", "=", "header", ",", "index", "=", "False", ")", "\n", "test_", ".", "to_csv", "(", "data_path", "+", "dname", "+", "'/'", "+", "dname", "+", "'_test.txt'", ",", "sep", "=", "'\\t'", ",", "columns", "=", "columns", ",", "header", "=", "header", ",", "index", "=", "False", ")", "\n", "val_", ".", "to_csv", "(", "data_path", "+", "dname", "+", "'/'", "+", "dname", "+", "'_train_valid.txt'", ",", "sep", "=", "'\\t'", ",", "columns", "=", "columns", ",", "header", "=", "header", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.neural.utils.preprocess_sequence": [[168, 224], ["pandas.read_csv", "pd.read_csv.groupby().size", "print", "pd.read_csv.groupby().size", "print", "pd.read_csv.groupby().size", "pd.read_csv.groupby().size", "print", "pd.read_csv.Time.min", "pd.read_csv.Time.max", "train.groupby().size", "print", "train.user.unique", "train.item.unique", "test.groupby().size", "print", "test.user.unique", "numpy.random.choice", "print", "print", "print", "train.to_csv", "test_.to_csv", "val_.to_csv", "int", "pd.read_csv.groupby", "data.groupby().size.mean", "numpy.in1d", "pd.read_csv.groupby", "numpy.in1d", "pd.read_csv.item.nunique", "pd.read_csv.groupby", "numpy.in1d", "pd.read_csv.groupby", "data.groupby().size.mean", "train.groupby", "numpy.in1d", "train.groupby().size.mean", "test[].isin", "test[].isin", "test.groupby", "numpy.in1d", "test.groupby().size.mean", "test[].isin", "len", "len", "len", "len", "test[].isin"], "function", ["None"], ["", "def", "preprocess_sequence", "(", "dname", ")", ":", "\n", "    ", "'''\n    For sequential recommendation.\n    The data should contain three columns, i.e., user, item and Time with Tab as separator.\n    '''", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_path", "+", "dname", "+", "'/'", "+", "dname", "+", "'.tsv'", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "data", ".", "columns", "=", "[", "'user'", ",", "'item'", ",", "'Time'", "]", "\n", "\n", "event_lengths", "=", "data", ".", "groupby", "(", "'user'", ")", ".", "size", "(", ")", "\n", "print", "(", "'Average check-ins per user: {}'", ".", "format", "(", "event_lengths", ".", "mean", "(", ")", ")", ")", "\n", "data", "=", "data", "[", "np", ".", "in1d", "(", "data", ".", "user", ",", "event_lengths", "[", "event_lengths", ">", "10", "]", ".", "index", ")", "]", "\n", "\n", "item_supports", "=", "data", ".", "groupby", "(", "'item'", ")", ".", "size", "(", ")", "\n", "# 50 for delicious, 10 for gowalla", "\n", "data", "=", "data", "[", "np", ".", "in1d", "(", "data", ".", "item", ",", "item_supports", "[", "item_supports", ">=", "10", "]", ".", "index", ")", "]", "\n", "print", "(", "'Unique items: {}'", ".", "format", "(", "data", ".", "item", ".", "nunique", "(", ")", ")", ")", "\n", "\n", "event_lengths", "=", "data", ".", "groupby", "(", "'user'", ")", ".", "size", "(", ")", "\n", "data", "=", "data", "[", "np", ".", "in1d", "(", "data", ".", "user", ",", "event_lengths", "[", "event_lengths", ">=", "10", "]", ".", "index", ")", "]", "\n", "\n", "event_lengths", "=", "data", ".", "groupby", "(", "'user'", ")", ".", "size", "(", ")", "\n", "print", "(", "'Average check-ins per user after removing sessions with one event: {}'", ".", "format", "(", "event_lengths", ".", "mean", "(", ")", ")", ")", "\n", "\n", "tmin", "=", "data", ".", "Time", ".", "min", "(", ")", "\n", "tmax", "=", "data", ".", "Time", ".", "max", "(", ")", "\n", "pivot", "=", "(", "tmax", "-", "tmin", ")", "*", "0.9", "+", "tmin", "# Preserve last 10% as validation and test data", "\n", "train", "=", "data", ".", "loc", "[", "data", "[", "'Time'", "]", "<", "pivot", "]", "\n", "test", "=", "data", ".", "loc", "[", "data", "[", "'Time'", "]", ">=", "pivot", "]", "\n", "\n", "tr_event_lengths", "=", "train", ".", "groupby", "(", "'user'", ")", ".", "size", "(", ")", "\n", "train", "=", "train", "[", "np", ".", "in1d", "(", "train", ".", "user", ",", "tr_event_lengths", "[", "tr_event_lengths", ">", "3", "]", ".", "index", ")", "]", "\n", "print", "(", "'Average (train) check-ins per user: {}'", ".", "format", "(", "tr_event_lengths", ".", "mean", "(", ")", ")", ")", "\n", "\n", "user_to_predict", "=", "train", ".", "user", ".", "unique", "(", ")", "\n", "test", "=", "test", "[", "test", "[", "'user'", "]", ".", "isin", "(", "user_to_predict", ")", "]", "\n", "item_to_predict", "=", "train", ".", "item", ".", "unique", "(", ")", "\n", "test", "=", "test", "[", "test", "[", "'item'", "]", ".", "isin", "(", "item_to_predict", ")", "]", "\n", "test_event_lengths", "=", "test", ".", "groupby", "(", "'user'", ")", ".", "size", "(", ")", "\n", "test", "=", "test", "[", "np", ".", "in1d", "(", "test", ".", "user", ",", "test_event_lengths", "[", "test_event_lengths", ">", "3", "]", ".", "index", ")", "]", "\n", "print", "(", "'Average (test) check-ins per user: {}'", ".", "format", "(", "test_event_lengths", ".", "mean", "(", ")", ")", ")", "\n", "\n", "\n", "test_user", "=", "test", ".", "user", ".", "unique", "(", ")", "\n", "test_user_", "=", "np", ".", "random", ".", "choice", "(", "test_user", ",", "int", "(", "len", "(", "test_user", ")", "/", "2", ")", ",", "replace", "=", "False", ")", "\n", "test_", "=", "test", ".", "loc", "[", "test", "[", "'user'", "]", ".", "isin", "(", "test_user_", ")", "]", "\n", "val_", "=", "test", ".", "loc", "[", "~", "test", "[", "'user'", "]", ".", "isin", "(", "test_user_", ")", "]", "\n", "print", "(", "'Train size: {}'", ".", "format", "(", "len", "(", "train", ")", ")", ")", "\n", "print", "(", "'Dev size: {}'", ".", "format", "(", "len", "(", "val_", ")", ")", ")", "\n", "print", "(", "'Test size: {}'", ".", "format", "(", "len", "(", "test_", ")", ")", ")", "\n", "\n", "\n", "columns", "=", "[", "'user'", ",", "'item'", ",", "'Time'", "]", "\n", "header", "=", "[", "'UserId'", ",", "'ItemId'", ",", "'Time'", "]", "\n", "train", ".", "to_csv", "(", "data_path", "+", "dname", "+", "'/'", "+", "dname", "+", "'_train_tr.txt'", ",", "sep", "=", "'\\t'", ",", "columns", "=", "columns", ",", "header", "=", "header", ",", "index", "=", "False", ")", "\n", "test_", ".", "to_csv", "(", "data_path", "+", "dname", "+", "'/'", "+", "dname", "+", "'_test.txt'", ",", "sep", "=", "'\\t'", ",", "columns", "=", "columns", ",", "header", "=", "header", ",", "index", "=", "False", ")", "\n", "val_", ".", "to_csv", "(", "data_path", "+", "dname", "+", "'/'", "+", "dname", "+", "'_train_valid.txt'", ",", "sep", "=", "'\\t'", ",", "columns", "=", "columns", ",", "header", "=", "header", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.train.evaluate": [[76, 91], ["sess.run", "len"], "function", ["None"], ["\n", "def", "evaluate", "(", "source", ",", "sess", ")", ":", "\n", "    ", "total_hit_k", "=", "0.0", "\n", "total_ndcg_k", "=", "0.0", "\n", "count", "=", "0.0", "\n", "for", "batch", "in", "source", ":", "\n", "        ", "feed_dict", "=", "{", "model", ".", "inp", ":", "batch", "[", "1", "]", ",", "model", ".", "dropout", ":", "0.", "}", "\n", "feed_dict", "[", "model", ".", "pos", "]", "=", "batch", "[", "2", "]", "\n", "hit", ",", "ndcg", ",", "n_target", "=", "sess", ".", "run", "(", "[", "model", ".", "hit_at_k", ",", "model", ".", "ndcg_at_k", ",", "model", ".", "num_target", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "count", "+=", "n_target", "\n", "total_hit_k", "+=", "hit", "\n", "total_ndcg_k", "+=", "ndcg", "\n", "\n", "", "val_hit", "=", "total_hit_k", "/", "count", "\n", "val_ndcg", "=", "total_ndcg_k", "/", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.train.main": [[92, 167], ["tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.global_variables_initializer", "tf.Session.run", "time.time", "print", "train_sampler.close", "print", "tensorflow.train.get_checkpoint_state", "train.evaluate", "print", "print", "print", "model.saver.restore", "print", "print", "train_sampler.next_batch", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "tf.Session.run", "print", "train_sampler.close", "exit", "print", "sys.stdout.flush", "time.time", "train.evaluate", "all_val_recall.append", "print", "print", "print", "sys.stdout.flush", "time.time", "str", "time.time", "max", "model.saver.save", "print", "sys.stdout.flush"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.sampler.Sampler.close", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.evaluate", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.restore", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.sampler.Sampler.next_batch", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.sampler.Sampler.close", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.evaluate"], ["return", "[", "val_hit", ",", "val_ndcg", "]", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "global", "lr", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "all_val_hit", "=", "[", "-", "1", "]", "\n", "early_stop_cn", "=", "0", "\n", "step_count", "=", "0", "\n", "train_loss_l", "=", "0.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Start training...'", ")", "\n", "try", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "cur_batch", "=", "train_sampler", ".", "next_batch", "(", ")", "\n", "inp", "=", "np", ".", "array", "(", "cur_batch", "[", "1", "]", ")", "\n", "feed_dict", "=", "{", "model", ".", "inp", ":", "inp", ",", "model", ".", "lr", ":", "lr", ",", "model", ".", "dropout", ":", "args", ".", "dropout", "}", "\n", "feed_dict", "[", "model", ".", "pos", "]", "=", "np", ".", "array", "(", "cur_batch", "[", "2", "]", ")", "\n", "feed_dict", "[", "model", ".", "neg", "]", "=", "np", ".", "array", "(", "cur_batch", "[", "3", "]", ")", "\n", "_", ",", "train_loss", "=", "sess", ".", "run", "(", "[", "model", ".", "train_op", ",", "model", ".", "loss", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "train_loss_l", "+=", "train_loss", "\n", "step_count", "+=", "1", "\n", "if", "step_count", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "                ", "cur_loss", "=", "train_loss_l", "/", "args", ".", "log_interval", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "'| Totol step {:10d} | lr {:02.5f} | ms/batch {:5.2f} | loss {:5.3f}'", ".", "format", "(", "\n", "step_count", ",", "lr", ",", "elapsed", "*", "1000", "/", "args", ".", "log_interval", ",", "cur_loss", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "train_loss_l", "=", "0.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "if", "step_count", "%", "args", ".", "eval_interval", "==", "0", ":", "\n", "                ", "val_hit", ",", "val_ndcg", "=", "evaluate", "(", "val_data", ",", "sess", ")", "\n", "all_val_hit", ".", "append", "(", "val_hit", ")", "\n", "print", "(", "'-'", "*", "90", ")", "\n", "print", "(", "'| End of step {:10d} | valid hit@20 {:8.5f} | valid ndcg@20 {:8.5f}'", ".", "format", "(", "\n", "step_count", ",", "val_hit", ",", "val_ndcg", ")", ")", "\n", "print", "(", "'='", "*", "90", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "if", "all_val_hit", "[", "-", "1", "]", "<=", "all_val_hit", "[", "-", "2", "]", ":", "\n", "                    ", "lr", "/=", "2.", "\n", "lr", "=", "max", "(", "lr", ",", "1e-6", ")", "\n", "early_stop_cn", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "early_stop_cn", "=", "0", "\n", "model", ".", "saver", ".", "save", "(", "sess", ",", "checkpoint_dir", "+", "'/model.ckpt'", ")", "\n", "", "if", "early_stop_cn", "==", "3", ":", "\n", "                    ", "print", "(", "'Validation hit decreases in three consecutive epochs. Stop Training!'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "break", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "str", "(", "e", ")", ")", "\n", "train_sampler", ".", "close", "(", ")", "\n", "exit", "(", "1", ")", "\n", "", "train_sampler", ".", "close", "(", ")", "\n", "print", "(", "'Done'", ")", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "checkpoint_dir", ")", "\n", "", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.sampler.Sampler.__init__": [[84, 100], ["multiprocessing.Queue", "range", "sampler.Sampler.processors.append", "sampler.Sampler.processors[].start", "int", "multiprocessing.Process", "numpy.random.randint"], "methods", ["None"], ["self", ".", "result_queue", ",", "\n", "np", ".", "random", ".", "randint", "(", "2e9", ")", ",", "\n", "neg_method", ")", ")", ")", "\n", "self", ".", "processors", "[", "-", "1", "]", ".", "daemon", "=", "True", "\n", "self", ".", "processors", "[", "-", "1", "]", ".", "start", "(", ")", "\n", "\n", "", "", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "result_queue", ".", "get", "(", ")", "\n", "\n", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "processors", ":", "\n", "            ", "p", ".", "terminate", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.sampler.Sampler.next_batch": [[101, 103], ["sampler.Sampler.result_queue.get"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.sampler.Sampler.close": [[104, 108], ["p.terminate", "p.join"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.sampler.random_neg": [[15, 28], ["set", "range", "list", "numpy.random.randint", "set.add", "numpy.random.randint"], "function", ["None"], ["def", "random_neg", "(", "pos", ",", "n", ",", "s", ")", ":", "\n", "    ", "'''\n    p: positive one\n    n: number of items\n    s: size of samples.\n    '''", "\n", "neg", "=", "set", "(", ")", "\n", "for", "_", "in", "range", "(", "s", ")", ":", "\n", "        ", "t", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "n", "+", "1", ")", "\n", "while", "t", "in", "pos", "or", "t", "in", "neg", ":", "\n", "            ", "t", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "n", "+", "1", ")", "\n", "", "neg", ".", "add", "(", "t", ")", "\n", "", "return", "list", "(", "neg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.sampler.sample_function": [[29, 82], ["numpy.array", "numpy.random.seed", "numpy.random.choice", "str", "numpy.random.randint", "numpy.zeros", "numpy.zeros", "range", "result_queue.put", "len", "numpy.sum", "len", "sampler.random_neg", "one_batch.append", "list", "range", "range", "sampler.sample_function.sample"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.sampler.random_neg", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.sample"], ["", "def", "sample_function", "(", "data", ",", "n_items", ",", "n_users", ",", "batch_size", ",", "max_len", ",", "neg_size", ",", "result_queue", ",", "SEED", ",", "neg_method", "=", "'rand'", ")", ":", "\n", "    ", "'''\n    data: list of train data, key: user, value: a set of all user's clicks.\n    tensors: list of train tensors, each element of list is also a list.\n    masks: list of train masks, each element of list is also a list.\n    batch_size: number of samples in a batch.\n    neg_size: number of negative samples.\n    '''", "\n", "num_samples", "=", "np", ".", "array", "(", "[", "len", "(", "data", "[", "str", "(", "u", ")", "]", ")", "for", "u", "in", "range", "(", "1", ",", "n_users", "+", "1", ")", "]", ")", "\n", "prob_", "=", "num_samples", "/", "(", "1.0", "*", "np", ".", "sum", "(", "num_samples", ")", ")", "\n", "def", "sample", "(", ")", ":", "\n", "# sample a user based on behavior frequency.", "\n", "        ", "user", "=", "np", ".", "random", ".", "choice", "(", "a", "=", "range", "(", "1", ",", "1", "+", "n_users", ")", ",", "p", "=", "prob_", ")", "\n", "u", "=", "str", "(", "user", ")", "\n", "\n", "# sample a slice from user u randomly. ", "\n", "if", "len", "(", "data", "[", "u", "]", ")", "<=", "max_len", ":", "\n", "            ", "idx", "=", "0", "\n", "", "else", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "data", "[", "u", "]", ")", "-", "max_len", "+", "1", ")", "\n", "", "seq", "=", "np", ".", "zeros", "(", "[", "max_len", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", ",", "itemid", "in", "enumerate", "(", "data", "[", "u", "]", "[", "idx", ":", "idx", "+", "max_len", "]", ")", ":", "\n", "            ", "seq", "[", "i", "]", "=", "itemid", "\n", "\n", "", "pos", "=", "np", ".", "zeros", "(", "[", "max_len", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "neg", "=", "np", ".", "zeros", "(", "[", "max_len", ",", "neg_size", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "l", "=", "len", "(", "data", "[", "u", "]", ")", "-", "idx", "-", "1", "\n", "l", "=", "min", "(", "l", ",", "max_len", ")", "\n", "for", "j", "in", "range", "(", "l", ")", ":", "\n", "            ", "pos", "[", "j", "]", "=", "data", "[", "u", "]", "[", "idx", "+", "1", "+", "j", "]", "\n", "if", "neg_method", "==", "'rand'", ":", "\n", "                ", "neg", "[", "j", ",", ":", "]", "=", "random_neg", "(", "[", "pos", "[", "j", "]", "]", ",", "n_items", ",", "neg_size", ")", "\n", "", "else", ":", "# Currently we only support random negative samples.", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "return", "(", "user", ",", "seq", ",", "pos", ",", "neg", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "SEED", ")", "\n", "while", "True", ":", "\n", "        ", "one_batch", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "one_batch", ".", "append", "(", "sample", "(", ")", ")", "\n", "", "result_queue", ".", "put", "(", "list", "(", "zip", "(", "*", "one_batch", ")", ")", ")", "\n", "\n", "", "", "class", "Sampler", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "data", ",", "n_items", ",", "n_users", ",", "batch_size", "=", "128", ",", "max_len", "=", "20", ",", "neg_size", "=", "10", ",", "n_workers", "=", "10", ",", "neg_method", "=", "'rand'", ")", ":", "\n", "        ", "self", ".", "result_queue", "=", "Queue", "(", "maxsize", "=", "int", "(", "2e5", ")", ")", "\n", "self", ".", "processors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_workers", ")", ":", "\n", "            ", "self", ".", "processors", ".", "append", "(", "\n", "Process", "(", "target", "=", "sample_function", ",", "args", "=", "(", "data", ",", "\n", "n_items", ",", "\n", "n_users", ",", "\n", "batch_size", ",", "\n", "max_len", ",", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.model.FOSSIL.__init__": [[21, 28], ["model.FOSSIL._build", "tensorflow.train.Saver"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.model.FPMC._build"], ["self", ".", "n_items", "=", "n_items", "\n", "self", ".", "n_users", "=", "n_users", "\n", "self", ".", "_build", "(", ")", "\n", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "inp", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "None", ")", ",", "name", "=", "'inp'", ")", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.model.FOSSIL._build": [[29, 106], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.minimum", "tensorflow.expand_dims", "tensorflow.nn.embedding_lookup", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_mean", "tensorflow.get_collection", "sum", "model.FOSSIL.optimizer.minimize", "model.FOSSIL._metric_at_k", "tensorflow.to_float", "tensorflow.squeeze", "tensorflow.nn.embedding_lookup", "tensorflow.expand_dims", "tensorflow.to_float", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.matmul", "tensorflow.train.AdamOptimizer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.truncated_normal_initializer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.truncated_normal_initializer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.truncated_normal_initializer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.constant_initializer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.constant_initializer", "tensorflow.not_equal", "tensorflow.pow", "tensorflow.sequence_mask", "tensorflow.log", "tensorflow.train.GradientDescentOptimizer", "tensorflow.expand_dims", "tensorflow.clip_by_value", "tensorflow.sigmoid"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.model.FPMC._metric_at_k"], ["self", ".", "pos", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "None", ")", ",", "name", "=", "'pos'", ")", "\n", "self", ".", "neg", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "None", ",", "self", ".", "args", ".", "neg_size", ")", ",", "name", "=", "'neg'", ")", "\n", "\n", "self", ".", "lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "None", ",", "name", "=", "'lr'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "placeholder_with_default", "(", "0.", ",", "shape", "=", "(", ")", ")", "\n", "self", ".", "item_embedding", "=", "item_embedding", "=", "tf", ".", "get_variable", "(", "'item_embedding'", ",", "shape", "=", "(", "self", ".", "n_items", "+", "1", ",", "self", ".", "args", ".", "emsize", ")", ",", "dtype", "=", "tf", ".", "float32", ",", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "self", ".", "args", ".", "l2_reg", ")", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "\n", "input_item", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "item_embedding", ",", "self", ".", "inp", ")", "\n", "mask", "=", "tf", ".", "expand_dims", "(", "tf", ".", "to_float", "(", "tf", ".", "not_equal", "(", "self", ".", "inp", ",", "0", ")", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "args", ".", "model", "==", "'tcn'", ":", "\n", "            ", "num_channels", "=", "[", "self", ".", "args", ".", "nhid", "]", "*", "(", "self", ".", "args", ".", "levels", "-", "1", ")", "+", "[", "self", ".", "args", ".", "emsize", "]", "\n", "self", ".", "net", "=", "TemporalConvNet", "(", "num_channels", ",", "stride", "=", "1", ",", "kernel_size", "=", "self", ".", "args", ".", "ksize", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "", "elif", "self", ".", "args", ".", "model", "==", "'rnn'", ":", "\n", "            ", "self", ".", "net", "=", "LSTMNet", "(", "layers", "=", "self", ".", "args", ".", "levels", ",", "hidden_units", "=", "self", ".", "args", ".", "nhid", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "", "elif", "self", ".", "args", ".", "model", "==", "'transformer'", ":", "\n", "            ", "self", ".", "net", "=", "TransformerNet", "(", "self", ".", "args", ".", "emsize", ",", "self", ".", "args", ".", "levels", ",", "self", ".", "args", ".", "num_heads", ",", "self", ".", "args", ".", "seq_len", ",", "dropout_rate", "=", "self", ".", "dropout", ",", "pos_fixed", "=", "self", ".", "args", ".", "pos_fixed", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "outputs", "=", "self", ".", "net", "(", "input_item", ",", "mask", ")", "\n", "outputs", "*=", "mask", "\n", "ct_vec", "=", "tf", ".", "reshape", "(", "outputs", ",", "(", "-", "1", ",", "self", ".", "args", ".", "emsize", ")", ")", "\n", "outputs_shape", "=", "tf", ".", "shape", "(", "outputs", ")", "\n", "\n", "self", ".", "total_loss", "=", "0.", "\n", "\n", "self", ".", "istarget", "=", "istarget", "=", "tf", ".", "reshape", "(", "tf", ".", "to_float", "(", "tf", ".", "not_equal", "(", "self", ".", "pos", ",", "0", ")", ")", ",", "[", "-", "1", "]", ")", "\n", "\n", "_pos_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embedding", ",", "self", ".", "pos", ")", "\n", "pos_emb", "=", "tf", ".", "reshape", "(", "_pos_emb", ",", "(", "-", "1", ",", "self", ".", "args", ".", "emsize", ")", ")", "\n", "_neg_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embedding", ",", "self", ".", "neg", ")", "\n", "neg_emb", "=", "tf", ".", "reshape", "(", "_neg_emb", ",", "(", "-", "1", ",", "self", ".", "args", ".", "neg_size", ",", "self", ".", "args", ".", "emsize", ")", ")", "\n", "\n", "temp_vec_neg", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "ct_vec", ",", "[", "1", "]", ")", ",", "[", "1", ",", "self", ".", "args", ".", "neg_size", ",", "1", "]", ")", "\n", "\n", "if", "self", ".", "args", ".", "loss", "==", "'ns'", ":", "\n", "            ", "assert", "self", ".", "args", ".", "neg_size", "==", "1", "\n", "pos_logit", "=", "tf", ".", "reduce_sum", "(", "ct_vec", "*", "pos_emb", ",", "-", "1", ")", "\n", "neg_logit", "=", "tf", ".", "squeeze", "(", "tf", ".", "reduce_sum", "(", "temp_vec_neg", "*", "neg_emb", ",", "-", "1", ")", ",", "1", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "\n", "-", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "pos_logit", ")", "+", "1e-24", ")", "*", "istarget", "-", "tf", ".", "log", "(", "1", "-", "tf", ".", "sigmoid", "(", "neg_logit", ")", "+", "1e-24", ")", "*", "istarget", ")", "/", "tf", ".", "reduce_sum", "(", "istarget", ")", "\n", "", "elif", "self", ".", "args", ".", "loss", "==", "'sampled_sm'", ":", "\n", "            ", "pos_logit", "=", "tf", ".", "reduce_sum", "(", "ct_vec", "*", "pos_emb", ",", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "neg_logit", "=", "tf", ".", "reduce_sum", "(", "temp_vec_neg", "*", "neg_emb", ",", "-", "1", ")", "\n", "label_1", "=", "tf", ".", "ones_like", "(", "pos_logit", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "label_0", "=", "tf", ".", "zeros_like", "(", "neg_logit", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "labels", "=", "tf", ".", "concat", "(", "[", "label_1", ",", "label_0", "]", ",", "-", "1", ")", "\n", "logit", "=", "tf", ".", "concat", "(", "[", "pos_logit", ",", "neg_logit", "]", ",", "-", "1", ")", "\n", "softmax_logit", "=", "tf", ".", "nn", ".", "softmax", "(", "logit", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "-", "labels", "*", "tf", ".", "log", "(", "softmax_logit", "+", "1e-24", ")", "-", "(", "1.", "-", "labels", ")", "*", "tf", ".", "log", "(", "1.", "-", "softmax_logit", "+", "1e-24", ")", ",", "-", "1", ")", "*", "istarget", ")", "/", "tf", ".", "reduce_sum", "(", "istarget", ")", "\n", "", "elif", "self", ".", "args", ".", "loss", "==", "'full_sm'", ":", "\n", "            ", "full_logits", "=", "tf", ".", "matmul", "(", "ct_vec", ",", "self", ".", "item_embedding", ",", "transpose_b", "=", "True", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "labels", "=", "tf", ".", "reshape", "(", "self", ".", "pos", ",", "[", "-", "1", "]", ")", ",", "logits", "=", "full_logits", ")", "*", "istarget", ")", "/", "tf", ".", "reduce_sum", "(", "istarget", ")", "\n", "\n", "", "full_logits", "=", "tf", ".", "matmul", "(", "ct_vec", ",", "self", ".", "item_embedding", ",", "transpose_b", "=", "True", ")", "\n", "self", ".", "prediction", "=", "full_logits", "\n", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "total_loss", "+=", "loss", "\n", "reg_losses", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ")", "\n", "self", ".", "total_loss", "+=", "sum", "(", "reg_losses", ")", "\n", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ")", "\n", "gvs", "=", "optimizer", ".", "compute_gradients", "(", "self", ".", "total_loss", ")", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.model.FOSSIL._metric_at_k": [[107, 119], ["tensorflow.transpose", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.nn.in_top_k", "tensorflow.cast", "tensorflow.diag_part", "tensorflow.reduce_sum", "model.log2", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.embedding_lookup", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.log2"], ["capped_gvs", "=", "[", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "self", ".", "args", ".", "clip", ",", "self", ".", "args", ".", "clip", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "gvs", "]", "\n", "self", ".", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "capped_gvs", ")", "\n", "self", ".", "hit_at_k", ",", "self", ".", "ndcg_at_k", ",", "self", ".", "num_target", "=", "self", ".", "_metric_at_k", "(", ")", "\n", "\n", "\n", "", "def", "_metric_at_k", "(", "self", ",", "k", "=", "20", ")", ":", "\n", "        ", "prediction", "=", "self", ".", "prediction", "\n", "prediction_transposed", "=", "tf", ".", "transpose", "(", "prediction", ")", "\n", "labels", "=", "tf", ".", "reshape", "(", "self", ".", "pos", ",", "shape", "=", "(", "-", "1", ",", ")", ")", "\n", "pred_values", "=", "tf", ".", "expand_dims", "(", "tf", ".", "diag_part", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "prediction_transposed", ",", "labels", ")", ")", ",", "-", "1", ")", "\n", "tile_pred_values", "=", "tf", ".", "tile", "(", "pred_values", ",", "[", "1", ",", "self", ".", "n_items", "]", ")", "\n", "ranks", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "prediction", "[", ":", ",", "1", ":", "]", ">", "tile_pred_values", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "-", "1", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.model.FPMC.__init__": [[125, 132], ["model.FPMC._build", "tensorflow.train.Saver"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.model.FPMC._build"], ["hit_at_k", "*=", "istarget", "\n", "ndcg_at_k", "=", "ndcg", "*", "istarget", "*", "hit_at_k", "\n", "\n", "return", "(", "tf", ".", "reduce_sum", "(", "hit_at_k", ")", ",", "tf", ".", "reduce_sum", "(", "ndcg_at_k", ")", ",", "tf", ".", "reduce_sum", "(", "istarget", ")", ")", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.model.FPMC._build": [[133, 196], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_mean", "tensorflow.get_collection", "sum", "model.FPMC.optimizer.minimize", "model.FPMC._metric_at_k", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.train.AdamOptimizer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.truncated_normal_initializer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.truncated_normal_initializer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.truncated_normal_initializer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.truncated_normal_initializer", "tensorflow.log", "tensorflow.train.GradientDescentOptimizer", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.clip_by_value", "tensorflow.sigmoid"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.model.FPMC._metric_at_k"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.model.FPMC._metric_at_k": [[198, 210], ["tensorflow.transpose", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.nn.in_top_k", "tensorflow.cast", "tensorflow.diag_part", "tensorflow.reduce_sum", "model.log2", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.embedding_lookup", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.log2"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.model.log2": [[14, 18], ["tensorflow.log", "tensorflow.log", "tensorflow.constant"], "function", ["None"], ["    ", "numerator", "=", "tf", ".", "log", "(", "x", ")", "\n", "denominator", "=", "tf", ".", "log", "(", "tf", ".", "constant", "(", "2", ",", "dtype", "=", "numerator", ".", "dtype", ")", ")", "\n", "return", "numerator", "/", "denominator", "\n", "\n", "", "class", "NeuralSeqRecommender", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.utils.Dictionary.__init__": [[19, 23], ["collections.Counter"], "methods", ["None"], ["        ", "self", ".", "item2idx", "=", "{", "}", "\n", "self", ".", "idx2item", "=", "[", "]", "\n", "self", ".", "counter", "=", "Counter", "(", ")", "\n", "\n", "", "def", "add_item", "(", "self", ",", "item", ")", ":", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.utils.Dictionary.add_item": [[24, 26], ["None"], "methods", ["None"], ["        ", "self", ".", "counter", "[", "item", "]", "+=", "1", "\n", "\n", "", "def", "prep_dict", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.utils.Dictionary.prep_dict": [[27, 32], ["utils.Dictionary.idx2item.append", "len"], "methods", ["None"], ["        ", "for", "item", "in", "self", ".", "counter", ":", "\n", "            ", "if", "item", "not", "in", "self", ".", "item2idx", ":", "\n", "                ", "self", ".", "idx2item", ".", "append", "(", "item", ")", "\n", "self", ".", "item2idx", "[", "item", "]", "=", "len", "(", "self", ".", "idx2item", ")", "\n", "\n", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.utils.Dictionary.__len__": [[33, 35], ["len"], "methods", ["None"], ["        ", "return", "len", "(", "self", ".", "idx2item", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.utils.Corpus.__init__": [[38, 43], ["utils.Dictionary", "utils.Corpus.dict.prep_dict", "utils.Corpus.dict.add_item"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.utils.Dictionary.prep_dict", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.utils.Dictionary.add_item"], ["        ", "self", ".", "dict", "=", "Dictionary", "(", ")", "\n", "for", "item", "in", "ItemId", ":", "\n", "            ", "self", ".", "dict", ".", "add_item", "(", "item", ")", "\n", "", "self", ".", "dict", ".", "prep_dict", "(", ")", "\n", "\n", "", "", "def", "data_generator", "(", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.utils.data_generator": [[44, 76], ["numpy.load", "numpy.load", "os.path.exists", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "utils.Corpus", "utils.Corpus", "numpy.save", "numpy.save", "[].apply().to_dict", "[].apply().to_dict", "[].apply().to_dict", "utils.prepare_data", "utils.prepare_data", "utils.prepare_data", "open", "json.load", "open", "json.load", "open", "json.load", "numpy.asarray", "numpy.asarray", "[].apply", "[].apply", "[].apply", "pd.read_csv.sort_values().groupby", "pd.read_csv.sort_values().groupby", "pd.read_csv.sort_values().groupby", "pd.read_csv.sort_values", "pd.read_csv.sort_values", "pd.read_csv.sort_values"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.utils.prepare_data", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.utils.prepare_data", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.utils.prepare_data"], ["    ", "path_to_data", "=", "data_path", "+", "args", ".", "data", "+", "'/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_to_data", "+", "args", ".", "data", "+", "'_train_tr.json'", ")", ":", "\n", "        ", "tr_df", "=", "pd", ".", "read_csv", "(", "path_to_data", "+", "args", ".", "data", "+", "'_train_tr.txt'", ",", "sep", "=", "'\\t'", ")", "\n", "val_df", "=", "pd", ".", "read_csv", "(", "path_to_data", "+", "args", ".", "data", "+", "'_train_valid.txt'", ",", "sep", "=", "'\\t'", ")", "\n", "test_df", "=", "pd", ".", "read_csv", "(", "path_to_data", "+", "args", ".", "data", "+", "'_test.txt'", ",", "sep", "=", "'\\t'", ")", "\n", "corpus_item", "=", "Corpus", "(", "tr_df", "[", "'ItemId'", "]", ")", "\n", "corpus_user", "=", "Corpus", "(", "tr_df", "[", "'UserId'", "]", ")", "\n", "np", ".", "save", "(", "path_to_data", "+", "args", ".", "data", "+", "'_item_dict'", ",", "np", ".", "asarray", "(", "corpus_item", ".", "dict", ".", "idx2item", ")", ")", "\n", "np", ".", "save", "(", "path_to_data", "+", "args", ".", "data", "+", "'_user_dict'", ",", "np", ".", "asarray", "(", "corpus_user", ".", "dict", ".", "idx2item", ")", ")", "\n", "\n", "tr", "=", "tr_df", ".", "sort_values", "(", "[", "'UserId'", ",", "'Time'", "]", ")", ".", "groupby", "(", "'UserId'", ")", "[", "'ItemId'", "]", ".", "apply", "(", "list", ")", ".", "to_dict", "(", ")", "\n", "val", "=", "val_df", ".", "sort_values", "(", "[", "'UserId'", ",", "'Time'", "]", ")", ".", "groupby", "(", "'UserId'", ")", "[", "'ItemId'", "]", ".", "apply", "(", "list", ")", ".", "to_dict", "(", ")", "\n", "test", "=", "test_df", ".", "sort_values", "(", "[", "'UserId'", ",", "'Time'", "]", ")", ".", "groupby", "(", "'UserId'", ")", "[", "'ItemId'", "]", ".", "apply", "(", "list", ")", ".", "to_dict", "(", ")", "\n", "\n", "_", "=", "prepare_data", "(", "corpus_item", ",", "corpus_user", ",", "tr", ",", "args", ".", "data", "+", "'_train_tr'", ",", "path_to_data", ")", "\n", "_", "=", "prepare_data", "(", "corpus_item", ",", "corpus_user", ",", "val", ",", "args", ".", "data", "+", "'_train_valid'", ",", "path_to_data", ")", "\n", "_", "=", "prepare_data", "(", "corpus_item", ",", "corpus_user", ",", "test", ",", "args", ".", "data", "+", "'_test'", ",", "path_to_data", ")", "\n", "\n", "", "with", "open", "(", "path_to_data", "+", "args", ".", "data", "+", "'_train_tr.json'", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "train_data", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "with", "open", "(", "path_to_data", "+", "args", ".", "data", "+", "'_train_valid.json'", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "val_data", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "with", "open", "(", "path_to_data", "+", "args", ".", "data", "+", "'_test.json'", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "test_data", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "item2idx", "=", "np", ".", "load", "(", "path_to_data", "+", "args", ".", "data", "+", "'_item_dict.npy'", ")", "\n", "user2idx", "=", "np", ".", "load", "(", "path_to_data", "+", "args", ".", "data", "+", "'_user_dict.npy'", ")", "\n", "n_items", "=", "item2idx", ".", "size", "\n", "n_users", "=", "user2idx", ".", "size", "\n", "\n", "return", "[", "train_data", ",", "val_data", ",", "test_data", ",", "n_items", ",", "n_users", "]", "\n", "\n", "", "def", "prepare_data", "(", "corpus_item", ",", "corpus_user", ",", "data", ",", "dname", ",", "path_to_data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.utils.prepare_data": [[77, 91], ["data.keys", "open", "json.dump", "i_int_ids.append"], "function", ["None"], ["    ", "ret", "=", "{", "}", "\n", "user_str_ids", "=", "data", ".", "keys", "(", ")", "\n", "for", "u", "in", "user_str_ids", ":", "\n", "        ", "u_int_id", "=", "corpus_user", ".", "dict", ".", "item2idx", "[", "u", "]", "\n", "i_int_ids", "=", "[", "]", "\n", "item_str_ids", "=", "data", "[", "u", "]", "\n", "for", "i", "in", "item_str_ids", ":", "\n", "            ", "i_int_ids", ".", "append", "(", "corpus_item", ".", "dict", ".", "item2idx", "[", "i", "]", ")", "\n", "", "ret", "[", "u_int_id", "]", "=", "i_int_ids", "\n", "", "with", "open", "(", "path_to_data", "+", "dname", "+", "'.json'", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "ret", ",", "fp", ")", "\n", "\n", "", "return", "ret", "\n", "\n", "", "def", "prepare_eval_test", "(", "data", ",", "batch_size", ",", "max_test_len", "=", "100", ")", ":", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.utils.prepare_eval_test": [[92, 130], ["data.keys", "int", "range", "all_u.extend", "range", "batches.append", "len", "batches.append", "min", "numpy.zeros", "all_inp.append", "all_pos.append", "len", "len", "int"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros"], ["    ", "if", "batch_size", "<", "2", ":", "\n", "        ", "batch_size", "=", "2", "\n", "", "uids", "=", "data", ".", "keys", "(", ")", "\n", "all_u", "=", "[", "]", "\n", "all_inp", "=", "[", "]", "\n", "all_pos", "=", "[", "]", "\n", "for", "u", "in", "uids", ":", "\n", "        ", "all_u", ".", "append", "(", "int", "(", "u", ")", ")", "\n", "itemids", "=", "data", "[", "u", "]", "\n", "inp", "=", "np", ".", "zeros", "(", "[", "max_test_len", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "pos", "=", "np", ".", "zeros", "(", "[", "max_test_len", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "l", "=", "min", "(", "max_test_len", ",", "len", "(", "itemids", ")", ")", "\n", "inp", "[", ":", "l", "]", "=", "itemids", "[", ":", "l", "]", "\n", "pos", "[", ":", "l", "-", "1", "]", "=", "itemids", "[", "1", ":", "l", "]", "\n", "all_inp", ".", "append", "(", "inp", ")", "\n", "all_pos", ".", "append", "(", "pos", ")", "\n", "\n", "", "num_batches", "=", "int", "(", "len", "(", "all_u", ")", "/", "batch_size", ")", "\n", "batches", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "        ", "batch_u", "=", "all_u", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "batch_inp", "=", "all_inp", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "batch_pos", "=", "all_pos", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "batches", ".", "append", "(", "(", "batch_u", ",", "batch_inp", ",", "batch_pos", ")", ")", "\n", "", "if", "num_batches", "*", "batch_size", "<", "len", "(", "all_u", ")", ":", "\n", "        ", "batches", ".", "append", "(", "(", "all_u", "[", "num_batches", "*", "batch_size", ":", "]", ",", "all_inp", "[", "num_batches", "*", "batch_size", ":", "]", ",", "all_pos", "[", "num_batches", "*", "batch_size", ":", "]", ")", ")", "\n", "\n", "", "return", "batches", "\n", "\n", "", "def", "preprocess_session", "(", "dname", ")", ":", "\n", "    ", "'''\n    The model can be applied for session-based recommendation, where a sequence is seen as a user's history.\n    The data should contain three columns, i.e., SessionId, ItemId and Time with Tab as separator.\n    '''", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_path", "+", "dname", "+", "'/'", "+", "dname", "+", "'.tsv'", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "data", ".", "columns", "=", "[", "'SessionId'", ",", "'ItemId'", ",", "'Time'", "]", "\n", "session_lengths", "=", "data", ".", "groupby", "(", "'SessionId'", ")", ".", "size", "(", ")", "\n", "data", "=", "data", "[", "np", ".", "in1d", "(", "data", ".", "SessionId", ",", "session_lengths", "[", "session_lengths", ">", "2", "]", ".", "index", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.utils.preprocess_session": [[131, 174], ["pandas.read_csv", "pd.read_csv.groupby().size", "pd.read_csv.groupby().size", "print", "pd.read_csv.groupby().size", "print", "pd.read_csv.groupby().size", "print", "pd.read_csv.groupby().Time.max", "pd.read_csv.Time.max", "test.groupby().size", "test.SessionId.unique", "numpy.random.choice", "print", "print", "print", "train.to_csv", "test_.to_csv", "val_.to_csv", "int", "pd.read_csv.groupby", "numpy.in1d", "pd.read_csv.groupby", "numpy.in1d", "pd.read_csv.ItemId.nunique", "pd.read_csv.groupby", "data.groupby().size.mean", "numpy.in1d", "pd.read_csv.groupby", "data.groupby().size.mean", "numpy.in1d", "numpy.in1d", "numpy.in1d", "test.groupby", "numpy.in1d", "test[].isin", "len", "len", "len", "pd.read_csv.groupby", "len", "test[].isin"], "function", ["None"], ["item_supports", "=", "data", ".", "groupby", "(", "'ItemId'", ")", ".", "size", "(", ")", "\n", "data", "=", "data", "[", "np", ".", "in1d", "(", "data", ".", "ItemId", ",", "item_supports", "[", "item_supports", ">=", "10", "]", ".", "index", ")", "]", "\n", "print", "(", "'Unique items: {}'", ".", "format", "(", "data", ".", "ItemId", ".", "nunique", "(", ")", ")", ")", "\n", "\n", "session_lengths", "=", "data", ".", "groupby", "(", "'SessionId'", ")", ".", "size", "(", ")", "\n", "print", "(", "'Average session length: {}'", ".", "format", "(", "session_lengths", ".", "mean", "(", ")", ")", ")", "\n", "data", "=", "data", "[", "np", ".", "in1d", "(", "data", ".", "SessionId", ",", "session_lengths", "[", "session_lengths", ">", "2", "]", ".", "index", ")", "]", "\n", "\n", "session_lengths", "=", "data", ".", "groupby", "(", "'SessionId'", ")", ".", "size", "(", ")", "\n", "print", "(", "'Average session length after removing sessions with less than two event: {}'", ".", "format", "(", "session_lengths", ".", "mean", "(", ")", ")", ")", "\n", "\n", "session_max_times", "=", "data", ".", "groupby", "(", "'SessionId'", ")", ".", "Time", ".", "max", "(", ")", "\n", "tmax", "=", "data", ".", "Time", ".", "max", "(", ")", "\n", "session_train", "=", "session_max_times", "[", "session_max_times", "<", "tmax", "-", "86400", "*", "2", "]", ".", "index", "# We preserve sessions of last two days as validation and test data", "\n", "session_test", "=", "session_max_times", "[", "session_max_times", ">=", "tmax", "-", "86400", "*", "2", "]", ".", "index", "\n", "train", "=", "data", "[", "np", ".", "in1d", "(", "data", ".", "SessionId", ",", "session_train", ")", "]", "\n", "test", "=", "data", "[", "np", ".", "in1d", "(", "data", ".", "SessionId", ",", "session_test", ")", "]", "\n", "test", "=", "test", "[", "np", ".", "in1d", "(", "test", ".", "ItemId", ",", "train", ".", "ItemId", ")", "]", "\n", "\n", "tslength", "=", "test", ".", "groupby", "(", "'SessionId'", ")", ".", "size", "(", ")", "\n", "test", "=", "test", "[", "np", ".", "in1d", "(", "test", ".", "SessionId", ",", "tslength", "[", "tslength", ">", "2", "]", ".", "index", ")", "]", "\n", "\n", "test_session", "=", "test", ".", "SessionId", ".", "unique", "(", ")", "\n", "test_session_", "=", "np", ".", "random", ".", "choice", "(", "test_session", ",", "int", "(", "len", "(", "test_session", ")", "/", "2", ")", ",", "replace", "=", "False", ")", "\n", "test_", "=", "test", ".", "loc", "[", "test", "[", "'SessionId'", "]", ".", "isin", "(", "test_session_", ")", "]", "\n", "val_", "=", "test", ".", "loc", "[", "~", "test", "[", "'SessionId'", "]", ".", "isin", "(", "test_session_", ")", "]", "\n", "print", "(", "'Train size: {}'", ".", "format", "(", "len", "(", "train", ")", ")", ")", "\n", "print", "(", "'Dev size: {}'", ".", "format", "(", "len", "(", "val_", ")", ")", ")", "\n", "print", "(", "'Test size: {}'", ".", "format", "(", "len", "(", "test_", ")", ")", ")", "\n", "\n", "columns", "=", "[", "'SessionId'", ",", "'ItemId'", ",", "'Time'", "]", "\n", "header", "=", "[", "'UserId'", ",", "'ItemId'", ",", "'Time'", "]", "\n", "train", ".", "to_csv", "(", "data_path", "+", "dname", "+", "'/'", "+", "dname", "+", "'_train_tr.txt'", ",", "sep", "=", "'\\t'", ",", "columns", "=", "columns", ",", "header", "=", "header", ",", "index", "=", "False", ")", "\n", "test_", ".", "to_csv", "(", "data_path", "+", "dname", "+", "'/'", "+", "dname", "+", "'_test.txt'", ",", "sep", "=", "'\\t'", ",", "columns", "=", "columns", ",", "header", "=", "header", ",", "index", "=", "False", ")", "\n", "val_", ".", "to_csv", "(", "data_path", "+", "dname", "+", "'/'", "+", "dname", "+", "'_train_valid.txt'", ",", "sep", "=", "'\\t'", ",", "columns", "=", "columns", ",", "header", "=", "header", ",", "index", "=", "False", ")", "\n", "\n", "\n", "", "def", "preprocess_sequence", "(", "dname", ")", ":", "\n", "    ", "'''\n    For sequential recommendation.\n    The data should contain three columns, i.e., user, item and Time with Tab as separator.\n    '''", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_path", "+", "dname", "+", "'/'", "+", "dname", "+", "'.tsv'", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "data", ".", "columns", "=", "[", "'user'", ",", "'item'", ",", "'Time'", "]", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.markovChains.utils.preprocess_sequence": [[176, 246], ["pandas.read_csv", "pd.read_csv.groupby().size", "print", "pd.read_csv.groupby().size", "print", "pd.read_csv.groupby().size", "pd.read_csv.groupby().size", "print", "pd.read_csv.Time.min", "pd.read_csv.Time.max", "train.groupby().size", "print", "train.user.unique", "train.item.unique", "test.groupby().size", "print", "test.user.unique", "numpy.random.choice", "print", "print", "print", "train.to_csv", "test_.to_csv", "val_.to_csv", "pd.read_csv.TimeStr.apply", "int", "pd.read_csv.groupby", "data.groupby().size.mean", "numpy.in1d", "pd.read_csv.groupby", "numpy.in1d", "pd.read_csv.item.nunique", "pd.read_csv.groupby", "numpy.in1d", "pd.read_csv.groupby", "data.groupby().size.mean", "train.groupby", "numpy.in1d", "train.groupby().size.mean", "test[].isin", "test[].isin", "test.groupby", "numpy.in1d", "test.groupby().size.mean", "test[].isin", "len", "len", "len", "datetime.datetime.strptime().timestamp", "pd.read_csv.TimeStr.apply", "len", "test[].isin", "pd.read_csv.TimeStr.apply", "datetime.datetime.strptime", "datetime.datetime.strptime().timestamp", "datetime.datetime.strptime().timestamp", "datetime.datetime.strptime", "datetime.datetime.strptime"], "function", ["None"], ["event_lengths", "=", "data", ".", "groupby", "(", "'user'", ")", ".", "size", "(", ")", "\n", "print", "(", "'Average check-ins per user: {}'", ".", "format", "(", "event_lengths", ".", "mean", "(", ")", ")", ")", "\n", "data", "=", "data", "[", "np", ".", "in1d", "(", "data", ".", "user", ",", "event_lengths", "[", "event_lengths", ">", "10", "]", ".", "index", ")", "]", "\n", "\n", "item_supports", "=", "data", ".", "groupby", "(", "'item'", ")", ".", "size", "(", ")", "\n", "# 50 for delicious, 10 for gowalla", "\n", "data", "=", "data", "[", "np", ".", "in1d", "(", "data", ".", "item", ",", "item_supports", "[", "item_supports", ">=", "10", "]", ".", "index", ")", "]", "\n", "print", "(", "'Unique items: {}'", ".", "format", "(", "data", ".", "item", ".", "nunique", "(", ")", ")", ")", "\n", "\n", "event_lengths", "=", "data", ".", "groupby", "(", "'user'", ")", ".", "size", "(", ")", "\n", "data", "=", "data", "[", "np", ".", "in1d", "(", "data", ".", "user", ",", "event_lengths", "[", "event_lengths", ">=", "10", "]", ".", "index", ")", "]", "\n", "\n", "event_lengths", "=", "data", ".", "groupby", "(", "'user'", ")", ".", "size", "(", ")", "\n", "print", "(", "'Average check-ins per user after removing sessions with one event: {}'", ".", "format", "(", "event_lengths", ".", "mean", "(", ")", ")", ")", "\n", "\n", "tmin", "=", "data", ".", "Time", ".", "min", "(", ")", "\n", "tmax", "=", "data", ".", "Time", ".", "max", "(", ")", "\n", "pivot", "=", "(", "tmax", "-", "tmin", ")", "*", "0.9", "+", "tmin", "# Preserve last 10% as validation and test data", "\n", "train", "=", "data", ".", "loc", "[", "data", "[", "'Time'", "]", "<", "pivot", "]", "\n", "test", "=", "data", ".", "loc", "[", "data", "[", "'Time'", "]", ">=", "pivot", "]", "\n", "\n", "tr_event_lengths", "=", "train", ".", "groupby", "(", "'user'", ")", ".", "size", "(", ")", "\n", "train", "=", "train", "[", "np", ".", "in1d", "(", "train", ".", "user", ",", "tr_event_lengths", "[", "tr_event_lengths", ">", "3", "]", ".", "index", ")", "]", "\n", "print", "(", "'Average (train) check-ins per user: {}'", ".", "format", "(", "tr_event_lengths", ".", "mean", "(", ")", ")", ")", "\n", "\n", "user_to_predict", "=", "train", ".", "user", ".", "unique", "(", ")", "\n", "test", "=", "test", "[", "test", "[", "'user'", "]", ".", "isin", "(", "user_to_predict", ")", "]", "\n", "item_to_predict", "=", "train", ".", "item", ".", "unique", "(", ")", "\n", "test", "=", "test", "[", "test", "[", "'item'", "]", ".", "isin", "(", "item_to_predict", ")", "]", "\n", "test_event_lengths", "=", "test", ".", "groupby", "(", "'user'", ")", ".", "size", "(", ")", "\n", "test", "=", "test", "[", "np", ".", "in1d", "(", "test", ".", "user", ",", "test_event_lengths", "[", "test_event_lengths", ">", "3", "]", ".", "index", ")", "]", "\n", "print", "(", "'Average (test) check-ins per user: {}'", ".", "format", "(", "test_event_lengths", ".", "mean", "(", ")", ")", ")", "\n", "\n", "\n", "test_user", "=", "test", ".", "user", ".", "unique", "(", ")", "\n", "test_user_", "=", "np", ".", "random", ".", "choice", "(", "test_user", ",", "int", "(", "len", "(", "test_user", ")", "/", "2", ")", ",", "replace", "=", "False", ")", "\n", "test_", "=", "test", ".", "loc", "[", "test", "[", "'user'", "]", ".", "isin", "(", "test_user_", ")", "]", "\n", "val_", "=", "test", ".", "loc", "[", "~", "test", "[", "'user'", "]", ".", "isin", "(", "test_user_", ")", "]", "\n", "print", "(", "'Train size: {}'", ".", "format", "(", "len", "(", "train", ")", ")", ")", "\n", "print", "(", "'Dev size: {}'", ".", "format", "(", "len", "(", "val_", ")", ")", ")", "\n", "print", "(", "'Test size: {}'", ".", "format", "(", "len", "(", "test_", ")", ")", ")", "\n", "\n", "\n", "columns", "=", "[", "'user'", ",", "'item'", ",", "'Time'", "]", "\n", "header", "=", "[", "'UserId'", ",", "'ItemId'", ",", "'Time'", "]", "\n", "train", ".", "to_csv", "(", "data_path", "+", "dname", "+", "'/'", "+", "dname", "+", "'_train_tr.txt'", ",", "sep", "=", "'\\t'", ",", "columns", "=", "columns", ",", "header", "=", "header", ",", "index", "=", "False", ")", "\n", "test_", ".", "to_csv", "(", "data_path", "+", "dname", "+", "'/'", "+", "dname", "+", "'_test.txt'", ",", "sep", "=", "'\\t'", ",", "columns", "=", "columns", ",", "header", "=", "header", ",", "index", "=", "False", ")", "\n", "val_", ".", "to_csv", "(", "data_path", "+", "dname", "+", "'/'", "+", "dname", "+", "'_train_valid.txt'", ",", "sep", "=", "'\\t'", ",", "columns", "=", "columns", ",", "header", "=", "header", ",", "index", "=", "False", ")", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "preprocess_sequence", "(", "'gowalla'", ")", "\n", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.aggregators.MeanAggregator.__init__": [[15, 46], ["layers.Layer.__init__", "tensorflow.variable_scope", "inits.glorot", "inits.glorot", "aggregators.MeanAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.__init__", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.glorot", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.glorot", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.layers.Layer._log_vars", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MeanAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "neigh_input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.aggregators.MeanAggregator._call": [[47, 69], ["tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.reduce_mean", "tensorflow.matmul", "tensorflow.matmul", "aggregators.MeanAggregator.act", "tensorflow.add_n", "tensorflow.concat"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "\n", "neigh_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "neigh_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "self_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "self_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "neigh_means", "=", "tf", ".", "reduce_mean", "(", "neigh_vecs", ",", "axis", "=", "1", ")", "\n", "\n", "# [nodes] x [out_dim]", "\n", "from_neighs", "=", "tf", ".", "matmul", "(", "neigh_means", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.aggregators.GCNAggregator.__init__": [[76, 104], ["layers.Layer.__init__", "tensorflow.variable_scope", "inits.glorot", "aggregators.GCNAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.__init__", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.glorot", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.layers.Layer._log_vars", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GCNAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'weights'", "]", "=", "glorot", "(", "[", "neigh_input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.aggregators.GCNAggregator._call": [[105, 121], ["tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.reduce_mean", "tensorflow.matmul", "aggregators.GCNAggregator.act", "tensorflow.concat", "tensorflow.expand_dims"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "\n", "neigh_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "neigh_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "self_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "self_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "means", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "concat", "(", "[", "neigh_vecs", ",", "\n", "tf", ".", "expand_dims", "(", "self_vecs", ",", "axis", "=", "1", ")", "]", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "\n", "# [nodes] x [out_dim]", "\n", "output", "=", "tf", ".", "matmul", "(", "means", ",", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "\n", "# bias", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.aggregators.AttentionAggregator.__init__": [[125, 154], ["layers.Layer.__init__", "tensorflow.variable_scope", "inits.glorot", "aggregators.AttentionAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.__init__", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.glorot", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.layers.Layer._log_vars", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttentionAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'weights'", "]", "=", "glorot", "(", "[", "neigh_input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'neigh_bias'", ")", "\n", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.aggregators.AttentionAggregator._call": [[155, 179], ["tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.squeeze", "tensorflow.matmul", "aggregators.AttentionAggregator.act"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "\n", "neigh_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "neigh_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "self_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "self_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "\n", "# Reshape from [batch_size, depth] to [batch_size, 1, depth] for matmul.", "\n", "query", "=", "tf", ".", "expand_dims", "(", "self_vecs", ",", "1", ")", "\n", "neigh_self_vecs", "=", "tf", ".", "concat", "(", "[", "neigh_vecs", ",", "query", "]", ",", "axis", "=", "1", ")", "\n", "score", "=", "tf", ".", "matmul", "(", "query", ",", "neigh_self_vecs", ",", "transpose_b", "=", "True", ")", "\n", "score", "=", "tf", ".", "nn", ".", "softmax", "(", "score", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# alignment(score) shape is [batch_size, 1, depth]", "\n", "context", "=", "tf", ".", "matmul", "(", "score", ",", "neigh_self_vecs", ")", "\n", "context", "=", "tf", ".", "squeeze", "(", "context", ",", "[", "1", "]", ")", "\n", "\n", "# [nodes] x [out_dim]", "\n", "output", "=", "tf", ".", "matmul", "(", "context", ",", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "\n", "# bias", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.aggregators.MaxPoolingAggregator.__init__": [[184, 229], ["layers.Layer.__init__", "aggregators.MaxPoolingAggregator.mlp_layers.append", "layers.Dense", "tensorflow.variable_scope", "inits.glorot", "inits.glorot", "aggregators.MaxPoolingAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.__init__", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.glorot", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.glorot", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.layers.Layer._log_vars", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "model_size", "=", "\"small\"", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MaxPoolingAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "if", "model_size", "==", "\"small\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "512", "\n", "", "elif", "model_size", "==", "\"big\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "1024", "\n", "\n", "", "self", ".", "mlp_layers", "=", "[", "]", "\n", "self", ".", "mlp_layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "neigh_input_dim", ",", "\n", "output_dim", "=", "hidden_dim", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "dropout", ",", "\n", "sparse_inputs", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "hidden_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "neigh_input_dim", "=", "neigh_input_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.aggregators.MaxPoolingAggregator._call": [[230, 258], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_max", "tensorflow.matmul", "tensorflow.matmul", "aggregators.MaxPoolingAggregator.act", "l", "tensorflow.add_n", "tensorflow.concat"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "neigh_h", "=", "neigh_vecs", "\n", "\n", "dims", "=", "tf", ".", "shape", "(", "neigh_h", ")", "\n", "batch_size", "=", "dims", "[", "0", "]", "\n", "num_neighbors", "=", "dims", "[", "1", "]", "\n", "# [nodes * sampled neighbors] x [hidden_dim]", "\n", "h_reshaped", "=", "tf", ".", "reshape", "(", "neigh_h", ",", "(", "batch_size", "*", "num_neighbors", ",", "self", ".", "neigh_input_dim", ")", ")", "\n", "\n", "for", "l", "in", "self", ".", "mlp_layers", ":", "\n", "            ", "h_reshaped", "=", "l", "(", "h_reshaped", ")", "\n", "", "neigh_h", "=", "tf", ".", "reshape", "(", "h_reshaped", ",", "(", "batch_size", ",", "num_neighbors", ",", "self", ".", "hidden_dim", ")", ")", "\n", "neigh_h", "=", "tf", ".", "reduce_max", "(", "neigh_h", ",", "axis", "=", "1", ")", "\n", "\n", "from_neighs", "=", "tf", ".", "matmul", "(", "neigh_h", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.aggregators.MeanPoolingAggregator.__init__": [[263, 308], ["layers.Layer.__init__", "aggregators.MeanPoolingAggregator.mlp_layers.append", "layers.Dense", "tensorflow.variable_scope", "inits.glorot", "inits.glorot", "aggregators.MeanPoolingAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.__init__", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.glorot", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.glorot", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.layers.Layer._log_vars", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "model_size", "=", "\"small\"", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MeanPoolingAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "if", "model_size", "==", "\"small\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "512", "\n", "", "elif", "model_size", "==", "\"big\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "1024", "\n", "\n", "", "self", ".", "mlp_layers", "=", "[", "]", "\n", "self", ".", "mlp_layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "neigh_input_dim", ",", "\n", "output_dim", "=", "hidden_dim", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "dropout", ",", "\n", "sparse_inputs", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "hidden_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "neigh_input_dim", "=", "neigh_input_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.aggregators.MeanPoolingAggregator._call": [[309, 337], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.matmul", "tensorflow.matmul", "aggregators.MeanPoolingAggregator.act", "l", "tensorflow.add_n", "tensorflow.concat"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "neigh_h", "=", "neigh_vecs", "\n", "\n", "dims", "=", "tf", ".", "shape", "(", "neigh_h", ")", "\n", "batch_size", "=", "dims", "[", "0", "]", "\n", "num_neighbors", "=", "dims", "[", "1", "]", "\n", "# [nodes * sampled neighbors] x [hidden_dim]", "\n", "h_reshaped", "=", "tf", ".", "reshape", "(", "neigh_h", ",", "(", "batch_size", "*", "num_neighbors", ",", "self", ".", "neigh_input_dim", ")", ")", "\n", "\n", "for", "l", "in", "self", ".", "mlp_layers", ":", "\n", "            ", "h_reshaped", "=", "l", "(", "h_reshaped", ")", "\n", "", "neigh_h", "=", "tf", ".", "reshape", "(", "h_reshaped", ",", "(", "batch_size", ",", "num_neighbors", ",", "self", ".", "hidden_dim", ")", ")", "\n", "neigh_h", "=", "tf", ".", "reduce_mean", "(", "neigh_h", ",", "axis", "=", "1", ")", "\n", "\n", "from_neighs", "=", "tf", ".", "matmul", "(", "neigh_h", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.neigh_samplers.UniformNeighborSampler.__init__": [[15, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "adj_info", ",", "visible_time", ",", "deg", ")", ":", "\n", "        ", "self", ".", "adj_info", "=", "adj_info", "\n", "self", ".", "visible_time", "=", "visible_time", "\n", "self", ".", "deg", "=", "deg", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.neigh_samplers.UniformNeighborSampler.__call__": [[20, 45], ["range", "numpy.array", "len", "adj_lists.append", "len", "len", "numpy.random.choice", "len", "numpy.random.choice", "numpy.random.choice.append", "numpy.random.choice.append"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "nodeids", ",", "num_samples", ",", "timeids", ",", "first_or_second", ",", "support_size", "=", "inputs", "\n", "adj_lists", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "nodeids", ")", ")", ":", "\n", "            ", "node", "=", "nodeids", "[", "idx", "]", "\n", "timeid", "=", "timeids", "[", "idx", "//", "support_size", "]", "\n", "adj", "=", "self", ".", "adj_info", "[", "node", ",", ":", "]", "\n", "neighbors", "=", "[", "]", "\n", "for", "neighbor", "in", "adj", ":", "\n", "                ", "if", "first_or_second", "==", "'second'", ":", "\n", "                    ", "if", "self", ".", "visible_time", "[", "neighbor", "]", "<=", "timeid", ":", "\n", "                        ", "neighbors", ".", "append", "(", "neighbor", ")", "\n", "", "", "elif", "first_or_second", "==", "'first'", ":", "\n", "                    ", "if", "self", ".", "visible_time", "[", "neighbor", "]", "<=", "timeid", "and", "self", ".", "deg", "[", "neighbor", "]", ">", "0", ":", "\n", "                        ", "for", "second_neighbor", "in", "self", ".", "adj_info", "[", "neighbor", "]", ":", "\n", "                            ", "if", "self", ".", "visible_time", "[", "second_neighbor", "]", "<=", "timeid", ":", "\n", "                                ", "neighbors", ".", "append", "(", "neighbor", ")", "\n", "break", "\n", "", "", "", "", "", "assert", "len", "(", "neighbors", ")", ">", "0", "\n", "if", "len", "(", "neighbors", ")", "<", "num_samples", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "num_samples", ",", "replace", "=", "True", ")", "\n", "", "elif", "len", "(", "neighbors", ")", ">", "num_samples", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "num_samples", ",", "replace", "=", "False", ")", "\n", "", "adj_lists", ".", "append", "(", "neighbors", ")", "\n", "", "return", "np", ".", "array", "(", "adj_lists", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.train.evaluate": [[19, 32], ["minibatch.end_val", "minibatch.next_val_minibatch_feed_dict", "sess.run", "epoch_val_cost.append", "epoch_val_recall.append", "epoch_val_ndcg.append", "epoch_val_point.append", "numpy.mean", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.end_val", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.next_val_minibatch_feed_dict"], ["parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'tcn'", ",", "help", "=", "'sequential model: rnn/tcn/transformer. (default: tcn)'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "'batch size (default: 128)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seq_len'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'max sequence length (default: 20)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'dropout (default: 0.2)'", ")", "\n", "parser", ".", "add_argument", "(", "'--l2_reg'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'regularization scale (default: 0.0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip'", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "help", "=", "'gradient clip (default: 1.)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'upper epoch limit (default: 20)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'initial learning rate for Adam (default: 0.001)'", ")", "\n", "parser", ".", "add_argument", "(", "'--emsize'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'dimension of item embedding (default: 100)'", ")", "\n", "parser", ".", "add_argument", "(", "'--neg_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'size of negative samples (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--worker'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'number of sampling workers (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--nhid'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'number of hidden units (default: 100)'", ")", "\n", "parser", ".", "add_argument", "(", "'--levels'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of levels (default: 3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1111", ",", "help", "=", "'random seed (default: 1111)'", ")", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.train.construct_placeholders": [[33, 51], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "function", ["None"], ["parser", ".", "add_argument", "(", "'--loss'", ",", "type", "=", "str", ",", "default", "=", "'ns'", ",", "help", "=", "'type of loss: ns/sampled_sm/full_sm (default: ns)'", ")", "\n", "parser", ".", "add_argument", "(", "'--data'", ",", "type", "=", "str", ",", "default", "=", "'gowalla'", ",", "help", "=", "'data set name (default: gowalla)'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "1e2", ",", "help", "=", "'log interval (default: 1e2)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_interval'", ",", "type", "=", "int", ",", "default", "=", "1e3", ",", "help", "=", "'eval/test interval (default: 1e3)'", ")", "\n", "\n", "# ****************************** unique arguments for rnn model. *******************************************************", "\n", "# None", "\n", "\n", "# ***************************** unique arguemnts for tcn model.", "\n", "parser", ".", "add_argument", "(", "'--ksize'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'kernel size (default: 100)'", ")", "\n", "\n", "# ****************************** unique arguments for transformer model. *************************************************", "\n", "parser", ".", "add_argument", "(", "'--num_blocks'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'num_blocks'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_heads'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'num_heads'", ")", "\n", "parser", ".", "add_argument", "(", "'--pos_fixed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'trainable positional embedding usually has better performance'", ")", "\n", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "tf", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.train.train": [[52, 165], ["len", "train.construct_placeholders", "os.path.join", "minibatch.MinibatchIterator", "model.DGRec", "tensorflow.ConfigProto", "tensorflow.Session", "tf.Session.run", "tensorflow.train.Saver", "time.time", "range", "time.time", "print", "print", "print", "train.evaluate", "print", "len", "os.path.exists", "os.makedirs", "tensorflow.global_variables_initializer", "tensorflow.global_variables", "minibatch.MinibatchIterator.shuffle", "print", "len", "time.time", "minibatch.MinibatchIterator.next_train_minibatch_feed_dict", "tf.Session.run", "epoch_train_cost.append", "epoch_train_recall.append", "epoch_train_ndcg.append", "epoch_train_point.append", "print", "minibatch.MinibatchIterator.end", "train.evaluate", "epoch_val_cost.append", "epoch_val_recall.append", "epoch_val_ndcg.append", "print", "sys.stdout.flush", "tf.train.Saver.save", "print", "time.time", "numpy.mean", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.test.construct_placeholders", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.evaluate", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.shuffle", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.next_train_minibatch_feed_dict", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.end", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.evaluate"], ["\n", "train_data", ",", "val_data", ",", "test_data", ",", "n_items", ",", "n_users", "=", "data_generator", "(", "args", ")", "\n", "\n", "train_sampler", "=", "Sampler", "(", "\n", "data", "=", "train_data", ",", "\n", "n_items", "=", "n_items", ",", "\n", "n_users", "=", "n_users", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "max_len", "=", "args", ".", "seq_len", ",", "\n", "neg_size", "=", "args", ".", "neg_size", ",", "\n", "n_workers", "=", "args", ".", "worker", ",", "\n", "neg_method", "=", "'rand'", ")", "\n", "\n", "val_data", "=", "prepare_eval_test", "(", "val_data", ",", "batch_size", "=", "100", ",", "max_test_len", "=", "20", ")", "\n", "\n", "checkpoint_dir", "=", "'_'", ".", "join", "(", "[", "'save'", ",", "args", ".", "data", ",", "args", ".", "model", ",", "str", "(", "args", ".", "lr", ")", ",", "str", "(", "args", ".", "l2_reg", ")", ",", "str", "(", "args", ".", "emsize", ")", ",", "str", "(", "args", ".", "dropout", ")", "]", ")", "\n", "\n", "print", "(", "args", ")", "\n", "print", "(", "'#Item: '", ",", "n_items", ")", "\n", "print", "(", "'#User: '", ",", "n_users", ")", "\n", "\n", "model", "=", "NeuralSeqRecommender", "(", "args", ",", "n_items", ",", "n_users", ")", "\n", "\n", "lr", "=", "args", ".", "lr", "\n", "\n", "def", "evaluate", "(", "source", ",", "sess", ")", ":", "\n", "    ", "total_hit_k", "=", "0.0", "\n", "total_ndcg_k", "=", "0.0", "\n", "count", "=", "0.0", "\n", "for", "batch", "in", "source", ":", "\n", "        ", "feed_dict", "=", "{", "model", ".", "inp", ":", "batch", "[", "1", "]", ",", "model", ".", "dropout", ":", "0.", "}", "\n", "feed_dict", "[", "model", ".", "pos", "]", "=", "batch", "[", "2", "]", "\n", "hit", ",", "ndcg", ",", "n_target", "=", "sess", ".", "run", "(", "[", "model", ".", "hit_at_k", ",", "model", ".", "ndcg_at_k", ",", "model", ".", "num_target", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "count", "+=", "n_target", "\n", "total_hit_k", "+=", "hit", "\n", "total_ndcg_k", "+=", "ndcg", "\n", "\n", "", "val_hit", "=", "total_hit_k", "/", "count", "\n", "val_ndcg", "=", "total_ndcg_k", "/", "count", "\n", "\n", "return", "[", "val_hit", ",", "val_ndcg", "]", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "global", "lr", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "all_val_hit", "=", "[", "-", "1", "]", "\n", "early_stop_cn", "=", "0", "\n", "step_count", "=", "0", "\n", "train_loss_l", "=", "0.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Start training...'", ")", "\n", "try", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "cur_batch", "=", "train_sampler", ".", "next_batch", "(", ")", "\n", "inp", "=", "np", ".", "array", "(", "cur_batch", "[", "1", "]", ")", "\n", "feed_dict", "=", "{", "model", ".", "inp", ":", "inp", ",", "model", ".", "lr", ":", "lr", ",", "model", ".", "dropout", ":", "args", ".", "dropout", "}", "\n", "feed_dict", "[", "model", ".", "pos", "]", "=", "np", ".", "array", "(", "cur_batch", "[", "2", "]", ")", "\n", "feed_dict", "[", "model", ".", "neg", "]", "=", "np", ".", "array", "(", "cur_batch", "[", "3", "]", ")", "\n", "_", ",", "train_loss", "=", "sess", ".", "run", "(", "[", "model", ".", "train_op", ",", "model", ".", "loss", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "train_loss_l", "+=", "train_loss", "\n", "step_count", "+=", "1", "\n", "if", "step_count", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "                ", "cur_loss", "=", "train_loss_l", "/", "args", ".", "log_interval", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "'| Totol step {:10d} | lr {:02.5f} | ms/batch {:5.2f} | loss {:5.3f}'", ".", "format", "(", "\n", "step_count", ",", "lr", ",", "elapsed", "*", "1000", "/", "args", ".", "log_interval", ",", "cur_loss", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "train_loss_l", "=", "0.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "if", "step_count", "%", "args", ".", "eval_interval", "==", "0", ":", "\n", "                ", "val_hit", ",", "val_ndcg", "=", "evaluate", "(", "val_data", ",", "sess", ")", "\n", "all_val_hit", ".", "append", "(", "val_hit", ")", "\n", "print", "(", "'-'", "*", "90", ")", "\n", "print", "(", "'| End of step {:10d} | valid hit@20 {:8.5f} | valid ndcg@20 {:8.5f}'", ".", "format", "(", "\n", "step_count", ",", "val_hit", ",", "val_ndcg", ")", ")", "\n", "print", "(", "'='", "*", "90", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "if", "all_val_hit", "[", "-", "1", "]", "<=", "all_val_hit", "[", "-", "2", "]", ":", "\n", "                    ", "lr", "/=", "2.", "\n", "lr", "=", "max", "(", "lr", ",", "1e-6", ")", "\n", "early_stop_cn", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "early_stop_cn", "=", "0", "\n", "model", ".", "saver", ".", "save", "(", "sess", ",", "checkpoint_dir", "+", "'/model.ckpt'", ")", "\n", "", "if", "early_stop_cn", "==", "3", ":", "\n", "                    ", "print", "(", "'Validation hit decreases in three consecutive epochs. Stop Training!'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "break", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "str", "(", "e", ")", ")", "\n", "train_sampler", ".", "close", "(", ")", "\n", "exit", "(", "1", ")", "\n", "", "train_sampler", ".", "close", "(", ")", "\n", "print", "(", "'Done'", ")", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "checkpoint_dir", ")", "\n", "", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.train.parseArgs": [[194, 254], ["train.Args", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.train.parse_args"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.train.main": [[255, 261], ["train.parseArgs", "print", "utils.load_data", "print", "train.train"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.test.parseArgs", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.utils.load_data", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.train.train"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.layers.Layer.__init__": [[40, 53], ["kwargs.keys", "kwargs.get", "kwargs.get", "layers.Layer.__class__.__name__.lower", "str", "layers.get_layer_uid"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.layers.get_layer_uid"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "allowed_kwargs", "=", "{", "'name'", ",", "'logging'", ",", "'model_size'", "}", "\n", "for", "kwarg", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "kwarg", "in", "allowed_kwargs", ",", "'Invalid keyword argument: '", "+", "kwarg", "\n", "", "name", "=", "kwargs", ".", "get", "(", "'name'", ")", "\n", "if", "not", "name", ":", "\n", "            ", "layer", "=", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", "\n", "name", "=", "layer", "+", "'_'", "+", "str", "(", "get_layer_uid", "(", "layer", ")", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "self", ".", "vars", "=", "{", "}", "\n", "logging", "=", "kwargs", ".", "get", "(", "'logging'", ",", "False", ")", "\n", "self", ".", "logging", "=", "logging", "\n", "self", ".", "sparse_inputs", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.layers.Layer._call": [[54, 56], ["None"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.layers.Layer.__call__": [[57, 65], ["tensorflow.name_scope", "layers.Layer._call", "tensorflow.summary.histogram", "tensorflow.summary.histogram"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.layers.Dense._call"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "if", "self", ".", "logging", "and", "not", "self", ".", "sparse_inputs", ":", "\n", "                ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/inputs'", ",", "inputs", ")", "\n", "", "outputs", "=", "self", ".", "_call", "(", "inputs", ")", "\n", "if", "self", ".", "logging", ":", "\n", "                ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/outputs'", ",", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.layers.Layer._log_vars": [[66, 69], ["tensorflow.summary.histogram"], "methods", ["None"], ["", "", "def", "_log_vars", "(", "self", ")", ":", "\n", "        ", "for", "var", "in", "self", ".", "vars", ":", "\n", "            ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/vars/'", "+", "var", ",", "self", ".", "vars", "[", "var", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.layers.Dense.__init__": [[73, 102], ["layers.Layer.__init__", "tensorflow.variable_scope", "tensorflow.get_variable", "layers.Dense._log_vars", "inits.zeros", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.l2_regularizer"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.__init__", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.layers.Layer._log_vars", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "dropout", "=", "0.", ",", "weight_decay", "=", "0.", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "placeholders", "=", "None", ",", "bias", "=", "True", ",", "featureless", "=", "False", ",", "\n", "sparse_inputs", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Dense", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "featureless", "=", "featureless", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "# helper variable for sparse dropout", "\n", "self", ".", "sparse_inputs", "=", "sparse_inputs", "\n", "if", "sparse_inputs", ":", "\n", "            ", "self", ".", "num_features_nonzero", "=", "placeholders", "[", "'num_features_nonzero'", "]", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'weights'", "]", "=", "tf", ".", "get_variable", "(", "'weights'", ",", "shape", "=", "(", "input_dim", ",", "output_dim", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "self", ".", "weight_decay", ")", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.layers.Dense._call": [[103, 116], ["tensorflow.nn.dropout", "tensorflow.matmul", "layers.Dense.act"], "methods", ["None"], ["", "", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "\n", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "1", "-", "self", ".", "dropout", ")", "\n", "\n", "# transform", "\n", "output", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "\n", "# bias", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.layers.get_layer_uid": [[17, 25], ["None"], "function", ["None"], ["def", "get_layer_uid", "(", "layer_name", "=", "''", ")", ":", "\n", "    ", "\"\"\"Helper function, assigns unique layer IDs.\"\"\"", "\n", "if", "layer_name", "not", "in", "_LAYER_UIDS", ":", "\n", "        ", "_LAYER_UIDS", "[", "layer_name", "]", "=", "1", "\n", "return", "1", "\n", "", "else", ":", "\n", "        ", "_LAYER_UIDS", "[", "layer_name", "]", "+=", "1", "\n", "return", "_LAYER_UIDS", "[", "layer_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.__init__": [[15, 55], ["pandas.concat", "minibatch.MinibatchIterator.user_visible_time", "minibatch.MinibatchIterator.construct_test_adj", "minibatch.MinibatchIterator._remove_infoless", "minibatch.MinibatchIterator._padding_sessions", "neigh_samplers.UniformNeighborSampler", "minibatch.MinibatchIterator.construct_adj", "minibatch.MinibatchIterator._remove_infoless", "minibatch.MinibatchIterator._remove_infoless", "neigh_samplers.UniformNeighborSampler"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.user_visible_time", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.construct_test_adj", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator._remove_infoless", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator._padding_sessions", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.construct_adj", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator._remove_infoless", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator._remove_infoless"], ["    ", "def", "__init__", "(", "self", ",", "\n", "adj_info", ",", "# in pandas dataframe", "\n", "latest_sessions", ",", "\n", "data", ",", "# data list, either [train, valid] or [train, valid, test].", "\n", "placeholders", ",", "\n", "batch_size", ",", "\n", "max_degree", ",", "\n", "num_nodes", ",", "\n", "max_length", "=", "20", ",", "\n", "samples_1_2", "=", "[", "10", ",", "5", "]", ",", "\n", "training", "=", "True", ")", ":", "\n", "        ", "self", ".", "num_layers", "=", "2", "# Currently, only 2 layer is supported.", "\n", "self", ".", "adj_info", "=", "adj_info", "\n", "self", ".", "latest_sessions", "=", "latest_sessions", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "train_df", ",", "self", ".", "valid_df", ",", "self", ".", "test_df", "=", "data", "\n", "self", ".", "all_data", "=", "pd", ".", "concat", "(", "data", ")", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "max_degree", "=", "max_degree", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "max_length", "=", "max_length", "\n", "self", ".", "samples_1_2", "=", "samples_1_2", "\n", "self", ".", "sizes", "=", "[", "1", ",", "samples_1_2", "[", "1", "]", ",", "samples_1_2", "[", "1", "]", "*", "samples_1_2", "[", "0", "]", "]", "\n", "self", ".", "visible_time", "=", "self", ".", "user_visible_time", "(", ")", "\n", "self", ".", "test_adj", ",", "self", ".", "test_deg", "=", "self", ".", "construct_test_adj", "(", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "adj", ",", "self", ".", "deg", "=", "self", ".", "construct_adj", "(", ")", "\n", "self", ".", "train_session_ids", "=", "self", ".", "_remove_infoless", "(", "self", ".", "train_df", ",", "self", ".", "adj", ",", "self", ".", "deg", ")", "\n", "self", ".", "valid_session_ids", "=", "self", ".", "_remove_infoless", "(", "self", ".", "valid_df", ",", "self", ".", "test_adj", ",", "self", ".", "test_deg", ")", "\n", "self", ".", "sampler", "=", "UniformNeighborSampler", "(", "self", ".", "adj", ",", "self", ".", "visible_time", ",", "self", ".", "deg", ")", "\n", "\n", "", "self", ".", "test_session_ids", "=", "self", ".", "_remove_infoless", "(", "self", ".", "test_df", ",", "self", ".", "test_adj", ",", "self", ".", "test_deg", ")", "\n", "\n", "self", ".", "padded_data", ",", "self", ".", "mask", "=", "self", ".", "_padding_sessions", "(", "self", ".", "all_data", ")", "\n", "self", ".", "test_sampler", "=", "UniformNeighborSampler", "(", "self", ".", "test_adj", ",", "self", ".", "visible_time", ",", "self", ".", "test_deg", ")", "\n", "\n", "self", ".", "batch_num", "=", "0", "\n", "self", ".", "batch_num_val", "=", "0", "\n", "self", ".", "batch_num_test", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.user_visible_time": [[56, 66], ["visible_time.append", "max", "len", "enumerate"], "methods", ["None"], ["", "def", "user_visible_time", "(", "self", ")", ":", "\n", "        ", "'''\n            Find out when each user is 'visible' to her friends, i.e., every user's first click/watching time.\n        '''", "\n", "visible_time", "=", "[", "]", "\n", "for", "l", "in", "self", ".", "latest_sessions", ":", "\n", "            ", "timeid", "=", "max", "(", "loc", "for", "loc", ",", "val", "in", "enumerate", "(", "l", ")", "if", "val", "==", "'NULL'", ")", "+", "1", "\n", "visible_time", ".", "append", "(", "timeid", ")", "\n", "assert", "timeid", ">", "0", "and", "timeid", "<", "len", "(", "l", ")", ",", "'Wrong when create visible time {}'", ".", "format", "(", "timeid", ")", "\n", "", "return", "visible_time", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator._remove_infoless": [[67, 91], ["print", "data.SessionId.unique", "sessid.split", "data.SessionId.nunique", "len", "int", "int", "reserved_session_ids.append"], "methods", ["None"], ["", "def", "_remove_infoless", "(", "self", ",", "data", ",", "adj", ",", "deg", ")", ":", "\n", "        ", "'''\n        Remove users who have no sufficient friends.\n        '''", "\n", "data", "=", "data", ".", "loc", "[", "deg", "[", "data", "[", "'UserId'", "]", "]", "!=", "0", "]", "\n", "reserved_session_ids", "=", "[", "]", "\n", "print", "(", "'sessions: {}\\tratings: {}'", ".", "format", "(", "data", ".", "SessionId", ".", "nunique", "(", ")", ",", "len", "(", "data", ")", ")", ")", "\n", "for", "sessid", "in", "data", ".", "SessionId", ".", "unique", "(", ")", ":", "\n", "            ", "userid", ",", "timeid", "=", "sessid", ".", "split", "(", "'_'", ")", "\n", "userid", ",", "timeid", "=", "int", "(", "userid", ")", ",", "int", "(", "timeid", ")", "\n", "cn_1", "=", "0", "\n", "for", "neighbor", "in", "adj", "[", "userid", ",", ":", "]", ":", "\n", "                ", "if", "self", ".", "visible_time", "[", "neighbor", "]", "<=", "timeid", "and", "deg", "[", "neighbor", "]", ">", "0", ":", "\n", "                    ", "cn_2", "=", "0", "\n", "for", "second_neighbor", "in", "adj", "[", "neighbor", ",", ":", "]", ":", "\n", "                        ", "if", "self", ".", "visible_time", "[", "second_neighbor", "]", "<=", "timeid", ":", "\n", "                            ", "break", "\n", "", "cn_2", "+=", "1", "\n", "", "if", "cn_2", "<", "self", ".", "max_degree", ":", "\n", "                        ", "break", "\n", "", "", "cn_1", "+=", "1", "\n", "", "if", "cn_1", "<", "self", ".", "max_degree", ":", "\n", "                ", "reserved_session_ids", ".", "append", "(", "sessid", ")", "\n", "", "", "return", "reserved_session_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator._padding_sessions": [[92, 116], ["[].apply().to_dict", "[].apply().to_dict.items", "numpy.ones", "v.extend", "numpy.array", "[].apply", "len", "len", "x.extend", "y.extend", "numpy.array", "numpy.array", "numpy.array", "len", "[].apply().to_dict.sort_values().groupby", "[].apply().to_dict.sort_values"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.ones"], ["", "def", "_padding_sessions", "(", "self", ",", "data", ")", ":", "\n", "        ", "'''\n        Pad zeros at the end of each session to length self.max_length for batch training.\n        '''", "\n", "data", "=", "data", ".", "sort_values", "(", "by", "=", "[", "'TimeId'", "]", ")", ".", "groupby", "(", "'SessionId'", ")", "[", "'ItemId'", "]", ".", "apply", "(", "list", ")", ".", "to_dict", "(", ")", "\n", "new_data", "=", "{", "}", "\n", "data_mask", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "mask", "=", "np", ".", "ones", "(", "self", ".", "max_length", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "x", "=", "v", "[", ":", "-", "1", "]", "\n", "y", "=", "v", "[", "1", ":", "]", "\n", "assert", "len", "(", "x", ")", ">", "0", "\n", "padded_len", "=", "self", ".", "max_length", "-", "len", "(", "x", ")", "\n", "if", "padded_len", ">", "0", ":", "\n", "                ", "x", ".", "extend", "(", "[", "0", "]", "*", "padded_len", ")", "\n", "y", ".", "extend", "(", "[", "0", "]", "*", "padded_len", ")", "\n", "mask", "[", "-", "padded_len", ":", "]", "=", "0.", "\n", "", "v", ".", "extend", "(", "[", "0", "]", "*", "(", "self", ".", "max_length", "-", "len", "(", "v", ")", ")", ")", "\n", "x", "=", "x", "[", ":", "self", ".", "max_length", "]", "\n", "y", "=", "y", "[", ":", "self", ".", "max_length", "]", "\n", "v", "=", "v", "[", ":", "self", ".", "max_length", "]", "\n", "new_data", "[", "k", "]", "=", "[", "np", ".", "array", "(", "x", ",", "dtype", "=", "np", ".", "int32", ")", ",", "np", ".", "array", "(", "y", ",", "dtype", "=", "np", ".", "int32", ")", ",", "np", ".", "array", "(", "v", ",", "dtype", "=", "np", ".", "int32", ")", "]", "\n", "data_mask", "[", "k", "]", "=", "np", ".", "array", "(", "mask", ",", "dtype", "=", "bool", ")", "\n", "", "return", "new_data", ",", "data_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator._batch_feed_dict": [[117, 167], ["feed_dict.update", "feed_dict.update", "feed_dict.update", "feed_dict.update", "feed_dict.update", "range", "feed_dict.update", "feed_dict.update", "feed_dict.update", "feed_dict.update", "sessid.split", "timeids.append", "input_x.append", "input_y.append", "mask_y.append", "range", "support_layers_session.append", "support_layers_length.append", "int", "str", "numpy.count_nonzero", "support_sessions.append", "support_lengths.append"], "methods", ["None"], ["", "def", "_batch_feed_dict", "(", "self", ",", "current_batch", ")", ":", "\n", "        ", "'''\n        Construct batch inputs.\n        '''", "\n", "current_batch_sess_ids", ",", "samples", ",", "support_sizes", "=", "current_batch", "\n", "feed_dict", "=", "{", "}", "\n", "input_x", "=", "[", "]", "\n", "input_y", "=", "[", "]", "\n", "mask_y", "=", "[", "]", "\n", "timeids", "=", "[", "]", "\n", "for", "sessid", "in", "current_batch_sess_ids", ":", "\n", "            ", "nodeid", ",", "timeid", "=", "sessid", ".", "split", "(", "'_'", ")", "\n", "timeids", ".", "append", "(", "int", "(", "timeid", ")", ")", "\n", "x", ",", "y", ",", "_", "=", "self", ".", "padded_data", "[", "sessid", "]", "\n", "mask", "=", "self", ".", "mask", "[", "sessid", "]", "\n", "input_x", ".", "append", "(", "x", ")", "\n", "input_y", ".", "append", "(", "y", ")", "\n", "mask_y", ".", "append", "(", "mask", ")", "\n", "", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'input_x'", "]", ":", "input_x", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'input_y'", "]", ":", "input_y", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'mask_y'", "]", ":", "mask_y", "}", ")", "\n", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'support_nodes_layer1'", "]", ":", "samples", "[", "2", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'support_nodes_layer2'", "]", ":", "samples", "[", "1", "]", "}", ")", "\n", "#prepare sopportive user's recent sessions.", "\n", "support_layers_session", "=", "[", "]", "\n", "support_layers_length", "=", "[", "]", "\n", "for", "layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "start", "=", "0", "\n", "t", "=", "self", ".", "num_layers", "-", "layer", "\n", "support_sessions", "=", "[", "]", "\n", "support_lengths", "=", "[", "]", "\n", "for", "batch", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "                ", "timeid", "=", "timeids", "[", "batch", "]", "\n", "support_nodes", "=", "samples", "[", "t", "]", "[", "start", ":", "start", "+", "support_sizes", "[", "t", "]", "]", "\n", "for", "support_node", "in", "support_nodes", ":", "\n", "                    ", "support_session_id", "=", "str", "(", "self", ".", "latest_sessions", "[", "support_node", "]", "[", "timeid", "]", ")", "\n", "support_session", "=", "self", ".", "padded_data", "[", "support_session_id", "]", "[", "2", "]", "\n", "#print(support_session)", "\n", "length", "=", "np", ".", "count_nonzero", "(", "support_session", ")", "\n", "support_sessions", ".", "append", "(", "support_session", ")", "\n", "support_lengths", ".", "append", "(", "length", ")", "\n", "", "start", "+=", "support_sizes", "[", "t", "]", "\n", "", "support_layers_session", ".", "append", "(", "support_sessions", ")", "\n", "support_layers_length", ".", "append", "(", "support_lengths", ")", "\n", "", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'support_sessions_layer1'", "]", ":", "support_layers_session", "[", "0", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'support_sessions_layer2'", "]", ":", "support_layers_session", "[", "1", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'support_lengths_layer1'", "]", ":", "support_layers_length", "[", "0", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'support_lengths_layer2'", "]", ":", "support_layers_length", "[", "1", "]", "}", ")", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.sample": [[168, 183], ["range", "sampler", "samples.append", "support_sizes.append", "numpy.reshape"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "nodeids", ",", "timeids", ",", "sampler", ")", ":", "\n", "        ", "'''\n        Sample neighbors recursively. First-order, then second-order, ...\n        '''", "\n", "samples", "=", "[", "nodeids", "]", "\n", "support_size", "=", "1", "\n", "support_sizes", "=", "[", "support_size", "]", "\n", "first_or_second", "=", "[", "'second'", ",", "'first'", "]", "\n", "for", "k", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "t", "=", "self", ".", "num_layers", "-", "k", "-", "1", "\n", "node", "=", "sampler", "(", "[", "samples", "[", "k", "]", ",", "self", ".", "samples_1_2", "[", "t", "]", ",", "timeids", ",", "first_or_second", "[", "t", "]", ",", "support_size", "]", ")", "\n", "support_size", "*=", "self", ".", "samples_1_2", "[", "t", "]", "\n", "samples", ".", "append", "(", "np", ".", "reshape", "(", "node", ",", "[", "support_size", "*", "self", ".", "batch_size", ",", "]", ")", ")", "\n", "support_sizes", ".", "append", "(", "support_size", ")", "\n", "", "return", "samples", ",", "support_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.next_val_minibatch_feed_dict": [[184, 204], ["minibatch.MinibatchIterator.sample", "minibatch.MinibatchIterator._batch_feed_dict", "int", "int", "sessionid.split", "sessionid.split"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.sample", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator._batch_feed_dict"], ["", "def", "next_val_minibatch_feed_dict", "(", "self", ",", "val_or_test", "=", "'val'", ")", ":", "\n", "        ", "'''\n        Construct evaluation or test inputs.\n        '''", "\n", "if", "val_or_test", "==", "'val'", ":", "\n", "            ", "start", "=", "self", ".", "batch_num_val", "*", "self", ".", "batch_size", "\n", "self", ".", "batch_num_val", "+=", "1", "\n", "data", "=", "self", ".", "valid_session_ids", "\n", "", "elif", "val_or_test", "==", "'test'", ":", "\n", "            ", "start", "=", "self", ".", "batch_num_test", "*", "self", ".", "batch_size", "\n", "self", ".", "batch_num_test", "+=", "1", "\n", "data", "=", "self", ".", "test_session_ids", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "current_batch_sessions", "=", "data", "[", "start", ":", "start", "+", "self", ".", "batch_size", "]", "\n", "nodes", "=", "[", "int", "(", "sessionid", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "for", "sessionid", "in", "current_batch_sessions", "]", "\n", "timeids", "=", "[", "int", "(", "sessionid", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "for", "sessionid", "in", "current_batch_sessions", "]", "\n", "samples", ",", "support_sizes", "=", "self", ".", "sample", "(", "nodes", ",", "timeids", ",", "self", ".", "test_sampler", ")", "\n", "return", "self", ".", "_batch_feed_dict", "(", "[", "current_batch_sessions", ",", "samples", ",", "support_sizes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.next_train_minibatch_feed_dict": [[205, 216], ["minibatch.MinibatchIterator.sample", "minibatch.MinibatchIterator._batch_feed_dict", "int", "int", "sessionid.split", "sessionid.split"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.sample", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator._batch_feed_dict"], ["", "def", "next_train_minibatch_feed_dict", "(", "self", ")", ":", "\n", "        ", "'''\n        Generate next training batch data.\n        '''", "\n", "start", "=", "self", ".", "batch_num", "*", "self", ".", "batch_size", "\n", "self", ".", "batch_num", "+=", "1", "\n", "current_batch_sessions", "=", "self", ".", "train_session_ids", "[", "start", ":", "start", "+", "self", ".", "batch_size", "]", "\n", "nodes", "=", "[", "int", "(", "sessionid", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "for", "sessionid", "in", "current_batch_sessions", "]", "\n", "timeids", "=", "[", "int", "(", "sessionid", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "for", "sessionid", "in", "current_batch_sessions", "]", "\n", "samples", ",", "support_sizes", "=", "self", ".", "sample", "(", "nodes", ",", "timeids", ",", "self", ".", "sampler", ")", "\n", "return", "self", ".", "_batch_feed_dict", "(", "[", "current_batch_sessions", ",", "samples", ",", "support_sizes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.construct_adj": [[217, 238], ["numpy.zeros", "minibatch.MinibatchIterator.train_df.UserId.unique", "numpy.ones", "numpy.array", "len", "len", "len", "numpy.random.choice", "len", "numpy.random.choice", "minibatch.MinibatchIterator.adj_info.loc[].Followee.unique"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.ones"], ["", "def", "construct_adj", "(", "self", ")", ":", "\n", "        ", "'''\n        Construct adj table used during training.\n        '''", "\n", "adj", "=", "self", ".", "num_nodes", "*", "np", ".", "ones", "(", "(", "self", ".", "num_nodes", "+", "1", ",", "self", ".", "max_degree", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "deg", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_nodes", ",", ")", ")", "\n", "missed", "=", "0", "\n", "for", "nodeid", "in", "self", ".", "train_df", ".", "UserId", ".", "unique", "(", ")", ":", "\n", "            ", "neighbors", "=", "np", ".", "array", "(", "[", "neighbor", "for", "neighbor", "in", "\n", "self", ".", "adj_info", ".", "loc", "[", "self", ".", "adj_info", "[", "'Follower'", "]", "==", "nodeid", "]", ".", "Followee", ".", "unique", "(", ")", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "deg", "[", "nodeid", "]", "=", "len", "(", "neighbors", ")", "\n", "if", "len", "(", "neighbors", ")", "==", "0", ":", "\n", "                ", "missed", "+=", "1", "\n", "continue", "\n", "", "if", "len", "(", "neighbors", ")", ">", "self", ".", "max_degree", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "self", ".", "max_degree", ",", "replace", "=", "False", ")", "\n", "", "elif", "len", "(", "neighbors", ")", "<", "self", ".", "max_degree", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "self", ".", "max_degree", ",", "replace", "=", "True", ")", "\n", "", "adj", "[", "nodeid", ",", ":", "]", "=", "neighbors", "\n", "#print('Unexpected missing during constructing adj list: {}'.format(missed))", "\n", "", "return", "adj", ",", "deg", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.construct_test_adj": [[239, 261], ["numpy.zeros", "data.UserId.unique", "numpy.ones", "numpy.array", "len", "len", "len", "numpy.random.choice", "len", "numpy.random.choice", "minibatch.MinibatchIterator.adj_info.loc[].Followee.unique"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.ones"], ["", "def", "construct_test_adj", "(", "self", ")", ":", "\n", "        ", "'''\n        Construct adj table used during evaluation or testing.\n        '''", "\n", "adj", "=", "self", ".", "num_nodes", "*", "np", ".", "ones", "(", "(", "self", ".", "num_nodes", "+", "1", ",", "self", ".", "max_degree", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "deg", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_nodes", ",", ")", ")", "\n", "missed", "=", "0", "\n", "data", "=", "self", ".", "all_data", "\n", "for", "nodeid", "in", "data", ".", "UserId", ".", "unique", "(", ")", ":", "\n", "            ", "neighbors", "=", "np", ".", "array", "(", "[", "neighbor", "for", "neighbor", "in", "\n", "self", ".", "adj_info", ".", "loc", "[", "self", ".", "adj_info", "[", "'Follower'", "]", "==", "nodeid", "]", ".", "Followee", ".", "unique", "(", ")", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "deg", "[", "nodeid", "]", "=", "len", "(", "neighbors", ")", "\n", "if", "len", "(", "neighbors", ")", "==", "0", ":", "\n", "                ", "missed", "+=", "1", "\n", "continue", "\n", "", "if", "len", "(", "neighbors", ")", ">", "self", ".", "max_degree", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "self", ".", "max_degree", ",", "replace", "=", "False", ")", "\n", "", "elif", "len", "(", "neighbors", ")", "<", "self", ".", "max_degree", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "self", ".", "max_degree", ",", "replace", "=", "True", ")", "\n", "", "adj", "[", "nodeid", ",", ":", "]", "=", "neighbors", "\n", "#print('Unexpected missing during constructing adj list: {}'.format(missed))", "\n", "", "return", "adj", ",", "deg", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.end": [[262, 267], ["len"], "methods", ["None"], ["", "def", "end", "(", "self", ")", ":", "\n", "        ", "'''\n        Indicate whether we finish a pass over all training samples.\n        '''", "\n", "return", "self", ".", "batch_num", "*", "self", ".", "batch_size", ">", "len", "(", "self", ".", "train_session_ids", ")", "-", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.end_val": [[268, 285], ["len"], "methods", ["None"], ["", "def", "end_val", "(", "self", ",", "val_or_test", "=", "'val'", ")", ":", "\n", "        ", "'''\n        Indicate whether we finish a pass over all testing or evaluation samples.\n        '''", "\n", "batch_num", "=", "self", ".", "batch_num_val", "if", "val_or_test", "==", "'val'", "else", "self", ".", "batch_num_test", "\n", "data", "=", "self", ".", "valid_session_ids", "if", "val_or_test", "==", "'val'", "else", "self", ".", "test_session_ids", "\n", "end", "=", "batch_num", "*", "self", ".", "batch_size", ">", "len", "(", "data", ")", "-", "self", ".", "batch_size", "\n", "if", "end", ":", "\n", "            ", "if", "val_or_test", "==", "'val'", ":", "\n", "                ", "self", ".", "batch_num_val", "=", "0", "\n", "", "elif", "val_or_test", "==", "'test'", ":", "\n", "                ", "self", ".", "batch_num_test", "=", "0", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "if", "end", ":", "\n", "            ", "self", ".", "batch_num_val", "=", "0", "\n", "", "return", "end", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.shuffle": [[286, 292], ["numpy.random.permutation"], "methods", ["None"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "'''\n        Shuffle training data.\n        '''", "\n", "self", ".", "train_session_ids", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "train_session_ids", ")", "\n", "self", ".", "batch_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.test.evaluate": [[21, 38], ["minibatch.end_val", "minibatch.next_val_minibatch_feed_dict", "numpy.reshape().tolist", "input_str.append", "sess.run", "epoch_val_cost.append", "epoch_val_recall.append", "epoch_val_ndcg.append", "epoch_val_point.append", "numpy.mean", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.reshape", "str"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.end_val", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.next_val_minibatch_feed_dict"], ["parser", ".", "add_argument", "(", "'--seq_len'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'max sequence length (default: 20)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'dropout (default: 0.2)'", ")", "\n", "parser", ".", "add_argument", "(", "'--l2_reg'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'regularization scale (default: 0.0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip'", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "help", "=", "'gradient clip (default: 1.)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'upper epoch limit (default: 20)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'initial learning rate for Adam (default: 0.001)'", ")", "\n", "parser", ".", "add_argument", "(", "'--emsize'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'dimension of item embedding (default: 100)'", ")", "\n", "parser", ".", "add_argument", "(", "'--neg_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'size of negative samples (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--worker'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'number of sampling workers (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--nhid'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'number of hidden units (default: 100)'", ")", "\n", "parser", ".", "add_argument", "(", "'--levels'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of levels (default: 3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1111", ",", "help", "=", "'random seed (default: 1111)'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss'", ",", "type", "=", "str", ",", "default", "=", "'ns'", ",", "help", "=", "'type of loss: ns/sampled_sm/full_sm (default: ns)'", ")", "\n", "parser", ".", "add_argument", "(", "'--data'", ",", "type", "=", "str", ",", "default", "=", "'gowalla'", ",", "help", "=", "'data set name (default: gowalla)'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "1e2", ",", "help", "=", "'log interval (default: 1e2)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_interval'", ",", "type", "=", "int", ",", "default", "=", "1e3", ",", "help", "=", "'eval/test interval (default: 1e3)'", ")", "\n", "\n", "# ****************************** unique arguments for rnn model. *******************************************************", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.test.construct_placeholders": [[39, 57], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "function", ["None"], ["# None", "\n", "\n", "# ***************************** unique arguemnts for tcn model.", "\n", "parser", ".", "add_argument", "(", "'--ksize'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'kernel size (default: 100)'", ")", "\n", "\n", "# ****************************** unique arguments for transformer model. *************************************************", "\n", "parser", ".", "add_argument", "(", "'--num_blocks'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'num_blocks'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_heads'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'num_heads'", ")", "\n", "parser", ".", "add_argument", "(", "'--pos_fixed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'trainable positional embedding usually has better performance'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "tf", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "train_data", ",", "val_data", ",", "test_data", ",", "n_items", ",", "n_users", "=", "data_generator", "(", "args", ")", "\n", "\n", "max_test_len", "=", "20", "\n", "test_data_per_step", "=", "prepare_eval_test", "(", "test_data", ",", "batch_size", "=", "100", ",", "max_test_len", "=", "max_test_len", ")", "\n", "\n", "checkpoint_dir", "=", "'_'", ".", "join", "(", "[", "'save'", ",", "args", ".", "data", ",", "args", ".", "model", ",", "str", "(", "args", ".", "lr", ")", ",", "str", "(", "args", ".", "l2_reg", ")", ",", "str", "(", "args", ".", "emsize", ")", ",", "str", "(", "args", ".", "dropout", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.test.test": [[58, 109], ["len", "test.construct_placeholders", "minibatch.MinibatchIterator", "model.DGRec", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.train.Saver", "tensorflow.train.get_checkpoint_state", "test.evaluate", "print", "len", "tensorflow.global_variables", "tf.train.Saver.restore", "print", "print", "sys.exit", "open", "range", "len", "len", "f.write", "str", "str"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.test.construct_placeholders", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.evaluate", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.restore"], ["\n", "print", "(", "args", ")", "\n", "print", "(", "'#Item: '", ",", "n_items", ")", "\n", "print", "(", "'#User: '", ",", "n_users", ")", "\n", "\n", "model", "=", "NeuralSeqRecommender", "(", "args", ",", "n_items", ",", "n_users", ")", "\n", "\n", "lr", "=", "args", ".", "lr", "\n", "\n", "def", "evaluate_subsequent", "(", "source", ",", "sess", ")", ":", "\n", "    ", "EV", "=", "Evaluation", "(", ")", "\n", "for", "u", "in", "source", ".", "keys", "(", ")", ":", "\n", "        ", "itemids", "=", "source", "[", "u", "]", "\n", "uid", "=", "int", "(", "u", ")", "\n", "l", "=", "min", "(", "len", "(", "itemids", ")", ",", "max_test_len", ")", "\n", "if", "l", "<", "2", ":", "\n", "            ", "continue", "\n", "", "feed_dict", "=", "{", "model", ".", "inp", ":", "[", "itemids", "[", ":", "l", "-", "1", "]", "]", ",", "model", ".", "dropout", ":", "0", "}", "\n", "prediction", "=", "sess", ".", "run", "(", "model", ".", "prediction", ",", "feed_dict", "=", "feed_dict", ")", "\n", "prediction", "=", "prediction", ".", "flatten", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "l", ")", ":", "\n", "            ", "i_pred", "=", "prediction", "[", "(", "i", "-", "1", ")", "*", "(", "n_items", "+", "1", ")", ":", "i", "*", "(", "n_items", "+", "1", ")", "]", "\n", "rank", "=", "np", ".", "argsort", "(", "-", "i_mi", "[", "1", ":", "]", ")", "+", "1", "\n", "EV", ".", "eval", "(", "int", "(", "u", ")", ",", "itemids", "[", "i", ":", "l", "]", ",", "rank", "[", ":", "20", "]", ")", "\n", "", "", "EV", ".", "result", "(", ")", "\n", "\n", "", "def", "evaluate", "(", "source", ",", "sess", ")", ":", "\n", "    ", "total_hit_k", "=", "0.0", "\n", "total_ndcg_k", "=", "0.0", "\n", "count", "=", "0.0", "\n", "for", "batch", "in", "source", ":", "\n", "        ", "feed_dict", "=", "{", "model", ".", "inp", ":", "batch", "[", "1", "]", ",", "model", ".", "dropout", ":", "0.", "}", "\n", "feed_dict", "[", "model", ".", "pos", "]", "=", "batch", "[", "2", "]", "\n", "hit", ",", "ndcg", ",", "n_target", "=", "sess", ".", "run", "(", "[", "model", ".", "hit_at_k", ",", "model", ".", "ndcg_at_k", ",", "model", ".", "num_target", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "count", "+=", "n_target", "\n", "total_hit_k", "+=", "hit", "\n", "total_ndcg_k", "+=", "ndcg", "\n", "\n", "", "val_hit", "=", "total_hit_k", "/", "count", "\n", "val_ndcg", "=", "total_ndcg_k", "/", "count", "\n", "\n", "return", "[", "val_hit", ",", "val_ndcg", "]", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "checkpoint_dir", ")", "\n", "if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "        ", "model", ".", "saver", ".", "restore", "(", "sess", ",", "'{}/{}'", ".", "format", "(", "checkpoint_dir", ",", "'model.ckpt'", ")", ")", "\n", "print", "(", "'Restore model successfully'", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.test.parseArgs": [[138, 198], ["test.Args", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.train.parse_args"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.test.main": [[199, 205], ["test.parseArgs", "print", "utils.load_data", "print", "test.test"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.test.parseArgs", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.utils.load_data", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.test.test"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec.__init__": [[9, 76], ["tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.Variable", "tensorflow.maximum", "tensorflow.train.AdamOptimizer", "model.DGRec.build", "tensorflow.train.exponential_decay", "Exception"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec.build"], ["from", ".", "base", "import", "LSTMNet", "\n", "from", ".", "base", "import", "TemporalConvNet", "\n", "from", ".", "base", "import", "TransformerNet", "\n", "\n", "def", "log2", "(", "x", ")", ":", "\n", "    ", "numerator", "=", "tf", ".", "log", "(", "x", ")", "\n", "denominator", "=", "tf", ".", "log", "(", "tf", ".", "constant", "(", "2", ",", "dtype", "=", "numerator", ".", "dtype", ")", ")", "\n", "return", "numerator", "/", "denominator", "\n", "\n", "", "class", "NeuralSeqRecommender", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ",", "n_items", ",", "n_users", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "n_items", "=", "n_items", "\n", "self", ".", "n_users", "=", "n_users", "\n", "self", ".", "_build", "(", ")", "\n", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "inp", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "None", ")", ",", "name", "=", "'inp'", ")", "\n", "self", ".", "pos", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "None", ")", ",", "name", "=", "'pos'", ")", "\n", "self", ".", "neg", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "None", ",", "self", ".", "args", ".", "neg_size", ")", ",", "name", "=", "'neg'", ")", "\n", "\n", "self", ".", "lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "None", ",", "name", "=", "'lr'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "placeholder_with_default", "(", "0.", ",", "shape", "=", "(", ")", ")", "\n", "self", ".", "item_embedding", "=", "item_embedding", "=", "tf", ".", "get_variable", "(", "'item_embedding'", ",", "shape", "=", "(", "self", ".", "n_items", "+", "1", ",", "self", ".", "args", ".", "emsize", ")", ",", "dtype", "=", "tf", ".", "float32", ",", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "self", ".", "args", ".", "l2_reg", ")", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "\n", "input_item", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "item_embedding", ",", "self", ".", "inp", ")", "\n", "mask", "=", "tf", ".", "expand_dims", "(", "tf", ".", "to_float", "(", "tf", ".", "not_equal", "(", "self", ".", "inp", ",", "0", ")", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "args", ".", "model", "==", "'tcn'", ":", "\n", "            ", "num_channels", "=", "[", "self", ".", "args", ".", "nhid", "]", "*", "(", "self", ".", "args", ".", "levels", "-", "1", ")", "+", "[", "self", ".", "args", ".", "emsize", "]", "\n", "self", ".", "net", "=", "TemporalConvNet", "(", "num_channels", ",", "stride", "=", "1", ",", "kernel_size", "=", "self", ".", "args", ".", "ksize", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "", "elif", "self", ".", "args", ".", "model", "==", "'rnn'", ":", "\n", "            ", "self", ".", "net", "=", "LSTMNet", "(", "layers", "=", "self", ".", "args", ".", "levels", ",", "hidden_units", "=", "self", ".", "args", ".", "nhid", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "", "elif", "self", ".", "args", ".", "model", "==", "'transformer'", ":", "\n", "            ", "self", ".", "net", "=", "TransformerNet", "(", "self", ".", "args", ".", "emsize", ",", "self", ".", "args", ".", "levels", ",", "self", ".", "args", ".", "num_heads", ",", "self", ".", "args", ".", "seq_len", ",", "dropout_rate", "=", "self", ".", "dropout", ",", "pos_fixed", "=", "self", ".", "args", ".", "pos_fixed", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "outputs", "=", "self", ".", "net", "(", "input_item", ",", "mask", ")", "\n", "outputs", "*=", "mask", "\n", "ct_vec", "=", "tf", ".", "reshape", "(", "outputs", ",", "(", "-", "1", ",", "self", ".", "args", ".", "emsize", ")", ")", "\n", "outputs_shape", "=", "tf", ".", "shape", "(", "outputs", ")", "\n", "\n", "self", ".", "total_loss", "=", "0.", "\n", "\n", "self", ".", "istarget", "=", "istarget", "=", "tf", ".", "reshape", "(", "tf", ".", "to_float", "(", "tf", ".", "not_equal", "(", "self", ".", "pos", ",", "0", ")", ")", ",", "[", "-", "1", "]", ")", "\n", "\n", "_pos_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embedding", ",", "self", ".", "pos", ")", "\n", "pos_emb", "=", "tf", ".", "reshape", "(", "_pos_emb", ",", "(", "-", "1", ",", "self", ".", "args", ".", "emsize", ")", ")", "\n", "_neg_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embedding", ",", "self", ".", "neg", ")", "\n", "neg_emb", "=", "tf", ".", "reshape", "(", "_neg_emb", ",", "(", "-", "1", ",", "self", ".", "args", ".", "neg_size", ",", "self", ".", "args", ".", "emsize", ")", ")", "\n", "\n", "temp_vec_neg", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "ct_vec", ",", "[", "1", "]", ")", ",", "[", "1", ",", "self", ".", "args", ".", "neg_size", ",", "1", "]", ")", "\n", "\n", "if", "self", ".", "args", ".", "loss", "==", "'ns'", ":", "\n", "            ", "assert", "self", ".", "args", ".", "neg_size", "==", "1", "\n", "pos_logit", "=", "tf", ".", "reduce_sum", "(", "ct_vec", "*", "pos_emb", ",", "-", "1", ")", "\n", "neg_logit", "=", "tf", ".", "squeeze", "(", "tf", ".", "reduce_sum", "(", "temp_vec_neg", "*", "neg_emb", ",", "-", "1", ")", ",", "1", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "\n", "-", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "pos_logit", ")", "+", "1e-24", ")", "*", "istarget", "-", "tf", ".", "log", "(", "1", "-", "tf", ".", "sigmoid", "(", "neg_logit", ")", "+", "1e-24", ")", "*", "istarget", ")", "/", "tf", ".", "reduce_sum", "(", "istarget", ")", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec.global_features": [[77, 90], ["tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "layers.Dense", "model.DGRec.dense_layers.append", "layers.Dense.", "layers.Dense.", "tensorflow.glorot_uniform_initializer"], "methods", ["None"], ["", "elif", "self", ".", "args", ".", "loss", "==", "'sampled_sm'", ":", "\n", "            ", "pos_logit", "=", "tf", ".", "reduce_sum", "(", "ct_vec", "*", "pos_emb", ",", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "neg_logit", "=", "tf", ".", "reduce_sum", "(", "temp_vec_neg", "*", "neg_emb", ",", "-", "1", ")", "\n", "label_1", "=", "tf", ".", "ones_like", "(", "pos_logit", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "label_0", "=", "tf", ".", "zeros_like", "(", "neg_logit", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "labels", "=", "tf", ".", "concat", "(", "[", "label_1", ",", "label_0", "]", ",", "-", "1", ")", "\n", "logit", "=", "tf", ".", "concat", "(", "[", "pos_logit", ",", "neg_logit", "]", ",", "-", "1", ")", "\n", "softmax_logit", "=", "tf", ".", "nn", ".", "softmax", "(", "logit", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "-", "labels", "*", "tf", ".", "log", "(", "softmax_logit", "+", "1e-24", ")", "-", "(", "1.", "-", "labels", ")", "*", "tf", ".", "log", "(", "1.", "-", "softmax_logit", "+", "1e-24", ")", ",", "-", "1", ")", "*", "istarget", ")", "/", "tf", ".", "reduce_sum", "(", "istarget", ")", "\n", "", "elif", "self", ".", "args", ".", "loss", "==", "'full_sm'", ":", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec.local_features": [[91, 120], ["model.DGRec.lstm_cell.zero_state", "model.DGRec.lstm_cell.zero_state", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.dynamic_rnn", "tensorflow.nn.dynamic_rnn", "layers.Dense", "model.DGRec.dense_layers.append", "layers.Dense.", "layers.Dense."], "methods", ["None"], ["            ", "full_logits", "=", "tf", ".", "matmul", "(", "ct_vec", ",", "self", ".", "item_embedding", ",", "transpose_b", "=", "True", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "labels", "=", "tf", ".", "reshape", "(", "self", ".", "pos", ",", "[", "-", "1", "]", ")", ",", "logits", "=", "full_logits", ")", "*", "istarget", ")", "/", "tf", ".", "reduce_sum", "(", "istarget", ")", "\n", "\n", "", "full_logits", "=", "tf", ".", "matmul", "(", "ct_vec", ",", "self", ".", "item_embedding", ",", "transpose_b", "=", "True", ")", "\n", "self", ".", "prediction", "=", "full_logits", "\n", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "total_loss", "+=", "loss", "\n", "reg_losses", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ")", "\n", "self", ".", "total_loss", "+=", "sum", "(", "reg_losses", ")", "\n", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ")", "\n", "gvs", "=", "optimizer", ".", "compute_gradients", "(", "self", ".", "total_loss", ")", "\n", "capped_gvs", "=", "[", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "self", ".", "args", ".", "clip", ",", "self", ".", "args", ".", "clip", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "gvs", "]", "\n", "self", ".", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "capped_gvs", ")", "\n", "self", ".", "hit_at_k", ",", "self", ".", "ndcg_at_k", ",", "self", ".", "num_target", "=", "self", ".", "_metric_at_k", "(", ")", "\n", "\n", "\n", "", "def", "_metric_at_k", "(", "self", ",", "k", "=", "20", ")", ":", "\n", "        ", "prediction", "=", "self", ".", "prediction", "\n", "prediction_transposed", "=", "tf", ".", "transpose", "(", "prediction", ")", "\n", "labels", "=", "tf", ".", "reshape", "(", "self", ".", "pos", ",", "shape", "=", "(", "-", "1", ",", ")", ")", "\n", "pred_values", "=", "tf", ".", "expand_dims", "(", "tf", ".", "diag_part", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "prediction_transposed", ",", "labels", ")", ")", ",", "-", "1", ")", "\n", "tile_pred_values", "=", "tf", ".", "tile", "(", "pred_values", ",", "[", "1", ",", "self", ".", "n_items", "]", ")", "\n", "ranks", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "prediction", "[", ":", ",", "1", ":", "]", ">", "tile_pred_values", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "-", "1", ")", "+", "1", "\n", "\n", "istarget", "=", "tf", ".", "reshape", "(", "self", ".", "istarget", ",", "shape", "=", "(", "-", "1", ",", ")", ")", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec.global_and_local_features": [[121, 128], ["model.DGRec.global_features", "model.DGRec.local_features", "tensorflow.concat", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec.global_features", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec.local_features"], ["ndcg", "=", "1.", "/", "(", "log2", "(", "1.0", "+", "ranks", ")", ")", "\n", "hit_at_k", "=", "tf", ".", "nn", ".", "in_top_k", "(", "prediction", ",", "labels", ",", "k", "=", "k", ")", "# also known as Recall@k", "\n", "hit_at_k", "=", "tf", ".", "cast", "(", "hit_at_k", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "istarget", "=", "tf", ".", "reshape", "(", "self", ".", "istarget", ",", "shape", "=", "(", "-", "1", ",", ")", ")", "\n", "hit_at_k", "*=", "istarget", "\n", "ndcg_at_k", "=", "ndcg", "*", "istarget", "*", "hit_at_k", "\n", "\n", "return", "(", "tf", ".", "reduce_sum", "(", "hit_at_k", ")", ",", "tf", ".", "reduce_sum", "(", "ndcg_at_k", ")", ",", "tf", ".", "reduce_sum", "(", "istarget", ")", ")", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec.aggregate": [[129, 180], ["range", "len", "range", "aggregators.append", "model.DGRec.", "next_hidden.append", "model.DGRec.aggregator_cls", "model.DGRec.aggregator_cls", "len", "len", "tensorflow.reshape", "len"], "methods", ["None"], ["\n", "", "", ""]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec.decode": [[181, 195], ["tensorflow.nn.rnn_cell.BasicLSTMCell", "tensorflow.nn.rnn_cell.BasicLSTMCell.zero_state", "tensorflow.transpose", "tensorflow.nn.embedding_lookup", "tensorflow.nn.dynamic_rnn", "tensorflow.split", "tensorflow.squeeze"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec.step_by_step": [[196, 206], ["tensorflow.stack", "model.DGRec.aggregate", "outputs.append"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec.aggregate"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec.build": [[207, 232], ["tensorflow.get_variable", "model.DGRec.decode", "model.DGRec.step_by_step", "tensorflow.concat", "tensorflow.transpose", "model.DGRec._loss", "model.DGRec._recall", "model.DGRec._ndcg", "model.DGRec.optimizer.compute_gradients", "model.DGRec.optimizer.apply_gradients", "model.DGRec.global_features", "tensorflow.glorot_uniform_initializer", "model.DGRec.local_features", "model.DGRec.global_and_local_features", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec.decode", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec.step_by_step", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec._loss", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec._recall", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec._ndcg", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec.global_features", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec.local_features", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec.global_and_local_features"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec._loss": [[233, 251], ["layers.Dense", "model.DGRec.dense_layers.append", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "layers.Dense.", "dense_layer.vars.values", "aggregator.vars.values", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec._ndcg": [[252, 262], ["tensorflow.transpose", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.diag_part", "tensorflow.reduce_sum", "model.log2", "tensorflow.nn.embedding_lookup", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.log2"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.DGRec._recall": [[263, 271], ["tensorflow.reshape", "tensorflow.nn.in_top_k", "tensorflow.cast", "tensorflow.reshape", "tensorflow.reduce_sum"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.model.log2": [[272, 276], ["tensorflow.log", "tensorflow.log", "tensorflow.constant"], "function", ["None"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.uniform": [[9, 13], ["tensorflow.random_uniform", "tensorflow.Variable"], "function", ["None"], ["def", "uniform", "(", "shape", ",", "scale", "=", "0.05", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Uniform init.\"\"\"", "\n", "initial", "=", "tf", ".", "random_uniform", "(", "shape", ",", "minval", "=", "-", "scale", ",", "maxval", "=", "scale", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.glorot": [[15, 20], ["numpy.sqrt", "tensorflow.random_uniform", "tensorflow.Variable"], "function", ["None"], ["", "def", "glorot", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Glorot & Bengio (AISTATS 2010) init.\"\"\"", "\n", "init_range", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "shape", "[", "0", "]", "+", "shape", "[", "1", "]", ")", ")", "\n", "initial", "=", "tf", ".", "random_uniform", "(", "shape", ",", "minval", "=", "-", "init_range", ",", "maxval", "=", "init_range", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros": [[22, 26], ["tensorflow.zeros", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros"], ["", "def", "zeros", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"All zeros.\"\"\"", "\n", "initial", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.ones": [[27, 31], ["tensorflow.ones", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.ones"], ["", "def", "ones", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"All ones.\"\"\"", "\n", "initial", "=", "tf", ".", "ones", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.utils.load_adj": [[8, 11], ["pandas.read_csv"], "function", ["None"], ["import", "numpy", "as", "np", "\n", "import", "random", "\n", "import", "os", "\n", "import", "json", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.utils.load_latest_session": [[12, 18], ["open", "line.strip().split", "ret.append", "line.strip"], "function", ["None"], ["import", "datetime", "as", "dt", "\n", "from", "collections", "import", "Counter", "\n", "\n", "data_path", "=", "'data/'", "\n", "\n", "class", "Dictionary", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.utils.load_map": [[19, 31], ["open", "line.strip().split", "str", "line.strip"], "function", ["None"], ["        ", "self", ".", "item2idx", "=", "{", "}", "\n", "self", ".", "idx2item", "=", "[", "]", "\n", "self", ".", "counter", "=", "Counter", "(", ")", "\n", "\n", "", "def", "add_item", "(", "self", ",", "item", ")", ":", "\n", "        ", "self", ".", "counter", "[", "item", "]", "+=", "1", "\n", "\n", "", "def", "prep_dict", "(", "self", ")", ":", "\n", "        ", "for", "item", "in", "self", ".", "counter", ":", "\n", "            ", "if", "item", "not", "in", "self", ".", "item2idx", ":", "\n", "                ", "self", ".", "idx2item", ".", "append", "(", "item", ")", "\n", "self", ".", "item2idx", "[", "item", "]", "=", "len", "(", "self", ".", "idx2item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.utils.load_data": [[32, 41], ["utils.load_adj", "utils.load_latest_session", "utils.load_map", "utils.load_map", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.utils.load_adj", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.utils.load_latest_session", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.utils.load_map", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.utils.load_map"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idx2item", ")", "\n", "\n", "\n", "", "", "class", "Corpus", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "ItemId", ")", ":", "\n", "        ", "self", ".", "dict", "=", "Dictionary", "(", ")", "\n", "for", "item", "in", "ItemId", ":", "\n", "            ", "self", ".", "dict", ".", "add_item", "(", "item", ")", "\n", "", "self", ".", "dict", ".", "prep_dict", "(", ")", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.train.str2list": [[13, 18], ["v.split.split", "int", "_.strip"], "function", ["None"], ["\n", "from", ".", "utils", "import", "*", "\n", "from", ".", "model", "import", "*", "\n", "from", ".", "sampler", "import", "*", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Sequential or session-based recommendation'", ")", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.train.str2list2": [[20, 25], ["v.split.split", "float", "_.strip"], "function", ["None"], ["parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "'batch size (default: 128)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seq_len'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'max sequence length (default: 20)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'dropout (default: 0.2)'", ")", "\n", "parser", ".", "add_argument", "(", "'--l2_reg'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'regularization scale (default: 0.0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip'", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "help", "=", "'gradient clip (default: 1.)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'upper epoch limit (default: 20)'", ")", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.train.str2bool": [[27, 34], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["parser", ".", "add_argument", "(", "'--emsize'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'dimension of item embedding (default: 100)'", ")", "\n", "parser", ".", "add_argument", "(", "'--neg_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'size of negative samples (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--worker'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'number of sampling workers (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--nhid'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'number of hidden units (default: 100)'", ")", "\n", "parser", ".", "add_argument", "(", "'--levels'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of levels (default: 3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1111", ",", "help", "=", "'random seed (default: 1111)'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss'", ",", "type", "=", "str", ",", "default", "=", "'ns'", ",", "help", "=", "'type of loss: ns/sampled_sm/full_sm (default: ns)'", ")", "\n", "parser", ".", "add_argument", "(", "'--data'", ",", "type", "=", "str", ",", "default", "=", "'gowalla'", ",", "help", "=", "'data set name (default: gowalla)'", ")", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.train.parse_args": [[35, 64], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.train.parse_args"], ["parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "1e2", ",", "help", "=", "'log interval (default: 1e2)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_interval'", ",", "type", "=", "int", ",", "default", "=", "1e3", ",", "help", "=", "'eval/test interval (default: 1e3)'", ")", "\n", "\n", "# ****************************** unique arguments for rnn model. *******************************************************", "\n", "# None", "\n", "\n", "# ***************************** unique arguemnts for tcn model.", "\n", "parser", ".", "add_argument", "(", "'--ksize'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'kernel size (default: 100)'", ")", "\n", "\n", "# ****************************** unique arguments for transformer model. *************************************************", "\n", "parser", ".", "add_argument", "(", "'--num_blocks'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'num_blocks'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_heads'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'num_heads'", ")", "\n", "parser", ".", "add_argument", "(", "'--pos_fixed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'trainable positional embedding usually has better performance'", ")", "\n", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "tf", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "train_data", ",", "val_data", ",", "test_data", ",", "n_items", ",", "n_users", "=", "data_generator", "(", "args", ")", "\n", "\n", "train_sampler", "=", "Sampler", "(", "\n", "data", "=", "train_data", ",", "\n", "n_items", "=", "n_items", ",", "\n", "n_users", "=", "n_users", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "max_len", "=", "args", ".", "seq_len", ",", "\n", "neg_size", "=", "args", ".", "neg_size", ",", "\n", "n_workers", "=", "args", ".", "worker", ",", "\n", "neg_method", "=", "'rand'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.train._run_": [[67, 113], ["os.path.join", "model.AutoInt", "numpy.load", "numpy.load", "numpy.load", "range", "print", "numpy.load", "numpy.load", "numpy.load", "model.AutoInt.restore", "model.AutoInt.evaluate", "print", "numpy.load", "range", "print", "print", "numpy.load", "numpy.load", "numpy.load", "print", "time.time", "model.AutoInt.fit_once", "print", "time.time", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.restore", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.evaluate", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.fit_once"], ["checkpoint_dir", "=", "'_'", ".", "join", "(", "[", "'save'", ",", "args", ".", "data", ",", "args", ".", "model", ",", "str", "(", "args", ".", "lr", ")", ",", "str", "(", "args", ".", "l2_reg", ")", ",", "str", "(", "args", ".", "emsize", ")", ",", "str", "(", "args", ".", "dropout", ")", "]", ")", "\n", "\n", "print", "(", "args", ")", "\n", "print", "(", "'#Item: '", ",", "n_items", ")", "\n", "print", "(", "'#User: '", ",", "n_users", ")", "\n", "\n", "model", "=", "NeuralSeqRecommender", "(", "args", ",", "n_items", ",", "n_users", ")", "\n", "\n", "lr", "=", "args", ".", "lr", "\n", "\n", "def", "evaluate", "(", "source", ",", "sess", ")", ":", "\n", "    ", "total_hit_k", "=", "0.0", "\n", "total_ndcg_k", "=", "0.0", "\n", "count", "=", "0.0", "\n", "for", "batch", "in", "source", ":", "\n", "        ", "feed_dict", "=", "{", "model", ".", "inp", ":", "batch", "[", "1", "]", ",", "model", ".", "dropout", ":", "0.", "}", "\n", "feed_dict", "[", "model", ".", "pos", "]", "=", "batch", "[", "2", "]", "\n", "hit", ",", "ndcg", ",", "n_target", "=", "sess", ".", "run", "(", "[", "model", ".", "hit_at_k", ",", "model", ".", "ndcg_at_k", ",", "model", ".", "num_target", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "count", "+=", "n_target", "\n", "total_hit_k", "+=", "hit", "\n", "total_ndcg_k", "+=", "ndcg", "\n", "\n", "", "val_hit", "=", "total_hit_k", "/", "count", "\n", "val_ndcg", "=", "total_ndcg_k", "/", "count", "\n", "\n", "return", "[", "val_hit", ",", "val_ndcg", "]", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "global", "lr", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "all_val_hit", "=", "[", "-", "1", "]", "\n", "early_stop_cn", "=", "0", "\n", "step_count", "=", "0", "\n", "train_loss_l", "=", "0.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Start training...'", ")", "\n", "try", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "cur_batch", "=", "train_sampler", ".", "next_batch", "(", ")", "\n", "inp", "=", "np", ".", "array", "(", "cur_batch", "[", "1", "]", ")", "\n", "feed_dict", "=", "{", "model", ".", "inp", ":", "inp", ",", "model", ".", "lr", ":", "lr", ",", "model", ".", "dropout", ":", "args", ".", "dropout", "}", "\n", "feed_dict", "[", "model", ".", "pos", "]", "=", "np", ".", "array", "(", "cur_batch", "[", "2", "]", ")", "\n", "feed_dict", "[", "model", ".", "neg", "]", "=", "np", ".", "array", "(", "cur_batch", "[", "3", "]", ")", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.model.AutoInt.__init__": [[104, 141], ["model.AutoInt._init_graph", "os.makedirs", "str", "os.path.exists"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt._init_graph"], ["\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ")", "\n", "gvs", "=", "optimizer", ".", "compute_gradients", "(", "self", ".", "total_loss", ")", "\n", "capped_gvs", "=", "[", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "self", ".", "args", ".", "clip", ",", "self", ".", "args", ".", "clip", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "gvs", "]", "\n", "self", ".", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "capped_gvs", ")", "\n", "self", ".", "hit_at_k", ",", "self", ".", "ndcg_at_k", ",", "self", ".", "num_target", "=", "self", ".", "_metric_at_k", "(", ")", "\n", "\n", "\n", "", "def", "_metric_at_k", "(", "self", ",", "k", "=", "20", ")", ":", "\n", "        ", "prediction", "=", "self", ".", "prediction", "\n", "prediction_transposed", "=", "tf", ".", "transpose", "(", "prediction", ")", "\n", "labels", "=", "tf", ".", "reshape", "(", "self", ".", "pos", ",", "shape", "=", "(", "-", "1", ",", ")", ")", "\n", "pred_values", "=", "tf", ".", "expand_dims", "(", "tf", ".", "diag_part", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "prediction_transposed", ",", "labels", ")", ")", ",", "-", "1", ")", "\n", "tile_pred_values", "=", "tf", ".", "tile", "(", "pred_values", ",", "[", "1", ",", "self", ".", "n_items", "]", ")", "\n", "ranks", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "prediction", "[", ":", ",", "1", ":", "]", ">", "tile_pred_values", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "-", "1", ")", "+", "1", "\n", "\n", "istarget", "=", "tf", ".", "reshape", "(", "self", ".", "istarget", ",", "shape", "=", "(", "-", "1", ",", ")", ")", "\n", "ndcg", "=", "1.", "/", "(", "log2", "(", "1.0", "+", "ranks", ")", ")", "\n", "hit_at_k", "=", "tf", ".", "nn", ".", "in_top_k", "(", "prediction", ",", "labels", ",", "k", "=", "k", ")", "# also known as Recall@k", "\n", "hit_at_k", "=", "tf", ".", "cast", "(", "hit_at_k", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "istarget", "=", "tf", ".", "reshape", "(", "self", ".", "istarget", ",", "shape", "=", "(", "-", "1", ",", ")", ")", "\n", "hit_at_k", "*=", "istarget", "\n", "ndcg_at_k", "=", "ndcg", "*", "istarget", "*", "hit_at_k", "\n", "\n", "return", "(", "tf", ".", "reduce_sum", "(", "hit_at_k", ")", ",", "tf", ".", "reduce_sum", "(", "ndcg_at_k", ")", ",", "tf", ".", "reduce_sum", "(", "istarget", ")", ")", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.model.AutoInt._init_graph": [[143, 245], ["tensorflow.Graph", "model.AutoInt.graph.as_default", "tensorflow.set_random_seed", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "model.AutoInt._initialize_weights", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.multiply", "tensorflow.nn.dropout", "range", "tensorflow.reshape", "tensorflow.add", "tensorflow.Variable", "tensorflow.train.Saver", "tensorflow.global_variables_initializer", "model.AutoInt._init_session", "model.AutoInt.sess.run", "model.AutoInt.count_param", "tensorflow.reshape", "range", "tensorflow.add", "model.multihead_attention", "tensorflow.matmul", "tensorflow.nn.sigmoid", "tensorflow.losses.log_loss", "tensorflow.train.AdamOptimizer().minimize", "len", "tensorflow.add", "tensorflow.nn.relu", "tensorflow.nn.dropout", "tensorflow.matmul", "tensorflow.nn.l2_loss", "range", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.train.AdagradOptimizer().minimize", "tensorflow.matmul", "model.AutoInt.batch_norm_layer", "tensorflow.subtract", "len", "tensorflow.train.AdamOptimizer", "tensorflow.train.GradientDescentOptimizer().minimize", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.train.AdagradOptimizer", "tensorflow.train.MomentumOptimizer().minimize", "tensorflow.train.GradientDescentOptimizer", "tensorflow.train.MomentumOptimizer"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt._initialize_weights", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt._init_session", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.count_param", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.multihead_attention", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.batch_norm_layer"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.model.AutoInt.count_param": [[247, 253], ["numpy.sum", "print", "print", "numpy.prod", "v.get_shape().as_list", "tensorflow.trainable_variables", "v.get_shape"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.model.AutoInt._init_session": [[255, 259], ["tensorflow.ConfigProto", "tensorflow.Session"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.model.AutoInt._initialize_weights": [[261, 305], ["dict", "tensorflow.Variable", "numpy.sqrt", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.random_normal", "len", "numpy.sqrt", "tensorflow.Variable", "tensorflow.Variable", "range", "numpy.sqrt", "tensorflow.Variable", "tensorflow.Variable", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "numpy.sqrt", "tensorflow.Variable", "tensorflow.Variable", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.model.AutoInt.batch_norm_layer": [[306, 313], ["tensorflow.contrib.layers.python.layers.batch_norm", "tensorflow.contrib.layers.python.layers.batch_norm", "tensorflow.cond"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.model.AutoInt.get_batch": [[315, 320], ["len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.model.AutoInt.shuffle_in_unison_scary": [[323, 330], ["numpy.random.get_state", "numpy.random.shuffle", "numpy.random.set_state", "numpy.random.shuffle", "numpy.random.set_state", "numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.shuffle", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.shuffle", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.shuffle"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.model.AutoInt.fit_on_batch": [[332, 340], ["model.AutoInt.sess.run"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.model.AutoInt.fit_once": [[343, 383], ["time.time.time", "model.AutoInt.shuffle_in_unison_scary", "int", "range", "model.AutoInt.evaluate", "model.AutoInt.train_result.append", "model.AutoInt.train_loss.append", "model.AutoInt.get_batch", "model.AutoInt.fit_on_batch", "model.AutoInt.evaluate", "model.AutoInt.valid_result.append", "model.AutoInt.valid_loss.append", "model.AutoInt.training_termination", "len", "model.AutoInt.saver.save", "print", "print", "print", "time.time.time", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.shuffle_in_unison_scary", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.evaluate", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.get_batch", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.fit_on_batch", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.evaluate", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.training_termination"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.model.AutoInt.training_termination": [[386, 401], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.model.AutoInt.predict": [[403, 432], ["model.AutoInt.get_batch", "len", "len", "len", "model.AutoInt.sess.run", "model.AutoInt.get_batch", "numpy.reshape", "numpy.concatenate", "len", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.get_batch", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.get_batch"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.model.AutoInt.evaluate": [[434, 444], ["model.AutoInt.predict", "numpy.clip", "model.AutoInt.eval_metric", "sklearn.metrics.log_loss"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.predict"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.model.AutoInt.restore": [[445, 453], ["tensorflow.train.get_checkpoint_state", "model.AutoInt.saver.restore", "print"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.restore"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.model.normalize": [[27, 46], ["inputs.get_shape", "tensorflow.nn.moments", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.zeros", "tensorflow.ones"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.ones"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "inp", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "None", ")", ",", "name", "=", "'inp'", ")", "\n", "self", ".", "pos", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "None", ")", ",", "name", "=", "'pos'", ")", "\n", "self", ".", "neg", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "None", ",", "self", ".", "args", ".", "neg_size", ")", ",", "name", "=", "'neg'", ")", "\n", "\n", "self", ".", "lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "None", ",", "name", "=", "'lr'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "placeholder_with_default", "(", "0.", ",", "shape", "=", "(", ")", ")", "\n", "self", ".", "item_embedding", "=", "item_embedding", "=", "tf", ".", "get_variable", "(", "'item_embedding'", ",", "shape", "=", "(", "self", ".", "n_items", "+", "1", ",", "self", ".", "args", ".", "emsize", ")", ",", "dtype", "=", "tf", ".", "float32", ",", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "self", ".", "args", ".", "l2_reg", ")", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "\n", "input_item", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "item_embedding", ",", "self", ".", "inp", ")", "\n", "mask", "=", "tf", ".", "expand_dims", "(", "tf", ".", "to_float", "(", "tf", ".", "not_equal", "(", "self", ".", "inp", ",", "0", ")", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "args", ".", "model", "==", "'tcn'", ":", "\n", "            ", "num_channels", "=", "[", "self", ".", "args", ".", "nhid", "]", "*", "(", "self", ".", "args", ".", "levels", "-", "1", ")", "+", "[", "self", ".", "args", ".", "emsize", "]", "\n", "self", ".", "net", "=", "TemporalConvNet", "(", "num_channels", ",", "stride", "=", "1", ",", "kernel_size", "=", "self", ".", "args", ".", "ksize", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "", "elif", "self", ".", "args", ".", "model", "==", "'rnn'", ":", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.autoint.model.multihead_attention": [[48, 101], ["tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.layers.dropout", "tensorflow.matmul", "tensorflow.concat", "tensorflow.nn.relu", "model.normalize", "tensorflow.layers.dense", "tensorflow.split", "tensorflow.split", "tensorflow.split", "tensorflow.transpose", "tensorflow.split", "tensorflow.convert_to_tensor", "queries.get_shape", "tf.concat.get_shape().as_list", "tf.concat.get_shape"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.normalize"], ["", "elif", "self", ".", "args", ".", "model", "==", "'transformer'", ":", "\n", "            ", "self", ".", "net", "=", "TransformerNet", "(", "self", ".", "args", ".", "emsize", ",", "self", ".", "args", ".", "levels", ",", "self", ".", "args", ".", "num_heads", ",", "self", ".", "args", ".", "seq_len", ",", "dropout_rate", "=", "self", ".", "dropout", ",", "pos_fixed", "=", "self", ".", "args", ".", "pos_fixed", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "outputs", "=", "self", ".", "net", "(", "input_item", ",", "mask", ")", "\n", "outputs", "*=", "mask", "\n", "ct_vec", "=", "tf", ".", "reshape", "(", "outputs", ",", "(", "-", "1", ",", "self", ".", "args", ".", "emsize", ")", ")", "\n", "outputs_shape", "=", "tf", ".", "shape", "(", "outputs", ")", "\n", "\n", "self", ".", "total_loss", "=", "0.", "\n", "\n", "self", ".", "istarget", "=", "istarget", "=", "tf", ".", "reshape", "(", "tf", ".", "to_float", "(", "tf", ".", "not_equal", "(", "self", ".", "pos", ",", "0", ")", ")", ",", "[", "-", "1", "]", ")", "\n", "\n", "_pos_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embedding", ",", "self", ".", "pos", ")", "\n", "pos_emb", "=", "tf", ".", "reshape", "(", "_pos_emb", ",", "(", "-", "1", ",", "self", ".", "args", ".", "emsize", ")", ")", "\n", "_neg_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embedding", ",", "self", ".", "neg", ")", "\n", "neg_emb", "=", "tf", ".", "reshape", "(", "_neg_emb", ",", "(", "-", "1", ",", "self", ".", "args", ".", "neg_size", ",", "self", ".", "args", ".", "emsize", ")", ")", "\n", "\n", "temp_vec_neg", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "ct_vec", ",", "[", "1", "]", ")", ",", "[", "1", ",", "self", ".", "args", ".", "neg_size", ",", "1", "]", ")", "\n", "\n", "if", "self", ".", "args", ".", "loss", "==", "'ns'", ":", "\n", "            ", "assert", "self", ".", "args", ".", "neg_size", "==", "1", "\n", "pos_logit", "=", "tf", ".", "reduce_sum", "(", "ct_vec", "*", "pos_emb", ",", "-", "1", ")", "\n", "neg_logit", "=", "tf", ".", "squeeze", "(", "tf", ".", "reduce_sum", "(", "temp_vec_neg", "*", "neg_emb", ",", "-", "1", ")", ",", "1", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "\n", "-", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "pos_logit", ")", "+", "1e-24", ")", "*", "istarget", "-", "tf", ".", "log", "(", "1", "-", "tf", ".", "sigmoid", "(", "neg_logit", ")", "+", "1e-24", ")", "*", "istarget", ")", "/", "tf", ".", "reduce_sum", "(", "istarget", ")", "\n", "", "elif", "self", ".", "args", ".", "loss", "==", "'sampled_sm'", ":", "\n", "            ", "pos_logit", "=", "tf", ".", "reduce_sum", "(", "ct_vec", "*", "pos_emb", ",", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "neg_logit", "=", "tf", ".", "reduce_sum", "(", "temp_vec_neg", "*", "neg_emb", ",", "-", "1", ")", "\n", "label_1", "=", "tf", ".", "ones_like", "(", "pos_logit", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "label_0", "=", "tf", ".", "zeros_like", "(", "neg_logit", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "labels", "=", "tf", ".", "concat", "(", "[", "label_1", ",", "label_0", "]", ",", "-", "1", ")", "\n", "logit", "=", "tf", ".", "concat", "(", "[", "pos_logit", ",", "neg_logit", "]", ",", "-", "1", ")", "\n", "softmax_logit", "=", "tf", ".", "nn", ".", "softmax", "(", "logit", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "-", "labels", "*", "tf", ".", "log", "(", "softmax_logit", "+", "1e-24", ")", "-", "(", "1.", "-", "labels", ")", "*", "tf", ".", "log", "(", "1.", "-", "softmax_logit", "+", "1e-24", ")", ",", "-", "1", ")", "*", "istarget", ")", "/", "tf", ".", "reduce_sum", "(", "istarget", ")", "\n", "", "elif", "self", ".", "args", ".", "loss", "==", "'full_sm'", ":", "\n", "            ", "full_logits", "=", "tf", ".", "matmul", "(", "ct_vec", ",", "self", ".", "item_embedding", ",", "transpose_b", "=", "True", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "labels", "=", "tf", ".", "reshape", "(", "self", ".", "pos", ",", "[", "-", "1", "]", ")", ",", "logits", "=", "full_logits", ")", "*", "istarget", ")", "/", "tf", ".", "reduce_sum", "(", "istarget", ")", "\n", "\n", "", "full_logits", "=", "tf", ".", "matmul", "(", "ct_vec", ",", "self", ".", "item_embedding", ",", "transpose_b", "=", "True", ")", "\n", "self", ".", "prediction", "=", "full_logits", "\n", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "total_loss", "+=", "loss", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.Kfold_split.stratifiedKfold._load_data": [[15, 32], ["pandas.read_csv", "pandas.read_csv", "train_y.values.reshape.values.reshape", "print", "print"], "function", ["None"], ["def", "_load_data", "(", "_nrows", "=", "None", ",", "debug", "=", "False", ")", ":", "\n", "\n", "    ", "train_x", "=", "pd", ".", "read_csv", "(", "config", ".", "TRAIN_X", ",", "header", "=", "None", ",", "sep", "=", "' '", ",", "nrows", "=", "_nrows", ",", "dtype", "=", "np", ".", "float", ")", "\n", "train_y", "=", "pd", ".", "read_csv", "(", "config", ".", "TRAIN_Y", ",", "header", "=", "None", ",", "sep", "=", "' '", ",", "nrows", "=", "_nrows", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "\n", "train_x", "=", "train_x", ".", "values", "\n", "train_y", "=", "train_y", ".", "values", ".", "reshape", "(", "[", "-", "1", "]", ")", "\n", "\n", "\n", "print", "(", "'data loading done!'", ")", "\n", "print", "(", "'training data : %d'", "%", "train_y", ".", "shape", "[", "0", "]", ")", "\n", "\n", "\n", "assert", "train_x", ".", "shape", "[", "0", "]", "==", "train_y", ".", "shape", "[", "0", "]", "\n", "\n", "return", "train_x", ",", "train_y", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.Kfold_split.stratifiedKfold.save_x_y": [[34, 50], ["range", "len", "print", "numpy.save", "numpy.save", "_get", "_get", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "str", "str"], "function", ["None"], ["", "def", "save_x_y", "(", "fold_index", ",", "train_x", ",", "train_y", ")", ":", "\n", "    ", "_get", "=", "lambda", "x", ",", "l", ":", "[", "x", "[", "i", "]", "for", "i", "in", "l", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "fold_index", ")", ")", ":", "\n", "        ", "print", "(", "\"now part %d\"", "%", "(", "i", "+", "1", ")", ")", "\n", "part_index", "=", "fold_index", "[", "i", "]", "\n", "Xv_train_", ",", "y_train_", "=", "_get", "(", "train_x", ",", "part_index", ")", ",", "_get", "(", "train_y", ",", "part_index", ")", "\n", "save_dir_Xv", "=", "config", ".", "DATA_PATH", "+", "\"part\"", "+", "str", "(", "i", "+", "1", ")", "+", "\"/\"", "\n", "save_dir_y", "=", "config", ".", "DATA_PATH", "+", "\"part\"", "+", "str", "(", "i", "+", "1", ")", "+", "\"/\"", "\n", "if", "(", "os", ".", "path", ".", "exists", "(", "save_dir_Xv", ")", "==", "False", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir_Xv", ")", "\n", "", "if", "(", "os", ".", "path", ".", "exists", "(", "save_dir_y", ")", "==", "False", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir_y", ")", "\n", "", "save_path_Xv", "=", "save_dir_Xv", "+", "train_x_name", "\n", "save_path_y", "=", "save_dir_y", "+", "train_y_name", "\n", "np", ".", "save", "(", "save_path_Xv", ",", "Xv_train_", ")", "\n", "np", ".", "save", "(", "save_path_y", ",", "y_train_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.Kfold_split.stratifiedKfold.save_i": [[54, 74], ["pandas.read_csv", "print", "numpy.array", "numpy.save", "print", "range", "pd.read_csv.max", "len", "print", "_get", "numpy.save", "len", "str"], "function", ["None"], ["", "", "def", "save_i", "(", "fold_index", ")", ":", "\n", "    ", "_get", "=", "lambda", "x", ",", "l", ":", "[", "x", "[", "i", "]", "for", "i", "in", "l", "]", "\n", "train_i", "=", "pd", ".", "read_csv", "(", "config", ".", "TRAIN_I", ",", "header", "=", "None", ",", "sep", "=", "' '", ",", "nrows", "=", "None", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "train_i", "=", "train_i", ".", "values", "\n", "feature_size", "=", "train_i", ".", "max", "(", ")", "+", "1", "\n", "print", "(", "\"feature_size = %d\"", "%", "feature_size", ")", "\n", "feature_size", "=", "[", "feature_size", "]", "\n", "feature_size", "=", "np", ".", "array", "(", "feature_size", ")", "\n", "np", ".", "save", "(", "config", ".", "DATA_PATH", "+", "\"feature_size.npy\"", ",", "feature_size", ")", "\n", "\n", "\n", "print", "(", "\"train_i size: %d\"", "%", "len", "(", "train_i", ")", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "fold_index", ")", ")", ":", "\n", "        ", "print", "(", "\"now part %d\"", "%", "(", "i", "+", "1", ")", ")", "\n", "part_index", "=", "fold_index", "[", "i", "]", "\n", "Xi_train_", "=", "_get", "(", "train_i", ",", "part_index", ")", "\n", "save_path_Xi", "=", "config", ".", "DATA_PATH", "+", "\"part\"", "+", "str", "(", "i", "+", "1", ")", "+", "'/train_i.npy'", "\n", "np", ".", "save", "(", "save_path_Xi", ",", "Xi_train_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.Kfold_split.stratifiedKfold.main": [[76, 99], ["stratifiedKfold._load_data", "print", "list", "enumerate", "print", "numpy.array", "numpy.save", "stratifiedKfold.save_x_y", "print", "numpy.load", "stratifiedKfold.save_i", "print", "sklearn.model_selection.StratifiedKFold().split", "np.load.append", "len", "sklearn.model_selection.StratifiedKFold"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.Kfold_split.stratifiedKfold._load_data", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.Kfold_split.stratifiedKfold.save_x_y", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.Kfold_split.stratifiedKfold.save_i"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "train_x", ",", "train_y", "=", "_load_data", "(", ")", "\n", "print", "(", "'loading data done!'", ")", "\n", "\n", "folds", "=", "list", "(", "StratifiedKFold", "(", "n_splits", "=", "10", ",", "shuffle", "=", "True", ",", "\n", "random_state", "=", "config", ".", "RANDOM_SEED", ")", ".", "split", "(", "train_x", ",", "train_y", ")", ")", "\n", "\n", "fold_index", "=", "[", "]", "\n", "for", "i", ",", "(", "train_id", ",", "valid_id", ")", "in", "enumerate", "(", "folds", ")", ":", "\n", "        ", "fold_index", ".", "append", "(", "valid_id", ")", "\n", "\n", "", "print", "(", "\"fold num: %d\"", "%", "(", "len", "(", "fold_index", ")", ")", ")", "\n", "\n", "fold_index", "=", "np", ".", "array", "(", "fold_index", ")", "\n", "np", ".", "save", "(", "config", ".", "DATA_PATH", "+", "\"fold_index.npy\"", ",", "fold_index", ")", "\n", "\n", "save_x_y", "(", "fold_index", ",", "train_x", ",", "train_y", ")", "\n", "print", "(", "\"save train_x_y done!\"", ")", "\n", "\n", "fold_index", "=", "np", ".", "load", "(", "config", ".", "DATA_PATH", "+", "\"fold_index.npy\"", ")", "\n", "save_i", "(", "fold_index", ")", "\n", "print", "(", "\"save index done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.Criteo.scale.scale": [[4, 8], ["int", "math.log", "float"], "function", ["None"], ["def", "scale", "(", "x", ")", ":", "\n", "    ", "if", "x", ">", "2", ":", "\n", "        ", "x", "=", "int", "(", "math", ".", "log", "(", "float", "(", "x", ")", ")", "**", "2", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.Criteo.scale.scale_each_fold": [[11, 21], ["range", "print", "numpy.load", "range", "numpy.save", "list", "print", "map", "str", "str"], "function", ["None"], ["", "def", "scale_each_fold", "(", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "1", ",", "11", ")", ":", "\n", "        ", "print", "(", "'now part %d'", "%", "i", ")", "\n", "data", "=", "np", ".", "load", "(", "config", ".", "DATA_PATH", "+", "'part'", "+", "str", "(", "i", ")", "+", "'/train_x.npy'", ")", "\n", "part", "=", "data", "[", ":", ",", "0", ":", "13", "]", "\n", "for", "j", "in", "range", "(", "part", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "j", "%", "100000", "==", "0", ":", "\n", "                ", "print", "(", "j", ")", "\n", "", "part", "[", "j", "]", "=", "list", "(", "map", "(", "scale", ",", "part", "[", "j", "]", ")", ")", "\n", "", "np", ".", "save", "(", "config", ".", "DATA_PATH", "+", "'part'", "+", "str", "(", "i", ")", "+", "'/train_x2.npy'", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.KDD2012.scale.scale": [[4, 8], ["int", "math.log", "float"], "function", ["None"], ["def", "scale", "(", "x", ")", ":", "\n", "    ", "if", "x", ">", "2", ":", "\n", "        ", "x", "=", "int", "(", "math", ".", "log", "(", "float", "(", "x", ")", ")", "**", "2", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.KDD2012.scale.scale_each_fold": [[11, 21], ["range", "print", "numpy.load", "range", "numpy.save", "list", "print", "map", "str", "str"], "function", ["None"], ["", "def", "scale_each_fold", "(", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "1", ",", "11", ")", ":", "\n", "        ", "print", "(", "'now part %d'", "%", "i", ")", "\n", "data", "=", "np", ".", "load", "(", "config", ".", "DATA_PATH", "+", "'part'", "+", "str", "(", "i", ")", "+", "'/train_x.npy'", ")", "\n", "part", "=", "data", "[", ":", ",", "0", ":", "13", "]", "\n", "for", "j", "in", "range", "(", "part", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "j", "%", "100000", "==", "0", ":", "\n", "                ", "print", "(", "j", ")", "\n", "", "part", "[", "j", "]", "=", "list", "(", "map", "(", "scale", ",", "part", "[", "j", "]", ")", ")", "\n", "", "np", ".", "save", "(", "config", ".", "DATA_PATH", "+", "'part'", "+", "str", "(", "i", ")", "+", "'/train_x2.npy'", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.train.str2list": [[13, 18], ["v.split.split", "int", "_.strip"], "function", ["None"], ["\n", "from", ".", "utils", "import", "*", "\n", "from", ".", "model", "import", "*", "\n", "from", ".", "sampler", "import", "*", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Sequential or session-based recommendation'", ")", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.train.str2list2": [[20, 25], ["v.split.split", "float", "_.strip"], "function", ["None"], ["parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "'batch size (default: 128)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seq_len'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'max sequence length (default: 20)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'dropout (default: 0.2)'", ")", "\n", "parser", ".", "add_argument", "(", "'--l2_reg'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'regularization scale (default: 0.0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip'", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "help", "=", "'gradient clip (default: 1.)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'upper epoch limit (default: 20)'", ")", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.train.str2bool": [[27, 34], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["parser", ".", "add_argument", "(", "'--emsize'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'dimension of item embedding (default: 100)'", ")", "\n", "parser", ".", "add_argument", "(", "'--neg_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'size of negative samples (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--worker'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'number of sampling workers (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--nhid'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'number of hidden units (default: 100)'", ")", "\n", "parser", ".", "add_argument", "(", "'--levels'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of levels (default: 3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1111", ",", "help", "=", "'random seed (default: 1111)'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss'", ",", "type", "=", "str", ",", "default", "=", "'ns'", ",", "help", "=", "'type of loss: ns/sampled_sm/full_sm (default: ns)'", ")", "\n", "parser", ".", "add_argument", "(", "'--data'", ",", "type", "=", "str", ",", "default", "=", "'gowalla'", ",", "help", "=", "'data set name (default: gowalla)'", ")", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.train.parse_args": [[35, 64], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.train.parse_args"], ["parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "1e2", ",", "help", "=", "'log interval (default: 1e2)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_interval'", ",", "type", "=", "int", ",", "default", "=", "1e3", ",", "help", "=", "'eval/test interval (default: 1e3)'", ")", "\n", "\n", "# ****************************** unique arguments for rnn model. *******************************************************", "\n", "# None", "\n", "\n", "# ***************************** unique arguemnts for tcn model.", "\n", "parser", ".", "add_argument", "(", "'--ksize'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'kernel size (default: 100)'", ")", "\n", "\n", "# ****************************** unique arguments for transformer model. *************************************************", "\n", "parser", ".", "add_argument", "(", "'--num_blocks'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'num_blocks'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_heads'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'num_heads'", ")", "\n", "parser", ".", "add_argument", "(", "'--pos_fixed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'trainable positional embedding usually has better performance'", ")", "\n", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "tf", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "train_data", ",", "val_data", ",", "test_data", ",", "n_items", ",", "n_users", "=", "data_generator", "(", "args", ")", "\n", "\n", "train_sampler", "=", "Sampler", "(", "\n", "data", "=", "train_data", ",", "\n", "n_items", "=", "n_items", ",", "\n", "n_users", "=", "n_users", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "max_len", "=", "args", ".", "seq_len", ",", "\n", "neg_size", "=", "args", ".", "neg_size", ",", "\n", "n_workers", "=", "args", ".", "worker", ",", "\n", "neg_method", "=", "'rand'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.train._run_": [[67, 117], ["model.AutoInt", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "range", "print", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "model.AutoInt.restore", "model.AutoInt.evaluate", "print", "range", "print", "print", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "time.time", "model.AutoInt.fit_once", "print", "time.time"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.restore", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.evaluate", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.fit_once"], ["checkpoint_dir", "=", "'_'", ".", "join", "(", "[", "'save'", ",", "args", ".", "data", ",", "args", ".", "model", ",", "str", "(", "args", ".", "lr", ")", ",", "str", "(", "args", ".", "l2_reg", ")", ",", "str", "(", "args", ".", "emsize", ")", ",", "str", "(", "args", ".", "dropout", ")", "]", ")", "\n", "\n", "print", "(", "args", ")", "\n", "print", "(", "'#Item: '", ",", "n_items", ")", "\n", "print", "(", "'#User: '", ",", "n_users", ")", "\n", "\n", "model", "=", "NeuralSeqRecommender", "(", "args", ",", "n_items", ",", "n_users", ")", "\n", "\n", "lr", "=", "args", ".", "lr", "\n", "\n", "def", "evaluate", "(", "source", ",", "sess", ")", ":", "\n", "    ", "total_hit_k", "=", "0.0", "\n", "total_ndcg_k", "=", "0.0", "\n", "count", "=", "0.0", "\n", "for", "batch", "in", "source", ":", "\n", "        ", "feed_dict", "=", "{", "model", ".", "inp", ":", "batch", "[", "1", "]", ",", "model", ".", "dropout", ":", "0.", "}", "\n", "feed_dict", "[", "model", ".", "pos", "]", "=", "batch", "[", "2", "]", "\n", "hit", ",", "ndcg", ",", "n_target", "=", "sess", ".", "run", "(", "[", "model", ".", "hit_at_k", ",", "model", ".", "ndcg_at_k", ",", "model", ".", "num_target", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "count", "+=", "n_target", "\n", "total_hit_k", "+=", "hit", "\n", "total_ndcg_k", "+=", "ndcg", "\n", "\n", "", "val_hit", "=", "total_hit_k", "/", "count", "\n", "val_ndcg", "=", "total_ndcg_k", "/", "count", "\n", "\n", "return", "[", "val_hit", ",", "val_ndcg", "]", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "global", "lr", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "all_val_hit", "=", "[", "-", "1", "]", "\n", "early_stop_cn", "=", "0", "\n", "step_count", "=", "0", "\n", "train_loss_l", "=", "0.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Start training...'", ")", "\n", "try", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "cur_batch", "=", "train_sampler", ".", "next_batch", "(", ")", "\n", "inp", "=", "np", ".", "array", "(", "cur_batch", "[", "1", "]", ")", "\n", "feed_dict", "=", "{", "model", ".", "inp", ":", "inp", ",", "model", ".", "lr", ":", "lr", ",", "model", ".", "dropout", ":", "args", ".", "dropout", "}", "\n", "feed_dict", "[", "model", ".", "pos", "]", "=", "np", ".", "array", "(", "cur_batch", "[", "2", "]", ")", "\n", "feed_dict", "[", "model", ".", "neg", "]", "=", "np", ".", "array", "(", "cur_batch", "[", "3", "]", ")", "\n", "_", ",", "train_loss", "=", "sess", ".", "run", "(", "[", "model", ".", "train_op", ",", "model", ".", "loss", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "train_loss_l", "+=", "train_loss", "\n", "step_count", "+=", "1", "\n", "if", "step_count", "%", "args", ".", "log_interval", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.__init__": [[104, 141], ["model.AutoInt._init_graph", "os.makedirs", "str", "os.path.exists"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt._init_graph"], ["\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ")", "\n", "gvs", "=", "optimizer", ".", "compute_gradients", "(", "self", ".", "total_loss", ")", "\n", "capped_gvs", "=", "[", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "self", ".", "args", ".", "clip", ",", "self", ".", "args", ".", "clip", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "gvs", "]", "\n", "self", ".", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "capped_gvs", ")", "\n", "self", ".", "hit_at_k", ",", "self", ".", "ndcg_at_k", ",", "self", ".", "num_target", "=", "self", ".", "_metric_at_k", "(", ")", "\n", "\n", "\n", "", "def", "_metric_at_k", "(", "self", ",", "k", "=", "20", ")", ":", "\n", "        ", "prediction", "=", "self", ".", "prediction", "\n", "prediction_transposed", "=", "tf", ".", "transpose", "(", "prediction", ")", "\n", "labels", "=", "tf", ".", "reshape", "(", "self", ".", "pos", ",", "shape", "=", "(", "-", "1", ",", ")", ")", "\n", "pred_values", "=", "tf", ".", "expand_dims", "(", "tf", ".", "diag_part", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "prediction_transposed", ",", "labels", ")", ")", ",", "-", "1", ")", "\n", "tile_pred_values", "=", "tf", ".", "tile", "(", "pred_values", ",", "[", "1", ",", "self", ".", "n_items", "]", ")", "\n", "ranks", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "prediction", "[", ":", ",", "1", ":", "]", ">", "tile_pred_values", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "-", "1", ")", "+", "1", "\n", "\n", "istarget", "=", "tf", ".", "reshape", "(", "self", ".", "istarget", ",", "shape", "=", "(", "-", "1", ",", ")", ")", "\n", "ndcg", "=", "1.", "/", "(", "log2", "(", "1.0", "+", "ranks", ")", ")", "\n", "hit_at_k", "=", "tf", ".", "nn", ".", "in_top_k", "(", "prediction", ",", "labels", ",", "k", "=", "k", ")", "# also known as Recall@k", "\n", "hit_at_k", "=", "tf", ".", "cast", "(", "hit_at_k", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "istarget", "=", "tf", ".", "reshape", "(", "self", ".", "istarget", ",", "shape", "=", "(", "-", "1", ",", ")", ")", "\n", "hit_at_k", "*=", "istarget", "\n", "ndcg_at_k", "=", "ndcg", "*", "istarget", "*", "hit_at_k", "\n", "\n", "return", "(", "tf", ".", "reduce_sum", "(", "hit_at_k", ")", ",", "tf", ".", "reduce_sum", "(", "ndcg_at_k", ")", ",", "tf", ".", "reduce_sum", "(", "istarget", ")", ")", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt._init_graph": [[143, 264], ["tensorflow.Graph", "model.AutoInt.graph.as_default", "tensorflow.set_random_seed", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "model.AutoInt._initialize_weights", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.multiply", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.div", "tensorflow.concat", "tensorflow.nn.dropout", "range", "tensorflow.reshape", "tensorflow.add", "tensorflow.Variable", "tensorflow.train.Saver", "tensorflow.global_variables_initializer", "model.AutoInt._init_session", "model.AutoInt.sess.run", "model.AutoInt.count_param", "tensorflow.reduce_sum", "tensorflow.reshape", "range", "tensorflow.add", "model.multihead_attention", "tensorflow.matmul", "tensorflow.nn.sigmoid", "tensorflow.losses.log_loss", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.expand_dims", "len", "tensorflow.add", "tensorflow.nn.relu", "tensorflow.nn.dropout", "tensorflow.matmul", "tensorflow.nn.l2_loss", "range", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.train.AdagradOptimizer().minimize", "tensorflow.matmul", "model.AutoInt.batch_norm_layer", "tensorflow.subtract", "len", "tensorflow.train.AdamOptimizer", "tensorflow.train.GradientDescentOptimizer().minimize", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.train.AdagradOptimizer", "tensorflow.train.MomentumOptimizer().minimize", "tensorflow.train.GradientDescentOptimizer", "tensorflow.train.MomentumOptimizer"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt._initialize_weights", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt._init_session", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.count_param", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.multihead_attention", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.batch_norm_layer"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.count_param": [[266, 272], ["numpy.sum", "print", "print", "numpy.prod", "v.get_shape().as_list", "tensorflow.trainable_variables", "v.get_shape"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt._init_session": [[274, 278], ["tensorflow.ConfigProto", "tensorflow.Session"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt._initialize_weights": [[280, 324], ["dict", "tensorflow.Variable", "numpy.sqrt", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.random_normal", "len", "numpy.sqrt", "tensorflow.Variable", "tensorflow.Variable", "range", "numpy.sqrt", "tensorflow.Variable", "tensorflow.Variable", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "numpy.sqrt", "tensorflow.Variable", "tensorflow.Variable", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.batch_norm_layer": [[325, 332], ["tensorflow.contrib.layers.python.layers.batch_norm", "tensorflow.contrib.layers.python.layers.batch_norm", "tensorflow.cond"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.get_batch": [[334, 339], ["len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.shuffle_in_unison_scary": [[342, 353], ["numpy.random.get_state", "numpy.random.shuffle", "numpy.random.set_state", "numpy.random.shuffle", "numpy.random.set_state", "numpy.random.shuffle", "numpy.random.set_state", "numpy.random.shuffle", "numpy.random.set_state", "numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.shuffle", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.shuffle", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.shuffle", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.shuffle", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.minibatch.MinibatchIterator.shuffle"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.fit_on_batch": [[355, 365], ["model.AutoInt.sess.run"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.fit_once": [[368, 408], ["time.time.time", "model.AutoInt.shuffle_in_unison_scary", "int", "range", "model.AutoInt.evaluate", "model.AutoInt.train_result.append", "model.AutoInt.train_loss.append", "model.AutoInt.get_batch", "model.AutoInt.fit_on_batch", "model.AutoInt.evaluate", "model.AutoInt.valid_result.append", "model.AutoInt.valid_loss.append", "model.AutoInt.training_termination", "len", "model.AutoInt.saver.save", "print", "print", "print", "time.time.time", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.shuffle_in_unison_scary", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.evaluate", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.get_batch", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.fit_on_batch", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.evaluate", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.training_termination"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.training_termination": [[411, 426], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.predict": [[428, 459], ["model.AutoInt.get_batch", "len", "len", "len", "model.AutoInt.sess.run", "model.AutoInt.get_batch", "numpy.reshape", "numpy.concatenate", "len", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.get_batch", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.get_batch"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.evaluate": [[461, 471], ["model.AutoInt.predict", "numpy.clip", "model.AutoInt.eval_metric", "sklearn.metrics.log_loss"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.predict"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.restore": [[472, 480], ["tensorflow.train.get_checkpoint_state", "model.AutoInt.saver.restore", "print"], "methods", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.AutoInt.restore"], []], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.normalize": [[27, 46], ["inputs.get_shape", "tensorflow.nn.moments", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.zeros", "tensorflow.ones"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.zeros", "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.dgrec.inits.ones"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "inp", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "None", ")", ",", "name", "=", "'inp'", ")", "\n", "self", ".", "pos", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "None", ")", ",", "name", "=", "'pos'", ")", "\n", "self", ".", "neg", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "None", ",", "self", ".", "args", ".", "neg_size", ")", ",", "name", "=", "'neg'", ")", "\n", "\n", "self", ".", "lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "None", ",", "name", "=", "'lr'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "placeholder_with_default", "(", "0.", ",", "shape", "=", "(", ")", ")", "\n", "self", ".", "item_embedding", "=", "item_embedding", "=", "tf", ".", "get_variable", "(", "'item_embedding'", ",", "shape", "=", "(", "self", ".", "n_items", "+", "1", ",", "self", ".", "args", ".", "emsize", ")", ",", "dtype", "=", "tf", ".", "float32", ",", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "self", ".", "args", ".", "l2_reg", ")", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "\n", "input_item", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "item_embedding", ",", "self", ".", "inp", ")", "\n", "mask", "=", "tf", ".", "expand_dims", "(", "tf", ".", "to_float", "(", "tf", ".", "not_equal", "(", "self", ".", "inp", ",", "0", ")", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "args", ".", "model", "==", "'tcn'", ":", "\n", "            ", "num_channels", "=", "[", "self", ".", "args", ".", "nhid", "]", "*", "(", "self", ".", "args", ".", "levels", "-", "1", ")", "+", "[", "self", ".", "args", ".", "emsize", "]", "\n", "self", ".", "net", "=", "TemporalConvNet", "(", "num_channels", ",", "stride", "=", "1", ",", "kernel_size", "=", "self", ".", "args", ".", "ksize", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "", "elif", "self", ".", "args", ".", "model", "==", "'rnn'", ":", "\n"]], "home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.multihead_attention": [[48, 101], ["tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.layers.dropout", "tensorflow.matmul", "tensorflow.concat", "tensorflow.nn.relu", "model.normalize", "tensorflow.layers.dense", "tensorflow.split", "tensorflow.split", "tensorflow.split", "tensorflow.transpose", "tensorflow.split", "tensorflow.convert_to_tensor", "queries.get_shape", "tf.concat.get_shape().as_list", "tf.concat.get_shape"], "function", ["home.repos.pwc.inspect_result.DeepGraphLearning_RecommenderSystems.code.model.normalize"], ["", "elif", "self", ".", "args", ".", "model", "==", "'transformer'", ":", "\n", "            ", "self", ".", "net", "=", "TransformerNet", "(", "self", ".", "args", ".", "emsize", ",", "self", ".", "args", ".", "levels", ",", "self", ".", "args", ".", "num_heads", ",", "self", ".", "args", ".", "seq_len", ",", "dropout_rate", "=", "self", ".", "dropout", ",", "pos_fixed", "=", "self", ".", "args", ".", "pos_fixed", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "outputs", "=", "self", ".", "net", "(", "input_item", ",", "mask", ")", "\n", "outputs", "*=", "mask", "\n", "ct_vec", "=", "tf", ".", "reshape", "(", "outputs", ",", "(", "-", "1", ",", "self", ".", "args", ".", "emsize", ")", ")", "\n", "outputs_shape", "=", "tf", ".", "shape", "(", "outputs", ")", "\n", "\n", "self", ".", "total_loss", "=", "0.", "\n", "\n", "self", ".", "istarget", "=", "istarget", "=", "tf", ".", "reshape", "(", "tf", ".", "to_float", "(", "tf", ".", "not_equal", "(", "self", ".", "pos", ",", "0", ")", ")", ",", "[", "-", "1", "]", ")", "\n", "\n", "_pos_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embedding", ",", "self", ".", "pos", ")", "\n", "pos_emb", "=", "tf", ".", "reshape", "(", "_pos_emb", ",", "(", "-", "1", ",", "self", ".", "args", ".", "emsize", ")", ")", "\n", "_neg_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embedding", ",", "self", ".", "neg", ")", "\n", "neg_emb", "=", "tf", ".", "reshape", "(", "_neg_emb", ",", "(", "-", "1", ",", "self", ".", "args", ".", "neg_size", ",", "self", ".", "args", ".", "emsize", ")", ")", "\n", "\n", "temp_vec_neg", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "ct_vec", ",", "[", "1", "]", ")", ",", "[", "1", ",", "self", ".", "args", ".", "neg_size", ",", "1", "]", ")", "\n", "\n", "if", "self", ".", "args", ".", "loss", "==", "'ns'", ":", "\n", "            ", "assert", "self", ".", "args", ".", "neg_size", "==", "1", "\n", "pos_logit", "=", "tf", ".", "reduce_sum", "(", "ct_vec", "*", "pos_emb", ",", "-", "1", ")", "\n", "neg_logit", "=", "tf", ".", "squeeze", "(", "tf", ".", "reduce_sum", "(", "temp_vec_neg", "*", "neg_emb", ",", "-", "1", ")", ",", "1", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "\n", "-", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "pos_logit", ")", "+", "1e-24", ")", "*", "istarget", "-", "tf", ".", "log", "(", "1", "-", "tf", ".", "sigmoid", "(", "neg_logit", ")", "+", "1e-24", ")", "*", "istarget", ")", "/", "tf", ".", "reduce_sum", "(", "istarget", ")", "\n", "", "elif", "self", ".", "args", ".", "loss", "==", "'sampled_sm'", ":", "\n", "            ", "pos_logit", "=", "tf", ".", "reduce_sum", "(", "ct_vec", "*", "pos_emb", ",", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "neg_logit", "=", "tf", ".", "reduce_sum", "(", "temp_vec_neg", "*", "neg_emb", ",", "-", "1", ")", "\n", "label_1", "=", "tf", ".", "ones_like", "(", "pos_logit", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "label_0", "=", "tf", ".", "zeros_like", "(", "neg_logit", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "labels", "=", "tf", ".", "concat", "(", "[", "label_1", ",", "label_0", "]", ",", "-", "1", ")", "\n", "logit", "=", "tf", ".", "concat", "(", "[", "pos_logit", ",", "neg_logit", "]", ",", "-", "1", ")", "\n", "softmax_logit", "=", "tf", ".", "nn", ".", "softmax", "(", "logit", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "-", "labels", "*", "tf", ".", "log", "(", "softmax_logit", "+", "1e-24", ")", "-", "(", "1.", "-", "labels", ")", "*", "tf", ".", "log", "(", "1.", "-", "softmax_logit", "+", "1e-24", ")", ",", "-", "1", ")", "*", "istarget", ")", "/", "tf", ".", "reduce_sum", "(", "istarget", ")", "\n", "", "elif", "self", ".", "args", ".", "loss", "==", "'full_sm'", ":", "\n", "            ", "full_logits", "=", "tf", ".", "matmul", "(", "ct_vec", ",", "self", ".", "item_embedding", ",", "transpose_b", "=", "True", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "labels", "=", "tf", ".", "reshape", "(", "self", ".", "pos", ",", "[", "-", "1", "]", ")", ",", "logits", "=", "full_logits", ")", "*", "istarget", ")", "/", "tf", ".", "reduce_sum", "(", "istarget", ")", "\n", "\n", "", "full_logits", "=", "tf", ".", "matmul", "(", "ct_vec", ",", "self", ".", "item_embedding", ",", "transpose_b", "=", "True", ")", "\n", "self", ".", "prediction", "=", "full_logits", "\n", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "total_loss", "+=", "loss", "\n"]]}