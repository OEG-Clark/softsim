{"home.repos.pwc.inspect_result.lixiny_CPF.scripts.run_demo.set_all_seeds": [[31, 36], ["torch.cuda.manual_seed_all", "torch.manual_seed", "numpy.random.seed", "random.seed"], "function", ["None"], ["def", "set_all_seeds", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.run_demo.process_result": [[38, 165], ["manopth.anchorutils.anchor_load", "manopth.anchorutils.get_rev_anchor_mapping", "results[].detach", "results[].detach", "results[].detach", "results[].detach", "torch.ones_like", "torch.argmax", "collate_mask[].bool", "filtered_vertex_contact.cpu.cpu", "filtered_contact_region.cpu.cpu", "filtered_anchor_elasti.cpu.cpu", "range", "hocontact.utils.contactutils.dumped_process_contact_info", "honet_res[].reshape", "honet_res[].reshape", "manopth.manolayer.ManoLayer", "manopth.quatutils.angle_axis_to_quaternion", "honet_res[].reshape", "manopth.manolayer.ManoLayer.", "rebuild_joints.squeeze.squeeze", "sample_vertex_contact.bool", "sample_contact_in_image_mask.bool", "int", "sample_res.append", "copy.deepcopy", "[].detach().cpu", "honet_res[].reshape", "manopth.quatutils.angle_axis_to_quaternion.reshape", "shape.reshape", "verts.detach().clone().cpu().numpy", "joints.detach().clone().cpu().numpy", "manopth.quatutils.angle_axis_to_quaternion.detach().clone().cpu().numpy", "shape.detach().clone().cpu().numpy", "new_tsl.detach().clone().cpu().numpy", "obj_verts_3d.detach().clone().cpu().numpy", "honet_res[].reshape.detach().clone().cpu().numpy", "honet_res[].reshape.detach().clone().cpu().numpy", "int", "len", "filtered_anchor_elasti[].tolist", "[].detach().cpu", "torch.sigmoid", "[].detach", "verts.detach().clone().cpu", "joints.detach().clone().cpu", "manopth.quatutils.angle_axis_to_quaternion.detach().clone().cpu", "shape.detach().clone().cpu", "new_tsl.detach().clone().cpu", "obj_verts_3d.detach().clone().cpu", "honet_res[].reshape.detach().clone().cpu", "honet_res[].reshape.detach().clone().cpu", "[].detach", "verts.detach().clone", "joints.detach().clone", "manopth.quatutils.angle_axis_to_quaternion.detach().clone", "shape.detach().clone", "new_tsl.detach().clone", "obj_verts_3d.detach().clone", "honet_res[].reshape.detach().clone", "honet_res[].reshape.detach().clone", "verts.detach", "joints.detach", "manopth.quatutils.angle_axis_to_quaternion.detach", "shape.detach", "new_tsl.detach", "obj_verts_3d.detach", "honet_res[].reshape.detach", "honet_res[].reshape.detach"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.contactutils.dumped_process_contact_info"], ["", "def", "process_result", "(", "results", ",", "vc_thresh", ",", "mano_root", ",", "anchor_root", ")", ":", "\n", "    ", "_", ",", "_", ",", "_", ",", "anchor_mapping", "=", "anchor_load", "(", "anchor_root", ")", "\n", "rev_anchor_mapping", "=", "get_rev_anchor_mapping", "(", "anchor_mapping", ")", "\n", "honet_fields", "=", "[", "\n", "\"hand_tsl\"", ",", "\n", "\"hand_joints_3d\"", ",", "\n", "\"hand_verts_3d\"", ",", "\n", "\"hand_full_pose\"", ",", "\n", "# \"hand_pca_pose\", # NOTE: this fields is not maintained in current version", "\n", "\"hand_shape\"", ",", "\n", "\"obj_tsl\"", ",", "\n", "\"obj_rot\"", ",", "\n", "\"obj_verts_3d\"", ",", "\n", "]", "\n", "# ====== assert fields in results: contact related", "\n", "assert", "\"recov_vertex_contact\"", "in", "results", ",", "f\"vertex_contact not found\"", "\n", "assert", "\"recov_contact_region\"", "in", "results", ",", "f\"contact_region not found\"", "\n", "assert", "\"recov_anchor_elasti\"", "in", "results", ",", "f\"anchor_elasti not found\"", "\n", "recov_vertex_contact", "=", "results", "[", "\"recov_vertex_contact\"", "]", ".", "detach", "(", ")", "# TENSOR[B, N]", "\n", "recov_contact_in_image_mask", "=", "results", "[", "\"recov_contact_in_image_mask\"", "]", ".", "detach", "(", ")", "# TENSOR[B, N]", "\n", "recov_contact_region", "=", "results", "[", "\"recov_contact_region\"", "]", ".", "detach", "(", ")", "# TENSOR[B, N, 17]", "\n", "recov_anchor_elasti_pred", "=", "results", "[", "\"recov_anchor_elasti\"", "]", ".", "detach", "(", ")", "# TENSOR[B, N, 4]", "\n", "collate_mask", "=", "torch", ".", "ones_like", "(", "recov_vertex_contact", ")", "\n", "\n", "recov_vertex_contact_pred", "=", "(", "torch", ".", "sigmoid", "(", "recov_vertex_contact", ")", ">", "vc_thresh", ")", ".", "bool", "(", ")", "# TENSOR[B, N]", "\n", "recov_contact_region_pred", "=", "torch", ".", "argmax", "(", "recov_contact_region", ",", "dim", "=", "2", ")", "# TENSOR[B, N]", "\n", "\n", "# ====== assert fields in results: honet related", "\n", "for", "field", "in", "honet_fields", ":", "\n", "        ", "assert", "field", "in", "results", ",", "f\"{field} not found\"", "\n", "\n", "# ==================== dump contact related info >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "", "idx", "=", "0", "\n", "sample_collate_mask", "=", "collate_mask", "[", "idx", ",", ":", "]", ".", "bool", "(", ")", "# TENSOR[N, ]", "\n", "sample_vertex_contact", "=", "recov_vertex_contact_pred", "[", "idx", ",", ":", "]", "# TENSOR[N, ]", "\n", "sample_contact_in_image_mask", "=", "recov_contact_in_image_mask", "[", "idx", ",", ":", "]", "# TENSOR[N, ]", "\n", "combined_vertex_contact", "=", "sample_vertex_contact", ".", "bool", "(", ")", "&", "sample_contact_in_image_mask", ".", "bool", "(", ")", "# TENSOR[N,]", "\n", "filtered_vertex_contact", "=", "combined_vertex_contact", "[", "sample_collate_mask", "]", "# TENSOR[X, ]", "\n", "\n", "sample_contact_region", "=", "recov_contact_region_pred", "[", "idx", ",", ":", "]", "# TENSOR[N, ]", "\n", "filtered_contact_region", "=", "sample_contact_region", "[", "sample_collate_mask", "]", "# TENSOR[X, ]", "\n", "sample_anchor_elasti", "=", "recov_anchor_elasti_pred", "[", "idx", ",", ":", ",", ":", "]", "# TENSOR[N, 4]", "\n", "filtered_anchor_elasti", "=", "sample_anchor_elasti", "[", "sample_collate_mask", ",", ":", "]", "# TENSOR[X, 4]", "\n", "\n", "# transport from cuda to cpu", "\n", "filtered_vertex_contact", "=", "filtered_vertex_contact", ".", "cpu", "(", ")", "\n", "filtered_contact_region", "=", "filtered_contact_region", ".", "cpu", "(", ")", "\n", "filtered_anchor_elasti", "=", "filtered_anchor_elasti", ".", "cpu", "(", ")", "\n", "\n", "# iterate over all points", "\n", "sample_res", "=", "[", "]", "\n", "n_points", "=", "filtered_vertex_contact", ".", "shape", "[", "0", "]", "# X", "\n", "for", "p_idx", "in", "range", "(", "n_points", ")", ":", "\n", "        ", "p_contact", "=", "int", "(", "filtered_vertex_contact", "[", "p_idx", "]", ")", "\n", "if", "p_contact", "==", "0", ":", "\n", "            ", "p_res", "=", "{", "\n", "\"contact\"", ":", "0", ",", "\n", "}", "\n", "", "else", ":", "# p_contact == 1", "\n", "            ", "p_region", "=", "int", "(", "filtered_contact_region", "[", "p_idx", "]", ")", "\n", "p_anchor_id", "=", "rev_anchor_mapping", "[", "p_region", "]", "\n", "p_n_anchor", "=", "len", "(", "p_anchor_id", ")", "\n", "p_anchor_elasti", "=", "filtered_anchor_elasti", "[", "p_idx", ",", ":", "p_n_anchor", "]", ".", "tolist", "(", ")", "\n", "p_res", "=", "{", "\n", "\"contact\"", ":", "1", ",", "\n", "\"region\"", ":", "p_region", ",", "\n", "\"anchor_id\"", ":", "p_anchor_id", ",", "\n", "\"anchor_elasti\"", ":", "p_anchor_elasti", ",", "\n", "}", "\n", "", "sample_res", ".", "append", "(", "p_res", ")", "\n", "\n", "", "(", "vertex_contact", ",", "hand_region", ",", "anchor_id", ",", "anchor_elasti", ",", "anchor_padding_mask", ")", "=", "dumped_process_contact_info", "(", "\n", "deepcopy", "(", "sample_res", ")", ",", "anchor_mapping", ",", "pad_vertex", "=", "True", ",", "pad_anchor", "=", "True", ",", "elasti_th", "=", "0.00", "\n", ")", "\n", "new_sample_res", "=", "{", "\n", "\"vertex_contact\"", ":", "vertex_contact", ",", "\n", "\"hand_region\"", ":", "hand_region", ",", "\n", "\"anchor_id\"", ":", "anchor_id", ",", "\n", "\"anchor_elasti\"", ":", "anchor_elasti", ",", "\n", "\"anchor_padding_mask\"", ":", "anchor_padding_mask", ",", "\n", "}", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ==================== dump honet related info >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "honet_res", "=", "{", "}", "\n", "for", "field", "in", "honet_fields", ":", "\n", "        ", "if", "field", "in", "[", "\"obj_verts_3d\"", "]", ":", "\n", "            ", "honet_res", "[", "field", "]", "=", "results", "[", "field", "]", "[", "idx", ",", "...", "]", "[", "sample_collate_mask", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "honet_res", "[", "field", "]", "=", "results", "[", "field", "]", "[", "idx", ",", "...", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "verts", "=", "honet_res", "[", "\"hand_verts_3d\"", "]", "\n", "joints", "=", "honet_res", "[", "\"hand_joints_3d\"", "]", "\n", "obj_verts_3d", "=", "honet_res", "[", "\"obj_verts_3d\"", "]", "\n", "obj_tsl", "=", "honet_res", "[", "\"obj_tsl\"", "]", ".", "reshape", "(", "(", "3", ",", ")", ")", "\n", "obj_rot", "=", "honet_res", "[", "\"obj_rot\"", "]", ".", "reshape", "(", "(", "3", ",", ")", ")", "\n", "\n", "tmp_layer", "=", "ManoLayer", "(", "\n", "joint_rot_mode", "=", "\"quat\"", ",", "\n", "root_rot_mode", "=", "\"quat\"", ",", "\n", "use_pca", "=", "False", ",", "\n", "mano_root", "=", "mano_root", ",", "\n", "center_idx", "=", "9", ",", "\n", "flat_hand_mean", "=", "True", ",", "\n", "return_transf", "=", "True", ",", "\n", "return_full_pose", "=", "True", ",", "\n", ")", "\n", "# adjust honet_res hand_tsl, as we have different manolayer", "\n", "pose", "=", "angle_axis_to_quaternion", "(", "honet_res", "[", "\"hand_full_pose\"", "]", ".", "reshape", "(", "(", "16", ",", "3", ")", ")", ")", "\n", "shape", "=", "honet_res", "[", "\"hand_shape\"", "]", "\n", "tsl", "=", "honet_res", "[", "\"hand_tsl\"", "]", ".", "reshape", "(", "(", "3", ",", ")", ")", "\n", "_", ",", "rebuild_joints", ",", "_", ",", "_", "=", "tmp_layer", "(", "pose", ".", "reshape", "(", "(", "1", ",", "64", ")", ")", ",", "shape", ".", "reshape", "(", "(", "1", ",", "10", ")", ")", ")", "\n", "rebuild_joints", "=", "rebuild_joints", "+", "tsl", "\n", "rebuild_joints", "=", "rebuild_joints", ".", "squeeze", "(", "0", ")", "\n", "new_tsl", "=", "tsl", "+", "joints", "[", "0", "]", "-", "rebuild_joints", "[", "0", "]", "# align to honet_res", "\n", "\n", "new_honet_res", "=", "{", "\n", "\"hand_verts_3d\"", ":", "verts", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "\"hand_joints_3d\"", ":", "joints", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "\"hand_pose\"", ":", "pose", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "\"hand_shape\"", ":", "shape", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "\"hand_tsl\"", ":", "new_tsl", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "\"obj_verts_3d\"", ":", "obj_verts_3d", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "\"obj_tsl\"", ":", "obj_tsl", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "\"obj_rot\"", ":", "obj_rot", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "}", "\n", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "return", "(", "new_sample_res", ",", "new_honet_res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.run_demo.epoch_pass": [[167, 186], ["termcolor.cprint", "model.eval", "tqdm.tqdm", "torch.no_grad", "enumerate", "model", "res.append", "prefix.capitalize"], "function", ["None"], ["", "def", "epoch_pass", "(", "rank", ",", "prefix", ",", "loader", ",", "model", ",", "epoch", "=", "0", ")", ":", "\n", "    ", "cprint", "(", "f\"{prefix.capitalize()} Epoch {epoch}\"", ",", "\"blue\"", ")", "\n", "\n", "# model will always be in eval mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "res", "=", "[", "]", "\n", "\n", "# ==================== Forward >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# loop over dataset", "\n", "loader", "=", "tqdm", "(", "loader", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "# model", "\n", "            ", "ls_results", "=", "model", "(", "batch", ",", "rank", "=", "rank", ")", "\n", "res", ".", "append", "(", "ls_results", "[", "-", "1", "]", ")", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.run_demo.picr_stage": [[188, 293], ["run_demo.set_all_seeds", "hocontact.utils.ioutils.print_args", "termcolor.cprint", "hocontact.hodatasets.hodata.HOdata.get_dataset", "hocontact.utils.ioutils.print_query", "torch.utils.data.DataLoader", "hocontact.models.picr.PicrHourglassPointNet", "hocontact.models.picr.PicrHourglassPointNet.to", "hocontact.utils.ioutils.reload_checkpoint", "termcolor.cprint", "termcolor.cprint", "termcolor.cprint", "termcolor.cprint", "termcolor.cprint", "hocontact.utils.ioutils.param_size", "hocontact.utils.ioutils.param_size", "hocontact.utils.ioutils.param_size", "termcolor.cprint", "termcolor.cprint", "termcolor.cprint", "run_demo.epoch_pass", "termcolor.cprint", "datetime.datetime.now", "termcolor.cprint", "exit", "run_demo.process_result", "total_res.update", "total_res.update", "stage_res.append", "hocontact.utils.ioutils.param_size", "hocontact.utils.ioutils.param_size", "hocontact.utils.ioutils.param_size", "hocontact.utils.ioutils.param_size", "hocontact.utils.ioutils.param_size"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.scripts.dump_picr_res.set_all_seeds", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.print_args", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_dataset", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.print_query", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.reload_checkpoint", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.param_size", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.param_size", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.param_size", "home.repos.pwc.inspect_result.lixiny_CPF.scripts.run_demo.epoch_pass", "home.repos.pwc.inspect_result.lixiny_CPF.scripts.run_demo.process_result", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.param_size", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.param_size", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.param_size", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.param_size", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.param_size"], ["", "def", "picr_stage", "(", "args", ")", ":", "\n", "    ", "rank", "=", "args", ".", "gpu", "\n", "target_device", "=", "f\"cuda:{rank}\"", "\n", "set_all_seeds", "(", "args", ".", "manual_seed", ")", "\n", "\n", "if", "args", ".", "exp_keyword", "is", "None", ":", "\n", "        ", "now", "=", "datetime", ".", "now", "(", ")", "\n", "exp_keyword", "=", "f\"{now.year}_{now.month:02d}_{now.day:02d}_{now.hour:02d}\"", "\n", "", "else", ":", "\n", "        ", "exp_keyword", "=", "args", ".", "exp_keyword", "\n", "\n", "", "dat_str", "=", "\"example\"", "\n", "split_str", "=", "\"example\"", "\n", "exp_id", "=", "f\"checkpoints/picr_geo_example/{dat_str}_{split_str}\"", "\n", "exp_id", "=", "f\"{exp_id}/{exp_keyword}\"", "\n", "\n", "ioutils", ".", "print_args", "(", "args", ")", "\n", "\n", "cprint", "(", "\n", "f\"Saving experiment logs, models, and training curves and images to {exp_id}\"", ",", "\n", "\"white\"", ",", "\n", ")", "\n", "\n", "# ==================== Creating Datasets >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "example_dataset", "=", "HOdata", ".", "get_dataset", "(", "\n", "dataset", "=", "\"fhb_example\"", ",", "\n", "data_root", "=", "args", ".", "data_root", ",", "\n", "data_split", "=", "\"example\"", ",", "\n", "split_mode", "=", "\"example\"", ",", "\n", "use_cache", "=", "True", ",", "\n", "mini_factor", "=", "1.0", ",", "\n", "center_idx", "=", "9", ",", "\n", "enable_contact", "=", "True", ",", "\n", "filter_no_contact", "=", "True", ",", "\n", "filter_thresh", "=", "10.0", ",", "\n", "synt_factor", "=", "1", ",", "\n", ")", "\n", "ioutils", ".", "print_query", "(", "example_dataset", ".", "queries", ",", "desp", "=", "\"example_dataset_queries\"", ")", "\n", "example_loader", "=", "DataLoader", "(", "\n", "example_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "drop_last", "=", "False", ",", "\n", "collate_fn", "=", "ho_collate", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ==================== initialize model >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "_model", "=", "PicrHourglassPointNet", "(", "\n", "hg_stacks", "=", "args", ".", "hg_stacks", ",", "\n", "hg_blocks", "=", "args", ".", "hg_blocks", ",", "\n", "hg_classes", "=", "args", ".", "hg_classes", ",", "\n", "obj_scale_factor", "=", "args", ".", "obj_scale_factor", ",", "\n", "honet_resnet_version", "=", "args", ".", "honet_resnet_version", ",", "\n", "honet_center_idx", "=", "args", ".", "center_idx", ",", "\n", "honet_mano_lambda_recov_joints3d", "=", "args", ".", "honet_mano_lambda_recov_joints3d", ",", "\n", "honet_mano_lambda_recov_verts3d", "=", "args", ".", "honet_mano_lambda_recov_verts3d", ",", "\n", "honet_mano_lambda_shape", "=", "args", ".", "honet_mano_lambda_shape", ",", "\n", "honet_mano_lambda_pose_reg", "=", "args", ".", "honet_mano_lambda_pose_reg", ",", "\n", "honet_obj_lambda_recov_verts3d", "=", "args", ".", "honet_obj_lambda_recov_verts3d", ",", "\n", "honet_obj_trans_factor", "=", "args", ".", "honet_obj_trans_factor", ",", "\n", "honet_mano_fhb_hand", "=", "args", ".", "honet_mano_fhb_hand", ",", "\n", ")", "\n", "model", "=", "_model", ".", "to", "(", "target_device", ")", "\n", "\n", "# check init_ckpt option", "\n", "if", "args", ".", "init_ckpt", "is", "None", ":", "\n", "        ", "cprint", "(", "\"no initializing checkpoint provided. abort!\"", ",", "\"red\"", ")", "\n", "exit", "(", ")", "\n", "", "map_location", "=", "f\"cuda:{rank}\"", "\n", "_", "=", "ioutils", ".", "reload_checkpoint", "(", "model", ",", "resume_path", "=", "args", ".", "init_ckpt", ",", "as_parallel", "=", "False", ",", "map_location", "=", "map_location", ")", "\n", "# only weights is reloaded, others are dropped", "\n", "\n", "# ====== print model size information", "\n", "cprint", "(", "f\"Model total size == {ioutils.param_size(model)} MB\"", ")", "\n", "cprint", "(", "f\"  |  HONet total size == {ioutils.param_size(model.ho_net)} MB\"", ")", "\n", "cprint", "(", "f\"  |  BaseNet total size == {ioutils.param_size(model.base_net)} MB\"", ")", "\n", "cprint", "(", "f\"  \\\\  ContactHead total size == {ioutils.param_size(model.contact_head)} MB\"", ")", "\n", "cprint", "(", "f\"    |  EncodeModule total size == {ioutils.param_size(model.contact_head.encoder)} MB\"", ")", "\n", "decode_vertex_contact_size", "=", "ioutils", ".", "param_size", "(", "model", ".", "contact_head", ".", "vertex_contact_decoder", ")", "\n", "decode_contact_region_size", "=", "ioutils", ".", "param_size", "(", "model", ".", "contact_head", ".", "contact_region_decoder", ")", "\n", "decode_anchor_elasti_size", "=", "ioutils", ".", "param_size", "(", "model", ".", "contact_head", ".", "anchor_elasti_decoder", ")", "\n", "cprint", "(", "f\"    |  DecodeModule_VertexContact total size == {decode_vertex_contact_size} MB\"", ")", "\n", "cprint", "(", "f\"    |  DecodeModule_ContactRegion total size == {decode_contact_region_size} MB\"", ")", "\n", "cprint", "(", "f\"    |  DecodeModule_AnchorElasti total size == {decode_anchor_elasti_size} MB\"", ")", "\n", "\n", "# ==================== dumping train >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# epoch pass", "\n", "epoch_res", "=", "epoch_pass", "(", "rank", ",", "\"example\"", ",", "example_loader", ",", "model", ",", "epoch", "=", "0", ")", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# =================== process results >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "stage_res", "=", "[", "]", "\n", "for", "res_item", "in", "epoch_res", ":", "\n", "        ", "total_res", "=", "{", "}", "\n", "picr_res", ",", "honet_res", "=", "process_result", "(", "res_item", ",", "args", ".", "vertex_contact_thresh", ",", "args", ".", "mano_root", ",", "args", ".", "anchor_root", ")", "\n", "total_res", ".", "update", "(", "picr_res", ")", "\n", "total_res", ".", "update", "(", "honet_res", ")", "\n", "stage_res", ".", "append", "(", "total_res", ")", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "", "cprint", "(", "\"\\nPICR DONE!\"", ",", "\"cyan\"", ")", "\n", "return", "stage_res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.run_demo.run_sample": [[299, 563], ["hodataset.get_obj_verts_transf", "numpy.asarray", "numpy.asarray", "liegroups.SO3.exp().as_matrix", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "torch.from_numpy().float().to", "manopth.quatutils.quaternion_to_angle_axis().detach().cpu().numpy", "numpy.asarray", "numpy.asarray", "trimesh.load", "numpy.array", "torch.mean().item", "torch.mean().item", "torch.sqrt().item", "torch.sqrt().item", "hocontact.utils.collisionutils.solid_intersection_volume", "hocontact.utils.collisionutils.solid_intersection_volume", "hocontact.utils.disjointnessutils.region_disjointness_metric", "hocontact.utils.disjointnessutils.region_disjointness_metric", "kmetric.compute_loss().item", "kmetric.compute_loss().item", "dict", "hoptim.set_opt_val", "hoptim.optimize", "hoptim.recover_hand", "hand_verts_pred.cpu.cpu", "hand_joints_pred.cpu.cpu", "hoptim.recover_hand_pose().cpu", "hoptim.recover_obj", "obj_verts_pred.cpu.cpu", "torch.mean().item", "torch.mean().item", "torch.sqrt().item", "hoptim.obj_tsl_np", "hoptim.obj_rot_np", "hocontact.utils.collisionutils.solid_intersection_volume", "hocontact.utils.disjointnessutils.region_disjointness_metric", "kmetric.compute_loss().item", "hodataset.get_obj_faces", "hodataset.get_obj_rot", "hodataset.get_obj_tsl", "hodataset.get_obj_normal", "hodataset.get_obj_voxel_points_can", "hodataset.get_obj_voxel_element_volume", "hodataset.get_hand_verts3d", "hodataset.get_joints3d", "hodataset.get_hand_faces", "hodataset.get_hand_pose_wrt_cam", "hocontact.postprocess.geo_optimizer.init_runtime_viz", "hocontact.postprocess.geo_optimizer.update_runtime_viz", "numpy.asarray().astype", "numpy.asarray", "numpy.asarray", "hand_verts_pred.cpu.numpy", "hand_joints_pred.cpu.numpy", "obj_verts_pred.cpu.numpy", "liegroups.SO3.exp", "hodataset.get_obj_verts_can", "torch.from_numpy().float", "manopth.quatutils.quaternion_to_angle_axis().detach().cpu", "torch.mean", "torch.mean", "torch.sqrt", "torch.sqrt", "kmetric.compute_loss", "kmetric.compute_loss", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().float().to", "torch.from_numpy().long().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "hoptim.recover_hand_pose", "torch.mean", "torch.mean", "torch.sqrt", "kmetric.compute_loss", "hodataset.get_obj_normal", "torch.norm", "torch.norm", "hocontact.utils.collisionutils.penetration_loss_hand_in_obj", "hocontact.utils.collisionutils.penetration_loss_hand_in_obj", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "list", "torch.norm", "torch.norm", "hocontact.utils.collisionutils.penetration_loss_hand_in_obj", "numpy.asarray", "manopth.quatutils.quaternion_to_angle_axis", "hand_joints_pred.cpu.unsqueeze", "torch.from_numpy", "manopth.quatutils.quaternion_to_angle_axis().detach", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy().float", "range", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "hoptim.recover_hand_pose().cpu.unsqueeze", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().float", "torch.from_numpy().float", "manopth.quatutils.quaternion_to_angle_axis", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_transf", "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.solid_intersection_volume", "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.solid_intersection_volume", "home.repos.pwc.inspect_result.lixiny_CPF.utils.disjointnessutils.region_disjointness_metric", "home.repos.pwc.inspect_result.lixiny_CPF.utils.disjointnessutils.region_disjointness_metric", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.set_opt_val", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.optimize", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.recover_hand", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.recover_obj", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.obj_tsl_np", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.obj_rot_np", "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.solid_intersection_volume", "home.repos.pwc.inspect_result.lixiny_CPF.utils.disjointnessutils.region_disjointness_metric", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_faces", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_rot", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_tsl", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_normal", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_voxel_points_can", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_voxel_element_volume", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_verts3d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_joints3d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_faces", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_pose_wrt_cam", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.init_runtime_viz", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.update_runtime_viz", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_can", "home.repos.pwc.inspect_result.lixiny_CPF.utils.anatomyutils.AnatomyMetric.compute_loss", "home.repos.pwc.inspect_result.lixiny_CPF.utils.anatomyutils.AnatomyMetric.compute_loss", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.recover_hand_pose", "home.repos.pwc.inspect_result.lixiny_CPF.utils.anatomyutils.AnatomyMetric.compute_loss", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_normal", "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.penetration_loss_hand_in_obj", "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.penetration_loss_hand_in_obj", "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.penetration_loss_hand_in_obj"], ["def", "run_sample", "(", "\n", "device", ",", "\n", "hoptim", ",", "\n", "info", ",", "\n", "hodataset", ",", "\n", "index", ",", "\n", "kmetric", ",", "\n", "hand_region_assignment", ",", "\n", "hand_palm_vertex_mask", ",", "\n", "hand_closed_path", "=", "\"assets/closed_hand/hand_mesh_close.obj\"", ",", "\n", ")", ":", "\n", "    ", "global", "viz_initialized", ",", "runtime_viz", "\n", "# ==================== preparation stage >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# region", "\n", "# obj: patch dumper point number dismatch", "\n", "obj_verts_3d_adapt_np", "=", "hodataset", ".", "get_obj_verts_transf", "(", "index", ")", "\n", "obj_verts_3d_np", "=", "np", ".", "asarray", "(", "info", "[", "\"obj_verts_3d\"", "]", ")", "\n", "\n", "# obj: dumped trimesh & normals & tsl & rot", "\n", "obj_faces_np", "=", "np", ".", "asarray", "(", "hodataset", ".", "get_obj_faces", "(", "index", ")", ")", "\n", "\n", "rot_matrix", "=", "SO3", ".", "exp", "(", "info", "[", "\"obj_rot\"", "]", ")", ".", "as_matrix", "(", ")", "\n", "obj_normals_np", "=", "(", "rot_matrix", "@", "(", "hodataset", ".", "get_obj_normal", "(", "index", ")", ")", ".", "T", ")", ".", "T", "\n", "\n", "obj_rot_np", "=", "np", ".", "asarray", "(", "info", "[", "\"obj_rot\"", "]", ")", "\n", "obj_tsl_np", "=", "np", ".", "asarray", "(", "info", "[", "\"obj_tsl\"", "]", ")", "\n", "\n", "# obj: adapt tsl & rot", "\n", "obj_rot_adapt_np", "=", "np", ".", "asarray", "(", "hodataset", ".", "get_obj_rot", "(", "index", ")", ")", "\n", "obj_tsl_adapt_np", "=", "np", ".", "asarray", "(", "hodataset", ".", "get_obj_tsl", "(", "index", ")", ")", "\n", "\n", "# obj: canonical trimesh & normals", "\n", "obj_verts_3d_can_np", "=", "np", ".", "asarray", "(", "hodataset", ".", "get_obj_verts_can", "(", "index", ")", "[", "0", "]", ")", "\n", "obj_normals_can_np", "=", "np", ".", "asarray", "(", "hodataset", ".", "get_obj_normal", "(", "index", ")", ")", "\n", "\n", "# obj: binvox", "\n", "obj_vox_can_np", "=", "np", ".", "asarray", "(", "hodataset", ".", "get_obj_voxel_points_can", "(", "index", ")", ")", "\n", "obj_vox_el_vol", "=", "np", ".", "asarray", "(", "hodataset", ".", "get_obj_voxel_element_volume", "(", "index", ")", ")", "\n", "\n", "# hand: verts & joints adapt, compensation", "\n", "hand_verts_adapt_np", "=", "np", ".", "asarray", "(", "hodataset", ".", "get_hand_verts3d", "(", "index", ")", ")", "\n", "hand_joints_adapt_np", "=", "np", ".", "asarray", "(", "hodataset", ".", "get_joints3d", "(", "index", ")", ")", "\n", "\n", "# hand: faces (adapt) & pose (dumped)", "\n", "hand_faces_np", "=", "np", ".", "asarray", "(", "hodataset", ".", "get_hand_faces", "(", "index", ")", ")", "\n", "hand_pose_axisang_adapt_np", "=", "np", ".", "asarray", "(", "hodataset", ".", "get_hand_pose_wrt_cam", "(", "index", ")", ")", "\n", "hand_pose_np", "=", "np", ".", "asarray", "(", "info", "[", "\"hand_pose\"", "]", ")", "\n", "hand_pose", "=", "torch", ".", "from_numpy", "(", "hand_pose_np", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "hand_pose_axisang_np", "=", "quaternion_to_angle_axis", "(", "hand_pose", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# hand: verts & joints dumped", "\n", "hand_verts_np", "=", "np", ".", "asarray", "(", "info", "[", "\"hand_verts_3d\"", "]", ")", "\n", "hand_joints_np", "=", "np", ".", "asarray", "(", "info", "[", "\"hand_joints_3d\"", "]", ")", "\n", "\n", "# hand: close faces => \"data/info/closed_hand/hand_mesh_close.obj\"", "\n", "hand_closed_trimesh", "=", "trimesh", ".", "load", "(", "hand_closed_path", ",", "process", "=", "False", ")", "\n", "hand_close_faces_np", "=", "np", ".", "array", "(", "hand_closed_trimesh", ".", "faces", ")", "\n", "\n", "# no viz required", "\n", "if", "not", "viz_initialized", ":", "\n", "        ", "runtime_viz", "=", "init_runtime_viz", "(", "\n", "hand_verts_adapt_np", ",", "\n", "hand_verts_np", ",", "\n", "obj_verts_3d_adapt_np", ",", "\n", "hand_faces_np", ",", "\n", "obj_verts_3d_np", ",", "\n", "obj_faces_np", ",", "\n", "contact_info", "=", "info", ",", "\n", ")", "\n", "viz_initialized", "=", "True", "\n", "", "else", ":", "\n", "        ", "update_runtime_viz", "(", "\n", "runtime_viz", ",", "\n", "hand_verts_adapt_np", ",", "\n", "hand_verts_np", ",", "\n", "obj_verts_3d_adapt_np", ",", "\n", "obj_verts_3d_np", ",", "\n", "hand_faces_np", ",", "\n", "obj_faces_np", ",", "\n", ")", "\n", "# runtime_viz = None", "\n", "\n", "# endregion", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ==================== evaluate gt & dumped info >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# region", "\n", "", "hand_dist_before", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "norm", "(", "\n", "torch", ".", "from_numpy", "(", "hand_verts_np", ")", ".", "float", "(", ")", "-", "torch", ".", "from_numpy", "(", "hand_verts_adapt_np", ")", ".", "float", "(", ")", ",", "\n", "p", "=", "2", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", ")", ".", "item", "(", ")", "\n", "# no joint score, as hand model different", "\n", "object_dist_before", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "norm", "(", "\n", "torch", ".", "from_numpy", "(", "obj_verts_3d_np", ")", ".", "float", "(", ")", "-", "torch", ".", "from_numpy", "(", "obj_verts_3d_adapt_np", ")", ".", "float", "(", ")", ",", "\n", "p", "=", "2", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", ")", ".", "item", "(", ")", "\n", "penetration_depth_gt", "=", "torch", ".", "sqrt", "(", "\n", "penetration_loss_hand_in_obj", "(", "\n", "torch", ".", "from_numpy", "(", "hand_verts_adapt_np", ")", ".", "float", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "obj_verts_3d_adapt_np", ")", ".", "float", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "obj_faces_np", ")", ".", "long", "(", ")", ",", "\n", ")", "\n", ")", ".", "item", "(", ")", "\n", "penetration_depth_before", "=", "torch", ".", "sqrt", "(", "\n", "penetration_loss_hand_in_obj", "(", "\n", "torch", ".", "from_numpy", "(", "hand_verts_np", ")", ".", "float", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "obj_verts_3d_np", ")", ".", "float", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "obj_faces_np", ")", ".", "long", "(", ")", ",", "\n", ")", "\n", ")", ".", "item", "(", ")", "\n", "solid_intersection_volume_gt", ",", "_", ",", "_", "=", "solid_intersection_volume", "(", "\n", "hand_verts_adapt_np", ",", "hand_close_faces_np", ",", "obj_vox_can_np", ",", "obj_tsl_adapt_np", ",", "obj_rot_adapt_np", ",", "obj_vox_el_vol", "\n", ")", "\n", "solid_intersection_volume_before", ",", "_", ",", "_", "=", "solid_intersection_volume", "(", "\n", "hand_verts_np", ",", "hand_close_faces_np", ",", "obj_vox_can_np", ",", "obj_tsl_np", ",", "obj_rot_np", ",", "obj_vox_el_vol", "\n", ")", "\n", "dj_vec_gt", ",", "dj_tip_only_gt", ",", "dj_tip_biased_gt", "=", "region_disjointness_metric", "(", "\n", "hand_verts_adapt_np", ",", "obj_verts_3d_adapt_np", ",", "hand_region_assignment", "\n", ")", "\n", "dj_vec_before", ",", "dj_tip_only_before", ",", "dj_tip_biased_before", "=", "region_disjointness_metric", "(", "\n", "hand_verts_np", ",", "obj_verts_3d_np", ",", "hand_region_assignment", "\n", ")", "\n", "hand_ks_gt", "=", "kmetric", ".", "compute_loss", "(", "\n", "torch", ".", "from_numpy", "(", "hand_pose_axisang_adapt_np", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "hand_joints_adapt_np", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ",", "\n", ")", ".", "item", "(", ")", "\n", "hand_ks_before", "=", "kmetric", ".", "compute_loss", "(", "\n", "torch", ".", "from_numpy", "(", "hand_pose_axisang_np", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "hand_joints_np", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ",", "\n", ")", ".", "item", "(", ")", "\n", "# endregion", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ==================== optimize engine >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# prepare kwargs according to mode", "\n", "opt_val_kwargs", "=", "dict", "(", "\n", "# static", "\n", "vertex_contact", "=", "torch", ".", "from_numpy", "(", "info", "[", "\"vertex_contact\"", "]", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "contact_region", "=", "torch", ".", "from_numpy", "(", "info", "[", "\"hand_region\"", "]", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "anchor_id", "=", "torch", ".", "from_numpy", "(", "info", "[", "\"anchor_id\"", "]", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "anchor_elasti", "=", "torch", ".", "from_numpy", "(", "info", "[", "\"anchor_elasti\"", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "anchor_padding_mask", "=", "torch", ".", "from_numpy", "(", "info", "[", "\"anchor_padding_mask\"", "]", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "# hand", "\n", "hand_shape_init", "=", "torch", ".", "from_numpy", "(", "info", "[", "\"hand_shape\"", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "hand_tsl_init", "=", "torch", ".", "from_numpy", "(", "info", "[", "\"hand_tsl\"", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "hand_pose_gt", "=", "(", "[", "0", "]", ",", "hand_pose", "[", "0", ":", "1", ",", ":", "]", ")", ",", "\n", "hand_pose_init", "=", "(", "list", "(", "range", "(", "1", ",", "16", ")", ")", ",", "hand_pose", "[", "1", ":", ",", ":", "]", ")", ",", "\n", "# obj", "\n", "obj_verts_3d_can", "=", "torch", ".", "from_numpy", "(", "obj_verts_3d_can_np", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "obj_normals_can", "=", "torch", ".", "from_numpy", "(", "obj_normals_can_np", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "obj_tsl_init", "=", "torch", ".", "from_numpy", "(", "info", "[", "\"obj_tsl\"", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "obj_rot_init", "=", "torch", ".", "from_numpy", "(", "info", "[", "\"obj_rot\"", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "# viz", "\n", "runtime_vis", "=", "runtime_viz", ",", "\n", ")", "\n", "\n", "hoptim", ".", "set_opt_val", "(", "**", "opt_val_kwargs", ")", "\n", "\n", "hoptim", ".", "optimize", "(", "progress", "=", "True", ")", "\n", "\n", "hand_verts_pred", ",", "hand_joints_pred", ",", "hand_transf_pred", "=", "hoptim", ".", "recover_hand", "(", ")", "\n", "hand_verts_pred", "=", "hand_verts_pred", ".", "cpu", "(", ")", "\n", "hand_joints_pred", "=", "hand_joints_pred", ".", "cpu", "(", ")", "\n", "hand_pose_pred", "=", "hoptim", ".", "recover_hand_pose", "(", ")", ".", "cpu", "(", ")", "\n", "obj_verts_pred", "=", "hoptim", ".", "recover_obj", "(", ")", "\n", "obj_verts_pred", "=", "obj_verts_pred", ".", "cpu", "(", ")", "\n", "# endregion", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ==================== eval >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# region", "\n", "hand_dist_after", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "norm", "(", "torch", ".", "from_numpy", "(", "hand_verts_adapt_np", ")", ".", "float", "(", ")", "-", "hand_verts_pred", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", ")", ".", "item", "(", ")", "\n", "# no joint score, as hand models differs", "\n", "object_dist_after", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "norm", "(", "\n", "torch", ".", "from_numpy", "(", "obj_verts_3d_adapt_np", ")", ".", "float", "(", ")", "-", "obj_verts_pred", ",", "\n", "p", "=", "2", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", ")", ".", "item", "(", ")", "\n", "penetration_depth_after", "=", "torch", ".", "sqrt", "(", "\n", "penetration_loss_hand_in_obj", "(", "\n", "hand_verts_pred", ",", "\n", "obj_verts_pred", ",", "\n", "torch", ".", "from_numpy", "(", "obj_faces_np", ")", ".", "long", "(", ")", ",", "\n", ")", "\n", ")", ".", "item", "(", ")", "\n", "obj_tsl_final_np", "=", "hoptim", ".", "obj_tsl_np", "(", ")", "\n", "obj_rot_final_np", "=", "hoptim", ".", "obj_rot_np", "(", ")", "\n", "solid_intersection_volume_after", ",", "_", ",", "_", "=", "solid_intersection_volume", "(", "\n", "np", ".", "asarray", "(", "hand_verts_pred", ")", ".", "astype", "(", "np", ".", "float64", ")", ",", "\n", "hand_close_faces_np", ",", "\n", "obj_vox_can_np", ",", "\n", "obj_tsl_final_np", ",", "\n", "obj_rot_final_np", ",", "\n", "obj_vox_el_vol", ",", "\n", ")", "\n", "dj_vec_after", ",", "dj_tip_only_after", ",", "dj_tip_biased_after", "=", "region_disjointness_metric", "(", "\n", "np", ".", "asarray", "(", "hand_verts_pred", ")", ",", "np", ".", "asarray", "(", "obj_verts_pred", ")", ",", "hand_region_assignment", "\n", ")", "\n", "hand_ks_after", "=", "kmetric", ".", "compute_loss", "(", "\n", "quaternion_to_angle_axis", "(", "hand_pose_pred", ".", "unsqueeze", "(", "0", ")", ")", ",", "hand_joints_pred", ".", "unsqueeze", "(", "0", ")", "\n", ")", ".", "item", "(", ")", "\n", "\n", "# res dict", "\n", "res", "=", "{", "\n", "\"hand_verts_pred\"", ":", "hand_verts_pred", ".", "numpy", "(", ")", ",", "\n", "\"hand_joints_pred\"", ":", "hand_joints_pred", ".", "numpy", "(", ")", ",", "\n", "\"obj_verts_pred\"", ":", "obj_verts_pred", ".", "numpy", "(", ")", ",", "\n", "\"hand_dist_before\"", ":", "hand_dist_before", ",", "\n", "\"hand_dist_after\"", ":", "hand_dist_after", ",", "\n", "\"object_dist_before\"", ":", "object_dist_before", ",", "\n", "\"object_dist_after\"", ":", "object_dist_after", ",", "\n", "\"penetration_depth_gt\"", ":", "penetration_depth_gt", ",", "\n", "\"penetration_depth_before\"", ":", "penetration_depth_before", ",", "\n", "\"penetration_depth_after\"", ":", "penetration_depth_after", ",", "\n", "\"solid_intersection_volume_gt\"", ":", "solid_intersection_volume_gt", "*", "1e6", ",", "\n", "\"solid_intersection_volume_before\"", ":", "solid_intersection_volume_before", "*", "1e6", ",", "\n", "\"solid_intersection_volume_after\"", ":", "solid_intersection_volume_after", "*", "1e6", ",", "\n", "\"disjointness_vector_gt\"", ":", "dj_vec_gt", ",", "\n", "\"disjointness_tip_only_gt\"", ":", "dj_tip_only_gt", ",", "\n", "\"disjointness_tip_biased_gt\"", ":", "dj_tip_biased_gt", ",", "\n", "\"disjointness_vector_before\"", ":", "dj_vec_before", ",", "\n", "\"disjointness_tip_only_before\"", ":", "dj_tip_only_before", ",", "\n", "\"disjointness_tip_biased_before\"", ":", "dj_tip_biased_before", ",", "\n", "\"disjointness_vector_after\"", ":", "dj_vec_after", ",", "\n", "\"disjointness_tip_only_after\"", ":", "dj_tip_only_after", ",", "\n", "\"disjointness_tip_biased_after\"", ":", "dj_tip_biased_after", ",", "\n", "\"hand_kinetic_score_gt\"", ":", "hand_ks_gt", ",", "\n", "\"hand_kinetic_score_before\"", ":", "hand_ks_before", ",", "\n", "\"hand_kinetic_score_after\"", ":", "hand_ks_after", ",", "\n", "}", "\n", "\n", "# print msg", "\n", "print_msg", "=", "{", "\n", "\"hand_dist_before\"", ":", "res", "[", "\"hand_dist_before\"", "]", ",", "\n", "\"hand_dist_after\"", ":", "res", "[", "\"hand_dist_after\"", "]", ",", "\n", "\"object_dist_before\"", ":", "res", "[", "\"object_dist_before\"", "]", ",", "\n", "\"object_dist_after\"", ":", "res", "[", "\"object_dist_after\"", "]", ",", "\n", "\"penetration_depth_gt\"", ":", "res", "[", "\"penetration_depth_gt\"", "]", ",", "\n", "\"penetration_depth_before\"", ":", "res", "[", "\"penetration_depth_before\"", "]", ",", "\n", "\"penetration_depth_after\"", ":", "res", "[", "\"penetration_depth_after\"", "]", ",", "\n", "\"solid_intersection_volume_gt\"", ":", "res", "[", "\"solid_intersection_volume_gt\"", "]", ",", "\n", "\"solid_intersection_volume_before\"", ":", "res", "[", "\"solid_intersection_volume_before\"", "]", ",", "\n", "\"solid_intersection_volume_after\"", ":", "res", "[", "\"solid_intersection_volume_after\"", "]", ",", "\n", "\"disjointness_tip_only_gt\"", ":", "res", "[", "\"disjointness_tip_only_gt\"", "]", ",", "\n", "\"disjointness_tip_biased_gt\"", ":", "res", "[", "\"disjointness_tip_biased_gt\"", "]", ",", "\n", "\"disjointness_tip_only_before\"", ":", "res", "[", "\"disjointness_tip_only_before\"", "]", ",", "\n", "\"disjointness_tip_biased_before\"", ":", "res", "[", "\"disjointness_tip_biased_before\"", "]", ",", "\n", "\"disjointness_tip_only_after\"", ":", "res", "[", "\"disjointness_tip_only_after\"", "]", ",", "\n", "\"disjointness_tip_biased_after\"", ":", "res", "[", "\"disjointness_tip_biased_after\"", "]", ",", "\n", "\"hand_kinetic_score_gt\"", ":", "res", "[", "\"hand_kinetic_score_gt\"", "]", ",", "\n", "\"hand_kinetic_score_before\"", ":", "res", "[", "\"hand_kinetic_score_before\"", "]", ",", "\n", "\"hand_kinetic_score_after\"", ":", "res", "[", "\"hand_kinetic_score_after\"", "]", ",", "\n", "}", "\n", "return", "print_msg", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.run_demo.geo_stage": [[565, 613], ["run_demo.set_all_seeds", "hocontact.hodatasets.hodata.HOdata.get_dataset", "hocontact.postprocess.geo_optimizer.GeOptimizer", "hocontact.utils.anatomyutils.AnatomyMetric", "manopth.anchorutils.masking_load_driver", "range", "termcolor.cprint", "len", "run_demo.run_sample", "pprint.pprint"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.scripts.dump_picr_res.set_all_seeds", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_dataset", "home.repos.pwc.inspect_result.lixiny_CPF.scripts.run_demo.run_sample"], ["", "def", "geo_stage", "(", "intermediate", ",", "args", ")", ":", "\n", "    ", "rank", "=", "args", ".", "gpu", "\n", "target_device", "=", "f\"cuda:{rank}\"", "\n", "set_all_seeds", "(", "args", ".", "manual_seed", ")", "\n", "\n", "example_dataset", "=", "HOdata", ".", "get_dataset", "(", "\n", "dataset", "=", "\"fhb_example\"", ",", "\n", "data_root", "=", "args", ".", "data_root", ",", "\n", "data_split", "=", "\"example\"", ",", "\n", "split_mode", "=", "\"example\"", ",", "\n", "use_cache", "=", "True", ",", "\n", "mini_factor", "=", "1.0", ",", "\n", "center_idx", "=", "9", ",", "\n", "enable_contact", "=", "True", ",", "\n", "filter_no_contact", "=", "True", ",", "\n", "filter_thresh", "=", "10.0", ",", "\n", "synt_factor", "=", "1", ",", "\n", ")", "\n", "hoptim", "=", "GeOptimizer", "(", "\n", "target_device", ",", "\n", "lr", "=", "1e-2", ",", "\n", "n_iter", "=", "200", ",", "\n", "verbose", "=", "False", ",", "\n", "mano_root", "=", "args", ".", "mano_root", ",", "\n", "anchor_path", "=", "args", ".", "anchor_root", ",", "\n", "# values to initialize coef_val", "\n", "lambda_contact_loss", "=", "args", ".", "lambda_contact_loss", ",", "\n", "lambda_repulsion_loss", "=", "args", ".", "lambda_repulsion_loss", ",", "\n", "repulsion_query", "=", "args", ".", "repulsion_query", ",", "\n", "repulsion_threshold", "=", "args", ".", "repulsion_threshold", ",", "\n", ")", "\n", "kmetric", "=", "AnatomyMetric", "(", ")", "\n", "hand_region_assignment", ",", "hand_palm_vertex_mask", "=", "masking_load_driver", "(", "args", ".", "anchor_root", ",", "args", ".", "palm_path", ")", "\n", "for", "index", "in", "range", "(", "len", "(", "example_dataset", ")", ")", ":", "\n", "        ", "print_msg", "=", "run_sample", "(", "\n", "target_device", ",", "\n", "hoptim", ",", "\n", "intermediate", "[", "index", "]", ",", "\n", "example_dataset", ",", "\n", "index", ",", "\n", "kmetric", ",", "\n", "hand_region_assignment", ",", "\n", "hand_palm_vertex_mask", ",", "\n", "args", ".", "hand_closed_path", ",", "\n", ")", "\n", "pprint", "(", "print_msg", ")", "\n", "\n", "", "cprint", "(", "\"\\nGEO DONE!\"", ",", "\"cyan\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.run_demo.main": [[615, 618], ["run_demo.picr_stage", "run_demo.geo_stage"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.scripts.run_demo.picr_stage", "home.repos.pwc.inspect_result.lixiny_CPF.scripts.run_demo.geo_stage"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "intermediate", "=", "picr_stage", "(", "args", ")", "\n", "geo_stage", "(", "intermediate", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.fit_geo.collapse_res_list": [[22, 27], ["res.extend"], "function", ["None"], ["def", "collapse_res_list", "(", "res_list_list", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "item", "in", "res_list_list", ":", "\n", "        ", "res", ".", "extend", "(", "item", "[", "0", "]", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.fit_geo.merge_res_list": [[29, 53], ["list", "enumerate", "len", "dict", "res_list[].keys", "numpy.isnan", "termcolor.cprint"], "function", ["None"], ["", "def", "merge_res_list", "(", "res_list", ")", ":", "\n", "    ", "if", "len", "(", "res_list", ")", "<", "1", ":", "\n", "        ", "return", "dict", "(", ")", "\n", "\n", "", "keys_list", "=", "list", "(", "res_list", "[", "0", "]", ".", "keys", "(", ")", ")", "\n", "\n", "# create init dict", "\n", "res", "=", "{", "k", ":", "0.0", "for", "k", "in", "keys_list", "}", "\n", "count", "=", "0", "\n", "\n", "# iterate", "\n", "for", "item_id", ",", "item", "in", "enumerate", "(", "res_list", ")", ":", "\n", "        ", "for", "k", "in", "keys_list", ":", "\n", "            ", "if", "np", ".", "isnan", "(", "item", "[", "k", "]", ")", ":", "\n", "                ", "cprint", "(", "f\"encountered nan in {item_id} key {k}\"", ",", "\"red\"", ")", "\n", "continue", "\n", "", "res", "[", "k", "]", "+=", "item", "[", "k", "]", "\n", "", "count", "+=", "1", "\n", "\n", "# avg", "\n", "", "for", "k", "in", "keys_list", ":", "\n", "        ", "res", "[", "k", "]", "/=", "count", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.fit_geo.summarize": [[55, 58], ["res_dict.items", "print", "str"], "function", ["None"], ["", "def", "summarize", "(", "res_dict", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "res_dict", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "\"mean \"", "+", "str", "(", "k", ")", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.fit_geo.run_sample_by_idx": [[60, 466], ["os.path.join", "os.path.exists", "len", "numpy.asarray", "len", "numpy.asarray", "liegroups.SO3.exp().as_matrix", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "torch.from_numpy().float().to", "manopth.quatutils.angle_axis_to_quaternion", "numpy.asarray", "numpy.asarray", "torch.from_numpy", "trimesh.load", "numpy.array", "torch.mean().item", "torch.mean().item", "torch.sqrt().item", "torch.sqrt().item", "hocontact.utils.collisionutils.solid_intersection_volume", "hocontact.utils.collisionutils.solid_intersection_volume", "hocontact.utils.disjointnessutils.region_disjointness_metric", "hocontact.utils.disjointnessutils.region_disjointness_metric", "kmetric.compute_loss().item", "kmetric.compute_loss().item", "torch.mean().item", "torch.mean().item", "torch.sqrt().item", "hocontact.utils.collisionutils.solid_intersection_volume", "hocontact.utils.disjointnessutils.region_disjointness_metric", "kmetric.compute_loss().item", "numpy.sum", "len", "torch.mean().item", "torch.mean().item", "torch.from_numpy().float", "torch.from_numpy().float", "manopth.quatutils.angle_axis_to_quaternion.detach().cpu().clone", "torch.from_numpy().float", "dict", "dict.update", "hoptim.set_opt_val", "hoptim.optimize", "hoptim.recover_hand", "hand_verts_pred.cpu.cpu", "hand_joints_pred.cpu.cpu", "hoptim.recover_hand_pose().cpu", "hoptim.recover_obj", "obj_verts_pred.cpu.cpu", "torch.mean().item", "torch.mean().item", "numpy.asarray().astype", "numpy.asarray", "numpy.asarray", "hand_verts_pred.cpu.numpy", "hand_joints_pred.cpu.numpy", "obj_verts_pred.cpu.numpy", "open", "pickle.dump", "open", "pickle.load", "liegroups.SO3.exp", "torch.from_numpy().float", "torch.mean", "torch.mean", "torch.sqrt", "torch.sqrt", "kmetric.compute_loss", "kmetric.compute_loss", "dict.update", "dict", "torch.mean", "torch.mean", "torch.sqrt", "hoptim.obj_tsl_np", "hoptim.obj_rot_np", "kmetric.compute_loss", "torch.norm", "torch.norm", "torch.mean", "torch.mean", "hocontact.utils.collisionutils.penetration_loss_hand_in_obj", "hocontact.utils.collisionutils.penetration_loss_hand_in_obj", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy", "torch.from_numpy", "manopth.quatutils.angle_axis_to_quaternion.detach().cpu", "torch.from_numpy", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().float().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "dict", "dict.update", "hoptim.recover_hand_pose", "torch.norm", "torch.norm", "torch.mean", "torch.mean", "hocontact.utils.collisionutils.penetration_loss_hand_in_obj", "numpy.asarray", "manopth.quatutils.quaternion_to_angle_axis", "hand_joints_pred.cpu.unsqueeze", "torch.from_numpy", "torch.norm", "torch.norm", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "dict", "dict.update", "KeyError", "torch.from_numpy.float().to", "torch.norm", "torch.norm", "torch.from_numpy().long", "hoptim.recover_hand_pose().cpu.unsqueeze", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "manopth.quatutils.angle_axis_to_quaternion.detach", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "dict", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "list", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy.float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "range", "torch.from_numpy().float", "torch.from_numpy().float", "list", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "range", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "list", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "range", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.solid_intersection_volume", "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.solid_intersection_volume", "home.repos.pwc.inspect_result.lixiny_CPF.utils.disjointnessutils.region_disjointness_metric", "home.repos.pwc.inspect_result.lixiny_CPF.utils.disjointnessutils.region_disjointness_metric", "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.solid_intersection_volume", "home.repos.pwc.inspect_result.lixiny_CPF.utils.disjointnessutils.region_disjointness_metric", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.set_opt_val", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.optimize", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.recover_hand", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.recover_obj", "home.repos.pwc.inspect_result.lixiny_CPF.utils.anatomyutils.AnatomyMetric.compute_loss", "home.repos.pwc.inspect_result.lixiny_CPF.utils.anatomyutils.AnatomyMetric.compute_loss", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.obj_tsl_np", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.obj_rot_np", "home.repos.pwc.inspect_result.lixiny_CPF.utils.anatomyutils.AnatomyMetric.compute_loss", "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.penetration_loss_hand_in_obj", "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.penetration_loss_hand_in_obj", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.recover_hand_pose", "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.penetration_loss_hand_in_obj", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update"], ["", "", "def", "run_sample_by_idx", "(", "\n", "device", ",", "\n", "hoptim", ",", "\n", "mode", ",", "\n", "cidata", ",", "\n", "kmetric", ",", "\n", "index", ",", "\n", "hand_region_assignment", ",", "\n", "hand_palm_vertex_mask", ",", "\n", "save_path", ",", "\n", "contact_ratio_thresh", "=", "0.01", ",", "\n", "hand_closed_path", "=", "\"assets/closed_hand/hand_mesh_close.obj\"", ",", "\n", ")", ":", "\n", "    ", "save_file", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "f\"{index}_save.pkl\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_file", ")", ":", "\n", "        ", "with", "open", "(", "save_file", ",", "\"rb\"", ")", "as", "fstream", ":", "\n", "            ", "res", "=", "pickle", ".", "load", "(", "fstream", ")", "\n", "print_msg", "=", "{", "\n", "\"hand_dist_before\"", ":", "res", "[", "\"hand_dist_before\"", "]", ",", "\n", "\"hand_dist_after\"", ":", "res", "[", "\"hand_dist_after\"", "]", ",", "\n", "\"hand_joints_dist_before\"", ":", "res", "[", "\"hand_joints_dist_before\"", "]", ",", "\n", "\"hand_joints_dist_after\"", ":", "res", "[", "\"hand_joints_dist_after\"", "]", ",", "\n", "\"object_dist_before\"", ":", "res", "[", "\"object_dist_before\"", "]", ",", "\n", "\"object_dist_after\"", ":", "res", "[", "\"object_dist_after\"", "]", ",", "\n", "\"penetration_depth_gt\"", ":", "res", "[", "\"penetration_depth_gt\"", "]", ",", "\n", "\"penetration_depth_before\"", ":", "res", "[", "\"penetration_depth_before\"", "]", ",", "\n", "\"penetration_depth_after\"", ":", "res", "[", "\"penetration_depth_after\"", "]", ",", "\n", "\"solid_intersection_volume_gt\"", ":", "res", "[", "\"solid_intersection_volume_gt\"", "]", ",", "\n", "\"solid_intersection_volume_before\"", ":", "res", "[", "\"solid_intersection_volume_before\"", "]", ",", "\n", "\"solid_intersection_volume_after\"", ":", "res", "[", "\"solid_intersection_volume_after\"", "]", ",", "\n", "\"disjointness_tip_only_gt\"", ":", "res", "[", "\"disjointness_tip_only_gt\"", "]", ",", "\n", "\"disjointness_tip_biased_gt\"", ":", "res", "[", "\"disjointness_tip_biased_gt\"", "]", ",", "\n", "\"disjointness_tip_only_before\"", ":", "res", "[", "\"disjointness_tip_only_before\"", "]", ",", "\n", "\"disjointness_tip_biased_before\"", ":", "res", "[", "\"disjointness_tip_biased_before\"", "]", ",", "\n", "\"disjointness_tip_only_after\"", ":", "res", "[", "\"disjointness_tip_only_after\"", "]", ",", "\n", "\"disjointness_tip_biased_after\"", ":", "res", "[", "\"disjointness_tip_biased_after\"", "]", ",", "\n", "\"hand_kinetic_score_gt\"", ":", "res", "[", "\"hand_kinetic_score_gt\"", "]", ",", "\n", "\"hand_kinetic_score_before\"", ":", "res", "[", "\"hand_kinetic_score_before\"", "]", ",", "\n", "\"hand_kinetic_score_after\"", ":", "res", "[", "\"hand_kinetic_score_after\"", "]", ",", "\n", "}", "\n", "", "return", "False", ",", "print_msg", ",", "True", "\n", "\n", "", "test_sample", "=", "cidata", "[", "index", "]", "\n", "\n", "# ==================== preparation stage >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# region", "\n", "# obj: patch dumper point number dismatch", "\n", "obj_verts_3d_adapt_np", "=", "test_sample", "[", "CIAdaptQueries", ".", "OBJ_VERTS_3D", "]", "\n", "n_adapt", "=", "len", "(", "obj_verts_3d_adapt_np", ")", "\n", "\n", "obj_verts_3d_np", "=", "np", ".", "asarray", "(", "test_sample", "[", "CIDumpedQueries", ".", "OBJ_VERTS_3D", "]", ")", "\n", "n_pts", "=", "len", "(", "obj_verts_3d_np", ")", "\n", "if", "n_adapt", "!=", "n_pts", ":", "\n", "        ", "obj_verts_3d_np", "=", "obj_verts_3d_np", "[", ":", "n_adapt", ",", ":", "]", "\n", "\n", "# obj: dumped trimesh & normals & tsl & rot", "\n", "", "obj_faces_np", "=", "np", ".", "asarray", "(", "test_sample", "[", "CIAdaptQueries", ".", "OBJ_FACES", "]", ")", "\n", "\n", "rot_matrix", "=", "SO3", ".", "exp", "(", "test_sample", "[", "CIDumpedQueries", ".", "OBJ_ROT", "]", ")", ".", "as_matrix", "(", ")", "\n", "obj_normals_np", "=", "(", "rot_matrix", "@", "test_sample", "[", "CIAdaptQueries", ".", "OBJ_NORMAL", "]", ".", "T", ")", ".", "T", "\n", "\n", "obj_rot_np", "=", "np", ".", "asarray", "(", "test_sample", "[", "CIDumpedQueries", ".", "OBJ_ROT", "]", ")", "\n", "obj_tsl_np", "=", "np", ".", "asarray", "(", "test_sample", "[", "CIDumpedQueries", ".", "OBJ_TSL", "]", ")", "\n", "\n", "# obj: adapt tsl & rot", "\n", "obj_rot_adapt_np", "=", "np", ".", "asarray", "(", "test_sample", "[", "CIAdaptQueries", ".", "OBJ_ROT", "]", ")", "\n", "obj_tsl_adapt_np", "=", "np", ".", "asarray", "(", "test_sample", "[", "CIAdaptQueries", ".", "OBJ_TSL", "]", ")", "\n", "\n", "# obj: canonical trimesh & normals", "\n", "obj_verts_3d_can_np", "=", "np", ".", "asarray", "(", "test_sample", "[", "CIAdaptQueries", ".", "OBJ_CAN_VERTS", "]", ")", "\n", "obj_normals_can_np", "=", "np", ".", "asarray", "(", "test_sample", "[", "CIAdaptQueries", ".", "OBJ_NORMAL", "]", ")", "\n", "\n", "# obj: binvox", "\n", "obj_vox_can_np", "=", "np", ".", "asarray", "(", "test_sample", "[", "CIAdaptQueries", ".", "OBJ_VOXEL_POINTS_CAN", "]", ")", "\n", "obj_vox_el_vol", "=", "np", ".", "asarray", "(", "test_sample", "[", "CIAdaptQueries", ".", "OBJ_VOXEL_EL_VOL", "]", ")", "\n", "\n", "# hand: verts & joints adapt, compensation", "\n", "hand_verts_adapt_np", "=", "np", ".", "asarray", "(", "test_sample", "[", "CIAdaptQueries", ".", "HAND_VERTS_3D", "]", ")", "\n", "hand_joints_adapt_np", "=", "np", ".", "asarray", "(", "test_sample", "[", "CIAdaptQueries", ".", "HAND_JOINTS_3D", "]", ")", "\n", "\n", "# hand: faces (adapt) & pose (dumped)", "\n", "hand_faces_np", "=", "np", ".", "asarray", "(", "test_sample", "[", "CIAdaptQueries", ".", "HAND_FACES", "]", ")", "\n", "hand_pose_axisang_adapt_np", "=", "np", ".", "asarray", "(", "test_sample", "[", "CIAdaptQueries", ".", "HAND_POSE", "]", ")", "\n", "hand_pose_axisang_np", "=", "np", ".", "asarray", "(", "test_sample", "[", "CIDumpedQueries", ".", "HAND_POSE", "]", ")", "\n", "hand_pose_axisang", "=", "torch", ".", "from_numpy", "(", "hand_pose_axisang_np", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "hand_pose", "=", "angle_axis_to_quaternion", "(", "hand_pose_axisang", ")", "\n", "\n", "# hand: verts & joints dumped", "\n", "hand_verts_np", "=", "np", ".", "asarray", "(", "test_sample", "[", "CIDumpedQueries", ".", "HAND_VERTS_3D", "]", ")", "\n", "hand_joints_np", "=", "np", ".", "asarray", "(", "test_sample", "[", "CIDumpedQueries", ".", "HAND_JOINTS_3D", "]", ")", "\n", "hand_joints_0", "=", "torch", ".", "from_numpy", "(", "hand_joints_np", "[", "0", ",", "...", "]", ")", "\n", "\n", "# hand: close faces => \"data/info/closed_hand/hand_mesh_close.obj\"", "\n", "hand_closed_trimesh", "=", "trimesh", ".", "load", "(", "hand_closed_path", ",", "process", "=", "False", ")", "\n", "hand_close_faces_np", "=", "np", ".", "array", "(", "hand_closed_trimesh", ".", "faces", ")", "\n", "\n", "# no viz required", "\n", "runtime_viz", "=", "None", "\n", "\n", "# get contact_ratio", "\n", "contact_ratio", "=", "np", ".", "sum", "(", "test_sample", "[", "CIDumpedQueries", ".", "VERTEX_CONTACT", "]", ")", "/", "len", "(", "\n", "test_sample", "[", "CIDumpedQueries", ".", "VERTEX_CONTACT", "]", "\n", ")", "\n", "# endregion", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ==================== evaluate gt & dumped info >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# region", "\n", "hand_dist_before", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "norm", "(", "\n", "torch", ".", "from_numpy", "(", "hand_verts_np", ")", ".", "float", "(", ")", "-", "torch", ".", "from_numpy", "(", "hand_verts_adapt_np", ")", ".", "float", "(", ")", ",", "\n", "p", "=", "2", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", ")", ".", "item", "(", ")", "\n", "hand_joints_dist_before", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "norm", "(", "\n", "torch", ".", "from_numpy", "(", "hand_joints_np", ")", ".", "float", "(", ")", "-", "torch", ".", "from_numpy", "(", "hand_joints_adapt_np", ")", ".", "float", "(", ")", ",", "\n", "p", "=", "2", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", ")", ".", "item", "(", ")", "\n", "# ! center only in ho3d official version", "\n", "object_dist_before", "=", "(", "\n", "torch", ".", "mean", "(", "\n", "torch", ".", "norm", "(", "\n", "torch", ".", "from_numpy", "(", "obj_verts_3d_np", "-", "test_sample", "[", "CIDumpedQueries", ".", "HAND_JOINTS_3D", "]", "[", "0", "]", ")", ".", "float", "(", ")", "\n", "-", "torch", ".", "from_numpy", "(", "obj_verts_3d_adapt_np", "-", "test_sample", "[", "CIAdaptQueries", ".", "HAND_JOINTS_3D", "]", "[", "0", "]", ")", ".", "float", "(", ")", ",", "\n", "p", "=", "2", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", ")", ".", "item", "(", ")", "\n", "if", "cidata", ".", "hodataset", ".", "split_mode", "==", "\"official\"", "\n", "else", "torch", ".", "mean", "(", "\n", "torch", ".", "norm", "(", "\n", "torch", ".", "from_numpy", "(", "obj_verts_3d_np", ")", ".", "float", "(", ")", "-", "torch", ".", "from_numpy", "(", "obj_verts_3d_adapt_np", ")", ".", "float", "(", ")", ",", "\n", "p", "=", "2", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", ")", ".", "item", "(", ")", "\n", ")", "\n", "\n", "penetration_depth_gt", "=", "torch", ".", "sqrt", "(", "\n", "penetration_loss_hand_in_obj", "(", "\n", "torch", ".", "from_numpy", "(", "hand_verts_adapt_np", ")", ".", "float", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "obj_verts_3d_adapt_np", ")", ".", "float", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "obj_faces_np", ")", ".", "long", "(", ")", ",", "\n", ")", "\n", ")", ".", "item", "(", ")", "\n", "penetration_depth_before", "=", "torch", ".", "sqrt", "(", "\n", "penetration_loss_hand_in_obj", "(", "\n", "torch", ".", "from_numpy", "(", "hand_verts_np", ")", ".", "float", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "obj_verts_3d_np", ")", ".", "float", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "obj_faces_np", ")", ".", "long", "(", ")", ",", "\n", ")", "\n", ")", ".", "item", "(", ")", "\n", "solid_intersection_volume_gt", ",", "_", ",", "_", "=", "solid_intersection_volume", "(", "\n", "hand_verts_adapt_np", ",", "\n", "hand_close_faces_np", ",", "\n", "obj_vox_can_np", ",", "\n", "obj_tsl_adapt_np", ",", "\n", "obj_rot_adapt_np", ",", "\n", "obj_vox_el_vol", ",", "\n", ")", "\n", "solid_intersection_volume_before", ",", "_", ",", "_", "=", "solid_intersection_volume", "(", "\n", "hand_verts_np", ",", "\n", "hand_close_faces_np", ",", "\n", "obj_vox_can_np", ",", "\n", "obj_tsl_np", ",", "\n", "obj_rot_np", ",", "\n", "obj_vox_el_vol", ",", "\n", ")", "\n", "dj_vec_gt", ",", "dj_tip_only_gt", ",", "dj_tip_biased_gt", "=", "region_disjointness_metric", "(", "\n", "hand_verts_adapt_np", ",", "\n", "obj_verts_3d_adapt_np", ",", "\n", "hand_region_assignment", ",", "\n", ")", "\n", "dj_vec_before", ",", "dj_tip_only_before", ",", "dj_tip_biased_before", "=", "region_disjointness_metric", "(", "\n", "hand_verts_np", ",", "\n", "obj_verts_3d_np", ",", "\n", "hand_region_assignment", ",", "\n", ")", "\n", "hand_ks_gt", "=", "kmetric", ".", "compute_loss", "(", "\n", "torch", ".", "from_numpy", "(", "hand_pose_axisang_adapt_np", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "hand_joints_adapt_np", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ",", "\n", ")", ".", "item", "(", ")", "\n", "hand_ks_before", "=", "kmetric", ".", "compute_loss", "(", "\n", "torch", ".", "from_numpy", "(", "hand_pose_axisang_np", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "hand_joints_np", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ",", "\n", ")", ".", "item", "(", ")", "\n", "# endregion", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ==================== optimize engine >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# region", "\n", "use_honet", "=", "False", "\n", "if", "contact_ratio", "<", "contact_ratio_thresh", ":", "\n", "# return honet result", "\n", "        ", "hand_verts_pred", "=", "torch", ".", "from_numpy", "(", "hand_verts_np", ")", ".", "float", "(", ")", "\n", "hand_joints_pred", "=", "torch", ".", "from_numpy", "(", "hand_joints_np", ")", ".", "float", "(", ")", "\n", "hand_pose_pred", "=", "hand_pose", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "clone", "(", ")", "\n", "obj_verts_pred", "=", "torch", ".", "from_numpy", "(", "obj_verts_3d_np", ")", ".", "float", "(", ")", "\n", "use_honet", "=", "True", "\n", "", "else", ":", "\n", "# prepare kwargs according to mode", "\n", "        ", "opt_val_kwargs", "=", "dict", "(", "\n", "# static", "\n", "vertex_contact", "=", "torch", ".", "from_numpy", "(", "test_sample", "[", "CIDumpedQueries", ".", "VERTEX_CONTACT", "]", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "contact_region", "=", "torch", ".", "from_numpy", "(", "test_sample", "[", "CIDumpedQueries", ".", "CONTACT_REGION_ID", "]", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "anchor_id", "=", "torch", ".", "from_numpy", "(", "test_sample", "[", "CIDumpedQueries", ".", "CONTACT_ANCHOR_ID", "]", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "anchor_elasti", "=", "torch", ".", "from_numpy", "(", "test_sample", "[", "CIDumpedQueries", ".", "CONTACT_ANCHOR_ELASTI", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "anchor_padding_mask", "=", "torch", ".", "from_numpy", "(", "test_sample", "[", "CIDumpedQueries", ".", "CONTACT_ANCHOR_PADDING_MASK", "]", ")", "\n", ".", "long", "(", ")", "\n", ".", "to", "(", "device", ")", ",", "\n", "hand_region_assignment", "=", "torch", ".", "from_numpy", "(", "hand_region_assignment", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "hand_palm_vertex_mask", "=", "torch", ".", "from_numpy", "(", "hand_palm_vertex_mask", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", ",", "\n", ")", "\n", "if", "mode", "==", "\"hand\"", ":", "\n", "            ", "opt_val_kwargs", ".", "update", "(", "\n", "dict", "(", "\n", "# hand", "\n", "hand_shape_init", "=", "torch", ".", "from_numpy", "(", "test_sample", "[", "CIDumpedQueries", ".", "HAND_SHAPE", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "hand_tsl_init", "=", "torch", ".", "from_numpy", "(", "test_sample", "[", "CIDumpedQueries", ".", "HAND_TSL", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "hand_pose_gt", "=", "(", "[", "0", "]", ",", "hand_pose", "[", "0", ":", "1", ",", ":", "]", ")", ",", "\n", "hand_pose_init", "=", "(", "list", "(", "range", "(", "1", ",", "16", ")", ")", ",", "hand_pose", "[", "1", ":", ",", ":", "]", ")", ",", "\n", "# obj", "\n", "obj_verts_3d_gt", "=", "torch", ".", "from_numpy", "(", "obj_verts_3d_np", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "obj_normals_gt", "=", "torch", ".", "from_numpy", "(", "obj_normals_np", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", ")", "\n", ")", "\n", "", "elif", "mode", "==", "\"obj\"", ":", "\n", "            ", "opt_val_kwargs", ".", "update", "(", "\n", "dict", "(", "\n", "# hand", "\n", "hand_shape_gt", "=", "torch", ".", "from_numpy", "(", "test_sample", "[", "CIDumpedQueries", ".", "HAND_SHAPE", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "hand_tsl_gt", "=", "torch", ".", "from_numpy", "(", "test_sample", "[", "CIDumpedQueries", ".", "HAND_TSL", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "hand_pose_gt", "=", "(", "list", "(", "range", "(", "0", ",", "16", ")", ")", ",", "hand_pose", "[", "0", ":", ",", ":", "]", ")", ",", "\n", "# obj", "\n", "obj_verts_3d_can", "=", "torch", ".", "from_numpy", "(", "obj_verts_3d_can_np", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "obj_normals_can", "=", "torch", ".", "from_numpy", "(", "obj_normals_can_np", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "obj_tsl_init", "=", "torch", ".", "from_numpy", "(", "test_sample", "[", "CIDumpedQueries", ".", "OBJ_TSL", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "obj_rot_init", "=", "torch", ".", "from_numpy", "(", "test_sample", "[", "CIDumpedQueries", ".", "OBJ_ROT", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", ")", "\n", ")", "\n", "", "elif", "mode", "==", "\"hand_obj\"", ":", "\n", "            ", "opt_val_kwargs", ".", "update", "(", "\n", "dict", "(", "\n", "# hand", "\n", "hand_shape_init", "=", "torch", ".", "from_numpy", "(", "test_sample", "[", "CIDumpedQueries", ".", "HAND_SHAPE", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "hand_tsl_init", "=", "torch", ".", "from_numpy", "(", "test_sample", "[", "CIDumpedQueries", ".", "HAND_TSL", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "hand_pose_gt", "=", "(", "[", "0", "]", ",", "hand_pose", "[", "0", ":", "1", ",", ":", "]", ")", ",", "\n", "hand_pose_init", "=", "(", "list", "(", "range", "(", "1", ",", "16", ")", ")", ",", "hand_pose", "[", "1", ":", ",", ":", "]", ")", ",", "\n", "# obj", "\n", "obj_verts_3d_can", "=", "torch", ".", "from_numpy", "(", "obj_verts_3d_can_np", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "obj_normals_can", "=", "torch", ".", "from_numpy", "(", "obj_normals_can_np", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "obj_tsl_init", "=", "torch", ".", "from_numpy", "(", "test_sample", "[", "CIDumpedQueries", ".", "OBJ_TSL", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "obj_rot_init", "=", "torch", ".", "from_numpy", "(", "test_sample", "[", "CIDumpedQueries", ".", "OBJ_ROT", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "f\"unknown optimization mode {mode}\"", ")", "\n", "", "opt_val_kwargs", ".", "update", "(", "\n", "dict", "(", "\n", "# hand compensate", "\n", "hand_compensate_root", "=", "hand_joints_0", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "# viz", "\n", "runtime_vis", "=", "runtime_viz", ",", "\n", ")", "\n", ")", "\n", "\n", "hoptim", ".", "set_opt_val", "(", "**", "opt_val_kwargs", ")", "\n", "\n", "hoptim", ".", "optimize", "(", "progress", "=", "False", ")", "\n", "\n", "hand_verts_pred", ",", "hand_joints_pred", ",", "hand_transf_pred", "=", "hoptim", ".", "recover_hand", "(", ")", "\n", "hand_verts_pred", "=", "hand_verts_pred", ".", "cpu", "(", ")", "\n", "hand_joints_pred", "=", "hand_joints_pred", ".", "cpu", "(", ")", "\n", "hand_pose_pred", "=", "hoptim", ".", "recover_hand_pose", "(", ")", ".", "cpu", "(", ")", "\n", "obj_verts_pred", "=", "hoptim", ".", "recover_obj", "(", ")", "\n", "obj_verts_pred", "=", "obj_verts_pred", ".", "cpu", "(", ")", "\n", "# endregion", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ==================== eval >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# region", "\n", "", "hand_dist_after", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "norm", "(", "torch", ".", "from_numpy", "(", "hand_verts_adapt_np", ")", ".", "float", "(", ")", "-", "hand_verts_pred", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", ")", ".", "item", "(", ")", "\n", "hand_joints_dist_after", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "norm", "(", "torch", ".", "from_numpy", "(", "hand_joints_adapt_np", ")", ".", "float", "(", ")", "-", "hand_joints_pred", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", ")", ".", "item", "(", ")", "\n", "# ! center only in ho3d official version", "\n", "object_dist_after", "=", "(", "\n", "torch", ".", "mean", "(", "\n", "torch", ".", "norm", "(", "\n", "torch", ".", "from_numpy", "(", "obj_verts_3d_adapt_np", "-", "test_sample", "[", "CIAdaptQueries", ".", "HAND_JOINTS_3D", "]", "[", "0", "]", ")", ".", "float", "(", ")", "\n", "-", "(", "obj_verts_pred", "-", "hand_joints_pred", "[", "0", "]", ")", ",", "\n", "p", "=", "2", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", ")", ".", "item", "(", ")", "\n", "if", "cidata", ".", "hodataset", ".", "split_mode", "==", "\"official\"", "\n", "else", "torch", ".", "mean", "(", "\n", "torch", ".", "norm", "(", "\n", "torch", ".", "from_numpy", "(", "obj_verts_3d_adapt_np", ")", ".", "float", "(", ")", "-", "obj_verts_pred", ",", "\n", "p", "=", "2", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", ")", ".", "item", "(", ")", "\n", ")", "\n", "penetration_depth_after", "=", "torch", ".", "sqrt", "(", "\n", "penetration_loss_hand_in_obj", "(", "\n", "hand_verts_pred", ",", "\n", "obj_verts_pred", ",", "\n", "torch", ".", "from_numpy", "(", "obj_faces_np", ")", ".", "long", "(", ")", ",", "\n", ")", "\n", ")", ".", "item", "(", ")", "\n", "# ! dispatch given mode", "\n", "if", "contact_ratio", "<", "contact_ratio_thresh", ":", "\n", "        ", "obj_tsl_final_np", "=", "obj_tsl_np", "\n", "obj_rot_final_np", "=", "obj_rot_np", "\n", "", "else", ":", "\n", "        ", "if", "mode", "==", "\"obj\"", "or", "mode", "==", "\"hand_obj\"", ":", "\n", "# obj optimiziing option on", "\n", "            ", "obj_tsl_final_np", "=", "hoptim", ".", "obj_tsl_np", "(", ")", "\n", "obj_rot_final_np", "=", "hoptim", ".", "obj_rot_np", "(", ")", "\n", "", "else", ":", "\n", "            ", "obj_tsl_final_np", "=", "obj_tsl_np", "\n", "obj_rot_final_np", "=", "obj_rot_np", "\n", "", "", "solid_intersection_volume_after", ",", "_", ",", "_", "=", "solid_intersection_volume", "(", "\n", "np", ".", "asarray", "(", "hand_verts_pred", ")", ".", "astype", "(", "np", ".", "float64", ")", ",", "\n", "hand_close_faces_np", ",", "\n", "obj_vox_can_np", ",", "\n", "obj_tsl_final_np", ",", "\n", "obj_rot_final_np", ",", "\n", "obj_vox_el_vol", ",", "\n", ")", "\n", "dj_vec_after", ",", "dj_tip_only_after", ",", "dj_tip_biased_after", "=", "region_disjointness_metric", "(", "\n", "np", ".", "asarray", "(", "hand_verts_pred", ")", ",", "np", ".", "asarray", "(", "obj_verts_pred", ")", ",", "hand_region_assignment", "\n", ")", "\n", "hand_ks_after", "=", "kmetric", ".", "compute_loss", "(", "\n", "quaternion_to_angle_axis", "(", "hand_pose_pred", ".", "unsqueeze", "(", "0", ")", ")", ",", "hand_joints_pred", ".", "unsqueeze", "(", "0", ")", "\n", ")", ".", "item", "(", ")", "\n", "\n", "# res dict", "\n", "res", "=", "{", "\n", "\"hand_verts_pred\"", ":", "hand_verts_pred", ".", "numpy", "(", ")", ",", "\n", "\"hand_joints_pred\"", ":", "hand_joints_pred", ".", "numpy", "(", ")", ",", "\n", "\"obj_verts_pred\"", ":", "obj_verts_pred", ".", "numpy", "(", ")", ",", "\n", "\"hand_dist_before\"", ":", "hand_dist_before", ",", "\n", "\"hand_dist_after\"", ":", "hand_dist_after", ",", "\n", "\"hand_joints_dist_before\"", ":", "hand_joints_dist_before", ",", "\n", "\"hand_joints_dist_after\"", ":", "hand_joints_dist_after", ",", "\n", "\"object_dist_before\"", ":", "object_dist_before", ",", "\n", "\"object_dist_after\"", ":", "object_dist_after", ",", "\n", "\"penetration_depth_gt\"", ":", "penetration_depth_gt", ",", "\n", "\"penetration_depth_before\"", ":", "penetration_depth_before", ",", "\n", "\"penetration_depth_after\"", ":", "penetration_depth_after", ",", "\n", "\"solid_intersection_volume_gt\"", ":", "solid_intersection_volume_gt", "*", "1e6", ",", "\n", "\"solid_intersection_volume_before\"", ":", "solid_intersection_volume_before", "*", "1e6", ",", "\n", "\"solid_intersection_volume_after\"", ":", "solid_intersection_volume_after", "*", "1e6", ",", "\n", "\"disjointness_vector_gt\"", ":", "dj_vec_gt", ",", "\n", "\"disjointness_tip_only_gt\"", ":", "dj_tip_only_gt", ",", "\n", "\"disjointness_tip_biased_gt\"", ":", "dj_tip_biased_gt", ",", "\n", "\"disjointness_vector_before\"", ":", "dj_vec_before", ",", "\n", "\"disjointness_tip_only_before\"", ":", "dj_tip_only_before", ",", "\n", "\"disjointness_tip_biased_before\"", ":", "dj_tip_biased_before", ",", "\n", "\"disjointness_vector_after\"", ":", "dj_vec_after", ",", "\n", "\"disjointness_tip_only_after\"", ":", "dj_tip_only_after", ",", "\n", "\"disjointness_tip_biased_after\"", ":", "dj_tip_biased_after", ",", "\n", "\"hand_kinetic_score_gt\"", ":", "hand_ks_gt", ",", "\n", "\"hand_kinetic_score_before\"", ":", "hand_ks_before", ",", "\n", "\"hand_kinetic_score_after\"", ":", "hand_ks_after", ",", "\n", "\"image_path\"", ":", "test_sample", "[", "CIAdaptQueries", ".", "IMAGE_PATH", "]", ",", "\n", "}", "\n", "\n", "# save result", "\n", "with", "open", "(", "save_file", ",", "\"wb\"", ")", "as", "fstream", ":", "\n", "        ", "pickle", ".", "dump", "(", "res", ",", "fstream", ")", "\n", "\n", "# print msg", "\n", "", "print_msg", "=", "{", "\n", "\"hand_dist_before\"", ":", "res", "[", "\"hand_dist_before\"", "]", ",", "\n", "\"hand_dist_after\"", ":", "res", "[", "\"hand_dist_after\"", "]", ",", "\n", "\"hand_joints_dist_before\"", ":", "res", "[", "\"hand_joints_dist_before\"", "]", ",", "\n", "\"hand_joints_dist_after\"", ":", "res", "[", "\"hand_joints_dist_after\"", "]", ",", "\n", "\"object_dist_before\"", ":", "res", "[", "\"object_dist_before\"", "]", ",", "\n", "\"object_dist_after\"", ":", "res", "[", "\"object_dist_after\"", "]", ",", "\n", "\"penetration_depth_gt\"", ":", "res", "[", "\"penetration_depth_gt\"", "]", ",", "\n", "\"penetration_depth_before\"", ":", "res", "[", "\"penetration_depth_before\"", "]", ",", "\n", "\"penetration_depth_after\"", ":", "res", "[", "\"penetration_depth_after\"", "]", ",", "\n", "\"solid_intersection_volume_gt\"", ":", "res", "[", "\"solid_intersection_volume_gt\"", "]", ",", "\n", "\"solid_intersection_volume_before\"", ":", "res", "[", "\"solid_intersection_volume_before\"", "]", ",", "\n", "\"solid_intersection_volume_after\"", ":", "res", "[", "\"solid_intersection_volume_after\"", "]", ",", "\n", "\"disjointness_tip_only_gt\"", ":", "res", "[", "\"disjointness_tip_only_gt\"", "]", ",", "\n", "\"disjointness_tip_biased_gt\"", ":", "res", "[", "\"disjointness_tip_biased_gt\"", "]", ",", "\n", "\"disjointness_tip_only_before\"", ":", "res", "[", "\"disjointness_tip_only_before\"", "]", ",", "\n", "\"disjointness_tip_biased_before\"", ":", "res", "[", "\"disjointness_tip_biased_before\"", "]", ",", "\n", "\"disjointness_tip_only_after\"", ":", "res", "[", "\"disjointness_tip_only_after\"", "]", ",", "\n", "\"disjointness_tip_biased_after\"", ":", "res", "[", "\"disjointness_tip_biased_after\"", "]", ",", "\n", "\"hand_kinetic_score_gt\"", ":", "res", "[", "\"hand_kinetic_score_gt\"", "]", ",", "\n", "\"hand_kinetic_score_before\"", ":", "res", "[", "\"hand_kinetic_score_before\"", "]", ",", "\n", "\"hand_kinetic_score_after\"", ":", "res", "[", "\"hand_kinetic_score_after\"", "]", ",", "\n", "}", "\n", "\n", "return", "True", ",", "print_msg", ",", "use_honet", "\n", "# endregion", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.fit_geo.worker": [[470, 631], ["hocontact.hodatasets.cionline.CIOnline", "manopth.anchorutils.masking_load_driver", "os.makedirs", "termcolor.cprint", "termcolor.cprint", "hocontact.postprocess.geo_optimizer.GeOptimizer", "hocontact.utils.anatomyutils.AnatomyMetric", "termcolor.cprint", "range", "termcolor.cprint", "os.path.join", "len", "len", "termcolor.cprint", "time.time", "fit_geo.run_sample_by_idx", "res_list.append", "time.time", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "print", "len", "termcolor.cprint", "traceback.format_exc", "termcolor.cprint", "round"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.scripts.fit_geo.run_sample_by_idx"], ["", "def", "worker", "(", "\n", "device", ",", "\n", "worker_id", ",", "\n", "n_workers", ",", "\n", "data_path", ",", "\n", "mano_root", ",", "\n", "hodata_path", ",", "\n", "anchor_path", ",", "\n", "palm_path", ",", "\n", "hodata_use_cache", ",", "\n", "hodata_center_idx", ",", "\n", "fhb", ",", "\n", "load_fhb_path", ",", "\n", "compensate_tsl", ",", "\n", "lr", ",", "\n", "n_iter", ",", "\n", "mode", ",", "\n", "save_prefix", ",", "\n", "contact_ratio_thresh", ",", "\n", "hand_closed_path", ",", "\n", "lambda_contact_loss", ",", "\n", "lambda_repulsion_loss", ",", "\n", "repulsion_query", ",", "\n", "repulsion_threshold", ",", "\n", ")", ":", "\n", "    ", "ci_online", "=", "CIOnline", "(", "\n", "data_path", ",", "hodata_path", ",", "anchor_path", ",", "hodata_use_cache", "=", "hodata_use_cache", ",", "hodata_center_idx", "=", "hodata_center_idx", "\n", ")", "\n", "hand_region_assignment", ",", "hand_palm_vertex_mask", "=", "masking_load_driver", "(", "anchor_path", ",", "palm_path", ")", "\n", "\n", "param_str", "=", "f\"lcl{lambda_contact_loss}_lrl{lambda_repulsion_loss}_rq{repulsion_query}_rt{repulsion_threshold}\"", "\n", "param_str", "+=", "f\"_ctsl{'' if compensate_tsl else '(x)'}\"", "\n", "\n", "if", "save_prefix", "is", "None", ":", "\n", "# need to figure out save prefix", "\n", "        ", "save_prefix", "=", "os", ".", "path", ".", "join", "(", "\n", "\"common/optimize\"", ",", "ci_online", ".", "hodataset", ".", "name", ",", "ci_online", ".", "hodataset", ".", "split_mode", ",", "param_str", ",", "mode", "\n", ")", "\n", "# check make dir", "\n", "", "os", ".", "makedirs", "(", "save_prefix", ",", "exist_ok", "=", "True", ")", "\n", "\n", "begin_index", "=", "worker_id", "*", "len", "(", "ci_online", ")", "//", "n_workers", "\n", "end_index", "=", "(", "worker_id", "+", "1", ")", "*", "len", "(", "ci_online", ")", "//", "n_workers", "\n", "cprint", "(", "\n", "f\"====== {worker_id:>3} begin: {begin_index:0>4} end: {end_index:0>4} len: {len(ci_online)} >>>>>>\"", ",", "\n", "\"cyan\"", ",", "\n", ")", "\n", "cprint", "(", "\n", "f\"====== {worker_id:>3} using device: {device} >>>>>>\"", ",", "\n", "\"cyan\"", ",", "\n", ")", "\n", "hoptim", "=", "GeOptimizer", "(", "\n", "device", ",", "\n", "lr", "=", "lr", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "verbose", "=", "False", ",", "\n", "mano_root", "=", "mano_root", ",", "\n", "anchor_path", "=", "anchor_path", ",", "\n", "fhb", "=", "fhb", ",", "\n", "load_fhb_path", "=", "load_fhb_path", ",", "\n", "compensate_tsl", "=", "compensate_tsl", ",", "\n", "lambda_contact_loss", "=", "lambda_contact_loss", ",", "\n", "lambda_repulsion_loss", "=", "lambda_repulsion_loss", ",", "\n", "repulsion_query", "=", "repulsion_query", ",", "\n", "repulsion_threshold", "=", "repulsion_threshold", ",", "\n", ")", "\n", "kmetric", "=", "AnatomyMetric", "(", ")", "\n", "cprint", "(", "\n", "f\"====== optimizer created on device: {device} >>>>>>\"", ",", "\n", "\"cyan\"", ",", "\n", ")", "\n", "\n", "res_list", "=", "[", "]", "\n", "use_honet_cnt", "=", "0", "\n", "for", "i", "in", "range", "(", "begin_index", ",", "end_index", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "cprint", "(", "f\"       {worker_id:>3} processing: {i:0>4}, mode: {mode}, param: {param_str}\"", ",", "\"yellow\"", ")", "\n", "time_start", "=", "time", ".", "time", "(", ")", "\n", "flag", ",", "res", ",", "use_honet", "=", "run_sample_by_idx", "(", "\n", "device", "=", "device", ",", "\n", "hoptim", "=", "hoptim", ",", "\n", "mode", "=", "mode", ",", "\n", "cidata", "=", "ci_online", ",", "\n", "kmetric", "=", "kmetric", ",", "\n", "index", "=", "i", ",", "\n", "hand_region_assignment", "=", "hand_region_assignment", ",", "\n", "hand_palm_vertex_mask", "=", "hand_palm_vertex_mask", ",", "\n", "save_path", "=", "save_prefix", ",", "\n", "contact_ratio_thresh", "=", "contact_ratio_thresh", ",", "\n", "hand_closed_path", "=", "hand_closed_path", ",", "\n", ")", "\n", "if", "not", "flag", ":", "\n", "                ", "cprint", "(", "f\" x     {worker_id:>3} skip: {i:0>4}\"", ",", "\"yellow\"", ")", "\n", "", "res_list", ".", "append", "(", "res", ")", "\n", "time_end", "=", "time", ".", "time", "(", ")", "\n", "\n", "use_honet_cnt", "+=", "1", "if", "use_honet", "else", "0", "\n", "better_color", "=", "\"blue\"", "if", "not", "use_honet", "else", "\"white\"", "\n", "worse_color", "=", "\"red\"", "if", "not", "use_honet", "else", "\"white\"", "\n", "\n", "print_line", "=", "f\"   x   {worker_id:>3} processed: {i:0>4} elapsed {round(time_end - time_start):>4} result: \"", "\n", "print_line", "+=", "colored", "(", "f\"HDB={res['hand_dist_before']:.4f}, \"", ",", "\"white\"", ")", "\n", "print_line", "+=", "colored", "(", "f\"ODB={res['object_dist_before']:.4f}, \"", ",", "\"white\"", ")", "\n", "print_line", "+=", "colored", "(", "f\"PD:GT={res['penetration_depth_gt']:.4f}, \"", ",", "\"white\"", ")", "\n", "print_line", "+=", "colored", "(", "f\"PD:B={res['penetration_depth_before']:.4f}, \"", ",", "\"white\"", ")", "\n", "print_line", "+=", "colored", "(", "f\"SI:GT={res['solid_intersection_volume_gt']:.4f}, \"", ",", "\"white\"", ")", "\n", "print_line", "+=", "colored", "(", "f\"SI:B={res['solid_intersection_volume_before']:.4f}, \"", ",", "\"white\"", ")", "\n", "print_line", "+=", "\"\\n\"", "\n", "\n", "print_line", "+=", "f\"   |   {worker_id:>3} processed: {i:0>4}           continue:  \"", "\n", "print_line", "+=", "colored", "(", "f\"DJ_TO:GT={res['disjointness_tip_only_gt']:.4f}, \"", ",", "\"white\"", ")", "\n", "print_line", "+=", "colored", "(", "f\"DJ_TO:B={res['disjointness_tip_only_before']:.4f}, \"", ",", "\"white\"", ")", "\n", "print_line", "+=", "colored", "(", "f\"DJ_TB:GT={res['disjointness_tip_biased_gt']:.4f}, \"", ",", "\"white\"", ")", "\n", "print_line", "+=", "colored", "(", "f\"DJ_TB:B={res['disjointness_tip_biased_before']:.4f}, \"", ",", "\"white\"", ")", "\n", "print_line", "+=", "colored", "(", "f\"HKS:GT={res['hand_kinetic_score_gt']:.4f}, \"", ",", "\"white\"", ")", "\n", "print_line", "+=", "colored", "(", "f\"HKS:B={res['hand_kinetic_score_before']:.4f}, \"", ",", "\"white\"", ")", "\n", "print_line", "+=", "\"\\n\"", "\n", "\n", "print_line", "+=", "f\"   |   {worker_id:>3} processed: {i:0>4}           continue:  \"", "\n", "color_str", "=", "better_color", "if", "res", "[", "\"hand_dist_after\"", "]", "<", "res", "[", "\"hand_dist_before\"", "]", "else", "worse_color", "\n", "print_line", "+=", "colored", "(", "f\"HDA={res['hand_dist_after']:.4f}, \"", ",", "color_str", ")", "\n", "color_str", "=", "better_color", "if", "res", "[", "\"object_dist_after\"", "]", "<", "res", "[", "\"object_dist_before\"", "]", "else", "worse_color", "\n", "print_line", "+=", "colored", "(", "f\"ODA={res['object_dist_after']:.4f}, \"", ",", "color_str", ")", "\n", "color_str", "=", "(", "\n", "better_color", "if", "res", "[", "\"penetration_depth_after\"", "]", "<", "res", "[", "\"penetration_depth_before\"", "]", "else", "worse_color", "\n", ")", "\n", "print_line", "+=", "colored", "(", "f\"PD:A={res['penetration_depth_after']:.4f}, \"", ",", "color_str", ")", "\n", "color_str", "=", "(", "\n", "better_color", "\n", "if", "res", "[", "\"solid_intersection_volume_after\"", "]", "<", "res", "[", "\"solid_intersection_volume_before\"", "]", "\n", "else", "worse_color", "\n", ")", "\n", "print_line", "+=", "colored", "(", "f\"SI:A={res['solid_intersection_volume_after']:.4f}, \"", ",", "color_str", ")", "\n", "color_str", "=", "(", "\n", "better_color", "\n", "if", "res", "[", "\"disjointness_tip_only_after\"", "]", "<", "res", "[", "\"disjointness_tip_only_before\"", "]", "\n", "else", "worse_color", "\n", ")", "\n", "print_line", "+=", "colored", "(", "f\"DJ_TO:A={res['disjointness_tip_only_after']:.4f}, \"", ",", "color_str", ")", "\n", "color_str", "=", "(", "\n", "better_color", "\n", "if", "res", "[", "\"disjointness_tip_biased_after\"", "]", "<", "res", "[", "\"disjointness_tip_biased_before\"", "]", "\n", "else", "worse_color", "\n", ")", "\n", "print_line", "+=", "colored", "(", "f\"DJ_TB:A={res['disjointness_tip_biased_after']:.4f}, \"", ",", "color_str", ")", "\n", "color_str", "=", "(", "\n", "better_color", "if", "res", "[", "\"hand_kinetic_score_after\"", "]", "<", "res", "[", "\"hand_kinetic_score_before\"", "]", "else", "worse_color", "\n", ")", "\n", "print_line", "+=", "colored", "(", "f\"HKS:A={res['hand_kinetic_score_after']:.4f}, \"", ",", "color_str", ")", "\n", "\n", "print", "(", "print_line", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "exc_trace", "=", "traceback", ".", "format_exc", "(", ")", "\n", "err_msg", "=", "f\"  x    {worker_id:>3}: sample {i:0>4}, \\n{exc_trace}\"", "\n", "cprint", "(", "err_msg", ",", "\"red\"", ")", "\n", "\n", "", "", "cprint", "(", "\n", "f\"====== {worker_id:>3} conclude <<<<<<\"", ",", "\n", "\"cyan\"", ",", "\n", ")", "\n", "return", "res_list", ",", "use_honet_cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.fit_geo.main": [[633, 701], ["torch.cuda.device_count", "range", "fit_geo.collapse_res_list", "fit_geo.merge_res_list", "fit_geo.summarize", "termcolor.cprint", "device_list.append", "joblib.Parallel", "torch.device", "joblib.delayed", "list", "range"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.scripts.fit_geo.collapse_res_list", "home.repos.pwc.inspect_result.lixiny_CPF.scripts.fit_geo.merge_res_list", "home.repos.pwc.inspect_result.lixiny_CPF.scripts.fit_geo.summarize"], ["", "def", "main", "(", "\n", "n_workers", ",", "\n", "data_path", ",", "\n", "mano_root", ",", "\n", "hodata_path", ",", "\n", "anchor_path", ",", "\n", "palm_path", ",", "\n", "hodata_use_cache", ",", "\n", "hodata_center_idx", ",", "\n", "fhb", ",", "\n", "load_fhb_path", ",", "\n", "compensate_tsl", ",", "\n", "lr", ",", "\n", "n_iter", ",", "\n", "mode", ",", "\n", "save_prefix", ",", "\n", "contact_ratio_thresh", ",", "\n", "hand_closed_path", ",", "\n", "lambda_contact_loss", ",", "\n", "lambda_repulsion_loss", ",", "\n", "repulsion_query", ",", "\n", "repulsion_threshold", ",", "\n", ")", ":", "\n", "# get all cuda device ids", "\n", "    ", "device_count", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "# create device for each worker", "\n", "device_list", "=", "[", "]", "\n", "for", "worker_id", "in", "range", "(", "n_workers", ")", ":", "\n", "        ", "device_list", ".", "append", "(", "torch", ".", "device", "(", "f\"cuda:{worker_id % device_count}\"", ")", ")", "\n", "\n", "# initial jobs", "\n", "", "collected", "=", "Parallel", "(", "n_jobs", "=", "n_workers", ")", "(", "\n", "delayed", "(", "worker", ")", "(", "\n", "device", "=", "device_list", "[", "worker_id", "]", ",", "\n", "worker_id", "=", "worker_id", ",", "\n", "n_workers", "=", "n_workers", ",", "\n", "data_path", "=", "data_path", ",", "\n", "mano_root", "=", "mano_root", ",", "\n", "hodata_path", "=", "hodata_path", ",", "\n", "anchor_path", "=", "anchor_path", ",", "\n", "palm_path", "=", "palm_path", ",", "\n", "hodata_use_cache", "=", "hodata_use_cache", ",", "\n", "hodata_center_idx", "=", "hodata_center_idx", ",", "\n", "fhb", "=", "fhb", ",", "\n", "load_fhb_path", "=", "load_fhb_path", ",", "\n", "lr", "=", "lr", ",", "\n", "compensate_tsl", "=", "compensate_tsl", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "mode", "=", "mode", ",", "\n", "save_prefix", "=", "save_prefix", ",", "\n", "contact_ratio_thresh", "=", "contact_ratio_thresh", ",", "\n", "hand_closed_path", "=", "hand_closed_path", ",", "\n", "lambda_contact_loss", "=", "lambda_contact_loss", ",", "\n", "lambda_repulsion_loss", "=", "lambda_repulsion_loss", ",", "\n", "repulsion_query", "=", "repulsion_query", ",", "\n", "repulsion_threshold", "=", "repulsion_threshold", ",", "\n", ")", "\n", "for", "worker_id", "in", "list", "(", "range", "(", "n_workers", ")", ")", "\n", ")", "\n", "\n", "# post process", "\n", "use_honet", "=", "0", "\n", "for", "c", "in", "collected", ":", "\n", "        ", "use_honet", "+=", "c", "[", "1", "]", "\n", "", "collapsed", "=", "collapse_res_list", "(", "collected", ")", "\n", "merged", "=", "merge_res_list", "(", "collapsed", ")", "\n", "summarize", "(", "merged", ")", "\n", "cprint", "(", "f\"use honet samples {use_honet}\"", ",", "\"blue\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.recover_anchor.get_colors": [[10, 18], ["matplotlib.cm.get_cmap", "numpy.linspace", "cm.get_cmap.", "numpy.random.shuffle"], "function", ["None"], ["def", "get_colors", "(", "num_color", ",", "alpha", "=", "1.0", ",", "shuffle", "=", "False", ")", ":", "\n", "    ", "cmap", "=", "cm", ".", "get_cmap", "(", "\"rainbow\"", ")", "\n", "x", "=", "np", ".", "linspace", "(", "0.0", ",", "1.0", ",", "num_color", ")", "\n", "res", "=", "cmap", "(", "x", ")", "\n", "res", "[", ":", ",", "3", "]", "=", "alpha", "\n", "if", "shuffle", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "res", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.recover_anchor.main": [[20, 81], ["manopth.manolayer.ManoLayer", "numpy.array().astype", "torch.rand", "torch.zeros", "manopth.manolayer.ManoLayer.", "numpy.array", "numpy.array", "numpy.array", "manopth.anchorutils.recover_anchor", "pyrender.Scene", "pyrender.PerspectiveCamera", "pyrender.Node", "pyrender.Scene.add_node", "pyrender.Scene.set_pose", "numpy.array", "numpy.expand_dims().repeat", "numpy.array", "numpy.array", "trimesh.Trimesh", "pyrender.Mesh.from_trimesh", "pyrender.Scene.add", "recover_anchor.get_colors", "range", "pyrender.Viewer", "numpy.array", "len", "trimesh.creation.uv_sphere", "numpy.tile", "pyrender.Mesh.from_trimesh", "pyrender.Scene.add", "numpy.eye", "numpy.eye", "numpy.expand_dims", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.scripts.recover_anchor.get_colors"], ["", "def", "main", "(", "render", "=", "False", ",", "face_vertex_index", "=", "None", ",", "anchor_weight", "=", "None", ")", ":", "\n", "# init mano", "\n", "    ", "mano_layer", "=", "ManoLayer", "(", "\n", "mano_root", "=", "\"assets/mano\"", ",", "\n", "use_pca", "=", "False", ",", "\n", "ncomps", "=", "12", ",", "\n", "flat_hand_mean", "=", "True", ",", "\n", "center_idx", "=", "9", ",", "\n", "return_transf", "=", "True", ",", "\n", ")", "\n", "faces", "=", "np", ".", "array", "(", "mano_layer", ".", "th_faces", ")", ".", "astype", "(", "np", ".", "long", ")", "\n", "\n", "# gen random shape", "\n", "vec_shape", "=", "torch", ".", "rand", "(", "1", ",", "10", ")", "\n", "# gen zero pose", "\n", "vec_pose", "=", "torch", ".", "zeros", "(", "1", ",", "48", ")", "\n", "\n", "# gen hand", "\n", "vertices", ",", "joints", ",", "transf", "=", "mano_layer", "(", "vec_pose", ",", "vec_shape", ")", "\n", "joints", "=", "np", ".", "array", "(", "joints", "[", "0", "]", ")", "\n", "vertices", "=", "np", ".", "array", "(", "vertices", "[", "0", "]", ")", "\n", "transf", "=", "np", ".", "array", "(", "transf", "[", "0", "]", ")", "\n", "n_vertex", "=", "vertices", ".", "shape", "[", "0", "]", "\n", "\n", "# ========= MAIN >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "anchors", "=", "recover_anchor", "(", "vertices", ",", "face_vertex_index", ",", "anchor_weight", ")", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# set up viewer", "\n", "if", "render", ":", "\n", "        ", "scene", "=", "pyrender", ".", "Scene", "(", ")", "\n", "cam", "=", "pyrender", ".", "PerspectiveCamera", "(", "yfov", "=", "np", ".", "pi", "/", "3.0", ",", "aspectRatio", "=", "1.414", ")", "\n", "node_cam", "=", "pyrender", ".", "Node", "(", "camera", "=", "cam", ",", "matrix", "=", "np", ".", "eye", "(", "4", ")", ")", "\n", "scene", ".", "add_node", "(", "node_cam", ")", "\n", "scene", ".", "set_pose", "(", "node_cam", ",", "pose", "=", "np", ".", "eye", "(", "4", ")", ")", "\n", "vertex_colors", "=", "np", ".", "array", "(", "[", "0.8", ",", "0.8", ",", "0.8", ",", "0.8", "]", ")", "\n", "vertex_colors", "=", "np", ".", "expand_dims", "(", "vertex_colors", ",", "0", ")", ".", "repeat", "(", "n_vertex", ",", "axis", "=", "0", ")", "\n", "joint_colors", "=", "np", ".", "array", "(", "[", "10", ",", "73", ",", "233", ",", "255", "]", ")", "\n", "transl", "=", "np", ".", "array", "(", "[", "-", "0", ",", "-", "0", ",", "-", "500.0", "]", ")", "\n", "transl", "=", "transl", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "\n", "joints", "=", "joints", "*", "1000.0", "+", "transl", "\n", "vertices", "=", "vertices", "*", "1000.0", "+", "transl", "\n", "transf", "[", ":", ",", ":", "3", ",", "3", "]", "=", "transf", "[", ":", ",", ":", "3", ",", "3", "]", "*", "1000.0", "+", "transl", "\n", "\n", "tri_mesh", "=", "trimesh", ".", "Trimesh", "(", "vertices", ",", "faces", ",", "vertex_colors", "=", "vertex_colors", ")", "\n", "mesh", "=", "pyrender", ".", "Mesh", ".", "from_trimesh", "(", "tri_mesh", ")", "\n", "\n", "scene", ".", "add", "(", "mesh", ")", "\n", "\n", "anchor_colors", "=", "get_colors", "(", "anchors", ".", "shape", "[", "0", "]", ",", "alpha", "=", "1.0", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "anchors", ")", ")", ":", "\n", "            ", "anchor_sphere", "=", "trimesh", ".", "creation", ".", "uv_sphere", "(", "radius", "=", "2", ")", "\n", "anchor_sphere", ".", "visual", ".", "vertex_colors", "=", "anchor_colors", "[", "k", "]", "\n", "tfs", "=", "np", ".", "tile", "(", "np", ".", "eye", "(", "4", ")", ",", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "tfs", "[", "0", ",", ":", "3", ",", "3", "]", "=", "anchors", "[", "k", "]", "*", "1000", "+", "transl", "\n", "anchor_mesh", "=", "pyrender", ".", "Mesh", ".", "from_trimesh", "(", "anchor_sphere", ",", "poses", "=", "tfs", ")", "\n", "scene", ".", "add", "(", "anchor_mesh", ")", "\n", "\n", "# pyrender.Viewer(scene, use_raymond_lighting=True, render_flags={\"all_wireframe\": True})", "\n", "", "pyrender", ".", "Viewer", "(", "scene", ",", "use_raymond_lighting", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.dump_picr_res.set_all_seeds": [[24, 29], ["torch.cuda.manual_seed_all", "torch.manual_seed", "numpy.random.seed", "random.seed"], "function", ["None"], ["def", "set_all_seeds", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.dump_picr_res.dump_main": [[34, 63], ["torch.cuda.device_count", "hocontact.utils.logger.logger.warn", "dump_picr_res.set_all_seeds", "hocontact.utils.logger.logger.initialize", "hocontact.utils.ioutils.print_args", "hocontact.utils.ioutils.save_args", "hocontact.utils.logger.logger.info", "torch.multiprocessing.spawn", "datetime.datetime.now", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn", "home.repos.pwc.inspect_result.lixiny_CPF.scripts.dump_picr_res.set_all_seeds", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.initialize", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.print_args", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.save_args", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info"], ["def", "dump_main", "(", "args", ")", ":", "\n", "# ==================== setup things before distributed >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "    ", "device_count", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "logger", ".", "warn", "(", "\"\\nUSING {} GPUs\"", ".", "format", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "\n", "set_all_seeds", "(", "args", ".", "manual_seed", ")", "\n", "\n", "if", "args", ".", "exp_keyword", "is", "None", ":", "\n", "        ", "now", "=", "datetime", ".", "now", "(", ")", "\n", "exp_keyword", "=", "f\"{now.year}_{now.month:02d}_{now.day:02d}_{now.hour:02d}\"", "\n", "", "else", ":", "\n", "        ", "exp_keyword", "=", "args", ".", "exp_keyword", "\n", "\n", "", "dat_str", "=", "\"_\"", ".", "join", "(", "args", ".", "train_datasets", ")", "\n", "split_str", "=", "\"_\"", ".", "join", "(", "args", ".", "train_splits", ")", "\n", "exp_id", "=", "f\"checkpoints/picr_dump/{dat_str}_{split_str}_mini{args.mini_factor}/bs{args.batch_size}\"", "\n", "exp_id", "=", "f\"{exp_id}_brot\"", "\n", "exp_id", "=", "f\"{exp_id}_dump\"", "\n", "exp_id", "=", "f\"{exp_id}/{exp_keyword}\"", "\n", "\n", "logger", ".", "initialize", "(", "exp_id", ",", "\"dump\"", ")", "\n", "ioutils", ".", "print_args", "(", "args", ")", "\n", "ioutils", ".", "save_args", "(", "args", ",", "exp_id", ",", "\"opt\"", ")", "\n", "\n", "logger", ".", "info", "(", "f\"Saving experiment logs, models, and training curves and images to {exp_id}\"", ")", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ==================== distributed run >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "torch", ".", "multiprocessing", ".", "spawn", "(", "dump_main_worker", ",", "args", "=", "(", "device_count", ",", "exp_id", ",", "args", ")", ",", "nprocs", "=", "device_count", ",", "join", "=", "True", ")", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.dump_picr_res.dump_main_worker_setup": [[66, 69], ["torch.distributed.init_process_group"], "function", ["None"], ["", "def", "dump_main_worker_setup", "(", "rank", ",", "world_size", ")", ":", "\n", "# initialize the progress group", "\n", "    ", "torch", ".", "distributed", ".", "init_process_group", "(", "\"nccl\"", ",", "rank", "=", "rank", ",", "world_size", "=", "world_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.dump_picr_res.dump_main_worker_cleanup": [[71, 73], ["torch.distributed.destroy_process_group"], "function", ["None"], ["", "def", "dump_main_worker_cleanup", "(", ")", ":", "\n", "    ", "torch", ".", "distributed", ".", "destroy_process_group", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.dump_picr_res.dump_main_worker": [[75, 264], ["hocontact.utils.logger.logger.info", "dump_picr_res.dump_main_worker_setup", "zip", "torch.utils.data.ConcatDataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "hocontact.hodatasets.hodata.HOdata.get_dataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "hocontact.models.picr.PicrHourglassPointNet", "_model.to.to", "torch.nn.parallel.DistributedDataParallel", "hocontact.utils.ioutils.reload_checkpoint", "torch.utils.data.distributed.DistributedSampler.set_epoch", "torch.utils.data.distributed.DistributedSampler.set_epoch", "dump_picr_res.dumping_epoch_before", "dump_picr_res.dumping_epoch_pass", "dump_picr_res.dumping_epoch_after", "dump_picr_res.dumping_epoch_before", "dump_picr_res.dumping_epoch_pass", "dump_picr_res.dumping_epoch_after", "dump_picr_res.dump_main_worker_cleanup", "len", "len", "hocontact.hodatasets.hodata.HOdata.get_dataset", "datasets.append", "hocontact.utils.logger.logger.error", "exit", "hocontact.utils.logger.logger.info", "hocontact.utils.logger.logger.info", "hocontact.utils.logger.logger.info", "hocontact.utils.logger.logger.info", "hocontact.utils.logger.logger.info", "hocontact.utils.ioutils.param_size", "hocontact.utils.ioutils.param_size", "hocontact.utils.ioutils.param_size", "hocontact.utils.logger.logger.info", "hocontact.utils.logger.logger.info", "hocontact.utils.logger.logger.info", "hocontact.utils.logger.logger.warn", "hocontact.utils.ioutils.print_query", "int", "len", "len", "hocontact.utils.ioutils.param_size", "hocontact.utils.ioutils.param_size", "hocontact.utils.ioutils.param_size", "hocontact.utils.ioutils.param_size", "hocontact.utils.ioutils.param_size"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.scripts.dump_picr_res.dump_main_worker_setup", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_dataset", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.reload_checkpoint", "home.repos.pwc.inspect_result.lixiny_CPF.scripts.dump_picr_res.dumping_epoch_before", "home.repos.pwc.inspect_result.lixiny_CPF.scripts.dump_picr_res.dumping_epoch_pass", "home.repos.pwc.inspect_result.lixiny_CPF.scripts.dump_picr_res.dumping_epoch_after", "home.repos.pwc.inspect_result.lixiny_CPF.scripts.dump_picr_res.dumping_epoch_before", "home.repos.pwc.inspect_result.lixiny_CPF.scripts.dump_picr_res.dumping_epoch_pass", "home.repos.pwc.inspect_result.lixiny_CPF.scripts.dump_picr_res.dumping_epoch_after", "home.repos.pwc.inspect_result.lixiny_CPF.scripts.dump_picr_res.dump_main_worker_cleanup", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_dataset", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.error", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.param_size", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.param_size", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.param_size", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.print_query", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.param_size", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.param_size", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.param_size", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.param_size", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.param_size"], ["", "def", "dump_main_worker", "(", "rank", ",", "world_size", ",", "exp_id", ",", "args", ")", ":", "\n", "# ====================  setup distributed >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "    ", "logger", ".", "info", "(", "f\"====== worker {rank} of {world_size} initiate >>>>>>\"", ",", "\"cyan\"", ")", "\n", "dump_main_worker_setup", "(", "rank", ",", "world_size", ")", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ==================== Creating Datasets >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "assert", "len", "(", "args", ".", "train_datasets", ")", "==", "len", "(", "\n", "args", ".", "train_splits", "\n", ")", ",", "f\"train dataset and split not match, got {args.train_datasets} and {args.train_splits}\"", "\n", "\n", "datasets", "=", "[", "]", "\n", "for", "data_name", ",", "data_split", "in", "zip", "(", "args", ".", "train_datasets", ",", "args", ".", "train_splits", ")", ":", "\n", "        ", "train_dataset", "=", "HOdata", ".", "get_dataset", "(", "\n", "dataset", "=", "data_name", ",", "\n", "data_root", "=", "args", ".", "data_root", ",", "\n", "data_split", "=", "data_split", ",", "\n", "split_mode", "=", "args", ".", "split_mode", ",", "\n", "use_cache", "=", "args", ".", "use_cache", ",", "\n", "mini_factor", "=", "args", ".", "mini_factor", ",", "\n", "center_idx", "=", "args", ".", "center_idx", ",", "\n", "enable_contact", "=", "args", ".", "enable_contact", ",", "\n", "filter_no_contact", "=", "True", ",", "\n", "filter_thresh", "=", "args", ".", "filter_thresh", ",", "\n", "like_v1", "=", "(", "args", ".", "version", "==", "1", ")", ",", "\n", "block_rot", "=", "True", ",", "\n", "synt_factor", "=", "0", ",", "\n", ")", "\n", "datasets", ".", "append", "(", "train_dataset", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "ioutils", ".", "print_query", "(", "train_dataset", ".", "queries", ",", "desp", "=", "f\"training_set_{data_name}_queries\"", ")", "\n", "\n", "", "", "train_dataset", "=", "ConcatDataset", "(", "datasets", ")", "\n", "train_dist_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ",", "shuffle", "=", "False", ")", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "drop_last", "=", "False", ",", "\n", "collate_fn", "=", "ho_collate", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_dist_sampler", ",", "\n", ")", "\n", "\n", "val_dataset", "=", "HOdata", ".", "get_dataset", "(", "\n", "dataset", "=", "args", ".", "val_dataset", ",", "\n", "data_root", "=", "args", ".", "data_root", ",", "\n", "data_split", "=", "args", ".", "val_split", ",", "\n", "split_mode", "=", "args", ".", "split_mode", ",", "\n", "use_cache", "=", "args", ".", "use_cache", ",", "\n", "mini_factor", "=", "args", ".", "mini_factor", ",", "\n", "center_idx", "=", "args", ".", "center_idx", ",", "\n", "enable_contact", "=", "args", ".", "enable_contact", ",", "\n", "filter_no_contact", "=", "args", ".", "test_dump", ",", "\n", "filter_thresh", "=", "args", ".", "filter_thresh", ",", "\n", "like_v1", "=", "(", "args", ".", "version", "==", "1", ")", ",", "\n", "block_rot", "=", "True", ",", "\n", "synt_factor", "=", "0", ",", "\n", ")", "\n", "val_dist_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "val_dataset", ",", "shuffle", "=", "False", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "int", "(", "args", ".", "workers", ")", ",", "\n", "drop_last", "=", "False", ",", "\n", "collate_fn", "=", "ho_collate", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "val_dist_sampler", ",", "\n", ")", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ==================== initialize model >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "_model", "=", "PicrHourglassPointNet", "(", "\n", "hg_stacks", "=", "args", ".", "hg_stacks", ",", "\n", "hg_blocks", "=", "args", ".", "hg_blocks", ",", "\n", "hg_classes", "=", "args", ".", "hg_classes", ",", "\n", "obj_scale_factor", "=", "args", ".", "obj_scale_factor", ",", "\n", "honet_resnet_version", "=", "args", ".", "honet_resnet_version", ",", "\n", "honet_center_idx", "=", "args", ".", "center_idx", ",", "\n", "honet_mano_lambda_recov_joints3d", "=", "args", ".", "honet_mano_lambda_recov_joints3d", ",", "\n", "honet_mano_lambda_recov_verts3d", "=", "args", ".", "honet_mano_lambda_recov_verts3d", ",", "\n", "honet_mano_lambda_shape", "=", "args", ".", "honet_mano_lambda_shape", ",", "\n", "honet_mano_lambda_pose_reg", "=", "args", ".", "honet_mano_lambda_pose_reg", ",", "\n", "honet_obj_lambda_recov_verts3d", "=", "args", ".", "honet_obj_lambda_recov_verts3d", ",", "\n", "honet_obj_trans_factor", "=", "args", ".", "honet_obj_trans_factor", ",", "\n", "honet_mano_fhb_hand", "=", "\"fhb\"", "in", "args", ".", "train_datasets", ",", "\n", ")", "\n", "_model", "=", "_model", ".", "to", "(", "rank", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "_model", ",", "device_ids", "=", "[", "rank", "]", ")", "\n", "\n", "# check init_ckpt option", "\n", "if", "args", ".", "init_ckpt", "is", "None", ":", "\n", "        ", "logger", ".", "error", "(", "\"no initializing checkpoint provided. abort!\"", ",", "\"red\"", ")", "\n", "exit", "(", ")", "\n", "", "map_location", "=", "f\"cuda:{rank}\"", "\n", "_", "=", "ioutils", ".", "reload_checkpoint", "(", "\n", "model", ",", "\n", "resume_path", "=", "args", ".", "init_ckpt", ",", "\n", "as_parallel", "=", "True", ",", "\n", "map_location", "=", "map_location", ",", "\n", "reload_honet_checkpoints", "=", "args", ".", "reload_honet_checkpoints", ",", "\n", ")", "\n", "# only weights is reloaded, others are dropped", "\n", "\n", "# ====== print model size information", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "f\"Model total size == {ioutils.param_size(model.module)} MB\"", ")", "\n", "logger", ".", "info", "(", "f\"  |  HONet total size == {ioutils.param_size(model.module.ho_net)} MB\"", ")", "\n", "logger", ".", "info", "(", "f\"  |  BaseNet total size == {ioutils.param_size(model.module.base_net)} MB\"", ")", "\n", "logger", ".", "info", "(", "f\"  \\\\  ContactHead total size == {ioutils.param_size(model.module.contact_head)} MB\"", ")", "\n", "logger", ".", "info", "(", "f\"    |  EncodeModule total size == {ioutils.param_size(model.module.contact_head.encoder)} MB\"", ")", "\n", "decode_vertex_contact_size", "=", "ioutils", ".", "param_size", "(", "model", ".", "module", ".", "contact_head", ".", "vertex_contact_decoder", ")", "\n", "decode_contact_region_size", "=", "ioutils", ".", "param_size", "(", "model", ".", "module", ".", "contact_head", ".", "contact_region_decoder", ")", "\n", "decode_anchor_elasti_size", "=", "ioutils", ".", "param_size", "(", "model", ".", "module", ".", "contact_head", ".", "anchor_elasti_decoder", ")", "\n", "logger", ".", "info", "(", "f\"    |  DecodeModule_VertexContact total size == {decode_vertex_contact_size} MB\"", ")", "\n", "logger", ".", "info", "(", "f\"    |  DecodeModule_ContactRegion total size == {decode_contact_region_size} MB\"", ")", "\n", "logger", ".", "info", "(", "f\"    |  DecodeModule_AnchorElasti total size == {decode_anchor_elasti_size} MB\"", ")", "\n", "\n", "", "train_dist_sampler", ".", "set_epoch", "(", "0", ")", "\n", "val_dist_sampler", ".", "set_epoch", "(", "0", ")", "\n", "\n", "# ==================== dumping train >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# job before epoch", "\n", "tmp_dir", "=", "dumping_epoch_before", "(", "rank", ",", "exp_id", ",", "0", ",", "train", "=", "True", ")", "\n", "\n", "# epoch pass", "\n", "dumping_epoch_pass", "(", "\n", "rank", ",", "\n", "\"train\"", ",", "\n", "train_loader", ",", "\n", "model", ",", "\n", "epoch", "=", "0", ",", "\n", "use_eval", "=", "args", ".", "dump_eval", ",", "\n", "use_dump", "=", "args", ".", "dump", ",", "\n", "dump_prefix", "=", "args", ".", "dump_prefix", ",", "\n", "tmp_dir", "=", "tmp_dir", ",", "\n", "vertex_contact_thresh", "=", "args", ".", "vertex_contact_thresh", ",", "\n", ")", "\n", "\n", "# job after epoch", "\n", "dumping_epoch_after", "(", "\n", "rank", ",", "\n", "exp_id", ",", "\n", "0", ",", "\n", "train", "=", "True", ",", "\n", "use_eval", "=", "args", ".", "dump_eval", ",", "\n", "use_dump", "=", "args", ".", "dump", ",", "\n", "tmp_dir", "=", "tmp_dir", ",", "\n", "target_count", "=", "len", "(", "train_dataset", ")", ",", "\n", ")", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ==================== dumping val >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# job before epoch", "\n", "val_tmp_dir", "=", "dumping_epoch_before", "(", "rank", ",", "exp_id", ",", "0", ",", "train", "=", "False", ")", "\n", "\n", "# epoch pass", "\n", "dumping_epoch_pass", "(", "\n", "rank", ",", "\n", "\"val\"", ",", "\n", "val_loader", ",", "\n", "model", ",", "\n", "epoch", "=", "0", ",", "\n", "use_eval", "=", "args", ".", "dump_eval", ",", "\n", "use_dump", "=", "args", ".", "dump", ",", "\n", "dump_prefix", "=", "args", ".", "dump_prefix", ",", "\n", "tmp_dir", "=", "val_tmp_dir", ",", "\n", "vertex_contact_thresh", "=", "args", ".", "vertex_contact_thresh", ",", "\n", ")", "\n", "\n", "# job after epoch", "\n", "dumping_epoch_after", "(", "\n", "rank", ",", "\n", "exp_id", ",", "\n", "0", ",", "\n", "train", "=", "False", ",", "\n", "use_eval", "=", "args", ".", "dump_eval", ",", "\n", "use_dump", "=", "args", ".", "dump", ",", "\n", "tmp_dir", "=", "val_tmp_dir", ",", "\n", "target_count", "=", "len", "(", "val_dataset", ")", ",", "\n", ")", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "logger", ".", "warn", "(", "\"\\nDONE!\"", ")", "\n", "\n", "", "dump_main_worker_cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.dump_picr_res.dumping_epoch_before": [[266, 281], ["str().replace", "os.path.join", "torch.distributed.barrier", "os.path.exists", "os.mkdir", "str", "hocontact.utils.logger.logger.warn", "shutil.rmtree"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn"], ["", "def", "dumping_epoch_before", "(", "rank", ",", "exp_id", ",", "epoch_idx", ",", "train", ")", ":", "\n", "    ", "train_word", "=", "\"train\"", "if", "train", "else", "\"val\"", "\n", "exp_id_word", "=", "str", "(", "exp_id", ")", ".", "replace", "(", "\"/\"", ",", "\"__\"", ")", "\n", "tmp_dir", "=", "os", ".", "path", ".", "join", "(", "\"/tmp\"", ",", "f\"{exp_id_word}__{train_word}__epoch_{epoch_idx}\"", ")", "\n", "# create a tempdirectory, only rank 0 does it", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "tmp_dir", ")", ":", "\n", "            ", "logger", ".", "warn", "(", "f\"tmp_dir exists, removed: {tmp_dir}\"", ",", "\"red\"", ")", "\n", "shutil", ".", "rmtree", "(", "tmp_dir", ")", "\n", "", "os", ".", "mkdir", "(", "tmp_dir", ",", "0o700", ")", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "# only after rank 0 make the path, other ranks can proceed", "\n", "", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "return", "tmp_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.dump_picr_res.dumping_epoch_pass": [[283, 348], ["model.eval", "hocontact.utils.logger.logger.warn", "hocontact.utils.logger.logger.warn", "hocontact.utils.eval.Evaluator", "hocontact.utils.dump.PicrDumper", "tqdm.tqdm", "torch.no_grad", "enumerate", "dumputils.PicrDumper.info", "hocontact.utils.logger.logger.warn", "model", "evalutils.Evaluator.feed_loss_meters", "evalutils.Evaluator.feed_eval_meters", "dumputils.PicrDumper.feed_and_dump", "prefix.capitalize", "os.path.join", "os.path.join", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.Evaluator.feed_loss_meters", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.Evaluator.feed_eval_meters", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.feed_and_dump"], ["", "def", "dumping_epoch_pass", "(", "\n", "rank", ",", "\n", "prefix", ",", "\n", "loader", ",", "\n", "model", ",", "\n", "epoch", "=", "0", ",", "\n", "use_eval", "=", "False", ",", "\n", "use_dump", "=", "False", ",", "\n", "dump_prefix", "=", "None", ",", "\n", "tmp_dir", "=", "None", ",", "\n", "vertex_contact_thresh", "=", "0.5", ",", "\n", ")", ":", "\n", "    ", "if", "rank", "==", "0", ":", "\n", "        ", "logger", ".", "warn", "(", "f\"{prefix.capitalize()} Epoch {epoch}\"", ",", "\"blue\"", ")", "\n", "logger", ".", "warn", "(", "f\"Showing Information about Node {rank}\"", ",", "\"blue\"", ")", "\n", "\n", "# model will always be in eval mode", "\n", "", "model", ".", "eval", "(", ")", "\n", "if", "use_eval", ":", "\n", "# create evaluator", "\n", "        ", "evaluator", "=", "evalutils", ".", "Evaluator", "(", ")", "\n", "", "if", "use_dump", ":", "\n", "# create dumper", "\n", "        ", "dumper", "=", "dumputils", ".", "PicrDumper", "(", "dump_prefix", ",", "\"assets/anchor\"", ")", "\n", "\n", "# ==================== Forward >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# loop over dataset", "\n", "", "if", "rank", "==", "0", ":", "\n", "        ", "loader", "=", "tqdm", "(", "loader", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "# model", "\n", "            ", "ls_results", "=", "model", "(", "batch", ",", "rank", "=", "rank", ")", "\n", "\n", "if", "use_eval", ":", "\n", "# feed evaluator with the output of the last stack", "\n", "                ", "evaluator", ".", "feed_loss_meters", "(", "batch", ",", "ls_results", "[", "-", "1", "]", ")", "\n", "evaluator", ".", "feed_eval_meters", "(", "batch", ",", "ls_results", "[", "-", "1", "]", ")", "\n", "\n", "# dump evaluator, if tmp_dir is not None", "\n", "if", "tmp_dir", "is", "not", "None", ":", "\n", "                    ", "tmp_evaluator_file", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "f\"evaluator_{rank}.pkl\"", ")", "\n", "with", "open", "(", "tmp_evaluator_file", ",", "\"wb\"", ")", "as", "fstream", ":", "\n", "                        ", "pickle", ".", "dump", "(", "evaluator", ",", "fstream", ")", "\n", "\n", "", "", "", "if", "use_dump", ":", "\n", "# feed dumper with the output of the last stack", "\n", "                ", "dumper", ".", "feed_and_dump", "(", "batch", ",", "ls_results", "[", "-", "1", "]", ",", "vertex_contact_thresh", ")", "\n", "\n", "# dump dumper, if tmp_dir is not None", "\n", "if", "tmp_dir", "is", "not", "None", ":", "\n", "                    ", "tmp_dumper_file", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "f\"dumper_{rank}.pkl\"", ")", "\n", "with", "open", "(", "tmp_dumper_file", ",", "\"wb\"", ")", "as", "fstream", ":", "\n", "                        ", "pickle", ".", "dump", "(", "dumper", ",", "fstream", ")", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ==================== Postprocess >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# if use_eval:", "\n", "#     eval_msg = summarize_evaluator_picr(evaluator)", "\n", "#     logger.warn(eval_msg, color=\"yellow\")", "\n", "\n", "", "", "", "", "", "if", "use_dump", ":", "\n", "        ", "dump_msg", "=", "dumper", ".", "info", "(", ")", "\n", "dump_msg", "=", "f\"Rank {rank}: {dump_msg}\"", "\n", "logger", ".", "warn", "(", "dump_msg", ",", "color", "=", "\"cyan\"", ")", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.scripts.dump_picr_res.dumping_epoch_after": [[351, 391], ["torch.distributed.barrier", "torch.distributed.barrier", "list", "shutil.rmtree", "os.listdir", "hocontact.utils.eval.disteval.merge_evaluator", "hocontact.utils.eval.summarize.summarize_evaluator_picr", "hocontact.utils.logger.logger.warn", "hocontact.utils.dump.distdump.summarize_dumper_list", "hocontact.utils.logger.logger.warn", "pkl_name.startswith", "os.path.join", "evaluator_list.append", "pkl_name.startswith", "os.path.join", "dumper_list.append", "open", "pickle.load", "open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.eval.disteval.merge_evaluator", "home.repos.pwc.inspect_result.lixiny_CPF.eval.summarize.summarize_evaluator_picr", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn", "home.repos.pwc.inspect_result.lixiny_CPF.dump.distdump.summarize_dumper_list", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn"], ["", "", "def", "dumping_epoch_after", "(", "\n", "rank", ",", "exp_id", ",", "epoch_idx", ",", "train", ",", "use_eval", "=", "False", ",", "use_dump", "=", "False", ",", "tmp_dir", "=", "None", ",", "target_count", "=", "None", "\n", ")", ":", "\n", "# wait for all ranks done there epoch", "\n", "    ", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "assert", "tmp_dir", "is", "not", "None", "\n", "tmp_file_list", "=", "list", "(", "os", ".", "listdir", "(", "tmp_dir", ")", ")", "\n", "\n", "if", "use_eval", ":", "\n", "            ", "evaluator_list", "=", "[", "]", "\n", "", "if", "use_dump", ":", "\n", "            ", "dumper_list", "=", "[", "]", "\n", "", "for", "pkl_name", "in", "tmp_file_list", ":", "\n", "            ", "if", "use_eval", "and", "pkl_name", ".", "startswith", "(", "\"evaluator\"", ")", ":", "\n", "                ", "pkl_path", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "pkl_name", ")", "\n", "with", "open", "(", "pkl_path", ",", "\"rb\"", ")", "as", "fstream", ":", "\n", "                    ", "tmp_evaluator", "=", "pickle", ".", "load", "(", "fstream", ")", "\n", "", "evaluator_list", ".", "append", "(", "tmp_evaluator", ")", "\n", "", "if", "use_dump", "and", "pkl_name", ".", "startswith", "(", "\"dumper\"", ")", ":", "\n", "                ", "pkl_path", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "pkl_name", ")", "\n", "with", "open", "(", "pkl_path", ",", "\"rb\"", ")", "as", "fstream", ":", "\n", "                    ", "tmp_dumper", "=", "pickle", ".", "load", "(", "fstream", ")", "\n", "", "dumper_list", ".", "append", "(", "tmp_dumper", ")", "\n", "\n", "", "", "if", "use_eval", ":", "\n", "            ", "evaluator", "=", "merge_evaluator", "(", "evaluator_list", ")", "\n", "save_dict", "=", "summarize_evaluator_picr", "(", "evaluator", ",", "exp_id", ",", "epoch_idx", ",", "train", "=", "train", ")", "\n", "logger", ".", "warn", "(", "f\"    {save_dict}\"", ",", "color", "=", "\"yellow\"", ")", "\n", "", "if", "use_dump", ":", "\n", "            ", "dump_combined_msg", ",", "dump_combined_msg_color", "=", "summarize_dumper_list", "(", "dumper_list", ",", "target_count", ")", "\n", "logger", ".", "warn", "(", "dump_combined_msg", ",", "color", "=", "dump_combined_msg_color", ")", "\n", "\n", "", "shutil", ".", "rmtree", "(", "tmp_dir", ")", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "\n", "# wait for rank 0 to complete", "\n", "", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.anatomyutils.AnatomyMetric.__init__": [[9, 11], ["manopth.axislayer.AxisLayer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "axislayer", "=", "AxisLayer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.anatomyutils.AnatomyMetric.joint_b_axis_loss": [[12, 30], ["torch.einsum", "torch.relu", "torch.relu", "torch.abs", "numpy.cos", "torch.abs", "numpy.cos", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow", "range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "joint_b_axis_loss", "(", "b_axis", ",", "axis", ")", ":", "\n", "        ", "b_soft_idx", "=", "[", "0", ",", "3", ",", "9", ",", "6", ",", "14", "]", "\n", "b_thumb_soft_idx", "=", "[", "12", ",", "13", "]", "\n", "\n", "b_axis_cos", "=", "torch", ".", "einsum", "(", "\"bij,bij->bi\"", ",", "b_axis", ",", "axis", ")", "# [B, 15]", "\n", "restrict_cos", "=", "b_axis_cos", "[", ":", ",", "[", "i", "for", "i", "in", "range", "(", "15", ")", "if", "i", "not", "in", "b_soft_idx", "and", "i", "not", "in", "b_thumb_soft_idx", "]", "]", "\n", "soft_loss", "=", "torch", ".", "relu", "(", "torch", ".", "abs", "(", "b_axis_cos", "[", ":", ",", "b_soft_idx", "]", ")", "-", "np", ".", "cos", "(", "np", ".", "pi", "/", "2", "-", "np", ".", "pi", "/", "36", ")", ")", "# [-5, 5]", "\n", "thumb_soft_loss", "=", "torch", ".", "relu", "(", "\n", "torch", ".", "abs", "(", "b_axis_cos", "[", ":", ",", "b_thumb_soft_idx", "]", ")", "-", "np", ".", "cos", "(", "np", ".", "pi", "/", "2", "-", "np", ".", "pi", "/", "3", ")", "\n", ")", "# [-60, 60]", "\n", "\n", "res", "=", "(", "\n", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "restrict_cos", ",", "2", ")", ")", "\n", "+", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "soft_loss", ",", "2", ")", ")", "\n", "+", "0.01", "*", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "thumb_soft_loss", ",", "2", ")", ")", "\n", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.anatomyutils.AnatomyMetric.joint_u_axis_loss": [[31, 49], ["torch.einsum", "torch.relu", "torch.relu", "torch.abs", "numpy.cos", "torch.abs", "numpy.cos", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow", "range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "joint_u_axis_loss", "(", "u_axis", ",", "axis", ")", ":", "\n", "        ", "u_soft_idx", "=", "[", "0", ",", "3", ",", "9", ",", "6", ",", "14", "]", "\n", "u_thumb_soft_idx", "=", "[", "12", ",", "13", "]", "\n", "\n", "u_axis_cos", "=", "torch", ".", "einsum", "(", "\"bij,bij->bi\"", ",", "u_axis", ",", "axis", ")", "\n", "restrict_cos", "=", "u_axis_cos", "[", ":", ",", "[", "i", "for", "i", "in", "range", "(", "15", ")", "if", "i", "not", "in", "u_soft_idx", "and", "i", "not", "in", "u_thumb_soft_idx", "]", "]", "\n", "soft_loss", "=", "torch", ".", "relu", "(", "torch", ".", "abs", "(", "u_axis_cos", "[", ":", ",", "u_soft_idx", "]", ")", "-", "np", ".", "cos", "(", "np", ".", "pi", "/", "2", "-", "np", ".", "pi", "/", "18", ")", ")", "# [-10, 10]", "\n", "thumb_soft_loss", "=", "torch", ".", "relu", "(", "\n", "torch", ".", "abs", "(", "u_axis_cos", "[", ":", ",", "u_thumb_soft_idx", "]", ")", "-", "np", ".", "cos", "(", "np", ".", "pi", "/", "2", "-", "np", ".", "pi", "/", "3", ")", "\n", ")", "# [-60, 60]", "\n", "\n", "res", "=", "(", "\n", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "restrict_cos", ",", "2", ")", ")", "\n", "+", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "soft_loss", ",", "2", ")", ")", "\n", "+", "0.01", "*", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "thumb_soft_loss", ",", "2", ")", ")", "\n", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.anatomyutils.AnatomyMetric.joint_l_limit_loss": [[50, 65], ["torch.einsum", "torch.relu", "torch.relu", "numpy.cos", "numpy.cos", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow", "range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "joint_l_limit_loss", "(", "l_axis", ",", "axis", ")", ":", "\n", "        ", "l_soft_idx", "=", "[", "0", ",", "3", ",", "9", ",", "6", ",", "14", "]", "\n", "l_thumb_soft_idx", "=", "[", "12", ",", "13", "]", "\n", "l_axis_cos", "=", "torch", ".", "einsum", "(", "\"bij,bij->bi\"", ",", "l_axis", ",", "axis", ")", "\n", "restrict_cos", "=", "l_axis_cos", "[", ":", ",", "[", "i", "for", "i", "in", "range", "(", "15", ")", "if", "i", "not", "in", "l_soft_idx", "and", "i", "not", "in", "l_thumb_soft_idx", "]", "]", "\n", "soft_loss", "=", "torch", ".", "relu", "(", "-", "l_axis_cos", "[", ":", ",", "l_soft_idx", "]", "+", "1", "-", "np", ".", "cos", "(", "np", ".", "pi", "/", "2", "-", "np", ".", "pi", "/", "9", ")", ")", "# [-20, 20]", "\n", "thumb_soft_loss", "=", "torch", ".", "relu", "(", "-", "l_axis_cos", "[", ":", ",", "l_thumb_soft_idx", "]", "+", "1", "-", "np", ".", "cos", "(", "np", ".", "pi", "/", "2", "-", "np", ".", "pi", "/", "3", ")", ")", "\n", "\n", "res", "=", "(", "\n", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "restrict_cos", "-", "1", ",", "2", ")", ")", "\n", "+", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "soft_loss", ",", "2", ")", ")", "\n", "+", "0.01", "*", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "thumb_soft_loss", ",", "2", ")", ")", "\n", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.anatomyutils.AnatomyMetric.rotation_angle_loss": [[66, 75], ["torch.zeros_like", "torch.relu", "torch.pow", "torch.mean", "torch.abs"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "rotation_angle_loss", "(", "angle", ",", "limit_angle", "=", "np", ".", "pi", "/", "2", ",", "eps", "=", "1e-10", ")", ":", "\n", "        ", "angle_new", "=", "torch", ".", "zeros_like", "(", "angle", ")", "# TENSOR[B, 15]", "\n", "nonzero_mask", "=", "torch", ".", "abs", "(", "angle", ")", ">", "eps", "# TENSOR[B, 15], bool", "\n", "angle_new", "[", "nonzero_mask", "]", "=", "angle", "[", "nonzero_mask", "]", "# if angle is too small, pick them out of backward graph", "\n", "angle_over_limit", "=", "torch", ".", "relu", "(", "angle_new", "-", "limit_angle", ")", "# < np.pi/2, 0; > np.pi/2, linear | Tensor[16, ]", "\n", "angle_over_limit_squared", "=", "torch", ".", "pow", "(", "angle_over_limit", ",", "2", ")", "# TENSOR[15, ]", "\n", "res", "=", "torch", ".", "mean", "(", "angle_over_limit_squared", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.anatomyutils.AnatomyMetric.compute_loss": [[76, 88], ["manopth.rodrigues_layer.batch_rodrigues", "hand_rotmatrix.view.view.view", "anatomyutils.AnatomyMetric.axislayer", "torch.norm", "anatomyutils.AnatomyMetric.rotation_angle_loss", "anatomyutils.AnatomyMetric.joint_b_axis_loss", "anatomyutils.AnatomyMetric.joint_u_axis_loss", "anatomyutils.AnatomyMetric.joint_l_limit_loss", "batch_full_pose_aa.view", "batch_full_pose_aa.view"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.rotation_angle_loss", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.joint_b_axis_loss", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.joint_u_axis_loss", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.joint_l_limit_loss"], ["", "def", "compute_loss", "(", "self", ",", "batch_full_pose_aa", ",", "batch_hand_joints", ")", ":", "\n", "        ", "batch_size", "=", "batch_full_pose_aa", ".", "shape", "[", "0", "]", "\n", "hand_rotmatrix", "=", "batch_rodrigues", "(", "batch_full_pose_aa", ".", "view", "(", "-", "1", ",", "3", ")", ")", "\n", "hand_rotmatrix", "=", "hand_rotmatrix", ".", "view", "(", "batch_size", ",", "-", "1", ",", "3", ",", "3", ")", "\n", "b_axis", ",", "u_axis", ",", "l_axis", "=", "self", ".", "axislayer", "(", "batch_hand_joints", ",", "hand_rotmatrix", ")", "# [B, 15, 3] each", "\n", "axis", "=", "batch_full_pose_aa", ".", "view", "(", "batch_size", ",", "-", "1", ",", "3", ")", "[", ":", ",", "1", ":", ",", ":", "]", "# ignore global rot", "\n", "angle", "=", "torch", ".", "norm", "(", "axis", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "False", ")", "\n", "angle_loss", "=", "AnatomyMetric", ".", "rotation_angle_loss", "(", "angle", ")", "\n", "joint_b_loss", "=", "AnatomyMetric", ".", "joint_b_axis_loss", "(", "b_axis", ",", "axis", ")", "\n", "joint_u_loss", "=", "AnatomyMetric", ".", "joint_u_axis_loss", "(", "u_axis", ",", "axis", ")", "\n", "joint_l_loss", "=", "AnatomyMetric", ".", "joint_l_limit_loss", "(", "l_axis", ",", "axis", ")", "\n", "return", "angle_loss", "+", "0.1", "*", "joint_b_loss", "+", "0.1", "*", "joint_u_loss", "+", "0.1", "*", "joint_l_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.batch_index_select": [[9, 16], ["list", "index.view().expand.view().expand", "torch.gather", "index.view().expand.view", "range", "len"], "function", ["None"], ["def", "batch_index_select", "(", "inp", ",", "dim", ",", "index", ")", ":", "\n", "    ", "views", "=", "[", "inp", ".", "shape", "[", "0", "]", "]", "+", "[", "1", "if", "i", "!=", "dim", "else", "-", "1", "for", "i", "in", "range", "(", "1", ",", "len", "(", "inp", ".", "shape", ")", ")", "]", "\n", "expanse", "=", "list", "(", "inp", ".", "shape", ")", "\n", "expanse", "[", "0", "]", "=", "-", "1", "\n", "expanse", "[", "dim", "]", "=", "-", "1", "\n", "index", "=", "index", ".", "view", "(", "views", ")", ".", "expand", "(", "expanse", ")", "\n", "return", "torch", ".", "gather", "(", "inp", ",", "dim", ",", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.thresh_ious": [[18, 29], ["torch.zeros_like"], "function", ["None"], ["", "def", "thresh_ious", "(", "gt_dists", ",", "pred_dists", ",", "thresh", ")", ":", "\n", "    ", "\"\"\"\n    Computes the contact intersection over union for a given threshold\n    \"\"\"", "\n", "gt_contacts", "=", "gt_dists", "<=", "thresh", "\n", "pred_contacts", "=", "pred_dists", "<=", "thresh", "\n", "inter", "=", "(", "gt_contacts", "*", "pred_contacts", ")", ".", "sum", "(", "1", ")", ".", "float", "(", ")", "\n", "union", "=", "union", "=", "(", "gt_contacts", "|", "pred_contacts", ")", ".", "sum", "(", "1", ")", ".", "float", "(", ")", "\n", "iou", "=", "torch", ".", "zeros_like", "(", "union", ")", "\n", "iou", "[", "union", "!=", "0", "]", "=", "inter", "[", "union", "!=", "0", "]", "/", "union", "[", "union", "!=", "0", "]", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.masked_mean_loss": [[31, 40], ["mask.float.float", "mask.float.sum", "torch.Tensor().to", "torch.Tensor"], "function", ["None"], ["", "def", "masked_mean_loss", "(", "dists", ",", "mask", ")", ":", "\n", "    ", "mask", "=", "mask", ".", "float", "(", ")", "\n", "valid_vals", "=", "mask", ".", "sum", "(", ")", "\n", "device", "=", "dists", ".", "device", "\n", "if", "valid_vals", ">", "0", ":", "\n", "        ", "loss", "=", "(", "mask", "*", "dists", ")", ".", "sum", "(", ")", "/", "valid_vals", "\n", "", "else", ":", "\n", "        ", "loss", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ".", "to", "(", "device", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.batch_pairwise_dist": [[42, 48], ["torch.bmm", "torch.sum().unsqueeze().expand_as", "torch.sum().unsqueeze().expand_as", "y.transpose", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "batch_pairwise_dist", "(", "x", ",", "y", ")", ":", "\n", "    ", "zz", "=", "torch", ".", "bmm", "(", "x", ",", "y", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "rx", "=", "torch", ".", "sum", "(", "x", "**", "2", ",", "dim", "=", "2", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "zz", ")", "\n", "ry", "=", "torch", ".", "sum", "(", "y", "**", "2", ",", "dim", "=", "2", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "zz", ")", "\n", "P", "=", "rx", "+", "ry", "-", "2", "*", "zz", "\n", "return", "P", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.thres_loss": [[50, 58], ["collisionutils.masked_mean_loss"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.masked_mean_loss"], ["", "def", "thres_loss", "(", "vals", ",", "thres", "=", "25", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        vals: positive values !\n    \"\"\"", "\n", "thres_mask", "=", "(", "vals", "<", "thres", ")", ".", "float", "(", ")", "\n", "loss", "=", "masked_mean_loss", "(", "vals", ",", "thres_mask", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.batch_mesh_contains_points": [[62, 158], ["torch.Tensor().to.view().expand", "torch.cross", "torch.bmm().view", "v0.repeat.repeat", "v0v1.repeat.repeat", "v0v2.repeat.repeat", "ray_origins.view().repeat().view", "pvec.repeat.repeat", "invdet.repeat.repeat", "torch.cross", "batch_direction.repeat.repeat", "parallel.repeat.repeat", "parallel.repeat.logical_not", "final_inter.view", "torch.Tensor().to", "abs", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.Tensor().to.view", "torch.bmm", "ray_origins.view().repeat", "final_inter.view.sum", "torch.Tensor", "v0v1.repeat.view", "pvec.repeat.view", "torch.bmm", "torch.bmm", "torch.bmm", "ray_origins.view", "tvec.view", "pvec.repeat.view", "batch_direction.repeat.view", "torch.cross.view", "v0v2.repeat.view", "torch.cross.view"], "function", ["None"], ["", "def", "batch_mesh_contains_points", "(", "\n", "ray_origins", ",", "obj_triangles", ",", "direction", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Times efficient but memory greedy !\n    Computes ALL ray/triangle intersections and then counts them to determine\n    if point inside mesh\n\n    Args:\n    ray_origins: (batch_size x point_nb x 3)\n    obj_triangles: (batch_size, triangle_nb, vertex_nb=3, vertex_coords=3)\n    tol_thresh: To determine if ray and triangle are //\n    Returns:\n    exterior: (batch_size, point_nb) 1 if the point is outside mesh, 0 else\n    \"\"\"", "\n", "device", "=", "ray_origins", ".", "device", "\n", "if", "direction", "is", "None", ":", "\n", "        ", "direction", "=", "torch", ".", "Tensor", "(", "[", "0.4395064455", ",", "0.617598629942", ",", "0.652231566745", "]", ")", ".", "to", "(", "device", ")", "\n", "", "tol_thresh", "=", "0.0000001", "\n", "# ray_origins.requires_grad = False", "\n", "# obj_triangles.requires_grad = False", "\n", "batch_size", "=", "obj_triangles", ".", "shape", "[", "0", "]", "\n", "triangle_nb", "=", "obj_triangles", ".", "shape", "[", "1", "]", "\n", "point_nb", "=", "ray_origins", ".", "shape", "[", "1", "]", "\n", "\n", "# Batch dim and triangle dim will flattened together", "\n", "batch_points_size", "=", "batch_size", "*", "triangle_nb", "\n", "# Direction is random but shared", "\n", "v0", ",", "v1", ",", "v2", "=", "obj_triangles", "[", ":", ",", ":", ",", "0", "]", ",", "obj_triangles", "[", ":", ",", ":", ",", "1", "]", ",", "obj_triangles", "[", ":", ",", ":", ",", "2", "]", "\n", "# Get edges", "\n", "v0v1", "=", "v1", "-", "v0", "\n", "v0v2", "=", "v2", "-", "v0", "\n", "\n", "# Expand needed vectors", "\n", "batch_direction", "=", "direction", ".", "view", "(", "1", ",", "1", ",", "3", ")", ".", "expand", "(", "batch_size", ",", "triangle_nb", ",", "3", ")", "\n", "\n", "# Compute ray/triangle intersections", "\n", "pvec", "=", "torch", ".", "cross", "(", "batch_direction", ",", "v0v2", ",", "dim", "=", "2", ")", "\n", "dets", "=", "torch", ".", "bmm", "(", "v0v1", ".", "view", "(", "batch_points_size", ",", "1", ",", "3", ")", ",", "pvec", ".", "view", "(", "batch_points_size", ",", "3", ",", "1", ")", ")", ".", "view", "(", "\n", "batch_size", ",", "triangle_nb", "\n", ")", "\n", "\n", "# Check if ray and triangle are parallel", "\n", "parallel", "=", "abs", "(", "dets", ")", "<", "tol_thresh", "\n", "invdet", "=", "1", "/", "(", "dets", "+", "0.1", "*", "tol_thresh", ")", "\n", "\n", "# Repeat mesh info as many times as there are rays", "\n", "triangle_nb", "=", "v0", ".", "shape", "[", "1", "]", "\n", "v0", "=", "v0", ".", "repeat", "(", "1", ",", "point_nb", ",", "1", ")", "\n", "v0v1", "=", "v0v1", ".", "repeat", "(", "1", ",", "point_nb", ",", "1", ")", "\n", "v0v2", "=", "v0v2", ".", "repeat", "(", "1", ",", "point_nb", ",", "1", ")", "\n", "hand_verts_repeated", "=", "(", "\n", "ray_origins", ".", "view", "(", "batch_size", ",", "point_nb", ",", "1", ",", "3", ")", "\n", ".", "repeat", "(", "1", ",", "1", ",", "triangle_nb", ",", "1", ")", "\n", ".", "view", "(", "ray_origins", ".", "shape", "[", "0", "]", ",", "triangle_nb", "*", "point_nb", ",", "3", ")", "\n", ")", "\n", "pvec", "=", "pvec", ".", "repeat", "(", "1", ",", "point_nb", ",", "1", ")", "\n", "invdet", "=", "invdet", ".", "repeat", "(", "1", ",", "point_nb", ")", "\n", "tvec", "=", "hand_verts_repeated", "-", "v0", "\n", "u_val", "=", "(", "\n", "torch", ".", "bmm", "(", "tvec", ".", "view", "(", "batch_size", "*", "tvec", ".", "shape", "[", "1", "]", ",", "1", ",", "3", ")", ",", "pvec", ".", "view", "(", "batch_size", "*", "tvec", ".", "shape", "[", "1", "]", ",", "3", ",", "1", ")", ",", ")", ".", "view", "(", "\n", "batch_size", ",", "tvec", ".", "shape", "[", "1", "]", "\n", ")", "\n", "*", "invdet", "\n", ")", "\n", "# Check ray intersects inside triangle", "\n", "u_correct", "=", "(", "u_val", ">", "0", ")", "*", "(", "u_val", "<", "1", ")", "\n", "qvec", "=", "torch", ".", "cross", "(", "tvec", ",", "v0v1", ",", "dim", "=", "2", ")", "\n", "\n", "batch_direction", "=", "batch_direction", ".", "repeat", "(", "1", ",", "point_nb", ",", "1", ")", "\n", "v_val", "=", "(", "\n", "torch", ".", "bmm", "(", "\n", "batch_direction", ".", "view", "(", "batch_size", "*", "qvec", ".", "shape", "[", "1", "]", ",", "1", ",", "3", ")", ",", "qvec", ".", "view", "(", "batch_size", "*", "qvec", ".", "shape", "[", "1", "]", ",", "3", ",", "1", ")", ",", "\n", ")", ".", "view", "(", "batch_size", ",", "qvec", ".", "shape", "[", "1", "]", ")", "\n", "*", "invdet", "\n", ")", "\n", "v_correct", "=", "(", "v_val", ">", "0", ")", "*", "(", "u_val", "+", "v_val", "<", "1", ")", "\n", "t", "=", "(", "\n", "torch", ".", "bmm", "(", "v0v2", ".", "view", "(", "batch_size", "*", "qvec", ".", "shape", "[", "1", "]", ",", "1", ",", "3", ")", ",", "qvec", ".", "view", "(", "batch_size", "*", "qvec", ".", "shape", "[", "1", "]", ",", "3", ",", "1", ")", ",", ")", ".", "view", "(", "\n", "batch_size", ",", "qvec", ".", "shape", "[", "1", "]", "\n", ")", "\n", "*", "invdet", "\n", ")", "\n", "# Check triangle is in front of ray_origin along ray direction", "\n", "t_pos", "=", "t", ">=", "tol_thresh", "\n", "parallel", "=", "parallel", ".", "repeat", "(", "1", ",", "point_nb", ")", "\n", "# # Check that all intersection conditions are met", "\n", "not_parallel", "=", "parallel", ".", "logical_not", "(", ")", "\n", "final_inter", "=", "v_correct", "*", "u_correct", "*", "not_parallel", "*", "t_pos", "\n", "# Reshape batch point/vertices intersection matrix", "\n", "# final_intersections[batch_idx, point_idx, triangle_idx] == 1 means ray", "\n", "# intersects triangle", "\n", "final_intersections", "=", "final_inter", ".", "view", "(", "batch_size", ",", "point_nb", ",", "triangle_nb", ")", "\n", "# Check if intersection number accross mesh is odd to determine if point is", "\n", "# outside of mesh", "\n", "exterior", "=", "final_intersections", ".", "sum", "(", "2", ")", "%", "2", "==", "0", "\n", "return", "exterior", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.penetration_loss_hand_in_obj": [[160, 197], ["hand_verts.unsqueeze.unsqueeze", "obj_verts.unsqueeze.unsqueeze", "collisionutils.batch_mesh_contains_points", "penetr_mask.sum", "hand_verts.unsqueeze.detach", "obj_triangles.detach", "selected_hand_verts.unsqueeze.unsqueeze", "collisionutils.batch_pairwise_dist", "torch.min", "torch.Tensor().to", "torch.max", "torch.mean", "torch.Tensor", "torch.sum", "KeyError"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.batch_mesh_contains_points", "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.batch_pairwise_dist"], ["", "def", "penetration_loss_hand_in_obj", "(", "hand_verts", ",", "obj_verts", ",", "obj_faces", ",", "mode", "=", "\"max\"", ")", ":", "\n", "    ", "device", "=", "hand_verts", ".", "device", "\n", "\n", "# unsqueeze fist dimension so that we can use hasson's utils directly", "\n", "hand_verts", "=", "hand_verts", ".", "unsqueeze", "(", "0", ")", "\n", "obj_verts", "=", "obj_verts", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# Get obj triangle positions", "\n", "obj_triangles", "=", "obj_verts", "[", ":", ",", "obj_faces", "]", "\n", "exterior", "=", "batch_mesh_contains_points", "(", "\n", "hand_verts", ".", "detach", "(", ")", ",", "obj_triangles", ".", "detach", "(", ")", "\n", ")", "# exterior computation transfers no gradients", "\n", "penetr_mask", "=", "~", "exterior", "\n", "\n", "# only compute exterior related stuff", "\n", "valid_vals", "=", "penetr_mask", ".", "sum", "(", ")", "\n", "if", "valid_vals", ">", "0", ":", "\n", "        ", "selected_hand_verts", "=", "hand_verts", "[", "penetr_mask", ",", ":", "]", "\n", "selected_hand_verts", "=", "selected_hand_verts", ".", "unsqueeze", "(", "0", ")", "\n", "dists", "=", "batch_pairwise_dist", "(", "selected_hand_verts", ",", "obj_verts", ")", "\n", "mins_sel_hand_to_obj", ",", "mins_sel_hand_to_obj_idx", "=", "torch", ".", "min", "(", "dists", ",", "2", ")", "\n", "\n", "# results_close = batch_index_select(obj_verts, 1, mins_sel_hand_to_obj_idx)", "\n", "# collision_vals = ((results_close - selected_hand_verts) ** 2).sum(2)", "\n", "collision_vals", "=", "mins_sel_hand_to_obj", "\n", "\n", "if", "mode", "==", "\"max\"", ":", "\n", "            ", "penetr_loss", "=", "torch", ".", "max", "(", "collision_vals", ")", "# max", "\n", "", "elif", "mode", "==", "\"mean\"", ":", "\n", "            ", "penetr_loss", "=", "torch", ".", "mean", "(", "collision_vals", ")", "\n", "", "elif", "mode", "==", "\"sum\"", ":", "\n", "            ", "penetr_loss", "=", "torch", ".", "sum", "(", "collision_vals", ")", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "\"unexpected penetration loss mode\"", ")", "\n", "", "", "else", ":", "\n", "        ", "penetr_loss", "=", "torch", ".", "Tensor", "(", "[", "0.0", "]", ")", ".", "to", "(", "device", ")", "\n", "", "return", "penetr_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.pairwise_dist": [[199, 205], ["torch.mm", "torch.sum().unsqueeze().expand_as", "torch.sum().unsqueeze().expand_as", "y.transpose", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "pairwise_dist", "(", "x", ",", "y", ")", ":", "\n", "    ", "zz", "=", "torch", ".", "mm", "(", "x", ",", "y", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "rx", "=", "torch", ".", "sum", "(", "x", "**", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "zz", ")", "\n", "ry", "=", "torch", ".", "sum", "(", "y", "**", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "zz", ")", "\n", "P", "=", "rx", "+", "ry", "-", "2", "*", "zz", "\n", "return", "P", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.intersection_volume": [[211, 219], ["trimesh.Trimesh", "trimesh.Trimesh", "trimesh.Trimesh.voxelized", "trimesh.Trimesh.contains", "hand_trimesh.contains.sum", "numpy.power", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "intersection_volume", "(", "hand_verts", ",", "hand_faces", ",", "obj_verts", ",", "obj_faces", ",", "pitch", "=", "0.01", ")", ":", "\n", "    ", "hand_trimesh", "=", "trimesh", ".", "Trimesh", "(", "vertices", "=", "np", ".", "asarray", "(", "hand_verts", ")", ",", "faces", "=", "np", ".", "asarray", "(", "hand_faces", ")", ")", "\n", "obj_trimesh", "=", "trimesh", ".", "Trimesh", "(", "vertices", "=", "np", ".", "asarray", "(", "obj_verts", ")", ",", "faces", "=", "np", ".", "asarray", "(", "obj_faces", ")", ")", "\n", "obj_voxel", "=", "obj_trimesh", ".", "voxelized", "(", "pitch", "=", "pitch", ")", "\n", "obj_voxel_points", "=", "obj_voxel", ".", "points", "\n", "inside", "=", "hand_trimesh", ".", "contains", "(", "obj_voxel_points", ")", "\n", "volume", "=", "inside", ".", "sum", "(", ")", "*", "np", ".", "power", "(", "pitch", ",", "3", ")", "\n", "return", "volume", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.collisionutils.solid_intersection_volume": [[221, 239], ["trimesh.Trimesh", "hocontact.utils.libmesh.inside_mesh.check_mesh_contains", "liegroups.SO3.exp().as_matrix", "hocontact.utils.libmesh.inside_mesh.check_mesh_contains.sum", "numpy.asarray", "numpy.asarray", "liegroups.SO3.exp"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.libmesh.inside_mesh.check_mesh_contains"], ["", "def", "solid_intersection_volume", "(", "hand_verts", ",", "hand_faces", ",", "obj_vox_points", ",", "obj_tsl", ",", "obj_rot", ",", "obj_vox_el_vol", ")", ":", "\n", "# first transf points to desired location", "\n", "# convert obj_rot to rotation matrix", "\n", "    ", "if", "obj_rot", ".", "shape", "==", "(", "3", ",", "3", ")", ":", "\n", "        ", "obj_rotmat", "=", "obj_rot", "\n", "", "else", ":", "\n", "        ", "obj_rotmat", "=", "SO3", ".", "exp", "(", "obj_rot", ")", ".", "as_matrix", "(", ")", "\n", "", "obj_vox_points_transf", "=", "(", "obj_rotmat", "@", "obj_vox_points", ".", "T", ")", ".", "T", "\n", "obj_vox_points_transf", "=", "obj_vox_points_transf", "+", "obj_tsl", "\n", "# create hand trimesh", "\n", "hand_trimesh", "=", "trimesh", ".", "Trimesh", "(", "vertices", "=", "np", ".", "asarray", "(", "hand_verts", ")", ",", "faces", "=", "np", ".", "asarray", "(", "hand_faces", ")", ")", "\n", "# _ = hand_trimesh.vertex_normals", "\n", "# _ = hand_trimesh.face_normals", "\n", "# hand_trimesh.fix_normals()", "\n", "# inside = hand_trimesh.contains(obj_vox_points_transf)", "\n", "inside", "=", "check_mesh_contains", "(", "hand_trimesh", ",", "obj_vox_points_transf", ")", "\n", "volume", "=", "inside", ".", "sum", "(", ")", "*", "obj_vox_el_vol", "\n", "return", "volume", ",", "obj_vox_points_transf", ",", "inside", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.handutils.batch_persp_proj": [[4, 9], ["torch.matmul", "intr.transpose"], "function", ["None"], ["def", "batch_persp_proj", "(", "joint", ",", "intr", ")", ":", "\n", "    ", "joint_homo", "=", "torch", ".", "matmul", "(", "joint", ",", "intr", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "joint2d", "=", "joint_homo", "/", "joint_homo", "[", ":", ",", ":", ",", "2", ":", "]", "\n", "joint2d", "=", "joint2d", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "return", "joint2d", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.handutils.batch_proj2d": [[11, 18], ["camintr.bmm().transpose", "camextr.bmm().transpose", "camintr.bmm", "camextr.bmm", "camextr.bmm().transpose.transpose", "camextr.bmm().transpose.transpose"], "function", ["None"], ["", "def", "batch_proj2d", "(", "verts", ",", "camintr", ",", "camextr", "=", "None", ")", ":", "\n", "# Project 3d vertices on image plane", "\n", "    ", "if", "camextr", "is", "not", "None", ":", "\n", "        ", "verts", "=", "camextr", ".", "bmm", "(", "verts", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "verts_hom2d", "=", "camintr", ".", "bmm", "(", "verts", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "proj_verts2d", "=", "verts_hom2d", "[", ":", ",", ":", ",", ":", "2", "]", "/", "verts_hom2d", "[", ":", ",", ":", ",", "2", ":", "]", "\n", "return", "proj_verts2d", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.handutils.flip_hand_side": [[20, 31], ["None"], "function", ["None"], ["", "def", "flip_hand_side", "(", "target_side", ",", "hand_side", ")", ":", "\n", "# Flip if needed", "\n", "    ", "if", "target_side", "==", "\"right\"", "and", "hand_side", "==", "\"left\"", ":", "\n", "        ", "flip", "=", "True", "\n", "hand_side", "=", "\"right\"", "\n", "", "elif", "target_side", "==", "\"left\"", "and", "hand_side", "==", "\"right\"", ":", "\n", "        ", "flip", "=", "True", "\n", "hand_side", "=", "\"left\"", "\n", "", "else", ":", "\n", "        ", "flip", "=", "False", "\n", "", "return", "hand_side", ",", "flip", "\n", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.meshutils.center_vert_bbox": [[5, 16], ["numpy.linalg.norm().max", "vertices.min", "vertices.max", "numpy.linalg.norm"], "function", ["None"], ["def", "center_vert_bbox", "(", "vertices", ",", "bbox_center", "=", "None", ",", "bbox_scale", "=", "None", ",", "scale", "=", "True", ")", ":", "\n", "    ", "if", "bbox_center", "is", "None", ":", "\n", "        ", "bbox_center", "=", "(", "vertices", ".", "min", "(", "0", ")", "+", "vertices", ".", "max", "(", "0", ")", ")", "/", "2", "\n", "", "vertices", "=", "vertices", "-", "bbox_center", "\n", "if", "scale", ":", "\n", "        ", "if", "bbox_scale", "is", "None", ":", "\n", "            ", "bbox_scale", "=", "np", ".", "linalg", ".", "norm", "(", "vertices", ",", "2", ",", "1", ")", ".", "max", "(", ")", "\n", "", "vertices", "=", "vertices", "/", "bbox_scale", "\n", "", "else", ":", "\n", "        ", "bbox_scale", "=", "1", "\n", "", "return", "vertices", ",", "bbox_center", ",", "bbox_scale", "", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.__init__": [[19, 22], ["time.strftime", "time.localtime", "time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "id", "=", "time", ".", "strftime", "(", "\"%Y%m%d%H%M%S\"", ",", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "self", ".", "initialize_done", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.initialize": [[23, 40], ["logging.getLogger", "logger.Logger.logger.setLevel", "os.makedirs", "os.path.join", "logging.FileHandler", "logging.FileHandler.setLevel", "logger.Logger.logger.addHandler"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "save_folder", "=", "None", ",", "log_name", "=", "\"traineval\"", ")", ":", "\n", "        ", "if", "self", ".", "initialize_done", ":", "\n", "            ", "return", "self", "\n", "", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "self", ".", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "if", "save_folder", "is", "None", ":", "\n", "            ", "save_folder", "=", "\"logs\"", "\n", "\n", "", "os", ".", "makedirs", "(", "save_folder", ",", "exist_ok", "=", "True", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "save_folder", ",", "f\"{log_name}.log\"", ")", "\n", "fhandler", "=", "logging", ".", "FileHandler", "(", "file_path", ",", "mode", "=", "\"w\"", ")", "\n", "fhandler", ".", "setLevel", "(", "self", ".", "logger", ".", "level", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "fhandler", ")", "\n", "\n", "self", ".", "initialize_done", "=", "True", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.info": [[41, 46], ["termcolor.cprint", "logger.Logger.logger.info"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info"], ["", "def", "info", "(", "self", ",", "msg", ",", "color", "=", "None", ")", ":", "\n", "        ", "cprint", "(", "msg", ",", "color", "=", "color", ")", "\n", "if", "self", ".", "initialize_done", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "msg", ")", "\n", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn": [[47, 52], ["termcolor.cprint", "logger.Logger.logger.warning"], "methods", ["None"], ["", "def", "warn", "(", "self", ",", "msg", ",", "color", "=", "\"yellow\"", ")", ":", "\n", "        ", "cprint", "(", "msg", ",", "color", "=", "color", ",", "attrs", "=", "[", "\"bold\"", "]", ")", "\n", "if", "self", ".", "initialize_done", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "msg", ")", "\n", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.error": [[53, 58], ["termcolor.cprint", "logger.Logger.logger.error"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.error"], ["", "def", "error", "(", "self", ",", "msg", ",", "color", "=", "\"red\"", ")", ":", "\n", "        ", "cprint", "(", "msg", ",", "color", "=", "color", ",", "on_color", "=", "\"on_white\"", ",", "attrs", "=", "[", "\"bold\"", ",", "\"reverse\"", "]", ")", "\n", "if", "self", ".", "initialize_done", ":", "\n", "            ", "self", ".", "logger", ".", "error", "(", "msg", ")", "\n", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.getId": [[59, 61], ["None"], "methods", ["None"], ["", "def", "getId", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.get_logger": [[11, 16], ["logger.Logger"], "function", ["None"], ["def", "get_logger", "(", ")", ":", "\n", "    ", "global", "logger_inst", "\n", "if", "not", "logger_inst", ":", "\n", "        ", "logger_inst", "=", "Logger", "(", ")", "\n", "", "return", "logger_inst", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.load_opts": [[20, 28], ["os.path.join", "os.path.join.endswith", "os.path.join.endswith", "os.path.join", "open", "pickle.load", "os.path.join.split"], "function", ["None"], ["def", "load_opts", "(", "resume_path", ")", ":", "\n", "# Identify if folder or checkpoint is provided", "\n", "    ", "if", "resume_path", ".", "endswith", "(", "\".pth\"", ")", "or", "resume_path", ".", "endswith", "(", "\".pth.tar\"", ")", ":", "\n", "        ", "resume_path", "=", "os", ".", "path", ".", "join", "(", "*", "resume_path", ".", "split", "(", "\"/\"", ")", "[", ":", "-", "1", "]", ")", "\n", "", "opt_path", "=", "os", ".", "path", ".", "join", "(", "resume_path", ",", "\"opt.pkl\"", ")", "\n", "with", "open", "(", "opt_path", ",", "\"rb\"", ")", "as", "p_f", ":", "\n", "        ", "opts", "=", "pickle", ".", "load", "(", "p_f", ")", "\n", "", "return", "opts", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.print_query": [[30, 55], ["sorted", "ioutils.print_query.fn"], "function", ["None"], ["", "def", "print_query", "(", "querylist", ",", "col", "=", "3", ",", "desp", "=", "\"Queries\"", ",", "align", "=", "\"c\"", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "querylist", ",", "list", ")", ":", "\n", "        ", "querylist", "=", "list", "(", "querylist", ")", "\n", "", "if", "len", "(", "querylist", ")", "==", "0", ":", "\n", "        ", "return", "\n", "\n", "", "querystr_list", "=", "[", "str", "(", "q", ")", "for", "q", "in", "querylist", "]", "\n", "querystr_list", "=", "sorted", "(", "querystr_list", ")", "\n", "\n", "def", "fn", "(", "templist", ",", "col", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "templist", ")", ",", "col", ")", ":", "\n", "            ", "yield", "templist", "[", "i", ":", "i", "+", "col", "]", "\n", "\n", "", "", "querystr_list", "=", "fn", "(", "querystr_list", ",", "col", ")", "# split", "\n", "\n", "import", "prettytable", "as", "pt", "\n", "\n", "logger", ".", "warn", "(", "\"{}  {}  {}\"", ".", "format", "(", "\"=\"", "*", "30", ",", "desp", ",", "\">\"", "*", "30", ")", ",", "\"magenta\"", ")", "\n", "tb", "=", "pt", ".", "PrettyTable", "(", "padding_width", "=", "5", ",", "header", "=", "False", ")", "\n", "for", "i", ",", "qstr", "in", "enumerate", "(", "querystr_list", ")", ":", "# formating print", "\n", "        ", "qstr", "=", "qstr", "+", "[", "\"-\"", "]", "*", "(", "col", "-", "len", "(", "qstr", ")", ")", "\n", "tb", ".", "add_row", "(", "qstr", ")", "\n", "", "logger", ".", "info", "(", "str", "(", "tb", ")", ")", "\n", "logger", ".", "warn", "(", "\"{}  {}  {}\"", ".", "format", "(", "\"<\"", "*", "30", ",", "desp", ",", "\"<\"", "*", "30", ")", ",", "\"magenta\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.print_args": [[57, 63], ["vars", "hocontact.utils.logger.logger.warn", "sorted", "hocontact.utils.logger.logger.warn", "vars.items", "hocontact.utils.logger.logger.info"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info"], ["", "def", "print_args", "(", "args", ")", ":", "\n", "    ", "opts", "=", "vars", "(", "args", ")", "\n", "logger", ".", "warn", "(", "\"{}  Options  {}\"", ".", "format", "(", "\"=\"", "*", "30", ",", "\">\"", "*", "30", ")", ",", "\"yellow\"", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "opts", ".", "items", "(", ")", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"{:<30}  :  {}\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "", "logger", ".", "warn", "(", "\"{}  Options  {}\"", ".", "format", "(", "\"<\"", "*", "30", ",", "\"<\"", "*", "30", ")", ",", "\"yellow\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.print_results": [[65, 70], ["hocontact.utils.logger.logger.warn", "sorted", "hocontact.utils.logger.logger.warn", "result_dict.items", "hocontact.utils.logger.logger.info"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info"], ["", "def", "print_results", "(", "result_dict", ",", "title", "=", "\"Results\"", ")", ":", "\n", "    ", "logger", ".", "warn", "(", "\"{}  {}  {}\"", ".", "format", "(", "\"=\"", "*", "30", ",", "title", ",", "\">\"", "*", "30", ")", ",", "\"blue\"", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "result_dict", ".", "items", "(", ")", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"{:<30}  :  {}\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "", "logger", ".", "warn", "(", "\"{}  {}  {}\"", ".", "format", "(", "\"<\"", "*", "30", ",", "title", ",", "\"<\"", "*", "30", ")", ",", "\"blue\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.save_args": [[72, 93], ["vars", "os.path.join", "os.path.join", "hocontact.utils.logger.logger.info", "os.path.exists", "os.makedirs", "open", "opt_file.write", "sorted", "opt_file.write", "opt_file.write", "open", "pickle.dump", "vars.items", "opt_file.write", "str", "str", "datetime.datetime.now", "str", "str"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info"], ["", "def", "save_args", "(", "args", ",", "save_folder", ",", "opt_prefix", "=", "\"opt\"", ")", ":", "\n", "    ", "opts", "=", "vars", "(", "args", ")", "\n", "# Create checkpoint folder", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Save options", "\n", "", "opt_filename", "=", "\"{}.txt\"", ".", "format", "(", "opt_prefix", ")", "\n", "opt_path", "=", "os", ".", "path", ".", "join", "(", "save_folder", ",", "opt_filename", ")", "\n", "with", "open", "(", "opt_path", ",", "\"a\"", ")", "as", "opt_file", ":", "\n", "        ", "opt_file", ".", "write", "(", "\"====== Options ======\\n\"", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "opts", ".", "items", "(", ")", ")", ":", "\n", "            ", "opt_file", ".", "write", "(", "\"{option}: {value}\\n\"", ".", "format", "(", "option", "=", "str", "(", "k", ")", ",", "value", "=", "str", "(", "v", ")", ")", ")", "\n", "", "opt_file", ".", "write", "(", "\"=====================\\n\"", ")", "\n", "opt_file", ".", "write", "(", "\"launched {} at {}\\n\"", ".", "format", "(", "str", "(", "sys", ".", "argv", "[", "0", "]", ")", ",", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ")", ")", "\n", "", "opt_picklename", "=", "\"{}.pkl\"", ".", "format", "(", "opt_prefix", ")", "\n", "opt_picklepath", "=", "os", ".", "path", ".", "join", "(", "save_folder", ",", "opt_picklename", ")", "\n", "with", "open", "(", "opt_picklepath", ",", "\"wb\"", ")", "as", "opt_file", ":", "\n", "        ", "pickle", ".", "dump", "(", "opts", ",", "opt_file", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Saved options to {}\"", ".", "format", "(", "opt_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.param_count": [[95, 97], ["sum", "p.numel", "net.parameters"], "function", ["None"], ["", "def", "param_count", "(", "net", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "net", ".", "parameters", "(", ")", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.param_size": [[99, 102], ["sum", "p.numel", "net.parameters"], "function", ["None"], ["", "def", "param_size", "(", "net", ")", ":", "\n", "# ! treat all parameters to be float", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "net", ".", "parameters", "(", ")", ")", "*", "4", "/", "(", "1024", "*", "1024", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.reload_optimizer": [[104, 116], ["os.path.isfile", "print", "torch.load", "optimizer.load_state_dict", "set", "set", "len", "warnings.warn", "traceback.print_exc", "warnings.warn", "optimizer.state_dict().keys", "checkpoint[].keys", "optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn"], ["", "def", "reload_optimizer", "(", "optimizer", ",", "resume_path", ",", "map_location", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "resume_path", ")", ":", "\n", "        ", "print", "(", "\"=> loading optimizer checkpoint '{}'\"", ".", "format", "(", "resume_path", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "resume_path", ",", "map_location", "=", "map_location", ")", "\n", "", "try", ":", "\n", "        ", "missing_states", "=", "set", "(", "optimizer", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "-", "set", "(", "checkpoint", "[", "\"optimizer\"", "]", ".", "keys", "(", ")", ")", "\n", "if", "len", "(", "missing_states", ")", ">", "0", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"Missing keys in optimizer ! : {}\"", ".", "format", "(", "missing_states", ")", ")", "\n", "", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "traceback", ".", "print_exc", "(", ")", "\n", "warnings", ".", "warn", "(", "\"Couldn' load optimizer from {}\"", ".", "format", "(", "resume_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.remapping_state_dict_from_hasson_to_honet": [[118, 146], ["state_dict.keys", "state_dict.update", "state_dict.pop", "need_to_be_remove.append", "need_to_be_remove.append", "key.replace", "need_to_be_remove.append", "key.replace", "need_to_be_remove.append", "key.replace"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update"], ["", "", "def", "remapping_state_dict_from_hasson_to_honet", "(", "state_dict", ")", ":", "\n", "# !   remappint STATE_DICT from pretrained model of HASSON[CVPR2020] to our HONet", "\n", "    ", "need_to_be_remove", "=", "[", "]", "\n", "need_to_be_insert", "=", "{", "}", "\n", "\n", "for", "key", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "        ", "if", "\"mano_layer_left\"", "in", "key", ":", "\n", "            ", "need_to_be_remove", ".", "append", "(", "key", ")", "\n", "\n", "", "elif", "\"mano_layer_right\"", "in", "key", ":", "\n", "            ", "need_to_be_remove", ".", "append", "(", "key", ")", "\n", "new_key", "=", "key", ".", "replace", "(", "\"mano_layer_right\"", ",", "\"mano_layer\"", ")", "\n", "need_to_be_insert", "[", "new_key", "]", "=", "state_dict", "[", "key", "]", "\n", "\n", "", "elif", "\"scaletrans_branch_obj\"", "in", "key", ":", "\n", "            ", "need_to_be_remove", ".", "append", "(", "key", ")", "\n", "new_key", "=", "key", ".", "replace", "(", "\"scaletrans_branch_obj\"", ",", "\"obj_transhead\"", ")", "\n", "need_to_be_insert", "[", "new_key", "]", "=", "state_dict", "[", "key", "]", "\n", "\n", "", "elif", "\"scaletrans_branch.\"", "in", "key", ":", "\n", "            ", "need_to_be_remove", ".", "append", "(", "key", ")", "\n", "new_key", "=", "key", ".", "replace", "(", "\"scaletrans_branch\"", ",", "\"mano_transhead\"", ")", "\n", "need_to_be_insert", "[", "new_key", "]", "=", "state_dict", "[", "key", "]", "\n", "\n", "", "", "state_dict", ".", "update", "(", "need_to_be_insert", ")", "\n", "for", "key", "in", "need_to_be_remove", ":", "\n", "        ", "state_dict", ".", "pop", "(", "key", ")", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.reload_checkpoint": [[148, 226], ["os.path.isfile", "print", "torch.load", "ioutils.remapping_state_dict_from_hasson_to_honet", "model.load_state_dict", "ValueError", "warnings.warn", "print", "print", "print", "remapping_state_dict_from_hasson_to_honet.keys", "ioutils.remapping_state_dict_from_hasson_to_honet", "remapping_state_dict_from_hasson_to_honet.items", "set", "set", "len", "warnings.warn", "warnings.warn", "torch.load", "remapping_state_dict_from_hasson_to_honet.pop", "model.state_dict().keys", "remapping_state_dict_from_hasson_to_honet.keys", "optimizer.load_state_dict", "list", "list", "remapping_state_dict_from_hasson_to_honet.items", "key.startswith", "old_honet_list.append", "set", "set", "len", "warnings.warn", "traceback.print_exc", "warnings.warn", "checkpoint[].keys", "checkpoint[].items", "checkpoint[].keys", "checkpoint[].items", "key.split", "model.state_dict", "optimizer.state_dict().keys", "checkpoint[].keys", "key.split", "k.replace", "optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.remapping_state_dict_from_hasson_to_honet", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.remapping_state_dict_from_hasson_to_honet", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn"], ["", "def", "reload_checkpoint", "(", "\n", "model", ",", "\n", "resume_path", ",", "\n", "optimizer", "=", "None", ",", "\n", "startswith", "=", "None", ",", "\n", "strict", "=", "True", ",", "\n", "as_parallel", "=", "False", ",", "\n", "map_location", "=", "None", ",", "\n", "reload_honet_checkpoints", "=", "None", ",", "\n", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "resume_path", ")", ":", "\n", "        ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "resume_path", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "resume_path", ",", "map_location", "=", "map_location", ")", "\n", "if", "as_parallel", ":", "\n", "            ", "if", "\"module\"", "in", "list", "(", "checkpoint", "[", "\"state_dict\"", "]", ".", "keys", "(", ")", ")", "[", "0", "]", ":", "\n", "                ", "state_dict", "=", "checkpoint", "[", "\"state_dict\"", "]", "\n", "", "else", ":", "\n", "                ", "state_dict", "=", "{", "\"module.{}\"", ".", "format", "(", "key", ")", ":", "item", "for", "key", ",", "item", "in", "checkpoint", "[", "\"state_dict\"", "]", ".", "items", "(", ")", "}", "\n", "", "", "else", ":", "\n", "            ", "if", "\"module\"", "in", "list", "(", "checkpoint", "[", "\"state_dict\"", "]", ".", "keys", "(", ")", ")", "[", "0", "]", ":", "\n", "                ", "state_dict", "=", "{", "\".\"", ".", "join", "(", "key", ".", "split", "(", "\".\"", ")", "[", "1", ":", "]", ")", ":", "item", "for", "key", ",", "item", "in", "checkpoint", "[", "\"state_dict\"", "]", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "                ", "state_dict", "=", "checkpoint", "[", "\"state_dict\"", "]", "\n", "# filter out tensors not startswith given keyword and strip keyword out, if startswith is not None:", "\n", "", "", "if", "startswith", "is", "not", "None", ":", "\n", "            ", "state_dict", "=", "{", "\n", "\".\"", ".", "join", "(", "key", ".", "split", "(", "\".\"", ")", "[", "1", ":", "]", ")", ":", "item", "for", "key", ",", "item", "in", "state_dict", ".", "items", "(", ")", "if", "key", ".", "startswith", "(", "startswith", ")", "\n", "}", "\n", "print", "(", "\n", "\"=> loaded checkpoint '{}' (keyword {}, epoch {})\"", ".", "format", "(", "resume_path", ",", "startswith", ",", "checkpoint", "[", "\"epoch\"", "]", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", ".", "format", "(", "resume_path", ",", "checkpoint", "[", "\"epoch\"", "]", ")", ")", "\n", "\n", "", "if", "reload_honet_checkpoints", "is", "not", "None", ":", "\n", "            ", "assert", "as_parallel", ",", "\"reload honet_checkpoints only used in parallel PiCR module\"", "\n", "print", "(", "f\"reload honet checkpoints from {reload_honet_checkpoints}\"", ")", "\n", "honet_state_dict", "=", "torch", ".", "load", "(", "reload_honet_checkpoints", ",", "map_location", "=", "map_location", ")", "[", "\"state_dict\"", "]", "\n", "old_honet_list", "=", "[", "]", "\n", "for", "k", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "                ", "if", "\"module.ho_net\"", "in", "old_honet_list", ":", "\n", "                    ", "old_honet_list", ".", "append", "(", "k", ")", "\n", "", "", "for", "k", "in", "old_honet_list", ":", "\n", "                ", "state_dict", ".", "pop", "(", "k", ")", "\n", "# * ==> remappint STATE_DICT from pretrained model of HASSON[CVPR2020] to our HONet", "\n", "", "honet_state_dict", "=", "remapping_state_dict_from_hasson_to_honet", "(", "honet_state_dict", ")", "\n", "for", "k", ",", "v", "in", "honet_state_dict", ".", "items", "(", ")", ":", "\n", "                ", "state_dict", "[", "f\"module.ho_net.{k.replace('module.', '')}\"", "]", "=", "v", "\n", "\n", "# * ==> remappint STATE_DICT from pretrained model of HASSON[CVPR2020] to our HONet", "\n", "", "", "state_dict", "=", "remapping_state_dict_from_hasson_to_honet", "(", "state_dict", ")", "\n", "\n", "missing_states", "=", "set", "(", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "-", "set", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "if", "len", "(", "missing_states", ")", ">", "0", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"Missing keys ! : {}\"", ".", "format", "(", "missing_states", ")", ")", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "strict", ")", "\n", "if", "optimizer", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "missing_states", "=", "set", "(", "optimizer", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "-", "set", "(", "checkpoint", "[", "\"optimizer\"", "]", ".", "keys", "(", ")", ")", "\n", "if", "len", "(", "missing_states", ")", ">", "0", ":", "\n", "                    ", "warnings", ".", "warn", "(", "\"Missing keys in optimizer ! : {}\"", ".", "format", "(", "missing_states", ")", ")", "\n", "", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "traceback", ".", "print_exc", "(", ")", "\n", "warnings", ".", "warn", "(", "\"Couldn' load optimizer from {}\"", ".", "format", "(", "resume_path", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "resume_path", ")", ")", "\n", "", "if", "\"best_auc\"", "in", "checkpoint", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"Using deprecated best_acc instead of best_auc\"", ")", "\n", "best", "=", "checkpoint", "[", "\"best_auc\"", "]", "\n", "", "elif", "\"best_acc\"", "in", "checkpoint", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"Using deprecated best_acc instead of best_auc\"", ")", "\n", "best", "=", "checkpoint", "[", "\"best_acc\"", "]", "\n", "", "elif", "\"best_score\"", "in", "checkpoint", ":", "\n", "        ", "best", "=", "checkpoint", "[", "\"best_score\"", "]", "\n", "", "else", ":", "\n", "        ", "best", "=", "None", "\n", "", "return", "checkpoint", "[", "\"epoch\"", "]", ",", "best", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.save_checkpoint": [[228, 244], ["os.path.join", "torch.save", "shutil.copyfile", "os.path.join", "shutil.copyfile", "shutil.copyfile", "os.path.join", "os.path.join", "round"], "function", ["None"], ["", "def", "save_checkpoint", "(", "\n", "state", ",", "is_best", ",", "checkpoint", "=", "\"checkpoint\"", ",", "filename", "=", "\"checkpoint.pth\"", ",", "snapshot", "=", "None", ",", "\n", ")", ":", "\n", "    ", "filepath", "=", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "\n", "if", "snapshot", "and", "state", "[", "\"epoch\"", "]", "%", "snapshot", "==", "0", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "\n", "filepath", ",", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "\"checkpoint_{}.pth.tar\"", ".", "format", "(", "state", "[", "\"epoch\"", "]", ")", ")", ",", "\n", ")", "\n", "\n", "", "if", "is_best", ":", "\n", "        ", "if", "\"score\"", "in", "state", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "filepath", ",", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "f\"model_best_{round(state['score'], 3)}.pth.tar\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "filepath", ",", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "\"model_best.pth.tar\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.clean_state_dict": [[246, 269], ["OrderedDict", "any", "state_dict.items", "key.startswith"], "function", ["None"], ["", "", "", "def", "clean_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "\"\"\"save a cleaned version of model without dict and DataParallel\n\n    Arguments:\n        state_dict {collections.OrderedDict} -- [description]\n\n    Returns:\n        clean_model {collections.OrderedDict} -- [description]\n    \"\"\"", "\n", "\n", "clean_model", "=", "state_dict", "\n", "# create new OrderedDict that does not contain `module.`", "\n", "from", "collections", "import", "OrderedDict", "\n", "\n", "clean_model", "=", "OrderedDict", "(", ")", "\n", "if", "any", "(", "key", ".", "startswith", "(", "\"module\"", ")", "for", "key", "in", "state_dict", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", "[", "7", ":", "]", "# remove `module.`", "\n", "clean_model", "[", "name", "]", "=", "v", "\n", "", "", "else", ":", "\n", "        ", "return", "state_dict", "\n", "\n", "", "return", "clean_model", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.save_optim_state": [[271, 273], ["torch.save", "optimizer.state_dict"], "function", ["None"], ["", "def", "save_optim_state", "(", "optimizer", ",", "filename", ")", ":", "\n", "    ", "torch", ".", "save", "(", "{", "\"optim\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "}", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.load_optim_state": [[275, 281], ["torch.load", "optimizer.load_state_dict", "os.path.exists", "print"], "function", ["None"], ["", "def", "load_optim_state", "(", "optimizer", ",", "filename", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "        ", "print", "(", "\"warning, no ckpt file for optimizer\"", ")", "\n", "return", "\n", "", "ckpt", "=", "torch", ".", "load", "(", "filename", ")", "\n", "optimizer", ".", "load_state_dict", "(", "ckpt", "[", "\"optim\"", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils.get_color_params": [[7, 28], ["random.uniform", "random.uniform", "random.uniform", "random.uniform", "max", "max", "max"], "function", ["None"], ["def", "get_color_params", "(", "brightness", "=", "0", ",", "contrast", "=", "0", ",", "saturation", "=", "0", ",", "hue", "=", "0", ")", ":", "\n", "    ", "if", "brightness", ">", "0", ":", "\n", "        ", "bright_factor", "=", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "brightness", ")", ",", "1", "+", "brightness", ")", "\n", "", "else", ":", "\n", "        ", "bright_factor", "=", "None", "\n", "\n", "", "if", "contrast", ">", "0", ":", "\n", "        ", "contrast_factor", "=", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "contrast", ")", ",", "1", "+", "contrast", ")", "\n", "", "else", ":", "\n", "        ", "contrast_factor", "=", "None", "\n", "\n", "", "if", "saturation", ">", "0", ":", "\n", "        ", "sat_factor", "=", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "saturation", ")", ",", "1", "+", "saturation", ")", "\n", "", "else", ":", "\n", "        ", "sat_factor", "=", "None", "\n", "\n", "", "if", "hue", ">", "0", ":", "\n", "        ", "hue_factor", "=", "random", ".", "uniform", "(", "-", "hue", ",", "hue", ")", "\n", "", "else", ":", "\n", "        ", "hue_factor", "=", "None", "\n", "", "return", "bright_factor", ",", "contrast_factor", ",", "sat_factor", ",", "hue_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils.apply_jitter": [[30, 53], ["random.shuffle", "img_transforms.append", "img_transforms.append", "img_transforms.append", "img_transforms.append", "func", "augutils._adjust_brightness", "augutils._adjust_saturation", "augutils._adjust_hue", "augutils._adjust_contrast"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils._adjust_brightness", "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils._adjust_saturation", "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils._adjust_hue", "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils._adjust_contrast"], ["", "def", "apply_jitter", "(", "img", ",", "brightness", "=", "0", ",", "contrast", "=", "0", ",", "saturation", "=", "0", ",", "hue", "=", "0", ")", ":", "\n", "# Create img transform function sequence", "\n", "    ", "img_transforms", "=", "[", "]", "\n", "if", "brightness", "is", "not", "None", ":", "\n", "        ", "img_transforms", ".", "append", "(", "\n", "lambda", "img", ":", "_adjust_brightness", "(", "img", ",", "brightness", ")", "\n", ")", "\n", "", "if", "saturation", "is", "not", "None", ":", "\n", "        ", "img_transforms", ".", "append", "(", "\n", "lambda", "img", ":", "_adjust_saturation", "(", "img", ",", "saturation", ")", "\n", ")", "\n", "", "if", "hue", "is", "not", "None", ":", "\n", "        ", "img_transforms", ".", "append", "(", "lambda", "img", ":", "_adjust_hue", "(", "img", ",", "hue", ")", ")", "\n", "", "if", "contrast", "is", "not", "None", ":", "\n", "        ", "img_transforms", ".", "append", "(", "\n", "lambda", "img", ":", "_adjust_contrast", "(", "img", ",", "contrast", ")", "\n", ")", "\n", "", "random", ".", "shuffle", "(", "img_transforms", ")", "\n", "\n", "jittered_img", "=", "img", "\n", "for", "func", "in", "img_transforms", ":", "\n", "        ", "jittered_img", "=", "func", "(", "jittered_img", ")", "\n", "", "return", "jittered_img", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils.color_jitter": [[55, 70], ["augutils.get_color_params", "augutils.apply_jitter"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils.get_color_params", "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils.apply_jitter"], ["", "def", "color_jitter", "(", "img", ",", "brightness", "=", "0", ",", "contrast", "=", "0", ",", "saturation", "=", "0", ",", "hue", "=", "0", ")", ":", "\n", "    ", "brightness", ",", "contrast", ",", "saturation", ",", "hue", "=", "get_color_params", "(", "\n", "brightness", "=", "brightness", ",", "\n", "contrast", "=", "contrast", ",", "\n", "saturation", "=", "saturation", ",", "\n", "hue", "=", "hue", ",", "\n", ")", "\n", "jittered_img", "=", "apply_jitter", "(", "\n", "img", ",", "\n", "brightness", "=", "brightness", ",", "\n", "contrast", "=", "contrast", ",", "\n", "saturation", "=", "saturation", ",", "\n", "hue", "=", "hue", ",", "\n", ")", "\n", "return", "jittered_img", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils.transform_coords": [[72, 82], ["numpy.concatenate", "numpy.linalg.inv", "np.linalg.inv.dot().transpose", "numpy.ones", "np.linalg.inv.dot", "np.concatenate.transpose", "numpy.array"], "function", ["None"], ["", "def", "transform_coords", "(", "pts", ",", "affine_trans", ",", "invert", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        pts(np.ndarray): (point_nb, 2)\n    \"\"\"", "\n", "if", "invert", ":", "\n", "        ", "affine_trans", "=", "np", ".", "linalg", ".", "inv", "(", "affine_trans", ")", "\n", "", "hom2d", "=", "np", ".", "concatenate", "(", "[", "pts", ",", "np", ".", "ones", "(", "[", "np", ".", "array", "(", "pts", ")", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ",", "1", ")", "\n", "transformed_rows", "=", "affine_trans", ".", "dot", "(", "hom2d", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "[", ":", ",", ":", "2", "]", "\n", "return", "transformed_rows", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils.transform_img": [[84, 98], ["numpy.linalg.inv", "img.transform.transform", "tuple"], "function", ["None"], ["", "def", "transform_img", "(", "img", ",", "affine_trans", ",", "res", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n    center (tuple): crop center coordinates\n    scale (int): size in pixels of the final crop\n    res (tuple): final image size\n    \"\"\"", "\n", "trans", "=", "np", ".", "linalg", ".", "inv", "(", "affine_trans", ")", "\n", "\n", "img", "=", "img", ".", "transform", "(", "\n", "tuple", "(", "res", ")", ",", "Image", ".", "AFFINE", ",", "(", "trans", "[", "0", ",", "0", "]", ",", "trans", "[", "0", ",", "1", "]", ",", "trans", "[", "0", ",", "2", "]", ",", "\n", "trans", "[", "1", ",", "0", "]", ",", "trans", "[", "1", ",", "1", "]", ",", "trans", "[", "1", ",", "2", "]", ")", "\n", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils.get_affine_transform": [[100, 129], ["numpy.zeros", "numpy.eye", "np.eye.copy", "t_mat.copy.dot().dot().dot", "augutils.get_affine_trans_no_rot", "get_affine_trans_no_rot.dot", "augutils.get_affine_trans_no_rot", "numpy.sin", "numpy.cos", "np.zeros.dot", "post_rot_trans.dot.astype", "get_affine_trans_no_rot.astype", "t_mat.copy.dot().dot", "center.tolist", "center.tolist", "t_mat.copy.dot"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils.get_affine_trans_no_rot", "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils.get_affine_trans_no_rot"], ["", "def", "get_affine_transform", "(", "center", ",", "scale", ",", "optical_center", ",", "out_res", ",", "rot", "=", "0", ")", ":", "\n", "    ", "rot_mat", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "sn", ",", "cs", "=", "np", ".", "sin", "(", "rot", ")", ",", "np", ".", "cos", "(", "rot", ")", "\n", "rot_mat", "[", "0", ",", ":", "2", "]", "=", "[", "cs", ",", "-", "sn", "]", "\n", "rot_mat", "[", "1", ",", ":", "2", "]", "=", "[", "sn", ",", "cs", "]", "\n", "rot_mat", "[", "2", ",", "2", "]", "=", "1", "\n", "# Rotate center to obtain coordinate of center in rotated image", "\n", "origin_rot_center", "=", "rot_mat", ".", "dot", "(", "center", ".", "tolist", "(", ")", "+", "[", "1", "]", ")", "[", ":", "2", "]", "\n", "# Get center for transform with verts rotated around optical axis", "\n", "# (through pixel center, smthg like 128, 128 in pixels and 0,0 in 3d world)", "\n", "# For this, rotate the center but around center of image (vs 0,0 in pixel space)", "\n", "t_mat", "=", "np", ".", "eye", "(", "3", ")", "\n", "t_mat", "[", "0", ",", "2", "]", "=", "-", "optical_center", "[", "0", "]", "\n", "t_mat", "[", "1", ",", "2", "]", "=", "-", "optical_center", "[", "1", "]", "\n", "t_inv", "=", "t_mat", ".", "copy", "(", ")", "\n", "t_inv", "[", ":", "2", ",", "2", "]", "*=", "-", "1", "\n", "transformed_center", "=", "(", "\n", "t_inv", ".", "dot", "(", "rot_mat", ")", ".", "dot", "(", "t_mat", ")", ".", "dot", "(", "center", ".", "tolist", "(", ")", "+", "[", "1", "]", ")", "\n", ")", "\n", "post_rot_trans", "=", "get_affine_trans_no_rot", "(", "origin_rot_center", ",", "scale", ",", "out_res", ")", "\n", "total_trans", "=", "post_rot_trans", ".", "dot", "(", "rot_mat", ")", "\n", "# check_t = get_affine_transform_bak(center, scale, res, rot)", "\n", "# print(total_trans, check_t)", "\n", "affinetrans_post_rot", "=", "get_affine_trans_no_rot", "(", "\n", "transformed_center", "[", ":", "2", "]", ",", "scale", ",", "out_res", "\n", ")", "\n", "return", "(", "\n", "total_trans", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "affinetrans_post_rot", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils.get_affine_trans_no_rot": [[132, 141], ["numpy.zeros", "float", "float", "float", "float", "float", "float", "numpy.np.float32"], "function", ["None"], ["", "def", "get_affine_trans_no_rot", "(", "center", ",", "scale", ",", "res", ")", ":", "\n", "    ", "affinet", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "scale_ratio", "=", "float", "(", "res", "[", "0", "]", ")", "/", "float", "(", "res", "[", "1", "]", ")", "\n", "affinet", "[", "0", ",", "0", "]", "=", "float", "(", "res", "[", "0", "]", ")", "/", "scale", "\n", "affinet", "[", "1", ",", "1", "]", "=", "float", "(", "res", "[", "1", "]", ")", "/", "scale", "*", "scale_ratio", "\n", "affinet", "[", "0", ",", "2", "]", "=", "res", "[", "0", "]", "*", "(", "-", "float", "(", "center", "[", "0", "]", ")", "/", "scale", "+", "0.5", ")", "\n", "affinet", "[", "1", ",", "2", "]", "=", "res", "[", "1", "]", "*", "(", "-", "float", "(", "center", "[", "1", "]", ")", "/", "scale", "*", "scale_ratio", "+", "0.5", ")", "\n", "affinet", "[", "2", ",", "2", "]", "=", "1", "\n", "return", "affinet", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils.get_affine_transform_bak": [[143, 163], ["numpy.zeros", "float", "float", "numpy.zeros", "numpy.eye", "np.eye.copy", "numpy.dot().astype", "numpy.sin", "numpy.cos", "numpy.dot", "float", "float", "numpy.dot", "numpy.dot"], "function", ["None"], ["", "def", "get_affine_transform_bak", "(", "center", ",", "scale", ",", "res", ",", "rot", ")", ":", "\n", "    ", "t", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "t", "[", "0", ",", "0", "]", "=", "float", "(", "res", "[", "1", "]", ")", "/", "scale", "\n", "t", "[", "1", ",", "1", "]", "=", "float", "(", "res", "[", "0", "]", ")", "/", "scale", "\n", "t", "[", "0", ",", "2", "]", "=", "res", "[", "1", "]", "*", "(", "-", "float", "(", "center", "[", "0", "]", ")", "/", "scale", "+", "0.5", ")", "\n", "t", "[", "1", ",", "2", "]", "=", "res", "[", "0", "]", "*", "(", "-", "float", "(", "center", "[", "1", "]", ")", "/", "scale", "+", "0.5", ")", "\n", "t", "[", "2", ",", "2", "]", "=", "1", "\n", "if", "rot", "!=", "0", ":", "\n", "        ", "rot_mat", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "sn", ",", "cs", "=", "np", ".", "sin", "(", "rot", ")", ",", "np", ".", "cos", "(", "rot", ")", "\n", "rot_mat", "[", "0", ",", ":", "2", "]", "=", "[", "cs", ",", "-", "sn", "]", "\n", "rot_mat", "[", "1", ",", ":", "2", "]", "=", "[", "sn", ",", "cs", "]", "\n", "rot_mat", "[", "2", ",", "2", "]", "=", "1", "\n", "t_mat", "=", "np", ".", "eye", "(", "3", ")", "\n", "t_mat", "[", "0", ",", "2", "]", "=", "-", "res", "[", "1", "]", "/", "2", "\n", "t_mat", "[", "1", ",", "2", "]", "=", "-", "res", "[", "0", "]", "/", "2", "\n", "t_inv", "=", "t_mat", ".", "copy", "(", ")", "\n", "t_inv", "[", ":", "2", ",", "2", "]", "*=", "-", "1", "\n", "t", "=", "np", ".", "dot", "(", "t_inv", ",", "np", ".", "dot", "(", "rot_mat", ",", "np", ".", "dot", "(", "t_mat", ",", "t", ")", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "return", "t", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils._is_pil_image": [[165, 167], ["isinstance"], "function", ["None"], ["", "def", "_is_pil_image", "(", "img", ")", ":", "\n", "    ", "return", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils._adjust_brightness": [[169, 187], ["PIL.ImageEnhance.Brightness", "ImageEnhance.Brightness.enhance", "augutils._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils._is_pil_image"], ["", "def", "_adjust_brightness", "(", "img", ",", "brightness_factor", ")", ":", "\n", "    ", "\"\"\"Adjust brightness of an Image.\n\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        brightness_factor (float):  How much to adjust the brightness. Can be\n            any non negative number. 0 gives a black image, 1 gives the\n            original image while 2 increases the brightness by a factor of 2.\n\n    Returns:\n        PIL Image: Brightness adjusted image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"img should be PIL Image. Got {}\"", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "enhancer", "=", "ImageEnhance", ".", "Brightness", "(", "img", ")", "\n", "img", "=", "enhancer", ".", "enhance", "(", "brightness_factor", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils._adjust_contrast": [[189, 207], ["PIL.ImageEnhance.Contrast", "ImageEnhance.Contrast.enhance", "augutils._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils._is_pil_image"], ["", "def", "_adjust_contrast", "(", "img", ",", "contrast_factor", ")", ":", "\n", "    ", "\"\"\"Adjust contrast of an Image.\n\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        contrast_factor (float): How much to adjust the contrast. Can be any\n            non negative number. 0 gives a solid gray image, 1 gives the\n            original image while 2 increases the contrast by a factor of 2.\n\n    Returns:\n        PIL Image: Contrast adjusted image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"img should be PIL Image. Got {}\"", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "enhancer", "=", "ImageEnhance", ".", "Contrast", "(", "img", ")", "\n", "img", "=", "enhancer", ".", "enhance", "(", "contrast_factor", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils._adjust_saturation": [[209, 227], ["PIL.ImageEnhance.Color", "ImageEnhance.Color.enhance", "augutils._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils._is_pil_image"], ["", "def", "_adjust_saturation", "(", "img", ",", "saturation_factor", ")", ":", "\n", "    ", "\"\"\"Adjust color saturation of an image.\n\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        saturation_factor (float):  How much to adjust the saturation. 0 will\n            give a black and white image, 1 will give the original image while\n            2 will enhance the saturation by a factor of 2.\n\n    Returns:\n        PIL Image: Saturation adjusted image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"img should be PIL Image. Got {}\"", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "enhancer", "=", "ImageEnhance", ".", "Color", "(", "img", ")", "\n", "img", "=", "enhancer", ".", "enhance", "(", "saturation_factor", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils._adjust_hue": [[229, 276], ["Image.merge().convert.convert().split", "numpy.array", "PIL.Image.fromarray", "PIL.Image.merge().convert", "ValueError", "augutils._is_pil_image", "TypeError", "numpy.errstate", "numpy.uint8", "Image.merge().convert.convert", "PIL.Image.merge", "type"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils._is_pil_image"], ["", "def", "_adjust_hue", "(", "img", ",", "hue_factor", ")", ":", "\n", "    ", "\"\"\"Adjust hue of an image.\n\n    The image hue is adjusted by converting the image to HSV and\n    cyclically shifting the intensities in the hue channel (H).\n    The image is then converted back to original image mode.\n\n    `hue_factor` is the amount of shift in H channel and must be in the\n    interval `[-0.5, 0.5]`.\n\n    See `Hue`_ for more details.\n\n    .. _Hue: https://en.wikipedia.org/wiki/Hue\n\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        hue_factor (float):  How much to shift the hue channel. Should be in\n            [-0.5, 0.5]. 0.5 and -0.5 give complete reversal of hue channel in\n            HSV space in positive and negative direction respectively.\n            0 means no shift. Therefore, both -0.5 and 0.5 will give an image\n            with complementary colors while 0 gives the original image.\n\n    Returns:\n        PIL Image: Hue adjusted image.\n    \"\"\"", "\n", "if", "not", "(", "-", "0.5", "<=", "hue_factor", "<=", "0.5", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"hue_factor {} is not in [-0.5, 0.5].\"", ".", "format", "(", "hue_factor", ")", "\n", ")", "\n", "\n", "", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"img should be PIL Image. Got {}\"", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "input_mode", "=", "img", ".", "mode", "\n", "if", "input_mode", "in", "{", "\"L\"", ",", "\"1\"", ",", "\"I\"", ",", "\"F\"", "}", ":", "\n", "        ", "return", "img", "\n", "\n", "", "h", ",", "s", ",", "v", "=", "img", ".", "convert", "(", "\"HSV\"", ")", ".", "split", "(", ")", "\n", "\n", "np_h", "=", "np", ".", "array", "(", "h", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# uint8 addition take cares of rotation across boundaries", "\n", "with", "np", ".", "errstate", "(", "over", "=", "\"ignore\"", ")", ":", "\n", "        ", "np_h", "+=", "np", ".", "uint8", "(", "hue_factor", "*", "255", ")", "\n", "", "h", "=", "Image", ".", "fromarray", "(", "np_h", ",", "\"L\"", ")", "\n", "\n", "img", "=", "Image", ".", "merge", "(", "\"HSV\"", ",", "(", "h", ",", "s", ",", "v", ")", ")", ".", "convert", "(", "input_mode", ")", "\n", "return", "img", "\n", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.contactutils.get_padding_attr": [[6, 12], ["manopth.anchorutils.get_rev_anchor_mapping", "len", "len", "max", "anchor_mapping.keys", "manopth.anchorutils.get_rev_anchor_mapping.keys", "len", "manopth.anchorutils.get_rev_anchor_mapping.values"], "function", ["None"], ["def", "get_padding_attr", "(", "anchor_mapping", ")", ":", "\n", "    ", "rev_anchor_mapping", "=", "get_rev_anchor_mapping", "(", "anchor_mapping", ")", "\n", "anchor_id_background", "=", "len", "(", "anchor_mapping", ".", "keys", "(", ")", ")", "\n", "region_id_background", "=", "len", "(", "rev_anchor_mapping", ".", "keys", "(", ")", ")", "\n", "anchor_padding_len", "=", "max", "(", "[", "len", "(", "v", ")", "for", "v", "in", "rev_anchor_mapping", ".", "values", "(", ")", "]", ")", "\n", "return", "anchor_id_background", ",", "region_id_background", ",", "anchor_padding_len", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.contactutils.process_contact_info": [[14, 132], ["contactutils.get_padding_attr", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "numpy.zeros", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "numpy.array", "numpy.array", "len", "numpy.zeros", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "np.array.append"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.contactutils.get_padding_attr"], ["", "def", "process_contact_info", "(", "\n", "contact_info", ",", "anchor_mapping", ",", "pad_vertex", "=", "False", ",", "pad_anchor", "=", "False", ",", "dist_th", "=", "1000.0", ",", "elasti_th", "=", "0.00", ",", "\n", ")", ":", "\n", "    ", "anchor_id_background", ",", "region_id_background", ",", "anchor_padding_len", "=", "get_padding_attr", "(", "anchor_mapping", ")", "\n", "\n", "vertex_contact", "=", "[", "item", "[", "\"contact\"", "]", "for", "item", "in", "contact_info", "]", "\n", "vertex_contact", "=", "np", ".", "array", "(", "vertex_contact", ",", "dtype", "=", "np", ".", "int", ")", "\n", "if", "pad_vertex", "and", "pad_anchor", ":", "\n", "# the return result will be the same length of vertex_contact", "\n", "        ", "hand_region", "=", "[", "item", "[", "\"region\"", "]", "if", "item", "[", "\"contact\"", "]", "==", "1", "else", "region_id_background", "for", "item", "in", "contact_info", "]", "\n", "hand_region", "=", "np", ".", "array", "(", "hand_region", ",", "dtype", "=", "np", ".", "int", ")", "\n", "# all the anchors will be padded to anchor_padding_len", "\n", "anchor_id", "=", "[", "]", "\n", "anchor_dist", "=", "[", "]", "\n", "anchor_elasti", "=", "[", "]", "\n", "anchor_padding_mask", "=", "[", "]", "\n", "for", "item", "in", "contact_info", ":", "\n", "            ", "if", "item", "[", "\"contact\"", "]", "==", "1", ":", "\n", "                ", "item_anchor_id", "=", "item", "[", "\"anchor_id\"", "]", "\n", "item_anchor_dist", "=", "item", "[", "\"anchor_dist\"", "]", "\n", "item_anchor_elasti", "=", "item", "[", "\"anchor_elasti\"", "]", "\n", "item_n_anchor", "=", "len", "(", "item_anchor_id", ")", "\n", "item_padding_len", "=", "anchor_padding_len", "-", "item_n_anchor", "\n", "\n", "item_anchor_padding_mask", "=", "np", ".", "zeros", "(", "(", "anchor_padding_len", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "item_anchor_padding_mask", "[", ":", "item_n_anchor", "]", "=", "1", "\n", "item_anchor_id", "=", "item_anchor_id", "+", "(", "[", "anchor_id_background", "]", "*", "item_padding_len", ")", "\n", "item_anchor_dist", "=", "item_anchor_dist", "+", "(", "[", "dist_th", "]", "*", "item_padding_len", ")", "\n", "item_anchor_elasti", "=", "item_anchor_elasti", "+", "(", "[", "elasti_th", "]", "*", "item_padding_len", ")", "\n", "", "else", ":", "\n", "                ", "item_anchor_padding_mask", "=", "[", "0", "]", "*", "anchor_padding_len", "\n", "item_anchor_id", "=", "[", "anchor_id_background", "]", "*", "anchor_padding_len", "\n", "item_anchor_dist", "=", "[", "dist_th", "]", "*", "anchor_padding_len", "\n", "item_anchor_elasti", "=", "[", "elasti_th", "]", "*", "anchor_padding_len", "\n", "", "anchor_id", ".", "append", "(", "item_anchor_id", ")", "\n", "anchor_dist", ".", "append", "(", "item_anchor_dist", ")", "\n", "anchor_elasti", ".", "append", "(", "item_anchor_elasti", ")", "\n", "anchor_padding_mask", ".", "append", "(", "item_anchor_padding_mask", ")", "\n", "", "anchor_id", "=", "np", ".", "array", "(", "anchor_id", ",", "dtype", "=", "np", ".", "int", ")", "\n", "anchor_dist", "=", "np", ".", "array", "(", "anchor_dist", ")", "\n", "anchor_elasti", "=", "np", ".", "array", "(", "anchor_elasti", ")", "\n", "anchor_padding_mask", "=", "np", ".", "array", "(", "anchor_padding_mask", ",", "dtype", "=", "np", ".", "int", ")", "\n", "return", "vertex_contact", ",", "hand_region", ",", "anchor_id", ",", "anchor_dist", ",", "anchor_elasti", ",", "anchor_padding_mask", "\n", "", "elif", "not", "pad_vertex", "and", "pad_anchor", ":", "\n", "# the return result will be the same length of ones in vertex_contact", "\n", "        ", "hand_region", "=", "[", "item", "[", "\"region\"", "]", "for", "item", "in", "contact_info", "if", "item", "[", "\"contact\"", "]", "==", "1", "]", "\n", "hand_region", "=", "np", ".", "array", "(", "hand_region", ",", "dtype", "=", "np", ".", "int", ")", "\n", "# all the anchors will be padded to anchor_padding_len", "\n", "anchor_id", "=", "[", "]", "\n", "anchor_dist", "=", "[", "]", "\n", "anchor_elasti", "=", "[", "]", "\n", "anchor_padding_mask", "=", "[", "]", "\n", "for", "item", "in", "contact_info", ":", "\n", "            ", "if", "item", "[", "\"contact\"", "]", "==", "1", ":", "\n", "                ", "item_anchor_id", "=", "item", "[", "\"anchor_id\"", "]", "\n", "item_anchor_dist", "=", "item", "[", "\"anchor_dist\"", "]", "\n", "item_anchor_elasti", "=", "item", "[", "\"anchor_elasti\"", "]", "\n", "item_n_anchor", "=", "len", "(", "item_anchor_id", ")", "\n", "item_padding_len", "=", "anchor_padding_len", "-", "item_n_anchor", "\n", "\n", "item_anchor_padding_mask", "=", "np", ".", "zeros", "(", "(", "anchor_padding_len", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "item_anchor_padding_mask", "[", ":", "item_n_anchor", "]", "=", "1", "\n", "item_anchor_id", "=", "item_anchor_id", "+", "(", "[", "anchor_id_background", "]", "*", "item_padding_len", ")", "\n", "item_anchor_dist", "=", "item_anchor_dist", "+", "(", "[", "dist_th", "]", "*", "item_padding_len", ")", "\n", "item_anchor_elasti", "=", "item_anchor_elasti", "+", "(", "[", "elasti_th", "]", "*", "item_padding_len", ")", "\n", "", "else", ":", "\n", "                ", "continue", "\n", "", "anchor_id", ".", "append", "(", "item_anchor_id", ")", "\n", "anchor_dist", ".", "append", "(", "item_anchor_dist", ")", "\n", "anchor_elasti", ".", "append", "(", "item_anchor_elasti", ")", "\n", "anchor_padding_mask", ".", "append", "(", "item_anchor_padding_mask", ")", "\n", "", "anchor_id", "=", "np", ".", "array", "(", "anchor_id", ",", "dtype", "=", "np", ".", "int", ")", "\n", "anchor_dist", "=", "np", ".", "array", "(", "anchor_dist", ")", "\n", "anchor_elasti", "=", "np", ".", "array", "(", "anchor_elasti", ")", "\n", "anchor_padding_mask", "=", "np", ".", "array", "(", "anchor_padding_mask", ",", "dtype", "=", "np", ".", "int", ")", "\n", "return", "vertex_contact", ",", "hand_region", ",", "anchor_id", ",", "anchor_dist", ",", "anchor_elasti", ",", "anchor_padding_mask", "\n", "", "elif", "pad_vertex", "and", "not", "pad_anchor", ":", "\n", "# the return result will be the same length of vertex_contact", "\n", "        ", "hand_region", "=", "[", "item", "[", "\"region\"", "]", "if", "item", "[", "\"contact\"", "]", "==", "1", "else", "region_id_background", "for", "item", "in", "contact_info", "]", "\n", "hand_region", "=", "np", ".", "array", "(", "hand_region", ",", "dtype", "=", "np", ".", "int", ")", "\n", "# no anchors will be padded", "\n", "# will return list", "\n", "anchor_id", "=", "[", "]", "\n", "anchor_dist", "=", "[", "]", "\n", "anchor_elasti", "=", "[", "]", "\n", "for", "item", "in", "contact_info", ":", "\n", "            ", "if", "item", "[", "\"contact\"", "]", "==", "1", ":", "\n", "                ", "item_anchor_id", "=", "item", "[", "\"anchor_id\"", "]", "\n", "item_anchor_dist", "=", "item", "[", "\"anchor_dist\"", "]", "\n", "item_anchor_elasti", "=", "item", "[", "\"anchor_elasti\"", "]", "\n", "", "else", ":", "\n", "                ", "item_anchor_id", "=", "[", "]", "\n", "item_anchor_dist", "=", "[", "]", "\n", "item_anchor_elasti", "=", "[", "]", "\n", "", "anchor_id", ".", "append", "(", "item_anchor_id", ")", "\n", "anchor_dist", ".", "append", "(", "item_anchor_dist", ")", "\n", "anchor_elasti", ".", "append", "(", "item_anchor_elasti", ")", "\n", "", "return", "vertex_contact", ",", "hand_region", ",", "anchor_id", ",", "anchor_dist", ",", "anchor_elasti", ",", "None", "\n", "", "else", ":", "\n", "# the return result will be the same length of ones in vertex_contact", "\n", "        ", "hand_region", "=", "[", "item", "[", "\"region\"", "]", "for", "item", "in", "contact_info", "if", "item", "[", "\"contact\"", "]", "==", "1", "]", "\n", "hand_region", "=", "np", ".", "array", "(", "hand_region", ",", "dtype", "=", "np", ".", "int", ")", "\n", "# no anchors will be padded", "\n", "# will return list", "\n", "anchor_id", "=", "[", "]", "\n", "anchor_dist", "=", "[", "]", "\n", "anchor_elasti", "=", "[", "]", "\n", "for", "item", "in", "contact_info", ":", "\n", "            ", "if", "item", "[", "\"contact\"", "]", "==", "1", ":", "\n", "                ", "item_anchor_id", "=", "item", "[", "\"anchor_id\"", "]", "\n", "item_anchor_dist", "=", "item", "[", "\"anchor_dist\"", "]", "\n", "item_anchor_elasti", "=", "item", "[", "\"anchor_elasti\"", "]", "\n", "", "else", ":", "\n", "                ", "continue", "\n", "", "anchor_id", ".", "append", "(", "item_anchor_id", ")", "\n", "anchor_dist", ".", "append", "(", "item_anchor_dist", ")", "\n", "anchor_elasti", ".", "append", "(", "item_anchor_elasti", ")", "\n", "", "return", "vertex_contact", ",", "hand_region", ",", "anchor_id", ",", "anchor_dist", ",", "anchor_elasti", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.contactutils.dumped_process_contact_info": [[135, 235], ["contactutils.get_padding_attr", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "np.array.append", "np.array.append", "np.array.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "numpy.zeros", "np.array.append", "np.array.append", "np.array.append", "numpy.array", "numpy.array", "len", "numpy.zeros", "np.array.append", "np.array.append", "np.array.append", "np.array.append"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.contactutils.get_padding_attr"], ["", "", "def", "dumped_process_contact_info", "(", "\n", "contact_info", ",", "anchor_mapping", ",", "pad_vertex", "=", "False", ",", "pad_anchor", "=", "False", ",", "elasti_th", "=", "0.00", ",", "\n", ")", ":", "\n", "    ", "anchor_id_background", ",", "region_id_background", ",", "anchor_padding_len", "=", "get_padding_attr", "(", "anchor_mapping", ")", "\n", "\n", "vertex_contact", "=", "[", "item", "[", "\"contact\"", "]", "for", "item", "in", "contact_info", "]", "\n", "vertex_contact", "=", "np", ".", "array", "(", "vertex_contact", ",", "dtype", "=", "np", ".", "int", ")", "\n", "if", "pad_vertex", "and", "pad_anchor", ":", "\n", "# the return result will be the same length of vertex_contact", "\n", "        ", "hand_region", "=", "[", "item", "[", "\"region\"", "]", "if", "item", "[", "\"contact\"", "]", "==", "1", "else", "region_id_background", "for", "item", "in", "contact_info", "]", "\n", "hand_region", "=", "np", ".", "array", "(", "hand_region", ",", "dtype", "=", "np", ".", "int", ")", "\n", "# all the anchors will be padded to anchor_padding_len", "\n", "anchor_id", "=", "[", "]", "\n", "anchor_elasti", "=", "[", "]", "\n", "anchor_padding_mask", "=", "[", "]", "\n", "for", "item", "in", "contact_info", ":", "\n", "            ", "if", "item", "[", "\"contact\"", "]", "==", "1", ":", "\n", "                ", "item_anchor_id", "=", "item", "[", "\"anchor_id\"", "]", "\n", "item_anchor_elasti", "=", "item", "[", "\"anchor_elasti\"", "]", "\n", "item_n_anchor", "=", "len", "(", "item_anchor_id", ")", "\n", "item_padding_len", "=", "anchor_padding_len", "-", "item_n_anchor", "\n", "\n", "item_anchor_padding_mask", "=", "np", ".", "zeros", "(", "(", "anchor_padding_len", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "item_anchor_padding_mask", "[", ":", "item_n_anchor", "]", "=", "1", "\n", "item_anchor_id", "=", "item_anchor_id", "+", "(", "[", "anchor_id_background", "]", "*", "item_padding_len", ")", "\n", "item_anchor_elasti", "=", "item_anchor_elasti", "+", "(", "[", "elasti_th", "]", "*", "item_padding_len", ")", "\n", "", "else", ":", "\n", "                ", "item_anchor_padding_mask", "=", "[", "0", "]", "*", "anchor_padding_len", "\n", "item_anchor_id", "=", "[", "anchor_id_background", "]", "*", "anchor_padding_len", "\n", "item_anchor_elasti", "=", "[", "elasti_th", "]", "*", "anchor_padding_len", "\n", "", "anchor_id", ".", "append", "(", "item_anchor_id", ")", "\n", "anchor_elasti", ".", "append", "(", "item_anchor_elasti", ")", "\n", "anchor_padding_mask", ".", "append", "(", "item_anchor_padding_mask", ")", "\n", "", "anchor_id", "=", "np", ".", "array", "(", "anchor_id", ",", "dtype", "=", "np", ".", "int", ")", "\n", "anchor_elasti", "=", "np", ".", "array", "(", "anchor_elasti", ")", "\n", "anchor_padding_mask", "=", "np", ".", "array", "(", "anchor_padding_mask", ",", "dtype", "=", "np", ".", "int", ")", "\n", "return", "vertex_contact", ",", "hand_region", ",", "anchor_id", ",", "anchor_elasti", ",", "anchor_padding_mask", "\n", "", "elif", "not", "pad_vertex", "and", "pad_anchor", ":", "\n", "# the return result will be the same length of ones in vertex_contact", "\n", "        ", "hand_region", "=", "[", "item", "[", "\"region\"", "]", "for", "item", "in", "contact_info", "if", "item", "[", "\"contact\"", "]", "==", "1", "]", "\n", "hand_region", "=", "np", ".", "array", "(", "hand_region", ",", "dtype", "=", "np", ".", "int", ")", "\n", "# all the anchors will be padded to anchor_padding_len", "\n", "anchor_id", "=", "[", "]", "\n", "anchor_elasti", "=", "[", "]", "\n", "anchor_padding_mask", "=", "[", "]", "\n", "for", "item", "in", "contact_info", ":", "\n", "            ", "if", "item", "[", "\"contact\"", "]", "==", "1", ":", "\n", "                ", "item_anchor_id", "=", "item", "[", "\"anchor_id\"", "]", "\n", "item_anchor_elasti", "=", "item", "[", "\"anchor_elasti\"", "]", "\n", "item_n_anchor", "=", "len", "(", "item_anchor_id", ")", "\n", "item_padding_len", "=", "anchor_padding_len", "-", "item_n_anchor", "\n", "\n", "item_anchor_padding_mask", "=", "np", ".", "zeros", "(", "(", "anchor_padding_len", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "item_anchor_padding_mask", "[", ":", "item_n_anchor", "]", "=", "1", "\n", "item_anchor_id", "=", "item_anchor_id", "+", "(", "[", "anchor_id_background", "]", "*", "item_padding_len", ")", "\n", "item_anchor_elasti", "=", "item_anchor_elasti", "+", "(", "[", "elasti_th", "]", "*", "item_padding_len", ")", "\n", "", "else", ":", "\n", "                ", "continue", "\n", "", "anchor_id", ".", "append", "(", "item_anchor_id", ")", "\n", "anchor_elasti", ".", "append", "(", "item_anchor_elasti", ")", "\n", "anchor_padding_mask", ".", "append", "(", "item_anchor_padding_mask", ")", "\n", "", "anchor_id", "=", "np", ".", "array", "(", "anchor_id", ",", "dtype", "=", "np", ".", "int", ")", "\n", "anchor_elasti", "=", "np", ".", "array", "(", "anchor_elasti", ")", "\n", "anchor_padding_mask", "=", "np", ".", "array", "(", "anchor_padding_mask", ",", "dtype", "=", "np", ".", "int", ")", "\n", "return", "vertex_contact", ",", "hand_region", ",", "anchor_id", ",", "anchor_elasti", ",", "anchor_padding_mask", "\n", "", "elif", "pad_vertex", "and", "not", "pad_anchor", ":", "\n", "# the return result will be the same length of vertex_contact", "\n", "        ", "hand_region", "=", "[", "item", "[", "\"region\"", "]", "if", "item", "[", "\"contact\"", "]", "==", "1", "else", "region_id_background", "for", "item", "in", "contact_info", "]", "\n", "hand_region", "=", "np", ".", "array", "(", "hand_region", ",", "dtype", "=", "np", ".", "int", ")", "\n", "# no anchors will be padded", "\n", "# will return list", "\n", "anchor_id", "=", "[", "]", "\n", "anchor_elasti", "=", "[", "]", "\n", "for", "item", "in", "contact_info", ":", "\n", "            ", "if", "item", "[", "\"contact\"", "]", "==", "1", ":", "\n", "                ", "item_anchor_id", "=", "item", "[", "\"anchor_id\"", "]", "\n", "item_anchor_elasti", "=", "item", "[", "\"anchor_elasti\"", "]", "\n", "", "else", ":", "\n", "                ", "item_anchor_id", "=", "[", "]", "\n", "item_anchor_elasti", "=", "[", "]", "\n", "", "anchor_id", ".", "append", "(", "item_anchor_id", ")", "\n", "anchor_elasti", ".", "append", "(", "item_anchor_elasti", ")", "\n", "", "return", "vertex_contact", ",", "hand_region", ",", "anchor_id", ",", "anchor_elasti", ",", "None", "\n", "", "else", ":", "\n", "# the return result will be the same length of ones in vertex_contact", "\n", "        ", "hand_region", "=", "[", "item", "[", "\"region\"", "]", "for", "item", "in", "contact_info", "if", "item", "[", "\"contact\"", "]", "==", "1", "]", "\n", "hand_region", "=", "np", ".", "array", "(", "hand_region", ",", "dtype", "=", "np", ".", "int", ")", "\n", "# no anchors will be padded", "\n", "# will return list", "\n", "anchor_id", "=", "[", "]", "\n", "anchor_elasti", "=", "[", "]", "\n", "for", "item", "in", "contact_info", ":", "\n", "            ", "if", "item", "[", "\"contact\"", "]", "==", "1", ":", "\n", "                ", "item_anchor_id", "=", "item", "[", "\"anchor_id\"", "]", "\n", "item_anchor_elasti", "=", "item", "[", "\"anchor_elasti\"", "]", "\n", "", "else", ":", "\n", "                ", "continue", "\n", "", "anchor_id", ".", "append", "(", "item_anchor_id", ")", "\n", "anchor_elasti", ".", "append", "(", "item_anchor_elasti", ")", "\n", "", "return", "vertex_contact", ",", "hand_region", ",", "anchor_id", ",", "anchor_elasti", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.func.denormalize": [[4, 16], ["torch.as_tensor", "torch.as_tensor", "tensor.clone.mul_().sub_", "TypeError", "tensor.clone.clone", "torch.is_tensor", "tensor.clone.ndimension", "tensor.clone.mul_"], "function", ["None"], ["def", "denormalize", "(", "tensor", ",", "mean", ",", "std", ",", "inplace", "=", "False", ")", ":", "\n", "    ", "if", "not", "torch", ".", "is_tensor", "(", "tensor", ")", "or", "tensor", ".", "ndimension", "(", ")", "!=", "3", ":", "\n", "        ", "raise", "TypeError", "(", "\"invalid tensor or tensor channel is not CHW\"", ")", "\n", "\n", "", "if", "not", "inplace", ":", "\n", "        ", "tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "\n", "", "dtype", "=", "tensor", ".", "dtype", "\n", "mean", "=", "torch", ".", "as_tensor", "(", "mean", ",", "dtype", "=", "dtype", ",", "device", "=", "tensor", ".", "device", ")", "\n", "std", "=", "torch", ".", "as_tensor", "(", "std", ",", "dtype", "=", "dtype", ",", "device", "=", "tensor", ".", "device", ")", "\n", "tensor", ".", "mul_", "(", "std", "[", ":", ",", "None", ",", "None", "]", ")", ".", "sub_", "(", "-", "1", "*", "mean", "[", ":", ",", "None", ",", "None", "]", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.func.batch_denormalize": [[18, 46], ["torch.as_tensor", "torch.as_tensor", "tensor.clone.mul_().sub_", "TypeError", "tensor.clone.clone", "torch.is_tensor", "tensor.clone.ndimension", "tensor.clone.mul_"], "function", ["None"], ["", "def", "batch_denormalize", "(", "tensor", ",", "mean", ",", "std", ",", "inplace", "=", "False", ")", ":", "\n", "    ", "\"\"\"Normalize a tensor image with mean and standard deviation.\n\n    .. note::\n        This transform acts out of place by default, i.e., it does not mutates the input tensor.\n\n    See :class:`~torchvision.transforms.Normalize` for more details.\n\n    Args:\n        tensor (Tensor): Tensor image of size (B, C, H, W) to be normalized.\n        mean (sequence): Sequence of means for each channel.\n        std (sequence): Sequence of standard deviations for each channel.\n        inplace(bool,optional): Bool to make this operation inplace.\n\n    Returns:\n        Tensor: Normalized Tensor image.\n    \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "tensor", ")", "or", "tensor", ".", "ndimension", "(", ")", "!=", "4", ":", "\n", "        ", "raise", "TypeError", "(", "\"invalid tensor or tensor channel is not BCHW\"", ")", "\n", "\n", "", "if", "not", "inplace", ":", "\n", "        ", "tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "\n", "", "dtype", "=", "tensor", ".", "dtype", "\n", "mean", "=", "torch", ".", "as_tensor", "(", "mean", ",", "dtype", "=", "dtype", ",", "device", "=", "tensor", ".", "device", ")", "\n", "std", "=", "torch", ".", "as_tensor", "(", "std", ",", "dtype", "=", "dtype", ",", "device", "=", "tensor", ".", "device", ")", "\n", "tensor", ".", "mul_", "(", "std", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", ".", "sub_", "(", "-", "1", "*", "mean", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.func.to_numpy": [[48, 55], ["torch.is_tensor", "tensor.detach().cpu().numpy", "ValueError", "tensor.detach().cpu", "type", "type", "tensor.detach"], "function", ["None"], ["", "def", "to_numpy", "(", "tensor", ")", ":", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "type", "(", "tensor", ")", ".", "__module__", "!=", "\"numpy\"", ":", "\n", "        ", "raise", "ValueError", "(", "\"Cannot convert {} to numpy array\"", ".", "format", "(", "type", "(", "tensor", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.func.bhwc_2_bchw": [[57, 65], ["tensor.unsqueeze().transpose().squeeze", "TypeError", "torch.is_tensor", "tensor.ndimension", "tensor.unsqueeze().transpose", "tensor.unsqueeze"], "function", ["None"], ["", "", "def", "bhwc_2_bchw", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    :param x: torch tensor, B x H x W x C\n    :return:  torch tensor, B x C x H x W\n    \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "tensor", ")", "or", "tensor", ".", "ndimension", "(", ")", "!=", "4", ":", "\n", "        ", "raise", "TypeError", "(", "\"invalid tensor or tensor channel is not BCHW\"", ")", "\n", "", "return", "tensor", ".", "unsqueeze", "(", "1", ")", ".", "transpose", "(", "1", ",", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.func.bchw_2_bhwc": [[67, 75], ["tensor.unsqueeze().transpose().squeeze", "TypeError", "torch.is_tensor", "tensor.ndimension", "tensor.unsqueeze().transpose", "tensor.unsqueeze"], "function", ["None"], ["", "def", "bchw_2_bhwc", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    :param x: torch tensor, B x C x H x W\n    :return:  torch tensor, B x H x W x C\n    \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "tensor", ")", "or", "tensor", ".", "ndimension", "(", ")", "!=", "4", ":", "\n", "        ", "raise", "TypeError", "(", "\"invalid tensor or tensor channel is not BCHW\"", ")", "\n", "", "return", "tensor", ".", "unsqueeze", "(", "-", "1", ")", ".", "transpose", "(", "1", ",", "-", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.lossutils.update_loss": [[1, 25], ["list", "dict", "len", "dict", "loss_dict.keys", "set", "keys_list.append"], "function", ["None"], ["def", "update_loss", "(", "ls_losses", ")", ":", "\n", "# ls_losses = LIST[DICT]", "\n", "# this function sums over common keys", "\n", "# if list of losses is 0, return empty dict", "\n", "    ", "if", "len", "(", "ls_losses", ")", "==", "0", ":", "\n", "        ", "return", "dict", "(", ")", "\n", "\n", "# ? first, get the common keys of all dicts", "\n", "", "keys_list", "=", "[", "]", "\n", "for", "loss_dict", "in", "ls_losses", ":", "\n", "        ", "for", "key", "in", "loss_dict", ".", "keys", "(", ")", ":", "\n", "            ", "keys_list", ".", "append", "(", "key", ")", "\n", "", "", "keys", "=", "list", "(", "set", "(", "keys_list", ")", ")", "\n", "\n", "# ? init an dict with default value zeros", "\n", "res", "=", "dict", "(", ")", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "res", "[", "key", "]", "=", "0.0", "\n", "\n", "# ? iterate over all loss dicts", "\n", "", "for", "loss_dict", "in", "ls_losses", ":", "\n", "        ", "for", "key", "in", "keys", ":", "\n", "            ", "res", "[", "key", "]", "+=", "loss_dict", "[", "key", "]", "\n", "", "", "return", "res", "\n", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.disjointnessutils.pairwise_dist": [[5, 12], ["numpy.matmul", "numpy.repeat", "numpy.repeat", "y.transpose", "numpy.expand_dims", "numpy.expand_dims", "numpy.sum", "numpy.sum"], "function", ["None"], ["def", "pairwise_dist", "(", "x", ",", "y", ")", ":", "\n", "    ", "n_x", ",", "n_y", "=", "x", ".", "shape", "[", "0", "]", ",", "y", ".", "shape", "[", "0", "]", "\n", "zz", "=", "np", ".", "matmul", "(", "x", ",", "y", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "rx", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "np", ".", "sum", "(", "x", "**", "2", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", ",", "n_y", ",", "axis", "=", "1", ")", "\n", "ry", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "np", ".", "sum", "(", "y", "**", "2", ",", "axis", "=", "1", ")", ",", "axis", "=", "0", ")", ",", "n_x", ",", "axis", "=", "0", ")", "\n", "P", "=", "rx", "+", "ry", "-", "2", "*", "zz", "\n", "return", "P", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.disjointnessutils.region_disjointness_metric": [[14, 44], ["numpy.zeros", "list", "numpy.array", "numpy.sum", "numpy.sum", "numpy.ones", "range", "manopth.anchorutils.get_region_palm_mask", "numpy.abs", "numpy.min", "numpy.sqrt", "numpy.min", "res_list.append", "disjointnessutils.pairwise_dist"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.disjointnessutils.pairwise_dist"], ["", "def", "region_disjointness_metric", "(", "hand_verts_pred", ",", "obj_verts_pred", ",", "hand_region_assignment", ")", ":", "\n", "# tip region constant", "\n", "    ", "tip_regions", "=", "[", "2", ",", "5", ",", "8", ",", "11", ",", "14", "]", "\n", "tip_only_weight", "=", "np", ".", "zeros", "(", "17", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "tip_only_weight", "[", "tip_regions", "]", "=", "1.0", "\n", "tip_biased_weight", "=", "np", ".", "ones", "(", "17", ",", "dtype", "=", "np", ".", "float64", ")", "*", "0.1", "\n", "tip_biased_weight", "[", "tip_regions", "]", "=", "1.0", "\n", "# first get all possible regions", "\n", "all_regions", "=", "list", "(", "range", "(", "17", ")", ")", "\n", "res_list", "=", "[", "]", "\n", "# iterate over regions", "\n", "for", "region_id", "in", "all_regions", ":", "\n", "# get boolean mask", "\n", "        ", "region_mask", "=", "get_region_palm_mask", "(", "region_id", ",", "None", ",", "hand_region_assignment", ",", "None", ")", "\n", "# select hand points", "\n", "hand_verts_pred_region", "=", "hand_verts_pred", "[", "region_mask", "]", "\n", "# cross distance", "\n", "dist_mat", "=", "np", ".", "abs", "(", "pairwise_dist", "(", "hand_verts_pred_region", ",", "obj_verts_pred", ")", ")", "# make sure positive", "\n", "# compute min hand -> object", "\n", "hand_to_object_dist", "=", "np", ".", "min", "(", "dist_mat", ",", "axis", "=", "1", ")", "\n", "# sqrt", "\n", "hand_to_object_dist", "=", "np", ".", "sqrt", "(", "hand_to_object_dist", ")", "\n", "# compute min value over region", "\n", "min_value", "=", "np", ".", "min", "(", "hand_to_object_dist", ")", "\n", "# get into", "\n", "res_list", ".", "append", "(", "min_value", ")", "\n", "", "res", "=", "np", ".", "array", "(", "res_list", ")", "\n", "tip_only", "=", "np", ".", "sum", "(", "res", "*", "tip_only_weight", ")", "\n", "tip_biased", "=", "np", ".", "sum", "(", "res", "*", "tip_biased_weight", ")", "\n", "return", "res", ",", "tip_only", ",", "tip_biased", "\n", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.netutils.rec_freeze": [[4, 12], ["model.modules", "model.named_children", "isinstance", "child.parameters", "netutils.rec_freeze"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.netutils.rec_freeze"], ["def", "rec_freeze", "(", "model", ")", ":", "\n", "    ", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "module", ".", "momentum", "=", "0", "\n", "", "", "for", "name", ",", "child", "in", "model", ".", "named_children", "(", ")", ":", "\n", "        ", "for", "param", "in", "child", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "rec_freeze", "(", "child", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.netutils.freeze_batchnorm_stats": [[14, 20], ["model.modules", "model.named_children", "isinstance", "netutils.freeze_batchnorm_stats"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.netutils.freeze_batchnorm_stats"], ["", "", "def", "freeze_batchnorm_stats", "(", "model", ")", ":", "\n", "    ", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "module", ".", "momentum", "=", "0", "\n", "", "", "for", "name", ",", "child", "in", "model", ".", "named_children", "(", ")", ":", "\n", "        ", "freeze_batchnorm_stats", "(", "child", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.utils.netutils.kmninit": [[22, 26], ["model.modules", "isinstance", "torch.nn.init.kaiming_normal_"], "function", ["None"], ["", "", "def", "kmninit", "(", "model", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.libmesh.inside_mesh.MeshIntersector.__init__": [[12, 30], ["mesh.vertices[].astype", "inside_mesh.MeshIntersector.reshape().min", "inside_mesh.MeshIntersector.reshape().max", "inside_mesh.MeshIntersector.rescale", "inside_mesh.TriangleIntersector2d", "inside_mesh.MeshIntersector.reshape", "inside_mesh.MeshIntersector.reshape"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.libmesh.inside_mesh.MeshIntersector.rescale"], ["    ", "def", "__init__", "(", "self", ",", "mesh", ",", "resolution", "=", "512", ")", ":", "\n", "        ", "triangles", "=", "mesh", ".", "vertices", "[", "mesh", ".", "faces", "]", ".", "astype", "(", "np", ".", "float64", ")", "\n", "n_tri", "=", "triangles", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "bbox_min", "=", "triangles", ".", "reshape", "(", "3", "*", "n_tri", ",", "3", ")", ".", "min", "(", "axis", "=", "0", ")", "\n", "self", ".", "bbox_max", "=", "triangles", ".", "reshape", "(", "3", "*", "n_tri", ",", "3", ")", ".", "max", "(", "axis", "=", "0", ")", "\n", "# Tranlate and scale it to [0.5, self.resolution - 0.5]^3", "\n", "self", ".", "scale", "=", "(", "resolution", "-", "1", ")", "/", "(", "self", ".", "bbox_max", "-", "self", ".", "bbox_min", ")", "\n", "self", ".", "translate", "=", "0.5", "-", "self", ".", "scale", "*", "self", ".", "bbox_min", "\n", "\n", "self", ".", "_triangles", "=", "triangles", "=", "self", ".", "rescale", "(", "triangles", ")", "\n", "# assert(np.allclose(triangles.reshape(-1, 3).min(0), 0.5))", "\n", "# assert(np.allclose(triangles.reshape(-1, 3).max(0), resolution - 0.5))", "\n", "\n", "triangles2d", "=", "triangles", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "self", ".", "_tri_intersector2d", "=", "TriangleIntersector2d", "(", "\n", "triangles2d", ",", "resolution", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.libmesh.inside_mesh.MeshIntersector.query": [[31, 74], ["inside_mesh.MeshIntersector.rescale", "numpy.zeros", "numpy.all", "inside_mesh.MeshIntersector._tri_intersector2d.query", "inside_mesh.MeshIntersector.compute_intersection_depth", "numpy.bincount", "numpy.bincount", "len", "numpy.all.any", "numpy.mod", "numpy.mod", "print"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.libmesh.inside_mesh.MeshIntersector.rescale", "home.repos.pwc.inspect_result.lixiny_CPF.libmesh.inside_mesh.TriangleIntersector2d.query", "home.repos.pwc.inspect_result.lixiny_CPF.libmesh.inside_mesh.MeshIntersector.compute_intersection_depth"], ["", "def", "query", "(", "self", ",", "points", ")", ":", "\n", "# Rescale points", "\n", "        ", "points", "=", "self", ".", "rescale", "(", "points", ")", "\n", "\n", "# placeholder result with no hits we'll fill in later", "\n", "contains", "=", "np", ".", "zeros", "(", "len", "(", "points", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "# cull points outside of the axis aligned bounding box", "\n", "# this avoids running ray tests unless points are close", "\n", "inside_aabb", "=", "np", ".", "all", "(", "\n", "(", "0", "<=", "points", ")", "&", "(", "points", "<=", "self", ".", "resolution", ")", ",", "axis", "=", "1", ")", "\n", "if", "not", "inside_aabb", ".", "any", "(", ")", ":", "\n", "            ", "return", "contains", "\n", "\n", "# Only consider points inside bounding box", "\n", "", "mask", "=", "inside_aabb", "\n", "points", "=", "points", "[", "mask", "]", "\n", "\n", "# Compute intersection depth and check order", "\n", "points_indices", ",", "tri_indices", "=", "self", ".", "_tri_intersector2d", ".", "query", "(", "points", "[", ":", ",", ":", "2", "]", ")", "\n", "\n", "triangles_intersect", "=", "self", ".", "_triangles", "[", "tri_indices", "]", "\n", "points_intersect", "=", "points", "[", "points_indices", "]", "\n", "\n", "depth_intersect", ",", "abs_n_2", "=", "self", ".", "compute_intersection_depth", "(", "\n", "points_intersect", ",", "triangles_intersect", ")", "\n", "\n", "# Count number of intersections in both directions", "\n", "smaller_depth", "=", "depth_intersect", ">=", "points_intersect", "[", ":", ",", "2", "]", "*", "abs_n_2", "\n", "bigger_depth", "=", "depth_intersect", "<", "points_intersect", "[", ":", ",", "2", "]", "*", "abs_n_2", "\n", "points_indices_0", "=", "points_indices", "[", "smaller_depth", "]", "\n", "points_indices_1", "=", "points_indices", "[", "bigger_depth", "]", "\n", "\n", "nintersect0", "=", "np", ".", "bincount", "(", "points_indices_0", ",", "minlength", "=", "points", ".", "shape", "[", "0", "]", ")", "\n", "nintersect1", "=", "np", ".", "bincount", "(", "points_indices_1", ",", "minlength", "=", "points", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# Check if point contained in mesh", "\n", "contains1", "=", "(", "np", ".", "mod", "(", "nintersect0", ",", "2", ")", "==", "1", ")", "\n", "contains2", "=", "(", "np", ".", "mod", "(", "nintersect1", ",", "2", ")", "==", "1", ")", "\n", "if", "(", "contains1", "!=", "contains2", ")", ".", "any", "(", ")", ":", "\n", "            ", "print", "(", "'Warning: contains1 != contains2 for some points.'", ")", "\n", "", "contains", "[", "mask", "]", "=", "(", "contains1", "&", "contains2", ")", "\n", "return", "contains", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.libmesh.inside_mesh.MeshIntersector.compute_intersection_depth": [[75, 107], ["numpy.cross", "numpy.sum", "numpy.sign", "numpy.abs", "numpy.full"], "methods", ["None"], ["", "def", "compute_intersection_depth", "(", "self", ",", "points", ",", "triangles", ")", ":", "\n", "        ", "t1", "=", "triangles", "[", ":", ",", "0", ",", ":", "]", "\n", "t2", "=", "triangles", "[", ":", ",", "1", ",", ":", "]", "\n", "t3", "=", "triangles", "[", ":", ",", "2", ",", ":", "]", "\n", "\n", "v1", "=", "t3", "-", "t1", "\n", "v2", "=", "t2", "-", "t1", "\n", "# v1 = v1 / np.linalg.norm(v1, axis=-1, keepdims=True)", "\n", "# v2 = v2 / np.linalg.norm(v2, axis=-1, keepdims=True)", "\n", "\n", "normals", "=", "np", ".", "cross", "(", "v1", ",", "v2", ")", "\n", "alpha", "=", "np", ".", "sum", "(", "normals", "[", ":", ",", ":", "2", "]", "*", "(", "t1", "[", ":", ",", ":", "2", "]", "-", "points", "[", ":", ",", ":", "2", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "n_2", "=", "normals", "[", ":", ",", "2", "]", "\n", "t1_2", "=", "t1", "[", ":", ",", "2", "]", "\n", "s_n_2", "=", "np", ".", "sign", "(", "n_2", ")", "\n", "abs_n_2", "=", "np", ".", "abs", "(", "n_2", ")", "\n", "\n", "mask", "=", "(", "abs_n_2", "!=", "0", ")", "\n", "\n", "depth_intersect", "=", "np", ".", "full", "(", "points", ".", "shape", "[", "0", "]", ",", "np", ".", "nan", ")", "\n", "depth_intersect", "[", "mask", "]", "=", "t1_2", "[", "mask", "]", "*", "abs_n_2", "[", "mask", "]", "+", "alpha", "[", "mask", "]", "*", "s_n_2", "[", "mask", "]", "\n", "\n", "# Test the depth:", "\n", "# TODO: remove and put into tests", "\n", "# points_new = np.concatenate([points[:, :2], depth_intersect[:, None]], axis=1)", "\n", "# alpha = (normals * t1).sum(-1)", "\n", "# mask = (depth_intersect == depth_intersect)", "\n", "# assert(np.allclose((points_new[mask] * normals[mask]).sum(-1),", "\n", "#                    alpha[mask]))", "\n", "return", "depth_intersect", ",", "abs_n_2", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.libmesh.inside_mesh.MeshIntersector.rescale": [[108, 111], ["None"], "methods", ["None"], ["", "def", "rescale", "(", "self", ",", "array", ")", ":", "\n", "        ", "array", "=", "self", ".", "scale", "*", "array", "+", "self", ".", "translate", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.libmesh.inside_mesh.TriangleIntersector2d.__init__": [[114, 117], ["triangle_hash.TriangleHash"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "triangles", ",", "resolution", "=", "128", ")", ":", "\n", "        ", "self", ".", "triangles", "=", "triangles", "\n", "self", ".", "tri_hash", "=", "_TriangleHash", "(", "triangles", ",", "resolution", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.libmesh.inside_mesh.TriangleIntersector2d.query": [[118, 128], ["inside_mesh.TriangleIntersector2d.tri_hash.query", "numpy.array", "numpy.array", "inside_mesh.TriangleIntersector2d.check_triangles"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.libmesh.inside_mesh.TriangleIntersector2d.query", "home.repos.pwc.inspect_result.lixiny_CPF.libmesh.inside_mesh.TriangleIntersector2d.check_triangles"], ["", "def", "query", "(", "self", ",", "points", ")", ":", "\n", "        ", "point_indices", ",", "tri_indices", "=", "self", ".", "tri_hash", ".", "query", "(", "points", ")", "\n", "point_indices", "=", "np", ".", "array", "(", "point_indices", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "tri_indices", "=", "np", ".", "array", "(", "tri_indices", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "points", "=", "points", "[", "point_indices", "]", "\n", "triangles", "=", "self", ".", "triangles", "[", "tri_indices", "]", "\n", "mask", "=", "self", ".", "check_triangles", "(", "points", ",", "triangles", ")", "\n", "point_indices", "=", "point_indices", "[", "mask", "]", "\n", "tri_indices", "=", "tri_indices", "[", "mask", "]", "\n", "return", "point_indices", ",", "tri_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.libmesh.inside_mesh.TriangleIntersector2d.check_triangles": [[129, 154], ["numpy.zeros", "A.transpose.transpose.transpose", "numpy.sign", "numpy.abs", "numpy.abs"], "methods", ["None"], ["", "def", "check_triangles", "(", "self", ",", "points", ",", "triangles", ")", ":", "\n", "        ", "contains", "=", "np", ".", "zeros", "(", "points", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "A", "=", "triangles", "[", ":", ",", ":", "2", "]", "-", "triangles", "[", ":", ",", "2", ":", "]", "\n", "A", "=", "A", ".", "transpose", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "y", "=", "points", "-", "triangles", "[", ":", ",", "2", "]", "\n", "\n", "detA", "=", "A", "[", ":", ",", "0", ",", "0", "]", "*", "A", "[", ":", ",", "1", ",", "1", "]", "-", "A", "[", ":", ",", "0", ",", "1", "]", "*", "A", "[", ":", ",", "1", ",", "0", "]", "\n", "\n", "mask", "=", "(", "np", ".", "abs", "(", "detA", ")", "!=", "0.", ")", "\n", "A", "=", "A", "[", "mask", "]", "\n", "y", "=", "y", "[", "mask", "]", "\n", "detA", "=", "detA", "[", "mask", "]", "\n", "\n", "s_detA", "=", "np", ".", "sign", "(", "detA", ")", "\n", "abs_detA", "=", "np", ".", "abs", "(", "detA", ")", "\n", "\n", "u", "=", "(", "A", "[", ":", ",", "1", ",", "1", "]", "*", "y", "[", ":", ",", "0", "]", "-", "A", "[", ":", ",", "0", ",", "1", "]", "*", "y", "[", ":", ",", "1", "]", ")", "*", "s_detA", "\n", "v", "=", "(", "-", "A", "[", ":", ",", "1", ",", "0", "]", "*", "y", "[", ":", ",", "0", "]", "+", "A", "[", ":", ",", "0", ",", "0", "]", "*", "y", "[", ":", ",", "1", "]", ")", "*", "s_detA", "\n", "\n", "sum_uv", "=", "u", "+", "v", "\n", "contains", "[", "mask", "]", "=", "(", "\n", "(", "0", "<", "u", ")", "&", "(", "u", "<", "abs_detA", ")", "&", "(", "0", "<", "v", ")", "&", "(", "v", "<", "abs_detA", ")", "\n", "&", "(", "0", "<", "sum_uv", ")", "&", "(", "sum_uv", "<", "abs_detA", ")", "\n", ")", "\n", "return", "contains", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.libmesh.inside_mesh.check_mesh_contains": [[5, 9], ["inside_mesh.MeshIntersector", "inside_mesh.MeshIntersector.query"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.libmesh.inside_mesh.TriangleIntersector2d.query"], ["def", "check_mesh_contains", "(", "mesh", ",", "points", ",", "hash_resolution", "=", "512", ")", ":", "\n", "    ", "intersector", "=", "MeshIntersector", "(", "mesh", ",", "hash_resolution", ")", "\n", "contains", "=", "intersector", ".", "query", "(", "points", ")", "\n", "return", "contains", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.disteval.dispatch_evaluator": [[7, 22], ["this_loss_meter.items", "this_eval_util.items", "lossmeter_dict[].append", "evalutil_dict[].append"], "function", ["None"], ["def", "dispatch_evaluator", "(", "\n", "evaluator", ":", "Evaluator", ",", "lossmeter_dict", ":", "Dict", "[", "str", ",", "List", "[", "AverageMeter", "]", "]", ",", "evalutil_dict", ":", "Dict", "[", "str", ",", "List", "[", "EvalUtil", "]", "]", ",", "\n", ")", ":", "\n", "    ", "this_loss_meter", "=", "evaluator", ".", "loss_meters", "\n", "for", "meter_name", ",", "meter", "in", "this_loss_meter", ".", "items", "(", ")", ":", "\n", "        ", "if", "meter_name", "not", "in", "lossmeter_dict", ":", "\n", "            ", "lossmeter_dict", "[", "meter_name", "]", "=", "[", "meter", "]", "\n", "", "else", ":", "\n", "            ", "lossmeter_dict", "[", "meter_name", "]", ".", "append", "(", "meter", ")", "\n", "", "", "this_eval_util", "=", "evaluator", ".", "eval_meters", "\n", "for", "util_name", ",", "util", "in", "this_eval_util", ".", "items", "(", ")", ":", "\n", "        ", "if", "util_name", "not", "in", "evalutil_dict", ":", "\n", "            ", "evalutil_dict", "[", "util_name", "]", "=", "[", "util", "]", "\n", "", "else", ":", "\n", "            ", "evalutil_dict", "[", "util_name", "]", ".", "append", "(", "util", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.disteval.merge_evaluator": [[24, 46], ["dict", "dict", "dict.items", "dict.items", "hocontact.utils.eval.Evaluator", "disteval.dispatch_evaluator", "disteval.merge_averagemeter", "isinstance", "len", "RuntimeError", "len", "RuntimeError", "disteval.merge_evalutil"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.eval.disteval.dispatch_evaluator", "home.repos.pwc.inspect_result.lixiny_CPF.eval.disteval.merge_averagemeter", "home.repos.pwc.inspect_result.lixiny_CPF.eval.disteval.merge_evalutil"], ["", "", "", "def", "merge_evaluator", "(", "evaluator_list", ":", "List", "[", "Evaluator", "]", ")", ":", "\n", "    ", "lm_dict", "=", "dict", "(", ")", "\n", "eu_dict", "=", "dict", "(", ")", "\n", "for", "evaluator", "in", "evaluator_list", ":", "\n", "        ", "dispatch_evaluator", "(", "evaluator", ",", "lm_dict", ",", "eu_dict", ")", "\n", "\n", "", "for", "lm_key", ",", "lm_meter_list", "in", "lm_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "lm_meter_list", ")", "<", "1", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"unexpected 0 length meter list, check dispath function above\"", ")", "\n", "", "lm_dict", "[", "lm_key", "]", "=", "merge_averagemeter", "(", "lm_meter_list", ")", "\n", "\n", "", "for", "eu_key", ",", "eu_meter_list", "in", "eu_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "eu_meter_list", ")", "<", "1", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"unexpected 0 length meter list, check dispath function above\"", ")", "\n", "", "test_meter", "=", "eu_meter_list", "[", "0", "]", "\n", "if", "isinstance", "(", "test_meter", ",", "EvalUtil", ")", ":", "\n", "            ", "eu_dict", "[", "eu_key", "]", "=", "merge_evalutil", "(", "eu_meter_list", ")", "\n", "\n", "", "", "res", "=", "Evaluator", "(", ")", "\n", "res", ".", "loss_meters", "=", "lm_dict", "\n", "res", ".", "eval_meters", "=", "eu_dict", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.disteval.merge_averagemeter": [[48, 56], ["hocontact.utils.eval.evalutils.AverageMeter"], "function", ["None"], ["", "def", "merge_averagemeter", "(", "averagemeter_list", ":", "List", "[", "AverageMeter", "]", ")", ":", "\n", "    ", "res", "=", "AverageMeter", "(", ")", "\n", "res", ".", "val", "=", "averagemeter_list", "[", "-", "1", "]", ".", "val", "\n", "for", "averagemeter", "in", "averagemeter_list", ":", "\n", "        ", "res", ".", "sum", "+=", "averagemeter", ".", "sum", "\n", "res", ".", "count", "+=", "averagemeter", ".", "count", "\n", "", "res", ".", "avg", "=", "res", ".", "sum", "/", "res", ".", "count", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.disteval.merge_evalutil": [[58, 64], ["hocontact.utils.eval.EvalUtil", "range", "hocontact.utils.eval.EvalUtil.data[].extend"], "function", ["None"], ["", "def", "merge_evalutil", "(", "evalutil_list", ":", "List", "[", "EvalUtil", "]", ")", ":", "\n", "    ", "res", "=", "EvalUtil", "(", ")", "\n", "for", "evalutil", "in", "evalutil_list", ":", "\n", "        ", "for", "i", "in", "range", "(", "res", ".", "num_kp", ")", ":", "\n", "            ", "res", ".", "data", "[", "i", "]", ".", "extend", "(", "evalutil", ".", "data", "[", "i", "]", ")", "\n", "", "", "return", "res", "\n", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.__init__": [[12, 14], ["evalutils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.reset": [[15, 20], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update": [[21, 26], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.Evaluator.__init__": [[29, 38], ["hocontact.utils.eval.zimeval.EvalUtil", "hocontact.utils.eval.zimeval.EvalUtil", "hocontact.utils.eval.zimeval.EvalUtil", "hocontact.utils.eval.zimeval.EvalUtil", "hocontact.utils.eval.zimeval.EvalUtil"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "eval_meters", "=", "{", "\n", "\"joints2d_base\"", ":", "EvalUtil", "(", ")", ",", "\n", "\"corners2d_base\"", ":", "EvalUtil", "(", ")", ",", "\n", "\"verts2d_base\"", ":", "EvalUtil", "(", ")", ",", "\n", "\"joints3d_cent\"", ":", "EvalUtil", "(", ")", ",", "\n", "\"joints3d\"", ":", "EvalUtil", "(", ")", ",", "\n", "}", "\n", "self", ".", "loss_meters", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.Evaluator.add_loss_value": [[39, 43], ["evalutils.Evaluator.loss_meters[].update", "evalutils.AverageMeter"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update"], ["", "def", "add_loss_value", "(", "self", ",", "loss_name", ",", "loss_val", ",", "n", "=", "1", ")", ":", "\n", "        ", "if", "loss_name", "not", "in", "self", ".", "loss_meters", ":", "\n", "            ", "self", ".", "loss_meters", "[", "loss_name", "]", "=", "AverageMeter", "(", ")", "\n", "", "self", ".", "loss_meters", "[", "loss_name", "]", ".", "update", "(", "loss_val", ",", "n", "=", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.Evaluator.feed_loss_meters": [[44, 91], ["evalutils.recover_back", "evalutils.recover_back", "evalutils.Evaluator.add_loss_value", "sample[].cpu", "evalutils.Evaluator.add_loss_value", "sample[].cpu", "evalutils.Evaluator.add_loss_value", "sample[].cpu", "evalutils.Evaluator.add_loss_value", "sample[].cpu", "evalutils.Evaluator.add_loss_value", "results[].detach().cpu", "warnings.warn", "verts2d_dists.mean().sum().item", "verts3d_dists.mean().sum().item", "verts3d_dists.mean().sum().item", "corners3d_dists.mean().sum().item", "joints3d_dists.mean().sum().item", "results[].detach", "or_verts2d.cpu", "verts2d_dists.mean().sum", "results[].cpu", "verts3d_dists.mean().sum", "results[].cpu", "verts3d_dists.mean().sum", "results[].cpu", "corners3d_dists.mean().sum", "results[].cpu", "joints3d_dists.mean().sum", "verts2d_dists.mean", "verts3d_dists.mean", "verts3d_dists.mean", "corners3d_dists.mean", "joints3d_dists.mean"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.recover_back", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.recover_back", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.Evaluator.add_loss_value", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.Evaluator.add_loss_value", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.Evaluator.add_loss_value", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.Evaluator.add_loss_value", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.Evaluator.add_loss_value", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn"], ["", "def", "feed_loss_meters", "(", "self", ",", "sample", ",", "results", ")", ":", "\n", "        ", "if", "\"obj_verts2d\"", "in", "results", "and", "results", "[", "\"obj_verts2d\"", "]", "is", "not", "None", "and", "BaseQueries", ".", "OBJ_VERTS_2D", "in", "sample", ":", "\n", "            ", "obj_verts2d_gt", "=", "sample", "[", "TransQueries", ".", "OBJ_VERTS_2D", "]", "\n", "affinetrans", "=", "sample", "[", "TransQueries", ".", "AFFINETRANS", "]", "\n", "or_verts2d", "=", "sample", "[", "BaseQueries", ".", "OBJ_VERTS_2D", "]", "\n", "rec_pred", "=", "recover_back", "(", "results", "[", "\"obj_verts2d\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "affinetrans", ")", "\n", "rec_gt", "=", "recover_back", "(", "obj_verts2d_gt", ",", "affinetrans", ")", "\n", "# Sanity check, this should be ~1pixel", "\n", "gt_err", "=", "(", "rec_gt", "-", "or_verts2d", ")", ".", "norm", "(", "2", ",", "-", "1", ")", ".", "mean", "(", ")", "\n", "if", "gt_err", ">", "1", ":", "\n", "                ", "warnings", ".", "warn", "(", "f\"Back to orig error on gt {gt_err} > 1 pixel\"", ")", "\n", "", "verts2d_dists", "=", "(", "rec_pred", "-", "or_verts2d", ".", "cpu", "(", ")", ")", ".", "norm", "(", "2", ",", "-", "1", ")", "\n", "self", ".", "add_loss_value", "(", "\"obj_verts2d_mepe\"", ",", "verts2d_dists", ".", "mean", "(", "-", "1", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "n", "=", "or_verts2d", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "if", "(", "\n", "\"recov_hand_verts3d\"", "in", "results", "\n", "and", "results", "[", "\"recov_hand_verts3d\"", "]", "is", "not", "None", "\n", "and", "BaseQueries", ".", "HAND_VERTS_3D", "in", "sample", "\n", ")", ":", "\n", "            ", "hand_verts3d", "=", "sample", "[", "BaseQueries", ".", "HAND_VERTS_3D", "]", ".", "cpu", "(", ")", "\n", "verts3d_dists", "=", "(", "results", "[", "\"recov_hand_verts3d\"", "]", ".", "cpu", "(", ")", "-", "hand_verts3d", ")", ".", "norm", "(", "2", ",", "-", "1", ")", "\n", "self", ".", "add_loss_value", "(", "\"recov_hand_verts3d_mepe\"", ",", "verts3d_dists", ".", "mean", "(", "-", "1", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "n", "=", "hand_verts3d", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "if", "(", "\n", "\"recov_obj_verts3d\"", "in", "results", "\n", "and", "results", "[", "\"recov_obj_verts3d\"", "]", "is", "not", "None", "\n", "and", "BaseQueries", ".", "OBJ_VERTS_3D", "in", "sample", "\n", ")", ":", "\n", "            ", "or_verts3d", "=", "sample", "[", "BaseQueries", ".", "OBJ_VERTS_3D", "]", ".", "cpu", "(", ")", "\n", "verts3d_dists", "=", "(", "results", "[", "\"recov_obj_verts3d\"", "]", ".", "cpu", "(", ")", "-", "or_verts3d", ")", ".", "norm", "(", "2", ",", "-", "1", ")", "\n", "self", ".", "add_loss_value", "(", "\"recov_obj_verts3d_mepe\"", ",", "verts3d_dists", ".", "mean", "(", "-", "1", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "n", "=", "or_verts3d", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "if", "(", "\n", "\"recov_obj_corners3d\"", "in", "results", "\n", "and", "results", "[", "\"recov_obj_corners3d\"", "]", "is", "not", "None", "\n", "and", "BaseQueries", ".", "OBJ_CORNERS_3D", "in", "sample", "\n", ")", ":", "\n", "            ", "or_corners3d", "=", "sample", "[", "BaseQueries", ".", "OBJ_CORNERS_3D", "]", ".", "cpu", "(", ")", "\n", "corners3d_dists", "=", "(", "results", "[", "\"recov_obj_corners3d\"", "]", ".", "cpu", "(", ")", "-", "or_corners3d", ")", ".", "norm", "(", "2", ",", "-", "1", ")", "\n", "self", ".", "add_loss_value", "(", "\n", "\"recov_obj_corners3d_mepe\"", ",", "corners3d_dists", ".", "mean", "(", "-", "1", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "n", "=", "or_corners3d", ".", "shape", "[", "0", "]", "\n", ")", "\n", "\n", "", "if", "\"recov_joints3d\"", "in", "results", "and", "results", "[", "\"recov_joints3d\"", "]", "is", "not", "None", "and", "BaseQueries", ".", "JOINTS_3D", "in", "sample", ":", "\n", "            ", "or_joints3d", "=", "sample", "[", "BaseQueries", ".", "JOINTS_3D", "]", ".", "cpu", "(", ")", "\n", "joints3d_dists", "=", "(", "results", "[", "\"recov_joints3d\"", "]", ".", "cpu", "(", ")", "-", "or_joints3d", ")", ".", "norm", "(", "2", ",", "-", "1", ")", "\n", "self", ".", "add_loss_value", "(", "\"recov_joints3d_mepe\"", ",", "joints3d_dists", ".", "mean", "(", "-", "1", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "n", "=", "or_joints3d", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.Evaluator.feed_eval_meters": [[92, 148], ["evalutils.recover_back", "evalutils.recover_back", "zip", "evalutils.recover_back", "evalutils.recover_back", "zip", "results[].detach().cpu", "warnings.warn", "recover_back.numpy", "or_joints2d.cpu().numpy", "evalutils.Evaluator.eval_meters[].feed", "results[].detach().cpu", "warnings.warn", "recover_back.numpy", "or_corners2d.cpu().numpy", "evalutils.Evaluator.eval_meters[].feed", "results[].cpu().detach", "zip", "results[].detach().cpu", "zip", "gt_joints3d_cent.numpy", "pred_joints3d_cent.numpy", "evalutils.Evaluator.eval_meters[].feed", "sample[].cpu", "evalutils.Evaluator.eval_meters[].feed", "results[].detach", "or_joints2d.cpu", "results[].detach", "or_corners2d.cpu", "results[].cpu", "results[].detach"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.recover_back", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.recover_back", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.recover_back", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.recover_back", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn", "home.repos.pwc.inspect_result.lixiny_CPF.eval.zimeval.EvalUtil.feed", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn", "home.repos.pwc.inspect_result.lixiny_CPF.eval.zimeval.EvalUtil.feed", "home.repos.pwc.inspect_result.lixiny_CPF.eval.zimeval.EvalUtil.feed", "home.repos.pwc.inspect_result.lixiny_CPF.eval.zimeval.EvalUtil.feed"], ["", "", "def", "feed_eval_meters", "(", "self", ",", "sample", ",", "results", ",", "center_idx", "=", "9", ")", ":", "\n", "        ", "if", "\"joints2d\"", "in", "results", "and", "BaseQueries", ".", "JOINTS_2D", "in", "sample", ":", "\n", "            ", "gt_joints2d", "=", "sample", "[", "TransQueries", ".", "JOINTS_2D", "]", "\n", "affinetrans", "=", "sample", "[", "TransQueries", ".", "AFFINETRANS", "]", "\n", "or_joints2d", "=", "sample", "[", "BaseQueries", ".", "JOINTS_2D", "]", "\n", "rec_pred", "=", "recover_back", "(", "results", "[", "\"joints2d\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "affinetrans", ")", "\n", "rec_gt", "=", "recover_back", "(", "gt_joints2d", ",", "affinetrans", ")", "\n", "# Sanity check, this should be ~1pixel", "\n", "gt_err", "=", "(", "rec_gt", "-", "or_joints2d", ")", ".", "norm", "(", "2", ",", "-", "1", ")", ".", "mean", "(", ")", "\n", "if", "gt_err", ">", "1", ":", "\n", "                ", "warnings", ".", "warn", "(", "f\"Back to orig error on gt {gt_err} > 1 pixel\"", ")", "\n", "", "for", "gt_joints", ",", "pred_joints", "in", "zip", "(", "rec_pred", ".", "numpy", "(", ")", ",", "or_joints2d", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ":", "\n", "                ", "self", ".", "eval_meters", "[", "\"joints2d_base\"", "]", ".", "feed", "(", "gt_joints", ",", "pred_joints", ")", "\n", "\n", "# Object 2d metric", "\n", "", "", "if", "\"obj_corners2d\"", "in", "results", "and", "results", "[", "\"obj_corners2d\"", "]", "is", "not", "None", "and", "BaseQueries", ".", "OBJ_CORNERS_2D", "in", "sample", ":", "\n", "            ", "obj_corners2d_gt", "=", "sample", "[", "TransQueries", ".", "OBJ_CORNERS_2D", "]", "\n", "affinetrans", "=", "sample", "[", "TransQueries", ".", "AFFINETRANS", "]", "\n", "or_corners2d", "=", "sample", "[", "BaseQueries", ".", "OBJ_CORNERS_2D", "]", "\n", "rec_pred", "=", "recover_back", "(", "results", "[", "\"obj_corners2d\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "affinetrans", ")", "\n", "rec_gt", "=", "recover_back", "(", "obj_corners2d_gt", ",", "affinetrans", ")", "\n", "# Sanity check, this should be ~1pixel", "\n", "gt_err", "=", "(", "rec_gt", "-", "or_corners2d", ")", ".", "norm", "(", "2", ",", "-", "1", ")", ".", "mean", "(", ")", "\n", "if", "gt_err", ">", "1", ":", "\n", "                ", "warnings", ".", "warn", "(", "f\"Back to orig error on gt {gt_err} > 1 pixel\"", ")", "\n", "", "for", "gt_corners", ",", "pred_corners", "in", "zip", "(", "rec_pred", ".", "numpy", "(", ")", ",", "or_corners2d", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ":", "\n", "                ", "self", ".", "eval_meters", "[", "\"corners2d_base\"", "]", ".", "feed", "(", "gt_corners", ",", "pred_corners", ")", "\n", "\n", "# Object 3d metric", "\n", "# if (", "\n", "#     \"obj_corners3d\" in results", "\n", "#     and results[\"obj_corners3d\"] is not None", "\n", "#     and BaseQueries.OBJCORNERS3D in sample", "\n", "# ):", "\n", "#     if \"recov_objcorners3d\" in results:", "\n", "#         or_corners3d = sample[BaseQueries.OBJCORNERS3D]", "\n", "#         obj_corners3d_pred = results[\"recov_objcorners3d\"].detach().cpu()", "\n", "#         for gt_corners, pred_corners in zip(obj_corners3d_pred.numpy(), or_corners3d.cpu().numpy()):", "\n", "#             self.eval_meters[\"corners3d_base\"].feed(gt_corners, pred_corners)", "\n", "\n", "# Centered 3D hand metric", "\n", "", "", "if", "BaseQueries", ".", "JOINTS_3D", "in", "sample", ":", "\n", "\n", "            ", "if", "\"joints3d\"", "in", "results", ":", "\n", "                ", "gt_joints3d", "=", "sample", "[", "TransQueries", ".", "JOINTS_3D", "]", "\n", "pred_joints3d", "=", "results", "[", "\"joints3d\"", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "# if center_idx is not None:", "\n", "gt_joints3d_cent", "=", "gt_joints3d", "-", "gt_joints3d", "[", ":", ",", "center_idx", ":", "center_idx", "+", "1", "]", "\n", "pred_joints3d_cent", "=", "pred_joints3d", "-", "pred_joints3d", "[", ":", ",", "center_idx", ":", "center_idx", "+", "1", "]", "\n", "for", "gt_joints", ",", "pred_joints", "in", "zip", "(", "gt_joints3d_cent", ".", "numpy", "(", ")", ",", "pred_joints3d_cent", ".", "numpy", "(", ")", ")", ":", "\n", "                    ", "self", ".", "eval_meters", "[", "\"joints3d_cent\"", "]", ".", "feed", "(", "gt_joints", ",", "pred_joints", ")", "\n", "\n", "", "", "if", "\"recov_joints3d\"", "in", "results", ":", "\n", "                ", "joints3d_pred", "=", "results", "[", "\"recov_joints3d\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "for", "gt_joints", ",", "pred_joints", "in", "zip", "(", "sample", "[", "BaseQueries", ".", "JOINTS_3D", "]", ".", "cpu", "(", ")", ",", "joints3d_pred", ")", ":", "\n", "                    ", "self", ".", "eval_meters", "[", "\"joints3d\"", "]", ".", "feed", "(", "gt_joints", ",", "pred_joints", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.Evaluator.parse_evaluators": [[149, 183], ["evalutils.Evaluator.eval_meters.items", "eval_meter.empty", "isinstance", "eval_meter.get_measures", "range"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.eval.zimeval.EvalUtil.empty", "home.repos.pwc.inspect_result.lixiny_CPF.eval.zimeval.EvalUtil.get_measures"], ["", "", "", "", "def", "parse_evaluators", "(", "self", ",", "config", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Parse evaluators for which PCK curves and other statistics\n        must be computed\n        \"\"\"", "\n", "if", "config", "is", "None", ":", "\n", "            ", "config", "=", "{", "\n", "\"joints2d_base\"", ":", "[", "0", ",", "100", ",", "100", "]", ",", "\n", "\"corners2d_base\"", ":", "[", "0", ",", "100", ",", "100", "]", ",", "\n", "\"verts2d_base\"", ":", "[", "0", ",", "100", ",", "100", "]", ",", "\n", "\"joints3d_cent\"", ":", "[", "0", ",", "0.2", ",", "20", "]", ",", "\n", "\"joints3d\"", ":", "[", "0", ",", "0.5", ",", "20", "]", ",", "\n", "}", "\n", "", "eval_results", "=", "{", "}", "\n", "for", "eval_key", ",", "eval_meter", "in", "self", ".", "eval_meters", ".", "items", "(", ")", ":", "\n", "            ", "if", "eval_meter", ".", "empty", "(", ")", ":", "\n", "                ", "continue", "\n", "\n", "# we need to select way of dealing with eval results, judging by its instance type", "\n", "", "if", "isinstance", "(", "eval_meter", ",", "EvalUtil", ")", ":", "\n", "                ", "start", ",", "end", ",", "steps", "=", "[", "config", "[", "eval_key", "]", "[", "idx", "]", "for", "idx", "in", "range", "(", "3", ")", "]", "\n", "(", "epe_mean", ",", "epe_mean_joints", ",", "epe_median", ",", "auc", ",", "pck_curve", ",", "thresholds", ")", "=", "eval_meter", ".", "get_measures", "(", "\n", "start", ",", "end", ",", "steps", "\n", ")", "\n", "\n", "eval_results", "[", "eval_key", "]", "=", "{", "\n", "\"epe_mean\"", ":", "epe_mean", ",", "\n", "\"epe_mean_joints\"", ":", "epe_mean_joints", ",", "\n", "\"epe_median\"", ":", "epe_median", ",", "\n", "\"auc\"", ":", "auc", ",", "\n", "\"thresholds\"", ":", "thresholds", ",", "\n", "\"pck_curve\"", ":", "pck_curve", ",", "\n", "}", "\n", "", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.recover_back": [[185, 196], ["torch.cat", "torch.inverse().bmm().transpose", "joints_trans.new_ones", "torch.inverse().bmm", "torch.cat.transpose().float", "torch.inverse", "torch.cat.transpose"], "function", ["None"], ["", "", "def", "recover_back", "(", "joints_trans", ",", "affinetrans", ")", ":", "\n", "    ", "\"\"\"\n    Given 2d point coordinates and an affine transform, recovers original pixel points\n    (locations before translation, rotation, crop, scaling... are applied during data\n    augmentation)\n    \"\"\"", "\n", "batch_size", "=", "joints_trans", ".", "shape", "[", "0", "]", "\n", "point_nb", "=", "joints_trans", ".", "shape", "[", "1", "]", "\n", "hom2d", "=", "torch", ".", "cat", "(", "[", "joints_trans", ",", "joints_trans", ".", "new_ones", "(", "batch_size", ",", "point_nb", ",", "1", ")", "]", ",", "-", "1", ")", "\n", "rec2d", "=", "torch", ".", "inverse", "(", "affinetrans", ")", ".", "bmm", "(", "hom2d", ".", "transpose", "(", "1", ",", "2", ")", ".", "float", "(", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "return", "rec2d", "\n", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.zimeval.EvalUtil.__init__": [[26, 32], ["list", "range", "zimeval.EvalUtil.data.append", "list"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_kp", "=", "21", ")", ":", "\n", "# init empty data storage", "\n", "        ", "self", ".", "data", "=", "list", "(", ")", "\n", "self", ".", "num_kp", "=", "num_kp", "\n", "for", "_", "in", "range", "(", "num_kp", ")", ":", "\n", "            ", "self", ".", "data", ".", "append", "(", "list", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.zimeval.EvalUtil.empty": [[33, 38], ["range", "len"], "methods", ["None"], ["", "", "def", "empty", "(", "self", ")", ":", "\n", "        ", "count", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "num_kp", ")", ":", "\n", "            ", "count", "+=", "len", "(", "self", ".", "data", "[", "i", "]", ")", "\n", "", "return", "count", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.zimeval.EvalUtil.feed": [[39, 67], ["isinstance", "isinstance", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze().astype", "numpy.sqrt", "range", "keypoint_gt.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "keypoint_pred.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "numpy.ones_like", "len", "len", "len", "numpy.sum", "numpy.squeeze", "numpy.square", "zimeval.EvalUtil.data[].append", "keypoint_gt.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "keypoint_pred.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "keypoint_gt.detach().cpu().numpy.detach().cpu().numpy.detach", "keypoint_pred.detach().cpu().numpy.detach().cpu().numpy.detach"], "methods", ["None"], ["", "def", "feed", "(", "self", ",", "keypoint_gt", ",", "keypoint_pred", ",", "keypoint_vis", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Used to feed data to the class.\n        Stores the euclidean distance between gt and pred, when it is visible.\n        \"\"\"", "\n", "if", "isinstance", "(", "keypoint_gt", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "keypoint_gt", "=", "keypoint_gt", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "isinstance", "(", "keypoint_pred", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "keypoint_pred", "=", "keypoint_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "keypoint_gt", "=", "np", ".", "squeeze", "(", "keypoint_gt", ")", "\n", "keypoint_pred", "=", "np", ".", "squeeze", "(", "keypoint_pred", ")", "\n", "\n", "if", "keypoint_vis", "is", "None", ":", "\n", "            ", "keypoint_vis", "=", "np", ".", "ones_like", "(", "keypoint_gt", "[", ":", ",", "0", "]", ")", "\n", "", "keypoint_vis", "=", "np", ".", "squeeze", "(", "keypoint_vis", ")", ".", "astype", "(", "\"bool\"", ")", "\n", "\n", "assert", "len", "(", "keypoint_gt", ".", "shape", ")", "==", "2", "\n", "assert", "len", "(", "keypoint_pred", ".", "shape", ")", "==", "2", "\n", "assert", "len", "(", "keypoint_vis", ".", "shape", ")", "==", "1", "\n", "\n", "# calc euclidean distance", "\n", "diff", "=", "keypoint_gt", "-", "keypoint_pred", "\n", "euclidean_dist", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "diff", ")", ",", "axis", "=", "1", ")", ")", "\n", "\n", "num_kp", "=", "keypoint_gt", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "num_kp", ")", ":", "\n", "            ", "if", "keypoint_vis", "[", "i", "]", ":", "\n", "                ", "self", ".", "data", "[", "i", "]", ".", "append", "(", "euclidean_dist", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.zimeval.EvalUtil._get_pck": [[68, 76], ["numpy.array", "numpy.mean", "len"], "methods", ["None"], ["", "", "", "def", "_get_pck", "(", "self", ",", "kp_id", ",", "threshold", ")", ":", "\n", "        ", "\"\"\" Returns pck for one keypoint for the given threshold. \"\"\"", "\n", "if", "len", "(", "self", ".", "data", "[", "kp_id", "]", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "data", "=", "np", ".", "array", "(", "self", ".", "data", "[", "kp_id", "]", ")", "\n", "pck", "=", "np", ".", "mean", "(", "(", "data", "<=", "threshold", ")", ".", "astype", "(", "\"float\"", ")", ")", "\n", "return", "pck", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.zimeval.EvalUtil.get_pck_all": [[77, 84], ["range", "numpy.mean", "zimeval.EvalUtil._get_pck", "numpy.mean.append", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.eval.zimeval.EvalUtil._get_pck"], ["", "def", "get_pck_all", "(", "self", ",", "threshold", ")", ":", "\n", "        ", "pckall", "=", "[", "]", "\n", "for", "kp_id", "in", "range", "(", "self", ".", "num_kp", ")", ":", "\n", "            ", "pck", "=", "self", ".", "_get_pck", "(", "kp_id", ",", "threshold", ")", "\n", "pckall", ".", "append", "(", "pck", ")", "\n", "", "pckall", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "pckall", ")", ")", "\n", "return", "pckall", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.zimeval.EvalUtil._get_epe": [[85, 94], ["numpy.array", "numpy.mean", "numpy.median", "len"], "methods", ["None"], ["", "def", "_get_epe", "(", "self", ",", "kp_id", ")", ":", "\n", "        ", "\"\"\" Returns end point error for one keypoint. \"\"\"", "\n", "if", "len", "(", "self", ".", "data", "[", "kp_id", "]", ")", "==", "0", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "data", "=", "np", ".", "array", "(", "self", ".", "data", "[", "kp_id", "]", ")", "\n", "epe_mean", "=", "np", ".", "mean", "(", "data", ")", "\n", "epe_median", "=", "np", ".", "median", "(", "data", ")", "\n", "return", "epe_mean", ",", "epe_median", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.zimeval.EvalUtil.get_measures": [[95, 144], ["numpy.linspace", "numpy.array", "numpy.trapz", "list", "list", "list", "list", "range", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.ones_like", "zimeval.EvalUtil._get_epe", "numpy.mean.append", "numpy.mean.append", "list", "numpy.array", "numpy.mean.append", "numpy.trapz", "numpy.mean.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "zimeval.EvalUtil._get_pck", "numpy.array.append"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.eval.zimeval.EvalUtil._get_epe", "home.repos.pwc.inspect_result.lixiny_CPF.eval.zimeval.EvalUtil._get_pck"], ["", "def", "get_measures", "(", "self", ",", "val_min", ",", "val_max", ",", "steps", ")", ":", "\n", "        ", "\"\"\" Outputs the average mean and median error as well as the pck score. \"\"\"", "\n", "thresholds", "=", "np", ".", "linspace", "(", "val_min", ",", "val_max", ",", "steps", ")", "\n", "thresholds", "=", "np", ".", "array", "(", "thresholds", ")", "\n", "norm_factor", "=", "np", ".", "trapz", "(", "np", ".", "ones_like", "(", "thresholds", ")", ",", "thresholds", ")", "\n", "\n", "# init mean measures", "\n", "epe_mean_all", "=", "list", "(", ")", "\n", "epe_median_all", "=", "list", "(", ")", "\n", "auc_all", "=", "list", "(", ")", "\n", "pck_curve_all", "=", "list", "(", ")", "\n", "\n", "# Create one plot for each part", "\n", "for", "part_id", "in", "range", "(", "self", ".", "num_kp", ")", ":", "\n", "# mean/median error", "\n", "            ", "mean", ",", "median", "=", "self", ".", "_get_epe", "(", "part_id", ")", "\n", "\n", "if", "mean", "is", "None", ":", "\n", "# there was no valid measurement for this keypoint", "\n", "                ", "continue", "\n", "\n", "", "epe_mean_all", ".", "append", "(", "mean", ")", "\n", "epe_median_all", ".", "append", "(", "median", ")", "\n", "\n", "# pck/auc", "\n", "pck_curve", "=", "list", "(", ")", "\n", "for", "t", "in", "thresholds", ":", "\n", "                ", "pck", "=", "self", ".", "_get_pck", "(", "part_id", ",", "t", ")", "\n", "pck_curve", ".", "append", "(", "pck", ")", "\n", "\n", "", "pck_curve", "=", "np", ".", "array", "(", "pck_curve", ")", "\n", "pck_curve_all", ".", "append", "(", "pck_curve", ")", "\n", "auc", "=", "np", ".", "trapz", "(", "pck_curve", ",", "thresholds", ")", "\n", "auc", "/=", "norm_factor", "\n", "auc_all", ".", "append", "(", "auc", ")", "\n", "# Display error per keypoint", "\n", "", "epe_mean_joint", "=", "epe_mean_all", "\n", "epe_mean_all", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "epe_mean_all", ")", ")", "\n", "epe_median_all", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "epe_median_all", ")", ")", "\n", "auc_all", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "auc_all", ")", ")", "\n", "# mean only over keypoints", "\n", "pck_curve_all", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "pck_curve_all", ")", ",", "axis", "=", "0", ")", "\n", "return", "(", "\n", "epe_mean_all", ",", "\n", "epe_mean_joint", ",", "\n", "epe_median_all", ",", "\n", "auc_all", ",", "\n", "pck_curve_all", ",", "\n", "thresholds", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.eval.summarize.summarize_evaluator_picr": [[10, 57], ["os.path.join", "os.makedirs", "matplotlib.pyplot.figure", "evaluator.loss_meters.items", "evaluator.parse_evaluators", "evaluator.parse_evaluators.items", "os.path.join", "evaluator.parse_evaluators.items", "hocontact.visualize.samplevis.eval_vis", "matplotlib.pyplot.close", "os.path.join.replace", "isinstance", "isinstance", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.Evaluator.parse_evaluators", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.eval_vis"], ["def", "summarize_evaluator_picr", "(", "evaluator", ":", "evalutils", ".", "Evaluator", ",", "exp_id", ",", "epoch_idx", ",", "train", "=", "False", ")", ":", "\n", "    ", "img_folder", "=", "os", ".", "path", ".", "join", "(", "exp_id", ",", "\"images\"", ")", "\n", "os", ".", "makedirs", "(", "img_folder", ",", "exist_ok", "=", "True", ")", "\n", "prefix", "=", "\"train\"", "if", "train", "else", "\"val\"", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "save_dict", "=", "{", "}", "\n", "\n", "for", "loss_name", ",", "avg_meter", "in", "evaluator", ".", "loss_meters", ".", "items", "(", ")", ":", "\n", "        ", "save_dict", "[", "loss_name", "]", "=", "{", "}", "\n", "loss_val", "=", "avg_meter", ".", "avg", "\n", "save_dict", "[", "loss_name", "]", "[", "prefix", "]", "=", "loss_val", "\n", "\n", "", "eval_results", "=", "evaluator", ".", "parse_evaluators", "(", ")", "\n", "\n", "for", "eval_name", ",", "eval_res", "in", "eval_results", ".", "items", "(", ")", ":", "\n", "        ", "target_meter", "=", "evaluator", ".", "eval_meters", "[", "eval_name", "]", "\n", "if", "isinstance", "(", "target_meter", ",", "evalutils", ".", "EvalUtil", ")", ":", "\n", "            ", "for", "met", "in", "[", "\"epe_mean\"", ",", "\"auc\"", "]", ":", "\n", "                ", "loss_name", "=", "f\"{eval_name}_{met}\"", "\n", "# Filter nans, since Numpy has : np.nan != np.nan", "\n", "if", "eval_res", "[", "met", "]", "!=", "eval_res", "[", "met", "]", ":", "\n", "                    ", "continue", "\n", "", "save_dict", "[", "loss_name", "]", "=", "{", "}", "\n", "save_dict", "[", "loss_name", "]", "[", "prefix", "]", "=", "eval_res", "[", "met", "]", "\n", "\n", "", "", "", "img_filepath", "=", "f\"{prefix}_epoch{epoch_idx:04d}_eval.png\"", "\n", "save_img_path", "=", "os", ".", "path", ".", "join", "(", "img_folder", ",", "img_filepath", ")", "\n", "\n", "eval_results_no_nans", "=", "{", "}", "\n", "eval_results_for_viz", "=", "{", "}", "\n", "for", "eval_name", ",", "res", "in", "eval_results", ".", "items", "(", ")", ":", "\n", "        ", "target_meter", "=", "evaluator", ".", "eval_meters", "[", "eval_name", "]", "\n", "if", "isinstance", "(", "target_meter", ",", "evalutils", ".", "EvalUtil", ")", ":", "\n", "# Filter out Nan pck curves", "\n", "            ", "if", "res", "[", "\"epe_mean\"", "]", "!=", "res", "[", "\"epe_mean\"", "]", ":", "\n", "                ", "continue", "\n", "", "eval_results_no_nans", "[", "eval_name", "]", "=", "res", "\n", "eval_results_for_viz", "[", "eval_name", "]", "=", "res", "\n", "\n", "", "", "samplevis", ".", "eval_vis", "(", "eval_results_for_viz", ",", "save_img_path", ",", "fig", "=", "fig", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "pickle_path", "=", "save_img_path", ".", "replace", "(", "\".png\"", ",", "\".pkl\"", ")", "\n", "with", "open", "(", "pickle_path", ",", "\"wb\"", ")", "as", "p_f", ":", "\n", "        ", "pickle", ".", "dump", "(", "eval_results_no_nans", ",", "p_f", ")", "\n", "\n", "", "return", "save_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.dump.distdump.summarize_dumper_list": [[1, 14], ["None"], "function", ["None"], ["def", "summarize_dumper_list", "(", "dumper_list", ",", "target_count", ")", ":", "\n", "    ", "total_count", "=", "0", "\n", "for", "dumper", "in", "dumper_list", ":", "\n", "        ", "total_count", "+=", "dumper", ".", "counter", "\n", "", "if", "total_count", "==", "target_count", ":", "\n", "        ", "msg", "=", "f\"OK: dumped {total_count}, target {target_count}\"", "\n", "color", "=", "\"green\"", "\n", "", "else", ":", "\n", "        ", "msg", "=", "f\"WARNING: dumped {total_count}, target {target_count}\\n\"", "\n", "msg", "+=", "\"WARNING: this is possibly caused by DDP bug \"", "\n", "msg", "+=", "\"(see pytorch issue https://github.com/pytorch/pytorch/issues/25162)\"", "\n", "color", "=", "\"red\"", "\n", "", "return", "msg", ",", "color", "\n", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.Dumper.__init__": [[30, 35], ["manopth.anchorutils.anchor_load", "manopth.anchorutils.get_rev_anchor_mapping"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dump_prefix", ",", "anchor_root", ")", ":", "\n", "        ", "self", ".", "dump_prefix", "=", "dump_prefix", "\n", "_", ",", "_", ",", "_", ",", "self", ".", "anchor_mapping", "=", "anchor_load", "(", "anchor_root", ")", "\n", "self", ".", "rev_anchor_mapping", "=", "get_rev_anchor_mapping", "(", "self", ".", "anchor_mapping", ")", "\n", "self", ".", "counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.Dumper.info": [[36, 39], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "info", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.Dumper.feed_and_dump": [[40, 43], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "feed_and_dump", "(", "self", ",", "sample", ",", "results", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrOfflineDumper.__init__": [[46, 49], ["dumper.Dumper.__init__"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dump_prefix", ",", "anchor_root", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dump_prefix", ",", "anchor_root", ")", "\n", "self", ".", "type", "=", "\"PicrOfflineDumper\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrOfflineDumper.info": [[50, 55], ["None"], "methods", ["None"], ["", "def", "info", "(", "self", ")", ":", "\n", "        ", "res", "=", "f\"{self.type}\\n\"", "\n", "res", "+=", "f\"  prefix: {self.dump_prefix}\\n\"", "\n", "res", "+=", "f\"  count: {self.counter}\"", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrOfflineDumper.feed_and_dump": [[56, 123], ["len", "results[].detach", "results[].detach", "results[].detach", "results[].detach", "torch.argmax", "range", "collate_mask[].bool", "filtered_vertex_contact.cpu.cpu.cpu", "filtered_contact_region.cpu.cpu.cpu", "filtered_anchor_elasti.cpu.cpu.cpu", "range", "os.path.join", "os.path.dirname", "os.makedirs", "sample_vertex_contact.bool", "sample_contact_in_image_mask.bool", "int", "sample_res.append", "open", "pickle.dump", "torch.sigmoid", "int", "len", "filtered_anchor_elasti[].tolist"], "methods", ["None"], ["", "def", "feed_and_dump", "(", "self", ",", "sample", ",", "results", ",", "vc_thresh", ")", ":", "\n", "# get sample identifier", "\n", "        ", "sample_identifier", "=", "sample", "[", "MetaQueries", ".", "SAMPLE_IDENTIFIER", "]", "\n", "n_sample", "=", "len", "(", "sample_identifier", ")", "\n", "collate_mask", "=", "sample", "[", "CollateQueries", ".", "PADDING_MASK", "]", "# TENSOR[B, N]", "\n", "\n", "# assert fields in results", "\n", "assert", "\"recov_vertex_contact\"", "in", "results", ",", "f\"{self.type}: vertex_contact not found\"", "\n", "assert", "\"recov_contact_region\"", "in", "results", ",", "f\"{self.type}: contact_region not found\"", "\n", "assert", "\"recov_anchor_elasti\"", "in", "results", ",", "f\"{self.type}: anchor_elasti not found\"", "\n", "recov_vertex_contact", "=", "results", "[", "\"recov_vertex_contact\"", "]", ".", "detach", "(", ")", "# TENSOR[B, N]", "\n", "recov_contact_in_image_mask", "=", "results", "[", "\"recov_contact_in_image_mask\"", "]", ".", "detach", "(", ")", "# TENSOR[B, N]", "\n", "recov_contact_region", "=", "results", "[", "\"recov_contact_region\"", "]", ".", "detach", "(", ")", "# TENSOR[B, N, 17]", "\n", "recov_anchor_elasti_pred", "=", "results", "[", "\"recov_anchor_elasti\"", "]", ".", "detach", "(", ")", "# TENSOR[B, N, 4]", "\n", "\n", "recov_vertex_contact_pred", "=", "(", "torch", ".", "sigmoid", "(", "recov_vertex_contact", ")", ">", "vc_thresh", ")", ".", "bool", "(", ")", "# TENSOR[B, N]", "\n", "recov_contact_region_pred", "=", "torch", ".", "argmax", "(", "recov_contact_region", ",", "dim", "=", "2", ")", "# TENSOR[B, N]", "\n", "\n", "# iterate over samples, assemble dump dict", "\n", "for", "idx", "in", "range", "(", "n_sample", ")", ":", "\n", "            ", "sample_id", "=", "sample_identifier", "[", "idx", "]", "\n", "sample_collate_mask", "=", "collate_mask", "[", "idx", ",", ":", "]", ".", "bool", "(", ")", "# TENSOR[N, ]", "\n", "\n", "sample_vertex_contact", "=", "recov_vertex_contact_pred", "[", "idx", ",", ":", "]", "# TENSOR[N, ]", "\n", "sample_contact_in_image_mask", "=", "recov_contact_in_image_mask", "[", "idx", ",", ":", "]", "# TENSOR[N, ]", "\n", "combined_vertex_contact", "=", "sample_vertex_contact", ".", "bool", "(", ")", "&", "sample_contact_in_image_mask", ".", "bool", "(", ")", "# TENSOR[N,]", "\n", "filtered_vertex_contact", "=", "combined_vertex_contact", "[", "sample_collate_mask", "]", "# TENSOR[X, ]", "\n", "\n", "sample_contact_region", "=", "recov_contact_region_pred", "[", "idx", ",", ":", "]", "# TENSOR[N, ]", "\n", "filtered_contact_region", "=", "sample_contact_region", "[", "sample_collate_mask", "]", "# TENSOR[X, ]", "\n", "sample_anchor_elasti", "=", "recov_anchor_elasti_pred", "[", "idx", ",", ":", ",", ":", "]", "# TENSOR[N, 4]", "\n", "filtered_anchor_elasti", "=", "sample_anchor_elasti", "[", "sample_collate_mask", ",", ":", "]", "# TENSOR[X, 4]", "\n", "\n", "# transport from cuda to cpu", "\n", "filtered_vertex_contact", "=", "filtered_vertex_contact", ".", "cpu", "(", ")", "\n", "filtered_contact_region", "=", "filtered_contact_region", ".", "cpu", "(", ")", "\n", "filtered_anchor_elasti", "=", "filtered_anchor_elasti", ".", "cpu", "(", ")", "\n", "\n", "# iterate over all points", "\n", "sample_res", "=", "[", "]", "\n", "n_points", "=", "filtered_vertex_contact", ".", "shape", "[", "0", "]", "# X", "\n", "for", "p_idx", "in", "range", "(", "n_points", ")", ":", "\n", "                ", "p_contact", "=", "int", "(", "filtered_vertex_contact", "[", "p_idx", "]", ")", "\n", "if", "p_contact", "==", "0", ":", "\n", "                    ", "p_res", "=", "{", "\n", "\"contact\"", ":", "0", ",", "\n", "}", "\n", "", "else", ":", "# p_contact == 1", "\n", "                    ", "p_region", "=", "int", "(", "filtered_contact_region", "[", "p_idx", "]", ")", "\n", "p_anchor_id", "=", "self", ".", "rev_anchor_mapping", "[", "p_region", "]", "\n", "p_n_anchor", "=", "len", "(", "p_anchor_id", ")", "\n", "p_anchor_elasti", "=", "filtered_anchor_elasti", "[", "p_idx", ",", ":", "p_n_anchor", "]", ".", "tolist", "(", ")", "\n", "p_res", "=", "{", "\n", "\"contact\"", ":", "1", ",", "\n", "\"region\"", ":", "p_region", ",", "\n", "\"anchor_id\"", ":", "p_anchor_id", ",", "\n", "\"anchor_elasti\"", ":", "p_anchor_elasti", ",", "\n", "}", "\n", "", "sample_res", ".", "append", "(", "p_res", ")", "\n", "\n", "# save sample_res", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dump_prefix", ",", "f\"{sample_id}.pkl\"", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "dirname", "(", "save_path", ")", "\n", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "save_path", ",", "\"wb\"", ")", "as", "fstream", ":", "\n", "                ", "pickle", ".", "dump", "(", "sample_res", ",", "fstream", ")", "\n", "", "self", ".", "counter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.__init__": [[126, 138], ["dumper.Dumper.__init__"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dump_prefix", ",", "anchor_root", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dump_prefix", ",", "anchor_root", ")", "\n", "self", ".", "type", "=", "\"PicrDumper\"", "\n", "self", ".", "honet_fields", "=", "[", "\n", "\"hand_tsl\"", ",", "\n", "\"hand_joints_3d\"", ",", "\n", "\"hand_verts_3d\"", ",", "\n", "\"hand_full_pose\"", ",", "\n", "\"hand_shape\"", ",", "\n", "\"obj_tsl\"", ",", "\n", "\"obj_rot\"", ",", "\n", "\"obj_verts_3d\"", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info": [[140, 145], ["None"], "methods", ["None"], ["", "def", "info", "(", "self", ")", ":", "\n", "        ", "res", "=", "f\"{self.type}\\n\"", "\n", "res", "+=", "f\"  prefix: {self.dump_prefix}\\n\"", "\n", "res", "+=", "f\"  count: {self.counter}\"", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.feed_and_dump": [[146, 232], ["len", "results[].detach", "results[].detach", "results[].detach", "results[].detach", "torch.argmax", "range", "collate_mask[].bool", "filtered_vertex_contact.cpu.cpu.cpu", "filtered_contact_region.cpu.cpu.cpu", "filtered_anchor_elasti.cpu.cpu.cpu", "range", "os.path.join", "os.path.dirname", "os.makedirs", "os.path.join", "sample_vertex_contact.bool", "sample_contact_in_image_mask.bool", "int", "sample_res.append", "open", "pickle.dump", "[].detach().cpu().numpy", "open", "pickle.dump", "torch.sigmoid", "int", "len", "filtered_anchor_elasti[].tolist", "[].detach().cpu().numpy", "[].detach().cpu", "[].detach().cpu", "[].detach", "[].detach"], "methods", ["None"], ["", "def", "feed_and_dump", "(", "self", ",", "sample", ",", "results", ",", "vc_thresh", ")", ":", "\n", "# get sample identifier", "\n", "        ", "sample_identifier", "=", "sample", "[", "MetaQueries", ".", "SAMPLE_IDENTIFIER", "]", "\n", "n_sample", "=", "len", "(", "sample_identifier", ")", "\n", "collate_mask", "=", "sample", "[", "CollateQueries", ".", "PADDING_MASK", "]", "# TENSOR[B, N]", "\n", "\n", "# ====== assert fields in results: contact related", "\n", "assert", "\"recov_vertex_contact\"", "in", "results", ",", "f\"{self.type}: vertex_contact not found\"", "\n", "assert", "\"recov_contact_region\"", "in", "results", ",", "f\"{self.type}: contact_region not found\"", "\n", "assert", "\"recov_anchor_elasti\"", "in", "results", ",", "f\"{self.type}: anchor_elasti not found\"", "\n", "recov_vertex_contact", "=", "results", "[", "\"recov_vertex_contact\"", "]", ".", "detach", "(", ")", "# TENSOR[B, N]", "\n", "recov_contact_in_image_mask", "=", "results", "[", "\"recov_contact_in_image_mask\"", "]", ".", "detach", "(", ")", "# TENSOR[B, N]", "\n", "recov_contact_region", "=", "results", "[", "\"recov_contact_region\"", "]", ".", "detach", "(", ")", "# TENSOR[B, N, 17]", "\n", "recov_anchor_elasti_pred", "=", "results", "[", "\"recov_anchor_elasti\"", "]", ".", "detach", "(", ")", "# TENSOR[B, N, 4]", "\n", "\n", "recov_vertex_contact_pred", "=", "(", "torch", ".", "sigmoid", "(", "recov_vertex_contact", ")", ">", "vc_thresh", ")", ".", "bool", "(", ")", "# TENSOR[B, N]", "\n", "recov_contact_region_pred", "=", "torch", ".", "argmax", "(", "recov_contact_region", ",", "dim", "=", "2", ")", "# TENSOR[B, N]", "\n", "\n", "# ====== assert fields in results: honet related", "\n", "for", "field", "in", "self", ".", "honet_fields", ":", "\n", "            ", "assert", "field", "in", "results", ",", "f\"{self.type}: {field} not found\"", "\n", "\n", "# iterate over samples, assemble dump dict", "\n", "", "for", "idx", "in", "range", "(", "n_sample", ")", ":", "\n", "            ", "sample_id", "=", "sample_identifier", "[", "idx", "]", "\n", "\n", "# ==================== dump contact related info >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "sample_collate_mask", "=", "collate_mask", "[", "idx", ",", ":", "]", ".", "bool", "(", ")", "# TENSOR[N, ]", "\n", "sample_vertex_contact", "=", "recov_vertex_contact_pred", "[", "idx", ",", ":", "]", "# TENSOR[N, ]", "\n", "sample_contact_in_image_mask", "=", "recov_contact_in_image_mask", "[", "idx", ",", ":", "]", "# TENSOR[N, ]", "\n", "combined_vertex_contact", "=", "sample_vertex_contact", ".", "bool", "(", ")", "&", "sample_contact_in_image_mask", ".", "bool", "(", ")", "# TENSOR[N,]", "\n", "filtered_vertex_contact", "=", "combined_vertex_contact", "[", "sample_collate_mask", "]", "# TENSOR[X, ]", "\n", "\n", "sample_contact_region", "=", "recov_contact_region_pred", "[", "idx", ",", ":", "]", "# TENSOR[N, ]", "\n", "filtered_contact_region", "=", "sample_contact_region", "[", "sample_collate_mask", "]", "# TENSOR[X, ]", "\n", "sample_anchor_elasti", "=", "recov_anchor_elasti_pred", "[", "idx", ",", ":", ",", ":", "]", "# TENSOR[N, 4]", "\n", "filtered_anchor_elasti", "=", "sample_anchor_elasti", "[", "sample_collate_mask", ",", ":", "]", "# TENSOR[X, 4]", "\n", "\n", "# transport from cuda to cpu", "\n", "filtered_vertex_contact", "=", "filtered_vertex_contact", ".", "cpu", "(", ")", "\n", "filtered_contact_region", "=", "filtered_contact_region", ".", "cpu", "(", ")", "\n", "filtered_anchor_elasti", "=", "filtered_anchor_elasti", ".", "cpu", "(", ")", "\n", "\n", "# iterate over all points", "\n", "sample_res", "=", "[", "]", "\n", "n_points", "=", "filtered_vertex_contact", ".", "shape", "[", "0", "]", "# X", "\n", "for", "p_idx", "in", "range", "(", "n_points", ")", ":", "\n", "                ", "p_contact", "=", "int", "(", "filtered_vertex_contact", "[", "p_idx", "]", ")", "\n", "if", "p_contact", "==", "0", ":", "\n", "                    ", "p_res", "=", "{", "\n", "\"contact\"", ":", "0", ",", "\n", "}", "\n", "", "else", ":", "# p_contact == 1", "\n", "                    ", "p_region", "=", "int", "(", "filtered_contact_region", "[", "p_idx", "]", ")", "\n", "p_anchor_id", "=", "self", ".", "rev_anchor_mapping", "[", "p_region", "]", "\n", "p_n_anchor", "=", "len", "(", "p_anchor_id", ")", "\n", "p_anchor_elasti", "=", "filtered_anchor_elasti", "[", "p_idx", ",", ":", "p_n_anchor", "]", ".", "tolist", "(", ")", "\n", "p_res", "=", "{", "\n", "\"contact\"", ":", "1", ",", "\n", "\"region\"", ":", "p_region", ",", "\n", "\"anchor_id\"", ":", "p_anchor_id", ",", "\n", "\"anchor_elasti\"", ":", "p_anchor_elasti", ",", "\n", "}", "\n", "", "sample_res", ".", "append", "(", "p_res", ")", "\n", "\n", "# save sample_res", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dump_prefix", ",", "f\"{sample_id}_contact.pkl\"", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "dirname", "(", "save_path", ")", "\n", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "save_path", ",", "\"wb\"", ")", "as", "fstream", ":", "\n", "                ", "pickle", ".", "dump", "(", "sample_res", ",", "fstream", ")", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ==================== dump honet related info >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "", "honet_res", "=", "{", "}", "\n", "for", "field", "in", "self", ".", "honet_fields", ":", "\n", "                ", "if", "field", "in", "[", "\"obj_verts_3d\"", "]", ":", "\n", "                    ", "honet_res", "[", "field", "]", "=", "results", "[", "field", "]", "[", "idx", ",", "...", "]", "[", "sample_collate_mask", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "honet_res", "[", "field", "]", "=", "results", "[", "field", "]", "[", "idx", ",", "...", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "honet_res", "[", "\"image_path\"", "]", "=", "sample", "[", "BaseQueries", ".", "IMAGE_PATH", "]", "[", "idx", "]", "\n", "honet_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dump_prefix", ",", "f\"{sample_id}_honet.pkl\"", ")", "\n", "with", "open", "(", "honet_save_path", ",", "\"wb\"", ")", "as", "fstream", ":", "\n", "                ", "pickle", ".", "dump", "(", "honet_res", ",", "fstream", ")", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "", "self", ".", "counter", "+=", "1", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.__init__": [[23, 120], ["hocontact.HOdata.__init__", "os.path.normpath", "os.path.normpath", "os.path.normpath", "os.path.normpath", "numpy.array", "ho3d.HO3D.all_queries.update", "hocontact.hodatasets.hoquery.get_trans_queries", "ho3d.HO3D.all_queries.update", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hoquery.get_trans_queries", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_root", "=", "\"data\"", ",", "\n", "data_split", "=", "\"train\"", ",", "\n", "njoints", "=", "21", ",", "\n", "use_cache", "=", "True", ",", "\n", "enable_contact", "=", "False", ",", "\n", "filter_no_contact", "=", "True", ",", "\n", "filter_thresh", "=", "10.0", ",", "\n", "mini_factor", "=", "1.0", ",", "\n", "center_idx", "=", "9", ",", "\n", "scale_jittering", "=", "0.0", ",", "\n", "center_jittering", "=", "0.0", ",", "\n", "block_rot", "=", "False", ",", "\n", "max_rot", "=", "0.0", "*", "np", ".", "pi", ",", "\n", "hue", "=", "0.15", ",", "\n", "saturation", "=", "0.5", ",", "\n", "contrast", "=", "0.5", ",", "\n", "brightness", "=", "0.5", ",", "\n", "blur_radius", "=", "0.5", ",", "\n", "query", "=", "None", ",", "\n", "sides", "=", "\"right\"", ",", "\n", "# *======== HO3D >>>>>>>>>>>>>>>>>>", "\n", "split_mode", "=", "\"objects\"", ",", "\n", "like_v1", "=", "True", ",", "\n", "full_image", "=", "True", ",", "\n", "full_sequences", "=", "False", ",", "\n", "contact_pad_vertex", "=", "True", ",", "\n", "contact_pad_anchor", "=", "True", ",", "\n", "contact_range_th", "=", "1000.0", ",", "\n", "contact_elasti_th", "=", "0.00", ",", "\n", "load_objects_reduced", "=", "False", ",", "\n", "load_objects_color", "=", "False", ",", "\n", "load_objects_voxel", "=", "False", ",", "\n", "# *<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "data_root", ",", "\n", "data_split", ",", "\n", "njoints", ",", "\n", "use_cache", ",", "\n", "filter_no_contact", ",", "\n", "filter_thresh", ",", "\n", "mini_factor", ",", "\n", "center_idx", ",", "\n", "scale_jittering", ",", "\n", "center_jittering", ",", "\n", "block_rot", ",", "\n", "max_rot", ",", "\n", "hue", ",", "\n", "saturation", ",", "\n", "contrast", ",", "\n", "brightness", ",", "\n", "blur_radius", ",", "\n", "query", ",", "\n", "sides", ",", "\n", ")", "\n", "self", ".", "name", "=", "\"HO3D\"", "\n", "self", ".", "split_mode", "=", "split_mode", "\n", "self", ".", "like_v1", "=", "like_v1", "\n", "self", ".", "full_image", "=", "full_image", "\n", "self", ".", "full_sequences", "=", "full_sequences", "\n", "self", ".", "load_objects_reduced", "=", "load_objects_reduced", "\n", "self", ".", "load_objects_color", "=", "load_objects_color", "\n", "self", ".", "load_objects_voxel", "=", "load_objects_voxel", "\n", "self", ".", "enable_contact", "=", "enable_contact", "\n", "\n", "self", ".", "image_size", "=", "[", "640", ",", "480", "]", "\n", "self", ".", "inp_res", "=", "self", ".", "image_size", "\n", "self", ".", "root_extra_info", "=", "os", ".", "path", ".", "normpath", "(", "\"assets\"", ")", "\n", "\n", "self", ".", "contact_pad_vertex", "=", "contact_pad_vertex", "\n", "self", ".", "contact_pad_anchor", "=", "contact_pad_anchor", "\n", "self", ".", "contact_range_th", "=", "contact_range_th", "\n", "self", ".", "contact_elasti_th", "=", "contact_elasti_th", "\n", "\n", "self", ".", "reorder_idxs", "=", "np", ".", "array", "(", "[", "0", ",", "13", ",", "14", ",", "15", ",", "16", ",", "1", ",", "2", ",", "3", ",", "17", ",", "4", ",", "5", ",", "6", ",", "18", ",", "10", ",", "11", ",", "12", ",", "19", ",", "7", ",", "8", ",", "9", ",", "20", "]", ")", "\n", "\n", "self", ".", "all_queries", ".", "update", "(", "\n", "{", "\n", "BaseQueries", ".", "OBJ_VIS_2D", ",", "\n", "BaseQueries", ".", "OBJ_CORNERS_2D", ",", "\n", "BaseQueries", ".", "OBJ_CORNERS_3D", ",", "\n", "BaseQueries", ".", "OBJ_CAN_CORNERS", ",", "\n", "BaseQueries", ".", "OBJ_FACES", ",", "\n", "BaseQueries", ".", "HAND_VIS_2D", ",", "\n", "}", "\n", ")", "\n", "trans_queries", "=", "get_trans_queries", "(", "self", ".", "all_queries", ")", "\n", "self", ".", "all_queries", ".", "update", "(", "trans_queries", ")", "\n", "\n", "# Fix dataset split", "\n", "valid_splits", "=", "[", "\"train\"", ",", "\"trainval\"", ",", "\"val\"", ",", "\"test\"", ",", "\"all\"", ",", "\"all_all\"", "]", "\n", "assert", "self", ".", "data_split", "in", "valid_splits", ",", "\"{} not in {}\"", ".", "format", "(", "self", ".", "data_split", ",", "valid_splits", ")", "\n", "\n", "self", ".", "cam_extr", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "-", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "-", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "# this camera extrinsic has no translation", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D._preload": [[123, 138], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "round"], "methods", ["None"], ["", "def", "_preload", "(", "self", ")", ":", "\n", "# ! ALL PATH SETTING SHOULD IN THIS PRE-LOAD", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "name", ")", "\n", "self", ".", "root_supp", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "f\"{self.name}_supp\"", ")", "\n", "\n", "self", ".", "cache_path", "=", "os", ".", "path", ".", "join", "(", "\"common\"", ",", "\"cache\"", ",", "self", ".", "name", ")", "\n", "self", ".", "cache_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "cache_path", ",", "\n", "f\"{self.data_split}_{self.split_mode}_mf{round(self.mini_factor)}\"", "\n", "f\"_likev1{''if self.like_v1 else '(x)'}\"", "\n", "f\"_fct{self.filter_thresh if self.filter_no_contact else '(x)'}\"", "\n", "f\"_ec{'' if self.enable_contact else '(x)'}\"", "\n", "f\".pkl\"", ",", "\n", ")", "\n", "self", ".", "reduce_factor", "=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.load_dataset": [[139, 196], ["ho3d.HO3D._preload", "hocontact.hodatasets.ho3dutils.load_objects", "hocontact.hodatasets.ho3dutils.load_obj_normals", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "numpy.loadtxt", "ho3d.HO3D.get_n_hand_palm_vert", "hocontact.utils.logger.logger.info", "hocontact.utils.logger.logger.warn", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "hocontact.hodatasets.ho3dutils.get_object_seqs", "hocontact.utils.logger.logger.info", "ho3d.HO3D.load_seq_frames", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "hocontact.utils.logger.logger.info", "ho3d.HO3D.load_annots", "hocontact.utils.logger.logger.info", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "manopth.anchorutils.anchor_load_driver", "hocontact.hodatasets.ho3dutils.load_objects_reduced", "hocontact.hodatasets.ho3dutils.load_objects_voxel", "ho3d.HO3D.load_seq_frames", "hocontact.utils.logger.logger.info", "open", "pickle.load", "open", "pickle.dump", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "hocontact.hodatasets.ho3dutils.get_offi_frames", "hocontact.utils.logger.logger.info", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB._preload", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.load_objects", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.load_obj_normals", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_n_hand_palm_vert", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.get_object_seqs", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.load_seq_frames", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.load_annots", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.load_objects_reduced", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.load_objects_voxel", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.load_seq_frames", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.get_offi_frames", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info"], ["", "def", "load_dataset", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_preload", "(", ")", "\n", "self", ".", "obj_meshes", "=", "ho3dutils", ".", "load_objects", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\"YCB_models_supp\"", ")", ")", "\n", "self", ".", "obj_normals", "=", "ho3dutils", ".", "load_obj_normals", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\"YCB_models_supp\"", ")", ")", "\n", "\n", "cache_folder", "=", "os", ".", "path", ".", "dirname", "(", "self", ".", "cache_path", ")", "\n", "os", ".", "makedirs", "(", "cache_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "self", ".", "split_mode", "==", "\"objects\"", ":", "\n", "            ", "seqs", ",", "subfolder", "=", "ho3dutils", ".", "get_object_seqs", "(", "self", ".", "data_split", ",", "self", ".", "like_v1", ",", "self", ".", "name", ")", "\n", "logger", ".", "info", "(", "f\"{self.name} {self.data_split} set has sequence {seqs}\"", ",", "\"yellow\"", ")", "\n", "seq_frames", ",", "subfolder", "=", "self", ".", "load_seq_frames", "(", "subfolder", ",", "seqs", ")", "\n", "", "elif", "self", ".", "split_mode", "==", "\"paper\"", ":", "\n", "            ", "seq_frames", ",", "subfolder", "=", "self", ".", "load_seq_frames", "(", ")", "\n", "logger", ".", "info", "(", "f\"{self.name} {self.data_split} set has frames {len(seq_frames)}\"", ",", "\"yellow\"", ")", "\n", "", "elif", "self", ".", "split_mode", "==", "\"official\"", ":", "\n", "            ", "seq_frames", ",", "subfolder", "=", "ho3dutils", ".", "get_offi_frames", "(", "self", ".", "name", ",", "self", ".", "data_split", ",", "self", ".", "root", ")", "\n", "logger", ".", "info", "(", "f\"{self.name} {self.data_split} set has frames {len(seq_frames)}\"", ",", "\"yellow\"", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "cache_path", ")", "and", "self", ".", "use_cache", ":", "\n", "            ", "with", "open", "(", "self", ".", "cache_path", ",", "\"rb\"", ")", "as", "p_f", ":", "\n", "                ", "annotations", "=", "pickle", ".", "load", "(", "p_f", ")", "\n", "", "logger", ".", "info", "(", "f\"Loaded cache information for dataset {self.name} from {self.cache_path}\"", ")", "\n", "", "else", ":", "\n", "            ", "seq_map", ",", "idxs", "=", "self", ".", "load_annots", "(", "obj_meshes", "=", "self", ".", "obj_meshes", ",", "seq_frames", "=", "seq_frames", ",", "subfolder", "=", "subfolder", ")", "\n", "\n", "annotations", "=", "{", "\n", "\"idxs\"", ":", "idxs", ",", "\n", "\"seq_map\"", ":", "seq_map", ",", "\n", "}", "\n", "\n", "with", "open", "(", "self", ".", "cache_path", ",", "\"wb\"", ")", "as", "p_f", ":", "\n", "                ", "pickle", ".", "dump", "(", "annotations", ",", "p_f", ")", "\n", "", "logger", ".", "info", "(", "\"Wrote cache for dataset {} to {}\"", ".", "format", "(", "self", ".", "name", ",", "self", ".", "cache_path", ")", ",", "\"yellow\"", ")", "\n", "\n", "", "self", ".", "idxs", "=", "annotations", "[", "\"idxs\"", "]", "\n", "self", ".", "seq_map", "=", "annotations", "[", "\"seq_map\"", "]", "\n", "self", ".", "hand_palm_vertex_index", "=", "np", ".", "loadtxt", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_extra_info", ",", "\"hand_palm_full.txt\"", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "self", ".", "n_palm_vert", "=", "self", ".", "get_n_hand_palm_vert", "(", "0", ")", "\n", "if", "self", ".", "enable_contact", ":", "\n", "            ", "(", "\n", "self", ".", "anchor_face_vertex_index", ",", "\n", "self", ".", "anchor_weights", ",", "\n", "self", ".", "hand_vertex_merged_assignment", ",", "\n", "self", ".", "anchor_mapping", ",", "\n", ")", "=", "anchor_load_driver", "(", "self", ".", "root_extra_info", ")", "\n", "\n", "", "if", "self", ".", "load_objects_reduced", ":", "\n", "            ", "self", ".", "obj_meshes_reduced", "=", "ho3dutils", ".", "load_objects_reduced", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\"YCB_models_supp\"", ")", ")", "\n", "", "if", "self", ".", "load_objects_voxel", ":", "\n", "            ", "self", ".", "obj_voxels", "=", "ho3dutils", ".", "load_objects_voxel", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\"YCB_models_supp\"", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "f\"{self.name} Got {len(self)} samples for data_split {self.data_split}\"", ")", "\n", "logger", ".", "warn", "(", "f\"Got {len(self)} samples for data_split {self.data_split}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.load_seq_frames": [[197, 229], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "f.readlines", "line.strip().split", "sorted", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "range", "line.strip", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "seq_frames.append"], "methods", ["None"], ["", "def", "load_seq_frames", "(", "self", ",", "subfolder", "=", "None", ",", "seqs", "=", "None", ",", "trainval_idx", "=", "6000", ")", ":", "\n", "        ", "\"\"\"\n        trainval_idx (int): How many frames to include in training split when\n                using trainval/val/test split\n        \"\"\"", "\n", "if", "self", ".", "split_mode", "==", "\"paper\"", ":", "\n", "            ", "if", "self", ".", "data_split", "in", "[", "\"train\"", ",", "\"trainval\"", ",", "\"val\"", "]", ":", "\n", "                ", "info_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"train.txt\"", ")", "\n", "subfolder", "=", "\"train\"", "\n", "", "elif", "self", ".", "data_split", "==", "\"test\"", ":", "\n", "                ", "info_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"evaluation.txt\"", ")", "\n", "subfolder", "=", "\"evaluation\"", "\n", "", "else", ":", "\n", "                ", "assert", "False", "\n", "", "with", "open", "(", "info_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "seq_frames", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "\"/\"", ")", "for", "line", "in", "lines", "]", "\n", "if", "self", ".", "data_split", "==", "\"trainval\"", ":", "\n", "                ", "seq_frames", "=", "seq_frames", "[", ":", "trainval_idx", "]", "\n", "", "elif", "self", ".", "data_split", "==", "\"val\"", ":", "\n", "                ", "seq_frames", "=", "seq_frames", "[", "trainval_idx", ":", "]", "\n", "", "", "elif", "self", ".", "split_mode", "==", "\"objects\"", ":", "\n", "            ", "seq_frames", "=", "[", "]", "\n", "for", "seq", "in", "sorted", "(", "seqs", ")", ":", "\n", "                ", "seq_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "subfolder", ",", "seq", ")", "\n", "meta_folder", "=", "os", ".", "path", ".", "join", "(", "seq_folder", ",", "\"meta\"", ")", "\n", "img_nb", "=", "len", "(", "os", ".", "listdir", "(", "meta_folder", ")", ")", "\n", "for", "img_idx", "in", "range", "(", "img_nb", ")", ":", "\n", "                    ", "seq_frames", ".", "append", "(", "[", "seq", ",", "f\"{img_idx:04d}\"", "]", ")", "\n", "", "", "", "else", ":", "\n", "            ", "assert", "False", "\n", "", "return", "seq_frames", ",", "subfolder", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.load_annots": [[230, 276], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.loadtxt", "collections.defaultdict", "collections.defaultdict", "enumerate", "tqdm.tqdm.tqdm", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "seq_map[].append", "idxs.append", "open", "pickle.load", "int", "round", "[].repeat", "numpy.zeros", "numpy.zeros", "hocontact.hodatasets.ho3dutils.min_contact_dis"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.min_contact_dis"], ["", "def", "load_annots", "(", "self", ",", "obj_meshes", "=", "{", "}", ",", "seq_frames", "=", "[", "]", ",", "subfolder", "=", "\"train\"", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            split (str): HO3DV2 split in [train|trainval|val|test]\n                train = trainval U(nion) val\n            rand_size (int): synthetic data counts\n                will be 0 if you want to use the vanilla data\n        \"\"\"", "\n", "\n", "vhand_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_extra_info", ",", "\"hand_palm_full.txt\"", ")", "\n", "vid", "=", "np", ".", "loadtxt", "(", "vhand_path", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "idxs", "=", "[", "]", "\n", "seq_map", "=", "defaultdict", "(", "list", ")", "\n", "seq_counts", "=", "defaultdict", "(", "int", ")", "\n", "for", "idx_count", ",", "(", "seq", ",", "frame_idx", ")", "in", "enumerate", "(", "tqdm", "(", "seq_frames", ")", ")", ":", "\n", "            ", "if", "int", "(", "frame_idx", ")", "%", "round", "(", "self", ".", "mini_factor", ")", "!=", "0", ":", "\n", "                ", "continue", "\n", "", "seq_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "subfolder", ",", "seq", ")", "\n", "meta_folder", "=", "os", ".", "path", ".", "join", "(", "seq_folder", ",", "\"meta\"", ")", "\n", "rgb_folder", "=", "os", ".", "path", ".", "join", "(", "seq_folder", ",", "\"rgb\"", ")", "\n", "\n", "meta_path", "=", "os", ".", "path", ".", "join", "(", "meta_folder", ",", "f\"{frame_idx}.pkl\"", ")", "\n", "\n", "with", "open", "(", "meta_path", ",", "\"rb\"", ")", "as", "p_f", ":", "\n", "                ", "annot", "=", "pickle", ".", "load", "(", "p_f", ")", "\n", "if", "annot", "[", "\"handJoints3D\"", "]", ".", "size", "==", "3", ":", "\n", "                    ", "annot", "[", "\"handTrans\"", "]", "=", "annot", "[", "\"handJoints3D\"", "]", "\n", "annot", "[", "\"handJoints3D\"", "]", "=", "annot", "[", "\"handJoints3D\"", "]", "[", "np", ".", "newaxis", ",", ":", "]", ".", "repeat", "(", "21", ",", "0", ")", "\n", "annot", "[", "\"handPose\"", "]", "=", "np", ".", "zeros", "(", "48", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "annot", "[", "\"handBeta\"", "]", "=", "np", ".", "zeros", "(", "10", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# filter no contact", "\n", "", "", "if", "self", ".", "filter_no_contact", "and", "ho3dutils", ".", "min_contact_dis", "(", "annot", ",", "obj_meshes", ",", "vid", ")", ">", "self", ".", "filter_thresh", ":", "\n", "                ", "continue", "\n", "\n", "# ? this is the vanilla data", "\n", "", "img_path", "=", "os", ".", "path", ".", "join", "(", "rgb_folder", ",", "f\"{frame_idx}.png\"", ")", "\n", "annot", "[", "\"img\"", "]", "=", "img_path", "\n", "annot", "[", "\"frame_idx\"", "]", "=", "frame_idx", "\n", "\n", "seq_map", "[", "seq", "]", ".", "append", "(", "annot", ")", "\n", "idxs", ".", "append", "(", "(", "seq", ",", "seq_counts", "[", "seq", "]", ")", ")", "\n", "seq_counts", "[", "seq", "]", "+=", "1", "\n", "\n", "", "return", "seq_map", ",", "idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_seq_frame": [[277, 282], ["None"], "methods", ["None"], ["", "def", "get_seq_frame", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "frame_idx", "=", "annot", "[", "\"frame_idx\"", "]", "\n", "return", "seq", ",", "frame_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_image_path": [[283, 287], ["None"], "methods", ["None"], ["", "def", "get_image_path", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "img_path", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "[", "\"img\"", "]", "\n", "return", "img_path", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_image": [[288, 292], ["ho3d.HO3D.get_image_path", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_image_path"], ["", "def", "get_image", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_path", "=", "self", ".", "get_image_path", "(", "idx", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_joint_vis": [[293, 295], ["numpy.ones"], "methods", ["None"], ["", "def", "get_joint_vis", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "np", ".", "ones", "(", "self", ".", "njoints", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_joints2d": [[296, 300], ["ho3d.HO3D.get_joints3d", "ho3d.HO3D.get_cam_intr", "ho3d.HO3D.project"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_joints3d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_cam_intr", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.project"], ["", "def", "get_joints2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "joints3d", "=", "self", ".", "get_joints3d", "(", "idx", ")", "\n", "cam_intr", "=", "self", ".", "get_cam_intr", "(", "idx", ")", "\n", "return", "self", ".", "project", "(", "joints3d", ",", "cam_intr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_joints3d": [[301, 308], ["ho3d.HO3D.cam_extr[].dot().transpose", "ho3d.HO3D.astype", "ho3d.HO3D.cam_extr[].dot", "ho3d.HO3D.transpose"], "methods", ["None"], ["", "def", "get_joints3d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "joints3d", "=", "annot", "[", "\"handJoints3D\"", "]", "\n", "joints3d", "=", "self", ".", "cam_extr", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "joints3d", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "joints3d", "=", "joints3d", "[", "self", ".", "reorder_idxs", "]", "\n", "return", "joints3d", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_textures": [[309, 315], ["None"], "methods", ["None"], ["", "def", "get_obj_textures", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "obj_id", "=", "annot", "[", "\"objName\"", "]", "\n", "textures", "=", "self", ".", "obj_meshes", "[", "obj_id", "]", "[", "\"textures\"", "]", "\n", "return", "textures", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D._ho3d_get_hand_info": [[316, 330], ["None"], "methods", ["None"], ["", "def", "_ho3d_get_hand_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Get the hand annotation in the raw ho3d datasets.\n        !!! This Mehthods shoudln't be called outside.\n        :param idx:\n        :return: raw hand pose, translate and shape coefficients\n        \"\"\"", "\n", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "# Retrieve hand info", "\n", "handpose", "=", "annot", "[", "\"handPose\"", "]", "\n", "handtsl", "=", "annot", "[", "\"handTrans\"", "]", "\n", "handshape", "=", "annot", "[", "\"handBeta\"", "]", "\n", "return", "handpose", ",", "handtsl", ",", "handshape", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_hand_verts3d": [[331, 340], ["ho3d.HO3D._ho3d_get_hand_info", "ho3d.HO3D.layer", "ho3d.HO3D.cam_extr[].dot().transpose", "ho3d.HO3D.astype", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "handverts[].numpy", "ho3d.HO3D.cam_extr[].dot", "torch.from_numpy", "torch.from_numpy", "handverts.transpose"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D._ho3d_get_hand_info"], ["", "def", "get_hand_verts3d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "_handpose", ",", "_handtsl", ",", "_handshape", "=", "self", ".", "_ho3d_get_hand_info", "(", "idx", ")", "\n", "handverts", ",", "handjoints", "=", "self", ".", "layer", "(", "\n", "torch", ".", "from_numpy", "(", "_handpose", ")", ".", "unsqueeze", "(", "0", ")", ",", "torch", ".", "from_numpy", "(", "_handshape", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", ")", "\n", "# important modify!!!!", "\n", "handverts", "=", "handverts", "[", "0", "]", ".", "numpy", "(", ")", "+", "_handtsl", "\n", "transf_handverts", "=", "self", ".", "cam_extr", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "handverts", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "return", "transf_handverts", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_hand_verts2d": [[341, 346], ["ho3d.HO3D.get_hand_verts3d", "ho3d.HO3D.get_cam_intr", "ho3d.HO3D.project"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_verts3d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_cam_intr", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.project"], ["", "def", "get_hand_verts2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "verts3d", "=", "self", ".", "get_hand_verts3d", "(", "idx", ")", "\n", "cam_intr", "=", "self", ".", "get_cam_intr", "(", "idx", ")", "\n", "verts2d", "=", "self", ".", "project", "(", "verts3d", ",", "cam_intr", ")", "\n", "return", "verts2d", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_hand_faces": [[347, 350], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "get_hand_faces", "(", "self", ",", "idx", ")", ":", "\n", "        ", "faces", "=", "np", ".", "array", "(", "self", ".", "layer", ".", "th_faces", ")", ".", "astype", "(", "np", ".", "long", ")", "\n", "return", "faces", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_faces": [[351, 358], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "get_obj_faces", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "obj_id", "=", "annot", "[", "\"objName\"", "]", "\n", "objfaces", "=", "self", ".", "obj_meshes", "[", "obj_id", "]", "[", "\"faces\"", "]", "\n", "objfaces", "=", "np", ".", "array", "(", "objfaces", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "return", "objfaces", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_normal": [[359, 366], ["obj_normal.astype", "numpy.array"], "methods", ["None"], ["", "def", "get_obj_normal", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "obj_id", "=", "annot", "[", "\"objName\"", "]", "\n", "obj_normal", "=", "self", ".", "obj_normals", "[", "obj_id", "]", "\n", "obj_normal", "=", "(", "self", ".", "cam_extr", "[", ":", "3", ",", ":", "3", "]", "@", "np", ".", "array", "(", "obj_normal", ")", ".", "T", ")", ".", "T", "\n", "return", "obj_normal", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_name": [[367, 371], ["None"], "methods", ["None"], ["", "def", "get_obj_name", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "return", "annot", "[", "\"objName\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_verts_can": [[372, 382], ["ho3d.HO3D.cam_extr[].dot().transpose", "hocontact.utils.meshutils.center_vert_bbox", "ho3d.HO3D.cam_extr[].dot", "ho3d.HO3D.transpose"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.meshutils.center_vert_bbox"], ["", "def", "get_obj_verts_can", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "obj_id", "=", "annot", "[", "\"objName\"", "]", "\n", "verts", "=", "self", ".", "obj_meshes", "[", "obj_id", "]", "[", "\"verts\"", "]", "\n", "verts", "=", "self", ".", "cam_extr", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "verts", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "# NOTE: verts_can = verts - bbox_center", "\n", "verts_can", ",", "bbox_center", ",", "bbox_scale", "=", "meshutils", ".", "center_vert_bbox", "(", "verts", ",", "scale", "=", "False", ")", "# !! CENTERED HERE", "\n", "return", "verts_can", ",", "bbox_center", ",", "bbox_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_full_color_can": [[384, 394], ["ho3d.HO3D.cam_extr[].dot().transpose", "hocontact.utils.meshutils.center_vert_bbox", "ho3d.HO3D.cam_extr[].dot", "ho3d.HO3D.transpose"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.meshutils.center_vert_bbox"], ["", "def", "get_obj_full_color_can", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "obj_id", "=", "annot", "[", "\"objName\"", "]", "\n", "verts", "=", "self", ".", "obj_meshes_full_color", "[", "obj_id", "]", "[", "\"verts\"", "]", "\n", "verts", "=", "self", ".", "cam_extr", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "verts", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "# NOTE: verts_can = verts - bbox_center", "\n", "verts_can", ",", "bbox_center", ",", "bbox_scale", "=", "meshutils", ".", "center_vert_bbox", "(", "verts", ",", "scale", "=", "False", ")", "# !! CENTERED HERE", "\n", "return", "verts_can", ",", "self", ".", "obj_meshes_full_color", "[", "obj_id", "]", "[", "\"faces\"", "]", ",", "self", ".", "obj_meshes_full_color", "[", "obj_id", "]", "[", "\"vc\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_verts_transf": [[395, 408], ["ho3d.HO3D.cam_extr[].dot().transpose", "numpy.array().astype", "cv2.Rodrigues", "rot.dot().transpose", "ho3d.HO3D.cam_extr[].dot", "numpy.array", "rot.dot", "ho3d.HO3D.transpose", "verts.transpose"], "methods", ["None"], ["", "def", "get_obj_verts_transf", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "rot", "=", "cv2", ".", "Rodrigues", "(", "annot", "[", "\"objRot\"", "]", ")", "[", "0", "]", "\n", "tsl", "=", "annot", "[", "\"objTrans\"", "]", "\n", "obj_id", "=", "annot", "[", "\"objName\"", "]", "\n", "\n", "# This verts IS NOT EQUAL to the one in get_obj_verts_can,", "\n", "# since this verts is not translated to vertices center", "\n", "verts", "=", "self", ".", "obj_meshes", "[", "obj_id", "]", "[", "\"verts\"", "]", "\n", "transf_verts", "=", "rot", ".", "dot", "(", "verts", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "+", "tsl", "\n", "transf_verts", "=", "self", ".", "cam_extr", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "transf_verts", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "return", "np", ".", "array", "(", "transf_verts", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_transf_wrt_cam": [[409, 436], ["ho3d.HO3D.get_obj_verts_can", "numpy.linalg.inv", "numpy.concatenate", "numpy.concatenate", "cv2.Rodrigues", "ext_rot.dot", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_can"], ["", "def", "get_obj_transf_wrt_cam", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "rot", "=", "cv2", ".", "Rodrigues", "(", "annot", "[", "\"objRot\"", "]", ")", "[", "0", "]", "\n", "tsl", "=", "annot", "[", "\"objTrans\"", "]", "\n", "\n", "verts_can", ",", "v_0", ",", "_", "=", "self", ".", "get_obj_verts_can", "(", "idx", ")", "# (N, 3), (3, ), 1", "\n", "\n", "\"\"\" HACK\n        v_{can} = E * v_{raw} - v_0\n        v_{cam} = E * (R * v_{raw} + t)\n\n        => v_{raw} = E^{-1} * (v_{can} + v_0)\n        => v_{cam} = E * (R * (E^{-1} * (v_{can} + v_0)) + t)\n        =>         = E*R*E^{-1} * v_{can} + E*R*E^{-1} * v_0 + E * t\n        \"\"\"", "\n", "\n", "ext_rot", "=", "self", ".", "cam_extr", "[", ":", "3", ",", ":", "3", "]", "\n", "ext_rot_inv", "=", "np", ".", "linalg", ".", "inv", "(", "ext_rot", ")", "\n", "\n", "rot_wrt_cam", "=", "ext_rot", "@", "(", "rot", "@", "ext_rot_inv", ")", "# (3, 3)", "\n", "tsl_wrt_cam", "=", "(", "ext_rot", "@", "(", "rot", "@", "ext_rot_inv", ")", ")", ".", "dot", "(", "v_0", ")", "+", "ext_rot", ".", "dot", "(", "tsl", ")", "# (3,)", "\n", "tsl_wrt_cam", "=", "tsl_wrt_cam", "[", ":", ",", "np", ".", "newaxis", "]", "# (3, 1)", "\n", "\n", "obj_transf", "=", "np", ".", "concatenate", "(", "[", "rot_wrt_cam", ",", "tsl_wrt_cam", "]", ",", "axis", "=", "1", ")", "# (3, 4)", "\n", "obj_transf", "=", "np", ".", "concatenate", "(", "[", "obj_transf", ",", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ")", "[", "np", ".", "newaxis", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "return", "obj_transf", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_transf": [[438, 440], ["ho3d.HO3D.get_obj_transf_wrt_cam"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_transf_wrt_cam"], ["", "def", "get_obj_transf", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_obj_transf_wrt_cam", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_pose": [[442, 444], ["ho3d.HO3D.get_obj_transf_wrt_cam"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_transf_wrt_cam"], ["", "def", "get_obj_pose", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_obj_transf_wrt_cam", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_rot": [[445, 447], ["ho3d.HO3D.get_obj_transf_wrt_cam"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_transf_wrt_cam"], ["", "def", "get_obj_rot", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_obj_transf_wrt_cam", "(", "idx", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_tsl": [[448, 450], ["ho3d.HO3D.get_obj_transf_wrt_cam"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_transf_wrt_cam"], ["", "def", "get_obj_tsl", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_obj_transf_wrt_cam", "(", "idx", ")", "[", ":", "3", ",", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D._get_obj_corners3d": [[451, 461], ["ho3d.HO3D.cam_extr[].dot().transpose", "numpy.array().astype", "cv2.Rodrigues", "rot.dot().transpose", "ho3d.HO3D.cam_extr[].dot", "numpy.array", "rot.dot", "ho3d.HO3D.transpose", "corners.transpose"], "methods", ["None"], ["", "def", "_get_obj_corners3d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "rot", "=", "cv2", ".", "Rodrigues", "(", "annot", "[", "\"objRot\"", "]", ")", "[", "0", "]", "\n", "tsl", "=", "annot", "[", "\"objTrans\"", "]", "\n", "corners", "=", "annot", "[", "\"objCorners3DRest\"", "]", "\n", "trans_corners", "=", "rot", ".", "dot", "(", "corners", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "+", "tsl", "\n", "trans_corners", "=", "self", ".", "cam_extr", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "trans_corners", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "obj_corners", "=", "np", ".", "array", "(", "trans_corners", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "obj_corners", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_corners3d": [[462, 469], ["ho3d.HO3D.get_obj_corners_can", "ho3d.HO3D.get_obj_transf_wrt_cam", "obj_corners_transf.astype", "obj_rot.dot", "ho3d.HO3D.transpose"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_corners_can", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_transf_wrt_cam"], ["", "def", "get_obj_corners3d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "corners", "=", "self", ".", "get_obj_corners_can", "(", "idx", ")", "\n", "obj_transf", "=", "self", ".", "get_obj_transf_wrt_cam", "(", "idx", ")", "\n", "obj_rot", "=", "obj_transf", "[", ":", "3", ",", ":", "3", "]", "# (3, 3)", "\n", "obj_tsl", "=", "obj_transf", "[", ":", "3", ",", "3", ":", "]", "# (3, 1)", "\n", "obj_corners_transf", "=", "(", "obj_rot", ".", "dot", "(", "corners", ".", "transpose", "(", ")", ")", "+", "obj_tsl", ")", ".", "transpose", "(", ")", "\n", "return", "obj_corners_transf", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_corners_can": [[470, 478], ["ho3d.HO3D.get_obj_verts_can", "ho3d.HO3D.cam_extr[].dot().transpose", "obj_cancorners.astype", "ho3d.HO3D.cam_extr[].dot", "ho3d.HO3D.transpose"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_can"], ["", "def", "get_obj_corners_can", "(", "self", ",", "idx", ")", ":", "\n", "        ", "_", ",", "obj_cantrans", ",", "obj_canscale", "=", "self", ".", "get_obj_verts_can", "(", "idx", ")", "\n", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "corners", "=", "annot", "[", "\"objCorners3DRest\"", "]", "\n", "corners", "=", "self", ".", "cam_extr", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "corners", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "obj_cancorners", "=", "(", "corners", "-", "obj_cantrans", ")", "/", "obj_canscale", "\n", "return", "obj_cancorners", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_corners2d": [[479, 483], ["ho3d.HO3D.get_obj_corners3d", "ho3d.HO3D.get_cam_intr", "ho3d.HO3D.project"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_corners3d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_cam_intr", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.project"], ["", "def", "get_obj_corners2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "corners3d", "=", "self", ".", "get_obj_corners3d", "(", "idx", ")", "\n", "cam_intr", "=", "self", ".", "get_cam_intr", "(", "idx", ")", "\n", "return", "self", ".", "project", "(", "corners3d", ",", "cam_intr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_verts2d": [[484, 489], ["ho3d.HO3D.get_obj_verts_transf", "ho3d.HO3D.get_cam_intr", "ho3d.HO3D.project"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_transf", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_cam_intr", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.project"], ["", "def", "get_obj_verts2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "objpoints3d", "=", "self", ".", "get_obj_verts_transf", "(", "idx", ")", "\n", "cam_intr", "=", "self", ".", "get_cam_intr", "(", "idx", ")", "\n", "verts2d", "=", "self", ".", "project", "(", "objpoints3d", ",", "cam_intr", ")", "\n", "return", "verts2d", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_vis2d": [[490, 493], ["numpy.ones_like", "ho3d.HO3D.get_obj_verts2d"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts2d"], ["", "def", "get_obj_vis2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "objvis", "=", "np", ".", "ones_like", "(", "self", ".", "get_obj_verts2d", "(", "idx", ")", "[", ":", ",", "0", "]", ")", "\n", "return", "objvis", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_hand_vis2d": [[494, 497], ["numpy.ones_like", "ho3d.HO3D.get_hand_verts2d"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_verts2d"], ["", "def", "get_hand_vis2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "handvis", "=", "np", ".", "ones_like", "(", "self", ".", "get_hand_verts2d", "(", "idx", ")", "[", ":", ",", "0", "]", ")", "\n", "return", "handvis", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_sides": [[498, 500], ["None"], "methods", ["None"], ["", "def", "get_sides", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "\"right\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_cam_intr": [[501, 505], ["None"], "methods", ["None"], ["", "def", "get_cam_intr", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "cam_intr", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "[", "\"camMat\"", "]", "\n", "return", "cam_intr", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_hand_palm_vert_idx": [[506, 508], ["None"], "methods", ["None"], ["", "def", "get_hand_palm_vert_idx", "(", "self", ",", "_", ")", ":", "\n", "        ", "return", "self", ".", "hand_palm_vertex_index", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_n_hand_palm_vert": [[509, 511], ["len"], "methods", ["None"], ["", "def", "get_n_hand_palm_vert", "(", "self", ",", "_", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "hand_palm_vertex_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.__len__": [[512, 514], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_center_scale": [[515, 523], ["numpy.array", "hocontact.utils.logger.logger.error", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.error"], ["", "def", "get_center_scale", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "full_image", ":", "\n", "            ", "center", "=", "np", ".", "array", "(", "[", "640", "//", "2", ",", "480", "//", "2", "]", ")", "\n", "scale", "=", "640", "\n", "", "else", ":", "\n", "            ", "logger", ".", "error", "(", "\"Non full_image mode is not implements\"", ")", "\n", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "center", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_annot": [[524, 528], ["None"], "methods", ["None"], ["", "def", "get_annot", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "return", "annot", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_sample_identifier": [[529, 539], ["round"], "methods", ["None"], ["", "def", "get_sample_identifier", "(", "self", ",", "idx", ")", ":", "\n", "        ", "identifier", "=", "(", "\n", "f\"{self.data_split}_{self.split_mode}_mf{round(self.mini_factor)}\"", "\n", "f\"_likev1{''if self.like_v1 else '(x)'}\"", "\n", "f\"_fct{self.filter_thresh if self.filter_no_contact else '(x)'}\"", "\n", "f\"_ec{'' if self.enable_contact else '(x)'}\"", "\n", ")", "\n", "\n", "res", "=", "f\"{self.name}/{identifier}/{idx}\"", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_hand_pose_wrt_cam": [[541, 552], ["liegroups.SO3.exp().as_matrix", "liegroups.SO3.log", "numpy.concatenate", "numpy.concatenate.astype", "liegroups.SO3.from_matrix", "liegroups.SO3.exp"], "methods", ["None"], ["", "def", "get_hand_pose_wrt_cam", "(", "self", ",", "idx", ")", ":", "# pose = root_rot + ...", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "handpose", "=", "annot", "[", "\"handPose\"", "]", "\n", "# only the first 3 dimension needs to be transformed by cam_extr", "\n", "root", ",", "remains", "=", "handpose", "[", ":", "3", "]", ",", "handpose", "[", "3", ":", "]", "\n", "root", "=", "SO3", ".", "exp", "(", "root", ")", ".", "as_matrix", "(", ")", "\n", "root", "=", "self", ".", "cam_extr", "[", ":", "3", ",", ":", "3", "]", "@", "root", "\n", "root", "=", "SO3", ".", "log", "(", "SO3", ".", "from_matrix", "(", "root", ",", "normalize", "=", "True", ")", ")", "\n", "handpose_transformed", "=", "np", ".", "concatenate", "(", "(", "root", ",", "remains", ")", ",", "axis", "=", "0", ")", "\n", "return", "handpose_transformed", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_hand_tsl_wrt_cam": [[554, 562], ["torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "ho3d.HO3D.layer", "numpy.array", "numpy.array.squeeze", "ho3d.HO3D.get_hand_verts3d", "torch.from_numpy", "torch.from_numpy", "ho3d.HO3D.get_hand_pose_wrt_cam", "ho3d.HO3D.get_hand_shape"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_verts3d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_pose_wrt_cam", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_shape"], ["", "def", "get_hand_tsl_wrt_cam", "(", "self", ",", "idx", ")", ":", "\n", "        ", "hand_pose", "=", "torch", ".", "from_numpy", "(", "self", ".", "get_hand_pose_wrt_cam", "(", "idx", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "hand_shape", "=", "torch", ".", "from_numpy", "(", "self", ".", "get_hand_shape", "(", "idx", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "hand_verts", ",", "_", "=", "self", ".", "layer", "(", "hand_pose", ",", "hand_shape", ")", "\n", "hand_verts", "=", "np", ".", "array", "(", "hand_verts", ".", "squeeze", "(", "0", ")", ")", "\n", "tsl", "=", "self", ".", "get_hand_verts3d", "(", "idx", ")", "-", "hand_verts", "\n", "return", "tsl", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_hand_axisang_wrt_cam": [[564, 568], ["ho3d.HO3D.get_hand_rot_wrt_cam", "liegroups.SO3.log", "liegroups.SO3.log.astype", "liegroups.SO3.from_matrix"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_rot_wrt_cam"], ["", "def", "get_hand_axisang_wrt_cam", "(", "self", ",", "idx", ")", ":", "\n", "        ", "root", "=", "self", ".", "get_hand_rot_wrt_cam", "(", "idx", ")", "\n", "root", "=", "SO3", ".", "log", "(", "SO3", ".", "from_matrix", "(", "root", ",", "normalize", "=", "True", ")", ")", "\n", "return", "root", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_hand_rot_wrt_cam": [[570, 579], ["liegroups.SO3.exp().as_matrix", "liegroups.SO3.exp().as_matrix.astype", "liegroups.SO3.exp"], "methods", ["None"], ["", "def", "get_hand_rot_wrt_cam", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "handpose", "=", "annot", "[", "\"handPose\"", "]", "\n", "# only the first 3 dimension needs to be transformed by cam_extr", "\n", "root", "=", "handpose", "[", ":", "3", "]", "\n", "root", "=", "SO3", ".", "exp", "(", "root", ")", ".", "as_matrix", "(", ")", "\n", "root", "=", "self", ".", "cam_extr", "[", ":", "3", ",", ":", "3", "]", "@", "root", "\n", "return", "root", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_hand_shape": [[581, 586], ["handshape.astype"], "methods", ["None"], ["", "def", "get_hand_shape", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "handshape", "=", "annot", "[", "\"handBeta\"", "]", "\n", "return", "handshape", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_hand_pose": [[588, 590], ["ho3d.HO3D.get_hand_pose_wrt_cam"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_pose_wrt_cam"], ["", "def", "get_hand_pose", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_hand_pose_wrt_cam", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_hand_tsl": [[592, 594], ["ho3d.HO3D.get_hand_tsl_wrt_cam"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_tsl_wrt_cam"], ["", "def", "get_hand_tsl", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_hand_tsl_wrt_cam", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_verts_transf_reduced": [[596, 609], ["ho3d.HO3D.cam_extr[].dot().transpose", "numpy.array().astype", "cv2.Rodrigues", "rot.dot().transpose", "ho3d.HO3D.cam_extr[].dot", "numpy.array", "rot.dot", "ho3d.HO3D.transpose", "verts.transpose"], "methods", ["None"], ["", "def", "get_obj_verts_transf_reduced", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "rot", "=", "cv2", ".", "Rodrigues", "(", "annot", "[", "\"objRot\"", "]", ")", "[", "0", "]", "\n", "tsl", "=", "annot", "[", "\"objTrans\"", "]", "\n", "obj_id", "=", "annot", "[", "\"objName\"", "]", "\n", "\n", "# This verts IS NOT EQUAL to the one in get_obj_verts_can,", "\n", "# since this verts is not translated to vertices center", "\n", "verts", "=", "self", ".", "obj_meshes_reduced", "[", "obj_id", "]", "[", "\"verts\"", "]", "\n", "transf_verts", "=", "rot", ".", "dot", "(", "verts", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "+", "tsl", "\n", "transf_verts", "=", "self", ".", "cam_extr", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "transf_verts", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "return", "np", ".", "array", "(", "transf_verts", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_verts_can_reduced": [[611, 621], ["ho3d.HO3D.cam_extr[].dot().transpose", "hocontact.utils.meshutils.center_vert_bbox", "ho3d.HO3D.cam_extr[].dot", "ho3d.HO3D.transpose"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.meshutils.center_vert_bbox"], ["", "def", "get_obj_verts_can_reduced", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "obj_id", "=", "annot", "[", "\"objName\"", "]", "\n", "verts", "=", "self", ".", "obj_meshes_reduced", "[", "obj_id", "]", "[", "\"verts\"", "]", "\n", "verts", "=", "self", ".", "cam_extr", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "verts", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "# NOTE: verts_can = verts - bbox_center", "\n", "verts_can", ",", "bbox_center", ",", "bbox_scale", "=", "meshutils", ".", "center_vert_bbox", "(", "verts", ",", "scale", "=", "False", ")", "# CENTERED HERE", "\n", "return", "verts_can", ",", "bbox_center", ",", "bbox_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_faces_reduced": [[623, 630], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "get_obj_faces_reduced", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "obj_id", "=", "annot", "[", "\"objName\"", "]", "\n", "objfaces", "=", "self", ".", "obj_meshes_reduced", "[", "obj_id", "]", "[", "\"faces\"", "]", "\n", "objfaces", "=", "np", ".", "array", "(", "objfaces", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "return", "objfaces", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_voxel_points_can": [[632, 642], ["ho3d.HO3D.cam_extr[].dot().transpose", "hocontact.utils.meshutils.center_vert_bbox", "ho3d.HO3D.cam_extr[].dot", "ho3d.HO3D.transpose"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.meshutils.center_vert_bbox"], ["", "def", "get_obj_voxel_points_can", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "obj_id", "=", "annot", "[", "\"objName\"", "]", "\n", "verts", "=", "self", ".", "obj_voxels", "[", "obj_id", "]", "[", "\"points\"", "]", "\n", "verts", "=", "self", ".", "cam_extr", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "verts", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "# NOTE: verts_can = verts - bbox_center", "\n", "verts_can", ",", "bbox_center", ",", "bbox_scale", "=", "meshutils", ".", "center_vert_bbox", "(", "verts", ",", "scale", "=", "False", ")", "# !! CENTERED HERE", "\n", "return", "verts_can", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_voxel_points_transf": [[644, 657], ["ho3d.HO3D.cam_extr[].dot().transpose", "numpy.array", "cv2.Rodrigues", "rot.dot().transpose", "ho3d.HO3D.cam_extr[].dot", "rot.dot", "ho3d.HO3D.transpose", "verts.transpose"], "methods", ["None"], ["", "def", "get_obj_voxel_points_transf", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "rot", "=", "cv2", ".", "Rodrigues", "(", "annot", "[", "\"objRot\"", "]", ")", "[", "0", "]", "\n", "tsl", "=", "annot", "[", "\"objTrans\"", "]", "\n", "obj_id", "=", "annot", "[", "\"objName\"", "]", "\n", "\n", "# This verts IS NOT EQUAL to the one in get_obj_verts_can,", "\n", "# since this verts is not translated to vertices center", "\n", "verts", "=", "self", ".", "obj_voxels", "[", "obj_id", "]", "[", "\"points\"", "]", "\n", "transf_verts", "=", "rot", ".", "dot", "(", "verts", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "+", "tsl", "\n", "transf_verts", "=", "self", ".", "cam_extr", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "transf_verts", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "return", "np", ".", "array", "(", "transf_verts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_voxel_element_volume": [[659, 665], ["None"], "methods", ["None"], ["", "def", "get_obj_voxel_element_volume", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "img_idx", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "annot", "=", "self", ".", "seq_map", "[", "seq", "]", "[", "img_idx", "]", "\n", "obj_id", "=", "annot", "[", "\"objName\"", "]", "\n", "objvoxelvol", "=", "self", ".", "obj_voxels", "[", "obj_id", "]", "[", "\"element_volume\"", "]", "\n", "return", "objvoxelvol", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.view_data": [[667, 716], ["tqdm.tqdm", "range", "ho_dataset.get_obj_verts2d", "ho_dataset.get_joints2d", "ho_dataset.get_obj_transf_wrt_cam", "ho_dataset.get_obj_verts_can", "ho_dataset.project", "ho_dataset.get_obj_corners3d", "ho_dataset.project", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "ho_dataset.get_hand_tsl_wrt_cam", "ho_dataset.layer", "ho_dataset.project", "ho_dataset.get_hand_verts2d", "ho_dataset.get_image", "numpy.array", "cv2.cvtColor", "range", "range", "range", "range", "range", "cv2.imshow", "cv2.waitKey", "len", "ho_dataset.get_cam_intr", "ho_dataset.get_cam_intr", "numpy.array", "ho_dataset.get_cam_intr", "cv2.circle", "cv2.circle", "cv2.circle", "cv2.circle", "cv2.circle", "torch.from_numpy", "torch.from_numpy", "hand_verts.squeeze", "obj_rot.dot", "ho_dataset.get_hand_pose_wrt_cam", "ho_dataset.get_hand_shape", "obj_verts_can.transpose"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts2d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_joints2d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_transf_wrt_cam", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_can", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.project", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_corners3d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.project", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_tsl_wrt_cam", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.project", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_verts2d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_image", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_cam_intr", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_cam_intr", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_cam_intr", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_pose_wrt_cam", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_shape"], ["", "", "def", "view_data", "(", "ho_dataset", ")", ":", "\n", "    ", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "ho_dataset", ")", ")", ")", ":", "\n", "# i = len(ho_dataset) - 1 - i", "\n", "        ", "objverts2d", "=", "ho_dataset", ".", "get_obj_verts2d", "(", "i", ")", "\n", "joint2d", "=", "ho_dataset", ".", "get_joints2d", "(", "i", ")", "\n", "\n", "# TEST: obj_transf @ obj_verts_can == obj_verts_transf >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "obj_transf", "=", "ho_dataset", ".", "get_obj_transf_wrt_cam", "(", "i", ")", "\n", "obj_rot", "=", "obj_transf", "[", ":", "3", ",", ":", "3", "]", "# (3, 3)", "\n", "obj_tsl", "=", "obj_transf", "[", ":", "3", ",", "3", ":", "]", "# (3, 1)", "\n", "\n", "obj_verts_can", ",", "_", ",", "__", "=", "ho_dataset", ".", "get_obj_verts_can", "(", "i", ")", "# (N, 3)", "\n", "obj_verts_pred", "=", "(", "obj_rot", ".", "dot", "(", "obj_verts_can", ".", "transpose", "(", ")", ")", "+", "obj_tsl", ")", ".", "transpose", "(", ")", "\n", "obj_verts2d_pred", "=", "ho_dataset", ".", "project", "(", "obj_verts_pred", ",", "ho_dataset", ".", "get_cam_intr", "(", "i", ")", ")", "\n", "\n", "# TEST: obj_transf @ obj_corners_can == obj_corners_3d >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "obj_corners", "=", "ho_dataset", ".", "get_obj_corners3d", "(", "i", ")", "\n", "obj_corners2d", "=", "ho_dataset", ".", "project", "(", "obj_corners", ",", "ho_dataset", ".", "get_cam_intr", "(", "i", ")", ")", "\n", "\n", "# TEST: MANO(get_hand_pose_wrt_cam) + get_hand_tsl_wrt_cam == get_hand_verts3d >>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "hand_pose", "=", "torch", ".", "from_numpy", "(", "ho_dataset", ".", "get_hand_pose_wrt_cam", "(", "i", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "hand_shape", "=", "torch", ".", "from_numpy", "(", "ho_dataset", ".", "get_hand_shape", "(", "i", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "hand_tsl", "=", "ho_dataset", ".", "get_hand_tsl_wrt_cam", "(", "i", ")", "\n", "\n", "hand_verts", ",", "hand_joints", "=", "ho_dataset", ".", "layer", "(", "hand_pose", ",", "hand_shape", ")", "\n", "hand_verts", "=", "np", ".", "array", "(", "hand_verts", ".", "squeeze", "(", "0", ")", ")", "+", "hand_tsl", "\n", "hand_verts_2d", "=", "ho_dataset", ".", "project", "(", "hand_verts", ",", "ho_dataset", ".", "get_cam_intr", "(", "i", ")", ")", "\n", "\n", "hand_verts_2dgt", "=", "ho_dataset", ".", "get_hand_verts2d", "(", "i", ")", "\n", "img", "=", "ho_dataset", ".", "get_image", "(", "i", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "for", "j", "in", "range", "(", "obj_verts2d_pred", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "v", "=", "obj_verts2d_pred", "[", "j", "]", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ")", ",", "radius", "=", "2", ",", "thickness", "=", "-", "1", ",", "color", "=", "(", "0", ",", "255", ",", "0", ")", ")", "\n", "", "for", "j", "in", "range", "(", "objverts2d", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "v", "=", "objverts2d", "[", "j", "]", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ")", ",", "radius", "=", "1", ",", "thickness", "=", "-", "1", ",", "color", "=", "(", "0", ",", "255", ",", "255", ")", ")", "\n", "", "for", "j", "in", "range", "(", "hand_verts_2dgt", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "v", "=", "hand_verts_2dgt", "[", "j", "]", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ")", ",", "radius", "=", "3", ",", "thickness", "=", "-", "1", ",", "color", "=", "(", "255", ",", "255", ",", "0", ")", ")", "\n", "", "for", "j", "in", "range", "(", "hand_verts_2d", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "v", "=", "hand_verts_2d", "[", "j", "]", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ")", ",", "radius", "=", "1", ",", "thickness", "=", "-", "1", ",", "color", "=", "(", "255", ",", "0", ",", "0", ")", ")", "\n", "", "for", "j", "in", "range", "(", "obj_corners2d", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "v", "=", "obj_corners2d", "[", "j", "]", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ")", ",", "radius", "=", "8", ",", "thickness", "=", "-", "1", ",", "color", "=", "(", "0", ",", "0", ",", "255", ")", ")", "\n", "", "cv2", ".", "imshow", "(", "\"ho3d\"", ",", "img", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.main": [[718, 757], ["hocontact.hodatasets.hodata.HOdata.get_dataset", "print", "numpy.random.randint", "pt.PrettyTable", "sample.items", "hocontact.utils.logger.logger.warn", "hocontact.utils.logger.logger.info", "len", "len", "isinstance", "str", "ho3d.view_data", "pt.PrettyTable.add_row", "isinstance", "pt.PrettyTable.add_row", "pt.PrettyTable.add_row", "type", "type", "tuple", "type", "value.size"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_dataset", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.view_data"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "ho_dataset", "=", "HOdata", ".", "get_dataset", "(", "\n", "dataset", "=", "\"ho3d\"", ",", "\n", "data_root", "=", "\"data\"", ",", "\n", "data_split", "=", "\"train\"", ",", "\n", "split_mode", "=", "\"objects\"", ",", "\n", "use_cache", "=", "False", ",", "\n", "mini_factor", "=", "30.0", ",", "\n", "center_idx", "=", "9", ",", "\n", "enable_contact", "=", "True", ",", "\n", "like_v1", "=", "True", ",", "\n", "filter_no_contact", "=", "False", ",", "\n", "filter_thresh", "=", "10.0", ",", "\n", "block_rot", "=", "True", ",", "\n", "synt_factor", "=", "1", ",", "\n", ")", "\n", "\n", "import", "prettytable", "as", "pt", "\n", "from", "hocontact", ".", "utils", ".", "logger", "import", "logger", "\n", "\n", "print", "(", "len", "(", "ho_dataset", ")", ")", "\n", "idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "ho_dataset", ")", ")", "\n", "\n", "sample", "=", "ho_dataset", "[", "idx", "]", "\n", "tb", "=", "pt", ".", "PrettyTable", "(", "padding_width", "=", "3", ",", "header", "=", "False", ")", "\n", "for", "key", ",", "value", "in", "sample", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "tb", ".", "add_row", "(", "[", "key", ",", "type", "(", "value", ")", ",", "value", ".", "shape", "]", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "tb", ".", "add_row", "(", "[", "key", ",", "type", "(", "value", ")", ",", "tuple", "(", "value", ".", "size", "(", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "tb", ".", "add_row", "(", "[", "key", ",", "type", "(", "value", ")", ",", "value", "]", ")", "\n", "", "", "logger", ".", "warn", "(", "f\"{'=' * 40} ALL HO3D SAMPLE KEYS {'>' * 40}\"", ",", "\"blue\"", ")", "\n", "logger", ".", "info", "(", "str", "(", "tb", ")", ")", "\n", "\n", "if", "args", ".", "vis", ":", "\n", "        ", "view_data", "(", "ho_dataset", ")", "\n", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.cidata.CIdata.match_and_construct": [[23, 147], ["fhb_tester.search", "ho3d_tester.search", "NameError", "fhb_extractor.fullmatch", "fhb_extractor.fullmatch.group", "fhb_extractor.fullmatch.group", "fhb_extractor.fullmatch.group", "float", "fhb_extractor.fullmatch.group", "fhb_extractor.fullmatch.group", "hocontact.utils.logger.logger.info", "hocontact.hodatasets.hodata.HOdata.get_dataset", "ho3d_extractor.fullmatch", "ho3d_extractor.fullmatch.group", "ho3d_extractor.fullmatch.group", "ho3d_extractor.fullmatch.group", "ho3d_extractor.fullmatch.group", "hocontact.utils.logger.logger.info", "hocontact.hodatasets.hodata.HOdata.get_dataset", "NameError", "fhb_extractor.fullmatch.group", "float", "fhb_extractor.fullmatch.group", "abs", "float", "NameError", "ho3d_extractor.fullmatch.group", "float", "ho3d_extractor.fullmatch.group", "float", "ho3d_extractor.fullmatch.group", "fhb_extractor.fullmatch.group", "ho3d_extractor.fullmatch.group"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_dataset", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_dataset"], ["    ", "@", "staticmethod", "\n", "def", "match_and_construct", "(", "in_string", ",", "hodata_path", ",", "use_cache", ",", "center_idx", ")", ":", "\n", "        ", "fhb_flag", "=", "fhb_tester", ".", "search", "(", "in_string", ")", "\n", "if", "fhb_flag", "is", "not", "None", ":", "\n", "            ", "fhb_matches", "=", "fhb_extractor", ".", "fullmatch", "(", "in_string", ")", "\n", "if", "fhb_matches", "is", "None", ":", "\n", "                ", "raise", "NameError", "(", "f\"{CIdata.__name__}: parse string error, trying to parse as fhb, in string{in_string}\"", ")", "\n", "\n", "", "ci_prefix", "=", "fhb_matches", ".", "group", "(", "1", ")", "\n", "data_split", "=", "fhb_matches", ".", "group", "(", "2", ")", "\n", "split_mode", "=", "fhb_matches", ".", "group", "(", "3", ")", "\n", "if", "fhb_matches", ".", "group", "(", "4", ")", "==", "\"1\"", ":", "\n", "                ", "mini_factor", "=", "1", "\n", "", "else", ":", "\n", "                ", "mini_factor", "=", "float", "(", "fhb_matches", ".", "group", "(", "4", ")", ")", "\n", "", "reduce_factor", "=", "float", "(", "fhb_matches", ".", "group", "(", "5", ")", ")", "\n", "if", "abs", "(", "reduce_factor", "-", "1", ")", "<", "1e-9", ":", "\n", "                ", "reduce_res", "=", "False", "\n", "", "else", ":", "\n", "                ", "reduce_res", "=", "True", "\n", "\n", "", "filter_contact_flag", "=", "fhb_matches", ".", "group", "(", "6", ")", "\n", "if", "filter_contact_flag", "==", "\"(x)\"", ":", "\n", "                ", "filter_no_contact", "=", "False", "\n", "filter_thresh", "=", "-", "1.0", "\n", "", "else", ":", "\n", "                ", "filter_no_contact", "=", "True", "\n", "filter_thresh", "=", "float", "(", "filter_contact_flag", ")", "\n", "\n", "", "enable_contact_flag", "=", "fhb_matches", ".", "group", "(", "7", ")", "\n", "if", "enable_contact_flag", "==", "\"\"", ":", "\n", "                ", "enable_contact", "=", "True", "\n", "", "else", ":", "\n", "                ", "enable_contact", "=", "False", "\n", "\n", "", "logger", ".", "info", "(", "\n", "(", "\n", "f\"\\tCI prefix: {ci_prefix}\\n\"", "\n", "f\"\\tHO prefix: {hodata_path}\\n\"", "\n", "f\"\\tdata_split: {data_split}, split_mode: {split_mode}\\n\"", "\n", "f\"\\tmini_factor: {mini_factor}\\n\"", "\n", "f\"\\treduce_res: {reduce_res}, reduce_factor: {reduce_factor}\\n\"", "\n", "f\"\\tfilter_no_contact: {filter_no_contact}, filter_thresh: {filter_thresh}\\n\"", "\n", "f\"\\tenable_contact: {enable_contact}\\n\"", "\n", ")", ",", "\n", "\"cyan\"", ",", "\n", ")", "\n", "\n", "target_dataset", "=", "HOdata", ".", "get_dataset", "(", "\n", "\"fhb\"", ",", "\n", "data_root", "=", "hodata_path", ",", "\n", "data_split", "=", "data_split", ",", "\n", "split_mode", "=", "split_mode", ",", "\n", "use_cache", "=", "use_cache", ",", "\n", "mini_factor", "=", "mini_factor", ",", "\n", "center_idx", "=", "center_idx", ",", "\n", "enable_contact", "=", "enable_contact", ",", "\n", "reduce_res", "=", "reduce_res", ",", "\n", "filter_no_contact", "=", "filter_no_contact", ",", "\n", "filter_thresh", "=", "filter_thresh", ",", "\n", "load_objects_reduced", "=", "True", ",", "\n", "load_objects_voxel", "=", "True", ",", "\n", "synt_factor", "=", "0", ",", "\n", ")", "\n", "return", "target_dataset", "\n", "\n", "", "ho3d_flag", "=", "ho3d_tester", ".", "search", "(", "in_string", ")", "\n", "if", "ho3d_flag", "is", "not", "None", ":", "\n", "            ", "ho3d_matches", "=", "ho3d_extractor", ".", "fullmatch", "(", "in_string", ")", "\n", "if", "ho3d_matches", "is", "None", ":", "\n", "                ", "raise", "NameError", "(", "f\"{CIdata.__name__}: parse string error, trying to parse as ho3d, in string{in_string}\"", ")", "\n", "\n", "", "ci_prefix", "=", "ho3d_matches", ".", "group", "(", "1", ")", "\n", "data_split", "=", "ho3d_matches", ".", "group", "(", "2", ")", "\n", "split_mode", "=", "ho3d_matches", ".", "group", "(", "3", ")", "\n", "if", "ho3d_matches", ".", "group", "(", "4", ")", "==", "\"1\"", ":", "\n", "                ", "mini_factor", "=", "1", "\n", "", "else", ":", "\n", "                ", "mini_factor", "=", "float", "(", "ho3d_matches", ".", "group", "(", "4", ")", ")", "\n", "\n", "", "like_v1", "=", "ho3d_matches", ".", "group", "(", "5", ")", "==", "\"\"", "\n", "\n", "filter_contact_flag", "=", "ho3d_matches", ".", "group", "(", "6", ")", "\n", "if", "filter_contact_flag", "==", "\"(x)\"", ":", "\n", "                ", "filter_no_contact", "=", "False", "\n", "filter_thresh", "=", "-", "1.0", "\n", "", "else", ":", "\n", "                ", "filter_no_contact", "=", "True", "\n", "filter_thresh", "=", "float", "(", "filter_contact_flag", ")", "\n", "\n", "", "enable_contact", "=", "ho3d_matches", ".", "group", "(", "7", ")", "==", "\"\"", "\n", "\n", "logger", ".", "info", "(", "\n", "(", "\n", "f\"\\tCI prefix: {ci_prefix}\\n\"", "\n", "f\"\\tHO prefix: {hodata_path}\\n\"", "\n", "f\"\\tdata_split: {data_split}, split_mode: {split_mode}\\n\"", "\n", "f\"\\tmini_factor: {mini_factor}\\n\"", "\n", "f\"\\tlike_v1: {like_v1}\\n\"", "\n", "f\"\\tfilter_no_contact: {filter_no_contact}, filter_thresh: {filter_thresh}\\n\"", "\n", "f\"\\tenable_contact: {enable_contact}\\n\"", "\n", ")", ",", "\n", "\"cyan\"", ",", "\n", ")", "\n", "\n", "target_dataset", "=", "HOdata", ".", "get_dataset", "(", "\n", "\"ho3d\"", ",", "\n", "data_root", "=", "hodata_path", ",", "\n", "data_split", "=", "data_split", ",", "\n", "split_mode", "=", "split_mode", ",", "\n", "use_cache", "=", "use_cache", ",", "\n", "mini_factor", "=", "mini_factor", ",", "\n", "center_idx", "=", "center_idx", ",", "\n", "enable_contact", "=", "enable_contact", ",", "\n", "like_v1", "=", "like_v1", ",", "\n", "filter_no_contact", "=", "filter_no_contact", ",", "\n", "filter_thresh", "=", "filter_thresh", ",", "\n", "synt_factor", "=", "0", ",", "# do not need synthetic data when testing", "\n", "load_objects_reduced", "=", "True", ",", "\n", "load_objects_voxel", "=", "True", ",", "\n", ")", "\n", "return", "target_dataset", "\n", "\n", "", "raise", "NameError", "(", "f\"{CIdata.__name__}: parse string error, in string {in_string}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.cidata.CIdata.__init__": [[148, 195], ["abc.ABC.__init__", "hocontact.utils.logger.logger.info", "manopth.anchorutils.anchor_load", "cidata.CIdata.match_and_construct", "list", "set", "os.listdir", "id_extractor.match", "cidata.CIdata.file_list.add", "len", "len", "RuntimeError", "int", "len", "len", "id_extractor.match.group"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.cidata.CIdata.match_and_construct"], ["", "def", "__init__", "(", "\n", "self", ",", "data_path", ",", "hodata_path", ",", "anchor_path", ",", "hodata_use_cache", "=", "True", ",", "hodata_center_idx", "=", "9", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "logger", ".", "info", "(", "f\"{self.__class__.__name__}:\"", ",", "\"cyan\"", ")", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "hodata_path", "=", "hodata_path", "\n", "self", ".", "anchor_path", "=", "anchor_path", "\n", "(", "\n", "self", ".", "anchor_face_vertex_index", ",", "\n", "self", ".", "anchor_weights", ",", "\n", "self", ".", "hand_vertex_merged_assignment", ",", "\n", "self", ".", "anchor_mapping", ",", "\n", ")", "=", "anchor_load", "(", "self", ".", "anchor_path", ")", "\n", "# these fields are originally designed as flags", "\n", "# though now they are constant within the project", "\n", "self", ".", "contact_pad_vertex", "=", "True", "\n", "self", ".", "contact_pad_anchor", "=", "True", "\n", "self", ".", "contact_elasti_th", "=", "0.00", "\n", "\n", "# ==================== match and extract information from data_path >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# ==================== construct dataset accordingly >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "self", ".", "hodataset", "=", "self", ".", "match_and_construct", "(", "self", ".", "data_path", ",", "self", ".", "hodata_path", ",", "hodata_use_cache", ",", "hodata_center_idx", ")", "\n", "self", ".", "hodataset_type", "=", "self", ".", "hodataset", ".", "name", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ==================== cache pkl paths >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "self", ".", "_file_list", "=", "list", "(", "os", ".", "listdir", "(", "self", ".", "data_path", ")", ")", "\n", "self", ".", "file_list", "=", "set", "(", ")", "\n", "for", "x", "in", "self", ".", "_file_list", ":", "\n", "            ", "res", "=", "id_extractor", ".", "match", "(", "x", ")", "\n", "if", "res", "is", "None", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"{res} matches failed! illegal name for intermediate file\"", ")", "\n", "", "self", ".", "file_list", ".", "add", "(", "int", "(", "res", ".", "group", "(", "1", ")", ")", ")", "\n", "", "assert", "len", "(", "self", ".", "file_list", ")", "==", "len", "(", "\n", "self", ".", "hodataset", "\n", ")", ",", "f\"dataset length unmatched: {len(self.file_list)}, {len(self.hodataset)}\"", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ==================== provide queries >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# for interface (with data so not pure), we only provide CIDumpedQueries", "\n", "self", ".", "queries", "=", "{", "\n", "CIDumpedQueries", ".", "VERTEX_CONTACT", ",", "\n", "CIDumpedQueries", ".", "CONTACT_REGION_ID", ",", "\n", "CIDumpedQueries", ".", "CONTACT_ANCHOR_ID", ",", "\n", "CIDumpedQueries", ".", "CONTACT_ANCHOR_ELASTI", ",", "\n", "CIDumpedQueries", ".", "CONTACT_ANCHOR_PADDING_MASK", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.cidata.CIdata.__len__": [[198, 200], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "file_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.cidata.CIdata.get_dumped_processed_contact_info": [[202, 205], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_dumped_processed_contact_info", "(", "self", ",", "index", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.cidata.CIdata.get_dumped_processed_pose": [[207, 209], ["RuntimeError"], "methods", ["None"], ["", "def", "get_dumped_processed_pose", "(", "self", ",", "index", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"unimplemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.cidata.CIdata.__getitem__": [[210, 362], ["cidata.CIdata.hodataset.get_hand_verts3d", "cidata.CIdata.hodataset.get_joints3d", "cidata.CIdata.hodataset.get_hand_faces", "cidata.CIdata.hodataset.get_hand_rot_wrt_cam", "cidata.CIdata.hodataset.get_hand_tsl_wrt_cam", "cidata.CIdata.hodataset.get_hand_shape", "cidata.CIdata.hodataset.get_hand_pose_wrt_cam", "cidata.CIdata.hodataset.get_obj_verts_transf", "cidata.CIdata.hodataset.get_obj_verts_transf_reduced", "cidata.CIdata.hodataset.get_obj_verts_can", "cidata.CIdata.hodataset.get_obj_verts_can_reduced", "cidata.CIdata.hodataset.get_obj_faces", "cidata.CIdata.hodataset.get_obj_faces_reduced", "cidata.CIdata.hodataset.get_obj_normal", "cidata.CIdata.hodataset.get_obj_transf_wrt_cam", "cidata.CIdata.hodataset.get_obj_tsl", "cidata.CIdata.hodataset.get_obj_rot", "cidata.CIdata.hodataset.get_image_path", "cidata.CIdata.hodataset.get_obj_voxel_points_can", "cidata.CIdata.hodataset.get_obj_voxel_points_transf", "cidata.CIdata.hodataset.get_obj_voxel_element_volume", "cidata.CIdata.hodataset.get_hand_palm_vert_idx", "cidata.CIdata.hodataset.get_processed_contact_info", "cidata.CIdata.get_dumped_processed_pose", "cidata.CIdata.get_dumped_processed_contact_info", "honet_dict[].reshape", "honet_dict[].reshape", "honet_dict[].reshape", "honet_dict[].reshape"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_verts3d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_joints3d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_faces", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_rot_wrt_cam", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_tsl_wrt_cam", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_shape", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_pose_wrt_cam", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_transf", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_transf_reduced", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_can", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_can_reduced", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_faces", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_faces_reduced", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_normal", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_transf_wrt_cam", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_tsl", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_rot", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_image_path", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_voxel_points_can", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_voxel_points_transf", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_voxel_element_volume", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_palm_vert_idx", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.cionline.CIOnline.get_dumped_processed_pose", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.cionline.CIOnline.get_dumped_processed_contact_info"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "queries", "=", "self", ".", "queries", "\n", "sample", "=", "{", "}", "\n", "\n", "# ==================== process adapted queries >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "if", "CIAdaptQueries", ".", "HAND_VERTS_3D", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "HAND_VERTS_3D", "]", "=", "self", ".", "hodataset", ".", "get_hand_verts3d", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "HAND_JOINTS_3D", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "HAND_JOINTS_3D", "]", "=", "self", ".", "hodataset", ".", "get_joints3d", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "HAND_FACES", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "HAND_FACES", "]", "=", "self", ".", "hodataset", ".", "get_hand_faces", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "HAND_ROT", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "HAND_ROT", "]", "=", "self", ".", "hodataset", ".", "get_hand_rot_wrt_cam", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "HAND_TSL", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "HAND_TSL", "]", "=", "self", ".", "hodataset", ".", "get_hand_tsl_wrt_cam", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "HAND_SHAPE", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "HAND_SHAPE", "]", "=", "self", ".", "hodataset", ".", "get_hand_shape", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "HAND_POSE", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "HAND_POSE", "]", "=", "self", ".", "hodataset", ".", "get_hand_pose_wrt_cam", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "OBJ_VERTS_3D", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "OBJ_VERTS_3D", "]", "=", "self", ".", "hodataset", ".", "get_obj_verts_transf", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "OBJ_VERTS_3D_REDUCED", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "OBJ_VERTS_3D_REDUCED", "]", "=", "self", ".", "hodataset", ".", "get_obj_verts_transf_reduced", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "OBJ_CAN_VERTS", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "OBJ_CAN_VERTS", "]", ",", "_", ",", "_", "=", "self", ".", "hodataset", ".", "get_obj_verts_can", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "OBJ_CAN_VERTS_REDUCED", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "OBJ_CAN_VERTS_REDUCED", "]", ",", "_", ",", "_", "=", "self", ".", "hodataset", ".", "get_obj_verts_can_reduced", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "OBJ_FACES", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "OBJ_FACES", "]", "=", "self", ".", "hodataset", ".", "get_obj_faces", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "OBJ_FACES_REDUCED", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "OBJ_FACES_REDUCED", "]", "=", "self", ".", "hodataset", ".", "get_obj_faces_reduced", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "OBJ_NORMAL", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "OBJ_NORMAL", "]", "=", "self", ".", "hodataset", ".", "get_obj_normal", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "OBJ_TRANSF", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "OBJ_TRANSF", "]", "=", "self", ".", "hodataset", ".", "get_obj_transf_wrt_cam", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "OBJ_TSL", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "OBJ_TSL", "]", "=", "self", ".", "hodataset", ".", "get_obj_tsl", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "OBJ_ROT", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "OBJ_ROT", "]", "=", "self", ".", "hodataset", ".", "get_obj_rot", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "IMAGE_PATH", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "IMAGE_PATH", "]", "=", "self", ".", "hodataset", ".", "get_image_path", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "OBJ_VOXEL_POINTS_CAN", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "OBJ_VOXEL_POINTS_CAN", "]", "=", "self", ".", "hodataset", ".", "get_obj_voxel_points_can", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "OBJ_VOXEL_POINTS", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "OBJ_VOXEL_POINTS", "]", "=", "self", ".", "hodataset", ".", "get_obj_voxel_points_transf", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "OBJ_VOXEL_EL_VOL", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "OBJ_VOXEL_EL_VOL", "]", "=", "self", ".", "hodataset", ".", "get_obj_voxel_element_volume", "(", "index", ")", "\n", "\n", "", "if", "CIAdaptQueries", ".", "HAND_PALM_VERT_IDX", "in", "queries", ":", "\n", "            ", "sample", "[", "CIAdaptQueries", ".", "HAND_PALM_VERT_IDX", "]", "=", "self", ".", "hodataset", ".", "get_hand_palm_vert_idx", "(", "index", ")", "\n", "\n", "", "if", "(", "\n", "CIAdaptQueries", ".", "VERTEX_CONTACT", "in", "queries", "\n", "or", "CIAdaptQueries", ".", "CONTACT_REGION_ID", "in", "queries", "\n", "or", "CIAdaptQueries", ".", "CONTACT_ANCHOR_ID", "in", "queries", "\n", "or", "CIAdaptQueries", ".", "CONTACT_ANCHOR_ELASTI", "in", "queries", "\n", ")", ":", "\n", "            ", "processed_dict", "=", "self", ".", "hodataset", ".", "get_processed_contact_info", "(", "index", ")", "\n", "if", "CIAdaptQueries", ".", "VERTEX_CONTACT", "in", "queries", ":", "\n", "                ", "sample", "[", "CIAdaptQueries", ".", "VERTEX_CONTACT", "]", "=", "processed_dict", "[", "\"vertex_contact\"", "]", "\n", "", "if", "CIAdaptQueries", ".", "CONTACT_REGION_ID", "in", "queries", ":", "\n", "                ", "sample", "[", "CIAdaptQueries", ".", "CONTACT_REGION_ID", "]", "=", "processed_dict", "[", "\"hand_region\"", "]", "\n", "", "if", "CIAdaptQueries", ".", "CONTACT_ANCHOR_ID", "in", "queries", ":", "\n", "                ", "sample", "[", "CIAdaptQueries", ".", "CONTACT_ANCHOR_ID", "]", "=", "processed_dict", "[", "\"anchor_id\"", "]", "\n", "", "if", "CIAdaptQueries", ".", "CONTACT_ANCHOR_ELASTI", "in", "queries", ":", "\n", "                ", "sample", "[", "CIAdaptQueries", ".", "CONTACT_ANCHOR_ELASTI", "]", "=", "processed_dict", "[", "\"anchor_elasti\"", "]", "\n", "", "contact_anchor_padding_mask", "=", "processed_dict", "[", "\"anchor_padding_mask\"", "]", "\n", "if", "contact_anchor_padding_mask", "is", "not", "None", ":", "\n", "                ", "sample", "[", "CIAdaptQueries", ".", "CONTACT_ANCHOR_PADDING_MASK", "]", "=", "contact_anchor_padding_mask", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ==================== process dumped queries >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "", "", "if", "(", "\n", "(", "CIDumpedQueries", ".", "HAND_VERTS_3D", "in", "queries", ")", "\n", "or", "(", "CIDumpedQueries", ".", "HAND_JOINTS_3D", "in", "queries", ")", "\n", "or", "(", "CIDumpedQueries", ".", "HAND_TSL", "in", "queries", ")", "\n", "or", "(", "CIDumpedQueries", ".", "HAND_ROT", "in", "queries", ")", "\n", "or", "(", "CIDumpedQueries", ".", "HAND_POSE", "in", "queries", ")", "\n", "or", "(", "CIDumpedQueries", ".", "HAND_SHAPE", "in", "queries", ")", "\n", "or", "(", "CIDumpedQueries", ".", "OBJ_VERTS_3D", "in", "queries", ")", "\n", "or", "(", "CIDumpedQueries", ".", "OBJ_TRANSF", "in", "queries", ")", "\n", "or", "(", "CIDumpedQueries", ".", "OBJ_TSL", "in", "queries", ")", "\n", "or", "(", "CIDumpedQueries", ".", "OBJ_ROT", "in", "queries", ")", "\n", ")", ":", "\n", "            ", "honet_dict", "=", "self", ".", "get_dumped_processed_pose", "(", "index", ")", "\n", "if", "CIDumpedQueries", ".", "HAND_VERTS_3D", "in", "queries", ":", "\n", "                ", "sample", "[", "CIDumpedQueries", ".", "HAND_VERTS_3D", "]", "=", "honet_dict", "[", "\"hand_verts_3d\"", "]", "\n", "\n", "", "if", "CIDumpedQueries", ".", "HAND_JOINTS_3D", "in", "queries", ":", "\n", "                ", "sample", "[", "CIDumpedQueries", ".", "HAND_JOINTS_3D", "]", "=", "honet_dict", "[", "\"hand_joints_3d\"", "]", "\n", "\n", "", "if", "CIDumpedQueries", ".", "HAND_TSL", "in", "queries", ":", "\n", "                ", "sample", "[", "CIDumpedQueries", ".", "HAND_TSL", "]", "=", "honet_dict", "[", "\"hand_tsl\"", "]", ".", "reshape", "(", "(", "3", ",", ")", ")", "\n", "\n", "", "if", "CIDumpedQueries", ".", "HAND_ROT", "in", "queries", ":", "\n", "                ", "sample", "[", "CIDumpedQueries", ".", "HAND_ROT", "]", "=", "honet_dict", "[", "\"hand_full_pose\"", "]", "[", "0", ":", "3", "]", "\n", "\n", "", "if", "CIDumpedQueries", ".", "HAND_POSE", "in", "queries", ":", "\n", "                ", "sample", "[", "CIDumpedQueries", ".", "HAND_POSE", "]", "=", "honet_dict", "[", "\"hand_full_pose\"", "]", ".", "reshape", "(", "(", "16", ",", "3", ")", ")", "\n", "\n", "", "if", "CIDumpedQueries", ".", "HAND_SHAPE", "in", "queries", ":", "\n", "                ", "sample", "[", "CIDumpedQueries", ".", "HAND_SHAPE", "]", "=", "honet_dict", "[", "\"hand_shape\"", "]", "\n", "", "if", "CIDumpedQueries", ".", "OBJ_VERTS_3D", "in", "queries", ":", "\n", "                ", "sample", "[", "CIDumpedQueries", ".", "OBJ_VERTS_3D", "]", "=", "honet_dict", "[", "\"obj_verts_3d\"", "]", "\n", "\n", "", "if", "CIDumpedQueries", ".", "OBJ_TSL", "in", "queries", ":", "\n", "                ", "sample", "[", "CIDumpedQueries", ".", "OBJ_TSL", "]", "=", "honet_dict", "[", "\"obj_tsl\"", "]", ".", "reshape", "(", "(", "3", ",", ")", ")", "\n", "\n", "", "if", "CIDumpedQueries", ".", "OBJ_ROT", "in", "queries", ":", "\n", "                ", "sample", "[", "CIDumpedQueries", ".", "OBJ_ROT", "]", "=", "honet_dict", "[", "\"obj_rot\"", "]", ".", "reshape", "(", "(", "3", ",", ")", ")", "\n", "\n", "", "", "if", "(", "\n", "CIDumpedQueries", ".", "VERTEX_CONTACT", "in", "queries", "\n", "or", "CIDumpedQueries", ".", "CONTACT_REGION_ID", "in", "queries", "\n", "or", "CIDumpedQueries", ".", "CONTACT_ANCHOR_ID", "in", "queries", "\n", "or", "CIDumpedQueries", ".", "CONTACT_ANCHOR_ELASTI", "in", "queries", "\n", ")", ":", "\n", "            ", "processed_dict", "=", "self", ".", "get_dumped_processed_contact_info", "(", "index", ")", "\n", "if", "CIDumpedQueries", ".", "VERTEX_CONTACT", "in", "queries", ":", "\n", "                ", "sample", "[", "CIDumpedQueries", ".", "VERTEX_CONTACT", "]", "=", "processed_dict", "[", "\"vertex_contact\"", "]", "\n", "", "if", "CIDumpedQueries", ".", "CONTACT_REGION_ID", "in", "queries", ":", "\n", "                ", "sample", "[", "CIDumpedQueries", ".", "CONTACT_REGION_ID", "]", "=", "processed_dict", "[", "\"hand_region\"", "]", "\n", "", "if", "CIDumpedQueries", ".", "CONTACT_ANCHOR_ID", "in", "queries", ":", "\n", "                ", "sample", "[", "CIDumpedQueries", ".", "CONTACT_ANCHOR_ID", "]", "=", "processed_dict", "[", "\"anchor_id\"", "]", "\n", "", "if", "CIDumpedQueries", ".", "CONTACT_ANCHOR_ELASTI", "in", "queries", ":", "\n", "                ", "sample", "[", "CIDumpedQueries", ".", "CONTACT_ANCHOR_ELASTI", "]", "=", "processed_dict", "[", "\"anchor_elasti\"", "]", "\n", "", "contact_anchor_padding_mask", "=", "processed_dict", "[", "\"anchor_padding_mask\"", "]", "\n", "if", "contact_anchor_padding_mask", "is", "not", "None", ":", "\n", "                ", "sample", "[", "CIDumpedQueries", ".", "CONTACT_ANCHOR_PADDING_MASK", "]", "=", "contact_anchor_padding_mask", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "", "", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.cioffline.CIOffline.__init__": [[10, 32], ["hocontact.hodatasets.cidata.CIdata.__init__", "cioffline.CIOffline.queries.update"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update"], ["    ", "def", "__init__", "(", "\n", "self", ",", "data_path", ",", "hodata_path", ",", "anchor_path", ",", "hodata_use_cache", "=", "True", ",", "hodata_center_idx", "=", "9", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "data_path", ",", "hodata_path", ",", "anchor_path", ",", "hodata_use_cache", "=", "hodata_use_cache", ",", "hodata_center_idx", "=", "hodata_center_idx", "\n", ")", "\n", "\n", "# along side with basic CIDumpedQueries, we need some adapt queries", "\n", "# for offline eval", "\n", "self", ".", "queries", ".", "update", "(", "\n", "{", "\n", "CIAdaptQueries", ".", "OBJ_VERTS_3D", ",", "\n", "CIAdaptQueries", ".", "OBJ_FACES", ",", "\n", "CIAdaptQueries", ".", "OBJ_TSL", ",", "\n", "CIAdaptQueries", ".", "OBJ_ROT", ",", "\n", "CIAdaptQueries", ".", "HAND_VERTS_3D", ",", "\n", "CIAdaptQueries", ".", "HAND_JOINTS_3D", ",", "\n", "CIAdaptQueries", ".", "HAND_FACES", ",", "\n", "CIAdaptQueries", ".", "HAND_SHAPE", ",", "\n", "CIAdaptQueries", ".", "HAND_TSL", ",", "\n", "CIAdaptQueries", ".", "HAND_ROT", ",", "\n", "CIAdaptQueries", ".", "IMAGE_PATH", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.cioffline.CIOffline.get_dumped_processed_contact_info": [[35, 54], ["os.path.join", "hocontact.utils.contactutils.dumped_process_contact_info", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.contactutils.dumped_process_contact_info"], ["", "def", "get_dumped_processed_contact_info", "(", "self", ",", "index", ")", ":", "\n", "        ", "dumped_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "f\"{index}.pkl\"", ")", "\n", "with", "open", "(", "dumped_file_path", ",", "\"rb\"", ")", "as", "bytestream", ":", "\n", "            ", "dumped_contact_info_list", "=", "pickle", ".", "load", "(", "bytestream", ")", "\n", "", "(", "vertex_contact", ",", "hand_region", ",", "anchor_id", ",", "anchor_elasti", ",", "anchor_padding_mask", ")", "=", "dumped_process_contact_info", "(", "\n", "dumped_contact_info_list", ",", "\n", "self", ".", "anchor_mapping", ",", "\n", "pad_vertex", "=", "self", ".", "contact_pad_vertex", ",", "\n", "pad_anchor", "=", "self", ".", "contact_pad_anchor", ",", "\n", "elasti_th", "=", "self", ".", "contact_elasti_th", ",", "\n", ")", "\n", "res", "=", "{", "\n", "\"vertex_contact\"", ":", "vertex_contact", ",", "\n", "\"hand_region\"", ":", "hand_region", ",", "\n", "\"anchor_id\"", ":", "anchor_id", ",", "\n", "\"anchor_elasti\"", ":", "anchor_elasti", ",", "\n", "\"anchor_padding_mask\"", ":", "anchor_padding_mask", ",", "\n", "}", "\n", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hoquery.one_query_in": [[80, 85], ["None"], "function", ["None"], ["", "def", "one_query_in", "(", "candidate_queries", ",", "base_queries", ")", ":", "\n", "    ", "for", "query", "in", "candidate_queries", ":", "\n", "        ", "if", "query", "in", "base_queries", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hoquery.get_trans_queries": [[87, 120], ["set", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add"], "function", ["None"], ["", "def", "get_trans_queries", "(", "base_queries", ")", ":", "\n", "    ", "trans_queries", "=", "set", "(", ")", "\n", "if", "BaseQueries", ".", "OBJ_VERTS_3D", "in", "base_queries", ":", "\n", "        ", "trans_queries", ".", "add", "(", "TransQueries", ".", "OBJ_VERTS_3D", ")", "\n", "", "if", "BaseQueries", ".", "IMAGE", "in", "base_queries", ":", "\n", "        ", "trans_queries", ".", "add", "(", "TransQueries", ".", "IMAGE", ")", "\n", "trans_queries", ".", "add", "(", "TransQueries", ".", "AFFINETRANS", ")", "\n", "trans_queries", ".", "add", "(", "TransQueries", ".", "ROTMAT", ")", "\n", "", "if", "BaseQueries", ".", "JOINTS_2D", "in", "base_queries", ":", "\n", "        ", "trans_queries", ".", "add", "(", "TransQueries", ".", "JOINTS_2D", ")", "\n", "", "if", "BaseQueries", ".", "JOINTS_3D", "in", "base_queries", ":", "\n", "        ", "trans_queries", ".", "add", "(", "TransQueries", ".", "JOINTS_3D", ")", "\n", "", "if", "BaseQueries", ".", "HAND_VERTS_3D", "in", "base_queries", ":", "\n", "        ", "trans_queries", ".", "add", "(", "TransQueries", ".", "HAND_VERTS_3D", ")", "\n", "trans_queries", ".", "add", "(", "TransQueries", ".", "CENTER_3D", ")", "\n", "", "if", "BaseQueries", ".", "HAND_VERTS_2D", "in", "base_queries", ":", "\n", "        ", "trans_queries", ".", "add", "(", "TransQueries", ".", "HAND_VERTS_2D", ")", "\n", "", "if", "BaseQueries", ".", "OBJ_VERTS_3D", "in", "base_queries", ":", "\n", "        ", "trans_queries", ".", "add", "(", "TransQueries", ".", "OBJ_VERTS_3D", ")", "\n", "", "if", "BaseQueries", ".", "OBJ_VERTS_2D", "in", "base_queries", ":", "\n", "        ", "trans_queries", ".", "add", "(", "TransQueries", ".", "OBJ_VERTS_2D", ")", "\n", "", "if", "BaseQueries", ".", "OBJ_CORNERS_3D", "in", "base_queries", ":", "\n", "        ", "trans_queries", ".", "add", "(", "TransQueries", ".", "OBJ_CORNERS_3D", ")", "\n", "", "if", "BaseQueries", ".", "OBJ_CORNERS_2D", "in", "base_queries", ":", "\n", "        ", "trans_queries", ".", "add", "(", "TransQueries", ".", "OBJ_CORNERS_2D", ")", "\n", "", "if", "BaseQueries", ".", "CAM_INTR", "in", "base_queries", ":", "\n", "        ", "trans_queries", ".", "add", "(", "TransQueries", ".", "CAM_INTR", ")", "\n", "", "if", "BaseQueries", ".", "OBJ_TRANSF", "in", "base_queries", ":", "\n", "        ", "trans_queries", ".", "add", "(", "TransQueries", ".", "OBJ_TRANSF", ")", "\n", "", "if", "BaseQueries", ".", "OBJ_CAN_VERTS", "in", "base_queries", "or", "BaseQueries", ".", "OBJ_CAN_CORNERS", ":", "\n", "        ", "trans_queries", ".", "add", "(", "BaseQueries", ".", "OBJ_CAN_SCALE", ")", "\n", "trans_queries", ".", "add", "(", "BaseQueries", ".", "OBJ_CAN_TRANS", ")", "\n", "", "return", "trans_queries", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hoquery.match_collate_queries": [[122, 139], ["None"], "function", ["None"], ["", "def", "match_collate_queries", "(", "query_spin", ")", ":", "\n", "    ", "object_vertex_queries", "=", "[", "\n", "TransQueries", ".", "OBJ_VERTS_3D", ",", "\n", "BaseQueries", ".", "OBJ_VERTS_3D", ",", "\n", "BaseQueries", ".", "OBJ_CAN_VERTS", ",", "\n", "BaseQueries", ".", "OBJ_VERTS_2D", ",", "\n", "BaseQueries", ".", "OBJ_VIS_2D", ",", "\n", "TransQueries", ".", "OBJ_VERTS_2D", ",", "\n", "]", "\n", "object_face_quries", "=", "[", "\n", "BaseQueries", ".", "OBJ_FACES", ",", "\n", "]", "\n", "\n", "if", "query_spin", "in", "object_vertex_queries", ":", "\n", "        ", "return", "CollateQueries", ".", "PADDING_MASK", "\n", "", "elif", "query_spin", "in", "object_face_quries", ":", "\n", "        ", "return", "CollateQueries", ".", "FACE_PADDING_MASK", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.load_manoinfo": [[16, 21], ["functools.lru_cache", "open", "pickle.load"], "function", ["None"], ["@", "lru_cache", "(", "128", ")", "\n", "def", "load_manoinfo", "(", "pkl_path", ")", ":", "\n", "    ", "with", "open", "(", "pkl_path", ",", "\"rb\"", ")", "as", "p_f", ":", "\n", "        ", "data", "=", "pickle", ".", "load", "(", "p_f", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.load_manofits": [[23, 44], ["os.path.join", "fhbutils.load_manoinfo", "metas.append", "os.path.join", "obj_paths.append"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.load_manoinfo"], ["", "def", "load_manofits", "(", "sample_infos", ",", "fit_root", "=", "\"assets/fhbhands_fits\"", ")", ":", "\n", "    ", "obj_paths", "=", "[", "]", "\n", "metas", "=", "[", "]", "\n", "for", "sample_info", "in", "sample_infos", ":", "\n", "        ", "hand_seq_path", "=", "os", ".", "path", ".", "join", "(", "\n", "fit_root", ",", "sample_info", "[", "\"subject\"", "]", ",", "sample_info", "[", "\"action_name\"", "]", ",", "sample_info", "[", "\"seq_idx\"", "]", ",", "\"pkls.pkl\"", "\n", ")", "\n", "mano_info", "=", "load_manoinfo", "(", "hand_seq_path", ")", "\n", "frame_name", "=", "f\"{sample_info['frame_idx']:06d}.pkl\"", "\n", "hand_info", "=", "mano_info", "[", "frame_name", "]", "\n", "metas", ".", "append", "(", "hand_info", ")", "\n", "hand_obj_path", "=", "os", ".", "path", ".", "join", "(", "\n", "fit_root", ",", "\n", "sample_info", "[", "\"subject\"", "]", ",", "\n", "sample_info", "[", "\"action_name\"", "]", ",", "\n", "sample_info", "[", "\"seq_idx\"", "]", ",", "\n", "\"obj\"", ",", "\n", "f\"{sample_info['frame_idx']:06d}.obj\"", ",", "\n", ")", "\n", "obj_paths", ".", "append", "(", "hand_obj_path", ")", "\n", "", "return", "obj_paths", ",", "metas", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.load_objects": [[46, 55], ["collections.OrderedDict", "os.path.join", "trimesh.load", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "load_objects", "(", "obj_root", "=", "\"data/fhbhands_supp/Object_models\"", ",", "object_names", "=", "[", "\"juice\"", "]", ")", ":", "\n", "    ", "all_models", "=", "OrderedDict", "(", ")", "\n", "for", "obj_name", "in", "object_names", ":", "\n", "        ", "obj_path", "=", "os", ".", "path", ".", "join", "(", "obj_root", ",", "\"{}_model\"", ".", "format", "(", "obj_name", ")", ",", "\"{}_model_ds.ply\"", ".", "format", "(", "obj_name", ")", ")", "\n", "mesh", "=", "trimesh", ".", "load", "(", "obj_path", ")", "\n", "if", "obj_name", "==", "\"juice\"", ":", "\n", "            ", "obj_name", "=", "\"juice_bottle\"", "\n", "", "all_models", "[", "obj_name", "]", "=", "{", "\"verts\"", ":", "np", ".", "array", "(", "mesh", ".", "vertices", ")", ",", "\"faces\"", ":", "np", ".", "array", "(", "mesh", ".", "faces", ")", "}", "\n", "", "return", "all_models", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.load_objects_normal": [[57, 66], ["collections.OrderedDict", "os.path.join", "trimesh.load"], "function", ["None"], ["", "def", "load_objects_normal", "(", "obj_root", "=", "\"data/fhbhands_supp/Object_models\"", ",", "object_names", "=", "[", "\"juice\"", "]", ")", ":", "\n", "    ", "all_models_normal", "=", "OrderedDict", "(", ")", "\n", "for", "obj_name", "in", "object_names", ":", "\n", "        ", "obj_path", "=", "os", ".", "path", ".", "join", "(", "obj_root", ",", "\"{}_model\"", ".", "format", "(", "obj_name", ")", ",", "\"{}_ds_normal.obj\"", ".", "format", "(", "obj_name", ")", ")", "\n", "mesh", "=", "trimesh", ".", "load", "(", "obj_path", ",", "process", "=", "False", ")", "\n", "if", "obj_name", "==", "\"juice\"", ":", "\n", "            ", "obj_name", "=", "\"juice_bottle\"", "\n", "", "all_models_normal", "[", "obj_name", "]", "=", "mesh", ".", "vertex_normals", "\n", "", "return", "all_models_normal", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.load_objects_reduced": [[68, 77], ["collections.OrderedDict", "os.path.join", "trimesh.load", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "load_objects_reduced", "(", "obj_root", "=", "\"data/fhbhands_supp/Object_models\"", ",", "object_names", "=", "[", "\"juice\"", "]", ")", ":", "\n", "    ", "all_models", "=", "OrderedDict", "(", ")", "\n", "for", "obj_name", "in", "object_names", ":", "\n", "        ", "obj_path", "=", "os", ".", "path", ".", "join", "(", "obj_root", ",", "\"{}_model\"", ".", "format", "(", "obj_name", ")", ",", "\"{}_model_ds_plus.ply\"", ".", "format", "(", "obj_name", ")", ")", "\n", "mesh", "=", "trimesh", ".", "load", "(", "obj_path", ")", "\n", "if", "obj_name", "==", "\"juice\"", ":", "\n", "            ", "obj_name", "=", "\"juice_bottle\"", "\n", "", "all_models", "[", "obj_name", "]", "=", "{", "\"verts\"", ":", "np", ".", "array", "(", "mesh", ".", "vertices", ")", ",", "\"faces\"", ":", "np", ".", "array", "(", "mesh", ".", "faces", ")", "}", "\n", "", "return", "all_models", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.load_objects_voxel": [[79, 92], ["collections.OrderedDict", "os.path.join", "trimesh.load", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "load_objects_voxel", "(", "obj_root", "=", "\"data/fhbhands_supp/Object_models_binvox\"", ",", "object_names", "=", "[", "\"juice\"", "]", ")", ":", "\n", "    ", "all_models", "=", "OrderedDict", "(", ")", "\n", "for", "obj_name", "in", "object_names", ":", "\n", "        ", "obj_path", "=", "os", ".", "path", ".", "join", "(", "obj_root", ",", "\"{}_model\"", ".", "format", "(", "obj_name", ")", ",", "\"{}_model.binvox\"", ".", "format", "(", "obj_name", ")", ")", "\n", "vox", "=", "trimesh", ".", "load", "(", "obj_path", ")", "\n", "if", "obj_name", "==", "\"juice\"", ":", "\n", "            ", "obj_name", "=", "\"juice_bottle\"", "\n", "", "all_models", "[", "obj_name", "]", "=", "{", "\n", "\"points\"", ":", "np", ".", "array", "(", "vox", ".", "points", ")", ",", "\n", "\"matrix\"", ":", "np", ".", "array", "(", "vox", ".", "matrix", ")", ",", "\n", "\"element_volume\"", ":", "vox", ".", "element_volume", ",", "\n", "}", "\n", "", "return", "all_models", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.update_synt_anno": [[94, 121], ["list", "chain.from_iterable", "pickle.load", "list", "open", "type", "chain.from_iterable", "type", "p.replace().replace", "i.replace().replace", "range", "p.replace", "i.replace"], "function", ["None"], ["", "def", "update_synt_anno", "(", "annotations", ",", "rand_size", ",", "super_name", ")", ":", "\n", "    ", "from", "itertools", "import", "chain", "\n", "\n", "anno_argu", "=", "{", "}", "\n", "for", "k", "in", "annotations", ":", "\n", "        ", "if", "type", "(", "annotations", "[", "k", "]", ")", "==", "list", "and", "k", "!=", "\"image_names\"", ":", "\n", "            ", "anno_argu", "[", "k", "]", "=", "list", "(", "chain", ".", "from_iterable", "(", "[", "[", "i", "]", "*", "rand_size", "for", "i", "in", "annotations", "[", "k", "]", "]", ")", ")", "\n", "", "elif", "type", "(", "annotations", "[", "k", "]", ")", "!=", "list", ":", "\n", "            ", "anno_argu", "[", "k", "]", "=", "annotations", "[", "k", "]", "\n", "\n", "", "", "anno_argu", "[", "\"image_names\"", "]", "=", "list", "(", "\n", "chain", ".", "from_iterable", "(", "\n", "[", "\n", "[", "\n", "i", ".", "replace", "(", "\".jpeg\"", ",", "f\"_{t}.jpeg\"", ")", ".", "replace", "(", "super_name", ",", "f\"{super_name}_synthesis\"", ")", "\n", "for", "t", "in", "range", "(", "rand_size", ")", "\n", "]", "\n", "for", "i", "in", "annotations", "[", "\"image_names\"", "]", "\n", "]", "\n", ")", "\n", ")", "\n", "\n", "anno_argu", "[", "\"rand_transf\"", "]", "=", "[", "\n", "pickle", ".", "load", "(", "open", "(", "p", ".", "replace", "(", "\"color\"", ",", "\"meta\"", ")", ".", "replace", "(", "\"jpeg\"", ",", "\"pkl\"", ")", ",", "\"rb\"", ")", ")", "for", "p", "in", "anno_argu", "[", "\"image_names\"", "]", "\n", "]", "\n", "\n", "return", "anno_argu", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.load_object_infos": [[123, 150], ["os.listdir", "os.path.join", "os.listdir", "os.path.join", "os.listdir", "len", "os.path.join", "action.split", "open", "seq_f.readlines", "raw_line.strip().split", "int", "numpy.array().astype", "trans_matrix.reshape().transpose.reshape().transpose", "raw_line.strip", "numpy.array", "trans_matrix.reshape().transpose.reshape"], "function", ["None"], ["", "def", "load_object_infos", "(", "seq_root", "=", "\"data/fhbhands/Object_6D_pose_annotation_v1_1\"", ")", ":", "\n", "    ", "subjects", "=", "os", ".", "listdir", "(", "seq_root", ")", "\n", "annots", "=", "{", "}", "\n", "clip_lengths", "=", "{", "}", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "subject_dict", "=", "{", "}", "\n", "subj_path", "=", "os", ".", "path", ".", "join", "(", "seq_root", ",", "subject", ")", "\n", "actions", "=", "os", ".", "listdir", "(", "subj_path", ")", "\n", "clips", "=", "0", "\n", "for", "action", "in", "actions", ":", "\n", "            ", "object_name", "=", "\"_\"", ".", "join", "(", "action", ".", "split", "(", "\"_\"", ")", "[", "1", ":", "]", ")", "\n", "action_path", "=", "os", ".", "path", ".", "join", "(", "subj_path", ",", "action", ")", "\n", "seqs", "=", "os", ".", "listdir", "(", "action_path", ")", "\n", "clips", "+=", "len", "(", "seqs", ")", "\n", "for", "seq", "in", "seqs", ":", "\n", "                ", "seq_path", "=", "os", ".", "path", ".", "join", "(", "action_path", ",", "seq", ",", "\"object_pose.txt\"", ")", "\n", "with", "open", "(", "seq_path", ",", "\"r\"", ")", "as", "seq_f", ":", "\n", "                    ", "raw_lines", "=", "seq_f", ".", "readlines", "(", ")", "\n", "", "for", "raw_line", "in", "raw_lines", ":", "\n", "                    ", "line", "=", "raw_line", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "frame_idx", "=", "int", "(", "line", "[", "0", "]", ")", "\n", "trans_matrix", "=", "np", ".", "array", "(", "line", "[", "1", ":", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "trans_matrix", "=", "trans_matrix", ".", "reshape", "(", "4", ",", "4", ")", ".", "transpose", "(", ")", "\n", "subject_dict", "[", "(", "action", ",", "seq", ",", "frame_idx", ")", "]", "=", "(", "object_name", ",", "trans_matrix", ")", "\n", "", "", "", "clip_lengths", "[", "subject", "]", "=", "clip_lengths", "\n", "annots", "[", "subject", "]", "=", "subject_dict", "\n", "", "return", "annots", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.load_contact_infos": [[152, 181], ["os.listdir", "os.path.join", "os.listdir", "os.path.join", "os.listdir", "len", "os.path.join", "sorted", "action.split", "os.listdir", "int", "os.path.join", "re_strip_frame_idx.match().groups", "print", "print", "re_strip_frame_idx.match"], "function", ["None"], ["", "def", "load_contact_infos", "(", "seq_root", "=", "\"data/fhbhands_supp/Object_contact_region_annotation_v512\"", ")", ":", "\n", "    ", "subjects", "=", "os", ".", "listdir", "(", "seq_root", ")", "\n", "contact_blob", "=", "{", "}", "\n", "clip_lengths", "=", "{", "}", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "subject_dict", "=", "{", "}", "\n", "subject_path", "=", "os", ".", "path", ".", "join", "(", "seq_root", ",", "subject", ")", "\n", "actions", "=", "os", ".", "listdir", "(", "subject_path", ")", "\n", "clips", "=", "0", "\n", "for", "action", "in", "actions", ":", "\n", "            ", "object_name", "=", "\"_\"", ".", "join", "(", "action", ".", "split", "(", "\"_\"", ")", "[", "1", ":", "]", ")", "\n", "action_path", "=", "os", ".", "path", ".", "join", "(", "subject_path", ",", "action", ")", "\n", "seqs", "=", "os", ".", "listdir", "(", "action_path", ")", "\n", "clips", "+=", "len", "(", "seqs", ")", "\n", "for", "seq", "in", "seqs", ":", "\n", "                ", "sel_seq_path", "=", "os", ".", "path", ".", "join", "(", "action_path", ",", "seq", ")", "\n", "all_pkl", "=", "sorted", "(", "os", ".", "listdir", "(", "sel_seq_path", ")", ")", "\n", "for", "pkl_name", "in", "all_pkl", ":", "\n", "                    ", "try", ":", "\n", "                        ", "current_frame_idx", "=", "re_strip_frame_idx", ".", "match", "(", "pkl_name", ")", ".", "groups", "(", ")", "[", "0", "]", "\n", "current_frame_idx", "=", "int", "(", "current_frame_idx", ")", "\n", "pkl_target", "=", "os", ".", "path", ".", "join", "(", "sel_seq_path", ",", "pkl_name", ")", "\n", "subject_dict", "[", "(", "action", ",", "seq", ",", "current_frame_idx", ")", "]", "=", "pkl_target", "\n", "", "except", "IndexError", "as", "e", ":", "\n", "                        ", "print", "(", "f\"regular expression parsing error at {pkl_name}, location {subject}.{action}.{seq}\"", ")", "\n", "print", "(", "e", ")", "\n", "", "", "", "", "clip_lengths", "[", "subject", "]", "=", "clip_lengths", "\n", "contact_blob", "[", "subject", "]", "=", "subject_dict", "\n", "", "return", "contact_blob", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.get_seq_map": [[183, 251], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "int", "enumerate", "seq_map[].append", "fhbutils.empty_stack_next", "dict", "dict", "dict", "strong.append", "weak.append", "collections.defaultdict.pop", "abs", "min", "len", "len", "len", "weak.pop", "strong.append", "collections.defaultdict.pop", "len", "stack_next.pop", "fhbutils.empty_stack_next", "fhbutils.empty_stack_next", "stack_next.append", "collections.defaultdict.items", "len", "len", "len", "set", "set", "set", "range", "len"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.empty_stack_next", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.empty_stack_next", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.empty_stack_next"], ["", "def", "get_seq_map", "(", "sample_infos", ",", "fraction", "=", "1", ")", ":", "\n", "    ", "seq_map", "=", "defaultdict", "(", "list", ")", "\n", "inv_seq_map", "=", "defaultdict", "(", ")", "\n", "closeseqmap", "=", "defaultdict", "(", "dict", ")", "\n", "spacing", "=", "int", "(", "1", "/", "fraction", ")", "\n", "cur_sample", "=", "sample_infos", "[", "0", "]", "\n", "cur_key", "=", "(", "cur_sample", "[", "\"subject\"", "]", ",", "cur_sample", "[", "\"action_name\"", "]", ",", "cur_sample", "[", "\"seq_idx\"", "]", ")", "\n", "idx_count", "=", "0", "\n", "seq_count", "=", "0", "\n", "previous", "=", "0", "# Keep track of idx of previous annotated frame", "\n", "stack_next", "=", "[", "]", "# Keep track of idxs that need to get assigned a next frame", "\n", "strong", "=", "[", "]", "\n", "weak", "=", "[", "]", "\n", "for", "sample_idx", ",", "sample_info", "in", "enumerate", "(", "sample_infos", ")", ":", "\n", "        ", "next_key", "=", "(", "sample_info", "[", "\"subject\"", "]", ",", "sample_info", "[", "\"action_name\"", "]", ",", "sample_info", "[", "\"seq_idx\"", "]", ")", "\n", "if", "next_key", "!=", "cur_key", ":", "\n", "# Get back last frame for sequence and mark as strong", "\n", "            ", "if", "fraction", "!=", "1", "and", "len", "(", "weak", ")", ":", "\n", "                ", "last_idx", "=", "weak", ".", "pop", "(", ")", "\n", "strong", ".", "append", "(", "last_idx", ")", "\n", "closeseqmap", ".", "pop", "(", "last_idx", ")", "\n", "", "if", "fraction", "!=", "1", "and", "len", "(", "stack_next", ")", ":", "\n", "                ", "stack_next", ".", "pop", "(", ")", "\n", "\n", "# Reinitialize sequence counter", "\n", "", "seq_count", "=", "0", "\n", "previous", "=", "idx_count", "\n", "\n", "# Add last_idx to end of previous sequence for accumulated indices", "\n", "if", "fraction", "!=", "1", ":", "\n", "                ", "empty_stack_next", "(", "stack_next", ",", "idx_count", "-", "1", ",", "closeseqmap", ")", "\n", "stack_next", "=", "[", "]", "\n", "", "cur_key", "=", "next_key", "\n", "assert", "sample_info", "[", "\"frame_idx\"", "]", "==", "0", "\n", "", "if", "fraction", "!=", "1", ":", "\n", "            ", "if", "seq_count", "%", "spacing", "==", "0", ":", "\n", "                ", "previous", "=", "idx_count", "\n", "empty_stack_next", "(", "stack_next", ",", "idx_count", ",", "closeseqmap", ")", "\n", "stack_next", "=", "[", "]", "\n", "", "else", ":", "\n", "                ", "stack_next", ".", "append", "(", "idx_count", ")", "\n", "closeseqmap", "[", "idx_count", "]", "[", "\"previous\"", "]", "=", "previous", "\n", "", "", "if", "next_key", "!=", "cur_key", "or", "seq_count", "%", "spacing", "==", "0", "or", "(", "sample_idx", "==", "len", "(", "sample_infos", ")", "-", "1", ")", "or", "(", "fraction", "==", "1", ")", ":", "\n", "            ", "strong", ".", "append", "(", "idx_count", ")", "\n", "", "else", ":", "\n", "            ", "weak", ".", "append", "(", "idx_count", ")", "\n", "\n", "", "full_key", "=", "(", "\n", "sample_info", "[", "\"subject\"", "]", ",", "\n", "sample_info", "[", "\"action_name\"", "]", ",", "\n", "sample_info", "[", "\"seq_idx\"", "]", ",", "\n", "sample_info", "[", "\"frame_idx\"", "]", ",", "\n", ")", "\n", "seq_map", "[", "cur_key", "]", ".", "append", "(", "(", "*", "full_key", ",", "idx_count", ")", ")", "\n", "inv_seq_map", "[", "full_key", "]", "=", "idx_count", "\n", "idx_count", "+=", "1", "\n", "seq_count", "+=", "1", "\n", "", "if", "fraction", "!=", "1", ":", "\n", "        ", "empty_stack_next", "(", "stack_next", ",", "idx_count", "-", "1", ",", "closeseqmap", ")", "\n", "if", "idx_count", "-", "1", "in", "closeseqmap", ":", "\n", "            ", "closeseqmap", ".", "pop", "(", "idx_count", "-", "1", ")", "\n", "", "distances", "=", "[", "abs", "(", "key", "-", "val", "[", "\"closest\"", "]", ")", "for", "key", ",", "val", "in", "closeseqmap", ".", "items", "(", ")", "]", "\n", "assert", "min", "(", "distances", ")", "==", "1", "\n", "assert", "len", "(", "weak", ")", "+", "len", "(", "strong", ")", "==", "len", "(", "sample_infos", ")", "\n", "assert", "not", "len", "(", "(", "set", "(", "weak", ")", "|", "set", "(", "strong", ")", ")", "-", "set", "(", "range", "(", "len", "(", "sample_infos", ")", ")", ")", ")", "\n", "", "for", "strong_idx", "in", "strong", ":", "\n", "        ", "closeseqmap", "[", "strong_idx", "]", "=", "{", "\"closest\"", ":", "strong_idx", ",", "\"previous\"", ":", "strong_idx", ",", "\"next\"", ":", "strong_idx", "}", "\n", "", "return", "dict", "(", "seq_map", ")", ",", "dict", "(", "inv_seq_map", ")", ",", "dict", "(", "closeseqmap", ")", ",", "strong", ",", "weak", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.empty_stack_next": [[253, 266], ["abs", "abs"], "function", ["None"], ["", "def", "empty_stack_next", "(", "stack", ",", "idx_count", ",", "closeseqmap", ")", ":", "\n", "    ", "\"\"\"\n    Assign correct final frames and distances to accumulated indices\n    since last anchor\n    \"\"\"", "\n", "for", "cand_next", "in", "stack", ":", "\n", "        ", "closeseqmap", "[", "cand_next", "]", "[", "\"next\"", "]", "=", "idx_count", "\n", "dist_next", "=", "abs", "(", "cand_next", "-", "idx_count", ")", "\n", "dist_prev", "=", "abs", "(", "closeseqmap", "[", "cand_next", "]", "[", "\"previous\"", "]", "-", "cand_next", ")", "\n", "if", "dist_prev", ">", "dist_next", ":", "\n", "            ", "closeseqmap", "[", "cand_next", "]", "[", "\"closest\"", "]", "=", "closeseqmap", "[", "cand_next", "]", "[", "\"next\"", "]", "\n", "", "else", ":", "\n", "            ", "closeseqmap", "[", "cand_next", "]", "[", "\"closest\"", "]", "=", "closeseqmap", "[", "cand_next", "]", "[", "\"previous\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.get_action_train_test": [[268, 302], ["len", "len", "line.startswith", "[].split", "[].strip", "int", "range", "numpy.unique", "numpy.unique", "len", "all_infos.append", "list", "list", "len", "len", "line.split", "line.split"], "function", ["None"], ["", "", "", "def", "get_action_train_test", "(", "lines_raw", ",", "subjects_info", ")", ":", "\n", "    ", "\"\"\"\n    Returns dicts of samples where key is\n        subject: name of subject\n        action_name: action class\n        action_seq_idx: idx of action instance\n        frame_idx\n    and value is the idx of the action class\n    \"\"\"", "\n", "all_infos", "=", "[", "]", "\n", "test_split", "=", "False", "\n", "test_samples", "=", "{", "}", "\n", "train_samples", "=", "{", "}", "\n", "for", "line", "in", "lines_raw", "[", "1", ":", "]", ":", "\n", "        ", "if", "line", ".", "startswith", "(", "\"Test\"", ")", ":", "\n", "            ", "test_split", "=", "True", "\n", "continue", "\n", "", "subject", ",", "action_name", ",", "action_seq_idx", "=", "line", ".", "split", "(", "\" \"", ")", "[", "0", "]", ".", "split", "(", "\"/\"", ")", "\n", "action_idx", "=", "line", ".", "split", "(", "\" \"", ")", "[", "1", "]", ".", "strip", "(", ")", "# Action classif index", "\n", "frame_nb", "=", "int", "(", "subjects_info", "[", "subject", "]", "[", "(", "action_name", ",", "action_seq_idx", ")", "]", ")", "\n", "for", "frame_idx", "in", "range", "(", "frame_nb", ")", ":", "\n", "            ", "sample_info", "=", "(", "subject", ",", "action_name", ",", "action_seq_idx", ",", "frame_idx", ")", "\n", "if", "test_split", ":", "\n", "                ", "test_samples", "[", "sample_info", "]", "=", "action_idx", "\n", "", "else", ":", "\n", "                ", "train_samples", "[", "sample_info", "]", "=", "action_idx", "\n", "", "all_infos", ".", "append", "(", "sample_info", ")", "\n", "", "", "test_nb", "=", "len", "(", "np", ".", "unique", "(", "list", "(", "(", "sub", ",", "act_n", ",", "act_seq", ")", "for", "(", "sub", ",", "act_n", ",", "act_seq", ",", "_", ")", "in", "test_samples", ")", ",", "axis", "=", "0", ")", ")", "\n", "assert", "test_nb", "==", "575", ",", "\"Should get 575 test samples, got {}\"", ".", "format", "(", "test_nb", ")", "\n", "train_nb", "=", "len", "(", "np", ".", "unique", "(", "list", "(", "(", "sub", ",", "act_n", ",", "act_seq", ")", "for", "(", "sub", ",", "act_n", ",", "act_seq", ",", "_", ")", "in", "train_samples", ")", ",", "axis", "=", "0", ")", ")", "\n", "# 600 - 1 Subject5/use_flash/6 discarded sample", "\n", "assert", "train_nb", "==", "600", "or", "train_nb", "==", "599", ",", "\"Should get 599 train samples, got {}\"", ".", "format", "(", "train_nb", ")", "\n", "assert", "len", "(", "test_samples", ")", "+", "len", "(", "train_samples", ")", "==", "len", "(", "all_infos", ")", "\n", "return", "train_samples", ",", "test_samples", ",", "all_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.transform_obj_verts": [[304, 310], ["numpy.concatenate", "transf.dot", "cam_extr.dot().transpose", "numpy.ones", "cam_extr.dot", "transf_verts.transpose"], "function", ["None"], ["", "def", "transform_obj_verts", "(", "verts", ",", "transf", ",", "cam_extr", ")", ":", "\n", "    ", "verts", "=", "verts", "*", "1000", "\n", "hom_verts", "=", "np", ".", "concatenate", "(", "[", "verts", ",", "np", ".", "ones", "(", "[", "verts", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "transf_verts", "=", "transf", ".", "dot", "(", "hom_verts", ".", "T", ")", ".", "T", "\n", "transf_verts", "=", "cam_extr", ".", "dot", "(", "transf_verts", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "[", ":", ",", ":", "3", "]", "\n", "return", "transf_verts", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.get_skeletons": [[312, 338], ["os.path.join", "os.makedirs", "os.path.dirname", "os.path.exists", "hocontact.utils.logger.logger.info", "collections.defaultdict", "tqdm.tqdm", "open", "pickle.load", "subjects_info.items", "tqdm.tqdm", "open", "pickle.dump", "os.path.join", "numpy.loadtxt", "len", "numpy.all", "skeleton_vals[].reshape", "list", "range"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info"], ["", "def", "get_skeletons", "(", "skeleton_root", ",", "subjects_info", ",", "use_cache", "=", "True", ")", ":", "\n", "    ", "cache_path", "=", "os", ".", "path", ".", "join", "(", "\"common/cache/fhbhands/skels.pkl\"", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "cache_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_path", ")", "and", "use_cache", ":", "\n", "        ", "with", "open", "(", "cache_path", ",", "\"rb\"", ")", "as", "p_f", ":", "\n", "            ", "skelet_dict", "=", "pickle", ".", "load", "(", "p_f", ")", "\n", "", "logger", ".", "info", "(", "\"Loaded fhb skel info from {}\"", ".", "format", "(", "cache_path", ")", ",", "\"yellow\"", ")", "\n", "", "else", ":", "\n", "        ", "skelet_dict", "=", "defaultdict", "(", "dict", ")", "\n", "for", "subject", ",", "samples", "in", "tqdm", "(", "subjects_info", ".", "items", "(", ")", ",", "desc", "=", "\"subj\"", ")", ":", "\n", "            ", "for", "(", "action", ",", "seq_idx", ")", "in", "tqdm", "(", "samples", ",", "desc", "=", "\"sample\"", ")", ":", "\n", "                ", "skeleton_path", "=", "os", ".", "path", ".", "join", "(", "skeleton_root", ",", "subject", ",", "action", ",", "seq_idx", ",", "\"skeleton.txt\"", ")", "\n", "skeleton_vals", "=", "np", ".", "loadtxt", "(", "skeleton_path", ")", "\n", "if", "len", "(", "skeleton_vals", ")", ":", "\n", "                    ", "assert", "np", ".", "all", "(", "\n", "skeleton_vals", "[", ":", ",", "0", "]", "==", "list", "(", "range", "(", "skeleton_vals", ".", "shape", "[", "0", "]", ")", ")", "\n", ")", ",", "\"row idxs should match frame idx failed at {}\"", ".", "format", "(", "skeleton_path", ")", "\n", "skelet_dict", "[", "subject", "]", "[", "(", "action", ",", "seq_idx", ")", "]", "=", "skeleton_vals", "[", ":", ",", "1", ":", "]", ".", "reshape", "(", "\n", "skeleton_vals", ".", "shape", "[", "0", "]", ",", "21", ",", "-", "1", "\n", ")", "\n", "", "else", ":", "\n", "# Handle sequences of size 0", "\n", "                    ", "skelet_dict", "[", "subject", ",", "action", ",", "seq_idx", "]", "=", "skeleton_vals", "\n", "", "", "", "with", "open", "(", "cache_path", ",", "\"wb\"", ")", "as", "p_f", ":", "\n", "            ", "pickle", ".", "dump", "(", "skelet_dict", ",", "p_f", ")", "\n", "", "", "return", "skelet_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.__init__": [[28, 122], ["hocontact.hodatasets.hodata.HOdata.__init__", "fhb_example.FHBExample.all_queries.update", "hocontact.hodatasets.hoquery.get_trans_queries", "fhb_example.FHBExample.all_queries.update", "numpy.array", "numpy.array", "numpy.array", "os.path.join", "os.path.normpath", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hoquery.get_trans_queries", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update"], ["def", "__init__", "(", "\n", "self", ",", "\n", "data_root", "=", "\"data\"", ",", "\n", "data_split", "=", "\"example\"", ",", "\n", "split_mode", "=", "\"example\"", ",", "\n", "njoints", "=", "21", ",", "\n", "use_cache", "=", "True", ",", "\n", "filter_no_contact", "=", "True", ",", "\n", "filter_thresh", "=", "5.0", ",", "# mm", "\n", "mini_factor", "=", "1.0", ",", "\n", "center_idx", "=", "9", ",", "\n", "scale_jittering", "=", "0.0", ",", "\n", "center_jittering", "=", "0.0", ",", "\n", "block_rot", "=", "False", ",", "\n", "max_rot", "=", "0.0", "*", "np", ".", "pi", ",", "\n", "hue", "=", "0.15", ",", "\n", "saturation", "=", "0.5", ",", "\n", "contrast", "=", "0.5", ",", "\n", "brightness", "=", "0.5", ",", "\n", "blur_radius", "=", "0.5", ",", "\n", "query", "=", "None", ",", "\n", "sides", "=", "\"right\"", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "data_root", ",", "\n", "data_split", ",", "\n", "njoints", ",", "\n", "use_cache", ",", "\n", "filter_no_contact", ",", "\n", "filter_thresh", ",", "\n", "mini_factor", ",", "\n", "center_idx", ",", "\n", "scale_jittering", ",", "\n", "center_jittering", ",", "\n", "block_rot", ",", "\n", "max_rot", ",", "\n", "hue", ",", "\n", "saturation", ",", "\n", "contrast", ",", "\n", "brightness", ",", "\n", "blur_radius", ",", "\n", "query", ",", "\n", "sides", ",", "\n", ")", "\n", "self", ".", "name", "=", "\"fhbhands_example\"", "\n", "self", ".", "split_mode", "=", "split_mode", "\n", "self", ".", "reduce_res", "=", "True", "\n", "self", ".", "full_image", "=", "True", "\n", "\n", "self", ".", "all_queries", ".", "update", "(", "\n", "{", "\n", "BaseQueries", ".", "IMAGE", ",", "\n", "BaseQueries", ".", "JOINTS_2D", ",", "\n", "BaseQueries", ".", "JOINTS_3D", ",", "\n", "BaseQueries", ".", "OBJ_VERTS_2D", ",", "\n", "BaseQueries", ".", "OBJ_VERTS_3D", ",", "\n", "BaseQueries", ".", "HAND_FACES", ",", "\n", "BaseQueries", ".", "HAND_VERTS_3D", ",", "\n", "BaseQueries", ".", "HAND_VERTS_2D", ",", "\n", "BaseQueries", ".", "OBJ_FACES", ",", "\n", "BaseQueries", ".", "OBJ_CAN_VERTS", ",", "\n", "BaseQueries", ".", "SIDE", ",", "\n", "BaseQueries", ".", "CAM_INTR", ",", "\n", "BaseQueries", ".", "OBJ_TRANSF", ",", "\n", "BaseQueries", ".", "IMAGE_PATH", ",", "\n", "}", "\n", ")", "\n", "trans_queries", "=", "get_trans_queries", "(", "self", ".", "all_queries", ")", "\n", "self", ".", "all_queries", ".", "update", "(", "trans_queries", ")", "\n", "\n", "self", ".", "queries", "=", "query", "\n", "if", "query", "is", "None", ":", "\n", "            ", "self", ".", "queries", "=", "self", ".", "all_queries", "\n", "\n", "# Get camera info", "\n", "", "self", ".", "cam_extr", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "0.999988496304", ",", "-", "0.00468848412856", ",", "0.000982563360594", ",", "25.7", "]", ",", "\n", "[", "0.00469115935266", ",", "0.999985218048", ",", "-", "0.00273845880292", ",", "1.22", "]", ",", "\n", "[", "-", "0.000969709653873", ",", "0.00274303671904", ",", "0.99999576807", ",", "3.902", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "]", "\n", ")", "\n", "self", ".", "cam_intr", "=", "np", ".", "array", "(", "[", "[", "1395.749023", ",", "0", ",", "935.732544", "]", ",", "[", "0", ",", "1395.749268", ",", "540.681030", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "self", ".", "reorder_idx", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "6", ",", "7", ",", "8", ",", "2", ",", "9", ",", "10", ",", "11", ",", "3", ",", "12", ",", "13", ",", "14", ",", "4", ",", "15", ",", "16", ",", "17", ",", "5", ",", "18", ",", "19", ",", "20", "]", ")", "\n", "\n", "self", ".", "idxs", "=", "[", "0", ",", "4", ",", "3", ",", "2", ",", "1", ",", "8", ",", "7", ",", "6", ",", "5", ",", "12", ",", "11", ",", "10", ",", "9", ",", "16", ",", "15", ",", "14", ",", "13", ",", "20", ",", "19", "]", "\n", "\n", "# sample_list", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "name", ")", "\n", "self", ".", "root_extra_info", "=", "os", ".", "path", ".", "normpath", "(", "\"assets\"", ")", "\n", "self", ".", "sample_list_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"sample_list.txt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.load_dataset": [[123, 177], ["float", "hocontact.hodatasets.fhbutils.load_objects", "hocontact.hodatasets.fhbutils.load_objects_normal", "hocontact.hodatasets.fhbutils.load_objects_voxel", "numpy.loadtxt", "termcolor.cprint", "int", "int", "open", "fstream.read", "FHBExample.matcher.match", "fhb_example.FHBExample.image_names.append", "fhb_example.FHBExample.joints3d.append", "fhb_example.FHBExample.joints2d.append", "fhb_example.FHBExample.objnames.append", "fhb_example.FHBExample.objtransforms.append", "fhb_example.FHBExample.mano_infos.append", "os.path.join", "fstream.read.split", "FHBExample.matcher.match.group", "FHBExample.matcher.match.group", "FHBExample.matcher.match.group", "FHBExample.matcher.match.group", "os.path.join", "open", "pickle.load", "os.path.join", "os.path.join", "os.path.join", "len", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.load_objects", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.load_objects_normal", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.load_objects_voxel"], ["", "def", "load_dataset", "(", "self", ")", ":", "\n", "# basic attr", "\n", "        ", "self", ".", "reduce_factor", "=", "float", "(", "1", "/", "4", ")", "\n", "self", ".", "image_size", "=", "[", "int", "(", "1920", "*", "self", ".", "reduce_factor", ")", ",", "int", "(", "1080", "*", "self", ".", "reduce_factor", ")", "]", "\n", "self", ".", "inp_res", "=", "self", ".", "image_size", "\n", "\n", "all_objects", "=", "[", "\"juice\"", ",", "\"liquid_soap\"", ",", "\"milk\"", ",", "\"salt\"", "]", "\n", "\n", "with", "open", "(", "self", ".", "sample_list_path", ",", "\"r\"", ")", "as", "fstream", ":", "\n", "            ", "contents", "=", "fstream", ".", "read", "(", ")", "\n", "", "sample_list_lines", "=", "[", "x", "for", "x", "in", "contents", ".", "split", "(", "\"\\n\"", ")", "if", "len", "(", "x", ")", ">", "0", "]", "\n", "\n", "self", ".", "image_names", "=", "[", "]", "\n", "self", ".", "joints3d", "=", "[", "]", "\n", "self", ".", "joints2d", "=", "[", "]", "\n", "self", ".", "objnames", "=", "[", "]", "\n", "self", ".", "objtransforms", "=", "[", "]", "\n", "self", ".", "mano_infos", "=", "[", "]", "\n", "for", "sample_keyword", "in", "sample_list_lines", ":", "\n", "            ", "match_res", "=", "FHBExample", ".", "matcher", ".", "match", "(", "sample_keyword", ")", "\n", "subject_key", ",", "action_key", ",", "seq_id", ",", "frame_id", "=", "(", "\n", "match_res", ".", "group", "(", "1", ")", ",", "\n", "match_res", ".", "group", "(", "2", ")", ",", "\n", "match_res", ".", "group", "(", "3", ")", ",", "\n", "match_res", ".", "group", "(", "4", ")", ",", "\n", ")", "\n", "save_keyword", "=", "\"__\"", ".", "join", "(", "(", "subject_key", ",", "action_key", ",", "seq_id", ",", "frame_id", ")", ")", "\n", "# image_names", "\n", "self", ".", "image_names", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"images\"", ",", "f\"{save_keyword}.jpeg\"", ")", ")", "\n", "# annotations", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"annotations\"", ",", "f\"{save_keyword}.pkl\"", ")", ",", "\"rb\"", ")", "as", "fstream", ":", "\n", "                ", "anno_dict", "=", "pickle", ".", "load", "(", "fstream", ")", "\n", "", "self", ".", "joints3d", ".", "append", "(", "anno_dict", "[", "\"joints_3d\"", "]", ")", "\n", "self", ".", "joints2d", ".", "append", "(", "anno_dict", "[", "\"joints_2d\"", "]", ")", "# reduced", "\n", "self", ".", "objnames", ".", "append", "(", "anno_dict", "[", "\"obj_name\"", "]", ")", "\n", "self", ".", "objtransforms", ".", "append", "(", "anno_dict", "[", "\"obj_transf\"", "]", ")", "\n", "self", ".", "mano_infos", ".", "append", "(", "anno_dict", "[", "\"mano_info\"", "]", ")", "\n", "\n", "", "self", ".", "split_objects", "=", "fhbutils", ".", "load_objects", "(", "\n", "obj_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"object_models\"", ")", ",", "object_names", "=", "all_objects", "\n", ")", "\n", "self", ".", "split_objects_normal", "=", "fhbutils", ".", "load_objects_normal", "(", "\n", "obj_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"object_models\"", ")", ",", "object_names", "=", "all_objects", "\n", ")", "\n", "self", ".", "fhb_objects_voxel", "=", "fhbutils", ".", "load_objects_voxel", "(", "\n", "obj_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"object_models\"", ")", ",", "object_names", "=", "all_objects", ",", "\n", ")", "\n", "\n", "self", ".", "hand_palm_vertex_index", "=", "np", ".", "loadtxt", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_extra_info", ",", "\"hand_palm_full.txt\"", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "# reduce cam_intr", "\n", "self", ".", "cam_intr", "[", ":", "2", "]", "=", "self", ".", "cam_intr", "[", ":", "2", "]", "*", "self", ".", "reduce_factor", "\n", "\n", "cprint", "(", "f\"Got {len(self.image_names)} samples for data_split {self.data_split}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.__len__": [[178, 180], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_image": [[181, 185], ["PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "get_image", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_path", "=", "self", ".", "image_names", "[", "idx", "]", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_image_path": [[186, 188], ["None"], "methods", ["None"], ["", "def", "get_image_path", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "image_names", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample._fhb_get_hand_info": [[189, 192], ["None"], "methods", ["None"], ["", "def", "_fhb_get_hand_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "mano_info", "=", "self", ".", "mano_infos", "[", "idx", "]", "\n", "return", "mano_info", "[", "\"fullpose\"", "]", ",", "mano_info", "[", "\"trans\"", "]", ",", "mano_info", "[", "\"shape\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_hand_verts3d": [[193, 198], ["fhb_example.FHBExample._fhb_get_hand_info", "fhb_example.FHBExample.layer", "numpy.array().astype", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "verts[].numpy", "numpy.array", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB._fhb_get_hand_info"], ["", "def", "get_hand_verts3d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pose", ",", "trans", ",", "shape", "=", "self", ".", "_fhb_get_hand_info", "(", "idx", ")", "\n", "verts", ",", "_", "=", "self", ".", "layer", "(", "torch", ".", "Tensor", "(", "pose", ")", ".", "unsqueeze", "(", "0", ")", ",", "torch", ".", "Tensor", "(", "shape", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "verts", "=", "verts", "[", "0", "]", ".", "numpy", "(", ")", "+", "trans", "\n", "return", "np", ".", "array", "(", "verts", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_hand_verts2d": [[199, 204], ["fhb_example.FHBExample.get_hand_verts3d", "numpy.array().dot().transpose", "numpy.array().astype", "numpy.array().dot", "numpy.array", "fhb_example.FHBExample.transpose", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_verts3d"], ["", "def", "get_hand_verts2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "verts", "=", "self", ".", "get_hand_verts3d", "(", "idx", ")", "\n", "hom_2d", "=", "np", ".", "array", "(", "self", ".", "cam_intr", ")", ".", "dot", "(", "verts", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "verts2d", "=", "(", "hom_2d", "/", "hom_2d", "[", ":", ",", "2", ":", "]", ")", "[", ":", ",", ":", "2", "]", "\n", "return", "np", ".", "array", "(", "verts2d", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_hand_faces": [[205, 208], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "get_hand_faces", "(", "self", ",", "idx", ")", ":", "\n", "        ", "faces", "=", "np", ".", "array", "(", "self", ".", "layer", ".", "th_faces", ")", ".", "astype", "(", "np", ".", "long", ")", "\n", "return", "faces", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_obj_faces": [[209, 213], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "get_obj_faces", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "objfaces", "=", "self", ".", "split_objects", "[", "obj", "]", "[", "\"faces\"", "]", "\n", "return", "np", ".", "array", "(", "objfaces", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_obj_transf": [[214, 216], ["fhb_example.FHBExample.get_obj_transf_wrt_cam"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_transf_wrt_cam"], ["", "def", "get_obj_transf", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_obj_transf_wrt_cam", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_obj_pose": [[217, 219], ["fhb_example.FHBExample.get_obj_transf_wrt_cam"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_transf_wrt_cam"], ["", "def", "get_obj_pose", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_obj_transf_wrt_cam", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_obj_rot": [[220, 222], ["fhb_example.FHBExample.get_obj_transf_wrt_cam"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_transf_wrt_cam"], ["", "def", "get_obj_rot", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_obj_transf_wrt_cam", "(", "idx", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_obj_tsl": [[223, 225], ["fhb_example.FHBExample.get_obj_transf_wrt_cam"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_transf_wrt_cam"], ["", "def", "get_obj_tsl", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_obj_transf_wrt_cam", "(", "idx", ")", "[", ":", "3", ",", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_obj_normal": [[226, 230], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "get_obj_normal", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "normal", "=", "self", ".", "split_objects_normal", "[", "obj", "]", "\n", "return", "np", ".", "array", "(", "normal", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_obj_verts_transf": [[231, 237], ["numpy.array().astype", "hocontact.hodatasets.fhbutils.transform_obj_verts", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.transform_obj_verts"], ["", "def", "get_obj_verts_transf", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "transf", "=", "self", ".", "objtransforms", "[", "idx", "]", "\n", "verts_raw", "=", "self", ".", "split_objects", "[", "obj", "]", "[", "\"verts\"", "]", "\n", "transf_verts", "=", "fhbutils", ".", "transform_obj_verts", "(", "verts_raw", ",", "transf", ",", "self", ".", "cam_extr", ")", "/", "1000", "\n", "return", "np", ".", "array", "(", "transf_verts", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_obj_verts_can": [[238, 243], ["hocontact.utils.meshutils.center_vert_bbox"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.meshutils.center_vert_bbox"], ["", "def", "get_obj_verts_can", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "verts", "=", "self", ".", "split_objects", "[", "obj", "]", "[", "\"verts\"", "]", "\n", "verts_can", ",", "bbox_center", ",", "bbox_scale", "=", "meshutils", ".", "center_vert_bbox", "(", "verts", ",", "scale", "=", "False", ")", "\n", "return", "verts_can", ",", "bbox_center", ",", "bbox_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_obj_verts2d": [[244, 250], ["fhb_example.FHBExample.get_obj_verts_transf", "numpy.array().dot().transpose", "verts2d.astype", "numpy.array().dot", "fhb_example.FHBExample.transpose", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_transf"], ["", "def", "get_obj_verts2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "objpoints3d", "=", "self", ".", "get_obj_verts_transf", "(", "idx", ")", "\n", "objpoints3d", "=", "objpoints3d", "*", "1000", "\n", "hom_2d", "=", "np", ".", "array", "(", "self", ".", "cam_intr", ")", ".", "dot", "(", "objpoints3d", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "verts2d", "=", "(", "hom_2d", "/", "hom_2d", "[", ":", ",", "2", ":", "]", ")", "[", ":", ",", ":", "2", "]", "\n", "return", "verts2d", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_obj_transf_wrt_cam": [[251, 264], ["fhb_example.FHBExample.get_obj_verts_can", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate.astype", "rot.dot", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_can"], ["", "def", "get_obj_transf_wrt_cam", "(", "self", ",", "idx", ")", ":", "\n", "        ", "verts_can", ",", "v_0", ",", "_", "=", "self", ".", "get_obj_verts_can", "(", "idx", ")", "\n", "\n", "transf", "=", "self", ".", "objtransforms", "[", "idx", "]", "\n", "transf", "=", "self", ".", "cam_extr", "@", "transf", "\n", "rot", "=", "transf", "[", ":", "3", ",", ":", "3", "]", "\n", "tsl", "=", "transf", "[", ":", "3", ",", "3", "]", "/", "1000.0", "\n", "tsl_wrt_cam", "=", "rot", ".", "dot", "(", "v_0", ")", "+", "tsl", "\n", "tsl_wrt_cam", "=", "tsl_wrt_cam", "[", ":", ",", "np", ".", "newaxis", "]", "# (3, 1)", "\n", "\n", "obj_transf", "=", "np", ".", "concatenate", "(", "[", "rot", ",", "tsl_wrt_cam", "]", ",", "axis", "=", "1", ")", "# (3, 4)", "\n", "obj_transf", "=", "np", ".", "concatenate", "(", "[", "obj_transf", ",", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ")", "[", "np", ".", "newaxis", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "return", "obj_transf", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_joints3d": [[265, 268], ["None"], "methods", ["None"], ["", "def", "get_joints3d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "joints", "=", "self", ".", "joints3d", "[", "idx", "]", "\n", "return", "joints", "/", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_joints2d": [[269, 272], ["None"], "methods", ["None"], ["", "def", "get_joints2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "joints", "=", "self", ".", "joints2d", "[", "idx", "]", "\n", "return", "joints", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_cam_intr": [[273, 276], ["camintr.astype"], "methods", ["None"], ["", "def", "get_cam_intr", "(", "self", ",", "idx", ")", ":", "\n", "        ", "camintr", "=", "self", ".", "cam_intr", "\n", "return", "camintr", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_sides": [[277, 279], ["None"], "methods", ["None"], ["", "def", "get_sides", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "\"right\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_center_scale": [[280, 287], ["numpy.array", "NotImplementedError"], "methods", ["None"], ["", "def", "get_center_scale", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "full_image", ":", "\n", "            ", "center", "=", "np", ".", "array", "(", "(", "480", "/", "2", ",", "270", "/", "2", ")", ")", "\n", "scale", "=", "480", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "center", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_hand_tsl_wrt_cam": [[288, 291], ["mano_info[].astype"], "methods", ["None"], ["", "def", "get_hand_tsl_wrt_cam", "(", "self", ",", "idx", ")", ":", "\n", "        ", "mano_info", "=", "self", ".", "mano_infos", "[", "idx", "]", "\n", "return", "mano_info", "[", "\"trans\"", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_hand_shape": [[292, 295], ["mano_info[].astype"], "methods", ["None"], ["", "def", "get_hand_shape", "(", "self", ",", "idx", ")", ":", "\n", "        ", "mano_info", "=", "self", ".", "mano_infos", "[", "idx", "]", "\n", "return", "mano_info", "[", "\"shape\"", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_hand_pose_wrt_cam": [[296, 299], ["mano_info[].astype"], "methods", ["None"], ["", "def", "get_hand_pose_wrt_cam", "(", "self", ",", "idx", ")", ":", "\n", "        ", "mano_info", "=", "self", ".", "mano_infos", "[", "idx", "]", "\n", "return", "mano_info", "[", "\"fullpose\"", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_hand_axisang_wrt_cam": [[300, 303], ["[].astype"], "methods", ["None"], ["", "def", "get_hand_axisang_wrt_cam", "(", "self", ",", "idx", ")", ":", "\n", "        ", "mano_info", "=", "self", ".", "mano_infos", "[", "idx", "]", "\n", "return", "mano_info", "[", "\"fullpose\"", "]", "[", "0", ":", "3", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_hand_rot_wrt_cam": [[304, 308], ["fhb_example.FHBExample.get_hand_axisang_wrt_cam", "liegroups.SO3.exp().as_matrix", "liegroups.SO3.exp().as_matrix.astype", "liegroups.SO3.exp"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_axisang_wrt_cam"], ["", "def", "get_hand_rot_wrt_cam", "(", "self", ",", "idx", ")", ":", "\n", "        ", "axisang", "=", "self", ".", "get_hand_axisang_wrt_cam", "(", "idx", ")", "\n", "rot", "=", "SO3", ".", "exp", "(", "axisang", ")", ".", "as_matrix", "(", ")", "\n", "return", "rot", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_obj_voxel_points_can": [[309, 314], ["hocontact.utils.meshutils.center_vert_bbox"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.meshutils.center_vert_bbox"], ["", "def", "get_obj_voxel_points_can", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "objvoxpts", "=", "self", ".", "fhb_objects_voxel", "[", "obj", "]", "[", "\"points\"", "]", "\n", "verts_can", ",", "bbox_center", ",", "bbox_scale", "=", "meshutils", ".", "center_vert_bbox", "(", "objvoxpts", ",", "scale", "=", "False", ")", "\n", "return", "verts_can", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_obj_voxel_points_transf": [[315, 321], ["numpy.array().astype", "hocontact.hodatasets.fhbutils.transform_obj_verts", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.transform_obj_verts"], ["", "def", "get_obj_voxel_points_transf", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "transf", "=", "self", ".", "objtransforms", "[", "idx", "]", "\n", "objvoxpts", "=", "self", ".", "fhb_objects_voxel", "[", "obj", "]", "[", "\"points\"", "]", "\n", "transf_verts", "=", "fhbutils", ".", "transform_obj_verts", "(", "objvoxpts", ",", "transf", ",", "self", ".", "cam_extr", ")", "/", "1000", "\n", "return", "np", ".", "array", "(", "transf_verts", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_obj_voxel_element_volume": [[322, 326], ["None"], "methods", ["None"], ["", "def", "get_obj_voxel_element_volume", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "objvoxelvol", "=", "self", ".", "fhb_objects_voxel", "[", "obj", "]", "[", "\"element_volume\"", "]", "\n", "return", "objvoxelvol", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_hand_palm_vert_idx": [[328, 330], ["len"], "methods", ["None"], ["", "def", "get_hand_palm_vert_idx", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "hand_palm_vertex_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_hand_vis2d": [[331, 334], ["numpy.ones_like", "fhb_example.FHBExample.get_hand_verts2d"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_verts2d"], ["", "def", "get_hand_vis2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "handvis", "=", "np", ".", "ones_like", "(", "self", ".", "get_hand_verts2d", "(", "idx", ")", ")", "\n", "return", "handvis", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_joint_vis": [[335, 337], ["numpy.ones"], "methods", ["None"], ["", "def", "get_joint_vis", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "np", ".", "ones", "(", "self", ".", "njoints", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_n_hand_palm_vert": [[338, 340], ["len"], "methods", ["None"], ["", "def", "get_n_hand_palm_vert", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "hand_palm_vertex_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_obj_textures": [[341, 345], ["numpy.array"], "methods", ["None"], ["", "def", "get_obj_textures", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "objtextures", "=", "self", ".", "split_objects", "[", "obj", "]", "[", "\"textures\"", "]", "\n", "return", "np", ".", "array", "(", "objtextures", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_obj_vis2d": [[346, 349], ["numpy.ones_like", "fhb_example.FHBExample.get_obj_verts2d"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts2d"], ["", "def", "get_obj_vis2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "objvis", "=", "np", ".", "ones_like", "(", "self", ".", "get_obj_verts2d", "(", "idx", ")", ")", "\n", "return", "objvis", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.FHBExample.get_sample_identifier": [[350, 360], ["None"], "methods", ["None"], ["", "def", "get_sample_identifier", "(", "self", ",", "idx", ")", ":", "\n", "        ", "identifier", "=", "(", "\n", "f\"{self.data_split}_{self.split_mode}_mf{self.mini_factor}\"", "\n", "f\"_rf{self.reduce_factor}\"", "\n", "f\"_fct{self.filter_thresh if self.filter_no_contact else '(x)'}\"", "\n", "f\"_ec\"", "\n", ")", "\n", "\n", "res", "=", "f\"{self.name}/{identifier}/{idx}\"", "\n", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.transform_obj_verts": [[17, 23], ["numpy.concatenate", "transf.dot", "cam_extr.dot().transpose", "numpy.ones", "cam_extr.dot", "transf_verts.transpose"], "function", ["None"], ["def", "transform_obj_verts", "(", "verts", ",", "transf", ",", "cam_extr", ")", ":", "\n", "    ", "verts", "=", "verts", "*", "1000", "\n", "hom_verts", "=", "np", ".", "concatenate", "(", "[", "verts", ",", "np", ".", "ones", "(", "[", "verts", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "transf_verts", "=", "transf", ".", "dot", "(", "hom_verts", ".", "T", ")", ".", "T", "\n", "transf_verts", "=", "cam_extr", ".", "dot", "(", "transf_verts", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "[", ":", ",", ":", "3", "]", "\n", "return", "transf_verts", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.__init__": [[22, 147], ["hocontact.HOdata.__init__", "fhb.FPHB.all_queries.update", "hocontact.hodatasets.hoquery.get_trans_queries", "fhb.FPHB.all_queries.update", "numpy.array", "numpy.array", "numpy.array", "ValueError"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hoquery.get_trans_queries", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_root", "=", "\"data\"", ",", "\n", "data_split", "=", "\"train\"", ",", "\n", "split_mode", "=", "\"actions\"", ",", "\n", "njoints", "=", "21", ",", "\n", "use_cache", "=", "True", ",", "\n", "filter_no_contact", "=", "True", ",", "\n", "filter_thresh", "=", "10.0", ",", "# mm", "\n", "mini_factor", "=", "1.0", ",", "\n", "center_idx", "=", "9", ",", "\n", "scale_jittering", "=", "0.0", ",", "\n", "center_jittering", "=", "0.0", ",", "\n", "block_rot", "=", "False", ",", "\n", "max_rot", "=", "0.0", "*", "np", ".", "pi", ",", "\n", "hue", "=", "0.15", ",", "\n", "saturation", "=", "0.5", ",", "\n", "contrast", "=", "0.5", ",", "\n", "brightness", "=", "0.5", ",", "\n", "blur_radius", "=", "0.5", ",", "\n", "query", "=", "None", ",", "\n", "sides", "=", "\"right\"", ",", "\n", "# *======== FHB >>>>>>>>>>>>>>>>>>>", "\n", "full_image", "=", "True", ",", "\n", "reduce_res", "=", "True", ",", "\n", "enable_contact", "=", "False", ",", "\n", "contact_pad_vertex", "=", "True", ",", "\n", "contact_pad_anchor", "=", "True", ",", "\n", "contact_range_th", "=", "1000.0", ",", "\n", "contact_elasti_th", "=", "0.00", ",", "\n", "for_render", "=", "False", ",", "\n", "load_objects_reduced", "=", "False", ",", "\n", "load_objects_voxel", "=", "False", ",", "\n", "# *<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "data_root", ",", "\n", "data_split", ",", "\n", "njoints", ",", "\n", "use_cache", ",", "\n", "filter_no_contact", ",", "\n", "filter_thresh", ",", "\n", "mini_factor", ",", "\n", "center_idx", ",", "\n", "scale_jittering", ",", "\n", "center_jittering", ",", "\n", "block_rot", ",", "\n", "max_rot", ",", "\n", "hue", ",", "\n", "saturation", ",", "\n", "contrast", ",", "\n", "brightness", ",", "\n", "blur_radius", ",", "\n", "query", ",", "\n", "sides", ",", "\n", ")", "\n", "self", ".", "name", "=", "\"fhbhands\"", "\n", "self", ".", "split_mode", "=", "split_mode", "\n", "self", ".", "reduce_res", "=", "reduce_res", "\n", "self", ".", "for_render", "=", "for_render", "\n", "self", ".", "load_objects_reduced", "=", "load_objects_reduced", "\n", "self", ".", "load_objects_voxel", "=", "load_objects_voxel", "\n", "self", ".", "enable_contact", "=", "enable_contact", "\n", "self", ".", "full_image", "=", "full_image", "\n", "self", ".", "contact_pad_vertex", "=", "contact_pad_vertex", "\n", "self", ".", "contact_pad_anchor", "=", "contact_pad_anchor", "\n", "self", ".", "contact_range_th", "=", "contact_range_th", "\n", "self", ".", "contact_elasti_th", "=", "contact_elasti_th", "\n", "\n", "self", ".", "rand_size", "=", "0", "# Always ZERO in the parent class", "\n", "\n", "self", ".", "mode_opts", "=", "[", "\"actions\"", ",", "\"objects\"", ",", "\"subjects\"", "]", "\n", "self", ".", "subjects", "=", "[", "\n", "\"Subject_1\"", ",", "\n", "\"Subject_2\"", ",", "\n", "\"Subject_3\"", ",", "\n", "\"Subject_4\"", ",", "\n", "\"Subject_5\"", ",", "\n", "\"Subject_6\"", ",", "\n", "]", "\n", "if", "split_mode", "not", "in", "self", ".", "mode_opts", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Split for dataset {self.name} should be in {self.mode_opts}, got {split_mode}.\"", ")", "\n", "\n", "# get queries", "\n", "", "self", ".", "all_queries", ".", "update", "(", "\n", "{", "\n", "BaseQueries", ".", "IMAGE", ",", "\n", "BaseQueries", ".", "JOINTS_2D", ",", "\n", "BaseQueries", ".", "JOINTS_3D", ",", "\n", "BaseQueries", ".", "OBJ_VERTS_2D", ",", "\n", "BaseQueries", ".", "OBJ_VIS_2D", ",", "\n", "BaseQueries", ".", "OBJ_VERTS_3D", ",", "\n", "BaseQueries", ".", "HAND_FACES", ",", "\n", "BaseQueries", ".", "HAND_VERTS_3D", ",", "\n", "BaseQueries", ".", "HAND_VERTS_2D", ",", "\n", "BaseQueries", ".", "OBJ_FACES", ",", "\n", "BaseQueries", ".", "OBJ_CAN_VERTS", ",", "\n", "BaseQueries", ".", "SIDE", ",", "\n", "BaseQueries", ".", "CAM_INTR", ",", "\n", "BaseQueries", ".", "JOINT_VIS", ",", "\n", "BaseQueries", ".", "OBJ_TRANSF", ",", "\n", "}", "\n", ")", "\n", "trans_queries", "=", "get_trans_queries", "(", "self", ".", "all_queries", ")", "\n", "self", ".", "all_queries", ".", "update", "(", "trans_queries", ")", "\n", "\n", "self", ".", "queries", "=", "query", "\n", "if", "query", "is", "None", ":", "\n", "            ", "self", ".", "queries", "=", "self", ".", "all_queries", "\n", "\n", "# Get camera info", "\n", "", "self", ".", "cam_extr", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "0.999988496304", ",", "-", "0.00468848412856", ",", "0.000982563360594", ",", "25.7", "]", ",", "\n", "[", "0.00469115935266", ",", "0.999985218048", ",", "-", "0.00273845880292", ",", "1.22", "]", ",", "\n", "[", "-", "0.000969709653873", ",", "0.00274303671904", ",", "0.99999576807", ",", "3.902", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "]", "\n", ")", "\n", "self", ".", "cam_intr", "=", "np", ".", "array", "(", "[", "[", "1395.749023", ",", "0", ",", "935.732544", "]", ",", "[", "0", ",", "1395.749268", ",", "540.681030", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "self", ".", "reorder_idx", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "6", ",", "7", ",", "8", ",", "2", ",", "9", ",", "10", ",", "11", ",", "3", ",", "12", ",", "13", ",", "14", ",", "4", ",", "15", ",", "16", ",", "17", ",", "5", ",", "18", ",", "19", ",", "20", "]", ")", "\n", "\n", "self", ".", "idxs", "=", "[", "0", ",", "4", ",", "3", ",", "2", ",", "1", ",", "8", ",", "7", ",", "6", ",", "5", ",", "12", ",", "11", ",", "10", ",", "9", ",", "16", ",", "15", ",", "14", ",", "13", ",", "20", ",", "19", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB._preload": [[148, 173], ["os.path.join", "os.path.join", "os.path.normpath", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "float", "os.path.join", "float"], "methods", ["None"], ["", "def", "_preload", "(", "self", ")", ":", "\n", "# ! ALL PATH SETTING SHOULD IN THIS PRE-LOAD", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "name", ")", "\n", "self", ".", "root_supp", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "f\"{self.name}_supp\"", ")", "\n", "self", ".", "root_extra_info", "=", "os", ".", "path", ".", "normpath", "(", "\"assets\"", ")", "\n", "self", ".", "info_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"Subjects_info\"", ")", "\n", "self", ".", "info_split", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"data_split_action_recognition.txt\"", ")", "\n", "small_rgb_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"Video_files_480\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "small_rgb_root", ")", "and", "self", ".", "reduce_res", ":", "\n", "            ", "self", ".", "rgb_root", "=", "small_rgb_root", "\n", "self", ".", "reduce_factor", "=", "float", "(", "1", "/", "4", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rgb_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"Video_files\"", ")", "\n", "self", ".", "reduce_factor", "=", "float", "(", "1", ")", "\n", "", "self", ".", "skeleton_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"Hand_pose_annotation_v1\"", ")", "\n", "\n", "self", ".", "rgb_template", "=", "\"color_{:04d}.jpeg\"", "\n", "# Joints are numbered from tip to base, we want opposite", "\n", "\n", "self", ".", "cache_path", "=", "os", ".", "path", ".", "join", "(", "\"common\"", ",", "\"cache\"", ",", "self", ".", "name", ")", "\n", "\n", "# NOTE: eci for \"enable contact info\"", "\n", "self", ".", "cache_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "cache_path", ",", "\n", "f\"{self.data_split}_{self.split_mode}_mf{self.mini_factor}\"", "\n", "f\"_rf{self.reduce_factor}\"", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.load_dataset": [[179, 389], ["fhb.FPHB._preload", "os.path.dirname", "os.makedirs", "numpy.loadtxt", "fhb.FPHB.get_n_hand_palm_vert", "hocontact.utils.logger.logger.info", "os.path.exists", "hocontact.utils.logger.logger.info", "hocontact.hodatasets.fhbutils.get_skeletons", "hocontact.hodatasets.fhbutils.get_action_train_test", "hocontact.hodatasets.fhbutils.load_objects", "hocontact.hodatasets.fhbutils.load_objects_normal", "hocontact.hodatasets.fhbutils.load_object_infos", "hocontact.hodatasets.fhbutils.load_manofits", "hocontact.utils.logger.logger.info", "hocontact.hodatasets.fhbutils.load_objects_reduced", "hocontact.hodatasets.fhbutils.load_objects_voxel", "os.path.join", "manopth.anchorutils.anchor_load_driver", "int", "int", "open", "pickle.load", "os.path.join", "open", "annot_f.readlines", "annot_f.close", "os.path.join", "os.path.join", "numpy.concatenate", "[].astype", "clips.append", "objtransforms.append", "objnames.append", "image_names.append", "sample_infos.append", "joints3d.append", "numpy.array().dot().transpose", "joints2d.append", "hand_sides.append", "hocontact.utils.logger.logger.info", "hocontact.hodatasets.fhbutils.update_synt_anno", "list", "int", "random.Random().shuffle", "hocontact.hodatasets.fhbutils.update_synt_anno.items", "open", "pickle.dump", "open", "subject_f.readlines", "subject_f.close", "os.path.join", "os.path.join", "fhb.FPHB.rgb_template.format", "hocontact.hodatasets.fhbutils.transform_obj_verts", "scipy.spatial.distance.cdist", "skel2d.astype", "range", "os.path.join", "os.path.join", "len", "line.strip().split", "hocontact.utils.logger.logger.error", "KeyError", "numpy.ones", "scipy.spatial.distance.cdist.min", "numpy.array().dot", "len", "len", "random.Random", "line.split", "hocontact.utils.logger.logger.error", "KeyError", "hocontact.utils.logger.logger.error", "KeyError", "fhb.FPHB.cam_extr.dot().transpose", "[].astype.transpose", "line.strip", "numpy.array", "fhb.FPHB.cam_extr.dot", "numpy.concatenate.transpose"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB._preload", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_n_hand_palm_vert", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.get_skeletons", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.get_action_train_test", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.load_objects", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.load_objects_normal", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.load_object_infos", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.load_manofits", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.load_objects_reduced", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.load_objects_voxel", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhbutils.update_synt_anno", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.transform_obj_verts", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.error", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.error", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.error"], ["", "def", "load_dataset", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_preload", "(", ")", "\n", "cache_folder", "=", "os", ".", "path", ".", "dirname", "(", "self", ".", "cache_path", ")", "\n", "os", ".", "makedirs", "(", "cache_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "all_objects", "=", "[", "\"juice\"", ",", "\"liquid_soap\"", ",", "\"milk\"", ",", "\"salt\"", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "cache_path", ")", "and", "self", ".", "use_cache", ":", "\n", "            ", "with", "open", "(", "self", ".", "cache_path", ",", "\"rb\"", ")", "as", "p_f", ":", "\n", "                ", "annotations", "=", "pickle", ".", "load", "(", "p_f", ")", "\n", "", "logger", ".", "info", "(", "f\"Loaded cache information for dataset {self.name} from {self.cache_path}\"", ")", "\n", "", "else", ":", "\n", "            ", "subjects_infos", "=", "{", "}", "\n", "for", "subject", "in", "self", ".", "subjects", ":", "\n", "                ", "subject_info_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "info_root", ",", "\"{}_info.txt\"", ".", "format", "(", "subject", ")", ")", "\n", "subjects_infos", "[", "subject", "]", "=", "{", "}", "\n", "with", "open", "(", "subject_info_path", ",", "\"r\"", ")", "as", "subject_f", ":", "\n", "                    ", "raw_lines", "=", "subject_f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "raw_lines", "[", "3", ":", "]", ":", "\n", "                        ", "line", "=", "\" \"", ".", "join", "(", "line", ".", "split", "(", ")", ")", "\n", "action", ",", "action_idx", ",", "length", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "subjects_infos", "[", "subject", "]", "[", "(", "action", ",", "action_idx", ")", "]", "=", "length", "\n", "", "subject_f", ".", "close", "(", ")", "\n", "", "", "skel_info", "=", "fhbutils", ".", "get_skeletons", "(", "self", ".", "skeleton_root", ",", "subjects_infos", ")", "\n", "\n", "with", "open", "(", "self", ".", "info_split", ",", "\"r\"", ")", "as", "annot_f", ":", "\n", "                ", "lines_raw", "=", "annot_f", ".", "readlines", "(", ")", "\n", "annot_f", ".", "close", "(", ")", "\n", "", "train_list", ",", "test_list", ",", "all_infos", "=", "fhbutils", ".", "get_action_train_test", "(", "lines_raw", ",", "subjects_infos", ")", "\n", "\n", "# use object is always ture", "\n", "self", ".", "fhb_objects", "=", "fhbutils", ".", "load_objects", "(", "\n", "obj_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_supp", ",", "\"Object_models\"", ")", ",", "object_names", "=", "all_objects", ",", "\n", ")", "\n", "self", ".", "fhb_objects_normal", "=", "fhbutils", ".", "load_objects_normal", "(", "\n", "obj_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_supp", ",", "\"Object_models\"", ")", ",", "object_names", "=", "all_objects", ",", "\n", ")", "\n", "\n", "obj_infos", "=", "fhbutils", ".", "load_object_infos", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"Object_6D_pose_annotation_v1_1\"", ")", ")", "\n", "\n", "if", "self", ".", "split_mode", "==", "\"actions\"", ":", "\n", "                ", "if", "self", ".", "data_split", "==", "\"train\"", ":", "\n", "                    ", "sample_list", "=", "train_list", "\n", "", "elif", "self", ".", "data_split", "==", "\"test\"", ":", "\n", "                    ", "sample_list", "=", "test_list", "\n", "", "elif", "self", ".", "data_split", "==", "\"all\"", ":", "\n", "                    ", "sample_list", "=", "{", "**", "train_list", ",", "**", "test_list", "}", "\n", "", "else", ":", "\n", "                    ", "logger", ".", "error", "(", "\n", "\"Split {} not valid for {}, should be [train|test|all]\"", ".", "format", "(", "self", ".", "data_split", ",", "self", ".", "name", ")", "\n", ")", "\n", "raise", "KeyError", "(", "f\"Split {self.data_split} not valid for {self.name}, should be [train|test|all]\"", ")", "\n", "", "", "elif", "self", ".", "split_mode", "==", "\"subjects\"", ":", "\n", "                ", "if", "self", ".", "data_split", "==", "\"train\"", ":", "\n", "                    ", "subjects", "=", "[", "\"Subject_1\"", ",", "\"Subject_3\"", ",", "\"Subject_4\"", "]", "\n", "", "elif", "self", ".", "data_split", "==", "\"test\"", ":", "\n", "                    ", "subjects", "=", "[", "\"Subject_2\"", ",", "\"Subject_5\"", ",", "\"Subject_6\"", "]", "\n", "", "else", ":", "\n", "                    ", "logger", ".", "error", "(", "f\"Split {self.data_split} not in [train|test] for split_type subjects\"", ")", "\n", "raise", "KeyError", "(", "f\"Split {self.data_split} not in [train|test] for split_type subjects\"", ")", "\n", "", "self", ".", "subjects", "=", "subjects", "\n", "sample_list", "=", "all_infos", "\n", "", "elif", "self", ".", "split_mode", "==", "\"objects\"", ":", "\n", "                ", "sample_list", "=", "all_infos", "\n", "", "else", ":", "\n", "                ", "error", "=", "logger", ".", "error", "(", "f\"split_type should be in [action|objects|subjects], got {self.split_mode}\"", ")", "\n", "raise", "KeyError", "(", "error", ")", "\n", "", "if", "self", ".", "split_mode", "!=", "\"subjects\"", ":", "\n", "                ", "self", ".", "subjects", "=", "[", "\n", "\"Subject_1\"", ",", "\n", "\"Subject_2\"", ",", "\n", "\"Subject_3\"", ",", "\n", "\"Subject_4\"", ",", "\n", "\"Subject_5\"", ",", "\n", "\"Subject_6\"", ",", "\n", "]", "\n", "", "if", "self", ".", "split_mode", "!=", "\"objects\"", ":", "\n", "                ", "self", ".", "split_objects", "=", "self", ".", "fhb_objects", "\n", "self", ".", "split_objects_normal", "=", "self", ".", "fhb_objects_normal", "\n", "\n", "", "image_names", "=", "[", "]", "\n", "joints2d", "=", "[", "]", "\n", "joints3d", "=", "[", "]", "\n", "hand_sides", "=", "[", "]", "\n", "clips", "=", "[", "]", "\n", "sample_infos", "=", "[", "]", "\n", "objnames", "=", "[", "]", "\n", "objtransforms", "=", "[", "]", "\n", "for", "subject", ",", "action_name", ",", "seq_idx", ",", "frame_idx", "in", "sample_list", ":", "\n", "                ", "if", "subject", "not", "in", "self", ".", "subjects", ":", "\n", "                    ", "continue", "\n", "\n", "# * Skip samples without objects", "\n", "", "if", "subject", "not", "in", "obj_infos", "or", "(", "action_name", ",", "seq_idx", ",", "frame_idx", ")", "not", "in", "obj_infos", "[", "subject", "]", ":", "\n", "                    ", "continue", "\n", "\n", "", "img_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "rgb_root", ",", "subject", ",", "action_name", ",", "seq_idx", ",", "\"color\"", ",", "self", ".", "rgb_template", ".", "format", "(", "frame_idx", ")", ",", "\n", ")", "\n", "skel", "=", "skel_info", "[", "subject", "]", "[", "(", "action_name", ",", "seq_idx", ")", "]", "[", "frame_idx", "]", "\n", "skel", "=", "skel", "[", "self", ".", "reorder_idx", "]", "\n", "skel_hom", "=", "np", ".", "concatenate", "(", "[", "skel", ",", "np", ".", "ones", "(", "[", "skel", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ",", "1", ")", "\n", "skel_camcoords", "=", "self", ".", "cam_extr", ".", "dot", "(", "skel_hom", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "[", ":", ",", ":", "3", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "obj", ",", "transf", "=", "obj_infos", "[", "subject", "]", "[", "(", "action_name", ",", "seq_idx", ",", "frame_idx", ")", "]", "\n", "if", "obj", "not", "in", "self", ".", "split_objects", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "self", ".", "filter_no_contact", ":", "\n", "                    ", "verts", "=", "self", ".", "split_objects", "[", "obj", "]", "[", "\"verts\"", "]", "\n", "transf_verts", "=", "fhbutils", ".", "transform_obj_verts", "(", "verts", ",", "transf", ",", "self", ".", "cam_extr", ")", "\n", "all_dists", "=", "cdist", "(", "transf_verts", ",", "skel_camcoords", ")", "\n", "if", "all_dists", ".", "min", "(", ")", ">", "self", ".", "filter_thresh", ":", "\n", "                        ", "continue", "\n", "\n", "# collect the results", "\n", "", "", "clips", ".", "append", "(", "(", "subject", ",", "action_name", ",", "seq_idx", ")", ")", "\n", "objtransforms", ".", "append", "(", "transf", ")", "\n", "objnames", ".", "append", "(", "obj", ")", "\n", "\n", "image_names", ".", "append", "(", "img_path", ")", "\n", "sample_infos", ".", "append", "(", "\n", "{", "\"subject\"", ":", "subject", ",", "\"action_name\"", ":", "action_name", ",", "\"seq_idx\"", ":", "seq_idx", ",", "\"frame_idx\"", ":", "frame_idx", ",", "}", "\n", ")", "\n", "joints3d", ".", "append", "(", "skel_camcoords", ")", "\n", "hom_2d", "=", "np", ".", "array", "(", "self", ".", "cam_intr", ")", ".", "dot", "(", "skel_camcoords", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "skel2d", "=", "(", "hom_2d", "/", "hom_2d", "[", ":", ",", "2", ":", "]", ")", "[", ":", ",", ":", "2", "]", "\n", "joints2d", ".", "append", "(", "skel2d", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "hand_sides", ".", "append", "(", "\"right\"", ")", "\n", "\n", "# assemble annotation", "\n", "", "mano_objs", ",", "mano_infos", "=", "fhbutils", ".", "load_manofits", "(", "sample_infos", ")", "\n", "annotations", "=", "{", "\n", "\"image_names\"", ":", "image_names", ",", "\n", "\"joints2d\"", ":", "joints2d", ",", "\n", "\"joints3d\"", ":", "joints3d", ",", "\n", "\"hand_sides\"", ":", "hand_sides", ",", "\n", "\"sample_infos\"", ":", "sample_infos", ",", "\n", "\"mano_infos\"", ":", "mano_infos", ",", "\n", "\"mano_objs\"", ":", "mano_objs", ",", "\n", "\"objnames\"", ":", "objnames", ",", "\n", "\"objtransforms\"", ":", "objtransforms", ",", "\n", "\"split_objects\"", ":", "self", ".", "split_objects", ",", "\n", "\"split_objects_normal\"", ":", "self", ".", "split_objects_normal", ",", "\n", "}", "\n", "\n", "if", "self", ".", "rand_size", "!=", "0", ":", "# Become effective ONLY in fhb's subclass: eg. fhbsynt", "\n", "                ", "logger", ".", "info", "(", "\"FPHB subclass is duplicating annot\"", ")", "\n", "annotations", "=", "fhbutils", ".", "update_synt_anno", "(", "annotations", ",", "self", ".", "rand_size", ",", "self", ".", "super_name", ")", "\n", "\n", "# using mini_factor to expose only a small ratio of data", "\n", "# no effect if mini_factor=1.0", "\n", "", "if", "self", ".", "mini_factor", "and", "self", ".", "mini_factor", "!=", "1.0", ":", "\n", "                ", "idxs", "=", "list", "(", "range", "(", "len", "(", "image_names", ")", ")", ")", "\n", "mini_nb", "=", "int", "(", "len", "(", "image_names", ")", "*", "self", ".", "mini_factor", ")", "\n", "random", ".", "Random", "(", "1", ")", ".", "shuffle", "(", "idxs", ")", "\n", "idxs", "=", "idxs", "[", ":", "mini_nb", "]", "\n", "for", "key", ",", "vals", "in", "annotations", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", "==", "\"split_objects\"", "or", "key", "==", "\"split_objects_normal\"", ":", "\n", "                        ", "continue", "\n", "", "annotations", "[", "key", "]", "=", "[", "vals", "[", "idx", "]", "for", "idx", "in", "idxs", "]", "\n", "\n", "# dump cache", "\n", "", "", "with", "open", "(", "self", ".", "cache_path", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "                ", "pickle", ".", "dump", "(", "annotations", ",", "fid", ")", "\n", "", "logger", ".", "info", "(", "\"Wrote cache for dataset {} to {}\"", ".", "format", "(", "self", ".", "name", ",", "self", ".", "cache_path", ")", ",", "\"yellow\"", ")", "\n", "\n", "# register loaded information into object", "\n", "", "self", ".", "image_names", "=", "annotations", "[", "\"image_names\"", "]", "\n", "self", ".", "joints2d", "=", "annotations", "[", "\"joints2d\"", "]", "\n", "self", ".", "joints3d", "=", "annotations", "[", "\"joints3d\"", "]", "\n", "self", ".", "hand_sides", "=", "annotations", "[", "\"hand_sides\"", "]", "\n", "self", ".", "sample_infos", "=", "annotations", "[", "\"sample_infos\"", "]", "\n", "self", ".", "mano_objs", "=", "annotations", "[", "\"mano_objs\"", "]", "\n", "self", ".", "mano_infos", "=", "annotations", "[", "\"mano_infos\"", "]", "\n", "self", ".", "objnames", "=", "annotations", "[", "\"objnames\"", "]", "\n", "self", ".", "objtransforms", "=", "annotations", "[", "\"objtransforms\"", "]", "\n", "self", ".", "split_objects", "=", "annotations", "[", "\"split_objects\"", "]", "\n", "self", ".", "split_objects_normal", "=", "annotations", "[", "\"split_objects_normal\"", "]", "\n", "if", "self", ".", "rand_size", "!=", "0", ":", "\n", "            ", "self", ".", "rand_transf", "=", "annotations", "[", "\"rand_transf\"", "]", "\n", "\n", "# ====== things will always do, regardless of cache", "\n", "", "if", "self", ".", "load_objects_reduced", ":", "\n", "            ", "self", ".", "fhb_objects_reduced", "=", "fhbutils", ".", "load_objects_reduced", "(", "\n", "obj_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_supp", ",", "\"Object_models\"", ")", ",", "object_names", "=", "all_objects", ",", "\n", ")", "\n", "\n", "", "if", "self", ".", "load_objects_voxel", ":", "\n", "            ", "self", ".", "fhb_objects_voxel", "=", "fhbutils", ".", "load_objects_voxel", "(", "\n", "obj_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_supp", ",", "\"Object_models_binvox\"", ")", ",", "object_names", "=", "all_objects", ",", "\n", ")", "\n", "\n", "# extra info: hand vertex & anchor stuff", "\n", "# this doesn't need to be cached, as it keeps the sampe for all samples", "\n", "", "self", ".", "hand_palm_vertex_index", "=", "np", ".", "loadtxt", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_extra_info", ",", "\"hand_palm_full.txt\"", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "self", ".", "n_palm_vert", "=", "self", ".", "get_n_hand_palm_vert", "(", "0", ")", "\n", "if", "self", ".", "enable_contact", ":", "\n", "            ", "(", "\n", "self", ".", "anchor_face_vertex_index", ",", "\n", "self", ".", "anchor_weights", ",", "\n", "self", ".", "hand_vertex_merged_assignment", ",", "\n", "self", ".", "anchor_mapping", ",", "\n", ")", "=", "anchor_load_driver", "(", "self", ".", "root_extra_info", ")", "\n", "\n", "", "self", ".", "cam_intr", "[", ":", "2", "]", "=", "self", ".", "cam_intr", "[", ":", "2", "]", "*", "self", ".", "reduce_factor", "\n", "self", ".", "image_size", "=", "[", "int", "(", "1920", "*", "self", ".", "reduce_factor", ")", ",", "int", "(", "1080", "*", "self", ".", "reduce_factor", ")", "]", "\n", "self", ".", "inp_res", "=", "self", ".", "image_size", "\n", "logger", ".", "info", "(", "f\"Got {len(self.image_names)} samples for data_split {self.data_split}\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.__len__": [[390, 392], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_image": [[393, 397], ["PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "get_image", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_path", "=", "self", ".", "image_names", "[", "idx", "]", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_image_path": [[398, 400], ["None"], "methods", ["None"], ["", "def", "get_image_path", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "image_names", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_hand_faces": [[401, 404], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "get_hand_faces", "(", "self", ",", "idx", ")", ":", "\n", "        ", "faces", "=", "np", ".", "array", "(", "self", ".", "layer", ".", "th_faces", ")", ".", "astype", "(", "np", ".", "long", ")", "\n", "return", "faces", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_hand_verts3d": [[405, 410], ["fhb.FPHB._fhb_get_hand_info", "fhb.FPHB.layer", "numpy.array().astype", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "verts[].numpy", "numpy.array", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB._fhb_get_hand_info"], ["", "def", "get_hand_verts3d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pose", ",", "trans", ",", "shape", "=", "self", ".", "_fhb_get_hand_info", "(", "idx", ")", "\n", "verts", ",", "_", "=", "self", ".", "layer", "(", "torch", ".", "Tensor", "(", "pose", ")", ".", "unsqueeze", "(", "0", ")", ",", "torch", ".", "Tensor", "(", "shape", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "verts", "=", "verts", "[", "0", "]", ".", "numpy", "(", ")", "+", "trans", "\n", "return", "np", ".", "array", "(", "verts", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_hand_verts2d": [[411, 416], ["fhb.FPHB.get_hand_verts3d", "numpy.array().dot().transpose", "numpy.array().astype", "numpy.array().dot", "numpy.array", "fhb.FPHB.transpose", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_verts3d"], ["", "def", "get_hand_verts2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "verts", "=", "self", ".", "get_hand_verts3d", "(", "idx", ")", "\n", "hom_2d", "=", "np", ".", "array", "(", "self", ".", "cam_intr", ")", ".", "dot", "(", "verts", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "verts2d", "=", "(", "hom_2d", "/", "hom_2d", "[", ":", ",", "2", ":", "]", ")", "[", ":", ",", ":", "2", "]", "\n", "return", "np", ".", "array", "(", "verts2d", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB._fhb_get_hand_info": [[417, 426], ["None"], "methods", ["None"], ["", "def", "_fhb_get_hand_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Get the hand annotation in the raw fhb datasets.\n        !!! This Mehthods shoudln't be called outside.\n        :param idx:\n        :return:\n        \"\"\"", "\n", "mano_info", "=", "self", ".", "mano_infos", "[", "idx", "]", "\n", "return", "mano_info", "[", "\"fullpose\"", "]", ",", "mano_info", "[", "\"trans\"", "]", ",", "mano_info", "[", "\"shape\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_textures": [[427, 431], ["numpy.array"], "methods", ["None"], ["", "def", "get_obj_textures", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "objtextures", "=", "self", ".", "split_objects", "[", "obj", "]", "[", "\"textures\"", "]", "\n", "return", "np", ".", "array", "(", "objtextures", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_faces": [[432, 436], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "get_obj_faces", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "objfaces", "=", "self", ".", "split_objects", "[", "obj", "]", "[", "\"faces\"", "]", "\n", "return", "np", ".", "array", "(", "objfaces", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_transf_wrt_cam": [[437, 451], ["fhb.FPHB.get_obj_verts_can", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate.astype", "rot.dot", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_can"], ["", "def", "get_obj_transf_wrt_cam", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "verts_can", ",", "v_0", ",", "_", "=", "self", ".", "get_obj_verts_can", "(", "idx", ")", "\n", "\n", "transf", "=", "self", ".", "objtransforms", "[", "idx", "]", "\n", "transf", "=", "self", ".", "cam_extr", "@", "transf", "\n", "rot", "=", "transf", "[", ":", "3", ",", ":", "3", "]", "\n", "tsl", "=", "transf", "[", ":", "3", ",", "3", "]", "/", "1000.0", "\n", "tsl_wrt_cam", "=", "rot", ".", "dot", "(", "v_0", ")", "+", "tsl", "\n", "tsl_wrt_cam", "=", "tsl_wrt_cam", "[", ":", ",", "np", ".", "newaxis", "]", "# (3, 1)", "\n", "\n", "obj_transf", "=", "np", ".", "concatenate", "(", "[", "rot", ",", "tsl_wrt_cam", "]", ",", "axis", "=", "1", ")", "# (3, 4)", "\n", "obj_transf", "=", "np", ".", "concatenate", "(", "[", "obj_transf", ",", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ")", "[", "np", ".", "newaxis", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "return", "obj_transf", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_pose": [[452, 454], ["fhb.FPHB.get_obj_transf_wrt_cam"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_transf_wrt_cam"], ["", "def", "get_obj_pose", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_obj_transf_wrt_cam", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_transf": [[455, 457], ["fhb.FPHB.get_obj_transf_wrt_cam"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_transf_wrt_cam"], ["", "def", "get_obj_transf", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_obj_transf_wrt_cam", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_rot": [[458, 460], ["fhb.FPHB.get_obj_transf_wrt_cam"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_transf_wrt_cam"], ["", "def", "get_obj_rot", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_obj_transf_wrt_cam", "(", "idx", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_tsl": [[461, 463], ["fhb.FPHB.get_obj_transf_wrt_cam"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_transf_wrt_cam"], ["", "def", "get_obj_tsl", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_obj_transf_wrt_cam", "(", "idx", ")", "[", ":", "3", ",", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_verts_transf": [[464, 470], ["numpy.array().astype", "hocontact.hodatasets.fhbutils.transform_obj_verts", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.transform_obj_verts"], ["", "def", "get_obj_verts_transf", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "transf", "=", "self", ".", "objtransforms", "[", "idx", "]", "\n", "verts_raw", "=", "self", ".", "split_objects", "[", "obj", "]", "[", "\"verts\"", "]", "\n", "transf_verts", "=", "fhbutils", ".", "transform_obj_verts", "(", "verts_raw", ",", "transf", ",", "self", ".", "cam_extr", ")", "/", "1000", "\n", "return", "np", ".", "array", "(", "transf_verts", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_normal": [[471, 475], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "get_obj_normal", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "normal", "=", "self", ".", "split_objects_normal", "[", "obj", "]", "\n", "return", "np", ".", "array", "(", "normal", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_joint_vis": [[476, 478], ["numpy.ones"], "methods", ["None"], ["", "def", "get_joint_vis", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "np", ".", "ones", "(", "self", ".", "njoints", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_verts_can": [[479, 484], ["hocontact.utils.meshutils.center_vert_bbox"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.meshutils.center_vert_bbox"], ["", "def", "get_obj_verts_can", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "verts", "=", "self", ".", "split_objects", "[", "obj", "]", "[", "\"verts\"", "]", "\n", "verts_can", ",", "bbox_center", ",", "bbox_scale", "=", "meshutils", ".", "center_vert_bbox", "(", "verts", ",", "scale", "=", "False", ")", "\n", "return", "verts_can", ",", "bbox_center", ",", "bbox_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_full_color_can": [[486, 492], ["hocontact.utils.meshutils.center_vert_bbox"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.meshutils.center_vert_bbox"], ["", "def", "get_obj_full_color_can", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "verts", "=", "self", ".", "obj_meshes_full_color", "[", "obj", "]", "[", "\"verts\"", "]", "\n", "\n", "verts_can", ",", "bbox_center", ",", "bbox_scale", "=", "meshutils", ".", "center_vert_bbox", "(", "verts", ",", "scale", "=", "False", ")", "# !! CENTERED HERE", "\n", "return", "verts_can", ",", "self", ".", "obj_meshes_full_color", "[", "obj", "]", "[", "\"faces\"", "]", ",", "self", ".", "obj_meshes_full_color", "[", "obj", "]", "[", "\"vc\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_verts2d": [[493, 499], ["fhb.FPHB.get_obj_verts_transf", "numpy.array().dot().transpose", "verts2d.astype", "numpy.array().dot", "fhb.FPHB.transpose", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_transf"], ["", "def", "get_obj_verts2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "objpoints3d", "=", "self", ".", "get_obj_verts_transf", "(", "idx", ")", "\n", "objpoints3d", "=", "objpoints3d", "*", "1000", "\n", "hom_2d", "=", "np", ".", "array", "(", "self", ".", "cam_intr", ")", ".", "dot", "(", "objpoints3d", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "verts2d", "=", "(", "hom_2d", "/", "hom_2d", "[", ":", ",", "2", ":", "]", ")", "[", ":", ",", ":", "2", "]", "\n", "return", "verts2d", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_joints3d": [[500, 503], ["None"], "methods", ["None"], ["", "def", "get_joints3d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "joints", "=", "self", ".", "joints3d", "[", "idx", "]", "\n", "return", "joints", "/", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_joints2d": [[504, 507], ["None"], "methods", ["None"], ["", "def", "get_joints2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "joints", "=", "self", ".", "joints2d", "[", "idx", "]", "*", "self", ".", "reduce_factor", "\n", "return", "joints", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_cam_intr": [[508, 511], ["camintr.astype"], "methods", ["None"], ["", "def", "get_cam_intr", "(", "self", ",", "idx", ")", ":", "\n", "        ", "camintr", "=", "self", ".", "cam_intr", "\n", "return", "camintr", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_sides": [[512, 515], ["None"], "methods", ["None"], ["", "def", "get_sides", "(", "self", ",", "idx", ")", ":", "\n", "        ", "side", "=", "self", ".", "hand_sides", "[", "idx", "]", "\n", "return", "side", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_meta": [[516, 519], ["None"], "methods", ["None"], ["", "def", "get_meta", "(", "self", ",", "idx", ")", ":", "\n", "        ", "meta", "=", "{", "\"objname\"", ":", "self", ".", "objnames", "[", "idx", "]", "}", "\n", "return", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_center_scale": [[520, 531], ["numpy.array", "hocontact.utils.logger.logger.error", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.error"], ["", "def", "get_center_scale", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "full_image", ":", "\n", "            ", "center", "=", "np", ".", "array", "(", "(", "480", "/", "2", ",", "270", "/", "2", ")", ")", "\n", "scale", "=", "480", "\n", "", "else", ":", "\n", "            ", "logger", ".", "error", "(", "\"Non full_image mode is not implements\"", ")", "\n", "raise", "NotImplementedError", "(", ")", "\n", "# joints2d = self.get_joints2d(idx)[0]", "\n", "# center = handutils.get_annot_center(joints2d)", "\n", "# scale = handutils.get_annot_scale(joints2d)", "\n", "", "return", "center", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_vis2d": [[532, 535], ["numpy.ones_like", "fhb.FPHB.get_obj_verts2d"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts2d"], ["", "def", "get_obj_vis2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "objvis", "=", "np", ".", "ones_like", "(", "self", ".", "get_obj_verts2d", "(", "idx", ")", ")", "\n", "return", "objvis", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_hand_vis2d": [[536, 539], ["numpy.ones_like", "fhb.FPHB.get_hand_verts2d"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_verts2d"], ["", "def", "get_hand_vis2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "handvis", "=", "np", ".", "ones_like", "(", "self", ".", "get_hand_verts2d", "(", "idx", ")", ")", "\n", "return", "handvis", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_hand_palm_vert_idx": [[540, 542], ["None"], "methods", ["None"], ["", "def", "get_hand_palm_vert_idx", "(", "self", ",", "_", ")", ":", "\n", "        ", "return", "self", ".", "hand_palm_vertex_index", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_n_hand_palm_vert": [[543, 545], ["len"], "methods", ["None"], ["", "def", "get_n_hand_palm_vert", "(", "self", ",", "_", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "hand_palm_vertex_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_verts_can_raw": [[546, 550], ["None"], "methods", ["None"], ["", "def", "get_obj_verts_can_raw", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "verts", "=", "self", ".", "split_objects", "[", "obj", "]", "[", "\"verts\"", "]", "\n", "return", "verts", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_sample_identifier": [[551, 561], ["None"], "methods", ["None"], ["", "def", "get_sample_identifier", "(", "self", ",", "idx", ")", ":", "\n", "        ", "identifier", "=", "(", "\n", "f\"{self.data_split}_{self.split_mode}_mf{self.mini_factor}\"", "\n", "f\"_rf{self.reduce_factor}\"", "\n", "f\"_fct{self.filter_thresh if self.filter_no_contact else '(x)'}\"", "\n", "f\"_ec{'' if self.enable_contact else '(x)'}\"", "\n", ")", "\n", "\n", "res", "=", "f\"{self.name}/{identifier}/{idx}\"", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_hand_tsl_wrt_cam": [[563, 566], ["mano_info[].astype"], "methods", ["None"], ["", "def", "get_hand_tsl_wrt_cam", "(", "self", ",", "idx", ")", ":", "\n", "        ", "mano_info", "=", "self", ".", "mano_infos", "[", "idx", "]", "\n", "return", "mano_info", "[", "\"trans\"", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_hand_shape": [[568, 571], ["mano_info[].astype"], "methods", ["None"], ["", "def", "get_hand_shape", "(", "self", ",", "idx", ")", ":", "\n", "        ", "mano_info", "=", "self", ".", "mano_infos", "[", "idx", "]", "\n", "return", "mano_info", "[", "\"shape\"", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_hand_pose_wrt_cam": [[573, 576], ["mano_info[].astype"], "methods", ["None"], ["", "def", "get_hand_pose_wrt_cam", "(", "self", ",", "idx", ")", ":", "\n", "        ", "mano_info", "=", "self", ".", "mano_infos", "[", "idx", "]", "\n", "return", "mano_info", "[", "\"fullpose\"", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_hand_axisang_wrt_cam": [[578, 581], ["[].astype"], "methods", ["None"], ["", "def", "get_hand_axisang_wrt_cam", "(", "self", ",", "idx", ")", ":", "\n", "        ", "mano_info", "=", "self", ".", "mano_infos", "[", "idx", "]", "\n", "return", "mano_info", "[", "\"fullpose\"", "]", "[", "0", ":", "3", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_hand_rot_wrt_cam": [[583, 587], ["fhb.FPHB.get_hand_axisang_wrt_cam", "liegroups.SO3.exp().as_matrix", "liegroups.SO3.exp().as_matrix.astype", "liegroups.SO3.exp"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_axisang_wrt_cam"], ["", "def", "get_hand_rot_wrt_cam", "(", "self", ",", "idx", ")", ":", "\n", "        ", "axisang", "=", "self", ".", "get_hand_axisang_wrt_cam", "(", "idx", ")", "\n", "rot", "=", "SO3", ".", "exp", "(", "axisang", ")", ".", "as_matrix", "(", ")", "\n", "return", "rot", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_verts_transf_reduced": [[589, 595], ["numpy.array().astype", "hocontact.hodatasets.fhbutils.transform_obj_verts", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.transform_obj_verts"], ["", "def", "get_obj_verts_transf_reduced", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "transf", "=", "self", ".", "objtransforms", "[", "idx", "]", "\n", "verts_raw", "=", "self", ".", "fhb_objects_reduced", "[", "obj", "]", "[", "\"verts\"", "]", "\n", "transf_verts", "=", "fhbutils", ".", "transform_obj_verts", "(", "verts_raw", ",", "transf", ",", "self", ".", "cam_extr", ")", "/", "1000", "\n", "return", "np", ".", "array", "(", "transf_verts", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_verts_can_reduced": [[597, 602], ["hocontact.utils.meshutils.center_vert_bbox"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.meshutils.center_vert_bbox"], ["", "def", "get_obj_verts_can_reduced", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "verts", "=", "self", ".", "fhb_objects_reduced", "[", "obj", "]", "[", "\"verts\"", "]", "\n", "verts_can", ",", "bbox_center", ",", "bbox_scale", "=", "meshutils", ".", "center_vert_bbox", "(", "verts", ",", "scale", "=", "False", ")", "\n", "return", "verts_can", ",", "bbox_center", ",", "bbox_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_faces_reduced": [[604, 608], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "get_obj_faces_reduced", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "objfaces", "=", "self", ".", "fhb_objects_reduced", "[", "obj", "]", "[", "\"faces\"", "]", "\n", "return", "np", ".", "array", "(", "objfaces", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_voxel_points_can": [[610, 615], ["hocontact.utils.meshutils.center_vert_bbox"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.meshutils.center_vert_bbox"], ["", "def", "get_obj_voxel_points_can", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "objvoxpts", "=", "self", ".", "fhb_objects_voxel", "[", "obj", "]", "[", "\"points\"", "]", "\n", "verts_can", ",", "bbox_center", ",", "bbox_scale", "=", "meshutils", ".", "center_vert_bbox", "(", "objvoxpts", ",", "scale", "=", "False", ")", "\n", "return", "verts_can", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_voxel_points_transf": [[617, 623], ["numpy.array().astype", "hocontact.hodatasets.fhbutils.transform_obj_verts", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb_example.transform_obj_verts"], ["", "def", "get_obj_voxel_points_transf", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "transf", "=", "self", ".", "objtransforms", "[", "idx", "]", "\n", "objvoxpts", "=", "self", ".", "fhb_objects_voxel", "[", "obj", "]", "[", "\"points\"", "]", "\n", "transf_verts", "=", "fhbutils", ".", "transform_obj_verts", "(", "objvoxpts", ",", "transf", ",", "self", ".", "cam_extr", ")", "/", "1000", "\n", "return", "np", ".", "array", "(", "transf_verts", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_voxel_element_volume": [[625, 629], ["None"], "methods", ["None"], ["", "def", "get_obj_voxel_element_volume", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objnames", "[", "idx", "]", "\n", "objvoxelvol", "=", "self", ".", "fhb_objects_voxel", "[", "obj", "]", "[", "\"element_volume\"", "]", "\n", "return", "objvoxelvol", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.view_image_data": [[631, 678], ["range", "len", "ho_dataset.get_image_path", "print", "ho_dataset.get_joints2d", "ho_dataset.get_obj_transf_wrt_cam", "ho_dataset.get_obj_verts_can", "ho_dataset.project", "ho_dataset.get_obj_verts2d", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "ho_dataset.get_hand_tsl_wrt_cam", "ho_dataset.layer", "ho_dataset.get_hand_verts3d", "ho_dataset.project", "ho_dataset.get_hand_verts2d", "ho_dataset.get_image", "numpy.array", "cv2.cvtColor", "range", "range", "cv2.imshow", "cv2.waitKey", "numpy.array", "cv2.circle", "cv2.circle", "torch.from_numpy", "torch.from_numpy", "hand_verts.squeeze", "obj_rot.dot", "ho_dataset.get_hand_pose_wrt_cam", "ho_dataset.get_hand_shape", "obj_verts_can.transpose"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_image_path", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_joints2d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.get_obj_transf_wrt_cam", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_can", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.project", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts2d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_tsl_wrt_cam", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_verts3d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.project", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_verts2d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_image", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_pose_wrt_cam", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_shape"], ["", "", "def", "view_image_data", "(", "ho_dataset", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "ho_dataset", ")", ")", ":", "\n", "        ", "img_path", "=", "ho_dataset", ".", "get_image_path", "(", "i", ")", "\n", "if", "\"pour_milk\"", "not", "in", "img_path", ":", "\n", "            ", "continue", "\n", "", "print", "(", "i", ",", "\"   \"", ",", "img_path", ")", "\n", "joint2d", "=", "ho_dataset", ".", "get_joints2d", "(", "i", ")", "\n", "\n", "# TEST: obj_transf @ obj_verts_can == obj_verts_transf >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "obj_transf", "=", "ho_dataset", ".", "get_obj_transf_wrt_cam", "(", "i", ")", "\n", "obj_rot", "=", "obj_transf", "[", ":", "3", ",", ":", "3", "]", "# (3, 3)", "\n", "obj_tsl", "=", "obj_transf", "[", ":", "3", ",", "3", ":", "]", "# (3, 1)", "\n", "\n", "obj_verts_can", ",", "_", ",", "__", "=", "ho_dataset", ".", "get_obj_verts_can", "(", "i", ")", "# (N, 3)", "\n", "obj_verts_pred", "=", "(", "obj_rot", ".", "dot", "(", "obj_verts_can", ".", "transpose", "(", ")", ")", "+", "obj_tsl", ")", ".", "transpose", "(", ")", "\n", "obj_verts2d_pred", "=", "ho_dataset", ".", "project", "(", "obj_verts_pred", ",", "ho_dataset", ".", "cam_intr", ")", "\n", "obj_verts2d_gt", "=", "ho_dataset", ".", "get_obj_verts2d", "(", "i", ")", "\n", "\n", "# TEST: MANO(get_hand_pose_wrt_cam) + get_hand_tsl_wrt_cam == get_hand_verts3d >>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "hand_pose", "=", "torch", ".", "from_numpy", "(", "ho_dataset", ".", "get_hand_pose_wrt_cam", "(", "i", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "hand_shape", "=", "torch", ".", "from_numpy", "(", "ho_dataset", ".", "get_hand_shape", "(", "i", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "hand_tsl", "=", "ho_dataset", ".", "get_hand_tsl_wrt_cam", "(", "i", ")", "\n", "\n", "hand_verts", ",", "hand_joints", "=", "ho_dataset", ".", "layer", "(", "hand_pose", ",", "hand_shape", ")", "\n", "hand_verts", "=", "np", ".", "array", "(", "hand_verts", ".", "squeeze", "(", "0", ")", ")", "+", "hand_tsl", "\n", "hand_verts_gt", "=", "ho_dataset", ".", "get_hand_verts3d", "(", "i", ")", "\n", "\n", "hand_verts_2d", "=", "ho_dataset", ".", "project", "(", "hand_verts", ",", "ho_dataset", ".", "cam_intr", ")", "\n", "hand_verts_2dgt", "=", "ho_dataset", ".", "get_hand_verts2d", "(", "i", ")", "\n", "\n", "img", "=", "ho_dataset", ".", "get_image", "(", "i", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "for", "j", "in", "range", "(", "obj_verts2d_pred", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "j", "%", "2", "==", "0", ":", "\n", "                ", "continue", "\n", "", "v", "=", "obj_verts2d_pred", "[", "j", "]", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ")", ",", "radius", "=", "1", ",", "thickness", "=", "-", "1", ",", "color", "=", "(", "0", ",", "255", ",", "0", ")", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "hand_verts_2d", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "j", "%", "2", "==", "0", ":", "\n", "                ", "continue", "\n", "", "v", "=", "hand_verts_2d", "[", "j", "]", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ")", ",", "radius", "=", "1", ",", "thickness", "=", "-", "1", ",", "color", "=", "(", "255", ",", "0", ",", "0", ")", ")", "\n", "\n", "", "cv2", ".", "imshow", "(", "\"fhbhands\"", ",", "img", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.main": [[680, 718], ["hocontact.hodatasets.hodata.HOdata.get_dataset", "numpy.random.randint", "pt.PrettyTable", "sample.items", "hocontact.utils.logger.logger.warn", "hocontact.utils.logger.logger.info", "len", "isinstance", "str", "fhb.view_image_data", "pt.PrettyTable.add_row", "isinstance", "pt.PrettyTable.add_row", "pt.PrettyTable.add_row", "type", "type", "tuple", "type", "value.size"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_dataset", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.warn", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.view_image_data"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "ho_dataset", "=", "HOdata", ".", "get_dataset", "(", "\n", "dataset", "=", "\"fhb\"", ",", "\n", "data_root", "=", "\"data\"", ",", "\n", "data_split", "=", "args", ".", "data_split", ",", "\n", "split_mode", "=", "args", ".", "split_mode", ",", "\n", "use_cache", "=", "False", ",", "\n", "mini_factor", "=", "1", ",", "\n", "center_idx", "=", "9", ",", "\n", "enable_contact", "=", "True", ",", "\n", "like_v1", "=", "True", ",", "\n", "filter_no_contact", "=", "True", ",", "\n", "filter_thresh", "=", "5.0", ",", "\n", "block_rot", "=", "True", ",", "\n", "synt_factor", "=", "1", ",", "\n", ")", "\n", "\n", "import", "prettytable", "as", "pt", "\n", "from", "hocontact", ".", "utils", ".", "logger", "import", "logger", "\n", "\n", "idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "ho_dataset", ")", ")", "\n", "\n", "sample", "=", "ho_dataset", "[", "idx", "]", "\n", "tb", "=", "pt", ".", "PrettyTable", "(", "padding_width", "=", "3", ",", "header", "=", "False", ")", "\n", "for", "key", ",", "value", "in", "sample", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "tb", ".", "add_row", "(", "[", "key", ",", "type", "(", "value", ")", ",", "value", ".", "shape", "]", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "tb", ".", "add_row", "(", "[", "key", ",", "type", "(", "value", ")", ",", "tuple", "(", "value", ".", "size", "(", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "tb", ".", "add_row", "(", "[", "key", ",", "type", "(", "value", ")", ",", "value", "]", ")", "\n", "", "", "logger", ".", "warn", "(", "f\"{'='*40} ALL FHB SAMPLE KEYS {'>'*40}\"", ",", "\"blue\"", ")", "\n", "logger", ".", "info", "(", "str", "(", "tb", ")", ")", "\n", "\n", "if", "args", ".", "vis", ":", "\n", "        ", "view_image_data", "(", "ho_dataset", ")", "\n", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.load_objects": [[11, 19], ["os.path.join", "trimesh.load", "os.listdir"], "function", ["None"], ["def", "load_objects", "(", "obj_root", ")", ":", "\n", "    ", "object_names", "=", "[", "obj_name", "for", "obj_name", "in", "os", ".", "listdir", "(", "obj_root", ")", "if", "\".tgz\"", "not", "in", "obj_name", "]", "\n", "objects", "=", "{", "}", "\n", "for", "obj_name", "in", "object_names", ":", "\n", "        ", "obj_path", "=", "os", ".", "path", ".", "join", "(", "obj_root", ",", "obj_name", ",", "\"textured_simple_ds.obj\"", ")", "\n", "mesh", "=", "trimesh", ".", "load", "(", "obj_path", ")", "\n", "objects", "[", "obj_name", "]", "=", "{", "\"verts\"", ":", "mesh", ".", "vertices", ",", "\"faces\"", ":", "mesh", ".", "faces", "}", "\n", "", "return", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.load_obj_normals": [[21, 31], ["os.path.join", "trimesh.load", "os.listdir", "os.path.isfile"], "function", ["None"], ["", "def", "load_obj_normals", "(", "obj_root", ")", ":", "\n", "    ", "object_names", "=", "[", "obj_name", "for", "obj_name", "in", "os", ".", "listdir", "(", "obj_root", ")", "if", "\".tgz\"", "not", "in", "obj_name", "]", "\n", "obj_normals", "=", "{", "}", "\n", "for", "obj_name", "in", "object_names", ":", "\n", "        ", "obj_path", "=", "os", ".", "path", ".", "join", "(", "obj_root", ",", "obj_name", ",", "\"textured_normal.obj\"", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "obj_path", ")", ":", "\n", "            ", "continue", "\n", "", "mesh", "=", "trimesh", ".", "load", "(", "obj_path", ")", "\n", "obj_normals", "[", "obj_name", "]", "=", "mesh", ".", "vertex_normals", "\n", "", "return", "obj_normals", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.load_objects_reduced": [[33, 41], ["os.path.join", "trimesh.load", "os.listdir"], "function", ["None"], ["", "def", "load_objects_reduced", "(", "obj_root", ")", ":", "\n", "    ", "object_names", "=", "[", "obj_name", "for", "obj_name", "in", "os", ".", "listdir", "(", "obj_root", ")", "if", "\".tgz\"", "not", "in", "obj_name", "]", "\n", "objects", "=", "{", "}", "\n", "for", "obj_name", "in", "object_names", ":", "\n", "        ", "obj_path", "=", "os", ".", "path", ".", "join", "(", "obj_root", ",", "obj_name", ",", "\"ds_plus.obj\"", ")", "\n", "mesh", "=", "trimesh", ".", "load", "(", "obj_path", ")", "\n", "objects", "[", "obj_name", "]", "=", "{", "\"verts\"", ":", "mesh", ".", "vertices", ",", "\"faces\"", ":", "mesh", ".", "faces", "}", "\n", "", "return", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.load_objects_voxel": [[43, 55], ["os.path.join", "trimesh.load", "os.listdir", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "load_objects_voxel", "(", "obj_root", ")", ":", "\n", "    ", "object_names", "=", "[", "obj_name", "for", "obj_name", "in", "os", ".", "listdir", "(", "obj_root", ")", "if", "\".tgz\"", "not", "in", "obj_name", "]", "\n", "objects", "=", "{", "}", "\n", "for", "obj_name", "in", "object_names", ":", "\n", "        ", "obj_path", "=", "os", ".", "path", ".", "join", "(", "obj_root", ",", "obj_name", ",", "\"solid.binvox\"", ")", "\n", "vox", "=", "trimesh", ".", "load", "(", "obj_path", ")", "\n", "objects", "[", "obj_name", "]", "=", "{", "\n", "\"points\"", ":", "np", ".", "array", "(", "vox", ".", "points", ")", ",", "\n", "\"matrix\"", ":", "np", ".", "array", "(", "vox", ".", "matrix", ")", ",", "\n", "\"element_volume\"", ":", "vox", ".", "element_volume", ",", "\n", "}", "\n", "", "return", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.load_corners": [[57, 64], ["os.listdir", "os.path.join", "numpy.load"], "function", ["None"], ["", "def", "load_corners", "(", "corner_root", ")", ":", "\n", "    ", "obj_corners", "=", "{", "}", "\n", "for", "objname", "in", "os", ".", "listdir", "(", "corner_root", ")", ":", "\n", "        ", "filepath", "=", "os", ".", "path", ".", "join", "(", "corner_root", ",", "objname", ",", "\"corners.npy\"", ")", "\n", "corners", "=", "np", ".", "load", "(", "filepath", ")", "\n", "obj_corners", "[", "objname", "]", "=", "corners", "\n", "", "return", "obj_corners", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.get_offi_frames": [[66, 112], ["root.replace.replace", "os.path.join", "open", "f.readlines", "line.strip().split", "seqs[].sort", "range", "os.path.join", "seqs[].append", "len", "seq_frames.append", "range", "line.strip", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "int"], "function", ["None"], ["", "def", "get_offi_frames", "(", "name", ",", "split", ",", "root", ",", "trainval_idx", "=", "60000", ",", "filter_no_grasp", "=", "True", ")", ":", "\n", "    ", "offi_train_seqs", "=", "{", "}", "# remove train sequences since we only release a test version", "\n", "offi_test_seqs", "=", "{", "\"SM1\"", ",", "\"MPM10\"", ",", "\"MPM11\"", ",", "\"MPM12\"", ",", "\"MPM13\"", ",", "\"MPM14\"", ",", "\"SB11\"", ",", "\"SB13\"", "}", "\n", "grasp_list", "=", "{", "# Test sequences are filtered as we mentioned in supplementary materials C.1", "\n", "\"SM1\"", ":", "[", "i", "for", "i", "in", "range", "(", "0", ",", "889", "+", "1", ")", "]", ",", "\n", "\"MPM10\"", ":", "[", "i", "for", "i", "in", "range", "(", "30", ",", "450", "+", "1", ")", "]", "+", "[", "i", "for", "i", "in", "range", "(", "585", ",", "685", "+", "1", ")", "]", ",", "\n", "\"MPM11\"", ":", "[", "i", "for", "i", "in", "range", "(", "30", ",", "450", "+", "1", ")", "]", "+", "[", "i", "for", "i", "in", "range", "(", "585", ",", "685", "+", "1", ")", "]", ",", "\n", "\"MPM12\"", ":", "[", "i", "for", "i", "in", "range", "(", "30", ",", "450", "+", "1", ")", "]", "+", "[", "i", "for", "i", "in", "range", "(", "585", ",", "685", "+", "1", ")", "]", ",", "\n", "\"MPM13\"", ":", "[", "i", "for", "i", "in", "range", "(", "30", ",", "450", "+", "1", ")", "]", "+", "[", "i", "for", "i", "in", "range", "(", "585", ",", "685", "+", "1", ")", "]", ",", "\n", "\"MPM14\"", ":", "[", "i", "for", "i", "in", "range", "(", "30", ",", "450", "+", "1", ")", "]", "+", "[", "i", "for", "i", "in", "range", "(", "585", ",", "685", "+", "1", ")", "]", ",", "\n", "\"SB11\"", ":", "[", "i", "for", "i", "in", "range", "(", "340", ",", "1355", "+", "1", ")", "]", "+", "[", "i", "for", "i", "in", "range", "(", "1415", ",", "1686", "+", "1", ")", "]", ",", "\n", "\"SB13\"", ":", "[", "i", "for", "i", "in", "range", "(", "340", ",", "1355", "+", "1", ")", "]", "+", "[", "i", "for", "i", "in", "range", "(", "1415", ",", "1686", "+", "1", ")", "]", ",", "\n", "}", "\n", "if", "name", "!=", "\"HO3D\"", ":", "\n", "        ", "root", "=", "root", ".", "replace", "(", "name", ",", "\"HO3D\"", ")", "\n", "", "if", "split", "in", "[", "\"train\"", ",", "\"trainval\"", ",", "\"val\"", "]", ":", "\n", "        ", "info_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"train.txt\"", ")", "\n", "subfolder", "=", "\"train\"", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "        ", "info_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"evaluation.txt\"", ")", "\n", "subfolder", "=", "\"evaluation\"", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "", "with", "open", "(", "info_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "txt_seq_frames", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "\"/\"", ")", "for", "line", "in", "lines", "]", "\n", "if", "split", "==", "\"trainval\"", ":", "\n", "        ", "txt_seq_frames", "=", "txt_seq_frames", "[", ":", "trainval_idx", "]", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "        ", "txt_seq_frames", "=", "txt_seq_frames", "[", "trainval_idx", ":", "]", "\n", "", "seqs", "=", "{", "}", "\n", "for", "sf", "in", "txt_seq_frames", ":", "\n", "        ", "if", "sf", "[", "0", "]", "not", "in", "offi_train_seqs", "and", "sf", "[", "0", "]", "not", "in", "offi_test_seqs", ":", "\n", "            ", "continue", "\n", "", "if", "filter_no_grasp", "and", "not", "(", "int", "(", "sf", "[", "1", "]", ")", "in", "grasp_list", "[", "sf", "[", "0", "]", "]", ")", ":", "\n", "            ", "continue", "\n", "", "if", "sf", "[", "0", "]", "in", "seqs", ":", "\n", "            ", "seqs", "[", "sf", "[", "0", "]", "]", ".", "append", "(", "sf", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "seqs", "[", "sf", "[", "0", "]", "]", "=", "[", "sf", "[", "1", "]", "]", "\n", "", "", "seq_frames", "=", "[", "]", "\n", "for", "s", "in", "seqs", ":", "\n", "        ", "seqs", "[", "s", "]", ".", "sort", "(", ")", "\n", "for", "f", "in", "range", "(", "len", "(", "seqs", "[", "s", "]", ")", ")", ":", "\n", "            ", "seq_frames", ".", "append", "(", "[", "s", ",", "seqs", "[", "s", "]", "[", "f", "]", "]", ")", "\n", "", "", "return", "seq_frames", ",", "subfolder", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.min_contact_dis": [[114, 141], ["numpy.array", "cam_extr[].dot().transpose", "numpy.array().astype", "min_contact_dis.layer", "cam_extr[].dot().transpose", "all_dist.min", "hasattr", "manopth.manolayer.ManoLayer", "cv2.Rodrigues", "rot.dot().transpose", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "handverts[].numpy", "scipy.spatial.distance.cdist", "cam_extr[].dot", "numpy.array", "cam_extr[].dot", "rot.dot", "cam_extr[].dot().transpose.transpose", "torch.Tensor", "torch.Tensor", "handverts.transpose", "verts.transpose"], "function", ["None"], ["", "def", "min_contact_dis", "(", "annot", ",", "obj_meshes", ",", "vid", ")", ":", "\n", "    ", "cam_extr", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "-", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "-", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "if", "not", "hasattr", "(", "min_contact_dis", ",", "\"layer\"", ")", ":", "\n", "        ", "min_contact_dis", ".", "layer", "=", "manolayer", ".", "ManoLayer", "(", "\n", "joint_rot_mode", "=", "\"axisang\"", ",", "use_pca", "=", "False", ",", "mano_root", "=", "\"assets/mano\"", ",", "center_idx", "=", "None", ",", "flat_hand_mean", "=", "True", ",", "\n", ")", "\n", "", "rot", "=", "cv2", ".", "Rodrigues", "(", "annot", "[", "\"objRot\"", "]", ")", "[", "0", "]", "\n", "trans", "=", "annot", "[", "\"objTrans\"", "]", "\n", "obj_id", "=", "annot", "[", "\"objName\"", "]", "\n", "verts", "=", "obj_meshes", "[", "obj_id", "]", "[", "\"verts\"", "]", "\n", "trans_verts", "=", "rot", ".", "dot", "(", "verts", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "+", "trans", "\n", "trans_verts", "=", "cam_extr", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "trans_verts", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "obj_verts", "=", "np", ".", "array", "(", "trans_verts", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "handpose", "=", "annot", "[", "\"handPose\"", "]", "\n", "handtrans", "=", "annot", "[", "\"handTrans\"", "]", "\n", "handshape", "=", "annot", "[", "\"handBeta\"", "]", "\n", "\n", "handverts", ",", "handjoints", "=", "min_contact_dis", ".", "layer", "(", "\n", "torch", ".", "Tensor", "(", "handpose", ")", ".", "unsqueeze", "(", "0", ")", ",", "torch", ".", "Tensor", "(", "handshape", ")", ".", "unsqueeze", "(", "0", ")", "\n", ")", "\n", "handverts", "=", "handverts", "[", "0", "]", ".", "numpy", "(", ")", "+", "handtrans", "\n", "trans_handverts", "=", "cam_extr", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "handverts", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "all_dist", "=", "cdist", "(", "trans_handverts", "[", "vid", "]", ",", "obj_verts", ")", "*", "1000", "\n", "\n", "return", "all_dist", ".", "min", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.get_object_seqs": [[143, 383], ["print", "print", "print"], "function", ["None"], ["", "def", "get_object_seqs", "(", "split", ",", "like_v1", ",", "name", ")", ":", "\n", "    ", "if", "split", "==", "\"train\"", ":", "\n", "        ", "if", "like_v1", ":", "\n", "            ", "seqs", "=", "{", "\"SM5\"", ",", "\"MC6\"", ",", "\"MC4\"", ",", "\"SM3\"", ",", "\"SM4\"", ",", "\"SS3\"", ",", "\"SS2\"", ",", "\"SM2\"", ",", "\"SS1\"", ",", "\"MC5\"", ",", "\"MC1\"", "}", "\n", "", "else", ":", "\n", "            ", "seqs", "=", "{", "\n", "\"ABF11\"", ",", "\n", "\"ABF12\"", ",", "\n", "\"ABF13\"", ",", "\n", "\"ABF14\"", ",", "\n", "\"BB10\"", ",", "\n", "\"BB12\"", ",", "\n", "\"BB13\"", ",", "\n", "\"BB14\"", ",", "\n", "\"GPMF10\"", ",", "\n", "\"GPMF11\"", ",", "\n", "\"GPMF13\"", ",", "\n", "\"GPMF14\"", ",", "\n", "\"GSF10\"", ",", "\n", "\"GSF11\"", ",", "\n", "\"GSF12\"", ",", "\n", "\"GSF14\"", ",", "\n", "\"MC2\"", ",", "\n", "\"MC4\"", ",", "\n", "\"MC5\"", ",", "\n", "\"MC6\"", ",", "\n", "\"MDF10\"", ",", "\n", "\"MDF11\"", ",", "\n", "\"MDF12\"", ",", "\n", "\"MDF13\"", ",", "\n", "\"SB10\"", ",", "\n", "\"SB12\"", ",", "\n", "\"ShSu12\"", ",", "\n", "\"ShSu13\"", ",", "\n", "\"ShSu14\"", ",", "\n", "\"SiBF10\"", ",", "\n", "\"SiBF12\"", ",", "\n", "\"SiBF13\"", ",", "\n", "\"SiBF14\"", ",", "\n", "\"SM2\"", ",", "\n", "\"SM4\"", ",", "\n", "\"SM5\"", ",", "\n", "\"SMu40\"", ",", "\n", "\"SMu41\"", ",", "\n", "\"SS1\"", ",", "\n", "\"SS3\"", ",", "\n", "\"SMu42\"", ",", "\n", "}", "\n", "", "subfolder", "=", "\"train\"", "\n", "", "elif", "split", "==", "\"trainval\"", ":", "\n", "        ", "seqs", "=", "{", "\n", "\"ABF12\"", ",", "\n", "\"ABF13\"", ",", "\n", "\"ABF14\"", ",", "\n", "\"BB10\"", ",", "\n", "\"BB13\"", ",", "\n", "\"BB14\"", ",", "\n", "\"GPMF10\"", ",", "\n", "\"GPMF11\"", ",", "\n", "\"GPMF14\"", ",", "\n", "\"GSF10\"", ",", "\n", "\"GSF11\"", ",", "\n", "\"GSF12\"", ",", "\n", "\"MC2\"", ",", "\n", "\"MC4\"", ",", "\n", "\"MC5\"", ",", "\n", "\"MC6\"", ",", "\n", "\"MDF10\"", ",", "\n", "\"MDF11\"", ",", "\n", "\"MDF12\"", ",", "\n", "\"MDF13\"", ",", "\n", "\"SB10\"", ",", "\n", "\"SB12\"", ",", "\n", "\"ShSu12\"", ",", "\n", "\"ShSu13\"", ",", "\n", "\"ShSu14\"", ",", "\n", "\"SiBF10\"", ",", "\n", "\"SiBF12\"", ",", "\n", "\"SiBF13\"", ",", "\n", "\"SiBF14\"", ",", "\n", "\"SM2\"", ",", "\n", "\"SM4\"", ",", "\n", "\"SM5\"", ",", "\n", "\"SMu40\"", ",", "\n", "\"SMu41\"", ",", "\n", "\"SS1\"", ",", "\n", "\"SS3\"", ",", "\n", "\"SMu42\"", ",", "\n", "}", "\n", "subfolder", "=", "\"train\"", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "        ", "seqs", "=", "{", "\"ABF11\"", ",", "\"BB12\"", ",", "\"GPMF13\"", ",", "\"GSF14\"", "}", "\n", "subfolder", "=", "\"train\"", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "        ", "if", "like_v1", ":", "\n", "            ", "seqs", "=", "{", "\"MC2\"", "}", "\n", "", "else", ":", "\n", "            ", "seqs", "=", "{", "\n", "\"ABF10\"", ",", "\n", "\"MC1\"", ",", "\n", "\"MDF14\"", ",", "\n", "\"BB11\"", ",", "\n", "\"GPMF12\"", ",", "\n", "\"GSF13\"", ",", "\n", "\"SB14\"", ",", "\n", "\"ShSu10\"", ",", "\n", "\"SM3\"", ",", "\n", "\"SMu1\"", ",", "\n", "\"SiBF11\"", ",", "\n", "\"SS2\"", ",", "\n", "}", "\n", "", "subfolder", "=", "\"train\"", "\n", "print", "(", "f\"Using seqs {seqs} for evaluation\"", ")", "\n", "", "elif", "split", "==", "\"all\"", ":", "\n", "        ", "if", "like_v1", ":", "\n", "            ", "seqs", "=", "{", "\"MC1\"", ",", "\"MC2\"", ",", "\"MC4\"", ",", "\"MC5\"", ",", "\"MC6\"", ",", "\"SM2\"", ",", "\"SM3\"", ",", "\"SM4\"", ",", "\"SM5\"", ",", "\"SS1\"", ",", "\"SS2\"", ",", "\"SS3\"", "}", "\n", "", "else", ":", "\n", "            ", "seqs", "=", "{", "\n", "\"ABF10\"", ",", "\n", "\"ABF11\"", ",", "\n", "\"ABF12\"", ",", "\n", "\"ABF13\"", ",", "\n", "\"ABF14\"", ",", "\n", "\"BB10\"", ",", "\n", "\"BB11\"", ",", "\n", "\"BB12\"", ",", "\n", "\"BB13\"", ",", "\n", "\"BB14\"", ",", "\n", "\"GPMF10\"", ",", "\n", "\"GPMF11\"", ",", "\n", "\"GPMF12\"", ",", "\n", "\"GPMF13\"", ",", "\n", "\"GPMF14\"", ",", "\n", "\"GSF10\"", ",", "\n", "\"GSF11\"", ",", "\n", "\"GSF12\"", ",", "\n", "\"GSF13\"", ",", "\n", "\"GSF14\"", ",", "\n", "\"MC1\"", ",", "\n", "\"MC2\"", ",", "\n", "\"MC4\"", ",", "\n", "\"MC5\"", ",", "\n", "\"MC6\"", ",", "\n", "\"MDF10\"", ",", "\n", "\"MDF11\"", ",", "\n", "\"MDF12\"", ",", "\n", "\"MDF13\"", ",", "\n", "\"MDF14\"", ",", "\n", "\"ND2\"", ",", "# new in v2", "\n", "\"SB10\"", ",", "\n", "\"SB12\"", ",", "\n", "\"SB14\"", ",", "\n", "\"SM2\"", ",", "\n", "\"SM3\"", ",", "\n", "\"SM4\"", ",", "\n", "\"SM5\"", ",", "\n", "\"SMu1\"", ",", "\n", "\"SMu40\"", ",", "\n", "\"SMu41\"", ",", "\n", "\"SMu42\"", ",", "\n", "\"SS1\"", ",", "\n", "\"SS2\"", ",", "\n", "\"SS3\"", ",", "\n", "\"ShSu10\"", ",", "\n", "\"ShSu12\"", ",", "\n", "\"ShSu13\"", ",", "\n", "\"ShSu14\"", ",", "\n", "\"SiBF10\"", ",", "\n", "\"SiBF11\"", ",", "\n", "\"SiBF12\"", ",", "\n", "\"SiBF13\"", ",", "\n", "\"SiBF14\"", ",", "\n", "\"SiS1\"", ",", "# new in v2", "\n", "}", "\n", "", "subfolder", "=", "\"train\"", "\n", "version_descriptor", "=", "\"v1\"", "if", "like_v1", "else", "\"v2\"", "\n", "print", "(", "f\"Using seqs {seqs} for all, version {version_descriptor}\"", ")", "\n", "# ! Following splits have nothing to do with like_v1 switch", "\n", "# ! Only depend on split name", "\n", "", "elif", "split", "==", "\"all_all\"", ":", "\n", "        ", "seqs", "=", "{", "\n", "\"ABF10\"", ",", "\n", "\"ABF11\"", ",", "\n", "\"ABF12\"", ",", "\n", "\"ABF13\"", ",", "\n", "\"ABF14\"", ",", "\n", "\"BB10\"", ",", "\n", "\"BB11\"", ",", "\n", "\"BB12\"", ",", "\n", "\"BB13\"", ",", "\n", "\"BB14\"", ",", "\n", "\"GPMF10\"", ",", "\n", "\"GPMF11\"", ",", "\n", "\"GPMF12\"", ",", "\n", "\"GPMF13\"", ",", "\n", "\"GPMF14\"", ",", "\n", "\"GSF10\"", ",", "\n", "\"GSF11\"", ",", "\n", "\"GSF12\"", ",", "\n", "\"GSF13\"", ",", "\n", "\"GSF14\"", ",", "\n", "\"MC1\"", ",", "\n", "\"MC2\"", ",", "\n", "\"MC4\"", ",", "\n", "\"MC5\"", ",", "\n", "\"MC6\"", ",", "\n", "\"MDF10\"", ",", "\n", "\"MDF11\"", ",", "\n", "\"MDF12\"", ",", "\n", "\"MDF13\"", ",", "\n", "\"MDF14\"", ",", "\n", "\"SB10\"", ",", "\n", "\"SB12\"", ",", "\n", "\"SB14\"", ",", "\n", "\"SM2\"", ",", "\n", "\"SM3\"", ",", "\n", "\"SM4\"", ",", "\n", "\"SM5\"", ",", "\n", "\"SMu1\"", ",", "\n", "\"SMu40\"", ",", "\n", "\"SMu41\"", ",", "\n", "\"SMu42\"", ",", "\n", "\"SS1\"", ",", "\n", "\"SS2\"", ",", "\n", "\"SS3\"", ",", "\n", "\"ShSu10\"", ",", "\n", "\"ShSu12\"", ",", "\n", "\"ShSu13\"", ",", "\n", "\"ShSu14\"", ",", "\n", "\"SiBF10\"", ",", "\n", "\"SiBF11\"", ",", "\n", "\"SiBF12\"", ",", "\n", "\"SiBF13\"", ",", "\n", "\"SiBF14\"", ",", "\n", "}", "\n", "subfolder", "=", "\"train\"", "\n", "print", "(", "f\"Using seqs {seqs} for total_dataset, regardless of version\"", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", ",", "\"split mode not found!\"", "\n", "", "return", "seqs", ",", "subfolder", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3dutils.get_seq_object": [[385, 461], ["set", "list", "set.add"], "function", ["None"], ["", "def", "get_seq_object", "(", "seq", ")", ":", "\n", "    ", "mapping", "=", "{", "\n", "\"ABF10\"", ":", "\"021_bleach_cleanser\"", ",", "\n", "\"ABF11\"", ":", "\"021_bleach_cleanser\"", ",", "\n", "\"ABF12\"", ":", "\"021_bleach_cleanser\"", ",", "\n", "\"ABF13\"", ":", "\"021_bleach_cleanser\"", ",", "\n", "\"ABF14\"", ":", "\"021_bleach_cleanser\"", ",", "\n", "\"BB10\"", ":", "\"011_banana\"", ",", "\n", "\"BB11\"", ":", "\"011_banana\"", ",", "\n", "\"BB12\"", ":", "\"011_banana\"", ",", "\n", "\"BB13\"", ":", "\"011_banana\"", ",", "\n", "\"BB14\"", ":", "\"011_banana\"", ",", "\n", "\"GPMF10\"", ":", "\"010_potted_meat_can\"", ",", "\n", "\"GPMF11\"", ":", "\"010_potted_meat_can\"", ",", "\n", "\"GPMF12\"", ":", "\"010_potted_meat_can\"", ",", "\n", "\"GPMF13\"", ":", "\"010_potted_meat_can\"", ",", "\n", "\"GPMF14\"", ":", "\"010_potted_meat_can\"", ",", "\n", "\"GSF10\"", ":", "\"037_scissors\"", ",", "\n", "\"GSF11\"", ":", "\"037_scissors\"", ",", "\n", "\"GSF12\"", ":", "\"037_scissors\"", ",", "\n", "\"GSF13\"", ":", "\"037_scissors\"", ",", "\n", "\"GSF14\"", ":", "\"037_scissors\"", ",", "\n", "\"MC1\"", ":", "\"003_cracker_box\"", ",", "\n", "\"MC2\"", ":", "\"003_cracker_box\"", ",", "\n", "\"MC4\"", ":", "\"003_cracker_box\"", ",", "\n", "\"MC5\"", ":", "\"003_cracker_box\"", ",", "\n", "\"MC6\"", ":", "\"003_cracker_box\"", ",", "\n", "\"MDF10\"", ":", "\"035_power_drill\"", ",", "\n", "\"MDF11\"", ":", "\"035_power_drill\"", ",", "\n", "\"MDF12\"", ":", "\"035_power_drill\"", ",", "\n", "\"MDF13\"", ":", "\"035_power_drill\"", ",", "\n", "\"MDF14\"", ":", "\"035_power_drill\"", ",", "\n", "\"ND2\"", ":", "\"035_power_drill\"", ",", "\n", "\"SB10\"", ":", "\"021_bleach_cleanser\"", ",", "\n", "\"SB12\"", ":", "\"021_bleach_cleanser\"", ",", "\n", "\"SB14\"", ":", "\"021_bleach_cleanser\"", ",", "\n", "\"SM2\"", ":", "\"006_mustard_bottle\"", ",", "\n", "\"SM3\"", ":", "\"006_mustard_bottle\"", ",", "\n", "\"SM4\"", ":", "\"006_mustard_bottle\"", ",", "\n", "\"SM5\"", ":", "\"006_mustard_bottle\"", ",", "\n", "\"SMu1\"", ":", "\"025_mug\"", ",", "\n", "\"SMu40\"", ":", "\"025_mug\"", ",", "\n", "\"SMu41\"", ":", "\"025_mug\"", ",", "\n", "\"SMu42\"", ":", "\"025_mug\"", ",", "\n", "\"SS1\"", ":", "\"004_sugar_box\"", ",", "\n", "\"SS2\"", ":", "\"004_sugar_box\"", ",", "\n", "\"SS3\"", ":", "\"004_sugar_box\"", ",", "\n", "\"ShSu10\"", ":", "\"004_sugar_box\"", ",", "\n", "\"ShSu12\"", ":", "\"004_sugar_box\"", ",", "\n", "\"ShSu13\"", ":", "\"004_sugar_box\"", ",", "\n", "\"ShSu14\"", ":", "\"004_sugar_box\"", ",", "\n", "\"SiBF10\"", ":", "\"011_banana\"", ",", "\n", "\"SiBF11\"", ":", "\"011_banana\"", ",", "\n", "\"SiBF12\"", ":", "\"011_banana\"", ",", "\n", "\"SiBF13\"", ":", "\"011_banana\"", ",", "\n", "\"SiBF14\"", ":", "\"011_banana\"", ",", "\n", "\"SiS1\"", ":", "\"004_sugar_box\"", ",", "\n", "# test", "\n", "\"SM1\"", ":", "\"006_mustard_bottle\"", ",", "\n", "\"MPM10\"", ":", "\"010_potted_meat_can\"", ",", "\n", "\"MPM11\"", ":", "\"010_potted_meat_can\"", ",", "\n", "\"MPM12\"", ":", "\"010_potted_meat_can\"", ",", "\n", "\"MPM13\"", ":", "\"010_potted_meat_can\"", ",", "\n", "\"MPM14\"", ":", "\"010_potted_meat_can\"", ",", "\n", "\"SB11\"", ":", "\"021_bleach_cleanser\"", ",", "\n", "\"SB13\"", ":", "\"021_bleach_cleanser\"", ",", "\n", "\"AP10\"", ":", "\"019_pitcher_base\"", ",", "\n", "\"AP11\"", ":", "\"019_pitcher_base\"", ",", "\n", "\"AP12\"", ":", "\"019_pitcher_base\"", ",", "\n", "\"AP13\"", ":", "\"019_pitcher_base\"", ",", "\n", "\"AP14\"", ":", "\"019_pitcher_base\"", ",", "\n", "}", "\n", "obj_set", "=", "set", "(", ")", "\n", "for", "s", "in", "seq", ":", "\n", "        ", "obj_set", ".", "add", "(", "mapping", "[", "s", "]", ")", "\n", "", "return", "list", "(", "obj_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.cionline.CIOnline.__init__": [[10, 46], ["hocontact.hodatasets.cidata.CIdata.__init__", "cionline.CIOnline.queries.update"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update"], ["    ", "def", "__init__", "(", "\n", "self", ",", "data_path", ",", "hodata_path", ",", "anchor_path", ",", "hodata_use_cache", "=", "True", ",", "hodata_center_idx", "=", "9", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "data_path", ",", "hodata_path", ",", "anchor_path", ",", "hodata_use_cache", "=", "hodata_use_cache", ",", "hodata_center_idx", "=", "hodata_center_idx", "\n", ")", "\n", "\n", "# along side with basic CIDumpedQueries, we need some adapt queries", "\n", "# for offline eval", "\n", "self", ".", "queries", ".", "update", "(", "\n", "{", "\n", "CIAdaptQueries", ".", "OBJ_VERTS_3D", ",", "\n", "CIAdaptQueries", ".", "OBJ_CAN_VERTS", ",", "\n", "CIAdaptQueries", ".", "OBJ_FACES", ",", "\n", "CIAdaptQueries", ".", "OBJ_TSL", ",", "\n", "CIAdaptQueries", ".", "OBJ_ROT", ",", "\n", "CIAdaptQueries", ".", "OBJ_NORMAL", ",", "\n", "CIAdaptQueries", ".", "HAND_VERTS_3D", ",", "\n", "CIAdaptQueries", ".", "HAND_JOINTS_3D", ",", "\n", "CIAdaptQueries", ".", "HAND_FACES", ",", "\n", "CIAdaptQueries", ".", "HAND_SHAPE", ",", "\n", "CIAdaptQueries", ".", "HAND_POSE", ",", "\n", "CIAdaptQueries", ".", "HAND_TSL", ",", "\n", "CIAdaptQueries", ".", "HAND_ROT", ",", "\n", "CIAdaptQueries", ".", "OBJ_VOXEL_POINTS_CAN", ",", "\n", "CIAdaptQueries", ".", "OBJ_VOXEL_EL_VOL", ",", "\n", "CIAdaptQueries", ".", "IMAGE_PATH", ",", "\n", "CIDumpedQueries", ".", "OBJ_VERTS_3D", ",", "\n", "CIDumpedQueries", ".", "OBJ_TSL", ",", "\n", "CIDumpedQueries", ".", "OBJ_ROT", ",", "\n", "CIDumpedQueries", ".", "HAND_VERTS_3D", ",", "\n", "CIDumpedQueries", ".", "HAND_JOINTS_3D", ",", "\n", "CIDumpedQueries", ".", "HAND_SHAPE", ",", "\n", "CIDumpedQueries", ".", "HAND_TSL", ",", "\n", "CIDumpedQueries", ".", "HAND_ROT", ",", "\n", "CIDumpedQueries", ".", "HAND_POSE", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.cionline.CIOnline.get_dumped_processed_contact_info": [[49, 68], ["os.path.join", "hocontact.utils.contactutils.dumped_process_contact_info", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.contactutils.dumped_process_contact_info"], ["", "def", "get_dumped_processed_contact_info", "(", "self", ",", "index", ")", ":", "\n", "        ", "dumped_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "f\"{index}_contact.pkl\"", ")", "\n", "with", "open", "(", "dumped_file_path", ",", "\"rb\"", ")", "as", "bytestream", ":", "\n", "            ", "dumped_contact_info_list", "=", "pickle", ".", "load", "(", "bytestream", ")", "\n", "", "(", "vertex_contact", ",", "hand_region", ",", "anchor_id", ",", "anchor_elasti", ",", "anchor_padding_mask", ")", "=", "dumped_process_contact_info", "(", "\n", "dumped_contact_info_list", ",", "\n", "self", ".", "anchor_mapping", ",", "\n", "pad_vertex", "=", "self", ".", "contact_pad_vertex", ",", "\n", "pad_anchor", "=", "self", ".", "contact_pad_anchor", ",", "\n", "elasti_th", "=", "self", ".", "contact_elasti_th", ",", "\n", ")", "\n", "res", "=", "{", "\n", "\"vertex_contact\"", ":", "vertex_contact", ",", "\n", "\"hand_region\"", ":", "hand_region", ",", "\n", "\"anchor_id\"", ":", "anchor_id", ",", "\n", "\"anchor_elasti\"", ":", "anchor_elasti", ",", "\n", "\"anchor_padding_mask\"", ":", "anchor_padding_mask", ",", "\n", "}", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.cionline.CIOnline.get_dumped_processed_pose": [[69, 74], ["os.path.join", "open", "pickle.load"], "methods", ["None"], ["", "def", "get_dumped_processed_pose", "(", "self", ",", "index", ")", ":", "\n", "        ", "dumped_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "f\"{index}_honet.pkl\"", ")", "\n", "with", "open", "(", "dumped_file_path", ",", "\"rb\"", ")", "as", "bytestream", ":", "\n", "            ", "dumped_pose_dict", "=", "pickle", ".", "load", "(", "bytestream", ")", "\n", "", "return", "dumped_pose_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.__init__": [[77, 161], ["abc.ABC.__init__", "float", "float", "manopth.manolayer.ManoLayer", "hocontact.hodatasets.hoquery.get_trans_queries", "hodata.HOdata.all_queries.update"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hoquery.get_trans_queries", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_root", "=", "\"data\"", ",", "\n", "data_split", "=", "\"train\"", ",", "\n", "njoints", "=", "21", ",", "\n", "use_cache", "=", "True", ",", "\n", "filter_no_contact", "=", "False", ",", "\n", "filter_thresh", "=", "10.0", ",", "\n", "mini_factor", "=", "1.0", ",", "\n", "center_idx", "=", "9", ",", "\n", "scale_jittering", "=", "0.0", ",", "\n", "center_jittering", "=", "0.0", ",", "\n", "block_rot", "=", "False", ",", "\n", "max_rot", "=", "0.0", "*", "np", ".", "pi", ",", "\n", "hue", "=", "0.15", ",", "\n", "saturation", "=", "0.5", ",", "\n", "contrast", "=", "0.5", ",", "\n", "brightness", "=", "0.5", ",", "\n", "blur_radius", "=", "0.5", ",", "\n", "query", "=", "None", ",", "\n", "sides", "=", "\"right\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_root", "=", "data_root", "\n", "self", ".", "data_split", "=", "data_split", "\n", "self", ".", "njoints", "=", "njoints", "\n", "self", ".", "use_cache", "=", "use_cache", "\n", "self", ".", "filter_no_contact", "=", "filter_no_contact", "\n", "self", ".", "filter_thresh", "=", "float", "(", "filter_thresh", ")", "\n", "self", ".", "mini_factor", "=", "float", "(", "mini_factor", ")", "\n", "\n", "self", ".", "center_idx", "=", "center_idx", "\n", "self", ".", "scale_jittering", "=", "scale_jittering", "\n", "self", ".", "center_jittering", "=", "center_jittering", "\n", "self", ".", "block_rot", "=", "block_rot", "\n", "self", ".", "max_rot", "=", "max_rot", "\n", "self", ".", "hue", "=", "hue", "\n", "self", ".", "saturation", "=", "saturation", "\n", "self", ".", "contrast", "=", "contrast", "\n", "self", ".", "brightness", "=", "brightness", "\n", "self", ".", "blur_radius", "=", "blur_radius", "\n", "\n", "self", ".", "sides", "=", "sides", "\n", "\n", "self", ".", "layer", "=", "manolayer", ".", "ManoLayer", "(", "\n", "joint_rot_mode", "=", "\"axisang\"", ",", "use_pca", "=", "False", ",", "mano_root", "=", "\"assets/mano\"", ",", "center_idx", "=", "None", ",", "flat_hand_mean", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "inp_res", "=", "(", "255", ",", "255", ")", "# this will be overried by its subclass", "\n", "\n", "# get paired links as neighboured joints", "\n", "self", ".", "links", "=", "[", "\n", "(", "0", ",", "1", ",", "2", ",", "3", ",", "4", ")", ",", "\n", "(", "0", ",", "5", ",", "6", ",", "7", ",", "8", ")", ",", "\n", "(", "0", ",", "9", ",", "10", ",", "11", ",", "12", ")", ",", "\n", "(", "0", ",", "13", ",", "14", ",", "15", ",", "16", ")", ",", "\n", "(", "0", ",", "17", ",", "18", ",", "19", ",", "20", ")", ",", "\n", "]", "\n", "\n", "# get queries", "\n", "self", ".", "all_queries", "=", "{", "\n", "BaseQueries", ".", "IMAGE", ",", "\n", "BaseQueries", ".", "JOINTS_2D", ",", "\n", "BaseQueries", ".", "JOINTS_3D", ",", "\n", "BaseQueries", ".", "OBJ_VERTS_2D", ",", "\n", "BaseQueries", ".", "OBJ_VIS_2D", ",", "\n", "BaseQueries", ".", "OBJ_VERTS_3D", ",", "\n", "BaseQueries", ".", "HAND_VERTS_2D", ",", "\n", "BaseQueries", ".", "HAND_VERTS_3D", ",", "\n", "BaseQueries", ".", "OBJ_CAN_VERTS", ",", "\n", "BaseQueries", ".", "SIDE", ",", "\n", "BaseQueries", ".", "CAM_INTR", ",", "\n", "BaseQueries", ".", "JOINT_VIS", ",", "\n", "BaseQueries", ".", "OBJ_TRANSF", ",", "\n", "BaseQueries", ".", "HAND_POSE_WRT_CAM", ",", "\n", "BaseQueries", ".", "IMAGE_PATH", ",", "\n", "MetaQueries", ".", "SAMPLE_IDENTIFIER", ",", "\n", "}", "\n", "trans_queries", "=", "get_trans_queries", "(", "self", ".", "all_queries", ")", "\n", "self", ".", "all_queries", ".", "update", "(", "trans_queries", ")", "\n", "\n", "self", ".", "queries", "=", "query", "\n", "if", "query", "is", "None", ":", "\n", "            ", "self", ".", "queries", "=", "self", ".", "all_queries", "\n", "# logger.info(f\"HOdata(ABC) queries: \\n {self.queries}\", 'cyan')", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_dataset": [[163, 233], ["fhb.FPHB.FPHB.FPHB", "fhb.FPHB.FPHB.load_dataset", "ho3d.HO3D.HO3D.HO3D", "ho3d.HO3D.HO3D.load_dataset", "fhb_example.FHBExample.FHBExample.FHBExample", "fhb_example.FHBExample.FHBExample.load_dataset", "hocontact.utils.logger.logger.error"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.load_dataset", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.load_dataset", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.fhb.FPHB.load_dataset", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.error"], ["", "", "@", "classmethod", "\n", "def", "get_dataset", "(", "\n", "cls", ",", "\n", "dataset", ",", "\n", "data_root", ",", "\n", "data_split", ",", "\n", "split_mode", ",", "\n", "use_cache", ",", "\n", "mini_factor", ",", "\n", "center_idx", ",", "\n", "enable_contact", ",", "\n", "filter_no_contact", ",", "\n", "filter_thresh", ",", "\n", "synt_factor", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "if", "dataset", "in", "[", "\"fhb\"", ",", "\"fhbhand\"", ",", "\"fhbhands\"", "]", ":", "\n", "            ", "import", "hocontact", ".", "hodatasets", ".", "fhb", "as", "fhb", "\n", "\n", "synt_factor", "=", "0", "# rewrite synt_factor", "\n", "fhb", "=", "fhb", ".", "FPHB", "(", "\n", "data_root", "=", "data_root", ",", "\n", "data_split", "=", "data_split", ",", "\n", "split_mode", "=", "split_mode", ",", "\n", "use_cache", "=", "use_cache", ",", "\n", "mini_factor", "=", "mini_factor", ",", "\n", "center_idx", "=", "center_idx", ",", "\n", "enable_contact", "=", "enable_contact", ",", "\n", "filter_no_contact", "=", "filter_no_contact", ",", "\n", "filter_thresh", "=", "filter_thresh", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "fhb", ".", "load_dataset", "(", ")", "\n", "return", "fhb", "\n", "", "elif", "dataset", "==", "\"ho3d\"", ":", "\n", "            ", "import", "hocontact", ".", "hodatasets", ".", "ho3d", "as", "ho3d", "\n", "\n", "synt_factor", "==", "0", "# rewrite synt_factor", "\n", "ho3d", "=", "ho3d", ".", "HO3D", "(", "\n", "data_root", "=", "data_root", ",", "\n", "data_split", "=", "data_split", ",", "\n", "split_mode", "=", "split_mode", ",", "\n", "use_cache", "=", "use_cache", ",", "\n", "mini_factor", "=", "mini_factor", ",", "\n", "center_idx", "=", "center_idx", ",", "\n", "enable_contact", "=", "enable_contact", ",", "\n", "filter_no_contact", "=", "filter_no_contact", ",", "\n", "filter_thresh", "=", "filter_thresh", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "ho3d", ".", "load_dataset", "(", ")", "\n", "return", "ho3d", "\n", "", "elif", "dataset", "==", "\"fhb_example\"", ":", "\n", "            ", "import", "hocontact", ".", "hodatasets", ".", "fhb_example", "as", "fhb_example", "\n", "\n", "fhb_example", "=", "fhb_example", ".", "FHBExample", "(", "\n", "data_root", "=", "data_root", ",", "\n", "data_split", "=", "data_split", ",", "\n", "split_mode", "=", "split_mode", ",", "\n", "use_cache", "=", "use_cache", ",", "\n", "mini_factor", "=", "mini_factor", ",", "\n", "center_idx", "=", "center_idx", ",", "\n", "filter_no_contact", "=", "filter_no_contact", ",", "\n", "filter_thresh", "=", "filter_thresh", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "fhb_example", ".", "load_dataset", "(", ")", "\n", "return", "fhb_example", "\n", "", "else", ":", "\n", "            ", "logger", ".", "error", "(", "f\"Unknown dataset {dataset}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get": [[234, 236], ["getattr"], "methods", ["None"], ["", "", "def", "get", "(", "self", ",", "item", ",", "idx", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "\"get_\"", "+", "item", ",", "lambda", "x", ":", "None", ")", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.__len__": [[237, 239], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_image": [[240, 243], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_image", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_image_path": [[244, 247], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_image_path", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_verts3d": [[248, 251], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_hand_verts3d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_verts2d": [[252, 255], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_hand_verts2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_textures": [[256, 259], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_obj_textures", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_faces": [[260, 263], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_obj_faces", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_faces": [[264, 267], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_hand_faces", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_transf": [[268, 271], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_obj_transf", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_normal": [[272, 275], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_obj_normal", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_transf": [[276, 279], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_obj_verts_transf", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_joint_vis": [[280, 283], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_joint_vis", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_can": [[284, 287], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_obj_verts_can", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts2d": [[288, 291], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_obj_verts2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_joints3d": [[292, 295], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_joints3d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_joints2d": [[296, 299], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_joints2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_cam_intr": [[300, 303], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_cam_intr", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_sides": [[304, 307], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_sides", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_center_scale": [[308, 311], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_center_scale", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_vis2d": [[312, 315], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_obj_vis2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_vis2d": [[316, 319], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_hand_vis2d", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_n_hand_palm_vert": [[320, 323], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_n_hand_palm_vert", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_palm_vert_idx": [[324, 327], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_hand_palm_vert_idx", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_sample_identifier": [[328, 331], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_sample_identifier", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_tsl_wrt_cam": [[334, 336], ["RuntimeError"], "methods", ["None"], ["", "def", "get_hand_tsl_wrt_cam", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"method unimplemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_shape": [[339, 341], ["RuntimeError"], "methods", ["None"], ["", "def", "get_hand_shape", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"method unimplemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_pose_wrt_cam": [[346, 348], ["RuntimeError"], "methods", ["None"], ["", "def", "get_hand_pose_wrt_cam", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"method unimplemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_axisang_wrt_cam": [[351, 353], ["RuntimeError"], "methods", ["None"], ["", "def", "get_hand_axisang_wrt_cam", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"method unimplemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_rot_wrt_cam": [[356, 358], ["RuntimeError"], "methods", ["None"], ["", "def", "get_hand_rot_wrt_cam", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"method unimplemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_transf_reduced": [[361, 363], ["RuntimeError"], "methods", ["None"], ["", "def", "get_obj_verts_transf_reduced", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"method unimplemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_can_reduced": [[366, 368], ["RuntimeError"], "methods", ["None"], ["", "def", "get_obj_verts_can_reduced", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"method unimplemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_faces_reduced": [[371, 373], ["RuntimeError"], "methods", ["None"], ["", "def", "get_obj_faces_reduced", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"method unimplemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_voxel_points_can": [[376, 378], ["RuntimeError"], "methods", ["None"], ["", "def", "get_obj_voxel_points_can", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"method unimplemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_voxel_points_transf": [[381, 383], ["RuntimeError"], "methods", ["None"], ["", "def", "get_obj_voxel_points_transf", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"method unimplemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_voxel_element_volume": [[386, 388], ["RuntimeError"], "methods", ["None"], ["", "def", "get_obj_voxel_element_volume", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"method unimplemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.project": [[389, 394], ["numpy.array().dot().transpose", "points2d.astype", "numpy.array().dot", "points3d.transpose", "numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "project", "(", "points3d", ",", "cam_intr", ")", ":", "\n", "        ", "hom_2d", "=", "np", ".", "array", "(", "cam_intr", ")", ".", "dot", "(", "points3d", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "points2d", "=", "(", "hom_2d", "/", "(", "hom_2d", "[", ":", ",", "2", ":", "]", "+", "1e-6", ")", ")", "[", ":", ",", ":", "2", "]", "\n", "return", "points2d", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.__getitem__": [[395, 667], ["hodata.HOdata.get_center_scale", "numpy.array().astype", "hodata.HOdata.get_cam_intr", "hocontact.utils.augutils.get_affine_transform", "hodata.HOdata.get_hand_pose_wrt_cam", "hodata.HOdata.get_sample_identifier", "hodata.HOdata.get_joint_vis", "hodata.HOdata.get_sides", "hocontact.utils.handutils.flip_hand_side", "hodata.HOdata.get_image", "hodata.HOdata.get_image_path", "torch.distributions.uniform.Uniform().sample().numpy", "numpy.clip", "hodata.HOdata.astype", "post_rot_trans.dot", "post_rot_trans.dot.astype", "hodata.HOdata.get_obj_verts2d", "hodata.HOdata.get_obj_corners2d", "hodata.HOdata.get_joints2d", "hodata.HOdata.get_hand_vis2d", "hodata.HOdata.get_hand_verts2d", "hodata.HOdata.get_joints3d", "hodata.HOdata.get_hand_verts3d", "hodata.HOdata.get_obj_verts_transf", "hodata.HOdata.get_obj_corners3d", "hodata.HOdata.get_obj_verts_can", "hodata.HOdata.get_obj_corners_can", "hodata.HOdata.get_hand_faces", "hodata.HOdata.get_obj_faces", "hocontact.utils.augutils.transform_img", "hocontact.utils.augutils.apply_jitter.crop", "hocontact.to_tensor().float", "hocontact.normalize", "hodata.HOdata.get_obj_transf", "hodata.HOdata.get_obj_transf", "numpy.array().astype.dot", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate.astype", "hocontact.utils.augutils.apply_jitter.transpose", "numpy.array", "center_offsets.astype", "torch.distributions.normal.Normal().sample().item", "torch.distributions.uniform.Uniform().sample().item", "numpy.array", "objverts2d.copy.copy.copy", "objverts2d.copy.copy.astype", "hocontact.utils.augutils.transform_coords", "numpy.array().astype", "hodata.HOdata.get_obj_vis2d", "objcorners2d.copy.copy.copy", "numpy.array", "hocontact.utils.augutils.transform_coords", "numpy.array", "joints2d.copy.copy.copy", "joints2d.copy.copy.astype", "hocontact.utils.augutils.transform_coords", "numpy.array().astype", "handverts2d.copy.copy.copy", "hocontact.utils.augutils.transform_coords", "numpy.array", "np.array().astype.dot().transpose.copy", "np.array().astype.dot().transpose.astype", "numpy.array().astype.dot().transpose", "np.array().astype.dot().transpose.astype", "np.array().astype.dot().transpose.copy", "np.array().astype.dot().transpose.astype", "numpy.array().astype.dot().transpose", "np.array().astype.dot().transpose.astype", "np.array().astype.dot().transpose.copy", "numpy.array().astype.dot().transpose", "np.array().astype.dot().transpose.astype", "np.array().astype.dot().transpose.copy", "numpy.array().astype.dot().transpose", "obj_can_verts.copy.copy.copy", "obj_can_corners.copy.copy.copy", "hocontact.utils.augutils.apply_jitter.filter", "hocontact.utils.augutils.get_color_params", "hocontact.utils.augutils.apply_jitter", "torch.distributions.uniform.Uniform().sample", "torch.distributions.uniform.Uniform().sample().item", "PIL.ImageFilter.GaussianBlur", "hocontact.to_tensor", "torch.distributions.normal.Normal().sample", "torch.distributions.uniform.Uniform().sample", "numpy.array", "numpy.array", "numpy.array().astype.dot", "numpy.array().astype.dot", "numpy.array().astype.dot", "numpy.array().astype.dot", "numpy.array", "torch.distributions.uniform.Uniform", "numpy.cos", "numpy.sin", "numpy.cos", "np.array().astype.dot().transpose.transpose", "np.array().astype.dot().transpose.transpose", "np.array().astype.dot().transpose.transpose", "np.array().astype.dot().transpose.transpose", "torch.distributions.uniform.Uniform().sample", "torch.distributions.normal.Normal", "torch.distributions.uniform.Uniform", "numpy.sin", "torch.distributions.uniform.Uniform"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_center_scale", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_cam_intr", "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils.get_affine_transform", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_pose_wrt_cam", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_sample_identifier", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_joint_vis", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_sides", "home.repos.pwc.inspect_result.lixiny_CPF.utils.handutils.flip_hand_side", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_image", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_image_path", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts2d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_corners2d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_joints2d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_vis2d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_verts2d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_joints3d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_verts3d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_transf", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_corners3d", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_can", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.ho3d.HO3D.get_obj_corners_can", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_faces", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_faces", "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils.transform_img", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_transf", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_transf", "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils.transform_coords", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_vis2d", "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils.transform_coords", "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils.transform_coords", "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils.transform_coords", "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils.get_color_params", "home.repos.pwc.inspect_result.lixiny_CPF.utils.augutils.apply_jitter"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "query", "=", "self", ".", "queries", "\n", "sample", "=", "{", "}", "\n", "\n", "center", ",", "scale", "=", "self", ".", "get_center_scale", "(", "idx", ")", "\n", "\n", "if", "BaseQueries", ".", "JOINT_VIS", "in", "query", ":", "\n", "            ", "jointvis", "=", "self", ".", "get_joint_vis", "(", "idx", ")", "\n", "sample", "[", "BaseQueries", ".", "JOINT_VIS", "]", "=", "jointvis", "\n", "\n", "# Get sides", "\n", "", "if", "BaseQueries", ".", "SIDE", "in", "query", ":", "\n", "            ", "hand_side", "=", "self", ".", "get_sides", "(", "idx", ")", "\n", "hand_side", ",", "flip", "=", "handutils", ".", "flip_hand_side", "(", "self", ".", "sides", ",", "hand_side", ")", "\n", "sample", "[", "BaseQueries", ".", "SIDE", "]", "=", "hand_side", "\n", "", "else", ":", "\n", "            ", "flip", "=", "False", "\n", "\n", "# Get original image", "\n", "", "if", "BaseQueries", ".", "IMAGE", "in", "query", "or", "TransQueries", ".", "IMAGE", "in", "query", ":", "\n", "            ", "img", "=", "self", ".", "get_image", "(", "idx", ")", "\n", "if", "flip", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "if", "BaseQueries", ".", "IMAGE", "in", "query", ":", "\n", "                ", "sample", "[", "BaseQueries", ".", "IMAGE", "]", "=", "np", ".", "array", "(", "img", ")", "\n", "\n", "", "", "if", "BaseQueries", ".", "IMAGE_PATH", "in", "query", ":", "\n", "            ", "sample", "[", "BaseQueries", ".", "IMAGE_PATH", "]", "=", "self", ".", "get_image_path", "(", "idx", ")", "\n", "\n", "# Flip and image 2d if needed", "\n", "", "if", "flip", ":", "\n", "            ", "center", "[", "0", "]", "=", "self", ".", "inp_res", "[", "0", "]", "-", "center", "[", "0", "]", "\n", "\n", "# Data augmentation", "\n", "", "if", "self", ".", "data_split", "in", "[", "\"train\"", ",", "\"trainval\"", "]", ":", "\n", "# ! Randomly jitter center", "\n", "# Center is located in square of size 2*center_jitter_factor", "\n", "# in center of cropped image", "\n", "            ", "center_jit", "=", "Uniform", "(", "low", "=", "-", "1", ",", "high", "=", "1", ")", ".", "sample", "(", "(", "2", ",", ")", ")", ".", "numpy", "(", ")", "\n", "center_offsets", "=", "self", ".", "center_jittering", "*", "scale", "*", "center_jit", "\n", "center", "=", "center", "+", "center_offsets", ".", "astype", "(", "int", ")", "\n", "\n", "# Scale jittering", "\n", "scale_jit", "=", "Normal", "(", "0", ",", "1", ")", ".", "sample", "(", ")", ".", "item", "(", ")", "+", "1", "\n", "scale_jittering", "=", "self", ".", "scale_jittering", "*", "scale_jit", "\n", "scale_jittering", "=", "np", ".", "clip", "(", "scale_jittering", ",", "1", "-", "self", ".", "scale_jittering", ",", "1", "+", "self", ".", "scale_jittering", ")", "\n", "scale", "=", "scale", "*", "scale_jittering", "\n", "rot", "=", "Uniform", "(", "low", "=", "-", "self", ".", "max_rot", ",", "high", "=", "self", ".", "max_rot", ")", ".", "sample", "(", ")", ".", "item", "(", ")", "if", "self", ".", "max_rot", "!=", "0", "else", "0.0", "\n", "", "else", ":", "\n", "            ", "rot", "=", "0", "\n", "", "if", "self", ".", "block_rot", ":", "\n", "            ", "rot", "=", "0", "\n", "", "rot_mat", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "rot", ")", ",", "-", "np", ".", "sin", "(", "rot", ")", ",", "0", "]", ",", "[", "np", ".", "sin", "(", "rot", ")", ",", "np", ".", "cos", "(", "rot", ")", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "camintr", "=", "self", ".", "get_cam_intr", "(", "idx", ")", "\n", "if", "BaseQueries", ".", "CAM_INTR", "in", "query", ":", "\n", "            ", "sample", "[", "BaseQueries", ".", "CAM_INTR", "]", "=", "camintr", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "affinetrans", ",", "post_rot_trans", "=", "augutils", ".", "get_affine_transform", "(", "\n", "center", "=", "center", ",", "\n", "scale", "=", "scale", ",", "\n", "optical_center", "=", "[", "camintr", "[", "0", ",", "2", "]", ",", "camintr", "[", "1", ",", "2", "]", "]", ",", "# (cx, cy)print(intr[0, 0])", "\n", "out_res", "=", "self", ".", "inp_res", ",", "\n", "rot", "=", "rot", ",", "\n", ")", "\n", "\n", "if", "TransQueries", ".", "CAM_INTR", "in", "query", ":", "\n", "# ! Rotation is applied as extr transform", "\n", "            ", "new_camintr", "=", "post_rot_trans", ".", "dot", "(", "camintr", ")", "\n", "sample", "[", "TransQueries", ".", "CAM_INTR", "]", "=", "new_camintr", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "if", "TransQueries", ".", "AFFINETRANS", "in", "query", ":", "\n", "            ", "sample", "[", "TransQueries", ".", "AFFINETRANS", "]", "=", "affinetrans", "\n", "\n", "# * =============== ALL 2D POINTS ANNOTATION ===================================================================", "\n", "# * =============== Get 2D object points", "\n", "", "if", "(", "BaseQueries", ".", "OBJ_VERTS_2D", "in", "query", ")", "or", "(", "TransQueries", ".", "OBJ_VERTS_2D", "in", "query", ")", ":", "\n", "            ", "objverts2d", "=", "self", ".", "get_obj_verts2d", "(", "idx", ")", "\n", "if", "flip", ":", "\n", "                ", "objverts2d", "=", "objverts2d", ".", "copy", "(", ")", "\n", "objverts2d", "[", ":", ",", "0", "]", "=", "self", ".", "inp_res", "[", "0", "]", "-", "objverts2d", "[", ":", ",", "0", "]", "\n", "", "if", "BaseQueries", ".", "OBJ_VERTS_2D", "in", "query", ":", "\n", "                ", "sample", "[", "BaseQueries", ".", "OBJ_VERTS_2D", "]", "=", "objverts2d", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "if", "TransQueries", ".", "OBJ_VERTS_2D", "in", "query", ":", "\n", "                ", "transobjverts2d", "=", "augutils", ".", "transform_coords", "(", "objverts2d", ",", "affinetrans", ")", "\n", "sample", "[", "TransQueries", ".", "OBJ_VERTS_2D", "]", "=", "np", ".", "array", "(", "transobjverts2d", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "if", "BaseQueries", ".", "OBJ_VIS_2D", "in", "query", ":", "\n", "                ", "objvis2d", "=", "self", ".", "get_obj_vis2d", "(", "idx", ")", "\n", "sample", "[", "BaseQueries", ".", "OBJ_VIS_2D", "]", "=", "objvis2d", "\n", "\n", "# * ============== Get 2D object corner points", "\n", "", "", "if", "(", "BaseQueries", ".", "OBJ_CORNERS_2D", "in", "query", ")", "or", "(", "TransQueries", ".", "OBJ_CORNERS_2D", "in", "query", ")", ":", "\n", "            ", "objcorners2d", "=", "self", ".", "get_obj_corners2d", "(", "idx", ")", "\n", "if", "flip", ":", "\n", "                ", "objcorners2d", "=", "objcorners2d", ".", "copy", "(", ")", "\n", "objcorners2d", "[", ":", ",", "0", "]", "=", "self", ".", "inp_res", "[", "0", "]", "-", "objcorners2d", "[", ":", ",", "0", "]", "\n", "", "if", "BaseQueries", ".", "OBJ_CORNERS_2D", "in", "query", ":", "\n", "                ", "sample", "[", "BaseQueries", ".", "OBJ_CORNERS_2D", "]", "=", "np", ".", "array", "(", "objcorners2d", ")", "\n", "", "if", "TransQueries", ".", "OBJ_CORNERS_2D", "in", "query", ":", "\n", "                ", "transobjcorners2d", "=", "augutils", ".", "transform_coords", "(", "objcorners2d", ",", "affinetrans", ")", "\n", "sample", "[", "TransQueries", ".", "OBJ_CORNERS_2D", "]", "=", "np", ".", "array", "(", "transobjcorners2d", ")", "\n", "\n", "# * ============== Get 2D hand joints", "\n", "", "", "if", "(", "BaseQueries", ".", "JOINTS_2D", "in", "query", ")", "or", "TransQueries", ".", "JOINTS_2D", "in", "query", ":", "\n", "            ", "joints2d", "=", "self", ".", "get_joints2d", "(", "idx", ")", "\n", "if", "flip", ":", "\n", "                ", "joints2d", "=", "joints2d", ".", "copy", "(", ")", "\n", "joints2d", "[", ":", ",", "0", "]", "=", "self", ".", "inp_res", "[", "0", "]", "-", "joints2d", "[", ":", ",", "0", "]", "\n", "", "if", "BaseQueries", ".", "JOINTS_2D", "in", "query", ":", "\n", "                ", "sample", "[", "BaseQueries", ".", "JOINTS_2D", "]", "=", "joints2d", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "if", "TransQueries", ".", "JOINTS_2D", "in", "query", ":", "\n", "                ", "rows", "=", "augutils", ".", "transform_coords", "(", "joints2d", ",", "affinetrans", ")", "\n", "sample", "[", "TransQueries", ".", "JOINTS_2D", "]", "=", "np", ".", "array", "(", "rows", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# * =============== Get 2d hand joints visibilities", "\n", "", "", "if", "BaseQueries", ".", "HAND_VIS_2D", "in", "query", ":", "\n", "            ", "handvis2d", "=", "self", ".", "get_hand_vis2d", "(", "idx", ")", "\n", "sample", "[", "BaseQueries", ".", "HAND_VIS_2D", "]", "=", "handvis2d", "\n", "\n", "# * ============== Get 2D hand verts", "\n", "", "if", "(", "BaseQueries", ".", "HAND_VERTS_2D", "in", "query", ")", "or", "(", "TransQueries", ".", "HAND_VERTS_2D", "in", "query", ")", ":", "\n", "            ", "handverts2d", "=", "self", ".", "get_hand_verts2d", "(", "idx", ")", "\n", "if", "flip", ":", "\n", "                ", "handverts2d", "=", "handverts2d", ".", "copy", "(", ")", "\n", "handverts2d", "[", ":", ",", "0", "]", "=", "self", ".", "inp_res", "[", "0", "]", "-", "handverts2d", "[", ":", ",", "0", "]", "\n", "", "if", "BaseQueries", ".", "HAND_VERTS_2D", "in", "query", ":", "\n", "                ", "sample", "[", "BaseQueries", ".", "HAND_VERTS_2D", "]", "=", "handverts2d", "\n", "", "if", "TransQueries", ".", "HAND_VERTS_2D", "in", "query", ":", "\n", "                ", "transhandverts2d", "=", "augutils", ".", "transform_coords", "(", "handverts2d", ",", "affinetrans", ")", "\n", "sample", "[", "TransQueries", ".", "HAND_VERTS_2D", "]", "=", "np", ".", "array", "(", "transhandverts2d", ")", "\n", "# * <<<<<<<<<<<<<< END OF ALL 2D POINTS ANNOTATION<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ? ============== ALL 3D POINTS ANNOTATION ====================================================================", "\n", "# ? ============== Get 3D hand joints & 3D hand centers", "\n", "", "", "if", "BaseQueries", ".", "JOINTS_3D", "in", "query", "or", "TransQueries", ".", "JOINTS_3D", "in", "query", ":", "\n", "            ", "joints3d", "=", "self", ".", "get_joints3d", "(", "idx", ")", "\n", "if", "flip", ":", "\n", "                ", "joints3d", "=", "joints3d", ".", "copy", "(", ")", "\n", "joints3d", "[", ":", ",", "0", "]", "=", "-", "joints3d", "[", ":", ",", "0", "]", "\n", "", "if", "BaseQueries", ".", "JOINTS_3D", "in", "query", ":", "\n", "                ", "sample", "[", "BaseQueries", ".", "JOINTS_3D", "]", "=", "joints3d", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# Compute 3D center", "\n", "", "if", "self", ".", "center_idx", "is", "not", "None", ":", "\n", "                ", "center3d", "=", "joints3d", "[", "self", ".", "center_idx", "]", "\n", "", "else", ":", "\n", "                ", "center3d", "=", "(", "joints3d", "[", "9", "]", "+", "joints3d", "[", "0", "]", ")", "/", "2", "# palm", "\n", "", "sample", "[", "BaseQueries", ".", "CENTER_3D", "]", "=", "center3d", "# Always Compute", "\n", "\n", "if", "TransQueries", ".", "JOINTS_3D", "in", "query", ":", "\n", "                ", "joints3d", "=", "rot_mat", ".", "dot", "(", "joints3d", ".", "transpose", "(", "1", ",", "0", ")", ")", ".", "transpose", "(", ")", "\n", "sample", "[", "TransQueries", ".", "JOINTS_3D", "]", "=", "joints3d", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# Compute 3D center in TransQueries", "\n", "if", "self", ".", "center_idx", "is", "not", "None", ":", "\n", "                    ", "center3d", "=", "joints3d", "[", "self", ".", "center_idx", "]", "\n", "", "else", ":", "\n", "                    ", "center3d", "=", "(", "joints3d", "[", "9", "]", "+", "joints3d", "[", "0", "]", ")", "/", "2", "# palm", "\n", "", "sample", "[", "TransQueries", ".", "CENTER_3D", "]", "=", "center3d", "# Always Compute", "\n", "\n", "# ? =============== Get 3D hand vertices", "\n", "", "", "if", "BaseQueries", ".", "HAND_VERTS_3D", "in", "query", "or", "TransQueries", ".", "HAND_VERTS_3D", "in", "query", ":", "\n", "            ", "hand_verts3d", "=", "self", ".", "get_hand_verts3d", "(", "idx", ")", "\n", "if", "flip", ":", "\n", "                ", "hand_verts3d", "=", "hand_verts3d", ".", "copy", "(", ")", "\n", "hand_verts3d", "[", ":", ",", "0", "]", "=", "-", "hand_verts3d", "[", ":", ",", "0", "]", "\n", "", "if", "BaseQueries", ".", "HAND_VERTS_3D", "in", "query", ":", "\n", "                ", "sample", "[", "BaseQueries", ".", "HAND_VERTS_3D", "]", "=", "hand_verts3d", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "if", "TransQueries", ".", "HAND_VERTS_3D", "in", "query", ":", "\n", "                ", "hand_verts3d", "=", "rot_mat", ".", "dot", "(", "hand_verts3d", ".", "transpose", "(", "1", ",", "0", ")", ")", ".", "transpose", "(", ")", "\n", "# ! CAUTION! may lead to unexpected bug", "\n", "# // if self.center_idx is not None:", "\n", "# //     hand_verts3d = hand_verts3d - center3d", "\n", "sample", "[", "TransQueries", ".", "HAND_VERTS_3D", "]", "=", "hand_verts3d", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# ? =============== Get 3D obj vertices", "\n", "", "", "if", "BaseQueries", ".", "OBJ_VERTS_3D", "in", "query", "or", "TransQueries", ".", "OBJ_VERTS_3D", "in", "query", ":", "\n", "            ", "obj_verts3d", "=", "self", ".", "get_obj_verts_transf", "(", "idx", ")", "\n", "if", "flip", ":", "\n", "                ", "obj_verts3d", "=", "obj_verts3d", ".", "copy", "(", ")", "\n", "obj_verts3d", "[", ":", ",", "0", "]", "=", "-", "obj_verts3d", "[", ":", ",", "0", "]", "\n", "", "if", "BaseQueries", ".", "OBJ_VERTS_3D", "in", "query", ":", "\n", "                ", "sample", "[", "BaseQueries", ".", "OBJ_VERTS_3D", "]", "=", "obj_verts3d", "\n", "", "if", "TransQueries", ".", "OBJ_VERTS_3D", "in", "query", ":", "\n", "                ", "obj_verts3d", "=", "rot_mat", ".", "dot", "(", "obj_verts3d", ".", "transpose", "(", "1", ",", "0", ")", ")", ".", "transpose", "(", ")", "\n", "# ! CAUTION! may lead to unexpected bug", "\n", "# // if self.center_idx is not None:", "\n", "# //  obj_verts3d = obj_verts3d - center3d", "\n", "sample", "[", "TransQueries", ".", "OBJ_VERTS_3D", "]", "=", "obj_verts3d", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# ? ================ Get 3D obj corners", "\n", "", "", "if", "BaseQueries", ".", "OBJ_CORNERS_3D", "in", "query", "or", "TransQueries", ".", "OBJ_CORNERS_3D", "in", "query", ":", "\n", "            ", "obj_corners3d", "=", "self", ".", "get_obj_corners3d", "(", "idx", ")", "\n", "if", "flip", ":", "\n", "                ", "obj_corners3d", "=", "obj_corners3d", ".", "copy", "(", ")", "\n", "obj_corners3d", "[", ":", ",", "0", "]", "=", "-", "obj_corners3d", "[", ":", ",", "0", "]", "\n", "", "if", "BaseQueries", ".", "OBJ_CORNERS_3D", "in", "query", ":", "\n", "                ", "sample", "[", "BaseQueries", ".", "OBJ_CORNERS_3D", "]", "=", "obj_corners3d", "\n", "", "if", "TransQueries", ".", "OBJ_CORNERS_3D", "in", "query", ":", "\n", "                ", "obj_corners3d", "=", "rot_mat", ".", "dot", "(", "obj_corners3d", ".", "transpose", "(", "1", ",", "0", ")", ")", ".", "transpose", "(", ")", "\n", "# ! CAUTION! may lead to unexpected bug", "\n", "# // if self.center_idx is not None:", "\n", "# //    obj_corners3d = obj_corners3d - center3d", "\n", "sample", "[", "TransQueries", ".", "OBJ_CORNERS_3D", "]", "=", "obj_corners3d", "\n", "\n", "# ? ================ Get obj canonical verts", "\n", "", "", "if", "BaseQueries", ".", "OBJ_CAN_VERTS", "in", "query", ":", "\n", "            ", "obj_can_verts", ",", "obj_can_trans", ",", "obj_can_scale", "=", "self", ".", "get_obj_verts_can", "(", "idx", ")", "\n", "if", "flip", ":", "\n", "                ", "obj_can_verts", "=", "obj_can_verts", ".", "copy", "(", ")", "\n", "obj_can_verts", "[", ":", ",", "0", "]", "=", "-", "obj_can_verts", "[", ":", ",", "0", "]", "\n", "", "sample", "[", "BaseQueries", ".", "OBJ_CAN_VERTS", "]", "=", "obj_can_verts", "\n", "sample", "[", "BaseQueries", ".", "OBJ_CAN_SCALE", "]", "=", "obj_can_scale", "\n", "sample", "[", "BaseQueries", ".", "OBJ_CAN_TRANS", "]", "=", "obj_can_trans", "\n", "\n", "# ? ================ Get obj canonical corners", "\n", "", "if", "BaseQueries", ".", "OBJ_CAN_CORNERS", "in", "query", ":", "\n", "            ", "obj_can_corners", "=", "self", ".", "get_obj_corners_can", "(", "idx", ")", "\n", "if", "flip", ":", "\n", "                ", "obj_can_corners", "=", "obj_can_corners", ".", "copy", "(", ")", "\n", "obj_can_corners", "[", ":", ",", "0", "]", "=", "-", "obj_can_corners", "[", ":", ",", "0", "]", "\n", "", "sample", "[", "BaseQueries", ".", "OBJ_CAN_CORNERS", "]", "=", "obj_can_corners", "\n", "# ? <<<<<<<<<<<<<<<< END OF ALL 3D POINTS ANNOTATION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "#  Get hand & obj faces", "\n", "", "if", "BaseQueries", ".", "HAND_FACES", "in", "query", ":", "\n", "            ", "hand_faces", "=", "self", ".", "get_hand_faces", "(", "idx", ")", "\n", "sample", "[", "BaseQueries", ".", "HAND_FACES", "]", "=", "hand_faces", "\n", "", "if", "BaseQueries", ".", "OBJ_FACES", "in", "query", ":", "\n", "            ", "obj_faces", "=", "self", ".", "get_obj_faces", "(", "idx", ")", "\n", "sample", "[", "BaseQueries", ".", "OBJ_FACES", "]", "=", "obj_faces", "\n", "\n", "# Get rgb image", "\n", "", "if", "TransQueries", ".", "IMAGE", "in", "query", ":", "\n", "# ============== Data augmentation >>>>>>>>>>>>>>", "\n", "            ", "if", "self", ".", "data_split", "in", "[", "\"train\"", ",", "\"trainval\"", "]", ":", "\n", "                ", "blur_radius", "=", "Uniform", "(", "low", "=", "0", ",", "high", "=", "1", ")", ".", "sample", "(", ")", ".", "item", "(", ")", "*", "self", ".", "blur_radius", "\n", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "blur_radius", ")", ")", "\n", "bright", ",", "contrast", ",", "sat", ",", "hue", "=", "augutils", ".", "get_color_params", "(", "\n", "brightness", "=", "self", ".", "brightness", ",", "saturation", "=", "self", ".", "saturation", ",", "hue", "=", "self", ".", "hue", ",", "contrast", "=", "self", ".", "contrast", ",", "\n", ")", "\n", "img", "=", "augutils", ".", "apply_jitter", "(", "img", ",", "brightness", "=", "bright", ",", "saturation", "=", "sat", ",", "hue", "=", "hue", ",", "contrast", "=", "contrast", ")", "\n", "\n", "#  Transform and crop", "\n", "", "img", "=", "augutils", ".", "transform_img", "(", "img", ",", "affinetrans", ",", "self", ".", "inp_res", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "0", ",", "0", ",", "self", ".", "inp_res", "[", "0", "]", ",", "self", ".", "inp_res", "[", "1", "]", ")", ")", "\n", "\n", "#  Tensorize and normalize_img", "\n", "img", "=", "func", ".", "to_tensor", "(", "img", ")", ".", "float", "(", ")", "\n", "img", "=", "func", ".", "normalize", "(", "img", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "if", "TransQueries", ".", "IMAGE", "in", "query", ":", "\n", "                ", "sample", "[", "TransQueries", ".", "IMAGE", "]", "=", "img", "\n", "\n", "", "", "if", "BaseQueries", ".", "OBJ_TRANSF", "in", "query", ":", "\n", "            ", "sample", "[", "BaseQueries", ".", "OBJ_TRANSF", "]", "=", "self", ".", "get_obj_transf", "(", "idx", ")", "\n", "", "if", "TransQueries", ".", "OBJ_TRANSF", "in", "query", ":", "\n", "            ", "base_trasnf", "=", "self", ".", "get_obj_transf", "(", "idx", ")", "\n", "base_rot", "=", "base_trasnf", "[", ":", "3", ",", ":", "3", "]", "# (3, 3)", "\n", "base_tsl", "=", "base_trasnf", "[", ":", "3", ",", "3", ":", "]", "# (3, 1)", "\n", "trans_rot", "=", "rot_mat", "@", "base_rot", "# (3, 3)", "\n", "trans_tsl", "=", "rot_mat", ".", "dot", "(", "base_tsl", ")", "# (3, 1)", "\n", "trans_transf", "=", "np", ".", "concatenate", "(", "[", "trans_rot", ",", "trans_tsl", "]", ",", "axis", "=", "1", ")", "# (3, 4)", "\n", "trans_transf", "=", "np", ".", "concatenate", "(", "[", "trans_transf", ",", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ")", "[", "np", ".", "newaxis", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "sample", "[", "TransQueries", ".", "OBJ_TRANSF", "]", "=", "trans_transf", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "\n", "# for offline training only", "\n", "", "sample", "[", "BaseQueries", ".", "HAND_POSE_WRT_CAM", "]", "=", "self", ".", "get_hand_pose_wrt_cam", "(", "idx", ")", "\n", "\n", "# get sample identifier", "\n", "sample", "[", "MetaQueries", ".", "SAMPLE_IDENTIFIER", "]", "=", "self", ".", "get_sample_identifier", "(", "idx", ")", "\n", "\n", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.ho_collate": [[23, 25], ["hodata.hodata_collate"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.hodata_collate"], ["def", "ho_collate", "(", "batch", ")", ":", "\n", "    ", "return", "hodata_collate", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.hodata_collate": [[27, 74], ["torch.utils.data._utils.collate.default_collate", "hocontact.hodatasets.hoquery.match_collate_queries", "max", "pop_queries.append", "numpy.concatenate", "numpy.zeros", "int"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hoquery.match_collate_queries"], ["", "def", "hodata_collate", "(", "batch", ")", ":", "\n", "    ", "\"\"\"\n    Collate function, duplicating the items in extend_queries along the\n    first dimension so that they all have the same length.\n    Typically applies to faces and vertices, which have different sizes\n    depending on the object.\n    \"\"\"", "\n", "# *  NEW QUERY: CollateQueries.PADDING_MASK", "\n", "\n", "extend_queries", "=", "{", "\n", "TransQueries", ".", "OBJ_VERTS_3D", ",", "\n", "BaseQueries", ".", "OBJ_VERTS_3D", ",", "\n", "BaseQueries", ".", "OBJ_CAN_VERTS", ",", "\n", "BaseQueries", ".", "OBJ_VERTS_2D", ",", "\n", "BaseQueries", ".", "OBJ_VIS_2D", ",", "\n", "TransQueries", ".", "OBJ_VERTS_2D", ",", "\n", "BaseQueries", ".", "OBJ_FACES", ",", "\n", "}", "\n", "\n", "pop_queries", "=", "[", "]", "\n", "for", "poppable_query", "in", "extend_queries", ":", "\n", "        ", "if", "poppable_query", "in", "batch", "[", "0", "]", ":", "\n", "            ", "pop_queries", ".", "append", "(", "poppable_query", ")", "\n", "\n", "# Remove fields that don't have matching sizes", "\n", "", "", "for", "pop_query", "in", "pop_queries", ":", "\n", "        ", "padding_query_field", "=", "match_collate_queries", "(", "pop_query", ")", "\n", "max_size", "=", "max", "(", "[", "sample", "[", "pop_query", "]", ".", "shape", "[", "0", "]", "for", "sample", "in", "batch", "]", ")", "\n", "for", "sample", "in", "batch", ":", "\n", "            ", "pop_value", "=", "sample", "[", "pop_query", "]", "\n", "orig_len", "=", "pop_value", ".", "shape", "[", "0", "]", "\n", "# Repeat vertices so all have the same number", "\n", "pop_value", "=", "np", ".", "concatenate", "(", "[", "pop_value", "]", "*", "int", "(", "max_size", "/", "pop_value", ".", "shape", "[", "0", "]", "+", "1", ")", ")", "[", ":", "max_size", "]", "\n", "sample", "[", "pop_query", "]", "=", "pop_value", "\n", "if", "padding_query_field", "not", "in", "sample", ":", "\n", "# !===== this is only done for verts / faces >>>>>", "\n", "# generate a new field, contains padding mask", "\n", "# note that only the beginning pop_value.shape[0] points are in effect", "\n", "# so the mask will be a vector of length max_size, with origin_len ones in the beginning", "\n", "                ", "padding_mask", "=", "np", ".", "zeros", "(", "max_size", ",", "dtype", "=", "np", ".", "int", ")", "\n", "padding_mask", "[", ":", "orig_len", "]", "=", "1", "\n", "sample", "[", "padding_query_field", "]", "=", "padding_mask", "\n", "\n", "# store the mask filtering the points", "\n", "\n", "", "", "", "batch", "=", "default_collate", "(", "batch", ")", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.visualize.vis_hand_rot.create_hand_vertex_color": [[15, 46], ["manopth.anchorutils.anchor_load", "numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["def", "create_hand_vertex_color", "(", "hand_verts", ",", "anchor_path", ")", ":", "\n", "    ", "face_vert_idx", ",", "anchor_weight", ",", "merged_vertex_assignment", ",", "anchor_mapping", "=", "anchor_load", "(", "anchor_path", ")", "\n", "n_verts", "=", "hand_verts", ".", "shape", "[", "0", "]", "\n", "vertex_color", "=", "np", ".", "zeros", "(", "(", "n_verts", ",", "3", ")", ")", "\n", "contact_region", "=", "merged_vertex_assignment", "\n", "vertex_color", "[", "contact_region", "==", "0", "]", "=", "np", ".", "array", "(", "[", "207", ",", "56", ",", "112", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "1", "]", "=", "np", ".", "array", "(", "[", "226", ",", "53", ",", "74", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "2", "]", "=", "np", ".", "array", "(", "[", "231", ",", "91", ",", "84", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "3", "]", "=", "np", ".", "array", "(", "[", "236", ",", "132", ",", "87", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "4", "]", "=", "np", ".", "array", "(", "[", "236", ",", "105", ",", "95", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "5", "]", "=", "np", ".", "array", "(", "[", "202", ",", "67", ",", "99", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "6", "]", "=", "np", ".", "array", "(", "[", "240", ",", "162", ",", "62", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "7", "]", "=", "np", ".", "array", "(", "[", "244", ",", "192", ",", "99", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "8", "]", "=", "np", ".", "array", "(", "[", "239", ",", "179", ",", "145", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "9", "]", "=", "np", ".", "array", "(", "[", "224", ",", "231", ",", "243", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "10", "]", "=", "np", ".", "array", "(", "[", "175", ",", "186", ",", "242", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "11", "]", "=", "np", ".", "array", "(", "[", "195", ",", "212", ",", "240", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "12", "]", "=", "np", ".", "array", "(", "[", "50", ",", "115", ",", "173", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "13", "]", "=", "np", ".", "array", "(", "[", "82", ",", "148", ",", "200", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "14", "]", "=", "np", ".", "array", "(", "[", "124", ",", "191", ",", "239", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "15", "]", "=", "np", ".", "array", "(", "[", "144", ",", "78", ",", "150", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "16", "]", "=", "np", ".", "array", "(", "[", "40", ",", "76", ",", "121", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "17", "]", "=", "np", ".", "array", "(", "[", "255", ",", "232", ",", "246", "]", ")", "/", "255.0", "\n", "\n", "return", "vertex_color", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.visualize.vis_hand_rot.caculate_align_mat": [[48, 67], ["numpy.array", "numpy.array", "numpy.matmul", "numpy.array", "numpy.linalg.norm", "numpy.dot", "numpy.eye", "numpy.dot", "numpy.eye", "numpy.eye", "numpy.matmul", "numpy.dot"], "function", ["None"], ["", "def", "caculate_align_mat", "(", "vec", ")", ":", "\n", "    ", "vec", "=", "vec", "/", "np", ".", "linalg", ".", "norm", "(", "vec", ")", "\n", "z_unit_Arr", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "\n", "z_mat", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "-", "z_unit_Arr", "[", "2", "]", ",", "z_unit_Arr", "[", "1", "]", "]", ",", "[", "z_unit_Arr", "[", "2", "]", ",", "0", ",", "-", "z_unit_Arr", "[", "0", "]", "]", ",", "[", "-", "z_unit_Arr", "[", "1", "]", ",", "z_unit_Arr", "[", "0", "]", ",", "0", "]", ",", "]", "\n", ")", "\n", "\n", "z_c_vec", "=", "np", ".", "matmul", "(", "z_mat", ",", "vec", ")", "\n", "z_c_vec_mat", "=", "np", ".", "array", "(", "[", "[", "0", ",", "-", "z_c_vec", "[", "2", "]", ",", "z_c_vec", "[", "1", "]", "]", ",", "[", "z_c_vec", "[", "2", "]", ",", "0", ",", "-", "z_c_vec", "[", "0", "]", "]", ",", "[", "-", "z_c_vec", "[", "1", "]", ",", "z_c_vec", "[", "0", "]", ",", "0", "]", ",", "]", ")", "\n", "\n", "if", "np", ".", "dot", "(", "z_unit_Arr", ",", "vec", ")", "==", "-", "1", ":", "\n", "        ", "qTrans_Mat", "=", "-", "np", ".", "eye", "(", "3", ",", "3", ")", "\n", "", "elif", "np", ".", "dot", "(", "z_unit_Arr", ",", "vec", ")", "==", "1", ":", "\n", "        ", "qTrans_Mat", "=", "np", ".", "eye", "(", "3", ",", "3", ")", "\n", "", "else", ":", "\n", "        ", "qTrans_Mat", "=", "np", ".", "eye", "(", "3", ",", "3", ")", "+", "z_c_vec_mat", "+", "np", ".", "matmul", "(", "z_c_vec_mat", ",", "z_c_vec_mat", ")", "/", "(", "1", "+", "np", ".", "dot", "(", "z_unit_Arr", ",", "vec", ")", ")", "\n", "\n", "", "return", "qTrans_Mat", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.visualize.vis_hand_rot.draw_axis": [[69, 87], ["numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "trimesh.creation.cylinder", "pyrender.Mesh.from_trimesh", "trimesh.creation.cone", "pyrender.Mesh.from_trimesh", "scene.add", "scene.add", "numpy.zeros", "numpy.ones", "vis_hand_rot.caculate_align_mat", "numpy.zeros", "numpy.array", "trimesh.transformations.translation_matrix"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.caculate_align_mat"], ["", "def", "draw_axis", "(", "axis", ",", "transf", ",", "scene", ",", "color", ")", ":", "\n", "    ", "end_points", "=", "np", ".", "concatenate", "(", "[", "axis", "[", "np", ".", "newaxis", "]", "*", "20.0", ",", "np", ".", "zeros", "(", "(", "1", ",", "3", ")", ")", "]", ",", "axis", "=", "0", ")", "\n", "end_points", "=", "np", ".", "concatenate", "(", "[", "end_points", ",", "np", ".", "ones", "(", "(", "2", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", "\n", "end_points", "=", "(", "transf", "@", "end_points", ".", "T", ")", ".", "T", "[", ":", ",", ":", "3", "]", "\n", "\n", "rot_matrix", "=", "np", ".", "concatenate", "(", "[", "caculate_align_mat", "(", "axis", ")", ",", "np", ".", "zeros", "(", "(", "3", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", "\n", "rot_matrix", "=", "np", ".", "concatenate", "(", "[", "rot_matrix", ",", "np", ".", "array", "(", "[", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "cylinder", "=", "trimesh", ".", "creation", ".", "cylinder", "(", "radius", "=", "0.9", ",", "segment", "=", "end_points", ")", "\n", "cylinder", ".", "visual", ".", "vertex_colors", "=", "color", "\n", "cylinder", "=", "pyrender", ".", "Mesh", ".", "from_trimesh", "(", "cylinder", ",", "smooth", "=", "False", ")", "\n", "cone", "=", "trimesh", ".", "creation", ".", "cone", "(", "\n", "radius", "=", "1.8", ",", "height", "=", "2.5", ",", "transform", "=", "trimesh", ".", "transformations", ".", "translation_matrix", "(", "end_points", "[", "0", "]", ")", "@", "rot_matrix", "\n", ")", "\n", "cone", ".", "visual", ".", "vertex_colors", "=", "color", "\n", "cone", "=", "pyrender", ".", "Mesh", ".", "from_trimesh", "(", "cone", ",", "smooth", "=", "False", ")", "\n", "scene", ".", "add", "(", "cylinder", ")", "\n", "scene", ".", "add", "(", "cone", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.visualize.vis_hand_rot.main": [[89, 205], ["manopth.manolayer.ManoLayer", "manopth.axislayer.AxisLayer", "numpy.array().astype", "manopth.anchorutils.anchor_load_driver", "torch.zeros", "manopth.manolayer.ManoLayer.", "manopth.axislayer.AxisLayer.", "torch.ones", "b_axis.squeeze().numpy", "u_axis.squeeze().numpy", "l_axis.squeeze().numpy", "manopth.demo.display_hand", "numpy.array", "pyrender.Scene", "pyrender.PerspectiveCamera", "pyrender.Node", "pyrender.Scene.add_node", "numpy.array", "pyrender.Scene.set_pose", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "range", "trimesh.Trimesh", "pyrender.Mesh.from_trimesh", "pyrender.Scene.add", "range", "range", "pyrender.Viewer", "b_axis.squeeze", "u_axis.squeeze", "l_axis.squeeze", "manopth.manolayer.ManoLayer.", "numpy.array", "numpy.array", "trimesh.Trimesh", "pyrender.Mesh.from_trimesh", "pyrender.Scene.add", "trimesh.creation.uv_sphere", "numpy.tile", "pyrender.Mesh.from_trimesh", "pyrender.Scene.add", "vis_hand_rot.draw_axis", "vis_hand_rot.draw_axis", "vis_hand_rot.draw_axis", "open3d.geometry.TriangleMesh", "numpy.array", "open3d.utility.Vector3iVector", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "o3d.geometry.TriangleMesh.compute_vertex_normals", "open3d.visualization.Visualizer", "o3d.visualization.Visualizer.create_window", "o3d.visualization.Visualizer.add_geometry", "manopth.anchorutils.recover_anchor", "print", "ValueError", "numpy.eye", "numpy.eye", "vis_hand_rot.create_hand_vertex_color", "open3d.geometry.TriangleMesh.create_box", "o3d.geometry.TriangleMesh.create_box.translate", "o3d.geometry.TriangleMesh.create_box.translate", "o3d.geometry.TriangleMesh.create_box.paint_uniform_color", "o3d.geometry.TriangleMesh.create_box.compute_vertex_normals", "o3d.visualization.Visualizer.add_geometry", "o3d.visualization.Visualizer.update_geometry", "o3d.visualization.Visualizer.update_renderer", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "o3d.visualization.Visualizer.poll_events"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.visualize.vis_hand_rot.draw_axis", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.vis_hand_rot.draw_axis", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.vis_hand_rot.draw_axis", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.vis_hand_rot.create_hand_vertex_color"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "mano_layer", "=", "ManoLayer", "(", "\n", "mano_root", "=", "\"assets/mano\"", ",", "use_pca", "=", "False", ",", "flat_hand_mean", "=", "True", ",", "center_idx", "=", "9", ",", "return_transf", "=", "True", ",", "\n", ")", "\n", "axis_layer", "=", "AxisLayer", "(", ")", "\n", "faces", "=", "np", ".", "array", "(", "mano_layer", ".", "th_faces", ")", ".", "astype", "(", "np", ".", "long", ")", "\n", "face_vertex_index", ",", "anchor_weight", ",", "merged_vertex_assignment", ",", "anchor_mapping", "=", "anchor_load_driver", "(", "\"assets\"", ")", "\n", "\n", "random_shape", "=", "torch", ".", "ones", "(", "batch_size", ",", "10", ")", "*", "0.1", "\n", "\n", "random_pose", "=", "torch", ".", "zeros", "(", "batch_size", ",", "48", ")", "\n", "\n", "# Forward pass through MANO layer", "\n", "vertices", ",", "joints", ",", "transf", "=", "mano_layer", "(", "random_pose", ",", "random_shape", ")", "\n", "b_axis", ",", "u_axis", ",", "l_axis", "=", "axis_layer", "(", "joints", ",", "transf", ")", "\n", "b_axis", ",", "u_axis", ",", "l_axis", "=", "b_axis", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", ",", "u_axis", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", ",", "l_axis", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "args", ".", "render", "==", "\"plt\"", ":", "\n", "        ", "demo", ".", "display_hand", "(", "\n", "{", "\"verts\"", ":", "vertices", ",", "\"joints\"", ":", "joints", "}", ",", "mano_faces", "=", "mano_layer", ".", "th_faces", ",", "\n", ")", "\n", "", "elif", "args", ".", "render", "==", "\"pyrender\"", ":", "\n", "# =========================== Viewer Options >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "        ", "scene", "=", "pyrender", ".", "Scene", "(", ")", "\n", "cam", "=", "pyrender", ".", "PerspectiveCamera", "(", "yfov", "=", "np", ".", "pi", "/", "3.0", ",", "aspectRatio", "=", "1.414", ")", "\n", "node_cam", "=", "pyrender", ".", "Node", "(", "camera", "=", "cam", ",", "matrix", "=", "np", ".", "eye", "(", "4", ")", ")", "\n", "scene", ".", "add_node", "(", "node_cam", ")", "\n", "# same pose in our paper", "\n", "pose", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "3.58605842e-01", ",", "-", "9.28514808e-01", ",", "9.62398091e-02", ",", "2.31115278e01", "]", ",", "\n", "[", "4.39218554e-01", ",", "2.58801518e-01", ",", "8.60295784e-01", ",", "1.53212718e02", "]", ",", "\n", "[", "-", "8.23704383e-01", ",", "-", "2.66236785e-01", ",", "5.00628668e-01", ",", "-", "7.77342471e01", "]", ",", "\n", "[", "0.00000000e00", ",", "0.00000000e00", ",", "0.00000000e00", ",", "1.00000000e00", "]", ",", "\n", "]", "\n", ")", "\n", "\n", "scene", ".", "set_pose", "(", "node_cam", ",", "pose", "=", "pose", ")", "\n", "vertex_colors", "=", "np", ".", "array", "(", "[", "150", ",", "150", ",", "150", ",", "200", "]", ")", "\n", "joint_colors", "=", "np", ".", "array", "(", "[", "164", ",", "0", ",", "102", ",", "255", "]", ")", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "transl", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "200.0", "]", ")", "\n", "transl", "=", "transl", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "joints", "=", "np", ".", "array", "(", "joints", "[", "0", "]", ")", "\n", "vertices", "=", "np", ".", "array", "(", "vertices", "[", "0", "]", ")", "\n", "transf", "=", "np", ".", "array", "(", "transf", "[", "0", "]", ")", "\n", "\n", "joints", "=", "joints", "*", "1000.0", "+", "transl", "\n", "vertices", "=", "vertices", "*", "1000.0", "+", "transl", "\n", "transf", "[", ":", ",", ":", "3", ",", "3", "]", "=", "transf", "[", ":", ",", ":", "3", ",", "3", "]", "*", "1000.0", "+", "transl", "\n", "\n", "# Add other", "\n", "for", "k", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "            ", "hand_pose", "=", "random_pose", "*", "(", "0.618", "**", "k", ")", "\n", "v", ",", "_", ",", "_", "=", "mano_layer", "(", "hand_pose", ",", "random_shape", ")", "\n", "v", "=", "np", ".", "array", "(", "v", "[", "0", "]", ")", "\n", "v", "=", "v", "*", "1000.0", "+", "transl", "\n", "other_colors", "=", "np", ".", "array", "(", "[", "150", ",", "150", ",", "150", ",", "210", "*", "(", "0.618", "**", "k", ")", "]", ")", "\n", "tri_mesh", "=", "trimesh", ".", "Trimesh", "(", "v", ",", "faces", ",", "vertex_colors", "=", "other_colors", ")", "\n", "mesh", "=", "pyrender", ".", "Mesh", ".", "from_trimesh", "(", "tri_mesh", ")", "\n", "scene", ".", "add", "(", "mesh", ")", "\n", "\n", "", "tri_mesh", "=", "trimesh", ".", "Trimesh", "(", "vertices", ",", "faces", ",", "vertex_colors", "=", "vertex_colors", ")", "\n", "mesh", "=", "pyrender", ".", "Mesh", ".", "from_trimesh", "(", "tri_mesh", ")", "\n", "scene", ".", "add", "(", "mesh", ")", "\n", "\n", "# Add Joints", "\n", "for", "j", "in", "range", "(", "21", ")", ":", "\n", "            ", "sm", "=", "trimesh", ".", "creation", ".", "uv_sphere", "(", "radius", "=", "2.8", ")", "\n", "sm", ".", "visual", ".", "vertex_colors", "=", "joint_colors", "\n", "tfs", "=", "np", ".", "tile", "(", "np", ".", "eye", "(", "4", ")", ",", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "tfs", "[", "0", ",", ":", "3", ",", "3", "]", "=", "joints", "[", "j", "]", "\n", "joints_pcl", "=", "pyrender", ".", "Mesh", ".", "from_trimesh", "(", "sm", ",", "poses", "=", "tfs", ")", "\n", "scene", ".", "add", "(", "joints_pcl", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "15", ")", ":", "\n", "            ", "draw_axis", "(", "b_axis", "[", "i", "]", ",", "transf", "[", "i", "+", "1", "]", ",", "scene", ",", "color", "=", "np", ".", "array", "(", "[", "255", ",", "42", ",", "34", ",", "255", "]", ")", ")", "\n", "draw_axis", "(", "u_axis", "[", "i", "]", ",", "transf", "[", "i", "+", "1", "]", ",", "scene", ",", "color", "=", "np", ".", "array", "(", "[", "190", ",", "255", ",", "0", ",", "255", "]", ")", ")", "\n", "draw_axis", "(", "l_axis", "[", "i", "]", ",", "transf", "[", "i", "+", "1", "]", ",", "scene", ",", "color", "=", "np", ".", "array", "(", "[", "23", ",", "217", ",", "255", ",", "255", "]", ")", ")", "\n", "\n", "", "pyrender", ".", "Viewer", "(", "scene", ",", "use_raymond_lighting", "=", "True", ",", "viewport_size", "=", "(", "1280", ",", "960", ")", ")", "\n", "", "elif", "args", ".", "render", "==", "\"open3d\"", ":", "\n", "        ", "hand_mesh", "=", "o3d", ".", "geometry", ".", "TriangleMesh", "(", ")", "\n", "vertices", "=", "np", ".", "array", "(", "vertices", "[", "0", "]", ")", "\n", "hand_mesh", ".", "triangles", "=", "o3d", ".", "utility", ".", "Vector3iVector", "(", "faces", ")", "\n", "hand_mesh", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "vertices", ")", "\n", "hand_mesh", ".", "vertex_colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "create_hand_vertex_color", "(", "vertices", ",", "\"assets/anchor\"", ")", ")", "\n", "\n", "hand_mesh", ".", "compute_vertex_normals", "(", ")", "\n", "vis_gt", "=", "o3d", ".", "visualization", ".", "Visualizer", "(", ")", "\n", "vis_gt", ".", "create_window", "(", "window_name", "=", "\"Ground-Truth Hand\"", ",", "width", "=", "2080", ",", "height", "=", "2080", ")", "\n", "vis_gt", ".", "add_geometry", "(", "hand_mesh", ")", "\n", "\n", "anchor_pos", "=", "recover_anchor", "(", "vertices", ",", "face_vertex_index", ",", "anchor_weight", ")", "\n", "print", "(", "anchor_pos", ".", "shape", ")", "\n", "\n", "for", "anchors", "in", "anchor_pos", ":", "\n", "            ", "b", "=", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_box", "(", "width", "=", "0.003", ",", "height", "=", "0.003", ",", "depth", "=", "0.003", ")", "\n", "b", ".", "translate", "(", "anchors", ")", "\n", "b", ".", "translate", "(", "np", ".", "array", "(", "[", "-", "0.0015", ",", "-", "0.0015", ",", "-", "0.0015", "]", ")", ")", "\n", "b", ".", "paint_uniform_color", "(", "[", "221", "/", "255", ",", "175", "/", "255", ",", "39", "/", "255", "]", ")", "\n", "b", ".", "compute_vertex_normals", "(", ")", "\n", "vis_gt", ".", "add_geometry", "(", "b", ")", "\n", "\n", "", "while", "True", ":", "\n", "            ", "vis_gt", ".", "update_geometry", "(", "hand_mesh", ")", "\n", "vis_gt", ".", "update_renderer", "(", ")", "\n", "\n", "if", "not", "vis_gt", ".", "poll_events", "(", ")", ":", "\n", "                ", "break", "\n", "", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unknown renderer: {args.render}\"", ")", "\n", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.visualize.vis_contact_info.create_vertex_color": [[7, 46], ["numpy.zeros", "numpy.array", "numpy.array", "numpy.zeros", "ValueError", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["def", "create_vertex_color", "(", "contact_info", ",", "mode", "=", "\"vertex_contact\"", ")", ":", "\n", "    ", "if", "mode", "==", "\"vertex_contact\"", ":", "\n", "        ", "vertex_contact", "=", "contact_info", "[", "\"vertex_contact\"", "]", "\n", "n_verts", "=", "vertex_contact", ".", "shape", "[", "0", "]", "\n", "vertex_color", "=", "np", ".", "zeros", "(", "(", "n_verts", ",", "3", ")", ")", "\n", "vertex_color", "[", "vertex_contact", "==", "0", "]", "=", "np", ".", "array", "(", "[", "57", ",", "57", ",", "57", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "vertex_contact", "==", "1", "]", "=", "np", ".", "array", "(", "[", "198", ",", "198", ",", "198", "]", ")", "/", "255.0", "\n", "return", "vertex_color", "\n", "", "elif", "mode", "==", "\"contact_region\"", ":", "\n", "        ", "contact_region", "=", "contact_info", "[", "\"hand_region\"", "]", "\n", "n_verts", "=", "contact_region", ".", "shape", "[", "0", "]", "\n", "vertex_color", "=", "np", ".", "zeros", "(", "(", "n_verts", ",", "3", ")", ")", "\n", "vertex_color", "[", "contact_region", "==", "0", "]", "=", "np", ".", "array", "(", "[", "207", ",", "56", ",", "112", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "1", "]", "=", "np", ".", "array", "(", "[", "226", ",", "53", ",", "74", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "2", "]", "=", "np", ".", "array", "(", "[", "231", ",", "91", ",", "84", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "3", "]", "=", "np", ".", "array", "(", "[", "235", ",", "105", ",", "79", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "4", "]", "=", "np", ".", "array", "(", "[", "230", ",", "109", ",", "91", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "5", "]", "=", "np", ".", "array", "(", "[", "202", ",", "67", ",", "99", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "6", "]", "=", "np", ".", "array", "(", "[", "240", ",", "162", ",", "62", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "7", "]", "=", "np", ".", "array", "(", "[", "244", ",", "192", ",", "99", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "8", "]", "=", "np", ".", "array", "(", "[", "239", ",", "179", ",", "145", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "9", "]", "=", "np", ".", "array", "(", "[", "224", ",", "231", ",", "243", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "10", "]", "=", "np", ".", "array", "(", "[", "175", ",", "186", ",", "242", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "11", "]", "=", "np", ".", "array", "(", "[", "195", ",", "212", ",", "240", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "12", "]", "=", "np", ".", "array", "(", "[", "50", ",", "115", ",", "173", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "13", "]", "=", "np", ".", "array", "(", "[", "82", ",", "148", ",", "200", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "14", "]", "=", "np", ".", "array", "(", "[", "124", ",", "191", ",", "239", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "15", "]", "=", "np", ".", "array", "(", "[", "144", ",", "78", ",", "150", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "16", "]", "=", "np", ".", "array", "(", "[", "40", ",", "76", ",", "121", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "17", "]", "=", "np", ".", "array", "(", "[", "255", ",", "255", ",", "0", "]", ")", "/", "255.0", "\n", "return", "vertex_color", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unknown color mode: {mode}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.visualize.vis_contact_info.paper_vertex_color": [[48, 88], ["numpy.zeros", "numpy.array", "numpy.array", "numpy.zeros", "ValueError", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "paper_vertex_color", "(", "contact_info", ",", "mode", "=", "\"vertex_contact\"", ")", ":", "\n", "    ", "if", "mode", "==", "\"vertex_contact\"", ":", "\n", "        ", "vertex_contact", "=", "contact_info", "[", "\"vertex_contact\"", "]", "\n", "n_verts", "=", "vertex_contact", ".", "shape", "[", "0", "]", "\n", "vertex_color", "=", "np", ".", "zeros", "(", "(", "n_verts", ",", "3", ")", ")", "\n", "vertex_color", "[", "vertex_contact", "==", "0", "]", "=", "np", ".", "array", "(", "[", "57", ",", "57", ",", "57", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "vertex_contact", "==", "1", "]", "=", "np", ".", "array", "(", "[", "198", ",", "198", ",", "198", "]", ")", "/", "255.0", "\n", "return", "vertex_color", "\n", "", "elif", "mode", "==", "\"contact_region\"", ":", "\n", "        ", "contact_region", "=", "contact_info", "[", "\"hand_region\"", "]", "\n", "n_verts", "=", "contact_region", ".", "shape", "[", "0", "]", "\n", "vertex_color", "=", "np", ".", "zeros", "(", "(", "n_verts", ",", "3", ")", ")", "\n", "vertex_color", "[", "contact_region", "==", "0", "]", "=", "np", ".", "array", "(", "[", "207", ",", "56", ",", "112", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "1", "]", "=", "np", ".", "array", "(", "[", "226", ",", "53", ",", "74", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "2", "]", "=", "np", ".", "array", "(", "[", "231", ",", "91", ",", "84", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "3", "]", "=", "np", ".", "array", "(", "[", "235", ",", "105", ",", "79", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "4", "]", "=", "np", ".", "array", "(", "[", "230", ",", "109", ",", "91", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "5", "]", "=", "np", ".", "array", "(", "[", "202", ",", "67", ",", "99", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "6", "]", "=", "np", ".", "array", "(", "[", "240", ",", "162", ",", "62", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "7", "]", "=", "np", ".", "array", "(", "[", "244", ",", "192", ",", "99", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "8", "]", "=", "np", ".", "array", "(", "[", "239", ",", "179", ",", "145", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "9", "]", "=", "np", ".", "array", "(", "[", "224", ",", "231", ",", "243", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "10", "]", "=", "np", ".", "array", "(", "[", "175", ",", "186", ",", "242", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "11", "]", "=", "np", ".", "array", "(", "[", "195", ",", "212", ",", "240", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "12", "]", "=", "np", ".", "array", "(", "[", "50", ",", "115", ",", "173", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "13", "]", "=", "np", ".", "array", "(", "[", "82", ",", "148", ",", "200", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "14", "]", "=", "np", ".", "array", "(", "[", "124", ",", "191", ",", "239", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "15", "]", "=", "np", ".", "array", "(", "[", "144", ",", "78", ",", "150", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "16", "]", "=", "np", ".", "array", "(", "[", "40", ",", "76", ",", "121", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "17", "]", "=", "np", ".", "array", "(", "[", "255", ",", "232", ",", "246", "]", ")", "/", "255.0", "\n", "\n", "return", "vertex_color", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unknown color mode: {mode}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.visualize.vis_contact_info.debug_vertex_color": [[90, 129], ["numpy.zeros", "numpy.array", "numpy.array", "numpy.zeros", "ValueError", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "debug_vertex_color", "(", "contact_info", ",", "mode", "=", "\"vertex_contact\"", ")", ":", "\n", "    ", "if", "mode", "==", "\"vertex_contact\"", ":", "\n", "        ", "vertex_contact", "=", "contact_info", "[", "\"vertex_contact\"", "]", "\n", "n_verts", "=", "vertex_contact", ".", "shape", "[", "0", "]", "\n", "vertex_color", "=", "np", ".", "zeros", "(", "(", "n_verts", ",", "3", ")", ")", "\n", "vertex_color", "[", "vertex_contact", "==", "0", "]", "=", "np", ".", "array", "(", "[", "57", ",", "57", ",", "57", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "vertex_contact", "==", "1", "]", "=", "np", ".", "array", "(", "[", "198", ",", "198", ",", "198", "]", ")", "/", "255.0", "\n", "return", "vertex_color", "\n", "", "elif", "mode", "==", "\"contact_region\"", ":", "\n", "        ", "contact_region", "=", "contact_info", "[", "\"hand_region\"", "]", "\n", "n_verts", "=", "contact_region", ".", "shape", "[", "0", "]", "\n", "vertex_color", "=", "np", ".", "zeros", "(", "(", "n_verts", ",", "3", ")", ")", "\n", "vertex_color", "[", "contact_region", "==", "0", "]", "=", "np", ".", "array", "(", "[", "117", ",", "0", ",", "0", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "1", "]", "=", "np", ".", "array", "(", "[", "255", ",", "0", ",", "0", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "2", "]", "=", "np", ".", "array", "(", "[", "255", ",", "138", ",", "137", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "3", "]", "=", "np", ".", "array", "(", "[", "117", ",", "65", ",", "0", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "4", "]", "=", "np", ".", "array", "(", "[", "255", ",", "144", ",", "0", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "5", "]", "=", "np", ".", "array", "(", "[", "255", ",", "206", ",", "134", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "6", "]", "=", "np", ".", "array", "(", "[", "116", ",", "117", ",", "0", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "7", "]", "=", "np", ".", "array", "(", "[", "255", ",", "255", ",", "0", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "8", "]", "=", "np", ".", "array", "(", "[", "255", ",", "255", ",", "131", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "9", "]", "=", "np", ".", "array", "(", "[", "0", ",", "117", ",", "0", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "10", "]", "=", "np", ".", "array", "(", "[", "0", ",", "255", ",", "0", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "11", "]", "=", "np", ".", "array", "(", "[", "145", ",", "255", ",", "133", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "12", "]", "=", "np", ".", "array", "(", "[", "0", ",", "60", ",", "118", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "13", "]", "=", "np", ".", "array", "(", "[", "0", ",", "133", ",", "255", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "14", "]", "=", "np", ".", "array", "(", "[", "136", ",", "200", ",", "255", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "15", "]", "=", "np", ".", "array", "(", "[", "70", ",", "0", ",", "118", "]", ")", "/", "255.0", "\n", "vertex_color", "[", "contact_region", "==", "16", "]", "=", "np", ".", "array", "(", "[", "210", ",", "135", ",", "255", "]", ")", "/", "255.0", "\n", "\n", "vertex_color", "[", "contact_region", "==", "17", "]", "=", "np", ".", "array", "(", "[", "255", ",", "232", ",", "246", "]", ")", "/", "255.0", "\n", "return", "vertex_color", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unknown color mode: {mode}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.visualize.vis_contact_info.view_vertex_contact": [[131, 196], ["pygame.time.Clock", "hocontact.get_image_path", "hocontact.get_hand_verts3d", "hocontact.get_processed_contact_info", "o3d.geometry.TriangleMesh", "o3d.utility.Vector3dVector", "o3d.utility.Vector3iVector", "o3d.geometry.TriangleMesh.compute_vertex_normals", "o3d.geometry.TriangleMesh", "o3d.utility.Vector3iVector", "o3d.utility.Vector3dVector", "vis_contact_info.create_vertex_color", "o3d.geometry.TriangleMesh.compute_vertex_normals", "o3d.utility.Vector3dVector", "o3d.visualization.Visualizer", "o3d.visualization.Visualizer.create_window", "o3d.visualization.Visualizer.add_geometry", "o3d.visualization.Visualizer.add_geometry", "range", "hocontact.get_hand_faces", "hocontact.get_obj_verts_transf", "hocontact.get_obj_faces", "len", "hocontact.get_image_path", "hocontact.get_hand_verts3d", "hocontact.get_processed_contact_info", "o3d.utility.Vector3dVector", "o3d.utility.Vector3iVector", "o3d.geometry.TriangleMesh.compute_vertex_normals", "o3d.utility.Vector3iVector", "o3d.utility.Vector3dVector", "vis_contact_info.create_vertex_color", "o3d.geometry.TriangleMesh.compute_vertex_normals", "o3d.utility.Vector3dVector", "o3d.visualization.Visualizer.update_geometry", "o3d.visualization.Visualizer.update_geometry", "o3d.visualization.Visualizer.update_renderer", "o3d.visualization.Visualizer.poll_events", "hocontact.get_image", "numpy.array", "cv2.cvtColor", "cv2.imshow", "cv2.waitKey", "pygame.time.Clock.tick", "hocontact.get_hand_faces", "hocontact.get_obj_verts_transf", "hocontact.get_obj_faces"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_image_path", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_verts3d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.vis_contact_info.create_vertex_color", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_faces", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_transf", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_faces", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_image_path", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_verts3d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.vis_contact_info.create_vertex_color", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_image", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_hand_faces", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_verts_transf", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hodata.HOdata.get_obj_faces"], ["", "", "def", "view_vertex_contact", "(", "hodata", ")", ":", "\n", "    ", "import", "cv2", "\n", "import", "pygame", "\n", "import", "open3d", "as", "o3d", "\n", "\n", "clock", "=", "pygame", ".", "time", ".", "Clock", "(", ")", "\n", "idx", "=", "0", "\n", "img_path", "=", "hodata", ".", "get_image_path", "(", "idx", ")", "\n", "hand_gt", "=", "hodata", ".", "get_hand_verts3d", "(", "idx", ")", "\n", "contact_info", "=", "hodata", ".", "get_processed_contact_info", "(", "idx", ")", "\n", "hand_mesh_cur", "=", "o3d", ".", "geometry", ".", "TriangleMesh", "(", ")", "\n", "hand_mesh_cur", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "hand_gt", ")", "\n", "hand_mesh_cur", ".", "triangles", "=", "o3d", ".", "utility", ".", "Vector3iVector", "(", "hodata", ".", "get_hand_faces", "(", "idx", ")", ")", "\n", "hand_mesh_cur", ".", "compute_vertex_normals", "(", ")", "\n", "obj_mesh", "=", "o3d", ".", "geometry", ".", "TriangleMesh", "(", ")", "\n", "obj_verts_cur", ",", "obj_faces_cur", "=", "(", "\n", "hodata", ".", "get_obj_verts_transf", "(", "idx", ")", ",", "\n", "hodata", ".", "get_obj_faces", "(", "idx", ")", ",", "\n", ")", "\n", "obj_mesh", ".", "triangles", "=", "o3d", ".", "utility", ".", "Vector3iVector", "(", "obj_faces_cur", ")", "\n", "obj_mesh", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "obj_verts_cur", ")", "\n", "obj_colors", "=", "create_vertex_color", "(", "contact_info", ",", "\"contact_region\"", ")", "\n", "obj_mesh", ".", "compute_vertex_normals", "(", ")", "\n", "# obj_mesh.paint_uniform_color([254 / 255.0, 77 / 255.0, 77 / 255.0])", "\n", "obj_mesh", ".", "vertex_colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "obj_colors", ")", "\n", "# vis_cur.add_geometry(obj_mesh)", "\n", "\n", "vis_cur", "=", "o3d", ".", "visualization", ".", "Visualizer", "(", ")", "\n", "vis_cur", ".", "create_window", "(", "window_name", "=", "\"Runtime Hand\"", ",", "width", "=", "1280", ",", "height", "=", "720", ")", "\n", "\n", "vis_cur", ".", "add_geometry", "(", "obj_mesh", ")", "\n", "vis_cur", ".", "add_geometry", "(", "hand_mesh_cur", ")", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "hodata", ")", ")", ":", "\n", "        ", "img_path", "=", "hodata", ".", "get_image_path", "(", "idx", ")", "\n", "\n", "hand_gt", "=", "hodata", ".", "get_hand_verts3d", "(", "idx", ")", "\n", "contact_info", "=", "hodata", ".", "get_processed_contact_info", "(", "idx", ")", "\n", "\n", "hand_mesh_cur", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "hand_gt", ")", "\n", "hand_mesh_cur", ".", "triangles", "=", "o3d", ".", "utility", ".", "Vector3iVector", "(", "hodata", ".", "get_hand_faces", "(", "idx", ")", ")", "\n", "hand_mesh_cur", ".", "compute_vertex_normals", "(", ")", "\n", "\n", "obj_verts_cur", ",", "obj_faces_cur", "=", "(", "\n", "hodata", ".", "get_obj_verts_transf", "(", "idx", ")", ",", "\n", "hodata", ".", "get_obj_faces", "(", "idx", ")", ",", "\n", ")", "\n", "obj_mesh", ".", "triangles", "=", "o3d", ".", "utility", ".", "Vector3iVector", "(", "obj_faces_cur", ")", "\n", "obj_mesh", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "obj_verts_cur", ")", "\n", "obj_colors", "=", "create_vertex_color", "(", "contact_info", ",", "\"contact_region\"", ")", "\n", "obj_mesh", ".", "compute_vertex_normals", "(", ")", "\n", "obj_mesh", ".", "vertex_colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "obj_colors", ")", "\n", "vis_cur", ".", "update_geometry", "(", "obj_mesh", ")", "\n", "vis_cur", ".", "update_geometry", "(", "hand_mesh_cur", ")", "\n", "vis_cur", ".", "update_renderer", "(", ")", "\n", "\n", "vis_cur", ".", "poll_events", "(", ")", "\n", "\n", "img", "=", "hodata", ".", "get_image", "(", "idx", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "cv2", ".", "imshow", "(", "\"dataset\"", ",", "img", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "\n", "clock", ".", "tick", "(", "30", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d": [[8, 32], ["enumerate", "samplevis._draw2djoints", "ax.scatter", "ax.axis", "matplotlib.pyplot.annotate", "str"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis._draw2djoints"], ["def", "visualize_joints_2d", "(", "\n", "ax", ",", "joints", ",", "joint_idxs", "=", "True", ",", "links", "=", "None", ",", "alpha", "=", "1", ",", "scatter", "=", "True", ",", "linewidth", "=", "2", ",", "color", "=", "None", ",", "axis_equal", "=", "True", ",", "\n", ")", ":", "\n", "    ", "if", "links", "is", "None", ":", "\n", "        ", "links", "=", "[", "\n", "(", "0", ",", "1", ",", "2", ",", "3", ",", "4", ")", ",", "\n", "(", "0", ",", "5", ",", "6", ",", "7", ",", "8", ")", ",", "\n", "(", "0", ",", "9", ",", "10", ",", "11", ",", "12", ")", ",", "\n", "(", "0", ",", "13", ",", "14", ",", "15", ",", "16", ")", ",", "\n", "(", "0", ",", "17", ",", "18", ",", "19", ",", "20", ")", ",", "\n", "]", "\n", "# Scatter hand joints on image", "\n", "", "x", "=", "joints", "[", ":", ",", "0", "]", "\n", "y", "=", "joints", "[", ":", ",", "1", "]", "\n", "if", "scatter", ":", "\n", "        ", "ax", ".", "scatter", "(", "x", ",", "y", ",", "1", ",", "\"r\"", ")", "\n", "\n", "# Add idx labels to joints", "\n", "", "for", "row_idx", ",", "row", "in", "enumerate", "(", "joints", ")", ":", "\n", "        ", "if", "joint_idxs", ":", "\n", "            ", "plt", ".", "annotate", "(", "str", "(", "row_idx", ")", ",", "(", "row", "[", "0", "]", ",", "row", "[", "1", "]", ")", ")", "\n", "", "", "_draw2djoints", "(", "ax", ",", "joints", ",", "links", ",", "alpha", "=", "alpha", ",", "linewidth", "=", "linewidth", ",", "color", "=", "color", ")", "\n", "if", "axis_equal", ":", "\n", "        ", "ax", ".", "axis", "(", "\"equal\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis._draw2djoints": [[34, 45], ["enumerate", "range", "samplevis._draw2dseg", "len"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis._draw2dseg"], ["", "", "def", "_draw2djoints", "(", "ax", ",", "annots", ",", "links", ",", "alpha", "=", "1", ",", "linewidth", "=", "1", ",", "color", "=", "None", ")", ":", "\n", "    ", "colors", "=", "[", "\"r\"", ",", "\"m\"", ",", "\"b\"", ",", "\"c\"", ",", "\"g\"", ",", "\"y\"", ",", "\"b\"", "]", "\n", "\n", "for", "finger_idx", ",", "finger_links", "in", "enumerate", "(", "links", ")", ":", "\n", "        ", "for", "idx", "in", "range", "(", "len", "(", "finger_links", ")", "-", "1", ")", ":", "\n", "            ", "if", "color", "is", "not", "None", ":", "\n", "                ", "link_color", "=", "color", "[", "finger_idx", "]", "\n", "", "else", ":", "\n", "                ", "link_color", "=", "colors", "[", "finger_idx", "]", "\n", "", "_draw2dseg", "(", "\n", "ax", ",", "annots", ",", "finger_links", "[", "idx", "]", ",", "finger_links", "[", "idx", "+", "1", "]", ",", "c", "=", "link_color", ",", "alpha", "=", "alpha", ",", "linewidth", "=", "linewidth", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis._draw2dseg": [[48, 51], ["ax.plot"], "function", ["None"], ["", "", "", "def", "_draw2dseg", "(", "ax", ",", "annot", ",", "idx1", ",", "idx2", ",", "c", "=", "\"r\"", ",", "alpha", "=", "1", ",", "linewidth", "=", "1", ")", ":", "\n", "    ", "ax", ".", "plot", "(", "\n", "[", "annot", "[", "idx1", ",", "0", "]", ",", "annot", "[", "idx2", ",", "0", "]", "]", ",", "[", "annot", "[", "idx1", ",", "1", "]", ",", "annot", "[", "idx2", ",", "1", "]", "]", ",", "c", "=", "c", ",", "alpha", "=", "alpha", ",", "linewidth", "=", "linewidth", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.get_check_none": [[54, 62], ["data[].cpu().detach", "data[].detach().cuda", "data[].cpu", "data[].detach", "hocontact.hodatasets.hoquery.TransQueries.OBJ_VERTS_2D", "hocontact.hodatasets.hoquery.TransQueries.OBJ_CORNERS_2D", "hocontact.hodatasets.hoquery.BaseQueries.OBJ_CORNERS_3D", "hocontact.hodatasets.hoquery.TransQueries.OBJ_VERTS_3D", "hocontact.hodatasets.hoquery.TransQueries.JOINTS_2D", "hocontact.hodatasets.hoquery.TransQueries.JOINTS_3D", "hocontact.hodatasets.hoquery.TransQueries.HAND_VERTS_3D", "hocontact.hodatasets.hoquery.BaseQueries.OBJ_VERTS_3D", "hocontact.hodatasets.hoquery.BaseQueries.JOINTS_3D"], "function", ["None"], ["", "def", "get_check_none", "(", "data", ",", "key", ",", "cpu", "=", "True", ")", ":", "\n", "    ", "if", "key", "in", "data", "and", "data", "[", "key", "]", "is", "not", "None", ":", "\n", "        ", "if", "cpu", ":", "\n", "            ", "return", "data", "[", "key", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "data", "[", "key", "]", ".", "detach", "(", ")", ".", "cuda", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.sample_vis": [[64, 294], ["fig.clf", "samplevis.get_check_none", "samplevis.get_check_none", "samplevis.get_check_none", "samplevis.get_check_none", "samplevis.get_check_none", "samplevis.get_check_none", "samplevis.get_check_none", "samplevis.get_check_none", "samplevis.get_check_none", "samplevis.get_check_none", "samplevis.get_check_none", "samplevis.get_check_none", "samplevis.get_check_none", "samplevis.get_check_none", "samplevis.get_check_none", "samplevis.get_check_none", "samplevis.get_check_none", "samplevis.get_check_none", "samplevis.get_check_none", "min", "fig.subplots", "range", "samplevis._squashfig", "fig.savefig", "sample[].permute().cpu", "axes[].imshow", "axes[].axis", "axes[].imshow", "axes[].axis", "axes[].invert_yaxis", "samplevis.visualize_joints_2d", "samplevis.visualize_joints_2d", "axes[].scatter", "axes[].scatter", "samplevis.visualize_joints_2d", "samplevis.visualize_joints_2d", "list", "len", "torch.cat", "samplevis.visualize_joints_2d", "axes[].scatter", "axes[].scatter", "samplevis.visualize_joints_2d", "samplevis.visualize_joints_2d", "samplevis.visualize_joints_2d", "samplevis.visualize_joints_2d", "torch.cat", "samplevis.visualize_joints_2d", "axes[].scatter", "axes[].scatter", "samplevis.visualize_joints_2d", "samplevis.visualize_joints_2d", "samplevis.visualize_joints_2d", "samplevis.visualize_joints_2d", "torch.cat", "samplevis.visualize_joints_2d", "axes[].set_aspect", "axes[].invert_yaxis", "axes[].invert_yaxis", "sample[].permute", "range", "axes[].scatter", "axes[].scatter", "samplevis.visualize_joints_2d", "axes[].scatter", "axes[].scatter", "axes[].scatter", "samplevis.visualize_joints_2d", "samplevis.visualize_joints_2d", "axes[].scatter", "axes[].scatter", "axes[].scatter", "samplevis.visualize_joints_2d", "samplevis.visualize_joints_2d", "gt_objverts2d[].float", "pred_objverts2d[].float", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.get_check_none", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.get_check_none", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.get_check_none", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.get_check_none", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.get_check_none", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.get_check_none", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.get_check_none", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.get_check_none", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.get_check_none", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.get_check_none", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.get_check_none", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.get_check_none", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.get_check_none", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.get_check_none", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.get_check_none", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.get_check_none", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.get_check_none", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.get_check_none", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.get_check_none", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis._squashfig", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d", "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.visualize_joints_2d"], ["", "", "def", "sample_vis", "(", "sample", ",", "results", ",", "save_img_path", ",", "fig", "=", "None", ",", "max_rows", "=", "5", ",", "display_centered", "=", "False", ")", ":", "\n", "    ", "fig", ".", "clf", "(", ")", "\n", "images", "=", "sample", "[", "TransQueries", ".", "IMAGE", "]", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", "+", "0.5", "\n", "batch_size", "=", "images", ".", "shape", "[", "0", "]", "\n", "# pred_handverts2d = get_check_none(results, \"verts2d\")", "\n", "gt_objverts2d", "=", "get_check_none", "(", "sample", ",", "TransQueries", ".", "OBJ_VERTS_2D", ")", "\n", "pred_objverts2d", "=", "get_check_none", "(", "results", ",", "\"obj_verts2d\"", ")", "\n", "gt_objcorners2d", "=", "get_check_none", "(", "sample", ",", "TransQueries", ".", "OBJ_CORNERS_2D", ")", "\n", "pred_objcorners2d", "=", "get_check_none", "(", "results", ",", "\"obj_corners2d\"", ")", "\n", "gt_objcorners3dw", "=", "get_check_none", "(", "sample", ",", "BaseQueries", ".", "OBJ_CORNERS_3D", ")", "\n", "pred_objcorners3d", "=", "get_check_none", "(", "results", ",", "\"obj_corners3d\"", ")", "\n", "gt_objverts3d", "=", "get_check_none", "(", "sample", ",", "TransQueries", ".", "OBJ_VERTS_3D", ")", "\n", "pred_objverts3d", "=", "get_check_none", "(", "results", ",", "\"obj_verts3d\"", ")", "\n", "gt_handjoints2d", "=", "get_check_none", "(", "sample", ",", "TransQueries", ".", "JOINTS_2D", ")", "\n", "pred_handjoints2d", "=", "get_check_none", "(", "results", ",", "\"joints2d\"", ")", "\n", "gt_handjoints3d", "=", "get_check_none", "(", "sample", ",", "TransQueries", ".", "JOINTS_3D", ")", "\n", "pred_handjoints3d", "=", "get_check_none", "(", "results", ",", "\"joints3d\"", ")", "\n", "gt_handverts3d", "=", "get_check_none", "(", "sample", ",", "TransQueries", ".", "HAND_VERTS_3D", ")", "\n", "gt_objverts3dw", "=", "get_check_none", "(", "sample", ",", "BaseQueries", ".", "OBJ_VERTS_3D", ")", "\n", "pred_handjoints3dw", "=", "get_check_none", "(", "results", ",", "\"recov_joints3d\"", ")", "\n", "gt_handjoints3dw", "=", "get_check_none", "(", "sample", ",", "BaseQueries", ".", "JOINTS_3D", ")", "\n", "pred_objverts3dw", "=", "get_check_none", "(", "results", ",", "\"recov_obj_verts3d\"", ")", "\n", "pred_objcorners3dw", "=", "get_check_none", "(", "results", ",", "\"recov_obj_corners3d\"", ")", "\n", "pred_handverts3d", "=", "get_check_none", "(", "results", ",", "\"verts3d\"", ")", "\n", "row_nb", "=", "min", "(", "max_rows", ",", "batch_size", ")", "\n", "if", "display_centered", ":", "\n", "        ", "col_nb", "=", "7", "\n", "", "else", ":", "\n", "        ", "col_nb", "=", "4", "\n", "", "axes", "=", "fig", ".", "subplots", "(", "row_nb", ",", "col_nb", ")", "\n", "for", "row_idx", "in", "range", "(", "row_nb", ")", ":", "\n", "# Column 0", "\n", "        ", "axes", "[", "row_idx", ",", "0", "]", ".", "imshow", "(", "images", "[", "row_idx", "]", ")", "\n", "axes", "[", "row_idx", ",", "0", "]", ".", "axis", "(", "\"off\"", ")", "\n", "if", "pred_handjoints2d", "is", "not", "None", ":", "\n", "            ", "visualize_joints_2d", "(", "axes", "[", "row_idx", ",", "0", "]", ",", "pred_handjoints2d", "[", "row_idx", "]", ",", "alpha", "=", "1", ",", "joint_idxs", "=", "False", ")", "\n", "", "if", "gt_handjoints2d", "is", "not", "None", ":", "\n", "            ", "visualize_joints_2d", "(", "axes", "[", "row_idx", ",", "0", "]", ",", "gt_handjoints2d", "[", "row_idx", "]", ",", "alpha", "=", "0.5", ",", "joint_idxs", "=", "False", ")", "\n", "\n", "# Column 1", "\n", "", "axes", "[", "row_idx", ",", "1", "]", ".", "imshow", "(", "images", "[", "row_idx", "]", ")", "\n", "axes", "[", "row_idx", ",", "1", "]", ".", "axis", "(", "\"off\"", ")", "\n", "if", "pred_objverts2d", "is", "not", "None", ":", "\n", "            ", "axes", "[", "row_idx", ",", "1", "]", ".", "scatter", "(", "\n", "pred_objverts2d", "[", "row_idx", ",", ":", ",", "0", "]", ",", "pred_objverts2d", "[", "row_idx", ",", ":", ",", "1", "]", ",", "c", "=", "\"r\"", ",", "s", "=", "1", ",", "alpha", "=", "0.2", "\n", ")", "\n", "", "if", "gt_objverts2d", "is", "not", "None", ":", "\n", "            ", "axes", "[", "row_idx", ",", "1", "]", ".", "scatter", "(", "gt_objverts2d", "[", "row_idx", ",", ":", ",", "0", "]", ",", "gt_objverts2d", "[", "row_idx", ",", ":", ",", "1", "]", ",", "c", "=", "\"b\"", ",", "s", "=", "1", ",", "alpha", "=", "0.02", ")", "\n", "", "if", "pred_objcorners2d", "is", "not", "None", ":", "\n", "            ", "visualize_joints_2d", "(", "\n", "axes", "[", "row_idx", ",", "1", "]", ",", "\n", "pred_objcorners2d", "[", "row_idx", "]", ",", "\n", "alpha", "=", "1", ",", "\n", "joint_idxs", "=", "False", ",", "\n", "links", "=", "[", "[", "0", ",", "1", ",", "3", ",", "2", "]", ",", "[", "4", ",", "5", ",", "7", ",", "6", "]", ",", "[", "1", ",", "5", "]", ",", "[", "3", ",", "7", "]", ",", "[", "4", ",", "0", "]", ",", "[", "0", ",", "2", ",", "6", ",", "4", "]", "]", ",", "\n", ")", "\n", "", "if", "gt_objcorners2d", "is", "not", "None", ":", "\n", "            ", "visualize_joints_2d", "(", "\n", "axes", "[", "row_idx", ",", "1", "]", ",", "\n", "gt_objcorners2d", "[", "row_idx", "]", ",", "\n", "alpha", "=", "0.5", ",", "\n", "joint_idxs", "=", "False", ",", "\n", "links", "=", "[", "[", "0", ",", "1", ",", "3", ",", "2", "]", ",", "[", "4", ",", "5", ",", "7", ",", "6", "]", ",", "[", "1", ",", "5", "]", ",", "[", "3", ",", "7", "]", ",", "[", "4", ",", "0", "]", ",", "[", "0", ",", "2", ",", "6", ",", "4", "]", "]", ",", "\n", ")", "\n", "", "if", "gt_objverts2d", "is", "not", "None", "and", "pred_objverts2d", "is", "not", "None", ":", "\n", "            ", "idxs", "=", "list", "(", "range", "(", "6", ")", ")", "\n", "arrow_nb", "=", "len", "(", "idxs", ")", "\n", "arrows", "=", "torch", ".", "cat", "(", "[", "gt_objverts2d", "[", ":", ",", "idxs", "]", ".", "float", "(", ")", ",", "pred_objverts2d", "[", ":", ",", "idxs", "]", ".", "float", "(", ")", "]", ",", "1", ")", "\n", "links", "=", "[", "[", "i", ",", "i", "+", "arrow_nb", "]", "for", "i", "in", "range", "(", "arrow_nb", ")", "]", "\n", "visualize_joints_2d", "(", "\n", "axes", "[", "row_idx", ",", "1", "]", ",", "arrows", "[", "row_idx", "]", ",", "alpha", "=", "0.5", ",", "joint_idxs", "=", "False", ",", "links", "=", "links", ",", "color", "=", "[", "\"k\"", "]", "*", "arrow_nb", ",", "\n", ")", "\n", "# Column 2", "\n", "", "col_idx", "=", "2", "\n", "if", "gt_objverts3dw", "is", "not", "None", ":", "\n", "            ", "axes", "[", "row_idx", ",", "col_idx", "]", ".", "scatter", "(", "\n", "gt_objverts3dw", "[", "row_idx", ",", ":", ",", "0", "]", ",", "gt_objverts3dw", "[", "row_idx", ",", ":", ",", "1", "]", ",", "c", "=", "\"b\"", ",", "s", "=", "1", ",", "alpha", "=", "0.02", "\n", ")", "\n", "", "if", "pred_objverts3dw", "is", "not", "None", ":", "\n", "            ", "axes", "[", "row_idx", ",", "col_idx", "]", ".", "scatter", "(", "\n", "pred_objverts3dw", "[", "row_idx", ",", ":", ",", "0", "]", ",", "pred_objverts3dw", "[", "row_idx", ",", ":", ",", "1", "]", ",", "c", "=", "\"r\"", ",", "s", "=", "1", ",", "alpha", "=", "0.02", "\n", ")", "\n", "", "if", "pred_handjoints3dw", "is", "not", "None", ":", "\n", "            ", "visualize_joints_2d", "(", "axes", "[", "row_idx", ",", "col_idx", "]", ",", "pred_handjoints3dw", "[", "row_idx", "]", "[", ":", "]", ",", "alpha", "=", "1", ",", "joint_idxs", "=", "False", ")", "\n", "", "if", "gt_handjoints3dw", "is", "not", "None", ":", "\n", "            ", "visualize_joints_2d", "(", "axes", "[", "row_idx", ",", "col_idx", "]", ",", "gt_handjoints3dw", "[", "row_idx", "]", "[", ":", "]", ",", "alpha", "=", "0.5", ",", "joint_idxs", "=", "False", ")", "\n", "", "axes", "[", "row_idx", ",", "col_idx", "]", ".", "invert_yaxis", "(", ")", "\n", "\n", "if", "pred_objcorners3dw", "is", "not", "None", ":", "\n", "            ", "visualize_joints_2d", "(", "\n", "axes", "[", "row_idx", ",", "col_idx", "]", ",", "\n", "pred_objcorners3dw", "[", "row_idx", "]", ",", "\n", "alpha", "=", "1", ",", "\n", "joint_idxs", "=", "False", ",", "\n", "links", "=", "[", "[", "0", ",", "1", ",", "3", ",", "2", "]", ",", "[", "4", ",", "5", ",", "7", ",", "6", "]", ",", "[", "1", ",", "5", "]", ",", "[", "3", ",", "7", "]", ",", "[", "4", ",", "0", "]", ",", "[", "0", ",", "2", ",", "6", ",", "4", "]", "]", ",", "\n", ")", "\n", "", "if", "gt_objcorners3dw", "is", "not", "None", ":", "\n", "            ", "visualize_joints_2d", "(", "\n", "axes", "[", "row_idx", ",", "col_idx", "]", ",", "\n", "gt_objcorners3dw", "[", "row_idx", "]", ",", "\n", "alpha", "=", "0.5", ",", "\n", "joint_idxs", "=", "False", ",", "\n", "links", "=", "[", "[", "0", ",", "1", ",", "3", ",", "2", "]", ",", "[", "4", ",", "5", ",", "7", ",", "6", "]", ",", "[", "1", ",", "5", "]", ",", "[", "3", ",", "7", "]", ",", "[", "4", ",", "0", "]", ",", "[", "0", ",", "2", ",", "6", ",", "4", "]", "]", ",", "\n", ")", "\n", "", "if", "pred_objverts3dw", "is", "not", "None", "and", "gt_objverts3dw", "is", "not", "None", ":", "\n", "            ", "arrow_nb", "=", "6", "\n", "arrows", "=", "torch", ".", "cat", "(", "[", "gt_objverts3dw", "[", ":", ",", ":", "arrow_nb", "]", ",", "pred_objverts3dw", "[", ":", ",", ":", "arrow_nb", "]", "]", ",", "1", ")", "\n", "links", "=", "[", "[", "i", ",", "i", "+", "arrow_nb", "]", "for", "i", "in", "range", "(", "arrow_nb", ")", "]", "\n", "visualize_joints_2d", "(", "\n", "axes", "[", "row_idx", ",", "col_idx", "]", ",", "\n", "arrows", "[", "row_idx", "]", ",", "\n", "alpha", "=", "0.5", ",", "\n", "joint_idxs", "=", "False", ",", "\n", "links", "=", "links", ",", "\n", "color", "=", "[", "\"k\"", "]", "*", "arrow_nb", ",", "\n", ")", "\n", "# Column 3", "\n", "", "col_idx", "=", "3", "\n", "if", "gt_objverts3dw", "is", "not", "None", ":", "\n", "            ", "axes", "[", "row_idx", ",", "col_idx", "]", ".", "scatter", "(", "\n", "gt_objverts3dw", "[", "row_idx", ",", ":", ",", "1", "]", ",", "gt_objverts3dw", "[", "row_idx", ",", ":", ",", "2", "]", ",", "c", "=", "\"b\"", ",", "s", "=", "1", ",", "alpha", "=", "0.02", "\n", ")", "\n", "", "if", "pred_objverts3dw", "is", "not", "None", ":", "\n", "            ", "axes", "[", "row_idx", ",", "col_idx", "]", ".", "scatter", "(", "\n", "pred_objverts3dw", "[", "row_idx", ",", ":", ",", "1", "]", ",", "pred_objverts3dw", "[", "row_idx", ",", ":", ",", "2", "]", ",", "c", "=", "\"r\"", ",", "s", "=", "1", ",", "alpha", "=", "0.02", "\n", ")", "\n", "", "if", "pred_handjoints3dw", "is", "not", "None", ":", "\n", "            ", "visualize_joints_2d", "(", "axes", "[", "row_idx", ",", "col_idx", "]", ",", "pred_handjoints3dw", "[", "row_idx", "]", "[", ":", ",", "1", ":", "]", ",", "alpha", "=", "1", ",", "joint_idxs", "=", "False", ")", "\n", "", "if", "gt_handjoints3dw", "is", "not", "None", ":", "\n", "            ", "visualize_joints_2d", "(", "axes", "[", "row_idx", ",", "col_idx", "]", ",", "gt_handjoints3dw", "[", "row_idx", "]", "[", ":", ",", "1", ":", "]", ",", "alpha", "=", "0.5", ",", "joint_idxs", "=", "False", ")", "\n", "", "if", "pred_objcorners3dw", "is", "not", "None", ":", "\n", "            ", "visualize_joints_2d", "(", "\n", "axes", "[", "row_idx", ",", "col_idx", "]", ",", "\n", "pred_objcorners3dw", "[", "row_idx", ",", ":", ",", "1", ":", "]", ",", "\n", "alpha", "=", "1", ",", "\n", "joint_idxs", "=", "False", ",", "\n", "links", "=", "[", "[", "0", ",", "1", ",", "3", ",", "2", "]", ",", "[", "4", ",", "5", ",", "7", ",", "6", "]", ",", "[", "1", ",", "5", "]", ",", "[", "3", ",", "7", "]", ",", "[", "4", ",", "0", "]", ",", "[", "0", ",", "2", ",", "6", ",", "4", "]", "]", ",", "\n", ")", "\n", "", "if", "gt_objcorners3dw", "is", "not", "None", ":", "\n", "            ", "visualize_joints_2d", "(", "\n", "axes", "[", "row_idx", ",", "col_idx", "]", ",", "\n", "gt_objcorners3dw", "[", "row_idx", ",", ":", ",", "1", ":", "]", ",", "\n", "alpha", "=", "0.5", ",", "\n", "joint_idxs", "=", "False", ",", "\n", "links", "=", "[", "[", "0", ",", "1", ",", "3", ",", "2", "]", ",", "[", "4", ",", "5", ",", "7", ",", "6", "]", ",", "[", "1", ",", "5", "]", ",", "[", "3", ",", "7", "]", ",", "[", "4", ",", "0", "]", ",", "[", "0", ",", "2", ",", "6", ",", "4", "]", "]", ",", "\n", ")", "\n", "", "if", "pred_objverts3dw", "is", "not", "None", "and", "gt_objverts3dw", "is", "not", "None", ":", "\n", "            ", "arrow_nb", "=", "6", "\n", "arrows", "=", "torch", ".", "cat", "(", "[", "gt_objverts3dw", "[", ":", ",", ":", "arrow_nb", ",", "1", ":", "]", ",", "pred_objverts3dw", "[", ":", ",", ":", "arrow_nb", ",", "1", ":", "]", "]", ",", "1", ")", "\n", "links", "=", "[", "[", "i", ",", "i", "+", "arrow_nb", "]", "for", "i", "in", "range", "(", "arrow_nb", ")", "]", "\n", "visualize_joints_2d", "(", "\n", "axes", "[", "row_idx", ",", "col_idx", "]", ",", "\n", "arrows", "[", "row_idx", "]", ",", "\n", "alpha", "=", "0.5", ",", "\n", "joint_idxs", "=", "False", ",", "\n", "links", "=", "links", ",", "\n", "color", "=", "[", "\"k\"", "]", "*", "arrow_nb", ",", "\n", ")", "\n", "\n", "", "if", "display_centered", ":", "\n", "# Column 4", "\n", "            ", "col_idx", "=", "4", "\n", "if", "gt_canobjverts3d", "is", "not", "None", ":", "\n", "                ", "axes", "[", "row_idx", ",", "col_idx", "]", ".", "scatter", "(", "\n", "gt_canobjverts3d", "[", "row_idx", ",", ":", ",", "0", "]", ",", "gt_canobjverts3d", "[", "row_idx", ",", ":", ",", "1", "]", ",", "c", "=", "\"b\"", ",", "s", "=", "1", ",", "alpha", "=", "0.02", "\n", ")", "\n", "", "if", "pred_objverts3d", "is", "not", "None", ":", "\n", "                ", "axes", "[", "row_idx", ",", "col_idx", "]", ".", "scatter", "(", "\n", "pred_objverts3d", "[", "row_idx", ",", ":", ",", "0", "]", ",", "pred_objverts3d", "[", "row_idx", ",", ":", ",", "1", "]", ",", "c", "=", "\"r\"", ",", "s", "=", "1", ",", "alpha", "=", "0.02", "\n", ")", "\n", "", "if", "pred_objcorners3d", "is", "not", "None", ":", "\n", "                ", "visualize_joints_2d", "(", "\n", "axes", "[", "row_idx", ",", "col_idx", "]", ",", "\n", "pred_objcorners3d", "[", "row_idx", "]", ",", "\n", "alpha", "=", "1", ",", "\n", "joint_idxs", "=", "False", ",", "\n", "links", "=", "[", "[", "0", ",", "1", ",", "3", ",", "2", "]", ",", "[", "4", ",", "5", ",", "7", ",", "6", "]", ",", "[", "1", ",", "5", "]", ",", "[", "3", ",", "7", "]", ",", "[", "4", ",", "0", "]", ",", "[", "0", ",", "2", ",", "6", ",", "4", "]", "]", ",", "\n", ")", "\n", "", "axes", "[", "row_idx", ",", "col_idx", "]", ".", "set_aspect", "(", "\"equal\"", ")", "\n", "axes", "[", "row_idx", ",", "col_idx", "]", ".", "invert_yaxis", "(", ")", "\n", "\n", "# Column 5", "\n", "col_idx", "=", "5", "\n", "if", "gt_objverts3d", "is", "not", "None", ":", "\n", "                ", "axes", "[", "row_idx", ",", "col_idx", "]", ".", "scatter", "(", "\n", "gt_objverts3d", "[", "row_idx", ",", ":", ",", "0", "]", ",", "gt_objverts3d", "[", "row_idx", ",", ":", ",", "1", "]", ",", "c", "=", "\"b\"", ",", "s", "=", "1", ",", "alpha", "=", "0.02", "\n", ")", "\n", "# if pred_objverts3d is not None:", "\n", "#     axes[row_idx, 2].scatter(", "\n", "#         pred_objverts3d[row_idx, :, 0], pred_objverts3d[row_idx, :, 1], c=\"r\", s=1, alpha=0.02", "\n", "#     )", "\n", "", "if", "gt_handverts3d", "is", "not", "None", ":", "\n", "                ", "axes", "[", "row_idx", ",", "col_idx", "]", ".", "scatter", "(", "\n", "gt_handverts3d", "[", "row_idx", ",", ":", ",", "0", "]", ",", "gt_handverts3d", "[", "row_idx", ",", ":", ",", "1", "]", ",", "c", "=", "\"g\"", ",", "s", "=", "1", ",", "alpha", "=", "0.2", "\n", ")", "\n", "", "if", "pred_handverts3d", "is", "not", "None", ":", "\n", "                ", "axes", "[", "row_idx", ",", "col_idx", "]", ".", "scatter", "(", "\n", "pred_handverts3d", "[", "row_idx", ",", ":", ",", "0", "]", ",", "pred_handverts3d", "[", "row_idx", ",", ":", ",", "1", "]", ",", "c", "=", "\"c\"", ",", "s", "=", "1", ",", "alpha", "=", "0.2", "\n", ")", "\n", "", "if", "pred_handjoints3d", "is", "not", "None", ":", "\n", "                ", "visualize_joints_2d", "(", "axes", "[", "row_idx", ",", "col_idx", "]", ",", "pred_handjoints3d", "[", "row_idx", "]", ",", "alpha", "=", "1", ",", "joint_idxs", "=", "False", ")", "\n", "", "if", "gt_handjoints3d", "is", "not", "None", ":", "\n", "                ", "visualize_joints_2d", "(", "axes", "[", "row_idx", ",", "col_idx", "]", ",", "gt_handjoints3d", "[", "row_idx", "]", ",", "alpha", "=", "0.5", ",", "joint_idxs", "=", "False", ")", "\n", "", "axes", "[", "row_idx", ",", "col_idx", "]", ".", "invert_yaxis", "(", ")", "\n", "\n", "# Column 6", "\n", "col_idx", "=", "6", "\n", "if", "gt_objverts3d", "is", "not", "None", ":", "\n", "                ", "axes", "[", "row_idx", ",", "col_idx", "]", ".", "scatter", "(", "\n", "gt_objverts3d", "[", "row_idx", ",", ":", ",", "1", "]", ",", "gt_objverts3d", "[", "row_idx", ",", ":", ",", "2", "]", ",", "c", "=", "\"b\"", ",", "s", "=", "1", ",", "alpha", "=", "0.02", "\n", ")", "\n", "# if pred_objverts3d is not None:", "\n", "#     axes[row_idx, 3].scatter(", "\n", "#         pred_objverts3d[row_idx, :, 1], pred_objverts3d[row_idx, :, 2], c=\"r\", s=1, alpha=0.02", "\n", "#     )", "\n", "", "if", "gt_handverts3d", "is", "not", "None", ":", "\n", "                ", "axes", "[", "row_idx", ",", "col_idx", "]", ".", "scatter", "(", "\n", "gt_handverts3d", "[", "row_idx", ",", ":", ",", "1", "]", ",", "gt_handverts3d", "[", "row_idx", ",", ":", ",", "2", "]", ",", "c", "=", "\"g\"", ",", "s", "=", "1", ",", "alpha", "=", "0.2", "\n", ")", "\n", "", "if", "pred_handverts3d", "is", "not", "None", ":", "\n", "                ", "axes", "[", "row_idx", ",", "col_idx", "]", ".", "scatter", "(", "\n", "pred_handverts3d", "[", "row_idx", ",", ":", ",", "1", "]", ",", "pred_handverts3d", "[", "row_idx", ",", ":", ",", "2", "]", ",", "c", "=", "\"c\"", ",", "s", "=", "1", ",", "alpha", "=", "0.2", "\n", ")", "\n", "", "if", "pred_handjoints3d", "is", "not", "None", ":", "\n", "                ", "visualize_joints_2d", "(", "axes", "[", "row_idx", ",", "col_idx", "]", ",", "pred_handjoints3d", "[", "row_idx", "]", "[", ":", ",", "1", ":", "]", ",", "alpha", "=", "1", ",", "joint_idxs", "=", "False", ")", "\n", "", "if", "gt_handjoints3d", "is", "not", "None", ":", "\n", "                ", "visualize_joints_2d", "(", "axes", "[", "row_idx", ",", "col_idx", "]", ",", "gt_handjoints3d", "[", "row_idx", "]", "[", ":", ",", "1", ":", "]", ",", "alpha", "=", "0.5", ",", "joint_idxs", "=", "False", ")", "\n", "\n", "", "", "", "_squashfig", "(", "fig", ")", "\n", "fig", ".", "savefig", "(", "save_img_path", ",", "dpi", "=", "300", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis.eval_vis": [[296, 313], ["fig.clf", "len", "fig.subplots", "enumerate", "fig.savefig", "len", "eval_res.items", "ax.plot", "ax.set_title"], "function", ["None"], ["", "def", "eval_vis", "(", "eval_res", ",", "save_img_path", ",", "fig", "=", "None", ")", ":", "\n", "    ", "fig", ".", "clf", "(", ")", "\n", "fig_nb", "=", "len", "(", "eval_res", ")", "\n", "if", "fig_nb", "==", "0", ":", "\n", "        ", "return", "\n", "", "axes", "=", "fig", ".", "subplots", "(", "len", "(", "eval_res", ")", ")", "\n", "for", "eval_idx", ",", "(", "eval_name", ",", "eval_res", ")", "in", "enumerate", "(", "eval_res", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "fig_nb", ">", "1", ":", "\n", "            ", "ax", "=", "axes", "[", "eval_idx", "]", "\n", "", "else", ":", "\n", "            ", "ax", "=", "axes", "\n", "", "ax", ".", "plot", "(", "eval_res", "[", "\"thresholds\"", "]", ",", "eval_res", "[", "\"pck_curve\"", "]", ",", "\"ro-\"", ",", "markersize", "=", "1", ",", "label", "=", "\"Ours\"", ")", "\n", "auc", "=", "eval_res", "[", "\"auc\"", "]", "\n", "epe_mean", "=", "eval_res", "[", "\"epe_mean\"", "]", "\n", "epe_med", "=", "eval_res", "[", "\"epe_median\"", "]", "\n", "ax", ".", "set_title", "(", "f\"{eval_name} epe_mean: {epe_mean:.3f}, auc: {auc:.3f}, epe_med: {epe_med:.3f}\"", ")", "\n", "", "fig", ".", "savefig", "(", "save_img_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.visualize.samplevis._squashfig": [[315, 332], ["matplotlib.pyplot.subplots_adjust", "matplotlib.pyplot.gcf", "isinstance", "ax.margins", "ax.xaxis.set_major_locator", "ax.yaxis.set_major_locator", "ax.zaxis.set_major_locator", "ax.axis", "ax.margins", "ax.xaxis.set_major_locator", "ax.yaxis.set_major_locator", "matplotlib.pyplot.NullLocator", "matplotlib.pyplot.NullLocator", "matplotlib.pyplot.NullLocator", "matplotlib.pyplot.NullLocator", "matplotlib.pyplot.NullLocator"], "function", ["None"], ["", "def", "_squashfig", "(", "fig", "=", "None", ")", ":", "\n", "# TomNorway - https://stackoverflow.com/a/53516034", "\n", "    ", "if", "not", "fig", ":", "\n", "        ", "fig", "=", "plt", ".", "gcf", "(", ")", "\n", "\n", "", "plt", ".", "subplots_adjust", "(", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ")", "\n", "for", "ax", "in", "fig", ".", "axes", ":", "\n", "        ", "if", "isinstance", "(", "ax", ",", "Axes3D", ")", ":", "\n", "            ", "ax", ".", "margins", "(", "0", ",", "0", ",", "0", ")", "\n", "ax", ".", "xaxis", ".", "set_major_locator", "(", "plt", ".", "NullLocator", "(", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_major_locator", "(", "plt", ".", "NullLocator", "(", ")", ")", "\n", "ax", ".", "zaxis", ".", "set_major_locator", "(", "plt", ".", "NullLocator", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "ax", ".", "axis", "(", "\"off\"", ")", "\n", "ax", ".", "margins", "(", "0", ",", "0", ")", "\n", "ax", ".", "xaxis", ".", "set_major_locator", "(", "plt", ".", "NullLocator", "(", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_major_locator", "(", "plt", ".", "NullLocator", "(", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.models.contacthead.ContactHead.__init__": [[8, 23], ["torch.Module.__init__", "zip", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "len", "layers.append", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_dim", ",", "base_neurons", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "base_neurons", "is", "None", ":", "\n", "            ", "base_neurons", "=", "[", "65", ",", "512", ",", "512", ",", "512", "]", "\n", "", "assert", "len", "(", "base_neurons", ")", ">=", "1", "\n", "\n", "# returns k for each object vert", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "(", "inp_neurons", ",", "out_neurons", ")", "in", "zip", "(", "base_neurons", "[", ":", "-", "1", "]", ",", "base_neurons", "[", "1", ":", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "inp_neurons", ",", "out_neurons", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "self", ".", "final_layer", "=", "nn", ".", "Conv2d", "(", "out_neurons", ",", "self", ".", "out_dim", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.contacthead.ContactHead.forward": [[24, 28], ["contacthead.ContactHead.decoder", "contacthead.ContactHead.final_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "inp", ")", "\n", "out", "=", "self", ".", "final_layer", "(", "decoded", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.contacthead.VertexContactHead.__init__": [[31, 46], ["torch.Module.__init__", "zip", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "len", "layers.append", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_neurons", "=", "None", ",", "out_dim", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "base_neurons", "is", "None", ":", "\n", "            ", "base_neurons", "=", "[", "65", ",", "512", ",", "512", ",", "65", "]", "\n", "", "assert", "len", "(", "base_neurons", ")", ">=", "1", "\n", "\n", "# returns k for each object vert", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "(", "inp_neurons", ",", "out_neurons", ")", "in", "zip", "(", "base_neurons", "[", ":", "-", "1", "]", ",", "base_neurons", "[", "1", ":", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "inp_neurons", ",", "out_neurons", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "self", ".", "final_layer", "=", "nn", ".", "Conv2d", "(", "out_neurons", ",", "self", ".", "out_dim", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.contacthead.VertexContactHead.forward": [[47, 52], ["contacthead.VertexContactHead.decoder", "contacthead.VertexContactHead.final_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "inp", ")", "\n", "out", "=", "self", ".", "final_layer", "(", "decoded", ")", "\n", "# // out = self.sigmoid(out)", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.contacthead.PointNetContactHead.__init__": [[55, 71], ["torch.Module.__init__", "hocontact.models.pointnet.PointNetEncodeModule", "hocontact.models.pointnet.PointNetDecodeModule", "hocontact.models.pointnet.PointNetDecodeModule", "hocontact.models.pointnet.PointNetDecodeModule"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", "=", "65", ",", "n_region", "=", "17", ",", "n_anchor", "=", "4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# record input feature dimension", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "\n", "# returns k for each object vert", "\n", "self", ".", "n_region", "=", "n_region", "\n", "self", ".", "n_anchor", "=", "n_anchor", "\n", "\n", "# encode module", "\n", "self", ".", "encoder", "=", "PointNetEncodeModule", "(", "self", ".", "feat_dim", ")", "\n", "self", ".", "_concat_feat_dim", "=", "self", ".", "encoder", ".", "dim_out", "\n", "self", ".", "vertex_contact_decoder", "=", "PointNetDecodeModule", "(", "self", ".", "_concat_feat_dim", ",", "1", ")", "\n", "self", ".", "contact_region_decoder", "=", "PointNetDecodeModule", "(", "self", ".", "_concat_feat_dim", "+", "1", ",", "self", ".", "n_region", ")", "\n", "self", ".", "anchor_elasti_decoder", "=", "PointNetDecodeModule", "(", "self", ".", "_concat_feat_dim", "+", "17", ",", "self", ".", "n_anchor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.contacthead.PointNetContactHead.forward": [[72, 88], ["inp.squeeze", "contacthead.PointNetContactHead.encoder", "contacthead.PointNetContactHead.vertex_contact_decoder", "contacthead.PointNetContactHead.contact_region_decoder", "contacthead.PointNetContactHead.anchor_elasti_decoder", "vertex_contact.squeeze().contiguous.squeeze().contiguous.squeeze().contiguous", "contact_region.transpose().contiguous.transpose().contiguous.transpose().contiguous", "torch.sigmoid.transpose().contiguous", "torch.sigmoid.transpose().contiguous", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "vertex_contact.squeeze().contiguous.squeeze().contiguous.squeeze", "contact_region.transpose().contiguous.transpose().contiguous.transpose", "torch.sigmoid.transpose", "torch.sigmoid.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "# inp = TENSOR[NBATCH, 65, NPOINT, 1]", "\n", "        ", "batch_size", ",", "_", ",", "n_point", ",", "_", "=", "inp", ".", "shape", "\n", "feat", "=", "inp", ".", "squeeze", "(", "3", ")", "# TENSOR[NBATCH, 65, NPOINT]", "\n", "concat_feat", "=", "self", ".", "encoder", "(", "feat", ")", "# TENSOR[NBATCH, 4992, NPOINT]", "\n", "vertex_contact", "=", "self", ".", "vertex_contact_decoder", "(", "concat_feat", ")", "# TENSOR[NBATCH, 1, NPOINT]", "\n", "contact_region", "=", "self", ".", "contact_region_decoder", "(", "concat_feat", ",", "vertex_contact", ")", "# TENSOR[NBATCH, 17, NPOINT]", "\n", "anchor_elasti", "=", "self", ".", "anchor_elasti_decoder", "(", "concat_feat", ",", "contact_region", ")", "# TENSOR[NBATCH, 4, NPOINT]", "\n", "# post process", "\n", "vertex_contact", "=", "vertex_contact", ".", "squeeze", "(", "1", ")", ".", "contiguous", "(", ")", "\n", "contact_region", "=", "contact_region", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "# TENSOR[NBATCH, NPOINT, 17]", "\n", "anchor_elasti", "=", "anchor_elasti", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "# TENSOR[NBATCH, NPOINT, 4]", "\n", "\n", "# !: here sigmoid is compulsory, since we use bce (instead of  bce_with_logit)", "\n", "anchor_elasti", "=", "torch", ".", "sigmoid", "(", "anchor_elasti", ")", "\n", "return", "vertex_contact", ",", "contact_region", ",", "anchor_elasti", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.models.manobranch.ManoAdaptor.__init__": [[10, 32], ["super().__init__", "torch.nn.Linear", "torch.from_numpy", "manobranch.ManoAdaptor.register_buffer", "torch.from_numpy.new_zeros", "manobranch.ManoAdaptor.register_buffer", "open", "pickle.load", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mano_layer", ",", "load_path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "adaptor", "=", "torch", ".", "nn", ".", "Linear", "(", "778", ",", "21", ",", "bias", "=", "False", ")", "\n", "if", "load_path", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "load_path", ",", "\"rb\"", ")", "as", "p_f", ":", "\n", "                ", "exp_data", "=", "pickle", ".", "load", "(", "p_f", ")", "\n", "weights", "=", "exp_data", "[", "\"adaptor\"", "]", "\n", "", "regressor", "=", "torch", ".", "from_numpy", "(", "weights", ")", "\n", "self", ".", "register_buffer", "(", "\"J_regressor\"", ",", "regressor", ")", "\n", "", "else", ":", "\n", "            ", "regressor", "=", "mano_layer", ".", "_buffers", "[", "\"th_J_regressor\"", "]", "\n", "tip_reg", "=", "regressor", ".", "new_zeros", "(", "5", ",", "regressor", ".", "shape", "[", "1", "]", ")", "\n", "tip_reg", "[", "0", ",", "745", "]", "=", "1", "\n", "tip_reg", "[", "1", ",", "317", "]", "=", "1", "\n", "tip_reg", "[", "2", ",", "444", "]", "=", "1", "\n", "tip_reg", "[", "3", ",", "556", "]", "=", "1", "\n", "tip_reg", "[", "4", ",", "673", "]", "=", "1", "\n", "reordered_reg", "=", "torch", ".", "cat", "(", "[", "regressor", ",", "tip_reg", "]", ")", "[", "\n", "[", "0", ",", "13", ",", "14", ",", "15", ",", "16", ",", "1", ",", "2", ",", "3", ",", "17", ",", "4", ",", "5", ",", "6", ",", "18", ",", "10", ",", "11", ",", "12", ",", "19", ",", "7", ",", "8", ",", "9", ",", "20", "]", "\n", "]", "\n", "self", ".", "register_buffer", "(", "\"J_regressor\"", ",", "reordered_reg", ")", "\n", "", "self", ".", "adaptor", ".", "weight", ".", "data", "=", "self", ".", "J_regressor", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.manobranch.ManoAdaptor.forward": [[33, 38], ["manobranch.ManoAdaptor.adaptor", "inp.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "fix_idxs", "=", "[", "0", ",", "4", ",", "8", ",", "12", ",", "16", ",", "20", "]", "\n", "for", "idx", "in", "fix_idxs", ":", "\n", "            ", "self", ".", "adaptor", ".", "weight", ".", "data", "[", "idx", "]", "=", "self", ".", "J_regressor", "[", "idx", "]", "\n", "", "return", "self", ".", "adaptor", "(", "inp", ".", "transpose", "(", "2", ",", "1", ")", ")", ",", "self", ".", "adaptor", ".", "weight", "-", "self", ".", "J_regressor", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.manobranch.ManoBranch.__init__": [[41, 111], ["torch.nn.Module.__init__", "zip", "torch.nn.Sequential", "torch.nn.Linear", "manopth.manolayer.ManoLayer", "base_layers.append", "base_layers.append", "manobranch.ManoBranch.pose_reg.bias.data.fill_", "manobranch.ManoBranch.pose_reg.weight.data.new().view().repeat", "torch.abs", "torch.nn.Sequential", "base_layers.append", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Dropout", "manobranch.ManoBranch.pose_reg.weight.data.new().view", "manobranch.ManoBranch.unsqueeze().repeat().float", "manobranch.ManoBranch.pose_reg.weight.data.new", "manobranch.ManoBranch.unsqueeze().repeat", "numpy.identity", "manobranch.ManoBranch.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "ncomps", ",", "# ncomps = 15 in all expermients", "\n", "base_neurons", "=", "[", "512", ",", "512", "]", ",", "\n", "center_idx", ":", "int", "=", "9", ",", "\n", "use_pca", "=", "True", ",", "\n", "use_shape", "=", "True", ",", "\n", "mano_root", "=", "\"assets/mano\"", ",", "\n", "mano_pose_coeff", "=", "1", ",", "\n", "mano_side", "=", "\"right\"", ",", "\n", "dropout", "=", "0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            mano_root (path): dir containing mano pickle files\n            center_idx: Joint idx on which to hand is centered (given joint has position\n                [0, 0, 0]\n            ncomps: Number of pose principal components that are predicted\n        \"\"\"", "\n", "super", "(", "ManoBranch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "use_shape", "=", "use_shape", "\n", "self", ".", "use_pca", "=", "use_pca", "\n", "self", ".", "mano_pose_coeff", "=", "mano_pose_coeff", "\n", "self", ".", "mano_side", "=", "mano_side", "\n", "\n", "if", "self", ".", "use_pca", ":", "\n", "# Final number of coefficients to predict for pose", "\n", "# is sum of PCA components and 3 global axis-angle params", "\n", "# for the global rotation", "\n", "            ", "mano_pose_size", "=", "ncomps", "+", "3", "\n", "", "else", ":", "\n", "# 15 joints + 1 global rotations, 9 components per joint", "\n", "# rotation", "\n", "            ", "mano_pose_size", "=", "16", "*", "9", "\n", "# Initial base layers of MANO decoder", "\n", "", "base_layers", "=", "[", "]", "\n", "for", "inp_neurons", ",", "out_neurons", "in", "zip", "(", "base_neurons", "[", ":", "-", "1", "]", ",", "base_neurons", "[", "1", ":", "]", ")", ":", "\n", "            ", "if", "dropout", ":", "\n", "                ", "base_layers", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", ")", "\n", "", "base_layers", ".", "append", "(", "nn", ".", "Linear", "(", "inp_neurons", ",", "out_neurons", ")", ")", "\n", "base_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "self", ".", "base_layer", "=", "nn", ".", "Sequential", "(", "*", "base_layers", ")", "\n", "\n", "# Pose layers to predict pose parameters", "\n", "self", ".", "pose_reg", "=", "nn", ".", "Linear", "(", "base_neurons", "[", "-", "1", "]", ",", "mano_pose_size", ")", "\n", "if", "not", "self", ".", "use_pca", ":", "\n", "# Initialize all nondiagonal items on rotation matrix weights to 0", "\n", "            ", "self", ".", "pose_reg", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "weight_mask", "=", "self", ".", "pose_reg", ".", "weight", ".", "data", ".", "new", "(", "np", ".", "identity", "(", "3", ")", ")", ".", "view", "(", "9", ")", ".", "repeat", "(", "16", ")", "\n", "self", ".", "pose_reg", ".", "weight", ".", "data", "=", "torch", ".", "abs", "(", "\n", "weight_mask", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "256", ")", ".", "float", "(", ")", "*", "self", ".", "pose_reg", ".", "weight", ".", "data", "\n", ")", "\n", "\n", "# Shape layers to predict MANO shape parameters", "\n", "", "if", "self", ".", "use_shape", ":", "\n", "            ", "self", ".", "shape_reg", "=", "torch", ".", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "base_neurons", "[", "-", "1", "]", ",", "10", ")", ")", "\n", "\n", "# Mano layer which outputs the hand mesh given the hand pose and shape", "\n", "# paramters", "\n", "", "self", ".", "mano_layer", "=", "ManoLayer", "(", "\n", "ncomps", "=", "ncomps", ",", "\n", "center_idx", "=", "center_idx", ",", "\n", "side", "=", "mano_side", ",", "\n", "mano_root", "=", "mano_root", ",", "\n", "use_pca", "=", "use_pca", ",", "\n", "flat_hand_mean", "=", "False", ",", "\n", "return_full_pose", "=", "True", ",", "# * @Xinyu, here I will return the axisang.", "\n", ")", "\n", "self", ".", "faces", "=", "self", ".", "mano_layer", ".", "th_faces", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.manobranch.ManoBranch.forward": [[112, 140], ["manobranch.ManoBranch.base_layer", "manobranch.ManoBranch.pose_reg", "manobranch.ManoBranch.mano_layer", "torch.cat", "torch.cat.reshape", "manobranch.ManoBranch.shape_reg"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "base_features", "=", "self", ".", "base_layer", "(", "inp", ")", "\n", "pose", "=", "self", ".", "pose_reg", "(", "base_features", ")", "# TENSOR (B, N_PCA)", "\n", "\n", "if", "self", ".", "mano_pose_coeff", "!=", "1", ":", "\n", "            ", "pose", "=", "torch", ".", "cat", "(", "[", "pose", "[", ":", ",", ":", "3", "]", ",", "self", ".", "mano_pose_coeff", "*", "pose", "[", ":", ",", "3", ":", "]", "]", ",", "1", ")", "\n", "", "if", "not", "self", ".", "use_pca", ":", "\n", "# Reshape to rotation matrixes", "\n", "            ", "mano_pose", "=", "pose", ".", "reshape", "(", "pose", ".", "shape", "[", "0", "]", ",", "16", ",", "3", ",", "3", ")", "\n", "", "else", ":", "\n", "            ", "mano_pose", "=", "pose", "\n", "\n", "# Get shape", "\n", "", "if", "self", ".", "use_shape", ":", "\n", "            ", "shape", "=", "self", ".", "shape_reg", "(", "base_features", ")", "\n", "", "else", ":", "\n", "            ", "shape", "=", "None", "\n", "\n", "# Get MANO vertices and joints for left and right hands given", "\n", "# predicted mano parameters", "\n", "", "verts", ",", "joints", ",", "full_pose", "=", "self", ".", "mano_layer", "(", "mano_pose", ",", "th_betas", "=", "shape", ")", "\n", "\n", "# Gather results in metric space (vs MANO millimeter outputs)", "\n", "# pose: the 18 ncomps (3 global rot + 15 pca hand pose)", "\n", "# full_pose: the 48 (16 * 3) full relative axis-angles of all 16 joints rotations (from root to finger)", "\n", "results", "=", "{", "\"verts3d\"", ":", "verts", ",", "\"joints3d\"", ":", "joints", ",", "\"shape\"", ":", "shape", ",", "\"pose\"", ":", "pose", ",", "\"full_pose\"", ":", "full_pose", "}", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.manobranch.test_full_pose": [[142, 157], ["manobranch.ManoBranch", "manopth.manolayer.ManoLayer", "torch.rand", "torch.rand", "ManoBranch.mano_layer", "manopth.manolayer.ManoLayer.", "print"], "function", ["None"], ["", "", "def", "test_full_pose", "(", ")", ":", "\n", "    ", "mano_branch", "=", "ManoBranch", "(", "ncomps", "=", "15", ",", "base_neurons", "=", "[", "512", ",", "512", ",", "512", "]", ",", ")", "\n", "test_mano_layer", "=", "ManoLayer", "(", "\n", "ncomps", "=", "15", ",", "center_idx", "=", "9", ",", "side", "=", "\"right\"", ",", "mano_root", "=", "\"assets/mano\"", ",", "use_pca", "=", "False", ",", "flat_hand_mean", "=", "True", ",", "\n", ")", "\n", "\n", "rand_pose", "=", "torch", ".", "rand", "(", "(", "1", ",", "18", ")", ")", "\n", "rand_shape", "=", "torch", ".", "rand", "(", "(", "1", ",", "10", ")", ")", "\n", "verts3d", ",", "joints3d", ",", "full_pose", "=", "mano_branch", ".", "mano_layer", "(", "rand_pose", ",", "rand_shape", ")", "\n", "test_verts3d", ",", "test_joints3d", "=", "test_mano_layer", "(", "full_pose", ",", "rand_shape", ")", "\n", "\n", "verts_dist", "=", "(", "(", "test_verts3d", "-", "verts3d", ")", "*", "1000.0", ")", ".", "norm", "(", "2", ",", "-", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "joints_dist", "=", "(", "(", "test_joints3d", "-", "joints3d", ")", "*", "1000.0", ")", ".", "norm", "(", "2", ",", "-", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "verts_dist", ",", "joints_dist", ")", "# should be 0.", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.picr.PicrHourglassPointNet.__init__": [[17, 67], ["torch.Module.__init__", "hocontact.models.honet.HONet", "picr.PicrHourglassPointNet.ho_net.parameters", "picr.PicrHourglassPointNet.ho_net.eval", "hocontact.utils.netutils.freeze_batchnorm_stats", "hocontact.models.bases.hourglass.StackedHourglass", "hocontact.models.contacthead.PointNetContactHead"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__", "home.repos.pwc.inspect_result.lixiny_CPF.utils.netutils.freeze_batchnorm_stats"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "hg_stacks", "=", "2", ",", "\n", "hg_blocks", "=", "1", ",", "\n", "hg_classes", "=", "64", ",", "\n", "obj_scale_factor", "=", "0.0001", ",", "\n", "honet_resnet_version", "=", "18", ",", "\n", "honet_center_idx", "=", "9", ",", "\n", "honet_mano_lambda_recov_joints3d", "=", "0.5", ",", "\n", "honet_mano_lambda_recov_verts3d", "=", "0", ",", "\n", "honet_mano_lambda_shape", "=", "5e-07", ",", "\n", "honet_mano_lambda_pose_reg", "=", "5e-06", ",", "\n", "honet_obj_lambda_recov_verts3d", "=", "0.5", ",", "\n", "honet_obj_trans_factor", "=", "100", ",", "\n", "honet_mano_fhb_hand", "=", "False", ",", "\n", "mean_offset", "=", "0.010", ",", "\n", "std_offset", "=", "0.005", ",", "\n", "maximal_angle", "=", "math", ".", "pi", "/", "24", ",", "\n", ")", ":", "\n", "        ", "super", "(", "PicrHourglassPointNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "obj_scale_factor", "=", "obj_scale_factor", "\n", "\n", "# ================ CREATE BASE NET >>>>>>>>>>>>>>>>>>>>", "\n", "self", ".", "ho_net", "=", "HONet", "(", "\n", "resnet_version", "=", "honet_resnet_version", ",", "\n", "mano_center_idx", "=", "honet_center_idx", ",", "\n", "mano_lambda_recov_joints3d", "=", "honet_mano_lambda_recov_joints3d", ",", "\n", "mano_lambda_recov_verts3d", "=", "honet_mano_lambda_recov_verts3d", ",", "\n", "mano_lambda_shape", "=", "honet_mano_lambda_shape", ",", "\n", "mano_lambda_pose_reg", "=", "honet_mano_lambda_pose_reg", ",", "\n", "obj_lambda_recov_verts3d", "=", "honet_obj_lambda_recov_verts3d", ",", "\n", "obj_trans_factor", "=", "honet_obj_trans_factor", ",", "\n", "obj_scale_factor", "=", "obj_scale_factor", ",", "\n", "mano_fhb_hand", "=", "honet_mano_fhb_hand", ",", "\n", ")", "\n", "for", "param", "in", "self", ".", "ho_net", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "ho_net", ".", "eval", "(", ")", "\n", "freeze_batchnorm_stats", "(", "self", ".", "ho_net", ")", "\n", "self", ".", "base_net", "=", "hourglass", ".", "StackedHourglass", "(", "hg_stacks", ",", "hg_blocks", ",", "hg_classes", ")", "\n", "self", ".", "intermediate_feature_size", "=", "hg_classes", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ================ CREATE HEADERS >>>>>>>>>>>>>>>>>>>>>", "\n", "self", ".", "contact_head", "=", "PointNetContactHead", "(", "feat_dim", "=", "self", ".", "intermediate_feature_size", "+", "1", ",", "n_region", "=", "17", ",", "n_anchor", "=", "4", ")", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "self", ".", "mean_offset", "=", "mean_offset", "\n", "self", ".", "std_offset", "=", "std_offset", "\n", "self", ".", "maximal_angle", "=", "maximal_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.picr.PicrHourglassPointNet.generate_random_direction": [[68, 78], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.float", "torch.tensor.float", "torch.tensor.float", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "generate_random_direction", "(", ")", ":", "\n", "# first get azimuthal angle", "\n", "        ", "azi", "=", "torch", ".", "rand", "(", "1", ")", "*", "2", "*", "math", ".", "pi", "\n", "# next get inclination angle", "\n", "cos_inc", "=", "1", "-", "2", "*", "torch", ".", "rand", "(", "1", ")", "\n", "sin_inc", "=", "torch", ".", "sqrt", "(", "1", "-", "cos_inc", "**", "2", ")", "\n", "# gen vec", "\n", "vec", "=", "torch", ".", "tensor", "(", "[", "sin_inc", "*", "torch", ".", "cos", "(", "azi", ")", ",", "sin_inc", "*", "torch", ".", "sin", "(", "azi", ")", ",", "cos_inc", "]", ")", "\n", "return", "vec", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.picr.PicrHourglassPointNet.generate_random_rotation": [[79, 86], ["picr.PicrHourglassPointNet.generate_random_direction", "manopth.rodrigues_layer.batch_rodrigues().view", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "manopth.rodrigues_layer.batch_rodrigues", "picr.PicrHourglassPointNet.generate_random_direction"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.models.picr_offline.PicrOfflineHourglassPointNet.generate_random_direction", "home.repos.pwc.inspect_result.lixiny_CPF.models.picr_offline.PicrOfflineHourglassPointNet.generate_random_direction"], ["", "@", "staticmethod", "\n", "def", "generate_random_rotation", "(", "max_angle", ")", ":", "\n", "        ", "axisang", "=", "PicrHourglassPointNet", ".", "generate_random_direction", "(", ")", "\n", "angle", "=", "torch", ".", "rand", "(", "1", ")", "*", "max_angle", "\n", "axisang", "=", "axisang", "*", "angle", "\n", "rot_mat", "=", "batch_rodrigues", "(", "axisang", ".", "unsqueeze", "(", "0", ")", ")", ".", "view", "(", "1", ",", "3", ",", "3", ")", "\n", "return", "rot_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.picr.PicrHourglassPointNet.forward": [[87, 141], ["picr.PicrHourglassPointNet.ho_net.eval", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "image.to.to.to", "image_resolution.to.to.to", "picr.PicrHourglassPointNet.base_net", "sample[].float", "cam_intr.to.to.to", "ls_results[].update", "ls_results[].update", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "picr.PicrHourglassPointNet.ho_net", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "picr.PicrHourglassPointNet.picr_forward", "ls_results.append", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update", "home.repos.pwc.inspect_result.lixiny_CPF.models.picr_offline.PicrOfflineHourglassPointNet.picr_forward"], ["", "def", "forward", "(", "self", ",", "sample", ",", "rank", "=", "None", ")", ":", "\n", "# first compute ho_net", "\n", "        ", "self", ".", "ho_net", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "honet_results", "=", "self", ".", "ho_net", "(", "sample", ",", "rank", "=", "rank", ")", "\n", "\n", "# get device", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "f\"cuda:{rank}\"", ")", "\n", "\n", "", "ls_results", "=", "[", "]", "\n", "\n", "image", "=", "sample", "[", "TransQueries", ".", "IMAGE", "]", "\n", "image_resolution", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "image", ".", "shape", "[", "3", "]", ",", "image", ".", "shape", "[", "2", "]", "]", ")", ")", ".", "float", "(", ")", "# TENSOR[2]", "\n", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "image_resolution", "=", "image_resolution", ".", "to", "(", "device", ")", "\n", "\n", "ls_hg_feature", ",", "_", "=", "self", ".", "base_net", "(", "image", ")", "# prefix [ ls_ ] = list", "\n", "has_contact_supv", "=", "True", "\n", "\n", "# * if block rot, then TransQueries.OBJ_VERTS_3D is equal to BaseQueries.OBJ_VERTS_3D", "\n", "objverts3d", "=", "honet_results", "[", "\"recov_obj_verts3d\"", "]", "\n", "cam_intr", "=", "sample", "[", "TransQueries", ".", "CAM_INTR", "]", ".", "float", "(", ")", "\n", "cam_intr", "=", "cam_intr", ".", "to", "(", "device", ")", "\n", "\n", "if", "has_contact_supv", ":", "\n", "            ", "for", "i_stack", "in", "range", "(", "self", ".", "base_net", ".", "nstacks", ")", ":", "# RANGE 2", "\n", "                ", "i_hg_feature", "=", "ls_hg_feature", "[", "i_stack", "]", "# TENSOR[NBATCH, 64, 1/4 ?, 1/4 ?]", "\n", "i_contact_results", "=", "self", ".", "picr_forward", "(", "cam_intr", ",", "objverts3d", ",", "i_hg_feature", ",", "image_resolution", ")", "\n", "ls_results", ".", "append", "(", "i_contact_results", ")", "\n", "\n", "# ====== get required fields from honet_results", "\n", "", "", "extra_results", "=", "{", "\n", "\"hand_tsl\"", ":", "honet_results", "[", "\"hand_center3d\"", "]", ",", "\n", "\"hand_joints_3d\"", ":", "honet_results", "[", "\"recov_joints3d\"", "]", ",", "# in fhb format if appliable", "\n", "\"hand_verts_3d\"", ":", "honet_results", "[", "\"recov_hand_verts3d\"", "]", ",", "\n", "\"hand_full_pose\"", ":", "honet_results", "[", "\"full_pose\"", "]", ",", "# in axisang", "\n", "\"hand_shape\"", ":", "honet_results", "[", "\"shape\"", "]", ",", "\n", "\"obj_tsl\"", ":", "honet_results", "[", "\"obj_center3d\"", "]", ",", "\n", "\"obj_rot\"", ":", "honet_results", "[", "\"obj_prerot\"", "]", ",", "# in axisang", "\n", "\"obj_verts_3d\"", ":", "honet_results", "[", "\"recov_obj_verts3d\"", "]", ",", "\n", "}", "\n", "ls_results", "[", "-", "1", "]", ".", "update", "(", "extra_results", ")", "\n", "\n", "# ====== for evalutils", "\n", "evalutil_results", "=", "{", "\n", "\"recov_obj_verts3d\"", ":", "honet_results", "[", "\"recov_obj_verts3d\"", "]", ",", "\n", "\"obj_verts2d\"", ":", "honet_results", "[", "\"obj_verts2d\"", "]", ",", "\n", "}", "\n", "ls_results", "[", "-", "1", "]", ".", "update", "(", "evalutil_results", ")", "\n", "\n", "return", "ls_results", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.picr.PicrHourglassPointNet.picr_forward": [[143, 213], ["torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "image_resolution.view.view.view", "image_center_coord.view.view.view", "in_image_mask.float.float.float", "reprojected_grid.unsqueeze.unsqueeze.unsqueeze", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "normed_object_vert_3d_z.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "picr.PicrHourglassPointNet.contact_head", "results.update", "picr.PicrHourglassPointNet.generate_random_rotation().expand().to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "picr.PicrHourglassPointNet.generate_random_direction", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "offset.to.to.to", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "picr.PicrHourglassPointNet.generate_random_rotation().expand", "object_vert_3d.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "picr.PicrHourglassPointNet.generate_random_rotation"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update", "home.repos.pwc.inspect_result.lixiny_CPF.models.picr_offline.PicrOfflineHourglassPointNet.generate_random_direction", "home.repos.pwc.inspect_result.lixiny_CPF.models.picr_offline.PicrOfflineHourglassPointNet.generate_random_rotation"], ["", "def", "picr_forward", "(", "self", ",", "cam_intr", ",", "object_vert_3d", ",", "low_level_feature_map", ",", "image_resolution", ")", ":", "\n", "        ", "\"\"\"\n        low_level_feature_map = TENSOR[NBATCH, 64, 1/4 IMGH, 1/4 IMGW]\n        object_vert_3d = TENSOR[NBATCH, NPOINT, 3]\n        image_resolution = TENSOR[2]\n        \"\"\"", "\n", "results", "=", "{", "}", "\n", "\n", "# ? ================= STAGE 1, index the features >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "if", "self", ".", "training", ":", "\n", "# generate a random_rotation", "\n", "            ", "batch_size", "=", "object_vert_3d", ".", "shape", "[", "0", "]", "\n", "rand_rot", "=", "(", "\n", "self", ".", "generate_random_rotation", "(", "self", ".", "maximal_angle", ")", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ".", "to", "(", "object_vert_3d", ".", "device", ")", "\n", ")", "\n", "mean_obj_v", "=", "torch", ".", "mean", "(", "object_vert_3d", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# TENSOR[NBATCH, 1, 3]", "\n", "object_vert_3d", "=", "(", "\n", "torch", ".", "bmm", "(", "rand_rot", ",", "(", "object_vert_3d", "-", "mean_obj_v", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "+", "mean_obj_v", "\n", ")", "\n", "\n", "# generate a random_direction", "\n", "dir_vec", "=", "self", ".", "generate_random_direction", "(", ")", "\n", "rand_dist", "=", "torch", ".", "normal", "(", "torch", ".", "Tensor", "(", "[", "self", ".", "mean_offset", "]", ")", ",", "torch", ".", "Tensor", "(", "[", "self", ".", "std_offset", "]", ")", ")", "\n", "offset", "=", "rand_dist", "*", "dir_vec", "\n", "offset", "=", "offset", ".", "to", "(", "object_vert_3d", ".", "device", ")", "\n", "object_vert_3d", "=", "object_vert_3d", "+", "offset", "\n", "\n", "", "reprojected_vert", "=", "torch", ".", "bmm", "(", "cam_intr", ",", "object_vert_3d", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "reprojected_vert", "=", "reprojected_vert", "[", ":", ",", ":", ",", ":", "2", "]", "/", "reprojected_vert", "[", ":", ",", ":", ",", "2", ":", "]", "# TENSOR[NBATCH, NPOINT, 2]", "\n", "\n", "image_center_coord", "=", "image_resolution", "/", "2", "# TENSOR[2]", "\n", "image_resolution", "=", "image_resolution", ".", "view", "(", "(", "1", ",", "1", ",", "2", ")", ")", "# TENSOR[1, 1, 2]", "\n", "image_center_coord", "=", "image_center_coord", ".", "view", "(", "(", "1", ",", "1", ",", "2", ")", ")", "# TENSOR[1, 1, 2]", "\n", "reprojected_grid", "=", "(", "reprojected_vert", "-", "image_center_coord", ")", "/", "image_center_coord", "# TENSOR[NBATCH, NPOINT, 2]", "\n", "# compute the in image mask, so that the points fall out of the image can be filtered when calculating loss", "\n", "in_image_mask", "=", "(", "\n", "(", "reprojected_grid", "[", ":", ",", ":", ",", "0", "]", ">=", "-", "1.0", ")", "\n", "&", "(", "reprojected_grid", "[", ":", ",", ":", ",", "0", "]", "<=", "1.0", ")", "\n", "&", "(", "reprojected_grid", "[", ":", ",", ":", ",", "1", "]", ">=", "-", "1.0", ")", "\n", "&", "(", "reprojected_grid", "[", ":", ",", ":", ",", "1", "]", "<=", "1.0", ")", "\n", ")", "\n", "in_image_mask", "=", "in_image_mask", ".", "float", "(", ")", "\n", "# reshape reprojected_grid so that it fits the torch grid_sample interface", "\n", "reprojected_grid", "=", "reprojected_grid", ".", "unsqueeze", "(", "2", ")", "# TENSOR[NBATCH, NPOINT, 1, 2]", "\n", "# by default. grid sampling have zero padding", "\n", "# those points get outside of current featmap will have feature vector all zeros", "\n", "collected_features", "=", "F", ".", "grid_sample", "(", "\n", "low_level_feature_map", ",", "reprojected_grid", ",", "align_corners", "=", "True", "\n", ")", "# TENSOR[NBATCH, 64, NPOINT, 1]", "\n", "\n", "# ? =============== STAGE 2, concate the geometry features >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# z_normed = (z - 0.4)/focal, we uses the focal normalized z value.", "\n", "focal", "=", "cam_intr", "[", ":", ",", ":", "1", ",", ":", "1", "]", "\n", "object_vert_3d_z", "=", "object_vert_3d", "[", ":", ",", ":", ",", "2", ":", "]", "# TENSOR(B, N, 1)", "\n", "normed_object_vert_3d_z", "=", "(", "(", "object_vert_3d_z", "-", "0.4", ")", "/", "focal", ")", "/", "self", ".", "obj_scale_factor", "\n", "normed_object_vert_3d_z", "=", "normed_object_vert_3d_z", ".", "unsqueeze", "(", "1", ")", "# TENSOR(B, 1, N, 1)", "\n", "collected_features", "=", "torch", ".", "cat", "(", "(", "collected_features", ",", "normed_object_vert_3d_z", ")", ",", "dim", "=", "1", ")", "# TENSOR(B, 65, N, 1)", "\n", "\n", "# ? ============== STAGE 3, pass to contact head for vertex contact, region classfication & elasticity >>>>>>>>>", "\n", "vertex_contact_pred", ",", "contact_region_pred", ",", "anchor_elasti_pred", "=", "self", ".", "contact_head", "(", "collected_features", ")", "\n", "results", ".", "update", "(", "\n", "{", "\n", "\"recov_vertex_contact\"", ":", "vertex_contact_pred", ",", "\n", "\"recov_contact_in_image_mask\"", ":", "in_image_mask", ",", "\n", "\"recov_contact_region\"", ":", "contact_region_pred", ",", "\n", "\"recov_anchor_elasti\"", ":", "anchor_elasti_pred", ",", "\n", "}", "\n", ")", "\n", "\n", "return", "results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.models.honet.ManoAdaptor.__init__": [[17, 39], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "honet.ManoAdaptor.register_buffer", "torch.Tensor.new_zeros", "torch.Tensor.new_zeros", "honet.ManoAdaptor.register_buffer", "open", "pickle.load", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mano_layer", ",", "load_path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "adaptor", "=", "torch", ".", "nn", ".", "Linear", "(", "778", ",", "21", ",", "bias", "=", "False", ")", "\n", "if", "load_path", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "load_path", ",", "\"rb\"", ")", "as", "p_f", ":", "\n", "                ", "exp_data", "=", "pickle", ".", "load", "(", "p_f", ")", "\n", "weights", "=", "exp_data", "[", "\"adaptor\"", "]", "\n", "", "regressor", "=", "torch", ".", "Tensor", "(", "weights", ")", "\n", "self", ".", "register_buffer", "(", "\"J_regressor\"", ",", "regressor", ")", "\n", "", "else", ":", "\n", "            ", "regressor", "=", "mano_layer", ".", "_buffers", "[", "\"th_J_regressor\"", "]", "\n", "tip_reg", "=", "regressor", ".", "new_zeros", "(", "5", ",", "regressor", ".", "shape", "[", "1", "]", ")", "\n", "tip_reg", "[", "0", ",", "745", "]", "=", "1", "\n", "tip_reg", "[", "1", ",", "317", "]", "=", "1", "\n", "tip_reg", "[", "2", ",", "444", "]", "=", "1", "\n", "tip_reg", "[", "3", ",", "556", "]", "=", "1", "\n", "tip_reg", "[", "4", ",", "673", "]", "=", "1", "\n", "reordered_reg", "=", "torch", ".", "cat", "(", "[", "regressor", ",", "tip_reg", "]", ")", "[", "\n", "[", "0", ",", "13", ",", "14", ",", "15", ",", "16", ",", "1", ",", "2", ",", "3", ",", "17", ",", "4", ",", "5", ",", "6", ",", "18", ",", "10", ",", "11", ",", "12", ",", "19", ",", "7", ",", "8", ",", "9", ",", "20", "]", "\n", "]", "\n", "self", ".", "register_buffer", "(", "\"J_regressor\"", ",", "reordered_reg", ")", "\n", "", "self", ".", "adaptor", ".", "weight", ".", "data", "=", "self", ".", "J_regressor", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.honet.ManoAdaptor.forward": [[40, 45], ["honet.ManoAdaptor.adaptor", "inp.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "fix_idxs", "=", "[", "0", ",", "4", ",", "8", ",", "12", ",", "16", ",", "20", "]", "\n", "for", "idx", "in", "fix_idxs", ":", "\n", "            ", "self", ".", "adaptor", ".", "weight", ".", "data", "[", "idx", "]", "=", "self", ".", "J_regressor", "[", "idx", "]", "\n", "", "return", "self", ".", "adaptor", "(", "inp", ".", "transpose", "(", "2", ",", "1", ")", ")", ",", "self", ".", "adaptor", ".", "weight", "-", "self", ".", "J_regressor", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.honet.HONet.__init__": [[48, 143], ["torch.Module.__init__", "hocontact.models.transhead.TransHead", "hocontact.models.transhead.TransHead", "hocontact.models.manobranch.ManoBranch", "int", "hocontact.models.bases.resnet.resnet18", "honet.HONet.register_buffer", "honet.ManoAdaptor", "hocontact.utils.netutils.rec_freeze", "int", "hocontact.models.bases.resnet.resnet50", "hocontact.utils.logger.logger.error", "NotImplementedError", "open", "pickle.load", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "int", "int"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__", "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.resnet18", "home.repos.pwc.inspect_result.lixiny_CPF.utils.netutils.rec_freeze", "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.resnet50", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.error"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "fc_dropout", ":", "int", "=", "0", ",", "\n", "resnet_version", ":", "int", "=", "18", ",", "\n", "mano_neurons", ":", "list", "=", "[", "512", ",", "512", "]", ",", "\n", "mano_comps", ":", "int", "=", "15", ",", "\n", "mano_use_pca", ":", "bool", "=", "True", ",", "\n", "mano_use_shape", ":", "bool", "=", "True", ",", "\n", "mano_center_idx", ":", "int", "=", "9", ",", "\n", "mano_root", ":", "str", "=", "\"assets/mano\"", ",", "\n", "mano_pose_coeff", ":", "int", "=", "1", ",", "\n", "mano_fhb_hand", ":", "bool", "=", "False", ",", "\n", "## all lambdas :", "\n", "mano_lambda_recov_joints3d", "=", "None", ",", "\n", "mano_lambda_recov_verts3d", "=", "None", ",", "\n", "mano_lambda_shape", "=", "0", ",", "\n", "mano_lambda_pose_reg", "=", "0", ",", "\n", "obj_lambda_recov_verts3d", "=", "None", ",", "\n", "obj_lambda_recov_verts2d", "=", "None", ",", "\n", "obj_trans_factor", "=", "1", ",", "\n", "obj_scale_factor", "=", "1", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            mano_fhb_hand: Use pre-computed mapping from MANO joints to First Person\n            Hand Action Benchmark hand skeleton\n            mano_root (path): dir containing mano pickle files\n            mano_neurons: number of neurons in each layer of base mano decoder\n            mano_use_pca: predict pca parameters directly instead of rotation\n                angles\n            mano_comps (int): number of principal components to use if\n                mano_use_pca\n            mano_lambda_pca: weight to supervise hand pose in PCA space\n            mano_lambda_pose_reg: weight to supervise hand pose in axis-angle\n                space\n            mano_lambda_verts: weight to supervise vertex distances\n            mano_lambda_joints3d: weight to supervise distances\n            adapt_atlas_decoder: add layer between encoder and decoder, usefull\n                when finetuning from separately pretrained encoder and decoder\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "int", "(", "resnet_version", ")", "==", "18", ":", "\n", "            ", "img_feature_size", "=", "512", "\n", "base_net", "=", "resnet", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "int", "(", "resnet_version", ")", "==", "50", ":", "\n", "            ", "img_feature_size", "=", "2048", "\n", "base_net", "=", "resnet", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "error", "(", "\"Resnet {} not supported\"", ".", "format", "(", "resnet_version", ")", ")", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "mano_base_neurons", "=", "[", "img_feature_size", "]", "+", "mano_neurons", "\n", "self", ".", "mano_fhb_hand", "=", "mano_fhb_hand", "\n", "self", ".", "base_net", "=", "base_net", "\n", "# Predict translation and scaling for hand", "\n", "self", ".", "mano_transhead", "=", "TransHead", "(", "base_neurons", "=", "[", "img_feature_size", ",", "int", "(", "img_feature_size", "/", "2", ")", "]", ",", "out_dim", "=", "3", ")", "\n", "# Predict translation, scaling and rotation for object", "\n", "self", ".", "obj_transhead", "=", "TransHead", "(", "base_neurons", "=", "[", "img_feature_size", ",", "int", "(", "img_feature_size", "/", "2", ")", "]", ",", "out_dim", "=", "6", ")", "\n", "\n", "self", ".", "obj_scale_factor", "=", "obj_scale_factor", "\n", "self", ".", "obj_trans_factor", "=", "obj_trans_factor", "\n", "\n", "self", ".", "mano_branch", "=", "ManoBranch", "(", "\n", "ncomps", "=", "mano_comps", ",", "\n", "base_neurons", "=", "mano_base_neurons", ",", "\n", "dropout", "=", "fc_dropout", ",", "\n", "mano_pose_coeff", "=", "mano_pose_coeff", ",", "\n", "mano_root", "=", "mano_root", ",", "\n", "center_idx", "=", "mano_center_idx", ",", "\n", "use_pca", "=", "mano_use_pca", ",", "\n", "use_shape", "=", "mano_use_shape", ",", "\n", ")", "\n", "self", ".", "mano_center_idx", "=", "mano_center_idx", "\n", "\n", "self", ".", "adaptor", "=", "None", "\n", "if", "self", ".", "mano_fhb_hand", ":", "\n", "            ", "load_fhb_path", "=", "f\"assets/mano/fhb_skel_centeridx{mano_center_idx}.pkl\"", "\n", "with", "open", "(", "load_fhb_path", ",", "\"rb\"", ")", "as", "p_f", ":", "\n", "                ", "exp_data", "=", "pickle", ".", "load", "(", "p_f", ")", "\n", "", "self", ".", "register_buffer", "(", "\"fhb_shape\"", ",", "torch", ".", "Tensor", "(", "exp_data", "[", "\"shape\"", "]", ")", ")", "\n", "self", ".", "adaptor", "=", "ManoAdaptor", "(", "self", ".", "mano_branch", ".", "mano_layer", ",", "load_fhb_path", ")", "\n", "netutils", ".", "rec_freeze", "(", "self", ".", "adaptor", ")", "\n", "\n", "", "self", ".", "mano_lambdas", "=", "False", "\n", "if", "mano_lambda_recov_joints3d", "or", "mano_lambda_recov_verts3d", ":", "\n", "            ", "self", ".", "mano_lambdas", "=", "True", "\n", "\n", "", "self", ".", "obj_lambdas", "=", "False", "\n", "if", "obj_lambda_recov_verts3d", "or", "obj_lambda_recov_verts2d", ":", "\n", "            ", "self", ".", "obj_lambdas", "=", "True", "\n", "\n", "", "self", ".", "mano_lambda_recov_joints3d", "=", "mano_lambda_recov_joints3d", "\n", "self", ".", "mano_lambda_recov_verts3d", "=", "mano_lambda_recov_verts3d", "\n", "self", ".", "obj_lambda_recov_verts3d", "=", "obj_lambda_recov_verts3d", "\n", "self", ".", "obj_lambda_recov_verts2d", "=", "obj_lambda_recov_verts2d", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.honet.HONet.recover_mano": [[144, 186], ["honet.HONet.mano_branch", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "honet.HONet.adaptor", "adapt_joints.transpose.transpose.transpose", "honet.HONet.mano_transhead", "tuple", "sample[].to", "hocontact.models.transhead.recover_3d_proj", "hocontact.utils.handutils.batch_proj2d", "hocontact.utils.handutils.batch_proj2d", "adapt_joints[].unsqueeze", "adapt_joints[].unsqueeze", "trans.unsqueeze", "scale.view"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.models.transhead.recover_3d_proj", "home.repos.pwc.inspect_result.lixiny_CPF.utils.handutils.batch_proj2d", "home.repos.pwc.inspect_result.lixiny_CPF.utils.handutils.batch_proj2d"], ["", "def", "recover_mano", "(", "self", ",", "sample", ",", "features", ",", "rank", "=", "None", ")", ":", "\n", "# Get hand projection, centered", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "if", "rank", "is", "None", "else", "torch", ".", "device", "(", "f\"cuda:{rank}\"", ")", "\n", "\n", "mano_results", "=", "self", ".", "mano_branch", "(", "features", ")", "\n", "if", "self", ".", "adaptor", ":", "\n", "            ", "adapt_joints", ",", "_", "=", "self", ".", "adaptor", "(", "mano_results", "[", "\"verts3d\"", "]", ")", "\n", "adapt_joints", "=", "adapt_joints", ".", "transpose", "(", "1", ",", "2", ")", "\n", "mano_results", "[", "\"joints3d\"", "]", "=", "adapt_joints", "-", "adapt_joints", "[", ":", ",", "self", ".", "mano_center_idx", "]", ".", "unsqueeze", "(", "1", ")", "\n", "mano_results", "[", "\"verts3d\"", "]", "=", "mano_results", "[", "\"verts3d\"", "]", "-", "adapt_joints", "[", ":", ",", "self", ".", "mano_center_idx", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Recover hand position in camera coordinates", "\n", "", "if", "self", ".", "mano_lambda_recov_joints3d", "or", "self", ".", "mano_lambda_recov_verts3d", ":", "\n", "            ", "scaletrans", "=", "self", ".", "mano_transhead", "(", "features", ")", "\n", "trans", "=", "scaletrans", "[", ":", ",", "1", ":", "]", "\n", "scale", "=", "scaletrans", "[", ":", ",", ":", "1", "]", "\n", "\n", "final_trans", "=", "trans", ".", "unsqueeze", "(", "1", ")", "*", "self", ".", "obj_trans_factor", "\n", "final_scale", "=", "scale", ".", "view", "(", "scale", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "*", "self", ".", "obj_scale_factor", "\n", "height", ",", "width", "=", "tuple", "(", "sample", "[", "TransQueries", ".", "IMAGE", "]", ".", "shape", "[", "2", ":", "]", ")", "\n", "camintr", "=", "sample", "[", "TransQueries", ".", "CAM_INTR", "]", ".", "to", "(", "device", ")", "\n", "recov_joints3d", ",", "hand_center3d", "=", "recover_3d_proj", "(", "\n", "mano_results", "[", "\"joints3d\"", "]", ",", "camintr", ",", "final_scale", ",", "final_trans", ",", "input_res", "=", "(", "width", ",", "height", ")", "\n", ")", "\n", "recov_hand_verts3d", "=", "mano_results", "[", "\"verts3d\"", "]", "+", "hand_center3d", "\n", "proj_joints2d", "=", "handutils", ".", "batch_proj2d", "(", "recov_joints3d", ",", "camintr", ")", "\n", "proj_verts2d", "=", "handutils", ".", "batch_proj2d", "(", "recov_hand_verts3d", ",", "camintr", ")", "\n", "\n", "# * @Xinyu: mano_results[\"recov_joints3d\"] = mano_results[\"joints3d\"] + mano_results[\"hand_center3d\"]", "\n", "mano_results", "[", "\"joints2d\"", "]", "=", "proj_joints2d", "\n", "mano_results", "[", "\"hand_center3d\"", "]", "=", "hand_center3d", "# ===== To PICR =====", "\n", "mano_results", "[", "\"recov_joints3d\"", "]", "=", "recov_joints3d", "# ===== To PICR =====", "\n", "mano_results", "[", "\"recov_hand_verts3d\"", "]", "=", "recov_hand_verts3d", "# ===== To PICR =====", "\n", "mano_results", "[", "\"verts2d\"", "]", "=", "proj_verts2d", "\n", "mano_results", "[", "\"hand_pretrans\"", "]", "=", "trans", "\n", "mano_results", "[", "\"hand_prescale\"", "]", "=", "scale", "\n", "mano_results", "[", "\"hand_trans\"", "]", "=", "final_trans", "\n", "mano_results", "[", "\"hand_scale\"", "]", "=", "final_scale", "\n", "# * @Xinyu:  mano_results[\"full_pose\"]  ===== To PICR =====", "\n", "# * @Xinyu:  mano_results[\"shape\"]  ===== To PICR =====", "\n", "\n", "", "return", "mano_results", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.honet.HONet.recover_object": [[187, 243], ["honet.HONet.obj_transhead", "manopth.rodrigues_layer.batch_rodrigues().view", "sample[].to", "manopth.rodrigues_layer.batch_rodrigues().view.bmm().transpose", "tuple", "sample[].to", "hocontact.models.transhead.recover_3d_proj", "hocontact.utils.handutils.batch_proj2d", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "trans.unsqueeze", "scale.view", "sample[].to", "manopth.rodrigues_layer.batch_rodrigues().view.bmm().transpose", "hocontact.utils.handutils.batch_proj2d", "manopth.rodrigues_layer.batch_rodrigues", "manopth.rodrigues_layer.batch_rodrigues().view.bmm", "sample[].to.float().transpose", "manopth.rodrigues_layer.batch_rodrigues().view.bmm", "sample[].to.float().transpose", "sample[].to.float", "sample[].to.float"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.models.transhead.recover_3d_proj", "home.repos.pwc.inspect_result.lixiny_CPF.utils.handutils.batch_proj2d", "home.repos.pwc.inspect_result.lixiny_CPF.utils.handutils.batch_proj2d"], ["", "def", "recover_object", "(", "self", ",", "sample", ",", "features", ",", "rank", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Compute object vertex and corner positions in camera coordinates by predicting object translation\n        and scaling, and recovering 3D positions given known object model\n        \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "if", "rank", "is", "None", "else", "torch", ".", "device", "(", "f\"cuda:{rank}\"", ")", "\n", "\n", "scaletrans_obj", "=", "self", ".", "obj_transhead", "(", "features", ")", "\n", "batch_size", "=", "scaletrans_obj", ".", "shape", "[", "0", "]", "\n", "scale", "=", "scaletrans_obj", "[", ":", ",", ":", "1", "]", "\n", "trans", "=", "scaletrans_obj", "[", ":", ",", "1", ":", "3", "]", "\n", "rotaxisang", "=", "scaletrans_obj", "[", ":", ",", "3", ":", "]", "\n", "\n", "rotmat", "=", "rodrigues_layer", ".", "batch_rodrigues", "(", "rotaxisang", ")", ".", "view", "(", "rotaxisang", ".", "shape", "[", "0", "]", ",", "3", ",", "3", ")", "\n", "can_obj_verts", "=", "sample", "[", "BaseQueries", ".", "OBJ_CAN_VERTS", "]", ".", "to", "(", "device", ")", "\n", "rot_obj_verts", "=", "rotmat", ".", "bmm", "(", "can_obj_verts", ".", "float", "(", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "final_trans", "=", "trans", ".", "unsqueeze", "(", "1", ")", "*", "self", ".", "obj_trans_factor", "\n", "final_scale", "=", "scale", ".", "view", "(", "batch_size", ",", "1", ",", "1", ")", "*", "self", ".", "obj_scale_factor", "\n", "height", ",", "width", "=", "tuple", "(", "sample", "[", "TransQueries", ".", "IMAGE", "]", ".", "shape", "[", "2", ":", "]", ")", "\n", "camintr", "=", "sample", "[", "TransQueries", ".", "CAM_INTR", "]", ".", "to", "(", "device", ")", "\n", "recov_obj_verts3d", ",", "obj_center3d", "=", "recover_3d_proj", "(", "\n", "rot_obj_verts", ",", "camintr", ",", "final_scale", ",", "final_trans", ",", "input_res", "=", "(", "width", ",", "height", ")", "\n", ")", "\n", "\n", "# Recover 2D positions given camera intrinsic parameters and object vertex", "\n", "# coordinates in camera coordinate reference", "\n", "pred_obj_verts2d", "=", "handutils", ".", "batch_proj2d", "(", "recov_obj_verts3d", ",", "camintr", ")", "\n", "if", "BaseQueries", ".", "OBJ_CORNERS_3D", "in", "sample", ":", "\n", "            ", "can_obj_corners", "=", "sample", "[", "BaseQueries", ".", "OBJ_CAN_CORNERS", "]", ".", "to", "(", "device", ")", "\n", "rot_obj_corners", "=", "rotmat", ".", "bmm", "(", "can_obj_corners", ".", "float", "(", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "recov_obj_corners3d", "=", "rot_obj_corners", "+", "obj_center3d", "\n", "pred_obj_corners2d", "=", "handutils", ".", "batch_proj2d", "(", "recov_obj_corners3d", ",", "camintr", ")", "\n", "", "else", ":", "\n", "            ", "pred_obj_corners2d", "=", "None", "\n", "recov_obj_corners3d", "=", "None", "\n", "rot_obj_corners", "=", "None", "\n", "\n", "#  @Xinyu: obj_results[\"recov_obj_verts3d\"] = \\", "\n", "#      obj_results[\"rotaxisang\"] @  OBJ_CAN_VERTS + obj_results[\"obj_center3d\"]", "\n", "", "obj_results", "=", "{", "\n", "\"obj_verts2d\"", ":", "pred_obj_verts2d", ",", "\n", "\"obj_verts3d\"", ":", "rot_obj_verts", ",", "\n", "\"obj_center3d\"", ":", "obj_center3d", ",", "# ===== To PICR =====", "\n", "\"recov_obj_verts3d\"", ":", "recov_obj_verts3d", ",", "# ===== To PICR =====", "\n", "\"recov_obj_corners3d\"", ":", "recov_obj_corners3d", ",", "\n", "\"obj_scale\"", ":", "final_scale", ",", "\n", "\"obj_prescale\"", ":", "scale", ",", "\n", "\"obj_prerot\"", ":", "rotaxisang", ",", "# ===== To PICR =====", "\n", "\"obj_trans\"", ":", "final_trans", ",", "\n", "\"obj_pretrans\"", ":", "trans", ",", "\n", "\"obj_corners2d\"", ":", "pred_obj_corners2d", ",", "\n", "\"obj_corners3d\"", ":", "rot_obj_corners", ",", "\n", "}", "\n", "\n", "return", "obj_results", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.honet.HONet.forward": [[244, 269], ["sample[].to", "honet.HONet.base_net", "hocontact.hodatasets.hoquery.one_query_in", "hocontact.hodatasets.hoquery.one_query_in", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "sample.keys", "sample.keys", "honet.HONet.recover_mano", "results.update", "honet.HONet.recover_object", "results.update"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hoquery.one_query_in", "home.repos.pwc.inspect_result.lixiny_CPF.hodatasets.hoquery.one_query_in", "home.repos.pwc.inspect_result.lixiny_CPF.models.honet.HONet.recover_mano", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update", "home.repos.pwc.inspect_result.lixiny_CPF.models.honet.HONet.recover_object", "home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update"], ["", "def", "forward", "(", "self", ",", "sample", ",", "rank", "=", "None", ")", ":", "\n", "        ", "if", "rank", "is", "None", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "f\"cuda:{rank}\"", ")", "\n", "", "results", "=", "{", "}", "\n", "image", "=", "sample", "[", "TransQueries", ".", "IMAGE", "]", ".", "to", "(", "device", ")", "\n", "features", ",", "_", "=", "self", ".", "base_net", "(", "image", ")", "\n", "\n", "has_mano_supv", "=", "one_query_in", "(", "\n", "sample", ".", "keys", "(", ")", ",", "\n", "[", "TransQueries", ".", "JOINTS_3D", ",", "TransQueries", ".", "JOINTS_2D", ",", "TransQueries", ".", "HAND_VERTS_2D", ",", "TransQueries", ".", "HAND_VERTS_3D", ",", "]", ",", "\n", ")", "\n", "\n", "has_obj_supv", "=", "one_query_in", "(", "sample", ".", "keys", "(", ")", ",", "[", "TransQueries", ".", "OBJ_VERTS_2D", ",", "TransQueries", ".", "OBJ_VERTS_3D", "]", ")", "\n", "\n", "if", "has_mano_supv", "and", "self", ".", "mano_lambdas", ":", "\n", "            ", "mano_results", "=", "self", ".", "recover_mano", "(", "sample", ",", "features", ",", "rank", ")", "\n", "results", ".", "update", "(", "mano_results", ")", "\n", "\n", "", "if", "has_obj_supv", "and", "self", ".", "obj_lambdas", ":", "\n", "            ", "obj_results", "=", "self", ".", "recover_object", "(", "sample", ",", "features", ",", "rank", ")", "\n", "results", ".", "update", "(", "obj_results", ")", "\n", "\n", "", "return", "results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.models.transhead.TransHead.__init__": [[8, 21], ["torch.Module.__init__", "zip", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "hocontact.utils.logger.logger.error", "ValueError", "layers.append", "layers.append", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__", "home.repos.pwc.inspect_result.lixiny_CPF.utils.logger.Logger.error"], ["    ", "def", "__init__", "(", "self", ",", "base_neurons", "=", "[", "515", ",", "256", "]", ",", "out_dim", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "out_dim", "!=", "3", "and", "out_dim", "!=", "6", ":", "\n", "            ", "logger", ".", "error", "(", "f\"Unrecognized transhead out dim: {out_dim}\"", ")", "\n", "raise", "ValueError", "(", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "for", "(", "inp_neurons", ",", "out_neurons", ")", "in", "zip", "(", "base_neurons", "[", ":", "-", "1", "]", ",", "base_neurons", "[", "1", ":", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "inp_neurons", ",", "out_neurons", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "self", ".", "final_layer", "=", "nn", ".", "Linear", "(", "out_neurons", ",", "out_dim", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.transhead.TransHead.forward": [[22, 26], ["transhead.TransHead.decoder", "transhead.TransHead.final_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "inp", ")", "\n", "out", "=", "self", ".", "final_layer", "(", "decoded", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.transhead.recover_3d_proj": [[28, 47], ["focal.view.view", "est_scale.view.view", "est_trans.view.view", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat", "torch.cat", "cam_centers.new"], "function", ["None"], ["", "", "def", "recover_3d_proj", "(", "objpoints3d", ",", "camintr", ",", "est_scale", ",", "est_trans", ",", "off_z", "=", "0.4", ",", "input_res", "=", "(", "128", ",", "128", ")", ")", ":", "\n", "    ", "\"\"\"\n    Given estimated centered points, camera intrinsics and predicted scale and translation\n    in pixel world, compute the point coordinates in camera coordinate system\n    \"\"\"", "\n", "# Estimate scale and trans between 3D and 2D", "\n", "focal", "=", "camintr", "[", ":", ",", ":", "1", ",", ":", "1", "]", "\n", "batch_size", "=", "objpoints3d", ".", "shape", "[", "0", "]", "\n", "focal", "=", "focal", ".", "view", "(", "batch_size", ",", "1", ")", "\n", "est_scale", "=", "est_scale", ".", "view", "(", "batch_size", ",", "1", ")", "\n", "est_trans", "=", "est_trans", ".", "view", "(", "batch_size", ",", "2", ")", "\n", "# est_scale is homogeneous to object scale change in pixels", "\n", "est_Z0", "=", "focal", "*", "est_scale", "+", "off_z", "\n", "cam_centers", "=", "camintr", "[", ":", ",", ":", "2", ",", "2", "]", "\n", "img_centers", "=", "(", "cam_centers", ".", "new", "(", "input_res", ")", "/", "2", ")", ".", "view", "(", "1", ",", "2", ")", ".", "repeat", "(", "batch_size", ",", "1", ")", "\n", "est_XY0", "=", "(", "est_trans", "+", "img_centers", "-", "cam_centers", ")", "*", "est_Z0", "/", "focal", "\n", "est_c3d", "=", "torch", ".", "cat", "(", "[", "est_XY0", ",", "est_Z0", "]", ",", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "#TENSOR(B, 1, 3)", "\n", "recons3d", "=", "est_c3d", "+", "objpoints3d", "\n", "return", "recons3d", ",", "est_c3d", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.transhead.test": [[49, 53], ["transhead.TransHead", "torch.rand", "torch.rand", "TransHead."], "function", ["None"], ["", "def", "test", "(", ")", ":", "\n", "    ", "trans_head", "=", "TransHead", "(", ")", "\n", "x", "=", "torch", ".", "rand", "(", "(", "16", ",", "2048", ")", ")", "\n", "x", "=", "trans_head", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.picr_offline.PicrOfflineHourglassPointNet.__init__": [[15, 45], ["torch.Module.__init__", "hocontact.models.bases.hourglass.StackedHourglass", "hocontact.models.contacthead.PointNetContactHead", "hocontact.models.contacthead.PointNetContactHead"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "picr_use_hand_pose", "=", "False", ",", "\n", "hg_stacks", "=", "2", ",", "\n", "hg_blocks", "=", "1", ",", "\n", "hg_classes", "=", "64", ",", "\n", "obj_scale_factor", "=", "1.0", ",", "\n", "mean_offset", "=", "0.020", ",", "\n", "std_offset", "=", "0.005", ",", "\n", "maximal_angle", "=", "math", ".", "pi", "/", "12", ",", "\n", ")", ":", "\n", "        ", "super", "(", "PicrOfflineHourglassPointNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "obj_scale_factor", "=", "obj_scale_factor", "\n", "self", ".", "picr_use_hand_pose", "=", "picr_use_hand_pose", "\n", "\n", "# ================ CREATE BASE NET >>>>>>>>>>>>>>>>>>>>", "\n", "self", ".", "base_net", "=", "hourglass", ".", "StackedHourglass", "(", "hg_stacks", ",", "hg_blocks", ",", "hg_classes", ")", "\n", "self", ".", "intermediate_feature_size", "=", "hg_classes", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ================ CREATE HEADERS >>>>>>>>>>>>>>>>>>>>>", "\n", "if", "self", ".", "picr_use_hand_pose", ":", "\n", "            ", "self", ".", "contact_head", "=", "PointNetContactHead", "(", "\n", "feat_dim", "=", "self", ".", "intermediate_feature_size", "+", "48", "+", "1", ",", "n_region", "=", "17", ",", "n_anchor", "=", "4", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "contact_head", "=", "PointNetContactHead", "(", "feat_dim", "=", "self", ".", "intermediate_feature_size", "+", "1", ",", "n_region", "=", "17", ",", "n_anchor", "=", "4", ")", "\n", "", "self", ".", "mean_offset", "=", "mean_offset", "\n", "self", ".", "std_offset", "=", "std_offset", "\n", "self", ".", "maximal_angle", "=", "maximal_angle", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.picr_offline.PicrOfflineHourglassPointNet.generate_random_direction": [[47, 57], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.float", "torch.tensor.float", "torch.tensor.float", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "generate_random_direction", "(", ")", ":", "\n", "# first get azimuthal angle", "\n", "        ", "azi", "=", "torch", ".", "rand", "(", "1", ")", "*", "2", "*", "math", ".", "pi", "\n", "# next get inclination angle", "\n", "cos_inc", "=", "1", "-", "2", "*", "torch", ".", "rand", "(", "1", ")", "\n", "sin_inc", "=", "torch", ".", "sqrt", "(", "1", "-", "cos_inc", "**", "2", ")", "\n", "# gen vec", "\n", "vec", "=", "torch", ".", "tensor", "(", "[", "sin_inc", "*", "torch", ".", "cos", "(", "azi", ")", ",", "sin_inc", "*", "torch", ".", "sin", "(", "azi", ")", ",", "cos_inc", "]", ")", "\n", "return", "vec", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.picr_offline.PicrOfflineHourglassPointNet.generate_random_rotation": [[58, 65], ["picr_offline.PicrOfflineHourglassPointNet.generate_random_direction", "manopth.rodrigues_layer.batch_rodrigues().view", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "manopth.rodrigues_layer.batch_rodrigues", "picr_offline.PicrOfflineHourglassPointNet.generate_random_direction"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.models.picr_offline.PicrOfflineHourglassPointNet.generate_random_direction", "home.repos.pwc.inspect_result.lixiny_CPF.models.picr_offline.PicrOfflineHourglassPointNet.generate_random_direction"], ["", "@", "staticmethod", "\n", "def", "generate_random_rotation", "(", "max_angle", ")", ":", "\n", "        ", "axisang", "=", "PicrOfflineHourglassPointNet", ".", "generate_random_direction", "(", ")", "\n", "angle", "=", "torch", ".", "rand", "(", "1", ")", "*", "max_angle", "\n", "axisang", "=", "axisang", "*", "angle", "\n", "rot_mat", "=", "batch_rodrigues", "(", "axisang", ".", "unsqueeze", "(", "0", ")", ")", ".", "view", "(", "1", ",", "3", ",", "3", ")", "\n", "return", "rot_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.picr_offline.PicrOfflineHourglassPointNet.forward": [[66, 97], ["torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "image.to.to.to", "image_resolution.to.to.to", "picr_offline.PicrOfflineHourglassPointNet.base_net", "sample[].float", "sample[].float", "sample[].float", "objverts3d.to.to.to", "cam_intr.to.to.to", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "picr_offline.PicrOfflineHourglassPointNet.picr_forward", "ls_results.append", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.models.picr_offline.PicrOfflineHourglassPointNet.picr_forward"], ["", "def", "forward", "(", "self", ",", "sample", ",", "rank", "=", "None", ")", ":", "\n", "        ", "ls_results", "=", "[", "]", "\n", "if", "rank", "is", "None", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "f\"cuda:{rank}\"", ")", "\n", "\n", "", "image", "=", "sample", "[", "TransQueries", ".", "IMAGE", "]", "\n", "image_resolution", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "image", ".", "shape", "[", "3", "]", ",", "image", ".", "shape", "[", "2", "]", "]", ")", ")", ".", "float", "(", ")", "# TENSOR[2]", "\n", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "image_resolution", "=", "image_resolution", ".", "to", "(", "device", ")", "\n", "\n", "ls_hg_feature", ",", "_", "=", "self", ".", "base_net", "(", "image", ")", "# prefix [ ls_ ] = list", "\n", "has_contact_supv", "=", "True", "\n", "\n", "# * if block rot, then TransQueries.OBJ_VERTS_3D is equal to BaseQueries.OBJ_VERTS_3D", "\n", "objverts3d", "=", "sample", "[", "TransQueries", ".", "OBJ_VERTS_3D", "]", ".", "float", "(", ")", "\n", "handposewrtcam", "=", "sample", "[", "BaseQueries", ".", "HAND_POSE_WRT_CAM", "]", ".", "float", "(", ")", "# TENSOR[NBATCH, 48]", "\n", "cam_intr", "=", "sample", "[", "TransQueries", ".", "CAM_INTR", "]", ".", "float", "(", ")", "\n", "objverts3d", "=", "objverts3d", ".", "to", "(", "device", ")", "\n", "cam_intr", "=", "cam_intr", ".", "to", "(", "device", ")", "\n", "\n", "if", "has_contact_supv", ":", "\n", "            ", "for", "i_stack", "in", "range", "(", "self", ".", "base_net", ".", "nstacks", ")", ":", "# RANGE 2", "\n", "                ", "i_hg_feature", "=", "ls_hg_feature", "[", "i_stack", "]", "# TENSOR[NBATCH, 64, 1/4 ?, 1/4 ?]", "\n", "i_contact_results", "=", "self", ".", "picr_forward", "(", "\n", "cam_intr", ",", "objverts3d", ",", "i_hg_feature", ",", "image_resolution", ",", "handposewrtcam", "\n", ")", "\n", "ls_results", ".", "append", "(", "i_contact_results", ")", "\n", "\n", "", "", "return", "ls_results", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.models.picr_offline.PicrOfflineHourglassPointNet.picr_forward": [[99, 181], ["torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "image_resolution.view.view.view", "image_center_coord.view.view.view", "in_image_mask.float.float.float", "reprojected_grid.unsqueeze.unsqueeze.unsqueeze", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "normed_object_vert_3d_z.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "picr_offline.PicrOfflineHourglassPointNet.contact_head", "results.update", "picr_offline.PicrOfflineHourglassPointNet.generate_random_rotation().expand().to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "picr_offline.PicrOfflineHourglassPointNet.generate_random_direction", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "offset.to.to.to", "hand_pose_wrt_cam.expand.expand.unsqueeze().unsqueeze", "hand_pose_wrt_cam.expand.expand.expand", "to_concat_list.append", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "picr_offline.PicrOfflineHourglassPointNet.generate_random_rotation().expand", "object_vert_3d.transpose", "hand_pose_wrt_cam.expand.expand.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "picr_offline.PicrOfflineHourglassPointNet.generate_random_rotation"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.eval.evalutils.AverageMeter.update", "home.repos.pwc.inspect_result.lixiny_CPF.models.picr_offline.PicrOfflineHourglassPointNet.generate_random_direction", "home.repos.pwc.inspect_result.lixiny_CPF.models.picr_offline.PicrOfflineHourglassPointNet.generate_random_rotation"], ["", "def", "picr_forward", "(", "self", ",", "cam_intr", ",", "object_vert_3d", ",", "low_level_feature_map", ",", "image_resolution", ",", "hand_pose_wrt_cam", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        low_level_feature_map = TENSOR[NBATCH, 64, 1/4 IMGH, 1/4 IMGW]\n        object_vert_3d = TENSOR[NBATCH, NPOINT, 3]\n        hand_pose_wrt_cam = TENSOR[NBATCH, 48]\n        image_resolution = TENSOR[2]\n        \"\"\"", "\n", "results", "=", "{", "}", "\n", "\n", "# ? ================= STAGE 1, index the features >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "if", "self", ".", "training", ":", "\n", "# generate a random_rotation", "\n", "            ", "batch_size", "=", "object_vert_3d", ".", "shape", "[", "0", "]", "\n", "rand_rot", "=", "(", "\n", "self", ".", "generate_random_rotation", "(", "self", ".", "maximal_angle", ")", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ".", "to", "(", "object_vert_3d", ".", "device", ")", "\n", ")", "\n", "mean_obj_v", "=", "torch", ".", "mean", "(", "object_vert_3d", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# TENSOR[NBATCH, 1, 3]", "\n", "object_vert_3d", "=", "(", "\n", "torch", ".", "bmm", "(", "rand_rot", ",", "(", "object_vert_3d", "-", "mean_obj_v", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "+", "mean_obj_v", "\n", ")", "\n", "\n", "# generate a random_direction", "\n", "dir_vec", "=", "self", ".", "generate_random_direction", "(", ")", "\n", "rand_dist", "=", "torch", ".", "normal", "(", "torch", ".", "Tensor", "(", "[", "self", ".", "mean_offset", "]", ")", ",", "torch", ".", "Tensor", "(", "[", "self", ".", "std_offset", "]", ")", ")", "\n", "offset", "=", "rand_dist", "*", "dir_vec", "\n", "offset", "=", "offset", ".", "to", "(", "object_vert_3d", ".", "device", ")", "\n", "object_vert_3d", "=", "object_vert_3d", "+", "offset", "\n", "\n", "", "reprojected_vert", "=", "torch", ".", "bmm", "(", "cam_intr", ",", "object_vert_3d", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "reprojected_vert", "=", "reprojected_vert", "[", ":", ",", ":", ",", ":", "2", "]", "/", "reprojected_vert", "[", ":", ",", ":", ",", "2", ":", "]", "# TENSOR[NBATCH, NPOINT, 2]", "\n", "\n", "image_center_coord", "=", "image_resolution", "/", "2", "# TENSOR[2]", "\n", "image_resolution", "=", "image_resolution", ".", "view", "(", "(", "1", ",", "1", ",", "2", ")", ")", "# TENSOR[1, 1, 2]", "\n", "image_center_coord", "=", "image_center_coord", ".", "view", "(", "(", "1", ",", "1", ",", "2", ")", ")", "# TENSOR[1, 1, 2]", "\n", "reprojected_grid", "=", "(", "reprojected_vert", "-", "image_center_coord", ")", "/", "image_center_coord", "# TENSOR[NBATCH, NPOINT, 2]", "\n", "# compute the in image mask, so that the points fall out of the image can be filtered when calculating loss", "\n", "in_image_mask", "=", "(", "\n", "(", "reprojected_grid", "[", ":", ",", ":", ",", "0", "]", ">=", "-", "1.0", ")", "\n", "&", "(", "reprojected_grid", "[", ":", ",", ":", ",", "0", "]", "<=", "1.0", ")", "\n", "&", "(", "reprojected_grid", "[", ":", ",", ":", ",", "1", "]", ">=", "-", "1.0", ")", "\n", "&", "(", "reprojected_grid", "[", ":", ",", ":", ",", "1", "]", "<=", "1.0", ")", "\n", ")", "\n", "in_image_mask", "=", "in_image_mask", ".", "float", "(", ")", "\n", "# reshape reprojected_grid so that it fits the torch grid_sample interface", "\n", "reprojected_grid", "=", "reprojected_grid", ".", "unsqueeze", "(", "2", ")", "# TENSOR[NBATCH, NPOINT, 1, 2]", "\n", "# by default. grid sampling have zero padding", "\n", "# those points get outside of current featmap will have feature vector all zeros", "\n", "collected_features", "=", "F", ".", "grid_sample", "(", "\n", "low_level_feature_map", ",", "reprojected_grid", ",", "align_corners", "=", "True", "\n", ")", "# TENSOR[NBATCH, 64, NPOINT, 1]", "\n", "\n", "# ? =============== STAGE 2, concate the geometry features >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# z_normed = (z - 0.4)/focal, we uses the focal normalized z value.", "\n", "focal", "=", "cam_intr", "[", ":", ",", ":", "1", ",", ":", "1", "]", "\n", "# object_vert_3d_xy = object_vert_3d[:, :, :2]  # TENSOR(B, N, 2)", "\n", "# object_vert_3d_xy = object_vert_3d_xy.unsqueeze(-1).permute(0, 2, 1, 3)  # TENSOR(B, 2, N, 1)", "\n", "object_vert_3d_z", "=", "object_vert_3d", "[", ":", ",", ":", ",", "2", ":", "]", "# TENSOR(B, N, 1)", "\n", "normed_object_vert_3d_z", "=", "(", "(", "object_vert_3d_z", "-", "0.4", ")", "/", "focal", ")", "/", "self", ".", "obj_scale_factor", "\n", "normed_object_vert_3d_z", "=", "normed_object_vert_3d_z", ".", "unsqueeze", "(", "1", ")", "# TENSOR(B, 1, N, 1)", "\n", "to_concat_list", "=", "[", "collected_features", ",", "normed_object_vert_3d_z", "]", "\n", "\n", "if", "self", ".", "picr_use_hand_pose", ":", "\n", "# hand features", "\n", "            ", "num_points", "=", "object_vert_3d", ".", "shape", "[", "1", "]", "\n", "hand_pose_wrt_cam", "=", "hand_pose_wrt_cam", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# TENSOR(B, 48, 1, 1)", "\n", "hand_pose_wrt_cam", "=", "hand_pose_wrt_cam", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "num_points", ",", "1", ")", "\n", "to_concat_list", ".", "append", "(", "hand_pose_wrt_cam", ")", "\n", "\n", "", "collected_features", "=", "torch", ".", "cat", "(", "to_concat_list", ",", "dim", "=", "1", ")", "# TENSOR(B, 113, N, 1)", "\n", "\n", "# ? ============== STAGE 3, pass to contact head for vertex contact, region classfication & elasticity >>>>>>>>>", "\n", "vertex_contact_pred", ",", "contact_region_pred", ",", "anchor_elasti_pred", "=", "self", ".", "contact_head", "(", "collected_features", ")", "\n", "results", ".", "update", "(", "\n", "{", "\n", "\"recov_vertex_contact\"", ":", "vertex_contact_pred", ",", "\n", "\"recov_contact_in_image_mask\"", ":", "in_image_mask", ",", "\n", "\"recov_contact_region\"", ":", "contact_region_pred", ",", "\n", "\"recov_anchor_elasti\"", ":", "anchor_elasti_pred", ",", "\n", "}", "\n", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.pointnet.module.STNkd.__init__": [[9, 26], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "65", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "k", ",", "128", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "1024", ",", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "256", ",", "k", "*", "k", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "\n", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.pointnet.module.STNkd.forward": [[27, 47], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "x.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "module.STNkd.fc3", "torch.from_numpy().view().repeat", "torch.from_numpy().view().repeat", "torch.from_numpy().view().repeat", "torch.from_numpy().view().repeat", "torch.from_numpy().view().repeat", "torch.from_numpy().view().repeat", "torch.from_numpy().view().repeat", "torch.from_numpy().view().repeat", "torch.from_numpy().view().repeat", "iden.to.to.to", "x.view.view.view", "x.view.view.size", "module.STNkd.bn1", "module.STNkd.bn2", "module.STNkd.bn3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "module.STNkd.bn4", "module.STNkd.bn5", "module.STNkd.conv1", "module.STNkd.conv2", "module.STNkd.conv3", "module.STNkd.fc1", "module.STNkd.fc2", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.eye().flatten().astype", "numpy.eye().flatten", "numpy.eye"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "device", "=", "x", ".", "device", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "iden", "=", "(", "\n", "torch", ".", "from_numpy", "(", "np", ".", "eye", "(", "self", ".", "k", ")", ".", "flatten", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "view", "(", "1", ",", "self", ".", "k", "*", "self", ".", "k", ")", ".", "repeat", "(", "batchsize", ",", "1", ")", "\n", ")", "\n", "iden", "=", "iden", ".", "to", "(", "device", ")", "\n", "x", "=", "x", "+", "iden", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "k", ",", "self", ".", "k", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.pointnet.module.PointNetEncodeModule.__init__": [[59, 75], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", "=", "65", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_in", "=", "dim_in", "\n", "# self.stn1 = STNkd(k=channel)", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "dim_in", ",", "128", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "1", ")", "\n", "self", ".", "conv4", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "512", ",", "1", ")", "\n", "self", ".", "conv5", "=", "torch", ".", "nn", ".", "Conv1d", "(", "512", ",", "2048", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "2048", ")", "\n", "# self.stn2 = STNkd(k=128)", "\n", "self", ".", "dim_out", "=", "4992", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.pointnet.module.PointNetEncodeModule.forward": [[76, 90], ["point_cloud.size", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "module.PointNetEncodeModule.bn5", "out_max.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "module.PointNetEncodeModule.bn1", "module.PointNetEncodeModule.bn2", "module.PointNetEncodeModule.bn3", "module.PointNetEncodeModule.bn4", "module.PointNetEncodeModule.conv5", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "module.PointNetEncodeModule.conv1", "module.PointNetEncodeModule.conv2", "module.PointNetEncodeModule.conv3", "module.PointNetEncodeModule.conv4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "point_cloud", ")", ":", "\n", "# pointcloud = TENSOR[NBATCH, 65, NPOINT]", "\n", "        ", "B", ",", "D", ",", "N", "=", "point_cloud", ".", "size", "(", ")", "\n", "\n", "out1", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "point_cloud", ")", ")", ")", "# TENSOR[NBATCH, 128, NPOINT]", "\n", "out2", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out1", ")", ")", ")", "# TENSOR[NBATCH, 128, NPOINT]", "\n", "out3", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out2", ")", ")", ")", "# TENSOR[NBATCH, 128, NPOINT]", "\n", "out4", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "out3", ")", ")", ")", "# TENSOR[NBATCH, 512, NPOINT]", "\n", "out5", "=", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "out4", ")", ")", "# TENSOR[NBATCH, 2048, NPOINT]", "\n", "out_max", "=", "torch", ".", "max", "(", "out5", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "# TENSOR[NBATCH, 2048, 1]", "\n", "expand", "=", "out_max", ".", "repeat", "(", "1", ",", "1", ",", "N", ")", "# TENSOR[NBATCH, 2048, NPOINT]", "\n", "concat", "=", "torch", ".", "cat", "(", "[", "expand", ",", "out1", ",", "out2", ",", "out3", ",", "out4", ",", "out5", "]", ",", "1", ")", "# TENSOR[NBATCH, 4992, NPOINT]", "\n", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.pointnet.module.PointNetDecodeModule.__init__": [[93, 102], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", "=", "4992", ",", "dim_out", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convs1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "dim_in", ",", "256", ",", "1", ")", "\n", "self", ".", "convs2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "256", ",", "1", ")", "\n", "self", ".", "convs3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "128", ",", "1", ")", "\n", "self", ".", "convs4", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "dim_out", ",", "1", ")", "\n", "self", ".", "bns1", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "bns2", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "bns3", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.pointnet.module.PointNetDecodeModule.forward": [[103, 113], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "module.PointNetDecodeModule.convs4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "module.PointNetDecodeModule.bns1", "module.PointNetDecodeModule.bns2", "module.PointNetDecodeModule.bns3", "module.PointNetDecodeModule.convs1", "module.PointNetDecodeModule.convs2", "module.PointNetDecodeModule.convs3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pointnet_feat", ",", "extra_feat", "=", "None", ")", ":", "\n", "# pointnet_feat = TENSOR[NBATCH, 4944, NPOINT]", "\n", "# extra_feat = TENSOR[NBATCH, 1, NPOINT]", "\n", "        ", "if", "extra_feat", "is", "not", "None", ":", "\n", "            ", "pointnet_feat", "=", "torch", ".", "cat", "(", "(", "pointnet_feat", ",", "extra_feat", ")", ",", "dim", "=", "1", ")", "\n", "", "net", "=", "F", ".", "relu", "(", "self", ".", "bns1", "(", "self", ".", "convs1", "(", "pointnet_feat", ")", ")", ")", "# TENSOR[NBATCH, 256, NPOINT]", "\n", "net", "=", "F", ".", "relu", "(", "self", ".", "bns2", "(", "self", ".", "convs2", "(", "net", ")", ")", ")", "# TENSOR[NBATCH, 256, NPOINT]", "\n", "net", "=", "F", ".", "relu", "(", "self", ".", "bns3", "(", "self", ".", "convs3", "(", "net", ")", ")", ")", "# TENSOR[NBATCH, 128, NPOINT]", "\n", "net", "=", "self", ".", "convs4", "(", "net", ")", "# TENSOR[NBATCH, 1, NPOINT]", "\n", "return", "net", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.pointnet.module.feature_transform_regularizer": [[50, 56], ["torch.mean", "torch.mean", "torch.mean", "trans.size", "torch.eye", "torch.eye", "torch.eye", "torch.norm", "torch.norm", "torch.norm", "torch.bmm", "torch.bmm", "torch.bmm", "trans.transpose"], "function", ["None"], ["", "", "def", "feature_transform_regularizer", "(", "trans", ")", ":", "\n", "    ", "d", "=", "trans", ".", "size", "(", ")", "[", "1", "]", "\n", "device", "=", "trans", ".", "device", "\n", "I", "=", "torch", ".", "eye", "(", "d", ",", "device", "=", "device", ")", "[", "None", ",", ":", ",", ":", "]", "\n", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "torch", ".", "bmm", "(", "trans", ",", "trans", ".", "transpose", "(", "2", ",", "1", ")", "-", "I", ")", ",", "dim", "=", "(", "1", ",", "2", ")", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.hourglass.HGBottleNeck.__init__": [[9, 20], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "HGBottleNeck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.hourglass.HGBottleNeck.forward": [[21, 42], ["hourglass.HGBottleNeck.conv1", "hourglass.HGBottleNeck.bn1", "hourglass.HGBottleNeck.relu", "hourglass.HGBottleNeck.conv2", "hourglass.HGBottleNeck.bn2", "hourglass.HGBottleNeck.relu", "hourglass.HGBottleNeck.conv3", "hourglass.HGBottleNeck.bn3", "hourglass.HGBottleNeck.relu", "hourglass.HGBottleNeck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.hourglass.Hourglass.__init__": [[45, 49], ["torch.Module.__init__", "hourglass.Hourglass._make_hourglass"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__", "home.repos.pwc.inspect_result.lixiny_CPF.bases.hourglass.Hourglass._make_hourglass"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "nblocks", ",", "planes", ",", "depth", "=", "4", ")", ":", "\n", "        ", "super", "(", "Hourglass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "hg", "=", "self", ".", "_make_hourglass", "(", "block", ",", "nblocks", ",", "planes", ",", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.hourglass.Hourglass._make_hourglass": [[50, 61], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "hg.append", "res.append", "res.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "hourglass.Hourglass._make_residual", "hourglass.Hourglass._make_residual"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.bases.hourglass.Hourglass._make_residual", "home.repos.pwc.inspect_result.lixiny_CPF.bases.hourglass.Hourglass._make_residual"], ["", "def", "_make_hourglass", "(", "self", ",", "block", ",", "nblocks", ",", "planes", ",", "depth", ")", "->", "nn", ".", "ModuleList", ":", "\n", "        ", "hg", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "res", "=", "[", "]", "\n", "\n", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                ", "res", ".", "append", "(", "self", ".", "_make_residual", "(", "block", ",", "nblocks", ",", "planes", ")", ")", "\n", "", "if", "i", "==", "0", ":", "\n", "                ", "res", ".", "append", "(", "self", ".", "_make_residual", "(", "block", ",", "nblocks", ",", "planes", ")", ")", "\n", "", "hg", ".", "append", "(", "nn", ".", "ModuleList", "(", "res", ")", ")", "\n", "", "return", "nn", ".", "ModuleList", "(", "hg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.hourglass.Hourglass._make_residual": [[62, 67], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_residual", "(", "self", ",", "block", ",", "nblocks", ",", "planes", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "nblocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "planes", "*", "block", ".", "expansion", ",", "planes", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.hourglass.Hourglass._hourglass_foward": [[68, 90], ["torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.interpolate", "torch.interpolate", "torch.interpolate", "hourglass.Hourglass._hourglass_foward", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.bases.hourglass.Hourglass._hourglass_foward"], ["", "def", "_hourglass_foward", "(", "self", ",", "n", ",", "x", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "up1", "=", "self", ".", "hg", "[", "n", "-", "1", "]", "[", "0", "]", "(", "x", ")", "\n", "low1", "=", "torchfunc", ".", "max_pool2d", "(", "x", ",", "2", ",", "stride", "=", "2", ")", "\n", "low1", "=", "self", ".", "hg", "[", "n", "-", "1", "]", "[", "1", "]", "(", "low1", ")", "\n", "\n", "if", "n", ">", "1", ":", "\n", "            ", "low2", "=", "self", ".", "_hourglass_foward", "(", "n", "-", "1", ",", "low1", ")", "\n", "", "else", ":", "\n", "            ", "low2", "=", "self", ".", "hg", "[", "n", "-", "1", "]", "[", "3", "]", "(", "low1", ")", "\n", "", "low3", "=", "self", ".", "hg", "[", "n", "-", "1", "]", "[", "2", "]", "(", "low2", ")", "\n", "up2", "=", "torchfunc", ".", "interpolate", "(", "low3", ",", "scale_factor", "=", "2", ")", "\n", "\n", "# ============ DEAL WITH:  H != W and (H, W) != 2^n  >>>>>>>>>>>>>>>>>>>>", "\n", "# in case of up1 H != up2 H", "\n", "if", "up1", ".", "shape", "[", "2", "]", "!=", "up2", ".", "shape", "[", "2", "]", ":", "\n", "            ", "up2", "=", "torchfunc", ".", "pad", "(", "up2", ",", "pad", "=", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", "# only ONE pixel in difference", "\n", "# in case of up1 W != up2 W", "\n", "", "if", "up1", ".", "shape", "[", "3", "]", "!=", "up2", ".", "shape", "[", "3", "]", ":", "\n", "            ", "up2", "=", "torchfunc", ".", "pad", "(", "up2", ",", "pad", "=", "[", "0", ",", "1", ",", "0", ",", "0", "]", ")", "# only ONE pixel in difference", "\n", "\n", "", "out", "=", "up1", "+", "up2", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.hourglass.Hourglass.forward": [[91, 93], ["hourglass.Hourglass._hourglass_foward"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.bases.hourglass.Hourglass._hourglass_foward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_hourglass_foward", "(", "self", ".", "depth", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.hourglass.StackedHourglass.__init__": [[96, 131], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "hourglass.StackedHourglass._make_layer", "hourglass.StackedHourglass._make_layer", "hourglass.StackedHourglass._make_layer", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "hgs.append", "res.append", "fc.append", "score.append", "hourglass.Hourglass", "hourglass.StackedHourglass._make_layer", "hourglass.StackedHourglass._make_fc", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "_fc.append", "_score.append", "hourglass.StackedHourglass._make_fc", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__", "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.lixiny_CPF.bases.hourglass.StackedHourglass._make_fc", "home.repos.pwc.inspect_result.lixiny_CPF.bases.hourglass.StackedHourglass._make_fc"], ["    ", "def", "__init__", "(", "self", ",", "nstacks", "=", "2", ",", "nblocks", "=", "1", ",", "nclasses", "=", "64", ",", "block", "=", "HGBottleNeck", ")", ":", "\n", "        ", "super", "(", "StackedHourglass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nclasses", "=", "nclasses", "\n", "self", ".", "nstacks", "=", "nstacks", "\n", "self", ".", "inplanes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "planes", "=", "64", ",", "nblocks", "=", "nblocks", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "planes", "=", "128", ",", "nblocks", "=", "nblocks", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "planes", "=", "128", ",", "nblocks", "=", "nblocks", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "num_feats", "=", "128", "\n", "ch", "=", "self", ".", "num_feats", "*", "block", ".", "expansion", "\n", "\n", "hgs", ",", "res", ",", "fc", ",", "_fc", ",", "score", ",", "_score", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "nstacks", ")", ":", "# stacking the hourglass", "\n", "            ", "hgs", ".", "append", "(", "Hourglass", "(", "block", ",", "nblocks", ",", "self", ".", "num_feats", ",", "depth", "=", "4", ")", ")", "\n", "res", ".", "append", "(", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "num_feats", ",", "nblocks", "=", "nblocks", ")", ")", "\n", "fc", ".", "append", "(", "self", ".", "_make_fc", "(", "ch", ",", "ch", ")", ")", "\n", "score", ".", "append", "(", "nn", ".", "Conv2d", "(", "ch", ",", "nclasses", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ")", "\n", "\n", "if", "i", "<", "nstacks", "-", "1", ":", "\n", "                ", "_fc", ".", "append", "(", "self", ".", "_make_fc", "(", "ch", ",", "ch", ")", ")", "\n", "_score", ".", "append", "(", "nn", ".", "Conv2d", "(", "nclasses", ",", "ch", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "", "self", ".", "hgs", "=", "nn", ".", "ModuleList", "(", "hgs", ")", "# hgs: hourglass stack", "\n", "self", ".", "res", "=", "nn", ".", "ModuleList", "(", "res", ")", "\n", "self", ".", "fc", "=", "nn", ".", "ModuleList", "(", "fc", ")", "\n", "self", ".", "_fc", "=", "nn", ".", "ModuleList", "(", "_fc", ")", "\n", "self", ".", "score", "=", "nn", ".", "ModuleList", "(", "score", ")", "\n", "self", ".", "_score", "=", "nn", ".", "ModuleList", "(", "_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.hourglass.StackedHourglass._make_layer": [[132, 144], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "nblocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "", "layers", "=", "[", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", "]", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "nblocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.hourglass.StackedHourglass._make_fc": [[145, 149], ["torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["None"], ["", "def", "_make_fc", "(", "self", ",", "inplanes", ",", "outplanes", ")", ":", "\n", "        ", "bn", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "conv", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "outplanes", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "return", "nn", ".", "Sequential", "(", "conv", ",", "bn", ",", "self", ".", "relu", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.hourglass.StackedHourglass.forward": [[150, 177], ["hourglass.StackedHourglass.conv1", "hourglass.StackedHourglass.bn1", "hourglass.StackedHourglass.relu", "hourglass.StackedHourglass.layer1", "hourglass.StackedHourglass.maxpool", "hourglass.StackedHourglass.layer2", "hourglass.StackedHourglass.layer3", "ls_encoding.append", "range", "ls_out.append", "ls_encoding.append", "ls_encoding.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ls_out", "=", "[", "]", "\n", "ls_encoding", "=", "[", "]", "# heatmaps encoding", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "ls_encoding", ".", "append", "(", "x", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "nstacks", ")", ":", "\n", "            ", "y", "=", "self", ".", "hgs", "[", "i", "]", "(", "x", ")", "\n", "y", "=", "self", ".", "res", "[", "i", "]", "(", "y", ")", "\n", "y", "=", "self", ".", "fc", "[", "i", "]", "(", "y", ")", "\n", "score", "=", "self", ".", "score", "[", "i", "]", "(", "y", ")", "\n", "ls_out", ".", "append", "(", "score", ")", "\n", "if", "i", "<", "self", ".", "nstacks", "-", "1", ":", "\n", "                ", "_fc", "=", "self", ".", "_fc", "[", "i", "]", "(", "y", ")", "\n", "_score", "=", "self", ".", "_score", "[", "i", "]", "(", "score", ")", "\n", "x", "=", "x", "+", "_fc", "+", "_score", "\n", "ls_encoding", ".", "append", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "ls_encoding", ".", "append", "(", "y", ")", "\n", "", "", "return", "ls_out", ",", "ls_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.hourglass.main": [[179, 184], ["torch.rand", "torch.rand", "torch.rand", "hourglass.StackedHourglass", "StackedHourglass.", "print"], "function", ["None"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "batch", "=", "torch", ".", "rand", "(", "(", "4", ",", "3", ",", "480", ",", "640", ")", ")", "# TENSOR (B, C, H, W)", "\n", "stack_hourglass", "=", "StackedHourglass", "(", "nstacks", "=", "1", ",", "nblocks", "=", "1", ",", "nclasses", "=", "64", ")", "\n", "ls_pred", ",", "ls_encodings", "=", "stack_hourglass", "(", "batch", ")", "\n", "print", "(", "f\"HG Prediction Shape: {ls_pred[-1].shape}; HG Feature Shape: {ls_encoding[-1].shape}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.FrozenBatchNorm2d.__init__": [[41, 47], ["super().__init__", "resnet.FrozenBatchNorm2d.register_buffer", "resnet.FrozenBatchNorm2d.register_buffer", "resnet.FrozenBatchNorm2d.register_buffer", "resnet.FrozenBatchNorm2d.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__"], ["def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "super", "(", "FrozenBatchNorm2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "\"weight\"", ",", "torch", ".", "ones", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "zeros", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_mean\"", ",", "torch", ".", "zeros", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_var\"", ",", "torch", ".", "ones", "(", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.FrozenBatchNorm2d._load_from_state_dict": [[48, 57], ["super()._load_from_state_dict"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.FrozenBatchNorm2d._load_from_state_dict"], ["", "def", "_load_from_state_dict", "(", "self", ",", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", ":", "\n", "        ", "num_batches_tracked_key", "=", "prefix", "+", "'num_batches_tracked'", "\n", "if", "num_batches_tracked_key", "in", "state_dict", ":", "\n", "            ", "del", "state_dict", "[", "num_batches_tracked_key", "]", "\n", "\n", "", "super", "(", "FrozenBatchNorm2d", ",", "self", ")", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.FrozenBatchNorm2d.forward": [[58, 69], ["resnet.FrozenBatchNorm2d.weight.reshape", "resnet.FrozenBatchNorm2d.bias.reshape", "resnet.FrozenBatchNorm2d.running_var.reshape", "resnet.FrozenBatchNorm2d.running_mean.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# move reshapes to the beginning", "\n", "# to make it fuser-friendly", "\n", "        ", "w", "=", "self", ".", "weight", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "b", "=", "self", ".", "bias", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "rv", "=", "self", ".", "running_var", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "rm", "=", "self", ".", "running_mean", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "eps", "=", "1e-5", "\n", "scale", "=", "w", "*", "(", "rv", "+", "eps", ")", ".", "rsqrt", "(", ")", "\n", "bias", "=", "b", "-", "rm", "*", "scale", "\n", "return", "x", "*", "scale", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.BasicBlock.__init__": [[74, 83], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__", "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.conv3x3", "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.BasicBlock.forward": [[84, 101], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.Bottleneck.__init__": [[106, 117], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.Bottleneck.forward": [[118, 139], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.ResNet.__init__": [[142, 170], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__", "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "num_classes", "=", "1000", ",", "\n", "intermediate", "=", "True", ",", "\n", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "intermediate", "=", "intermediate", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "features", "=", "512", "*", "block", ".", "expansion", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.ResNet._make_layer": [[171, 186], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.ResNet.forward": [[187, 215], ["collections.OrderedDict", "resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.mean().mean", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size", "resnet.ResNet.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "interm_features", "=", "OrderedDict", "(", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "interm_features", "[", "\"res_layer1\"", "]", "=", "x", "\n", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "interm_features", "[", "\"res_layer2\"", "]", "=", "x", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "interm_features", "[", "\"res_layer3\"", "]", "=", "x", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "interm_features", "[", "\"res_layer4\"", "]", "=", "x", "\n", "\n", "x", "=", "x", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "intermediate", ":", "\n", "            ", "return", "x", ",", "interm_features", "\n", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.conv3x3": [[21, 25], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.conv1x1": [[28, 31], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.resnet18": [[217, 228], ["resnet.ResNet", "print", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "print", "(", "'Loading resnet18 pretrained models !'", ")", "\n", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet18\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.resnet34": [[230, 240], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet34\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.resnet50": [[242, 253], ["resnet.ResNet", "print", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "print", "(", "'Loading resnet50 pretrained models !'", ")", "\n", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet50\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.resnet101": [[255, 265], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet101\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.resnet152": [[267, 277], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet152\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.main": [[279, 288], ["resnet.resnet50", "hocontact.utils.logger.logger.info", "torch.rand", "torch.rand", "torch.rand", "resnet50.", "inter.keys", "print", "hocontact.utils.ioutils.param_count"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.bases.resnet.resnet50", "home.repos.pwc.inspect_result.lixiny_CPF.dump.dumper.PicrDumper.info", "home.repos.pwc.inspect_result.lixiny_CPF.utils.ioutils.param_count"], ["", "def", "main", "(", ")", ":", "\n", "    ", "resnet", "=", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "logger", ".", "info", "(", "f\"PoseHead Model Params {param_count(resnet)}M\"", ")", "\n", "\n", "x", "=", "torch", ".", "rand", "(", "(", "16", ",", "3", ",", "256", ",", "256", ")", ")", "\n", "\n", "x", ",", "inter", "=", "resnet", "(", "x", ")", "\n", "for", "key", "in", "inter", ".", "keys", "(", ")", ":", "\n", "        ", "print", "(", "key", ",", "inter", "[", "key", "]", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.FieldLoss.contact_loss": [[11, 18], ["torch.sum", "torch.mean", "torch.pow"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "contact_loss", "(", "apos", ",", "vpos", ",", "e", ",", "e_k", ")", ":", "\n", "# apos, vpos = TENSOR[NVALID, 3]", "\n", "# e = TENSOR[NVALID, ]", "\n", "        ", "dist", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "vpos", "-", "apos", ",", "2", ")", ",", "dim", "=", "1", ")", "# TENSOR[NVALID, ]", "\n", "res", "=", "torch", ".", "mean", "(", "e_k", "*", "e", "*", "dist", ",", "dim", "=", "0", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.FieldLoss.repulsion_loss": [[19, 40], ["torch.einsum", "torch.sum", "torch.pow", "torch.exp", "torch.clamp"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "repulsion_loss", "(", "\n", "pred_hand_verts", ",", "\n", "concat_hand_vert_idx", ",", "\n", "concat_obj_vert_3d", ",", "\n", "concat_obj_normal", ",", "\n", "constant", "=", "0.05", ",", "\n", "threshold", "=", "0.015", ",", "\n", ")", ":", "\n", "# pred_hand_verts = TENSOR[NHANDVERTS, 3]", "\n", "        ", "selected_hand_verts", "=", "pred_hand_verts", "[", "concat_hand_vert_idx", ",", ":", "]", "# TENSOR[NCC, 3]", "\n", "# compute offset vector from object to hand", "\n", "offset_vectors", "=", "selected_hand_verts", "-", "concat_obj_vert_3d", "# TENSOR[NCC, 3]", "\n", "# compute inner product (not normalized)", "\n", "inner_product", "=", "torch", ".", "einsum", "(", "\"bi,bi->b\"", ",", "offset_vectors", ",", "concat_obj_normal", ")", "\n", "thresholded_value", "=", "constant", "*", "torch", ".", "pow", "(", "\n", "torch", ".", "exp", "(", "torch", ".", "clamp", "(", "-", "inner_product", ",", "-", "threshold", ",", "threshold", ")", ")", ",", "2", "\n", ")", "# TENSOR[NCC, ]", "\n", "# res = torch.mean(torch.pow(thresholded_value, 2), dim=0)", "\n", "res", "=", "torch", ".", "sum", "(", "thresholded_value", ",", "dim", "=", "0", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.FieldLoss.full_repulsion_loss": [[41, 77], ["hocontact.utils.collisionutils.pairwise_dist", "torch.any().long", "torch.argsort", "torch.sum", "dist_mask_bool.float", "torch.einsum", "torch.Tensor().float().to", "torch.any", "pred_full_obj_verts.unsqueeze", "torch.pow", "torch.sum", "torch.sum", "torch.exp", "torch.Tensor().float", "torch.clamp", "torch.arange", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.disjointnessutils.pairwise_dist"], ["", "@", "staticmethod", "\n", "def", "full_repulsion_loss", "(", "\n", "pred_hand_verts", ",", "\n", "pred_full_obj_verts", ",", "\n", "pred_full_obj_normal", ",", "\n", "query_candidate", "=", "50", ",", "\n", "query", "=", "0.020", ",", "\n", "constant", "=", "5e-4", ",", "\n", "threshold", "=", "0.080", ",", "\n", "offset", "=", "0.000", ",", "\n", ")", ":", "\n", "# get basic dim", "\n", "        ", "n_points_obj", "=", "pred_full_obj_verts", ".", "shape", "[", "0", "]", "\n", "# pairwise dist", "\n", "dist_mat", "=", "pairwise_dist", "(", "pred_full_obj_verts", ",", "pred_hand_verts", ")", "\n", "# sort in axis 1 and get candidates", "\n", "sort_idx", "=", "torch", ".", "argsort", "(", "dist_mat", ",", "dim", "=", "1", ")", "[", ":", ",", "0", ":", "query_candidate", "]", "# TENSOR[NPO, CANDI]", "\n", "# dist_mask", "\n", "dist_mask_bool", "=", "dist_mat", "[", "torch", ".", "arange", "(", "n_points_obj", ")", "[", ":", ",", "None", "]", ",", "sort_idx", "]", "<", "query", "*", "query", "\n", "calc_mask", "=", "torch", ".", "any", "(", "dist_mask_bool", ",", "dim", "=", "1", ")", ".", "long", "(", ")", "\n", "if", "torch", ".", "sum", "(", "calc_mask", ")", ">", "0", ":", "\n", "            ", "dist_mask", "=", "dist_mask_bool", ".", "float", "(", ")", "\n", "# index and offset", "\n", "indexed_hand", "=", "pred_hand_verts", "[", "sort_idx", "]", "# TENSOR[NPO, CANDI, 3]", "\n", "offset_vec", "=", "indexed_hand", "-", "pred_full_obj_verts", ".", "unsqueeze", "(", "1", ")", "# TENSOR[NPO, CANDI, 3]; TENSOR[NPO, 1, 3]", "\n", "# inner product", "\n", "inner_prod", "=", "torch", ".", "einsum", "(", "\"bni,bi->bn\"", ",", "offset_vec", ",", "pred_full_obj_normal", ")", "# TENSOR[NPO, CANDI]", "\n", "thresholded_value", "=", "constant", "*", "torch", ".", "pow", "(", "\n", "torch", ".", "exp", "(", "torch", ".", "clamp", "(", "-", "inner_prod", "-", "offset", ",", "-", "threshold", "-", "offset", ",", "threshold", "-", "offset", ")", ")", ",", "\n", "2", ",", "\n", ")", "\n", "thresholded_value", "=", "thresholded_value", "*", "dist_mask", "\n", "res", "=", "torch", ".", "sum", "(", "thresholded_value", ")", "/", "torch", ".", "sum", "(", "calc_mask", ")", "\n", "", "else", ":", "\n", "            ", "res", "=", "torch", ".", "Tensor", "(", "[", "0.0", "]", ")", ".", "float", "(", ")", ".", "to", "(", "pred_hand_verts", ".", "device", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.ObjectLoss.obj_transf_loss": [[80, 85], ["torch.pow", "torch.pow", "torch.sum", "torch.sum"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "obj_transf_loss", "(", "vars_obj_tsl", ",", "vars_obj_rot", ",", "init_obj_tsl", ",", "init_obj_rot", ")", ":", "\n", "        ", "tsl_loss", "=", "torch", ".", "pow", "(", "(", "vars_obj_tsl", "-", "init_obj_tsl", ")", ",", "2", ")", "\n", "rot_loss", "=", "torch", ".", "pow", "(", "(", "vars_obj_rot", "-", "init_obj_rot", ")", ",", "2", ")", "\n", "return", "torch", ".", "sum", "(", "tsl_loss", ",", "dim", "=", "0", ")", "+", "torch", ".", "sum", "(", "rot_loss", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.get_edge_idx": [[88, 105], ["face_idx_tensor.long.long.long", "face_idx_tensor.long.long.tolist", "torch.tensor().long().to", "list", "torch.tensor().long().to.append", "torch.tensor().long().to.append", "torch.tensor().long().to.append", "torch.tensor().long", "torch.tensor"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "get_edge_idx", "(", "face_idx_tensor", ":", "torch", ".", "Tensor", ")", "->", "list", ":", "\n", "        ", "device", "=", "face_idx_tensor", ".", "device", "\n", "res", "=", "[", "]", "\n", "face_idx_tensor", "=", "face_idx_tensor", ".", "long", "(", ")", "\n", "face_idx_list", "=", "face_idx_tensor", ".", "tolist", "(", ")", "\n", "for", "item", "in", "face_idx_list", ":", "\n", "            ", "v_idx_0", ",", "v_idx_1", ",", "v_idx_2", "=", "item", "\n", "if", "{", "v_idx_0", ",", "v_idx_1", "}", "not", "in", "res", ":", "\n", "                ", "res", ".", "append", "(", "{", "v_idx_0", ",", "v_idx_1", "}", ")", "\n", "", "if", "{", "v_idx_1", ",", "v_idx_2", "}", "not", "in", "res", ":", "\n", "                ", "res", ".", "append", "(", "{", "v_idx_1", ",", "v_idx_2", "}", ")", "\n", "", "if", "{", "v_idx_0", ",", "v_idx_2", "}", "not", "in", "res", ":", "\n", "                ", "res", ".", "append", "(", "{", "v_idx_0", ",", "v_idx_2", "}", ")", "\n", "", "", "res", "=", "[", "list", "(", "e", ")", "for", "e", "in", "res", "]", "\n", "res", "=", "torch", ".", "tensor", "(", "res", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.get_edge_len": [[106, 111], ["torch.norm"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_edge_len", "(", "verts", ":", "torch", ".", "Tensor", ",", "edge_idx", ":", "torch", ".", "Tensor", ")", ":", "\n", "# verts: TENSOR[NVERT, 3]", "\n", "# edge_idx: TENSOR[NEDGE, 2]", "\n", "        ", "return", "torch", ".", "norm", "(", "verts", "[", "edge_idx", "[", ":", ",", "0", "]", ",", ":", "]", "-", "verts", "[", "edge_idx", "[", ":", ",", "1", "]", ",", ":", "]", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.pose_quat_norm_loss": [[112, 120], ["var_pose.reshape", "manopth.quatutils.quaternion_norm_squared", "torch.mean", "torch.pow"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "pose_quat_norm_loss", "(", "var_pose", ")", ":", "\n", "        ", "\"\"\" this is the only loss accepts unnormalized quats \"\"\"", "\n", "reshaped_var_pose", "=", "var_pose", ".", "reshape", "(", "(", "16", ",", "4", ")", ")", "# TENSOR[16, 4]", "\n", "quat_norm_sq", "=", "quaternion_norm_squared", "(", "reshaped_var_pose", ")", "# TENSOR[16, ]", "\n", "squared_norm_diff", "=", "quat_norm_sq", "-", "1.0", "# TENSOR[16, ]", "\n", "res", "=", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "squared_norm_diff", ",", "2", ")", ",", "dim", "=", "0", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.pose_reg_loss": [[121, 133], ["manopth.quatutils.quaternion_inv", "manopth.quatutils.quaternion_mul", "torch.mean", "torch.pow"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "pose_reg_loss", "(", "var_pose_normed", ",", "var_pose_init", ")", ":", "\n", "# the format of quat is [w, x, y, z]", "\n", "# to regularize", "\n", "# just to make sure w is close to 1.0", "\n", "# working aside with self.pose_quat_norm_loss defined above", "\n", "        ", "inv_var_pose_init", "=", "quaternion_inv", "(", "var_pose_init", ")", "\n", "combined_pose", "=", "quaternion_mul", "(", "var_pose_normed", ",", "inv_var_pose_init", ")", "\n", "w", "=", "combined_pose", "[", "...", ",", "0", "]", "# get w", "\n", "diff", "=", "w", "-", "1.0", "# TENSOR[16, ]", "\n", "res", "=", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "diff", ",", "2", ")", ",", "dim", "=", "0", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.shape_reg_loss": [[134, 137], ["torch.sum", "torch.pow"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "shape_reg_loss", "(", "var_shape", ",", "shape_init", ")", ":", "\n", "        ", "return", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "var_shape", "-", "shape_init", ",", "2", ")", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.edge_len_loss": [[138, 143], ["geo_loss.HandLoss.get_edge_len", "torch.mean", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.get_edge_len"], ["", "@", "staticmethod", "\n", "def", "edge_len_loss", "(", "rebuild_verts", ",", "hand_edges", ",", "static_edge_len", ")", ":", "\n", "        ", "pred_edge_len", "=", "HandLoss", ".", "get_edge_len", "(", "rebuild_verts", ",", "hand_edges", ")", "\n", "diff", "=", "pred_edge_len", "-", "static_edge_len", "# TENSOR[NEDGE, ]", "\n", "return", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "diff", ",", "2", ")", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.joint_b_axis_loss": [[153, 170], ["b_axis.squeeze.squeeze.squeeze", "torch.einsum", "torch.relu", "torch.relu", "torch.abs", "numpy.cos", "torch.abs", "numpy.cos", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow", "range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "joint_b_axis_loss", "(", "b_axis", ",", "axis", ")", ":", "\n", "        ", "b_soft_idx", "=", "[", "0", ",", "3", ",", "9", ",", "6", ",", "14", "]", "\n", "b_thumb_soft_idx", "=", "[", "12", ",", "13", "]", "\n", "b_axis", "=", "b_axis", ".", "squeeze", "(", "0", ")", "# [15, 3]", "\n", "\n", "b_axis_cos", "=", "torch", ".", "einsum", "(", "\"bi,bi->b\"", ",", "b_axis", ",", "axis", ")", "\n", "restrict_cos", "=", "b_axis_cos", "[", "[", "i", "for", "i", "in", "range", "(", "15", ")", "if", "i", "not", "in", "b_soft_idx", "and", "i", "not", "in", "b_thumb_soft_idx", "]", "]", "\n", "soft_loss", "=", "torch", ".", "relu", "(", "torch", ".", "abs", "(", "b_axis_cos", "[", "b_soft_idx", "]", ")", "-", "np", ".", "cos", "(", "pi", "/", "2", "-", "pi", "/", "36", ")", ")", "# [-5, 5]", "\n", "thumb_soft_loss", "=", "torch", ".", "relu", "(", "torch", ".", "abs", "(", "b_axis_cos", "[", "b_thumb_soft_idx", "]", ")", "-", "np", ".", "cos", "(", "pi", "/", "2", "-", "pi", "/", "3", ")", ")", "# [-60, 60]", "\n", "\n", "res", "=", "(", "\n", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "restrict_cos", ",", "2", ")", ",", "dim", "=", "0", ")", "\n", "+", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "soft_loss", ",", "2", ")", ",", "dim", "=", "0", ")", "\n", "+", "0.01", "*", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "thumb_soft_loss", ",", "2", ")", ",", "dim", "=", "0", ")", "\n", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.joint_u_axis_loss": [[171, 188], ["u_axis.squeeze.squeeze.squeeze", "torch.einsum", "torch.relu", "torch.relu", "torch.abs", "numpy.cos", "torch.abs", "numpy.cos", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow", "range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "joint_u_axis_loss", "(", "u_axis", ",", "axis", ")", ":", "\n", "        ", "u_soft_idx", "=", "[", "0", ",", "3", ",", "9", ",", "6", ",", "14", "]", "\n", "u_thumb_soft_idx", "=", "[", "12", ",", "13", "]", "\n", "u_axis", "=", "u_axis", ".", "squeeze", "(", "0", ")", "# [15, 3]", "\n", "\n", "u_axis_cos", "=", "torch", ".", "einsum", "(", "\"bi,bi->b\"", ",", "u_axis", ",", "axis", ")", "\n", "restrict_cos", "=", "u_axis_cos", "[", "[", "i", "for", "i", "in", "range", "(", "15", ")", "if", "i", "not", "in", "u_soft_idx", "and", "i", "not", "in", "u_thumb_soft_idx", "]", "]", "\n", "soft_loss", "=", "torch", ".", "relu", "(", "torch", ".", "abs", "(", "u_axis_cos", "[", "u_soft_idx", "]", ")", "-", "np", ".", "cos", "(", "pi", "/", "2", "-", "pi", "/", "18", ")", ")", "# [-10, 10]", "\n", "thumb_soft_loss", "=", "torch", ".", "relu", "(", "torch", ".", "abs", "(", "u_axis_cos", "[", "u_thumb_soft_idx", "]", ")", "-", "np", ".", "cos", "(", "pi", "/", "2", "-", "pi", "/", "3", ")", ")", "# [-60, 60]", "\n", "\n", "res", "=", "(", "\n", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "restrict_cos", ",", "2", ")", ",", "dim", "=", "0", ")", "\n", "+", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "soft_loss", ",", "2", ")", ",", "dim", "=", "0", ")", "\n", "+", "0.01", "*", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "thumb_soft_loss", ",", "2", ")", ",", "dim", "=", "0", ")", "\n", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.joint_l_limit_loss": [[189, 205], ["l_axis.squeeze.squeeze.squeeze", "torch.einsum", "torch.relu", "torch.relu", "numpy.cos", "numpy.cos", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow", "range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "joint_l_limit_loss", "(", "l_axis", ",", "axis", ")", ":", "\n", "        ", "l_soft_idx", "=", "[", "0", ",", "3", ",", "9", ",", "6", ",", "14", "]", "\n", "l_thumb_soft_idx", "=", "[", "12", ",", "13", "]", "\n", "l_axis", "=", "l_axis", ".", "squeeze", "(", "0", ")", "# [15, 3]", "\n", "l_axis_cos", "=", "torch", ".", "einsum", "(", "\"bi,bi->b\"", ",", "l_axis", ",", "axis", ")", "\n", "restrict_cos", "=", "l_axis_cos", "[", "[", "i", "for", "i", "in", "range", "(", "15", ")", "if", "i", "not", "in", "l_soft_idx", "and", "i", "not", "in", "l_thumb_soft_idx", "]", "]", "\n", "soft_loss", "=", "torch", ".", "relu", "(", "-", "l_axis_cos", "[", "l_soft_idx", "]", "+", "1", "-", "np", ".", "cos", "(", "pi", "/", "2", "-", "pi", "/", "9", ")", ")", "# [-20, 20]", "\n", "thumb_soft_loss", "=", "torch", ".", "relu", "(", "-", "l_axis_cos", "[", "l_thumb_soft_idx", "]", "+", "1", "-", "np", ".", "cos", "(", "pi", "/", "2", "-", "pi", "/", "3", ")", ")", "\n", "\n", "res", "=", "(", "\n", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "restrict_cos", "-", "1", ",", "2", ")", ",", "dim", "=", "0", ")", "\n", "+", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "soft_loss", ",", "2", ")", ",", "dim", "=", "0", ")", "\n", "+", "0.01", "*", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "thumb_soft_loss", ",", "2", ")", ",", "dim", "=", "0", ")", "\n", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.rotation_angle_loss": [[206, 215], ["torch.zeros_like", "torch.relu", "torch.pow", "torch.mean", "torch.abs"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "rotation_angle_loss", "(", "angle", ",", "limit_angle", "=", "pi", "/", "2", ",", "eps", "=", "1e-10", ")", ":", "\n", "        ", "angle_new", "=", "torch", ".", "zeros_like", "(", "angle", ")", "# TENSOR[15, ]", "\n", "nonzero_mask", "=", "torch", ".", "abs", "(", "angle", ")", ">", "eps", "# TENSOR[15, ], bool", "\n", "angle_new", "[", "nonzero_mask", "]", "=", "angle", "[", "nonzero_mask", "]", "# if angle is too small, pick them out of backward graph", "\n", "angle_over_limit", "=", "torch", ".", "relu", "(", "angle_new", "-", "limit_angle", ")", "# < pi/2, 0; > pi/2, linear | Tensor[16, ]", "\n", "angle_over_limit_squared", "=", "torch", ".", "pow", "(", "angle_over_limit", ",", "2", ")", "# TENSOR[15, ]", "\n", "res", "=", "torch", ".", "mean", "(", "angle_over_limit_squared", ",", "dim", "=", "0", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.hand_tsl_loss": [[216, 219], ["torch.sum", "torch.pow"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "hand_tsl_loss", "(", "var_hand_tsl", ",", "init_hand_tsl", ")", ":", "\n", "        ", "return", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "var_hand_tsl", "-", "init_hand_tsl", ",", "2", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.__init__": [[21, 80], ["manopth.manolayer.ManoLayer().to", "manopth.anchorlayer.AnchorLayer().to", "manopth.axislayer.AxisLayer().to", "hocontact.models.honet.ManoAdaptor().to", "hocontact.utils.netutils.rec_freeze", "manopth.manolayer.ManoLayer", "manopth.anchorlayer.AnchorLayer", "manopth.axislayer.AxisLayer", "hocontact.models.honet.ManoAdaptor"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.utils.netutils.rec_freeze"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "device", ",", "\n", "lr", "=", "1e-2", ",", "\n", "n_iter", "=", "2500", ",", "\n", "verbose", "=", "False", ",", "\n", "mano_root", "=", "\"assets/mano\"", ",", "\n", "anchor_path", "=", "\"assets/anchor\"", ",", "\n", "fhb", "=", "False", ",", "\n", "load_fhb_path", "=", "\"assets/mano/fhb_skel_centeridx9.pkl\"", ",", "\n", "compensate_tsl", "=", "False", ",", "\n", "# values to initialize coef_val", "\n", "lambda_contact_loss", "=", "10.0", ",", "\n", "lambda_repulsion_loss", "=", "0.5", ",", "\n", "repulsion_query", "=", "0.030", ",", "\n", "repulsion_threshold", "=", "0.080", ",", "\n", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "\n", "# options", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "runtime_vis", "=", "None", "\n", "self", ".", "compensate_tsl", "=", "compensate_tsl", "\n", "\n", "# layers and loss utils", "\n", "self", ".", "mano_layer", "=", "ManoLayer", "(", "\n", "joint_rot_mode", "=", "\"quat\"", ",", "\n", "root_rot_mode", "=", "\"quat\"", ",", "\n", "use_pca", "=", "False", ",", "\n", "mano_root", "=", "mano_root", ",", "\n", "center_idx", "=", "9", ",", "\n", "flat_hand_mean", "=", "True", ",", "\n", "return_transf", "=", "True", ",", "\n", "return_full_pose", "=", "True", ",", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "fhb", "=", "fhb", "\n", "if", "fhb", ":", "\n", "            ", "self", ".", "adaptor", "=", "ManoAdaptor", "(", "self", ".", "mano_layer", ",", "load_fhb_path", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "netutils", ".", "rec_freeze", "(", "self", ".", "adaptor", ")", "\n", "", "self", ".", "anchor_layer", "=", "AnchorLayer", "(", "anchor_path", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "axis_layer", "=", "AxisLayer", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# opt val dict, const val dict", "\n", "self", ".", "opt_val", "=", "{", "}", "\n", "self", ".", "const_val", "=", "{", "}", "\n", "self", ".", "ctrl_val", "=", "{", "}", "\n", "self", ".", "coef_val", "=", "{", "\n", "\"lambda_contact_loss\"", ":", "lambda_contact_loss", ",", "\n", "\"lambda_repulsion_loss\"", ":", "lambda_repulsion_loss", ",", "\n", "\"repulsion_query\"", ":", "repulsion_query", ",", "\n", "\"repulsion_threshold\"", ":", "repulsion_threshold", ",", "\n", "}", "\n", "\n", "# creating slots for optimizer and scheduler", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "optimizing", "=", "True", "\n", "self", ".", "scheduler", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.set_opt_val": [[81, 356], ["vertex_contact.long.long.long", "anchor_id.long.long.long", "anchor_padding_mask.long.long.long", "[].repeat_interleave", "torch.zeros().bool().to", "torch.where().to", "geo_optimizer.GeOptimizer.get_static_hand_verts", "hocontact.postprocess.geo_loss.HandLoss.get_edge_idx", "hocontact.postprocess.geo_loss.HandLoss.get_edge_len", "RuntimeError", "RuntimeError", "init_pose_val.detach().clone().requires_grad_", "RuntimeError", "geo_optimizer.GeOptimizer.recover_hand", "torch.optim.Adam", "torch.optim.lr_scheduler.ReduceLROnPlateau", "print", "pprint.pprint.pprint", "pprint.pprint.pprint", "pprint.pprint.pprint", "pprint.pprint.pprint", "torch.zeros().bool", "torch.where", "len", "RuntimeError", "set().union", "set", "RuntimeError", "RuntimeError", "RuntimeError", "param.append", "param.append", "param.append", "param.append", "param.append", "list", "list", "torch.arange", "torch.Tensor().to", "torch.Tensor().to", "hand_shape_init.detach().clone().requires_grad_", "torch.zeros", "torch.zeros", "hand_tsl_init.detach().clone().requires_grad_", "torch.zeros", "torch.zeros", "set().intersection", "set", "range", "init_pose_val.detach().clone", "set", "set", "torch.zeros", "geo_optimizer.GeOptimizer.get_var_pose_idx", "len", "numpy.array().astype", "torch.tensor", "numpy.array().astype", "torch.tensor", "torch.zeros().to", "init_pose_val.detach().clone().requires_grad_", "torch.zeros().to", "list", "numpy.array().astype", "torch.tensor", "numpy.array().astype", "torch.tensor", "geo_optimizer.GeOptimizer.opt_val.keys", "geo_optimizer.GeOptimizer.const_val.keys", "torch.zeros", "set", "set", "range", "set", "set", "RuntimeError", "range", "torch.tensor", "torch.zeros", "torch.tensor", "torch.zeros", "torch.Tensor", "torch.Tensor", "hand_shape_init.detach().clone", "hand_tsl_init.detach().clone", "set", "init_pose_val.detach", "numpy.array", "numpy.array", "range", "torch.zeros", "init_pose_val.detach().clone", "torch.zeros", "numpy.array", "numpy.array", "obj_rot_init.detach().clone().requires_grad_", "obj_tsl_init.detach().clone().requires_grad_", "RuntimeError", "hand_shape_init.detach", "hand_tsl_init.detach", "init_pose_val.detach", "obj_rot_init.detach().clone", "obj_tsl_init.detach().clone", "obj_rot_init.detach", "obj_tsl_init.detach"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.get_static_hand_verts", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.get_edge_idx", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.get_edge_len", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.recover_hand", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.get_var_pose_idx"], ["", "def", "set_opt_val", "(", "\n", "self", ",", "\n", "# static val", "\n", "vertex_contact", ",", "# TENSOR[NVERT, ] {0, 1}", "\n", "contact_region", ",", "# TENSOR[NVERT, 1], int", "\n", "anchor_id", ",", "# TENSOR[NVERT, 4]: int", "\n", "anchor_elasti", ",", "# TENSOR[NVERT, 4]", "\n", "anchor_padding_mask", ",", "# TENSOR[NVERT, 4] {0, 1}", "\n", "hand_region_assignment", "=", "None", ",", "# TENSOR[NHANDVERT, ]", "\n", "hand_palm_vertex_mask", "=", "None", ",", "# TENSOR[NHANDVERT, ] {0, 1}", "\n", "# dynamic val: hand", "\n", "hand_shape_gt", "=", "None", ",", "# TENSOR[10, ]", "\n", "hand_tsl_gt", "=", "None", ",", "# TENSOR[3, ]", "\n", "hand_pose_gt", "=", "None", ",", "# (LIST[NPROV, ]: int {0..16}, TENSOR[NPROV, 4])", "\n", "hand_shape_init", "=", "None", ",", "# TENSOR[10, ]", "\n", "hand_tsl_init", "=", "None", ",", "# TENSOR[3, ]", "\n", "hand_pose_init", "=", "None", ",", "# (LIST[NPROV, ]: int {0..16}, TENSOR[NPROV, 4])", "\n", "# dynamic val: obj", "\n", "obj_verts_3d_gt", "=", "None", ",", "\n", "obj_normals_gt", "=", "None", ",", "\n", "obj_verts_3d_can", "=", "None", ",", "\n", "obj_normals_can", "=", "None", ",", "\n", "obj_rot_init", "=", "None", ",", "\n", "obj_tsl_init", "=", "None", ",", "\n", "# hand tsl compensate", "\n", "hand_compensate_root", "=", "None", ",", "# TENSOR[3, ]", "\n", "# runtime viz", "\n", "runtime_vis", "=", "None", ",", "\n", ")", ":", "\n", "# ====== clear memory", "\n", "        ", "self", ".", "opt_val", "=", "{", "}", "\n", "self", ".", "const_val", "=", "{", "}", "\n", "self", ".", "ctrl_val", "=", "{", "\n", "\"optimize_hand_shape\"", ":", "False", ",", "\n", "\"optimize_hand_tsl\"", ":", "False", ",", "\n", "\"optimize_hand_pose\"", ":", "False", ",", "\n", "\"optimize_obj\"", ":", "False", ",", "\n", "\"fhb\"", ":", "self", ".", "fhb", ",", "\n", "}", "\n", "\n", "# ============ process static values >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# region", "\n", "vertex_contact", "=", "vertex_contact", ".", "long", "(", ")", "\n", "anchor_id", "=", "anchor_id", ".", "long", "(", ")", "\n", "anchor_padding_mask", "=", "anchor_padding_mask", ".", "long", "(", ")", "\n", "\n", "# boolean index contact_region, anchor_id, anchor_elasti && anchor_padding_mask", "\n", "obj_contact_region", "=", "contact_region", "[", "vertex_contact", "==", "1", "]", "# TENSOR[NCONT, ]", "\n", "anchor_id", "=", "anchor_id", "[", "vertex_contact", "==", "1", ",", ":", "]", "# TENSOR[NCONT, 4]", "\n", "anchor_elasti", "=", "anchor_elasti", "[", "vertex_contact", "==", "1", ",", ":", "]", "# TENSOR[NCONT, 4]", "\n", "anchor_padding_mask", "=", "anchor_padding_mask", "[", "vertex_contact", "==", "1", ",", ":", "]", "# TENSOR[NCONT, 4]", "\n", "\n", "# boolean mask indexing anchor_id, anchor_elasti && obj_vert_id", "\n", "indexed_anchor_id", "=", "anchor_id", "[", "anchor_padding_mask", "==", "1", "]", "# TENSOR[NVALID, ]", "\n", "self", ".", "const_val", "[", "\"indexed_anchor_id\"", "]", "=", "indexed_anchor_id", "\n", "self", ".", "const_val", "[", "\"indexed_anchor_elasti\"", "]", "=", "anchor_elasti", "[", "anchor_padding_mask", "==", "1", "]", "# TENSOR[NVALID, ]", "\n", "\n", "vertex_id", "=", "torch", ".", "arange", "(", "anchor_id", ".", "shape", "[", "0", "]", ")", "[", ":", ",", "None", "]", ".", "repeat_interleave", "(", "\n", "anchor_padding_mask", ".", "shape", "[", "1", "]", ",", "dim", "=", "1", "\n", ")", "# TENSOR[NCONT, 4]", "\n", "self", ".", "const_val", "[", "\"indexed_vertex_id\"", "]", "=", "vertex_id", "[", "anchor_padding_mask", "==", "1", "]", "# TENSOR[NVALID, ]", "\n", "\n", "tip_anchor_mask", "=", "torch", ".", "zeros", "(", "indexed_anchor_id", ".", "shape", "[", "0", "]", ")", ".", "bool", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "tip_anchor_list", "=", "[", "2", ",", "3", ",", "4", ",", "9", ",", "10", ",", "11", ",", "15", ",", "16", ",", "17", ",", "22", ",", "23", ",", "24", ",", "29", ",", "30", ",", "31", "]", "\n", "for", "tip_anchor_id", "in", "tip_anchor_list", ":", "\n", "            ", "tip_anchor_mask", "=", "tip_anchor_mask", "|", "(", "self", ".", "const_val", "[", "\"indexed_anchor_id\"", "]", "==", "tip_anchor_id", ")", "\n", "", "self", ".", "const_val", "[", "\"indexed_elasti_k\"", "]", "=", "torch", ".", "where", "(", "\n", "tip_anchor_mask", ",", "torch", ".", "Tensor", "(", "[", "1.0", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "torch", ".", "Tensor", "(", "[", "0.1", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# hand faces & edges", "\n", "self", ".", "const_val", "[", "\"hand_faces\"", "]", "=", "self", ".", "mano_layer", ".", "th_faces", "\n", "self", ".", "const_val", "[", "\"static_verts\"", "]", "=", "self", ".", "get_static_hand_verts", "(", ")", "\n", "self", ".", "const_val", "[", "\"hand_edges\"", "]", "=", "HandLoss", ".", "get_edge_idx", "(", "self", ".", "const_val", "[", "\"hand_faces\"", "]", ")", "\n", "self", ".", "const_val", "[", "\"static_edge_len\"", "]", "=", "HandLoss", ".", "get_edge_len", "(", "\n", "self", ".", "const_val", "[", "\"static_verts\"", "]", ",", "self", ".", "const_val", "[", "\"hand_edges\"", "]", "\n", ")", "\n", "# endregion", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ============ dynamic val: hand >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# region", "\n", "# ====== hand_shape", "\n", "if", "hand_shape_gt", "is", "not", "None", "and", "hand_shape_init", "is", "not", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"both hand_shape gt and init are provided\"", ")", "\n", "", "elif", "hand_shape_gt", "is", "not", "None", "and", "hand_shape_init", "is", "None", ":", "\n", "            ", "self", ".", "const_val", "[", "\"hand_shape_gt\"", "]", "=", "hand_shape_gt", "\n", "self", ".", "ctrl_val", "[", "\"optimize_hand_shape\"", "]", "=", "False", "\n", "", "elif", "hand_shape_gt", "is", "None", "and", "hand_shape_init", "is", "not", "None", ":", "\n", "            ", "self", ".", "opt_val", "[", "\"hand_shape_var\"", "]", "=", "hand_shape_init", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "self", ".", "const_val", "[", "\"hand_shape_init\"", "]", "=", "hand_shape_init", "\n", "self", ".", "ctrl_val", "[", "\"optimize_hand_shape\"", "]", "=", "True", "\n", "", "else", ":", "\n", "# hand_tsl_gt is None and hand_tsl_init is None:", "\n", "            ", "self", ".", "opt_val", "[", "\"hand_shape_var\"", "]", "=", "torch", ".", "zeros", "(", "10", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "True", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "const_val", "[", "\"hand_shape_init\"", "]", "=", "torch", ".", "zeros", "(", "10", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "ctrl_val", "[", "\"optimize_hand_shape\"", "]", "=", "True", "\n", "\n", "# ====== hand_tsl", "\n", "", "if", "hand_tsl_gt", "is", "not", "None", "and", "hand_tsl_init", "is", "not", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"both hand_tsl gt and init are provided\"", ")", "\n", "", "elif", "hand_tsl_gt", "is", "not", "None", "and", "hand_tsl_init", "is", "None", ":", "\n", "            ", "self", ".", "const_val", "[", "\"hand_tsl_gt\"", "]", "=", "hand_tsl_gt", "\n", "self", ".", "ctrl_val", "[", "\"optimize_hand_tsl\"", "]", "=", "False", "\n", "", "elif", "hand_tsl_gt", "is", "None", "and", "hand_tsl_init", "is", "not", "None", ":", "\n", "            ", "self", ".", "opt_val", "[", "\"hand_tsl_var\"", "]", "=", "hand_tsl_init", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "self", ".", "const_val", "[", "\"hand_tsl_init\"", "]", "=", "hand_tsl_init", "\n", "self", ".", "ctrl_val", "[", "\"optimize_hand_tsl\"", "]", "=", "True", "\n", "", "else", ":", "\n", "# hand_tsl_gt is None and hand_tsl_init is None:", "\n", "            ", "self", ".", "opt_val", "[", "\"hand_tsl_var\"", "]", "=", "torch", ".", "zeros", "(", "3", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "True", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "const_val", "[", "\"hand_tsl_init\"", "]", "=", "torch", ".", "zeros", "(", "3", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "ctrl_val", "[", "\"optimize_hand_tsl\"", "]", "=", "True", "\n", "\n", "# ====== hand pose", "\n", "# this is complex! need special care", "\n", "", "if", "hand_pose_gt", "is", "not", "None", "and", "hand_pose_init", "is", "not", "None", ":", "\n", "# full gt and init provided", "\n", "            ", "gt_pose_idx", ",", "gt_pose_val", "=", "hand_pose_gt", "\n", "init_pose_idx", ",", "init_pose_val", "=", "hand_pose_init", "\n", "if", "len", "(", "set", "(", "gt_pose_idx", ")", ".", "intersection", "(", "set", "(", "init_pose_idx", ")", ")", ")", ">", "0", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"repeat hand_pose gt & init provided\"", ")", "\n", "", "if", "set", "(", "gt_pose_idx", ")", ".", "union", "(", "set", "(", "init_pose_idx", ")", ")", "!=", "set", "(", "range", "(", "16", ")", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"hand_pose: not enough gt & init\"", ")", "\n", "", "self", ".", "const_val", "[", "\"hand_pose_gt_idx\"", "]", "=", "gt_pose_idx", "\n", "self", ".", "const_val", "[", "\"hand_pose_gt_val\"", "]", "=", "gt_pose_val", "\n", "self", ".", "const_val", "[", "\"hand_pose_var_idx\"", "]", "=", "init_pose_idx", "\n", "self", ".", "opt_val", "[", "\"hand_pose_var_val\"", "]", "=", "init_pose_val", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "self", ".", "const_val", "[", "\"hand_pose_init_val\"", "]", "=", "init_pose_val", "\n", "self", ".", "ctrl_val", "[", "\"optimize_hand_pose\"", "]", "=", "True", "\n", "", "elif", "hand_pose_gt", "is", "not", "None", "and", "hand_pose_init", "is", "None", ":", "\n", "            ", "gt_pose_idx", ",", "gt_pose_val", "=", "hand_pose_gt", "\n", "self", ".", "const_val", "[", "\"hand_pose_gt_idx\"", "]", "=", "gt_pose_idx", "\n", "self", ".", "const_val", "[", "\"hand_pose_gt_val\"", "]", "=", "gt_pose_val", "\n", "if", "set", "(", "gt_pose_idx", ")", "==", "set", "(", "range", "(", "16", ")", ")", ":", "\n", "# full gt provided", "\n", "                ", "self", ".", "const_val", "[", "\"hand_pose_var_idx\"", "]", "=", "[", "]", "\n", "self", ".", "opt_val", "[", "\"hand_pose_var_val\"", "]", "=", "torch", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "ctrl_val", "[", "\"optimize_hand_pose\"", "]", "=", "False", "\n", "", "else", ":", "\n", "# partial gt provided", "\n", "                ", "var_pose_idx", "=", "self", ".", "get_var_pose_idx", "(", "gt_pose_idx", ")", "\n", "n_var_pose", "=", "len", "(", "var_pose_idx", ")", "\n", "init_val", "=", "np", ".", "array", "(", "[", "[", "0.9999", ",", "0.0", ",", "-", "0.0101", ",", "0.0", "]", "]", "*", "n_var_pose", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "const_val", "[", "\"hand_pose_var_idx\"", "]", "=", "var_pose_idx", "\n", "self", ".", "opt_val", "[", "\"hand_pose_var_val\"", "]", "=", "torch", ".", "tensor", "(", "\n", "init_val", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "True", ",", "device", "=", "self", ".", "device", "\n", ")", "\n", "init_val_true", "=", "np", ".", "array", "(", "[", "[", "1.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", "]", "*", "n_var_pose", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "const_val", "[", "\"hand_pose_init_val\"", "]", "=", "torch", ".", "tensor", "(", "\n", "init_val_true", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "self", ".", "device", "\n", ")", "\n", "self", ".", "ctrl_val", "[", "\"optimize_hand_pose\"", "]", "=", "True", "\n", "", "", "elif", "hand_pose_gt", "is", "None", "and", "hand_pose_init", "is", "not", "None", ":", "\n", "# full init provided", "\n", "            ", "init_pose_idx", ",", "init_pose_val", "=", "hand_pose_init", "\n", "if", "set", "(", "init_pose_idx", ")", "!=", "set", "(", "range", "(", "16", ")", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"hand_pose: not enough init\"", ")", "\n", "", "self", ".", "const_val", "[", "\"hand_pose_gt_idx\"", "]", "=", "[", "]", "\n", "self", ".", "const_val", "[", "\"hand_pose_gt_val\"", "]", "=", "torch", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "const_val", "[", "\"hand_pose_var_idx\"", "]", "=", "init_pose_idx", "\n", "self", ".", "opt_val", "[", "\"hand_pose_var_val\"", "]", "=", "init_pose_val", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "self", ".", "const_val", "[", "\"hand_pose_init_val\"", "]", "=", "init_pose_val", "\n", "self", ".", "ctrl_val", "[", "\"optimize_hand_pose\"", "]", "=", "True", "\n", "", "else", ":", "\n", "# hand_pose_gt is None and hand_pose_init is None:", "\n", "# nothing provided", "\n", "            ", "self", ".", "const_val", "[", "\"hand_pose_gt_idx\"", "]", "=", "[", "]", "\n", "self", ".", "const_val", "[", "\"hand_pose_gt_val\"", "]", "=", "torch", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "const_val", "[", "\"hand_pose_var_idx\"", "]", "=", "list", "(", "range", "(", "16", ")", ")", "\n", "n_var_pose", "=", "16", "\n", "init_val", "=", "np", ".", "array", "(", "[", "[", "0.9999", ",", "0.0", ",", "-", "0.0101", ",", "0.0", "]", "]", "*", "n_var_pose", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "opt_val", "[", "\"hand_pose_var_val\"", "]", "=", "torch", ".", "tensor", "(", "\n", "init_val", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "True", ",", "device", "=", "self", ".", "device", "\n", ")", "\n", "init_val_true", "=", "np", ".", "array", "(", "[", "[", "1.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", "]", "*", "n_var_pose", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "const_val", "[", "\"hand_pose_init_val\"", "]", "=", "torch", ".", "tensor", "(", "init_val_true", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "ctrl_val", "[", "\"optimize_hand_pose\"", "]", "=", "True", "\n", "# endregion", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ============ dynamic val: obj >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# region", "\n", "", "if", "obj_verts_3d_gt", "is", "not", "None", "and", "obj_verts_3d_can", "is", "not", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"optimize obj mode conflict: both provided\"", ")", "\n", "", "elif", "obj_verts_3d_gt", "is", "None", "and", "obj_verts_3d_can", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"optimize obj mode conflict: neither proided\"", ")", "\n", "", "elif", "obj_verts_3d_gt", "is", "not", "None", "and", "obj_verts_3d_can", "is", "None", ":", "\n", "            ", "self", ".", "const_val", "[", "\"obj_verts_3d_gt\"", "]", "=", "obj_verts_3d_gt", "[", "vertex_contact", "==", "1", ",", ":", "]", "\n", "self", ".", "const_val", "[", "\"obj_normals_gt\"", "]", "=", "obj_normals_gt", "[", "vertex_contact", "==", "1", ",", ":", "]", "\n", "self", ".", "ctrl_val", "[", "\"optimize_obj\"", "]", "=", "False", "\n", "self", ".", "const_val", "[", "\"full_obj_verts_3d\"", "]", "=", "obj_verts_3d_gt", "\n", "self", ".", "const_val", "[", "\"full_obj_normals\"", "]", "=", "obj_normals_gt", "\n", "", "else", ":", "\n", "# obj_verts_3d_gt is None and obj_verts_3d_can is not None", "\n", "            ", "self", ".", "const_val", "[", "\"obj_verts_3d_can\"", "]", "=", "obj_verts_3d_can", "[", "vertex_contact", "==", "1", ",", ":", "]", "\n", "self", ".", "const_val", "[", "\"obj_normals_can\"", "]", "=", "obj_normals_can", "[", "vertex_contact", "==", "1", ",", ":", "]", "\n", "self", ".", "ctrl_val", "[", "\"optimize_obj\"", "]", "=", "True", "\n", "self", ".", "const_val", "[", "\"full_obj_verts_3d\"", "]", "=", "obj_verts_3d_can", "\n", "self", ".", "const_val", "[", "\"full_obj_normals\"", "]", "=", "obj_normals_can", "\n", "# check if init value is provided", "\n", "if", "obj_rot_init", "is", "None", "and", "obj_tsl_init", "is", "None", ":", "\n", "# both not provided", "\n", "                ", "self", ".", "opt_val", "[", "\"obj_rot_var\"", "]", "=", "torch", ".", "tensor", "(", "\n", "[", "0.001", ",", "0.001", ",", "0.001", "]", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "True", ",", "device", "=", "self", ".", "device", "\n", ")", "\n", "self", ".", "opt_val", "[", "\"obj_tsl_var\"", "]", "=", "torch", ".", "zeros", "(", "3", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "True", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "const_val", "[", "\"obj_rot_init\"", "]", "=", "torch", ".", "tensor", "(", "\n", "[", "0.000", ",", "0.000", ",", "0.000", "]", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "self", ".", "device", "\n", ")", "\n", "self", ".", "const_val", "[", "\"obj_tsl_init\"", "]", "=", "torch", ".", "zeros", "(", "3", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "self", ".", "device", ")", "\n", "", "elif", "obj_rot_init", "is", "not", "None", "and", "obj_tsl_init", "is", "not", "None", ":", "\n", "                ", "self", ".", "opt_val", "[", "\"obj_rot_var\"", "]", "=", "obj_rot_init", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "self", ".", "opt_val", "[", "\"obj_tsl_var\"", "]", "=", "obj_tsl_init", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "self", ".", "const_val", "[", "\"obj_rot_init\"", "]", "=", "obj_rot_init", "\n", "self", ".", "const_val", "[", "\"obj_tsl_init\"", "]", "=", "obj_tsl_init", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"incomplete init for optimize obj\"", ")", "\n", "# endregion", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ============ compensate tsl (when fhb adapt layer is not used) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "", "", "if", "self", ".", "compensate_tsl", "and", "(", "hand_tsl_gt", "is", "not", "None", "or", "hand_tsl_init", "is", "not", "None", ")", ":", "\n", "            ", "if", "hand_compensate_root", "is", "None", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"if need to compensate hand root tsl, correct root pos is requried\"", ")", "\n", "", "_", ",", "curr_joints", ",", "_", "=", "self", ".", "recover_hand", "(", ")", "\n", "compensate_offset", "=", "hand_compensate_root", "-", "curr_joints", "[", "0", ",", "...", "]", "\n", "if", "not", "self", ".", "ctrl_val", "[", "\"optimize_hand_tsl\"", "]", ":", "\n", "                ", "self", ".", "const_val", "[", "\"hand_tsl_gt\"", "]", "=", "hand_tsl_gt", "+", "compensate_offset", "\n", "", "else", ":", "\n", "                ", "self", ".", "opt_val", "[", "\"hand_tsl_var\"", "]", "=", "(", "hand_tsl_init", "+", "compensate_offset", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "self", ".", "const_val", "[", "\"hand_tsl_init\"", "]", "=", "hand_tsl_init", "+", "compensate_offset", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ============ construct optimizer & scheduler >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "# region", "\n", "# ====== optimizer", "\n", "", "", "if", "(", "\n", "self", ".", "ctrl_val", "[", "\"optimize_hand_shape\"", "]", "\n", "or", "self", ".", "ctrl_val", "[", "\"optimize_hand_tsl\"", "]", "\n", "or", "self", ".", "ctrl_val", "[", "\"optimize_hand_pose\"", "]", "\n", "or", "self", ".", "ctrl_val", "[", "\"optimize_obj\"", "]", "\n", ")", ":", "\n", "# dispatch lr to different param", "\n", "            ", "param", "=", "[", "]", "\n", "if", "self", ".", "ctrl_val", "[", "\"optimize_hand_shape\"", "]", ":", "\n", "                ", "param", ".", "append", "(", "{", "\"params\"", ":", "[", "self", ".", "opt_val", "[", "\"hand_shape_var\"", "]", "]", "}", ")", "\n", "", "if", "self", ".", "ctrl_val", "[", "\"optimize_hand_tsl\"", "]", ":", "\n", "                ", "param", ".", "append", "(", "{", "\"params\"", ":", "[", "self", ".", "opt_val", "[", "\"hand_tsl_var\"", "]", "]", ",", "\"lr\"", ":", "0.1", "*", "self", ".", "lr", "}", ")", "\n", "", "if", "self", ".", "ctrl_val", "[", "\"optimize_hand_pose\"", "]", ":", "\n", "                ", "param", ".", "append", "(", "{", "\"params\"", ":", "[", "self", ".", "opt_val", "[", "\"hand_pose_var_val\"", "]", "]", "}", ")", "\n", "", "if", "self", ".", "ctrl_val", "[", "\"optimize_obj\"", "]", ":", "\n", "                ", "param", ".", "append", "(", "{", "\"params\"", ":", "[", "self", ".", "opt_val", "[", "\"obj_rot_var\"", "]", "]", "}", ")", "\n", "param", ".", "append", "(", "{", "\"params\"", ":", "[", "self", ".", "opt_val", "[", "\"obj_tsl_var\"", "]", "]", ",", "\"lr\"", ":", "0.1", "*", "self", ".", "lr", "}", ")", "\n", "\n", "", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "param", ",", "lr", "=", "self", ".", "lr", ")", "\n", "self", ".", "optimizing", "=", "True", "\n", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "self", ".", "optimizer", ",", "min_lr", "=", "1e-5", ",", "mode", "=", "\"min\"", ",", "factor", "=", "0.5", ",", "patience", "=", "20", ",", "verbose", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizing", "=", "False", "\n", "# endregion", "\n", "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "# ====== runtime viz", "\n", "", "self", ".", "runtime_vis", "=", "runtime_vis", "\n", "\n", "# ====== verbose", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"Optimizing: \"", ",", "self", ".", "optimizing", ")", "\n", "pprint", "(", "self", ".", "ctrl_val", ")", "\n", "pprint", "(", "list", "(", "self", ".", "opt_val", ".", "keys", "(", ")", ")", ")", "\n", "pprint", "(", "list", "(", "self", ".", "const_val", ".", "keys", "(", ")", ")", ")", "\n", "pprint", "(", "self", ".", "coef_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.get_var_pose_idx": [[357, 364], ["set", "set", "set.difference", "list", "range"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "get_var_pose_idx", "(", "sel_pose_idx", ")", ":", "\n", "# gt has 16 pose", "\n", "        ", "all_pose_idx", "=", "set", "(", "range", "(", "16", ")", ")", "\n", "sel_pose_idx_set", "=", "set", "(", "sel_pose_idx", ")", "\n", "var_pose_idx", "=", "all_pose_idx", ".", "difference", "(", "sel_pose_idx_set", ")", "\n", "return", "list", "(", "var_pose_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.get_static_hand_verts": [[365, 372], ["numpy.array().astype", "torch.tensor().reshape().unsqueeze().float().to", "torch.zeros().float().to", "geo_optimizer.GeOptimizer.mano_layer", "v.squeeze.squeeze.squeeze", "numpy.array", "torch.tensor().reshape().unsqueeze().float", "torch.zeros().float", "torch.tensor().reshape().unsqueeze", "torch.zeros", "torch.tensor().reshape", "torch.tensor"], "methods", ["None"], ["", "def", "get_static_hand_verts", "(", "self", ")", ":", "\n", "        ", "init_val_pose", "=", "np", ".", "array", "(", "[", "[", "1.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", "]", "*", "16", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "vec_pose", "=", "torch", ".", "tensor", "(", "init_val_pose", ")", ".", "reshape", "(", "-", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "vec_shape", "=", "torch", ".", "zeros", "(", "1", ",", "10", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "v", ",", "j", ",", "t", ",", "_", "=", "self", ".", "mano_layer", "(", "vec_pose", ",", "vec_shape", ")", "\n", "v", "=", "v", ".", "squeeze", "(", "0", ")", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.assemble_pose_vec": [[373, 379], ["torch.cat", "torch.cat", "torch.Tensor().long", "torch.Tensor().long", "torch.argsort", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "assemble_pose_vec", "(", "gt_idx", ",", "gt_pose", ",", "var_idx", ",", "var_pose", ")", ":", "\n", "        ", "idx_tensor", "=", "torch", ".", "cat", "(", "(", "torch", ".", "Tensor", "(", "gt_idx", ")", ".", "long", "(", ")", ",", "torch", ".", "Tensor", "(", "var_idx", ")", ".", "long", "(", ")", ")", ")", "\n", "pose_tensor", "=", "torch", ".", "cat", "(", "(", "gt_pose", ",", "var_pose", ")", ",", "dim", "=", "0", ")", "\n", "pose_tensor", "=", "pose_tensor", "[", "torch", ".", "argsort", "(", "idx_tensor", ")", "]", "\n", "return", "pose_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.transf_vectors": [[380, 390], ["manopth.rodrigues_layer.batch_rodrigues().squeeze().reshape", "manopth.rodrigues_layer.batch_rodrigues().squeeze", "manopth.rodrigues_layer.batch_rodrigues", "rot.unsqueeze"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "transf_vectors", "(", "vectors", ",", "tsl", ",", "rot", ")", ":", "\n", "        ", "\"\"\"\n        vectors: [K, 3], tsl: [3, ], rot: [3, ]\n        return: [K, 3]\n        \"\"\"", "\n", "rot_matrix", "=", "batch_rodrigues", "(", "rot", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", ".", "reshape", "(", "(", "3", ",", "3", ")", ")", "\n", "vec", "=", "(", "rot_matrix", "@", "vectors", ".", "T", ")", ".", "T", "\n", "vec", "=", "vec", "+", "tsl", "\n", "return", "vec", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.loss_fn": [[391, 571], ["geo_optimizer.GeOptimizer.assemble_pose_vec", "geo_optimizer.GeOptimizer.unsqueeze", "geo_optimizer.GeOptimizer.mano_layer", "rebuild_verts.squeeze", "geo_optimizer.GeOptimizer.anchor_layer", "rebuild_anchor.squeeze.squeeze.contiguous", "rebuild_anchor.squeeze.squeeze.squeeze", "hocontact.postprocess.geo_loss.FieldLoss.contact_loss", "hocontact.postprocess.geo_loss.FieldLoss.full_repulsion_loss", "opt_val[].unsqueeze", "const_val[].unsqueeze", "opt_val[].unsqueeze", "const_val[].unsqueeze", "geo_optimizer.GeOptimizer.adaptor", "adapt_joints.transpose.transpose.transpose", "torch.cat", "geo_optimizer.GeOptimizer.transf_vectors", "geo_optimizer.GeOptimizer.transf_vectors", "geo_optimizer.GeOptimizer.transf_vectors", "hocontact.postprocess.geo_loss.HandLoss.pose_quat_norm_loss", "manopth.quatutils.normalize_quaternion", "hocontact.postprocess.geo_loss.HandLoss.pose_reg_loss", "geo_optimizer.GeOptimizer.axis_layer", "manopth.quatutils.quaternion_to_angle_axis", "torch.norm", "hocontact.postprocess.geo_loss.HandLoss.rotation_angle_loss", "hocontact.postprocess.geo_loss.HandLoss.joint_b_axis_loss", "hocontact.postprocess.geo_loss.HandLoss.joint_u_axis_loss", "hocontact.postprocess.geo_loss.HandLoss.joint_l_limit_loss", "hocontact.postprocess.geo_loss.HandLoss.edge_len_loss", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "hocontact.postprocess.geo_loss.HandLoss.shape_reg_loss", "torch.Tensor().to", "hocontact.postprocess.geo_loss.HandLoss.hand_tsl_loss", "torch.Tensor().to", "hocontact.postprocess.geo_loss.ObjectLoss.obj_transf_loss", "torch.Tensor().to", "geo_optimizer.GeOptimizer.runtime_show", "adapt_joints[].unsqueeze", "adapt_joints[].unsqueeze", "torch.zeros", "manopth.quatutils.normalize_quaternion.reshape", "torch.norm", "geo_optimizer.GeOptimizer.transf_vectors", "geo_optimizer.GeOptimizer.axis_layer", "torch.Tensor().to.detach().cpu().item", "torch.Tensor().to.detach().cpu().item", "torch.Tensor().to.detach().cpu().item", "torch.Tensor().to.detach().cpu().item", "torch.Tensor().to.detach().cpu().item", "torch.Tensor().to.detach().cpu().item", "hocontact.postprocess.geo_loss.FieldLoss.contact_loss.detach().cpu().item", "hocontact.postprocess.geo_loss.FieldLoss.full_repulsion_loss.detach().cpu().item", "torch.Tensor().to.detach().cpu().item", "torch.Tensor().to.detach().cpu().item", "torch.Tensor().to.detach().cpu().item", "torch.cat", "torch.zeros().to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "geo_optimizer.GeOptimizer.opt_val[].detach", "geo_optimizer.GeOptimizer.opt_val[].detach", "torch.Tensor().to.detach().cpu", "torch.Tensor().to.detach().cpu", "torch.Tensor().to.detach().cpu", "torch.Tensor().to.detach().cpu", "torch.Tensor().to.detach().cpu", "torch.Tensor().to.detach().cpu", "hocontact.postprocess.geo_loss.FieldLoss.contact_loss.detach().cpu", "hocontact.postprocess.geo_loss.FieldLoss.full_repulsion_loss.detach().cpu", "torch.Tensor().to.detach().cpu", "torch.Tensor().to.detach().cpu", "torch.Tensor().to.detach().cpu", "torch.zeros().to", "const_val[].unsqueeze.view", "torch.zeros", "torch.Tensor().to.detach", "torch.Tensor().to.detach", "torch.Tensor().to.detach", "torch.Tensor().to.detach", "torch.Tensor().to.detach", "torch.Tensor().to.detach", "hocontact.postprocess.geo_loss.FieldLoss.contact_loss.detach", "hocontact.postprocess.geo_loss.FieldLoss.full_repulsion_loss.detach", "torch.Tensor().to.detach", "torch.Tensor().to.detach", "torch.Tensor().to.detach", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.assemble_pose_vec", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.FieldLoss.contact_loss", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.FieldLoss.full_repulsion_loss", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.transf_vectors", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.transf_vectors", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.transf_vectors", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.pose_quat_norm_loss", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.pose_reg_loss", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.rotation_angle_loss", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.joint_b_axis_loss", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.joint_u_axis_loss", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.joint_l_limit_loss", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.edge_len_loss", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.shape_reg_loss", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.HandLoss.hand_tsl_loss", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_loss.ObjectLoss.obj_transf_loss", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.runtime_show", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.transf_vectors"], ["", "def", "loss_fn", "(", "self", ",", "opt_val", ",", "const_val", ",", "ctrl_val", ",", "coef_val", ")", ":", "\n", "        ", "var_hand_pose_assembled", "=", "self", ".", "assemble_pose_vec", "(", "\n", "const_val", "[", "\"hand_pose_gt_idx\"", "]", ",", "\n", "const_val", "[", "\"hand_pose_gt_val\"", "]", ",", "\n", "const_val", "[", "\"hand_pose_var_idx\"", "]", ",", "\n", "opt_val", "[", "\"hand_pose_var_val\"", "]", ",", "\n", ")", "\n", "\n", "# dispatch hand var", "\n", "vec_pose", "=", "var_hand_pose_assembled", ".", "unsqueeze", "(", "0", ")", "\n", "if", "ctrl_val", "[", "\"optimize_hand_shape\"", "]", ":", "\n", "            ", "vec_shape", "=", "opt_val", "[", "\"hand_shape_var\"", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "vec_shape", "=", "const_val", "[", "\"hand_shape_gt\"", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "if", "ctrl_val", "[", "\"optimize_hand_tsl\"", "]", ":", "\n", "            ", "vec_tsl", "=", "opt_val", "[", "\"hand_tsl_var\"", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "vec_tsl", "=", "const_val", "[", "\"hand_tsl_gt\"", "]", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# rebuild hand", "\n", "", "rebuild_verts", ",", "rebuild_joints", ",", "rebuild_transf", ",", "rebuild_full_pose", "=", "self", ".", "mano_layer", "(", "vec_pose", ",", "vec_shape", ")", "\n", "# skel adaption", "\n", "if", "ctrl_val", "[", "\"fhb\"", "]", ":", "\n", "            ", "adapt_joints", ",", "_", "=", "self", ".", "adaptor", "(", "rebuild_verts", ")", "\n", "adapt_joints", "=", "adapt_joints", ".", "transpose", "(", "1", ",", "2", ")", "\n", "rebuild_joints", "=", "rebuild_joints", "-", "adapt_joints", "[", ":", ",", "9", "]", ".", "unsqueeze", "(", "1", ")", "\n", "rebuild_verts", "=", "rebuild_verts", "-", "adapt_joints", "[", ":", ",", "9", "]", ".", "unsqueeze", "(", "1", ")", "\n", "", "rebuild_joints", "=", "rebuild_joints", "+", "vec_tsl", "\n", "rebuild_verts", "=", "rebuild_verts", "+", "vec_tsl", "\n", "rebuild_transf", "=", "rebuild_transf", "+", "torch", ".", "cat", "(", "\n", "[", "\n", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "3", ",", "3", ")", ".", "to", "(", "self", ".", "device", ")", ",", "vec_tsl", ".", "view", "(", "3", ",", "-", "1", ")", "]", ",", "dim", "=", "1", ")", ",", "\n", "torch", ".", "zeros", "(", "1", ",", "4", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "]", ",", "\n", "dim", "=", "0", ",", "\n", ")", "\n", "rebuild_verts_squeezed", "=", "rebuild_verts", ".", "squeeze", "(", "0", ")", "\n", "\n", "# rebuild anchor", "\n", "rebuild_anchor", "=", "self", ".", "anchor_layer", "(", "rebuild_verts", ")", "\n", "rebuild_anchor", "=", "rebuild_anchor", ".", "contiguous", "(", ")", "# TENSOR[1, 32, 3]", "\n", "rebuild_anchor", "=", "rebuild_anchor", ".", "squeeze", "(", "0", ")", "# TENSOR[32, 3]", "\n", "anchor_pos", "=", "rebuild_anchor", "[", "const_val", "[", "\"indexed_anchor_id\"", "]", "]", "# TENSOR[NVALID, 3]", "\n", "\n", "# dispatch obj var", "\n", "if", "ctrl_val", "[", "\"optimize_obj\"", "]", ":", "\n", "            ", "obj_verts", "=", "self", ".", "transf_vectors", "(", "\n", "const_val", "[", "\"obj_verts_3d_can\"", "]", ",", "\n", "opt_val", "[", "\"obj_tsl_var\"", "]", ",", "\n", "opt_val", "[", "\"obj_rot_var\"", "]", ",", "\n", ")", "\n", "full_obj_verts", "=", "self", ".", "transf_vectors", "(", "\n", "const_val", "[", "\"full_obj_verts_3d\"", "]", ",", "\n", "opt_val", "[", "\"obj_tsl_var\"", "]", ",", "\n", "opt_val", "[", "\"obj_rot_var\"", "]", ",", "\n", ")", "\n", "full_obj_normals", "=", "self", ".", "transf_vectors", "(", "\n", "const_val", "[", "\"full_obj_normals\"", "]", ",", "\n", "torch", ".", "zeros", "(", "3", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "self", ".", "device", ")", ",", "\n", "opt_val", "[", "\"obj_rot_var\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "obj_verts", "=", "const_val", "[", "\"obj_verts_3d_gt\"", "]", "\n", "full_obj_verts", "=", "const_val", "[", "\"full_obj_verts_3d\"", "]", "\n", "full_obj_normals", "=", "const_val", "[", "\"full_obj_normals\"", "]", "\n", "\n", "# contact loss", "\n", "", "contact_loss", "=", "FieldLoss", ".", "contact_loss", "(", "\n", "anchor_pos", ",", "\n", "obj_verts", "[", "const_val", "[", "\"indexed_vertex_id\"", "]", "]", ",", "\n", "const_val", "[", "\"indexed_anchor_elasti\"", "]", ",", "\n", "const_val", "[", "\"indexed_elasti_k\"", "]", ",", "\n", ")", "\n", "# repulsion loss", "\n", "repulsion_loss", "=", "FieldLoss", ".", "full_repulsion_loss", "(", "\n", "rebuild_verts_squeezed", ",", "\n", "full_obj_verts", ",", "\n", "full_obj_normals", ",", "\n", "query", "=", "coef_val", "[", "\"repulsion_query\"", "]", ",", "\n", "threshold", "=", "coef_val", "[", "\"repulsion_threshold\"", "]", ",", "\n", ")", "\n", "\n", "if", "ctrl_val", "[", "\"optimize_hand_pose\"", "]", ":", "\n", "# get hand loss", "\n", "            ", "quat_norm_loss", "=", "HandLoss", ".", "pose_quat_norm_loss", "(", "var_hand_pose_assembled", ")", "\n", "var_hand_pose_normalized", "=", "normalize_quaternion", "(", "var_hand_pose_assembled", ")", "\n", "pose_reg_loss", "=", "HandLoss", ".", "pose_reg_loss", "(", "\n", "var_hand_pose_normalized", "[", "const_val", "[", "\"hand_pose_var_idx\"", "]", "]", ",", "const_val", "[", "\"hand_pose_init_val\"", "]", "\n", ")", "\n", "\n", "b_axis", ",", "u_axis", ",", "l_axis", "=", "self", ".", "axis_layer", "(", "rebuild_joints", ",", "rebuild_transf", ")", "\n", "\n", "angle_axis", "=", "quaternion_to_angle_axis", "(", "var_hand_pose_normalized", ".", "reshape", "(", "(", "16", ",", "4", ")", ")", ")", "\n", "angle_axis", "=", "angle_axis", "[", "1", ":", ",", ":", "]", "# ignore global rot [15, 3]", "\n", "axis", "=", "angle_axis", "/", "torch", ".", "norm", "(", "angle_axis", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "angle", "=", "torch", ".", "norm", "(", "angle_axis", ",", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "\n", "# limit angle", "\n", "angle_limit_loss", "=", "HandLoss", ".", "rotation_angle_loss", "(", "angle", ")", "\n", "\n", "joint_b_axis_loss", "=", "HandLoss", ".", "joint_b_axis_loss", "(", "b_axis", ",", "axis", ")", "\n", "joint_u_axis_loss", "=", "HandLoss", ".", "joint_u_axis_loss", "(", "u_axis", ",", "axis", ")", "\n", "joint_l_limit_loss", "=", "HandLoss", ".", "joint_l_limit_loss", "(", "l_axis", ",", "axis", ")", "\n", "\n", "edge_loss", "=", "HandLoss", ".", "edge_len_loss", "(", "\n", "rebuild_verts_squeezed", ",", "const_val", "[", "\"hand_edges\"", "]", ",", "const_val", "[", "\"static_edge_len\"", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "quat_norm_loss", "=", "torch", ".", "Tensor", "(", "[", "0.0", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "pose_reg_loss", "=", "torch", ".", "Tensor", "(", "[", "0.0", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "angle_limit_loss", "=", "torch", ".", "Tensor", "(", "[", "0.0", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "joint_b_axis_loss", "=", "torch", ".", "Tensor", "(", "[", "0.0", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "joint_u_axis_loss", "=", "torch", ".", "Tensor", "(", "[", "0.0", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "joint_l_limit_loss", "=", "torch", ".", "Tensor", "(", "[", "0.0", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "edge_loss", "=", "torch", ".", "Tensor", "(", "[", "0.0", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# pose_reg_loss_to_zero = torch.Tensor([0.0]).to(self.device)", "\n", "\n", "", "if", "ctrl_val", "[", "\"optimize_hand_shape\"", "]", ":", "\n", "            ", "shape_reg_loss", "=", "HandLoss", ".", "shape_reg_loss", "(", "opt_val", "[", "\"hand_shape_var\"", "]", ",", "const_val", "[", "\"hand_shape_init\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "shape_reg_loss", "=", "torch", ".", "Tensor", "(", "[", "0.0", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "if", "ctrl_val", "[", "\"optimize_hand_tsl\"", "]", ":", "\n", "            ", "hand_tsl_loss", "=", "HandLoss", ".", "hand_tsl_loss", "(", "opt_val", "[", "\"hand_tsl_var\"", "]", ",", "const_val", "[", "\"hand_tsl_init\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "hand_tsl_loss", "=", "torch", ".", "Tensor", "(", "[", "0.0", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "if", "ctrl_val", "[", "\"optimize_obj\"", "]", ":", "\n", "            ", "obj_transf_loss", "=", "ObjectLoss", ".", "obj_transf_loss", "(", "\n", "opt_val", "[", "\"obj_tsl_var\"", "]", ",", "opt_val", "[", "\"obj_rot_var\"", "]", ",", "const_val", "[", "\"obj_tsl_init\"", "]", ",", "const_val", "[", "\"obj_rot_init\"", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "obj_transf_loss", "=", "torch", ".", "Tensor", "(", "[", "0.0", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "loss", "=", "(", "\n", "# ============= HAND ANATOMICAL LOSS", "\n", "1.0", "*", "quat_norm_loss", "\n", "+", "1.0", "*", "angle_limit_loss", "\n", "+", "1.0", "*", "edge_loss", "\n", "+", "0.1", "*", "joint_b_axis_loss", "\n", "+", "0.1", "*", "joint_u_axis_loss", "\n", "+", "0.1", "*", "joint_l_limit_loss", "\n", "# ============= ELAST POTENTIONAL ENERGY", "\n", "+", "coef_val", "[", "\"lambda_contact_loss\"", "]", "*", "contact_loss", "\n", "+", "coef_val", "[", "\"lambda_repulsion_loss\"", "]", "*", "repulsion_loss", "\n", "# ============= OFFSET LOSS", "\n", "+", "1.0", "*", "pose_reg_loss", "\n", "+", "1.0", "*", "shape_reg_loss", "\n", "+", "1.0", "*", "hand_tsl_loss", "\n", "+", "1.0", "*", "obj_transf_loss", "\n", ")", "\n", "\n", "# debug: runtime viz", "\n", "if", "self", ".", "runtime_vis", ":", "\n", "            ", "if", "self", ".", "ctrl_val", "[", "\"optimize_obj\"", "]", ":", "\n", "                ", "full_obj_verts", "=", "self", ".", "transf_vectors", "(", "\n", "self", ".", "const_val", "[", "\"full_obj_verts_3d\"", "]", ",", "\n", "self", ".", "opt_val", "[", "\"obj_tsl_var\"", "]", ".", "detach", "(", ")", ",", "\n", "self", ".", "opt_val", "[", "\"obj_rot_var\"", "]", ".", "detach", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "full_obj_verts", "=", "self", ".", "const_val", "[", "\"full_obj_verts_3d\"", "]", "\n", "\n", "", "if", "not", "ctrl_val", "[", "\"optimize_hand_pose\"", "]", ":", "\n", "                ", "b_axis", ",", "u_axis", ",", "l_axis", "=", "self", ".", "axis_layer", "(", "rebuild_joints", ",", "rebuild_transf", ")", "# mend this up", "\n", "", "self", ".", "runtime_show", "(", "rebuild_verts", ",", "b_axis", ",", "u_axis", ",", "l_axis", ",", "rebuild_transf", ",", "full_obj_verts", ")", "\n", "\n", "", "return", "(", "\n", "loss", ",", "\n", "{", "\n", "\"quat_norm_loss\"", ":", "quat_norm_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "\n", "\"angle_limit_loss\"", ":", "angle_limit_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "\n", "\"edge_loss\"", ":", "edge_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "\n", "\"joint_b_axis_loss\"", ":", "joint_b_axis_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "\n", "\"joint_u_axis_loss\"", ":", "joint_u_axis_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "\n", "\"joint_l_limit_loss\"", ":", "joint_l_limit_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "\n", "\"contact_loss\"", ":", "contact_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "\n", "\"repulsion_loss\"", ":", "repulsion_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "\n", "\"pose_reg_loss\"", ":", "pose_reg_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "\n", "\"hand_tsl_loss\"", ":", "hand_tsl_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "\n", "\"obj_transf_loss\"", ":", "obj_transf_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.optimize": [[574, 633], ["torch.Tensor().to", "tqdm.trange", "tqdm.trange", "tqdm.trange", "tqdm.trange", "range", "geo_optimizer.GeOptimizer.loss_fn", "torch.Tensor().to.item", "torch.Tensor", "geo_optimizer.GeOptimizer.optimizer.zero_grad", "torch.Tensor().to.backward", "geo_optimizer.GeOptimizer.optimizer.step", "geo_optimizer.GeOptimizer.scheduler.step", "range.set_description", "tqdm.trange.set_description", "tqdm.trange.set_description", "tqdm.trange.set_description", "torch.Tensor().to.item", "termcolor.colored", "termcolor.colored", "termcolor.colored"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.loss_fn"], ["", "def", "optimize", "(", "self", ",", "progress", "=", "False", ")", ":", "\n", "        ", "if", "progress", ":", "\n", "            ", "bar", "=", "trange", "(", "self", ".", "n_iter", ",", "position", "=", "3", ")", "\n", "bar_hand", "=", "trange", "(", "0", ",", "position", "=", "2", ",", "bar_format", "=", "\"{desc}\"", ")", "\n", "bar_contact", "=", "trange", "(", "0", ",", "position", "=", "1", ",", "bar_format", "=", "\"{desc}\"", ")", "\n", "bar_axis", "=", "trange", "(", "0", ",", "position", "=", "0", ",", "bar_format", "=", "\"{desc}\"", ")", "\n", "", "else", ":", "\n", "            ", "bar", "=", "range", "(", "self", ".", "n_iter", ")", "\n", "\n", "", "loss", "=", "torch", ".", "Tensor", "(", "[", "1000.0", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "loss_dict", "=", "{", "}", "\n", "for", "_", "in", "bar", ":", "\n", "            ", "if", "self", ".", "optimizing", ":", "\n", "                ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "loss", ",", "loss_dict", "=", "self", ".", "loss_fn", "(", "self", ".", "opt_val", ",", "self", ".", "const_val", ",", "self", ".", "ctrl_val", ",", "self", ".", "coef_val", ")", "\n", "\n", "if", "self", ".", "optimizing", ":", "\n", "                ", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "scheduler", ".", "step", "(", "loss", ")", "\n", "\n", "", "if", "progress", ":", "\n", "                ", "bar", ".", "set_description", "(", "\"TOTAL LOSS {:4e}\"", ".", "format", "(", "loss", ".", "item", "(", ")", ")", ")", "\n", "try", ":", "\n", "                    ", "bar_hand", ".", "set_description", "(", "\n", "colored", "(", "\"HAND_REGUL_LOSS: \"", ",", "\"yellow\"", ")", "\n", "+", "\"QN={:.3e} PR={:.3e} EG={:.3e}\"", ".", "format", "(", "\n", "loss_dict", "[", "\"quat_norm_loss\"", "]", ",", "# QN", "\n", "loss_dict", "[", "\"pose_reg_loss\"", "]", ",", "# PR", "\n", "loss_dict", "[", "\"edge_loss\"", "]", ",", "# Edge", "\n", ")", "\n", ")", "\n", "", "except", ":", "\n", "                    ", "pass", "\n", "", "try", ":", "\n", "                    ", "bar_contact", ".", "set_description", "(", "\n", "colored", "(", "\"HO_CONTACT_LOSS: \"", ",", "\"blue\"", ")", "\n", "+", "\"Conta={:.3e}, Repul={:.3e}, OT={:.3e}\"", ".", "format", "(", "\n", "loss_dict", "[", "\"contact_loss\"", "]", ",", "# Conta", "\n", "loss_dict", "[", "\"repulsion_loss\"", "]", ",", "# Repul", "\n", "loss_dict", "[", "\"obj_transf_loss\"", "]", ",", "# OT", "\n", ")", "\n", ")", "\n", "", "except", ":", "\n", "                    ", "pass", "\n", "", "try", ":", "\n", "                    ", "bar_axis", ".", "set_description", "(", "\n", "colored", "(", "\"ANGLE_LOSS: \"", ",", "\"cyan\"", ")", "\n", "+", "\"AL={:.3e} JB={:.3e} JU={:.3e} JL={:.3e}\"", ".", "format", "(", "\n", "loss_dict", "[", "\"angle_limit_loss\"", "]", ",", "# AL", "\n", "loss_dict", "[", "\"joint_b_axis_loss\"", "]", ",", "# JB", "\n", "loss_dict", "[", "\"joint_u_axis_loss\"", "]", ",", "# JU", "\n", "loss_dict", "[", "\"joint_l_limit_loss\"", "]", ",", "# JL", "\n", ")", "\n", ")", "\n", "", "except", ":", "\n", "                    ", "pass", "\n", "", "", "", "return", "loss", ".", "item", "(", ")", ",", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.recover_hand": [[634, 676], ["geo_optimizer.GeOptimizer.assemble_pose_vec().detach", "manopth.quatutils.normalize_quaternion", "manopth.quatutils.normalize_quaternion.unsqueeze", "geo_optimizer.GeOptimizer.mano_layer", "geo_optimizer.GeOptimizer.opt_val[].detach().unsqueeze", "geo_optimizer.GeOptimizer.const_val[].unsqueeze", "geo_optimizer.GeOptimizer.opt_val[].detach().unsqueeze", "geo_optimizer.GeOptimizer.const_val[].unsqueeze", "geo_optimizer.GeOptimizer.adaptor", "adapt_joints.transpose.transpose.transpose", "torch.cat", "geo_optimizer.GeOptimizer.assemble_pose_vec", "adapt_joints[].unsqueeze", "adapt_joints[].unsqueeze", "rebuild_verts.squeeze", "rebuild_joints.squeeze", "rebuild_transf.squeeze", "geo_optimizer.GeOptimizer.opt_val[].detach", "geo_optimizer.GeOptimizer.opt_val[].detach", "torch.cat", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.assemble_pose_vec"], ["", "def", "recover_hand", "(", "self", ",", "squeeze_out", "=", "True", ")", ":", "\n", "        ", "vars_hand_pose_assembled", "=", "self", ".", "assemble_pose_vec", "(", "\n", "self", ".", "const_val", "[", "\"hand_pose_gt_idx\"", "]", ",", "\n", "self", ".", "const_val", "[", "\"hand_pose_gt_val\"", "]", ",", "\n", "self", ".", "const_val", "[", "\"hand_pose_var_idx\"", "]", ",", "\n", "self", ".", "opt_val", "[", "\"hand_pose_var_val\"", "]", ",", "\n", ")", ".", "detach", "(", ")", "\n", "vars_hand_pose_normalized", "=", "normalize_quaternion", "(", "vars_hand_pose_assembled", ")", "\n", "vec_pose", "=", "vars_hand_pose_normalized", ".", "unsqueeze", "(", "0", ")", "\n", "if", "self", ".", "ctrl_val", "[", "\"optimize_hand_shape\"", "]", ":", "\n", "            ", "vec_shape", "=", "self", ".", "opt_val", "[", "\"hand_shape_var\"", "]", ".", "detach", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "vec_shape", "=", "self", ".", "const_val", "[", "\"hand_shape_gt\"", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "if", "self", ".", "ctrl_val", "[", "\"optimize_hand_tsl\"", "]", ":", "\n", "            ", "vec_tsl", "=", "self", ".", "opt_val", "[", "\"hand_tsl_var\"", "]", ".", "detach", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "vec_tsl", "=", "self", ".", "const_val", "[", "\"hand_tsl_gt\"", "]", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "device", "=", "vec_pose", ".", "device", "\n", "rebuild_verts", ",", "rebuild_joints", ",", "rebuild_transf", ",", "rebuild_full_pose", "=", "self", ".", "mano_layer", "(", "vec_pose", ",", "vec_shape", ")", "\n", "# skel adaption", "\n", "if", "self", ".", "ctrl_val", "[", "\"fhb\"", "]", ":", "\n", "            ", "adapt_joints", ",", "_", "=", "self", ".", "adaptor", "(", "rebuild_verts", ")", "\n", "adapt_joints", "=", "adapt_joints", ".", "transpose", "(", "1", ",", "2", ")", "\n", "rebuild_joints", "=", "rebuild_joints", "-", "adapt_joints", "[", ":", ",", "9", "]", ".", "unsqueeze", "(", "1", ")", "\n", "rebuild_verts", "=", "rebuild_verts", "-", "adapt_joints", "[", ":", ",", "9", "]", ".", "unsqueeze", "(", "1", ")", "\n", "", "rebuild_verts", "=", "rebuild_verts", "+", "vec_tsl", "\n", "rebuild_joints", "=", "rebuild_joints", "+", "vec_tsl", "\n", "rebuild_transf", "=", "rebuild_transf", "+", "torch", ".", "cat", "(", "\n", "[", "\n", "torch", ".", "cat", "(", "(", "torch", ".", "zeros", "(", "(", "3", ",", "3", ")", ",", "device", "=", "device", ")", ",", "vec_tsl", ".", "T", ")", ",", "dim", "=", "1", ")", ",", "\n", "torch", ".", "zeros", "(", "(", "1", ",", "4", ")", ",", "device", "=", "device", ")", ",", "\n", "]", ",", "\n", "dim", "=", "0", ",", "\n", ")", "\n", "if", "squeeze_out", ":", "\n", "            ", "rebuild_verts", ",", "rebuild_joints", ",", "rebuild_transf", "=", "(", "\n", "rebuild_verts", ".", "squeeze", "(", "0", ")", ",", "\n", "rebuild_joints", ".", "squeeze", "(", "0", ")", ",", "\n", "rebuild_transf", ".", "squeeze", "(", "0", ")", ",", "\n", ")", "\n", "", "return", "rebuild_verts", ",", "rebuild_joints", ",", "rebuild_transf", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.recover_hand_pose": [[677, 686], ["geo_optimizer.GeOptimizer.assemble_pose_vec().detach", "manopth.quatutils.normalize_quaternion", "geo_optimizer.GeOptimizer.assemble_pose_vec"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.assemble_pose_vec"], ["", "def", "recover_hand_pose", "(", "self", ")", ":", "\n", "        ", "vars_hand_pose_assembled", "=", "self", ".", "assemble_pose_vec", "(", "\n", "self", ".", "const_val", "[", "\"hand_pose_gt_idx\"", "]", ",", "\n", "self", ".", "const_val", "[", "\"hand_pose_gt_val\"", "]", ",", "\n", "self", ".", "const_val", "[", "\"hand_pose_var_idx\"", "]", ",", "\n", "self", ".", "opt_val", "[", "\"hand_pose_var_val\"", "]", ",", "\n", ")", ".", "detach", "(", ")", "\n", "vars_hand_pose_normalized", "=", "normalize_quaternion", "(", "vars_hand_pose_assembled", ")", "\n", "return", "vars_hand_pose_normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.recover_obj": [[687, 697], ["geo_optimizer.GeOptimizer.transf_vectors", "geo_optimizer.GeOptimizer.opt_val[].detach", "geo_optimizer.GeOptimizer.opt_val[].detach"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.transf_vectors"], ["", "def", "recover_obj", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ctrl_val", "[", "\"optimize_obj\"", "]", ":", "\n", "            ", "obj_verts", "=", "self", ".", "transf_vectors", "(", "\n", "self", ".", "const_val", "[", "\"full_obj_verts_3d\"", "]", ",", "\n", "self", ".", "opt_val", "[", "\"obj_tsl_var\"", "]", ".", "detach", "(", ")", ",", "\n", "self", ".", "opt_val", "[", "\"obj_rot_var\"", "]", ".", "detach", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "obj_verts", "=", "self", ".", "const_val", "[", "\"full_obj_verts_3d\"", "]", "\n", "", "return", "obj_verts", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.obj_rot_np": [[698, 704], ["geo_optimizer.GeOptimizer.opt_val[].detach().cpu().numpy", "RuntimeError", "geo_optimizer.GeOptimizer.opt_val[].detach().cpu", "geo_optimizer.GeOptimizer.opt_val[].detach"], "methods", ["None"], ["", "def", "obj_rot_np", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ctrl_val", "[", "\"optimize_obj\"", "]", ":", "\n", "            ", "res", "=", "self", ".", "opt_val", "[", "\"obj_rot_var\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "res", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"not optimizing obj, cannot get obj_rot\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.obj_tsl_np": [[705, 711], ["geo_optimizer.GeOptimizer.opt_val[].detach().cpu().numpy", "RuntimeError", "geo_optimizer.GeOptimizer.opt_val[].detach().cpu", "geo_optimizer.GeOptimizer.opt_val[].detach"], "methods", ["None"], ["", "", "def", "obj_tsl_np", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ctrl_val", "[", "\"optimize_obj\"", "]", ":", "\n", "            ", "res", "=", "self", ".", "opt_val", "[", "\"obj_tsl_var\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "res", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"not optimizing obj, cannot get obj_tsl\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.GeOptimizer.runtime_show": [[712, 790], ["b_axis.detach().cpu().squeeze().numpy.detach().cpu().squeeze().numpy.detach().cpu().squeeze().numpy", "u_axis.detach().cpu().squeeze().numpy.detach().cpu().squeeze().numpy.detach().cpu().squeeze().numpy", "l_axis.detach().cpu().squeeze().numpy.detach().cpu().squeeze().numpy.detach().cpu().squeeze().numpy", "hand_transf.detach().cpu().squeeze().numpy.detach().cpu().squeeze().numpy.detach().cpu().squeeze().numpy", "range", "open3d.utility.Vector3dVector", "geo_optimizer.GeOptimizer.runtime_vis[].compute_vertex_normals", "open3d.utility.Vector3dVector", "geo_optimizer.GeOptimizer.runtime_vis[].compute_vertex_normals", "geo_optimizer.GeOptimizer.runtime_vis[].update_geometry", "geo_optimizer.GeOptimizer.runtime_vis[].update_geometry", "geo_optimizer.GeOptimizer.runtime_vis[].update_renderer", "[].translate", "[].rotate", "[].rotate", "[].translate", "[].rotate", "[].rotate", "[].translate", "[].rotate", "[].rotate", "b_axis.detach().cpu().squeeze().numpy.detach().cpu().squeeze().numpy.detach().cpu().squeeze", "u_axis.detach().cpu().squeeze().numpy.detach().cpu().squeeze().numpy.detach().cpu().squeeze", "l_axis.detach().cpu().squeeze().numpy.detach().cpu().squeeze().numpy.detach().cpu().squeeze", "hand_transf.detach().cpu().squeeze().numpy.detach().cpu().squeeze().numpy.detach().cpu().squeeze", "numpy.array", "numpy.array", "range", "geo_optimizer.GeOptimizer.runtime_vis[].poll_events", "hand_verts.detach().cpu().squeeze", "obj_verts.detach().cpu().squeeze", "geo_optimizer.caculate_align_mat", "b_rot_ms.append", "[].rotate", "[].rotate", "[].translate", "geo_optimizer.GeOptimizer.runtime_vis[].update_geometry", "geo_optimizer.caculate_align_mat", "u_rot_ms.append", "[].rotate", "[].rotate", "[].translate", "geo_optimizer.GeOptimizer.runtime_vis[].update_geometry", "geo_optimizer.caculate_align_mat", "l_rot_ms.append", "[].rotate", "[].rotate", "[].translate", "geo_optimizer.GeOptimizer.runtime_vis[].update_geometry", "b_axis.detach().cpu().squeeze().numpy.detach().cpu().squeeze().numpy.detach().cpu", "u_axis.detach().cpu().squeeze().numpy.detach().cpu().squeeze().numpy.detach().cpu", "l_axis.detach().cpu().squeeze().numpy.detach().cpu().squeeze().numpy.detach().cpu", "hand_transf.detach().cpu().squeeze().numpy.detach().cpu().squeeze().numpy.detach().cpu", "hand_verts.detach().cpu", "obj_verts.detach().cpu", "b_axis.detach().cpu().squeeze().numpy.detach().cpu().squeeze().numpy.detach", "u_axis.detach().cpu().squeeze().numpy.detach().cpu().squeeze().numpy.detach", "l_axis.detach().cpu().squeeze().numpy.detach().cpu().squeeze().numpy.detach", "hand_transf.detach().cpu().squeeze().numpy.detach().cpu().squeeze().numpy.detach", "hand_verts.detach", "obj_verts.detach"], "methods", ["home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.caculate_align_mat", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.caculate_align_mat", "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.caculate_align_mat"], ["", "", "def", "runtime_show", "(", "self", ",", "hand_verts", ",", "b_axis", ",", "u_axis", ",", "l_axis", ",", "hand_transf", ",", "obj_verts", ")", ":", "\n", "        ", "has_rot", "=", "False", "\n", "b_axis", "=", "b_axis", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", "\n", "u_axis", "=", "u_axis", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", "\n", "l_axis", "=", "l_axis", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", "\n", "hand_transf", "=", "hand_transf", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", "\n", "b_rot_ms", "=", "[", "]", "\n", "u_rot_ms", "=", "[", "]", "\n", "l_rot_ms", "=", "[", "]", "\n", "\n", "while", "True", ":", "\n", "            ", "self", ".", "runtime_vis", "[", "\"hand_mesh\"", "]", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "\n", "np", ".", "array", "(", "hand_verts", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", "0", ")", ")", "\n", ")", "\n", "self", ".", "runtime_vis", "[", "\"hand_mesh\"", "]", ".", "compute_vertex_normals", "(", ")", "\n", "self", ".", "runtime_vis", "[", "\"obj_mesh\"", "]", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "\n", "np", ".", "array", "(", "obj_verts", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", "0", ")", ")", "\n", ")", "\n", "self", ".", "runtime_vis", "[", "\"obj_mesh\"", "]", ".", "compute_vertex_normals", "(", ")", "\n", "if", "not", "has_rot", ":", "\n", "                ", "for", "i", "in", "range", "(", "16", ")", ":", "\n", "                    ", "if", "not", "i", ":", "\n", "                        ", "continue", "\n", "", "b_rot", "=", "caculate_align_mat", "(", "b_axis", "[", "i", "-", "1", "]", ")", "\n", "b_rot_ms", ".", "append", "(", "b_rot", ")", "\n", "self", ".", "runtime_vis", "[", "\"b_axis\"", "]", "[", "i", "]", "=", "self", ".", "runtime_vis", "[", "\"b_axis\"", "]", "[", "i", "]", ".", "rotate", "(", "b_rot", ",", "center", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "runtime_vis", "[", "\"b_axis\"", "]", "[", "i", "]", "=", "self", ".", "runtime_vis", "[", "\"b_axis\"", "]", "[", "i", "]", ".", "rotate", "(", "\n", "hand_transf", "[", "i", "]", "[", ":", "3", ",", ":", "3", "]", ",", "center", "=", "(", "0", ",", "0", ",", "0", ")", "\n", ")", "\n", "self", ".", "runtime_vis", "[", "\"b_axis\"", "]", "[", "i", "]", "=", "self", ".", "runtime_vis", "[", "\"b_axis\"", "]", "[", "i", "]", ".", "translate", "(", "hand_transf", "[", "i", "]", "[", ":", "3", ",", "3", "]", ".", "T", ")", "\n", "self", ".", "runtime_vis", "[", "\"window\"", "]", ".", "update_geometry", "(", "self", ".", "runtime_vis", "[", "\"b_axis\"", "]", "[", "i", "]", ")", "\n", "\n", "u_rot", "=", "caculate_align_mat", "(", "u_axis", "[", "i", "-", "1", "]", ")", "\n", "u_rot_ms", ".", "append", "(", "u_rot", ")", "\n", "self", ".", "runtime_vis", "[", "\"up_axis\"", "]", "[", "i", "]", "=", "self", ".", "runtime_vis", "[", "\"up_axis\"", "]", "[", "i", "]", ".", "rotate", "(", "u_rot", ",", "center", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "runtime_vis", "[", "\"up_axis\"", "]", "[", "i", "]", "=", "self", ".", "runtime_vis", "[", "\"up_axis\"", "]", "[", "i", "]", ".", "rotate", "(", "\n", "hand_transf", "[", "i", "]", "[", ":", "3", ",", ":", "3", "]", ",", "center", "=", "(", "0", ",", "0", ",", "0", ")", "\n", ")", "\n", "self", ".", "runtime_vis", "[", "\"up_axis\"", "]", "[", "i", "]", "=", "self", ".", "runtime_vis", "[", "\"up_axis\"", "]", "[", "i", "]", ".", "translate", "(", "hand_transf", "[", "i", "]", "[", ":", "3", ",", "3", "]", ".", "T", ")", "\n", "self", ".", "runtime_vis", "[", "\"window\"", "]", ".", "update_geometry", "(", "self", ".", "runtime_vis", "[", "\"up_axis\"", "]", "[", "i", "]", ")", "\n", "\n", "l_rot", "=", "caculate_align_mat", "(", "l_axis", "[", "i", "-", "1", "]", ")", "\n", "l_rot_ms", ".", "append", "(", "l_rot", ")", "\n", "self", ".", "runtime_vis", "[", "\"l_axis\"", "]", "[", "i", "]", "=", "self", ".", "runtime_vis", "[", "\"l_axis\"", "]", "[", "i", "]", ".", "rotate", "(", "l_rot", ",", "center", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "runtime_vis", "[", "\"l_axis\"", "]", "[", "i", "]", "=", "self", ".", "runtime_vis", "[", "\"l_axis\"", "]", "[", "i", "]", ".", "rotate", "(", "\n", "hand_transf", "[", "i", "]", "[", ":", "3", ",", ":", "3", "]", ",", "center", "=", "(", "0", ",", "0", ",", "0", ")", "\n", ")", "\n", "self", ".", "runtime_vis", "[", "\"l_axis\"", "]", "[", "i", "]", "=", "self", ".", "runtime_vis", "[", "\"l_axis\"", "]", "[", "i", "]", ".", "translate", "(", "hand_transf", "[", "i", "]", "[", ":", "3", ",", "3", "]", ".", "T", ")", "\n", "self", ".", "runtime_vis", "[", "\"window\"", "]", ".", "update_geometry", "(", "self", ".", "runtime_vis", "[", "\"l_axis\"", "]", "[", "i", "]", ")", "\n", "\n", "", "has_rot", "=", "True", "\n", "", "self", ".", "runtime_vis", "[", "\"window\"", "]", ".", "update_geometry", "(", "self", ".", "runtime_vis", "[", "\"hand_mesh\"", "]", ")", "\n", "self", ".", "runtime_vis", "[", "\"window\"", "]", ".", "update_geometry", "(", "self", ".", "runtime_vis", "[", "\"obj_mesh\"", "]", ")", "\n", "self", ".", "runtime_vis", "[", "\"window\"", "]", ".", "update_renderer", "(", ")", "\n", "if", "not", "self", ".", "runtime_vis", "[", "\"window\"", "]", ".", "poll_events", "(", ")", ":", "\n", "                ", "break", "\n", "\n", "", "", "for", "i", "in", "range", "(", "16", ")", ":", "\n", "            ", "if", "not", "i", ":", "\n", "                ", "continue", "\n", "", "self", ".", "runtime_vis", "[", "\"b_axis\"", "]", "[", "i", "]", "=", "self", ".", "runtime_vis", "[", "\"b_axis\"", "]", "[", "i", "]", ".", "translate", "(", "-", "hand_transf", "[", "i", "]", "[", ":", "3", ",", "3", "]", ".", "T", ")", "\n", "self", ".", "runtime_vis", "[", "\"b_axis\"", "]", "[", "i", "]", "=", "self", ".", "runtime_vis", "[", "\"b_axis\"", "]", "[", "i", "]", ".", "rotate", "(", "\n", "hand_transf", "[", "i", "]", "[", ":", "3", ",", ":", "3", "]", ".", "T", ",", "center", "=", "(", "0", ",", "0", ",", "0", ")", "\n", ")", "\n", "self", ".", "runtime_vis", "[", "\"b_axis\"", "]", "[", "i", "]", "=", "self", ".", "runtime_vis", "[", "\"b_axis\"", "]", "[", "i", "]", ".", "rotate", "(", "b_rot_ms", "[", "i", "-", "1", "]", ".", "T", ",", "center", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n", "self", ".", "runtime_vis", "[", "\"up_axis\"", "]", "[", "i", "]", "=", "self", ".", "runtime_vis", "[", "\"up_axis\"", "]", "[", "i", "]", ".", "translate", "(", "-", "hand_transf", "[", "i", "]", "[", ":", "3", ",", "3", "]", ".", "T", ")", "\n", "self", ".", "runtime_vis", "[", "\"up_axis\"", "]", "[", "i", "]", "=", "self", ".", "runtime_vis", "[", "\"up_axis\"", "]", "[", "i", "]", ".", "rotate", "(", "\n", "hand_transf", "[", "i", "]", "[", ":", "3", ",", ":", "3", "]", ".", "T", ",", "center", "=", "(", "0", ",", "0", ",", "0", ")", "\n", ")", "\n", "self", ".", "runtime_vis", "[", "\"up_axis\"", "]", "[", "i", "]", "=", "self", ".", "runtime_vis", "[", "\"up_axis\"", "]", "[", "i", "]", ".", "rotate", "(", "u_rot_ms", "[", "i", "-", "1", "]", ".", "T", ",", "center", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n", "self", ".", "runtime_vis", "[", "\"l_axis\"", "]", "[", "i", "]", "=", "self", ".", "runtime_vis", "[", "\"l_axis\"", "]", "[", "i", "]", ".", "translate", "(", "-", "hand_transf", "[", "i", "]", "[", ":", "3", ",", "3", "]", ".", "T", ")", "\n", "self", ".", "runtime_vis", "[", "\"l_axis\"", "]", "[", "i", "]", "=", "self", ".", "runtime_vis", "[", "\"l_axis\"", "]", "[", "i", "]", ".", "rotate", "(", "\n", "hand_transf", "[", "i", "]", "[", ":", "3", ",", ":", "3", "]", ".", "T", ",", "center", "=", "(", "0", ",", "0", ",", "0", ")", "\n", ")", "\n", "self", ".", "runtime_vis", "[", "\"l_axis\"", "]", "[", "i", "]", "=", "self", ".", "runtime_vis", "[", "\"l_axis\"", "]", "[", "i", "]", ".", "rotate", "(", "l_rot_ms", "[", "i", "-", "1", "]", ".", "T", ",", "center", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.caculate_align_mat": [[792, 821], ["numpy.array", "numpy.array", "numpy.matmul", "numpy.array", "numpy.linalg.norm", "numpy.dot", "numpy.eye", "numpy.dot", "numpy.eye", "numpy.eye", "numpy.matmul", "numpy.dot"], "function", ["None"], ["", "", "def", "caculate_align_mat", "(", "vec", ")", ":", "\n", "    ", "vec", "=", "vec", "/", "np", ".", "linalg", ".", "norm", "(", "vec", ")", "\n", "z_unit_Arr", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "\n", "z_mat", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "0", ",", "-", "z_unit_Arr", "[", "2", "]", ",", "z_unit_Arr", "[", "1", "]", "]", ",", "\n", "[", "z_unit_Arr", "[", "2", "]", ",", "0", ",", "-", "z_unit_Arr", "[", "0", "]", "]", ",", "\n", "[", "-", "z_unit_Arr", "[", "1", "]", ",", "z_unit_Arr", "[", "0", "]", ",", "0", "]", ",", "\n", "]", "\n", ")", "\n", "\n", "z_c_vec", "=", "np", ".", "matmul", "(", "z_mat", ",", "vec", ")", "\n", "z_c_vec_mat", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "0", ",", "-", "z_c_vec", "[", "2", "]", ",", "z_c_vec", "[", "1", "]", "]", ",", "\n", "[", "z_c_vec", "[", "2", "]", ",", "0", ",", "-", "z_c_vec", "[", "0", "]", "]", ",", "\n", "[", "-", "z_c_vec", "[", "1", "]", ",", "z_c_vec", "[", "0", "]", ",", "0", "]", ",", "\n", "]", "\n", ")", "\n", "\n", "if", "np", ".", "dot", "(", "z_unit_Arr", ",", "vec", ")", "==", "-", "1", ":", "\n", "        ", "qTrans_Mat", "=", "-", "np", ".", "eye", "(", "3", ",", "3", ")", "\n", "", "elif", "np", ".", "dot", "(", "z_unit_Arr", ",", "vec", ")", "==", "1", ":", "\n", "        ", "qTrans_Mat", "=", "np", ".", "eye", "(", "3", ",", "3", ")", "\n", "", "else", ":", "\n", "        ", "qTrans_Mat", "=", "np", ".", "eye", "(", "3", ",", "3", ")", "+", "z_c_vec_mat", "+", "np", ".", "matmul", "(", "z_c_vec_mat", ",", "z_c_vec_mat", ")", "/", "(", "1", "+", "np", ".", "dot", "(", "z_unit_Arr", ",", "vec", ")", ")", "\n", "\n", "", "return", "qTrans_Mat", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.init_runtime_viz": [[823, 963], ["open3d.geometry.TriangleMesh", "open3d.utility.Vector3iVector", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "o3d.geometry.TriangleMesh.compute_vertex_normals", "open3d.geometry.TriangleMesh", "open3d.utility.Vector3iVector", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "o3d.geometry.TriangleMesh.compute_vertex_normals", "open3d.geometry.TriangleMesh", "open3d.utility.Vector3iVector", "open3d.geometry.TriangleMesh", "open3d.utility.Vector3iVector", "open3d.utility.Vector3dVector", "hocontact.visualize.vis_contact_info.create_vertex_color", "o3d.geometry.TriangleMesh.compute_vertex_normals", "open3d.utility.Vector3dVector", "open3d.visualization.VisualizerWithKeyCallback", "o3d.visualization.VisualizerWithKeyCallback.create_window", "o3d.visualization.VisualizerWithKeyCallback.add_geometry", "o3d.visualization.VisualizerWithKeyCallback.add_geometry", "o3d.visualization.VisualizerWithKeyCallback.add_geometry", "o3d.visualization.VisualizerWithKeyCallback.add_geometry", "range", "o3d.visualization.VisualizerWithKeyCallback.poll_events", "o3d.visualization.VisualizerWithKeyCallback.register_key_callback", "o3d.visualization.VisualizerWithKeyCallback.register_key_callback", "o3d.visualization.VisualizerWithKeyCallback.register_key_callback", "o3d.visualization.VisualizerWithKeyCallback.register_key_callback", "numpy.array", "numpy.array", "open3d.geometry.TriangleMesh.create_arrow", "o3d.geometry.TriangleMesh.create_arrow.paint_uniform_color", "o3d.geometry.TriangleMesh.create_arrow.compute_vertex_normals", "o3d.visualization.VisualizerWithKeyCallback.add_geometry", "back_axis_list.append", "open3d.geometry.TriangleMesh.create_arrow", "o3d.geometry.TriangleMesh.create_arrow.paint_uniform_color", "o3d.geometry.TriangleMesh.create_arrow.compute_vertex_normals", "o3d.visualization.VisualizerWithKeyCallback.add_geometry", "up_axis_list.append", "open3d.geometry.TriangleMesh.create_arrow", "o3d.geometry.TriangleMesh.create_arrow.paint_uniform_color", "o3d.geometry.TriangleMesh.create_arrow.compute_vertex_normals", "o3d.visualization.VisualizerWithKeyCallback.add_geometry", "left_axis_list.append", "runtime_vis[].get_view_control", "runtime_vis[].get_view_control.convert_to_pinhole_camera_parameters", "runtime_vis[].get_view_control.convert_from_pinhole_camera_parameters", "vis.remove_geometry", "vis.remove_geometry", "vis.add_geometry", "vis.add_geometry", "vis.update_renderer", "vis.poll_events", "vis.add_geometry", "vis.add_geometry", "vis.remove_geometry", "vis.remove_geometry", "vis.update_renderer", "vis.poll_events", "range", "vis.update_renderer", "vis.poll_events", "range", "vis.update_renderer", "vis.poll_events", "ord", "ord", "ord", "ord", "vis.add_geometry", "vis.add_geometry", "vis.add_geometry", "vis.remove_geometry", "vis.remove_geometry", "vis.remove_geometry", "len", "len"], "function", ["home.repos.pwc.inspect_result.lixiny_CPF.visualize.vis_contact_info.create_vertex_color"], ["", "def", "init_runtime_viz", "(", "\n", "hand_verts_gt", ",", "\n", "hand_verts_init", ",", "\n", "obj_verts_gt", ",", "\n", "hand_faces", ",", "\n", "obj_verts_cur", ",", "\n", "obj_faces_cur", ",", "\n", "contact_info", ",", "\n", "cam_extr", "=", "None", ",", "\n", ")", ":", "\n", "    ", "hand_mesh_gt", "=", "o3d", ".", "geometry", ".", "TriangleMesh", "(", ")", "\n", "hand_mesh_gt", ".", "triangles", "=", "o3d", ".", "utility", ".", "Vector3iVector", "(", "hand_faces", ")", "\n", "hand_mesh_gt", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "hand_verts_gt", ")", "\n", "hand_mesh_gt", ".", "vertex_colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "array", "(", "[", "[", "0.0", ",", "0.0", ",", "1.0", "]", "]", "*", "len", "(", "hand_verts_gt", ")", ")", ")", "\n", "hand_mesh_gt", ".", "compute_vertex_normals", "(", ")", "\n", "obj_mesh_gt", "=", "o3d", ".", "geometry", ".", "TriangleMesh", "(", ")", "\n", "obj_mesh_gt", ".", "triangles", "=", "o3d", ".", "utility", ".", "Vector3iVector", "(", "obj_faces_cur", ")", "\n", "obj_mesh_gt", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "obj_verts_gt", ")", "\n", "obj_mesh_gt", ".", "vertex_colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "array", "(", "[", "[", "1.0", ",", "0.0", ",", "0.0", "]", "]", "*", "len", "(", "obj_verts_gt", ")", ")", ")", "\n", "obj_mesh_gt", ".", "compute_vertex_normals", "(", ")", "\n", "\n", "hand_mesh_cur", "=", "o3d", ".", "geometry", ".", "TriangleMesh", "(", ")", "\n", "hand_mesh_cur", ".", "triangles", "=", "o3d", ".", "utility", ".", "Vector3iVector", "(", "hand_faces", ")", "\n", "obj_mesh", "=", "o3d", ".", "geometry", ".", "TriangleMesh", "(", ")", "\n", "obj_mesh", ".", "triangles", "=", "o3d", ".", "utility", ".", "Vector3iVector", "(", "obj_faces_cur", ")", "\n", "obj_mesh", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "obj_verts_cur", ")", "\n", "obj_colors", "=", "create_vertex_color", "(", "contact_info", ",", "\"contact_region\"", ")", "\n", "obj_mesh", ".", "compute_vertex_normals", "(", ")", "\n", "obj_mesh", ".", "vertex_colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "obj_colors", ")", "\n", "vis_cur", "=", "o3d", ".", "visualization", ".", "VisualizerWithKeyCallback", "(", ")", "\n", "vis_cur", ".", "create_window", "(", "window_name", "=", "\"Runtime Hand\"", ",", "width", "=", "1080", ",", "height", "=", "1080", ")", "\n", "vis_cur", ".", "add_geometry", "(", "obj_mesh", ")", "\n", "vis_cur", ".", "add_geometry", "(", "hand_mesh_cur", ")", "\n", "vis_cur", ".", "add_geometry", "(", "hand_mesh_gt", ")", "\n", "vis_cur", ".", "add_geometry", "(", "obj_mesh_gt", ")", "\n", "back_axis_list", "=", "[", "]", "\n", "up_axis_list", "=", "[", "]", "\n", "left_axis_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "16", ")", ":", "\n", "        ", "b", "=", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_arrow", "(", "\n", "cylinder_radius", "=", "0.0015", ",", "\n", "cone_radius", "=", "0.002", ",", "\n", "cylinder_height", "=", "0.05", ",", "\n", "cone_height", "=", "0.008", ",", "\n", "resolution", "=", "20", ",", "\n", "cylinder_split", "=", "4", ",", "\n", "cone_split", "=", "1", ",", "\n", ")", "\n", "b", ".", "paint_uniform_color", "(", "[", "45", "/", "255.0", ",", "220", "/", "255.0", ",", "190", "/", "255.0", "]", ")", "\n", "b", ".", "compute_vertex_normals", "(", ")", "\n", "vis_cur", ".", "add_geometry", "(", "b", ")", "\n", "back_axis_list", ".", "append", "(", "b", ")", "\n", "\n", "u", "=", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_arrow", "(", "\n", "cylinder_radius", "=", "0.0015", ",", "\n", "cone_radius", "=", "0.002", ",", "\n", "cylinder_height", "=", "0.04", ",", "\n", "cone_height", "=", "0.008", ",", "\n", "resolution", "=", "20", ",", "\n", "cylinder_split", "=", "4", ",", "\n", "cone_split", "=", "1", ",", "\n", ")", "\n", "u", ".", "paint_uniform_color", "(", "[", "250", "/", "255.0", ",", "100", "/", "255.0", ",", "100", "/", "255.0", "]", ")", "\n", "u", ".", "compute_vertex_normals", "(", ")", "\n", "vis_cur", ".", "add_geometry", "(", "u", ")", "\n", "up_axis_list", ".", "append", "(", "u", ")", "\n", "\n", "l", "=", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_arrow", "(", "\n", "cylinder_radius", "=", "0.0015", ",", "\n", "cone_radius", "=", "0.002", ",", "\n", "cylinder_height", "=", "0.04", ",", "\n", "cone_height", "=", "0.008", ",", "\n", "resolution", "=", "20", ",", "\n", "cylinder_split", "=", "4", ",", "\n", "cone_split", "=", "1", ",", "\n", ")", "\n", "l", ".", "paint_uniform_color", "(", "[", "230", "/", "255.0", ",", "120", "/", "255.0", ",", "60", "/", "255.0", "]", ")", "\n", "l", ".", "compute_vertex_normals", "(", ")", "\n", "vis_cur", ".", "add_geometry", "(", "l", ")", "\n", "left_axis_list", ".", "append", "(", "l", ")", "\n", "\n", "", "vis_cur", ".", "poll_events", "(", ")", "\n", "runtime_vis", "=", "{", "\n", "\"hand_mesh_gt\"", ":", "hand_mesh_gt", ",", "\n", "\"hand_mesh\"", ":", "hand_mesh_cur", ",", "\n", "\"obj_mesh\"", ":", "obj_mesh", ",", "\n", "\"obj_mesh_gt\"", ":", "obj_mesh_gt", ",", "\n", "\"b_axis\"", ":", "back_axis_list", ",", "\n", "\"up_axis\"", ":", "up_axis_list", ",", "\n", "\"l_axis\"", ":", "left_axis_list", ",", "\n", "\"window\"", ":", "vis_cur", ",", "\n", "}", "\n", "if", "cam_extr", "is", "not", "None", ":", "\n", "        ", "ctl", "=", "runtime_vis", "[", "\"window\"", "]", ".", "get_view_control", "(", ")", "\n", "parameters", "=", "ctl", ".", "convert_to_pinhole_camera_parameters", "(", ")", "\n", "parameters", ".", "extrinsic", "=", "cam_extr", "\n", "ctl", ".", "convert_from_pinhole_camera_parameters", "(", "parameters", ")", "\n", "# ro = runtime_vis[\"window\"].get_render_option()", "\n", "# ro.load_from_json(\"./ro.json\")", "\n", "\n", "", "def", "hide_gt", "(", "vis", ")", ":", "\n", "        ", "vis", ".", "remove_geometry", "(", "hand_mesh_gt", ",", "reset_bounding_box", "=", "False", ")", "\n", "vis", ".", "remove_geometry", "(", "obj_mesh_gt", ",", "reset_bounding_box", "=", "False", ")", "\n", "vis", ".", "add_geometry", "(", "obj_mesh", ",", "reset_bounding_box", "=", "False", ")", "\n", "vis", ".", "add_geometry", "(", "hand_mesh_cur", ",", "reset_bounding_box", "=", "False", ")", "\n", "\n", "vis", ".", "update_renderer", "(", ")", "\n", "vis", ".", "poll_events", "(", ")", "\n", "\n", "", "def", "show_gt", "(", "vis", ")", ":", "\n", "        ", "vis", ".", "add_geometry", "(", "hand_mesh_gt", ",", "reset_bounding_box", "=", "False", ")", "\n", "vis", ".", "add_geometry", "(", "obj_mesh_gt", ",", "reset_bounding_box", "=", "False", ")", "\n", "vis", ".", "remove_geometry", "(", "obj_mesh", ",", "reset_bounding_box", "=", "False", ")", "\n", "vis", ".", "remove_geometry", "(", "hand_mesh_cur", ",", "reset_bounding_box", "=", "False", ")", "\n", "\n", "vis", ".", "update_renderer", "(", ")", "\n", "vis", ".", "poll_events", "(", ")", "\n", "\n", "", "def", "axis_on", "(", "vis", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "16", ")", ":", "\n", "            ", "vis", ".", "add_geometry", "(", "back_axis_list", "[", "i", "]", ",", "reset_bounding_box", "=", "False", ")", "\n", "vis", ".", "add_geometry", "(", "up_axis_list", "[", "i", "]", ",", "reset_bounding_box", "=", "False", ")", "\n", "vis", ".", "add_geometry", "(", "left_axis_list", "[", "i", "]", ",", "reset_bounding_box", "=", "False", ")", "\n", "", "vis", ".", "update_renderer", "(", ")", "\n", "vis", ".", "poll_events", "(", ")", "\n", "\n", "", "def", "axis_off", "(", "vis", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "16", ")", ":", "\n", "            ", "vis", ".", "remove_geometry", "(", "back_axis_list", "[", "i", "]", ",", "reset_bounding_box", "=", "False", ")", "\n", "vis", ".", "remove_geometry", "(", "up_axis_list", "[", "i", "]", ",", "reset_bounding_box", "=", "False", ")", "\n", "vis", ".", "remove_geometry", "(", "left_axis_list", "[", "i", "]", ",", "reset_bounding_box", "=", "False", ")", "\n", "", "vis", ".", "update_renderer", "(", ")", "\n", "vis", ".", "poll_events", "(", ")", "\n", "\n", "", "vis_cur", ".", "register_key_callback", "(", "ord", "(", "\"A\"", ")", ",", "hide_gt", ")", "\n", "vis_cur", ".", "register_key_callback", "(", "ord", "(", "\"Z\"", ")", ",", "show_gt", ")", "\n", "vis_cur", ".", "register_key_callback", "(", "ord", "(", "\"U\"", ")", ",", "axis_on", ")", "\n", "vis_cur", ".", "register_key_callback", "(", "ord", "(", "\"I\"", ")", ",", "axis_off", ")", "\n", "\n", "return", "runtime_vis", "\n", "\n"]], "home.repos.pwc.inspect_result.lixiny_CPF.postprocess.geo_optimizer.update_runtime_viz": [[965, 1002], ["open3d.utility.Vector3dVector", "open3d.utility.Vector3iVector", "runtime_vis[].compute_vertex_normals", "open3d.utility.Vector3dVector", "open3d.utility.Vector3iVector", "open3d.utility.Vector3dVector", "runtime_vis[].compute_vertex_normals", "open3d.utility.Vector3dVector", "open3d.utility.Vector3iVector", "open3d.utility.Vector3dVector", "runtime_vis[].compute_vertex_normals", "open3d.utility.Vector3dVector", "open3d.utility.Vector3iVector", "open3d.utility.Vector3dVector", "runtime_vis[].compute_vertex_normals", "runtime_vis[].update_geometry", "runtime_vis[].update_geometry", "runtime_vis[].update_geometry", "runtime_vis[].update_geometry", "runtime_vis[].poll_events", "runtime_vis[].update_renderer", "runtime_vis[].reset_view_point", "numpy.array", "numpy.array", "numpy.array", "len", "len", "len"], "function", ["None"], ["", "def", "update_runtime_viz", "(", "\n", "runtime_vis", ",", "\n", "hand_verts_gt", ",", "\n", "hand_verts_curr", ",", "\n", "obj_verts_gt", ",", "\n", "obj_verts_curr", ",", "\n", "hand_faces", ",", "\n", "obj_faces_cur", ",", "\n", ")", ":", "\n", "    ", "runtime_vis", "[", "\"hand_mesh\"", "]", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "hand_verts_curr", ")", "\n", "runtime_vis", "[", "\"hand_mesh\"", "]", ".", "triangles", "=", "o3d", ".", "utility", ".", "Vector3iVector", "(", "hand_faces", ")", "\n", "runtime_vis", "[", "\"hand_mesh\"", "]", ".", "compute_vertex_normals", "(", ")", "\n", "runtime_vis", "[", "\"hand_mesh_gt\"", "]", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "hand_verts_gt", ")", "\n", "runtime_vis", "[", "\"hand_mesh_gt\"", "]", ".", "triangles", "=", "o3d", ".", "utility", ".", "Vector3iVector", "(", "hand_faces", ")", "\n", "runtime_vis", "[", "\"hand_mesh_gt\"", "]", ".", "vertex_colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "\n", "np", ".", "array", "(", "[", "[", "0.0", ",", "0.0", ",", "1.0", "]", "]", "*", "len", "(", "hand_verts_gt", ")", ")", "\n", ")", "\n", "runtime_vis", "[", "\"hand_mesh_gt\"", "]", ".", "compute_vertex_normals", "(", ")", "\n", "runtime_vis", "[", "\"obj_mesh\"", "]", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "obj_verts_curr", ")", "\n", "runtime_vis", "[", "\"obj_mesh\"", "]", ".", "triangles", "=", "o3d", ".", "utility", ".", "Vector3iVector", "(", "obj_faces_cur", ")", "\n", "runtime_vis", "[", "\"obj_mesh\"", "]", ".", "vertex_colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "\n", "np", ".", "array", "(", "[", "[", "1.0", ",", "1.0", ",", "0.0", "]", "]", "*", "len", "(", "obj_verts_curr", ")", ")", "\n", ")", "\n", "runtime_vis", "[", "\"obj_mesh\"", "]", ".", "compute_vertex_normals", "(", ")", "\n", "runtime_vis", "[", "\"obj_mesh_gt\"", "]", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "obj_verts_gt", ")", "\n", "runtime_vis", "[", "\"obj_mesh_gt\"", "]", ".", "triangles", "=", "o3d", ".", "utility", ".", "Vector3iVector", "(", "obj_faces_cur", ")", "\n", "runtime_vis", "[", "\"obj_mesh_gt\"", "]", ".", "vertex_colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "\n", "np", ".", "array", "(", "[", "[", "1.0", ",", "0.0", ",", "0.0", "]", "]", "*", "len", "(", "obj_verts_gt", ")", ")", "\n", ")", "\n", "runtime_vis", "[", "\"obj_mesh_gt\"", "]", ".", "compute_vertex_normals", "(", ")", "\n", "runtime_vis", "[", "\"window\"", "]", ".", "update_geometry", "(", "runtime_vis", "[", "\"hand_mesh\"", "]", ")", "\n", "runtime_vis", "[", "\"window\"", "]", ".", "update_geometry", "(", "runtime_vis", "[", "\"hand_mesh_gt\"", "]", ")", "\n", "runtime_vis", "[", "\"window\"", "]", ".", "update_geometry", "(", "runtime_vis", "[", "\"obj_mesh\"", "]", ")", "\n", "runtime_vis", "[", "\"window\"", "]", ".", "update_geometry", "(", "runtime_vis", "[", "\"obj_mesh_gt\"", "]", ")", "\n", "runtime_vis", "[", "\"window\"", "]", ".", "poll_events", "(", ")", "\n", "runtime_vis", "[", "\"window\"", "]", ".", "update_renderer", "(", ")", "\n", "runtime_vis", "[", "\"window\"", "]", ".", "reset_view_point", "(", "True", ")", "\n", "", ""]]}