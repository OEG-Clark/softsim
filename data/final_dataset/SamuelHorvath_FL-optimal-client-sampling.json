{"home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.shakespeare_fedavg_main.FlattenedCategoricalAccuracy.__init__": [[53, 55], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.simple_fedavg_tf.KerasModelWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "'accuracy'", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", ",", "dtype", "=", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.shakespeare_fedavg_main.FlattenedCategoricalAccuracy.update_state": [[56, 60], ["tensorflow.reshape", "tensorflow.reshape", "super().update_state", "len"], "methods", ["home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.shakespeare_fedavg_main.FlattenedCategoricalAccuracy.update_state"], ["", "def", "update_state", "(", "self", ",", "y_true", ",", "y_pred", ",", "sample_weight", "=", "None", ")", ":", "\n", "        ", "y_true", "=", "tf", ".", "reshape", "(", "y_true", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "y_pred", "=", "tf", ".", "reshape", "(", "y_pred", ",", "[", "-", "1", ",", "len", "(", "vocab", ")", ",", "1", "]", ")", "\n", "return", "super", "(", ")", ".", "update_state", "(", "y_true", ",", "y_pred", ",", "sample_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.shakespeare_fedavg_main.get_shakespeare_dataset": [[62, 107], ["tensorflow.lookup.StaticHashTable", "tensorflow_federated.simulation.datasets.shakespeare.load_data", "ss_train.preprocess.preprocess", "shakespeare_fedavg_main.get_shakespeare_dataset.preprocess_test_dataset"], "function", ["None"], ["", "", "def", "get_shakespeare_dataset", "(", ")", ":", "\n", "    ", "\"\"\"Loads and preprocesses the Shakespeare dataset.\n    Returns:\n        A `(ss_train, ss_test)` tuple where `ss_train` is a\n        `tff.simulation.ClientData` object representing the training data and\n        `ss_test` is a single `tf.data.Dataset` representing the test data of\n        all clients.\n    \"\"\"", "\n", "\n", "table", "=", "tf", ".", "lookup", ".", "StaticHashTable", "(", "\n", "tf", ".", "lookup", ".", "KeyValueTensorInitializer", "(", "\n", "keys", "=", "vocab", ",", "values", "=", "tf", ".", "constant", "(", "list", "(", "range", "(", "len", "(", "vocab", ")", ")", ")", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", ")", ",", "\n", "default_value", "=", "0", ")", "\n", "\n", "def", "to_ids", "(", "x", ")", ":", "\n", "        ", "s", "=", "tf", ".", "reshape", "(", "x", "[", "'snippets'", "]", ",", "shape", "=", "[", "1", "]", ")", "\n", "chars", "=", "tf", ".", "strings", ".", "bytes_split", "(", "s", ")", ".", "values", "\n", "ids", "=", "table", ".", "lookup", "(", "chars", ")", "\n", "return", "ids", "\n", "\n", "\n", "", "def", "split_input_target", "(", "chunk", ")", ":", "\n", "        ", "input_text", "=", "tf", ".", "map_fn", "(", "lambda", "x", ":", "x", "[", ":", "-", "1", "]", ",", "chunk", ")", "\n", "target_text", "=", "tf", ".", "map_fn", "(", "lambda", "x", ":", "x", "[", "1", ":", "]", ",", "chunk", ")", "\n", "return", "collections", ".", "OrderedDict", "(", "\n", "x", "=", "input_text", ",", "y", "=", "target_text", ")", "\n", "\n", "\n", "", "def", "preprocess_train_dataset", "(", "dataset", ")", ":", "\n", "        ", "return", "dataset", ".", "map", "(", "to_ids", ")", ".", "unbatch", "(", ")", ".", "batch", "(", "FLAGS", ".", "seq_len", "+", "1", ",", "drop_remainder", "=", "True", ")", ".", "shuffle", "(", "buffer_size", "=", "100", ")", ".", "repeat", "(", "\n", "count", "=", "FLAGS", ".", "client_epochs_per_round", ")", ".", "batch", "(", "\n", "FLAGS", ".", "batch_size", ",", "drop_remainder", "=", "True", ")", ".", "map", "(", "split_input_target", ")", "\n", "\n", "", "def", "preprocess_test_dataset", "(", "dataset", ")", ":", "\n", "        ", "return", "dataset", ".", "map", "(", "to_ids", ")", ".", "unbatch", "(", ")", ".", "batch", "(", "FLAGS", ".", "seq_len", "+", "1", ",", "drop_remainder", "=", "True", ")", ".", "batch", "(", "\n", "FLAGS", ".", "batch_size", ",", "drop_remainder", "=", "True", ")", ".", "map", "(", "split_input_target", ")", "\n", "\n", "\n", "", "ss_train", ",", "ss_test", "=", "tff", ".", "simulation", ".", "datasets", ".", "shakespeare", ".", "load_data", "(", ")", "\n", "\n", "ss_train", "=", "ss_train", ".", "preprocess", "(", "preprocess_train_dataset", ")", "\n", "ss_test", "=", "preprocess_test_dataset", "(", "\n", "ss_test", ".", "create_tf_dataset_from_all_clients", "(", ")", ")", "\n", "return", "ss_train", ",", "ss_test", "\n", "\n"]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.shakespeare_fedavg_main.load_model": [[109, 116], ["tensorflow.keras.models.Sequential", "tf.keras.models.Sequential.add", "tf.keras.models.Sequential.add", "tf.keras.models.Sequential.add", "tf.keras.models.Sequential.add", "tensorflow.keras.layers.Embedding", "tensorflow.keras.layers.GRU", "tensorflow.keras.layers.GRU", "tensorflow.keras.layers.Dense"], "function", ["None"], ["", "def", "load_model", "(", "batch_size", ")", ":", "\n", "    ", "model", "=", "tf", ".", "keras", ".", "models", ".", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "input_dim", "=", "86", ",", "output_dim", "=", "256", ")", ")", "\n", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "GRU", "(", "units", "=", "256", ",", "return_sequences", "=", "True", ",", "batch_input_shape", "=", "(", "batch_size", ",", "None", ",", "256", ")", ")", ")", "\n", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "GRU", "(", "units", "=", "256", ",", "return_sequences", "=", "True", ")", ")", "\n", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "86", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.shakespeare_fedavg_main.server_optimizer_fn": [[118, 120], ["tensorflow.keras.optimizers.SGD"], "function", ["None"], ["", "def", "server_optimizer_fn", "(", ")", ":", "\n", "    ", "return", "tf", ".", "keras", ".", "optimizers", ".", "SGD", "(", "learning_rate", "=", "FLAGS", ".", "server_learning_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.shakespeare_fedavg_main.client_optimizer_fn": [[122, 124], ["tensorflow.keras.optimizers.SGD"], "function", ["None"], ["", "def", "client_optimizer_fn", "(", ")", ":", "\n", "    ", "return", "tf", ".", "keras", ".", "optimizers", ".", "SGD", "(", "learning_rate", "=", "FLAGS", ".", "client_learning_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.shakespeare_fedavg_main.main": [[126, 202], ["str", "numpy.random.seed", "random.seed", "tensorflow.random.set_seed", "tensorflow.compat.v1.ConfigProto", "tensorflow.compat.v1.Session", "tensorflow.compat.v1.keras.backend.set_session", "shakespeare_fedavg_main.get_shakespeare_dataset", "simple_fedavg_tff.FedAvg", "simple_fedavg_tff.FedAvg.initialize", "shakespeare_fedavg_main.FlattenedCategoricalAccuracy", "shakespeare_fedavg_main.main.tff_model_fn"], "function", ["home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.shakespeare_fedavg_main.get_shakespeare_dataset"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "if", "len", "(", "argv", ")", ">", "1", ":", "\n", "        ", "raise", "app", ".", "UsageError", "(", "'Too many command-line arguments.'", ")", "\n", "\n", "", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "FLAGS", ".", "random_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "FLAGS", ".", "random_seed", ")", "\n", "random", ".", "seed", "(", "FLAGS", ".", "random_seed", ")", "\n", "tf", ".", "random", ".", "set_seed", "(", "FLAGS", ".", "random_seed", ")", "\n", "session_conf", "=", "tf", ".", "compat", ".", "v1", ".", "ConfigProto", "(", "intra_op_parallelism_threads", "=", "1", ",", "inter_op_parallelism_threads", "=", "1", ")", "\n", "sess", "=", "tf", ".", "compat", ".", "v1", ".", "Session", "(", "graph", "=", "tf", ".", "compat", ".", "v1", ".", "get_default_graph", "(", ")", ",", "config", "=", "session_conf", ")", "\n", "Kbackbend", ".", "set_session", "(", "sess", ")", "\n", "\n", "\n", "train_data", ",", "test_data", "=", "get_shakespeare_dataset", "(", ")", "\n", "\n", "def", "tff_model_fn", "(", ")", ":", "\n", "        ", "\"\"\"Constructs a fully initialized model for use in federated averaging.\"\"\"", "\n", "keras_model", "=", "load_model", "(", "FLAGS", ".", "batch_size", ")", "\n", "loss", "=", "tf", ".", "keras", ".", "losses", ".", "SparseCategoricalCrossentropy", "(", "from_logits", "=", "True", ")", "\n", "return", "simple_fedavg_tf", ".", "KerasModelWrapper", "(", "keras_model", ",", "\n", "test_data", ".", "element_spec", ",", "loss", ")", "\n", "\n", "", "federated_averaging", "=", "simple_fedavg_tff", ".", "FedAvg", "(", "\n", "tff_model_fn", ",", "FLAGS", ".", "expected_clients_per_round", ",", "FLAGS", ".", "train_clients_per_round", ",", "\n", "FLAGS", ".", "j_max_iter_greedy_alg", ",", "FLAGS", ".", "importance_sampling", ",", "server_optimizer_fn", ",", "client_optimizer_fn", ")", "\n", "server_state", "=", "federated_averaging", ".", "initialize", "(", ")", "\n", "\n", "metric_acc", "=", "FlattenedCategoricalAccuracy", "(", "name", "=", "'test_accuracy'", ")", "\n", "model", "=", "tff_model_fn", "(", ")", "\n", "\n", "train_loss", "=", "[", "]", "\n", "val_acc", "=", "[", "]", "\n", "probs", "=", "[", "]", "\n", "\n", "clients", "=", "train_data", ".", "client_ids", "\n", "\n", "print", "(", "'preprocessing...'", ")", "\n", "exclude_clients", "=", "[", "]", "\n", "for", "i", ",", "client", "in", "enumerate", "(", "clients", ")", ":", "\n", "        ", "client_dataset", "=", "train_data", ".", "create_tf_dataset_for_client", "(", "client", ")", "\n", "len_dataset", "=", "len", "(", "list", "(", "client_dataset", ")", ")", "\n", "if", "len_dataset", "==", "0", ":", "\n", "            ", "exclude_clients", ".", "append", "(", "i", ")", "# exclude empty clients", "\n", "\n", "", "", "np", ".", "random", ".", "seed", "(", "FLAGS", ".", "random_seed", ")", "\n", "sampled_clients_list", "=", "[", "np", ".", "random", ".", "choice", "(", "\n", "[", "i", "for", "i", "in", "range", "(", "len", "(", "clients", ")", ")", "if", "i", "not", "in", "exclude_clients", "]", ",", "\n", "size", "=", "FLAGS", ".", "train_clients_per_round", ",", "\n", "replace", "=", "False", ")", "for", "_", "in", "range", "(", "FLAGS", ".", "total_rounds", ")", "]", "\n", "\n", "for", "round_num", "in", "range", "(", "FLAGS", ".", "total_rounds", ")", ":", "\n", "        ", "sampled_clients", "=", "[", "clients", "[", "i", "]", "for", "i", "in", "sampled_clients_list", "[", "round_num", "]", "]", "\n", "sampled_train_data", "=", "[", "]", "\n", "for", "client", "in", "sampled_clients", ":", "\n", "            ", "client_dataset", "=", "train_data", ".", "create_tf_dataset_for_client", "(", "client", ")", "\n", "sampled_train_data", ".", "append", "(", "client_dataset", ")", "\n", "\n", "", "server_state", ",", "train_metrics", ",", "prob", "=", "federated_averaging", ".", "next", "(", "\n", "server_state", ",", "sampled_train_data", ")", "\n", "\n", "print", "(", "f'Round {round_num} training loss: {train_metrics}'", ")", "\n", "train_loss", ".", "append", "(", "train_metrics", ")", "\n", "probs", ".", "append", "(", "prob", ")", "\n", "\n", "if", "round_num", "%", "FLAGS", ".", "rounds_per_eval", "==", "0", ":", "\n", "            ", "model", ".", "from_weights", "(", "server_state", ".", "model_weights", ")", "\n", "accuracy", "=", "simple_fedavg_tf", ".", "keras_evaluate", "(", "model", ".", "keras_model", ",", "test_data", ",", "metric_acc", ")", "\n", "print", "(", "f'Round {round_num} validation accuracy: {accuracy * 100.0}'", ")", "\n", "val_acc", ".", "append", "(", "accuracy", ")", "\n", "\n", "", "", "with", "open", "(", "f'./tff_save/{FLAGS.name}_valacc.pk'", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "val_acc", ",", "f", ")", "\n", "", "with", "open", "(", "f'./tff_save/{FLAGS.name}_trainloss.pk'", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "train_loss", ",", "f", ")", "\n", "", "with", "open", "(", "f'./tff_save/{FLAGS.name}_probs.pk'", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "probs", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.emnist_fedavg_main_cookup.get_emnist_dataset": [[45, 75], ["tensorflow_federated.python.simulation.hdf5_client_data.HDF5ClientData", "tensorflow_federated.python.simulation.hdf5_client_data.HDF5ClientData", "emnist_train.preprocess.preprocess", "emnist_fedavg_main_cookup.get_emnist_dataset.preprocess_test_dataset"], "function", ["None"], ["def", "get_emnist_dataset", "(", "dataset_filename", ")", ":", "\n", "    ", "\"\"\"Loads and preprocesses the EMNIST dataset.\n    Returns:\n        A `(emnist_train, emnist_test)` tuple where `emnist_train` is a\n        `tff.simulation.ClientData` object representing the training data and\n        `emnist_test` is a single `tf.data.Dataset` representing the test data of\n        all clients.\n    \"\"\"", "\n", "emnist_train", "=", "hdf5_client_data", ".", "HDF5ClientData", "(", "f'./dataset/{dataset_filename}.h5'", ")", "\n", "emnist_test", "=", "hdf5_client_data", ".", "HDF5ClientData", "(", "'./dataset/test.h5'", ")", "\n", "\n", "def", "element_fn", "(", "element", ")", ":", "\n", "        ", "return", "collections", ".", "OrderedDict", "(", "\n", "x", "=", "tf", ".", "expand_dims", "(", "element", "[", "'pixels'", "]", ",", "-", "1", ")", ",", "y", "=", "element", "[", "'label'", "]", ")", "\n", "\n", "", "def", "preprocess_train_dataset", "(", "dataset", ")", ":", "\n", "# Use buffer_size same as the maximum client dataset size,", "\n", "# 418 for Federated EMNIST", "\n", "        ", "return", "dataset", ".", "map", "(", "element_fn", ")", ".", "shuffle", "(", "buffer_size", "=", "418", ")", ".", "repeat", "(", "\n", "count", "=", "FLAGS", ".", "client_epochs_per_round", ")", ".", "batch", "(", "\n", "FLAGS", ".", "batch_size", ",", "drop_remainder", "=", "False", ")", "\n", "\n", "", "def", "preprocess_test_dataset", "(", "dataset", ")", ":", "\n", "        ", "return", "dataset", ".", "map", "(", "element_fn", ")", ".", "batch", "(", "\n", "FLAGS", ".", "test_batch_size", ",", "drop_remainder", "=", "False", ")", "\n", "\n", "", "emnist_train", "=", "emnist_train", ".", "preprocess", "(", "preprocess_train_dataset", ")", "\n", "emnist_test", "=", "preprocess_test_dataset", "(", "\n", "emnist_test", ".", "create_tf_dataset_from_all_clients", "(", ")", ")", "\n", "return", "emnist_train", ",", "emnist_test", "\n", "\n"]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.emnist_fedavg_main_cookup.create_original_fedavg_cnn_model": [[77, 118], ["functools.partial", "functools.partial", "tensorflow.keras.models.Sequential", "tensorflow.keras.initializers.GlorotUniform", "functools.partial.", "functools.partial.", "functools.partial.", "functools.partial.", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "tensorflow.keras.initializers.GlorotUniform", "tensorflow.keras.initializers.GlorotUniform"], "function", ["None"], ["", "def", "create_original_fedavg_cnn_model", "(", "only_digits", "=", "True", ")", ":", "\n", "    ", "\"\"\"The CNN model used in https://arxiv.org/abs/1602.05629.\n    This function is duplicated from research/optimization/emnist/models.py to\n    make this example completely stand-alone.\n    Args:\n        only_digits: If True, uses a final layer with 10 outputs, for use with the\n        digits only EMNIST dataset. If False, uses 62 outputs for the larger\n        dataset.\n    Returns:\n        An uncompiled `tf.keras.Model`.\n    \"\"\"", "\n", "data_format", "=", "'channels_last'", "\n", "input_shape", "=", "[", "28", ",", "28", ",", "1", "]", "\n", "\n", "max_pool", "=", "functools", ".", "partial", "(", "\n", "tf", ".", "keras", ".", "layers", ".", "MaxPooling2D", ",", "\n", "pool_size", "=", "(", "2", ",", "2", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "data_format", ")", "\n", "conv2d", "=", "functools", ".", "partial", "(", "\n", "tf", ".", "keras", ".", "layers", ".", "Conv2D", ",", "\n", "kernel_size", "=", "5", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "data_format", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "kernel_initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "GlorotUniform", "(", "seed", "=", "FLAGS", ".", "random_seed", ")", ")", "\n", "\n", "model", "=", "tf", ".", "keras", ".", "models", ".", "Sequential", "(", "[", "\n", "conv2d", "(", "filters", "=", "32", ",", "input_shape", "=", "input_shape", ")", ",", "\n", "max_pool", "(", ")", ",", "\n", "conv2d", "(", "filters", "=", "64", ")", ",", "\n", "max_pool", "(", ")", ",", "\n", "tf", ".", "keras", ".", "layers", ".", "Flatten", "(", ")", ",", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "512", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "kernel_initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "GlorotUniform", "(", "seed", "=", "FLAGS", ".", "random_seed", ")", ")", ",", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "10", "if", "only_digits", "else", "62", ",", "\n", "kernel_initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "GlorotUniform", "(", "seed", "=", "FLAGS", ".", "random_seed", ")", ")", ",", "\n", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "tf", ".", "nn", ".", "softmax", ")", ",", "\n", "]", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.emnist_fedavg_main_cookup.server_optimizer_fn": [[120, 122], ["tensorflow.keras.optimizers.SGD"], "function", ["None"], ["", "def", "server_optimizer_fn", "(", ")", ":", "\n", "    ", "return", "tf", ".", "keras", ".", "optimizers", ".", "SGD", "(", "learning_rate", "=", "FLAGS", ".", "server_learning_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.emnist_fedavg_main_cookup.client_optimizer_fn": [[124, 126], ["tensorflow.keras.optimizers.SGD"], "function", ["None"], ["", "def", "client_optimizer_fn", "(", ")", ":", "\n", "    ", "return", "tf", ".", "keras", ".", "optimizers", ".", "SGD", "(", "learning_rate", "=", "FLAGS", ".", "client_learning_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.emnist_fedavg_main_cookup.main": [[128, 203], ["str", "numpy.random.seed", "random.seed", "tensorflow.random.set_seed", "tensorflow.compat.v1.ConfigProto", "tensorflow.compat.v1.Session", "tensorflow.compat.v1.keras.backend.set_session", "emnist_fedavg_main_cookup.get_emnist_dataset", "simple_fedavg_tff.FedAvg", "simple_fedavg_tff.FedAvg.initialize", "tensorflow.keras.metrics.SparseCategoricalAccuracy", "emnist_fedavg_main_cookup.main.tff_model_fn"], "function", ["home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.emnist_fedavg_main_cookup.get_emnist_dataset"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "if", "len", "(", "argv", ")", ">", "1", ":", "\n", "        ", "raise", "app", ".", "UsageError", "(", "'Too many command-line arguments.'", ")", "\n", "\n", "", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "FLAGS", ".", "random_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "FLAGS", ".", "random_seed", ")", "\n", "random", ".", "seed", "(", "FLAGS", ".", "random_seed", ")", "\n", "tf", ".", "random", ".", "set_seed", "(", "FLAGS", ".", "random_seed", ")", "\n", "session_conf", "=", "tf", ".", "compat", ".", "v1", ".", "ConfigProto", "(", "intra_op_parallelism_threads", "=", "1", ",", "inter_op_parallelism_threads", "=", "1", ")", "\n", "sess", "=", "tf", ".", "compat", ".", "v1", ".", "Session", "(", "graph", "=", "tf", ".", "compat", ".", "v1", ".", "get_default_graph", "(", ")", ",", "config", "=", "session_conf", ")", "\n", "Kbackbend", ".", "set_session", "(", "sess", ")", "\n", "\n", "train_data", ",", "test_data", "=", "get_emnist_dataset", "(", "FLAGS", ".", "dataset_filename", ")", "\n", "\n", "def", "tff_model_fn", "(", ")", ":", "\n", "        ", "\"\"\"Constructs a fully initialized model for use in federated averaging.\"\"\"", "\n", "keras_model", "=", "create_original_fedavg_cnn_model", "(", "only_digits", "=", "True", ")", "\n", "loss", "=", "tf", ".", "keras", ".", "losses", ".", "SparseCategoricalCrossentropy", "(", ")", "\n", "return", "simple_fedavg_tf", ".", "KerasModelWrapper", "(", "keras_model", ",", "\n", "test_data", ".", "element_spec", ",", "loss", ")", "\n", "\n", "# iterative_process = simple_fedavg_tff.build_federated_averaging_process(", "\n", "#     tff_model_fn, FLAGS.expected_clients_per_round, FLAGS.train_clients_per_round,", "\n", "#     FLAGS.j_max_iter_greedy_alg, FLAGS.importance_sampling, server_optimizer_fn, client_optimizer_fn)", "\n", "# server_state = iterative_process.initialize()", "\n", "\n", "", "federated_averaging", "=", "simple_fedavg_tff", ".", "FedAvg", "(", "\n", "tff_model_fn", ",", "FLAGS", ".", "expected_clients_per_round", ",", "FLAGS", ".", "train_clients_per_round", ",", "\n", "FLAGS", ".", "j_max_iter_greedy_alg", ",", "FLAGS", ".", "importance_sampling", ",", "server_optimizer_fn", ",", "client_optimizer_fn", ")", "\n", "server_state", "=", "federated_averaging", ".", "initialize", "(", ")", "\n", "\n", "metric_acc", "=", "tf", ".", "keras", ".", "metrics", ".", "SparseCategoricalAccuracy", "(", "name", "=", "'test_accuracy'", ")", "\n", "model", "=", "tff_model_fn", "(", ")", "\n", "\n", "train_loss", "=", "[", "]", "\n", "val_acc", "=", "[", "]", "\n", "probs", "=", "[", "]", "\n", "\n", "clients", "=", "train_data", ".", "client_ids", "\n", "\n", "np", ".", "random", ".", "seed", "(", "FLAGS", ".", "random_seed", ")", "\n", "sampled_clients_list", "=", "[", "np", ".", "random", ".", "choice", "(", "\n", "len", "(", "clients", ")", ",", "\n", "size", "=", "FLAGS", ".", "train_clients_per_round", ",", "\n", "replace", "=", "False", ")", "for", "_", "in", "range", "(", "FLAGS", ".", "total_rounds", ")", "]", "\n", "\n", "for", "round_num", "in", "range", "(", "FLAGS", ".", "total_rounds", ")", ":", "\n", "        ", "sampled_clients", "=", "[", "clients", "[", "i", "]", "for", "i", "in", "sampled_clients_list", "[", "round_num", "]", "]", "\n", "sampled_train_data", "=", "[", "\n", "train_data", ".", "create_tf_dataset_for_client", "(", "client", ")", "\n", "for", "client", "in", "sampled_clients", "\n", "]", "\n", "# server_state, train_metrics = iterative_process.next(", "\n", "#     server_state, sampled_train_data)", "\n", "\n", "server_state", ",", "train_metrics", ",", "prob", "=", "federated_averaging", ".", "next", "(", "\n", "server_state", ",", "sampled_train_data", ")", "\n", "\n", "print", "(", "f'Round {round_num} training loss: {train_metrics}'", ")", "\n", "train_loss", ".", "append", "(", "train_metrics", ")", "\n", "probs", ".", "append", "(", "prob", ")", "\n", "\n", "if", "round_num", "%", "FLAGS", ".", "rounds_per_eval", "==", "0", ":", "\n", "            ", "model", ".", "from_weights", "(", "server_state", ".", "model_weights", ")", "\n", "accuracy", "=", "simple_fedavg_tf", ".", "keras_evaluate", "(", "model", ".", "keras_model", ",", "test_data", ",", "\n", "metric_acc", ")", "\n", "print", "(", "f'Round {round_num} validation accuracy: {accuracy * 100.0}'", ")", "\n", "val_acc", ".", "append", "(", "accuracy", ")", "\n", "\n", "", "", "with", "open", "(", "f'./tff_save/{FLAGS.name}_valacc.pk'", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "val_acc", ",", "f", ")", "\n", "", "with", "open", "(", "f'./tff_save/{FLAGS.name}_trainloss.pk'", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "train_loss", ",", "f", ")", "\n", "", "with", "open", "(", "f'./tff_save/{FLAGS.name}_probs.pk'", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "probs", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.simple_fedavg_tff.FedAvg.__init__": [[28, 248], ["model_fn", "tensorflow_federated.tf_computation", "tensorflow_federated.tf_computation", "tensorflow_federated.SequenceType", "tensorflow_federated.tf_computation", "tensorflow_federated.FederatedType", "tensorflow_federated.FederatedType", "tensorflow_federated.tf_computation", "tensorflow_federated.federated_computation", "tensorflow_federated.tf_computation", "tensorflow_federated.federated_computation", "tensorflow_federated.tf_computation", "tensorflow_federated.federated_computation", "tensorflow_federated.tf_computation", "tensorflow_federated.federated_computation", "tensorflow_federated.tf_computation", "tensorflow_federated.federated_computation", "tensorflow_federated.federated_computation", "tensorflow_federated.federated_computation", "tensorflow_federated.federated_computation", "tensorflow_federated.tf_computation", "tensorflow_federated.federated_computation", "tensorflow_federated.federated_computation", "tensorflow_federated.federated_computation", "tensorflow.keras.optimizers.SGD", "tensorflow.keras.optimizers.SGD", "model_fn", "server_optimizer_fn", "simple_fedavg_tff._initialize_optimizer_vars", "simple_fedavg_tf.ServerState", "model_fn", "server_optimizer_fn", "simple_fedavg_tff._initialize_optimizer_vars", "simple_fedavg_tf.server_update", "simple_fedavg_tf.build_server_broadcast_message", "model_fn", "client_optimizer_fn", "simple_fedavg_tf.client_update", "tensorflow_federated.federated_map", "tensorflow_federated.FederatedType", "tensorflow_federated.FederatedType", "tensorflow.cond", "tensorflow_federated.federated_map", "tensorflow_federated.FederatedType", "tensorflow_federated.TensorType", "tensorflow_federated.federated_map", "tensorflow_federated.FederatedType", "tensorflow.minimum", "tensorflow_federated.federated_map", "tensorflow_federated.FederatedType", "tensorflow_federated.FederatedType", "tensorflow.cond", "tensorflow_federated.federated_map", "tensorflow_federated.FederatedType", "tensorflow_federated.federated_mean", "tensorflow_federated.FederatedType", "tensorflow_federated.FederatedType", "tensorflow_federated.federated_map", "tensorflow_federated.FederatedType", "tensorflow_federated.federated_mean", "tensorflow_federated.FederatedType", "tensorflow_federated.FederatedType", "tensorflow_federated.federated_map", "tensorflow_federated.FederatedType", "tensorflow_federated.FederatedType", "tensorflow_federated.federated_map", "tensorflow_federated.federated_broadcast", "tensorflow_federated.federated_map", "tensorflow_federated.federated_sum", "tensorflow_federated.federated_broadcast", "simple_fedavg_tff.FedAvg.__init__.scale_on_clients"], "methods", ["home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.emnist_fedavg_main_cookup.server_optimizer_fn", "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.simple_fedavg_tff._initialize_optimizer_vars", "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.emnist_fedavg_main_cookup.server_optimizer_fn", "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.simple_fedavg_tff._initialize_optimizer_vars", "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.simple_fedavg_tf.server_update", "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.simple_fedavg_tf.build_server_broadcast_message", "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.emnist_fedavg_main_cookup.client_optimizer_fn", "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.simple_fedavg_tf.client_update"], ["    ", "def", "__init__", "(", "self", ",", "model_fn", ",", "m", ",", "n", ",", "j_max", ",", "importance_sampling", ",", "\n", "server_optimizer_fn", "=", "lambda", ":", "tf", ".", "keras", ".", "optimizers", ".", "SGD", "(", "learning_rate", "=", "1.0", ")", ",", "\n", "client_optimizer_fn", "=", "lambda", ":", "tf", ".", "keras", ".", "optimizers", ".", "SGD", "(", "learning_rate", "=", "0.1", ")", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Builds the TFF computations for optimization using federated averaging.\n        Args:\n        model_fn: A no-arg function that returns a\n          `simple_fedavg_tf.KerasModelWrapper`.\n        server_optimizer_fn: A no-arg function that returns a\n          `tf.keras.optimizers.Optimizer` for server update.\n        client_optimizer_fn: A no-arg function that returns a\n          `tf.keras.optimizers.Optimizer` for client update.\n        Returns:\n        A `tff.templates.IterativeProcess`.\n        \"\"\"", "\n", "\n", "dummy_model", "=", "model_fn", "(", ")", "\n", "\n", "@", "tff", ".", "tf_computation", "\n", "def", "server_init_tf", "(", ")", ":", "\n", "            ", "model", "=", "model_fn", "(", ")", "\n", "server_optimizer", "=", "server_optimizer_fn", "(", ")", "\n", "_initialize_optimizer_vars", "(", "model", ",", "server_optimizer", ")", "\n", "return", "ServerState", "(", "\n", "model_weights", "=", "model", ".", "weights", ",", "\n", "optimizer_state", "=", "server_optimizer", ".", "variables", "(", ")", ",", "\n", "round_num", "=", "0", "\n", ")", "\n", "\n", "", "server_state_type", "=", "server_init_tf", ".", "type_signature", ".", "result", "\n", "\n", "model_weights_type", "=", "server_state_type", ".", "model_weights", "\n", "\n", "@", "tff", ".", "tf_computation", "(", "server_state_type", ",", "model_weights_type", ".", "trainable", ")", "\n", "def", "server_update_fn", "(", "server_state", ",", "model_delta", ")", ":", "\n", "            ", "model", "=", "model_fn", "(", ")", "\n", "server_optimizer", "=", "server_optimizer_fn", "(", ")", "\n", "_initialize_optimizer_vars", "(", "model", ",", "server_optimizer", ")", "\n", "return", "server_update", "(", "model", ",", "server_optimizer", ",", "server_state", ",", "model_delta", ")", "\n", "\n", "", "@", "tff", ".", "tf_computation", "(", "server_state_type", ")", "\n", "def", "server_message_fn", "(", "server_state", ")", ":", "\n", "            ", "return", "build_server_broadcast_message", "(", "server_state", ")", "\n", "\n", "", "server_message_type", "=", "server_message_fn", ".", "type_signature", ".", "result", "\n", "tf_dataset_type", "=", "tff", ".", "SequenceType", "(", "dummy_model", ".", "input_spec", ")", "\n", "\n", "@", "tff", ".", "tf_computation", "(", "tf_dataset_type", ",", "server_message_type", ")", "\n", "def", "client_update_fn", "(", "tf_dataset", ",", "server_message", ")", ":", "\n", "            ", "model", "=", "model_fn", "(", ")", "\n", "client_optimizer", "=", "client_optimizer_fn", "(", ")", "\n", "return", "client_update", "(", "model", ",", "tf_dataset", ",", "server_message", ",", "client_optimizer", ")", "\n", "\n", "", "federated_server_state_type", "=", "tff", ".", "FederatedType", "(", "server_state_type", ",", "tff", ".", "SERVER", ")", "\n", "federated_dataset_type", "=", "tff", ".", "FederatedType", "(", "tf_dataset_type", ",", "tff", ".", "CLIENTS", ")", "\n", "\n", "@", "tff", ".", "tf_computation", "(", "tf", ".", "float32", ",", "tf", ".", "float32", ",", ")", "\n", "def", "scale", "(", "update_norm", ",", "sum_update_norms", ")", ":", "\n", "            ", "if", "importance_sampling", ":", "\n", "                ", "return", "tf", ".", "minimum", "(", "1.", ",", "tf", ".", "divide", "(", "tf", ".", "multiply", "(", "update_norm", ",", "m", ")", ",", "sum_update_norms", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "tf", ".", "divide", "(", "m", ",", "n", ")", "\n", "\n", "", "", "@", "tff", ".", "federated_computation", "(", "tff", ".", "FederatedType", "(", "tf", ".", "float32", ",", "tff", ".", "CLIENTS", ")", ",", "\n", "tff", ".", "FederatedType", "(", "tf", ".", "float32", ",", "tff", ".", "CLIENTS", ",", "True", ")", ")", "\n", "def", "scale_on_clients", "(", "update_norm", ",", "sum_update_norms", ")", ":", "\n", "            ", "return", "tff", ".", "federated_map", "(", "scale", ",", "(", "update_norm", ",", "sum_update_norms", ")", ")", "\n", "\n", "", "@", "tff", ".", "tf_computation", "(", "tf", ".", "float32", ")", "\n", "def", "create_prob_message", "(", "prob", ")", ":", "\n", "            ", "def", "f1", "(", ")", ":", "return", "tf", ".", "stack", "(", "[", "prob", ",", "1.", "]", ")", "\n", "def", "f2", "(", ")", ":", "return", "tf", ".", "constant", "(", "[", "0.", ",", "0.", "]", ")", "\n", "prob_message", "=", "tf", ".", "cond", "(", "tf", ".", "less", "(", "prob", ",", "1", ")", ",", "f1", ",", "f2", ")", "\n", "return", "prob_message", "\n", "\n", "", "@", "tff", ".", "federated_computation", "(", "tff", ".", "FederatedType", "(", "tf", ".", "float32", ",", "tff", ".", "CLIENTS", ")", ")", "\n", "def", "create_prob_message_on_clients", "(", "prob", ")", ":", "\n", "            ", "return", "tff", ".", "federated_map", "(", "create_prob_message", ",", "prob", ")", "\n", "\n", "", "@", "tff", ".", "tf_computation", "(", "tff", ".", "TensorType", "(", "tf", ".", "float32", ",", "(", "2", ",", ")", ")", ")", "\n", "def", "compute_rescaling", "(", "prob_aggreg", ")", ":", "\n", "            ", "rescaling_factor", "=", "(", "m", "-", "n", "+", "prob_aggreg", "[", "1", "]", ")", "/", "prob_aggreg", "[", "0", "]", "\n", "return", "rescaling_factor", "\n", "\n", "", "@", "tff", ".", "federated_computation", "(", "tff", ".", "FederatedType", "(", "tff", ".", "TensorType", "(", "tf", ".", "float32", ",", "(", "2", ",", ")", ")", ",", "tff", ".", "SERVER", ")", ")", "\n", "def", "compute_rescaling_on_master", "(", "prob_aggreg", ")", ":", "\n", "            ", "return", "tff", ".", "federated_map", "(", "compute_rescaling", ",", "prob_aggreg", ")", "\n", "\n", "", "@", "tff", ".", "tf_computation", "(", "tf", ".", "float32", ",", "tf", ".", "float32", ")", "\n", "def", "rescale_prob", "(", "prob", ",", "rescaling_factor", ")", ":", "\n", "            ", "return", "tf", ".", "minimum", "(", "1.", ",", "tf", ".", "multiply", "(", "prob", ",", "rescaling_factor", ")", ")", "\n", "\n", "", "@", "tff", ".", "federated_computation", "(", "tff", ".", "FederatedType", "(", "tf", ".", "float32", ",", "tff", ".", "CLIENTS", ")", ",", "\n", "tff", ".", "FederatedType", "(", "tf", ".", "float32", ",", "tff", ".", "CLIENTS", ",", "True", ")", ")", "\n", "def", "rescale_prob_on_clients", "(", "rob", ",", "rescaling_factor", ")", ":", "\n", "            ", "return", "tff", ".", "federated_map", "(", "rescale_prob", ",", "(", "rob", ",", "rescaling_factor", ")", ")", "\n", "\n", "", "@", "tff", ".", "tf_computation", "(", "tf", ".", "float32", ")", "\n", "def", "compute_weights_is_fn", "(", "prob", ")", ":", "\n", "            ", "def", "f1", "(", ")", ":", "return", "1.", "/", "prob", "\n", "def", "f2", "(", ")", ":", "return", "0.", "\n", "weight", "=", "tf", ".", "cond", "(", "tf", ".", "less", "(", "tf", ".", "random", ".", "uniform", "(", "(", ")", ")", ",", "prob", ")", ",", "f1", ",", "f2", ")", "\n", "return", "weight", "\n", "\n", "", "@", "tff", ".", "federated_computation", "(", "tff", ".", "FederatedType", "(", "tf", ".", "float32", ",", "tff", ".", "CLIENTS", ")", ")", "\n", "def", "compute_weights_is", "(", "prob", ")", ":", "\n", "            ", "return", "tff", ".", "federated_map", "(", "compute_weights_is_fn", ",", "prob", ")", "\n", "\n", "", "@", "tff", ".", "federated_computation", "(", "tff", ".", "FederatedType", "(", "model_weights_type", ".", "trainable", ",", "tff", ".", "CLIENTS", ")", ",", "\n", "tff", ".", "FederatedType", "(", "tf", ".", "float32", ",", "tff", ".", "CLIENTS", ")", ")", "\n", "def", "compute_round_model_delta", "(", "weights_delta", ",", "weights_denom", ")", ":", "\n", "            ", "return", "tff", ".", "federated_mean", "(", "\n", "weights_delta", ",", "weight", "=", "weights_denom", ")", "\n", "\n", "", "@", "tff", ".", "federated_computation", "(", "federated_server_state_type", ",", "\n", "tff", ".", "FederatedType", "(", "model_weights_type", ".", "trainable", ",", "tff", ".", "SERVER", ")", ")", "\n", "def", "update_server_state", "(", "server_state", ",", "round_model_delta", ")", ":", "\n", "            ", "return", "tff", ".", "federated_map", "(", "server_update_fn", ",", "\n", "(", "server_state", ",", "round_model_delta", ")", ")", "\n", "\n", "", "@", "tff", ".", "federated_computation", "(", "tff", ".", "FederatedType", "(", "tf", ".", "float32", ",", "tff", ".", "CLIENTS", ")", ",", "\n", "tff", ".", "FederatedType", "(", "tf", ".", "float32", ",", "tff", ".", "CLIENTS", ")", ")", "\n", "def", "compute_loss_metric", "(", "model_output", ",", "weight_denom", ")", ":", "\n", "            ", "return", "tff", ".", "federated_mean", "(", "\n", "model_output", ",", "weight", "=", "weight_denom", ")", "\n", "\n", "", "@", "tff", ".", "tf_computation", "(", "model_weights_type", ".", "trainable", ",", "tf", ".", "float32", ")", "\n", "def", "rescale_and_remove_fn", "(", "weights_delta", ",", "weights_is", ")", ":", "\n", "            ", "return", "[", "tf", ".", "math", ".", "scalar_mul", "(", "weights_is", ",", "weights_layer_delta", ")", "for", "weights_layer_delta", "in", "weights_delta", "]", "\n", "\n", "", "@", "tff", ".", "federated_computation", "(", "tff", ".", "FederatedType", "(", "model_weights_type", ".", "trainable", ",", "tff", ".", "CLIENTS", ")", ",", "\n", "tff", ".", "FederatedType", "(", "tf", ".", "float32", ",", "tff", ".", "CLIENTS", ")", ")", "\n", "def", "rescale_and_remove", "(", "weights_delta", ",", "weights_is", ")", ":", "\n", "            ", "return", "tff", ".", "federated_map", "(", "rescale_and_remove_fn", ",", "\n", "(", "weights_delta", ",", "weights_is", ")", ")", "\n", "\n", "", "@", "tff", ".", "federated_computation", "(", "federated_server_state_type", ",", "federated_dataset_type", ")", "\n", "def", "run_gradient_computation_round", "(", "server_state", ",", "federated_dataset", ")", ":", "\n", "            ", "\"\"\"Orchestration logic for one round of gradient computation.\n            Args:\n              server_state: A `ServerState`.\n              federated_dataset: A federated `tf.data.Dataset` with placement\n                `tff.CLIENTS`.\n            Returns:\n            A tuple of updated `tf.Tensor` of clients initial probability and `ClientOutput`.\n            \"\"\"", "\n", "server_message", "=", "tff", ".", "federated_map", "(", "server_message_fn", ",", "server_state", ")", "\n", "server_message_at_client", "=", "tff", ".", "federated_broadcast", "(", "server_message", ")", "\n", "\n", "client_outputs", "=", "tff", ".", "federated_map", "(", "\n", "client_update_fn", ",", "(", "federated_dataset", ",", "server_message_at_client", ")", ")", "\n", "\n", "update_norm_sum_weighted", "=", "tff", ".", "federated_sum", "(", "client_outputs", ".", "update_norm_weighted", ")", "\n", "norm_sum_clients_weighted", "=", "tff", ".", "federated_broadcast", "(", "update_norm_sum_weighted", ")", "\n", "\n", "prob_init", "=", "scale_on_clients", "(", "client_outputs", ".", "update_norm_weighted", ",", "norm_sum_clients_weighted", ")", "\n", "return", "prob_init", ",", "client_outputs", "\n", "\n", "", "@", "tff", ".", "federated_computation", "(", "tff", ".", "FederatedType", "(", "tf", ".", "float32", ",", "tff", ".", "CLIENTS", ")", ")", "\n", "def", "run_one_inner_loop_weights_computation", "(", "prob", ")", ":", "\n", "            ", "\"\"\"Orchestration logic for one round of computation.\n            Args:\n              prob: Probability of each client to communicate update.\n            Returns:\n            A tuple of updated `Probabilities` and `tf.float32` of rescaling factor.\n            \"\"\"", "\n", "\n", "prob_message", "=", "create_prob_message_on_clients", "(", "prob", ")", "\n", "prob_aggreg", "=", "tff", ".", "federated_sum", "(", "prob_message", ")", "\n", "rescaling_factor_master", "=", "compute_rescaling_on_master", "(", "prob_aggreg", ")", "\n", "rescaling_factor_clients", "=", "tff", ".", "federated_broadcast", "(", "rescaling_factor_master", ")", "\n", "prob", "=", "rescale_prob_on_clients", "(", "prob", ",", "rescaling_factor_clients", ")", "\n", "\n", "return", "prob", ",", "rescaling_factor_master", "\n", "\n", "", "@", "tff", ".", "federated_computation", "\n", "def", "server_init_tff", "(", ")", ":", "\n", "            ", "\"\"\"Orchestration logic for server model initialization.\"\"\"", "\n", "return", "tff", ".", "federated_value", "(", "server_init_tf", "(", ")", ",", "tff", ".", "SERVER", ")", "\n", "\n", "", "def", "run_one_round", "(", "server_state", ",", "federated_dataset", ")", ":", "\n", "            ", "\"\"\"Orchestration logic for one round of computation.\n            Args:\n              server_state: A `ServerState`.\n              federated_dataset: A federated `tf.data.Dataset` with placement\n                `tff.CLIENTS`.\n            Returns:\n            A tuple of updated `ServerState` and `tf.Tensor` of average loss.\n            \"\"\"", "\n", "prob", ",", "client_outputs", "=", "run_gradient_computation_round", "(", "\n", "server_state", ",", "federated_dataset", ")", "\n", "\n", "if", "importance_sampling", ":", "\n", "                ", "for", "j", "in", "range", "(", "j_max", ")", ":", "\n", "                    ", "prob", ",", "rescaling_factor", "=", "run_one_inner_loop_weights_computation", "(", "prob", ")", "\n", "if", "rescaling_factor", "<=", "1", ":", "\n", "                        ", "break", "\n", "\n", "", "", "", "weight_denom", "=", "[", "client_output", ".", "client_weight", "for", "client_output", "in", "client_outputs", "]", "\n", "weights_delta", "=", "[", "client_output", ".", "weights_delta", "for", "client_output", "in", "client_outputs", "]", "\n", "\n", "# rescale weights based on sampling procedure", "\n", "weights_is", "=", "compute_weights_is", "(", "prob", ")", "\n", "weights_delta", "=", "rescale_and_remove", "(", "weights_delta", ",", "weights_is", ")", "\n", "\n", "round_model_delta", "=", "compute_round_model_delta", "(", "weights_delta", ",", "weight_denom", ")", "\n", "\n", "server_state", "=", "update_server_state", "(", "server_state", ",", "round_model_delta", ")", "\n", "\n", "model_output", "=", "[", "client_output", ".", "model_output", "for", "client_output", "in", "client_outputs", "]", "\n", "round_loss_metric", "=", "compute_loss_metric", "(", "model_output", ",", "weight_denom", ")", "\n", "\n", "prob_numpy", "=", "[", "]", "\n", "for", "p", "in", "prob", ":", "\n", "                ", "prob_numpy", ".", "append", "(", "p", ".", "numpy", "(", ")", ")", "\n", "\n", "", "return", "server_state", ",", "round_loss_metric", ",", "prob_numpy", "\n", "\n", "", "self", ".", "next", "=", "run_one_round", "\n", "self", ".", "initialize", "=", "server_init_tff", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.simple_fedavg_tff._initialize_optimizer_vars": [[10, 24], ["tensorflow.nest.map_structure", "tensorflow.nest.map_structure", "optimizer.apply_gradients", "optimizer.variables", "tensorflow.nest.flatten", "tensorflow.nest.flatten", "tensorflow.zeros_like"], "function", ["None"], ["def", "_initialize_optimizer_vars", "(", "model", ",", "optimizer", ")", ":", "\n", "    ", "\"\"\"Creates optimizer variables to assign the optimizer's state.\"\"\"", "\n", "model_weights", "=", "model", ".", "weights", "\n", "model_delta", "=", "tf", ".", "nest", ".", "map_structure", "(", "tf", ".", "zeros_like", ",", "model_weights", ".", "trainable", ")", "\n", "# Create zero gradients to force an update that doesn't modify.", "\n", "# Force eagerly constructing the optimizer variables. Normally Keras lazily", "\n", "# creates the variables on first usage of the optimizer. Optimizers such as", "\n", "# Adam, Adagrad, or using momentum need to create a new set of variables shape", "\n", "# like the model weights.", "\n", "grads_and_vars", "=", "tf", ".", "nest", ".", "map_structure", "(", "\n", "lambda", "x", ",", "v", ":", "(", "tf", ".", "zeros_like", "(", "x", ")", ",", "v", ")", ",", "tf", ".", "nest", ".", "flatten", "(", "model_delta", ")", ",", "\n", "tf", ".", "nest", ".", "flatten", "(", "model_weights", ".", "trainable", ")", ")", "\n", "optimizer", ".", "apply_gradients", "(", "grads_and_vars", ")", "\n", "assert", "optimizer", ".", "variables", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.simple_fedavg_tf.KerasModelWrapper.__init__": [[13, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "keras_model", ",", "input_spec", ",", "loss", ")", ":", "\n", "        ", "\"\"\"A wrapper class that provides necessary API handles for TFF.\n        Args:\n          keras_model: A `tf.keras.Model` to be trained.\n          input_spec: Metadata of dataset that desribes the input tensors, which\n            will be converted to `tff.Type` specifying the expected type of input\n            and output of the model.\n          loss: A `tf.keras.losses.Loss` instance to be used for training.\n        \"\"\"", "\n", "self", ".", "keras_model", "=", "keras_model", "\n", "self", ".", "input_spec", "=", "input_spec", "\n", "self", ".", "loss", "=", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.simple_fedavg_tf.KerasModelWrapper.forward_pass": [[26, 38], ["simple_fedavg_tf.KerasModelWrapper.keras_model", "simple_fedavg_tf.KerasModelWrapper.loss", "ModelOutputs"], "methods", ["None"], ["", "def", "forward_pass", "(", "self", ",", "batch_input", ",", "training", "=", "True", ")", ":", "\n", "        ", "\"\"\"Forward pass of the model to get loss for a batch of data.\n        Args:\n          batch_input: A `collections.Mapping` with two keys, `x` for inputs and `y`\n            for labels.\n          training: Boolean scalar indicating training or inference mode.\n        Returns:\n          A scalar tf.float32 `tf.Tensor` loss for current batch input.\n        \"\"\"", "\n", "preds", "=", "self", ".", "keras_model", "(", "batch_input", "[", "'x'", "]", ",", "training", "=", "training", ")", "\n", "loss", "=", "self", ".", "loss", "(", "batch_input", "[", "'y'", "]", ",", "preds", ")", "\n", "return", "ModelOutputs", "(", "loss", "=", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.simple_fedavg_tf.KerasModelWrapper.weights": [[39, 44], ["ModelWeights"], "methods", ["None"], ["", "@", "property", "\n", "def", "weights", "(", "self", ")", ":", "\n", "        ", "return", "ModelWeights", "(", "\n", "trainable", "=", "self", ".", "keras_model", ".", "trainable_variables", ",", "\n", "non_trainable", "=", "self", ".", "keras_model", ".", "non_trainable_variables", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.simple_fedavg_tf.KerasModelWrapper.from_weights": [[45, 50], ["tensorflow_federated.utils.assign", "tensorflow_federated.utils.assign", "list", "list"], "methods", ["None"], ["", "def", "from_weights", "(", "self", ",", "model_weights", ")", ":", "\n", "        ", "tff", ".", "utils", ".", "assign", "(", "self", ".", "keras_model", ".", "trainable_variables", ",", "\n", "list", "(", "model_weights", ".", "trainable", ")", ")", "\n", "tff", ".", "utils", ".", "assign", "(", "self", ".", "keras_model", ".", "non_trainable_variables", ",", "\n", "list", "(", "model_weights", ".", "non_trainable", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.simple_fedavg_tf.keras_evaluate": [[52, 58], ["metric.reset_states", "metric.result", "model", "metric.update_state"], "function", ["home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.shakespeare_fedavg_main.FlattenedCategoricalAccuracy.update_state"], ["", "", "def", "keras_evaluate", "(", "model", ",", "test_data", ",", "metric", ")", ":", "\n", "    ", "metric", ".", "reset_states", "(", ")", "\n", "for", "batch", "in", "test_data", ":", "\n", "        ", "preds", "=", "model", "(", "batch", "[", "'x'", "]", ",", "training", "=", "False", ")", "\n", "metric", ".", "update_state", "(", "y_true", "=", "batch", "[", "'y'", "]", ",", "y_pred", "=", "preds", ")", "\n", "", "return", "metric", ".", "result", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.simple_fedavg_tf.server_update": [[120, 150], ["tensorflow_federated.utils.assign", "tensorflow_federated.utils.assign", "tensorflow.nest.map_structure", "server_optimizer.apply_gradients", "tensorflow_federated.utils.update_state", "server_optimizer.variables", "tensorflow.nest.flatten", "tensorflow.nest.flatten", "server_optimizer.variables"], "function", ["home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.shakespeare_fedavg_main.FlattenedCategoricalAccuracy.update_state"], ["", "@", "tf", ".", "function", "\n", "def", "server_update", "(", "model", ",", "server_optimizer", ",", "server_state", ",", "weights_delta", ")", ":", "\n", "    ", "\"\"\"Updates `server_state` based on `weights_delta`.\n    Args:\n    model: A `KerasModelWrapper` or `tff.learning.Model`.\n    server_optimizer: A `tf.keras.optimizers.Optimizer`. If the optimizer\n      creates variables, they must have already been created.\n    server_state: A `ServerState`, the state to be updated.\n    weights_delta: A nested structure of tensors holding the updates to the\n      trainable variables of the model.\n    Returns:\n    An updated `ServerState`.\n    \"\"\"", "\n", "# Initialize the model with the current state.", "\n", "model_weights", "=", "model", ".", "weights", "\n", "tff", ".", "utils", ".", "assign", "(", "model_weights", ",", "server_state", ".", "model_weights", ")", "\n", "tff", ".", "utils", ".", "assign", "(", "server_optimizer", ".", "variables", "(", ")", ",", "server_state", ".", "optimizer_state", ")", "\n", "\n", "# Apply the update to the model.", "\n", "grads_and_vars", "=", "tf", ".", "nest", ".", "map_structure", "(", "\n", "lambda", "x", ",", "v", ":", "(", "-", "1.0", "*", "x", ",", "v", ")", ",", "tf", ".", "nest", ".", "flatten", "(", "weights_delta", ")", ",", "\n", "tf", ".", "nest", ".", "flatten", "(", "model_weights", ".", "trainable", ")", ")", "\n", "server_optimizer", ".", "apply_gradients", "(", "grads_and_vars", ",", "name", "=", "'server_update'", ")", "\n", "\n", "# Create a new state based on the updated model.", "\n", "return", "tff", ".", "utils", ".", "update_state", "(", "\n", "server_state", ",", "\n", "model_weights", "=", "model_weights", ",", "\n", "optimizer_state", "=", "server_optimizer", ".", "variables", "(", ")", ",", "\n", "round_num", "=", "server_state", ".", "round_num", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.simple_fedavg_tf.build_server_broadcast_message": [[152, 166], ["simple_fedavg_tf.BroadcastMessage"], "function", ["None"], ["", "@", "tf", ".", "function", "\n", "def", "build_server_broadcast_message", "(", "server_state", ")", ":", "\n", "    ", "\"\"\"Builds `BroadcastMessage` for broadcasting.\n    This method can be used to post-process `ServerState` before broadcasting.\n    For example, perform model compression on `ServerState` to obtain a compressed\n    state that is sent in a `BroadcastMessage`.\n    Args:\n    server_state: A `ServerState`.\n    Returns:\n    A `BroadcastMessage`.\n    \"\"\"", "\n", "return", "BroadcastMessage", "(", "\n", "model_weights", "=", "server_state", ".", "model_weights", ",", "\n", "round_num", "=", "server_state", ".", "round_num", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.simple_fedavg_tf.client_update": [[169, 202], ["tensorflow_federated.utils.assign", "tensorflow.constant", "tensorflow.constant", "tensorflow.nest.map_structure", "tensorflow.cast", "simple_fedavg_tf.ClientOutput", "tape.gradient", "zip", "client_optimizer.apply_gradients", "tensorflow.linalg.global_norm", "tensorflow.GradientTape", "model.forward_pass", "tensorflow.shape", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.SamuelHorvath_FL-optimal-client-sampling.None.simple_fedavg_tf.KerasModelWrapper.forward_pass"], ["", "@", "tf", ".", "function", "\n", "def", "client_update", "(", "model", ",", "dataset", ",", "server_message", ",", "client_optimizer", ")", ":", "\n", "    ", "\"\"\"Performans client local training of `model` on `dataset`.\n    Args:\n    model: A `tff.learning.Model`.\n    dataset: A 'tf.data.Dataset'.\n    server_message: A `BroadcastMessage` from server.\n    client_optimizer: A `tf.keras.optimizers.Optimizer`.\n    Returns:\n    A 'ClientOutput`.\n    \"\"\"", "\n", "model_weights", "=", "model", ".", "weights", "\n", "initial_weights", "=", "server_message", ".", "model_weights", "\n", "tff", ".", "utils", ".", "assign", "(", "model_weights", ",", "initial_weights", ")", "\n", "\n", "num_examples", "=", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "loss_sum", "=", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "for", "batch", "in", "dataset", ":", "\n", "        ", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "            ", "outputs", "=", "model", ".", "forward_pass", "(", "batch", ")", "\n", "", "grads", "=", "tape", ".", "gradient", "(", "outputs", ".", "loss", ",", "model_weights", ".", "trainable", ")", "\n", "grads_and_vars", "=", "zip", "(", "grads", ",", "model_weights", ".", "trainable", ")", "\n", "client_optimizer", ".", "apply_gradients", "(", "grads_and_vars", ")", "\n", "batch_size", "=", "tf", ".", "shape", "(", "batch", "[", "'x'", "]", ")", "[", "0", "]", "\n", "num_examples", "+=", "batch_size", "\n", "loss_sum", "+=", "outputs", ".", "loss", "*", "tf", ".", "cast", "(", "batch_size", ",", "tf", ".", "float32", ")", "\n", "\n", "", "weights_delta", "=", "tf", ".", "nest", ".", "map_structure", "(", "lambda", "a", ",", "b", ":", "a", "-", "b", ",", "\n", "model_weights", ".", "trainable", ",", "\n", "initial_weights", ".", "trainable", ")", "\n", "client_weight", "=", "tf", ".", "cast", "(", "num_examples", ",", "tf", ".", "float32", ")", "\n", "update_norm_weighted", "=", "tf", ".", "linalg", ".", "global_norm", "(", "weights_delta", ")", "*", "client_weight", "\n", "return", "ClientOutput", "(", "weights_delta", ",", "update_norm_weighted", ",", "client_weight", ",", "loss_sum", "/", "client_weight", ")", "\n", "", ""]]}