{"home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.rationale_selection.baseline.SciFactRationaleSelectionDataset.__init__": [[32, 44], ["jsonlines.open", "claim[].items", "jsonlines.open", "enumerate", "baseline.SciFactRationaleSelectionDataset.samples.append", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "corpus", ":", "str", ",", "claims", ":", "str", ")", ":", "\n", "        ", "self", ".", "samples", "=", "[", "]", "\n", "corpus", "=", "{", "doc", "[", "'doc_id'", "]", ":", "doc", "for", "doc", "in", "jsonlines", ".", "open", "(", "corpus", ")", "}", "\n", "for", "claim", "in", "jsonlines", ".", "open", "(", "claims", ")", ":", "\n", "            ", "for", "doc_id", ",", "evidence", "in", "claim", "[", "'evidence'", "]", ".", "items", "(", ")", ":", "\n", "                ", "doc", "=", "corpus", "[", "int", "(", "doc_id", ")", "]", "\n", "evidence_sentence_idx", "=", "{", "s", "for", "es", "in", "evidence", "for", "s", "in", "es", "[", "'sentences'", "]", "}", "\n", "for", "i", ",", "sentence", "in", "enumerate", "(", "doc", "[", "'abstract'", "]", ")", ":", "\n", "                    ", "self", ".", "samples", ".", "append", "(", "{", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'sentence'", ":", "sentence", ",", "\n", "'evidence'", ":", "i", "in", "evidence_sentence_idx", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.rationale_selection.baseline.SciFactRationaleSelectionDataset.__len__": [[46, 48], ["len"], "methods", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.rationale_selection.baseline.SciFactRationaleSelectionDataset.__getitem__": [[49, 51], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "samples", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.rationale_selection.baseline.encode": [[72, 87], ["tokenizer.batch_encode_plus", "zip", "encoded_dict[].size", "tokenizer.batch_encode_plus", "tensor.to", "zip", "tokenizer.batch_encode_plus.items"], "function", ["None"], ["def", "encode", "(", "claims", ":", "List", "[", "str", "]", ",", "sentences", ":", "List", "[", "str", "]", ")", ":", "\n", "    ", "encoded_dict", "=", "tokenizer", ".", "batch_encode_plus", "(", "\n", "zip", "(", "sentences", ",", "claims", ")", ",", "\n", "pad_to_max_length", "=", "True", ",", "\n", "return_tensors", "=", "'pt'", ")", "\n", "if", "encoded_dict", "[", "'input_ids'", "]", ".", "size", "(", "1", ")", ">", "512", ":", "\n", "# Too long for the model. Truncate it", "\n", "        ", "encoded_dict", "=", "tokenizer", ".", "batch_encode_plus", "(", "\n", "zip", "(", "sentences", ",", "claims", ")", ",", "\n", "max_length", "=", "512", ",", "\n", "truncation_strategy", "=", "'only_first'", ",", "\n", "pad_to_max_length", "=", "True", ",", "\n", "return_tensors", "=", "'pt'", ")", "\n", "", "encoded_dict", "=", "{", "key", ":", "tensor", ".", "to", "(", "device", ")", "for", "key", ",", "tensor", "in", "encoded_dict", ".", "items", "(", ")", "}", "\n", "return", "encoded_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.rationale_selection.baseline.evaluate": [[89, 102], ["model.eval", "torch.no_grad", "torch.utils.data.DataLoader", "sklearn.metrics.f1_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "baseline.encode", "targets.extend", "outputs.extend", "model", "batch[].float().tolist", "logits.argmax().tolist", "batch[].float", "logits.argmax"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.inference.baseline.encode"], ["", "def", "evaluate", "(", "model", ",", "dataset", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "targets", "=", "[", "]", "\n", "outputs", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch", "in", "DataLoader", "(", "dataset", ",", "batch_size", "=", "args", ".", "batch_size_gpu", ")", ":", "\n", "            ", "encoded_dict", "=", "encode", "(", "batch", "[", "'claim'", "]", ",", "batch", "[", "'sentence'", "]", ")", "\n", "logits", "=", "model", "(", "**", "encoded_dict", ")", "[", "0", "]", "\n", "targets", ".", "extend", "(", "batch", "[", "'evidence'", "]", ".", "float", "(", ")", ".", "tolist", "(", ")", ")", "\n", "outputs", ".", "extend", "(", "logits", ".", "argmax", "(", "dim", "=", "1", ")", ".", "tolist", "(", ")", ")", "\n", "", "", "return", "f1_score", "(", "targets", ",", "outputs", ",", "zero_division", "=", "0", ")", ",", "precision_score", "(", "targets", ",", "outputs", ",", "zero_division", "=", "0", ")", ",", "recall_score", "(", "targets", ",", "outputs", ",", "zero_division", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.rationale_selection.classifier.SciFactRationaleSelectionDataset.__init__": [[29, 54], ["jsonlines.open", "jsonlines.open", "tqdm.tqdm.tqdm", "list", "jsonlines.open", "zip", "str", "enumerate", "list", "classifier.SciFactRationaleSelectionDataset.samples.append", "int", "data[].keys"], "methods", ["None"], ["\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "print", "(", "f'Using device \"{device}\"'", ")", "\n", "\n", "\n", "class", "SciFactRationaleSelectionDataset", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "corpus", ":", "str", ",", "dataset", ":", "str", ",", "abstracts", ")", ":", "\n", "        ", "self", ".", "samples", "=", "[", "]", "\n", "abstract_retrieval", "=", "jsonlines", ".", "open", "(", "abstracts", ")", "\n", "dataset", "=", "jsonlines", ".", "open", "(", "dataset", ")", "\n", "corpus", "=", "{", "doc", "[", "'doc_id'", "]", ":", "doc", "for", "doc", "in", "jsonlines", ".", "open", "(", "corpus", ")", "}", "\n", "for", "data", ",", "retrieval", "in", "tqdm", "(", "list", "(", "zip", "(", "dataset", ",", "abstract_retrieval", ")", ")", ")", ":", "\n", "# assert data['id'] == retrieval['claim_id']", "\n", "            ", "assert", "data", "[", "'id'", "]", "==", "retrieval", "[", "'id'", "]", "\n", "\n", "# for doc_id in retrieval['doc_ids']:", "\n", "for", "doc_id", "in", "retrieval", "[", "'retrieved_doc_ids'", "]", ":", "\n", "                ", "doc_id", "=", "str", "(", "doc_id", ")", "\n", "doc", "=", "corpus", "[", "int", "(", "doc_id", ")", "]", "\n", "#if the doc is correctly retrieved", "\n", "if", "doc_id", "in", "list", "(", "data", "[", "'evidence'", "]", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "evidence_sentence_idx", "=", "{", "s", "for", "es", "in", "data", "[", "'evidence'", "]", "[", "doc_id", "]", "for", "s", "in", "es", "[", "'sentences'", "]", "}", "\n", "# print(evidence_sentence_idx)", "\n", "#if not", "\n", "", "else", ":", "\n", "                    ", "evidence_sentence_idx", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.rationale_selection.classifier.SciFactRationaleSelectionDataset.__len__": [[56, 58], ["len"], "methods", ["None"], ["", "for", "i", ",", "sentence", "in", "enumerate", "(", "doc", "[", "'abstract'", "]", ")", ":", "\n", "                    ", "self", ".", "samples", ".", "append", "(", "{", "\n", "'claim'", ":", "data", "[", "'claim'", "]", ",", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.rationale_selection.classifier.SciFactRationaleSelectionDataset.__getitem__": [[59, 61], ["None"], "methods", ["None"], ["'sentence'", ":", "sentence", ",", "\n", "'evidence'", ":", "i", "in", "evidence_sentence_idx", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.rationale_selection.classifier.encode": [[63, 78], ["tokenizer.batch_encode_plus", "zip", "encoded_dict[].size", "tokenizer.batch_encode_plus", "tensor.to", "zip", "tokenizer.batch_encode_plus.items"], "function", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "samples", "[", "idx", "]", "\n", "\n", "\n", "", "", "def", "encode", "(", "claims", ":", "List", "[", "str", "]", ",", "sentences", ":", "List", "[", "str", "]", ")", ":", "\n", "    ", "encoded_dict", "=", "tokenizer", ".", "batch_encode_plus", "(", "\n", "zip", "(", "sentences", ",", "claims", ")", ",", "\n", "pad_to_max_length", "=", "True", ",", "\n", "return_tensors", "=", "'pt'", ")", "\n", "if", "encoded_dict", "[", "'input_ids'", "]", ".", "size", "(", "1", ")", ">", "512", ":", "\n", "# Too long for the model. Truncate it", "\n", "        ", "encoded_dict", "=", "tokenizer", ".", "batch_encode_plus", "(", "\n", "zip", "(", "sentences", ",", "claims", ")", ",", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.rationale_selection.classifier.evaluate": [[86, 101], ["model.eval", "torch.no_grad", "torch.utils.data.DataLoader", "sklearn.metrics.f1_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "sklearn.metrics.accuracy_score", "sklearn.metrics.balanced_accuracy_score", "classifier.encode", "targets.extend", "outputs.extend", "model", "batch[].float().tolist", "logits.argmax().tolist", "batch[].float", "logits.argmax"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.inference.baseline.encode"], ["", "def", "evaluate", "(", "model", ",", "dataset", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "targets", "=", "[", "]", "\n", "outputs", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch", "in", "DataLoader", "(", "dataset", ",", "batch_size", "=", "args", ".", "batch_size_gpu", ")", ":", "\n", "            ", "encoded_dict", "=", "encode", "(", "batch", "[", "'claim'", "]", ",", "batch", "[", "'sentence'", "]", ")", "\n", "logits", "=", "model", "(", "**", "encoded_dict", ")", "[", "0", "]", "\n", "targets", ".", "extend", "(", "batch", "[", "'evidence'", "]", ".", "float", "(", ")", ".", "tolist", "(", ")", ")", "\n", "outputs", ".", "extend", "(", "logits", ".", "argmax", "(", "dim", "=", "1", ")", ".", "tolist", "(", ")", ")", "\n", "", "", "return", "f1_score", "(", "targets", ",", "outputs", ",", "zero_division", "=", "0", ")", ",", "precision_score", "(", "targets", ",", "outputs", ",", "zero_division", "=", "0", ")", ",", "recall_score", "(", "targets", ",", "outputs", ",", "zero_division", "=", "0", ")", ",", "accuracy_score", "(", "targets", ",", "outputs", ")", ",", "balanced_accuracy_score", "(", "targets", ",", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.rationale_selection.baseline.update_dict": [[21, 27], ["d[].append"], "function", ["None"], ["parser", ".", "add_argument", "(", "'--lr-base'", ",", "type", "=", "float", ",", "default", "=", "1e-5", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-linear'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ")", "\n", "parser", ".", "add_argument", "(", "'--model-base'", ",", "type", "=", "str", ",", "default", "=", "'roberta'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.rationale_selection.baseline.top_k": [[28, 47], ["len", "len", "len", "numpy.concatenate", "int", "baseline.update_dict", "numpy.argpartition", "baseline.update_dict", "baseline.update_dict"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.rationale_selection.baseline.update_dict", "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.rationale_selection.baseline.update_dict", "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.rationale_selection.baseline.update_dict"], ["print", "(", "f'Using device \"{device}\"'", ")", "\n", "\n", "\n", "class", "SciFactRationaleSelectionDataset", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "corpus", ":", "str", ",", "claims", ":", "str", ")", ":", "\n", "        ", "self", ".", "samples", "=", "[", "]", "\n", "corpus", "=", "{", "doc", "[", "'doc_id'", "]", ":", "doc", "for", "doc", "in", "jsonlines", ".", "open", "(", "corpus", ")", "}", "\n", "for", "claim", "in", "jsonlines", ".", "open", "(", "claims", ")", ":", "\n", "            ", "for", "doc_id", ",", "evidence", "in", "claim", "[", "'evidence'", "]", ".", "items", "(", ")", ":", "\n", "                ", "doc", "=", "corpus", "[", "int", "(", "doc_id", ")", "]", "\n", "evidence_sentence_idx", "=", "{", "s", "for", "es", "in", "evidence", "for", "s", "in", "es", "[", "'sentences'", "]", "}", "\n", "for", "i", ",", "sentence", "in", "enumerate", "(", "doc", "[", "'abstract'", "]", ")", ":", "\n", "                    ", "self", ".", "samples", ".", "append", "(", "{", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'sentence'", ":", "sentence", ",", "\n", "'evidence'", ":", "i", "in", "evidence_sentence_idx", "\n", "}", ")", "\n", "\n", "", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.rationale_selection.baseline.output_k": [[49, 66], ["jsonlines.open", "jsonlines.open.write", "baseline.top_k", "result[].items", "numpy.argwhere", "list", "list", "sentence_scores.argsort", "int", "result[].keys", "result[].values"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.rationale_selection.baseline.top_k"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "samples", "[", "idx", "]", "\n", "\n", "\n", "", "", "trainset", "=", "SciFactRationaleSelectionDataset", "(", "args", ".", "corpus", ",", "args", ".", "claim_train", ")", "\n", "devset", "=", "SciFactRationaleSelectionDataset", "(", "args", ".", "corpus", ",", "args", ".", "claim_dev", ")", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "args", ".", "model", ")", "\n", "model", "=", "AutoModelForSequenceClassification", ".", "from_pretrained", "(", "args", ".", "model", ")", ".", "to", "(", "device", ")", "\n", "# model base are either bert or roberta", "\n", "if", "args", ".", "model_base", "==", "'bert'", ":", "\n", "    ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "\n", "{", "'params'", ":", "model", ".", "bert", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr_base", "}", ",", "\n", "{", "'params'", ":", "model", ".", "classifier", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr_linear", "}", "\n", "]", ")", "\n", "", "elif", "args", ".", "model_base", "==", "'roberta'", ":", "\n", "    ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "\n", "{", "'params'", ":", "model", ".", "roberta", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr_base", "}", ",", "\n", "{", "'params'", ":", "model", ".", "classifier", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr_linear", "}", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.rationale_selection.classifier.predict": [[79, 88], ["model.eval", "torch.no_grad", "torch.utils.data.DataLoader", "classifier.encode", "outputs.extend", "model", "logits.argmax().tolist", "logits.argmax"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.inference.baseline.encode"], ["max_length", "=", "512", ",", "\n", "truncation_strategy", "=", "'only_first'", ",", "\n", "pad_to_max_length", "=", "True", ",", "\n", "return_tensors", "=", "'pt'", ")", "\n", "", "encoded_dict", "=", "{", "key", ":", "tensor", ".", "to", "(", "device", ")", "for", "key", ",", "tensor", "in", "encoded_dict", ".", "items", "(", ")", "}", "\n", "return", "encoded_dict", "\n", "\n", "", "def", "evaluate", "(", "model", ",", "dataset", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "targets", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.abstract_retrieval.classifier.SciFactAbstractDataset.__init__": [[37, 77], ["classifier.tfidf_scope", "enumerate", "jsonlines.open", "jsonlines.open", "int", "int", "set", "set", "classifier.SciFactAbstractDataset.samples.append", "len", "classifier.SciFactAbstractDataset.samples.append", "list", "classifier.SciFactAbstractDataset.samples.append", "data[].keys", "int"], "methods", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.abstract_retrieval.classifier.tfidf_scope"], ["abstract_retrieval", "=", "jsonlines", ".", "open", "(", "abstracts", ")", "\n", "dataset", "=", "jsonlines", ".", "open", "(", "dataset", ")", "\n", "corpus", "=", "{", "doc", "[", "'doc_id'", "]", ":", "doc", "for", "doc", "in", "jsonlines", ".", "open", "(", "corpus", ")", "}", "\n", "for", "data", ",", "retrieval", "in", "tqdm", "(", "list", "(", "zip", "(", "dataset", ",", "abstract_retrieval", ")", ")", ")", ":", "\n", "# assert data['id'] == retrieval['claim_id']", "\n", "            ", "assert", "data", "[", "'id'", "]", "==", "retrieval", "[", "'id'", "]", "\n", "\n", "# for doc_id in retrieval['doc_ids']:", "\n", "for", "doc_id", "in", "retrieval", "[", "'retrieved_doc_ids'", "]", ":", "\n", "                ", "doc_id", "=", "str", "(", "doc_id", ")", "\n", "doc", "=", "corpus", "[", "int", "(", "doc_id", ")", "]", "\n", "#if the doc is correctly retrieved", "\n", "if", "doc_id", "in", "list", "(", "data", "[", "'evidence'", "]", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "evidence_sentence_idx", "=", "{", "s", "for", "es", "in", "data", "[", "'evidence'", "]", "[", "doc_id", "]", "for", "s", "in", "es", "[", "'sentences'", "]", "}", "\n", "# print(evidence_sentence_idx)", "\n", "#if not", "\n", "", "else", ":", "\n", "                    ", "evidence_sentence_idx", "=", "{", "}", "\n", "\n", "", "for", "i", ",", "sentence", "in", "enumerate", "(", "doc", "[", "'abstract'", "]", ")", ":", "\n", "                    ", "self", ".", "samples", ".", "append", "(", "{", "\n", "'claim'", ":", "data", "[", "'claim'", "]", ",", "\n", "'sentence'", ":", "sentence", ",", "\n", "'evidence'", ":", "i", "in", "evidence_sentence_idx", "\n", "}", ")", "\n", "\n", "", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "samples", "[", "idx", "]", "\n", "\n", "\n", "", "", "def", "encode", "(", "claims", ":", "List", "[", "str", "]", ",", "sentences", ":", "List", "[", "str", "]", ")", ":", "\n", "    ", "encoded_dict", "=", "tokenizer", ".", "batch_encode_plus", "(", "\n", "zip", "(", "sentences", ",", "claims", ")", ",", "\n", "pad_to_max_length", "=", "True", ",", "\n", "return_tensors", "=", "'pt'", ")", "\n", "if", "encoded_dict", "[", "'input_ids'", "]", ".", "size", "(", "1", ")", ">", "512", ":", "\n", "# Too long for the model. Truncate it", "\n", "        ", "encoded_dict", "=", "tokenizer", ".", "batch_encode_plus", "(", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.abstract_retrieval.classifier.SciFactAbstractDataset.__len__": [[80, 82], ["len"], "methods", ["None"], ["truncation_strategy", "=", "'only_first'", ",", "\n", "pad_to_max_length", "=", "True", ",", "\n", "return_tensors", "=", "'pt'", ")", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.abstract_retrieval.classifier.SciFactAbstractDataset.__getitem__": [[83, 85], ["None"], "methods", ["None"], ["", "encoded_dict", "=", "{", "key", ":", "tensor", ".", "to", "(", "device", ")", "for", "key", ",", "tensor", "in", "encoded_dict", ".", "items", "(", ")", "}", "\n", "return", "encoded_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.abstract_retrieval.classifier.tfidf_scope": [[54, 66], ["list", "jsonlines.open", "jsonlines.open", "vectorizer.transform().todense", "numpy.asarray().squeeze", "doc_id_ranks.append", "[].tolist", "vectorizer.transform", "numpy.asarray", "np.asarray().squeeze.argsort"], "function", ["None"], ["                    ", "evidence_sentence_idx", "=", "{", "}", "\n", "\n", "", "for", "i", ",", "sentence", "in", "enumerate", "(", "doc", "[", "'abstract'", "]", ")", ":", "\n", "                    ", "self", ".", "samples", ".", "append", "(", "{", "\n", "'claim'", ":", "data", "[", "'claim'", "]", ",", "\n", "'sentence'", ":", "sentence", ",", "\n", "'evidence'", ":", "i", "in", "evidence_sentence_idx", "\n", "}", ")", "\n", "\n", "", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.abstract_retrieval.classifier.encode": [[67, 82], ["tokenizer.batch_encode_plus", "zip", "encoded_dict[].size", "tokenizer.batch_encode_plus", "tensor.to", "zip", "tokenizer.batch_encode_plus.items"], "function", ["None"], ["        ", "return", "self", ".", "samples", "[", "idx", "]", "\n", "\n", "\n", "", "", "def", "encode", "(", "claims", ":", "List", "[", "str", "]", ",", "sentences", ":", "List", "[", "str", "]", ")", ":", "\n", "    ", "encoded_dict", "=", "tokenizer", ".", "batch_encode_plus", "(", "\n", "zip", "(", "sentences", ",", "claims", ")", ",", "\n", "pad_to_max_length", "=", "True", ",", "\n", "return_tensors", "=", "'pt'", ")", "\n", "if", "encoded_dict", "[", "'input_ids'", "]", ".", "size", "(", "1", ")", ">", "512", ":", "\n", "# Too long for the model. Truncate it", "\n", "        ", "encoded_dict", "=", "tokenizer", ".", "batch_encode_plus", "(", "\n", "zip", "(", "sentences", ",", "claims", ")", ",", "\n", "max_length", "=", "512", ",", "\n", "truncation_strategy", "=", "'only_first'", ",", "\n", "pad_to_max_length", "=", "True", ",", "\n", "return_tensors", "=", "'pt'", ")", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.abstract_retrieval.classifier.evaluate": [[117, 131], ["model.eval", "torch.no_grad", "torch.utils.data.DataLoader", "sklearn.metrics.f1_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "classifier.encode", "targets.extend", "outputs.extend", "model", "batch[].long().tolist", "logits.argmax().long().tolist", "batch[].long", "logits.argmax().long", "logits.argmax"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.inference.baseline.encode"], ["{", "'params'", ":", "model", ".", "roberta", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr_base", "}", ",", "\n", "{", "'params'", ":", "model", ".", "classifier", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr_linear", "}", "\n", "]", ")", "\n", "\n", "", "scheduler", "=", "get_cosine_schedule_with_warmup", "(", "optimizer", ",", "0", ",", "128", ")", "\n", "\n", "# training", "\n", "for", "e", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "t", "=", "tqdm", "(", "DataLoader", "(", "trainset", ",", "batch_size", "=", "args", ".", "batch_size_gpu", ",", "shuffle", "=", "True", ")", ")", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "t", ")", ":", "\n", "            ", "encoded_dict", "=", "encode", "(", "batch", "[", "'claim'", "]", ",", "batch", "[", "'sentence'", "]", ")", "\n", "loss", ",", "logits", "=", "model", "(", "**", "encoded_dict", ",", "labels", "=", "batch", "[", "'evidence'", "]", ".", "long", "(", ")", ".", "to", "(", "device", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "(", "i", "+", "1", ")", "%", "(", "args", ".", "batch_size_accumulated", "//", "args", ".", "batch_size_gpu", ")", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.abstract_retrieval.bertscore.tfidf": [[33, 52], ["vectorizer.transform().todense", "numpy.asarray().squeeze", "list", "[].tolist", "data[].keys", "vectorizer.transform", "numpy.asarray", "str", "np.asarray().squeeze.argsort"], "function", ["None"], ["def", "tfidf", "(", "vectorizer", ",", "doc_vectors", ",", "data", ",", "k", "=", "30", ")", ":", "\n", "\n", "    ", "saved", "=", "False", "\n", "\n", "claim", "=", "data", "[", "'claim'", "]", "\n", "claim_vector", "=", "vectorizer", ".", "transform", "(", "[", "claim", "]", ")", ".", "todense", "(", ")", "\n", "doc_scores", "=", "np", ".", "asarray", "(", "doc_vectors", "@", "claim_vector", ".", "T", ")", ".", "squeeze", "(", ")", "\n", "doc_indices_rank", "=", "doc_scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", ".", "tolist", "(", ")", "[", ":", "k", "]", "\n", "doc_id_rank", "=", "[", "corpus", "[", "idx", "]", "[", "'doc_id'", "]", "for", "idx", "in", "doc_indices_rank", "]", "\n", "\n", "truth", "=", "list", "(", "data", "[", "'evidence'", "]", ".", "keys", "(", ")", ")", "\n", "# print('ground truth: {}'.format(truth))", "\n", "# print('reservations: {}'.format(doc_id_rank))", "\n", "for", "prediction", "in", "doc_id_rank", ":", "\n", "        ", "if", "str", "(", "prediction", ")", "in", "truth", ":", "\n", "# print('correct reservation of doc {} for claim {}'.format(prediction, data['id']))", "\n", "            ", "saved", "=", "True", "\n", "\n", "", "", "return", "doc_indices_rank", ",", "doc_id_rank", ",", "saved", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.abstract_retrieval.classifier.SciFactDataset.__init__": [[32, 46], ["classifier.tfidf_scope", "enumerate", "jsonlines.open", "jsonlines.open", "classifier.SciFactDataset.samples.append"], "methods", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.abstract_retrieval.classifier.tfidf_scope"], ["\n", "\n", "class", "SciFactRationaleSelectionDataset", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "corpus", ":", "str", ",", "dataset", ":", "str", ",", "abstracts", ")", ":", "\n", "        ", "self", ".", "samples", "=", "[", "]", "\n", "abstract_retrieval", "=", "jsonlines", ".", "open", "(", "abstracts", ")", "\n", "dataset", "=", "jsonlines", ".", "open", "(", "dataset", ")", "\n", "corpus", "=", "{", "doc", "[", "'doc_id'", "]", ":", "doc", "for", "doc", "in", "jsonlines", ".", "open", "(", "corpus", ")", "}", "\n", "for", "data", ",", "retrieval", "in", "tqdm", "(", "list", "(", "zip", "(", "dataset", ",", "abstract_retrieval", ")", ")", ")", ":", "\n", "# assert data['id'] == retrieval['claim_id']", "\n", "            ", "assert", "data", "[", "'id'", "]", "==", "retrieval", "[", "'id'", "]", "\n", "\n", "# for doc_id in retrieval['doc_ids']:", "\n", "for", "doc_id", "in", "retrieval", "[", "'retrieved_doc_ids'", "]", ":", "\n", "                ", "doc_id", "=", "str", "(", "doc_id", ")", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.abstract_retrieval.classifier.SciFactDataset.__len__": [[48, 50], ["len"], "methods", ["None"], ["#if the doc is correctly retrieved", "\n", "if", "doc_id", "in", "list", "(", "data", "[", "'evidence'", "]", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "evidence_sentence_idx", "=", "{", "s", "for", "es", "in", "data", "[", "'evidence'", "]", "[", "doc_id", "]", "for", "s", "in", "es", "[", "'sentences'", "]", "}", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.abstract_retrieval.classifier.SciFactDataset.__getitem__": [[51, 53], ["None"], "methods", ["None"], ["# print(evidence_sentence_idx)", "\n", "#if not", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.abstract_retrieval.classifier.predict": [[83, 103], ["classifier.tfidf_scope", "model.eval", "torch.no_grad", "enumerate", "torch.utils.data.DataLoader", "classifier.encode", "logits.argmax().long().tolist", "model", "numpy.argwhere", "preds.append", "preds.append", "logits.argmax().long", "numpy.array", "logits.argmax"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.abstract_retrieval.classifier.tfidf_scope", "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.inference.baseline.encode"], ["", "encoded_dict", "=", "{", "key", ":", "tensor", ".", "to", "(", "device", ")", "for", "key", ",", "tensor", "in", "encoded_dict", ".", "items", "(", ")", "}", "\n", "return", "encoded_dict", "\n", "\n", "", "def", "evaluate", "(", "model", ",", "dataset", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "targets", "=", "[", "]", "\n", "outputs", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch", "in", "DataLoader", "(", "dataset", ",", "batch_size", "=", "args", ".", "batch_size_gpu", ")", ":", "\n", "            ", "encoded_dict", "=", "encode", "(", "batch", "[", "'claim'", "]", ",", "batch", "[", "'sentence'", "]", ")", "\n", "logits", "=", "model", "(", "**", "encoded_dict", ")", "[", "0", "]", "\n", "targets", ".", "extend", "(", "batch", "[", "'evidence'", "]", ".", "float", "(", ")", ".", "tolist", "(", ")", ")", "\n", "outputs", ".", "extend", "(", "logits", ".", "argmax", "(", "dim", "=", "1", ")", ".", "tolist", "(", ")", ")", "\n", "", "", "return", "f1_score", "(", "targets", ",", "outputs", ",", "zero_division", "=", "0", ")", ",", "precision_score", "(", "targets", ",", "outputs", ",", "zero_division", "=", "0", ")", ",", "recall_score", "(", "targets", ",", "outputs", ",", "zero_division", "=", "0", ")", ",", "accuracy_score", "(", "targets", ",", "outputs", ")", ",", "balanced_accuracy_score", "(", "targets", ",", "outputs", ")", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.evaluate.rationale_selection.is_correct": [[15, 30], ["all"], "function", ["None"], ["def", "is_correct", "(", "pred_sentence", ",", "pred_sentences", ",", "gold_sets", ")", ":", "\n", "    ", "\"\"\"\n    A predicted sentence is correctly identified if it is part of a gold\n    rationale, and all other sentences in the gold rationale are also\n    predicted rationale sentences.\n    \"\"\"", "\n", "for", "gold_set", "in", "gold_sets", ":", "\n", "        ", "gold_sents", "=", "gold_set", "[", "\"sentences\"", "]", "\n", "if", "pred_sentence", "in", "gold_sents", ":", "\n", "            ", "if", "all", "(", "[", "x", "in", "pred_sentences", "for", "x", "in", "gold_sents", "]", ")", ":", "\n", "                ", "return", "True", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "\n", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.evaluate.pipeline.get_args": [[18, 32], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Evaluate SciFact predictions.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--gold'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'The gold labels.'", ")", "\n", "parser", ".", "add_argument", "(", "'--corpus'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'The corpus of documents.'", ")", "\n", "parser", ".", "add_argument", "(", "'--prediction'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'The predictions.'", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'If provided, save metrics to this file.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.evaluate.pipeline.main": [[34, 46], ["pandas.set_option", "pipeline.get_args", "lib.data.GoldDataset", "lib.data.PredictedDataset", "lib.metrics.compute_metrics", "print", "metrics.compute_metrics.to_csv"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.evaluate.pipeline.get_args", "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.compute_metrics"], ["", "def", "main", "(", ")", ":", "\n", "    ", "pd", ".", "set_option", "(", "'display.max_columns'", ",", "None", ")", "\n", "\n", "args", "=", "get_args", "(", ")", "\n", "\n", "data", "=", "GoldDataset", "(", "args", ".", "corpus", ",", "args", ".", "gold", ")", "\n", "predictions", "=", "PredictedDataset", "(", "data", ",", "args", ".", "prediction", ")", "\n", "\n", "res", "=", "metrics", ".", "compute_metrics", "(", "predictions", ")", "\n", "print", "(", "res", ")", "\n", "if", "args", ".", "output", "is", "not", "None", ":", "\n", "        ", "res", ".", "to_csv", "(", "args", ".", "output", ",", "sep", "=", "'\\t'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.safe_divide": [[17, 22], ["round"], "function", ["None"], ["def", "safe_divide", "(", "num", ",", "denom", ")", ":", "\n", "    ", "if", "denom", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "else", ":", "\n", "        ", "return", "round", "(", "num", "/", "denom", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.compute_f1": [[24, 30], ["metrics.safe_divide", "metrics.safe_divide", "metrics.safe_divide"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.safe_divide", "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.safe_divide", "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.safe_divide"], ["", "", "def", "compute_f1", "(", "counts", ",", "difficulty", "=", "None", ")", ":", "\n", "    ", "correct_key", "=", "\"correct\"", "if", "difficulty", "is", "None", "else", "f\"correct_{difficulty}\"", "\n", "precision", "=", "safe_divide", "(", "counts", "[", "correct_key", "]", ",", "counts", "[", "\"retrieved\"", "]", ")", "\n", "recall", "=", "safe_divide", "(", "counts", "[", "correct_key", "]", ",", "counts", "[", "\"relevant\"", "]", ")", "\n", "f1", "=", "safe_divide", "(", "2", "*", "precision", "*", "recall", ",", "precision", "+", "recall", ")", "\n", "return", "{", "\"precision\"", ":", "precision", ",", "\"recall\"", ":", "recall", ",", "\"f1\"", ":", "f1", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.contains_evidence": [[36, 43], ["gold_rat.issubset"], "function", ["None"], ["", "def", "contains_evidence", "(", "predicted", ",", "gold", ")", ":", "\n", "# If any of gold are contained in predicted, we're good.", "\n", "    ", "for", "gold_rat", "in", "gold", ":", "\n", "        ", "if", "gold_rat", ".", "issubset", "(", "predicted", ")", ":", "\n", "            ", "return", "True", "\n", "# If we get to the end, didn't find one.", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.is_correct": [[45, 61], ["metrics.contains_evidence", "set", "set"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.contains_evidence"], ["", "def", "is_correct", "(", "doc_id", ",", "doc_pred", ",", "gold", ")", ":", "\n", "    ", "pred_rationales", "=", "doc_pred", ".", "rationale", "[", ":", "MAX_ABSTRACT_SENTS", "]", "\n", "\n", "# If it's not an evidence document, we lose.", "\n", "if", "doc_id", "not", "in", "gold", ".", "evidence", ":", "\n", "        ", "return", "False", ",", "False", "\n", "\n", "# If the label's wrong, we lose.", "\n", "", "gold_label", "=", "gold", ".", "evidence", "[", "doc_id", "]", ".", "label", "\n", "if", "doc_pred", ".", "label", "!=", "gold_label", ":", "\n", "        ", "return", "False", ",", "False", "\n", "\n", "", "gold_rationales", "=", "[", "set", "(", "x", ")", "for", "x", "in", "gold", ".", "evidence", "[", "doc_id", "]", ".", "rationales", "]", "\n", "good_rationalized", "=", "contains_evidence", "(", "set", "(", "pred_rationales", ")", ",", "gold_rationales", ")", "\n", "good_label_only", "=", "True", "\n", "return", "good_label_only", ",", "good_rationalized", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.update_counts_abstract": [[63, 78], ["len", "pred.predictions.items", "metrics.is_correct"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.is_correct"], ["", "def", "update_counts_abstract", "(", "pred", ",", "gold", ",", "counts_abstract", ")", ":", "\n", "    ", "counts_abstract", "[", "\"relevant\"", "]", "+=", "len", "(", "gold", ".", "evidence", ")", "\n", "for", "doc_id", ",", "doc_pred", "in", "pred", ".", "predictions", ".", "items", "(", ")", ":", "\n", "# If it's NEI, doesn't count one way or the other.", "\n", "        ", "if", "doc_pred", ".", "label", "==", "Label", ".", "NEI", ":", "\n", "            ", "continue", "\n", "", "counts_abstract", "[", "\"retrieved\"", "]", "+=", "1", "\n", "\n", "good_label_only", ",", "good_rationalized", "=", "is_correct", "(", "doc_id", ",", "doc_pred", ",", "gold", ")", "\n", "if", "good_label_only", ":", "\n", "            ", "counts_abstract", "[", "\"correct_label_only\"", "]", "+=", "1", "\n", "", "if", "good_rationalized", ":", "\n", "            ", "counts_abstract", "[", "\"correct_rationalized\"", "]", "+=", "1", "\n", "\n", "", "", "return", "counts_abstract", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.count_rationale_sents": [[84, 99], ["gold_set.issubset", "len", "len"], "function", ["None"], ["", "def", "count_rationale_sents", "(", "predicted", ",", "gold", ")", ":", "\n", "    ", "n_correct", "=", "0", "\n", "\n", "for", "ix", "in", "predicted", ":", "\n", "        ", "gold_sets", "=", "[", "entry", "for", "entry", "in", "gold", "if", "ix", "in", "entry", "]", "\n", "assert", "len", "(", "gold_sets", ")", "<", "2", "# Can't be in two rationales.", "\n", "# If it's not in a gold set, no dice.", "\n", "if", "len", "(", "gold_sets", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "# If it's in a gold set, make sure the rest got retrieved.", "\n", "", "gold_set", "=", "gold_sets", "[", "0", "]", "\n", "if", "gold_set", ".", "issubset", "(", "predicted", ")", ":", "\n", "            ", "n_correct", "+=", "1", "\n", "\n", "", "", "return", "n_correct", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.count_correct": [[101, 117], ["metrics.count_rationale_sents", "int", "set", "set"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.count_rationale_sents"], ["", "def", "count_correct", "(", "doc_id", ",", "doc_pred", ",", "gold", ")", ":", "\n", "# If not an evidence doc, no good.", "\n", "    ", "if", "doc_id", "not", "in", "gold", ".", "evidence", ":", "\n", "        ", "return", "0", ",", "0", "\n", "\n", "# Count the number of rationale sentences we get credit for.", "\n", "", "gold_rationales", "=", "[", "set", "(", "x", ")", "for", "x", "in", "gold", ".", "evidence", "[", "doc_id", "]", ".", "rationales", "]", "\n", "n_correct", "=", "count_rationale_sents", "(", "set", "(", "doc_pred", ".", "rationale", ")", ",", "gold_rationales", ")", "\n", "\n", "gold_label", "=", "gold", ".", "evidence", "[", "doc_id", "]", ".", "label", "\n", "\n", "n_correct_selection", "=", "n_correct", "\n", "correct_label", "=", "int", "(", "doc_pred", ".", "label", "==", "gold_label", ")", "\n", "n_correct_label", "=", "correct_label", "*", "n_correct", "\n", "\n", "return", "n_correct_selection", ",", "n_correct_label", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.update_counts_sentence": [[119, 135], ["gold.evidence.values", "pred.predictions.items", "sum", "len", "metrics.count_correct", "len"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.count_correct"], ["", "def", "update_counts_sentence", "(", "pred", ",", "gold", ",", "counts_sentence", ")", ":", "\n", "# Update the gold evidence sentences.", "\n", "    ", "for", "gold_doc", "in", "gold", ".", "evidence", ".", "values", "(", ")", ":", "\n", "        ", "counts_sentence", "[", "\"relevant\"", "]", "+=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "gold_doc", ".", "rationales", "]", ")", "\n", "\n", "", "for", "doc_id", ",", "doc_pred", "in", "pred", ".", "predictions", ".", "items", "(", ")", ":", "\n", "# If it's NEI, skip it.", "\n", "        ", "if", "doc_pred", ".", "label", "==", "Label", ".", "NEI", ":", "\n", "            ", "continue", "\n", "\n", "", "counts_sentence", "[", "\"retrieved\"", "]", "+=", "len", "(", "doc_pred", ".", "rationale", ")", "\n", "n_correct_selection", ",", "n_correct_label", "=", "count_correct", "(", "doc_id", ",", "doc_pred", ",", "gold", ")", "\n", "counts_sentence", "[", "\"correct_selection\"", "]", "+=", "n_correct_selection", "\n", "counts_sentence", "[", "\"correct_label\"", "]", "+=", "n_correct_label", "\n", "\n", "", "return", "counts_sentence", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.check_rationale_lengths": [[141, 158], ["predictions.items", "pandas.DataFrame", "warnings.warn", "print", "len", "pd.DataFrame.append", "pd.DataFrame.__repr__"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.ClaimPredictions.__repr__"], ["", "def", "check_rationale_lengths", "(", "preds", ")", ":", "\n", "    ", "bad", "=", "[", "]", "\n", "for", "pred", "in", "preds", ":", "\n", "        ", "claim_id", "=", "pred", ".", "claim_id", "\n", "predictions", "=", "pred", ".", "predictions", "\n", "for", "doc_key", ",", "prediction", "in", "predictions", ".", "items", "(", ")", ":", "\n", "            ", "n_rationales", "=", "len", "(", "prediction", ".", "rationale", ")", "\n", "if", "n_rationales", ">", "MAX_ABSTRACT_SENTS", ":", "\n", "                ", "to_append", "=", "{", "\"claim_id\"", ":", "claim_id", ",", "\"abstract\"", ":", "doc_key", ",", "\"n_rationales\"", ":", "n_rationales", "}", "\n", "bad", ".", "append", "(", "to_append", ")", "\n", "", "", "", "if", "bad", ":", "\n", "        ", "bad", "=", "pd", ".", "DataFrame", "(", "bad", ")", "\n", "msg", "=", "(", "f\"\\nRationales with more than {MAX_ABSTRACT_SENTS} sentences found.\\n\"", "\n", "f\"The first 3 will be used for abstract-level evaluation\\n\\n\"", "\n", "f\"{bad.__repr__()}\"", ")", "\n", "warnings", ".", "warn", "(", "msg", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.compute_metrics": [[162, 181], ["collections.Counter", "collections.Counter", "metrics.check_rationale_lengths", "pandas.DataFrame", "preds.gold.get_claim", "metrics.update_counts_abstract", "metrics.update_counts_sentence", "metrics.compute_f1", "metrics.compute_f1", "metrics.compute_f1", "metrics.compute_f1"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.check_rationale_lengths", "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.GoldDataset.get_claim", "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.update_counts_abstract", "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.update_counts_sentence", "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.compute_f1", "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.compute_f1", "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.compute_f1", "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.metrics.compute_f1"], ["", "", "def", "compute_metrics", "(", "preds", ")", ":", "\n", "    ", "\"\"\"\n    Compute pipeline metrics based on dataset of predictions.\n    \"\"\"", "\n", "counts_abstract", "=", "Counter", "(", ")", "\n", "counts_sentence", "=", "Counter", "(", ")", "\n", "\n", "check_rationale_lengths", "(", "preds", ")", "\n", "\n", "for", "pred", "in", "preds", ":", "\n", "        ", "gold", "=", "preds", ".", "gold", ".", "get_claim", "(", "pred", ".", "claim_id", ")", "\n", "counts_abstract", "=", "update_counts_abstract", "(", "pred", ",", "gold", ",", "counts_abstract", ")", "\n", "counts_sentence", "=", "update_counts_sentence", "(", "pred", ",", "gold", ",", "counts_sentence", ")", "\n", "\n", "", "return", "pd", ".", "DataFrame", "(", "\n", "{", "\"sentence_selection\"", ":", "compute_f1", "(", "counts_sentence", ",", "\"selection\"", ")", ",", "\n", "\"sentence_label\"", ":", "compute_f1", "(", "counts_sentence", ",", "\"label\"", ")", ",", "\n", "\"abstract_label_only\"", ":", "compute_f1", "(", "counts_abstract", ",", "\"label_only\"", ")", ",", "\n", "\"abstract_rationalized\"", ":", "compute_f1", "(", "counts_abstract", ",", "\"rationalized\"", ")", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.Document.__repr__": [[48, 50], ["data.Document.title.upper"], "methods", ["None"], ["def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "title", ".", "upper", "(", ")", "+", "\"\\n\"", "+", "\"\\n\"", ".", "join", "(", "[", "\"- \"", "+", "entry", "for", "entry", "in", "self", ".", "sentences", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.Document.__lt__": [[51, 53], ["data.Document.title.__lt__"], "methods", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.Document.__lt__"], ["", "def", "__lt__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "title", ".", "__lt__", "(", "other", ".", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.Document.dump": [[54, 60], ["json.dumps", "data.Document.is_structured"], "methods", ["None"], ["", "def", "dump", "(", "self", ")", ":", "\n", "        ", "res", "=", "{", "\"doc_id\"", ":", "self", ".", "id", ",", "\n", "\"title\"", ":", "self", ".", "title", ",", "\n", "\"abstract\"", ":", "self", ".", "sentences", ",", "\n", "\"structured\"", ":", "self", ".", "is_structured", "(", ")", "}", "\n", "return", "json", ".", "dumps", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.Corpus.__repr__": [[70, 72], ["len"], "methods", ["None"], ["def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f\"Corpus of {len(self.documents)} documents.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.Corpus.__getitem__": [[73, 76], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"Get document by index in list.\"", "\n", "return", "self", ".", "documents", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.Corpus.get_document": [[77, 82], ["len"], "methods", ["None"], ["", "def", "get_document", "(", "self", ",", "doc_id", ")", ":", "\n", "        ", "\"Get document by ID.\"", "\n", "res", "=", "[", "x", "for", "x", "in", "self", ".", "documents", "if", "x", ".", "id", "==", "doc_id", "]", "\n", "assert", "len", "(", "res", ")", "==", "1", "\n", "return", "res", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.Corpus.from_jsonl": [[83, 92], ["data.load_jsonl", "cls", "data.Document", "documents.append"], "methods", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.load_jsonl"], ["", "@", "classmethod", "\n", "def", "from_jsonl", "(", "cls", ",", "corpus_file", ")", ":", "\n", "        ", "corpus", "=", "load_jsonl", "(", "corpus_file", ")", "\n", "documents", "=", "[", "]", "\n", "for", "entry", "in", "corpus", ":", "\n", "            ", "doc", "=", "Document", "(", "entry", "[", "\"doc_id\"", "]", ",", "entry", "[", "\"title\"", "]", ",", "entry", "[", "\"abstract\"", "]", ")", "\n", "documents", ".", "append", "(", "doc", ")", "\n", "\n", "", "return", "cls", "(", "documents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.GoldDataset.__init__": [[102, 105], ["data.Corpus.from_jsonl", "data.GoldDataset._read_claims"], "methods", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.Corpus.from_jsonl", "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.GoldDataset._read_claims"], ["def", "__init__", "(", "self", ",", "corpus_file", ",", "data_file", ")", ":", "\n", "        ", "self", ".", "corpus", "=", "Corpus", ".", "from_jsonl", "(", "corpus_file", ")", "\n", "self", ".", "claims", "=", "self", ".", "_read_claims", "(", "data_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.GoldDataset.__repr__": [[106, 109], ["data.GoldDataset.corpus.__repr__", "len"], "methods", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.ClaimPredictions.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "msg", "=", "f\"{self.corpus.__repr__()} {len(self.claims)} claims.\"", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.GoldDataset.__getitem__": [[110, 112], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "claims", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.GoldDataset._read_claims": [[113, 128], ["data.load_jsonl", "sorted", "copy.deepcopy", "sorted.append", "data.GoldDataset.corpus.get_document", "len", "len", "data.Claim"], "methods", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.load_jsonl", "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.Corpus.get_document"], ["", "def", "_read_claims", "(", "self", ",", "data_file", ")", ":", "\n", "        ", "\"Read claims from file.\"", "\n", "examples", "=", "load_jsonl", "(", "data_file", ")", "\n", "res", "=", "[", "]", "\n", "for", "this_example", "in", "examples", ":", "\n", "            ", "entry", "=", "copy", ".", "deepcopy", "(", "this_example", ")", "\n", "entry", "[", "\"release\"", "]", "=", "self", "\n", "entry", "[", "\"cited_docs\"", "]", "=", "[", "self", ".", "corpus", ".", "get_document", "(", "doc", ")", "\n", "for", "doc", "in", "entry", "[", "\"cited_doc_ids\"", "]", "]", "\n", "assert", "len", "(", "entry", "[", "\"cited_docs\"", "]", ")", "==", "len", "(", "entry", "[", "\"cited_doc_ids\"", "]", ")", "\n", "del", "entry", "[", "\"cited_doc_ids\"", "]", "\n", "res", ".", "append", "(", "Claim", "(", "**", "entry", ")", ")", "\n", "\n", "", "res", "=", "sorted", "(", "res", ",", "key", "=", "lambda", "x", ":", "x", ".", "id", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.GoldDataset.get_claim": [[129, 134], ["len"], "methods", ["None"], ["", "def", "get_claim", "(", "self", ",", "example_id", ")", ":", "\n", "        ", "\"Get a single claim by ID.\"", "\n", "keep", "=", "[", "x", "for", "x", "in", "self", ".", "claims", "if", "x", ".", "id", "==", "example_id", "]", "\n", "assert", "len", "(", "keep", ")", "==", "1", "\n", "return", "keep", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.Claim.__post_init__": [[155, 157], ["data.Claim._format_evidence"], "methods", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.Claim._format_evidence"], ["def", "__post_init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "evidence", "=", "self", ".", "_format_evidence", "(", "self", ".", "evidence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.Claim._format_evidence": [[158, 179], ["evidence_dict.items", "int", "data.make_label", "data.EvidenceAbstract", "len", "Exception", "set"], "methods", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.make_label"], ["", "@", "staticmethod", "\n", "def", "_format_evidence", "(", "evidence_dict", ")", ":", "\n", "# This function is needed because the data schema is designed so that", "\n", "# each rationale can have its own support label. But, in the dataset,", "\n", "# all rationales for a given claim / abstract pair all have the same", "\n", "# label. So, we store the label at the \"abstract level\" rather than the", "\n", "# \"rationale level\".", "\n", "        ", "res", "=", "{", "}", "\n", "for", "doc_id", ",", "rationales", "in", "evidence_dict", ".", "items", "(", ")", ":", "\n", "            ", "doc_id", "=", "int", "(", "doc_id", ")", "\n", "labels", "=", "[", "x", "[", "\"label\"", "]", "for", "x", "in", "rationales", "]", "\n", "if", "len", "(", "set", "(", "labels", ")", ")", ">", "1", ":", "\n", "                ", "msg", "=", "(", "\"In this SciFact release, each claim / abstract pair \"", "\n", "\"should only have one label.\"", ")", "\n", "raise", "Exception", "(", "msg", ")", "\n", "", "label", "=", "make_label", "(", "labels", "[", "0", "]", ")", "\n", "rationale_sents", "=", "[", "x", "[", "\"sentences\"", "]", "for", "x", "in", "rationales", "]", "\n", "this_abstract", "=", "EvidenceAbstract", "(", "doc_id", ",", "label", ",", "rationale_sents", ")", "\n", "res", "[", "doc_id", "]", "=", "this_abstract", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.Claim.__repr__": [[180, 183], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "msg", "=", "f\"Example {self.id}: {self.claim}\"", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.Claim.pretty_print": [[184, 202], ["data.Claim.__repr__", "print", "print", "data.Claim.evidence.items", "print", "data.Claim.release.corpus.get_document", "print", "enumerate", "print", "print", "enumerate"], "methods", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.ClaimPredictions.__repr__", "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.Corpus.get_document"], ["", "def", "pretty_print", "(", "self", ",", "evidence_doc_id", "=", "None", ",", "file", "=", "None", ")", ":", "\n", "        ", "\"Pretty-print the claim, together with all evidence.\"", "\n", "msg", "=", "self", ".", "__repr__", "(", ")", "\n", "print", "(", "msg", ",", "file", "=", "file", ")", "\n", "# Print the evidence", "\n", "print", "(", "\"\\nEvidence sets:\"", ",", "file", "=", "file", ")", "\n", "for", "doc_id", ",", "evidence", "in", "self", ".", "evidence", ".", "items", "(", ")", ":", "\n", "# If asked for a specific evidence doc, only show that one.", "\n", "            ", "if", "evidence_doc_id", "is", "not", "None", "and", "doc_id", "!=", "evidence_doc_id", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\"\\n\"", "+", "20", "*", "\"#\"", "+", "\"\\n\"", ",", "file", "=", "file", ")", "\n", "ev_doc", "=", "self", ".", "release", ".", "corpus", ".", "get_document", "(", "doc_id", ")", "\n", "print", "(", "f\"{doc_id}: {evidence.label.name}\"", ",", "file", "=", "file", ")", "\n", "for", "i", ",", "sents", "in", "enumerate", "(", "evidence", ".", "rationales", ")", ":", "\n", "                ", "print", "(", "f\"Set {i}:\"", ",", "file", "=", "file", ")", "\n", "kept", "=", "[", "sent", "for", "i", ",", "sent", "in", "enumerate", "(", "ev_doc", ".", "sentences", ")", "if", "i", "in", "sents", "]", "\n", "for", "entry", "in", "kept", ":", "\n", "                    ", "print", "(", "f\"\\t- {entry}\"", ",", "file", "=", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.PredictedDataset.__init__": [[212, 219], ["data.PredictedDataset._read_predictions"], "methods", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.PredictedDataset._read_predictions"], ["def", "__init__", "(", "self", ",", "gold", ",", "prediction_file", ")", ":", "\n", "        ", "\"\"\"\n        Takes a GoldDataset, as well as files with rationale and label\n        predictions.\n        \"\"\"", "\n", "self", ".", "gold", "=", "gold", "\n", "self", ".", "predictions", "=", "self", ".", "_read_predictions", "(", "prediction_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.PredictedDataset.__getitem__": [[220, 222], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "predictions", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.PredictedDataset.__repr__": [[223, 226], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "msg", "=", "f\"Predictions for {len(self.predictions)} claims.\"", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.PredictedDataset._read_predictions": [[227, 236], ["data.load_jsonl", "data.PredictedDataset._parse_prediction", "res.append"], "methods", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.load_jsonl", "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.PredictedDataset._parse_prediction"], ["", "def", "_read_predictions", "(", "self", ",", "prediction_file", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "\n", "predictions", "=", "load_jsonl", "(", "prediction_file", ")", "\n", "for", "pred", "in", "predictions", ":", "\n", "            ", "prediction", "=", "self", ".", "_parse_prediction", "(", "pred", ")", "\n", "res", ".", "append", "(", "prediction", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.PredictedDataset._parse_prediction": [[237, 255], ["predicted_evidence.items", "data.PredictedDataset.gold.get_claim", "data.ClaimPredictions", "data.PredictedAbstract", "int", "data.make_label", "int"], "methods", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.GoldDataset.get_claim", "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.make_label"], ["", "def", "_parse_prediction", "(", "self", ",", "pred_dict", ")", ":", "\n", "        ", "claim_id", "=", "pred_dict", "[", "\"id\"", "]", "\n", "predicted_evidence", "=", "pred_dict", "[", "\"evidence\"", "]", "\n", "\n", "res", "=", "{", "}", "\n", "\n", "# Predictions should never be NEI; there should only be predictions for", "\n", "# the abstracts that contain evidence.", "\n", "for", "key", ",", "this_prediction", "in", "predicted_evidence", ".", "items", "(", ")", ":", "\n", "            ", "label", "=", "this_prediction", "[", "\"label\"", "]", "\n", "evidence", "=", "this_prediction", "[", "\"sentences\"", "]", "\n", "pred", "=", "PredictedAbstract", "(", "int", "(", "key", ")", ",", "\n", "make_label", "(", "label", ",", "allow_NEI", "=", "False", ")", ",", "\n", "evidence", ")", "\n", "res", "[", "int", "(", "key", ")", "]", "=", "pred", "\n", "\n", "", "gold_claim", "=", "self", ".", "gold", ".", "get_claim", "(", "claim_id", ")", "\n", "return", "ClaimPredictions", "(", "claim_id", ",", "res", ",", "gold_claim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.ClaimPredictions.__repr__": [[272, 275], ["None"], "methods", ["None"], ["def", "__repr__", "(", "self", ")", ":", "\n", "        ", "msg", "=", "f\"Predictions for {self.claim_id}: {self.gold.claim}\"", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.ClaimPredictions.pretty_print": [[276, 293], ["data.ClaimPredictions.__repr__", "print", "print", "data.ClaimPredictions.predictions.items", "print", "data.ClaimPredictions.gold.release.corpus.get_document", "print", "print", "enumerate"], "methods", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.ClaimPredictions.__repr__", "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.Corpus.get_document"], ["", "def", "pretty_print", "(", "self", ",", "evidence_doc_id", "=", "None", ",", "file", "=", "None", ")", ":", "\n", "        ", "msg", "=", "self", ".", "__repr__", "(", ")", "\n", "print", "(", "msg", ",", "file", "=", "file", ")", "\n", "# Print the evidence", "\n", "print", "(", "\"\\nEvidence sets:\"", ",", "file", "=", "file", ")", "\n", "for", "doc_id", ",", "prediction", "in", "self", ".", "predictions", ".", "items", "(", ")", ":", "\n", "# If asked for a specific evidence doc, only show that one.", "\n", "            ", "if", "evidence_doc_id", "is", "not", "None", "and", "doc_id", "!=", "evidence_doc_id", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\"\\n\"", "+", "20", "*", "\"#\"", "+", "\"\\n\"", ",", "file", "=", "file", ")", "\n", "ev_doc", "=", "self", ".", "gold", ".", "release", ".", "corpus", ".", "get_document", "(", "doc_id", ")", "\n", "print", "(", "f\"{doc_id}: {prediction.label.name}\"", ",", "file", "=", "file", ")", "\n", "# Print the predicted rationale.", "\n", "sents", "=", "prediction", ".", "rationale", "\n", "kept", "=", "[", "sent", "for", "i", ",", "sent", "in", "enumerate", "(", "ev_doc", ".", "sentences", ")", "if", "i", "in", "sents", "]", "\n", "for", "entry", "in", "kept", ":", "\n", "                ", "print", "(", "f\"\\t- {entry}\"", ",", "file", "=", "file", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.load_jsonl": [[16, 18], ["json.loads", "open"], "function", ["None"], ["def", "load_jsonl", "(", "fname", ")", ":", "\n", "    ", "return", "[", "json", ".", "loads", "(", "line", ")", "for", "line", "in", "open", "(", "fname", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.lib.data.make_label": [[26, 36], ["ValueError"], "function", ["None"], ["", "def", "make_label", "(", "label_str", ",", "allow_NEI", "=", "True", ")", ":", "\n", "    ", "lookup", "=", "{", "\"SUPPORT\"", ":", "Label", ".", "SUPPORTS", ",", "\n", "\"NOT_ENOUGH_INFO\"", ":", "Label", ".", "NEI", ",", "\n", "\"CONTRADICT\"", ":", "Label", ".", "REFUTES", "}", "\n", "\n", "res", "=", "lookup", "[", "label_str", "]", "\n", "if", "(", "not", "allow_NEI", ")", "and", "(", "res", "is", "Label", ".", "NEI", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"An NEI was given.\"", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.training.support_detector.LabelPredictionDataset.__init__": [[34, 91], ["jsonlines.open", "jsonlines.open", "claim[].items", "support_detector.LabelPredictionDataset.samples.append", "random.sample", "support_detector.LabelPredictionDataset.samples.append", "random.sample", "support_detector.LabelPredictionDataset.samples.append", "support_detector.LabelPredictionDataset.samples.append", "[].strip", "set", "[].strip", "range", "[].strip", "int", "[].strip", "sorted", "range", "min", "sorted", "int", "len", "random.randint", "list", "len", "random.randint", "len", "list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "corpus", ":", "str", ",", "claims", ":", "str", ")", ":", "\n", "        ", "self", ".", "samples", "=", "[", "]", "\n", "\n", "corpus", "=", "{", "doc", "[", "'doc_id'", "]", ":", "doc", "for", "doc", "in", "jsonlines", ".", "open", "(", "corpus", ")", "}", "\n", "# three-way classification", "\n", "# label_encodings = {'CONTRADICT': 0, 'NOT_ENOUGH_INFO': 1, 'SUPPORT': 2}", "\n", "\n", "# binary classification: merge CONTRADICT AND NOT_ENOUGH_INFO as 0, SUPPORT as 1.", "\n", "# entailment detection", "\n", "label_encodings", "=", "{", "'CONTRADICT'", ":", "0", ",", "'NOT_ENOUGH_INFO'", ":", "0", ",", "'SUPPORT'", ":", "1", "}", "\n", "\n", "\n", "for", "claim", "in", "jsonlines", ".", "open", "(", "claims", ")", ":", "\n", "            ", "if", "claim", "[", "'evidence'", "]", ":", "\n", "                ", "for", "doc_id", ",", "evidence_sets", "in", "claim", "[", "'evidence'", "]", ".", "items", "(", ")", ":", "\n", "                    ", "doc", "=", "corpus", "[", "int", "(", "doc_id", ")", "]", "\n", "\n", "# Add individual evidence set as samples:", "\n", "for", "evidence_set", "in", "evidence_sets", ":", "\n", "                        ", "rationale", "=", "[", "doc", "[", "'abstract'", "]", "[", "i", "]", ".", "strip", "(", ")", "for", "i", "in", "evidence_set", "[", "'sentences'", "]", "]", "\n", "self", ".", "samples", ".", "append", "(", "{", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'rationale'", ":", "' '", ".", "join", "(", "rationale", ")", ",", "\n", "'label'", ":", "label_encodings", "[", "evidence_set", "[", "'label'", "]", "]", "\n", "}", ")", "\n", "\n", "# Add all evidence sets as positive samples", "\n", "", "rationale_idx", "=", "{", "s", "for", "es", "in", "evidence_sets", "for", "s", "in", "es", "[", "'sentences'", "]", "}", "\n", "rationale_sentences", "=", "[", "doc", "[", "'abstract'", "]", "[", "i", "]", ".", "strip", "(", ")", "for", "i", "in", "sorted", "(", "list", "(", "rationale_idx", ")", ")", "]", "\n", "self", ".", "samples", ".", "append", "(", "{", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'rationale'", ":", "' '", ".", "join", "(", "rationale_sentences", ")", ",", "\n", "'label'", ":", "label_encodings", "[", "evidence_sets", "[", "0", "]", "[", "'label'", "]", "]", "# directly use the first evidence set label", "\n", "# because currently all evidence sets have", "\n", "# the same label", "\n", "}", ")", "\n", "\n", "# Add negative samples", "\n", "non_rationale_idx", "=", "set", "(", "range", "(", "len", "(", "doc", "[", "'abstract'", "]", ")", ")", ")", "-", "rationale_idx", "\n", "non_rationale_idx", "=", "random", ".", "sample", "(", "non_rationale_idx", ",", "\n", "k", "=", "min", "(", "random", ".", "randint", "(", "1", ",", "2", ")", ",", "len", "(", "non_rationale_idx", ")", ")", ")", "\n", "non_rationale_sentences", "=", "[", "doc", "[", "'abstract'", "]", "[", "i", "]", ".", "strip", "(", ")", "for", "i", "in", "sorted", "(", "list", "(", "non_rationale_idx", ")", ")", "]", "\n", "self", ".", "samples", ".", "append", "(", "{", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'rationale'", ":", "' '", ".", "join", "(", "non_rationale_sentences", ")", ",", "\n", "'label'", ":", "label_encodings", "[", "'NOT_ENOUGH_INFO'", "]", "\n", "}", ")", "\n", "", "", "else", ":", "\n", "# Add negative samples", "\n", "                ", "for", "doc_id", "in", "claim", "[", "'cited_doc_ids'", "]", ":", "\n", "                    ", "doc", "=", "corpus", "[", "int", "(", "doc_id", ")", "]", "\n", "non_rationale_idx", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "doc", "[", "'abstract'", "]", ")", ")", ",", "k", "=", "random", ".", "randint", "(", "1", ",", "2", ")", ")", "\n", "non_rationale_sentences", "=", "[", "doc", "[", "'abstract'", "]", "[", "i", "]", ".", "strip", "(", ")", "for", "i", "in", "non_rationale_idx", "]", "\n", "self", ".", "samples", ".", "append", "(", "{", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'rationale'", ":", "' '", ".", "join", "(", "non_rationale_sentences", ")", ",", "\n", "'label'", ":", "label_encodings", "[", "'NOT_ENOUGH_INFO'", "]", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.training.support_detector.LabelPredictionDataset.__len__": [[93, 95], ["len"], "methods", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.training.support_detector.LabelPredictionDataset.__getitem__": [[96, 98], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "samples", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.training.support_detector.encode": [[103, 108], ["tokenizer"], "function", ["None"], ["", "", "def", "encode", "(", "claim", ":", "List", "[", "str", "]", ",", "rationale", ":", "List", "[", "str", "]", ")", ":", "\n", "    ", "encoding", "=", "tokenizer", "(", "claim", ",", "rationale", ",", "padding", "=", "True", ",", "truncation", "=", "True", ",", "max_length", "=", "512", ",", "return_tensors", "=", "\"pt\"", ")", "\n", "input_ids", "=", "encoding", "[", "'input_ids'", "]", "\n", "attention_mask", "=", "encoding", "[", "'attention_mask'", "]", "\n", "return", "input_ids", ",", "attention_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.training.support_detector.evaluate": [[110, 125], ["model.eval", "torch.no_grad", "torch.utils.data.DataLoader", "sklearn.metrics.f1_score", "tuple", "tuple", "tuple", "support_detector.encode", "targets.extend", "outputs.extend", "sklearn.metrics.f1_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "model", "batch[].float().tolist", "logits.argmax().tolist", "input_ids.to", "batch[].float", "logits.argmax"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.inference.baseline.encode"], ["", "def", "evaluate", "(", "model", ",", "dataset", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "targets", "=", "[", "]", "\n", "outputs", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch", "in", "DataLoader", "(", "dataset", ",", "batch_size", "=", "args", ".", "batch_size_gpu", ")", ":", "\n", "            ", "input_ids", ",", "attention_mask", "=", "encode", "(", "batch", "[", "'claim'", "]", ",", "batch", "[", "'rationale'", "]", ")", "\n", "logits", "=", "model", "(", "input_ids", ".", "to", "(", "device", ")", ")", ".", "logits", "\n", "targets", ".", "extend", "(", "batch", "[", "'label'", "]", ".", "float", "(", ")", ".", "tolist", "(", ")", ")", "\n", "outputs", ".", "extend", "(", "logits", ".", "argmax", "(", "dim", "=", "1", ")", ".", "tolist", "(", ")", ")", "\n", "", "", "return", "{", "\n", "'macro_f1'", ":", "f1_score", "(", "targets", ",", "outputs", ",", "zero_division", "=", "0", ",", "average", "=", "'macro'", ")", ",", "\n", "'f1'", ":", "tuple", "(", "f1_score", "(", "targets", ",", "outputs", ",", "zero_division", "=", "0", ",", "average", "=", "None", ")", ")", ",", "\n", "'precision'", ":", "tuple", "(", "precision_score", "(", "targets", ",", "outputs", ",", "zero_division", "=", "0", ",", "average", "=", "None", ")", ")", ",", "\n", "'recall'", ":", "tuple", "(", "recall_score", "(", "targets", ",", "outputs", ",", "zero_division", "=", "0", ",", "average", "=", "None", ")", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.training.neutral_detector.LabelPredictionDataset.__init__": [[34, 91], ["jsonlines.open", "jsonlines.open", "claim[].items", "neutral_detector.LabelPredictionDataset.samples.append", "random.sample", "neutral_detector.LabelPredictionDataset.samples.append", "random.sample", "neutral_detector.LabelPredictionDataset.samples.append", "neutral_detector.LabelPredictionDataset.samples.append", "[].strip", "set", "[].strip", "range", "[].strip", "int", "[].strip", "sorted", "range", "min", "sorted", "int", "len", "random.randint", "list", "len", "random.randint", "len", "list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "corpus", ":", "str", ",", "claims", ":", "str", ")", ":", "\n", "        ", "self", ".", "samples", "=", "[", "]", "\n", "\n", "corpus", "=", "{", "doc", "[", "'doc_id'", "]", ":", "doc", "for", "doc", "in", "jsonlines", ".", "open", "(", "corpus", ")", "}", "\n", "# three-way classification", "\n", "# label_encodings = {'CONTRADICT': 0, 'NOT_ENOUGH_INFO': 1, 'SUPPORT': 2}", "\n", "\n", "# binary classification: merge CONTRADICT and SUPPORT as 0, NOT_ENOUGH_INFO as 1.", "\n", "# unknown detection: detecting the truth value of 'unknown'/'NOT_ENOUGH_INFO", "\n", "label_encodings", "=", "{", "'CONTRADICT'", ":", "0", ",", "'NOT_ENOUGH_INFO'", ":", "1", ",", "'SUPPORT'", ":", "0", "}", "\n", "\n", "\n", "for", "claim", "in", "jsonlines", ".", "open", "(", "claims", ")", ":", "\n", "            ", "if", "claim", "[", "'evidence'", "]", ":", "\n", "                ", "for", "doc_id", ",", "evidence_sets", "in", "claim", "[", "'evidence'", "]", ".", "items", "(", ")", ":", "\n", "                    ", "doc", "=", "corpus", "[", "int", "(", "doc_id", ")", "]", "\n", "\n", "# Add individual evidence set as samples:", "\n", "for", "evidence_set", "in", "evidence_sets", ":", "\n", "                        ", "rationale", "=", "[", "doc", "[", "'abstract'", "]", "[", "i", "]", ".", "strip", "(", ")", "for", "i", "in", "evidence_set", "[", "'sentences'", "]", "]", "\n", "self", ".", "samples", ".", "append", "(", "{", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'rationale'", ":", "' '", ".", "join", "(", "rationale", ")", ",", "\n", "'label'", ":", "label_encodings", "[", "evidence_set", "[", "'label'", "]", "]", "\n", "}", ")", "\n", "\n", "# Add all evidence sets as positive samples", "\n", "", "rationale_idx", "=", "{", "s", "for", "es", "in", "evidence_sets", "for", "s", "in", "es", "[", "'sentences'", "]", "}", "\n", "rationale_sentences", "=", "[", "doc", "[", "'abstract'", "]", "[", "i", "]", ".", "strip", "(", ")", "for", "i", "in", "sorted", "(", "list", "(", "rationale_idx", ")", ")", "]", "\n", "self", ".", "samples", ".", "append", "(", "{", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'rationale'", ":", "' '", ".", "join", "(", "rationale_sentences", ")", ",", "\n", "'label'", ":", "label_encodings", "[", "evidence_sets", "[", "0", "]", "[", "'label'", "]", "]", "# directly use the first evidence set label", "\n", "# because currently all evidence sets have", "\n", "# the same label", "\n", "}", ")", "\n", "\n", "# Add negative samples", "\n", "non_rationale_idx", "=", "set", "(", "range", "(", "len", "(", "doc", "[", "'abstract'", "]", ")", ")", ")", "-", "rationale_idx", "\n", "non_rationale_idx", "=", "random", ".", "sample", "(", "non_rationale_idx", ",", "\n", "k", "=", "min", "(", "random", ".", "randint", "(", "1", ",", "2", ")", ",", "len", "(", "non_rationale_idx", ")", ")", ")", "\n", "non_rationale_sentences", "=", "[", "doc", "[", "'abstract'", "]", "[", "i", "]", ".", "strip", "(", ")", "for", "i", "in", "sorted", "(", "list", "(", "non_rationale_idx", ")", ")", "]", "\n", "self", ".", "samples", ".", "append", "(", "{", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'rationale'", ":", "' '", ".", "join", "(", "non_rationale_sentences", ")", ",", "\n", "'label'", ":", "label_encodings", "[", "'NOT_ENOUGH_INFO'", "]", "\n", "}", ")", "\n", "", "", "else", ":", "\n", "# Add negative samples", "\n", "                ", "for", "doc_id", "in", "claim", "[", "'cited_doc_ids'", "]", ":", "\n", "                    ", "doc", "=", "corpus", "[", "int", "(", "doc_id", ")", "]", "\n", "non_rationale_idx", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "doc", "[", "'abstract'", "]", ")", ")", ",", "k", "=", "random", ".", "randint", "(", "1", ",", "2", ")", ")", "\n", "non_rationale_sentences", "=", "[", "doc", "[", "'abstract'", "]", "[", "i", "]", ".", "strip", "(", ")", "for", "i", "in", "non_rationale_idx", "]", "\n", "self", ".", "samples", ".", "append", "(", "{", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'rationale'", ":", "' '", ".", "join", "(", "non_rationale_sentences", ")", ",", "\n", "'label'", ":", "label_encodings", "[", "'NOT_ENOUGH_INFO'", "]", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.training.neutral_detector.LabelPredictionDataset.__len__": [[93, 95], ["len"], "methods", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.training.neutral_detector.LabelPredictionDataset.__getitem__": [[96, 98], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "samples", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.training.neutral_detector.encode": [[103, 108], ["tokenizer"], "function", ["None"], ["", "", "def", "encode", "(", "claim", ":", "List", "[", "str", "]", ",", "rationale", ":", "List", "[", "str", "]", ")", ":", "\n", "    ", "encoding", "=", "tokenizer", "(", "claim", ",", "rationale", ",", "padding", "=", "True", ",", "truncation", "=", "True", ",", "max_length", "=", "512", ",", "return_tensors", "=", "\"pt\"", ")", "\n", "input_ids", "=", "encoding", "[", "'input_ids'", "]", "\n", "attention_mask", "=", "encoding", "[", "'attention_mask'", "]", "\n", "return", "input_ids", ",", "attention_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.training.neutral_detector.evaluate": [[110, 125], ["model.eval", "torch.no_grad", "torch.utils.data.DataLoader", "sklearn.metrics.f1_score", "tuple", "tuple", "tuple", "neutral_detector.encode", "targets.extend", "outputs.extend", "sklearn.metrics.f1_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "model", "batch[].float().tolist", "logits.argmax().tolist", "input_ids.to", "batch[].float", "logits.argmax"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.inference.baseline.encode"], ["", "def", "evaluate", "(", "model", ",", "dataset", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "targets", "=", "[", "]", "\n", "outputs", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch", "in", "DataLoader", "(", "dataset", ",", "batch_size", "=", "args", ".", "batch_size_gpu", ")", ":", "\n", "            ", "input_ids", ",", "attention_mask", "=", "encode", "(", "batch", "[", "'claim'", "]", ",", "batch", "[", "'rationale'", "]", ")", "\n", "logits", "=", "model", "(", "input_ids", ".", "to", "(", "device", ")", ")", ".", "logits", "\n", "targets", ".", "extend", "(", "batch", "[", "'label'", "]", ".", "float", "(", ")", ".", "tolist", "(", ")", ")", "\n", "outputs", ".", "extend", "(", "logits", ".", "argmax", "(", "dim", "=", "1", ")", ".", "tolist", "(", ")", ")", "\n", "", "", "return", "{", "\n", "'macro_f1'", ":", "f1_score", "(", "targets", ",", "outputs", ",", "zero_division", "=", "0", ",", "average", "=", "'macro'", ")", ",", "\n", "'f1'", ":", "tuple", "(", "f1_score", "(", "targets", ",", "outputs", ",", "zero_division", "=", "0", ",", "average", "=", "None", ")", ")", ",", "\n", "'precision'", ":", "tuple", "(", "precision_score", "(", "targets", ",", "outputs", ",", "zero_division", "=", "0", ",", "average", "=", "None", ")", ")", ",", "\n", "'recall'", ":", "tuple", "(", "recall_score", "(", "targets", ",", "outputs", ",", "zero_division", "=", "0", ",", "average", "=", "None", ")", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.training.baseline.SciFactLabelPredictionDataset.__init__": [[31, 82], ["jsonlines.open", "jsonlines.open", "claim[].items", "baseline.SciFactLabelPredictionDataset.samples.append", "random.sample", "baseline.SciFactLabelPredictionDataset.samples.append", "random.sample", "baseline.SciFactLabelPredictionDataset.samples.append", "baseline.SciFactLabelPredictionDataset.samples.append", "[].strip", "set", "[].strip", "range", "[].strip", "int", "[].strip", "sorted", "range", "min", "sorted", "int", "len", "random.randint", "list", "len", "random.randint", "len", "list"], "methods", ["None"], ["class", "SciFactRationaleSelectionDataset", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "corpus", ":", "str", ",", "claims", ":", "str", ")", ":", "\n", "        ", "self", ".", "samples", "=", "[", "]", "\n", "corpus", "=", "{", "doc", "[", "'doc_id'", "]", ":", "doc", "for", "doc", "in", "jsonlines", ".", "open", "(", "corpus", ")", "}", "\n", "for", "claim", "in", "jsonlines", ".", "open", "(", "claims", ")", ":", "\n", "            ", "for", "doc_id", ",", "evidence", "in", "claim", "[", "'evidence'", "]", ".", "items", "(", ")", ":", "\n", "                ", "doc", "=", "corpus", "[", "int", "(", "doc_id", ")", "]", "\n", "evidence_sentence_idx", "=", "{", "s", "for", "es", "in", "evidence", "for", "s", "in", "es", "[", "'sentences'", "]", "}", "\n", "for", "i", ",", "sentence", "in", "enumerate", "(", "doc", "[", "'abstract'", "]", ")", ":", "\n", "                    ", "self", ".", "samples", ".", "append", "(", "{", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'sentence'", ":", "sentence", ",", "\n", "'evidence'", ":", "i", "in", "evidence_sentence_idx", "\n", "}", ")", "\n", "\n", "", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "samples", "[", "idx", "]", "\n", "\n", "\n", "", "", "trainset", "=", "SciFactRationaleSelectionDataset", "(", "args", ".", "corpus", ",", "args", ".", "claim_train", ")", "\n", "devset", "=", "SciFactRationaleSelectionDataset", "(", "args", ".", "corpus", ",", "args", ".", "claim_dev", ")", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "args", ".", "model", ")", "\n", "model", "=", "AutoModelForSequenceClassification", ".", "from_pretrained", "(", "args", ".", "model", ")", ".", "to", "(", "device", ")", "\n", "# model base are either bert or roberta", "\n", "if", "args", ".", "model_base", "==", "'bert'", ":", "\n", "    ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "\n", "{", "'params'", ":", "model", ".", "bert", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr_base", "}", ",", "\n", "{", "'params'", ":", "model", ".", "classifier", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr_linear", "}", "\n", "]", ")", "\n", "", "elif", "args", ".", "model_base", "==", "'roberta'", ":", "\n", "    ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "\n", "{", "'params'", ":", "model", ".", "roberta", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr_base", "}", ",", "\n", "{", "'params'", ":", "model", ".", "classifier", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr_linear", "}", "\n", "]", ")", "\n", "\n", "", "scheduler", "=", "get_cosine_schedule_with_warmup", "(", "optimizer", ",", "0", ",", "20", ")", "\n", "\n", "\n", "def", "encode", "(", "claims", ":", "List", "[", "str", "]", ",", "sentences", ":", "List", "[", "str", "]", ")", ":", "\n", "    ", "encoded_dict", "=", "tokenizer", ".", "batch_encode_plus", "(", "\n", "zip", "(", "sentences", ",", "claims", ")", ",", "\n", "pad_to_max_length", "=", "True", ",", "\n", "return_tensors", "=", "'pt'", ")", "\n", "if", "encoded_dict", "[", "'input_ids'", "]", ".", "size", "(", "1", ")", ">", "512", ":", "\n", "# Too long for the model. Truncate it", "\n", "        ", "encoded_dict", "=", "tokenizer", ".", "batch_encode_plus", "(", "\n", "zip", "(", "sentences", ",", "claims", ")", ",", "\n", "max_length", "=", "512", ",", "\n", "truncation_strategy", "=", "'only_first'", ",", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.training.baseline.SciFactLabelPredictionDataset.__len__": [[84, 86], ["len"], "methods", ["None"], ["return_tensors", "=", "'pt'", ")", "\n", "", "encoded_dict", "=", "{", "key", ":", "tensor", ".", "to", "(", "device", ")", "for", "key", ",", "tensor", "in", "encoded_dict", ".", "items", "(", ")", "}", "\n", "return", "encoded_dict", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.training.baseline.SciFactLabelPredictionDataset.__getitem__": [[87, 89], ["None"], "methods", ["None"], ["\n", "\n", "", "def", "evaluate", "(", "model", ",", "dataset", ")", ":", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.training.baseline.encode": [[105, 120], ["tokenizer.batch_encode_plus", "zip", "encoded_dict[].size", "tokenizer.batch_encode_plus", "tensor.to", "zip", "tokenizer.batch_encode_plus.items"], "function", ["None"], ["    ", "model", ".", "train", "(", ")", "\n", "t", "=", "tqdm", "(", "DataLoader", "(", "trainset", ",", "batch_size", "=", "args", ".", "batch_size_gpu", ",", "shuffle", "=", "True", ")", ")", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "t", ")", ":", "\n", "        ", "encoded_dict", "=", "encode", "(", "batch", "[", "'claim'", "]", ",", "batch", "[", "'sentence'", "]", ")", "\n", "loss", ",", "logits", "=", "model", "(", "**", "encoded_dict", ",", "labels", "=", "batch", "[", "'evidence'", "]", ".", "long", "(", ")", ".", "to", "(", "device", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "(", "i", "+", "1", ")", "%", "(", "args", ".", "batch_size_accumulated", "//", "args", ".", "batch_size_gpu", ")", "==", "0", ":", "\n", "            ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "t", ".", "set_description", "(", "f'Epoch {e}, iter {i}, loss: {round(loss.item(), 4)}'", ")", "\n", "", "", "scheduler", ".", "step", "(", ")", "\n", "train_score", "=", "evaluate", "(", "model", ",", "trainset", ")", "\n", "print", "(", "f'Epoch {e}, train f1: %.4f, precision: %.4f, recall: %.4f'", "%", "train_score", ")", "\n", "dev_score", "=", "evaluate", "(", "model", ",", "devset", ")", "\n", "print", "(", "f'Epoch {e}, dev f1: %.4f, precision: %.4f, recall: %.4f'", "%", "dev_score", ")", "\n", "# Save", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.training.baseline.evaluate": [[122, 137], ["model.eval", "torch.no_grad", "torch.utils.data.DataLoader", "sklearn.metrics.f1_score", "tuple", "tuple", "tuple", "baseline.encode", "targets.extend", "outputs.extend", "sklearn.metrics.f1_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "model", "batch[].float().tolist", "logits.argmax().tolist", "batch[].float", "logits.argmax"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.inference.baseline.encode"], ["os", ".", "makedirs", "(", "save_path", ")", "\n", "tokenizer", ".", "save_pretrained", "(", "save_path", ")", "\n", "model", ".", "save_pretrained", "(", "save_path", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.inference.two-step.neutral": [[30, 51], ["model.eval", "two-step.neutral.predict"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.abstract_retrieval.classifier.predict"], ["def", "neutral", "(", "evidence", ",", "claim", ",", "tokenizer", ",", "model", ")", ":", "\n", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "def", "encode", "(", "claim", ",", "rationale", ")", ":", "\n", "        ", "encoding", "=", "tokenizer", "(", "claim", ",", "rationale", ",", "padding", "=", "True", ",", "truncation", "=", "True", ",", "max_length", "=", "512", ",", "return_tensors", "=", "\"pt\"", ")", "\n", "input_ids", "=", "encoding", "[", "'input_ids'", "]", "\n", "attention_mask", "=", "encoding", "[", "'attention_mask'", "]", "\n", "return", "input_ids", ",", "attention_mask", "\n", "\n", "", "def", "predict", "(", "model", ",", "evidence", ",", "claim", ")", ":", "\n", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "input_ids", ",", "attention_mask", "=", "encode", "(", "claim", ",", "evidence", ")", "\n", "logits", "=", "model", "(", "input_ids", ".", "to", "(", "device", ")", ")", ".", "logits", "\n", "output", "=", "logits", ".", "argmax", "(", "dim", "=", "1", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "\n", "", "return", "output", "\n", "\n", "", "return", "predict", "(", "model", ",", "evidence", ",", "claim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.inference.two-step.support": [[52, 72], ["model.eval", "two-step.neutral.predict"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.abstract_retrieval.classifier.predict"], ["", "def", "support", "(", "evidence", ",", "claim", ",", "tokenizer", ",", "model", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "def", "encode", "(", "claim", ",", "rationale", ")", ":", "\n", "        ", "encoding", "=", "tokenizer", "(", "claim", ",", "rationale", ",", "padding", "=", "True", ",", "truncation", "=", "True", ",", "max_length", "=", "512", ",", "return_tensors", "=", "\"pt\"", ")", "\n", "input_ids", "=", "encoding", "[", "'input_ids'", "]", "\n", "attention_mask", "=", "encoding", "[", "'attention_mask'", "]", "\n", "return", "input_ids", ",", "attention_mask", "\n", "\n", "", "def", "predict", "(", "model", ",", "evidence", ",", "claim", ")", ":", "\n", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "input_ids", ",", "attention_mask", "=", "encode", "(", "claim", ",", "evidence", ")", "\n", "logits", "=", "model", "(", "input_ids", ".", "to", "(", "device", ")", ")", ".", "logits", "\n", "output", "=", "logits", ".", "argmax", "(", "dim", "=", "1", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "\n", "", "return", "output", "\n", "\n", "", "return", "predict", "(", "model", ",", "evidence", ",", "claim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.inference.two-step.detect": [[75, 91], ["two-step.neutral", "two-step.support"], "function", ["home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.inference.two-step.neutral", "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.inference.two-step.support"], ["", "def", "detect", "(", "evidence", ",", "claim", ",", "tokenizer_n", ",", "model_n", ",", "tokenizer_e", ",", "model_e", ")", ":", "\n", "\n", "# first step", "\n", "# predicting neutral or not", "\n", "    ", "first", "=", "neutral", "(", "evidence", ",", "claim", ",", "tokenizer_n", ",", "model_n", ")", "\n", "\n", "if", "first", "==", "1", ":", "\n", "        ", "final", "=", "1", "\n", "", "else", ":", "\n", "#predicting support or not", "\n", "        ", "second", "=", "support", "(", "evidence", ",", "claim", ",", "tokenizer_e", ",", "model_e", ")", "\n", "if", "second", "==", "0", ":", "\n", "            ", "final", "=", "0", "\n", "", "elif", "second", "==", "1", ":", "\n", "            ", "final", "=", "2", "\n", "", "", "return", "final", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaZeng0223_sciverbinary.inference.baseline.encode": [[33, 55], ["tokenizer.batch_encode_plus", "encoded_dict[].size", "tokenizer.batch_encode_plus", "tensor.to", "list", "tokenizer.batch_encode_plus.items", "zip"], "function", ["None"], ["        ", "self", ".", "samples", "=", "[", "]", "\n", "corpus", "=", "{", "doc", "[", "'doc_id'", "]", ":", "doc", "for", "doc", "in", "jsonlines", ".", "open", "(", "corpus", ")", "}", "\n", "for", "claim", "in", "jsonlines", ".", "open", "(", "claims", ")", ":", "\n", "            ", "for", "doc_id", ",", "evidence", "in", "claim", "[", "'evidence'", "]", ".", "items", "(", ")", ":", "\n", "                ", "doc", "=", "corpus", "[", "int", "(", "doc_id", ")", "]", "\n", "evidence_sentence_idx", "=", "{", "s", "for", "es", "in", "evidence", "for", "s", "in", "es", "[", "'sentences'", "]", "}", "\n", "for", "i", ",", "sentence", "in", "enumerate", "(", "doc", "[", "'abstract'", "]", ")", ":", "\n", "                    ", "self", ".", "samples", ".", "append", "(", "{", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'sentence'", ":", "sentence", ",", "\n", "'evidence'", ":", "i", "in", "evidence_sentence_idx", "\n", "}", ")", "\n", "\n", "", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "samples", "[", "idx", "]", "\n", "\n", "\n", "", "", "trainset", "=", "SciFactRationaleSelectionDataset", "(", "args", ".", "corpus", ",", "args", ".", "claim_train", ")", "\n", "devset", "=", "SciFactRationaleSelectionDataset", "(", "args", ".", "corpus", ",", "args", ".", "claim_dev", ")", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "args", ".", "model", ")", "\n"]]}