{"home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.beijing_air_2_5.Beijing_Air_Quality_2_5_Download.download_file_from_google_drive": [[3, 16], ["requests.Session", "requests.Session.get", "Beijing_Air_Quality_2_5_Download.get_confirm_token", "Beijing_Air_Quality_2_5_Download.save_response_content", "requests.Session.get"], "function", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.metro_interstate.Metro_Interstate_Download.get_confirm_token", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.metro_interstate.Metro_Interstate_Download.save_response_content"], ["def", "download_file_from_google_drive", "(", "id", ",", "destination", ")", ":", "\n", "    ", "URL", "=", "'https://docs.google.com/uc?export=download'", "\n", "\n", "session", "=", "requests", ".", "Session", "(", ")", "\n", "\n", "response", "=", "session", ".", "get", "(", "URL", ",", "params", "=", "{", "'id'", ":", "id", "}", ",", "stream", "=", "True", ")", "\n", "token", "=", "get_confirm_token", "(", "response", ")", "\n", "\n", "if", "token", ":", "\n", "        ", "params", "=", "{", "'id'", ":", "id", ",", "'confirm'", ":", "token", "}", "\n", "response", "=", "session", ".", "get", "(", "URL", ",", "params", "=", "params", ",", "stream", "=", "True", ")", "\n", "\n", "", "save_response_content", "(", "response", ",", "destination", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.beijing_air_2_5.Beijing_Air_Quality_2_5_Download.get_confirm_token": [[18, 24], ["response.cookies.items", "key.startswith"], "function", ["None"], ["", "def", "get_confirm_token", "(", "response", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "response", ".", "cookies", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "'download_warning'", ")", ":", "\n", "            ", "return", "value", "\n", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.beijing_air_2_5.Beijing_Air_Quality_2_5_Download.save_response_content": [[26, 33], ["open", "response.iter_content", "f.write"], "function", ["None"], ["", "def", "save_response_content", "(", "response", ",", "destination", ")", ":", "\n", "    ", "CHUNK_SIZE", "=", "32768", "\n", "\n", "with", "open", "(", "destination", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "for", "chunk", "in", "response", ".", "iter_content", "(", "CHUNK_SIZE", ")", ":", "\n", "            ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                ", "f", ".", "write", "(", "chunk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.beijing_air_multi_site.Beijing_Air_Quality_Multi_Site_Download.download_file_from_google_drive": [[3, 16], ["requests.Session", "requests.Session.get", "Beijing_Air_Quality_Multi_Site_Download.get_confirm_token", "Beijing_Air_Quality_Multi_Site_Download.save_response_content", "requests.Session.get"], "function", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.metro_interstate.Metro_Interstate_Download.get_confirm_token", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.metro_interstate.Metro_Interstate_Download.save_response_content"], ["def", "download_file_from_google_drive", "(", "id", ",", "destination", ")", ":", "\n", "    ", "URL", "=", "'https://docs.google.com/uc?export=download'", "\n", "\n", "session", "=", "requests", ".", "Session", "(", ")", "\n", "\n", "response", "=", "session", ".", "get", "(", "URL", ",", "params", "=", "{", "'id'", ":", "id", "}", ",", "stream", "=", "True", ")", "\n", "token", "=", "get_confirm_token", "(", "response", ")", "\n", "\n", "if", "token", ":", "\n", "        ", "params", "=", "{", "'id'", ":", "id", ",", "'confirm'", ":", "token", "}", "\n", "response", "=", "session", ".", "get", "(", "URL", ",", "params", "=", "params", ",", "stream", "=", "True", ")", "\n", "\n", "", "save_response_content", "(", "response", ",", "destination", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.beijing_air_multi_site.Beijing_Air_Quality_Multi_Site_Download.get_confirm_token": [[18, 24], ["response.cookies.items", "key.startswith"], "function", ["None"], ["", "def", "get_confirm_token", "(", "response", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "response", ".", "cookies", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "'download_warning'", ")", ":", "\n", "            ", "return", "value", "\n", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.beijing_air_multi_site.Beijing_Air_Quality_Multi_Site_Download.save_response_content": [[26, 33], ["open", "response.iter_content", "f.write"], "function", ["None"], ["", "def", "save_response_content", "(", "response", ",", "destination", ")", ":", "\n", "    ", "CHUNK_SIZE", "=", "32768", "\n", "\n", "with", "open", "(", "destination", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "for", "chunk", "in", "response", ".", "iter_content", "(", "CHUNK_SIZE", ")", ":", "\n", "            ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                ", "f", ".", "write", "(", "chunk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.metro_interstate.Metro_Interstate_Download.download_file_from_google_drive": [[4, 17], ["requests.Session", "requests.Session.get", "Metro_Interstate_Download.get_confirm_token", "Metro_Interstate_Download.save_response_content", "requests.Session.get"], "function", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.metro_interstate.Metro_Interstate_Download.get_confirm_token", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.metro_interstate.Metro_Interstate_Download.save_response_content"], ["def", "download_file_from_google_drive", "(", "id", ",", "destination", ")", ":", "\n", "    ", "URL", "=", "'https://docs.google.com/uc?export=download'", "\n", "\n", "session", "=", "requests", ".", "Session", "(", ")", "\n", "\n", "response", "=", "session", ".", "get", "(", "URL", ",", "params", "=", "{", "'id'", ":", "id", "}", ",", "stream", "=", "True", ")", "\n", "token", "=", "get_confirm_token", "(", "response", ")", "\n", "\n", "if", "token", ":", "\n", "        ", "params", "=", "{", "'id'", ":", "id", ",", "'confirm'", ":", "token", "}", "\n", "response", "=", "session", ".", "get", "(", "URL", ",", "params", "=", "params", ",", "stream", "=", "True", ")", "\n", "\n", "", "save_response_content", "(", "response", ",", "destination", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.metro_interstate.Metro_Interstate_Download.get_confirm_token": [[19, 25], ["response.cookies.items", "key.startswith"], "function", ["None"], ["", "def", "get_confirm_token", "(", "response", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "response", ".", "cookies", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "'download_warning'", ")", ":", "\n", "            ", "return", "value", "\n", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.metro_interstate.Metro_Interstate_Download.save_response_content": [[27, 34], ["open", "response.iter_content", "f.write"], "function", ["None"], ["", "def", "save_response_content", "(", "response", ",", "destination", ")", ":", "\n", "    ", "CHUNK_SIZE", "=", "32768", "\n", "\n", "with", "open", "(", "destination", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "for", "chunk", "in", "response", ".", "iter_content", "(", "CHUNK_SIZE", ")", ":", "\n", "            ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                ", "f", ".", "write", "(", "chunk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.tests.test_evaluation.test_mask_percentile": [[17, 24], ["tsmule.xai.evaluation.PerturbationAnalysis", "tsmule.xai.evaluation.PerturbationAnalysis.mask_percentile", "numpy.array", "numpy.array_equal"], "function", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationBase.mask_percentile"], ["def", "test_mask_percentile", "(", ")", ":", "\n", "    ", "pa", "=", "PerturbationAnalysis", "(", ")", "\n", "m", "=", "pa", ".", "mask_percentile", "(", "ts", ",", "percentile", "=", "90", ")", "\n", "assert", "m", ".", "shape", "==", "ts", ".", "shape", "\n", "\n", "expected", "=", "np", ".", "array", "(", "[", "[", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "]", ")", "\n", "assert", "np", ".", "array_equal", "(", "m", ".", "T", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.tests.test_evaluation.test_mask_randomize": [[26, 49], ["tsmule.xai.evaluation.PerturbationAnalysis", "tsmule.xai.evaluation.PerturbationAnalysis.mask_randomize", "all", "tsmule.xai.evaluation.PerturbationAnalysis.mask_randomize", "numpy.ceil().astype", "all", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationBase.mask_randomize", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationBase.mask_randomize"], ["", "def", "test_mask_randomize", "(", ")", ":", "\n", "    ", "pa", "=", "PerturbationAnalysis", "(", ")", "\n", "# UTS", "\n", "x", "=", "ts", "\n", "m", "=", "pa", ".", "mask_randomize", "(", "x", ",", "percentile", "=", "90", ",", "delta", "=", "0.1", ")", "\n", "assert", "m", ".", "shape", "==", "x", ".", "shape", "\n", "\n", "n_steps", ",", "_", "=", "x", ".", "shape", "\n", "n_offs", "=", "(", "m", "==", "0", ")", ".", "sum", "(", "axis", "=", "0", ")", "\n", "p_offs", "=", "n_offs", "/", "n_steps", "\n", "assert", "all", "(", "p_offs", "<", "0.50", ")", "\n", "\n", "# MTS", "\n", "x", "=", "mts", "\n", "m", "=", "pa", ".", "mask_randomize", "(", "x", ",", "percentile", "=", "90", ",", "delta", "=", "0.1", ")", "\n", "assert", "m", ".", "shape", "==", "x", ".", "shape", "\n", "\n", "n_steps", ",", "_", "=", "x", ".", "shape", "\n", "n_offs", "=", "(", "m", "==", "0", ")", ".", "sum", "(", "axis", "=", "0", ")", "\n", "n_offs", "=", "(", "np", ".", "ceil", "(", "n_offs", "*", "(", "1", "+", "0.1", ")", ")", ")", ".", "astype", "(", "int", ")", "\n", "\n", "p_offs", "=", "n_offs", "/", "n_steps", "\n", "assert", "all", "(", "p_offs", "<", "0.50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.tests.test_evaluation.test_analysis_relevance": [[51, 74], ["tsmule.xai.lime.LimeTS", "tsmule.xai.evaluation.PerturbationAnalysis", "tsmule.xai.evaluation.PerturbationAnalysis.analysis_relevance", "all", "all", "numpy.array", "tsmule.xai.lime.LimeTS.explain", "tsmule.xai.evaluation.PerturbationAnalysis.insights.keys"], "function", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationAnalysis.analysis_relevance", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.lime.LimeBase.explain"], ["", "def", "test_analysis_relevance", "(", ")", ":", "\n", "    ", "X", "=", "[", "mts", ",", "mts", ",", "mts", "]", "\n", "y", "=", "[", "1", ",", "2", ",", "3", "]", "\n", "\n", "def", "predict_", "(", "x", ")", ":", "\n", "        ", "return", "1", "\n", "\n", "", "def", "predict_fn_x", "(", "X", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "1", "for", "x", "in", "X", "]", ")", "\n", "\n", "", "def", "eval_fn", "(", "y1", ",", "y2", ")", ":", "\n", "        ", "return", "1", "\n", "\n", "", "explainer", "=", "LimeTS", "(", ")", "\n", "relevance", "=", "[", "explainer", ".", "explain", "(", "x", ",", "predict_", ")", "for", "x", "in", "X", "]", "\n", "\n", "pa", "=", "PerturbationAnalysis", "(", ")", "\n", "pa", ".", "analysis_relevance", "(", "X", ",", "y", ",", "relevance", ",", "\n", "predict_fn", "=", "predict_fn_x", ",", "\n", "eval_fn", "=", "eval_fn", ")", "\n", "keys", "=", "[", "'original'", ",", "'percentile'", ",", "'random'", "]", "\n", "assert", "all", "(", "k", "in", "pa", ".", "insights", ".", "keys", "(", ")", "for", "k", "in", "keys", ")", "\n", "assert", "all", "(", "[", "pa", ".", "insights", "[", "k", "]", "==", "1", "for", "k", "in", "keys", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.tests.test_evaluation.test_analysis_relevance_mean": [[76, 109], ["tsmule.xai.lime.LimeTS", "tsmule.xai.evaluation.PerturbationAnalysis", "tsmule.xai.evaluation.PerturbationAnalysis.analysis_relevance", "all", "all", "tsmule.xai.evaluation.PerturbationAnalysis", "tsmule.xai.evaluation.PerturbationAnalysis.analysis_relevance", "all", "all", "numpy.array", "tsmule.xai.lime.LimeTS.explain", "tsmule.xai.evaluation.PerturbationAnalysis.insights.keys", "tsmule.xai.evaluation.PerturbationAnalysis.insights.keys"], "function", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationAnalysis.analysis_relevance", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationAnalysis.analysis_relevance", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.lime.LimeBase.explain"], ["", "def", "test_analysis_relevance_mean", "(", ")", ":", "\n", "    ", "X", "=", "[", "mts", ",", "mts", ",", "mts", "]", "\n", "y", "=", "[", "1", ",", "2", ",", "3", "]", "\n", "\n", "def", "predict_", "(", "x", ")", ":", "\n", "        ", "return", "1", "\n", "\n", "", "def", "predict_fn_x", "(", "X", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "1", "for", "x", "in", "X", "]", ")", "\n", "\n", "", "def", "eval_fn", "(", "y1", ",", "y2", ")", ":", "\n", "        ", "return", "1", "\n", "\n", "", "explainer", "=", "LimeTS", "(", ")", "\n", "relevance", "=", "[", "explainer", ".", "explain", "(", "x", ",", "predict_", ")", "for", "x", "in", "X", "]", "\n", "\n", "pa", "=", "PerturbationAnalysis", "(", ")", "\n", "pa", ".", "analysis_relevance", "(", "X", ",", "y", ",", "relevance", ",", "\n", "predict_fn", "=", "predict_fn_x", ",", "\n", "replace_method", "=", "\"local_mean\"", ",", "\n", "eval_fn", "=", "eval_fn", ")", "\n", "keys", "=", "[", "'original'", ",", "'percentile'", ",", "'random'", "]", "\n", "assert", "all", "(", "k", "in", "pa", ".", "insights", ".", "keys", "(", ")", "for", "k", "in", "keys", ")", "\n", "assert", "all", "(", "[", "pa", ".", "insights", "[", "k", "]", "==", "1", "for", "k", "in", "keys", "]", ")", "\n", "\n", "pa", "=", "PerturbationAnalysis", "(", ")", "\n", "pa", ".", "analysis_relevance", "(", "X", ",", "y", ",", "relevance", ",", "\n", "predict_fn", "=", "predict_fn_x", ",", "\n", "replace_method", "=", "\"global_mean\"", ",", "\n", "eval_fn", "=", "eval_fn", ")", "\n", "keys", "=", "[", "'original'", ",", "'percentile'", ",", "'random'", "]", "\n", "assert", "all", "(", "k", "in", "pa", ".", "insights", ".", "keys", "(", ")", "for", "k", "in", "keys", ")", "\n", "assert", "all", "(", "[", "pa", ".", "insights", "[", "k", "]", "==", "1", "for", "k", "in", "keys", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.tests.test_evaluation.test_analysis_relevance_manual": [[111, 143], ["pytest.mark.skip", "keras.models.load_model", "tsmule.xai.lime.LimeTS", "tsmule.xai.evaluation.PerturbationAnalysis", "tsmule.xai.evaluation.PerturbationAnalysis.analysis_relevance", "open", "dill.load", "tsmule.xai.lime.LimeTS.explain", "len", "keras.models.load_model.predict().ravel", "len", "keras.models.load_model.predict().ravel", "keras.models.load_model.predict", "keras.models.load_model.predict"], "function", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationAnalysis.analysis_relevance", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.lime.LimeBase.explain"], ["", "@", "pytest", ".", "mark", ".", "skip", "(", "\"Manuel Test\"", ")", "\n", "def", "test_analysis_relevance_manual", "(", ")", ":", "\n", "    ", "import", "dill", "\n", "from", "sklearn", "import", "metrics", "\n", "from", "tensorflow", "import", "keras", "\n", "\n", "data_dir", "=", "\"demo/beijing_air_2_5\"", "\n", "cnn_model", "=", "keras", ".", "models", ".", "load_model", "(", "\n", "f'{data_dir}/beijing_air_2_5_cnn_model.h5'", ")", "\n", "with", "open", "(", "f'{data_dir}/beijing_air_2_5_test_data.dill'", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "dataset_test", "=", "dill", ".", "load", "(", "f", ")", "\n", "\n", "# Define a predict fn/model", "\n", "", "def", "predict_", "(", "x", ")", ":", "\n", "        ", "if", "len", "(", "x", ".", "shape", ")", "==", "2", ":", "\n", "            ", "predictions", "=", "cnn_model", ".", "predict", "(", "x", "[", "np", ".", "newaxis", "]", ")", ".", "ravel", "(", ")", "\n", "", "if", "len", "(", "x", ".", "shape", ")", "==", "3", ":", "\n", "            ", "predictions", "=", "cnn_model", ".", "predict", "(", "X", ")", ".", "ravel", "(", ")", "\n", "", "return", "predictions", "\n", "\n", "# Get test set", "\n", "", "X", "=", "dataset_test", "[", "0", "]", "[", ":", "10", "]", "\n", "y", "=", "dataset_test", "[", "1", "]", "[", ":", "10", "]", "\n", "explainer", "=", "LimeTS", "(", ")", "\n", "relevance", "=", "[", "explainer", ".", "explain", "(", "\n", "x", ",", "predict_", ",", "segmentation_method", "=", "\"slopes-max\"", ")", "for", "x", "in", "X", "]", "\n", "\n", "pa", "=", "PerturbationAnalysis", "(", "replace_method", "=", "'zeros'", ")", "\n", "scores", "=", "pa", ".", "analysis_relevance", "(", "X", ",", "y", ",", "relevance", ",", "\n", "predict_fn", "=", "cnn_model", ".", "predict", ",", "\n", "eval_fn", "=", "metrics", ".", "mean_squared_error", ")", "\n", "scores", "\n", "", ""]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.tests.test_pertubation.test_get_segment_mask": [[15, 17], ["None"], "function", ["None"], ["def", "test_get_segment_mask", "(", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.tests.test_pertubation.test_get_sample": [[19, 21], ["None"], "function", ["None"], ["", "def", "test_get_sample", "(", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.tests.test_pertubation.test_pertub": [[23, 35], ["tsmule.sampling.perturb.Perturbation", "tsmule.sampling.perturb.Perturbation.get_samples", "next", "tsmule.sampling.perturb.Perturbation", "tsmule.sampling.perturb.Perturbation.get_samples", "next", "len", "len"], "function", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.perturb.Perturbation.get_samples", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.perturb.Perturbation.get_samples"], ["", "def", "test_pertub", "(", ")", ":", "\n", "    ", "sampler", "=", "Perturbation", "(", ")", "\n", "samples", "=", "sampler", ".", "get_samples", "(", "ts", ",", "segm_ts", ")", "\n", "x", ",", "z_prime", ",", "pi", "=", "next", "(", "samples", ")", "\n", "\n", "assert", "pi", "<", "1", "and", "len", "(", "z_prime", ".", "shape", ")", "==", "1", "and", "x", ".", "shape", "==", "ts", ".", "shape", "\n", "\n", "sampler", "=", "Perturbation", "(", ")", "\n", "samples", "=", "sampler", ".", "get_samples", "(", "mts", ",", "segm_mts", ")", "\n", "x", ",", "z_prime", ",", "pi", "=", "next", "(", "samples", ")", "\n", "\n", "assert", "pi", "<", "1", "and", "len", "(", "z_prime", ".", "shape", ")", "==", "1", "and", "x", ".", "shape", "==", "mts", ".", "shape", "\n", "", ""]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.tests.test_lime.test_samples_unpack": [[18, 38], ["tsmule.sampling.perturb.Perturbation", "tsmule.sampling.perturb.Perturbation.get_samples", "list", "isinstance", "tsmule.sampling.perturb.Perturbation.get_samples", "list", "isinstance", "zip", "len", "len", "len", "zip", "len", "len", "len", "numpy.unique", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.perturb.Perturbation.get_samples", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.perturb.Perturbation.get_samples"], ["def", "test_samples_unpack", "(", ")", ":", "\n", "    ", "sampler", "=", "Perturbation", "(", ")", "\n", "\n", "# UTS", "\n", "samples", "=", "sampler", ".", "get_samples", "(", "ts", ",", "segm_ts", ",", "n_samples", "=", "100", ")", "\n", "new_x", ",", "z_prime", ",", "pi", "=", "list", "(", "zip", "(", "*", "samples", ")", ")", "\n", "\n", "assert", "(", "len", "(", "new_x", ")", "==", "len", "(", "z_prime", ")", "==", "len", "(", "pi", ")", "==", "100", ")", "\n", "assert", "new_x", "[", "0", "]", ".", "shape", "==", "ts", ".", "shape", "\n", "assert", "isinstance", "(", "pi", "[", "0", "]", ",", "float", ")", "\n", "assert", "z_prime", "[", "0", "]", ".", "shape", "==", "np", ".", "unique", "(", "segm_ts", ")", ".", "shape", "\n", "\n", "# MTS", "\n", "samples", "=", "sampler", ".", "get_samples", "(", "mts", ",", "segm_mts", ",", "n_samples", "=", "100", ")", "\n", "new_x", ",", "z_prime", ",", "pi", "=", "list", "(", "zip", "(", "*", "samples", ")", ")", "\n", "\n", "assert", "(", "len", "(", "new_x", ")", "==", "len", "(", "z_prime", ")", "==", "len", "(", "pi", ")", "==", "100", ")", "\n", "assert", "new_x", "[", "0", "]", ".", "shape", "==", "mts", ".", "shape", "\n", "assert", "isinstance", "(", "pi", "[", "0", "]", ",", "float", ")", "\n", "assert", "z_prime", "[", "0", "]", ".", "shape", "==", "np", ".", "unique", "(", "segm_mts", ")", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.tests.test_lime.test_base_explain": [[40, 56], ["tsmule.sampling.perturb.Perturbation", "tsmule.xai.lime.LimeBase", "tsmule.sampling.perturb.Perturbation.get_samples", "tsmule.xai.lime.LimeBase._explain", "tsmule.sampling.perturb.Perturbation.get_samples", "tsmule.xai.lime.LimeBase._explain"], "function", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.perturb.Perturbation.get_samples", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.lime.LimeBase._explain", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.perturb.Perturbation.get_samples", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.lime.LimeBase._explain"], ["", "def", "test_base_explain", "(", ")", ":", "\n", "# Arguments", "\n", "    ", "sampler", "=", "Perturbation", "(", ")", "\n", "kernel", "=", "Kernels", ".", "Lasso", "\n", "\n", "def", "predict_fn", "(", "x", ")", ":", "\n", "        ", "return", "1", "\n", "", "lime", "=", "LimeBase", "(", ")", "\n", "\n", "samples", "=", "sampler", ".", "get_samples", "(", "ts", ",", "segm_ts", ",", "n_samples", "=", "100", ")", "\n", "_kernel", ",", "score", "=", "lime", ".", "_explain", "(", "samples", ",", "kernel", ",", "predict_fn", ")", "\n", "assert", "score", "==", "1", "and", "_kernel", ".", "coef_", "is", "not", "None", "\n", "\n", "samples", "=", "sampler", ".", "get_samples", "(", "mts", ",", "segm_mts", ",", "n_samples", "=", "100", ")", "\n", "_kernel", ",", "score", "=", "lime", ".", "_explain", "(", "samples", ",", "kernel", ",", "predict_fn", ")", "\n", "assert", "score", "==", "1", "and", "_kernel", ".", "coef_", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.tests.test_lime.test_ts_explain": [[58, 67], ["tsmule.xai.lime.LimeTS", "tsmule.xai.lime.LimeTS.explain", "all", "x.sum", "lime_ts.explain.ravel"], "function", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.lime.LimeBase.explain"], ["", "def", "test_ts_explain", "(", ")", ":", "\n", "    ", "lime_ts", "=", "LimeTS", "(", "n_samples", "=", "1000", ")", "\n", "\n", "def", "predict_fn", "(", "x", ")", ":", "\n", "        ", "return", "x", ".", "sum", "(", ")", "\n", "\n", "", "coef", "=", "lime_ts", ".", "explain", "(", "mts", ",", "predict_fn", ")", "\n", "assert", "all", "(", "coef", ".", "ravel", "(", ")", ">=", "0", ")", "\n", "assert", "coef", ".", "shape", "==", "mts", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.tests.test_lime.test_explain_cnn": [[69, 134], ["pytest.mark.skip", "keras.models.load_model", "plt.figure", "range", "plt.show", "tsmule.xai.lime.LimeTS", "tsmule.xai.lime.LimeTS._segmenter.segment", "plt.figure", "range", "plt.show", "tsmule.xai.lime.LimeTS._sampler.perturb", "next", "plt.figure", "range", "plt.show", "plt.subplots", "ax.imshow", "plt.show", "tsmule.xai.lime.LimeTS", "linear_model.Lasso", "tsmule.xai.lime.LimeTS.explain", "plt.figure", "range", "plt.show", "open", "dill.load", "keras.models.load_model.predict().ravel", "plt.figure.add_subplot", "plt.plot", "plt.figure.add_subplot", "plt.scatter", "plt.figure.add_subplot", "plt.plot", "plt.figure.add_subplot", "plt.scatter", "range", "z_prime.reshape", "range", "keras.models.load_model.predict"], "function", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.WindowSegmentation.segment", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationBase.perturb", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.lime.LimeBase.explain"], ["", "@", "pytest", ".", "mark", ".", "skip", "(", "\"Manuel test\"", ")", "\n", "def", "test_explain_cnn", "(", ")", ":", "\n", "    ", "import", "dill", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "tensorflow", "import", "keras", "\n", "from", "sklearn", "import", "linear_model", "\n", "\n", "data_dir", "=", "\"demo/beijing_air_2_5\"", "\n", "cnn_model", "=", "keras", ".", "models", ".", "load_model", "(", "\n", "f'{data_dir}/beijing_air_2_5_cnn_model.h5'", ")", "\n", "with", "open", "(", "f'{data_dir}/beijing_air_2_5_test_data.dill'", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "dataset_test", "=", "dill", ".", "load", "(", "f", ")", "\n", "\n", "# Define a predict fn/model", "\n", "", "def", "predict_", "(", "x", ")", ":", "\n", "        ", "return", "cnn_model", ".", "predict", "(", "x", "[", "np", ".", "newaxis", "]", ")", ".", "ravel", "(", ")", "\n", "\n", "# Get a sample", "\n", "", "sample", "=", "dataset_test", "[", "0", "]", "[", "0", "]", "\n", "\n", "# First insight of the sample", "\n", "n_steps", ",", "features", "=", "sample", ".", "shape", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "for", "i", "in", "range", "(", "features", ")", ":", "\n", "        ", "fig", ".", "add_subplot", "(", "features", ",", "1", ",", "i", "+", "1", ")", "\n", "plt", ".", "plot", "(", "sample", "[", ":", ",", "i", "]", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n", "# Define an explainer", "\n", "explainer", "=", "LimeTS", "(", ")", "\n", "\n", "# Segmentation with slopes-max (default)", "\n", "seg_m", "=", "explainer", ".", "_segmenter", ".", "segment", "(", "sample", ",", "\"slopes-max\"", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "for", "i", "in", "range", "(", "features", ")", ":", "\n", "        ", "fig", ".", "add_subplot", "(", "features", ",", "1", ",", "i", "+", "1", ")", "\n", "plt", ".", "scatter", "(", "range", "(", "n_steps", ")", ",", "sample", "[", ":", ",", "i", "]", ",", "c", "=", "seg_m", "[", ":", ",", "i", "]", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n", "# Samples and binary", "\n", "perturbed_samples", "=", "explainer", ".", "_sampler", ".", "perturb", "(", "sample", ",", "seg_m", ")", "\n", "new_s", ",", "z_prime", ",", "pi", "=", "next", "(", "perturbed_samples", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "for", "i", "in", "range", "(", "features", ")", ":", "\n", "        ", "fig", ".", "add_subplot", "(", "features", ",", "1", ",", "i", "+", "1", ")", "\n", "plt", ".", "plot", "(", "new_s", "[", ":", ",", "i", "]", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n", "# Plot an on/off binary vector", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "imshow", "(", "z_prime", ".", "reshape", "(", "-", "1", ",", "features", ")", ".", "T", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "# Explain the model", "\n", "explainer", "=", "LimeTS", "(", "n_samples", "=", "100", ")", "\n", "\n", "Lasso", "=", "linear_model", ".", "Lasso", "(", "alpha", "=", ".01", ")", "\n", "explainer", ".", "_kernel", "=", "Lasso", "\n", "xcoef", "=", "explainer", ".", "explain", "(", "sample", ",", "predict_", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "for", "i", "in", "range", "(", "features", ")", ":", "\n", "        ", "fig", ".", "add_subplot", "(", "features", ",", "1", ",", "i", "+", "1", ")", "\n", "plt", ".", "scatter", "(", "range", "(", "n_steps", ")", ",", "xcoef", "[", ":", ",", "i", "]", ",", "c", "=", "seg_m", "[", ":", ",", "i", "]", ",", "marker", "=", "\"*\"", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.tests.test_segment.test_segment_max": [[17, 34], ["pytest.mark.skip", "tsmule.sampling.segment.MatrixProfileSegmentation", "tsmule.sampling.segment.MatrixProfileSegmentation._segment_with_bins", "matplotlib.scatter", "matplotlib.show", "tsmule.sampling.segment.MatrixProfileSegmentation._segment_with_bins", "matplotlib.scatter", "matplotlib.show", "tsmule.sampling.segment.MatrixProfileSegmentation._segment_with_bins", "matplotlib.subplots", "ax[].scatter", "ax[].scatter", "matplotlib.show", "ts.values.reshape", "range", "ts.values.reshape", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.MatrixProfileSegmentation._segment_with_bins", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.MatrixProfileSegmentation._segment_with_bins", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.MatrixProfileSegmentation._segment_with_bins"], ["@", "pytest", ".", "mark", ".", "skip", "(", "'Manual test.'", ")", "\n", "def", "test_segment_max", "(", ")", ":", "\n", "    ", "mseg", "=", "MatrixProfileSegmentation", "(", "partitions", "=", "10", ",", "win_length", "=", "4", ")", "\n", "\n", "seg_m", "=", "mseg", ".", "_segment_with_bins", "(", "ts", ".", "values", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "4", ",", "10", ",", "'max'", ")", "\n", "plt", ".", "scatter", "(", "range", "(", "n", ")", ",", "ts", ",", "c", "=", "seg_m", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "seg_m", "=", "mseg", ".", "_segment_with_bins", "(", "ts", ".", "values", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "4", ",", "10", ",", "'min'", ")", "\n", "plt", ".", "scatter", "(", "range", "(", "n", ")", ",", "ts", ",", "c", "=", "seg_m", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "seg_mts", "=", "mseg", ".", "_segment_with_bins", "(", "mts", ",", "4", ",", "10", ",", "'min'", ")", "\n", "_", ",", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "1", ")", "\n", "ax", "[", "0", "]", ".", "scatter", "(", "range", "(", "n", ")", ",", "mts", "[", ":", ",", "0", "]", ",", "c", "=", "seg_mts", "[", ":", ",", "0", "]", ")", "\n", "ax", "[", "1", "]", ".", "scatter", "(", "range", "(", "n", ")", ",", "mts", "[", ":", ",", "1", "]", ",", "c", "=", "seg_mts", "[", ":", ",", "1", "]", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.tests.test_replace.test_repl_zeros": [[14, 20], ["tsmule.zeros", "numpy.array_equal", "tsmule.zeros", "numpy.array_equal", "numpy.zeros_like", "numpy.zeros_like"], "function", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.replace.zeros", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.replace.zeros"], ["def", "test_repl_zeros", "(", ")", ":", "\n", "    ", "x", "=", "repl", ".", "zeros", "(", "ts", ")", "\n", "assert", "np", ".", "array_equal", "(", "x", ",", "np", ".", "zeros_like", "(", "ts", ")", ")", "\n", "\n", "x", "=", "repl", ".", "zeros", "(", "mts", ")", "\n", "assert", "np", ".", "array_equal", "(", "x", ",", "np", ".", "zeros_like", "(", "mts", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.tests.test_replace.test_repl_local_mean": [[22, 41], ["tsmule.local_mean", "x.round.round", "numpy.array_equal", "tsmule.local_mean", "x.round.round", "numpy.array_equal", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.replace.local_mean", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.replace.local_mean"], ["", "def", "test_repl_local_mean", "(", ")", ":", "\n", "    ", "x", "=", "repl", ".", "local_mean", "(", "ts", ",", "segm_ts", ")", "\n", "x", "=", "x", ".", "round", "(", "1", ")", "\n", "expected", "=", "np", ".", "array", "(", "\n", "[", "[", "4.3", ",", "4.3", ",", "4.3", ",", "5.5", ",", "5.5", ",", "5.5", ",", "5.5", ",", "5.5", ",", "\n", "5.5", ",", "5.5", ",", "5.5", ",", "3.4", ",", "3.4", ",", "3.4", ",", "3.4", ",", "3.4", "]", "]", "\n", ")", ".", "T", "\n", "\n", "assert", "np", ".", "array_equal", "(", "x", ",", "expected", ")", "\n", "\n", "x", "=", "repl", ".", "local_mean", "(", "mts", ",", "segm_mts", ")", "\n", "x", "=", "x", ".", "round", "(", "1", ")", "\n", "expected", "=", "np", ".", "array", "(", "[", "\n", "[", "4.3", ",", "4.3", ",", "4.3", ",", "5.5", ",", "5.5", ",", "5.5", ",", "5.5", ",", "5.5", ",", "\n", "5.5", ",", "5.5", ",", "5.5", ",", "3.4", ",", "3.4", ",", "3.4", ",", "3.4", ",", "3.4", "]", ",", "\n", "[", "5.", ",", "5.", ",", "5.", ",", "5.", ",", "7.", ",", "7.", ",", "7.", ",", "3.2", ",", "3.2", ",", "3.2", ",", "3.2", ",", "3.2", ",", "3.2", ",", "3.2", ",", "3.2", ",", "3.2", "]", "]", "\n", ")", ".", "T", "\n", "\n", "assert", "np", ".", "array_equal", "(", "x", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.tests.test_replace.test_global_mean": [[43, 56], ["tsmule.global_mean", "x.round.round", "numpy.zeros_like().astype", "np.zeros_like().astype.fill", "numpy.array_equal", "tsmule.global_mean", "x.round.round", "numpy.zeros_like().astype", "expected[].fill", "expected[].fill", "numpy.array_equal", "numpy.zeros_like", "numpy.zeros_like"], "function", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.replace.global_mean", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.replace.global_mean"], ["", "def", "test_global_mean", "(", ")", ":", "\n", "    ", "x", "=", "repl", ".", "global_mean", "(", "ts", ")", "\n", "x", "=", "x", ".", "round", "(", "1", ")", "\n", "expected", "=", "np", ".", "zeros_like", "(", "ts", ")", ".", "astype", "(", "float", ")", "\n", "expected", ".", "fill", "(", "4.6", ")", "\n", "assert", "np", ".", "array_equal", "(", "x", ",", "expected", ")", "\n", "\n", "x", "=", "repl", ".", "global_mean", "(", "mts", ")", "\n", "x", "=", "x", ".", "round", "(", "1", ")", "\n", "expected", "=", "np", ".", "zeros_like", "(", "mts", ")", ".", "astype", "(", "float", ")", "\n", "expected", "[", ":", ",", "0", "]", ".", "fill", "(", "4.6", ")", "\n", "expected", "[", ":", ",", "1", "]", ".", "fill", "(", "4.4", ")", "\n", "assert", "np", ".", "array_equal", "(", "x", ",", "expected", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.AbstractSegmentation.__init__": [[15, 19], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Abstract construct.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.AbstractSegmentation.segment": [[20, 32], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "segment", "(", "self", ",", "time_series_sample", ")", ":", "\n", "        ", "\"\"\"Time series instance segmentation into segments.\n\n        Args:\n            time_series_sample (ndarray): Time series data (n_steps, n_features)\n\n        Returns:\n            segmentation_mask: the segmentation mask of a time series.\n                It has the same shape with time series sample.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.MatrixProfileSegmentation.__init__": [[38, 47], ["max"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "partitions", ",", "win_length", "=", "3", ")", ":", "\n", "        ", "\"\"\"Construct segmenter of a time series using matrix profile.\n\n        Args:\n            partitions (int): number of partitions\n            win_length (int, optional): window length. Defaults to 3.\n        \"\"\"", "\n", "self", ".", "partitions", "=", "partitions", "\n", "self", ".", "win_length", "=", "max", "(", "3", ",", "win_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.MatrixProfileSegmentation._segment_with_slopes": [[49, 114], ["numpy.zeros_like", "range", "int", "stumpy.stump", "numpy.argsort", "numpy.array", "sorted", "sorted.append", "sorted", "numpy.argsort", "range", "len"], "methods", ["None"], ["", "def", "_segment_with_slopes", "(", "self", ",", "time_series_sample", ",", "m", "=", "4", ",", "k", "=", "10", ",", "profile", "=", "'sorted'", ")", ":", "\n", "        ", "\"\"\"Time series instance segmentation into segments.\n\n        Idea:\n         - Take the matrix profile of a time series and sort the distances.\n         - Calculate the slope of this new matrix profile and take partition largest ones.\n\n        Args:\n            time_series_sample (ndarray): Time series data (n_steps, n_features)\n            m (int, optional): Windows Size of subsequent to do matrix profile. Defaults to 4.\n            k (int, optional): Number of partitions. Defaults to 10.\n            profile (str, optional): Sort the corresponding matrix profile before slope or not ('sorted', 'not-sorted').\n            Defaults to 'sorted'.\n\n        Returns:\n            segmentation_mask: the segmentation mask of a time series. It has the same shape with time series sample.\n        \"\"\"", "\n", "# create segmentation mask as the time series", "\n", "segmentation_mask", "=", "np", ".", "zeros_like", "(", "time_series_sample", ")", "\n", "\n", "# extract steps and features", "\n", "n_steps", ",", "n_features", "=", "time_series_sample", ".", "shape", "\n", "\n", "# set matrix profile window length", "\n", "mp_win_len", "=", "m", "\n", "if", "mp_win_len", "==", "-", "1", ":", "\n", "# calculate partitions based matrix profile length", "\n", "            ", "mp_win_len", "=", "int", "(", "n_steps", "/", "k", ")", "\n", "\n", "# set first window index to 0", "\n", "", "win_idx", "=", "0", "\n", "# create a matrix profile for every feature", "\n", "for", "feature", "in", "range", "(", "n_features", ")", ":", "\n", "\n", "# extract matrix profile with the previously set window length", "\n", "            ", "mp", "=", "stumpy", ".", "stump", "(", "time_series_sample", "[", ":", ",", "feature", "]", ",", "mp_win_len", ")", "\n", "mp_", "=", "mp", "[", ":", ",", "0", "]", "# just take the matrix profile", "\n", "temp_mp", "=", "mp_", "\n", "if", "profile", "==", "'sorted'", ":", "\n", "                ", "mp_sorted", "=", "sorted", "(", "mp_", ")", "# sort values", "\n", "temp_mp", "=", "mp_sorted", "\n", "", "mp_idx_sorted", "=", "np", ".", "argsort", "(", "mp_", ")", "# sort indeces with values", "\n", "\n", "# find the largest matrix profile slopes", "\n", "# calculate the slopes for every matrix profile step", "\n", "slopes", "=", "np", ".", "array", "(", "[", "(", "temp_mp", "[", "i", "]", "-", "temp_mp", "[", "i", "+", "1", "]", ")", "/", "(", "i", "-", "(", "i", "+", "1", ")", ")", "for", "i", "in", "range", "(", "len", "(", "temp_mp", ")", "-", "1", ")", "]", ")", "\n", "# take amount of partitions of the largest slopes", "\n", "slopes_sorted", "=", "np", ".", "argsort", "(", "slopes", ")", "[", ":", ":", "-", "1", "]", "[", ":", "k", "]", "\n", "# retrieve indeces of original time series", "\n", "partitions_idx_sorted", "=", "sorted", "(", "\n", "[", "mp_idx_sorted", "[", "part", "]", "for", "part", "in", "slopes_sorted", "]", ")", "\n", "# add end of time series", "\n", "partitions_idx_sorted", ".", "append", "(", "n_steps", ")", "\n", "\n", "# create windows segmentation masks", "\n", "start", "=", "0", "\n", "for", "idx", "in", "partitions_idx_sorted", ":", "\n", "                ", "end", "=", "idx", "\n", "segmentation_mask", "[", "start", ":", "end", ",", "feature", "]", "=", "win_idx", "\n", "win_idx", "+=", "1", "\n", "start", "=", "idx", "\n", "\n", "", "win_idx", "+=", "1", "\n", "\n", "", "return", "segmentation_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.MatrixProfileSegmentation._segment_with_bins": [[116, 170], ["numpy.zeros_like", "range", "stumpy.stump", "mp[].astype", "min", "mp[].astype.max", "numpy.linspace", "numpy.full", "enumerate", "mp[].astype.min", "numpy.digitize", "min", "max", "_fn", "max"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_segment_with_bins", "(", "time_series_sample", ",", "m", "=", "4", ",", "k", "=", "10", ",", "distance_method", "=", "'max'", ")", ":", "\n", "        ", "\"\"\"Segment a time series by using matrix profile distance and its bins.\n\n        For shared points between two windows, it can minimize or maximize the nearest distance.\n\n        Args:\n            time_series_sample (ndarray): Time series data (n_steps, n_features)\n            m (int, optional): Windows Size of subsequent to do matrix profile. Defaults to 4.\n            k (int, optional): Initial max number of partitions. Defaults to 10.\n                The final result is possiblily smaller than k paritions. Defaults to \"max\".\n            distance_method (str, optional): Options can be `min`, `max`.\n                Minimize or maximize the shared points between two windows.\n\n        Returns:\n            segmentation_mask: the segmentation mask of a time series.\n                It has the same shape with time series sample.\n        \"\"\"", "\n", "n_steps", ",", "n_features", "=", "time_series_sample", ".", "shape", "\n", "segmentation_mask", "=", "np", ".", "zeros_like", "(", "time_series_sample", ")", "\n", "seg_start", "=", "0", "\n", "for", "feature", "in", "range", "(", "n_features", ")", ":", "\n", "            ", "ts", "=", "time_series_sample", "[", ":", ",", "feature", "]", "\n", "\n", "# Get Matrix Profile Distance", "\n", "mp", "=", "stumpy", ".", "stump", "(", "ts", ",", "m", ")", "\n", "mp_d", "=", "mp", "[", ":", ",", "0", "]", ".", "astype", "(", "float", ")", "\n", "mp_d_min", "=", "min", "(", "0", ",", "mp_d", ".", "min", "(", ")", ")", "\n", "mp_d_max", "=", "mp_d", ".", "max", "(", ")", "\n", "\n", "# Create bins of distance from min to max", "\n", "# segments number", "\n", "#   lower: more similar -> motif classes", "\n", "#   highest: more dissimilar -> discord classes", "\n", "bins", "=", "np", ".", "linspace", "(", "mp_d_min", ",", "mp_d_max", ",", "k", ")", "\n", "segments", "=", "np", ".", "digitize", "(", "mp_d", ",", "bins", ")", "-", "1", "# -1 to make start from 0", "\n", "segments", "=", "seg_start", "+", "segments", "\n", "\n", "# unpack segments to time series", "\n", "#   Notice: For the shared points between two windows, the segment can be maximized, or minimized", "\n", "if", "distance_method", "==", "'max'", ":", "\n", "                ", "init_v", "=", "min", "(", "segments", ")", "\n", "_fn", "=", "np", ".", "fmax", "\n", "", "if", "distance_method", "==", "'min'", ":", "\n", "                ", "init_v", "=", "max", "(", "segments", ")", "\n", "_fn", "=", "np", ".", "fmin", "\n", "\n", "", "seg_m", "=", "np", ".", "full", "(", "n_steps", ",", "init_v", ")", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "segments", ")", ":", "\n", "                ", "seg_m", "[", "i", ":", "i", "+", "m", "]", "=", "_fn", "(", "seg_m", "[", "i", ":", "i", "+", "m", "]", ",", "s", ")", "\n", "\n", "", "segmentation_mask", "[", ":", ",", "feature", "]", "=", "seg_m", "\n", "seg_start", "=", "max", "(", "seg_m", ")", "+", "1", "\n", "", "return", "segmentation_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.MatrixProfileSegmentation.segment": [[172, 210], ["time_series_sample.astype.astype.astype", "ValueError", "segment.MatrixProfileSegmentation._segment_with_slopes", "segment.MatrixProfileSegmentation._segment_with_slopes", "segment.MatrixProfileSegmentation._segment_with_bins", "segment.MatrixProfileSegmentation._segment_with_bins"], "methods", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.MatrixProfileSegmentation._segment_with_slopes", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.MatrixProfileSegmentation._segment_with_slopes", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.MatrixProfileSegmentation._segment_with_bins", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.MatrixProfileSegmentation._segment_with_bins"], ["", "def", "segment", "(", "self", ",", "time_series_sample", ",", "segmentation_method", "=", "'slopes-sorted'", ")", ":", "\n", "        ", "\"\"\"Time series instance segmentation into segments.\n\n        Currently only with slopes but more is planned.\n\n        Args:\n            time_series_sample (ndarray): Time series data (n_steps, n_features)\n            segmentation_method (str, optional): Segmentation method to be used.\n                Defaults to 'slopes-sorted'. Possible: slopes-sorted | slopes-max | bins-min | bins-max\n\n        Returns:\n            segmentation_mask: the segmentation mask of a time series.\n                It has the same shape with time series sample.\n        \"\"\"", "\n", "time_series_sample", "=", "time_series_sample", ".", "astype", "(", "float", ")", "\n", "if", "segmentation_method", "==", "'slopes-sorted'", ":", "\n", "            ", "return", "self", ".", "_segment_with_slopes", "(", "time_series_sample", ",", "\n", "m", "=", "self", ".", "win_length", ",", "\n", "k", "=", "self", ".", "partitions", ",", "\n", "profile", "=", "'sorted'", ")", "\n", "", "if", "segmentation_method", "==", "'slopes-not-sorted'", ":", "\n", "            ", "return", "self", ".", "_segment_with_slopes", "(", "time_series_sample", ",", "\n", "m", "=", "self", ".", "win_length", ",", "\n", "k", "=", "self", ".", "partitions", ",", "\n", "profile", "=", "'not-sorted'", ")", "\n", "\n", "", "if", "segmentation_method", "==", "'bins-max'", ":", "\n", "            ", "return", "self", ".", "_segment_with_bins", "(", "time_series_sample", ",", "\n", "m", "=", "self", ".", "win_length", ",", "\n", "k", "=", "self", ".", "partitions", ",", "\n", "distance_method", "=", "'max'", ")", "\n", "", "if", "segmentation_method", "==", "'bins-min'", ":", "\n", "            ", "return", "self", ".", "_segment_with_bins", "(", "time_series_sample", ",", "\n", "m", "=", "self", ".", "win_length", ",", "\n", "k", "=", "self", ".", "partitions", ",", "\n", "distance_method", "=", "'min'", ")", "\n", "\n", "", "raise", "ValueError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.SAXSegmentation.__init__": [[216, 223], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "partitions", ",", "win_length", "=", "3", ")", ":", "\n", "        ", "\"\"\"Construct segmenter for sax algorithm.\n\n        Args:\n            partitions (int): number of partitions\n        \"\"\"", "\n", "self", ".", "partitions", "=", "partitions", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.SAXSegmentation.segment": [[225, 299], ["numpy.zeros_like", "range", "numpy.min", "numpy.max", "int", "range", "pyts.approximation.SymbolicAggregateApproximation", "pyts.approximation.SymbolicAggregateApproximation.fit_transform", "enumerate", "time_series_sample[].reshape", "pyts.approximation.SymbolicAggregateApproximation.fit_transform.reshape", "min"], "methods", ["None"], ["", "def", "segment", "(", "self", ",", "time_series_sample", ",", "**", "_kwargs", ")", ":", "\n", "        ", "\"\"\"Time series instance segmentation into segments.\n\n        Idea:\n         - Segment data using the SAX transformation.\n         - Use SAX to transform data.\n         - Use transformed data to identify windows.\n\n        Args:\n            time_series_sample (ndarray): Time series data (n_steps, n_features)\n\n        Returns:\n            segmentation_mask: the segmentation mask of a time series. It has the same shape with time series sample.\n        \"\"\"", "\n", "# create segmentation mask as the time series", "\n", "segmentation_mask", "=", "np", ".", "zeros_like", "(", "time_series_sample", ")", "\n", "\n", "# set partition amount", "\n", "partitions", "=", "self", ".", "partitions", "\n", "\n", "# extract steps and features", "\n", "n_steps", ",", "n_features", "=", "time_series_sample", ".", "shape", "\n", "\n", "# set first window index to 0", "\n", "win_idx", "=", "0", "\n", "\n", "# create a sax transformation for every feature", "\n", "for", "feature", "in", "range", "(", "n_features", ")", ":", "\n", "\n", "# check for constant values and use fixed windows for a segmentation", "\n", "            ", "if", "np", ".", "min", "(", "time_series_sample", "[", ":", ",", "feature", "]", ")", "==", "np", ".", "max", "(", "time_series_sample", "[", ":", ",", "feature", "]", ")", ":", "\n", "                ", "win_len", "=", "int", "(", "n_steps", "/", "partitions", ")", "\n", "for", "i", "in", "range", "(", "n_steps", ")", ":", "\n", "                    ", "if", "i", "%", "win_len", "==", "0", ":", "\n", "                        ", "win_idx", "+=", "1", "\n", "", "segmentation_mask", "[", "i", ",", "feature", "]", "=", "win_idx", "\n", "\n", "", "win_idx", "+=", "1", "\n", "continue", "\n", "\n", "# start with a threshold bin size", "\n", "", "n_bins", "=", "3", "\n", "\n", "internal_win_idx", "=", "0", "\n", "while", "True", ":", "\n", "                ", "if", "not", "(", "n_bins", "<", "(", "min", "(", "n_steps", ",", "26", ")", "-", "1", ")", ")", ":", "\n", "                    ", "break", "\n", "", "if", "not", "(", "internal_win_idx", "<", "partitions", "*", "8", "/", "10", ")", ":", "\n", "                    ", "if", "not", "(", "internal_win_idx", ">", "partitions", "*", "11", "/", "10", ")", ":", "\n", "                        ", "break", "\n", "", "if", "not", "(", "internal_win_idx", "<", "partitions", "*", "14", "/", "10", ")", ":", "\n", "                        ", "break", "\n", "\n", "# create SAX transformation on the time series feature with the current bin count and", "\n", "#   use a quantile partition", "\n", "", "", "sax", "=", "SymbolicAggregateApproximation", "(", "\n", "n_bins", "=", "n_bins", ",", "strategy", "=", "'quantile'", ",", "alphabet", "=", "'ordinal'", ")", "\n", "sax_transformation", "=", "sax", ".", "fit_transform", "(", "\n", "time_series_sample", "[", ":", ",", "feature", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "internal_win_idx", "=", "0", "\n", "old_value", "=", "None", "\n", "for", "i", ",", "value", "in", "enumerate", "(", "sax_transformation", ".", "reshape", "(", "-", "1", ")", ")", ":", "\n", "                    ", "if", "old_value", "and", "value", "!=", "old_value", ":", "\n", "                        ", "win_idx", "+=", "1", "\n", "internal_win_idx", "+=", "1", "\n", "", "segmentation_mask", "[", "i", ",", "feature", "]", "=", "win_idx", "\n", "old_value", "=", "value", "\n", "\n", "", "n_bins", "+=", "1", "\n", "\n", "", "win_idx", "+=", "1", "\n", "\n", "", "return", "segmentation_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.WindowSegmentation.__init__": [[305, 316], ["max"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "partitions", ",", "win_length", "=", "3", ")", ":", "\n", "        ", "\"\"\"Construct the window segmenter for time series.\n\n        A time series is segmented into uniform or exponential windows.\n\n        Args:\n            partitions (int): number of partitions\n            win_length (int, optional): windows length. Defaults to 3.\n        \"\"\"", "\n", "self", ".", "partitions", "=", "partitions", "\n", "self", ".", "win_length", "=", "max", "(", "3", ",", "win_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.WindowSegmentation._segment_with_uniform": [[318, 338], ["list", "numpy.zeros_like", "range", "numpy.arange", "zip"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_segment_with_uniform", "(", "time_series_sample", ",", "m", "=", "4", ")", ":", "\n", "        ", "\"\"\"Segment a time series into uniform windows with the same window size.\n\n        Notice: The window size at the end or begining could be smaller if n_steps % window_lenth != 0\n        \"\"\"", "\n", "n_steps", ",", "features", "=", "time_series_sample", ".", "shape", "\n", "assert", "n_steps", ">", "m", ",", "\"Window size must be larger than n-steps\"", "\n", "\n", "starts", "=", "list", "(", "np", ".", "arange", "(", "0", ",", "n_steps", ",", "m", ")", ")", "\n", "ends", "=", "starts", "[", "1", ":", "]", "+", "[", "n_steps", "]", "\n", "\n", "segmentation_mask", "=", "np", ".", "zeros_like", "(", "time_series_sample", ")", "\n", "win_idx", "=", "0", "\n", "for", "feature", "in", "range", "(", "features", ")", ":", "\n", "            ", "for", "i", ",", "j", "in", "zip", "(", "starts", ",", "ends", ")", ":", "\n", "                ", "segmentation_mask", "[", "i", ":", "j", ",", "feature", "]", "=", "win_idx", "\n", "win_idx", "+=", "1", "\n", "\n", "", "", "return", "segmentation_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.WindowSegmentation._segment_with_exponential": [[340, 368], ["numpy.arange", "range", "numpy.zeros_like", "range", "numpy.ceil", "numpy.ceil().astype", "sum", "starts.append", "zip", "numpy.log", "len", "numpy.ceil", "numpy.exp"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_segment_with_exponential", "(", "time_series_sample", ")", ":", "\n", "        ", "\"\"\"Segment a time series into exponential windows.\"\"\"", "\n", "n_steps", ",", "features", "=", "time_series_sample", ".", "shape", "\n", "\n", "# Get possible x (as window size) from exponential(x). Here try to make half of size", "\n", "x", "=", "np", ".", "arange", "(", "np", ".", "ceil", "(", "np", ".", "log", "(", "n_steps", ")", ")", ")", "\n", "\n", "win_sizes", "=", "[", "np", ".", "ceil", "(", "np", ".", "exp", "(", "i", ")", ")", ".", "astype", "(", "int", ")", "for", "i", "in", "x", "]", "\n", "\n", "# Adjust to have total of win_sizes must be equal = n_steps", "\n", "win_sizes", "[", "-", "1", "]", "=", "n_steps", "-", "sum", "(", "win_sizes", "[", ":", "-", "1", "]", ")", "\n", "\n", "# Get starts and ends for each window", "\n", "starts", "=", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "win_sizes", ")", "-", "1", ")", ":", "\n", "            ", "idx", "=", "starts", "[", "-", "1", "]", "+", "win_sizes", "[", "i", "]", "\n", "starts", ".", "append", "(", "idx", ")", "\n", "", "ends", "=", "starts", "[", "1", ":", "]", "+", "[", "n_steps", "]", "\n", "\n", "segmentation_mask", "=", "np", ".", "zeros_like", "(", "time_series_sample", ")", "\n", "win_idx", "=", "0", "\n", "for", "feature", "in", "range", "(", "features", ")", ":", "\n", "            ", "for", "i", ",", "j", "in", "zip", "(", "starts", ",", "ends", ")", ":", "\n", "                ", "segmentation_mask", "[", "i", ":", "j", ",", "feature", "]", "=", "win_idx", "\n", "win_idx", "+=", "1", "\n", "\n", "", "", "return", "segmentation_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.WindowSegmentation.segment": [[370, 387], ["time_series_sample.astype.astype.astype", "segment.WindowSegmentation._segment_with_uniform", "segment.WindowSegmentation._segment_with_exponential"], "methods", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.WindowSegmentation._segment_with_uniform", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.WindowSegmentation._segment_with_exponential"], ["", "def", "segment", "(", "self", ",", "time_series_sample", ",", "segmentation_method", "=", "'uniform'", ")", ":", "\n", "        ", "\"\"\"Time series instance segmentation into segments.\n\n        Args:\n            time_series_sample (ndarray): Time series data (n_steps, n_features)\n            segmentation_method (str, optional): Segmentation method to be used. Defaults to 'uniform'.\n                Possible: uniform | exponential\n\n        Returns:\n            segmentation_mask: the segmentation mask of a time series. It has the same shape with time series sample.\n        \"\"\"", "\n", "time_series_sample", "=", "time_series_sample", ".", "astype", "(", "float", ")", "\n", "if", "segmentation_method", "==", "'uniform'", ":", "\n", "            ", "return", "self", ".", "_segment_with_uniform", "(", "time_series_sample", ",", "\n", "m", "=", "self", ".", "win_length", ")", "\n", "", "if", "segmentation_method", "==", "'exponential'", ":", "\n", "            ", "return", "self", ".", "_segment_with_exponential", "(", "time_series_sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.SegmentationPicker.select": [[393, 413], ["segment.SAXSegmentation", "segment.WindowSegmentation", "segment.MatrixProfileSegmentation"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "select", "(", "method", ",", "partitions", ",", "win_length", "=", "0", ")", ":", "\n", "        ", "\"\"\"Construct a segmentation method family.\n\n        Args:\n            method (str): Segmentation method family, either 'sax', 'window' or 'matrix'.\n            partitions (int): number of partitions.\n            win_length (int, optional): Window length. Defaults to 0.\n\n        Returns:\n            object: An instance of AbstractSegmentation\n        \"\"\"", "\n", "if", "method", "==", "'sax'", ":", "\n", "            ", "return", "SAXSegmentation", "(", "partitions", ")", "\n", "", "elif", "method", "==", "'window'", ":", "\n", "            ", "return", "WindowSegmentation", "(", "partitions", ",", "win_length", ")", "\n", "", "elif", "'matrix'", "in", "method", ":", "\n", "            ", "return", "MatrixProfileSegmentation", "(", "partitions", ",", "win_length", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.replace._reshape_x": [[5, 12], ["len", "x.reshape.reshape", "segments.reshape.reshape"], "function", ["None"], ["def", "_reshape_x", "(", "x", ",", "segments", ")", ":", "\n", "    ", "assert", "x", ".", "shape", "==", "segments", ".", "shape", ",", "(", "\n", "f'{x.shape} does not match with segments shape {segments.shape}'", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "1", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "segments", "=", "segments", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "return", "x", ",", "segments", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.replace.zeros": [[14, 24], ["numpy.zeros_like"], "function", ["None"], ["", "def", "zeros", "(", "x", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "    ", "\"\"\"Zeros replacement.\n\n    Args:\n        x (ndarray): a time series with any shape.\n\n    Returns:\n        ndarray: zeros like x.\n    \"\"\"", "\n", "return", "np", ".", "zeros_like", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.replace.local_mean": [[26, 45], ["replace._reshape_x", "numpy.zeros_like().astype", "range", "numpy.unique", "numpy.zeros_like", "numpy.average"], "function", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.replace._reshape_x"], ["", "def", "local_mean", "(", "x", ",", "segments", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "    ", "\"\"\"Local mean replacements for each segments.\n\n    Args:\n        x (ndarray): a time series with any shape.\n        segments (ndarray): Segmentation of the time series. Same shape with x.\n    Returns:\n        ndarray: the average per segment per feature in x.\n    \"\"\"", "\n", "x", ",", "segments", "=", "_reshape_x", "(", "x", ",", "segments", ")", "\n", "_", ",", "features", "=", "x", ".", "shape", "\n", "\n", "r", "=", "np", ".", "zeros_like", "(", "x", ")", ".", "astype", "(", "float", ")", "\n", "for", "i", "in", "range", "(", "features", ")", ":", "\n", "# Get average per segment", "\n", "        ", "for", "s", "in", "np", ".", "unique", "(", "segments", ")", ":", "\n", "            ", "idx", "=", "(", "segments", "[", ":", ",", "i", "]", "==", "s", ")", "\n", "r", "[", "idx", ",", "i", "]", "=", "np", ".", "average", "(", "x", "[", "idx", ",", "i", "]", ")", "\n", "", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.replace.global_mean": [[47, 58], ["replace.local_mean", "numpy.ones_like"], "function", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.replace.local_mean"], ["", "def", "global_mean", "(", "x", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "    ", "\"\"\"Global mean replacements for each segments.\n\n    Args:\n        x (ndarray): a time series with any shape.\n    Returns:\n        ndarray: the average of whole x per feature.\n    \"\"\"", "\n", "# Consider each feature as one segments (of 1s)", "\n", "r", "=", "local_mean", "(", "x", ",", "np", ".", "ones_like", "(", "x", ")", ")", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.replace.local_noise": [[60, 70], ["None"], "function", ["None"], ["", "def", "local_noise", "(", "x", ",", "segments", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "    ", "\"\"\"Local noise for each segments.\n\n    Args:\n        x (ndarray): a time series with any shape.\n        segments (ndarray): Segmentation of the time series. Same shape with x.\n    Returns:\n        ndarray: the average per segment per feature in x.\n    \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.replace.global_noise": [[72, 81], ["None"], "function", ["None"], ["", "def", "global_noise", "(", "x", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "    ", "\"\"\"Global noise for each segments.\n\n    Args:\n        x (ndarray): a time series with any shape.\n    Returns:\n        ndarray: the average per feature in x.\n    \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.replace.inverse_max": [[83, 95], ["x.max().reshape", "x.max"], "function", ["None"], ["", "def", "inverse_max", "(", "x", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "    ", "\"\"\"Inverse max replacement.\n\n    Args:\n        x (ndarray): a time series with any shape.\n    Returns:\n        ndarray: the average per segment per feature in x.\n    \"\"\"", "\n", "_", ",", "n_features", "=", "x", ".", "shape", "\n", "max_v", "=", "x", ".", "max", "(", "axis", "=", "0", ")", ".", "reshape", "(", "-", "1", ",", "n_features", ")", "\n", "r", "=", "max_v", "-", "x", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.replace.inverse_mean": [[97, 108], ["replace.global_mean"], "function", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.replace.global_mean"], ["", "def", "inverse_mean", "(", "x", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "    ", "\"\"\"Inverse mean replacement.\n\n    Args:\n        x (ndarray): a time series with any shape.\n    Returns:\n        ndarray: the inversed average per feature in x.\n    \"\"\"", "\n", "mean_v", "=", "global_mean", "(", "x", ")", "\n", "r", "=", "mean_v", "-", "x", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.replace.random": [[110, 120], ["numpy.random.rand"], "function", ["None"], ["", "def", "random", "(", "x", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "    ", "\"\"\"Random replacements.\n\n    Args:\n        x (ndarray): a time series with any shape.\n    Returns:\n        ndarray: random array of x.\n    \"\"\"", "\n", "r", "=", "np", ".", "random", ".", "rand", "(", "*", "x", ".", "shape", ")", "\n", "return", "r", "\n", "", ""]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.perturb.AbstractPerturbation.__init__": [[13, 19], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Abstract construction.\"\"\"", "\n", "self", ".", "p_off", "=", "None", "\n", "self", ".", "repl_method", "=", "None", "\n", "self", ".", "n_samples", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.perturb.AbstractPerturbation.perturb": [[21, 32], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "perturb", "(", "self", ",", "ts", ",", "segments", ")", ":", "\n", "        ", "\"\"\"Perturb a time series to create new sample with same shape.\n\n        :param ts: (np.array) A time series must be (n_steps, n_features)\n        :param segments: (np.array) A segments with labels of the time series must be (n_steps, n_features)\n\n        Yields:\n            Generator: tuple of (new sample, on/off segments, similarity to original)\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.perturb.Perturbation.__init__": [[37, 50], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "p_off", "=", "0.5", ",", "method", "=", "'zeros'", ",", "n_samples", "=", "10", ")", ":", "\n", "        ", "\"\"\"Construct perturbation base module.\n\n        Args:\n            p_off (float, optional): Probability of disabling a segment. Default is 0.5\n            method (str, optional): Methods to replace parts of segmentation, including:\n                'zeros | global_mean | local_mean | inverse_mean |\u00a0inverse_max'\n                Defaults to 'zeros'.\n            n_samples (int, optional): [description]. Defaults to 10.\n        \"\"\"", "\n", "self", ".", "p_off", "=", "p_off", "\n", "self", ".", "repl_method", "=", "method", "\n", "self", ".", "n_samples", "=", "n_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.perturb.Perturbation._get_on_off_segments": [[52, 61], ["len", "numpy.random.choice", "numpy.unique"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_on_off_segments", "(", "segm", ",", "p", "=", "0.5", ")", ":", "\n", "# Get n_seg", "\n", "        ", "n_seg", "=", "len", "(", "np", ".", "unique", "(", "segm", ")", ")", "\n", "\n", "# Get on off segments", "\n", "# 0 = off/disabled/replaced, 1 = on/keep/unchanged", "\n", "v", "=", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", "]", ",", "size", "=", "n_seg", ",", "p", "=", "[", "p", ",", "1", "-", "p", "]", ")", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.perturb.Perturbation._get_segment_mask": [[63, 73], ["numpy.unique", "len", "numpy.ones_like", "range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_segment_mask", "(", "segm", ",", "on_off_segments", ")", ":", "\n", "# Get binary on/off masks for segments", "\n", "        ", "labels", "=", "np", ".", "unique", "(", "segm", ")", "\n", "n_segs", "=", "len", "(", "labels", ")", "\n", "mask", "=", "np", ".", "ones_like", "(", "segm", ")", "\n", "for", "i", "in", "range", "(", "n_segs", ")", ":", "\n", "            ", "idx", "=", "(", "segm", "==", "labels", "[", "i", "]", ")", "\n", "mask", "[", "idx", "]", "=", "on_off_segments", "[", "i", "]", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.perturb.Perturbation._get_similarity": [[75, 85], ["getattr", "getattr.", "numpy.nan_to_num", "x.ravel", "z.ravel"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_similarity", "(", "x", ",", "z", ",", "method", "=", "'kendalltau'", ")", ":", "\n", "# Calculate pi/similarity between x and y:", "\n", "        ", "pi", "=", "1", "\n", "if", "method", "in", "[", "'pearsonr'", ",", "'spearmanr'", ",", "'kendalltau'", "]", ":", "\n", "            ", "fn", "=", "getattr", "(", "stats", ",", "method", ")", "\n", "pi", ",", "_", "=", "fn", "(", "x", ".", "ravel", "(", ")", ",", "z", ".", "ravel", "(", ")", ")", "\n", "# avoid nan", "\n", "pi", "=", "np", ".", "nan_to_num", "(", "pi", ",", "0.01", ")", "\n", "", "return", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.perturb.Perturbation.get_sample": [[87, 111], ["cls._get_on_off_segments", "cls._get_segment_mask", "cls._get_similarity", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.perturb.Perturbation._get_on_off_segments", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.perturb.Perturbation._get_segment_mask", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.perturb.Perturbation._get_similarity"], ["", "@", "classmethod", "\n", "def", "get_sample", "(", "cls", ",", "x", ",", "segm", ",", "r", "=", "None", ",", "p_off", "=", "0.5", ")", ":", "\n", "        ", "\"\"\"Get sample of x based on replace segments of x with r.\n\n        Args:\n            x (ndarray): A multivariate time series\n            segm (ndarray): A segmentation of x, having same shape with x\n            r (ndarray): A replacements of x when create a new sample\n            p_off (float, optional): Probility of disabling a segmentation. Defaults to 0.5.\n        Yields:\n            Generator: a tuple of (new sample, on/off segments, similarity to original)\n        \"\"\"", "\n", "if", "r", "is", "None", ":", "\n", "            ", "r", "=", "np", ".", "zeros_like", "(", "x", ")", "\n", "", "assert", "r", ".", "shape", "==", "x", ".", "shape", "==", "segm", ".", "shape", "\n", "\n", "# On/off vector z', used to fit into XAI linear regression", "\n", "z_prime", "=", "cls", ".", "_get_on_off_segments", "(", "segm", ",", "p_off", ")", "\n", "mask", "=", "cls", ".", "_get_segment_mask", "(", "segm", ",", "z_prime", ")", "\n", "\n", "# get new x sample, when mask = 1, then keep x, else replace it", "\n", "new_x", "=", "x", "*", "mask", "+", "r", "*", "(", "1", "-", "mask", ")", "\n", "pi", "=", "cls", ".", "_get_similarity", "(", "x", ",", "new_x", ")", "\n", "yield", "new_x", ",", "z_prime", ",", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.perturb.Perturbation.get_samples": [[113, 132], ["getattr", "getattr.", "range", "cls.get_sample"], "methods", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.perturb.Perturbation.get_sample"], ["", "@", "classmethod", "\n", "def", "get_samples", "(", "cls", ",", "x", ",", "segm", ",", "replace_method", "=", "'zeros'", ",", "p_off", "=", "0.5", ",", "n_samples", "=", "10", ")", ":", "\n", "        ", "\"\"\"Perturb and generate sample sets from given time series and its segmentation.\n\n        Args:\n            ts (np.ndarray): A time series with shape (n_steps, n_features)\n            segments (np.ndarray): A segmentation of the time series with shape (n_steps, n_features)\n            replace_method (str): Method to replace off/disabled segment\n            p_off (float): Probability of disabling a segment. Default is 0.5\n            n_samples (int): Number of samples to be generated.\n\n        Yields:\n            Generator: tuples of (new sample, on/off segments, similarity to original)\n        \"\"\"", "\n", "fn", "=", "getattr", "(", "repl", ",", "replace_method", ")", "\n", "r", "=", "fn", "(", "x", ",", "segm", ")", "\n", "\n", "for", "_", "in", "range", "(", "n_samples", ")", ":", "\n", "            ", "yield", "from", "cls", ".", "get_sample", "(", "x", ",", "segm", ",", "r", ",", "p_off", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.perturb.Perturbation.perturb": [[134, 148], ["perturb.Perturbation.get_samples"], "methods", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.perturb.Perturbation.get_samples"], ["", "", "def", "perturb", "(", "self", ",", "ts", ",", "segments", ")", ":", "\n", "        ", "\"\"\"Perturb and generate sample sets from given time series and its segmentation.\n\n        Args:\n            ts (np.ndarray): A time series with shape (n_steps, n_features)\n            segments (np.ndarray): A segmentation of the time series with shape (n_steps, n_features)\n\n        Yields:\n            Generator: tuple of (new sample, on/off segments, similarity to original)\n        \"\"\"", "\n", "return", "self", ".", "get_samples", "(", "ts", ",", "segments", ",", "\n", "self", ".", "repl_method", ",", "\n", "self", ".", "p_off", ",", "\n", "self", ".", "n_samples", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.viz.visualize_segmentation_mask": [[5, 29], ["matplotlib.subplots", "range", "matplotlib.show", "matplotlib.subplots", "range", "matplotlib.show", "ax[].plot", "range", "ax[].scatter", "range", "ax[].axvline"], "function", ["None"], ["def", "visualize_segmentation_mask", "(", "time_series_sample", ",", "segmentation_mask", ")", ":", "\n", "    ", "\"\"\"Visualize time series and its segementation.\n\n    Args:\n        time_series_sample (ndarrays): A time series with shape n_steps, n_features\n        segmentation_mask (ndarrays): A generated segmentation of the time series.\n    \"\"\"", "\n", "n_steps", ",", "n_features", "=", "time_series_sample", ".", "shape", "\n", "\n", "_", ",", "ax", "=", "plt", ".", "subplots", "(", "n_features", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "n_features", ")", ":", "\n", "        ", "ax", "[", "i", "]", ".", "plot", "(", "time_series_sample", "[", ":", ",", "i", "]", ")", "\n", "old_value", "=", "segmentation_mask", "[", "0", ",", "i", "]", "\n", "for", "j", "in", "range", "(", "n_steps", ")", ":", "\n", "            ", "value", "=", "segmentation_mask", "[", "j", ",", "i", "]", "\n", "if", "old_value", "!=", "value", ":", "\n", "                ", "ax", "[", "i", "]", ".", "axvline", "(", "x", "=", "j", ",", "color", "=", "'red'", ")", "\n", "old_value", "=", "value", "\n", "", "", "", "plt", ".", "show", "(", ")", "\n", "\n", "_", ",", "ax", "=", "plt", ".", "subplots", "(", "n_features", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "n_features", ")", ":", "\n", "        ", "ax", "[", "i", "]", ".", "scatter", "(", "range", "(", "n_steps", ")", ",", "time_series_sample", "[", ":", ",", "i", "]", ",", "c", "=", "segmentation_mask", "[", ":", ",", "i", "]", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.viz.visualize_perturbation_masks": [[31, 33], ["None"], "function", ["None"], ["", "def", "visualize_perturbation_masks", "(", ")", ":", "\n", "    ", "pass", "\n", "", ""]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.lime.AbstractXAI.__init__": [[40, 44], ["None"], "methods", ["None"], ["@", "abstractclassmethod", "\n", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Abstract construct.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.lime.AbstractXAI.explain": [[46, 55], ["None"], "methods", ["None"], ["", "@", "abstractclassmethod", "\n", "def", "explain", "(", "self", ",", "x", ",", "predict_fn", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Generate explaination for time series x, given a model or predict function.\n\n        Args:\n            x (ndarray): Time series x with (n_steps, n_features)\n            predict_fn (function): Predict function of the model.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.lime.LimeBase.__init__": [[61, 79], ["logging.getLogger"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "kernel", "=", "None", ",", "sampler", "=", "None", ",", "segmenter", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"Construct perturbation base explainer.\n\n        Args:\n            kernel (obj, optional): The sklearn.linear_model for infering output of explaining model.\n                Defaults to None.\n            segmenter (obj, optional): Segmenation object from tsmule.sampling.segment.\n                Defaults to None.\n            sampler (obj, optional): Perturbation object from tsmule.sampling.perturb.\n                Defaults to None.\n        \"\"\"", "\n", "self", ".", "_kernel", "=", "kernel", "\n", "self", ".", "_sampler", "=", "sampler", "\n", "self", ".", "_segmenter", "=", "segmenter", "\n", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "f'::{self.__class__.__name__}::'", ")", "\n", "self", ".", "_coef", "=", "None", "\n", "self", ".", "_xcoef", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.lime.LimeBase.segment_coef": [[81, 89], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "segment_coef", "(", "self", ")", ":", "\n", "        ", "\"\"\"Coefficient per segment (array).\n\n        Returns:\n            array: Array of coefficient/relevance.\n        \"\"\"", "\n", "return", "self", ".", "_coef", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.lime.LimeBase.coef": [[91, 99], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "coef", "(", "self", ")", ":", "\n", "        ", "\"\"\"Coefficient of all time points.\n\n        Returns:\n            ndarray: All coefficients of the time series. It has same shape with the time series explained.\n        \"\"\"", "\n", "return", "self", ".", "_xcoef", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.lime.LimeBase._explain": [[101, 124], ["list", "list", "sklearn.model_selection.train_test_split", "numpy.nan_to_num", "numpy.nan_to_num", "kernel.fit", "kernel.predict", "sklearn.metrics.r2_score", "zip", "map", "numpy.abs", "numpy.abs"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_explain", "(", "samples", ",", "kernel", ",", "predict_fn", ")", ":", "\n", "# Unpack samples", "\n", "        ", "new_x", ",", "z_prime", ",", "pi", "=", "list", "(", "zip", "(", "*", "samples", ")", ")", "\n", "# get the predictions", "\n", "z_hat", "=", "list", "(", "map", "(", "predict_fn", ",", "new_x", ")", ")", "\n", "\n", "# Try to approximate g(z') ~ f(new_x) <=> g(z') = Z'* W ~ Z_hat", "\n", "_t", "=", "train_test_split", "(", "z_prime", ",", "z_hat", ",", "pi", ",", "test_size", "=", "0.3", ",", "random_state", "=", "42", ")", "\n", "X", ",", "X_test", ",", "y", ",", "y_test", ",", "sw", ",", "sw_test", "=", "_t", "\n", "\n", "# Avoid nan in similarity", "\n", "sw", "=", "np", ".", "nan_to_num", "(", "np", ".", "abs", "(", "sw", ")", ",", "0.01", ")", "\n", "sw_test", "=", "np", ".", "nan_to_num", "(", "np", ".", "abs", "(", "sw_test", ")", ",", "0.01", ")", "\n", "\n", "# Fit g(z') ~ f(new_x)", "\n", "kernel", ".", "fit", "(", "X", ",", "y", ",", "sample_weight", "=", "sw", ")", "\n", "\n", "# Evaluation Score", "\n", "y_pred", "=", "kernel", ".", "predict", "(", "X_test", ")", "\n", "score", "=", "metrics", ".", "r2_score", "(", "y_test", ",", "y_pred", ")", "\n", "\n", "return", "kernel", ",", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.lime.LimeBase.explain": [[126, 157], ["lime.LimeBase._segmenter.segment", "lime.LimeBase._sampler.perturb", "lime.LimeBase._explain", "numpy.array", "lime.LimeBase.to_original"], "methods", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.segment.WindowSegmentation.segment", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationBase.perturb", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.lime.LimeBase._explain", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.lime.LimeBase.to_original"], ["", "def", "explain", "(", "self", ",", "x", ",", "predict_fn", ",", "segmentation_method", "=", "'slopes-max'", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Generate explaination for a time series.\n\n        Args:\n            x (ndarays): a time series with shape n_steps, n_features\n            predict_fn (function): Function to make the prediction given the input of x.\n                For keras models, the predict_fn is `keras_model.predict`.\n                Because the keras model accept input of shape (n_sample, n_steps, n_features),\n                so it is recommended that the model should handle both single or multiple instances.\n            segmentation_method (str, optional): Segmentation method as cited in the paper.\n                Defaults to 'slopes-max'.\n\n        Returns:\n            ndarray: Coefficients of all points in the time series. Same shape with the time series.\n        \"\"\"", "\n", "_", ",", "features", "=", "x", ".", "shape", "\n", "# Get segmentation masks", "\n", "seg_m", "=", "self", ".", "_segmenter", ".", "segment", "(", "x", ",", "segmentation_method", "=", "segmentation_method", ")", "\n", "\n", "# Generate samples", "\n", "samples", "=", "self", ".", "_sampler", ".", "perturb", "(", "x", ",", "seg_m", ")", "\n", "\n", "# Fitting into the model/kernel", "\n", "kernel", "=", "self", ".", "_kernel", "\n", "self", ".", "_kernel", ",", "self", ".", "score", "=", "self", ".", "_explain", "(", "samples", ",", "kernel", ",", "predict_fn", ")", "\n", "\n", "# Set coef of segments", "\n", "coef", "=", "np", ".", "array", "(", "self", ".", "_kernel", ".", "coef_", ")", "\n", "xcoef", "=", "self", ".", "to_original", "(", "coef", ",", "seg_m", ")", "\n", "\n", "return", "xcoef", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.lime.LimeBase.to_original": [[159, 180], ["numpy.zeros_like().astype", "numpy.unique", "enumerate", "numpy.zeros_like"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "to_original", "(", "coef", ",", "segments", ")", ":", "\n", "        ", "\"\"\"Convert coef per segment to coef per point.\n\n        Args:\n            coef (array): Coefficients of unique segments.\n            segments (ndarray): Original segmentations of its time series.\n\n        Returns:\n            ndarray: coefficients of each point and have same shape with the time series (n_steps, n_features).\n        \"\"\"", "\n", "x_coef", "=", "np", ".", "zeros_like", "(", "segments", ")", ".", "astype", "(", "float", ")", "\n", "\n", "# Get labels vectors from segmentation", "\n", "seg_unique_labels", "=", "np", ".", "unique", "(", "segments", ")", "\n", "assert", "coef", ".", "shape", "==", "seg_unique_labels", ".", "shape", "\n", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "seg_unique_labels", ")", ":", "\n", "            ", "idx", "=", "(", "segments", "==", "l", ")", "\n", "x_coef", "[", "idx", "]", "=", "coef", "[", "i", "]", "\n", "", "return", "x_coef", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.lime.LimeTS.__init__": [[185, 220], ["lime.LimeBase.__init__", "sampling.perturb.Perturbation", "sampling.segment.MatrixProfileSegmentation"], "methods", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationAnalysis.__init__"], ["def", "__init__", "(", "self", ",", "\n", "kernel", "=", "None", ",", "\n", "segmenter", "=", "None", ",", "\n", "sampler", "=", "None", ",", "\n", "partitions", "=", "10", ",", "\n", "win_length", "=", "-", "1", ",", "\n", "p_off", "=", "0.5", ",", "\n", "replace_method", "=", "'zeros'", ",", "\n", "n_samples", "=", "100", ",", "\n", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "\"\"\"Construct LIME explainer for time series.\n\n        Args:\n            kernel (obj, optional): The sklearn.linear_model for infering output of explaining model.\n                Defaults to None.\n            segmenter (obj, optional): Segmenation object from tsmule.sampling.segment.\n                Defaults to None.\n            sampler (obj, optional): Perturbation object from tsmule.sampling.perturb.\n                Defaults to None.\n            partitions (int, optional): number of partitions.\n                Defaults to 10.\n            win_length (int, optional): window/subspace length.\n                Defaults to -1.\n            p_off (float, optional): Off probability when perturbing.\n                Defaults to 0.5.\n            replace_method (str, optional): Method to perturbation in tsmule.sampling.replace.\n                Defaults to 'zeros'.\n            n_samples (int, optional): Number of samples in perturbation.\n                Defaults to 100.\n        \"\"\"", "\n", "kernel", "=", "kernel", "or", "Kernels", ".", "Lasso", "\n", "sampler", "=", "sampler", "or", "Perturbation", "(", "p_off", ",", "replace_method", ",", "n_samples", ")", "\n", "segmenter", "=", "segmenter", "or", "MatrixProfileSegmentation", "(", "partitions", ",", "win_length", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "kernel", "=", "kernel", ",", "sampler", "=", "sampler", ",", "segmenter", "=", "segmenter", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationBase.__init__": [[12, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Construct of perturbation base module.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationBase.mask_percentile": [[17, 44], ["functools.partial", "functools.partial", "numpy.percentile", "functools.partial.", "functools.partial.", "functools.partial."], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "mask_percentile", "(", "x", ",", "percentile", "=", "90.", ")", ":", "\n", "        ", "\"\"\"Create a mask based on percentile for the relevance.\n\n        Args:\n            x (ndarray): Relevance or coefficient.\n            percentile (float, optional): Percentile of relevance to mask. Defaults to 90.\n\n        Returns:\n            ndarray: an ndarray mask of 0s and 1s. Same shape with x.\n        \"\"\"", "\n", "# 1/on/keep and 0/off/disabled", "\n", "# n_steps, features = x", "\n", "\n", "# normalized relevance", "\n", "amin", "=", "partial", "(", "np", ".", "min", ",", "axis", "=", "0", ")", "\n", "amax", "=", "partial", "(", "np", ".", "max", ",", "axis", "=", "0", ")", "\n", "relevance_norm", "=", "(", "x", "-", "amin", "(", "x", ")", ")", "/", "(", "amax", "(", "x", ")", "-", "(", "amin", "(", "x", ")", ")", ")", "\n", "\n", "# get points > percentile 90, which are being perturbed", "\n", "p90", "=", "np", ".", "percentile", "(", "relevance_norm", ",", "percentile", ",", "axis", "=", "0", ")", "\n", "m", "=", "(", "relevance_norm", ">", "p90", ")", "\n", "\n", "# reverse to have 1 = on, 0 = off", "\n", "m", "=", "1", "-", "m", "\n", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationBase._randomize": [[46, 74], ["numpy.array", "numpy.ceil().astype", "range", "numpy.stack().astype", "numpy.apply_along_axis", "numpy.concatenate", "numpy.stack().astype.append", "numpy.ceil", "numpy.stack", "numpy.zeros", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.sampling.replace.zeros"], ["", "@", "staticmethod", "\n", "def", "_randomize", "(", "m", ",", "delta", "=", "0.0", ")", ":", "\n", "# Random the masked percentile-90.", "\n", "# m = mask_percentile(x)", "\n", "        ", "m", "=", "np", ".", "array", "(", "m", ")", "# copy", "\n", "n_steps", ",", "features", "=", "m", ".", "shape", "\n", "\n", "# Get number of off-relevance per feature", "\n", "n_offs", "=", "(", "m", "==", "0", ")", ".", "sum", "(", "axis", "=", "0", ")", "\n", "\n", "# Increase/decrease number of off-relevance with delta", "\n", "#   Notice, n_offs is a vector of all features", "\n", "n_offs", "=", "(", "np", ".", "ceil", "(", "n_offs", "*", "(", "1", "+", "delta", ")", ")", ")", ".", "astype", "(", "int", ")", "\n", "n_ons", "=", "(", "n_steps", "-", "n_offs", ")", ".", "astype", "(", "int", ")", "\n", "\n", "# Get probability of disabled relevance", "\n", "random_mask", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "features", ")", ":", "\n", "            ", "t", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "n_offs", "[", "i", "]", ")", ",", "np", ".", "ones", "(", "n_ons", "[", "i", "]", ")", "]", ")", "\n", "random_mask", ".", "append", "(", "t", ")", "\n", "", "random_mask", "=", "np", ".", "stack", "(", "random_mask", ",", "axis", "=", "1", ")", ".", "astype", "(", "int", ")", "\n", "\n", "assert", "m", ".", "shape", "==", "random_mask", ".", "shape", "\n", "\n", "# inplace shuffle for each feature", "\n", "_", "=", "np", ".", "apply_along_axis", "(", "np", ".", "random", ".", "shuffle", ",", "axis", "=", "0", ",", "arr", "=", "random_mask", ")", "\n", "\n", "return", "random_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationBase.mask_randomize": [[76, 92], ["cls.mask_percentile", "cls._randomize"], "methods", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationBase.mask_percentile", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationBase._randomize"], ["", "@", "classmethod", "\n", "def", "mask_randomize", "(", "cls", ",", "x", ",", "percentile", "=", "90", ",", "delta", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"Create mask based on percentile, then randomize the number of masked ones.\n\n        Args:\n            x (ndarray): Relevance or coefficient.\n            percentile (float, optional): Percentile of relevance to mask. Defaults to 90.\n            delta (float, optional): Specifiy when you want to increase or decrease the number of masked one.\n                Defaults to 0.0.\n\n        Returns:\n            ndarray: an randomized mask of 0s and 1s. Same shape with x.\n        \"\"\"", "\n", "m", "=", "cls", ".", "mask_percentile", "(", "x", ",", "percentile", ")", "\n", "m", "=", "cls", ".", "_randomize", "(", "m", ",", "delta", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationBase._perturb": [[94, 101], ["getattr", "getattr."], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_perturb", "(", "x", ",", "m", ",", "replace_method", "=", "'zeros'", ")", ":", "\n", "        ", "repl_fn", "=", "getattr", "(", "repl", ",", "replace_method", ")", "\n", "r", "=", "repl_fn", "(", "x", ",", "m", ")", "\n", "assert", "x", ".", "shape", "==", "m", ".", "shape", "==", "r", ".", "shape", "\n", "z", "=", "x", "*", "m", "+", "r", "*", "(", "1", "-", "m", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationBase.perturb": [[103, 128], ["zip", "evaluation.PerturbationBase.mask_randomize", "evaluation.PerturbationBase.mask_percentile", "evaluation.PerturbationBase._perturb"], "methods", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationBase.mask_randomize", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationBase.mask_percentile", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationBase._perturb"], ["", "def", "perturb", "(", "self", ",", "X", ",", "R", ",", "replace_method", "=", "\"zeros\"", ",", "percentile", "=", "90", ",", "shuffle", "=", "False", ",", "delta", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"Perturb list of time series.\n\n        Args:\n            X (Iterable): Instances with shape (n_steps, features).\n            R (Iterable): Relevances for each instance with shape (n_steps, features).\n            replace_method (str, optional): method to replace disabled. Defaults to \"zeros\".\n            shuffle (bool, optional): If true, then random. Defaults to False.\n                The relevance is randomized based on number of disabled relevance.\n            delta (float, optional): Increase/decrease the number of disabled relevance.\n                Defaults to 0.0.\n\n        Yields:\n            ndarray: multiple perturbed instances\n        \"\"\"", "\n", "for", "x", ",", "r", "in", "zip", "(", "X", ",", "R", ")", ":", "\n", "            ", "assert", "x", ".", "shape", "==", "r", ".", "shape", ",", "f\"Conflict in shape, instance x with shape {x.shape} while relevance r: {r.shape}\"", "\n", "\n", "# Get mask based on relevance", "\n", "if", "shuffle", ":", "\n", "                ", "m", "=", "self", ".", "mask_randomize", "(", "r", ",", "percentile", ",", "delta", ")", "\n", "", "else", ":", "\n", "                ", "m", "=", "self", ".", "mask_percentile", "(", "r", ",", "percentile", ")", "\n", "", "yield", "self", ".", "_perturb", "(", "x", ",", "m", ",", "replace_method", "=", "replace_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationAnalysis.__init__": [[134, 139], ["evaluation.PerturbationBase.__init__", "dict"], "methods", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationAnalysis.__init__"], ["def", "__init__", "(", "self", ",", ")", "->", "None", ":", "\n", "        ", "\"\"\"Construct analysis class for perturbation method.\"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "insights", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationAnalysis.add_insight": [[141, 149], ["evaluation.PerturbationAnalysis.insights.update"], "methods", ["None"], ["", "def", "add_insight", "(", "self", ",", "k", ",", "v", ")", ":", "\n", "        ", "\"\"\"Store the result to the insights dict.\n\n        Args:\n            k (str): name of the insight/evalutation\n            v (float): value/score of the evaluation.\n        \"\"\"", "\n", "self", ".", "insights", ".", "update", "(", "{", "k", ":", "v", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationAnalysis.to_json": [[151, 154], ["None"], "methods", ["None"], ["", "def", "to_json", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "\"\"\"Dumpy insights to json file.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationAnalysis.analysis_relevance": [[156, 219], ["evaluation.PerturbationAnalysis.perturb", "numpy.array", "evaluation.PerturbationAnalysis.perturb", "numpy.array", "predict_fn().ravel", "eval_fn", "evaluation.PerturbationAnalysis.add_insight", "predict_fn().ravel", "eval_fn", "evaluation.PerturbationAnalysis.add_insight", "predict_fn().ravel", "eval_fn", "evaluation.PerturbationAnalysis.add_insight", "list", "list", "predict_fn", "predict_fn", "predict_fn"], "methods", ["home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationBase.perturb", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationBase.perturb", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationAnalysis.add_insight", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationAnalysis.add_insight", "home.repos.pwc.inspect_result.dbvis-ukon_ts-mule.xai.evaluation.PerturbationAnalysis.add_insight"], ["", "def", "analysis_relevance", "(", "self", ",", "X", ",", "y", ",", "R", ",", "\n", "predict_fn", ",", "eval_fn", ",", "\n", "replace_method", "=", "'zeros'", ",", "percentile", "=", "90", ",", "delta", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"Analysis of relevance, proposed by Schlegel et al.[1].\n\n        The analysis perturb the test set X based on its relevance. Then the new generated test sets,\n        including `original`, perturbed `percentile`, and perturbed `random` test sets.\n        These test sets are evaluated and compared each other.\n\n        If error(`original`) <= error(`random`) <= error(`percentile`), then the explanation is valid.\n\n        .. [1] Schlegel, U., Arnout, H., El-Assady, M., Oelke, D., & Keim, D. A. (2019).\n            Towards A Rigorous Evaluation Of XAI Methods On Time Series.\n            In 2019 IEEE/CVF International Conference on Computer Vision Workshop (ICCVW).\n            (pp. 4321-4325).\n\n        Args:\n            X (Iterable): Instances with shape (n_steps, features).\n            y (Iterable): True values of input X.\n            R (Iterable): Relevances for each instance with shape (n_steps, features).\n            predict_fn ([type]): [description]\n            eval_fn ([type]): [description]\n            replace_method (str, optional): method to replace disabled. Defaults to \"zeros\".\n            shuffle (bool, optional): If true, then random. Defaults to False.\n                The relevance is randomized based on number of disabled relevance.\n            percentile (int, optional): [description]. Defaults to 90.\n            delta (float, optional): Increase/decrease the number of disabled relevance.\n                Defaults to 0.0.\n\n        Returns:\n            dict: Scores of 'original', 'percentile' and 'random' test.\n        \"\"\"", "\n", "# Perturb instance based on percentile", "\n", "X_percentile", "=", "self", ".", "perturb", "(", "X", ",", "R", ",", "\n", "replace_method", "=", "replace_method", ",", "\n", "percentile", "=", "percentile", ",", "\n", ")", "\n", "X_percentile", "=", "np", ".", "array", "(", "list", "(", "X_percentile", ")", ")", "\n", "\n", "X_random", "=", "self", ".", "perturb", "(", "X", ",", "R", ",", "\n", "replace_method", "=", "replace_method", ",", "\n", "percentile", "=", "percentile", ",", "\n", "shuffle", "=", "True", ",", "\n", "delta", "=", "delta", "\n", ")", "\n", "X_random", "=", "np", ".", "array", "(", "list", "(", "X_random", ")", ")", "\n", "\n", "# Score for original", "\n", "y_pred", "=", "predict_fn", "(", "X", ")", ".", "ravel", "(", ")", "\n", "score", "=", "eval_fn", "(", "y_pred", ",", "y", ")", "\n", "self", ".", "add_insight", "(", "'original'", ",", "score", ")", "\n", "\n", "# Score for Percentile", "\n", "y_pred", "=", "predict_fn", "(", "X_percentile", ")", ".", "ravel", "(", ")", "\n", "score", "=", "eval_fn", "(", "y_pred", ",", "y", ")", "\n", "self", ".", "add_insight", "(", "'percentile'", ",", "score", ")", "\n", "\n", "# Score for random", "\n", "y_pred", "=", "predict_fn", "(", "X_random", ")", ".", "ravel", "(", ")", "\n", "score", "=", "eval_fn", "(", "y_pred", ",", "y", ")", "\n", "self", ".", "add_insight", "(", "'random'", ",", "score", ")", "\n", "\n", "return", "self", ".", "insights", "\n", "", "", ""]]}