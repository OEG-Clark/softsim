{"home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.compute_projqm.main": [[19, 483], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "ProjQM.read_configurations", "results.append", "results.append", "pandas.DataFrame", "pd.DataFrame.to_csv", "parser.parse_args.a.pop", "parser.parse_args.b.pop", "parser.parse_args.ar.pop", "parser.parse_args.br.pop", "ProjQM.load_images_from_folder", "ProjQM.load_images_from_folder", "ProjQM.load_images_from_folder", "ProjQM.load_images_from_folder", "range", "parser.parse_args.a.pop", "parser.parse_args.b.pop", "open3d.io.read_point_cloud", "open3d.io.read_point_cloud", "print", "ProjQM.orthographic_projection", "print", "ProjQM.orthographic_projection", "print", "ProjQM.orthographic_projection", "print", "ProjQM.orthographic_projection", "range", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "cv2.split", "cv2.cvtColor", "cv2.split", "cv2.cvtColor", "cv2.split", "cv2.cvtColor", "cv2.split", "print", "print", "parser.parse_args.ar.pop", "parser.parse_args.br.pop", "open3d.io.read_point_cloud", "open3d.io.read_point_cloud", "ProjQM.recolor_pcs", "ImlistR[].astype", "ImlistD[].astype", "ImlistRecR[].astype", "ImlistRecD[].astype", "ProjQM.cropp_images", "ProjQM.cropp_images", "ProjQM.cropp_images", "ProjQM.cropp_images", "ProjQM.pad_images", "ProjQM.pad_images", "ProjQM.pad_images", "ProjQM.pad_images", "cv2.cvtColor", "cv2.split", "cv2.cvtColor", "cv2.split", "cv2.cvtColor", "cv2.split", "cv2.cvtColor", "cv2.split", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "ProjQM.compute_dists", "ProjQM.compute_dists", "dists.append", "ProjQM.compute_lpips", "ProjQM.compute_lpips", "lpips.append", "ProjQM.compute_fsim", "ProjQM.compute_fsim", "fsim.append", "ProjQM.compute_vsi", "ProjQM.compute_vsi", "vsi.append", "ProjQM.compute_haarpsi", "ProjQM.compute_haarpsi", "haarpsi.append", "ProjQM.compute_vifp", "ProjQM.compute_vifp", "vifp.append", "ProjQM.compute_ssim", "ProjQM.compute_ssim", "ssim.append", "ProjQM.compute_msssim", "ProjQM.compute_msssim", "ms_ssim.append", "ProjQM.compute_hvspsnr", "ProjQM.compute_hvspsnr", "psnrhvs.append", "psnrhvsm.append", "ProjQM.compute_psnr", "ProjQM.compute_psnr", "psnr.append", "print", "print", "os.path.dirname", "os.path.dirname", "open3d.io.write_point_cloud", "open3d.io.write_point_cloud", "os.path.join", "os.path.join", "ProjQM.save_images", "print", "os.path.join", "os.path.join", "ProjQM.save_images", "print", "os.path.join", "os.path.join", "ProjQM.save_images", "print", "os.path.join", "os.path.join", "ProjQM.save_images", "print", "os.path.join", "os.path.join", "ProjQM.save_images", "print", "os.path.join", "os.path.join", "ProjQM.save_images", "print", "ProjQM.compute_dists", "ProjQM.compute_dists", "dists.append", "ProjQM.compute_lpips", "ProjQM.compute_lpips", "lpips.append", "ProjQM.compute_fsim", "ProjQM.compute_fsim", "fsim.append", "ProjQM.compute_vsi", "ProjQM.compute_vsi", "vsi.append", "ProjQM.compute_haarpsi", "ProjQM.compute_haarpsi", "haarpsi.append", "ProjQM.compute_vifp", "ProjQM.compute_vifp", "vifp.append", "ProjQM.compute_ssim", "ProjQM.compute_ssim", "ssim.append", "ProjQM.compute_msssim", "ProjQM.compute_msssim", "ms_ssim.append", "ProjQM.compute_hvspsnr", "ProjQM.compute_hvspsnr", "psnrhvs.append", "psnrhvsm.append", "ProjQM.compute_psnr", "ProjQM.compute_psnr", "psnr.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "os.stat", "os.stat", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "cv2.cvtColor", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "cv2.cvtColor", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "cv2.cvtColor", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "cv2.cvtColor", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "os.mkdir", "os.mkdir", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "str", "str", "str", "str", "str", "str", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.read_configurations", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.load_images_from_folder", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.load_images_from_folder", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.load_images_from_folder", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.load_images_from_folder", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.orthographic_projection", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.orthographic_projection", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.orthographic_projection", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.orthographic_projection", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.recolor_pcs", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.cropp_images", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.cropp_images", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.cropp_images", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.cropp_images", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.pad_images", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.pad_images", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.pad_images", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.pad_images", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_dists", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_dists", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_lpips", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_lpips", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_fsim", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_fsim", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_vsi", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_vsi", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_haarpsi", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_haarpsi", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_vifp", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_vifp", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_ssim", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_ssim", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_msssim", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_msssim", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_hvspsnr", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_hvspsnr", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_psnr", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_psnr", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.save_images", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.save_images", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.save_images", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.save_images", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.save_images", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.save_images", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_dists", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_dists", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_lpips", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_lpips", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_fsim", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_fsim", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_vsi", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_vsi", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_haarpsi", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_haarpsi", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_vifp", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_vifp", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_ssim", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_ssim", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_msssim", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_msssim", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_hvspsnr", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_hvspsnr", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_psnr", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_psnr"], ["def", "main", "(", ")", ":", "\n", "# input parser", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Projection-based metric for Pc quality assessment\"", ")", "\n", "parser", ".", "add_argument", "(", "'-a'", ",", "nargs", "=", "1", ",", "default", "=", "''", ",", "help", "=", "'Reference point cloud'", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "nargs", "=", "1", ",", "default", "=", "''", ",", "help", "=", "'Degraded point cloud'", ")", "\n", "parser", ".", "add_argument", "(", "'-ar'", ",", "nargs", "=", "1", ",", "default", "=", "''", ",", "help", "=", "'Reference point cloud recolored with degraded color'", ")", "\n", "parser", ".", "add_argument", "(", "'-br'", ",", "nargs", "=", "1", ",", "default", "=", "''", ",", "help", "=", "'Degraded point cloud recolored with reference color'", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--config'", ",", "nargs", "=", "1", ",", "type", "=", "str", ",", "\n", "help", "=", "'Configuration file containing metric parameters'", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--outfile'", ",", "help", "=", "'Output data file'", ")", "\n", "cli_args", "=", "parser", ".", "parse_args", "(", ")", "\n", "config", "=", "ProjQM", ".", "read_configurations", "(", "cli_args", ".", "config", ")", "\n", "\n", "# list of all 2D metrics in this software", "\n", "dists", "=", "[", "]", "\n", "lpips", "=", "[", "]", "\n", "fsim", "=", "[", "]", "\n", "vsi", "=", "[", "]", "\n", "haarpsi", "=", "[", "]", "\n", "vifp", "=", "[", "]", "\n", "ssim", "=", "[", "]", "\n", "ms_ssim", "=", "[", "]", "\n", "psnrhvs", "=", "[", "]", "\n", "psnrhvsm", "=", "[", "]", "\n", "psnr", "=", "[", "]", "\n", "\n", "# check if PCs are already projected, if it is, the projected images are louded ", "\n", "# flag should be set from configuration file", "\n", "if", "(", "config", "[", "\"Projected\"", "]", ")", ":", "\n", "\n", "#read images from folder: all 6 images of a PC should be in a seperate folder", "\n", "        ", "RefPath", "=", "config", "[", "\"PathRefImages\"", "]", "# all paths should be specified in the configuration file", "\n", "DegPath", "=", "config", "[", "\"PathDegImages\"", "]", "\n", "RefPath_rec", "=", "config", "[", "\"PathRefImages_rec\"", "]", "\n", "DegPath_rec", "=", "config", "[", "\"PathDegImages_rec\"", "]", "\n", "\n", "refPC", "=", "cli_args", ".", "a", ".", "pop", "(", ")", "\n", "degPC", "=", "cli_args", ".", "b", ".", "pop", "(", ")", "\n", "refPC_rc", "=", "cli_args", ".", "ar", ".", "pop", "(", ")", "\n", "degPC_rc", "=", "cli_args", ".", "br", ".", "pop", "(", ")", "\n", "if", "(", "refPC", "==", "''", ")", ":", "\n", "            ", "print", "(", "'No Reference PC!'", ")", "\n", "return", "\n", "", "if", "(", "refPC", "==", "''", ")", ":", "\n", "            ", "print", "(", "'No Degraded PC!'", ")", "\n", "return", "\n", "", "if", "(", "refPC_rc", "==", "''", ")", ":", "\n", "            ", "print", "(", "'No Recolored Reference PC!'", ")", "\n", "return", "\n", "", "if", "(", "degPC_rc", "==", "''", ")", ":", "\n", "            ", "print", "(", "'No Recolored Degraded PC!'", ")", "\n", "return", "\n", "\n", "", "FolderR", "=", "RefPath", "+", "refPC", "\n", "FolderD", "=", "DegPath", "+", "degPC", "\n", "FolderRR", "=", "RefPath_rec", "+", "refPC_rc", "\n", "FolderRD", "=", "DegPath_rec", "+", "degPC_rc", "\n", "\n", "ImR_padded", "=", "ProjQM", ".", "load_images_from_folder", "(", "FolderR", ")", "# all six projections of each PC should be in a separate folder", "\n", "ImD_padded", "=", "ProjQM", ".", "load_images_from_folder", "(", "FolderD", ")", "\n", "ImRecR_padded", "=", "ProjQM", ".", "load_images_from_folder", "(", "FolderRR", ")", "\n", "ImRecD_padded", "=", "ProjQM", ".", "load_images_from_folder", "(", "FolderRD", ")", "\n", "\n", "# loop over six projected images", "\n", "for", "i", "in", "range", "(", "0", ",", "6", ")", ":", "\n", "# brg to rgb and yuv. Note that openCV reads images as BGR ", "\n", "            ", "ImR_padded_rgb", "=", "cv2", ".", "cvtColor", "(", "ImR_padded", "[", "i", "]", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "ImD_padded_rgb", "=", "cv2", ".", "cvtColor", "(", "ImD_padded", "[", "i", "]", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "ImRecR_padded_rgb", "=", "cv2", ".", "cvtColor", "(", "ImRecR_padded", "[", "i", "]", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "ImRecD_padded_rgb", "=", "cv2", ".", "cvtColor", "(", "ImRecD_padded", "[", "i", "]", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "ImR_padded_yuv", "=", "cv2", ".", "cvtColor", "(", "ImR_padded", "[", "i", "]", ",", "cv2", ".", "COLOR_BGR2YUV", ")", "\n", "ImR_padded_y", ",", "_", ",", "_", "=", "cv2", ".", "split", "(", "ImR_padded_yuv", ")", "\n", "ImD_padded_yuv", "=", "cv2", ".", "cvtColor", "(", "ImD_padded", "[", "i", "]", ",", "cv2", ".", "COLOR_BGR2YUV", ")", "\n", "ImD_padded_y", ",", "_", ",", "_", "=", "cv2", ".", "split", "(", "ImD_padded_yuv", ")", "\n", "ImRecR_padded_yuv", "=", "cv2", ".", "cvtColor", "(", "ImRecR_padded", "[", "i", "]", ",", "cv2", ".", "COLOR_BGR2YUV", ")", "\n", "ImRecR_padded_y", ",", "_", ",", "_", "=", "cv2", ".", "split", "(", "ImRecR_padded_yuv", ")", "\n", "ImRecD_padded_yuv", "=", "cv2", ".", "cvtColor", "(", "ImRecD_padded", "[", "i", "]", ",", "cv2", ".", "COLOR_BGR2YUV", ")", "\n", "ImRecD_padded_y", ",", "_", ",", "_", "=", "cv2", ".", "split", "(", "ImRecD_padded_yuv", ")", "\n", "\n", "# compute 2D metrics ", "\n", "if", "(", "config", "[", "\"dists\"", "]", ")", ":", "\n", "                ", "dists_ab", "=", "ProjQM", ".", "compute_dists", "(", "ImR_padded_rgb", ",", "ImRecR_padded_rgb", ")", "# on Reference Geometry", "\n", "dists_ba", "=", "ProjQM", ".", "compute_dists", "(", "ImD_padded_rgb", ",", "ImRecD_padded_rgb", ")", "# on Degraded Geometry", "\n", "dists", ".", "append", "(", "-", "0.49870347", "*", "dists_ab", "-", "0.33948725", "*", "dists_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "", "if", "(", "config", "[", "\"lpips\"", "]", ")", ":", "\n", "                ", "lpips_ab", "=", "ProjQM", ".", "compute_lpips", "(", "ImR_padded_rgb", ",", "ImRecR_padded_rgb", ")", "# on Reference Geometry", "\n", "lpips_ba", "=", "ProjQM", ".", "compute_lpips", "(", "ImD_padded_rgb", ",", "ImRecD_padded_rgb", ")", "# on Degraded Geometry", "\n", "lpips", ".", "append", "(", "-", "1.06558819", "*", "lpips_ab", "+", "0.19072108", "*", "lpips_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "", "if", "(", "config", "[", "\"fsim\"", "]", ")", ":", "\n", "                ", "fsim_ab", "=", "ProjQM", ".", "compute_fsim", "(", "ImR_padded_y", ",", "ImRecR_padded_y", ")", "# on Reference Geometry", "\n", "fsim_ba", "=", "ProjQM", ".", "compute_fsim", "(", "ImD_padded_y", ",", "ImRecD_padded_y", ")", "# on Degraded Geometry", "\n", "fsim", ".", "append", "(", "0.04069016", "*", "fsim_ab", "+", "0.70281206", "*", "fsim_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "", "if", "(", "config", "[", "\"vsi\"", "]", ")", ":", "\n", "                ", "vsi_ab", "=", "ProjQM", ".", "compute_vsi", "(", "ImR_padded_rgb", ",", "ImRecR_padded_rgb", ")", "# on Reference Geometry", "\n", "vsi_ba", "=", "ProjQM", ".", "compute_vsi", "(", "ImD_padded_rgb", ",", "ImRecD_padded_rgb", ")", "# on Degraded Geometry", "\n", "vsi", ".", "append", "(", "0.04072121", "*", "vsi_ab", "+", "0.64009922", "*", "vsi_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "", "if", "(", "config", "[", "\"haarpsi\"", "]", ")", ":", "\n", "                ", "haarpsi_ab", "=", "ProjQM", ".", "compute_haarpsi", "(", "ImR_padded_y", ",", "ImRecR_padded_y", ")", "# on Reference Geometry", "\n", "haarpsi_ba", "=", "ProjQM", ".", "compute_haarpsi", "(", "ImD_padded_y", ",", "ImRecD_padded_y", ")", "# on Degraded Geometry", "\n", "haarpsi", ".", "append", "(", "0.23896795", "*", "haarpsi_ab", "+", "0.55268535", "*", "haarpsi_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "", "if", "(", "config", "[", "\"vifp\"", "]", ")", ":", "\n", "                ", "vifp_ab", "=", "ProjQM", ".", "compute_vifp", "(", "ImR_padded_y", ",", "ImRecR_padded_y", ")", "# on Reference Geometry", "\n", "vifp_ba", "=", "ProjQM", ".", "compute_vifp", "(", "ImD_padded_y", ",", "ImRecD_padded_y", ")", "# on Degraded Geometry", "\n", "vifp", ".", "append", "(", "0.67353577", "*", "vifp_ab", "+", "0.15882643", "*", "vifp_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "", "if", "(", "config", "[", "\"ssim\"", "]", ")", ":", "\n", "                ", "ssim_ab", "=", "ProjQM", ".", "compute_ssim", "(", "ImR_padded_y", ",", "ImRecR_padded_y", ")", "# on Reference Geometry", "\n", "ssim_ba", "=", "ProjQM", ".", "compute_ssim", "(", "ImD_padded_y", ",", "ImRecD_padded_y", ")", "# on Degraded Geometry", "\n", "ssim", ".", "append", "(", "0.28337084", "*", "ssim_ab", "+", "0.4550572", "*", "ssim_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "", "if", "(", "config", "[", "\"ms-ssim\"", "]", ")", ":", "\n", "                ", "ms_ssim_ab", "=", "ProjQM", ".", "compute_msssim", "(", "ImR_padded_y", ",", "ImRecR_padded_y", ")", "# on Reference Geometry", "\n", "ms_ssim_ba", "=", "ProjQM", ".", "compute_msssim", "(", "ImD_padded_y", ",", "ImRecD_padded_y", ")", "# on Degraded Geometry", "\n", "ms_ssim", ".", "append", "(", "0.87409658", "*", "ms_ssim_ab", "-", "0.25197625", "*", "ms_ssim_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "", "if", "(", "config", "[", "\"psnrhvs\"", "]", ")", ":", "\n", "                ", "zp0", "=", "8", "-", "(", "ImR_padded_y", ".", "shape", "[", "0", "]", "%", "8", ")", "\n", "zp1", "=", "8", "-", "(", "ImR_padded_y", ".", "shape", "[", "1", "]", "%", "8", ")", "\n", "zp_ImR_padded_y", "=", "ImR_padded_y", "\n", "zp_ImRecR_padded_y", "=", "ImRecR_padded_y", "\n", "if", "(", "zp0", "!=", "0", ")", ":", "\n", "                    ", "zp_ImR_padded_y", "=", "np", ".", "concatenate", "(", "(", "zp_ImR_padded_y", ",", "np", ".", "zeros", "(", "[", "zp0", ",", "zp_ImR_padded_y", ".", "shape", "[", "1", "]", "]", ")", ")", ",", "axis", "=", "0", ")", "\n", "zp_ImRecR_padded_y", "=", "np", ".", "concatenate", "(", "(", "zp_ImRecR_padded_y", ",", "np", ".", "zeros", "(", "[", "zp0", ",", "zp_ImRecR_padded_y", ".", "shape", "[", "1", "]", "]", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "if", "(", "zp1", "!=", "0", ")", ":", "\n", "                    ", "zp_ImR_padded_y", "=", "np", ".", "concatenate", "(", "(", "zp_ImR_padded_y", ",", "np", ".", "zeros", "(", "[", "zp_ImR_padded_y", ".", "shape", "[", "0", "]", ",", "zp1", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "zp_ImRecR_padded_y", "=", "np", ".", "concatenate", "(", "(", "zp_ImRecR_padded_y", ",", "np", ".", "zeros", "(", "[", "zp_ImRecR_padded_y", ".", "shape", "[", "0", "]", ",", "zp1", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "", "hvs_temp", "=", "ProjQM", ".", "compute_hvspsnr", "(", "zp_ImR_padded_y", ",", "zp_ImRecR_padded_y", ")", "\n", "psnrhvsm_ab", "=", "hvs_temp", "[", "0", "]", "# on Reference Geometry", "\n", "psnrhvs_ab", "=", "hvs_temp", "[", "1", "]", "# on Reference Geometry", "\n", "zp0", "=", "8", "-", "(", "ImD_padded_y", ".", "shape", "[", "0", "]", "%", "8", ")", "\n", "zp1", "=", "8", "-", "(", "ImD_padded_y", ".", "shape", "[", "1", "]", "%", "8", ")", "\n", "zp_ImD_padded_y", "=", "ImD_padded_y", "\n", "zp_ImRecD_padded_y", "=", "ImRecD_padded_y", "\n", "if", "(", "zp0", "!=", "0", ")", ":", "\n", "                    ", "zp_ImD_padded_y", "=", "np", ".", "concatenate", "(", "(", "zp_ImD_padded_y", ",", "np", ".", "zeros", "(", "[", "zp0", ",", "zp_ImD_padded_y", ".", "shape", "[", "1", "]", "]", ")", ")", ",", "axis", "=", "0", ")", "\n", "zp_ImRecD_padded_y", "=", "np", ".", "concatenate", "(", "(", "zp_ImRecD_padded_y", ",", "np", ".", "zeros", "(", "[", "zp0", ",", "zp_ImRecD_padded_y", ".", "shape", "[", "1", "]", "]", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "if", "(", "zp1", "!=", "0", ")", ":", "\n", "                    ", "zp_ImD_padded_y", "=", "np", ".", "concatenate", "(", "(", "zp_ImD_padded_y", ",", "np", ".", "zeros", "(", "[", "zp_ImD_padded_y", ".", "shape", "[", "0", "]", ",", "zp1", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "zp_ImRecD_padded_y", "=", "np", ".", "concatenate", "(", "(", "zp_ImRecD_padded_y", ",", "np", ".", "zeros", "(", "[", "zp_ImRecD_padded_y", ".", "shape", "[", "0", "]", ",", "zp1", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "", "hvs_temp", "=", "ProjQM", ".", "compute_hvspsnr", "(", "zp_ImD_padded_y", ",", "zp_ImRecD_padded_y", ")", "\n", "psnrhvsm_ba", "=", "hvs_temp", "[", "0", "]", "# on Degraded Geometry", "\n", "psnrhvs_ba", "=", "hvs_temp", "[", "1", "]", "# on Degraded Geometry", "\n", "psnrhvs", ".", "append", "(", "-", "0.49218699", "*", "psnrhvs_ab", "+", "1.24867639", "*", "psnrhvs_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "psnrhvsm", ".", "append", "(", "-", "0.27060422", "*", "psnrhvsm_ab", "+", "1.02825219", "*", "psnrhvsm_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "", "if", "(", "config", "[", "\"psnr\"", "]", ")", ":", "\n", "                ", "psnr_ab", "=", "ProjQM", ".", "compute_psnr", "(", "ImR_padded_y", ",", "ImRecR_padded_y", ")", "# on Reference Geometry", "\n", "psnr_ba", "=", "ProjQM", ".", "compute_psnr", "(", "ImD_padded_y", ",", "ImRecD_padded_y", ")", "# on Degraded Geometry", "\n", "psnr", ".", "append", "(", "-", "0.51929311", "*", "psnr_ab", "+", "1.2754385", "*", "psnr_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "", "", "", "else", ":", "\n", "# In case that inputs are PCs that are not already projected!", "\n", "# read reference and Degraded PCs", "\n", "        ", "RefPath", "=", "config", "[", "\"pathRef\"", "]", "# all paths should be specified in the configuration file", "\n", "DegPath", "=", "config", "[", "\"pathDeg\"", "]", "\n", "refPC", "=", "cli_args", ".", "a", ".", "pop", "(", ")", "\n", "degPC", "=", "cli_args", ".", "b", ".", "pop", "(", ")", "\n", "if", "(", "refPC", "==", "''", ")", ":", "\n", "            ", "print", "(", "'No Reference PC!'", ")", "\n", "return", "\n", "", "if", "(", "refPC", "==", "''", ")", ":", "\n", "            ", "print", "(", "'No Degraded PC!'", ")", "\n", "return", "\n", "", "fnR", "=", "RefPath", "+", "refPC", "+", "'.ply'", "\n", "fnD", "=", "DegPath", "+", "degPC", "+", "'.ply'", "\n", "cloudR", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "fnR", ")", "\n", "cloudD", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "fnD", ")", "\n", "\n", "# check if recolored PCs are available to be louded", "\n", "if", "(", "config", "[", "\"Recolored\"", "]", ")", ":", "\n", "\n", "# read recolroed PCs", "\n", "            ", "RefPath_rec", "=", "config", "[", "\"pathRef_rec\"", "]", "\n", "DegPath_rec", "=", "config", "[", "\"pathDeg_rec\"", "]", "\n", "refPC_rc", "=", "cli_args", ".", "ar", ".", "pop", "(", ")", "\n", "degPC_rc", "=", "cli_args", ".", "br", ".", "pop", "(", ")", "\n", "if", "(", "refPC_rc", "==", "''", ")", ":", "\n", "                ", "print", "(", "'No Recolored Reference PC!'", ")", "\n", "return", "\n", "", "if", "(", "degPC_rc", "==", "''", ")", ":", "\n", "                ", "print", "(", "'No Recolored Degraded PC!'", ")", "\n", "return", "\n", "", "fnRR", "=", "RefPath_rec", "+", "refPC_rc", "+", "'.ply'", "\n", "fnRD", "=", "DegPath_rec", "+", "degPC_rc", "+", "'.ply'", "\n", "RecoloredR", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "fnRR", ")", "\n", "RecoloredD", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "fnRD", ")", "\n", "# if recolored PCs are not provided as input, Reference and Degraded should be recolored", "\n", "", "else", ":", "\n", "\n", "            ", "(", "RecoloredR", ",", "RecoloredD", ")", "=", "ProjQM", ".", "recolor_pcs", "(", "cloudR", ",", "cloudD", ")", "# recolors cloudR with color of cloudD and vice versa.", "\n", "\n", "# recolred PCs can be saved for further use  ", "\n", "if", "(", "config", "[", "\"savePCs\"", "]", ")", ":", "\n", "                ", "RefPath_rec", "=", "config", "[", "\"pathRef_rec\"", "]", "\n", "DegPath_rec", "=", "config", "[", "\"pathDeg_rec\"", "]", "\n", "refPC_rc", "=", "'rec_rg_'", "+", "degPC", "\n", "degPC_rc", "=", "'rec_dg_'", "+", "degPC", "\n", "fnRR", "=", "RefPath_rec", "+", "refPC_rc", "+", "'.ply'", "\n", "fnRD", "=", "DegPath_rec", "+", "degPC_rc", "+", "'.ply'", "\n", "directory", "=", "os", ".", "path", ".", "dirname", "(", "RefPath_rec", ")", "# if path directory does not exist, create it!", "\n", "try", ":", "\n", "                    ", "os", ".", "stat", "(", "directory", ")", "\n", "", "except", ":", "\n", "                    ", "os", ".", "mkdir", "(", "directory", ")", "\n", "\n", "", "directory", "=", "os", ".", "path", ".", "dirname", "(", "DegPath_rec", ")", "# if path directory does not exist, create it!", "\n", "try", ":", "\n", "                    ", "os", ".", "stat", "(", "directory", ")", "\n", "", "except", ":", "\n", "                    ", "os", ".", "mkdir", "(", "directory", ")", "\n", "\n", "# write PCs on disk", "\n", "", "o3d", ".", "io", ".", "write_point_cloud", "(", "fnRR", ",", "RecoloredR", ",", "write_ascii", "=", "True", ")", "\n", "o3d", ".", "io", ".", "write_point_cloud", "(", "fnRD", ",", "RecoloredD", ",", "write_ascii", "=", "True", ")", "\n", "\n", "# project all four PCs: Reference, Degraded, Recolored Reference and Recolored Degraded", "\n", "", "", "print", "(", "'Reference PC is being projected'", ")", "\n", "(", "ImlistR", ",", "OMListR", ")", "=", "ProjQM", ".", "orthographic_projection", "(", "cloudR", ",", "config", "[", "\"precision\"", "]", ",", "config", "[", "\"ws\"", "]", ")", "\n", "print", "(", "'Degraded PC is being projected'", ")", "\n", "(", "ImlistD", ",", "OMListD", ")", "=", "ProjQM", ".", "orthographic_projection", "(", "cloudD", ",", "config", "[", "\"precision\"", "]", ",", "config", "[", "\"ws\"", "]", ")", "\n", "print", "(", "'Recolored Reference PC is being projected'", ")", "\n", "(", "ImlistRecR", ",", "OMListRecR", ")", "=", "ProjQM", ".", "orthographic_projection", "(", "RecoloredR", ",", "config", "[", "\"precision\"", "]", ",", "config", "[", "\"ws\"", "]", ")", "\n", "print", "(", "'Recolored Degraded PC is being projected'", ")", "\n", "(", "ImlistRecD", ",", "OMListRecD", ")", "=", "ProjQM", ".", "orthographic_projection", "(", "RecoloredD", ",", "config", "[", "\"precision\"", "]", ",", "config", "[", "\"ws\"", "]", ")", "\n", "\n", "# loop over six projected images", "\n", "for", "i", "in", "range", "(", "0", ",", "6", ")", ":", "\n", "# view selection", "\n", "            ", "ImR_curr", "=", "ImlistR", "[", "i", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "ImD_curr", "=", "ImlistD", "[", "i", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "ImRecR_curr", "=", "ImlistRecR", "[", "i", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "ImRecD_curr", "=", "ImlistRecD", "[", "i", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "OMR_curr", "=", "OMListR", "[", "i", "]", "\n", "OMD_curr", "=", "OMListD", "[", "i", "]", "\n", "\n", "# Cropping", "\n", "(", "ImR_cropped", ",", "OMR_cropped", ")", "=", "ProjQM", ".", "cropp_images", "(", "ImR_curr", ",", "OMR_curr", ")", "\n", "(", "ImD_cropped", ",", "OMD_cropped", ")", "=", "ProjQM", ".", "cropp_images", "(", "ImD_curr", ",", "OMD_curr", ")", "\n", "(", "ImRecR_cropped", ",", "_", ")", "=", "ProjQM", ".", "cropp_images", "(", "ImRecR_curr", ",", "OMR_curr", ")", "\n", "(", "ImRecD_cropped", ",", "_", ")", "=", "ProjQM", ".", "cropp_images", "(", "ImRecD_curr", ",", "OMD_curr", ")", "\n", "\n", "# padding ", "\n", "ImR_padded", "=", "ProjQM", ".", "pad_images", "(", "ImR_cropped", ",", "OMR_cropped", ")", "\n", "ImD_padded", "=", "ProjQM", ".", "pad_images", "(", "ImD_cropped", ",", "OMD_cropped", ")", "\n", "ImRecR_padded", "=", "ProjQM", ".", "pad_images", "(", "ImRecR_cropped", ",", "OMR_cropped", ")", "\n", "ImRecD_padded", "=", "ProjQM", ".", "pad_images", "(", "ImRecD_cropped", ",", "OMD_cropped", ")", "\n", "\n", "# rgb to yuv            ", "\n", "ImR_padded_yuv", "=", "cv2", ".", "cvtColor", "(", "ImR_padded", ",", "cv2", ".", "COLOR_RGB2YUV", ")", "\n", "ImR_padded_y", ",", "_", ",", "_", "=", "cv2", ".", "split", "(", "ImR_padded_yuv", ")", "\n", "ImD_padded_yuv", "=", "cv2", ".", "cvtColor", "(", "ImD_padded", ",", "cv2", ".", "COLOR_RGB2YUV", ")", "\n", "ImD_padded_y", ",", "_", ",", "_", "=", "cv2", ".", "split", "(", "ImD_padded_yuv", ")", "\n", "ImRecR_padded_yuv", "=", "cv2", ".", "cvtColor", "(", "ImRecR_padded", ",", "cv2", ".", "COLOR_RGB2YUV", ")", "\n", "ImRecR_padded_y", ",", "_", ",", "_", "=", "cv2", ".", "split", "(", "ImRecR_padded_yuv", ")", "\n", "ImRecD_padded_yuv", "=", "cv2", ".", "cvtColor", "(", "ImRecD_padded", ",", "cv2", ".", "COLOR_RGB2YUV", ")", "\n", "ImRecD_padded_y", ",", "_", ",", "_", "=", "cv2", ".", "split", "(", "ImRecD_padded_yuv", ")", "\n", "\n", "# save Images to use", "\n", "if", "(", "config", "[", "\"saveImages\"", "]", ")", ":", "\n", "# save only padded cropped images", "\n", "\n", "# directory = os.path.dirname(config[\"PathRefImages\"])", "\n", "# try:                                                           # if path directory does not exist, create it!", "\n", "#     os.stat(directory)", "\n", "# except:", "\n", "#     os.mkdir(directory)", "\n", "# fn = config[\"PathRefImages\"] + refPC + str(i) + '.bmp'  ", "\n", "                ", "if", "not", "os", ".", "path", ".", "exists", "(", "config", "[", "\"PathRefImages\"", "]", ")", ":", "# Reference", "\n", "                    ", "os", ".", "mkdir", "(", "config", "[", "\"PathRefImages\"", "]", ")", "\n", "", "directory", "=", "os", ".", "path", ".", "join", "(", "config", "[", "\"PathRefImages\"", "]", ",", "refPC", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "directory", ")", "\n", "", "fn", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "refPC", "+", "str", "(", "i", ")", "+", "'.bmp'", ")", "\n", "status", "=", "ProjQM", ".", "save_images", "(", "fn", ",", "cv2", ".", "cvtColor", "(", "ImR_padded", ",", "cv2", ".", "COLOR_RGB2BGR", ")", ")", "\n", "print", "(", "f'Reference Image from view {i} written to file-system: {status}'", ")", "\n", "\n", "# directory = os.path.dirname(config[\"PathDegImages\"])           ", "\n", "# try:                                                           # if path directory does not exist, create it!", "\n", "#     os.stat(directory)", "\n", "# except:", "\n", "#     os.mkdir(directory)", "\n", "# fn = config[\"PathDegImages\"] + degPC + str(i) + '.bmp'         # Degraded", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", "[", "\"PathDegImages\"", "]", ")", ":", "# Reference", "\n", "                    ", "os", ".", "mkdir", "(", "config", "[", "\"PathDegImages\"", "]", ")", "\n", "", "directory", "=", "os", ".", "path", ".", "join", "(", "config", "[", "\"PathDegImages\"", "]", ",", "degPC", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "directory", ")", "\n", "", "fn", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "degPC", "+", "str", "(", "i", ")", "+", "'.bmp'", ")", "# Degraded", "\n", "status", "=", "ProjQM", ".", "save_images", "(", "fn", ",", "cv2", ".", "cvtColor", "(", "ImD_padded", ",", "cv2", ".", "COLOR_RGB2BGR", ")", ")", "\n", "print", "(", "f'Degraded Image from view {i} written to file-system: {status}'", ")", "\n", "\n", "# directory = os.path.dirname(config[\"PathRefImages_rec\"])       ", "\n", "# try:                                                           # if path directory does not exist, create it!", "\n", "#     os.stat(directory)", "\n", "# except:", "\n", "#     os.mkdir(directory)", "\n", "# fn = config[\"PathRefImages_rec\"] + degPC + '/Recolored_' + refPC + str(i) + '.bmp'   # Recolored Reference", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", "[", "\"PathRefImages_rec\"", "]", ")", ":", "# Reference", "\n", "                    ", "os", ".", "mkdir", "(", "config", "[", "\"PathRefImages_rec\"", "]", ")", "\n", "", "directory", "=", "os", ".", "path", ".", "join", "(", "config", "[", "\"PathRefImages_rec\"", "]", ",", "refPC_rc", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "directory", ")", "\n", "", "fn", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "'Recolored_'", "+", "degPC", "+", "str", "(", "i", ")", "+", "'.bmp'", ")", "# Recolored Reference", "\n", "status", "=", "ProjQM", ".", "save_images", "(", "fn", ",", "cv2", ".", "cvtColor", "(", "ImRecR_padded", ",", "cv2", ".", "COLOR_RGB2BGR", ")", ")", "\n", "print", "(", "f'Recolored Reference Image from view {i} written to file-system: {status}'", ")", "\n", "\n", "# directory = os.path.dirname(config[\"PathDegImages_rec\"])", "\n", "# try:                                                           # if path directory does not exist, create it!", "\n", "#     os.stat(directory)", "\n", "# except:", "\n", "#     os.mkdir(directory)", "\n", "# fn = config[\"PathDegImages_rec\"] + degPC + '/Recolored_' + degPC + str(i) + '.bmp'   # Recolored Degraded", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", "[", "\"PathDegImages_rec\"", "]", ")", ":", "# Reference", "\n", "                    ", "os", ".", "mkdir", "(", "config", "[", "\"PathDegImages_rec\"", "]", ")", "\n", "", "directory", "=", "os", ".", "path", ".", "join", "(", "config", "[", "\"PathDegImages_rec\"", "]", ",", "degPC_rc", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "directory", ")", "\n", "", "fn", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "'Recolored_'", "+", "degPC", "+", "str", "(", "i", ")", "+", "'.bmp'", ")", "# Recolored Degraded", "\n", "status", "=", "ProjQM", ".", "save_images", "(", "fn", ",", "cv2", ".", "cvtColor", "(", "ImRecD_padded", ",", "cv2", ".", "COLOR_RGB2BGR", ")", ")", "\n", "print", "(", "f'Recolored Degraded Image from view {i} written to file-system: {status}'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", "[", "\"pathRefOMs\"", "]", ")", ":", "# Reference", "\n", "                    ", "os", ".", "mkdir", "(", "config", "[", "\"pathRefOMs\"", "]", ")", "\n", "", "directory", "=", "os", ".", "path", ".", "join", "(", "config", "[", "\"pathRefOMs\"", "]", ",", "refPC", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "directory", ")", "\n", "", "fn", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "refPC", "+", "str", "(", "i", ")", "+", "'.bmp'", ")", "\n", "status", "=", "ProjQM", ".", "save_images", "(", "fn", ",", "(", "OMR_cropped", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "# Reference occupancy maps", "\n", "print", "(", "f'Reference occupancy map from view {i} written to file-system: {status}'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", "[", "\"pathDegOMs\"", "]", ")", ":", "# Reference", "\n", "                    ", "os", ".", "mkdir", "(", "config", "[", "\"pathDegOMs\"", "]", ")", "\n", "", "directory", "=", "os", ".", "path", ".", "join", "(", "config", "[", "\"pathDegOMs\"", "]", ",", "refPC", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "directory", ")", "\n", "", "fn", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "degPC", "+", "str", "(", "i", ")", "+", "'.bmp'", ")", "# Degraded occupancy maps", "\n", "status", "=", "ProjQM", ".", "save_images", "(", "fn", ",", "(", "OMD_cropped", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "print", "(", "f'Degraded occupancy map from view {i} written to file-system: {status}'", ")", "\n", "\n", "# compute 2D metrics", "\n", "", "if", "(", "config", "[", "\"dists\"", "]", ")", ":", "\n", "                ", "dists_ab", "=", "ProjQM", ".", "compute_dists", "(", "ImR_padded", ",", "ImRecR_padded", ")", "# on Reference Geometry", "\n", "dists_ba", "=", "ProjQM", ".", "compute_dists", "(", "ImD_padded", ",", "ImRecD_padded", ")", "# on Degraded Geometry", "\n", "dists", ".", "append", "(", "-", "0.49870347", "*", "dists_ab", "-", "0.33948725", "*", "dists_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "", "if", "(", "config", "[", "\"lpips\"", "]", ")", ":", "\n", "                ", "lpips_ab", "=", "ProjQM", ".", "compute_lpips", "(", "ImR_padded", ",", "ImRecR_padded", ")", "# on Reference Geometry", "\n", "lpips_ba", "=", "ProjQM", ".", "compute_lpips", "(", "ImD_padded", ",", "ImRecD_padded", ")", "# on Degraded Geometry", "\n", "lpips", ".", "append", "(", "-", "1.06558819", "*", "lpips_ab", "+", "0.19072108", "*", "lpips_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "", "if", "(", "config", "[", "\"fsim\"", "]", ")", ":", "\n", "                ", "fsim_ab", "=", "ProjQM", ".", "compute_fsim", "(", "ImR_padded_y", ",", "ImRecR_padded_y", ")", "# on Reference Geometry", "\n", "fsim_ba", "=", "ProjQM", ".", "compute_fsim", "(", "ImD_padded_y", ",", "ImRecD_padded_y", ")", "# on Degraded Geometry", "\n", "fsim", ".", "append", "(", "0.04069016", "*", "fsim_ab", "+", "0.70281206", "*", "fsim_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "", "if", "(", "config", "[", "\"vsi\"", "]", ")", ":", "\n", "                ", "vsi_ab", "=", "ProjQM", ".", "compute_vsi", "(", "ImR_padded", ",", "ImRecR_padded", ")", "# on Reference Geometry", "\n", "vsi_ba", "=", "ProjQM", ".", "compute_vsi", "(", "ImD_padded", ",", "ImRecD_padded", ")", "# on Degraded Geometry", "\n", "vsi", ".", "append", "(", "0.04072121", "*", "vsi_ab", "+", "0.64009922", "*", "vsi_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "", "if", "(", "config", "[", "\"haarpsi\"", "]", ")", ":", "\n", "                ", "haarpsi_ab", "=", "ProjQM", ".", "compute_haarpsi", "(", "ImR_padded_y", ",", "ImRecR_padded_y", ")", "# on Reference Geometry", "\n", "haarpsi_ba", "=", "ProjQM", ".", "compute_haarpsi", "(", "ImD_padded_y", ",", "ImRecD_padded_y", ")", "# on Degraded Geometry", "\n", "haarpsi", ".", "append", "(", "0.23896795", "*", "haarpsi_ab", "+", "0.55268535", "*", "haarpsi_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "", "if", "(", "config", "[", "\"vifp\"", "]", ")", ":", "\n", "                ", "vifp_ab", "=", "ProjQM", ".", "compute_vifp", "(", "ImR_padded_y", ",", "ImRecR_padded_y", ")", "# on Reference Geometry", "\n", "vifp_ba", "=", "ProjQM", ".", "compute_vifp", "(", "ImD_padded_y", ",", "ImRecD_padded_y", ")", "# on Degraded Geometry", "\n", "vifp", ".", "append", "(", "0.67353577", "*", "vifp_ab", "+", "0.15882643", "*", "vifp_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "", "if", "(", "config", "[", "\"ssim\"", "]", ")", ":", "\n", "                ", "ssim_ab", "=", "ProjQM", ".", "compute_ssim", "(", "ImR_padded_y", ",", "ImRecR_padded_y", ")", "# on Reference Geometry", "\n", "ssim_ba", "=", "ProjQM", ".", "compute_ssim", "(", "ImD_padded_y", ",", "ImRecD_padded_y", ")", "# on Degraded Geometry", "\n", "ssim", ".", "append", "(", "0.28337084", "*", "ssim_ab", "+", "0.4550572", "*", "ssim_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "", "if", "(", "config", "[", "\"ms-ssim\"", "]", ")", ":", "\n", "                ", "ms_ssim_ab", "=", "ProjQM", ".", "compute_msssim", "(", "ImR_padded_y", ",", "ImRecR_padded_y", ")", "# on Reference Geometry", "\n", "ms_ssim_ba", "=", "ProjQM", ".", "compute_msssim", "(", "ImD_padded_y", ",", "ImRecD_padded_y", ")", "# on Degraded Geometry", "\n", "ms_ssim", ".", "append", "(", "0.87409658", "*", "ms_ssim_ab", "-", "0.25197625", "*", "ms_ssim_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "", "if", "(", "config", "[", "\"psnrhvs\"", "]", ")", ":", "\n", "                ", "zp0", "=", "8", "-", "(", "ImR_padded_y", ".", "shape", "[", "0", "]", "%", "8", ")", "# on Reference Geometry", "\n", "zp1", "=", "8", "-", "(", "ImR_padded_y", ".", "shape", "[", "1", "]", "%", "8", ")", "\n", "zp_ImR_padded_y", "=", "ImR_padded_y", "\n", "zp_ImRecR_padded_y", "=", "ImRecR_padded_y", "\n", "if", "(", "zp0", "!=", "0", ")", ":", "\n", "                    ", "zp_ImR_padded_y", "=", "np", ".", "concatenate", "(", "(", "zp_ImR_padded_y", ",", "np", ".", "zeros", "(", "[", "zp0", ",", "zp_ImR_padded_y", ".", "shape", "[", "1", "]", "]", ")", ")", ",", "axis", "=", "0", ")", "\n", "zp_ImRecR_padded_y", "=", "np", ".", "concatenate", "(", "(", "zp_ImRecR_padded_y", ",", "np", ".", "zeros", "(", "[", "zp0", ",", "zp_ImRecR_padded_y", ".", "shape", "[", "1", "]", "]", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "if", "(", "zp1", "!=", "0", ")", ":", "\n", "                    ", "zp_ImR_padded_y", "=", "np", ".", "concatenate", "(", "(", "zp_ImR_padded_y", ",", "np", ".", "zeros", "(", "[", "zp_ImR_padded_y", ".", "shape", "[", "0", "]", ",", "zp1", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "zp_ImRecR_padded_y", "=", "np", ".", "concatenate", "(", "(", "zp_ImRecR_padded_y", ",", "np", ".", "zeros", "(", "[", "zp_ImRecR_padded_y", ".", "shape", "[", "0", "]", ",", "zp1", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "", "hvs_temp", "=", "ProjQM", ".", "compute_hvspsnr", "(", "zp_ImR_padded_y", ",", "zp_ImRecR_padded_y", ")", "\n", "psnrhvsm_ab", "=", "hvs_temp", "[", "0", "]", "\n", "psnrhvs_ab", "=", "hvs_temp", "[", "1", "]", "\n", "zp0", "=", "8", "-", "(", "ImD_padded_y", ".", "shape", "[", "0", "]", "%", "8", ")", "# on Degraded Geometry", "\n", "zp1", "=", "8", "-", "(", "ImD_padded_y", ".", "shape", "[", "1", "]", "%", "8", ")", "\n", "zp_ImD_padded_y", "=", "ImD_padded_y", "\n", "zp_ImRecD_padded_y", "=", "ImRecD_padded_y", "\n", "if", "(", "zp0", "!=", "0", ")", ":", "\n", "                    ", "zp_ImD_padded_y", "=", "np", ".", "concatenate", "(", "(", "zp_ImD_padded_y", ",", "np", ".", "zeros", "(", "[", "zp0", ",", "zp_ImD_padded_y", ".", "shape", "[", "1", "]", "]", ")", ")", ",", "axis", "=", "0", ")", "\n", "zp_ImRecD_padded_y", "=", "np", ".", "concatenate", "(", "(", "zp_ImRecD_padded_y", ",", "np", ".", "zeros", "(", "[", "zp0", ",", "zp_ImRecD_padded_y", ".", "shape", "[", "1", "]", "]", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "if", "(", "zp1", "!=", "0", ")", ":", "\n", "                    ", "zp_ImD_padded_y", "=", "np", ".", "concatenate", "(", "(", "zp_ImD_padded_y", ",", "np", ".", "zeros", "(", "[", "zp_ImD_padded_y", ".", "shape", "[", "0", "]", ",", "zp1", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "zp_ImRecD_padded_y", "=", "np", ".", "concatenate", "(", "(", "zp_ImRecD_padded_y", ",", "np", ".", "zeros", "(", "[", "zp_ImRecD_padded_y", ".", "shape", "[", "0", "]", ",", "zp1", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "", "hvs_temp", "=", "ProjQM", ".", "compute_hvspsnr", "(", "zp_ImD_padded_y", ",", "zp_ImRecD_padded_y", ")", "\n", "psnrhvsm_ba", "=", "hvs_temp", "[", "0", "]", "\n", "psnrhvs_ba", "=", "hvs_temp", "[", "1", "]", "\n", "psnrhvs", ".", "append", "(", "-", "0.49218699", "*", "psnrhvs_ab", "+", "1.24867639", "*", "psnrhvs_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "psnrhvsm", ".", "append", "(", "-", "0.27060422", "*", "psnrhvsm_ab", "+", "1.02825219", "*", "psnrhvsm_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "", "if", "(", "config", "[", "\"psnr\"", "]", ")", ":", "\n", "                ", "psnr_ab", "=", "ProjQM", ".", "compute_psnr", "(", "ImR_padded_y", ",", "ImRecR_padded_y", ")", "# on Reference Geometry", "\n", "psnr_ba", "=", "ProjQM", ".", "compute_psnr", "(", "ImD_padded_y", ",", "ImRecD_padded_y", ")", "# on Degraded Geometry", "\n", "psnr", ".", "append", "(", "-", "0.51929311", "*", "psnr_ab", "+", "1.2754385", "*", "psnr_ba", ")", "# fusion (weights are obtained using a linear regressor)", "\n", "\n", "# list of output metrics", "\n", "", "", "", "results", "=", "[", "]", "\n", "results", ".", "append", "(", "[", "\"DISTS\"", ",", "\"LPIPS\"", ",", "\"FSIM\"", ",", "\"VSI\"", ",", "\"HaarPSI\"", ",", "\"VIFp\"", ",", "\"SSIM\"", ",", "\"MS-SSIM\"", ",", "\"PSNR-HVS\"", ",", "\"PSNR-HVS-M\"", ",", "\"PSNR\"", "]", ")", "\n", "\n", "# averaging the metric over six different projected views from each PC", "\n", "if", "(", "config", "[", "\"dists\"", "]", ")", ":", "\n", "        ", "dists_sym", "=", "sum", "(", "dists", ")", "/", "len", "(", "dists", ")", "\n", "print", "(", "f'DSITS: {dists_sym}'", ")", "\n", "", "else", ":", "\n", "        ", "dists_sym", "=", "''", "\n", "", "if", "(", "config", "[", "\"lpips\"", "]", ")", ":", "\n", "        ", "lpips_sym", "=", "sum", "(", "lpips", ")", "/", "len", "(", "lpips", ")", "\n", "print", "(", "f'LPIPS: {lpips_sym}'", ")", "\n", "", "else", ":", "\n", "        ", "lpips_sym", "=", "''", "\n", "", "if", "(", "config", "[", "\"fsim\"", "]", ")", ":", "\n", "        ", "fsim_sym", "=", "sum", "(", "fsim", ")", "/", "len", "(", "fsim", ")", "\n", "print", "(", "f'FSIM: {fsim_sym}'", ")", "\n", "", "else", ":", "\n", "        ", "fsim_sym", "=", "''", "\n", "", "if", "(", "config", "[", "\"vsi\"", "]", ")", ":", "\n", "        ", "vsi_sym", "=", "sum", "(", "vsi", ")", "/", "len", "(", "vsi", ")", "\n", "print", "(", "f'VSI: {vsi_sym}'", ")", "\n", "", "else", ":", "\n", "        ", "vsi_sym", "=", "''", "\n", "", "if", "(", "config", "[", "\"haarpsi\"", "]", ")", ":", "\n", "        ", "haarpsi_sym", "=", "sum", "(", "haarpsi", ")", "/", "len", "(", "haarpsi", ")", "\n", "print", "(", "f'HaarPSI: {haarpsi_sym}'", ")", "\n", "", "else", ":", "\n", "        ", "haarpsi_sym", "=", "''", "\n", "", "if", "(", "config", "[", "\"vifp\"", "]", ")", ":", "\n", "        ", "vifp_sym", "=", "sum", "(", "vifp", ")", "/", "len", "(", "vifp", ")", "\n", "print", "(", "f'VIFp: {vifp_sym}'", ")", "\n", "", "else", ":", "\n", "        ", "vifp_sym", "=", "''", "\n", "", "if", "(", "config", "[", "\"ssim\"", "]", ")", ":", "\n", "        ", "ssim_sym", "=", "sum", "(", "ssim", ")", "/", "len", "(", "ssim", ")", "\n", "print", "(", "f'SSIM: {ssim_sym}'", ")", "\n", "", "else", ":", "\n", "        ", "ssim_sym", "=", "''", "\n", "", "if", "(", "config", "[", "\"ms-ssim\"", "]", ")", ":", "\n", "        ", "ms_ssim_sym", "=", "sum", "(", "ms_ssim", ")", "/", "len", "(", "ms_ssim", ")", "\n", "print", "(", "f'MS-SSIM: {ms_ssim_sym}'", ")", "\n", "", "else", ":", "\n", "        ", "ms_ssim_sym", "=", "''", "\n", "", "if", "(", "config", "[", "\"psnrhvs\"", "]", ")", ":", "\n", "        ", "psnrhvs_sym", "=", "sum", "(", "psnrhvs", ")", "/", "len", "(", "psnrhvs", ")", "\n", "psnrhvsm_sym", "=", "sum", "(", "psnrhvsm", ")", "/", "len", "(", "psnrhvsm", ")", "\n", "print", "(", "f'PSNR_HVS: {psnrhvs_sym}'", ")", "\n", "print", "(", "f'PSNR_HVS_M: {psnrhvsm_sym}'", ")", "\n", "", "else", ":", "\n", "        ", "psnrhvs_sym", "=", "''", "\n", "psnrhvsm_sym", "=", "''", "\n", "", "if", "(", "config", "[", "\"psnr\"", "]", ")", ":", "\n", "        ", "psnr_sym", "=", "sum", "(", "psnr", ")", "/", "len", "(", "psnr", ")", "\n", "print", "(", "f'Y-PSNR: {psnr_sym}'", ")", "\n", "", "else", ":", "\n", "        ", "psnr_sym", "=", "''", "\n", "\n", "", "results", ".", "append", "(", "[", "dists_sym", ",", "lpips_sym", ",", "fsim_sym", ",", "vsi_sym", ",", "haarpsi_sym", ",", "vifp_sym", ",", "ssim_sym", ",", "ms_ssim_sym", ",", "psnrhvs_sym", ",", "psnrhvsm_sym", ",", "psnr_sym", "]", ")", "\n", "df", "=", "pd", ".", "DataFrame", "(", "results", ")", "\n", "df", ".", "to_csv", "(", "cli_args", ".", "outfile", ",", "index", "=", "False", ",", "header", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.psnr_hvs_m.psnrhvsm": [[19, 186], ["numpy.array", "numpy.array", "skimage.util.view_as_blocks", "skimage.util.view_as_blocks", "range", "print", "range", "scipy.fftpack.dct", "scipy.fftpack.dct", "scipy.fftpack.dct", "scipy.fftpack.dct", "psnr_hvs_m.maskeff", "psnr_hvs_m.maskeff", "range", "maskeff.copy", "range", "numpy.log10", "numpy.log10", "abs", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.psnr_hvs_m.maskeff", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.psnr_hvs_m.maskeff"], ["def", "psnrhvsm", "(", "img1", "=", "None", ",", "img2", "=", "None", ",", "wstep", "=", "8", ")", ":", "\n", "    ", "p_hvs_m", "=", "0", "\n", "p_hvs", "=", "0", "\n", "\n", "'''\n    ========================================================================\n        \n        Calculation of PSNR-HVS-M and PSNR-HVS image quality measures\n        \n        PSNR-HVS-M is Peak Signal to Noise Ratio taking into account \n        Contrast Sensitivity Function (CSF) and between-coefficient   \n        contrast masking of DCT basis functions\n        PSNR-HVS is Peak Signal to Noise Ratio taking into account only CSF\n        \n         Copyright(c) 2006 Nikolay Ponomarenko \n          All Rights Reserved\n        \n         Homepage: http://ponomarenko.info, E-mail: nikolay{}ponomarenko.info\n        \n        ----------------------------------------------------------------------\n        \n        # Permission to use, copy, or modify this software and its documentation\n        for educational and research purposes only and without fee is hereby\n        granted, provided that this copyright notice and the original authors'\n        names appear on all copies and supporting documentation. This program\n        shall not be used, rewritten, or adapted as the basis of a commercial\n        software or hardware product without first obtaining permission of the\n        authors. The authors make no representations about the suitability of\n        this software for any purpose. It is provided \"as is\" without express\n         or implied warranty.\n        \n        #----------------------------------------------------------------------\n        \n        This is an implementation of the algorithm for calculating the PSNR-HVS-M\n        or PSNR-HVS between two images. Please refer to the following papers:\n       \n       # PSNR-HVS-M:\n         [1] Nikolay Ponomarenko, Flavia Silvestri, Karen Egiazarian, Marco Carli, \n             Jaakko Astola, Vladimir Lukin, \"On between-coefficient contrast masking \n             of DCT basis functions\", CD-ROM Proceedings of the Third International \n             Workshop on Video Processing and Quality Metrics for Consumer Electronics \n             VPQM-07, Scottsdale, Arizona, USA, 25-26 January, 2007, 4 p.\n           \n           # PSNR-HVS:\n         [2] K. Egiazarian, J. Astola, N. Ponomarenko, V. Lukin, F. Battisti, \n             M. Carli, New full-reference quality metrics based on HVS, CD-ROM \n             Proceedings of the Second International Workshop on Video Processing \n             and Quality Metrics, Scottsdale, USA, 2006, 4 p.\n       \n        Kindly report any suggestions or corrections to uagames{}mail.ru\n       \n       #----------------------------------------------------------------------\n       \n       # Input : (1) img1: the first image being compared\n                 (2) img2: the second image being compared\n                 (3) wstep: step of 8x8 window to calculate DCT \n                     coefficients. Default value is 8.\n           \n       # Output: (1) p_hvs_m: the PSNR-HVS-M value between 2 images.\n                     If one of the images being compared is regarded as \n                     perfect quality, then PSNR-HVS-M can be considered as the\n                     quality measure of the other image.\n                     If compared images are visually undistingwished, \n                     then PSNR-HVS-M = 100000.\n                 (2) p_hvs: the PSNR-HVS value between 2 images.\n        \n        # Default Usage:\n            Given 2 test images img1 and img2, whose dynamic range is 0-255\n        \n           [p_hvs_m, p_hvs] = psnrhvsm(img1, img2);\n        \n             See the results:\n            \n             p_hvs_m  # Gives the PSNR-HVS-M value\n             p_hvs    # Gives the PSNR-HVS value\n    ========================================================================\n    '''", "\n", "if", "img1", ".", "size", "!=", "img2", ".", "size", ":", "\n", "        ", "p_hvs_m", "=", "-", "Inf", "\n", "p_hvs", "=", "-", "Inf", "\n", "\n", "print", "(", "'returned on img seizes'", ")", "\n", "return", "p_hvs_m", ",", "p_hvs", "\n", "\n", "\n", "", "CSFCof", "=", "np", ".", "array", "(", "[", "[", "1.608443", ",", "2.339554", ",", "2.573509", ",", "1.608443", ",", "1.072295", ",", "0.643377", ",", "0.504610", ",", "0.421887", "]", ",", "\n", "[", "2.144591", ",", "2.144591", ",", "1.838221", ",", "1.354478", ",", "0.989811", ",", "0.443708", ",", "0.428918", ",", "0.467911", "]", ",", "\n", "[", "1.838221", ",", "1.979622", ",", "1.608443", ",", "1.072295", ",", "0.643377", ",", "0.451493", ",", "0.372972", ",", "0.459555", "]", ",", "\n", "[", "1.838221", ",", "1.513829", ",", "1.169777", ",", "0.887417", ",", "0.504610", ",", "0.295806", ",", "0.321689", ",", "0.415082", "]", ",", "\n", "[", "1.429727", ",", "1.169777", ",", "0.695543", ",", "0.459555", ",", "0.378457", ",", "0.236102", ",", "0.249855", ",", "0.334222", "]", ",", "\n", "[", "1.072295", ",", "0.735288", ",", "0.467911", ",", "0.402111", ",", "0.317717", ",", "0.247453", ",", "0.227744", ",", "0.279729", "]", ",", "\n", "[", "0.525206", ",", "0.402111", ",", "0.329937", ",", "0.295806", ",", "0.249855", ",", "0.212687", ",", "0.214459", ",", "0.254803", "]", ",", "\n", "[", "0.357432", ",", "0.279729", ",", "0.270896", ",", "0.262603", ",", "0.229778", ",", "0.257351", ",", "0.249855", ",", "0.25995", "]", "]", ")", "\n", "# see an explanation in [2]", "\n", "\n", "MaskCof", "=", "np", ".", "array", "(", "[", "[", "0.390625", ",", "0.826446", ",", "1.000000", ",", "0.390625", ",", "0.173611", ",", "0.062500", ",", "0.038447", ",", "0.026874", "]", ",", "\n", "[", "0.694444", ",", "0.694444", ",", "0.510204", ",", "0.277008", ",", "0.147929", ",", "0.029727", ",", "0.027778", ",", "0.033058", "]", ",", "\n", "[", "0.510204", ",", "0.591716", ",", "0.390625", ",", "0.173611", ",", "0.062500", ",", "0.030779", ",", "0.021004", ",", "0.031888", "]", ",", "\n", "[", "0.510204", ",", "0.346021", ",", "0.206612", ",", "0.118906", ",", "0.038447", ",", "0.013212", ",", "0.015625", ",", "0.026015", "]", ",", "\n", "[", "0.308642", ",", "0.206612", ",", "0.073046", ",", "0.031888", ",", "0.021626", ",", "0.008417", ",", "0.009426", ",", "0.016866", "]", ",", "\n", "[", "0.173611", ",", "0.081633", ",", "0.033058", ",", "0.024414", ",", "0.015242", ",", "0.009246", ",", "0.007831", ",", "0.011815", "]", ",", "\n", "[", "0.041649", ",", "0.024414", ",", "0.016437", ",", "0.013212", ",", "0.009426", ",", "0.006830", ",", "0.006944", ",", "0.009803", "]", ",", "\n", "[", "0.019290", ",", "0.011815", ",", "0.011080", ",", "0.010412", ",", "0.007972", ",", "0.010000", ",", "0.009426", ",", "0.010203", "]", "]", ")", "\n", "# see an explanation in [1]", "\n", "\n", "S1", "=", "0", "\n", "S2", "=", "0", "\n", "Num", "=", "0", "\n", "X", "=", "0", "\n", "Y", "=", "0", "\n", "window_shape", "=", "(", "8", ",", "8", ")", "\n", "\n", "A", "=", "view_as_blocks", "(", "img1", ",", "window_shape", ")", "\n", "B", "=", "view_as_blocks", "(", "img2", ",", "window_shape", ")", "\n", "num_patchsX", "=", "A", ".", "shape", "[", "0", "]", "\n", "num_patchsY", "=", "A", ".", "shape", "[", "1", "]", "\n", "\n", "for", "px", "in", "range", "(", "num_patchsX", ")", ":", "\n", "        ", "for", "py", "in", "range", "(", "num_patchsY", ")", ":", "\n", "# compute the 2d Discrete Cosine Transform", "\n", "            ", "patchA", "=", "A", "[", "px", "]", "[", "py", "]", "\n", "patchB", "=", "B", "[", "px", "]", "[", "py", "]", "\n", "#dct2(A)", "\n", "a_dct", "=", "dct", "(", "patchA", ",", "type", "=", "2", ",", "axis", "=", "1", ",", "norm", "=", "'ortho'", ")", "\n", "A_dct", "=", "dct", "(", "a_dct", ",", "type", "=", "2", ",", "axis", "=", "0", ",", "norm", "=", "'ortho'", ")", "\n", "#dct2(B)", "\n", "b_dct", "=", "dct", "(", "patchB", ",", "type", "=", "2", ",", "axis", "=", "1", ",", "norm", "=", "'ortho'", ")", "\n", "B_dct", "=", "dct", "(", "b_dct", ",", "type", "=", "2", ",", "axis", "=", "0", ",", "norm", "=", "'ortho'", ")", "\n", "\n", "MaskA", "=", "maskeff", "(", "patchA", ",", "A_dct", ")", "\n", "MaskB", "=", "maskeff", "(", "patchB", ",", "B_dct", ")", "\n", "#print('MaskA',MaskA.shape)", "\n", "#print('MaskB',MaskB.shape)", "\n", "if", "MaskB", ">", "MaskA", ":", "\n", "                ", "MaskA", "=", "MaskB", ".", "copy", "(", ")", "\n", "#X=X + step", "\n", "", "for", "k", "in", "range", "(", "7", ")", ":", "\n", "                ", "for", "l", "in", "range", "(", "7", ")", ":", "\n", "                    ", "u", "=", "abs", "(", "A_dct", "[", "k", ",", "l", "]", "-", "B_dct", "[", "k", ",", "l", "]", ")", "\n", "S2", "=", "S2", "+", "(", "(", "np", ".", "dot", "(", "u", ",", "CSFCof", "[", "k", ",", "l", "]", ")", ")", "**", "2", ")", "#PSNR-hvs", "\n", "if", "(", "k", "!=", "1", ")", "or", "(", "l", "!=", "1", ")", ":", "\n", "                        ", "if", "u", "<", "MaskA", "/", "MaskCof", "[", "k", ",", "l", "]", ":", "\n", "                            ", "u", "=", "0", "\n", "", "else", ":", "\n", "                            ", "u", "=", "u", "-", "(", "MaskA", "/", "MaskCof", "[", "k", ",", "l", "]", ")", "\n", "", "", "S1", "=", "S1", "+", "(", "(", "np", ".", "dot", "(", "u", ",", "CSFCof", "[", "k", ",", "l", "]", ")", ")", "**", "2", ")", "# PSNR-HVS-M", "\n", "Num", "=", "Num", "+", "1", "\n", "\n", "", "", "", "", "if", "Num", "!=", "0", ":", "\n", "        ", "S1", "=", "S1", "/", "Num", "\n", "S2", "=", "S2", "/", "Num", "\n", "if", "S1", "==", "0", ":", "\n", "            ", "p_hvs_m", "=", "100000", "\n", "#print(\"p_hvs_m=100000\")", "\n", "", "else", ":", "\n", "            ", "p_hvs_m", "=", "10", "*", "(", "np", ".", "log10", "(", "255", "*", "(", "255", "/", "S1", ")", ")", ")", "\n", "#print('p_hvs_m: {:.0f}'.format(p_hvs_m))", "\n", "", "if", "S2", "==", "0", ":", "\n", "#print(\"p_hvs=100000\")", "\n", "            ", "p_hvs", "=", "100000", "\n", "", "else", ":", "\n", "            ", "p_hvs", "=", "10", "*", "(", "np", ".", "log10", "(", "255", "*", "(", "255", "/", "S2", ")", ")", ")", "\n", "#print('p_hvs: {:.0f}'.format(p_hvs))", "\n", "#print('returned on end of loop')  ", "\n", "#print(p_hvs_m)", "\n", "#print(p_hvs)", "\n", "", "", "return", "p_hvs_m", ",", "p_hvs", "\n", "\n"]], "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.psnr_hvs_m.maskeff": [[188, 218], ["numpy.array", "range", "psnr_hvs_m.vari", "range", "psnr_hvs_m.vari", "psnr_hvs_m.vari", "psnr_hvs_m.vari", "psnr_hvs_m.vari", "numpy.sqrt", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.psnr_hvs_m.vari", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.psnr_hvs_m.vari", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.psnr_hvs_m.vari", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.psnr_hvs_m.vari", "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.psnr_hvs_m.vari"], ["", "def", "maskeff", "(", "z", "=", "None", ",", "zdct", "=", "None", ")", ":", "\n", "\n", "# Calculation of Enorm value (see [1])", "\n", "    ", "m", "=", "0", "\n", "MaskCof", "=", "np", ".", "array", "(", "[", "[", "0.390625", ",", "0.826446", ",", "1.000000", ",", "0.390625", ",", "0.173611", ",", "0.062500", ",", "0.038447", ",", "0.026874", "]", ",", "\n", "[", "0.694444", ",", "0.694444", ",", "0.510204", ",", "0.277008", ",", "0.147929", ",", "0.029727", ",", "0.027778", ",", "0.033058", "]", ",", "\n", "[", "0.510204", ",", "0.591716", ",", "0.390625", ",", "0.173611", ",", "0.062500", ",", "0.030779", ",", "0.021004", ",", "0.031888", "]", ",", "\n", "[", "0.510204", ",", "0.346021", ",", "0.206612", ",", "0.118906", ",", "0.038447", ",", "0.013212", ",", "0.015625", ",", "0.026015", "]", ",", "\n", "[", "0.308642", ",", "0.206612", ",", "0.073046", ",", "0.031888", ",", "0.021626", ",", "0.008417", ",", "0.009426", ",", "0.016866", "]", ",", "\n", "[", "0.173611", ",", "0.081633", ",", "0.033058", ",", "0.024414", ",", "0.015242", ",", "0.009246", ",", "0.007831", ",", "0.011815", "]", ",", "\n", "[", "0.041649", ",", "0.024414", ",", "0.016437", ",", "0.013212", ",", "0.009426", ",", "0.006830", ",", "0.006944", ",", "0.009803", "]", ",", "\n", "[", "0.01929", ",", "0.0118150", ",", "0.011080", ",", "0.010412", ",", "0.007972", ",", "0.010000", ",", "0.009426", ",", "0.010203", "]", "]", ")", "\n", "# see an explanation in [1]", "\n", "\n", "for", "k", "in", "range", "(", "7", ")", ":", "\n", "        ", "for", "l", "in", "range", "(", "7", ")", ":", "\n", "            ", "if", "(", "k", "!=", "1", ")", "or", "(", "l", "!=", "1", ")", ":", "\n", "                ", "m", "=", "m", "+", "np", ".", "dot", "(", "(", "zdct", "[", "k", ",", "l", "]", "**", "2", ")", ",", "MaskCof", "[", "k", ",", "l", "]", ")", "\n", "\n", "", "", "", "pop", "=", "vari", "(", "z", ")", "\n", "if", "pop", "!=", "0", ":", "\n", "        ", "block1", "=", "vari", "(", "z", "[", "0", ":", "3", ",", "0", ":", "3", "]", ")", "\n", "block2", "=", "vari", "(", "z", "[", "0", ":", "3", ",", "4", ":", "7", "]", ")", "\n", "block3", "=", "vari", "(", "z", "[", "4", ":", "7", ",", "4", ":", "7", "]", ")", "\n", "block4", "=", "vari", "(", "z", "[", "4", ":", "7", ",", "0", ":", "3", "]", ")", "\n", "pop", "=", "(", "block1", "+", "block2", "+", "block3", "+", "block4", ")", "/", "pop", "\n", "\n", "", "m", "=", "np", ".", "sqrt", "(", "np", ".", "dot", "(", "m", ",", "pop", ")", ")", "/", "32", "\n", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.psnr_hvs_m.vari": [[219, 224], ["AA.flatten", "numpy.var", "numpy.dot"], "function", ["None"], ["", "def", "vari", "(", "AA", "=", "None", ")", ":", "\n", "    ", "flat", "=", "AA", ".", "flatten", "(", "'F'", ")", "\n", "varia", "=", "np", ".", "var", "(", "flat", ")", "\n", "d", "=", "np", ".", "dot", "(", "varia", ",", "flat", ".", "size", ")", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.read_configurations": [[27, 68], ["configparser.ConfigParser", "configparser.ConfigParser.read", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get", "configparser.ConfigParser.get"], "function", ["None"], ["def", "read_configurations", "(", "fn", ")", ":", "\n", "    ", "import", "configparser", "\n", "cfg", "=", "{", "}", "\n", "config", "=", "configparser", ".", "ConfigParser", "(", ")", "\n", "config", ".", "read", "(", "fn", ")", "\n", "\n", "# read paths", "\n", "cfg", "[", "'pathRef'", "]", "=", "config", ".", "get", "(", "'Paths'", ",", "'PCA'", ")", "\n", "cfg", "[", "'pathDeg'", "]", "=", "config", ".", "get", "(", "'Paths'", ",", "'PCB'", ")", "\n", "cfg", "[", "'pathRef_rec'", "]", "=", "config", ".", "get", "(", "'Paths'", ",", "'PCA_rec'", ")", "\n", "cfg", "[", "'pathDeg_rec'", "]", "=", "config", ".", "get", "(", "'Paths'", ",", "'PCB_rec'", ")", "\n", "cfg", "[", "'PathRefImages'", "]", "=", "config", ".", "get", "(", "'Paths'", ",", "'RefImages'", ")", "\n", "cfg", "[", "'PathDegImages'", "]", "=", "config", ".", "get", "(", "'Paths'", ",", "'DegImages'", ")", "\n", "cfg", "[", "'PathRefImages_rec'", "]", "=", "config", ".", "get", "(", "'Paths'", ",", "'RefImages_rec'", ")", "\n", "cfg", "[", "'PathDegImages_rec'", "]", "=", "config", ".", "get", "(", "'Paths'", ",", "'DegImages_rec'", ")", "\n", "cfg", "[", "'pathRefOMs'", "]", "=", "config", ".", "get", "(", "'Paths'", ",", "'RefOMs'", ")", "\n", "cfg", "[", "'pathDegOMs'", "]", "=", "config", ".", "get", "(", "'Paths'", ",", "'DegOMs'", ")", "\n", "\n", "# read flags", "\n", "cfg", "[", "'Projected'", "]", "=", "int", "(", "config", ".", "get", "(", "'Flags'", ",", "'projected'", ")", ")", "\n", "cfg", "[", "'Recolored'", "]", "=", "int", "(", "config", ".", "get", "(", "'Flags'", ",", "'Recolored'", ")", ")", "\n", "cfg", "[", "'savePCs'", "]", "=", "int", "(", "config", ".", "get", "(", "'Flags'", ",", "'savePCs'", ")", ")", "\n", "cfg", "[", "'saveImages'", "]", "=", "int", "(", "config", ".", "get", "(", "'Flags'", ",", "'saveImages'", ")", ")", "\n", "\n", "# read parameters", "\n", "cfg", "[", "'precision'", "]", "=", "int", "(", "config", ".", "get", "(", "'parameters'", ",", "'precision'", ")", ")", "\n", "cfg", "[", "'ws'", "]", "=", "int", "(", "config", ".", "get", "(", "'parameters'", ",", "'window size'", ")", ")", "\n", "\n", "# read metric names", "\n", "cfg", "[", "'dists'", "]", "=", "int", "(", "config", ".", "get", "(", "'2D Metrics'", ",", "'dists'", ")", ")", "\n", "cfg", "[", "'lpips'", "]", "=", "int", "(", "config", ".", "get", "(", "'2D Metrics'", ",", "'lpips'", ")", ")", "\n", "cfg", "[", "'fsim'", "]", "=", "int", "(", "config", ".", "get", "(", "'2D Metrics'", ",", "'fsim'", ")", ")", "\n", "cfg", "[", "'vsi'", "]", "=", "int", "(", "config", ".", "get", "(", "'2D Metrics'", ",", "'vsi'", ")", ")", "\n", "cfg", "[", "'haarpsi'", "]", "=", "int", "(", "config", ".", "get", "(", "'2D Metrics'", ",", "'haarpsi'", ")", ")", "\n", "cfg", "[", "'vifp'", "]", "=", "int", "(", "config", ".", "get", "(", "'2D Metrics'", ",", "'vifp'", ")", ")", "\n", "cfg", "[", "'ssim'", "]", "=", "int", "(", "config", ".", "get", "(", "'2D Metrics'", ",", "'ssim'", ")", ")", "\n", "cfg", "[", "'ms-ssim'", "]", "=", "int", "(", "config", ".", "get", "(", "'2D Metrics'", ",", "'ms-ssim'", ")", ")", "\n", "cfg", "[", "'psnrhvs'", "]", "=", "int", "(", "config", ".", "get", "(", "'2D Metrics'", ",", "'psnr-hvs'", ")", ")", "\n", "cfg", "[", "'psnr'", "]", "=", "int", "(", "config", ".", "get", "(", "'2D Metrics'", ",", "'psnr'", ")", ")", "\n", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.load_images_from_folder": [[77, 84], ["os.listdir", "cv2.imread", "os.path.join", "images.append"], "function", ["None"], ["def", "load_images_from_folder", "(", "folder", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "folder", ")", ":", "\n", "        ", "img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", ")", "\n", "if", "img", "is", "not", "None", ":", "\n", "            ", "images", ".", "append", "(", "img", ")", "\n", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.recolor_pcs": [[93, 141], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.zeros", "numpy.zeros", "open3d.geometry.KDTreeFlann", "open3d.geometry.KDTreeFlann", "range", "range", "numpy.asarray", "numpy.asarray", "collections.Counter", "collections.Counter", "collections.Counter.keys", "numpy.sqrt", "collections.Counter.keys", "numpy.sqrt", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "len", "o3d.geometry.KDTreeFlann.search_knn_vector_3d", "np.asarray.append", "len", "o3d.geometry.KDTreeFlann.search_knn_vector_3d", "np.asarray.append", "sum", "sum"], "function", ["None"], ["def", "recolor_pcs", "(", "cloudA", ",", "cloudB", ")", ":", "\n", "\n", "    ", "GA", "=", "np", ".", "asarray", "(", "cloudA", ".", "points", ")", "\n", "CA", "=", "np", ".", "asarray", "(", "cloudA", ".", "colors", ")", "\n", "GB", "=", "np", ".", "asarray", "(", "cloudB", ".", "points", ")", "\n", "CB", "=", "np", ".", "asarray", "(", "cloudB", ".", "colors", ")", "\n", "NCTA", "=", "np", ".", "zeros", "(", "CA", ".", "shape", ")", "\n", "NCTB", "=", "np", ".", "zeros", "(", "CB", ".", "shape", ")", "\n", "SearchTreeA", "=", "o3d", ".", "geometry", ".", "KDTreeFlann", "(", "cloudA", ")", "\n", "SearchTreeB", "=", "o3d", ".", "geometry", ".", "KDTreeFlann", "(", "cloudB", ")", "\n", "\n", "ANN", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "GA", ")", ")", ":", "\n", "        ", "[", "_", ",", "idx", ",", "dist", "]", "=", "SearchTreeB", ".", "search_knn_vector_3d", "(", "GA", "[", "index", "]", ",", "1", ")", "\n", "NCTA", "[", "index", ",", ":", "]", "=", "CB", "[", "idx", "[", "0", "]", ",", ":", "]", "*", "CB", "[", "idx", "[", "0", "]", ",", ":", "]", "\n", "ANN", ".", "append", "(", "idx", "[", "0", "]", ")", "\n", "\n", "", "BNN", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "GB", ")", ")", ":", "\n", "        ", "[", "_", ",", "idx", ",", "dist", "]", "=", "SearchTreeA", ".", "search_knn_vector_3d", "(", "GB", "[", "index", "]", ",", "1", ")", "\n", "NCTB", "[", "index", ",", ":", "]", "=", "CA", "[", "idx", "[", "0", "]", ",", ":", "]", "*", "CA", "[", "idx", "[", "0", "]", ",", ":", "]", "\n", "BNN", ".", "append", "(", "idx", "[", "0", "]", ")", "\n", "\n", "", "ANN", "=", "np", ".", "asarray", "(", "ANN", ")", "\n", "BNN", "=", "np", ".", "asarray", "(", "BNN", ")", "\n", "\n", "ANN_rep", "=", "Counter", "(", "ANN", ")", "\n", "BNN_rep", "=", "Counter", "(", "BNN", ")", "\n", "\n", "for", "item", "in", "BNN_rep", ".", "keys", "(", ")", ":", "\n", "        ", "if", "BNN_rep", "[", "item", "]", ">", "1", ":", "\n", "            ", "NCTA", "[", "item", ",", ":", "]", "=", "sum", "(", "CB", "[", "BNN", "==", "item", ",", ":", "]", "**", "2", ")", "/", "BNN_rep", "[", "item", "]", "\n", "", "", "NCTA", "=", "np", ".", "sqrt", "(", "NCTA", ")", "\n", "\n", "for", "item", "in", "ANN_rep", ".", "keys", "(", ")", ":", "\n", "        ", "if", "ANN_rep", "[", "item", "]", ">", "1", ":", "\n", "            ", "NCTB", "[", "index", ",", ":", "]", "=", "sum", "(", "CA", "[", "ANN", "==", "item", ",", ":", "]", "**", "2", ")", "/", "ANN_rep", "[", "item", "]", "\n", "", "", "NCTB", "=", "np", ".", "sqrt", "(", "NCTB", ")", "\n", "\n", "recoloredA", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "recoloredA", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "GA", ")", "\n", "recoloredA", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "NCTA", ")", "\n", "\n", "recoloredB", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "recoloredB", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "GB", ")", "\n", "recoloredB", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "NCTB", ")", "\n", "\n", "return", "(", "recoloredA", ",", "recoloredB", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.orthographic_projection": [[150, 230], ["numpy.asarray", "cloud.has_colors", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "print", "print", "print", "print", "print", "print", "numpy.asarray", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "len", "range", "range", "range", "[].astype", "[].astype", "[].astype", "[].astype", "[].astype", "[].astype", "[].astype", "[].astype", "[].astype", "[].astype", "[].astype", "[].astype", "[].astype", "[].astype", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "[].astype", "[].astype", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum"], "function", ["None"], ["def", "orthographic_projection", "(", "cloud", ",", "precision", ",", "filtering", ")", ":", "\n", "\n", "    ", "geometry", "=", "np", ".", "asarray", "(", "cloud", ".", "points", ")", "\n", "if", "cloud", ".", "has_colors", "(", ")", ":", "\n", "        ", "color", "=", "np", ".", "asarray", "(", "cloud", ".", "colors", ")", "\n", "\n", "# color", "\n", "", "img_0", "=", "np", ".", "ones", "(", "(", "[", "2", "**", "precision", ",", "2", "**", "precision", ",", "3", "]", ")", ")", "*", "255", "\n", "img_1", "=", "np", ".", "ones", "(", "(", "[", "2", "**", "precision", ",", "2", "**", "precision", ",", "3", "]", ")", ")", "*", "255", "\n", "img_2", "=", "np", ".", "ones", "(", "(", "[", "2", "**", "precision", ",", "2", "**", "precision", ",", "3", "]", ")", ")", "*", "255", "\n", "img_3", "=", "np", ".", "ones", "(", "(", "[", "2", "**", "precision", ",", "2", "**", "precision", ",", "3", "]", ")", ")", "*", "255", "\n", "img_4", "=", "np", ".", "ones", "(", "(", "[", "2", "**", "precision", ",", "2", "**", "precision", ",", "3", "]", ")", ")", "*", "255", "\n", "img_5", "=", "np", ".", "ones", "(", "(", "[", "2", "**", "precision", ",", "2", "**", "precision", ",", "3", "]", ")", ")", "*", "255", "\n", "\n", "# occupancy map", "\n", "ocp_map_0", "=", "np", ".", "zeros", "(", "(", "[", "2", "**", "precision", ",", "2", "**", "precision", "]", ")", ")", "\n", "ocp_map_1", "=", "np", ".", "zeros", "(", "(", "[", "2", "**", "precision", ",", "2", "**", "precision", "]", ")", ")", "\n", "ocp_map_2", "=", "np", ".", "zeros", "(", "(", "[", "2", "**", "precision", ",", "2", "**", "precision", "]", ")", ")", "\n", "ocp_map_3", "=", "np", ".", "zeros", "(", "(", "[", "2", "**", "precision", ",", "2", "**", "precision", "]", ")", ")", "\n", "ocp_map_4", "=", "np", ".", "zeros", "(", "(", "[", "2", "**", "precision", ",", "2", "**", "precision", "]", ")", ")", "\n", "ocp_map_5", "=", "np", ".", "zeros", "(", "(", "[", "2", "**", "precision", ",", "2", "**", "precision", "]", ")", ")", "\n", "\n", "img", "=", "[", "img_0", ",", "img_1", ",", "img_2", ",", "img_3", ",", "img_4", ",", "img_5", "]", "\n", "ocp_map", "=", "[", "ocp_map_0", ",", "ocp_map_1", ",", "ocp_map_2", ",", "ocp_map_3", ",", "ocp_map_4", ",", "ocp_map_5", "]", "\n", "minDepth", "=", "np", ".", "zeros", "(", "[", "3", ",", "2", "**", "precision", ",", "2", "**", "precision", "]", ")", "\n", "maxDepth", "=", "np", ".", "ones", "(", "[", "3", ",", "2", "**", "precision", ",", "2", "**", "precision", "]", ")", "*", "2", "**", "precision", "\n", "\n", "plane", "=", "{", "0", ":", "(", "1", ",", "2", ")", ",", "1", ":", "(", "0", ",", "2", ")", ",", "2", ":", "(", "0", ",", "1", ")", "}", "\n", "\n", "for", "index", "in", "range", "(", "len", "(", "geometry", ")", ")", ":", "\n", "        ", "if", "(", "geometry", "[", "index", "]", "[", "0", "]", ">=", "2", "**", "precision", ")", "or", "(", "geometry", "[", "index", "]", "[", "1", "]", ">=", "2", "**", "precision", ")", "or", "(", "geometry", "[", "index", "]", "[", "2", "]", ">=", "2", "**", "precision", ")", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "for", "coord", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "                ", "if", "geometry", "[", "index", "]", "[", "coord", "]", "<=", "maxDepth", "[", "coord", "]", "[", "geometry", "[", "index", "]", "[", "plane", "[", "coord", "]", "[", "0", "]", "]", ".", "astype", "(", "np", ".", "uint16", ")", "]", "[", "geometry", "[", "index", "]", "[", "plane", "[", "coord", "]", "[", "1", "]", "]", ".", "astype", "(", "np", ".", "uint16", ")", "]", ":", "\n", "                    ", "img", "[", "2", "*", "coord", "]", "[", "geometry", "[", "index", "]", "[", "plane", "[", "coord", "]", "[", "0", "]", "]", ".", "astype", "(", "np", ".", "uint16", ")", "]", "[", "geometry", "[", "index", "]", "[", "plane", "[", "coord", "]", "[", "1", "]", "]", ".", "astype", "(", "np", ".", "uint16", ")", "]", "[", ":", "]", "=", "color", "[", "index", "]", "[", ":", "]", "*", "255", "\n", "ocp_map", "[", "2", "*", "coord", "]", "[", "geometry", "[", "index", "]", "[", "plane", "[", "coord", "]", "[", "0", "]", "]", ".", "astype", "(", "np", ".", "uint16", ")", "]", "[", "geometry", "[", "index", "]", "[", "plane", "[", "coord", "]", "[", "1", "]", "]", ".", "astype", "(", "np", ".", "uint16", ")", "]", "=", "1", "\n", "maxDepth", "[", "coord", "]", "[", "geometry", "[", "index", "]", "[", "plane", "[", "coord", "]", "[", "0", "]", "]", ".", "astype", "(", "np", ".", "uint16", ")", "]", "[", "geometry", "[", "index", "]", "[", "plane", "[", "coord", "]", "[", "1", "]", "]", ".", "astype", "(", "np", ".", "uint16", ")", "]", "=", "geometry", "[", "index", "]", "[", "coord", "]", "\n", "\n", "", "if", "geometry", "[", "index", "]", "[", "coord", "]", ">=", "minDepth", "[", "coord", "]", "[", "geometry", "[", "index", "]", "[", "plane", "[", "coord", "]", "[", "0", "]", "]", ".", "astype", "(", "np", ".", "uint16", ")", "]", "[", "geometry", "[", "index", "]", "[", "plane", "[", "coord", "]", "[", "1", "]", "]", ".", "astype", "(", "np", ".", "uint16", ")", "]", ":", "\n", "                    ", "img", "[", "2", "*", "coord", "+", "1", "]", "[", "geometry", "[", "index", "]", "[", "plane", "[", "coord", "]", "[", "0", "]", "]", ".", "astype", "(", "np", ".", "uint16", ")", "]", "[", "geometry", "[", "index", "]", "[", "plane", "[", "coord", "]", "[", "1", "]", "]", ".", "astype", "(", "np", ".", "uint16", ")", "]", "[", ":", "]", "=", "color", "[", "index", "]", "[", ":", "]", "*", "255", "\n", "ocp_map", "[", "2", "*", "coord", "+", "1", "]", "[", "geometry", "[", "index", "]", "[", "plane", "[", "coord", "]", "[", "0", "]", "]", ".", "astype", "(", "np", ".", "uint16", ")", "]", "[", "geometry", "[", "index", "]", "[", "plane", "[", "coord", "]", "[", "1", "]", "]", ".", "astype", "(", "np", ".", "uint16", ")", "]", "=", "1", "\n", "minDepth", "[", "coord", "]", "[", "geometry", "[", "index", "]", "[", "plane", "[", "coord", "]", "[", "0", "]", "]", ".", "astype", "(", "np", ".", "uint16", ")", "]", "[", "geometry", "[", "index", "]", "[", "plane", "[", "coord", "]", "[", "1", "]", "]", ".", "astype", "(", "np", ".", "uint16", ")", "]", "=", "geometry", "[", "index", "]", "[", "coord", "]", "\n", "", "", "", "", "w", "=", "filtering", "\n", "c1", "=", "c2", "=", "c3", "=", "c4", "=", "c5", "=", "c6", "=", "0", "\n", "if", "(", "w", "!=", "0", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "w", ",", "2", "**", "precision", "-", "w", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "w", ",", "2", "**", "precision", "-", "w", ")", ":", "\n", "                ", "if", "(", "ocp_map", "[", "0", "]", "[", "i", ",", "j", "]", "==", "1", ")", "and", "(", "maxDepth", "[", "0", "]", "[", "i", ",", "j", "]", ">", "sum", "(", "sum", "(", "maxDepth", "[", "0", "]", "[", "i", "-", "w", ":", "i", "+", "w", "+", "1", ",", "j", "-", "w", ":", "j", "+", "w", "+", "1", "]", "*", "ocp_map", "[", "0", "]", "[", "i", "-", "w", ":", "i", "+", "w", "+", "1", ",", "j", "-", "w", ":", "j", "+", "w", "+", "1", "]", ")", ")", "/", "sum", "(", "sum", "(", "ocp_map", "[", "0", "]", "[", "i", "-", "w", ":", "i", "+", "w", "+", "1", ",", "j", "-", "w", ":", "j", "+", "w", "+", "1", "]", ")", ")", "+", "20", ")", ":", "\n", "                    ", "ocp_map", "[", "0", "]", "[", "i", ",", "j", "]", "=", "0", "\n", "img", "[", "0", "]", "[", "i", ",", "j", ",", ":", "]", "=", "255", "\n", "c1", "+=", "1", "\n", "", "if", "(", "ocp_map", "[", "1", "]", "[", "i", ",", "j", "]", "==", "1", ")", "and", "(", "minDepth", "[", "0", "]", "[", "i", ",", "j", "]", "<", "sum", "(", "sum", "(", "minDepth", "[", "0", "]", "[", "i", "-", "w", ":", "i", "+", "w", "+", "1", ",", "j", "-", "w", ":", "j", "+", "w", "+", "1", "]", "*", "ocp_map", "[", "1", "]", "[", "i", "-", "w", ":", "i", "+", "w", "+", "1", ",", "j", "-", "w", ":", "j", "+", "w", "+", "1", "]", ")", ")", "/", "sum", "(", "sum", "(", "ocp_map", "[", "1", "]", "[", "i", "-", "w", ":", "i", "+", "w", "+", "1", ",", "j", "-", "w", ":", "j", "+", "w", "+", "1", "]", ")", ")", "-", "20", ")", ":", "\n", "                    ", "ocp_map", "[", "1", "]", "[", "i", ",", "j", "]", "=", "0", "\n", "img", "[", "1", "]", "[", "i", ",", "j", ",", ":", "]", "=", "255", "\n", "c2", "+=", "1", "\n", "", "if", "(", "ocp_map", "[", "2", "]", "[", "i", ",", "j", "]", "==", "1", ")", "and", "(", "maxDepth", "[", "1", "]", "[", "i", ",", "j", "]", ">", "sum", "(", "sum", "(", "maxDepth", "[", "1", "]", "[", "i", "-", "w", ":", "i", "+", "w", "+", "1", ",", "j", "-", "w", ":", "j", "+", "w", "+", "1", "]", "*", "ocp_map", "[", "2", "]", "[", "i", "-", "w", ":", "i", "+", "w", "+", "1", ",", "j", "-", "w", ":", "j", "+", "w", "+", "1", "]", ")", ")", "/", "sum", "(", "sum", "(", "ocp_map", "[", "2", "]", "[", "i", "-", "w", ":", "i", "+", "w", "+", "1", ",", "j", "-", "w", ":", "j", "+", "w", "+", "1", "]", ")", ")", "+", "20", ")", ":", "\n", "                    ", "ocp_map", "[", "2", "]", "[", "i", ",", "j", "]", "=", "0", "\n", "img", "[", "2", "]", "[", "i", ",", "j", ",", ":", "]", "=", "255", "\n", "c3", "+=", "1", "\n", "", "if", "(", "ocp_map", "[", "3", "]", "[", "i", ",", "j", "]", "==", "1", ")", "and", "(", "minDepth", "[", "1", "]", "[", "i", ",", "j", "]", "<", "sum", "(", "sum", "(", "minDepth", "[", "1", "]", "[", "i", "-", "w", ":", "i", "+", "w", "+", "1", ",", "j", "-", "w", ":", "j", "+", "w", "+", "1", "]", "*", "ocp_map", "[", "3", "]", "[", "i", "-", "w", ":", "i", "+", "w", "+", "1", ",", "j", "-", "w", ":", "j", "+", "w", "+", "1", "]", ")", ")", "/", "sum", "(", "sum", "(", "ocp_map", "[", "3", "]", "[", "i", "-", "w", ":", "i", "+", "w", "+", "1", ",", "j", "-", "w", ":", "j", "+", "w", "+", "1", "]", ")", ")", "-", "20", ")", ":", "\n", "                    ", "ocp_map", "[", "3", "]", "[", "i", ",", "j", "]", "=", "0", "\n", "img", "[", "3", "]", "[", "i", ",", "j", ",", ":", "]", "=", "255", "\n", "c4", "+=", "1", "\n", "", "if", "(", "ocp_map", "[", "4", "]", "[", "i", ",", "j", "]", "==", "1", ")", "and", "(", "maxDepth", "[", "2", "]", "[", "i", ",", "j", "]", ">", "sum", "(", "sum", "(", "maxDepth", "[", "2", "]", "[", "i", "-", "w", ":", "i", "+", "w", "+", "1", ",", "j", "-", "w", ":", "j", "+", "w", "+", "1", "]", "*", "ocp_map", "[", "4", "]", "[", "i", "-", "w", ":", "i", "+", "w", "+", "1", ",", "j", "-", "w", ":", "j", "+", "w", "+", "1", "]", ")", ")", "/", "sum", "(", "sum", "(", "ocp_map", "[", "4", "]", "[", "i", "-", "w", ":", "i", "+", "w", "+", "1", ",", "j", "-", "w", ":", "j", "+", "w", "+", "1", "]", ")", ")", "+", "20", ")", ":", "\n", "                    ", "ocp_map", "[", "4", "]", "[", "i", ",", "j", "]", "=", "0", "\n", "img", "[", "4", "]", "[", "i", ",", "j", ",", ":", "]", "=", "255", "\n", "c5", "+=", "1", "\n", "", "if", "(", "ocp_map", "[", "5", "]", "[", "i", ",", "j", "]", "==", "1", ")", "and", "(", "minDepth", "[", "2", "]", "[", "i", ",", "j", "]", "<", "sum", "(", "sum", "(", "minDepth", "[", "2", "]", "[", "i", "-", "w", ":", "i", "+", "w", "+", "1", ",", "j", "-", "w", ":", "j", "+", "w", "+", "1", "]", "*", "ocp_map", "[", "5", "]", "[", "i", "-", "w", ":", "i", "+", "w", "+", "1", ",", "j", "-", "w", ":", "j", "+", "w", "+", "1", "]", ")", ")", "/", "sum", "(", "sum", "(", "ocp_map", "[", "5", "]", "[", "i", "-", "w", ":", "i", "+", "w", "+", "1", ",", "j", "-", "w", ":", "j", "+", "w", "+", "1", "]", ")", ")", "-", "20", ")", ":", "\n", "                    ", "ocp_map", "[", "5", "]", "[", "i", ",", "j", "]", "=", "0", "\n", "img", "[", "5", "]", "[", "i", ",", "j", ",", ":", "]", "=", "255", "\n", "c6", "+=", "1", "\n", "\n", "", "", "", "", "print", "(", "\"{t1} points removed from 1st view\"", ".", "format", "(", "t1", "=", "c1", ")", ")", "\n", "print", "(", "\"{t1} points removed from 2nd view\"", ".", "format", "(", "t1", "=", "c2", ")", ")", "\n", "print", "(", "\"{t1} points removed from 3rd view\"", ".", "format", "(", "t1", "=", "c3", ")", ")", "\n", "print", "(", "\"{t1} points removed from 4th view\"", ".", "format", "(", "t1", "=", "c4", ")", ")", "\n", "print", "(", "\"{t1} points removed from 5th view\"", ".", "format", "(", "t1", "=", "c5", ")", ")", "\n", "print", "(", "\"{t1} points removed from 6th view\"", ".", "format", "(", "t1", "=", "c6", ")", ")", "\n", "return", "(", "img", ",", "ocp_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.cropp_images": [[239, 244], ["cv2.boundingRect", "ocp_map.astype"], "function", ["None"], ["def", "cropp_images", "(", "image", ",", "ocp_map", ")", ":", "\n", "    ", "x", ",", "y", ",", "w", ",", "h", "=", "cv2", ".", "boundingRect", "(", "ocp_map", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "cropped_image", "=", "image", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "\n", "cropped_ocp_map", "=", "ocp_map", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "\n", "return", "(", "cropped_image", ",", "cropped_ocp_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.pad_images": [[253, 257], ["cv2.inpaint"], "function", ["None"], ["def", "pad_images", "(", "image", ",", "ocp_map", ")", ":", "\n", "    ", "mask", "=", "(", "ocp_map", "!=", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "padded_image", "=", "cv2", ".", "inpaint", "(", "image", ",", "mask", ",", "3", ",", "cv2", ".", "INPAINT_NS", ")", "\n", "return", "padded_image", "\n", "\n"]], "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.save_images": [[265, 268], ["cv2.imwrite"], "function", ["None"], ["def", "save_images", "(", "fn", ",", "image", ")", ":", "\n", "    ", "status", "=", "cv2", ".", "imwrite", "(", "fn", ",", "image", ")", "\n", "return", "status", "\n", "\n"]], "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_dists": [[270, 276], ["torch.device", "IQA_pytorch.utils.prepare_image().to", "IQA_pytorch.utils.prepare_image().to", "IQA_pytorch.DISTS().to", "DISTS().to.item", "torch.cuda.is_available", "IQA_pytorch.utils.prepare_image", "IQA_pytorch.utils.prepare_image", "IQA_pytorch.DISTS", "DISTS().to."], "function", ["None"], ["", "def", "compute_dists", "(", "original", ",", "decoded", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "ref", "=", "prepare_image", "(", "original", ")", ".", "to", "(", "device", ")", "\n", "dist", "=", "prepare_image", "(", "decoded", ")", ".", "to", "(", "device", ")", "\n", "q_metric", "=", "DISTS", "(", ")", ".", "to", "(", "device", ")", "\n", "return", "q_metric", "(", "dist", ",", "ref", ",", "as_loss", "=", "False", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_haarpsi": [[277, 284], ["IQA_pytorch.utils.prepare_image", "IQA_pytorch.utils.prepare_image", "haarpsi", "HaarPSI.item"], "function", ["None"], ["", "def", "compute_haarpsi", "(", "original", ",", "decoded", ")", ":", "\n", "    ", "from", "piq", "import", "haarpsi", "\n", "# HaarPSI_metric = haarpsi()", "\n", "ref", "=", "prepare_image", "(", "original", ")", "\n", "dist", "=", "prepare_image", "(", "decoded", ")", "\n", "HaarPSI", ":", "torch", ".", "Tensor", "=", "haarpsi", "(", "ref", ",", "dist", ")", "\n", "return", "HaarPSI", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_hvspsnr": [[285, 289], ["psnr_hvs_m.psnrhvsm"], "function", ["home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.psnr_hvs_m.psnrhvsm"], ["", "def", "compute_hvspsnr", "(", "original", ",", "decoded", ")", ":", "\n", "    ", "import", "psnr_hvs_m", "\n", "p", "=", "psnr_hvs_m", ".", "psnrhvsm", "(", "original", ",", "decoded", ")", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_vifp": [[290, 296], ["torch.device", "IQA_pytorch.utils.prepare_image().to", "IQA_pytorch.utils.prepare_image().to", "IQA_pytorch.VIFs().to", "VIFs().to.item", "torch.cuda.is_available", "IQA_pytorch.utils.prepare_image", "IQA_pytorch.utils.prepare_image", "IQA_pytorch.VIFs", "VIFs().to."], "function", ["None"], ["", "def", "compute_vifp", "(", "original", ",", "decoded", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "ref", "=", "prepare_image", "(", "original", ")", ".", "to", "(", "device", ")", "\n", "dist", "=", "prepare_image", "(", "decoded", ")", ".", "to", "(", "device", ")", "\n", "q_metric", "=", "VIFs", "(", "channels", "=", "1", ")", ".", "to", "(", "device", ")", "\n", "return", "q_metric", "(", "dist", ",", "ref", ",", "as_loss", "=", "False", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_ssim": [[297, 303], ["torch.device", "IQA_pytorch.utils.prepare_image().to", "IQA_pytorch.utils.prepare_image().to", "IQA_pytorch.SSIM().to", "SSIM().to.item", "torch.cuda.is_available", "IQA_pytorch.utils.prepare_image", "IQA_pytorch.utils.prepare_image", "IQA_pytorch.SSIM", "SSIM().to."], "function", ["None"], ["", "def", "compute_ssim", "(", "original", ",", "decoded", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "ref", "=", "prepare_image", "(", "original", ")", ".", "to", "(", "device", ")", "\n", "dist", "=", "prepare_image", "(", "decoded", ")", ".", "to", "(", "device", ")", "\n", "q_metric", "=", "SSIM", "(", "channels", "=", "1", ")", ".", "to", "(", "device", ")", "\n", "return", "q_metric", "(", "dist", ",", "ref", ",", "as_loss", "=", "False", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_msssim": [[304, 310], ["torch.device", "IQA_pytorch.utils.prepare_image().to", "IQA_pytorch.utils.prepare_image().to", "IQA_pytorch.MS_SSIM().to", "MS_SSIM().to.item", "torch.cuda.is_available", "IQA_pytorch.utils.prepare_image", "IQA_pytorch.utils.prepare_image", "IQA_pytorch.MS_SSIM", "MS_SSIM().to."], "function", ["None"], ["", "def", "compute_msssim", "(", "original", ",", "decoded", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "ref", "=", "prepare_image", "(", "original", ")", ".", "to", "(", "device", ")", "\n", "dist", "=", "prepare_image", "(", "decoded", ")", ".", "to", "(", "device", ")", "\n", "q_metric", "=", "MS_SSIM", "(", "channels", "=", "1", ")", ".", "to", "(", "device", ")", "\n", "return", "q_metric", "(", "dist", ",", "ref", ",", "as_loss", "=", "False", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_fsim": [[311, 317], ["torch.device", "IQA_pytorch.utils.prepare_image().to", "IQA_pytorch.utils.prepare_image().to", "IQA_pytorch.FSIM().to", "FSIM().to.item", "torch.cuda.is_available", "IQA_pytorch.utils.prepare_image", "IQA_pytorch.utils.prepare_image", "IQA_pytorch.FSIM", "FSIM().to."], "function", ["None"], ["", "def", "compute_fsim", "(", "original", ",", "decoded", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "ref", "=", "prepare_image", "(", "original", ")", ".", "to", "(", "device", ")", "\n", "dist", "=", "prepare_image", "(", "decoded", ")", ".", "to", "(", "device", ")", "\n", "q_metric", "=", "FSIM", "(", "channels", "=", "1", ")", ".", "to", "(", "device", ")", "\n", "return", "q_metric", "(", "dist", ",", "ref", ",", "as_loss", "=", "False", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_vsi": [[318, 324], ["torch.device", "IQA_pytorch.utils.prepare_image().to", "IQA_pytorch.utils.prepare_image().to", "IQA_pytorch.VSI().to", "VSI().to.item", "torch.cuda.is_available", "IQA_pytorch.utils.prepare_image", "IQA_pytorch.utils.prepare_image", "IQA_pytorch.VSI", "VSI().to."], "function", ["None"], ["", "def", "compute_vsi", "(", "original", ",", "decoded", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "ref", "=", "prepare_image", "(", "original", ")", ".", "to", "(", "device", ")", "\n", "dist", "=", "prepare_image", "(", "decoded", ")", ".", "to", "(", "device", ")", "\n", "q_metric", "=", "VSI", "(", ")", ".", "to", "(", "device", ")", "\n", "return", "q_metric", "(", "dist", ",", "ref", ",", "as_loss", "=", "False", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_lpips": [[325, 331], ["torch.device", "IQA_pytorch.utils.prepare_image().to", "IQA_pytorch.utils.prepare_image().to", "IQA_pytorch.LPIPSvgg().to", "LPIPSvgg().to.item", "torch.cuda.is_available", "IQA_pytorch.utils.prepare_image", "IQA_pytorch.utils.prepare_image", "IQA_pytorch.LPIPSvgg", "LPIPSvgg().to."], "function", ["None"], ["", "def", "compute_lpips", "(", "original", ",", "decoded", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "ref", "=", "prepare_image", "(", "original", ")", ".", "to", "(", "device", ")", "\n", "dist", "=", "prepare_image", "(", "decoded", ")", ".", "to", "(", "device", ")", "\n", "q_metric", "=", "LPIPSvgg", "(", ")", ".", "to", "(", "device", ")", "\n", "return", "q_metric", "(", "dist", ",", "ref", ",", "as_loss", "=", "False", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlirezaJav_Projection-based-PC-Quality-Metric.None.ProjQM.compute_psnr": [[332, 338], ["numpy.mean", "math.log10", "math.sqrt"], "function", ["None"], ["", "def", "compute_psnr", "(", "original", ",", "decoded", ")", ":", "\n", "    ", "mse", "=", "np", ".", "mean", "(", "(", "original", "-", "decoded", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "100", "\n", "", "PIXEL_MAX", "=", "255.0", "\n", "return", "20", "*", "math", ".", "log10", "(", "PIXEL_MAX", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "", ""]]}