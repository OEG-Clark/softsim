{"home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_utils.Train_and_Test.Training_GRLModels": [[5, 77], ["range", "print", "GRL_model.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "env.reset", "Rewards.append", "Episode_Steps.append", "GRL_model.get_statistics", "Loss.append", "Average_Q.append", "print", "GRL_Net.parameters", "print", "GRL_model.act", "env.step", "GRL_model.observe", "print", "print", "print", "numpy.random.choice", "GRL_model.get_statistics", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.get_statistics", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.act", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.observe", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.get_statistics"], ["def", "Training_GRLModels", "(", "GRL_Net", ",", "GRL_model", ",", "env", ",", "n_episodes", ",", "max_episode_len", ",", "save_dir", ",", "warmup", ",", "debug", ")", ":", "\n", "    ", "\"\"\"\n        \u8be5\u51fd\u6570\u4e3a\u9488\u5bf9GRL\u6a21\u578b\u7684\u8bad\u7ec3\u51fd\u6570\n\n        \u53c2\u6570\u8bf4\u660e:\n        --------\n        GRL_Net: GRL\u6a21\u578b\u4e2d\u91c7\u7528\u7684\u795e\u7ecf\u7f51\u7edc\n        GRL_model:\u9700\u8981\u8bad\u7ec3\u7684GRL\u6a21\u578b\n        env: \u6ce8\u518c\u81f3gym\u4e0b\u7684\u4eff\u771f\u73af\u5883\n        n_episodes: \u8bad\u7ec3\u7684\u56de\u5408\u6570\n        max_episode_len: \u5355\u6b65\u8bad\u7ec3\u6700\u5927\u6b65\u957f\n        save_dir: \u6a21\u578b\u4fdd\u5b58\u8def\u5f84\n        warmup: \u6a21\u578b\u81ea\u7531\u63a2\u7d22\u6b65\u957f\uff08\u968f\u673a\u9009\u62e9\u52a8\u4f5c\uff09\n        debug: \u6a21\u578b\u53c2\u6570\u8c03\u8bd5\u76f8\u5173\n    \"\"\"", "\n", "# \u4ee5\u4e0b\u4e3a\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b", "\n", "Rewards", "=", "[", "]", "# \u521d\u59cb\u5316\u5956\u52b1\u77e9\u9635\u4ee5\u8fdb\u884c\u6570\u636e\u4fdd\u5b58", "\n", "Loss", "=", "[", "]", "# \u521d\u59cb\u5316Loss\u77e9\u9635\u4ee5\u8fdb\u884c\u6570\u636e\u4fdd\u5b58", "\n", "Episode_Steps", "=", "[", "]", "# \u521d\u59cb\u5316\u6b65\u957f\u77e9\u9635\u4fdd\u5b58\u6bcf\u4e00episode\u7684\u4efb\u52a1\u5b8c\u6210\u65f6\u7684\u6b65\u957f", "\n", "Average_Q", "=", "[", "]", "# \u521d\u59cb\u5316\u5e73\u5747Q\u503c\u77e9\u9635\u4fdd\u5b58\u6bcf\u4e00episode\u7684\u5e73\u5747Q\u503c", "\n", "\n", "# \u5b9a\u4e49warmup\u6b65\u957f", "\n", "Warmup_Steps", "=", "warmup", "\n", "# \u5b9a\u4e49warmup\u6b65\u957f\u8bb0\u5f55", "\n", "warmup_count", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "n_episodes", "+", "1", ")", ":", "\n", "# \u5982\u679c\u9700\u8981\u8c03\u8bd5\uff0c\u5219\u5b9e\u65f6\u6253\u5370\u7f51\u7edc\u4e2d\u7684\u53c2\u6570", "\n", "        ", "if", "debug", ":", "\n", "            ", "print", "(", "\"------------------------------------\"", ")", "\n", "for", "parameters", "in", "GRL_Net", ".", "parameters", "(", ")", ":", "\n", "                ", "print", "(", "\"param:\"", ",", "parameters", ")", "\n", "", "print", "(", "\"------------------------------------\"", ")", "\n", "", "obs", "=", "env", ".", "reset", "(", ")", "\n", "R", "=", "0", "# \u884c\u4e3a\u5956\u52b1", "\n", "t", "=", "0", "# \u65f6\u95f4\u6b65\u957f", "\n", "while", "True", ":", "\n", "            ", "action", "=", "GRL_model", ".", "act", "(", "obs", ")", "# \u8fd9\u91cc\u5f15\u7528\u4e86dqn.py\u4e2d\u7684batch_act\u51fd\u6570", "\n", "if", "warmup_count", "<=", "Warmup_Steps", ":", "# \u8fdb\u884cwarmup", "\n", "                ", "action", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "3", ")", ",", "40", ")", "\n", "# print(\"action: \", action)", "\n", "", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "R", "+=", "reward", "\n", "t", "+=", "1", "\n", "warmup_count", "+=", "1", "\n", "\n", "reset", "=", "t", "==", "max_episode_len", "\n", "GRL_model", ".", "observe", "(", "obs", ",", "reward", ",", "done", ",", "reset", ")", "\n", "if", "done", "or", "reset", ":", "\n", "                ", "break", "\n", "# \u8bb0\u5f55\u8bad\u7ec3\u6570\u636e", "\n", "", "", "Rewards", ".", "append", "(", "R", ")", "# \u8bb0\u5f55Rewards", "\n", "Episode_Steps", ".", "append", "(", "t", ")", "# \u8bb0\u5f55Steps", "\n", "# \u8bb0\u5f55Loss", "\n", "Training_Data", "=", "GRL_model", ".", "get_statistics", "(", ")", "\n", "Loss_episode", "=", "Training_Data", "[", "1", "]", "[", "1", "]", "# \u4ece\u5143\u7ec4\u4e2d\u63d0\u53d6Loss\u503c", "\n", "Average_Q_episode", "=", "Training_Data", "[", "0", "]", "[", "1", "]", "# \u4ece\u5143\u7ec4\u4e2d\u63d0\u53d6Average_Q\u503c", "\n", "Loss", ".", "append", "(", "Loss_episode", ")", "\n", "Average_Q", ".", "append", "(", "Average_Q_episode", ")", "\n", "if", "i", "%", "1", "==", "0", ":", "\n", "            ", "print", "(", "'Training Episode:'", ",", "i", ",", "'Reward:'", ",", "R", ")", "\n", "", "if", "i", "%", "1", "==", "0", ":", "\n", "            ", "print", "(", "'Statistics:'", ",", "GRL_model", ".", "get_statistics", "(", ")", ")", "\n", "", "", "print", "(", "'Training Finished.'", ")", "\n", "\n", "# \u6a21\u578b\u4fdd\u5b58", "\n", "GRL_model", ".", "save", "(", "save_dir", ")", "\n", "# \u4fdd\u5b58\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u5404\u9879\u6570\u636e", "\n", "np", ".", "save", "(", "save_dir", "+", "\"/Rewards\"", ",", "Rewards", ")", "\n", "np", ".", "save", "(", "save_dir", "+", "\"/Episode_Steps\"", ",", "Episode_Steps", ")", "\n", "np", ".", "save", "(", "save_dir", "+", "\"/Loss\"", ",", "Loss", ")", "\n", "np", ".", "save", "(", "save_dir", "+", "\"/Average_Q\"", ",", "Average_Q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_utils.Train_and_Test.Testing_GRLModels": [[79, 121], ["GRL_model.load", "range", "print", "numpy.save", "env.reset", "Rewards.append", "print", "print", "GRL_Net.parameters", "print", "GRL_model.act", "env.step", "GRL_model.observe", "print"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.act", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.observe"], ["", "def", "Testing_GRLModels", "(", "GRL_Net", ",", "GRL_model", ",", "env", ",", "test_episodes", ",", "load_dir", ",", "debug", ")", ":", "\n", "    ", "\"\"\"\n        \u8be5\u51fd\u6570\u4e3a\u9488\u5bf9\u8bad\u7ec3\u597d\u7684GRL\u6a21\u578b\u7684\u6d4b\u8bd5\u51fd\u6570\n\n        \u53c2\u6570\u8bf4\u660e:\n        --------\n        GRL_Net: GRL\u6a21\u578b\u4e2d\u91c7\u7528\u7684\u795e\u7ecf\u7f51\u7edc\n        GRL_model:\u9700\u8981\u6d4b\u8bd5\u7684GRL\u6a21\u578b\n        env: \u6ce8\u518c\u81f3gym\u4e0b\u7684\u4eff\u771f\u73af\u5883\n        test_episodes: \u6d4b\u8bd5\u7684\u56de\u5408\u6570\n        load_dir: \u6a21\u578b\u8bfb\u53d6\u8def\u5f84\n        debug: \u6a21\u578b\u53c2\u6570\u8c03\u8bd5\u76f8\u5173\n    \"\"\"", "\n", "# \u4ee5\u4e0b\u4e3a\u6a21\u578b\u6d4b\u8bd5\u8fc7\u7a0b", "\n", "Rewards", "=", "[", "]", "# \u521d\u59cb\u5316\u5956\u52b1\u77e9\u9635\u4ee5\u8fdb\u884c\u6570\u636e\u4fdd\u5b58", "\n", "\n", "GRL_model", ".", "load", "(", "load_dir", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "test_episodes", "+", "1", ")", ":", "\n", "# \u5982\u679c\u9700\u8981\u8c03\u8bd5\uff0c\u5219\u5b9e\u65f6\u6253\u5370\u7f51\u7edc\u4e2d\u7684\u53c2\u6570", "\n", "        ", "if", "debug", ":", "\n", "            ", "print", "(", "\"------------------------------------\"", ")", "\n", "for", "parameters", "in", "GRL_Net", ".", "parameters", "(", ")", ":", "\n", "                ", "print", "(", "\"param:\"", ",", "parameters", ")", "\n", "", "print", "(", "\"------------------------------------\"", ")", "\n", "", "obs", "=", "env", ".", "reset", "(", ")", "\n", "R", "=", "0", "\n", "t", "=", "0", "\n", "while", "True", ":", "\n", "            ", "action", "=", "GRL_model", ".", "act", "(", "obs", ")", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "R", "+=", "reward", "\n", "t", "+=", "1", "\n", "reset", "=", "done", "\n", "GRL_model", ".", "observe", "(", "obs", ",", "reward", ",", "done", ",", "reset", ")", "\n", "if", "done", "or", "reset", ":", "\n", "                ", "break", "\n", "", "", "Rewards", ".", "append", "(", "R", ")", "# \u8bb0\u5f55Rewards", "\n", "print", "(", "'Evaluation Episode:'", ",", "i", ",", "'Reward:'", ",", "R", ")", "\n", "", "print", "(", "'Evaluation Finished'", ")", "\n", "\n", "# \u6d4b\u8bd5\u6570\u636e\u4fdd\u5b58", "\n", "np", ".", "save", "(", "load_dir", "+", "\"/Test_Rewards\"", ",", "Rewards", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_utils.Data_Plot_Train.Data_Loader": [[7, 29], ["numpy.load", "numpy.load", "numpy.load", "numpy.load"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load"], ["def", "Data_Loader", "(", "data_dir", ")", ":", "\n", "    ", "\"\"\"\n        This function is used to load the training data\n\n        Parameter Description:\n        --------\n        data_dir: model and data storage directory\n    \"\"\"", "\n", "\n", "# get directory", "\n", "Reward_dir", "=", "data_dir", "+", "\"/Rewards.npy\"", "\n", "Episode_dir", "=", "data_dir", "+", "\"/Episode_Steps.npy\"", "\n", "Loss_dir", "=", "data_dir", "+", "\"/Loss.npy\"", "\n", "Q_dir", "=", "data_dir", "+", "\"/Average_Q.npy\"", "\n", "\n", "# load data via numpy", "\n", "Reward", "=", "np", ".", "load", "(", "Reward_dir", ")", "\n", "Episode", "=", "np", ".", "load", "(", "Episode_dir", ")", "\n", "Loss", "=", "np", ".", "load", "(", "Loss_dir", ")", "\n", "Average_Q", "=", "np", ".", "load", "(", "Q_dir", ")", "\n", "\n", "return", "[", "Reward", ",", "Loss", ",", "Average_Q", ",", "Episode", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_utils.Data_Plot_Train.Mean_and_Std": [[31, 76], ["len", "range", "numpy.average", "numpy.std", "range", "numpy.average", "numpy.std", "range", "numpy.average", "numpy.std", "Reward.append", "Loss.append", "Average_Q.append"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.std", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.std", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.std", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "Mean_and_Std", "(", "Data", ")", ":", "\n", "    ", "\"\"\"\n        This function is used to calculate the mean and standard deviation of the data under different samples\n\n        Parameter Description:\n        --------\n        Data: A list of data to be calculated.\n            The data form of each list can be described as [Reward, Loss, Average_Q, Episode]\n    \"\"\"", "\n", "\n", "# Get the length of the data list", "\n", "Length_Data", "=", "len", "(", "Data", ")", "\n", "\n", "# Calculate the mean and standard deviation of each indicator", "\n", "# -------------------------------------------------------------- #", "\n", "# 1.Reward", "\n", "Reward", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "Length_Data", ")", ":", "\n", "        ", "Reward", ".", "append", "(", "Data", "[", "i", "]", "[", "0", "]", ")", "\n", "", "Reward_Average", "=", "np", ".", "average", "(", "Reward", ",", "axis", "=", "0", ")", "\n", "Reward_Std", "=", "np", ".", "std", "(", "Reward", ",", "axis", "=", "0", ")", "\n", "Reward_Proceed", "=", "[", "Reward_Average", ",", "Reward_Std", "]", "\n", "# -------------------------------------------------------------- #", "\n", "\n", "# -------------------------------------------------------------- #", "\n", "# 2.Loss", "\n", "Loss", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "Length_Data", ")", ":", "\n", "        ", "Loss", ".", "append", "(", "Data", "[", "i", "]", "[", "1", "]", ")", "\n", "", "Loss_Average", "=", "np", ".", "average", "(", "Loss", ",", "axis", "=", "0", ")", "\n", "Loss_Std", "=", "np", ".", "std", "(", "Loss", ",", "axis", "=", "0", ")", "\n", "Loss_Proceed", "=", "[", "Loss_Average", ",", "Loss_Std", "]", "\n", "# -------------------------------------------------------------- #", "\n", "\n", "# -------------------------------------------------------------- #", "\n", "# 3.Average_Q", "\n", "Average_Q", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "Length_Data", ")", ":", "\n", "        ", "Average_Q", ".", "append", "(", "Data", "[", "i", "]", "[", "2", "]", ")", "\n", "", "Average_Q_Average", "=", "np", ".", "average", "(", "Average_Q", ",", "axis", "=", "0", ")", "\n", "Average_Q_Std", "=", "np", ".", "std", "(", "Loss", ",", "axis", "=", "0", ")", "\n", "Average_Q_Proceed", "=", "[", "Average_Q_Average", ",", "Average_Q_Std", "]", "\n", "# -------------------------------------------------------------- #", "\n", "\n", "return", "[", "Reward_Proceed", ",", "Loss_Proceed", ",", "Average_Q_Proceed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.controller.SpecificMergeRouter.choose_route": [[37, 64], ["env.k.vehicle.get_type", "env.k.vehicle.get_lane", "env.k.vehicle.get_edge", "env.k.vehicle.get_route", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_type", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_route"], ["def", "choose_route", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"See parent class.\n\n        Adopt one of the current edge's routes if about to leave the network.\n        \"\"\"", "\n", "\n", "veh_type", "=", "env", ".", "k", ".", "vehicle", ".", "get_type", "(", "self", ".", "veh_id", ")", "\n", "current_lane", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane", "(", "self", ".", "veh_id", ")", "\n", "current_edge", "=", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "self", ".", "veh_id", ")", "\n", "current_route", "=", "env", ".", "k", ".", "vehicle", ".", "get_route", "(", "self", ".", "veh_id", ")", "\n", "\n", "\n", "if", "len", "(", "current_route", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "veh_type", "==", "'merge_0'", "and", "current_edge", "==", "'highway_0'", "and", "current_lane", "==", "0", ":", "\n", "            ", "route", "=", "env", ".", "available_routes", "[", "current_edge", "]", "[", "1", "]", "[", "0", "]", "\n", "", "elif", "veh_type", "==", "'merge_1'", "and", "current_edge", "==", "'highway_1'", "and", "current_lane", "==", "0", ":", "\n", "            ", "route", "=", "env", ".", "available_routes", "[", "current_edge", "]", "[", "1", "]", "[", "0", "]", "\n", "", "elif", "current_edge", "==", "'highway_0'", "or", "current_edge", "==", "'highway_1'", ":", "\n", "            ", "route", "=", "env", ".", "available_routes", "[", "current_edge", "]", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "else", ":", "\n", "            ", "route", "=", "None", "\n", "\n", "\n", "", "return", "route", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.controller.NearestMergeRouter.choose_route": [[67, 82], ["env.k.vehicle.get_type", "env.k.vehicle.get_lane", "env.k.vehicle.get_edge", "env.k.vehicle.get_route", "len", "env.k.vehicle.get_type.split"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_type", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_route"], ["    ", "def", "choose_route", "(", "self", ",", "env", ")", ":", "\n", "        ", "veh_type", "=", "env", ".", "k", ".", "vehicle", ".", "get_type", "(", "self", ".", "veh_id", ")", "\n", "current_lane", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane", "(", "self", ".", "veh_id", ")", "\n", "current_edge", "=", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "self", ".", "veh_id", ")", "\n", "current_route", "=", "env", ".", "k", ".", "vehicle", ".", "get_route", "(", "self", ".", "veh_id", ")", "\n", "\n", "if", "len", "(", "current_route", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "veh_type", ".", "split", "(", "'_'", ")", "[", "0", "]", "==", "'merge'", "and", "(", "current_edge", "==", "'highway_0'", "or", "current_edge", "==", "'highway_1'", ")", "and", "current_lane", "==", "0", ":", "\n", "            ", "return", "env", ".", "available_routes", "[", "current_edge", "]", "[", "1", "]", "[", "0", "]", "\n", "", "elif", "current_edge", "==", "'highway_0'", "or", "current_edge", "==", "'highway_1'", ":", "\n", "            ", "return", "env", ".", "available_routes", "[", "current_edge", "]", "[", "0", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.specific_environment.MergeEnv.observation_space": [[13, 26], ["gym.spaces.box.Box", "gym.spaces.box.Box", "gym.spaces.box.Box", "gym.spaces.Tuple"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Identify the dimensions and bounds of the observation space.\n        \"\"\"", "\n", "N", "=", "self", ".", "net_params", ".", "additional_params", "[", "'num_vehicles'", "]", "\n", "F", "=", "2", "+", "self", ".", "net_params", ".", "additional_params", "[", "'highway_lanes'", "]", "+", "self", ".", "n_unique_intentions", "\n", "\n", "states", "=", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "N", ",", "F", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "adjacency", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "N", ",", "N", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "mask", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "N", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "Tuple", "(", "[", "states", ",", "adjacency", ",", "mask", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.specific_environment.MergeEnv.action_space": [[27, 31], ["gym.spaces.box.Box"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "N", "=", "self", ".", "net_params", ".", "additional_params", "[", "'num_vehicles'", "]", "\n", "return", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "N", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# return Discrete(3)", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.specific_environment.MergeEnv.get_state": [[33, 121], ["specific_environment.MergeEnv.k.vehicle.get_ids", "specific_environment.MergeEnv.k.vehicle.get_rl_ids", "sorted", "sorted", "numpy.zeros", "numpy.zeros", "numpy.zeros", "specific_environment.MergeEnv.k.vehicle.get_human_ids", "len", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.zeros", "numpy.array", "numpy.zeros", "sklearn.metrics.pairwise.euclidean_distances", "numpy.zeros_like", "numpy.ones", "specific_environment.MergeEnv.k.vehicle.get_lane", "len", "specific_environment.MergeEnv.k.vehicle.get_edge().startswith", "numpy.array", "numpy.array", "len", "len", "specific_environment.MergeEnv.k.vehicle.get_speed", "numpy.arange", "numpy.arange", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "specific_environment.MergeEnv.k.vehicle.get_edge", "specific_environment.MergeEnv.k.vehicle.get_x_by_id", "len", "specific_environment.MergeEnv.k.vehicle.get_type", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_human_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_type"], ["", "def", "get_state", "(", "self", ")", ":", "# \u8be5\u51fd\u6570\u8fd4\u56de\u6784\u9020\u7684\u8282\u70b9\u7279\u5f81\u77e9\u9635\uff0c\u7a20\u5bc6\u90bb\u63a5\u77e9\u9635\u4ee5\u53camask\u77e9\u9635", "\n", "        ", "\"\"\"construct a graph for each time step\n        \"\"\"", "\n", "N", "=", "self", ".", "net_params", ".", "additional_params", "[", "'num_vehicles'", "]", "\n", "# num_cav = self.net_params.additional_params['num_cav'] # maximum number of CAVs", "\n", "num_hv", "=", "self", ".", "net_params", ".", "additional_params", "[", "'num_hv'", "]", "# maximum number of HDVs", "\n", "\n", "num_lanes", "=", "self", ".", "net_params", ".", "additional_params", "[", "'highway_lanes'", "]", "\n", "\n", "ids", "=", "self", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "rl_ids", "=", "self", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", "\n", "\n", "# filter the ones on the ramps", "\n", "rl_ids", "=", "[", "id_", "for", "id_", "in", "rl_ids", "if", "not", "self", ".", "k", ".", "vehicle", ".", "get_edge", "(", "id_", ")", ".", "startswith", "(", "'off_ramp'", ")", "]", "\n", "rl_ids", "=", "sorted", "(", "rl_ids", ")", "\n", "# print(\"rl:\", rl_ids)", "\n", "\n", "human_ids", "=", "sorted", "(", "self", ".", "k", ".", "vehicle", ".", "get_human_ids", "(", ")", ")", "\n", "# print(\"human:\", human_ids)", "\n", "\n", "# If too many human ids", "\n", "if", "len", "(", "human_ids", ")", ">", "num_hv", ":", "\n", "            ", "human_ids", "=", "human_ids", "[", ":", "num_hv", "]", "\n", "\n", "# assert len(ids) != len(human_ids) + len(rl_ids)", "\n", "\n", "# \u521d\u59cb\u5316\u72b6\u6001\u7a7a\u95f4\u77e9\u9635\uff0c\u90bb\u63a5\u77e9\u9635\u548cmask", "\n", "", "states", "=", "np", ".", "zeros", "(", "[", "N", ",", "2", "+", "num_lanes", "+", "self", ".", "n_unique_intentions", "]", ")", "\n", "adjacency", "=", "np", ".", "zeros", "(", "[", "N", ",", "N", "]", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "N", ")", "\n", "\n", "if", "rl_ids", ":", "## when there is rl_vehicles in the scenario", "\n", "\n", "            ", "ids", "=", "human_ids", "+", "rl_ids", "\n", "\n", "# numerical data (speed, location)", "\n", "speeds", "=", "np", ".", "array", "(", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "ids", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "# positions = np.array([self.k.vehicle.get_absolute_position(i) for i in ids])  # x y location", "\n", "xs", "=", "np", ".", "array", "(", "[", "self", ".", "k", ".", "vehicle", ".", "get_x_by_id", "(", "i", ")", "for", "i", "in", "ids", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "# categorical data 1 hot encoding: (lane location, intention)", "\n", "lanes_column", "=", "np", ".", "array", "(", "self", ".", "k", ".", "vehicle", ".", "get_lane", "(", "ids", ")", ")", "# \u5f53\u524d\u73af\u5883\u4e2d\u7684\u8f66\u8f86\u6240\u5728\u8f66\u9053\u7684\u7f16\u53f7", "\n", "lanes", "=", "np", ".", "zeros", "(", "[", "len", "(", "ids", ")", ",", "num_lanes", "]", ")", "# \u521d\u59cb\u5316\u8f66\u9053onehot\u77e9\u9635\uff08\u5f53\u524d\u8f66\u8f86\u6570\u91cfx\u8f66\u9053\u6570\u91cf\uff09", "\n", "lanes", "[", "np", ".", "arange", "(", "len", "(", "ids", ")", ")", ",", "lanes_column", "]", "=", "1", "# \u6839\u636e\u6bcf\u8f86\u8f66\u5f53\u524d\u6240\u5904\u7684\u8f66\u9053\uff0c\u5728\u77e9\u9635\u5bf9\u5e94\u4f4d\u7f6e\u8d4b\u503c\u4e3a1", "\n", "# print(np.arange(len(ids)))", "\n", "# print(\"lanes_column\", lanes_column)", "\n", "# print(\"lanes:\", lanes)", "\n", "\n", "# intention encoding", "\n", "# \u83b7\u5f97\u5f53\u524d\u73af\u5883\u4e2d\u8f66\u8f86\u7684\u7c7b\u522b\uff0c0\u4e3a\u6709\u4eba\u8f66\u8f86\uff0c1\u4e3a\u531d\u90531\u9a76\u51fa\u7684RL\u8f66\u8f86\uff0c2\u4e3a\u531d\u90532\u9a76\u51fa\u7684RL\u8f66\u8f86\uff1b\u4e14\u83b7\u5f97\u7684\u77e9\u9635\u7684\u5143\u7d20\u63090\uff0c1\uff0c2\u987a\u5e8f\u6392\u5217", "\n", "types_column", "=", "np", ".", "array", "(", "[", "self", ".", "intention_dict", "[", "self", ".", "k", ".", "vehicle", ".", "get_type", "(", "i", ")", "]", "for", "i", "in", "ids", "]", ")", "\n", "intention", "=", "np", ".", "zeros", "(", "[", "len", "(", "ids", ")", ",", "self", ".", "n_unique_intentions", "]", ")", "# \u521d\u59cb\u5316intention\u77e9\u9635\uff08\u5f53\u524d\u8f66\u8f86\u6570\u91cfx\u8f66\u8f86\u79cd\u7c7b\uff09", "\n", "intention", "[", "np", ".", "arange", "(", "len", "(", "ids", ")", ")", ",", "types_column", "]", "=", "1", "# \u6839\u636e\u5f53\u524d\u73af\u5883\u4e2d\u7684\u8f66\u8f86\u7684\u7c7b\u578b\u4e3aintention\u77e9\u9635\u8d4b\u503c", "\n", "\n", "observed_states", "=", "np", ".", "c_", "[", "xs", ",", "speeds", ",", "lanes", ",", "intention", "]", "# \u5c06\u4e0a\u8ff0\u76f8\u5173\u77e9\u9635\u6309\u5217\u5408\u6210\u4e3a\u72b6\u6001\u89c2\u6d4b\u77e9\u9635", "\n", "\n", "# assemble into the NxF states matrix", "\n", "# \u5c06\u4e0a\u8ff0\u5bf9\u73af\u5883\u7684\u89c2\u6d4b\u50a8\u5b58\u81f3\u72b6\u6001\u77e9\u9635\u4e2d", "\n", "states", "[", ":", "len", "(", "human_ids", ")", ",", ":", "]", "=", "observed_states", "[", ":", "len", "(", "human_ids", ")", ",", ":", "]", "\n", "states", "[", "num_hv", ":", "num_hv", "+", "len", "(", "rl_ids", ")", ",", ":", "]", "=", "observed_states", "[", "len", "(", "human_ids", ")", ":", ",", ":", "]", "\n", "\n", "states", "[", ":", ",", "0", "]", "/=", "self", ".", "net_params", ".", "additional_params", "[", "'highway_length'", "]", "\n", "\n", "# construct the adjacency matrix", "\n", "# \u751f\u6210\u90bb\u63a5\u77e9\u9635", "\n", "# \u4f7f\u7528sklearn\u5e93\u4e2d\u7684\u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb\u51fd\u6570\u8ba1\u7b97\u73af\u5883\u4e2d\u4e24\u4e24\u8f66\u8f86\u7684\u6c34\u5e73\u8ddd\u79bb\uff08x\u5750\u6807\uff0c\u7ef4\u5ea6\u5f53\u524d\u8f66\u8f86x\u5f53\u524d\u8f66\u8f86\uff09", "\n", "dist_matrix", "=", "euclidean_distances", "(", "xs", ")", "\n", "adjacency_small", "=", "np", ".", "zeros_like", "(", "dist_matrix", ")", "# \u6839\u636edist_matrix\u751f\u6210\u7ef4\u5ea6\u76f8\u540c\u7684\u5168\u96f6\u90bb\u63a5\u77e9\u9635", "\n", "adjacency_small", "[", "dist_matrix", "<", "20", "]", "=", "1", "\n", "adjacency_small", "[", "-", "len", "(", "rl_ids", ")", ":", ",", "-", "len", "(", "rl_ids", ")", ":", "]", "=", "1", "# \u5c06RL\u8f66\u8f86\u4e4b\u95f4\u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u8fdb\u884c\u8d4b\u503c", "\n", "\n", "# assemble into the NxN adjacency matrix", "\n", "# \u5c06\u4e0a\u8ff0small\u90bb\u63a5\u77e9\u9635\u50a8\u5b58\u81f3\u7a20\u5bc6\u90bb\u63a5\u77e9\u9635\u4e2d", "\n", "adjacency", "[", ":", "len", "(", "human_ids", ")", ",", ":", "len", "(", "human_ids", ")", "]", "=", "adjacency_small", "[", ":", "len", "(", "human_ids", ")", ",", ":", "len", "(", "human_ids", ")", "]", "\n", "adjacency", "[", "num_hv", ":", "num_hv", "+", "len", "(", "rl_ids", ")", ",", ":", "len", "(", "human_ids", ")", "]", "=", "adjacency_small", "[", "len", "(", "human_ids", ")", ":", ",", ":", "len", "(", "human_ids", ")", "]", "\n", "adjacency", "[", ":", "len", "(", "human_ids", ")", ",", "num_hv", ":", "num_hv", "+", "len", "(", "rl_ids", ")", "]", "=", "adjacency_small", "[", ":", "len", "(", "human_ids", ")", ",", "len", "(", "human_ids", ")", ":", "]", "\n", "adjacency", "[", "num_hv", ":", "num_hv", "+", "len", "(", "rl_ids", ")", ",", "num_hv", ":", "num_hv", "+", "len", "(", "rl_ids", ")", "]", "=", "adjacency_small", "[", "len", "(", "human_ids", ")", ":", ",", "\n", "len", "(", "human_ids", ")", ":", "]", "\n", "\n", "# construct the mask", "\n", "# \u6784\u9020mask\u77e9\u9635", "\n", "mask", "[", "num_hv", ":", "num_hv", "+", "len", "(", "rl_ids", ")", "]", "=", "np", ".", "ones", "(", "len", "(", "rl_ids", ")", ")", "\n", "\n", "self", ".", "observed_cavs", "=", "rl_ids", "# RL\u8f66\u8f86", "\n", "self", ".", "observed_all_vehs", "=", "ids", "# \u5168\u90e8\u8f66\u8f86", "\n", "\n", "", "return", "states", ",", "adjacency", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.specific_environment.MergeEnv.compute_reward": [[122, 177], ["specific_environment.MergeEnv.k.vehicle.get_rl_ids", "len", "numpy.array", "numpy.mean", "specific_environment.MergeEnv.compute_intention_rewards", "specific_environment.MergeEnv.k.vehicle.get_speed", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.specific_environment.MergeEnv.compute_intention_rewards", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], ["", "def", "compute_reward", "(", "self", ",", "rl_actions", ",", "**", "kwargs", ")", ":", "# \u8be5\u51fd\u6570\u7528\u6765\u8ba1\u7b97\u5956\u52b1\u503c", "\n", "# w_intention = 10", "\n", "        ", "w_intention", "=", "3", "\n", "w_speed", "=", "0.8", "\n", "w_p_lane_change", "=", "0.05", "\n", "w_p_crash", "=", "0.8", "\n", "# w_p_crash = 0", "\n", "\n", "unit", "=", "1", "\n", "\n", "# reward for system speed: mean(speed/max_speed) for every vehicle", "\n", "speed_reward", "=", "0", "\n", "intention_reward", "=", "0", "\n", "\n", "rl_ids", "=", "self", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", "\n", "if", "len", "(", "rl_ids", ")", "!=", "0", ":", "# \u82e5\u89c2\u6d4b\u5230RL\u8f66\u8f86", "\n", "# all_speed = np.array(self.k.vehicle.get_speed(self.observed_all_vehs))", "\n", "# max_speed = np.array([self.env_params.additional_params['max_hv_speed']]*(len(self.observed_all_vehs) - len(self.observed_cavs))\\", "\n", "#                     +[self.env_params.additional_params['max_cav_speed']]*len(self.observed_cavs))", "\n", "\n", "# all_speed = np.array(self.k.vehicle.get_speed(self.observed_cavs))", "\n", "            ", "all_speed", "=", "np", ".", "array", "(", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "rl_ids", ")", ")", "\n", "max_speed", "=", "self", ".", "env_params", ".", "additional_params", "[", "'max_av_speed'", "]", "\n", "speed_reward", "=", "np", ".", "mean", "(", "all_speed", "/", "max_speed", ")", "\n", "# print(\"cavs:\", self.observed_cavs)", "\n", "# print(\"all_speed:\", all_speed)", "\n", "# print(\"speed_reward:\", speed_reward)", "\n", "\n", "###### reward for satisfying intention ---- only a big instant reward", "\n", "# intention_reward = kwargs['num_full_filled'] * unit + kwargs['num_half_filled'] * unit * 0.5", "\n", "intention_reward", "=", "self", ".", "compute_intention_rewards", "(", ")", "# \u8ba1\u7b97\u610f\u56fe\u5956\u52b1", "\n", "\n", "# penalty for frequent lane changing behavors", "\n", "# \u8fd9\u90e8\u5206\u8ba1\u7b97\u5bf9\u9891\u7e41\u6362\u9053\u7684\u5904\u7f5a\uff08\u8d1f\u5956\u52b1\uff09", "\n", "", "drastic_lane_change_penalty", "=", "0", "\n", "if", "self", ".", "drastic_veh_id", ":", "\n", "            ", "drastic_lane_change_penalty", "+=", "len", "(", "self", ".", "drastic_veh_id", ")", "*", "unit", "\n", "\n", "# penalty for crashing", "\n", "# \u5bf9\u4e8e\u78b0\u649e\u7684\u60e9\u7f5a\uff08\u8d1f\u5956\u52b1\uff09", "\n", "", "total_crash_penalty", "=", "0", "\n", "crash_ids", "=", "kwargs", "[", "\"fail\"", "]", "\n", "# print(\"kwargs: \", kwargs)", "\n", "# print(\"crash:\", crash_ids)", "\n", "total_crash_penalty", "=", "crash_ids", "*", "unit", "\n", "# print(\"total_crash_penalty:\", total_crash_penalty)", "\n", "# if crash_ids:", "\n", "#     print(crash_ids,total_crash_penalty)", "\n", "\n", "# print(speed_reward, intention_reward, total_crash_penalty, drastic_lane_change_penalty)", "\n", "# \u8fd9\u91cc\u8ba1\u7b97\u5956\u52b1\u65f6\u7684\u7cfb\u6570\u53ef\u80fd\u5b58\u5728\u95ee\u9898", "\n", "return", "w_speed", "*", "speed_reward", "+", "w_intention", "*", "intention_reward", "-", "w_p_lane_change", "*", "drastic_lane_change_penalty", "-", "w_p_crash", "*", "total_crash_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.specific_environment.MergeEnv.compute_intention_rewards": [[178, 244], ["specific_environment.MergeEnv.k.vehicle.get_lane", "specific_environment.MergeEnv.k.vehicle.get_edge", "specific_environment.MergeEnv.k.vehicle.get_type", "specific_environment.MergeEnv.k.vehicle.get_x_by_id", "Exception"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_type", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id"], ["", "def", "compute_intention_rewards", "(", "self", ")", ":", "# \u8be5\u51fd\u6570\u7528\u6765\u8ba1\u7b97intention\uff08\u610f\u56fe\uff09\u5956\u52b1\u503c", "\n", "\n", "        ", "intention_reward", "=", "0", "\n", "try", ":", "\n", "            ", "for", "cav_id", "in", "self", ".", "observed_cavs", ":", "\n", "                ", "cav_lane", "=", "self", ".", "k", ".", "vehicle", ".", "get_lane", "(", "cav_id", ")", "\n", "cav_edge", "=", "self", ".", "k", ".", "vehicle", ".", "get_edge", "(", "cav_id", ")", "\n", "cav_type", "=", "self", ".", "k", ".", "vehicle", ".", "get_type", "(", "cav_id", ")", "\n", "# print(\"cav_lane:\", cav_lane, \"\\ncav_edge:\", cav_edge, \"\\ncav_type:\", cav_type)", "\n", "\n", "x", "=", "self", ".", "k", ".", "vehicle", ".", "get_x_by_id", "(", "cav_id", ")", "\n", "\n", "if", "cav_type", "==", "\"merge_0\"", ":", "\n", "                    ", "if", "cav_edge", "==", "'highway_0'", ":", "\n", "                        ", "val", "=", "(", "self", ".", "net_params", ".", "additional_params", "[", "'off_ramps_pos'", "]", "[", "0", "]", "-", "x", ")", "/", "self", ".", "net_params", ".", "additional_params", "[", "'off_ramps_pos'", "]", "[", "0", "]", "\n", "if", "cav_lane", "==", "0", ":", "\n", "                            ", "intention_reward", "+=", "val", "\n", "", "elif", "cav_lane", "==", "2", ":", "\n", "                            ", "intention_reward", "-=", "(", "1", "-", "val", ")", "\n", "\n", "", "", "", "elif", "cav_type", "==", "\"merge_1\"", ":", "\n", "\n", "                    ", "if", "cav_edge", "==", "\"highway_0\"", "and", "cav_lane", "==", "0", ":", "\n", "                        ", "val", "=", "(", "self", ".", "net_params", ".", "additional_params", "[", "'off_ramps_pos'", "]", "[", "0", "]", "-", "x", ")", "/", "self", ".", "net_params", ".", "additional_params", "[", "'off_ramps_pos'", "]", "[", "0", "]", "\n", "intention_reward", "+=", "val", "-", "1", "\n", "\n", "\n", "", "elif", "cav_edge", "==", "\"highway_1\"", ":", "\n", "                        ", "val", "=", "(", "self", ".", "net_params", ".", "additional_params", "[", "'off_ramps_pos'", "]", "[", "1", "]", "-", "x", ")", "/", "(", "\n", "self", ".", "net_params", ".", "additional_params", "[", "'off_ramps_pos'", "]", "[", "1", "]", "-", "\n", "self", ".", "net_params", ".", "additional_params", "[", "'off_ramps_pos'", "]", "[", "0", "]", ")", "\n", "if", "cav_lane", "==", "0", ":", "\n", "                            ", "intention_reward", "+=", "val", "\n", "", "elif", "cav_lane", "==", "2", ":", "\n", "                            ", "intention_reward", "-=", "(", "1", "-", "val", ")", "\n", "\n", "", "", "else", ":", "\n", "                        ", "pass", "\n", "", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "\"unknow cav type\"", ")", "\n", "", "", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "# print(cav_id,x,cav_lane)", "\n", "# if cav_lane == 0:", "\n", "#     # print('here')", "\n", "#     x = self.k.vehicle.get_x_by_id(cav_id)", "\n", "#     cav_edge = self.k.vehicle.get_edge(cav_id)", "\n", "#     cav_type = self.k.vehicle.get_type(cav_id)", "\n", "#     # total_length = self.net_params.additional_params['highway_length']", "\n", "#     if (cav_type == 'merge_0' and cav_edge == 'highway_0'):", "\n", "#         val = (self.net_params.additional_params['off_ramps_pos'][0] - x)/self.net_params.additional_params['off_ramps_pos'][0]", "\n", "#         intention_reward += val", "\n", "#         # print('1: ',cav_id,val)", "\n", "#     elif (cav_type == 'merge_1' and cav_edge == 'highway_1'):", "\n", "#         val = (self.net_params.additional_params['off_ramps_pos'][1] - x)/(self.net_params.additional_params['off_ramps_pos'][1] - self.net_params.additional_params['off_ramps_pos'][0])", "\n", "#         intention_reward += val", "\n", "#         # print('2: ', cav_id, val)", "\n", "#     elif (cav_type == 'merge_1' and cav_edge == 'highway_0'):", "\n", "#         val = (self.net_params.additional_params['off_ramps_pos'][0] - x)/self.net_params.additional_params['off_ramps_pos'][0]", "\n", "#         intention_reward -= (1-val)", "\n", "# print('3: ', cav_id, (1-val))", "\n", "\n", "", "return", "intention_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.specific_environment.MergeEnv.apply_rl_actions": [[245, 266], ["specific_environment.MergeEnv.k.vehicle.get_ids", "specific_environment.MergeEnv.k.vehicle.get_rl_ids", "isinstance", "rl_actions.copy", "enumerate", "len", "specific_environment.MergeEnv.k.vehicle.apply_lane_change", "drastic_veh.append", "specific_environment.MergeEnv.k.vehicle.get_last_lc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_lane_change", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_last_lc"], ["", "def", "apply_rl_actions", "(", "self", ",", "rl_actions", "=", "None", ")", ":", "# \u6267\u884c\u5f3a\u5316\u5b66\u4e60\u7684\u884c\u4e3a", "\n", "        ", "ids", "=", "self", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "rl_ids", "=", "self", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", "\n", "if", "isinstance", "(", "rl_actions", ",", "np", ".", "ndarray", ")", ":", "\n", "# rl_actions = rl_actions.reshape((self.net_params.additional_params['num_cav'],3))", "\n", "            ", "rl_actions2", "=", "rl_actions", ".", "copy", "(", ")", "\n", "rl_actions2", "-=", "1", "\n", "# rl_ids = self.observed_cavs", "\n", "drastic_veh", "=", "[", "]", "\n", "for", "ind", ",", "veh_id", "in", "enumerate", "(", "rl_ids", ")", ":", "# \u8fd9\u90e8\u5206\u901a\u8fc7\u8ba1\u7b97\u5f53\u524d\u65f6\u95f4\u4ee5\u53ca\u6700\u540e\u4e00\u6b21\u6362\u9053\u7684\u65f6\u95f4\u95f4\u9694\u6765\u68c0\u6d4b\u8f66\u8f86\u662f\u5426\u6709\u6fc0\u70c8\u6362\u5230\u884c\u4e3a", "\n", "                ", "if", "rl_actions2", "[", "ind", "]", "!=", "0", "and", "(", "self", ".", "time_counter", "-", "self", ".", "k", ".", "vehicle", ".", "get_last_lc", "(", "veh_id", ")", "<", "50", ")", ":", "\n", "                    ", "drastic_veh", ".", "append", "(", "veh_id", ")", "\n", "# print(\"drastic lane change: \", veh_id)", "\n", "\n", "", "", "self", ".", "drastic_veh_id", "=", "drastic_veh", "\n", "if", "len", "(", "rl_ids", ")", "!=", "0", ":", "# GRL\u53ea\u9488\u5bf9RL\u8f66\u8f86\u8fdb\u884c\u63a7\u5236\uff0c\u6545\u82e5\u7a7a\u95f4\u4e2d\u6ca1\u6709RL\u8f66\u8f86\uff0c\u5219\u8df3\u8fc7\u63a7\u5236\u73af\u8282", "\n", "                ", "self", ".", "k", ".", "vehicle", ".", "apply_lane_change", "(", "rl_ids", ",", "rl_actions2", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.specific_environment.MergeEnv.check_full_fill": [[267, 294], ["specific_environment.MergeEnv.k.vehicle.get_rl_ids", "specific_environment.MergeEnv.k.vehicle.get_edge", "specific_environment.MergeEnv.exited_vehicles.append", "specific_environment.MergeEnv.k.vehicle.get_type", "print", "print", "Exception"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_type"], ["", "def", "check_full_fill", "(", "self", ")", ":", "# \u7edf\u8ba1\u6210\u529f\u4ece\u5bf9\u5e94\u531d\u9053\u9a76\u51fa\u7684RL\u8f66\u8f86", "\n", "        ", "rl_veh_ids", "=", "self", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", "\n", "num_full_filled", "=", "0", "\n", "num_half_filled", "=", "0", "\n", "for", "rl_id", "in", "rl_veh_ids", ":", "\n", "            ", "if", "rl_id", "not", "in", "self", ".", "exited_vehicles", ":", "\n", "                ", "current_edge", "=", "self", ".", "k", ".", "vehicle", ".", "get_edge", "(", "rl_id", ")", "\n", "if", "current_edge", "in", "self", ".", "terminal_edges", ":", "\n", "                    ", "self", ".", "exited_vehicles", ".", "append", "(", "rl_id", ")", "\n", "veh_type", "=", "self", ".", "k", ".", "vehicle", ".", "get_type", "(", "rl_id", ")", "\n", "\n", "# check if satisfy the intention", "\n", "\n", "if", "self", ".", "n_unique_intentions", "==", "3", ":", "# specific merge", "\n", "                        ", "if", "(", "veh_type", "==", "'merge_0'", "and", "current_edge", "==", "'off_ramp_0'", ")", "or", "(", "veh_type", "==", "'merge_1'", "and", "current_edge", "==", "'off_ramp_1'", ")", ":", "\n", "                            ", "num_full_filled", "+=", "1", "\n", "print", "(", "'satisfied: '", ",", "rl_id", ")", "\n", "\n", "", "", "elif", "self", ".", "n_unique_intentions", "==", "2", ":", "# nearest merge", "\n", "                        ", "num_full_filled", "+=", "(", "current_edge", "==", "'off_ramp_0'", ")", "*", "1", "\n", "num_half_filled", "+=", "(", "current_edge", "==", "'off_ramp_1'", ")", "*", "1", "\n", "print", "(", "\"wrongs\"", ")", "\n", "\n", "", "else", ":", "\n", "                        ", "raise", "Exception", "(", "\"unknown num of unique n_unique_intentions\"", ")", "\n", "", "", "", "", "return", "num_full_filled", ",", "num_half_filled", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.network.HighwayRampsNetwork.__init__": [[59, 120], ["flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "ADDITIONAL_NET_PARAMS.keys", "sorted", "sorted", "network.HighwayRampsNetwork.ramp_pos.update", "flow.networks.base.Network.__init__", "list", "ValueError", "len", "len", "ValueError", "KeyError", "set", "enumerate", "enumerate", "len", "list", "enumerate", "min", "max", "set"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max"], ["def", "__init__", "(", "self", ",", "\n", "name", ",", "\n", "vehicles", ",", "\n", "net_params", ",", "\n", "initial_config", "=", "InitialConfig", "(", ")", ",", "\n", "traffic_lights", "=", "TrafficLightParams", "(", ")", ")", ":", "\n", "        ", "\"\"\"Initialize a highway with on and off ramps network.\"\"\"", "\n", "for", "p", "in", "ADDITIONAL_NET_PARAMS", ".", "keys", "(", ")", ":", "\n", "            ", "if", "p", "not", "in", "net_params", ".", "additional_params", ":", "\n", "                ", "raise", "KeyError", "(", "'Network parameter \"{}\" not supplied'", ".", "format", "(", "p", ")", ")", "\n", "\n", "# load parameters into class", "\n", "", "", "params", "=", "net_params", ".", "additional_params", "\n", "\n", "self", ".", "highway_length", "=", "params", "[", "'highway_length'", "]", "\n", "self", ".", "on_ramps_length", "=", "params", "[", "'on_ramps_length'", "]", "\n", "self", ".", "off_ramps_length", "=", "params", "[", "'off_ramps_length'", "]", "\n", "\n", "self", ".", "highway_lanes", "=", "params", "[", "'highway_lanes'", "]", "\n", "self", ".", "on_ramps_lanes", "=", "params", "[", "'on_ramps_lanes'", "]", "\n", "self", ".", "off_ramps_lanes", "=", "params", "[", "'off_ramps_lanes'", "]", "\n", "\n", "self", ".", "highway_speed", "=", "params", "[", "'highway_speed'", "]", "\n", "self", ".", "on_ramps_speed", "=", "params", "[", "'on_ramps_speed'", "]", "\n", "self", ".", "off_ramps_speed", "=", "params", "[", "'off_ramps_speed'", "]", "\n", "\n", "self", ".", "on_ramps_pos", "=", "params", "[", "'on_ramps_pos'", "]", "\n", "self", ".", "off_ramps_pos", "=", "params", "[", "'off_ramps_pos'", "]", "\n", "\n", "self", ".", "p", "=", "params", "[", "'next_off_ramp_proba'", "]", "\n", "\n", "self", ".", "angle_on_ramps", "=", "params", "[", "'angle_on_ramps'", "]", "\n", "self", ".", "angle_off_ramps", "=", "params", "[", "'angle_off_ramps'", "]", "\n", "\n", "# generate position of all network nodes", "\n", "self", ".", "ramps_pos", "=", "sorted", "(", "self", ".", "on_ramps_pos", "+", "self", ".", "off_ramps_pos", ")", "\n", "self", ".", "nodes_pos", "=", "sorted", "(", "list", "(", "set", "(", "[", "0", "]", "+", "self", ".", "ramps_pos", "+", "\n", "[", "self", ".", "highway_length", "]", ")", ")", ")", "\n", "\n", "# highway_pos[x] = id of the highway node whose starting position is x", "\n", "self", ".", "highway_pos", "=", "{", "x", ":", "i", "for", "i", ",", "x", "in", "enumerate", "(", "self", ".", "nodes_pos", ")", "}", "\n", "# ramp_pos[x] = id of the ramp node whose intersection with the highway", "\n", "# is at position x", "\n", "self", ".", "ramp_pos", "=", "{", "x", ":", "\"on_ramp_{}\"", ".", "format", "(", "i", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "self", ".", "on_ramps_pos", ")", "}", "\n", "self", ".", "ramp_pos", ".", "update", "(", "{", "x", ":", "\"off_ramp_{}\"", ".", "format", "(", "i", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "self", ".", "off_ramps_pos", ")", "}", ")", "\n", "\n", "# make sure network is constructable", "\n", "if", "(", "len", "(", "self", ".", "ramps_pos", ")", ">", "0", "and", "\n", "(", "min", "(", "self", ".", "ramps_pos", ")", "<=", "0", "or", "\n", "max", "(", "self", ".", "ramps_pos", ")", ">=", "self", ".", "highway_length", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'All ramps positions should be positive and less '", "\n", "'than highway length. Current ramps positions: {}'", "\n", "'. Current highway length: {}.'", ".", "format", "(", "\n", "self", ".", "ramps_pos", ",", "self", ".", "highway_length", ")", ")", "\n", "", "if", "len", "(", "self", ".", "ramps_pos", ")", "!=", "len", "(", "list", "(", "set", "(", "self", ".", "ramps_pos", ")", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Two ramps positions cannot be equal.'", ")", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "name", ",", "vehicles", ",", "net_params", ",", "initial_config", ",", "\n", "traffic_lights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.network.HighwayRampsNetwork.specify_nodes": [[121, 143], ["range", "enumerate", "enumerate", "len", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos"], "methods", ["None"], ["", "def", "specify_nodes", "(", "self", ",", "net_params", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "nodes_highway", "=", "[", "{", "\n", "\"id\"", ":", "\"highway_{}\"", ".", "format", "(", "i", ")", ",", "\n", "\"x\"", ":", "self", ".", "nodes_pos", "[", "i", "]", ",", "\n", "\"y\"", ":", "0", ",", "\n", "\"radius\"", ":", "10", "\n", "}", "for", "i", "in", "range", "(", "len", "(", "self", ".", "nodes_pos", ")", ")", "]", "\n", "\n", "nodes_on_ramps", "=", "[", "{", "\n", "\"id\"", ":", "\"on_ramp_{}\"", ".", "format", "(", "i", ")", ",", "\n", "\"x\"", ":", "x", "+", "self", ".", "on_ramps_length", "*", "cos", "(", "self", ".", "angle_on_ramps", ")", ",", "\n", "\"y\"", ":", "self", ".", "on_ramps_length", "*", "sin", "(", "self", ".", "angle_on_ramps", ")", "\n", "}", "for", "i", ",", "x", "in", "enumerate", "(", "self", ".", "on_ramps_pos", ")", "]", "\n", "\n", "nodes_off_ramps", "=", "[", "{", "\n", "\"id\"", ":", "\"off_ramp_{}\"", ".", "format", "(", "i", ")", ",", "\n", "\"x\"", ":", "x", "+", "self", ".", "off_ramps_length", "*", "cos", "(", "self", ".", "angle_off_ramps", ")", ",", "\n", "\"y\"", ":", "self", ".", "off_ramps_length", "*", "sin", "(", "self", ".", "angle_off_ramps", ")", "\n", "}", "for", "i", ",", "x", "in", "enumerate", "(", "self", ".", "off_ramps_pos", ")", "]", "\n", "\n", "return", "nodes_highway", "+", "nodes_on_ramps", "+", "nodes_off_ramps", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.network.HighwayRampsNetwork.specify_edges": [[144, 171], ["range", "enumerate", "enumerate", "len"], "methods", ["None"], ["", "def", "specify_edges", "(", "self", ",", "net_params", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "highway_edges", "=", "[", "{", "\n", "\"id\"", ":", "\"highway_{}\"", ".", "format", "(", "i", ")", ",", "\n", "\"type\"", ":", "\"highway\"", ",", "\n", "\"from\"", ":", "\"highway_{}\"", ".", "format", "(", "i", ")", ",", "\n", "\"to\"", ":", "\"highway_{}\"", ".", "format", "(", "i", "+", "1", ")", ",", "\n", "\"length\"", ":", "self", ".", "nodes_pos", "[", "i", "+", "1", "]", "-", "self", ".", "nodes_pos", "[", "i", "]", "\n", "}", "for", "i", "in", "range", "(", "len", "(", "self", ".", "nodes_pos", ")", "-", "1", ")", "]", "\n", "\n", "on_ramps_edges", "=", "[", "{", "\n", "\"id\"", ":", "\"on_ramp_{}\"", ".", "format", "(", "i", ")", ",", "\n", "\"type\"", ":", "\"on_ramp\"", ",", "\n", "\"from\"", ":", "\"on_ramp_{}\"", ".", "format", "(", "i", ")", ",", "\n", "\"to\"", ":", "\"highway_{}\"", ".", "format", "(", "self", ".", "highway_pos", "[", "x", "]", ")", ",", "\n", "\"length\"", ":", "self", ".", "on_ramps_length", "\n", "}", "for", "i", ",", "x", "in", "enumerate", "(", "self", ".", "on_ramps_pos", ")", "]", "\n", "\n", "off_ramps_edges", "=", "[", "{", "\n", "\"id\"", ":", "\"off_ramp_{}\"", ".", "format", "(", "i", ")", ",", "\n", "\"type\"", ":", "\"off_ramp\"", ",", "\n", "\"from\"", ":", "\"highway_{}\"", ".", "format", "(", "self", ".", "highway_pos", "[", "x", "]", ")", ",", "\n", "\"to\"", ":", "\"off_ramp_{}\"", ".", "format", "(", "i", ")", ",", "\n", "\"length\"", ":", "self", ".", "off_ramps_length", "\n", "}", "for", "i", ",", "x", "in", "enumerate", "(", "self", ".", "off_ramps_pos", ")", "]", "\n", "\n", "return", "highway_edges", "+", "on_ramps_edges", "+", "off_ramps_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.network.HighwayRampsNetwork.specify_routes": [[172, 188], ["None"], "methods", ["None"], ["", "def", "specify_routes", "(", "self", ",", "net_params", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "rts", "=", "{", "\n", "'highway_0'", ":", "[", "(", "[", "'highway_0'", ",", "'highway_1'", "]", ",", "0.5", ")", ",", "\n", "(", "[", "'highway_0'", ",", "'off_ramp_0'", "]", ",", "0.5", ")", "]", ",", "\n", "'highway_1'", ":", "[", "(", "[", "'highway_1'", ",", "'highway_2'", "]", ",", "0.5", ")", ",", "\n", "(", "[", "'highway_1'", ",", "'off_ramp_1'", "]", ",", "0.5", ")", "]", ",", "\n", "'highway_2'", ":", "[", "(", "[", "'highway_2'", "]", ",", "1", ")", "]", ",", "\n", "'off_ramp_0'", ":", "[", "(", "[", "'off_ramp_0'", "]", ",", "1", ")", "]", ",", "\n", "'off_ramp_1'", ":", "[", "(", "[", "'off_ramp_1'", "]", ",", "1", ")", "]", ",", "\n", "'human'", ":", "[", "(", "[", "'highway_0'", ",", "'highway_1'", ",", "'highway_2'", "]", ",", "1", ")", "]", ",", "\n", "'merge_1'", ":", "[", "(", "[", "'highway_0'", ",", "'highway_1'", ",", "'off_ramp_1'", "]", ",", "1", ")", "]", ",", "\n", "'merge_0'", ":", "[", "(", "[", "'highway_0'", ",", "'off_ramp_0'", "]", ",", "1", ")", "]", "\n", "}", "\n", "\n", "return", "rts", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.network.HighwayRampsNetwork.specify_types": [[189, 206], ["None"], "methods", ["None"], ["", "def", "specify_types", "(", "self", ",", "net_params", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "types", "=", "[", "{", "\n", "\"id\"", ":", "\"highway\"", ",", "\n", "\"numLanes\"", ":", "self", ".", "highway_lanes", ",", "\n", "\"speed\"", ":", "self", ".", "highway_speed", "\n", "}", ",", "{", "\n", "\"id\"", ":", "\"on_ramp\"", ",", "\n", "\"numLanes\"", ":", "self", ".", "on_ramps_lanes", ",", "\n", "\"speed\"", ":", "self", ".", "on_ramps_speed", "\n", "}", ",", "{", "\n", "\"id\"", ":", "\"off_ramp\"", ",", "\n", "\"numLanes\"", ":", "self", ".", "off_ramps_lanes", ",", "\n", "\"speed\"", ":", "self", ".", "off_ramps_speed", "\n", "}", "]", "\n", "\n", "return", "types", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.registry_custom.make_create_env": [[13, 136], ["isinstance", "gym.envs.registry.all", "isinstance", "params.get", "params.get", "print", "print", "__import__", "getattr", "flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "copy.deepcopy", "copy.deepcopy", "isinstance", "gym.envs.registration.register", "gym.envs.make", "dir", "env.startswith"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], ["def", "make_create_env", "(", "params", ",", "version", "=", "0", ",", "render", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create a parametrized flow environment compatible with OpenAI gym.\n\n    This environment creation method allows for the specification of several\n    key parameters when creating any flow environment, including the requested\n    environment and network classes, and the inputs needed to make these\n    classes generalizable to networks of varying sizes and shapes, and well as\n    varying forms of control (e.g. AVs, automated traffic lights, etc...).\n\n    This method can also be used to recreate the environment a policy was\n    trained on and assess it performance, or a modified form of the previous\n    environment may be used to profile the performance of the policy on other\n    types of networks.\n\n    Parameters\n    ----------\n    params : dict\n        flow-related parameters, consisting of the following keys:\n\n         - exp_tag: name of the experiment\n         - env_name: environment class of the flow environment the experiment\n           is running on. (note: must be in an importable module.)\n         - network: network class the experiment uses.\n         - simulator: simulator that is used by the experiment (e.g. aimsun)\n         - sim: simulation-related parameters (see flow.core.params.SimParams)\n         - env: environment related parameters (see flow.core.params.EnvParams)\n         - net: network-related parameters (see flow.core.params.NetParams and\n           the network's documentation or ADDITIONAL_NET_PARAMS component)\n         - veh: vehicles to be placed in the network at the start of a rollout\n           (see flow.core.params.VehicleParams)\n         - initial (optional): parameters affecting the positioning of vehicles\n           upon initialization/reset (see flow.core.params.InitialConfig)\n         - tls (optional): traffic lights to be introduced to specific nodes\n           (see flow.core.params.TrafficLightParams)\n\n    version : int, optional\n        environment version number\n    render : bool, optional\n        specifies whether to use the gui during execution. This overrides\n        the render attribute in SumoParams\n\n    Returns\n    -------\n    function\n        method that calls OpenAI gym's register method and make method\n    str\n        name of the created gym environment\n    \"\"\"", "\n", "exp_tag", "=", "params", "[", "\"exp_tag\"", "]", "\n", "\n", "if", "isinstance", "(", "params", "[", "\"env_name\"", "]", ",", "str", ")", ":", "\n", "        ", "print", "(", "\"\"\"Passing of strings for env_name will be deprecated.\n        Please pass the Env instance instead.\"\"\"", ")", "\n", "base_env_name", "=", "params", "[", "\"env_name\"", "]", "\n", "", "else", ":", "\n", "        ", "base_env_name", "=", "params", "[", "\"env_name\"", "]", ".", "__name__", "\n", "\n", "# deal with multiple environments being created under the same name", "\n", "", "all_envs", "=", "gym", ".", "envs", ".", "registry", ".", "all", "(", ")", "\n", "env_ids", "=", "[", "env_spec", ".", "id", "for", "env_spec", "in", "all_envs", "]", "\n", "while", "\"{}-v{}\"", ".", "format", "(", "base_env_name", ",", "version", ")", "in", "env_ids", ":", "\n", "        ", "version", "+=", "1", "\n", "", "env_name", "=", "\"{}-v{}\"", ".", "format", "(", "base_env_name", ",", "version", ")", "\n", "\n", "if", "isinstance", "(", "params", "[", "\"network\"", "]", ",", "str", ")", ":", "\n", "        ", "print", "(", "\"\"\"Passing of strings for network will be deprecated.\n        Please pass the Network instance instead.\"\"\"", ")", "\n", "module", "=", "__import__", "(", "\"flow.networks\"", ",", "fromlist", "=", "[", "params", "[", "\"network\"", "]", "]", ")", "\n", "network_class", "=", "getattr", "(", "module", ",", "params", "[", "\"network\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "network_class", "=", "params", "[", "\"network\"", "]", "\n", "# print(network_class)", "\n", "\n", "", "env_params", "=", "params", "[", "'env'", "]", "\n", "net_params", "=", "params", "[", "'net'", "]", "\n", "initial_config", "=", "params", ".", "get", "(", "'initial'", ",", "InitialConfig", "(", ")", ")", "\n", "traffic_lights", "=", "params", ".", "get", "(", "\"tls\"", ",", "TrafficLightParams", "(", ")", ")", "\n", "\n", "def", "create_env", "(", "*", "_", ")", ":", "\n", "        ", "sim_params", "=", "deepcopy", "(", "params", "[", "'sim'", "]", ")", "\n", "vehicles", "=", "deepcopy", "(", "params", "[", "'veh'", "]", ")", "\n", "\n", "# network = network_class(", "\n", "#     name=exp_tag,", "\n", "#     vehicles=vehicles,", "\n", "#     net_params=net_params,", "\n", "#     initial_config=initial_config,", "\n", "#     traffic_lights=traffic_lights,", "\n", "# )", "\n", "network", "=", "network_class", "\n", "\n", "# accept new render type if not set to None", "\n", "sim_params", ".", "render", "=", "render", "or", "sim_params", ".", "render", "\n", "\n", "# check if the environment is a single or multiagent environment, and", "\n", "# get the right address accordingly", "\n", "single_agent_envs", "=", "[", "env", "for", "env", "in", "dir", "(", "flow", ".", "envs", ")", "\n", "if", "not", "env", ".", "startswith", "(", "'__'", ")", "]", "\n", "\n", "if", "isinstance", "(", "params", "[", "\"env_name\"", "]", ",", "str", ")", ":", "\n", "            ", "if", "params", "[", "'env_name'", "]", "in", "single_agent_envs", ":", "\n", "                ", "env_loc", "=", "'flow.envs'", "\n", "", "else", ":", "\n", "                ", "env_loc", "=", "'flow.envs.multiagent'", "\n", "", "entry_point", "=", "env_loc", "+", "':{}'", ".", "format", "(", "params", "[", "\"env_name\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "entry_point", "=", "params", "[", "\"env_name\"", "]", ".", "__module__", "+", "':'", "+", "params", "[", "\"env_name\"", "]", ".", "__name__", "\n", "\n", "# register the environment with OpenAI gym", "\n", "", "register", "(", "\n", "id", "=", "env_name", ",", "\n", "entry_point", "=", "entry_point", ",", "\n", "kwargs", "=", "{", "\n", "\"env_params\"", ":", "env_params", ",", "\n", "\"sim_params\"", ":", "sim_params", ",", "\n", "\"network\"", ":", "network", ",", "\n", "\"simulator\"", ":", "params", "[", "'simulator'", "]", "\n", "}", ")", "\n", "\n", "\n", "return", "gym", ".", "envs", ".", "make", "(", "env_name", ")", "\n", "\n", "", "return", "create_env", ",", "env_name", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.registry_custom.env_constructor": [[138, 142], ["registry_custom.make_create_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env"], ["", "def", "env_constructor", "(", "params", ",", "version", "=", "0", ",", "render", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return a constructor from make_create_env.\"\"\"", "\n", "create_env", ",", "env_name", "=", "make_create_env", "(", "params", ",", "version", ",", "render", ")", "\n", "return", "create_env", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.environment.Env.__init__": [[100, 241], ["os.environ.get", "sumolib.miscutils.getFreeSocketPort", "flow.core.kernel.Kernel", "environment.Env.k.network.generate_network", "environment.Env.k.vehicle.initialize", "environment.Env.k.simulation.start_simulation", "environment.Env.k.pass_api", "copy.deepcopy", "len", "copy.deepcopy", "environment.Env.setup_initial_state", "atexit.register", "flow.utils.flow_warnings.deprecated_attribute", "str().split", "time.sleep", "copy.deepcopy", "set", "environment.Env.k.kernel_api.lane.getIDList", "flow.renderer.pyglet_renderer.PygletRenderer", "environment.Env.render", "environment.Env.intention_dict.values", "environment.Env.k.kernel_api.lane.getShape", "network.append", "flow.utils.exceptions.FatalFlowError", "str", "os.makedirs", "time.time", "int", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.generate_network", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.initialize", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.start_simulation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.pass_api", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.setup_initial_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated_attribute", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["def", "__init__", "(", "self", ",", "\n", "env_params", ",", "\n", "sim_params", ",", "\n", "network", "=", "None", ",", "\n", "simulator", "=", "'traci'", ",", "\n", "scenario", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize the environment class.\n\n        Parameters\n        ----------\n        env_params : flow.core.params.EnvParams\n           see flow/core/params.py\n        sim_params : flow.core.params.SimParams\n           see flow/core/params.py\n        network : flow.networks.Network\n            see flow/networks/base.py\n        simulator : str\n            the simulator used, one of {'traci', 'aimsun'}. Defaults to 'traci'\n\n        Raises\n        ------\n        flow.utils.exceptions.FatalFlowError\n            if the render mode is not set to a valid value\n        \"\"\"", "\n", "self", ".", "env_params", "=", "env_params", "\n", "if", "scenario", "is", "not", "None", ":", "\n", "            ", "deprecated_attribute", "(", "self", ",", "\"scenario\"", ",", "\"network\"", ")", "\n", "", "self", ".", "network", "=", "scenario", "if", "scenario", "is", "not", "None", "else", "network", "\n", "self", ".", "net_params", "=", "self", ".", "network", ".", "net_params", "\n", "self", ".", "initial_config", "=", "self", ".", "network", ".", "initial_config", "\n", "self", ".", "sim_params", "=", "sim_params", "\n", "time_stamp", "=", "''", ".", "join", "(", "str", "(", "time", ".", "time", "(", ")", ")", ".", "split", "(", "'.'", ")", ")", "\n", "if", "os", ".", "environ", ".", "get", "(", "\"TEST_FLAG\"", ",", "0", ")", ":", "\n", "# 1.0 works with stress_test_start 10k times", "\n", "            ", "time", ".", "sleep", "(", "1.0", "*", "int", "(", "time_stamp", "[", "-", "6", ":", "]", ")", "/", "1e6", ")", "\n", "# FIXME: this is sumo-specific", "\n", "", "self", ".", "sim_params", ".", "port", "=", "sumolib", ".", "miscutils", ".", "getFreeSocketPort", "(", ")", "\n", "# time_counter: number of steps taken since the start of a rollout", "\n", "self", ".", "time_counter", "=", "0", "\n", "# step_counter: number of total steps taken", "\n", "self", ".", "step_counter", "=", "0", "\n", "# initial_state:", "\n", "self", ".", "initial_state", "=", "{", "}", "\n", "self", ".", "state", "=", "None", "\n", "self", ".", "obs_var_labels", "=", "[", "]", "\n", "\n", "# simulation step size", "\n", "self", ".", "sim_step", "=", "sim_params", ".", "sim_step", "\n", "\n", "# the simulator used by this environment", "\n", "self", ".", "simulator", "=", "simulator", "\n", "\n", "# create the Flow kernel", "\n", "self", ".", "k", "=", "Kernel", "(", "simulator", "=", "self", ".", "simulator", ",", "\n", "sim_params", "=", "sim_params", ")", "\n", "\n", "# use the network class's network parameters to generate the necessary", "\n", "# network components within the network kernel", "\n", "self", ".", "k", ".", "network", ".", "generate_network", "(", "self", ".", "network", ")", "\n", "\n", "# initial the vehicles kernel using the VehicleParams object", "\n", "self", ".", "k", ".", "vehicle", ".", "initialize", "(", "deepcopy", "(", "self", ".", "network", ".", "vehicles", ")", ")", "\n", "\n", "# initialize the simulation using the simulation kernel. This will use", "\n", "# the network kernel as an input in order to determine what network", "\n", "# needs to be simulated.", "\n", "kernel_api", "=", "self", ".", "k", ".", "simulation", ".", "start_simulation", "(", "\n", "network", "=", "self", ".", "k", ".", "network", ",", "sim_params", "=", "sim_params", ")", "\n", "\n", "# pass the kernel api to the kernel and it's subclasses", "\n", "self", ".", "k", ".", "pass_api", "(", "kernel_api", ")", "\n", "\n", "# the available_routes variable contains a dictionary of routes", "\n", "# vehicles can traverse; to be used when routes need to be chosen", "\n", "# dynamically", "\n", "self", ".", "available_routes", "=", "self", ".", "k", ".", "network", ".", "rts", "\n", "\n", "# store the initial vehicle ids", "\n", "self", ".", "initial_ids", "=", "deepcopy", "(", "self", ".", "network", ".", "vehicles", ".", "ids", ")", "\n", "# print(self.initial_ids)", "\n", "\n", "# store the intention dict", "\n", "self", ".", "intention_dict", "=", "self", ".", "env_params", ".", "additional_params", "[", "'intention'", "]", "\n", "self", ".", "n_unique_intentions", "=", "len", "(", "set", "(", "self", ".", "intention_dict", ".", "values", "(", ")", ")", ")", "\n", "\n", "# store the vehicle ids that have exited the main road", "\n", "self", ".", "terminal_edges", "=", "self", ".", "net_params", ".", "additional_params", "[", "'terminal_edges'", "]", "\n", "self", ".", "exited_vehicles", "=", "[", "]", "\n", "\n", "# store the observed vehicles when get states", "\n", "self", ".", "observed_cavs", "=", "None", "\n", "self", ".", "observed_all_vehs", "=", "None", "\n", "\n", "# store the drastic lane changing vehicles at each timestep", "\n", "self", ".", "drastic_veh_id", "=", "None", "\n", "\n", "# store the initial state of the vehicles kernel (needed for restarting", "\n", "# the simulation)", "\n", "self", ".", "k", ".", "vehicle", ".", "kernel_api", "=", "None", "\n", "self", ".", "k", ".", "vehicle", ".", "master_kernel", "=", "None", "\n", "self", ".", "initial_vehicles", "=", "deepcopy", "(", "self", ".", "k", ".", "vehicle", ")", "\n", "self", ".", "k", ".", "vehicle", ".", "kernel_api", "=", "self", ".", "k", ".", "kernel_api", "\n", "self", ".", "k", ".", "vehicle", ".", "master_kernel", "=", "self", ".", "k", "\n", "\n", "self", ".", "setup_initial_state", "(", ")", "\n", "\n", "# use pyglet to render the simulation", "\n", "if", "self", ".", "sim_params", ".", "render", "in", "[", "'gray'", ",", "'dgray'", ",", "'rgb'", ",", "'drgb'", "]", ":", "\n", "            ", "save_render", "=", "self", ".", "sim_params", ".", "save_render", "\n", "sight_radius", "=", "self", ".", "sim_params", ".", "sight_radius", "\n", "pxpm", "=", "self", ".", "sim_params", ".", "pxpm", "\n", "show_radius", "=", "self", ".", "sim_params", ".", "show_radius", "\n", "\n", "# get network polygons", "\n", "network", "=", "[", "]", "\n", "# FIXME: add to network kernel instead of hack", "\n", "for", "lane_id", "in", "self", ".", "k", ".", "kernel_api", ".", "lane", ".", "getIDList", "(", ")", ":", "\n", "                ", "_lane_poly", "=", "self", ".", "k", ".", "kernel_api", ".", "lane", ".", "getShape", "(", "lane_id", ")", "\n", "lane_poly", "=", "[", "i", "for", "pt", "in", "_lane_poly", "for", "i", "in", "pt", "]", "\n", "network", ".", "append", "(", "lane_poly", ")", "\n", "\n", "# instantiate a pyglet renderer", "\n", "", "self", ".", "renderer", "=", "Renderer", "(", "\n", "network", ",", "\n", "self", ".", "sim_params", ".", "render", ",", "\n", "save_render", ",", "\n", "sight_radius", "=", "sight_radius", ",", "\n", "pxpm", "=", "pxpm", ",", "\n", "show_radius", "=", "show_radius", ")", "\n", "\n", "# render a frame", "\n", "self", ".", "render", "(", "reset", "=", "True", ")", "\n", "", "elif", "self", ".", "sim_params", ".", "render", "in", "[", "True", ",", "False", "]", ":", "\n", "# default to sumo-gui (if True) or sumo (if False)", "\n", "            ", "if", "(", "self", ".", "sim_params", ".", "render", "is", "True", ")", "and", "self", ".", "sim_params", ".", "save_render", ":", "\n", "                ", "self", ".", "path", "=", "os", ".", "path", ".", "expanduser", "(", "'~'", ")", "+", "'/flow_rendering/'", "+", "self", ".", "network", ".", "name", "\n", "os", ".", "makedirs", "(", "self", ".", "path", ",", "exist_ok", "=", "True", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "FatalFlowError", "(", "\n", "'Mode %s is not supported!'", "%", "self", ".", "sim_params", ".", "render", ")", "\n", "", "atexit", ".", "register", "(", "self", ".", "terminate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.environment.Env.restart_simulation": [[242, 280], ["environment.Env.k.close", "environment.Env.k.network.generate_network", "environment.Env.k.vehicle.initialize", "environment.Env.k.simulation.start_simulation", "environment.Env.k.pass_api", "environment.Env.setup_initial_state", "environment.Env.k.simulation.sumo_proc.kill", "flow.core.util.ensure_dir", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.generate_network", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.initialize", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.start_simulation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.pass_api", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.setup_initial_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.ensure_dir"], ["", "def", "restart_simulation", "(", "self", ",", "sim_params", ",", "render", "=", "None", ")", ":", "\n", "        ", "\"\"\"Restart an already initialized simulation instance.\n\n        This is used when visualizing a rollout, in order to update the\n        rendering with potentially a gui and export emission data from sumo.\n\n        This is also used to handle cases when the runtime of an experiment is\n        too long, causing the sumo instance\n\n        Parameters\n        ----------\n        sim_params : flow.core.params.SimParams\n            simulation-specific parameters\n        render : bool, optional\n            specifies whether to use the gui\n        \"\"\"", "\n", "self", ".", "k", ".", "close", "(", ")", "\n", "\n", "# killed the sumo process if using sumo/TraCI", "\n", "if", "self", ".", "simulator", "==", "'traci'", ":", "\n", "            ", "self", ".", "k", ".", "simulation", ".", "sumo_proc", ".", "kill", "(", ")", "\n", "\n", "", "if", "render", "is", "not", "None", ":", "\n", "            ", "self", ".", "sim_params", ".", "render", "=", "render", "\n", "\n", "", "if", "sim_params", ".", "emission_path", "is", "not", "None", ":", "\n", "            ", "ensure_dir", "(", "sim_params", ".", "emission_path", ")", "\n", "self", ".", "sim_params", ".", "emission_path", "=", "sim_params", ".", "emission_path", "\n", "\n", "", "self", ".", "k", ".", "network", ".", "generate_network", "(", "self", ".", "network", ")", "\n", "self", ".", "k", ".", "vehicle", ".", "initialize", "(", "deepcopy", "(", "self", ".", "network", ".", "vehicles", ")", ")", "\n", "kernel_api", "=", "self", ".", "k", ".", "simulation", ".", "start_simulation", "(", "\n", "network", "=", "self", ".", "k", ".", "network", ",", "sim_params", "=", "self", ".", "sim_params", ")", "\n", "self", ".", "k", ".", "pass_api", "(", "kernel_api", ")", "\n", "\n", "self", ".", "setup_initial_state", "(", ")", "\n", "\n", "self", ".", "infos", "=", "{", "\"num_full_filled\"", ":", "0", ",", "\"num_half_filled\"", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.environment.Env.setup_initial_state": [[281, 306], ["environment.Env.k.network.generate_starting_positions", "enumerate", "random.shuffle", "environment.Env.k.vehicle.get_type", "environment.Env.k.vehicle.get_initial_speed", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.generate_starting_positions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_type", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_initial_speed"], ["", "def", "setup_initial_state", "(", "self", ")", ":", "\n", "        ", "\"\"\"Store information on the initial state of vehicles in the network.\n\n        This information is to be used upon reset. This method also adds this\n        information to the self.vehicles class and starts a subscription with\n        sumo to collect state information each step.\n        \"\"\"", "\n", "# determine whether to shuffle the vehicles", "\n", "if", "self", ".", "initial_config", ".", "shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "initial_ids", ")", "\n", "\n", "# generate starting position for vehicles in the network", "\n", "", "start_pos", ",", "start_lanes", "=", "self", ".", "k", ".", "network", ".", "generate_starting_positions", "(", "\n", "initial_config", "=", "self", ".", "initial_config", ",", "\n", "num_vehicles", "=", "len", "(", "self", ".", "initial_ids", ")", ")", "\n", "\n", "# save the initial state. This is used in the _reset function", "\n", "for", "i", ",", "veh_id", "in", "enumerate", "(", "self", ".", "initial_ids", ")", ":", "\n", "            ", "type_id", "=", "self", ".", "k", ".", "vehicle", ".", "get_type", "(", "veh_id", ")", "\n", "pos", "=", "start_pos", "[", "i", "]", "[", "1", "]", "\n", "lane", "=", "start_lanes", "[", "i", "]", "\n", "speed", "=", "self", ".", "k", ".", "vehicle", ".", "get_initial_speed", "(", "veh_id", ")", "\n", "edge", "=", "start_pos", "[", "i", "]", "[", "0", "]", "\n", "\n", "self", ".", "initial_state", "[", "veh_id", "]", "=", "(", "type_id", ",", "edge", ",", "lane", ",", "pos", ",", "speed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.environment.Env.step": [[307, 428], ["range", "environment.Env.get_state", "environment.Env.check_full_fill", "environment.Env.compute_reward", "environment.Env.k.vehicle.get_ids", "environment.Env.k.vehicle.choose_routes", "environment.Env.apply_rl_actions", "environment.Env.additional_command", "environment.Env.k.simulation.simulation_step", "environment.Env.k.update", "environment.Env.k.simulation.check_collision", "environment.Env.render", "len", "collections.Counter", "collections.Counter", "print", "print", "len", "environment.Env.k.vehicle.get_controlled_ids", "environment.Env.k.vehicle.apply_acceleration", "len", "environment.Env.k.vehicle.get_controlled_lc_ids", "environment.Env.k.vehicle.apply_lane_change", "environment.Env.k.vehicle.update_vehicle_colors", "environment.Env.k.vehicle.get_controlled_ids", "environment.Env.k.vehicle.get_acc_controller().get_action", "accel.append", "environment.Env.k.vehicle.get_controlled_ids", "environment.Env.k.vehicle.get_controlled_lc_ids", "environment.Env.k.vehicle.get_lane_changing_controller().get_action", "direction.append", "environment.Env.k.vehicle.get_controlled_lc_ids", "environment.Env.k.vehicle.get_routing_controller", "routing_ids.append", "environment.Env.k.vehicle.get_routing_controller", "routing_actions.append", "environment.Env.choose_route", "environment.Env.k.vehicle.get_acc_controller", "environment.Env.k.vehicle.get_lane_changing_controller"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.get_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.specific_environment.MergeEnv.check_full_fill", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.compute_reward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.choose_routes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.apply_rl_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.WaveAttenuationPOEnv.additional_command", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.simulation_step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.check_collision", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_acceleration", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_lc_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_lane_change", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.update_vehicle_colors", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_lc_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_lc_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_routing_controller", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_routing_controller", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_routing_controller.BaseRouter.choose_route", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_changing_controller"], ["", "", "def", "step", "(", "self", ",", "rl_actions", ")", ":", "\n", "        ", "\"\"\"Advance the environment by one step.\n\n        Assigns actions to autonomous and human-driven agents (i.e. vehicles,\n        traffic lights, etc...). Actions that are not assigned are left to the\n        control of the simulator. The actions are then used to advance the\n        simulator by the number of time steps requested per environment step.\n\n        Results from the simulations are processed through various classes,\n        such as the Vehicle and TrafficLight kernels, to produce standardized\n        methods for identifying specific network state features. Finally,\n        results from the simulator are used to generate appropriate\n        observations.\n\n        Parameters\n        ----------\n        rl_actions : array_like\n            an list of actions provided by the rl algorithm\n\n        Returns\n        -------\n        observation : array_like\n            agent's observation of the current environment\n        reward : float\n            amount of reward associated with the previous state/action pair\n        done : bool\n            indicates whether the episode has ended\n        info : dict\n            contains other diagnostic information from the previous action\n        \"\"\"", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "env_params", ".", "sims_per_step", ")", ":", "\n", "            ", "self", ".", "time_counter", "+=", "1", "\n", "self", ".", "step_counter", "+=", "1", "\n", "\n", "# perform acceleration actions for controlled human-driven vehicles", "\n", "if", "len", "(", "self", ".", "k", ".", "vehicle", ".", "get_controlled_ids", "(", ")", ")", ">", "0", ":", "\n", "                ", "accel", "=", "[", "]", "\n", "for", "veh_id", "in", "self", ".", "k", ".", "vehicle", ".", "get_controlled_ids", "(", ")", ":", "\n", "                    ", "action", "=", "self", ".", "k", ".", "vehicle", ".", "get_acc_controller", "(", "\n", "veh_id", ")", ".", "get_action", "(", "self", ")", "\n", "accel", ".", "append", "(", "action", ")", "\n", "", "self", ".", "k", ".", "vehicle", ".", "apply_acceleration", "(", "\n", "self", ".", "k", ".", "vehicle", ".", "get_controlled_ids", "(", ")", ",", "accel", ")", "\n", "\n", "# perform lane change actions for controlled human-driven vehicles", "\n", "", "if", "len", "(", "self", ".", "k", ".", "vehicle", ".", "get_controlled_lc_ids", "(", ")", ")", ">", "0", ":", "\n", "                ", "direction", "=", "[", "]", "\n", "for", "veh_id", "in", "self", ".", "k", ".", "vehicle", ".", "get_controlled_lc_ids", "(", ")", ":", "\n", "                    ", "target_lane", "=", "self", ".", "k", ".", "vehicle", ".", "get_lane_changing_controller", "(", "\n", "veh_id", ")", ".", "get_action", "(", "self", ")", "\n", "direction", ".", "append", "(", "target_lane", ")", "\n", "", "self", ".", "k", ".", "vehicle", ".", "apply_lane_change", "(", "\n", "self", ".", "k", ".", "vehicle", ".", "get_controlled_lc_ids", "(", ")", ",", "\n", "direction", "=", "direction", ")", "\n", "\n", "# perform (optionally) routing actions for all vehicles in the", "\n", "# network, including RL and SUMO-controlled vehicles", "\n", "", "routing_ids", "=", "[", "]", "\n", "routing_actions", "=", "[", "]", "\n", "changing_color_list", "=", "[", "]", "\n", "\n", "for", "veh_id", "in", "self", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ":", "\n", "\n", "                ", "if", "self", ".", "k", ".", "vehicle", ".", "get_routing_controller", "(", "veh_id", ")", "is", "not", "None", ":", "\n", "                    ", "routing_ids", ".", "append", "(", "veh_id", ")", "\n", "route_contr", "=", "self", ".", "k", ".", "vehicle", ".", "get_routing_controller", "(", "\n", "veh_id", ")", "\n", "routing_actions", ".", "append", "(", "route_contr", ".", "choose_route", "(", "self", ")", ")", "\n", "\n", "# print(changing_color_list)", "\n", "", "", "self", ".", "k", ".", "vehicle", ".", "choose_routes", "(", "routing_ids", ",", "routing_actions", ")", "\n", "\n", "self", ".", "apply_rl_actions", "(", "rl_actions", ")", "\n", "\n", "self", ".", "additional_command", "(", ")", "\n", "\n", "# advance the simulation in the simulator by one step", "\n", "self", ".", "k", ".", "simulation", ".", "simulation_step", "(", ")", "\n", "\n", "# store new observations in the vehicles and traffic lights class", "\n", "self", ".", "k", ".", "update", "(", "reset", "=", "False", ")", "\n", "\n", "# update the colors of vehicles", "\n", "if", "self", ".", "sim_params", ".", "render", ":", "\n", "                ", "self", ".", "k", ".", "vehicle", ".", "update_vehicle_colors", "(", ")", "\n", "\n", "# crash encodes whether the simulator experienced a collision", "\n", "# \u901a\u8fc7\u66f4\u6539check_collision()\u51fd\u6570\uff0c\u53ef\u4ee5\u83b7\u53d6\u6bcf\u4e00\u4eff\u771fstep\u7684\u78b0\u649e\u6b21\u6570", "\n", "", "crash_ids", "=", "self", ".", "k", ".", "simulation", ".", "check_collision", "(", ")", "\n", "# print(\"crash_ids: \", crash_ids)", "\n", "\n", "# render a frame", "\n", "self", ".", "render", "(", ")", "\n", "\n", "", "states", "=", "self", ".", "get_state", "(", ")", "\n", "\n", "# collect observation new state associated with action", "\n", "next_observation", "=", "states", "\n", "\n", "# environment terminates when all the rl vehicles left", "\n", "num_full_filled", ",", "num_half_filled", "=", "self", ".", "check_full_fill", "(", ")", "\n", "# print(num_full_filled, num_half_filled)", "\n", "\n", "done", "=", "(", "len", "(", "self", ".", "exited_vehicles", ")", "==", "self", ".", "net_params", ".", "additional_params", "[", "'num_cav'", "]", ")", "\n", "\n", "# compute the info for each agent", "\n", "infos", "=", "{", "\"num_full_filled\"", ":", "num_full_filled", ",", "\"num_half_filled\"", ":", "num_half_filled", "}", "\n", "self", ".", "infos", "=", "Counter", "(", "self", ".", "infos", ")", "+", "Counter", "(", "infos", ")", "\n", "\n", "# print (self.k.vehicle.num_vehicles)", "\n", "# compute the reward", "\n", "\n", "reward", "=", "self", ".", "compute_reward", "(", "rl_actions", ",", "fail", "=", "crash_ids", ",", "num_full_filled", "=", "num_full_filled", ",", "\n", "num_half_filled", "=", "num_half_filled", ")", "\n", "if", "done", ":", "\n", "            ", "print", "(", "self", ".", "infos", ")", "\n", "print", "(", "'done in: '", ",", "self", ".", "time_counter", ")", "\n", "\n", "", "return", "next_observation", ",", "reward", ",", "done", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.environment.Env.reset": [[429, 566], ["list", "environment.Env.k.simulation.simulation_step", "environment.Env.k.update", "environment.Env.get_state", "range", "environment.Env.render", "print", "random.randint", "copy.deepcopy", "environment.Env.restart_simulation", "environment.Env.k.kernel_api.vehicle.getIDList", "environment.Env.k.vehicle.get_ids", "environment.Env.k.vehicle.update_vehicle_colors", "environment.Env.k.kernel_api.vehicle.getIDList", "len", "len", "list", "flow.utils.exceptions.FatalFlowError", "environment.Env.step", "len", "environment.Env.setup_initial_state", "environment.Env.k.vehicle.remove", "environment.Env.k.vehicle.add", "environment.Env.net_params.inflows.get", "environment.Env.k.vehicle.remove", "print", "environment.Env.k.vehicle.remove", "environment.Env.k.vehicle.add", "set", "set", "print", "environment.Env.k.kernel_api.vehicle.remove", "traceback.format_exc", "traceback.format_exc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.simulation_step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.get_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.restart_simulation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.update_vehicle_colors", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.setup_initial_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset the environment.\n\n        This method is performed in between rollouts. It resets the state of\n        the environment, and re-initializes the vehicles in their starting\n        positions.\n\n        If \"shuffle\" is set to True in InitialConfig, the initial positions of\n        vehicles is recalculated and the vehicles are shuffled.\n\n        Returns\n        -------\n        observation : array_like\n            the initial observation of the space. The initial reward is assumed\n            to be zero.\n        \"\"\"", "\n", "# reset the time counter", "\n", "self", ".", "time_counter", "=", "0", "\n", "self", ".", "exited_vehicles", "=", "[", "]", "\n", "\n", "# warn about not using restart_instance when using inflows", "\n", "if", "len", "(", "self", ".", "net_params", ".", "inflows", ".", "get", "(", ")", ")", ">", "0", "and", "not", "self", ".", "sim_params", ".", "restart_instance", ":", "\n", "            ", "print", "(", "\n", "\"**********************************************************\\n\"", "\n", "\"**********************************************************\\n\"", "\n", "\"**********************************************************\\n\"", "\n", "\"WARNING: Inflows will cause computational performance to\\n\"", "\n", "\"significantly decrease after large number of rollouts. In \\n\"", "\n", "\"order to avoid this, set SumoParams(restart_instance=True).\\n\"", "\n", "\"**********************************************************\\n\"", "\n", "\"**********************************************************\\n\"", "\n", "\"**********************************************************\"", "\n", ")", "\n", "\n", "", "if", "self", ".", "sim_params", ".", "restart_instance", "or", "(", "self", ".", "step_counter", ">", "2e6", "and", "self", ".", "simulator", "!=", "'aimsun'", ")", ":", "\n", "            ", "self", ".", "step_counter", "=", "0", "\n", "# issue a random seed to induce randomness into the next rollout", "\n", "self", ".", "sim_params", ".", "seed", "=", "random", ".", "randint", "(", "0", ",", "1e5", ")", "\n", "\n", "self", ".", "k", ".", "vehicle", "=", "deepcopy", "(", "self", ".", "initial_vehicles", ")", "\n", "self", ".", "k", ".", "vehicle", ".", "master_kernel", "=", "self", ".", "k", "\n", "# restart the sumo instance", "\n", "self", ".", "restart_simulation", "(", "self", ".", "sim_params", ")", "\n", "\n", "# perform shuffling (if requested)", "\n", "", "elif", "self", ".", "initial_config", ".", "shuffle", ":", "\n", "            ", "self", ".", "setup_initial_state", "(", ")", "\n", "\n", "# clear all vehicles from the network and the vehicles class", "\n", "", "if", "self", ".", "simulator", "==", "'traci'", ":", "\n", "            ", "for", "veh_id", "in", "self", ".", "k", ".", "kernel_api", ".", "vehicle", ".", "getIDList", "(", ")", ":", "# FIXME: hack", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "k", ".", "vehicle", ".", "remove", "(", "veh_id", ")", "\n", "", "except", "(", "FatalTraCIError", ",", "TraCIException", ")", ":", "\n", "                    ", "print", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "\n", "# clear all vehicles from the network and the vehicles class", "\n", "# FIXME (ev, ak) this is weird and shouldn't be necessary", "\n", "", "", "", "for", "veh_id", "in", "list", "(", "self", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ")", ":", "\n", "# do not try to remove the vehicles from the network in the first", "\n", "# step after initializing the network, as there will be no vehicles", "\n", "            ", "if", "self", ".", "step_counter", "==", "0", ":", "\n", "                ", "continue", "\n", "", "try", ":", "\n", "                ", "self", ".", "k", ".", "vehicle", ".", "remove", "(", "veh_id", ")", "\n", "", "except", "(", "FatalTraCIError", ",", "TraCIException", ")", ":", "\n", "                ", "print", "(", "\"Error during start: {}\"", ".", "format", "(", "traceback", ".", "format_exc", "(", ")", ")", ")", "\n", "\n", "# reintroduce the initial vehicles to the network", "\n", "", "", "for", "veh_id", "in", "self", ".", "initial_ids", ":", "\n", "            ", "type_id", ",", "edge", ",", "lane_index", ",", "pos", ",", "speed", "=", "self", ".", "initial_state", "[", "veh_id", "]", "\n", "\n", "try", ":", "\n", "                ", "self", ".", "k", ".", "vehicle", ".", "add", "(", "\n", "veh_id", "=", "veh_id", ",", "\n", "type_id", "=", "type_id", ",", "\n", "edge", "=", "edge", ",", "\n", "lane", "=", "lane_index", ",", "\n", "pos", "=", "pos", ",", "\n", "speed", "=", "speed", ")", "\n", "", "except", "(", "FatalTraCIError", ",", "TraCIException", ")", ":", "\n", "# if a vehicle was not removed in the first attempt, remove it", "\n", "# now and then reintroduce it", "\n", "                ", "self", ".", "k", ".", "vehicle", ".", "remove", "(", "veh_id", ")", "\n", "if", "self", ".", "simulator", "==", "'traci'", ":", "\n", "                    ", "self", ".", "k", ".", "kernel_api", ".", "vehicle", ".", "remove", "(", "veh_id", ")", "# FIXME: hack", "\n", "", "self", ".", "k", ".", "vehicle", ".", "add", "(", "\n", "veh_id", "=", "veh_id", ",", "\n", "type_id", "=", "type_id", ",", "\n", "edge", "=", "edge", ",", "\n", "lane", "=", "lane_index", ",", "\n", "pos", "=", "pos", ",", "\n", "speed", "=", "speed", ")", "\n", "\n", "# advance the simulation in the simulator by one step", "\n", "", "", "self", ".", "k", ".", "simulation", ".", "simulation_step", "(", ")", "\n", "\n", "# update the information in each kernel to match the current state", "\n", "self", ".", "k", ".", "update", "(", "reset", "=", "True", ")", "\n", "\n", "# update the colors of vehicles", "\n", "if", "self", ".", "sim_params", ".", "render", ":", "\n", "            ", "self", ".", "k", ".", "vehicle", ".", "update_vehicle_colors", "(", ")", "\n", "\n", "", "if", "self", ".", "simulator", "==", "'traci'", ":", "\n", "            ", "initial_ids", "=", "self", ".", "k", ".", "kernel_api", ".", "vehicle", ".", "getIDList", "(", ")", "\n", "", "else", ":", "\n", "            ", "initial_ids", "=", "self", ".", "initial_ids", "\n", "\n", "# check to make sure all vehicles have been spawned", "\n", "", "if", "len", "(", "self", ".", "initial_ids", ")", ">", "len", "(", "initial_ids", ")", ":", "\n", "            ", "missing_vehicles", "=", "list", "(", "set", "(", "self", ".", "initial_ids", ")", "-", "set", "(", "initial_ids", ")", ")", "\n", "msg", "=", "'\\nNot enough vehicles have spawned! Bad start?\\n'", "'Missing vehicles / initial state:\\n'", "\n", "for", "veh_id", "in", "missing_vehicles", ":", "\n", "                ", "msg", "+=", "'- {}: {}\\n'", ".", "format", "(", "veh_id", ",", "self", ".", "initial_state", "[", "veh_id", "]", ")", "\n", "", "raise", "FatalFlowError", "(", "msg", "=", "msg", ")", "\n", "\n", "", "observation", "=", "self", ".", "get_state", "(", ")", "\n", "\n", "# collect information of the state of the network based on the", "\n", "# environment class used", "\n", "# self.state = np.asarray(states).T", "\n", "\n", "# observation associated with the reset (no warm-up steps)", "\n", "\n", "# perform (optional) warm-up steps before training", "\n", "for", "_", "in", "range", "(", "self", ".", "env_params", ".", "warmup_steps", ")", ":", "\n", "            ", "observation", ",", "_", ",", "_", ",", "_", "=", "self", ".", "step", "(", "rl_actions", "=", "None", ")", "\n", "\n", "# render a frame", "\n", "", "self", ".", "render", "(", "reset", "=", "True", ")", "\n", "\n", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.environment.Env.additional_command": [[567, 570], ["None"], "methods", ["None"], ["", "def", "additional_command", "(", "self", ")", ":", "\n", "        ", "\"\"\"Additional commands that may be performed by the step method.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.environment.Env.clip_actions": [[571, 603], ["isinstance", "numpy.clip", "isinstance", "enumerate", "isinstance", "numpy.clip"], "methods", ["None"], ["", "def", "clip_actions", "(", "self", ",", "rl_actions", "=", "None", ")", ":", "\n", "        ", "\"\"\"Clip the actions passed from the RL agent.\n\n        Parameters\n        ----------\n        rl_actions : array_like\n            list of actions provided by the RL algorithm\n\n        Returns\n        -------\n        array_like\n            The rl_actions clipped according to the box or boxes\n        \"\"\"", "\n", "# ignore if no actions are issued", "\n", "if", "rl_actions", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "# clip according to the action space requirements", "\n", "", "if", "isinstance", "(", "self", ".", "action_space", ",", "Box", ")", ":", "\n", "            ", "rl_actions", "=", "np", ".", "clip", "(", "\n", "rl_actions", ",", "\n", "a_min", "=", "self", ".", "action_space", ".", "low", ",", "\n", "a_max", "=", "self", ".", "action_space", ".", "high", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "action_space", ",", "Tuple", ")", ":", "\n", "            ", "for", "idx", ",", "action", "in", "enumerate", "(", "rl_actions", ")", ":", "\n", "                ", "subspace", "=", "self", ".", "action_space", "[", "idx", "]", "\n", "if", "isinstance", "(", "subspace", ",", "Box", ")", ":", "\n", "                    ", "rl_actions", "[", "idx", "]", "=", "np", ".", "clip", "(", "\n", "action", ",", "\n", "a_min", "=", "subspace", ".", "low", ",", "\n", "a_max", "=", "subspace", ".", "high", ")", "\n", "", "", "", "return", "rl_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.environment.Env.apply_rl_actions": [[604, 621], ["environment.Env.clip_actions", "environment.Env._apply_rl_actions"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.clip_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv._apply_rl_actions"], ["", "def", "apply_rl_actions", "(", "self", ",", "rl_actions", "=", "None", ")", ":", "\n", "        ", "\"\"\"Specify the actions to be performed by the rl agent(s).\n\n        If no actions are provided at any given step, the rl agents default to\n        performing actions specified by SUMO.\n\n        Parameters\n        ----------\n        rl_actions : array_like\n            list of actions provided by the RL algorithm\n        \"\"\"", "\n", "# ignore if no actions are issued", "\n", "if", "rl_actions", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "rl_clipped", "=", "self", ".", "clip_actions", "(", "rl_actions", ")", "\n", "self", ".", "_apply_rl_actions", "(", "rl_clipped", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.environment.Env._apply_rl_actions": [[622, 625], ["None"], "methods", ["None"], ["", "def", "_apply_rl_actions", "(", "self", ",", "rl_actions", ")", ":", "\n", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.environment.Env.get_state": [[626, 638], ["numpy.array"], "methods", ["None"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the state of the simulation as perceived by the RL agent.\n\n        MUST BE implemented in new environments.\n\n        Returns\n        -------\n        state : array_like\n            information on the state of the vehicles, which is provided to the\n            agent\n        \"\"\"", "\n", "return", "np", ".", "array", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.environment.Env.action_space": [[639, 651], ["gym.spaces.Box"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Identify the dimensions and bounds of the action space.\n\n        MUST BE implemented in new environments.\n\n        Returns\n        -------\n        gym Box or Tuple type\n            a bounded box depicting the shape and bounds of the action space\n        \"\"\"", "\n", "return", "Box", "(", "low", "=", "0", ",", "high", "=", "0", ",", "shape", "=", "(", "0", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.environment.Env.observation_space": [[652, 665], ["gym.spaces.Box"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Identify the dimensions and bounds of the observation space.\n\n        MUST BE implemented in new environments.\n\n        Returns\n        -------\n        gym Box or Tuple type\n            a bounded box depicting the shape and bounds of the observation\n            space\n        \"\"\"", "\n", "return", "Box", "(", "low", "=", "0", ",", "high", "=", "0", ",", "shape", "=", "(", "0", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.environment.Env.compute_reward": [[666, 685], ["None"], "methods", ["None"], ["", "def", "compute_reward", "(", "self", ",", "rl_actions", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Reward function for the RL agent(s).\n\n        MUST BE implemented in new environments.\n        Defaults to 0 for non-implemented environments.\n\n        Parameters\n        ----------\n        rl_actions : array_like\n            actions performed by rl vehicles\n        kwargs : dict\n            other parameters of interest. Contains a \"fail\" element, which\n            is True if a vehicle crashed, and False otherwise\n\n        Returns\n        -------\n        reward : float or list of float\n        \"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.environment.Env.terminate": [[686, 710], ["environment.Env.k.close", "environment.Env.renderer.close", "print", "subprocess.Popen", "subprocess.Popen.wait", "shutil.rmtree", "traceback.format_exc", "environment.Env.path.split", "str"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close"], ["", "def", "terminate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Close the TraCI I/O connection.\n\n        Should be done at end of every experiment. Must be in Env because the\n        environment opens the TraCI connection.\n        \"\"\"", "\n", "try", ":", "\n", "# close everything within the kernel", "\n", "            ", "self", ".", "k", ".", "close", "(", ")", "\n", "# close pyglet renderer", "\n", "if", "self", ".", "sim_params", ".", "render", "in", "[", "'gray'", ",", "'dgray'", ",", "'rgb'", ",", "'drgb'", "]", ":", "\n", "                ", "self", ".", "renderer", ".", "close", "(", ")", "\n", "# generate video", "\n", "", "elif", "(", "self", ".", "sim_params", ".", "render", "is", "True", ")", "and", "self", ".", "sim_params", ".", "save_render", ":", "\n", "                ", "images_dir", "=", "self", ".", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "speedup", "=", "10", "# multiplier: renders video so that `speedup` seconds is rendered in 1 real second", "\n", "fps", "=", "speedup", "//", "self", ".", "sim_step", "\n", "p", "=", "subprocess", ".", "Popen", "(", "[", "\"ffmpeg\"", ",", "\"-y\"", ",", "\"-r\"", ",", "str", "(", "fps", ")", ",", "\"-i\"", ",", "self", ".", "path", "+", "\"/frame_%06d.png\"", ",", "\n", "\"-pix_fmt\"", ",", "\"yuv420p\"", ",", "\"%s/../%s.mp4\"", "%", "(", "self", ".", "path", ",", "images_dir", ")", "]", ")", "\n", "p", ".", "wait", "(", ")", "\n", "shutil", ".", "rmtree", "(", "self", ".", "path", ")", "\n", "", "", "except", "FileNotFoundError", ":", "\n", "# Skip automatic termination. Connection is probably already closed", "\n", "            ", "print", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.environment.Env.render": [[711, 739], ["environment.Env.pyglet_render", "environment.Env.k.kernel_api.gui.screenshot", "environment.Env.frame.copy", "environment.Env.sights.copy", "environment.Env.frame_buffer.append", "environment.Env.sights_buffer.append", "len", "environment.Env.frame_buffer.pop", "environment.Env.sights_buffer.pop", "range", "range", "int", "environment.Env.frame.copy", "environment.Env.sights.copy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.pyglet_render", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "", "def", "render", "(", "self", ",", "reset", "=", "False", ",", "buffer_length", "=", "5", ")", ":", "\n", "        ", "\"\"\"Render a frame.\n\n        Parameters\n        ----------\n        reset : bool\n            set to True to reset the buffer\n        buffer_length : int\n            length of the buffer\n        \"\"\"", "\n", "if", "self", ".", "sim_params", ".", "render", "in", "[", "'gray'", ",", "'dgray'", ",", "'rgb'", ",", "'drgb'", "]", ":", "\n", "# render a frame", "\n", "            ", "self", ".", "pyglet_render", "(", ")", "\n", "\n", "# cache rendering", "\n", "if", "reset", ":", "\n", "                ", "self", ".", "frame_buffer", "=", "[", "self", ".", "frame", ".", "copy", "(", ")", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "self", ".", "sights_buffer", "=", "[", "self", ".", "sights", ".", "copy", "(", ")", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "step_counter", "%", "int", "(", "1", "/", "self", ".", "sim_step", ")", "==", "0", ":", "\n", "                    ", "self", ".", "frame_buffer", ".", "append", "(", "self", ".", "frame", ".", "copy", "(", ")", ")", "\n", "self", ".", "sights_buffer", ".", "append", "(", "self", ".", "sights", ".", "copy", "(", ")", ")", "\n", "", "if", "len", "(", "self", ".", "frame_buffer", ")", ">", "buffer_length", ":", "\n", "                    ", "self", ".", "frame_buffer", ".", "pop", "(", "0", ")", "\n", "self", ".", "sights_buffer", ".", "pop", "(", "0", ")", "\n", "", "", "", "elif", "(", "self", ".", "sim_params", ".", "render", "is", "True", ")", "and", "self", ".", "sim_params", ".", "save_render", ":", "\n", "# sumo-gui render", "\n", "            ", "self", ".", "k", ".", "kernel_api", ".", "gui", ".", "screenshot", "(", "\"View #0\"", ",", "self", ".", "path", "+", "\"/frame_%06d.png\"", "%", "self", ".", "time_counter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_Simulation.environment.Env.pyglet_render": [[740, 806], ["environment.Env.k.vehicle.get_human_ids", "environment.Env.k.vehicle.get_rl_ids", "environment.Env.k.network.max_speed", "environment.Env.renderer.render", "machine_logs.append", "machine_orientations.append", "machine_dynamics.append", "environment.Env.k.vehicle.get_orientation", "environment.Env.renderer.get_sight", "environment.Env.sights.append", "machine_logs.append", "machine_orientations.append", "machine_dynamics.append", "human_logs.append", "human_orientations.append", "human_dynamics.append", "environment.Env.k.vehicle.get_orientation", "environment.Env.k.vehicle.get_orientation", "environment.Env.renderer.get_sight", "environment.Env.sights.append", "environment.Env.k.vehicle.get_orientation", "environment.Env.k.vehicle.get_orientation", "environment.Env.k.vehicle.get_timestep", "environment.Env.k.vehicle.get_timedelta", "environment.Env.k.vehicle.get_speed", "environment.Env.k.vehicle.get_timestep", "environment.Env.k.vehicle.get_timedelta", "environment.Env.k.vehicle.get_speed", "environment.Env.k.vehicle.get_timestep", "environment.Env.k.vehicle.get_timedelta", "environment.Env.k.vehicle.get_speed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_human_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.max_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_orientation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer.get_sight", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_orientation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_orientation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer.get_sight", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_orientation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_orientation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_timestep", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_timedelta", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_timestep", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_timedelta", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_timestep", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_timedelta", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], ["", "", "def", "pyglet_render", "(", "self", ")", ":", "\n", "        ", "\"\"\"Render a frame using pyglet.\"\"\"", "\n", "# get human and RL simulation status", "\n", "human_idlist", "=", "self", ".", "k", ".", "vehicle", ".", "get_human_ids", "(", ")", "\n", "machine_idlist", "=", "self", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", "\n", "human_logs", "=", "[", "]", "\n", "human_orientations", "=", "[", "]", "\n", "human_dynamics", "=", "[", "]", "\n", "machine_logs", "=", "[", "]", "\n", "machine_orientations", "=", "[", "]", "\n", "machine_dynamics", "=", "[", "]", "\n", "max_speed", "=", "self", ".", "k", ".", "network", ".", "max_speed", "(", ")", "\n", "for", "id", "in", "human_idlist", ":", "\n", "# Force tracking human vehicles by adding \"track\" in vehicle id.", "\n", "# The tracked human vehicles will be treated as machine vehicles.", "\n", "            ", "if", "'track'", "in", "id", ":", "\n", "                ", "machine_logs", ".", "append", "(", "\n", "[", "self", ".", "k", ".", "vehicle", ".", "get_timestep", "(", "id", ")", ",", "\n", "self", ".", "k", ".", "vehicle", ".", "get_timedelta", "(", "id", ")", ",", "\n", "id", "]", ")", "\n", "machine_orientations", ".", "append", "(", "\n", "self", ".", "k", ".", "vehicle", ".", "get_orientation", "(", "id", ")", ")", "\n", "machine_dynamics", ".", "append", "(", "\n", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "id", ")", "/", "max_speed", ")", "\n", "", "else", ":", "\n", "                ", "human_logs", ".", "append", "(", "\n", "[", "self", ".", "k", ".", "vehicle", ".", "get_timestep", "(", "id", ")", ",", "\n", "self", ".", "k", ".", "vehicle", ".", "get_timedelta", "(", "id", ")", ",", "\n", "id", "]", ")", "\n", "human_orientations", ".", "append", "(", "\n", "self", ".", "k", ".", "vehicle", ".", "get_orientation", "(", "id", ")", ")", "\n", "human_dynamics", ".", "append", "(", "\n", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "id", ")", "/", "max_speed", ")", "\n", "", "", "for", "id", "in", "machine_idlist", ":", "\n", "            ", "machine_logs", ".", "append", "(", "\n", "[", "self", ".", "k", ".", "vehicle", ".", "get_timestep", "(", "id", ")", ",", "\n", "self", ".", "k", ".", "vehicle", ".", "get_timedelta", "(", "id", ")", ",", "\n", "id", "]", ")", "\n", "machine_orientations", ".", "append", "(", "\n", "self", ".", "k", ".", "vehicle", ".", "get_orientation", "(", "id", ")", ")", "\n", "machine_dynamics", ".", "append", "(", "\n", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "id", ")", "/", "max_speed", ")", "\n", "\n", "# step the renderer", "\n", "", "self", ".", "frame", "=", "self", ".", "renderer", ".", "render", "(", "human_orientations", ",", "\n", "machine_orientations", ",", "\n", "human_dynamics", ",", "\n", "machine_dynamics", ",", "\n", "human_logs", ",", "\n", "machine_logs", ")", "\n", "\n", "# get local observation of RL vehicles", "\n", "self", ".", "sights", "=", "[", "]", "\n", "for", "id", "in", "human_idlist", ":", "\n", "# Force tracking human vehicles by adding \"track\" in vehicle id.", "\n", "# The tracked human vehicles will be treated as machine vehicles.", "\n", "            ", "if", "\"track\"", "in", "id", ":", "\n", "                ", "orientation", "=", "self", ".", "k", ".", "vehicle", ".", "get_orientation", "(", "id", ")", "\n", "sight", "=", "self", ".", "renderer", ".", "get_sight", "(", "\n", "orientation", ",", "id", ")", "\n", "self", ".", "sights", ".", "append", "(", "sight", ")", "\n", "", "", "for", "id", "in", "machine_idlist", ":", "\n", "            ", "orientation", "=", "self", ".", "k", ".", "vehicle", ".", "get_orientation", "(", "id", ")", "\n", "sight", "=", "self", ".", "renderer", ".", "get_sight", "(", "\n", "orientation", ",", "id", ")", "\n", "self", ".", "sights", ".", "append", "(", "sight", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.Experiment.DoubleDQN_experiments.Experiment.__init__": [[63, 88], ["registry_custom.make_create_env", "create_env", "logging.info", "logging.info", "str", "datetime.datetime.utcnow"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env"], ["def", "__init__", "(", "self", ",", "flow_params", ",", "custom_callables", "=", "None", ")", ":", "\n", "        ", "\"\"\"Instantiate the Experiment class.\n\n        Parameters\n        ----------\n        flow_params : dict\n            flow-specific parameters\n        custom_callables : dict < str, lambda >\n            strings and lambda functions corresponding to some information we\n            want to extract from the environment. The lambda will be called at\n            each step to extract information from the env and it will be stored\n            in a dict keyed by the str.\n        \"\"\"", "\n", "self", ".", "custom_callables", "=", "custom_callables", "or", "{", "}", "\n", "\n", "# Get the env name and a creator for the environment.", "\n", "create_env", ",", "_", "=", "make_create_env", "(", "flow_params", ")", "\n", "\n", "# Create the environment.", "\n", "self", ".", "env", "=", "create_env", "(", ")", "\n", "\n", "logging", ".", "info", "(", "\" Starting experiment {} at {}\"", ".", "format", "(", "\n", "self", ".", "env", ".", "network", ".", "name", ",", "str", "(", "datetime", ".", "datetime", ".", "utcnow", "(", ")", ")", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\"Initializing environment.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.Experiment.DoubleDQN_experiments.Experiment.run": [[89, 171], ["Box", "Box", "Box", "Dict", "Box", "torch_GRL", "torch.optim.Adam", "pfrl.replay_buffers.ReplayBuffer", "pfrl.explorers.ConstantEpsilonGreedy", "pfrl.agents.DoubleDQN", "str", "torch_GRL.parameters", "x.astype", "Training_GRLModels", "Testing_GRLModels", "str"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_utils.Train_and_Test.Training_GRLModels", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_utils.Train_and_Test.Testing_GRLModels"], ["", "def", "run", "(", "self", ",", "num_runs", ",", "training", ",", "testing", ",", "num_human", ",", "actual_num_human", ",", "num_cav", ",", "model", ",", "debug", ",", "num_merge_0", "=", "None", ",", "\n", "num_merge_1", "=", "None", ")", ":", "\n", "\n", "# \u8bbe\u7f6e\u6a21\u578b\u540d\u79f0", "\n", "        ", "model_name", "=", "model", "+", "'_hv_'", "+", "str", "(", "num_human", ")", "+", "'_cav_'", "+", "str", "(", "num_cav", ")", "\n", "\n", "# F\u4e3a\u7279\u5f81\u957f\u5ea6\uff0cN\u4e3a\u667a\u80fd\u4f53\u6570\u91cf\uff0cA\u4e3a\u53ef\u91c7\u7528\u7684action\u7684\u6570\u91cf", "\n", "F", "=", "2", "+", "self", ".", "env", ".", "net_params", ".", "additional_params", "[", "\n", "'highway_lanes'", "]", "+", "self", ".", "env", ".", "n_unique_intentions", "# input feature size", "\n", "N", "=", "num_human", "+", "num_cav", "\n", "A", "=", "3", "\n", "# \u662f\u5426\u91c7\u7528\u65b0\u8bad\u7ec3\u7684\u6a21\u578b\u8fdb\u884c\u6d4b\u8bd5", "\n", "\n", "# \u5bfc\u5165\u5f3a\u5316\u5b66\u4e60gym\u76f8\u5173\u5e93", "\n", "from", "gym", ".", "spaces", ".", "box", "import", "Box", "\n", "from", "gym", ".", "spaces", "import", "Discrete", "\n", "from", "gym", ".", "spaces", ".", "dict", "import", "Dict", "\n", "\n", "# states\u4e3a\u72b6\u6001\u77e9\u9635\uff0cadjacency\u4e3a\u90bb\u63a5\u77e9\u9635\uff08\u5bf9\u5e94\u56fe\u795e\u7ecf\u7f51\u7edc\u90e8\u5206\uff09\uff0cmask\u4e3a\u63a9\u819c\u77e9\u9635\uff08\u8d77\u667a\u80fd\u4f53\u8fc7\u6ee4\u4f5c\u7528\uff09", "\n", "states", "=", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "N", ",", "F", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "adjacency", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "N", ",", "N", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "mask", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "N", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# obs_space\u4e3a\u72b6\u6001\u89c2\u6d4b\u77e9\u9635\uff0cact_space\u4e3a\u52a8\u4f5c\u7a7a\u95f4\u77e9\u9635", "\n", "obs_space", "=", "Dict", "(", "{", "'states'", ":", "states", ",", "'adjacency'", ":", "adjacency", ",", "'mask'", ":", "mask", "}", ")", "\n", "act_space", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "N", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# \u521d\u59cb\u5316DQN\u7c7b", "\n", "import", "pfrl", "\n", "import", "torch", "\n", "import", "torch", ".", "nn", "\n", "from", "GRLNet", ".", "Pytorch_GRL", "import", "torch_GRL", "# \u5bfc\u5165\u7f16\u5199\u7684pytorch\u4e0b\u7684\u7f51\u7edc", "\n", "from", "GRL_utils", ".", "Train_and_Test", "import", "Training_GRLModels", ",", "Testing_GRLModels", "# \u5bfc\u5165\u81ea\u884c\u7f16\u5199\u7684\u76f8\u5173\u5de5\u5177", "\n", "\n", "# \u521d\u59cb\u5316GRL\u7f51\u7edc", "\n", "GRL", "=", "torch_GRL", "(", "N", ",", "F", ",", "obs_space", ",", "act_space", ",", "A", ")", "\n", "# \u521d\u59cb\u5316\u4f18\u5316\u5668", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "GRL", ".", "parameters", "(", ")", ",", "eps", "=", "0.0001", ")", "\n", "# \u5b9a\u4e49\u6570\u636e\u7f13\u51b2\u5668", "\n", "replay_buffer", "=", "pfrl", ".", "replay_buffers", ".", "ReplayBuffer", "(", "capacity", "=", "10", "**", "6", ")", "\n", "# \u5b9a\u4e49\u6298\u6263\u56e0\u5b50", "\n", "gamma", "=", "0.99", "\n", "# \u5b9a\u4e49\u667a\u80fd\u4f53\u7b56\u7565\u53c2\u6570", "\n", "explorer", "=", "pfrl", ".", "explorers", ".", "ConstantEpsilonGreedy", "(", "\n", "epsilon", "=", "0.3", ",", "random_action_func", "=", "self", ".", "env", ".", "action_space", ".", "sample", ")", "\n", "# \u5b9a\u4e49\u8ba1\u7b97\u8bbe\u5907(cuda:0)", "\n", "gpu", "=", "0", "\n", "# \u5b9a\u4e49\u7279\u5f81\u63d0\u53d6\u5668(\u8f6c\u6362\u6210float32\u7c7b\u578b\u4fdd\u8bc1pytorch\u53ef\u4ee5\u63a5\u6536\u7279\u5f81)", "\n", "phi", "=", "lambda", "x", ":", "x", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "\n", "# \u521d\u59cb\u5316DoubleDQN\u7c7b", "\n", "warmup", "=", "20000", "# \u8bbe\u7f6ewarmup\u6b65\u957f", "\n", "GRL_DoubleDqn", "=", "pfrl", ".", "agents", ".", "DoubleDQN", "(", "\n", "GRL", ",", "# \u6a21\u578b\u91c7\u7528\u7684\u7f51\u7edc", "\n", "optimizer", ",", "# \u6a21\u578b\u91c7\u7528\u7684\u4f18\u5316\u5668", "\n", "replay_buffer", ",", "\n", "gamma", ",", "\n", "explorer", ",", "\n", "minibatch_size", "=", "32", ",", "\n", "replay_start_size", "=", "warmup", ",", "\n", "update_interval", "=", "10", ",", "\n", "target_update_interval", "=", "1000", ",", "\n", "target_update_method", "=", "'soft'", ",", "\n", "soft_update_tau", "=", "0.01", ",", "\n", "phi", "=", "phi", ",", "\n", "gpu", "=", "gpu", ",", "\n", ")", "\n", "\n", "# \u8fdb\u884c\u6a21\u578b\u8bad\u7ec3", "\n", "n_episodes", "=", "150", "\n", "max_episode_len", "=", "2500", "\n", "save_dir", "=", "'GRL_Trained_Models/DoubleDQN'", "\n", "debug_training", "=", "False", "\n", "if", "training", ":", "\n", "            ", "Training_GRLModels", "(", "GRL", ",", "GRL_DoubleDqn", ",", "self", ".", "env", ",", "n_episodes", ",", "max_episode_len", ",", "save_dir", ",", "warmup", ",", "debug_training", ")", "\n", "\n", "# \u8fdb\u884c\u6a21\u578b\u6d4b\u8bd5", "\n", "", "test_episodes", "=", "10", "\n", "load_dir", "=", "'Test_Models/DoubleDQN/DoubleDQN_3'", "\n", "debug_testing", "=", "False", "\n", "if", "testing", ":", "\n", "            ", "Testing_GRLModels", "(", "GRL", ",", "GRL_DoubleDqn", ",", "self", ".", "env", ",", "test_episodes", ",", "load_dir", ",", "debug_testing", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.Experiment.DuelingDQN_experiments.Experiment.__init__": [[63, 88], ["registry_custom.make_create_env", "create_env", "logging.info", "logging.info", "str", "datetime.datetime.utcnow"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env"], ["def", "__init__", "(", "self", ",", "flow_params", ",", "custom_callables", "=", "None", ")", ":", "\n", "        ", "\"\"\"Instantiate the Experiment class.\n\n        Parameters\n        ----------\n        flow_params : dict\n            flow-specific parameters\n        custom_callables : dict < str, lambda >\n            strings and lambda functions corresponding to some information we\n            want to extract from the environment. The lambda will be called at\n            each step to extract information from the env and it will be stored\n            in a dict keyed by the str.\n        \"\"\"", "\n", "self", ".", "custom_callables", "=", "custom_callables", "or", "{", "}", "\n", "\n", "# Get the env name and a creator for the environment.", "\n", "create_env", ",", "_", "=", "make_create_env", "(", "flow_params", ")", "\n", "\n", "# Create the environment.", "\n", "self", ".", "env", "=", "create_env", "(", ")", "\n", "\n", "logging", ".", "info", "(", "\" Starting experiment {} at {}\"", ".", "format", "(", "\n", "self", ".", "env", ".", "network", ".", "name", ",", "str", "(", "datetime", ".", "datetime", ".", "utcnow", "(", ")", ")", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\"Initializing environment.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.Experiment.DuelingDQN_experiments.Experiment.run": [[89, 170], ["Box", "Box", "Box", "Dict", "Box", "torch_GRL_Deuling", "torch.optim.Adam", "pfrl.replay_buffers.ReplayBuffer", "pfrl.explorers.ConstantEpsilonGreedy", "pfrl.agents.DQN", "str", "torch_GRL_Deuling.parameters", "x.astype", "Training_GRLModels", "Testing_GRLModels", "str"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_utils.Train_and_Test.Training_GRLModels", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_utils.Train_and_Test.Testing_GRLModels"], ["", "def", "run", "(", "self", ",", "num_runs", ",", "training", ",", "testing", ",", "num_human", ",", "actual_num_human", ",", "num_cav", ",", "model", ",", "debug", ",", "num_merge_0", "=", "None", ",", "\n", "num_merge_1", "=", "None", ")", ":", "\n", "\n", "# \u8bbe\u7f6e\u6a21\u578b\u540d\u79f0", "\n", "        ", "model_name", "=", "model", "+", "'_hv_'", "+", "str", "(", "num_human", ")", "+", "'_cav_'", "+", "str", "(", "num_cav", ")", "\n", "\n", "# F\u4e3a\u7279\u5f81\u957f\u5ea6\uff0cN\u4e3a\u667a\u80fd\u4f53\u6570\u91cf\uff0cA\u4e3a\u53ef\u91c7\u7528\u7684action\u7684\u6570\u91cf", "\n", "F", "=", "2", "+", "self", ".", "env", ".", "net_params", ".", "additional_params", "[", "\n", "'highway_lanes'", "]", "+", "self", ".", "env", ".", "n_unique_intentions", "# input feature size", "\n", "N", "=", "num_human", "+", "num_cav", "\n", "A", "=", "3", "\n", "# \u662f\u5426\u91c7\u7528\u65b0\u8bad\u7ec3\u7684\u6a21\u578b\u8fdb\u884c\u6d4b\u8bd5", "\n", "\n", "# \u5bfc\u5165\u5f3a\u5316\u5b66\u4e60gym\u76f8\u5173\u5e93", "\n", "from", "gym", ".", "spaces", ".", "box", "import", "Box", "\n", "from", "gym", ".", "spaces", "import", "Discrete", "\n", "from", "gym", ".", "spaces", ".", "dict", "import", "Dict", "\n", "\n", "# states\u4e3a\u72b6\u6001\u77e9\u9635\uff0cadjacency\u4e3a\u90bb\u63a5\u77e9\u9635\uff08\u5bf9\u5e94\u56fe\u795e\u7ecf\u7f51\u7edc\u90e8\u5206\uff09\uff0cmask\u4e3a\u63a9\u819c\u77e9\u9635\uff08\u8d77\u667a\u80fd\u4f53\u8fc7\u6ee4\u4f5c\u7528\uff09", "\n", "states", "=", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "N", ",", "F", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "adjacency", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "N", ",", "N", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "mask", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "N", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# obs_space\u4e3a\u72b6\u6001\u89c2\u6d4b\u77e9\u9635\uff0cact_space\u4e3a\u52a8\u4f5c\u7a7a\u95f4\u77e9\u9635", "\n", "obs_space", "=", "Dict", "(", "{", "'states'", ":", "states", ",", "'adjacency'", ":", "adjacency", ",", "'mask'", ":", "mask", "}", ")", "\n", "act_space", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "N", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# \u521d\u59cb\u5316DQN\u7c7b", "\n", "import", "pfrl", "\n", "import", "torch", "\n", "import", "torch", ".", "nn", "\n", "from", "GRLNet", ".", "Pytorch_GRL_Dueling", "import", "torch_GRL_Deuling", "# \u5bfc\u5165\u7f16\u5199\u7684pytorch\u4e0b\u7684\u7f51\u7edc", "\n", "from", "GRL_utils", ".", "Train_and_Test", "import", "Training_GRLModels", ",", "Testing_GRLModels", "# \u5bfc\u5165\u81ea\u884c\u7f16\u5199\u7684\u76f8\u5173\u5de5\u5177", "\n", "\n", "# \u521d\u59cb\u5316GRL\u7f51\u7edc", "\n", "GRL", "=", "torch_GRL_Deuling", "(", "N", ",", "F", ",", "obs_space", ",", "act_space", ",", "A", ")", "\n", "# \u521d\u59cb\u5316\u4f18\u5316\u5668", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "GRL", ".", "parameters", "(", ")", ",", "eps", "=", "0.0001", ")", "\n", "# \u5b9a\u4e49\u6570\u636e\u7f13\u51b2\u5668", "\n", "replay_buffer", "=", "pfrl", ".", "replay_buffers", ".", "ReplayBuffer", "(", "capacity", "=", "10", "**", "6", ")", "\n", "# \u5b9a\u4e49\u6298\u6263\u56e0\u5b50", "\n", "gamma", "=", "0.99", "\n", "# \u5b9a\u4e49\u667a\u80fd\u4f53\u7b56\u7565\u53c2\u6570", "\n", "explorer", "=", "pfrl", ".", "explorers", ".", "ConstantEpsilonGreedy", "(", "\n", "epsilon", "=", "0.3", ",", "random_action_func", "=", "self", ".", "env", ".", "action_space", ".", "sample", ")", "\n", "# \u5b9a\u4e49\u8ba1\u7b97\u8bbe\u5907(cuda:0)", "\n", "gpu", "=", "0", "\n", "# \u5b9a\u4e49\u7279\u5f81\u63d0\u53d6\u5668(\u8f6c\u6362\u6210float32\u7c7b\u578b\u4fdd\u8bc1pytorch\u53ef\u4ee5\u63a5\u6536\u7279\u5f81)", "\n", "phi", "=", "lambda", "x", ":", "x", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "\n", "# \u521d\u59cb\u5316DuelingDQN\u7c7b", "\n", "warmup", "=", "20000", "# \u8bbe\u7f6ewarmup\u6b65\u957f", "\n", "GRL_DuelingDqn", "=", "pfrl", ".", "agents", ".", "DQN", "(", "\n", "GRL", ",", "# \u6a21\u578b\u91c7\u7528\u7684\u7f51\u7edc", "\n", "optimizer", ",", "# \u6a21\u578b\u91c7\u7528\u7684\u4f18\u5316\u5668", "\n", "replay_buffer", ",", "\n", "gamma", ",", "\n", "explorer", ",", "\n", "replay_start_size", "=", "warmup", ",", "\n", "update_interval", "=", "10", ",", "\n", "target_update_interval", "=", "1000", ",", "\n", "target_update_method", "=", "'soft'", ",", "\n", "soft_update_tau", "=", "0.01", ",", "\n", "phi", "=", "phi", ",", "\n", "gpu", "=", "gpu", ",", "\n", ")", "\n", "\n", "# \u8fdb\u884c\u6a21\u578b\u8bad\u7ec3", "\n", "n_episodes", "=", "150", "\n", "max_episode_len", "=", "2500", "\n", "save_dir", "=", "'GRL_Trained_Models/DuelingDQN'", "\n", "debug_training", "=", "False", "\n", "if", "training", ":", "\n", "            ", "Training_GRLModels", "(", "GRL", ",", "GRL_DuelingDqn", ",", "self", ".", "env", ",", "n_episodes", ",", "max_episode_len", ",", "save_dir", ",", "warmup", ",", "debug_training", ")", "\n", "\n", "# \u8fdb\u884c\u6a21\u578b\u6d4b\u8bd5", "\n", "", "test_episodes", "=", "10", "\n", "load_dir", "=", "'Test_Models/DuelingDQN/DuelingDQN_3'", "\n", "debug_testing", "=", "False", "\n", "if", "testing", ":", "\n", "            ", "Testing_GRLModels", "(", "GRL", ",", "GRL_DuelingDqn", ",", "self", ".", "env", ",", "test_episodes", ",", "load_dir", ",", "debug_testing", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.Experiment.Rule_experiments.Experiment.__init__": [[63, 88], ["registry_custom.make_create_env", "create_env", "logging.info", "logging.info", "str", "datetime.datetime.utcnow"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env"], ["def", "__init__", "(", "self", ",", "flow_params", ",", "custom_callables", "=", "None", ")", ":", "\n", "        ", "\"\"\"Instantiate the Experiment class.\n\n        Parameters\n        ----------\n        flow_params : dict\n            flow-specific parameters\n        custom_callables : dict < str, lambda >\n            strings and lambda functions corresponding to some information we\n            want to extract from the environment. The lambda will be called at\n            each step to extract information from the env and it will be stored\n            in a dict keyed by the str.\n        \"\"\"", "\n", "self", ".", "custom_callables", "=", "custom_callables", "or", "{", "}", "\n", "\n", "# Get the env name and a creator for the environment.", "\n", "create_env", ",", "_", "=", "make_create_env", "(", "flow_params", ")", "\n", "\n", "# Create the environment.", "\n", "self", ".", "env", "=", "create_env", "(", ")", "\n", "\n", "logging", ".", "info", "(", "\" Starting experiment {} at {}\"", ".", "format", "(", "\n", "self", ".", "env", ".", "network", ".", "name", ",", "str", "(", "datetime", ".", "datetime", ".", "utcnow", "(", ")", ")", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\"Initializing environment.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.Experiment.Rule_experiments.Experiment.run": [[89, 165], ["Box", "Box", "Box", "Dict", "Box", "torch_GRL", "torch.optim.Adam", "pfrl.replay_buffers.ReplayBuffer", "pfrl.explorers.ConstantEpsilonGreedy", "pfrl.agents.DQN", "str", "torch_GRL.parameters", "x.astype", "Training_Models", "str"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "num_runs", ",", "training", ",", "testing", ",", "num_human", ",", "actual_num_human", ",", "num_cav", ",", "model", ",", "debug", ",", "num_merge_0", "=", "None", ",", "\n", "num_merge_1", "=", "None", ")", ":", "\n", "\n", "# \u8bbe\u7f6e\u6a21\u578b\u540d\u79f0", "\n", "        ", "model_name", "=", "model", "+", "'_hv_'", "+", "str", "(", "num_human", ")", "+", "'_cav_'", "+", "str", "(", "num_cav", ")", "\n", "\n", "# F\u4e3a\u7279\u5f81\u957f\u5ea6\uff0cN\u4e3a\u667a\u80fd\u4f53\u6570\u91cf\uff0cA\u4e3a\u53ef\u91c7\u7528\u7684action\u7684\u6570\u91cf", "\n", "F", "=", "2", "+", "self", ".", "env", ".", "net_params", ".", "additional_params", "[", "\n", "'highway_lanes'", "]", "+", "self", ".", "env", ".", "n_unique_intentions", "# input feature size", "\n", "N", "=", "num_human", "+", "num_cav", "\n", "A", "=", "3", "\n", "\n", "# \u5bfc\u5165\u5f3a\u5316\u5b66\u4e60gym\u76f8\u5173\u5e93", "\n", "from", "gym", ".", "spaces", ".", "box", "import", "Box", "\n", "from", "gym", ".", "spaces", "import", "Discrete", "\n", "from", "gym", ".", "spaces", ".", "dict", "import", "Dict", "\n", "\n", "# states\u4e3a\u72b6\u6001\u77e9\u9635\uff0cadjacency\u4e3a\u90bb\u63a5\u77e9\u9635\uff08\u5bf9\u5e94\u56fe\u795e\u7ecf\u7f51\u7edc\u90e8\u5206\uff09\uff0cmask\u4e3a\u63a9\u819c\u77e9\u9635\uff08\u8d77\u667a\u80fd\u4f53\u8fc7\u6ee4\u4f5c\u7528\uff09", "\n", "states", "=", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "N", ",", "F", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "adjacency", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "N", ",", "N", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "mask", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "N", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# obs_space\u4e3a\u72b6\u6001\u89c2\u6d4b\u77e9\u9635\uff0cact_space\u4e3a\u52a8\u4f5c\u7a7a\u95f4\u77e9\u9635", "\n", "obs_space", "=", "Dict", "(", "{", "'states'", ":", "states", ",", "'adjacency'", ":", "adjacency", ",", "'mask'", ":", "mask", "}", ")", "\n", "act_space", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "N", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# \u521d\u59cb\u5316DQN\u7c7b", "\n", "import", "pfrl", "\n", "import", "torch", "\n", "import", "torch", ".", "nn", "\n", "from", "GRLNet", ".", "Pytorch_GRL", "import", "torch_GRL", "# \u5bfc\u5165\u7f16\u5199\u7684pytorch\u4e0b\u7684\u7f51\u7edc", "\n", "from", "GRL_utils", ".", "Train_and_Test", "import", "Training_Models", ",", "Testing_Models", "# \u5bfc\u5165\u81ea\u884c\u7f16\u5199\u7684\u76f8\u5173\u5de5\u5177", "\n", "\n", "# \u521d\u59cb\u5316GRL\u7f51\u7edc", "\n", "GRL", "=", "torch_GRL", "(", "N", ",", "F", ",", "obs_space", ",", "act_space", ",", "A", ")", "\n", "# \u521d\u59cb\u5316\u4f18\u5316\u5668", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "GRL", ".", "parameters", "(", ")", ",", "eps", "=", "0.0001", ")", "\n", "# \u5b9a\u4e49\u6570\u636e\u7f13\u51b2\u5668", "\n", "replay_buffer", "=", "pfrl", ".", "replay_buffers", ".", "ReplayBuffer", "(", "capacity", "=", "10", "**", "6", ")", "\n", "# \u5b9a\u4e49\u6298\u6263\u56e0\u5b50", "\n", "gamma", "=", "0.9", "\n", "# \u5b9a\u4e49\u667a\u80fd\u4f53\u7b56\u7565\u53c2\u6570", "\n", "explorer", "=", "pfrl", ".", "explorers", ".", "ConstantEpsilonGreedy", "(", "\n", "epsilon", "=", "0.3", ",", "random_action_func", "=", "self", ".", "env", ".", "action_space", ".", "sample", ")", "\n", "# \u5b9a\u4e49\u8ba1\u7b97\u8bbe\u5907(cuda:0)", "\n", "gpu", "=", "0", "\n", "# \u5b9a\u4e49\u7279\u5f81\u63d0\u53d6\u5668(\u8f6c\u6362\u6210float32\u7c7b\u578b\u4fdd\u8bc1pytorch\u53ef\u4ee5\u63a5\u6536\u7279\u5f81)", "\n", "phi", "=", "lambda", "x", ":", "x", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "\n", "# \u521d\u59cb\u5316DQN\u7c7b", "\n", "# \u8fd9\u91cc\u5c3d\u7ba1\u5b9a\u4e49\u4e86GRL\u7f51\u7edc\uff0c\u4f46\u53ea\u662f\u8fdb\u884c\u4e86episode\u5956\u52b1\u8ba1\u7b97\u7684\u6d41\u7a0b\uff0c\u5b9e\u9645\u63a7\u5236\u901a\u8fc7IDM\u5b9e\u73b0;", "\n", "# \u4f46\u9700\u8981\u6ce8\u91ca\u6389specific_environment.py\u4e2d\u7684self.k.vehicle.apply_lane_change(rl_ids, rl_actions2)\u8fd9\u53e5\u4ee3\u7801", "\n", "warmup", "=", "50", "# \u8bbe\u7f6ewarmup\u6b65\u957f", "\n", "GRL_Dqn", "=", "pfrl", ".", "agents", ".", "DQN", "(", "\n", "GRL", ",", "# \u6a21\u578b\u91c7\u7528\u7684\u7f51\u7edc", "\n", "optimizer", ",", "# \u6a21\u578b\u91c7\u7528\u7684\u4f18\u5316\u5668", "\n", "replay_buffer", ",", "\n", "gamma", ",", "\n", "explorer", ",", "\n", "minibatch_size", "=", "32", ",", "\n", "replay_start_size", "=", "warmup", ",", "\n", "update_interval", "=", "1000", ",", "\n", "target_update_interval", "=", "10000", ",", "\n", "target_update_method", "=", "'soft'", ",", "\n", "soft_update_tau", "=", "0.01", ",", "\n", "phi", "=", "phi", ",", "\n", "gpu", "=", "gpu", ",", "\n", ")", "\n", "\n", "# \u8fdb\u884c\u6a21\u578b\u8bad\u7ec3", "\n", "n_episodes", "=", "150", "\n", "max_episode_len", "=", "2500", "\n", "save_dir", "=", "'GRL_Trained_Models/Rule_Based'", "\n", "debug_training", "=", "False", "\n", "if", "training", ":", "\n", "            ", "Training_Models", "(", "GRL", ",", "GRL_Dqn", ",", "self", ".", "env", ",", "n_episodes", ",", "max_episode_len", ",", "save_dir", ",", "warmup", ",", "debug_training", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.Experiment.DQN_experiments.Experiment.__init__": [[63, 88], ["registry_custom.make_create_env", "create_env", "logging.info", "logging.info", "str", "datetime.datetime.utcnow"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env"], ["def", "__init__", "(", "self", ",", "flow_params", ",", "custom_callables", "=", "None", ")", ":", "\n", "        ", "\"\"\"Instantiate the Experiment class.\n\n        Parameters\n        ----------\n        flow_params : dict\n            flow-specific parameters\n        custom_callables : dict < str, lambda >\n            strings and lambda functions corresponding to some information we\n            want to extract from the environment. The lambda will be called at\n            each step to extract information from the env and it will be stored\n            in a dict keyed by the str.\n        \"\"\"", "\n", "self", ".", "custom_callables", "=", "custom_callables", "or", "{", "}", "\n", "\n", "# Get the env name and a creator for the environment.", "\n", "create_env", ",", "_", "=", "make_create_env", "(", "flow_params", ")", "\n", "\n", "# Create the environment.", "\n", "self", ".", "env", "=", "create_env", "(", ")", "\n", "\n", "logging", ".", "info", "(", "\" Starting experiment {} at {}\"", ".", "format", "(", "\n", "self", ".", "env", ".", "network", ".", "name", ",", "str", "(", "datetime", ".", "datetime", ".", "utcnow", "(", ")", ")", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\"Initializing environment.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.Experiment.DQN_experiments.Experiment.run": [[89, 170], ["Box", "Box", "Box", "Dict", "Box", "torch_GRL", "torch.optim.Adam", "pfrl.replay_buffers.ReplayBuffer", "pfrl.explorers.ConstantEpsilonGreedy", "pfrl.agents.DQN", "str", "torch_GRL.parameters", "x.astype", "Training_GRLModels", "Testing_GRLModels", "str"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_utils.Train_and_Test.Training_GRLModels", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_utils.Train_and_Test.Testing_GRLModels"], ["", "def", "run", "(", "self", ",", "num_runs", ",", "training", ",", "testing", ",", "num_human", ",", "actual_num_human", ",", "num_cav", ",", "model", ",", "debug", ",", "num_merge_0", "=", "None", ",", "\n", "num_merge_1", "=", "None", ")", ":", "\n", "\n", "# \u8bbe\u7f6e\u6a21\u578b\u540d\u79f0", "\n", "        ", "model_name", "=", "model", "+", "'_hv_'", "+", "str", "(", "num_human", ")", "+", "'_cav_'", "+", "str", "(", "num_cav", ")", "\n", "\n", "# F\u4e3a\u7279\u5f81\u957f\u5ea6\uff0cN\u4e3a\u667a\u80fd\u4f53\u6570\u91cf\uff0cA\u4e3a\u53ef\u91c7\u7528\u7684action\u7684\u6570\u91cf", "\n", "F", "=", "2", "+", "self", ".", "env", ".", "net_params", ".", "additional_params", "[", "\n", "'highway_lanes'", "]", "+", "self", ".", "env", ".", "n_unique_intentions", "# input feature size", "\n", "N", "=", "num_human", "+", "num_cav", "\n", "A", "=", "3", "\n", "\n", "# \u5bfc\u5165\u5f3a\u5316\u5b66\u4e60gym\u76f8\u5173\u5e93", "\n", "from", "gym", ".", "spaces", ".", "box", "import", "Box", "\n", "from", "gym", ".", "spaces", "import", "Discrete", "\n", "from", "gym", ".", "spaces", ".", "dict", "import", "Dict", "\n", "\n", "# states\u4e3a\u72b6\u6001\u77e9\u9635\uff0cadjacency\u4e3a\u90bb\u63a5\u77e9\u9635\uff08\u5bf9\u5e94\u56fe\u795e\u7ecf\u7f51\u7edc\u90e8\u5206\uff09\uff0cmask\u4e3a\u63a9\u819c\u77e9\u9635\uff08\u8d77\u667a\u80fd\u4f53\u8fc7\u6ee4\u4f5c\u7528\uff09", "\n", "states", "=", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "N", ",", "F", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "adjacency", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "N", ",", "N", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "mask", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "N", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# obs_space\u4e3a\u72b6\u6001\u89c2\u6d4b\u77e9\u9635\uff0cact_space\u4e3a\u52a8\u4f5c\u7a7a\u95f4\u77e9\u9635", "\n", "obs_space", "=", "Dict", "(", "{", "'states'", ":", "states", ",", "'adjacency'", ":", "adjacency", ",", "'mask'", ":", "mask", "}", ")", "\n", "act_space", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "N", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# \u521d\u59cb\u5316DQN\u7c7b", "\n", "import", "pfrl", "\n", "import", "torch", "\n", "import", "torch", ".", "nn", "\n", "from", "GRLNet", ".", "Pytorch_GRL", "import", "torch_GRL", "# \u5bfc\u5165\u7f16\u5199\u7684pytorch\u4e0b\u7684\u7f51\u7edc", "\n", "from", "GRL_utils", ".", "Train_and_Test", "import", "Training_GRLModels", ",", "Testing_GRLModels", "# \u5bfc\u5165\u81ea\u884c\u7f16\u5199\u7684\u76f8\u5173\u5de5\u5177", "\n", "\n", "# \u521d\u59cb\u5316GRL\u7f51\u7edc", "\n", "GRL", "=", "torch_GRL", "(", "N", ",", "F", ",", "obs_space", ",", "act_space", ",", "A", ")", "\n", "# \u521d\u59cb\u5316\u4f18\u5316\u5668", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "GRL", ".", "parameters", "(", ")", ",", "eps", "=", "0.0001", ")", "\n", "# \u5b9a\u4e49\u6570\u636e\u7f13\u51b2\u5668", "\n", "replay_buffer", "=", "pfrl", ".", "replay_buffers", ".", "ReplayBuffer", "(", "capacity", "=", "10", "**", "6", ")", "\n", "# \u5b9a\u4e49\u6298\u6263\u56e0\u5b50", "\n", "gamma", "=", "0.9", "\n", "# \u5b9a\u4e49\u667a\u80fd\u4f53\u7b56\u7565\u53c2\u6570", "\n", "explorer", "=", "pfrl", ".", "explorers", ".", "ConstantEpsilonGreedy", "(", "\n", "epsilon", "=", "0.3", ",", "random_action_func", "=", "self", ".", "env", ".", "action_space", ".", "sample", ")", "\n", "# \u5b9a\u4e49\u8ba1\u7b97\u8bbe\u5907(cuda:0)", "\n", "gpu", "=", "0", "\n", "# \u5b9a\u4e49\u7279\u5f81\u63d0\u53d6\u5668(\u8f6c\u6362\u6210float32\u7c7b\u578b\u4fdd\u8bc1pytorch\u53ef\u4ee5\u63a5\u6536\u7279\u5f81)", "\n", "phi", "=", "lambda", "x", ":", "x", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "\n", "# \u521d\u59cb\u5316DQN\u7c7b", "\n", "warmup", "=", "20000", "# \u8bbe\u7f6ewarmup\u6b65\u957f", "\n", "GRL_Dqn", "=", "pfrl", ".", "agents", ".", "DQN", "(", "\n", "GRL", ",", "# \u6a21\u578b\u91c7\u7528\u7684\u7f51\u7edc", "\n", "optimizer", ",", "# \u6a21\u578b\u91c7\u7528\u7684\u4f18\u5316\u5668", "\n", "replay_buffer", ",", "\n", "gamma", ",", "\n", "explorer", ",", "\n", "minibatch_size", "=", "32", ",", "\n", "replay_start_size", "=", "warmup", ",", "\n", "update_interval", "=", "10", ",", "\n", "target_update_interval", "=", "1000", ",", "\n", "target_update_method", "=", "'soft'", ",", "\n", "soft_update_tau", "=", "0.01", ",", "\n", "phi", "=", "phi", ",", "\n", "gpu", "=", "gpu", ",", "\n", ")", "\n", "\n", "# \u8fdb\u884c\u6a21\u578b\u8bad\u7ec3", "\n", "n_episodes", "=", "150", "\n", "max_episode_len", "=", "2500", "\n", "save_dir", "=", "'GRL_Trained_Models/DQN'", "\n", "debug_training", "=", "False", "\n", "if", "training", ":", "\n", "            ", "Training_GRLModels", "(", "GRL", ",", "GRL_Dqn", ",", "self", ".", "env", ",", "n_episodes", ",", "max_episode_len", ",", "save_dir", ",", "warmup", ",", "debug_training", ")", "\n", "\n", "# \u8fdb\u884c\u6a21\u578b\u6d4b\u8bd5", "\n", "", "test_episodes", "=", "10", "\n", "load_dir", "=", "'Test_Models/DQN/DQN_3'", "\n", "debug_testing", "=", "False", "\n", "if", "testing", ":", "\n", "            ", "Testing_GRLModels", "(", "GRL", ",", "GRL_Dqn", ",", "self", ".", "env", ",", "test_episodes", ",", "load_dir", ",", "debug_testing", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.Experiment.registry_custom.make_create_env": [[13, 137], ["isinstance", "gym.envs.registry.all", "isinstance", "params.get", "params.get", "print", "print", "__import__", "getattr", "flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "copy.deepcopy", "copy.deepcopy", "isinstance", "gym.envs.registration.register", "gym.envs.make", "dir", "env.startswith"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], ["def", "make_create_env", "(", "params", ",", "version", "=", "0", ",", "render", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create a parametrized flow environment compatible with OpenAI gym.\n\n    This environment creation method allows for the specification of several\n    key parameters when creating any flow environment, including the requested\n    environment and network classes, and the inputs needed to make these\n    classes generalizable to networks of varying sizes and shapes, and well as\n    varying forms of control (e.g. AVs, automated traffic lights, etc...).\n\n    This method can also be used to recreate the environment a policy was\n    trained on and assess it performance, or a modified form of the previous\n    environment may be used to profile the performance of the policy on other\n    types of networks.\n\n    Parameters\n    ----------\n    params : dict\n        flow-related parameters, consisting of the following keys:\n\n         - exp_tag: name of the experiment\n         - env_name: environment class of the flow environment the experiment\n           is running on. (note: must be in an importable module.)\n         - network: network class the experiment uses.\n         - simulator: simulator that is used by the experiment (e.g. aimsun)\n         - sim: simulation-related parameters (see flow.core.params.SimParams)\n         - env: environment related parameters (see flow.core.params.EnvParams)\n         - net: network-related parameters (see flow.core.params.NetParams and\n           the network's documentation or ADDITIONAL_NET_PARAMS component)\n         - veh: vehicles to be placed in the network at the start of a rollout\n           (see flow.core.params.VehicleParams)\n         - initial (optional): parameters affecting the positioning of vehicles\n           upon initialization/reset (see flow.core.params.InitialConfig)\n         - tls (optional): traffic lights to be introduced to specific nodes\n           (see flow.core.params.TrafficLightParams)\n\n    version : int, optional\n        environment version number\n    render : bool, optional\n        specifies whether to use the gui during execution. This overrides\n        the render attribute in SumoParams\n\n    Returns\n    -------\n    function\n        method that calls OpenAI gym's register method and make method\n    str\n        name of the created gym environment\n    \"\"\"", "\n", "exp_tag", "=", "params", "[", "\"exp_tag\"", "]", "\n", "\n", "if", "isinstance", "(", "params", "[", "\"env_name\"", "]", ",", "str", ")", ":", "\n", "        ", "print", "(", "\"\"\"Passing of strings for env_name will be deprecated.\n        Please pass the Env instance instead.\"\"\"", ")", "\n", "base_env_name", "=", "params", "[", "\"env_name\"", "]", "\n", "", "else", ":", "\n", "        ", "base_env_name", "=", "params", "[", "\"env_name\"", "]", ".", "__name__", "\n", "\n", "# deal with multiple environments being created under the same name", "\n", "", "all_envs", "=", "gym", ".", "envs", ".", "registry", ".", "all", "(", ")", "\n", "env_ids", "=", "[", "env_spec", ".", "id", "for", "env_spec", "in", "all_envs", "]", "\n", "while", "\"{}-v{}\"", ".", "format", "(", "base_env_name", ",", "version", ")", "in", "env_ids", ":", "\n", "        ", "version", "+=", "1", "\n", "", "env_name", "=", "\"{}-v{}\"", ".", "format", "(", "base_env_name", ",", "version", ")", "\n", "\n", "if", "isinstance", "(", "params", "[", "\"network\"", "]", ",", "str", ")", ":", "\n", "        ", "print", "(", "\"\"\"Passing of strings for network will be deprecated.\n        Please pass the Network instance instead.\"\"\"", ")", "\n", "module", "=", "__import__", "(", "\"flow.networks\"", ",", "fromlist", "=", "[", "params", "[", "\"network\"", "]", "]", ")", "\n", "network_class", "=", "getattr", "(", "module", ",", "params", "[", "\"network\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "network_class", "=", "params", "[", "\"network\"", "]", "\n", "# print(network_class)", "\n", "\n", "", "env_params", "=", "params", "[", "'env'", "]", "\n", "net_params", "=", "params", "[", "'net'", "]", "\n", "initial_config", "=", "params", ".", "get", "(", "'initial'", ",", "InitialConfig", "(", ")", ")", "\n", "traffic_lights", "=", "params", ".", "get", "(", "\"tls\"", ",", "TrafficLightParams", "(", ")", ")", "\n", "\n", "def", "create_env", "(", "*", "_", ")", ":", "\n", "        ", "sim_params", "=", "deepcopy", "(", "params", "[", "'sim'", "]", ")", "\n", "vehicles", "=", "deepcopy", "(", "params", "[", "'veh'", "]", ")", "\n", "\n", "# network = network_class(", "\n", "#     name=exp_tag,", "\n", "#     vehicles=vehicles,", "\n", "#     net_params=net_params,", "\n", "#     initial_config=initial_config,", "\n", "#     traffic_lights=traffic_lights,", "\n", "# )", "\n", "network", "=", "network_class", "\n", "\n", "# accept new render type if not set to None", "\n", "sim_params", ".", "render", "=", "render", "or", "sim_params", ".", "render", "\n", "\n", "# check if the environment is a single or multiagent environment, and", "\n", "# get the right address accordingly", "\n", "single_agent_envs", "=", "[", "env", "for", "env", "in", "dir", "(", "flow", ".", "envs", ")", "\n", "if", "not", "env", ".", "startswith", "(", "'__'", ")", "]", "\n", "\n", "if", "isinstance", "(", "params", "[", "\"env_name\"", "]", ",", "str", ")", ":", "\n", "            ", "if", "params", "[", "'env_name'", "]", "in", "single_agent_envs", ":", "\n", "                ", "env_loc", "=", "'flow.envs'", "\n", "", "else", ":", "\n", "                ", "env_loc", "=", "'flow.envs.multiagent'", "\n", "", "entry_point", "=", "env_loc", "+", "':{}'", ".", "format", "(", "params", "[", "\"env_name\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "entry_point", "=", "params", "[", "\"env_name\"", "]", ".", "__module__", "+", "':'", "+", "params", "[", "\"env_name\"", "]", ".", "__name__", "\n", "\n", "# register the environment with OpenAI gym", "\n", "", "register", "(", "\n", "id", "=", "env_name", ",", "\n", "entry_point", "=", "entry_point", ",", "\n", "kwargs", "=", "{", "\n", "\"env_params\"", ":", "env_params", ",", "\n", "\"sim_params\"", ":", "sim_params", ",", "\n", "\"network\"", ":", "network", ",", "\n", "\"simulator\"", ":", "params", "[", "'simulator'", "]", "\n", "}", ")", "\n", "\n", "\n", "return", "gym", ".", "envs", ".", "make", "(", "env_name", ")", "\n", "\n", "", "return", "create_env", ",", "env_name", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.Experiment.registry_custom.env_constructor": [[139, 143], ["registry_custom.make_create_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env"], ["    ", "\"\"\"Return a constructor from make_create_env.\"\"\"", "\n", "create_env", ",", "env_name", "=", "make_create_env", "(", "params", ",", "version", ",", "render", ")", "\n", "return", "create_env", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.Experiment.DuelingDoubleDQN_experiments.Experiment.__init__": [[63, 88], ["registry_custom.make_create_env", "create_env", "logging.info", "logging.info", "str", "datetime.datetime.utcnow"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env"], ["def", "__init__", "(", "self", ",", "flow_params", ",", "custom_callables", "=", "None", ")", ":", "\n", "        ", "\"\"\"Instantiate the Experiment class.\n\n        Parameters\n        ----------\n        flow_params : dict\n            flow-specific parameters\n        custom_callables : dict < str, lambda >\n            strings and lambda functions corresponding to some information we\n            want to extract from the environment. The lambda will be called at\n            each step to extract information from the env and it will be stored\n            in a dict keyed by the str.\n        \"\"\"", "\n", "self", ".", "custom_callables", "=", "custom_callables", "or", "{", "}", "\n", "\n", "# Get the env name and a creator for the environment.", "\n", "create_env", ",", "_", "=", "make_create_env", "(", "flow_params", ")", "\n", "\n", "# Create the environment.", "\n", "self", ".", "env", "=", "create_env", "(", ")", "\n", "\n", "logging", ".", "info", "(", "\" Starting experiment {} at {}\"", ".", "format", "(", "\n", "self", ".", "env", ".", "network", ".", "name", ",", "str", "(", "datetime", ".", "datetime", ".", "utcnow", "(", ")", ")", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\"Initializing environment.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.Experiment.DuelingDoubleDQN_experiments.Experiment.run": [[89, 172], ["Box", "Box", "Box", "Dict", "Box", "torch_GRL_Deuling", "torch.optim.Adam", "pfrl.replay_buffers.ReplayBuffer", "pfrl.explorers.ConstantEpsilonGreedy", "pfrl.agents.DoubleDQN", "str", "torch_GRL_Deuling.parameters", "x.astype", "Training_GRLModels", "Testing_GRLModels", "str"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_utils.Train_and_Test.Training_GRLModels", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRL_utils.Train_and_Test.Testing_GRLModels"], ["", "def", "run", "(", "self", ",", "num_runs", ",", "training", ",", "testing", ",", "num_human", ",", "actual_num_human", ",", "num_cav", ",", "model", ",", "debug", ",", "num_merge_0", "=", "None", ",", "\n", "num_merge_1", "=", "None", ")", ":", "\n", "\n", "# \u8bbe\u7f6e\u6a21\u578b\u540d\u79f0", "\n", "        ", "model_name", "=", "model", "+", "'_hv_'", "+", "str", "(", "num_human", ")", "+", "'_cav_'", "+", "str", "(", "num_cav", ")", "\n", "\n", "# F\u4e3a\u7279\u5f81\u957f\u5ea6\uff0cN\u4e3a\u667a\u80fd\u4f53\u6570\u91cf\uff0cA\u4e3a\u53ef\u91c7\u7528\u7684action\u7684\u6570\u91cf", "\n", "F", "=", "2", "+", "self", ".", "env", ".", "net_params", ".", "additional_params", "[", "\n", "'highway_lanes'", "]", "+", "self", ".", "env", ".", "n_unique_intentions", "# input feature size", "\n", "N", "=", "num_human", "+", "num_cav", "\n", "A", "=", "3", "\n", "# \u662f\u5426\u91c7\u7528\u65b0\u8bad\u7ec3\u7684\u6a21\u578b\u8fdb\u884c\u6d4b\u8bd5", "\n", "\n", "# \u5bfc\u5165\u5f3a\u5316\u5b66\u4e60gym\u76f8\u5173\u5e93", "\n", "from", "gym", ".", "spaces", ".", "box", "import", "Box", "\n", "from", "gym", ".", "spaces", "import", "Discrete", "\n", "from", "gym", ".", "spaces", ".", "dict", "import", "Dict", "\n", "\n", "# states\u4e3a\u72b6\u6001\u77e9\u9635\uff0cadjacency\u4e3a\u90bb\u63a5\u77e9\u9635\uff08\u5bf9\u5e94\u56fe\u795e\u7ecf\u7f51\u7edc\u90e8\u5206\uff09\uff0cmask\u4e3a\u63a9\u819c\u77e9\u9635\uff08\u8d77\u667a\u80fd\u4f53\u8fc7\u6ee4\u4f5c\u7528\uff09", "\n", "states", "=", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "N", ",", "F", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "adjacency", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "N", ",", "N", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "mask", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "N", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# obs_space\u4e3a\u72b6\u6001\u89c2\u6d4b\u77e9\u9635\uff0cact_space\u4e3a\u52a8\u4f5c\u7a7a\u95f4\u77e9\u9635", "\n", "obs_space", "=", "Dict", "(", "{", "'states'", ":", "states", ",", "'adjacency'", ":", "adjacency", ",", "'mask'", ":", "mask", "}", ")", "\n", "act_space", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "N", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# \u521d\u59cb\u5316DQN\u7c7b", "\n", "import", "pfrl", "\n", "import", "torch", "\n", "import", "torch", ".", "nn", "\n", "from", "GRLNet", ".", "Pytorch_GRL_Dueling", "import", "torch_GRL_Deuling", "# \u5bfc\u5165\u7f16\u5199\u7684pytorch\u4e0b\u7684\u7f51\u7edc", "\n", "from", "GRL_utils", ".", "Train_and_Test", "import", "Training_GRLModels", ",", "Testing_GRLModels", "# \u5bfc\u5165\u81ea\u884c\u7f16\u5199\u7684\u76f8\u5173\u5de5\u5177", "\n", "\n", "# \u521d\u59cb\u5316GRL\u7f51\u7edc", "\n", "GRL", "=", "torch_GRL_Deuling", "(", "N", ",", "F", ",", "obs_space", ",", "act_space", ",", "A", ")", "\n", "# \u521d\u59cb\u5316\u4f18\u5316\u5668", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "GRL", ".", "parameters", "(", ")", ",", "eps", "=", "0.0001", ")", "\n", "# \u5b9a\u4e49\u6570\u636e\u7f13\u51b2\u5668", "\n", "replay_buffer", "=", "pfrl", ".", "replay_buffers", ".", "ReplayBuffer", "(", "capacity", "=", "10", "**", "6", ")", "\n", "# \u5b9a\u4e49\u6298\u6263\u56e0\u5b50", "\n", "gamma", "=", "0.99", "\n", "# \u5b9a\u4e49\u667a\u80fd\u4f53\u7b56\u7565\u53c2\u6570", "\n", "explorer", "=", "pfrl", ".", "explorers", ".", "ConstantEpsilonGreedy", "(", "\n", "epsilon", "=", "0.3", ",", "random_action_func", "=", "self", ".", "env", ".", "action_space", ".", "sample", ")", "\n", "# \u5b9a\u4e49\u8ba1\u7b97\u8bbe\u5907(cuda:0)", "\n", "gpu", "=", "0", "\n", "# \u5b9a\u4e49\u7279\u5f81\u63d0\u53d6\u5668(\u8f6c\u6362\u6210float32\u7c7b\u578b\u4fdd\u8bc1pytorch\u53ef\u4ee5\u63a5\u6536\u7279\u5f81)", "\n", "phi", "=", "lambda", "x", ":", "x", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "\n", "# \u521d\u59cb\u5316DoubleDQN\u7c7b", "\n", "warmup", "=", "20000", "\n", "GRL_DuelingDoubleDqn", "=", "pfrl", ".", "agents", ".", "DoubleDQN", "(", "\n", "GRL", ",", "# \u6a21\u578b\u91c7\u7528\u7684\u7f51\u7edc", "\n", "optimizer", ",", "# \u6a21\u578b\u91c7\u7528\u7684\u4f18\u5316\u5668", "\n", "replay_buffer", ",", "\n", "gamma", ",", "\n", "explorer", ",", "\n", "minibatch_size", "=", "32", ",", "\n", "replay_start_size", "=", "warmup", ",", "\n", "update_interval", "=", "10", ",", "\n", "target_update_interval", "=", "1000", ",", "\n", "target_update_method", "=", "'soft'", ",", "\n", "soft_update_tau", "=", "0.01", ",", "\n", "phi", "=", "phi", ",", "\n", "gpu", "=", "gpu", ",", "\n", ")", "\n", "\n", "# \u8fdb\u884c\u6a21\u578b\u8bad\u7ec3", "\n", "n_episodes", "=", "150", "\n", "max_episode_len", "=", "2500", "\n", "save_dir", "=", "'GRL_Trained_Models/DD_DQN'", "\n", "debug_training", "=", "False", "\n", "if", "training", ":", "\n", "            ", "Training_GRLModels", "(", "GRL", ",", "GRL_DuelingDoubleDqn", ",", "self", ".", "env", ",", "n_episodes", ",", "max_episode_len", ",", "save_dir", ",", "warmup", ",", "\n", "debug_training", ")", "\n", "\n", "# \u8fdb\u884c\u6a21\u578b\u6d4b\u8bd5", "\n", "", "test_episodes", "=", "10", "\n", "load_dir", "=", "'Test_Models/DD_DQN/DD_DQN_3'", "\n", "debug_testing", "=", "False", "\n", "if", "testing", ":", "\n", "            ", "Testing_GRLModels", "(", "GRL", ",", "GRL_DuelingDoubleDqn", ",", "self", ".", "env", ",", "test_episodes", ",", "load_dir", ",", "debug_testing", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.flow.setup.build_ext.run": [[21, 26], ["subprocess.check_call"], "methods", ["None"], ["def", "run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Install traci wheels.\"\"\"", "\n", "subprocess", ".", "check_call", "(", "\n", "[", "'python3'", ",", "'-m'", ",", "'pip'", ",", "'install'", ",", "\n", "'https://akreidieh.s3.amazonaws.com/sumo/flow-0.4.0/'", "\n", "'sumotools-0.4.0-py3-none-any.whl'", "]", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.flow.setup.BinaryDistribution.has_ext_modules": [[32, 35], ["None"], "methods", ["None"], ["def", "has_ext_modules", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return True for external modules.\"\"\"", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.flow.setup._read_requirements_file": [[11, 16], ["os.path.dirname", "open", "os.path.realpath", "line.strip"], "function", ["None"], ["def", "_read_requirements_file", "(", ")", ":", "\n", "    ", "\"\"\"Return the elements in requirements.txt.\"\"\"", "\n", "req_file_path", "=", "'%s/requirements.txt'", "%", "dirname", "(", "realpath", "(", "__file__", ")", ")", "\n", "with", "open", "(", "req_file_path", ")", "as", "f", ":", "\n", "        ", "return", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "f", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.examples.simulate.parse_args": [[16, 54], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args"], "function", ["None"], ["def", "parse_args", "(", "args", ")", ":", "\n", "    ", "\"\"\"Parse training options user can specify in command line.\n\n    Returns\n    -------\n    argparse.Namespace\n        the output parser object\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Parse argument used when running a Flow simulation.\"", ",", "\n", "epilog", "=", "\"python simulate.py EXP_CONFIG --num_runs INT --no_render\"", ")", "\n", "\n", "# required input parameters", "\n", "parser", ".", "add_argument", "(", "\n", "'exp_config'", ",", "type", "=", "str", ",", "\n", "help", "=", "'Name of the experiment configuration file, as located in '", "\n", "'exp_configs/non_rl.'", ")", "\n", "\n", "# optional input parameters", "\n", "parser", ".", "add_argument", "(", "\n", "'--num_runs'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Number of simulations to run. Defaults to 1.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--no_render'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Specifies whether to run the simulation during runtime.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--aimsun'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Specifies whether to run the simulation using the simulator '", "\n", "'Aimsun. If not specified, the simulator used is SUMO.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gen_emission'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Specifies whether to generate an emission file from the '", "\n", "'simulation.'", ")", "\n", "\n", "return", "parser", ".", "parse_known_args", "(", "args", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.examples.train.parse_args": [[22, 60], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args"], "function", ["None"], ["def", "parse_args", "(", "args", ")", ":", "\n", "    ", "\"\"\"Parse training options user can specify in command line.\n\n    Returns\n    -------\n    argparse.Namespace\n        the output parser object\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "formatter_class", "=", "argparse", ".", "RawDescriptionHelpFormatter", ",", "\n", "description", "=", "\"Parse argument used when running a Flow simulation.\"", ",", "\n", "epilog", "=", "\"python train.py EXP_CONFIG\"", ")", "\n", "\n", "# required input parameters", "\n", "parser", ".", "add_argument", "(", "\n", "'exp_config'", ",", "type", "=", "str", ",", "\n", "help", "=", "'Name of the experiment configuration file, as located in '", "\n", "'exp_configs/rl/singleagent or exp_configs/rl/multiagent.'", ")", "\n", "\n", "# optional input parameters", "\n", "parser", ".", "add_argument", "(", "\n", "'--rl_trainer'", ",", "type", "=", "str", ",", "default", "=", "\"rllib\"", ",", "\n", "help", "=", "'the RL trainer to use. either rllib or Stable-Baselines'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--num_cpus'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'How many CPUs to use'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num_steps'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "\n", "help", "=", "'How many total steps to perform learning over'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--rollout_size'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'How many steps are in a training batch.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'Directory with checkpoint to restore training from.'", ")", "\n", "\n", "return", "parser", ".", "parse_known_args", "(", "args", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.examples.train.run_model_stablebaseline": [[62, 99], ["PPO2", "PPO2.learn", "DummyVecEnv", "SubprocVecEnv", "flow.utils.registry.env_constructor", "flow.utils.registry.env_constructor", "range"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.env_constructor", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.env_constructor"], ["", "def", "run_model_stablebaseline", "(", "flow_params", ",", "\n", "num_cpus", "=", "1", ",", "\n", "rollout_size", "=", "50", ",", "\n", "num_steps", "=", "50", ")", ":", "\n", "    ", "\"\"\"Run the model for num_steps if provided.\n\n    Parameters\n    ----------\n    flow_params : dict\n        flow-specific parameters\n    num_cpus : int\n        number of CPUs used during training\n    rollout_size : int\n        length of a single rollout\n    num_steps : int\n        total number of training steps\n    The total rollout length is rollout_size.\n\n    Returns\n    -------\n    stable_baselines.*\n        the trained model\n    \"\"\"", "\n", "from", "stable_baselines", ".", "common", ".", "vec_env", "import", "DummyVecEnv", ",", "SubprocVecEnv", "\n", "from", "stable_baselines", "import", "PPO2", "\n", "\n", "if", "num_cpus", "==", "1", ":", "\n", "        ", "constructor", "=", "env_constructor", "(", "params", "=", "flow_params", ",", "version", "=", "0", ")", "(", ")", "\n", "# The algorithms require a vectorized environment to run", "\n", "env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "constructor", "]", ")", "\n", "", "else", ":", "\n", "        ", "env", "=", "SubprocVecEnv", "(", "[", "env_constructor", "(", "params", "=", "flow_params", ",", "version", "=", "i", ")", "\n", "for", "i", "in", "range", "(", "num_cpus", ")", "]", ")", "\n", "\n", "", "train_model", "=", "PPO2", "(", "'MlpPolicy'", ",", "env", ",", "verbose", "=", "1", ",", "n_steps", "=", "rollout_size", ")", "\n", "train_model", ".", "learn", "(", "total_timesteps", "=", "num_steps", ")", "\n", "return", "train_model", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.examples.train.setup_exps_rllib": [[101, 178], ["get_agent_class", "copy.deepcopy", "config[].update", "json.dumps", "flow.utils.registry.make_create_env", "register_env", "print", "config[].update", "config[].update", "config[].update", "tune.function"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update"], ["", "def", "setup_exps_rllib", "(", "flow_params", ",", "\n", "n_cpus", ",", "\n", "n_rollouts", ",", "\n", "policy_graphs", "=", "None", ",", "\n", "policy_mapping_fn", "=", "None", ",", "\n", "policies_to_train", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return the relevant components of an RLlib experiment.\n\n    Parameters\n    ----------\n    flow_params : dict\n        flow-specific parameters (see flow/utils/registry.py)\n    n_cpus : int\n        number of CPUs to run the experiment over\n    n_rollouts : int\n        number of rollouts per training iteration\n    policy_graphs : dict, optional\n        TODO\n    policy_mapping_fn : function, optional\n        TODO\n    policies_to_train : list of str, optional\n        TODO\n\n    Returns\n    -------\n    str\n        name of the training algorithm\n    str\n        name of the gym environment to be trained\n    dict\n        training configuration parameters\n    \"\"\"", "\n", "from", "ray", "import", "tune", "\n", "from", "ray", ".", "tune", ".", "registry", "import", "register_env", "\n", "try", ":", "\n", "        ", "from", "ray", ".", "rllib", ".", "agents", ".", "agent", "import", "get_agent_class", "\n", "", "except", "ImportError", ":", "\n", "        ", "from", "ray", ".", "rllib", ".", "agents", ".", "registry", "import", "get_agent_class", "\n", "\n", "", "horizon", "=", "flow_params", "[", "'env'", "]", ".", "horizon", "\n", "\n", "alg_run", "=", "\"PPO\"", "\n", "\n", "agent_cls", "=", "get_agent_class", "(", "alg_run", ")", "\n", "config", "=", "deepcopy", "(", "agent_cls", ".", "_default_config", ")", "\n", "\n", "config", "[", "\"num_workers\"", "]", "=", "n_cpus", "\n", "config", "[", "\"train_batch_size\"", "]", "=", "horizon", "*", "n_rollouts", "\n", "config", "[", "\"gamma\"", "]", "=", "0.999", "# discount rate", "\n", "config", "[", "\"model\"", "]", ".", "update", "(", "{", "\"fcnet_hiddens\"", ":", "[", "32", ",", "32", ",", "32", "]", "}", ")", "\n", "config", "[", "\"use_gae\"", "]", "=", "True", "\n", "config", "[", "\"lambda\"", "]", "=", "0.97", "\n", "config", "[", "\"kl_target\"", "]", "=", "0.02", "\n", "config", "[", "\"num_sgd_iter\"", "]", "=", "10", "\n", "config", "[", "\"horizon\"", "]", "=", "horizon", "\n", "\n", "# save the flow params for replay", "\n", "flow_json", "=", "json", ".", "dumps", "(", "\n", "flow_params", ",", "cls", "=", "FlowParamsEncoder", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "config", "[", "'env_config'", "]", "[", "'flow_params'", "]", "=", "flow_json", "\n", "config", "[", "'env_config'", "]", "[", "'run'", "]", "=", "alg_run", "\n", "\n", "# multiagent configuration", "\n", "if", "policy_graphs", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"policy_graphs\"", ",", "policy_graphs", ")", "\n", "config", "[", "'multiagent'", "]", ".", "update", "(", "{", "'policies'", ":", "policy_graphs", "}", ")", "\n", "", "if", "policy_mapping_fn", "is", "not", "None", ":", "\n", "        ", "config", "[", "'multiagent'", "]", ".", "update", "(", "\n", "{", "'policy_mapping_fn'", ":", "tune", ".", "function", "(", "policy_mapping_fn", ")", "}", ")", "\n", "", "if", "policies_to_train", "is", "not", "None", ":", "\n", "        ", "config", "[", "'multiagent'", "]", ".", "update", "(", "{", "'policies_to_train'", ":", "policies_to_train", "}", ")", "\n", "\n", "", "create_env", ",", "gym_name", "=", "make_create_env", "(", "params", "=", "flow_params", ")", "\n", "\n", "# Register as rllib env", "\n", "register_env", "(", "gym_name", ",", "create_env", ")", "\n", "return", "alg_run", ",", "gym_name", ",", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.examples.train.train_rllib": [[180, 214], ["getattr", "getattr", "getattr", "train.setup_exps_rllib", "ray.init", "run_experiments"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.examples.train.setup_exps_rllib"], ["", "def", "train_rllib", "(", "submodule", ",", "flags", ")", ":", "\n", "    ", "\"\"\"Train policies using the PPO algorithm in RLlib.\"\"\"", "\n", "import", "ray", "\n", "from", "ray", ".", "tune", "import", "run_experiments", "\n", "\n", "flow_params", "=", "submodule", ".", "flow_params", "\n", "n_cpus", "=", "submodule", ".", "N_CPUS", "\n", "n_rollouts", "=", "submodule", ".", "N_ROLLOUTS", "\n", "policy_graphs", "=", "getattr", "(", "submodule", ",", "\"POLICY_GRAPHS\"", ",", "None", ")", "\n", "policy_mapping_fn", "=", "getattr", "(", "submodule", ",", "\"policy_mapping_fn\"", ",", "None", ")", "\n", "policies_to_train", "=", "getattr", "(", "submodule", ",", "\"policies_to_train\"", ",", "None", ")", "\n", "\n", "alg_run", ",", "gym_name", ",", "config", "=", "setup_exps_rllib", "(", "\n", "flow_params", ",", "n_cpus", ",", "n_rollouts", ",", "\n", "policy_graphs", ",", "policy_mapping_fn", ",", "policies_to_train", ")", "\n", "\n", "ray", ".", "init", "(", "num_cpus", "=", "n_cpus", "+", "1", ",", "object_store_memory", "=", "200", "*", "1024", "*", "1024", ")", "\n", "exp_config", "=", "{", "\n", "\"run\"", ":", "alg_run", ",", "\n", "\"env\"", ":", "gym_name", ",", "\n", "\"config\"", ":", "{", "\n", "**", "config", "\n", "}", ",", "\n", "\"checkpoint_freq\"", ":", "20", ",", "\n", "\"checkpoint_at_end\"", ":", "True", ",", "\n", "\"max_failures\"", ":", "999", ",", "\n", "\"stop\"", ":", "{", "\n", "\"training_iteration\"", ":", "flags", ".", "num_steps", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "if", "flags", ".", "checkpoint_path", "is", "not", "None", ":", "\n", "        ", "exp_config", "[", "'restore'", "]", "=", "flags", ".", "checkpoint_path", "\n", "", "run_experiments", "(", "{", "flow_params", "[", "\"exp_tag\"", "]", ":", "exp_config", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.examples.train.train_h_baselines": [[216, 288], ["parse_options", "range", "time.strftime", "os.path.join", "flow.core.util.ensure_dir", "get_hyperparameters", "get_hyperparameters.copy", "OffPolicyRLAlgorithm", "OffPolicyRLAlgorithm.learn", "open", "json.dump", "ValueError", "os.path.join"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.ensure_dir"], ["", "def", "train_h_baselines", "(", "env_name", ",", "args", ",", "multiagent", ")", ":", "\n", "    ", "\"\"\"Train policies using SAC and TD3 with h-baselines.\"\"\"", "\n", "from", "hbaselines", ".", "algorithms", "import", "OffPolicyRLAlgorithm", "\n", "from", "hbaselines", ".", "utils", ".", "train", "import", "parse_options", ",", "get_hyperparameters", "\n", "\n", "# Get the command-line arguments that are relevant here", "\n", "args", "=", "parse_options", "(", "description", "=", "\"\"", ",", "example_usage", "=", "\"\"", ",", "args", "=", "args", ")", "\n", "\n", "# the base directory that the logged data will be stored in", "\n", "base_dir", "=", "\"training_data\"", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "n_training", ")", ":", "\n", "# value of the next seed", "\n", "        ", "seed", "=", "args", ".", "seed", "+", "i", "\n", "\n", "# The time when the current experiment started.", "\n", "now", "=", "strftime", "(", "\"%Y-%m-%d-%H:%M:%S\"", ")", "\n", "\n", "# Create a save directory folder (if it doesn't exist).", "\n", "dir_name", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "'{}/{}'", ".", "format", "(", "args", ".", "env_name", ",", "now", ")", ")", "\n", "ensure_dir", "(", "dir_name", ")", "\n", "\n", "# Get the policy class.", "\n", "if", "args", ".", "alg", "==", "\"TD3\"", ":", "\n", "            ", "if", "multiagent", ":", "\n", "                ", "from", "hbaselines", ".", "multi_fcnet", ".", "td3", "import", "MultiFeedForwardPolicy", "\n", "policy", "=", "MultiFeedForwardPolicy", "\n", "", "else", ":", "\n", "                ", "from", "hbaselines", ".", "fcnet", ".", "td3", "import", "FeedForwardPolicy", "\n", "policy", "=", "FeedForwardPolicy", "\n", "", "", "elif", "args", ".", "alg", "==", "\"SAC\"", ":", "\n", "            ", "if", "multiagent", ":", "\n", "                ", "from", "hbaselines", ".", "multi_fcnet", ".", "sac", "import", "MultiFeedForwardPolicy", "\n", "policy", "=", "MultiFeedForwardPolicy", "\n", "", "else", ":", "\n", "                ", "from", "hbaselines", ".", "fcnet", ".", "sac", "import", "FeedForwardPolicy", "\n", "policy", "=", "FeedForwardPolicy", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown algorithm: {}\"", ".", "format", "(", "args", ".", "alg", ")", ")", "\n", "\n", "# Get the hyperparameters.", "\n", "", "hp", "=", "get_hyperparameters", "(", "args", ",", "policy", ")", "\n", "\n", "# Add the seed for logging purposes.", "\n", "params_with_extra", "=", "hp", ".", "copy", "(", ")", "\n", "params_with_extra", "[", "'seed'", "]", "=", "seed", "\n", "params_with_extra", "[", "'env_name'", "]", "=", "args", ".", "env_name", "\n", "params_with_extra", "[", "'policy_name'", "]", "=", "policy", ".", "__name__", "\n", "params_with_extra", "[", "'algorithm'", "]", "=", "args", ".", "alg", "\n", "params_with_extra", "[", "'date/time'", "]", "=", "now", "\n", "\n", "# Add the hyperparameters to the folder.", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dir_name", ",", "'hyperparameters.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "params_with_extra", ",", "f", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "\n", "# Create the algorithm object.", "\n", "", "alg", "=", "OffPolicyRLAlgorithm", "(", "\n", "policy", "=", "policy", ",", "\n", "env", "=", "\"flow:{}\"", ".", "format", "(", "env_name", ")", ",", "\n", "eval_env", "=", "\"flow:{}\"", ".", "format", "(", "env_name", ")", "if", "args", ".", "evaluate", "else", "None", ",", "\n", "**", "hp", "\n", ")", "\n", "\n", "# Perform training.", "\n", "alg", ".", "learn", "(", "\n", "total_steps", "=", "args", ".", "total_steps", ",", "\n", "log_dir", "=", "dir_name", ",", "\n", "log_interval", "=", "args", ".", "log_interval", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "save_interval", "=", "args", ".", "save_interval", ",", "\n", "initial_exploration_steps", "=", "args", ".", "initial_exploration_steps", ",", "\n", "seed", "=", "seed", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.examples.train.train_stable_baselines": [[291, 334], ["print", "train.run_model_stablebaseline", "print", "os.path.realpath", "flow.core.util.ensure_dir", "os.path.join", "PPO2.load.save", "print", "PPO2.load", "flow.utils.rllib.get_flow_params", "DummyVecEnv", "DummyVecEnv.reset", "range", "print", "time.strftime", "os.path.expanduser", "open", "json.dump", "flow.utils.registry.env_constructor", "PPO2.load.predict", "DummyVecEnv.step", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.examples.train.run_model_stablebaseline", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.ensure_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.get_flow_params", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.env_constructor", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step"], ["", "", "def", "train_stable_baselines", "(", "submodule", ",", "flags", ")", ":", "\n", "    ", "\"\"\"Train policies using the PPO algorithm in stable-baselines.\"\"\"", "\n", "from", "stable_baselines", ".", "common", ".", "vec_env", "import", "DummyVecEnv", "\n", "from", "stable_baselines", "import", "PPO2", "\n", "\n", "flow_params", "=", "submodule", ".", "flow_params", "\n", "# Path to the saved files", "\n", "exp_tag", "=", "flow_params", "[", "'exp_tag'", "]", "\n", "result_name", "=", "'{}/{}'", ".", "format", "(", "exp_tag", ",", "strftime", "(", "\"%Y-%m-%d-%H:%M:%S\"", ")", ")", "\n", "\n", "# Perform training.", "\n", "print", "(", "'Beginning training.'", ")", "\n", "model", "=", "run_model_stablebaseline", "(", "\n", "flow_params", ",", "flags", ".", "num_cpus", ",", "flags", ".", "rollout_size", ",", "flags", ".", "num_steps", ")", "\n", "\n", "# Save the model to a desired folder and then delete it to demonstrate", "\n", "# loading.", "\n", "print", "(", "'Saving the trained model!'", ")", "\n", "path", "=", "os", ".", "path", ".", "realpath", "(", "os", ".", "path", ".", "expanduser", "(", "'~/baseline_results'", ")", ")", "\n", "ensure_dir", "(", "path", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "result_name", ")", "\n", "model", ".", "save", "(", "save_path", ")", "\n", "\n", "# dump the flow params", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "result_name", ")", "+", "'.json'", ",", "'w'", ")", "as", "outfile", ":", "\n", "        ", "json", ".", "dump", "(", "flow_params", ",", "outfile", ",", "\n", "cls", "=", "FlowParamsEncoder", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "\n", "# Replay the result by loading the model", "\n", "", "print", "(", "'Loading the trained model and testing it out!'", ")", "\n", "model", "=", "PPO2", ".", "load", "(", "save_path", ")", "\n", "flow_params", "=", "get_flow_params", "(", "os", ".", "path", ".", "join", "(", "path", ",", "result_name", ")", "+", "'.json'", ")", "\n", "flow_params", "[", "'sim'", "]", ".", "render", "=", "True", "\n", "env", "=", "env_constructor", "(", "params", "=", "flow_params", ",", "version", "=", "0", ")", "(", ")", "\n", "# The algorithms require a vectorized environment to run", "\n", "eval_env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "env", "]", ")", "\n", "obs", "=", "eval_env", ".", "reset", "(", ")", "\n", "reward", "=", "0", "\n", "for", "_", "in", "range", "(", "flow_params", "[", "'env'", "]", ".", "horizon", ")", ":", "\n", "        ", "action", ",", "_states", "=", "model", ".", "predict", "(", "obs", ")", "\n", "obs", ",", "rewards", ",", "dones", ",", "info", "=", "eval_env", ".", "step", "(", "action", ")", "\n", "reward", "+=", "rewards", "\n", "", "print", "(", "'the final reward is {}'", ".", "format", "(", "reward", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.examples.train.main": [[336, 371], ["train.parse_args", "__import__", "__import__", "hasattr", "getattr", "hasattr", "parse_args.rl_trainer.lower", "train.train_rllib", "getattr", "ValueError", "parse_args.rl_trainer.lower", "train.train_stable_baselines", "parse_args.rl_trainer.lower", "parse_args.rl_trainer.lower", "train.train_h_baselines", "ValueError"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.examples.train.train_rllib", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.examples.train.train_stable_baselines", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.examples.train.train_h_baselines"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "\"\"\"Perform the training operations.\"\"\"", "\n", "# Parse script-level arguments (not including package arguments).", "\n", "flags", "=", "parse_args", "(", "args", ")", "\n", "\n", "# Import relevant information from the exp_config script.", "\n", "module", "=", "__import__", "(", "\n", "\"exp_configs.rl.singleagent\"", ",", "fromlist", "=", "[", "flags", ".", "exp_config", "]", ")", "\n", "module_ma", "=", "__import__", "(", "\n", "\"exp_configs.rl.multiagent\"", ",", "fromlist", "=", "[", "flags", ".", "exp_config", "]", ")", "\n", "\n", "# Import the sub-module containing the specified exp_config and determine", "\n", "# whether the environment is single agent or multi-agent.", "\n", "if", "hasattr", "(", "module", ",", "flags", ".", "exp_config", ")", ":", "\n", "        ", "submodule", "=", "getattr", "(", "module", ",", "flags", ".", "exp_config", ")", "\n", "multiagent", "=", "False", "\n", "", "elif", "hasattr", "(", "module_ma", ",", "flags", ".", "exp_config", ")", ":", "\n", "        ", "submodule", "=", "getattr", "(", "module_ma", ",", "flags", ".", "exp_config", ")", "\n", "assert", "flags", ".", "rl_trainer", ".", "lower", "(", ")", "in", "[", "\"rllib\"", ",", "\"h-baselines\"", "]", ",", "\"Currently, multiagent experiments are only supported through \"", "\"RLlib. Try running this experiment using RLlib: \"", "\"'python train.py EXP_CONFIG'\"", "\n", "multiagent", "=", "True", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unable to find experiment config.\"", ")", "\n", "\n", "# Perform the training operation.", "\n", "", "if", "flags", ".", "rl_trainer", ".", "lower", "(", ")", "==", "\"rllib\"", ":", "\n", "        ", "train_rllib", "(", "submodule", ",", "flags", ")", "\n", "", "elif", "flags", ".", "rl_trainer", ".", "lower", "(", ")", "==", "\"stable-baselines\"", ":", "\n", "        ", "train_stable_baselines", "(", "submodule", ",", "flags", ")", "\n", "", "elif", "flags", ".", "rl_trainer", ".", "lower", "(", ")", "==", "\"h-baselines\"", ":", "\n", "        ", "train_h_baselines", "(", "flags", ".", "exp_config", ",", "args", ",", "multiagent", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"rl_trainer should be either 'rllib', 'h-baselines', \"", "\n", "\"or 'stable-baselines'.\"", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.exp_scripts.bottleneck_density_sweep_capacity_diagram.run_bottleneck": [[15, 52], ["print", "examples.sumo.bottlenecks.bottleneck_example", "examples.sumo.bottlenecks.bottleneck_example.run", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["@", "ray", ".", "remote", "\n", "def", "run_bottleneck", "(", "flow_rate", ",", "num_trials", ",", "num_steps", ",", "render", "=", "None", ")", ":", "\n", "    ", "\"\"\"Run a rollout of the bottleneck environment.\n\n    Parameters\n    ----------\n    flow_rate : float\n        bottleneck inflow rate\n    num_trials : int\n        number of rollouts to perform\n    num_steps : int\n        number of simulation steps per rollout\n    render : bool\n        whether to render the environment\n\n    Returns\n    -------\n    float\n        average outflow rate across rollouts\n    float\n        average speed across rollouts\n    float\n        average rollout density outflow\n    list of float\n        per rollout outflows\n    float\n        inflow rate\n    \"\"\"", "\n", "print", "(", "'Running experiment for inflow rate: '", ",", "flow_rate", ",", "render", ")", "\n", "exp", "=", "bottleneck_example", "(", "flow_rate", ",", "num_steps", ",", "restart_instance", "=", "True", ")", "\n", "info_dict", "=", "exp", ".", "run", "(", "num_trials", ",", "num_steps", ")", "\n", "\n", "return", "info_dict", "[", "'average_outflow'", "]", ",", "np", ".", "mean", "(", "info_dict", "[", "'velocities'", "]", ")", ",", "np", ".", "mean", "(", "info_dict", "[", "'average_rollout_density_outflow'", "]", ")", ",", "info_dict", "[", "'per_rollout_outflows'", "]", ",", "flow_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.non_rl.traffic_light_grid.gen_edges": [[39, 67], ["range", "range", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["def", "gen_edges", "(", "col_num", ",", "row_num", ")", ":", "\n", "    ", "\"\"\"Generate the names of the outer edges in the grid network.\n\n    Parameters\n    ----------\n    col_num : int\n        number of columns in the grid\n    row_num : int\n        number of rows in the grid\n\n    Returns\n    -------\n    list of str\n        names of all the outer edges\n    \"\"\"", "\n", "edges", "=", "[", "]", "\n", "\n", "# build the left and then the right edges", "\n", "for", "i", "in", "range", "(", "col_num", ")", ":", "\n", "        ", "edges", "+=", "[", "'left'", "+", "str", "(", "row_num", ")", "+", "'_'", "+", "str", "(", "i", ")", "]", "\n", "edges", "+=", "[", "'right'", "+", "'0'", "+", "'_'", "+", "str", "(", "i", ")", "]", "\n", "\n", "# build the bottom and then top edges", "\n", "", "for", "i", "in", "range", "(", "row_num", ")", ":", "\n", "        ", "edges", "+=", "[", "'bot'", "+", "str", "(", "i", ")", "+", "'_'", "+", "'0'", "]", "\n", "edges", "+=", "[", "'top'", "+", "str", "(", "i", ")", "+", "'_'", "+", "str", "(", "col_num", ")", "]", "\n", "\n", "", "return", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.non_rl.traffic_light_grid.get_flow_params": [[69, 107], ["flow.core.params.InitialConfig", "flow.core.params.InFlows", "traffic_light_grid.gen_edges", "range", "flow.core.params.NetParams", "len", "flow.core.params.InFlows.add", "float"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_light_grid.Test1x1Environment.gen_edges", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["", "def", "get_flow_params", "(", "col_num", ",", "row_num", ",", "additional_net_params", ")", ":", "\n", "    ", "\"\"\"Define the network and initial params in the presence of inflows.\n\n    Parameters\n    ----------\n    col_num : int\n        number of columns in the grid\n    row_num : int\n        number of rows in the grid\n    additional_net_params : dict\n        network-specific parameters that are unique to the grid\n\n    Returns\n    -------\n    flow.core.params.InitialConfig\n        parameters specifying the initial configuration of vehicles in the\n        network\n    flow.core.params.NetParams\n        network-specific parameters used to generate the network\n    \"\"\"", "\n", "initial", "=", "InitialConfig", "(", "\n", "spacing", "=", "'custom'", ",", "lanes_distribution", "=", "float", "(", "'inf'", ")", ",", "shuffle", "=", "True", ")", "\n", "\n", "inflow", "=", "InFlows", "(", ")", "\n", "outer_edges", "=", "gen_edges", "(", "col_num", ",", "row_num", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "outer_edges", ")", ")", ":", "\n", "        ", "inflow", ".", "add", "(", "\n", "veh_type", "=", "'human'", ",", "\n", "edge", "=", "outer_edges", "[", "i", "]", ",", "\n", "probability", "=", "0.25", ",", "\n", "departLane", "=", "'free'", ",", "\n", "departSpeed", "=", "20", ")", "\n", "\n", "", "net", "=", "NetParams", "(", "\n", "inflows", "=", "inflow", ",", "\n", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "return", "initial", ",", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.non_rl.traffic_light_grid.get_non_flow_params": [[109, 137], ["flow.core.params.InitialConfig", "flow.core.params.NetParams"], "function", ["None"], ["", "def", "get_non_flow_params", "(", "enter_speed", ",", "add_net_params", ")", ":", "\n", "    ", "\"\"\"Define the network and initial params in the absence of inflows.\n\n    Note that when a vehicle leaves a network in this case, it is immediately\n    returns to the start of the row/column it was traversing, and in the same\n    direction as it was before.\n\n    Parameters\n    ----------\n    enter_speed : float\n        initial speed of vehicles as they enter the network.\n    add_net_params: dict\n        additional network-specific parameters (unique to the grid)\n\n    Returns\n    -------\n    flow.core.params.InitialConfig\n        parameters specifying the initial configuration of vehicles in the\n        network\n    flow.core.params.NetParams\n        network-specific parameters used to generate the network\n    \"\"\"", "\n", "additional_init_params", "=", "{", "'enter_speed'", ":", "enter_speed", "}", "\n", "initial", "=", "InitialConfig", "(", "\n", "spacing", "=", "'custom'", ",", "additional_params", "=", "additional_init_params", ")", "\n", "net", "=", "NetParams", "(", "additional_params", "=", "add_net_params", ")", "\n", "\n", "return", "initial", ",", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.multiagent_traffic_light_grid.gen_policy": [[142, 145], ["None"], "function", ["None"], ["def", "gen_policy", "(", ")", ":", "\n", "    ", "\"\"\"Generate a policy in RLlib.\"\"\"", "\n", "return", "PPOTFPolicy", ",", "obs_space", ",", "act_space", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.multiagent_traffic_light_grid.policy_mapping_fn": [[151, 154], ["None"], "function", ["None"], ["def", "policy_mapping_fn", "(", "_", ")", ":", "\n", "    ", "\"\"\"Map a policy in RLlib.\"\"\"", "\n", "return", "'av'", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.multiagent_merge.gen_policy": [[145, 148], ["None"], "function", ["None"], ["def", "gen_policy", "(", ")", ":", "\n", "    ", "\"\"\"Generate a policy in RLlib.\"\"\"", "\n", "return", "PPOTFPolicy", ",", "obs_space", ",", "act_space", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.multiagent_merge.policy_mapping_fn": [[154, 157], ["None"], "function", ["None"], ["def", "policy_mapping_fn", "(", "_", ")", ":", "\n", "    ", "\"\"\"Map a policy in RLlib.\"\"\"", "\n", "return", "'av'", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.multiagent_figure_eight.gen_policy": [[120, 123], ["None"], "function", ["None"], ["def", "gen_policy", "(", ")", ":", "\n", "    ", "\"\"\"Generate a policy in RLlib.\"\"\"", "\n", "return", "PPOTFPolicy", ",", "obs_space", ",", "act_space", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.multiagent_figure_eight.policy_mapping_fn": [[129, 132], ["None"], "function", ["None"], ["def", "policy_mapping_fn", "(", "_", ")", ":", "\n", "    ", "\"\"\"Map a policy in RLlib.\"\"\"", "\n", "return", "'av'", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.multiagent_highway.policy_mapping_fn": [[188, 191], ["None"], "function", ["None"], ["def", "policy_mapping_fn", "(", "_", ")", ":", "\n", "    ", "\"\"\"Map a policy in RLlib.\"\"\"", "\n", "return", "'av'", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.multiagent_i210.policy_mapping_fn": [[187, 190], ["None"], "function", ["None"], ["def", "policy_mapping_fn", "(", "_", ")", ":", "\n", "    ", "\"\"\"Map a policy in RLlib.\"\"\"", "\n", "return", "'av'", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.lord_of_the_rings.gen_policy": [[108, 111], ["None"], "function", ["None"], ["def", "gen_policy", "(", ")", ":", "\n", "    ", "\"\"\"Generate a policy in RLlib.\"\"\"", "\n", "return", "PPOTFPolicy", ",", "obs_space", ",", "act_space", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.lord_of_the_rings.policy_mapping_fn": [[117, 120], ["None"], "function", ["None"], ["def", "policy_mapping_fn", "(", "_", ")", ":", "\n", "    ", "\"\"\"Map a policy in RLlib.\"\"\"", "\n", "return", "'av'", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.multiagent_ring.gen_policy": [[116, 119], ["None"], "function", ["None"], ["def", "gen_policy", "(", ")", ":", "\n", "    ", "\"\"\"Generate a policy in RLlib.\"\"\"", "\n", "return", "PPOTFPolicy", ",", "obs_space", ",", "act_space", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.multiagent_ring.policy_mapping_fn": [[125, 128], ["None"], "function", ["None"], ["def", "policy_mapping_fn", "(", "_", ")", ":", "\n", "    ", "\"\"\"Map a policy in RLlib.\"\"\"", "\n", "return", "'av'", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.adversarial_figure_eight.gen_policy": [[116, 119], ["None"], "function", ["None"], ["def", "gen_policy", "(", ")", ":", "\n", "    ", "\"\"\"Generate a policy in RLlib.\"\"\"", "\n", "return", "PPOTFPolicy", ",", "obs_space", ",", "act_space", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.adversarial_figure_eight.policy_mapping_fn": [[125, 128], ["None"], "function", ["None"], ["def", "policy_mapping_fn", "(", "agent_id", ")", ":", "\n", "    ", "\"\"\"Map a policy in RLlib.\"\"\"", "\n", "return", "agent_id", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.base.MultiEnv.step": [[21, 131], ["range", "base.MultiEnv.get_state", "base.MultiEnv.k.vehicle.get_arrived_rl_ids", "base.MultiEnv.k.vehicle.get_ids", "base.MultiEnv.k.vehicle.choose_routes", "base.MultiEnv.apply_rl_actions", "base.MultiEnv.additional_command", "base.MultiEnv.k.simulation.simulation_step", "base.MultiEnv.k.update", "base.MultiEnv.k.simulation.check_collision", "base.MultiEnv.clip_actions", "base.MultiEnv.compute_reward", "base.MultiEnv.compute_reward", "numpy.zeros", "len", "base.MultiEnv.k.vehicle.get_controlled_ids", "base.MultiEnv.k.vehicle.apply_acceleration", "len", "base.MultiEnv.k.vehicle.get_controlled_lc_ids", "base.MultiEnv.k.vehicle.apply_lane_change", "base.MultiEnv.k.vehicle.update_vehicle_colors", "base.MultiEnv.k.vehicle.get_arrived_ids", "base.MultiEnv.keys", "base.MultiEnv.keys", "base.MultiEnv.k.vehicle.get_controlled_ids", "base.MultiEnv.k.vehicle.get_acc_controller", "base.MultiEnv.get_action", "accel.append", "base.MultiEnv.k.vehicle.get_controlled_ids", "base.MultiEnv.k.vehicle.get_controlled_lc_ids", "base.MultiEnv.k.vehicle.get_lane_changing_controller().get_action", "direction.append", "base.MultiEnv.k.vehicle.get_controlled_lc_ids", "base.MultiEnv.k.vehicle.get_routing_controller", "routing_ids.append", "base.MultiEnv.k.vehicle.get_routing_controller", "routing_actions.append", "base.MultiEnv.choose_route", "base.MultiEnv.k.vehicle.get_lane_changing_controller"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.get_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_arrived_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.choose_routes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.apply_rl_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.WaveAttenuationPOEnv.additional_command", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.simulation_step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.check_collision", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.clip_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.compute_reward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.compute_reward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_acceleration", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_lc_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_lane_change", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.update_vehicle_colors", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_arrived_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_lc_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_lc_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_routing_controller", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_routing_controller", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_routing_controller.BaseRouter.choose_route", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_changing_controller"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.base.MultiEnv.reset": [[132, 266], ["list", "base.MultiEnv.k.vehicle.reset", "base.MultiEnv.k.simulation.simulation_step", "base.MultiEnv.k.update", "range", "base.MultiEnv.render", "base.MultiEnv.get_state", "base.MultiEnv.restart_simulation", "print", "random.randint", "copy.deepcopy", "base.MultiEnv.restart_simulation", "base.MultiEnv.k.kernel_api.vehicle.getIDList", "base.MultiEnv.k.vehicle.get_ids", "base.MultiEnv.k.vehicle.update_vehicle_colors", "len", "list", "flow.utils.exceptions.FatalFlowError", "base.MultiEnv.step", "len", "base.MultiEnv.setup_initial_state", "base.MultiEnv.k.vehicle.remove", "base.MultiEnv.k.vehicle.add", "base.MultiEnv.net_params.inflows.get", "base.MultiEnv.k.vehicle.remove", "print", "base.MultiEnv.k.vehicle.remove", "base.MultiEnv.k.vehicle.add", "set", "set", "print", "base.MultiEnv.k.kernel_api.vehicle.remove", "base.MultiEnv.k.vehicle.get_ids", "traceback.format_exc", "traceback.format_exc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.simulation_step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.get_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.restart_simulation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.restart_simulation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.update_vehicle_colors", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.setup_initial_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.base.MultiEnv.clip_actions": [[267, 295], ["isinstance", "rl_actions.items", "numpy.clip"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.base.MultiEnv.apply_rl_actions": [[296, 314], ["base.MultiEnv.clip_actions", "base.MultiEnv._apply_rl_actions"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.clip_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv._apply_rl_actions"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.i210.I210MultiEnv.__init__": [[59, 62], ["flow.envs.multiagent.base.MultiEnv.__init__", "env_params.additional_params.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], ["def", "__init__", "(", "self", ",", "env_params", ",", "sim_params", ",", "network", ",", "simulator", "=", "'traci'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env_params", ",", "sim_params", ",", "network", ",", "simulator", ")", "\n", "self", ".", "lead_obs", "=", "env_params", ".", "additional_params", ".", "get", "(", "\"lead_obs\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.i210.I210MultiEnv.observation_space": [[63, 88], ["gym.spaces.Box", "gym.spaces.Box", "float", "float", "float", "float"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "# speed, speed of leader, headway", "\n", "if", "self", ".", "lead_obs", ":", "\n", "            ", "return", "Box", "(", "\n", "low", "=", "-", "float", "(", "'inf'", ")", ",", "\n", "high", "=", "float", "(", "'inf'", ")", ",", "\n", "shape", "=", "(", "3", ",", ")", ",", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "# speed, dist to ego vehicle, binary value which is 1 if the vehicle is", "\n", "# an AV", "\n", "", "else", ":", "\n", "            ", "leading_obs", "=", "3", "*", "MAX_LANES", "\n", "follow_obs", "=", "3", "*", "MAX_LANES", "\n", "\n", "# speed and lane", "\n", "self_obs", "=", "2", "\n", "\n", "return", "Box", "(", "\n", "low", "=", "-", "float", "(", "'inf'", ")", ",", "\n", "high", "=", "float", "(", "'inf'", ")", ",", "\n", "shape", "=", "(", "leading_obs", "+", "follow_obs", "+", "self_obs", ",", ")", ",", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.i210.I210MultiEnv.action_space": [[90, 98], ["gym.spaces.Box", "numpy.abs"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "return", "Box", "(", "\n", "low", "=", "-", "np", ".", "abs", "(", "self", ".", "env_params", ".", "additional_params", "[", "'max_decel'", "]", ")", ",", "\n", "high", "=", "self", ".", "env_params", ".", "additional_params", "[", "'max_accel'", "]", ",", "\n", "shape", "=", "(", "1", ",", ")", ",", "# (4,),", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.i210.I210MultiEnv._apply_rl_actions": [[99, 112], ["rl_actions.items", "i210.I210MultiEnv.k.vehicle.apply_acceleration"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_acceleration"], ["", "def", "_apply_rl_actions", "(", "self", ",", "rl_actions", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "# in the warmup steps, rl_actions is None", "\n", "if", "rl_actions", ":", "\n", "            ", "for", "rl_id", ",", "actions", "in", "rl_actions", ".", "items", "(", ")", ":", "\n", "                ", "accel", "=", "actions", "[", "0", "]", "\n", "\n", "# lane_change_softmax = np.exp(actions[1:4])", "\n", "# lane_change_softmax /= np.sum(lane_change_softmax)", "\n", "# lane_change_action = np.random.choice([-1, 0, 1],", "\n", "#                                       p=lane_change_softmax)", "\n", "\n", "self", ".", "k", ".", "vehicle", ".", "apply_acceleration", "(", "rl_id", ",", "accel", ")", "\n", "# self.k.vehicle.apply_lane_change(rl_id, lane_change_action)", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.i210.I210MultiEnv.get_state": [[114, 130], ["i210.I210MultiEnv.k.vehicle.get_rl_ids", "i210.I210MultiEnv.k.vehicle.get_speed", "i210.I210MultiEnv.k.vehicle.get_headway", "i210.I210MultiEnv.k.vehicle.get_speed", "veh_info.update", "numpy.concatenate", "i210.I210MultiEnv.k.vehicle.get_leader", "i210.I210MultiEnv.k.vehicle.get_rl_ids", "numpy.array", "i210.I210MultiEnv.state_util", "i210.I210MultiEnv.veh_statistics"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.i210.I210MultiEnv.state_util", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.i210.I210MultiEnv.veh_statistics"], ["", "", "", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "if", "self", ".", "lead_obs", ":", "\n", "            ", "veh_info", "=", "{", "}", "\n", "for", "rl_id", "in", "self", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", ":", "\n", "                ", "speed", "=", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "rl_id", ")", "\n", "headway", "=", "self", ".", "k", ".", "vehicle", ".", "get_headway", "(", "rl_id", ")", "\n", "lead_speed", "=", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "self", ".", "k", ".", "vehicle", ".", "get_leader", "(", "rl_id", ")", ")", "\n", "if", "lead_speed", "==", "-", "1001", ":", "\n", "                    ", "lead_speed", "=", "0", "\n", "", "veh_info", ".", "update", "(", "{", "rl_id", ":", "np", ".", "array", "(", "[", "speed", "/", "50.0", ",", "headway", "/", "1000.0", ",", "lead_speed", "/", "50.0", "]", ")", "}", ")", "\n", "", "", "else", ":", "\n", "            ", "veh_info", "=", "{", "rl_id", ":", "np", ".", "concatenate", "(", "(", "self", ".", "state_util", "(", "rl_id", ")", ",", "\n", "self", ".", "veh_statistics", "(", "rl_id", ")", ")", ")", "\n", "for", "rl_id", "in", "self", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", "}", "\n", "", "return", "veh_info", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.i210.I210MultiEnv.compute_reward": [[131, 170], ["i210.I210MultiEnv.k.vehicle.get_rl_ids", "i210.I210MultiEnv.k.vehicle.get_speed", "flow.core.rewards.average_velocity", "i210.I210MultiEnv.k.vehicle.get_leader", "max", "max", "min", "i210.I210MultiEnv.k.vehicle.get_speed", "i210.I210MultiEnv.k.vehicle.get_headway", "i210.I210MultiEnv.k.vehicle.get_speed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.average_velocity", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], ["", "def", "compute_reward", "(", "self", ",", "rl_actions", ",", "**", "kwargs", ")", ":", "\n", "# TODO(@evinitsky) we need something way better than this. Something that adds", "\n", "# in notions of local reward", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "# in the warmup steps", "\n", "if", "rl_actions", "is", "None", ":", "\n", "            ", "return", "{", "}", "\n", "\n", "", "rewards", "=", "{", "}", "\n", "for", "rl_id", "in", "self", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", ":", "\n", "            ", "if", "self", ".", "env_params", ".", "evaluate", ":", "\n", "# reward is speed of vehicle if we are in evaluation mode", "\n", "                ", "reward", "=", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "rl_id", ")", "\n", "", "elif", "kwargs", "[", "'fail'", "]", ":", "\n", "# reward is 0 if a collision occurred", "\n", "                ", "reward", "=", "0", "\n", "", "else", ":", "\n", "# reward high system-level velocities", "\n", "                ", "cost1", "=", "average_velocity", "(", "self", ",", "fail", "=", "kwargs", "[", "'fail'", "]", ")", "\n", "\n", "# penalize small time headways", "\n", "cost2", "=", "0", "\n", "t_min", "=", "1", "# smallest acceptable time headway", "\n", "\n", "lead_id", "=", "self", ".", "k", ".", "vehicle", ".", "get_leader", "(", "rl_id", ")", "\n", "if", "lead_id", "not", "in", "[", "\"\"", ",", "None", "]", "and", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "rl_id", ")", ">", "0", ":", "\n", "                    ", "t_headway", "=", "max", "(", "\n", "self", ".", "k", ".", "vehicle", ".", "get_headway", "(", "rl_id", ")", "/", "\n", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "rl_id", ")", ",", "0", ")", "\n", "cost2", "+=", "min", "(", "(", "t_headway", "-", "t_min", ")", "/", "t_min", ",", "0", ")", "\n", "\n", "# weights for cost1, cost2, and cost3, respectively", "\n", "", "eta1", ",", "eta2", "=", "1.00", ",", "0.10", "\n", "\n", "reward", "=", "max", "(", "eta1", "*", "cost1", "+", "eta2", "*", "cost2", ",", "0", ")", "\n", "\n", "", "rewards", "[", "rl_id", "]", "=", "reward", "\n", "", "return", "rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.i210.I210MultiEnv.additional_command": [[171, 186], ["i210.I210MultiEnv.k.vehicle.get_rl_ids", "i210.I210MultiEnv.k.vehicle.get_leader", "i210.I210MultiEnv.k.vehicle.get_follower", "i210.I210MultiEnv.k.vehicle.set_observed", "i210.I210MultiEnv.k.vehicle.set_observed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_follower", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed"], ["", "def", "additional_command", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\n\n        Define which vehicles are observed for visualization purposes.\n        \"\"\"", "\n", "# specify observed vehicles", "\n", "for", "rl_id", "in", "self", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", ":", "\n", "# leader", "\n", "            ", "lead_id", "=", "self", ".", "k", ".", "vehicle", ".", "get_leader", "(", "rl_id", ")", "\n", "if", "lead_id", ":", "\n", "                ", "self", ".", "k", ".", "vehicle", ".", "set_observed", "(", "lead_id", ")", "\n", "# follower", "\n", "", "follow_id", "=", "self", ".", "k", ".", "vehicle", ".", "get_follower", "(", "rl_id", ")", "\n", "if", "follow_id", ":", "\n", "                ", "self", ".", "k", ".", "vehicle", ".", "set_observed", "(", "follow_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.i210.I210MultiEnv.state_util": [[187, 220], ["veh.get_lane_headways().copy", "veh.get_lane_tailways().copy", "veh.get_lane_leaders_speed().copy", "veh.get_lane_followers_speed().copy", "veh.get_lane_leaders().copy", "veh.get_lane_followers().copy", "i210.I210MultiEnv.k.vehicle.get_rl_ids", "numpy.concatenate", "len", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "veh.get_lane_headways", "veh.get_lane_tailways", "veh.get_lane_leaders_speed", "veh.get_lane_followers_speed", "veh.get_lane_leaders", "veh.get_lane_followers"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_headways", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_tailways", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_leaders_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_followers_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_leaders", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_followers"], ["", "", "", "def", "state_util", "(", "self", ",", "rl_id", ")", ":", "\n", "        ", "\"\"\"Return an array of headway, tailway, leader speed, follower speed.\n\n        Also return a 1 if leader is rl 0 otherwise, a 1 if follower is rl 0 otherwise.\n        If there are fewer than MAX_LANES the extra\n        entries are filled with -1 to disambiguate from zeros.\n        \"\"\"", "\n", "veh", "=", "self", ".", "k", ".", "vehicle", "\n", "lane_headways", "=", "veh", ".", "get_lane_headways", "(", "rl_id", ")", ".", "copy", "(", ")", "\n", "lane_tailways", "=", "veh", ".", "get_lane_tailways", "(", "rl_id", ")", ".", "copy", "(", ")", "\n", "lane_leader_speed", "=", "veh", ".", "get_lane_leaders_speed", "(", "rl_id", ")", ".", "copy", "(", ")", "\n", "lane_follower_speed", "=", "veh", ".", "get_lane_followers_speed", "(", "rl_id", ")", ".", "copy", "(", ")", "\n", "leader_ids", "=", "veh", ".", "get_lane_leaders", "(", "rl_id", ")", ".", "copy", "(", ")", "\n", "follower_ids", "=", "veh", ".", "get_lane_followers", "(", "rl_id", ")", ".", "copy", "(", ")", "\n", "rl_ids", "=", "self", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", "\n", "is_leader_rl", "=", "[", "1", "if", "l_id", "in", "rl_ids", "else", "0", "for", "l_id", "in", "leader_ids", "]", "\n", "is_follow_rl", "=", "[", "1", "if", "f_id", "in", "rl_ids", "else", "0", "for", "f_id", "in", "follower_ids", "]", "\n", "diff", "=", "MAX_LANES", "-", "len", "(", "is_leader_rl", ")", "\n", "if", "diff", ">", "0", ":", "\n", "# the minus 1 disambiguates missing cars from missing lanes", "\n", "            ", "lane_headways", "+=", "diff", "*", "[", "-", "1", "]", "\n", "lane_tailways", "+=", "diff", "*", "[", "-", "1", "]", "\n", "lane_leader_speed", "+=", "diff", "*", "[", "-", "1", "]", "\n", "lane_follower_speed", "+=", "diff", "*", "[", "-", "1", "]", "\n", "is_leader_rl", "+=", "diff", "*", "[", "-", "1", "]", "\n", "is_follow_rl", "+=", "diff", "*", "[", "-", "1", "]", "\n", "", "lane_headways", "=", "np", ".", "asarray", "(", "lane_headways", ")", "/", "1000", "\n", "lane_tailways", "=", "np", ".", "asarray", "(", "lane_tailways", ")", "/", "1000", "\n", "lane_leader_speed", "=", "np", ".", "asarray", "(", "lane_leader_speed", ")", "/", "100", "\n", "lane_follower_speed", "=", "np", ".", "asarray", "(", "lane_follower_speed", ")", "/", "100", "\n", "return", "np", ".", "concatenate", "(", "(", "lane_headways", ",", "lane_tailways", ",", "lane_leader_speed", ",", "\n", "lane_follower_speed", ",", "is_leader_rl", ",", "\n", "is_follow_rl", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.i210.I210MultiEnv.veh_statistics": [[221, 226], ["numpy.array", "i210.I210MultiEnv.k.vehicle.get_speed", "i210.I210MultiEnv.k.vehicle.get_lane"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane"], ["", "def", "veh_statistics", "(", "self", ",", "rl_id", ")", ":", "\n", "        ", "\"\"\"Return speed, edge information, and x, y about the vehicle itself.\"\"\"", "\n", "speed", "=", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "rl_id", ")", "/", "100.0", "\n", "lane", "=", "(", "self", ".", "k", ".", "vehicle", ".", "get_lane", "(", "rl_id", ")", "+", "1", ")", "/", "10.0", "\n", "return", "np", ".", "array", "(", "[", "speed", ",", "lane", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.highway.MultiAgentHighwayPOEnv.__init__": [[60, 67], ["ADDITIONAL_ENV_PARAMS.keys", "flow.envs.multiagent.base.MultiEnv.__init__", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["render", "=", "True", ",", "\n", "lateral_resolution", "=", "1.0", ",", "\n", ")", ",", "\n", "\n", "# environment related parameters (see flow.core.params.EnvParams)", "\n", "env", "=", "EnvParams", "(", "\n", "horizon", "=", "1500", ",", "\n", "additional_params", "=", "ADDITIONAL_ENV_PARAMS", ".", "copy", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.highway.MultiAgentHighwayPOEnv.observation_space": [[68, 72], ["gym.spaces.box.Box", "float", "float"], "methods", ["None"], [")", ",", "\n", "\n", "# network-related parameters (see flow.core.params.NetParams and the", "\n", "# network's documentation or ADDITIONAL_NET_PARAMS component)", "\n", "net", "=", "NetParams", "(", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.highway.MultiAgentHighwayPOEnv.action_space": [[73, 81], ["gym.spaces.box.Box", "numpy.abs"], "methods", ["None"], ["inflows", "=", "inflow", ",", "\n", "additional_params", "=", "ADDITIONAL_NET_PARAMS", ".", "copy", "(", ")", ",", "\n", ")", ",", "\n", "\n", "# vehicles to be placed in the network at the start of a rollout (see", "\n", "# flow.core.params.VehicleParams)", "\n", "veh", "=", "vehicles", ",", "\n", "\n", "# parameters specifying the positioning of vehicles upon initialization/", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.highway.MultiAgentHighwayPOEnv._apply_rl_actions": [[82, 95], ["rl_actions.items", "highway.MultiAgentHighwayPOEnv.k.vehicle.apply_acceleration"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_acceleration"], ["# reset (see flow.core.params.InitialConfig)", "\n", "initial", "=", "InitialConfig", "(", "\n", "spacing", "=", "\"uniform\"", ",", "\n", "shuffle", "=", "True", ",", "\n", ")", ",", "\n", ")", "\n", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.highway.MultiAgentHighwayPOEnv.get_state": [[97, 137], ["highway.MultiAgentHighwayPOEnv.k.network.max_speed", "highway.MultiAgentHighwayPOEnv.k.network.length", "highway.MultiAgentHighwayPOEnv.k.vehicle.get_rl_ids", "highway.MultiAgentHighwayPOEnv.k.vehicle.get_speed", "highway.MultiAgentHighwayPOEnv.k.vehicle.get_leader", "highway.MultiAgentHighwayPOEnv.k.vehicle.get_follower", "numpy.array", "obs.update", "highway.MultiAgentHighwayPOEnv.k.vehicle.get_speed", "highway.MultiAgentHighwayPOEnv.k.vehicle.get_headway", "highway.MultiAgentHighwayPOEnv.k.vehicle.get_speed", "highway.MultiAgentHighwayPOEnv.k.vehicle.get_headway"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.max_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_follower", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.highway.MultiAgentHighwayPOEnv.compute_reward": [[138, 175], ["highway.MultiAgentHighwayPOEnv.k.vehicle.get_rl_ids", "highway.MultiAgentHighwayPOEnv.k.vehicle.get_speed", "flow.core.rewards.desired_velocity", "highway.MultiAgentHighwayPOEnv.k.vehicle.get_leader", "max", "max", "min", "highway.MultiAgentHighwayPOEnv.k.vehicle.get_speed", "highway.MultiAgentHighwayPOEnv.k.vehicle.get_headway", "highway.MultiAgentHighwayPOEnv.k.vehicle.get_speed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.desired_velocity", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.highway.MultiAgentHighwayPOEnv.additional_command": [[176, 191], ["highway.MultiAgentHighwayPOEnv.k.vehicle.get_rl_ids", "highway.MultiAgentHighwayPOEnv.k.vehicle.get_leader", "highway.MultiAgentHighwayPOEnv.k.vehicle.get_follower", "highway.MultiAgentHighwayPOEnv.k.vehicle.set_observed", "highway.MultiAgentHighwayPOEnv.k.vehicle.set_observed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_follower", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.traffic_light_grid.MultiTrafficLightGridPOEnv.__init__": [[44, 59], ["flow.envs.traffic_light_grid.TrafficLightGridPOEnv.__init__", "ADDITIONAL_ENV_PARAMS.keys", "env_params.additional_params.get", "env_params.additional_params.get", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], ["\n", "edges", "=", "[", "]", "\n", "\n", "# build the left and then the right edges", "\n", "for", "i", "in", "range", "(", "col_num", ")", ":", "\n", "        ", "edges", "+=", "[", "'left'", "+", "str", "(", "row_num", ")", "+", "'_'", "+", "str", "(", "i", ")", "]", "\n", "edges", "+=", "[", "'right'", "+", "'0'", "+", "'_'", "+", "str", "(", "i", ")", "]", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.traffic_light_grid.MultiTrafficLightGridPOEnv.observation_space": [[60, 77], ["gym.spaces.box.Box"], "methods", ["None"], ["\n", "# build the bottom and then top edges", "\n", "", "for", "i", "in", "range", "(", "row_num", ")", ":", "\n", "        ", "edges", "+=", "[", "'bot'", "+", "str", "(", "i", ")", "+", "'_'", "+", "'0'", "]", "\n", "edges", "+=", "[", "'top'", "+", "str", "(", "i", ")", "+", "'_'", "+", "str", "(", "col_num", ")", "]", "\n", "\n", "", "return", "edges", "\n", "\n", "\n", "", "def", "get_flow_params", "(", "col_num", ",", "row_num", ",", "additional_net_params", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.traffic_light_grid.MultiTrafficLightGridPOEnv.action_space": [[78, 89], ["gym.spaces.discrete.Discrete", "gym.spaces.box.Box"], "methods", ["None"], ["\n", "initial", "=", "InitialConfig", "(", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.traffic_light_grid.MultiTrafficLightGridPOEnv.get_state": [[90, 201], ["max", "max", "traffic_light_grid.MultiTrafficLightGridPOEnv.k.network.get_edge_list", "numpy.array", "numpy.array", "traffic_light_grid.MultiTrafficLightGridPOEnv.direction.flatten", "traffic_light_grid.MultiTrafficLightGridPOEnv.currently_yellow.flatten", "numpy.append", "numpy.append", "traffic_light_grid.MultiTrafficLightGridPOEnv.k.traffic_light.get_ids", "speeds.append", "dist_to_intersec.append", "edge_number.append", "traffic_light_grid.MultiTrafficLightGridPOEnv.k.vehicle.get_ids_by_edge", "int", "numpy.array", "obs.update", "traffic_light_grid.MultiTrafficLightGridPOEnv.k.network.speed_limit", "traffic_light_grid.MultiTrafficLightGridPOEnv.get_closest_to_intersection", "all_observed_ids.append", "local_speeds.extend", "local_dists_to_intersec.extend", "local_edge_numbers.extend", "len", "traffic_light_grid.MultiTrafficLightGridPOEnv.k.network.get_edge_list().index", "traffic_light_grid.MultiTrafficLightGridPOEnv._get_relative_node", "traffic_light_grid.MultiTrafficLightGridPOEnv._get_relative_node", "traffic_light_grid.MultiTrafficLightGridPOEnv._get_relative_node", "traffic_light_grid.MultiTrafficLightGridPOEnv._get_relative_node", "numpy.concatenate", "traffic_light_grid.MultiTrafficLightGridPOEnv.k.network.get_edge_list", "len", "local_speeds.extend", "local_dists_to_intersec.extend", "local_edge_numbers.extend", "rl_id.split", "len", "traffic_light_grid.MultiTrafficLightGridPOEnv.k.network.edge_length", "numpy.mean", "traffic_light_grid.MultiTrafficLightGridPOEnv.k.network.get_edge_list", "traffic_light_grid.MultiTrafficLightGridPOEnv.k.vehicle.get_speed", "traffic_light_grid.MultiTrafficLightGridPOEnv._convert_edge", "len", "traffic_light_grid.MultiTrafficLightGridPOEnv.k.network.edge_length", "traffic_light_grid.MultiTrafficLightGridPOEnv.k.vehicle.get_position", "traffic_light_grid.MultiTrafficLightGridPOEnv.k.vehicle.get_edge", "traffic_light_grid.MultiTrafficLightGridPOEnv.k.vehicle.get_speed", "traffic_light_grid.MultiTrafficLightGridPOEnv.k.vehicle.get_edge"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids_by_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.speed_limit", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.get_closest_to_intersection", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._get_relative_node", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._get_relative_node", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._get_relative_node", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._get_relative_node", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._convert_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge"], ["spacing", "=", "'custom'", ",", "lanes_distribution", "=", "float", "(", "'inf'", ")", ",", "shuffle", "=", "True", ")", "\n", "\n", "inflow", "=", "InFlows", "(", ")", "\n", "outer_edges", "=", "gen_edges", "(", "col_num", ",", "row_num", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "outer_edges", ")", ")", ":", "\n", "        ", "inflow", ".", "add", "(", "\n", "veh_type", "=", "'human'", ",", "\n", "edge", "=", "outer_edges", "[", "i", "]", ",", "\n", "probability", "=", "0.25", ",", "\n", "departLane", "=", "'free'", ",", "\n", "departSpeed", "=", "20", ")", "\n", "\n", "", "net", "=", "NetParams", "(", "\n", "inflows", "=", "inflow", ",", "\n", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "return", "initial", ",", "net", "\n", "\n", "\n", "", "def", "get_non_flow_params", "(", "enter_speed", ",", "add_net_params", ")", ":", "\n", "    ", "\"\"\"Define the network and initial params in the absence of inflows.\n\n    Note that when a vehicle leaves a network in this case, it is immediately\n    returns to the start of the row/column it was traversing, and in the same\n    direction as it was before.\n\n    Parameters\n    ----------\n    enter_speed : float\n        initial speed of vehicles as they enter the network.\n    add_net_params: dict\n        additional network-specific parameters (unique to the grid)\n\n    Returns\n    -------\n    flow.core.params.InitialConfig\n        parameters specifying the initial configuration of vehicles in the\n        network\n    flow.core.params.NetParams\n        network-specific parameters used to generate the network\n    \"\"\"", "\n", "additional_init_params", "=", "{", "'enter_speed'", ":", "enter_speed", "}", "\n", "initial", "=", "InitialConfig", "(", "\n", "spacing", "=", "'custom'", ",", "additional_params", "=", "additional_init_params", ")", "\n", "net", "=", "NetParams", "(", "additional_params", "=", "add_net_params", ")", "\n", "\n", "return", "initial", ",", "net", "\n", "\n", "\n", "", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"human\"", ",", "\n", "routing_controller", "=", "(", "GridRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "min_gap", "=", "2.5", ",", "\n", "decel", "=", "7.5", ",", "# avoid collisions at emergency stops", "\n", ")", ",", "\n", "num_vehicles", "=", "tot_cars", ")", "\n", "\n", "env_params", "=", "EnvParams", "(", "additional_params", "=", "ADDITIONAL_ENV_PARAMS", ")", "\n", "\n", "tl_logic", "=", "TrafficLightParams", "(", "baseline", "=", "False", ")", "\n", "phases", "=", "[", "{", "\n", "\"duration\"", ":", "\"31\"", ",", "\n", "\"minDur\"", ":", "\"8\"", ",", "\n", "\"maxDur\"", ":", "\"45\"", ",", "\n", "\"state\"", ":", "\"GrGrGrGrGrGr\"", "\n", "}", ",", "{", "\n", "\"duration\"", ":", "\"6\"", ",", "\n", "\"minDur\"", ":", "\"3\"", ",", "\n", "\"maxDur\"", ":", "\"6\"", ",", "\n", "\"state\"", ":", "\"yryryryryryr\"", "\n", "}", ",", "{", "\n", "\"duration\"", ":", "\"31\"", ",", "\n", "\"minDur\"", ":", "\"8\"", ",", "\n", "\"maxDur\"", ":", "\"45\"", ",", "\n", "\"state\"", ":", "\"rGrGrGrGrGrG\"", "\n", "}", ",", "{", "\n", "\"duration\"", ":", "\"6\"", ",", "\n", "\"minDur\"", ":", "\"3\"", ",", "\n", "\"maxDur\"", ":", "\"6\"", ",", "\n", "\"state\"", ":", "\"ryryryryryry\"", "\n", "}", "]", "\n", "tl_logic", ".", "add", "(", "\"center0\"", ",", "phases", "=", "phases", ",", "programID", "=", "1", ")", "\n", "tl_logic", ".", "add", "(", "\"center1\"", ",", "phases", "=", "phases", ",", "programID", "=", "1", ")", "\n", "tl_logic", ".", "add", "(", "\"center2\"", ",", "phases", "=", "phases", ",", "programID", "=", "1", ",", "tls_type", "=", "\"actuated\"", ")", "\n", "\n", "additional_net_params", "=", "{", "\n", "\"grid_array\"", ":", "grid_array", ",", "\n", "\"speed_limit\"", ":", "35", ",", "\n", "\"horizontal_lanes\"", ":", "1", ",", "\n", "\"vertical_lanes\"", ":", "1", "\n", "}", "\n", "\n", "if", "USE_INFLOWS", ":", "\n", "    ", "initial_config", ",", "net_params", "=", "get_flow_params", "(", "\n", "col_num", "=", "n_columns", ",", "\n", "row_num", "=", "n_rows", ",", "\n", "additional_net_params", "=", "additional_net_params", ")", "\n", "", "else", ":", "\n", "    ", "initial_config", ",", "net_params", "=", "get_non_flow_params", "(", "\n", "enter_speed", "=", "v_enter", ",", "\n", "add_net_params", "=", "additional_net_params", ")", "\n", "\n", "\n", "", "flow_params", "=", "dict", "(", "\n", "# name of the experiment", "\n", "exp_tag", "=", "'grid-intersection'", ",", "\n", "\n", "# name of the flow environment the experiment is running on", "\n", "env_name", "=", "AccelEnv", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.traffic_light_grid.MultiTrafficLightGridPOEnv._apply_rl_actions": [[202, 240], ["rl_actions.items", "int", "rl_id.split", "traffic_light_grid.MultiTrafficLightGridPOEnv.k.traffic_light.set_state", "traffic_light_grid.MultiTrafficLightGridPOEnv.k.traffic_light.set_state", "traffic_light_grid.MultiTrafficLightGridPOEnv.k.traffic_light.set_state", "traffic_light_grid.MultiTrafficLightGridPOEnv.k.traffic_light.set_state"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.set_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.set_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.set_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.set_state"], ["# name of the network class the experiment is running on", "\n", "network", "=", "TrafficLightGridNetwork", ",", "\n", "\n", "# simulator that is used by the experiment", "\n", "simulator", "=", "'traci'", ",", "\n", "\n", "# sumo-related parameters (see flow.core.params.SumoParams)", "\n", "sim", "=", "SumoParams", "(", "\n", "sim_step", "=", "0.1", ",", "\n", "render", "=", "True", ",", "\n", ")", ",", "\n", "\n", "# environment related parameters (see flow.core.params.EnvParams)", "\n", "env", "=", "EnvParams", "(", "\n", "horizon", "=", "1500", ",", "\n", "additional_params", "=", "ADDITIONAL_ENV_PARAMS", ".", "copy", "(", ")", ",", "\n", ")", ",", "\n", "\n", "# network-related parameters (see flow.core.params.NetParams and the", "\n", "# network's documentation or ADDITIONAL_NET_PARAMS component)", "\n", "net", "=", "net_params", ",", "\n", "\n", "# vehicles to be placed in the network at the start of a rollout (see", "\n", "# flow.core.params.VehicleParams)", "\n", "veh", "=", "vehicles", ",", "\n", "\n", "# parameters specifying the positioning of vehicles upon initialization/", "\n", "# reset (see flow.core.params.InitialConfig)", "\n", "initial", "=", "initial_config", ",", "\n", "\n", "# traffic lights to be introduced to specific nodes (see", "\n", "# flow.core.params.TrafficLightParams)", "\n", "tls", "=", "tl_logic", ",", "\n", ")", "\n", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.traffic_light_grid.MultiTrafficLightGridPOEnv.compute_reward": [[241, 259], ["rl_actions.keys", "flow.core.rewards.min_delay_unscaled", "flow.core.rewards.penalize_standstill", "flow.core.rewards.min_delay_unscaled"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.min_delay_unscaled", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.penalize_standstill", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.min_delay_unscaled"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.traffic_light_grid.MultiTrafficLightGridPOEnv.additional_command": [[260, 266], ["traffic_light_grid.MultiTrafficLightGridPOEnv.k.vehicle.set_observed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.merge.MultiAgentMergePOEnv.__init__": [[63, 75], ["ADDITIONAL_ENV_PARAMS.keys", "flow.envs.multiagent.base.MultiEnv.__init__", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], [")", ",", "\n", "\n", "# environment related parameters (see flow.core.params.EnvParams)", "\n", "env", "=", "EnvParams", "(", "\n", "horizon", "=", "3600", ",", "\n", "additional_params", "=", "ADDITIONAL_ENV_PARAMS", ",", "\n", "sims_per_step", "=", "5", ",", "\n", "warmup_steps", "=", "0", ",", "\n", ")", ",", "\n", "\n", "# network-related parameters (see flow.core.params.NetParams and the", "\n", "# network's documentation or ADDITIONAL_NET_PARAMS component)", "\n", "net", "=", "NetParams", "(", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.merge.MultiAgentMergePOEnv.action_space": [[76, 84], ["gym.spaces.box.Box", "abs"], "methods", ["None"], ["inflows", "=", "inflow", ",", "\n", "additional_params", "=", "{", "\n", "\"merge_length\"", ":", "100", ",", "\n", "\"pre_merge_length\"", ":", "500", ",", "\n", "\"post_merge_length\"", ":", "100", ",", "\n", "\"merge_lanes\"", ":", "1", ",", "\n", "\"highway_lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.merge.MultiAgentMergePOEnv.observation_space": [[85, 89], ["gym.spaces.box.Box"], "methods", ["None"], [")", ",", "\n", "\n", "# vehicles to be placed in the network at the start of a rollout (see", "\n", "# flow.core.params.VehicleParams)", "\n", "veh", "=", "vehicles", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.merge.MultiAgentMergePOEnv._apply_rl_actions": [[90, 97], ["enumerate", "merge.MultiAgentMergePOEnv.k.vehicle.get_rl_ids", "merge.MultiAgentMergePOEnv.k.vehicle.apply_acceleration", "rl_actions.keys"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_acceleration"], ["\n", "# parameters specifying the positioning of vehicles upon initialization/", "\n", "# reset (see flow.core.params.InitialConfig)", "\n", "initial", "=", "InitialConfig", "(", "\n", "spacing", "=", "\"uniform\"", ",", "\n", "perturbation", "=", "5.0", ",", "\n", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.merge.MultiAgentMergePOEnv.get_state": [[98, 142], ["merge.MultiAgentMergePOEnv.k.network.max_speed", "merge.MultiAgentMergePOEnv.k.network.length", "merge.MultiAgentMergePOEnv.k.vehicle.get_rl_ids", "merge.MultiAgentMergePOEnv.k.vehicle.get_speed", "merge.MultiAgentMergePOEnv.k.vehicle.get_leader", "merge.MultiAgentMergePOEnv.k.vehicle.get_follower", "numpy.array", "merge.MultiAgentMergePOEnv.leader.append", "merge.MultiAgentMergePOEnv.k.vehicle.get_speed", "merge.MultiAgentMergePOEnv.follower.append", "merge.MultiAgentMergePOEnv.k.vehicle.get_speed", "merge.MultiAgentMergePOEnv.k.vehicle.get_headway", "merge.MultiAgentMergePOEnv.k.vehicle.get_length", "merge.MultiAgentMergePOEnv.k.vehicle.get_x_by_id", "merge.MultiAgentMergePOEnv.k.vehicle.get_x_by_id"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.max_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_follower", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id"], [""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.merge.MultiAgentMergePOEnv.compute_reward": [[143, 172], ["numpy.mean", "flow.core.rewards.desired_velocity", "merge.MultiAgentMergePOEnv.k.vehicle.get_rl_ids", "max", "merge.MultiAgentMergePOEnv.k.vehicle.get_speed", "merge.MultiAgentMergePOEnv.k.vehicle.get_leader", "merge.MultiAgentMergePOEnv.k.vehicle.get_ids", "max", "min", "merge.MultiAgentMergePOEnv.k.vehicle.get_rl_ids", "merge.MultiAgentMergePOEnv.k.vehicle.get_speed", "merge.MultiAgentMergePOEnv.k.vehicle.get_headway", "merge.MultiAgentMergePOEnv.k.vehicle.get_speed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.desired_velocity", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.merge.MultiAgentMergePOEnv.additional_command": [[173, 181], ["merge.MultiAgentMergePOEnv.k.vehicle.set_observed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.multiagent.merge.MultiAgentMergePOEnv.reset": [[182, 191], ["super().reset"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.singleagent.singleagent_traffic_light_grid.gen_edges": [[20, 46], ["range", "range", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["def", "gen_edges", "(", "col_num", ",", "row_num", ")", ":", "\n", "    ", "\"\"\"Generate the names of the outer edges in the traffic light grid network.\n\n    Parameters\n    ----------\n    col_num : int\n        number of columns in the traffic light grid\n    row_num : int\n        number of rows in the traffic light grid\n\n    Returns\n    -------\n    list of str\n        names of all the outer edges\n    \"\"\"", "\n", "edges", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "col_num", ")", ":", "\n", "        ", "edges", "+=", "[", "'left'", "+", "str", "(", "row_num", ")", "+", "'_'", "+", "str", "(", "i", ")", "]", "\n", "edges", "+=", "[", "'right'", "+", "'0'", "+", "'_'", "+", "str", "(", "i", ")", "]", "\n", "\n", "# build the left and then the right edges", "\n", "", "for", "i", "in", "range", "(", "row_num", ")", ":", "\n", "        ", "edges", "+=", "[", "'bot'", "+", "str", "(", "i", ")", "+", "'_'", "+", "'0'", "]", "\n", "edges", "+=", "[", "'top'", "+", "str", "(", "i", ")", "+", "'_'", "+", "str", "(", "col_num", ")", "]", "\n", "\n", "", "return", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.singleagent.singleagent_traffic_light_grid.get_inflow_params": [[48, 86], ["flow.core.params.InitialConfig", "flow.core.params.InFlows", "singleagent_traffic_light_grid.gen_edges", "range", "flow.core.params.NetParams", "len", "flow.core.params.InFlows.add", "float"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_light_grid.Test1x1Environment.gen_edges", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["", "def", "get_inflow_params", "(", "col_num", ",", "row_num", ",", "additional_net_params", ")", ":", "\n", "    ", "\"\"\"Define the network and initial params in the presence of inflows.\n\n    Parameters\n    ----------\n    col_num : int\n        number of columns in the traffic light grid\n    row_num : int\n        number of rows in the traffic light grid\n    additional_net_params : dict\n        network-specific parameters that are unique to the traffic light grid\n\n    Returns\n    -------\n    flow.core.params.InitialConfig\n        parameters specifying the initial configuration of vehicles in the\n        network\n    flow.core.params.NetParams\n        network-specific parameters used to generate the network\n    \"\"\"", "\n", "initial", "=", "InitialConfig", "(", "\n", "spacing", "=", "'custom'", ",", "lanes_distribution", "=", "float", "(", "'inf'", ")", ",", "shuffle", "=", "True", ")", "\n", "\n", "inflow", "=", "InFlows", "(", ")", "\n", "outer_edges", "=", "gen_edges", "(", "col_num", ",", "row_num", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "outer_edges", ")", ")", ":", "\n", "        ", "inflow", ".", "add", "(", "\n", "veh_type", "=", "'idm'", ",", "\n", "edge", "=", "outer_edges", "[", "i", "]", ",", "\n", "probability", "=", "0.25", ",", "\n", "departLane", "=", "'free'", ",", "\n", "departSpeed", "=", "10", ")", "\n", "\n", "", "net", "=", "NetParams", "(", "\n", "inflows", "=", "inflow", ",", "\n", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "return", "initial", ",", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.singleagent.singleagent_traffic_light_grid.get_non_flow_params": [[88, 116], ["flow.core.params.InitialConfig", "flow.core.params.NetParams"], "function", ["None"], ["", "def", "get_non_flow_params", "(", "enter_speed", ",", "add_net_params", ")", ":", "\n", "    ", "\"\"\"Define the network and initial params in the absence of inflows.\n\n    Note that when a vehicle leaves a network in this case, it is immediately\n    returns to the start of the row/column it was traversing, and in the same\n    direction as it was before.\n\n    Parameters\n    ----------\n    enter_speed : float\n        initial speed of vehicles as they enter the network.\n    add_net_params: dict\n        additional network-specific parameters (unique to the traffic light grid)\n\n    Returns\n    -------\n    flow.core.params.InitialConfig\n        parameters specifying the initial configuration of vehicles in the\n        network\n    flow.core.params.NetParams\n        network-specific parameters used to generate the network\n    \"\"\"", "\n", "additional_init_params", "=", "{", "'enter_speed'", ":", "enter_speed", "}", "\n", "initial", "=", "InitialConfig", "(", "\n", "spacing", "=", "'custom'", ",", "additional_params", "=", "additional_init_params", ")", "\n", "net", "=", "NetParams", "(", "additional_params", "=", "add_net_params", ")", "\n", "\n", "return", "initial", ",", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.source.conf.Mock.__getattr__": [[28, 32], ["MagicMock"], "methods", ["None"], ["@", "classmethod", "\n", "def", "__getattr__", "(", "cls", ",", "name", ")", ":", "\n", "        ", "\"\"\"Return a MagicMock object.\"\"\"", "\n", "return", "MagicMock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated_attribute": [[10, 27], ["warnings.simplefilter", "warnings.warn"], "function", ["None"], ["def", "deprecated_attribute", "(", "obj", ",", "dep_from", ",", "dep_to", ")", ":", "\n", "    ", "\"\"\"Print a deprecation warning.\n\n    Parameters\n    ----------\n    obj : class\n        The class with the deprecated attribute\n    dep_from : str\n        old (deprecated) name of the attribute\n    dep_to : str\n        new name for the attribute\n    \"\"\"", "\n", "warnings", ".", "simplefilter", "(", "'always'", ",", "PendingDeprecationWarning", ")", "\n", "warnings", ".", "warn", "(", "\n", "\"The attribute {} in {} is deprecated, use {} instead.\"", ".", "format", "(", "\n", "dep_from", ",", "obj", ".", "__class__", ".", "__name__", ",", "dep_to", ")", ",", "\n", "PendingDeprecationWarning", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated": [[30, 73], ["inspect.isclass", "functools.wraps", "warnings.simplefilter", "warnings.warn", "warnings.simplefilter", "func1", "fmt1.format"], "function", ["None"], ["", "def", "deprecated", "(", "base", ",", "new_path", ")", ":", "\n", "    ", "\"\"\"Print a deprecation warning.\n\n    This is a decorator which can be used to mark functions as deprecated. It\n    will result in a warning being emitted when the function is used.\n    \"\"\"", "\n", "# if isinstance(base, string_types):", "\n", "\n", "# The @deprecated is used with a 'reason'.", "\n", "#", "\n", "# .. code-block:: python", "\n", "#", "\n", "#    @deprecated(\"please, use another function\")", "\n", "#    def old_function(x, y):", "\n", "#      pass", "\n", "\n", "def", "decorator", "(", "func1", ")", ":", "\n", "\n", "        ", "if", "inspect", ".", "isclass", "(", "func1", ")", ":", "\n", "            ", "fmt1", "=", "\"The class {base}.{name} is deprecated, use \"", "\"{new_path} instead.\"", "\n", "", "else", ":", "\n", "            ", "fmt1", "=", "\"The function {base}.{name} is deprecated, use \"", "\"{new_path} instead.\"", "\n", "\n", "", "@", "functools", ".", "wraps", "(", "func1", ")", "\n", "def", "new_func1", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "warnings", ".", "simplefilter", "(", "'always'", ",", "PendingDeprecationWarning", ")", "\n", "warnings", ".", "warn", "(", "\n", "fmt1", ".", "format", "(", "\n", "base", "=", "base", ",", "\n", "name", "=", "func1", ".", "__name__", ",", "\n", "new_path", "=", "new_path", "\n", ")", ",", "\n", "category", "=", "PendingDeprecationWarning", ",", "\n", "stacklevel", "=", "2", "\n", ")", "\n", "warnings", ".", "simplefilter", "(", "'default'", ",", "PendingDeprecationWarning", ")", "\n", "return", "func1", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "new_func1", "\n", "\n", "", "return", "decorator", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.exceptions.FatalFlowError.__init__": [[7, 9], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "msg", ")", ":", "\n", "        ", "Exception", ".", "__init__", "(", "self", ",", "msg", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env": [[13, 135], ["isinstance", "gym.envs.registry.all", "isinstance", "params.get", "params.get", "print", "print", "__import__", "getattr", "print", "flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "copy.deepcopy", "copy.deepcopy", "getattr.", "isinstance", "gym.envs.registration.register", "gym.envs.make", "dir", "env.startswith"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], ["def", "make_create_env", "(", "params", ",", "version", "=", "0", ",", "render", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create a parametrized flow environment compatible with OpenAI gym.\n\n    This environment creation method allows for the specification of several\n    key parameters when creating any flow environment, including the requested\n    environment and network classes, and the inputs needed to make these\n    classes generalizable to networks of varying sizes and shapes, and well as\n    varying forms of control (e.g. AVs, automated traffic lights, etc...).\n\n    This method can also be used to recreate the environment a policy was\n    trained on and assess it performance, or a modified form of the previous\n    environment may be used to profile the performance of the policy on other\n    types of networks.\n\n    Parameters\n    ----------\n    params : dict\n        flow-related parameters, consisting of the following keys:\n\n         - exp_tag: name of the experiment\n         - env_name: environment class of the flow environment the experiment\n           is running on. (note: must be in an importable module.)\n         - network: network class the experiment uses.\n         - simulator: simulator that is used by the experiment (e.g. aimsun)\n         - sim: simulation-related parameters (see flow.core.params.SimParams)\n         - env: environment related parameters (see flow.core.params.EnvParams)\n         - net: network-related parameters (see flow.core.params.NetParams and\n           the network's documentation or ADDITIONAL_NET_PARAMS component)\n         - veh: vehicles to be placed in the network at the start of a rollout\n           (see flow.core.params.VehicleParams)\n         - initial (optional): parameters affecting the positioning of vehicles\n           upon initialization/reset (see flow.core.params.InitialConfig)\n         - tls (optional): traffic lights to be introduced to specific nodes\n           (see flow.core.params.TrafficLightParams)\n\n    version : int, optional\n        environment version number\n    render : bool, optional\n        specifies whether to use the gui during execution. This overrides\n        the render attribute in SumoParams\n\n    Returns\n    -------\n    function\n        method that calls OpenAI gym's register method and make method\n    str\n        name of the created gym environment\n    \"\"\"", "\n", "exp_tag", "=", "params", "[", "\"exp_tag\"", "]", "\n", "\n", "if", "isinstance", "(", "params", "[", "\"env_name\"", "]", ",", "str", ")", ":", "\n", "        ", "print", "(", "\"\"\"Passing of strings for env_name will be deprecated.\n        Please pass the Env instance instead.\"\"\"", ")", "\n", "base_env_name", "=", "params", "[", "\"env_name\"", "]", "\n", "", "else", ":", "\n", "        ", "base_env_name", "=", "params", "[", "\"env_name\"", "]", ".", "__name__", "\n", "\n", "# deal with multiple environments being created under the same name", "\n", "", "all_envs", "=", "gym", ".", "envs", ".", "registry", ".", "all", "(", ")", "\n", "env_ids", "=", "[", "env_spec", ".", "id", "for", "env_spec", "in", "all_envs", "]", "\n", "while", "\"{}-v{}\"", ".", "format", "(", "base_env_name", ",", "version", ")", "in", "env_ids", ":", "\n", "        ", "version", "+=", "1", "\n", "", "env_name", "=", "\"{}-v{}\"", ".", "format", "(", "base_env_name", ",", "version", ")", "\n", "\n", "if", "isinstance", "(", "params", "[", "\"network\"", "]", ",", "str", ")", ":", "\n", "        ", "print", "(", "\"\"\"Passing of strings for network will be deprecated.\n        Please pass the Network instance instead.\"\"\"", ")", "\n", "module", "=", "__import__", "(", "\"flow.networks\"", ",", "fromlist", "=", "[", "params", "[", "\"network\"", "]", "]", ")", "\n", "network_class", "=", "getattr", "(", "module", ",", "params", "[", "\"network\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "network_class", "=", "params", "[", "\"network\"", "]", "\n", "print", "(", "network_class", ")", "\n", "\n", "", "env_params", "=", "params", "[", "'env'", "]", "\n", "net_params", "=", "params", "[", "'net'", "]", "\n", "initial_config", "=", "params", ".", "get", "(", "'initial'", ",", "InitialConfig", "(", ")", ")", "\n", "traffic_lights", "=", "params", ".", "get", "(", "\"tls\"", ",", "TrafficLightParams", "(", ")", ")", "\n", "\n", "def", "create_env", "(", "*", "_", ")", ":", "\n", "        ", "sim_params", "=", "deepcopy", "(", "params", "[", "'sim'", "]", ")", "\n", "vehicles", "=", "deepcopy", "(", "params", "[", "'veh'", "]", ")", "\n", "\n", "# \u8fd9\u90e8\u5206\u5bf9network\u7c7b\u8fdb\u884c\u4e86\u4e8c\u6b21\u5b9e\u4f8b\u5316\uff0c\u5bf9\u5df2\u5b9e\u4f8b\u5316\u7684\u7f51\u7edc\u53ef\u80fd\u4ea7\u751f\u62a5\u9519", "\n", "network", "=", "network_class", "(", "\n", "name", "=", "exp_tag", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "net_params", ",", "\n", "initial_config", "=", "initial_config", ",", "\n", "traffic_lights", "=", "traffic_lights", ",", "\n", ")", "\n", "\n", "# accept new render type if not set to None", "\n", "sim_params", ".", "render", "=", "render", "or", "sim_params", ".", "render", "\n", "\n", "# check if the environment is a single or multiagent environment, and", "\n", "# get the right address accordingly", "\n", "single_agent_envs", "=", "[", "env", "for", "env", "in", "dir", "(", "flow", ".", "envs", ")", "\n", "if", "not", "env", ".", "startswith", "(", "'__'", ")", "]", "\n", "\n", "if", "isinstance", "(", "params", "[", "\"env_name\"", "]", ",", "str", ")", ":", "\n", "            ", "if", "params", "[", "'env_name'", "]", "in", "single_agent_envs", ":", "\n", "                ", "env_loc", "=", "'flow.envs'", "\n", "", "else", ":", "\n", "                ", "env_loc", "=", "'flow.envs.multiagent'", "\n", "", "entry_point", "=", "env_loc", "+", "':{}'", ".", "format", "(", "params", "[", "\"env_name\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "entry_point", "=", "params", "[", "\"env_name\"", "]", ".", "__module__", "+", "':'", "+", "params", "[", "\"env_name\"", "]", ".", "__name__", "\n", "\n", "# register the environment with OpenAI gym", "\n", "", "register", "(", "\n", "id", "=", "env_name", ",", "\n", "entry_point", "=", "entry_point", ",", "\n", "kwargs", "=", "{", "\n", "\"env_params\"", ":", "env_params", ",", "\n", "\"sim_params\"", ":", "sim_params", ",", "\n", "\"network\"", ":", "network", ",", "\n", "\"simulator\"", ":", "params", "[", "'simulator'", "]", "\n", "}", ")", "\n", "\n", "return", "gym", ".", "envs", ".", "make", "(", "env_name", ")", "\n", "\n", "", "return", "create_env", ",", "env_name", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.env_constructor": [[137, 141], ["registry.make_create_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env"], ["", "def", "env_constructor", "(", "params", ",", "version", "=", "0", ",", "render", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return a constructor from make_create_env.\"\"\"", "\n", "create_env", ",", "env_name", "=", "make_create_env", "(", "params", ",", "version", ",", "render", ")", "\n", "return", "create_env", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.FlowParamsEncoder.default": [[29, 60], ["json.JSONEncoder.default", "type", "isinstance", "inspect.isclass", "hasattr", "copy.deepcopy", "issubclass", "issubclass"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.FlowParamsEncoder.default"], ["def", "default", "(", "self", ",", "obj", ")", ":", "\n", "        ", "\"\"\"See parent class.\n\n        Extended to support the VehicleParams object in flow/core/params.py.\n        \"\"\"", "\n", "allowed_types", "=", "[", "dict", ",", "list", ",", "tuple", ",", "str", ",", "int", ",", "float", ",", "bool", ",", "type", "(", "None", ")", "]", "\n", "\n", "if", "obj", "not", "in", "allowed_types", ":", "\n", "            ", "if", "isinstance", "(", "obj", ",", "VehicleParams", ")", ":", "\n", "                ", "res", "=", "deepcopy", "(", "obj", ".", "initial", ")", "\n", "for", "res_i", "in", "res", ":", "\n", "                    ", "res_i", "[", "\"acceleration_controller\"", "]", "=", "(", "res_i", "[", "\"acceleration_controller\"", "]", "[", "0", "]", ".", "__name__", ",", "\n", "res_i", "[", "\"acceleration_controller\"", "]", "[", "1", "]", ")", "\n", "res_i", "[", "\"lane_change_controller\"", "]", "=", "(", "res_i", "[", "\"lane_change_controller\"", "]", "[", "0", "]", ".", "__name__", ",", "\n", "res_i", "[", "\"lane_change_controller\"", "]", "[", "1", "]", ")", "\n", "if", "res_i", "[", "\"routing_controller\"", "]", "is", "not", "None", ":", "\n", "                        ", "res_i", "[", "\"routing_controller\"", "]", "=", "(", "res_i", "[", "\"routing_controller\"", "]", "[", "0", "]", ".", "__name__", ",", "\n", "res_i", "[", "\"routing_controller\"", "]", "[", "1", "]", ")", "\n", "", "", "return", "res", "\n", "", "if", "inspect", ".", "isclass", "(", "obj", ")", ":", "\n", "                ", "if", "issubclass", "(", "obj", ",", "Env", ")", "or", "issubclass", "(", "obj", ",", "Network", ")", ":", "\n", "                    ", "return", "\"{}.{}\"", ".", "format", "(", "obj", ".", "__module__", ",", "obj", ".", "__name__", ")", "\n", "", "", "if", "hasattr", "(", "obj", ",", "'__name__'", ")", ":", "\n", "                ", "return", "obj", ".", "__name__", "\n", "", "else", ":", "\n", "                ", "return", "obj", ".", "__dict__", "\n", "\n", "", "", "return", "json", ".", "JSONEncoder", ".", "default", "(", "self", ",", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.get_flow_params": [[62, 193], ["flow.core.params.VehicleParams", "flow.core.params.SumoParams", "flow_params[].copy", "flow.core.params.NetParams", "flow_params[].copy", "flow.core.params.InFlows", "flow.core.params.EnvParams", "flow_params[].copy", "flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "__import__", "getattr", "__import__", "getattr", "type", "json.loads", "json.load", "__import__", "getattr", "getattr", "flow.core.params.SumoCarFollowingParams", "flow.core.params.SumoLaneChangeParams", "flow.core.params.VehicleParams.add", "[].copy", "flow_params[].copy", "flow_params[].copy", "open", "getattr", "env_name.split", "network.split", "dir", "env_name.split", "network.split", "flow.core.params.EnvParams.startswith"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["", "", "def", "get_flow_params", "(", "config", ")", ":", "\n", "    ", "\"\"\"Return Flow experiment parameters, given an experiment result folder.\n\n    Parameters\n    ----------\n    config : dict < dict > or str\n        May be one of two things:\n\n        * If it is a dict, then it is the stored RLlib configuration dict.\n        * If it is a string, then it is the path to a flow_params json file.\n\n    Returns\n    -------\n    dict\n        flow-related parameters, consisting of the following keys:\n\n         * exp_tag: name of the experiment\n         * env_name: environment class of the flow environment the experiment\n           is running on. (note: must be in an importable module.)\n         * network: network class the experiment uses.\n         * simulator: simulator that is used by the experiment (e.g. aimsun)\n         * sim: simulation-related parameters (see flow.core.params.SimParams)\n         * env: environment related parameters (see flow.core.params.EnvParams)\n         * net: network-related parameters (see flow.core.params.NetParams and\n           the network's documentation or ADDITIONAL_NET_PARAMS component)\n         * veh: vehicles to be placed in the network at the start of a rollout\n           (see flow.core.params.VehicleParams)\n         * initial: parameters affecting the positioning of vehicles upon\n           initialization/reset (see flow.core.params.InitialConfig)\n         * tls: traffic lights to be introduced to specific nodes (see\n           flow.core.params.TrafficLightParams)\n    \"\"\"", "\n", "# collect all data from the json file", "\n", "if", "type", "(", "config", ")", "==", "dict", ":", "\n", "        ", "flow_params", "=", "json", ".", "loads", "(", "config", "[", "'env_config'", "]", "[", "'flow_params'", "]", ")", "\n", "", "else", ":", "\n", "        ", "flow_params", "=", "json", ".", "load", "(", "open", "(", "config", ",", "'r'", ")", ")", "\n", "\n", "# reinitialize the vehicles class from stored data", "\n", "", "veh", "=", "VehicleParams", "(", ")", "\n", "for", "veh_params", "in", "flow_params", "[", "\"veh\"", "]", ":", "\n", "        ", "module", "=", "__import__", "(", "\n", "\"flow.controllers\"", ",", "\n", "fromlist", "=", "[", "veh_params", "[", "'acceleration_controller'", "]", "[", "0", "]", "]", ")", "\n", "acc_class", "=", "getattr", "(", "module", ",", "veh_params", "[", "'acceleration_controller'", "]", "[", "0", "]", ")", "\n", "lc_class", "=", "getattr", "(", "module", ",", "veh_params", "[", "'lane_change_controller'", "]", "[", "0", "]", ")", "\n", "\n", "acc_controller", "=", "(", "acc_class", ",", "veh_params", "[", "'acceleration_controller'", "]", "[", "1", "]", ")", "\n", "lc_controller", "=", "(", "lc_class", ",", "veh_params", "[", "'lane_change_controller'", "]", "[", "1", "]", ")", "\n", "\n", "rt_controller", "=", "None", "\n", "if", "veh_params", "[", "'routing_controller'", "]", "is", "not", "None", ":", "\n", "            ", "rt_class", "=", "getattr", "(", "module", ",", "veh_params", "[", "'routing_controller'", "]", "[", "0", "]", ")", "\n", "rt_controller", "=", "(", "rt_class", ",", "veh_params", "[", "'routing_controller'", "]", "[", "1", "]", ")", "\n", "\n", "# TODO: make ambiguous", "\n", "", "car_following_params", "=", "SumoCarFollowingParams", "(", ")", "\n", "car_following_params", ".", "__dict__", "=", "veh_params", "[", "\"car_following_params\"", "]", "\n", "\n", "# TODO: make ambiguous", "\n", "lane_change_params", "=", "SumoLaneChangeParams", "(", ")", "\n", "lane_change_params", ".", "__dict__", "=", "veh_params", "[", "\"lane_change_params\"", "]", "\n", "\n", "del", "veh_params", "[", "\"car_following_params\"", "]", ",", "veh_params", "[", "\"lane_change_params\"", "]", ",", "veh_params", "[", "\"acceleration_controller\"", "]", ",", "veh_params", "[", "\"lane_change_controller\"", "]", ",", "veh_params", "[", "\"routing_controller\"", "]", "\n", "\n", "veh", ".", "add", "(", "\n", "acceleration_controller", "=", "acc_controller", ",", "\n", "lane_change_controller", "=", "lc_controller", ",", "\n", "routing_controller", "=", "rt_controller", ",", "\n", "car_following_params", "=", "car_following_params", ",", "\n", "lane_change_params", "=", "lane_change_params", ",", "\n", "**", "veh_params", ")", "\n", "\n", "# convert all parameters from dict to their object form", "\n", "", "sim", "=", "SumoParams", "(", ")", "# TODO: add check for simulation type", "\n", "sim", ".", "__dict__", "=", "flow_params", "[", "\"sim\"", "]", ".", "copy", "(", ")", "\n", "\n", "net", "=", "NetParams", "(", ")", "\n", "net", ".", "__dict__", "=", "flow_params", "[", "\"net\"", "]", ".", "copy", "(", ")", "\n", "net", ".", "inflows", "=", "InFlows", "(", ")", "\n", "if", "flow_params", "[", "\"net\"", "]", "[", "\"inflows\"", "]", ":", "\n", "        ", "net", ".", "inflows", ".", "__dict__", "=", "flow_params", "[", "\"net\"", "]", "[", "\"inflows\"", "]", ".", "copy", "(", ")", "\n", "\n", "", "env", "=", "EnvParams", "(", ")", "\n", "env", ".", "__dict__", "=", "flow_params", "[", "\"env\"", "]", ".", "copy", "(", ")", "\n", "\n", "initial", "=", "InitialConfig", "(", ")", "\n", "if", "\"initial\"", "in", "flow_params", ":", "\n", "        ", "initial", ".", "__dict__", "=", "flow_params", "[", "\"initial\"", "]", ".", "copy", "(", ")", "\n", "\n", "", "tls", "=", "TrafficLightParams", "(", ")", "\n", "if", "\"tls\"", "in", "flow_params", ":", "\n", "        ", "tls", ".", "__dict__", "=", "flow_params", "[", "\"tls\"", "]", ".", "copy", "(", ")", "\n", "\n", "", "env_name", "=", "flow_params", "[", "'env_name'", "]", "\n", "if", "\".\"", "not", "in", "env_name", ":", "# coming from old flow_params", "\n", "        ", "single_agent_envs", "=", "[", "env", "for", "env", "in", "dir", "(", "flow", ".", "envs", ")", "\n", "if", "not", "env", ".", "startswith", "(", "'__'", ")", "]", "\n", "if", "env_name", "in", "single_agent_envs", ":", "\n", "            ", "env_loc", "=", "'flow.envs'", "\n", "", "else", ":", "\n", "            ", "env_loc", "=", "'flow.envs.multiagent'", "\n", "", "", "else", ":", "\n", "        ", "env_loc", "=", "\".\"", ".", "join", "(", "env_name", ".", "split", "(", "\".\"", ")", "[", ":", "-", "1", "]", ")", "\n", "env_name", "=", "env_name", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", "\n", "", "env_module", "=", "__import__", "(", "env_loc", ",", "fromlist", "=", "[", "env_name", "]", ")", "\n", "env_instance", "=", "getattr", "(", "env_module", ",", "env_name", ")", "\n", "\n", "network", "=", "flow_params", "[", "'network'", "]", "\n", "if", "\".\"", "not", "in", "network", ":", "# coming from old flow_params", "\n", "        ", "net_loc", "=", "'flow.networks'", "\n", "", "else", ":", "\n", "        ", "net_loc", "=", "\".\"", ".", "join", "(", "network", ".", "split", "(", "\".\"", ")", "[", ":", "-", "1", "]", ")", "\n", "network", "=", "network", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", "\n", "", "net_module", "=", "__import__", "(", "net_loc", ",", "fromlist", "=", "[", "network", "]", ")", "\n", "net_instance", "=", "getattr", "(", "net_module", ",", "network", ")", "\n", "\n", "flow_params", "[", "'env_name'", "]", "=", "env_instance", "\n", "flow_params", "[", "'network'", "]", "=", "net_instance", "\n", "flow_params", "[", "\"sim\"", "]", "=", "sim", "\n", "flow_params", "[", "\"env\"", "]", "=", "env", "\n", "flow_params", "[", "\"initial\"", "]", "=", "initial", "\n", "flow_params", "[", "\"net\"", "]", "=", "net", "\n", "flow_params", "[", "\"veh\"", "]", "=", "veh", "\n", "flow_params", "[", "\"tls\"", "]", "=", "tls", "\n", "\n", "return", "flow_params", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.get_rllib_config": [[195, 207], ["os.path.join", "os.path.exists", "os.path.join", "os.path.exists", "ValueError", "open", "json.load"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load"], ["", "def", "get_rllib_config", "(", "path", ")", ":", "\n", "    ", "\"\"\"Return the data from the specified rllib configuration file.\"\"\"", "\n", "config_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "\"params.json\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config_path", ")", ":", "\n", "        ", "config_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "\"../params.json\"", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "config_path", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Could not find params.json in either the checkpoint dir or \"", "\n", "\"its parent directory.\"", ")", "\n", "", "with", "open", "(", "config_path", ")", "as", "f", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.get_rllib_pkl": [[209, 224], ["os.path.dirname", "os.path.join", "sys.path.append", "os.path.join", "os.path.exists", "os.path.join", "os.path.exists", "ValueError", "open", "ray.cloudpickle.cloudpickle.load"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load"], ["", "def", "get_rllib_pkl", "(", "path", ")", ":", "\n", "    ", "\"\"\"Return the data from the specified rllib configuration file.\"\"\"", "\n", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "'../../examples/'", ")", "\n", "sys", ".", "path", ".", "append", "(", "filename", ")", "\n", "config_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "\"params.pkl\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config_path", ")", ":", "\n", "        ", "config_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "\"../params.pkl\"", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "config_path", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Could not find params.pkl in either the checkpoint dir or \"", "\n", "\"its parent directory.\"", ")", "\n", "", "with", "open", "(", "config_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "config", "=", "cloudpickle", ".", "load", "(", "f", ")", "\n", "", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.copy_param": [[4, 7], ["target_link.load_state_dict", "source_link.state_dict"], "function", ["None"], ["def", "copy_param", "(", "target_link", ",", "source_link", ")", ":", "\n", "    ", "\"\"\"Copy parameters of a link to another link.\"\"\"", "\n", "target_link", ".", "load_state_dict", "(", "source_link", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.soft_copy_param": [[9, 23], ["target_link.state_dict", "source_link.state_dict", "target_link.state_dict.items", "target_value.mul_", "target_value.add_"], "function", ["None"], ["", "def", "soft_copy_param", "(", "target_link", ",", "source_link", ",", "tau", ")", ":", "\n", "    ", "\"\"\"Soft-copy parameters of a link to another link.\"\"\"", "\n", "target_dict", "=", "target_link", ".", "state_dict", "(", ")", "\n", "source_dict", "=", "source_link", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "target_value", "in", "target_dict", ".", "items", "(", ")", ":", "\n", "        ", "source_value", "=", "source_dict", "[", "k", "]", "\n", "if", "source_value", ".", "dtype", "in", "[", "torch", ".", "float32", ",", "torch", ".", "float64", ",", "torch", ".", "float16", "]", ":", "\n", "            ", "assert", "target_value", ".", "shape", "==", "source_value", ".", "shape", "\n", "target_value", ".", "mul_", "(", "1", "-", "tau", ")", "\n", "target_value", ".", "add_", "(", "tau", "*", "source_value", ")", "\n", "", "else", ":", "\n", "# Scalar type", "\n", "# Some modules such as BN has scalar value `num_batches_tracked`", "\n", "            ", "target_dict", "[", "k", "]", "=", "source_value", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.copy_grad": [[25, 35], ["zip", "target_link.parameters", "source_link.parameters", "source_param.grad.clone"], "function", ["None"], ["", "", "", "def", "copy_grad", "(", "target_link", ",", "source_link", ")", ":", "\n", "    ", "\"\"\"Copy gradients of a link to another link.\"\"\"", "\n", "for", "target_param", ",", "source_param", "in", "zip", "(", "\n", "target_link", ".", "parameters", "(", ")", ",", "source_link", ".", "parameters", "(", ")", "\n", ")", ":", "\n", "        ", "assert", "target_param", ".", "shape", "==", "source_param", ".", "shape", "\n", "if", "source_param", ".", "grad", "is", "None", ":", "\n", "            ", "target_param", ".", "grad", "=", "None", "\n", "", "else", ":", "\n", "            ", "target_param", ".", "grad", "=", "source_param", ".", "grad", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.synchronize_parameters": [[37, 42], ["copy_param.copy_param", "copy_param.soft_copy_param"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.copy_param", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.soft_copy_param"], ["", "", "", "def", "synchronize_parameters", "(", "src", ",", "dst", ",", "method", ",", "tau", "=", "None", ")", ":", "\n", "    ", "{", "\n", "\"hard\"", ":", "lambda", ":", "copy_param", "(", "dst", ",", "src", ")", ",", "\n", "\"soft\"", ":", "lambda", ":", "soft_copy_param", "(", "dst", ",", "src", ",", "tau", ")", ",", "\n", "}", "[", "method", "]", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating": [[4, 14], ["net.eval", "net.train"], "function", ["None"], ["@", "contextmanager", "\n", "def", "evaluating", "(", "net", ")", ":", "\n", "    ", "\"\"\"Temporarily switch to evaluation mode.\"\"\"", "\n", "istrain", "=", "net", ".", "training", "\n", "try", ":", "\n", "        ", "net", ".", "eval", "(", ")", "\n", "yield", "net", "\n", "", "finally", ":", "\n", "        ", "if", "istrain", ":", "\n", "            ", "net", ".", "train", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.stoppable_thread.StoppableThread.__init__": [[12, 15], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "stop_event", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "StoppableThread", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "stop_event", "=", "stop_event", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.stoppable_thread.StoppableThread.stop": [[16, 18], ["stoppable_thread.StoppableThread.stop_event.set"], "methods", ["None"], ["", "def", "stop", "(", "self", ")", ":", "\n", "        ", "self", ".", "stop_event", ".", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.stoppable_thread.StoppableThread.is_stopped": [[19, 21], ["stoppable_thread.StoppableThread.stop_event.is_set"], "methods", ["None"], ["", "def", "is_stopped", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "stop_event", ".", "is_set", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.clip_l2_grad_norm.clip_l2_grad_norm_": [[5, 39], ["isinstance", "list", "float", "numpy.linalg.norm", "list", "torch.nn.utils.clip_grad_norm_", "filter", "numpy.linalg.norm", "p.grad.detach().mul_", "p.grad.detach().cpu().numpy", "p.grad.detach", "p.grad.detach().cpu", "p.grad.detach"], "function", ["None"], ["def", "clip_l2_grad_norm_", "(", "parameters", ",", "max_norm", ")", ":", "\n", "    ", "\"\"\"Clip gradient L2 norm.\n\n    This function works in the same way as `torch.nn.utils.clip_grad_norm_`\n    with `norm_type=2`, but more efficiently on CPU as of PyTorch 1.4.0.\n\n    Args:\n        parameters (torch.Tensor or Iterable[torch.Tensor]): `torch.Tensor`(s)\n            that will have gradients normalized.\n        max_norm (float or int): Maximum norm of the gradients.\n\n    Returns:\n        float: L2 norm of the unclipped gradient.\n\n    \"\"\"", "\n", "if", "isinstance", "(", "parameters", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "parameters", "=", "[", "parameters", "]", "\n", "", "else", ":", "\n", "        ", "parameters", "=", "list", "(", "parameters", ")", "\n", "", "if", "not", "parameters", ":", "\n", "        ", "return", "0", "\n", "", "if", "parameters", "[", "0", "]", ".", "is_cuda", ":", "\n", "# On GPU, `torch.nn.utils.clip_grad_norm_` is fast enough", "\n", "        ", "return", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "parameters", ",", "max_norm", ")", "\n", "", "parameters", "=", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "grad", "is", "not", "None", ",", "parameters", ")", ")", "\n", "max_norm", "=", "float", "(", "max_norm", ")", "\n", "total_norm", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "[", "np", ".", "linalg", ".", "norm", "(", "p", ".", "grad", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "for", "p", "in", "parameters", "]", "\n", ")", "\n", "clip_coef", "=", "max_norm", "/", "(", "total_norm", "+", "1e-6", ")", "\n", "if", "clip_coef", "<", "1", ":", "\n", "        ", "for", "p", "in", "parameters", ":", "\n", "            ", "p", ".", "grad", ".", "detach", "(", ")", ".", "mul_", "(", "clip_coef", ")", "\n", "", "", "return", "total_norm", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.is_recurrent": [[8, 27], ["isinstance"], "function", ["None"], ["def", "is_recurrent", "(", "layer", ")", ":", "\n", "    ", "\"\"\"Return True iff a given layer is recurrent and supported by PFRL.\n\n    Args:\n        layer (callable): Any callable object.\n\n    Returns:\n        bool: True iff a given layer is recurrent and supported by PFRL.\n    \"\"\"", "\n", "# Import here to avoid circular import", "\n", "from", "pfrl", ".", "nn", "import", "Recurrent", "\n", "\n", "return", "isinstance", "(", "\n", "layer", ",", "\n", "(", "\n", "nn", ".", "LSTM", ",", "\n", "nn", ".", "RNN", ",", "\n", "nn", ".", "GRU", ",", "\n", "Recurrent", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.mask_recurrent_state_at": [[31, 54], ["isinstance", "torch.ones_like", "isinstance", "tuple", "ValueError", "recurrent.mask_recurrent_state_at"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.mask_recurrent_state_at"], ["", "def", "mask_recurrent_state_at", "(", "recurrent_state", ",", "indices", ")", ":", "\n", "    ", "\"\"\"Return a recurrent state masked at given indices.\n\n    This function can be used to initialize a recurrent state only for a\n    certain sequence, not all the sequences.\n\n    Args:\n        recurrent_state (object): Batched recurrent state.\n        indices (int or array-like of ints): Which recurrent state to mask.\n\n    Returns:\n        object: New batched recurrent state.\n    \"\"\"", "\n", "if", "recurrent_state", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "elif", "isinstance", "(", "recurrent_state", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "mask", "=", "torch", ".", "ones_like", "(", "recurrent_state", ")", "\n", "mask", "[", ":", ",", "indices", "]", "=", "0", "\n", "return", "recurrent_state", "*", "mask", "\n", "", "elif", "isinstance", "(", "recurrent_state", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "mask_recurrent_state_at", "(", "s", ",", "indices", ")", "for", "s", "in", "recurrent_state", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid recurrent state: {}\"", ".", "format", "(", "recurrent_state", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.get_recurrent_state_at": [[56, 80], ["isinstance", "isinstance", "recurrent_state.detach.detach", "tuple", "ValueError", "recurrent.get_recurrent_state_at"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.get_recurrent_state_at"], ["", "", "def", "get_recurrent_state_at", "(", "recurrent_state", ",", "indices", ",", "detach", ")", ":", "\n", "    ", "\"\"\"Get a recurrent state at given indices.\n\n    This function can be used to save a recurrent state so that you can\n    reuse it when you replay past sequences.\n\n    Args:\n        indices (int or array-like of ints): Which recurrent state to get.\n\n    Returns:\n        object: Recurrent state of given indices.\n    \"\"\"", "\n", "if", "recurrent_state", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "elif", "isinstance", "(", "recurrent_state", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "if", "detach", ":", "\n", "            ", "recurrent_state", "=", "recurrent_state", ".", "detach", "(", ")", "\n", "", "return", "recurrent_state", "[", ":", ",", "indices", "]", "\n", "", "elif", "isinstance", "(", "recurrent_state", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "\n", "get_recurrent_state_at", "(", "s", ",", "indices", ",", "detach", ")", "for", "s", "in", "recurrent_state", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid recurrent state: {}\"", ".", "format", "(", "recurrent_state", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.concatenate_recurrent_states": [[82, 119], ["all", "next", "isinstance", "torch.stack", "isinstance", "numpy.stack", "isinstance", "torch.zeros_like", "tuple", "ValueError", "numpy.zeros_like", "recurrent.concatenate_recurrent_states", "range", "len"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.concatenate_recurrent_states"], ["", "", "def", "concatenate_recurrent_states", "(", "split_recurrent_states", ")", ":", "\n", "    ", "\"\"\"Concatenate recurrent states into a batch.\n\n    This function can be used to make a batched recurrent state from separate\n    recurrent states obtained via the `get_recurrent_state_at` function.\n\n    Args:\n        split_recurrent_states (Sequence): Recurrent states to concatenate.\n\n    Returns:\n        object: Batched recurrent_state.\n    \"\"\"", "\n", "if", "all", "(", "s", "is", "None", "for", "s", "in", "split_recurrent_states", ")", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "        ", "non_none_s", "=", "next", "(", "s", "for", "s", "in", "split_recurrent_states", "if", "s", "is", "not", "None", ")", "\n", "if", "isinstance", "(", "non_none_s", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "new_ss", "=", "[", "\n", "s", "if", "s", "is", "not", "None", "else", "torch", ".", "zeros_like", "(", "non_none_s", ")", "\n", "for", "s", "in", "split_recurrent_states", "\n", "]", "\n", "return", "torch", ".", "stack", "(", "new_ss", ",", "dim", "=", "1", ")", "\n", "", "elif", "isinstance", "(", "non_none_s", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "new_ss", "=", "[", "\n", "s", "if", "s", "is", "not", "None", "else", "np", ".", "zeros_like", "(", "non_none_s", ")", "\n", "for", "s", "in", "split_recurrent_states", "\n", "]", "\n", "return", "np", ".", "stack", "(", "new_ss", ",", "axis", "=", "1", ")", "\n", "", "elif", "isinstance", "(", "non_none_s", ",", "tuple", ")", ":", "\n", "            ", "return", "tuple", "(", "\n", "concatenate_recurrent_states", "(", "\n", "[", "s", "[", "i", "]", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "split_recurrent_states", "]", "\n", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "non_none_s", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid recurrent state: {}\"", ".", "format", "(", "non_none_s", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_one_step_batch_as_sequences": [[121, 126], ["isinstance", "tuple", "torch.nn.utils.rnn.pack_sequence", "recurrent.pack_one_step_batch_as_sequences"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_one_step_batch_as_sequences"], ["", "", "", "def", "pack_one_step_batch_as_sequences", "(", "xs", ")", ":", "\n", "    ", "if", "isinstance", "(", "xs", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "pack_one_step_batch_as_sequences", "(", "x", ")", "for", "x", "in", "xs", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "utils", ".", "rnn", ".", "pack_sequence", "(", "xs", "[", ":", ",", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.unpack_sequences_as_one_step_batch": [[128, 135], ["isinstance", "isinstance", "tuple", "recurrent.unpack_sequences_as_one_step_batch"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.unpack_sequences_as_one_step_batch"], ["", "", "def", "unpack_sequences_as_one_step_batch", "(", "pack", ")", ":", "\n", "    ", "if", "isinstance", "(", "pack", ",", "nn", ".", "utils", ".", "rnn", ".", "PackedSequence", ")", ":", "\n", "        ", "return", "pack", ".", "data", "\n", "", "elif", "isinstance", "(", "pack", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "unpack_sequences_as_one_step_batch", "(", "x", ")", "for", "x", "in", "pack", ")", "\n", "", "else", ":", "\n", "        ", "return", "pack", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward": [[137, 152], ["recurrent.pack_one_step_batch_as_sequences", "rnn", "recurrent.unpack_sequences_as_one_step_batch"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_one_step_batch_as_sequences", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.unpack_sequences_as_one_step_batch"], ["", "", "def", "one_step_forward", "(", "rnn", ",", "batch_input", ",", "recurrent_state", ")", ":", "\n", "    ", "\"\"\"One-step batch forward computation of a recurrent module.\n\n    Args:\n        rnn (torch.nn.Module): Recurrent module.\n        batch_input (BatchData): One-step batched input.\n        recurrent_state (object): Batched recurrent state.\n\n    Returns:\n        object: One-step batched output.\n        object: New batched recurrent state.\n    \"\"\"", "\n", "pack", "=", "pack_one_step_batch_as_sequences", "(", "batch_input", ")", "\n", "y", ",", "recurrent_state", "=", "rnn", "(", "pack", ",", "recurrent_state", ")", "\n", "return", "unpack_sequences_as_one_step_batch", "(", "y", ")", ",", "recurrent_state", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward": [[154, 169], ["recurrent.pack_sequences_recursive", "rnn", "recurrent.unwrap_packed_sequences_recursive"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_sequences_recursive", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.unwrap_packed_sequences_recursive"], ["", "def", "pack_and_forward", "(", "rnn", ",", "sequences", ",", "recurrent_state", ")", ":", "\n", "    ", "\"\"\"Pack sequences, multi-step forward, and then unwrap `PackedSequence`.\n\n    Args:\n        rnn (torch.nn.Module): Recurrent module.\n        sequences (object): Sequences of input data.\n        recurrent_state (object): Batched recurrent state.\n\n    Returns:\n        object: Sequence of output data, packed with time axis first.\n        object: New batched recurrent state.\n    \"\"\"", "\n", "pack", "=", "pack_sequences_recursive", "(", "sequences", ")", "\n", "y", ",", "recurrent_state", "=", "rnn", "(", "pack", ",", "recurrent_state", ")", "\n", "return", "unwrap_packed_sequences_recursive", "(", "y", ")", ",", "recurrent_state", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.flatten_sequences_time_first": [[171, 187], ["itertools.zip_longest", "ret.extend"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend"], ["", "def", "flatten_sequences_time_first", "(", "sequences", ")", ":", "\n", "    ", "\"\"\"Flatten sequences with time axis first.\n\n    The resulting order is the same as how\n    `torch.nn.utils.rnn.pack_sequence` will pack sequences into a tensor.\n\n    Args:\n        sequences: Sequences with batch axis first.\n\n    Returns:\n        list: Flattened sequences with time axis first.\n    \"\"\"", "\n", "ret", "=", "[", "]", "\n", "for", "batch", "in", "itertools", ".", "zip_longest", "(", "*", "sequences", ")", ":", "\n", "        ", "ret", ".", "extend", "(", "[", "x", "for", "x", "in", "batch", "if", "x", "is", "not", "None", "]", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.wrap_packed_sequences_recursive": [[189, 212], ["isinstance", "isinstance", "torch.nn.utils.rnn.PackedSequence", "tuple", "recurrent.wrap_packed_sequences_recursive"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.wrap_packed_sequences_recursive"], ["", "def", "wrap_packed_sequences_recursive", "(", "unwrapped", ",", "batch_sizes", ",", "sorted_indices", ")", ":", "\n", "    ", "\"\"\"Wrap packed tensors by `PackedSequence`.\n\n    Args:\n        unwrapped (object): Packed but unwrapped tensor(s).\n        batch_sizes (Tensor): See `PackedSequence.batch_sizes`.\n        sorted_indices (Tensor): See `PackedSequence.sorted_indices`.\n\n    Returns:\n        object: Packed sequences. If `unwrapped` is a tensor, then the returned\n            value is a `PackedSequence`. If `unwrapped` is a tuple of tensors,\n            then the returned value is a tuple of `PackedSequence`s.\n    \"\"\"", "\n", "if", "isinstance", "(", "unwrapped", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "PackedSequence", "(", "\n", "unwrapped", ",", "batch_sizes", "=", "batch_sizes", ",", "sorted_indices", "=", "sorted_indices", "\n", ")", "\n", "", "if", "isinstance", "(", "unwrapped", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "\n", "wrap_packed_sequences_recursive", "(", "x", ",", "batch_sizes", ",", "sorted_indices", ")", "\n", "for", "x", "in", "unwrapped", "\n", ")", "\n", "", "return", "unwrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.unwrap_packed_sequences_recursive": [[214, 241], ["isinstance", "isinstance", "tuple", "recurrent.unwrap_packed_sequences_recursive"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.unwrap_packed_sequences_recursive"], ["", "def", "unwrap_packed_sequences_recursive", "(", "packed", ")", ":", "\n", "    ", "\"\"\"Unwrap `PackedSequence` class of packed sequences recursively.\n\n    This function extract `torch.Tensor` that\n    `torch.nn.utils.rnn.PackedSequence` holds internally. Sequences in the\n    internal tensor is ordered with time axis first.\n\n    Unlike `torch.nn.pad_packed_sequence`, this function just returns the\n    underlying tensor as it is without padding.\n\n    To wrap the data by `PackedSequence` again, use\n    `wrap_packed_sequences_recursive`.\n\n    Args:\n        packed (object): Packed sequences.\n\n    Returns:\n        object: Unwrapped packed sequences. If `packed` is a `PackedSequence`,\n            then the returned value is `PackedSequence.data`, the underlying\n            tensor. If `Packed` is a tuple of `PackedSequence`, then the\n            returned value is a tuple of the underlying tensors.\n    \"\"\"", "\n", "if", "isinstance", "(", "packed", ",", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "PackedSequence", ")", ":", "\n", "        ", "return", "packed", ".", "data", "\n", "", "if", "isinstance", "(", "packed", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "unwrap_packed_sequences_recursive", "(", "x", ")", "for", "x", "in", "packed", ")", "\n", "", "return", "packed", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_sequences_recursive": [[243, 272], ["isinstance", "isinstance", "torch.nn.utils.rnn.pack_sequence", "tuple", "recurrent.pack_sequences_recursive", "range", "len"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_sequences_recursive"], ["", "def", "pack_sequences_recursive", "(", "sequences", ")", ":", "\n", "    ", "\"\"\"Pack sequences into PackedSequence recursively.\n\n    This function works similarly to `torch.nn.utils.rnn.pack_sequence` except\n    that it works recursively for tuples.\n\n    When each given sequence is an N-tuple of `torch.Tensor`s, the function\n    returns an N-tuple of `torch.nn.utils.rnn.PackedSequence`, packing i-th\n    tensors separately for i=1,...,N.\n\n    Args:\n        sequences (object): Batch of sequences to pack.\n\n    Returns:\n        object: Packed sequences. If `sequences` is a list of tensors, then the\n            returned value is a `PackedSequence`. If `sequences` is a list of\n            tuples of tensors, then the returned value is a tuple of\n            `PackedSequence`.\n    \"\"\"", "\n", "assert", "sequences", "\n", "first_seq", "=", "sequences", "[", "0", "]", "\n", "if", "isinstance", "(", "first_seq", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "nn", ".", "utils", ".", "rnn", ".", "pack_sequence", "(", "sequences", ")", "\n", "", "if", "isinstance", "(", "first_seq", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "\n", "pack_sequences_recursive", "(", "[", "seq", "[", "i", "]", "for", "seq", "in", "sequences", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "first_seq", ")", ")", "\n", ")", "\n", "", "return", "sequences", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.get_packed_sequence_info": [[274, 294], ["isinstance", "isinstance", "recurrent.get_packed_sequence_info"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.get_packed_sequence_info"], ["", "def", "get_packed_sequence_info", "(", "packed", ")", ":", "\n", "    ", "\"\"\"Get `batch_sizes` and `sorted_indices` of `PackedSequence`.\n\n    Args:\n        packed (object): Packed sequences. If it contains multiple\n            `PackedSequence`s, then only one of them are sampled assuming that\n            all of them have same `batch_sizes` and `sorted_indices`.\n\n    Returns:\n        Tensor: `PackedSequence.batch_sizes`.\n        Tensor: `PackedSequence.sorted_indices`.\n    \"\"\"", "\n", "if", "isinstance", "(", "packed", ",", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "PackedSequence", ")", ":", "\n", "        ", "return", "packed", ".", "batch_sizes", ",", "packed", ".", "sorted_indices", "\n", "", "if", "isinstance", "(", "packed", ",", "tuple", ")", ":", "\n", "        ", "for", "y", "in", "packed", ":", "\n", "            ", "ret", "=", "get_packed_sequence_info", "(", "y", ")", "\n", "if", "ret", "is", "not", "None", ":", "\n", "                ", "return", "ret", "\n", "", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.recurrent_state_as_numpy": [[296, 313], ["isinstance", "recurrent_state.detach().cpu().numpy", "isinstance", "tuple", "ValueError", "recurrent_state.detach().cpu", "recurrent.recurrent_state_as_numpy", "recurrent_state.detach"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.recurrent_state_as_numpy"], ["", "def", "recurrent_state_as_numpy", "(", "recurrent_state", ")", ":", "\n", "    ", "\"\"\"Convert a recurrent state in torch.Tensor to numpy.ndarray.\n\n    Args:\n        recurrent_state (object): Recurrent state in torch.Tensor.\n\n    Returns:\n        object: Recurrent state in numpy.ndarray.\n    \"\"\"", "\n", "if", "recurrent_state", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "elif", "isinstance", "(", "recurrent_state", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "recurrent_state", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "isinstance", "(", "recurrent_state", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "recurrent_state_as_numpy", "(", "s", ")", "for", "s", "in", "recurrent_state", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid recurrent state: {}\"", ".", "format", "(", "recurrent_state", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.recurrent_state_from_numpy": [[315, 333], ["isinstance", "torch.from_numpy().to", "isinstance", "tuple", "ValueError", "torch.from_numpy", "recurrent.recurrent_state_from_numpy"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.recurrent_state_from_numpy"], ["", "", "def", "recurrent_state_from_numpy", "(", "recurrent_state", ",", "device", ")", ":", "\n", "    ", "\"\"\"Convert a recurrent state in numpy.ndarray to torch.Tensor.\n\n    Args:\n        recurrent_state (object): Recurrent state in numpy.ndarray.\n        device (torch.Device): Device the recurrent state is moved to.\n\n    Returns:\n        object: Recurrent state in torch.Tensor of a given device.\n    \"\"\"", "\n", "if", "recurrent_state", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "elif", "isinstance", "(", "recurrent_state", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "recurrent_state", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "isinstance", "(", "recurrent_state", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "recurrent_state_from_numpy", "(", "s", ",", "device", ")", "for", "s", "in", "recurrent_state", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid recurrent state: {}\"", ".", "format", "(", "recurrent_state", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.detach_recurrent_state": [[335, 352], ["isinstance", "recurrent_state.detach", "isinstance", "tuple", "ValueError", "recurrent.detach_recurrent_state"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.detach_recurrent_state"], ["", "", "def", "detach_recurrent_state", "(", "recurrent_state", ")", ":", "\n", "    ", "\"\"\"Detach recurrent state.\n\n    Args:\n        recurrent_state (object): Recurrent state in torch.Tensor.\n\n    Returns:\n        object: Detached recurrent state.\n    \"\"\"", "\n", "if", "recurrent_state", "is", "None", ":", "\n", "        ", "return", "\n", "", "elif", "isinstance", "(", "recurrent_state", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "recurrent_state", ".", "detach", "(", ")", "\n", "", "elif", "isinstance", "(", "recurrent_state", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "detach_recurrent_state", "(", "s", ")", "for", "s", "in", "recurrent_state", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid recurrent state: {}\"", ".", "format", "(", "recurrent_state", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.async_.run_async": [[12, 43], ["range", "enumerate", "processes.append", "p.start", "p.join", "torch.Process", "warnings.warn", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stress_tests.stress_test_start.start"], ["", "def", "run_async", "(", "n_process", ",", "run_func", ")", ":", "\n", "    ", "\"\"\"Run experiments asynchronously.\n\n    Args:\n      n_process (int): number of processes\n      run_func: function that will be run in parallel\n    \"\"\"", "\n", "\n", "processes", "=", "[", "]", "\n", "\n", "for", "process_idx", "in", "range", "(", "n_process", ")", ":", "\n", "        ", "processes", ".", "append", "(", "mp", ".", "Process", "(", "target", "=", "run_func", ",", "args", "=", "(", "process_idx", ",", ")", ")", ")", "\n", "\n", "", "for", "p", "in", "processes", ":", "\n", "        ", "p", ".", "start", "(", ")", "\n", "\n", "", "for", "process_idx", ",", "p", "in", "enumerate", "(", "processes", ")", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "if", "p", ".", "exitcode", ">", "0", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"Process #{} (pid={}) exited with nonzero status {}\"", ".", "format", "(", "\n", "process_idx", ",", "p", ".", "pid", ",", "p", ".", "exitcode", "\n", ")", ",", "\n", "category", "=", "AbnormalExitWarning", ",", "\n", ")", "\n", "", "elif", "p", ".", "exitcode", "<", "0", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"Process #{} (pid={}) was terminated by signal {}\"", ".", "format", "(", "\n", "process_idx", ",", "p", ".", "pid", ",", "-", "p", ".", "exitcode", "\n", ")", ",", "\n", "category", "=", "AbnormalExitWarning", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models._get_model_directory": [[37, 59], ["os.path.join", "os.makedirs", "os.path.isdir"], "function", ["None"], ["def", "_get_model_directory", "(", "model_name", ",", "create_directory", "=", "True", ")", ":", "\n", "    ", "\"\"\"Gets the path to the directory of given model.\n\n    The generated path is just a concatenation of the global root directory\n    and the model name. This function forked from Chainer, an MIT-licensed project,\n    https://github.com/chainer/chainer/blob/v7.4.0/chainer/dataset/download.py#L43\n    Args:\n        model_name (str): Name of the model.\n        create_directory (bool): If True (default), this function also creates\n            the directory at the first time. If the directory already exists,\n            then this option is ignored.\n    Returns:\n        str: Path to the dataset directory.\n    \"\"\"", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "_models_root", ",", "model_name", ")", "\n", "if", "create_directory", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "                ", "raise", "\n", "", "", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models._reporthook": [[61, 87], ["int", "sys.stdout.write", "sys.stdout.flush", "time.time", "print", "time.time", "float"], "function", ["None"], ["", "def", "_reporthook", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "    ", "global", "start_time", "\n", "if", "count", "==", "0", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"  %   Total    Recv       Speed  Time left\"", ")", "\n", "return", "\n", "", "duration", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "progress_size", "=", "count", "*", "block_size", "\n", "try", ":", "\n", "        ", "speed", "=", "progress_size", "/", "duration", "\n", "", "except", "ZeroDivisionError", ":", "\n", "        ", "speed", "=", "float", "(", "\"inf\"", ")", "\n", "", "percent", "=", "progress_size", "/", "total_size", "*", "100", "\n", "eta", "=", "int", "(", "(", "total_size", "-", "progress_size", ")", "/", "speed", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\n", "\"\\r{:3.0f} {:4.0f}MiB {:4.0f}MiB {:6.0f}KiB/s {:4d}:{:02d}:{:02d}\"", ".", "format", "(", "\n", "percent", ",", "\n", "total_size", "/", "(", "1", "<<", "20", ")", ",", "\n", "progress_size", "/", "(", "1", "<<", "20", ")", ",", "\n", "speed", "/", "(", "1", "<<", "10", ")", ",", "\n", "eta", "//", "60", "//", "60", ",", "\n", "(", "eta", "//", "60", ")", "%", "60", ",", "\n", "eta", "%", "60", ",", "\n", ")", "\n", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models.cached_download": [[89, 128], ["os.path.join", "os.path.join", "hashlib.md5().hexdigest", "os.path.join", "tempfile.mkdtemp", "os.makedirs", "filelock.FileLock", "os.path.exists", "os.path.join", "print", "print", "print", "urllib.request.urlretrieve", "shutil.rmtree", "hashlib.md5", "filelock.FileLock", "shutil.move", "os.path.exists", "url.encode"], "function", ["None"], ["", "def", "cached_download", "(", "url", ")", ":", "\n", "    ", "\"\"\"Downloads a file and caches it.\n\n    It downloads a file from the URL if there is no corresponding cache.\n    If there is already a cache for the given URL, it just returns the\n    path to the cache without downloading the same file.\n    This function forked from Chainer, an MIT-licensed project,\n    https://github.com/chainer/chainer/blob/v7.4.0/chainer/dataset/download.py#L70\n    Args:\n        url (string): URL to download from.\n    Returns:\n        string: Path to the downloaded file.\n    \"\"\"", "\n", "cache_root", "=", "os", ".", "path", ".", "join", "(", "_models_root", ",", "\"_dl_cache\"", ")", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "cache_root", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_root", ")", ":", "\n", "            ", "raise", "\n", "", "", "lock_path", "=", "os", ".", "path", ".", "join", "(", "cache_root", ",", "\"_dl_lock\"", ")", "\n", "urlhash", "=", "hashlib", ".", "md5", "(", "url", ".", "encode", "(", "\"utf-8\"", ")", ")", ".", "hexdigest", "(", ")", "\n", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_root", ",", "urlhash", ")", "\n", "\n", "with", "filelock", ".", "FileLock", "(", "lock_path", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "            ", "return", "cache_path", "\n", "", "", "temp_root", "=", "tempfile", ".", "mkdtemp", "(", "dir", "=", "cache_root", ")", "\n", "try", ":", "\n", "        ", "temp_path", "=", "os", ".", "path", ".", "join", "(", "temp_root", ",", "\"dl\"", ")", "\n", "print", "(", "\"Downloading ...\"", ")", "\n", "print", "(", "\"From: {:s}\"", ".", "format", "(", "url", ")", ")", "\n", "print", "(", "\"To: {:s}\"", ".", "format", "(", "cache_path", ")", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "temp_path", ",", "_reporthook", ")", "\n", "with", "filelock", ".", "FileLock", "(", "lock_path", ")", ":", "\n", "            ", "shutil", ".", "move", "(", "temp_path", ",", "cache_path", ")", "\n", "", "", "finally", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "temp_root", ")", "\n", "\n", "", "return", "cache_path", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models.download_and_store_model": [[130, 158], ["os.path.join", "pretrained_models._get_model_directory", "filelock.FileLock", "pretrained_models._get_model_directory", "posixpath.join", "os.path.join", "os.path.exists", "os.path.join", "pretrained_models.cached_download", "os.rename", "os.path.join", "posixpath.join", "zipfile.ZipFile", "zip_ref.extractall"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models._get_model_directory", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models._get_model_directory", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models.cached_download"], ["", "def", "download_and_store_model", "(", "alg", ",", "url", ",", "env", ",", "model_type", ")", ":", "\n", "    ", "\"\"\"Downloads a model file and puts it under model directory.\n\n    It downloads a file from the URL and puts it under model directory.\n    If there is already a file at the destination path,\n    it just returns the path without downloading the same file.\n    Args:\n        alg (string): String representation of algorithm used in MODELS dict.\n        url (string): URL to download from.\n        env (string): Environment in which pretrained model was trained.\n        model_type (string): Either `best` or `final`.\n    Returns:\n        string: Path to the downloaded file.\n        bool: whether the model was already cached.\n    \"\"\"", "\n", "lock", "=", "os", ".", "path", ".", "join", "(", "_get_model_directory", "(", "\".lock\"", ")", ",", "\"models.lock\"", ")", "\n", "with", "filelock", ".", "FileLock", "(", "lock", ")", ":", "\n", "        ", "root", "=", "_get_model_directory", "(", "os", ".", "path", ".", "join", "(", "alg", ",", "env", ")", ")", "\n", "url_basepath", "=", "posixpath", ".", "join", "(", "url", ",", "alg", ",", "env", ")", "\n", "file", "=", "model_type", "+", "\".zip\"", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", "\n", "is_cached", "=", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "if", "not", "is_cached", ":", "\n", "            ", "cache_path", "=", "cached_download", "(", "posixpath", ".", "join", "(", "url_basepath", ",", "file", ")", ")", "\n", "os", ".", "rename", "(", "cache_path", ",", "path", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "path", ",", "\"r\"", ")", "as", "zip_ref", ":", "\n", "                ", "zip_ref", ".", "extractall", "(", "root", ")", "\n", "", "", "return", "os", ".", "path", ".", "join", "(", "root", ",", "model_type", ")", ",", "is_cached", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models.download_model": [[160, 178], ["env.replace.replace", "pretrained_models.download_and_store_model"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models.download_and_store_model"], ["", "", "def", "download_model", "(", "alg", ",", "env", ",", "model_type", "=", "\"best\"", ")", ":", "\n", "    ", "\"\"\"Downloads and returns pretrained model.\n\n    Args:\n        alg (string): URL to download from.\n        env (string): Gym Environment name.\n        model_type (string): Either `best` or `final`.\n    Returns:\n        str: Path to the downloaded file.\n        bool: whether the model was already cached.\n    \"\"\"", "\n", "assert", "alg", "in", "MODELS", ",", "\"No pretrained models for \"", "+", "alg", "+", "\".\"", "\n", "assert", "model_type", "in", "MODELS", "[", "alg", "]", ",", "(", "\n", "'Model type \"'", "+", "model_type", "+", "'\" is not supported.'", "\n", ")", "\n", "env", "=", "env", ".", "replace", "(", "\"NoFrameskip-v4\"", ",", "\"\"", ")", "\n", "model_path", ",", "is_cached", "=", "download_and_store_model", "(", "alg", ",", "download_url", ",", "env", ",", "model_type", ")", "\n", "return", "model_path", ",", "is_cached", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.is_return_code_zero.is_return_code_zero": [[5, 20], ["open", "subprocess.check_call"], "function", ["None"], ["def", "is_return_code_zero", "(", "args", ")", ":", "\n", "    ", "\"\"\"Return true iff the given command's return code is zero.\n\n    All the messages to stdout or stderr are suppressed.\n    \"\"\"", "\n", "with", "open", "(", "os", ".", "devnull", ",", "\"wb\"", ")", "as", "FNULL", ":", "\n", "        ", "try", ":", "\n", "            ", "subprocess", ".", "check_call", "(", "args", ",", "stdout", "=", "FNULL", ",", "stderr", "=", "FNULL", ")", "\n", "", "except", "subprocess", ".", "CalledProcessError", ":", "\n", "# The given command returned an error", "\n", "            ", "return", "False", "\n", "", "except", "OSError", ":", "\n", "# The given command was not found", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed": [[7, 23], ["random.seed", "numpy.random.seed", "torch.manual_seed"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.seed"], ["def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "\"\"\"Set a given random seed to Pytorch's random number generator\n\n    torch.manual_seed() seeds the RNG for all devices (both CPU and CUDA)\n\n    See https://pytorch.org/docs/stable/notes/randomness.html for more details\n\n    Args:\n        seed (int): Random seed [0, 2 ** 32).\n    \"\"\"", "\n", "# PFRL depends on random", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "# PFRL depends on numpy.random", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "# torch.manual_seed is enough for the CPU and GPU", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random.sample_n_k": [[4, 29], ["ValueError", "numpy.empty", "numpy.random.choice", "numpy.random.choice", "set", "range", "selected_add", "numpy.random.choice"], "function", ["None"], ["def", "sample_n_k", "(", "n", ",", "k", ")", ":", "\n", "    ", "\"\"\"Sample k distinct elements uniformly from range(n)\"\"\"", "\n", "\n", "if", "not", "0", "<=", "k", "<=", "n", ":", "\n", "        ", "raise", "ValueError", "(", "\"Sample larger than population or is negative\"", ")", "\n", "", "if", "k", "==", "0", ":", "\n", "        ", "return", "np", ".", "empty", "(", "(", "0", ",", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "elif", "3", "*", "k", ">=", "n", ":", "\n", "        ", "return", "np", ".", "random", ".", "choice", "(", "n", ",", "k", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "result", "=", "np", ".", "random", ".", "choice", "(", "n", ",", "2", "*", "k", ")", "\n", "selected", "=", "set", "(", ")", "\n", "selected_add", "=", "selected", ".", "add", "\n", "j", "=", "k", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "            ", "x", "=", "result", "[", "i", "]", "\n", "while", "x", "in", "selected", ":", "\n", "                ", "x", "=", "result", "[", "i", "]", "=", "result", "[", "j", "]", "\n", "j", "+=", "1", "\n", "if", "j", "==", "2", "*", "k", ":", "\n", "# This is slow, but it rarely happens.", "\n", "                    ", "result", "[", "k", ":", "]", "=", "np", ".", "random", ".", "choice", "(", "n", ",", "k", ")", "\n", "j", "=", "k", "\n", "", "", "selected_add", "(", "x", ")", "\n", "", "return", "result", "[", ":", "k", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.conjugate_gradient.conjugate_gradient": [[4, 34], ["torch.zeros_like", "range", "A_product_func", "torch.matmul", "torch.matmul", "torch.norm", "torch.matmul", "torch.matmul", "A_product_func", "A_product_func"], "function", ["None"], ["def", "conjugate_gradient", "(", "A_product_func", ",", "b", ",", "tol", "=", "1e-10", ",", "max_iter", "=", "10", ")", ":", "\n", "    ", "\"\"\"Conjugate Gradient (CG) method.\n\n    This function solves Ax=b for the vector x, where A is a real\n    positive-definite matrix and b is a real vector.\n\n    Args:\n        A_product_func (callable): Callable that returns the product of the\n            matrix A and a given vector.\n        b (numpy.ndarray or cupy.ndarray): The vector b.\n        tol (float): Tolerance parameter for early stopping.\n        max_iter (int): Maximum number of iterations.\n\n    Returns:\n        numpy.ndarray or cupy.ndarray: The solution.\n            The array module will be the same as the argument b's.\n    \"\"\"", "\n", "x", "=", "torch", ".", "zeros_like", "(", "b", ")", "\n", "r0", "=", "b", "-", "A_product_func", "(", "x", ")", "\n", "p", "=", "r0", "\n", "for", "_", "in", "range", "(", "max_iter", ")", ":", "\n", "        ", "a", "=", "torch", ".", "matmul", "(", "r0", ",", "r0", ")", "/", "torch", ".", "matmul", "(", "A_product_func", "(", "p", ")", ",", "p", ")", "\n", "x", "=", "x", "+", "p", "*", "a", "\n", "r1", "=", "r0", "-", "A_product_func", "(", "p", ")", "*", "a", "\n", "if", "torch", ".", "norm", "(", "r1", ")", "<", "tol", ":", "\n", "            ", "return", "x", "\n", "", "b", "=", "torch", ".", "matmul", "(", "r1", ",", "r1", ")", "/", "torch", ".", "matmul", "(", "r0", ",", "r0", ")", "\n", "p", "=", "r1", "+", "b", "*", "p", "\n", "r0", "=", "r1", "\n", "", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states._to_recursive": [[8, 17], ["isinstance", "batched.to", "isinstance", "isinstance", "x.to", "tuple", "TypeError", "x.to"], "function", ["None"], ["def", "_to_recursive", "(", "batched", ":", "Any", ",", "device", ":", "torch", ".", "device", ")", "->", "Any", ":", "\n", "    ", "if", "isinstance", "(", "batched", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "batched", ".", "to", "(", "device", ")", "\n", "", "elif", "isinstance", "(", "batched", ",", "list", ")", ":", "\n", "        ", "return", "[", "x", ".", "to", "(", "device", ")", "for", "x", "in", "batched", "]", "\n", "", "elif", "isinstance", "(", "batched", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "x", ".", "to", "(", "device", ")", "for", "x", "in", "batched", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Unsupported type of data\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states": [[19, 48], ["isinstance", "batch_states._to_recursive", "phi", "torch.as_tensor"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states._to_recursive", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atari.train_a2c_ale.phi"], ["", "", "def", "batch_states", "(", "\n", "states", ":", "Sequence", "[", "Any", "]", ",", "device", ":", "torch", ".", "device", ",", "phi", ":", "Callable", "[", "[", "Any", "]", ",", "Any", "]", "\n", ")", "->", "Any", ":", "\n", "    ", "\"\"\"The default method for making batch of observations.\n\n    Args:\n        states (list): list of observations from an environment.\n        device (module): CPU or GPU the data should be placed on\n        phi (callable): Feature extractor applied to observations\n\n    Return:\n        the object which will be given as input to the model.\n    \"\"\"", "\n", "# \u4ee5\u4e0b\u4e3a\u4ee3\u7801\u8c03\u8bd5\uff1a", "\n", "# \u5fc5\u987b\u8981\u5728\u8be5\u7a0b\u5e8f\u4e2d\u8fd0\u884c\u5982\u4e0b\u8bed\u53e5\uff0c\u56e0\u4e3a\u73af\u5883\u4ea7\u751f\u7684\u89c2\u6d4b\u5305\u542b\u4e09\u4e2a\u77e9\u9635\uff0c", "\n", "# \u800c\u4e09\u4e2a\u77e9\u9635\u88ab\u5408\u6210\u4e86\u4e00\u4e2a\u5143\u7ec4\uff0c\u5fc5\u987b\u5c06\u7b2c\u4e00\u9879\u62c6\u5206\u51fa\u6765", "\n", "if", "isinstance", "(", "states", "[", "0", "]", ",", "tuple", ")", ":", "\n", "        ", "states", "=", "states", "[", "0", "]", "\n", "\n", "# count = 0", "\n", "# for s in states:", "\n", "#     print(phi(s))", "\n", "#     count += 1", "\n", "# print(count)", "\n", "\n", "# \u63d0\u53d6\u7279\u5f81\u5e76\u8f6c\u6362\u6210tensor\u6570\u636e\u7c7b\u578b", "\n", "", "features", "=", "[", "phi", "(", "s", ")", "for", "s", "in", "states", "]", "\n", "features", "=", "[", "torch", ".", "as_tensor", "(", "b", ")", "for", "b", "in", "features", "]", "\n", "return", "_to_recursive", "(", "features", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.ask_yes_no.ask_yes_no": [[1, 8], ["input().lower", "input"], "function", ["None"], ["def", "ask_yes_no", "(", "question", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "choice", "=", "input", "(", "\"{} [y/N]: \"", ".", "format", "(", "question", ")", ")", ".", "lower", "(", ")", "\n", "if", "choice", "in", "[", "\"y\"", ",", "\"ye\"", ",", "\"yes\"", "]", ":", "\n", "            ", "return", "True", "\n", "", "elif", "choice", "in", "[", "\"n\"", ",", "\"no\"", "]", ":", "\n", "            ", "return", "False", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.mode_of_distribution.mode_of_distribution": [[5, 20], ["isinstance", "isinstance", "distrib.probs.argmax", "isinstance", "isinstance", "mode_of_distribution.mode_of_distribution", "isinstance", "transform", "mode_of_distribution.mode_of_distribution", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.mode_of_distribution.mode_of_distribution", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.mode_of_distribution.mode_of_distribution"], ["def", "mode_of_distribution", "(", "distrib", ")", ":", "\n", "    ", "assert", "isinstance", "(", "distrib", ",", "dists", ".", "Distribution", ")", "\n", "if", "isinstance", "(", "distrib", ",", "dists", ".", "Categorical", ")", ":", "\n", "        ", "return", "distrib", ".", "probs", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "", "elif", "isinstance", "(", "distrib", ",", "(", "dists", ".", "Normal", ",", "dists", ".", "MultivariateNormal", ")", ")", ":", "\n", "        ", "return", "distrib", ".", "mean", "\n", "", "elif", "isinstance", "(", "distrib", ",", "dists", ".", "transformed_distribution", ".", "TransformedDistribution", ")", ":", "\n", "        ", "x", "=", "mode_of_distribution", "(", "distrib", ".", "base_dist", ")", "\n", "for", "transform", "in", "distrib", ".", "transforms", ":", "\n", "            ", "x", "=", "transform", "(", "x", ")", "\n", "", "return", "x", "\n", "", "elif", "isinstance", "(", "distrib", ",", "torch", ".", "distributions", ".", "Independent", ")", ":", "\n", "        ", "return", "mode_of_distribution", "(", "distrib", ".", "base_dist", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"{} is not supported\"", ".", "format", "(", "distrib", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.env_modifiers.make_rendered": [[4, 19], ["base_step", "env.render", "env.render", "base_close"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render"], ["def", "make_rendered", "(", "env", ",", "*", "render_args", ",", "**", "render_kwargs", ")", ":", "\n", "    ", "base_step", "=", "env", ".", "step", "\n", "base_close", "=", "env", ".", "close", "\n", "\n", "def", "step", "(", "action", ")", ":", "\n", "        ", "ret", "=", "base_step", "(", "action", ")", "\n", "env", ".", "render", "(", "*", "render_args", ",", "**", "render_kwargs", ")", "\n", "return", "ret", "\n", "\n", "", "def", "close", "(", ")", ":", "\n", "        ", "env", ".", "render", "(", "*", "render_args", ",", "close", "=", "True", ",", "**", "render_kwargs", ")", "\n", "base_close", "(", ")", "\n", "\n", "", "env", ".", "step", "=", "step", "\n", "env", ".", "close", "=", "close", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.env_modifiers.make_timestep_limited": [[21, 39], ["old_step", "old_reset"], "function", ["None"], ["", "def", "make_timestep_limited", "(", "env", ",", "timestep_limit", ")", ":", "\n", "    ", "t", "=", "[", "1", "]", "\n", "old_step", "=", "env", ".", "step", "\n", "old_reset", "=", "env", ".", "reset", "\n", "\n", "def", "step", "(", "action", ")", ":", "\n", "        ", "observation", ",", "reward", ",", "done", ",", "info", "=", "old_step", "(", "action", ")", "\n", "if", "t", "[", "0", "]", ">=", "timestep_limit", ":", "\n", "            ", "done", "=", "True", "\n", "", "t", "[", "0", "]", "+=", "1", "\n", "return", "observation", ",", "reward", ",", "done", ",", "info", "\n", "\n", "", "def", "reset", "(", ")", ":", "\n", "        ", "t", "[", "0", "]", "=", "1", "\n", "return", "old_reset", "(", ")", "\n", "\n", "", "env", ".", "step", "=", "step", "\n", "env", ".", "reset", "=", "reset", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.env_modifiers.make_action_filtered": [[41, 48], ["old_step", "action_filter"], "function", ["None"], ["", "def", "make_action_filtered", "(", "env", ",", "action_filter", ")", ":", "\n", "    ", "old_step", "=", "env", ".", "step", "\n", "\n", "def", "step", "(", "action", ")", ":", "\n", "        ", "return", "old_step", "(", "action_filter", "(", "action", ")", ")", "\n", "\n", "", "env", ".", "step", "=", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.env_modifiers.make_reward_filtered": [[50, 59], ["old_step", "reward_filter"], "function", ["None"], ["", "def", "make_reward_filtered", "(", "env", ",", "reward_filter", ")", ":", "\n", "    ", "old_step", "=", "env", ".", "step", "\n", "\n", "def", "step", "(", "action", ")", ":", "\n", "        ", "observation", ",", "reward", ",", "done", ",", "info", "=", "old_step", "(", "action", ")", "\n", "reward", "=", "reward_filter", "(", "reward", ")", "\n", "return", "observation", ",", "reward", ",", "done", ",", "info", "\n", "\n", "", "env", ".", "step", "=", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.env_modifiers.make_reward_clipped": [[61, 63], ["env_modifiers.make_reward_filtered", "numpy.clip"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.env_modifiers.make_reward_filtered"], ["", "def", "make_reward_clipped", "(", "env", ",", "low", ",", "high", ")", ":", "\n", "    ", "make_reward_filtered", "(", "env", ",", "lambda", "x", ":", "np", ".", "clip", "(", "x", ",", "low", ",", "high", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.env_modifiers.make_action_repeated": [[65, 83], ["range", "old_step"], "function", ["None"], ["", "def", "make_action_repeated", "(", "env", ",", "n_times", ")", ":", "\n", "    ", "\"\"\"Repeat received actions.\n\n    - Rewards are accumulated while repeating.\n    - Only latest observations are returned.\n    \"\"\"", "\n", "old_step", "=", "env", ".", "step", "\n", "\n", "def", "step", "(", "action", ")", ":", "\n", "        ", "r_total", "=", "0", "\n", "for", "_", "in", "range", "(", "n_times", ")", ":", "\n", "            ", "obs", ",", "r", ",", "done", ",", "info", "=", "old_step", "(", "action", ")", "\n", "r_total", "+=", "r", "\n", "if", "done", ":", "\n", "                ", "break", "\n", "", "", "return", "obs", ",", "r_total", ",", "done", ",", "info", "\n", "\n", "", "env", ".", "step", "=", "step", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.reward_filter.NormalizedRewardFilter.__init__": [[2, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tau", "=", "1e-3", ",", "scale", "=", "1", ",", "eps", "=", "1e-1", ")", ":", "\n", "        ", "self", ".", "tau", "=", "tau", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "average_reward", "=", "0", "\n", "self", ".", "average_reward_squared", "=", "0", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.reward_filter.NormalizedRewardFilter.__call__": [[9, 17], ["min"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min"], ["", "def", "__call__", "(", "self", ",", "reward", ")", ":", "\n", "        ", "self", ".", "average_reward", "*=", "1", "-", "self", ".", "tau", "\n", "self", ".", "average_reward", "+=", "self", ".", "tau", "*", "reward", "\n", "self", ".", "average_reward_squared", "*=", "1", "-", "self", ".", "tau", "\n", "self", ".", "average_reward_squared", "+=", "self", ".", "tau", "*", "reward", "**", "2", "\n", "var", "=", "self", ".", "average_reward_squared", "-", "self", ".", "average_reward", "**", "2", "\n", "stdev", "=", "min", "(", "var", ",", "self", ".", "eps", ")", "**", "0.5", "\n", "return", "self", ".", "scale", "*", "(", "reward", "-", "self", ".", "average_reward", ")", "/", "stdev", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.reward_filter.AverageRewardFilter.__init__": [[20, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tau", "=", "1e-3", ")", ":", "\n", "        ", "self", ".", "tau", "=", "tau", "\n", "self", ".", "average_reward", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.reward_filter.AverageRewardFilter.__call__": [[24, 28], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "reward", ")", ":", "\n", "        ", "self", ".", "average_reward", "*=", "1", "-", "self", ".", "tau", "\n", "self", ".", "average_reward", "+=", "self", ".", "tau", "*", "reward", "\n", "return", "reward", "-", "self", ".", "average_reward", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.generate_net": [[36, 282], ["inflows.get.get", "model.getType", "model.getType", "model.getType", "model.getType", "model.getType", "model.getType", "model.getCatalog().findByName", "traffic_lights.get_properties", "generate.get_junctions", "model.getCatalog().getObjectsByType", "model.getCatalog().findByName", "model.getCatalog().findByName.removeSchedule", "gui.getActiveViewWindow().getView", "generate.set_vehicles_color", "model.getCatalog().findByName", "model.getCatalog().findByName.getInputData", "scenario.getInputData.addExtension", "gui.save", "GKPoints", "GKPoint", "GKPoint.set", "model.createNewCmd", "GKObjectDuplicateCmd.setPosition", "model.getCommander().addCommand", "GKObjectDuplicateCmd.createdObject", "cmd.createdObject.setName", "model.getType", "print", "generate.create_node_meters", "model.getCatalog().getObjectsByType.itervalues", "generate.create_state", "model.getCatalog().findByName", "create_state.setVehicle", "model.getCatalog().findByName", "model.getCatalog().findByName", "model.getCatalog().findByName.setEntranceFlow", "model.getCatalog().findByName", "gui.getActiveViewWindow().getView.wholeWorld", "model.getType", "os.path.join", "model.createNewCmd", "GKObjectDuplicateCmd.setPoints", "model.getCommander().addCommand", "GKObjectDuplicateCmd.createdObject", "cmd.createdObject.setName", "model.getCatalog().findByName", "model.getCatalog().findByName.setSpeed", "generate.get_edge_nodes", "generate.get_edge_angle", "GKPoint", "GKPoint.set", "GKPoints.append", "GKPoint", "GKPoint.set", "GKPoints.append", "model.createNewCmd", "GKObjectDuplicateCmd.setPoints", "model.getCommander().addCommand", "GKObjectDuplicateCmd.createdObject", "cmd.createdObject.setName", "model.getCatalog().findByName", "model.getCatalog().findByName.setSpeed", "range", "model.getCatalog", "model.getCatalog", "vehicle.getName", "model.getType", "model.getCatalog", "model.getCatalog().findByName.isA", "model.getCommander().addCommand", "generate.create_traffic_demand", "gui.getActiveViewWindow", "model.getCatalog", "GKPoint", "GKPoint.set", "GKPoints.append", "model.getType", "generate.get_edge_nodes", "generate.get_edge_angle", "model.getCommander", "len", "len", "model.createNewCmd", "model.getCatalog().findByName", "model.getCatalog().findByName", "GKObjectDuplicateCmd.setTurning", "model.getCommander().addCommand", "GKObjectDuplicateCmd.createdObject", "cmd.createdObject.setName", "cmd.createdObject.getNode", "cmd.createdObject.addTurning", "len", "range", "model.getCatalog", "model.getCatalog", "model.getCatalog", "model.getCatalog", "model.getCatalog().findByName.isA", "generate.set_demand_item", "model.getCommander", "model.getCatalog", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "model.getCommander", "model.getCatalog", "turn.getNode.removeTurning", "len", "model.createNewCmd", "model.getCatalog().findByName", "model.getCatalog().findByName", "GKObjectDuplicateCmd.setTurning", "model.getCommander().addCommand", "GKObjectDuplicateCmd.createdObject", "cmd.createdObject.setName", "cmd.createdObject.getNode", "cmd.createdObject.addTurning", "GKObjectDuplicateCmd", "GKObjectDuplicateCmd.init", "model.getCommander().addCommand", "GKObjectDuplicateCmd.createdObject", "cmd.createdObject.setName", "model.getCommander", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "model.getCatalog", "model.getCatalog", "model.getCommander", "turn.getNode.removeTurning", "model.getCatalog", "model.getCatalog", "model.getCommander", "model.getCommander"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.TrafficLightParams.get_properties", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.get_junctions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.set_vehicles_color", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.create_node_meters", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.create_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.get_edge_nodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.get_edge_angle", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestObject.getName", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.create_traffic_demand", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.get_edge_nodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.get_edge_angle", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.set_demand_item"], ["def", "generate_net", "(", "nodes", ",", "\n", "edges", ",", "\n", "connections", ",", "\n", "inflows", ",", "\n", "veh_types", ",", "\n", "traffic_lights", ")", ":", "\n", "    ", "\"\"\"Generate a network in the Aimsun template.\n\n    Parameters\n    ----------\n    nodes : list of dict\n        all available nodes\n    edges : list of dict\n        all available edges\n    connections : list of dict\n        all available connections\n    inflows : flow.core.params.InFlows\n        the flow inflow object\n    veh_types : list of dict\n        list of vehicle types and their corresponding properties\n    traffic_lights : flow.core.params.TrafficLightParams\n        traffic light specific parameters\n    \"\"\"", "\n", "inflows", "=", "inflows", ".", "get", "(", ")", "\n", "lane_width", "=", "3.6", "# TODO additional params??", "\n", "type_section", "=", "model", ".", "getType", "(", "\"GKSection\"", ")", "\n", "type_node", "=", "model", ".", "getType", "(", "\"GKNode\"", ")", "\n", "type_turn", "=", "model", ".", "getType", "(", "\"GKTurning\"", ")", "\n", "type_traffic_state", "=", "model", ".", "getType", "(", "\"GKTrafficState\"", ")", "\n", "type_vehicle", "=", "model", ".", "getType", "(", "\"GKVehicle\"", ")", "\n", "type_demand", "=", "model", ".", "getType", "(", "\"GKTrafficDemand\"", ")", "\n", "\n", "# draw edges", "\n", "for", "edge", "in", "edges", ":", "\n", "        ", "points", "=", "GKPoints", "(", ")", "\n", "if", "\"shape\"", "in", "edge", ":", "\n", "            ", "for", "p", "in", "edge", "[", "\"shape\"", "]", ":", "# TODO add x, y offset (radius)", "\n", "                ", "new_point", "=", "GKPoint", "(", ")", "\n", "new_point", ".", "set", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "0", ")", "\n", "points", ".", "append", "(", "new_point", ")", "\n", "\n", "", "cmd", "=", "model", ".", "createNewCmd", "(", "model", ".", "getType", "(", "\"GKSection\"", ")", ")", "\n", "cmd", ".", "setPoints", "(", "edge", "[", "\"numLanes\"", "]", ",", "lane_width", ",", "points", ")", "\n", "model", ".", "getCommander", "(", ")", ".", "addCommand", "(", "cmd", ")", "\n", "section", "=", "cmd", ".", "createdObject", "(", ")", "\n", "section", ".", "setName", "(", "edge", "[", "\"id\"", "]", ")", "\n", "edge_aimsun", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "edge", "[", "\"id\"", "]", ",", "type_section", ")", "\n", "edge_aimsun", ".", "setSpeed", "(", "edge", "[", "\"speed\"", "]", "*", "3.6", ")", "\n", "", "else", ":", "\n", "            ", "first_node", ",", "last_node", "=", "get_edge_nodes", "(", "edge", ",", "nodes", ")", "\n", "theta", "=", "get_edge_angle", "(", "first_node", ",", "last_node", ")", "\n", "first_node_offset", "=", "[", "0", ",", "0", "]", "# x, and y offset", "\n", "last_node_offset", "=", "[", "0", ",", "0", "]", "# x, and y offset", "\n", "\n", "# offset edge ends if there is a radius in the node", "\n", "if", "\"radius\"", "in", "first_node", ":", "\n", "                ", "first_node_offset", "[", "0", "]", "=", "first_node", "[", "\"radius\"", "]", "*", "np", ".", "cos", "(", "theta", "*", "np", ".", "pi", "/", "180", ")", "\n", "first_node_offset", "[", "1", "]", "=", "first_node", "[", "\"radius\"", "]", "*", "np", ".", "sin", "(", "theta", "*", "np", ".", "pi", "/", "180", ")", "\n", "", "if", "\"radius\"", "in", "last_node", ":", "\n", "                ", "last_node_offset", "[", "0", "]", "=", "-", "last_node", "[", "\"radius\"", "]", "*", "np", ".", "cos", "(", "theta", "*", "np", ".", "pi", "/", "180", ")", "\n", "last_node_offset", "[", "1", "]", "=", "-", "last_node", "[", "\"radius\"", "]", "*", "np", ".", "sin", "(", "theta", "*", "np", ".", "pi", "/", "180", ")", "\n", "\n", "# offset edge ends if there are multiple edges between nodes", "\n", "# find the edges that share the first node", "\n", "", "edges_shared_node", "=", "[", "edg", "for", "edg", "in", "edges", "\n", "if", "first_node", "[", "\"id\"", "]", "==", "edg", "[", "\"to\"", "]", "or", "\n", "last_node", "[", "\"id\"", "]", "==", "edg", "[", "\"from\"", "]", "]", "\n", "for", "new_edge", "in", "edges_shared_node", ":", "\n", "                ", "new_first_node", ",", "new_last_node", "=", "get_edge_nodes", "(", "new_edge", ",", "nodes", ")", "\n", "new_theta", "=", "get_edge_angle", "(", "new_first_node", ",", "new_last_node", ")", "\n", "if", "new_theta", "==", "theta", "-", "180", "or", "new_theta", "==", "theta", "+", "180", ":", "\n", "                    ", "first_node_offset", "[", "0", "]", "+=", "lane_width", "*", "0.5", "*", "np", ".", "sin", "(", "theta", "*", "np", ".", "pi", "/", "180", ")", "\n", "first_node_offset", "[", "1", "]", "-=", "lane_width", "*", "0.5", "*", "np", ".", "cos", "(", "theta", "*", "np", ".", "pi", "/", "180", ")", "\n", "last_node_offset", "[", "0", "]", "+=", "lane_width", "*", "0.5", "*", "np", ".", "sin", "(", "theta", "*", "np", ".", "pi", "/", "180", ")", "\n", "last_node_offset", "[", "1", "]", "-=", "lane_width", "*", "0.5", "*", "np", ".", "cos", "(", "theta", "*", "np", ".", "pi", "/", "180", ")", "\n", "break", "\n", "\n", "", "", "new_point", "=", "GKPoint", "(", ")", "\n", "new_point", ".", "set", "(", "first_node", "[", "'x'", "]", "+", "first_node_offset", "[", "0", "]", ",", "\n", "first_node", "[", "'y'", "]", "+", "first_node_offset", "[", "1", "]", ",", "\n", "0", ")", "\n", "points", ".", "append", "(", "new_point", ")", "\n", "new_point", "=", "GKPoint", "(", ")", "\n", "new_point", ".", "set", "(", "last_node", "[", "'x'", "]", "+", "last_node_offset", "[", "0", "]", ",", "\n", "last_node", "[", "'y'", "]", "+", "last_node_offset", "[", "1", "]", ",", "\n", "0", ")", "\n", "points", ".", "append", "(", "new_point", ")", "\n", "cmd", "=", "model", ".", "createNewCmd", "(", "type_section", ")", "\n", "cmd", ".", "setPoints", "(", "edge", "[", "\"numLanes\"", "]", ",", "lane_width", ",", "points", ")", "\n", "model", ".", "getCommander", "(", ")", ".", "addCommand", "(", "cmd", ")", "\n", "section", "=", "cmd", ".", "createdObject", "(", ")", "\n", "section", ".", "setName", "(", "edge", "[", "\"id\"", "]", ")", "\n", "edge_aimsun", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "edge", "[", "\"id\"", "]", ",", "type_section", ")", "\n", "edge_aimsun", ".", "setSpeed", "(", "edge", "[", "\"speed\"", "]", "*", "3.6", ")", "\n", "\n", "# draw nodes and connections", "\n", "", "", "for", "node", "in", "nodes", ":", "\n", "# add a new node in Aimsun", "\n", "        ", "node_pos", "=", "GKPoint", "(", ")", "\n", "node_pos", ".", "set", "(", "node", "[", "'x'", "]", ",", "node", "[", "'y'", "]", ",", "0", ")", "\n", "cmd", "=", "model", ".", "createNewCmd", "(", "type_node", ")", "\n", "cmd", ".", "setPosition", "(", "node_pos", ")", "\n", "model", ".", "getCommander", "(", ")", ".", "addCommand", "(", "cmd", ")", "\n", "new_node", "=", "cmd", ".", "createdObject", "(", ")", "\n", "new_node", ".", "setName", "(", "node", "[", "\"id\"", "]", ")", "\n", "\n", "# list of edges from and to the node", "\n", "from_edges", "=", "[", "\n", "edge", "[", "'id'", "]", "for", "edge", "in", "edges", "if", "edge", "[", "'from'", "]", "==", "node", "[", "'id'", "]", "]", "\n", "to_edges", "=", "[", "edge", "[", "'id'", "]", "for", "edge", "in", "edges", "if", "edge", "[", "'to'", "]", "==", "node", "[", "'id'", "]", "]", "\n", "\n", "# if the node is a junction with a list of connections", "\n", "if", "len", "(", "to_edges", ")", ">", "1", "and", "len", "(", "from_edges", ")", ">", "1", "and", "connections", "[", "node", "[", "'id'", "]", "]", "is", "not", "None", ":", "\n", "# add connections", "\n", "            ", "for", "connection", "in", "connections", "[", "node", "[", "'id'", "]", "]", ":", "\n", "                ", "cmd", "=", "model", ".", "createNewCmd", "(", "type_turn", ")", "\n", "from_section", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "connection", "[", "\"from\"", "]", ",", "type_section", ",", "True", ")", "\n", "to_section", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "connection", "[", "\"to\"", "]", ",", "type_section", ",", "True", ")", "\n", "cmd", ".", "setTurning", "(", "from_section", ",", "to_section", ")", "\n", "model", ".", "getCommander", "(", ")", ".", "addCommand", "(", "cmd", ")", "\n", "turn", "=", "cmd", ".", "createdObject", "(", ")", "\n", "turn_name", "=", "\"{}_to_{}\"", ".", "format", "(", "connection", "[", "\"from\"", "]", ",", "\n", "connection", "[", "\"to\"", "]", ")", "\n", "turn", ".", "setName", "(", "turn_name", ")", "\n", "existing_node", "=", "turn", ".", "getNode", "(", ")", "\n", "if", "existing_node", "is", "not", "None", ":", "\n", "                    ", "existing_node", ".", "removeTurning", "(", "turn", ")", "\n", "# add the turning to the node", "\n", "", "new_node", ".", "addTurning", "(", "turn", ",", "False", ",", "True", ")", "\n", "\n", "# if the node is not a junction or connections is None", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "from_edges", ")", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "to_edges", ")", ")", ":", "\n", "                    ", "cmd", "=", "model", ".", "createNewCmd", "(", "type_turn", ")", "\n", "to_section", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "from_edges", "[", "i", "]", ",", "type_section", ",", "True", ")", "\n", "from_section", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "to_edges", "[", "j", "]", ",", "type_section", ",", "True", ")", "\n", "cmd", ".", "setTurning", "(", "from_section", ",", "to_section", ")", "\n", "model", ".", "getCommander", "(", ")", ".", "addCommand", "(", "cmd", ")", "\n", "turn", "=", "cmd", ".", "createdObject", "(", ")", "\n", "turn_name", "=", "\"{}_to_{}\"", ".", "format", "(", "from_edges", "[", "i", "]", ",", "to_edges", "[", "j", "]", ")", "\n", "turn", ".", "setName", "(", "turn_name", ")", "\n", "existing_node", "=", "turn", ".", "getNode", "(", ")", "\n", "if", "existing_node", "is", "not", "None", ":", "\n", "                        ", "existing_node", ".", "removeTurning", "(", "turn", ")", "\n", "\n", "# add the turning to the node", "\n", "", "new_node", ".", "addTurning", "(", "turn", ",", "False", ",", "True", ")", "\n", "\n", "# get the control plan", "\n", "", "", "", "", "control_plan", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "\"Control Plan\"", ",", "model", ".", "getType", "(", "\"GKControlPlan\"", ")", ")", "\n", "\n", "# add traffic lights", "\n", "tls_properties", "=", "traffic_lights", ".", "get_properties", "(", ")", "\n", "# determine junctions", "\n", "junctions", "=", "get_junctions", "(", "nodes", ")", "\n", "# add meters for all nodes in junctions", "\n", "for", "node", "in", "junctions", ":", "\n", "        ", "phases", "=", "tls_properties", "[", "node", "[", "'id'", "]", "]", "[", "\"phases\"", "]", "\n", "print", "(", "phases", ")", "\n", "create_node_meters", "(", "model", ",", "control_plan", ",", "node", "[", "'id'", "]", ",", "phases", ")", "\n", "\n", "# set vehicle types", "\n", "", "vehicles", "=", "model", ".", "getCatalog", "(", ")", ".", "getObjectsByType", "(", "type_vehicle", ")", "\n", "if", "vehicles", "is", "not", "None", ":", "\n", "        ", "for", "vehicle", "in", "vehicles", ".", "itervalues", "(", ")", ":", "\n", "            ", "name", "=", "vehicle", ".", "getName", "(", ")", "\n", "if", "name", "==", "\"Car\"", ":", "\n", "                ", "for", "veh_type", "in", "veh_types", ":", "\n", "                    ", "cmd", "=", "GKObjectDuplicateCmd", "(", ")", "\n", "cmd", ".", "init", "(", "vehicle", ")", "\n", "model", ".", "getCommander", "(", ")", ".", "addCommand", "(", "cmd", ")", "\n", "new_veh", "=", "cmd", ".", "createdObject", "(", ")", "\n", "new_veh", ".", "setName", "(", "veh_type", "[", "\"veh_id\"", "]", ")", "\n", "\n", "# Create new states based on vehicle types", "\n", "", "", "", "", "for", "veh_type", "in", "veh_types", ":", "\n", "        ", "new_state", "=", "create_state", "(", "model", ",", "veh_type", "[", "\"veh_id\"", "]", ")", "\n", "# find vehicle type", "\n", "veh_type", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "veh_type", "[", "\"veh_id\"", "]", ",", "model", ".", "getType", "(", "\"GKVehicle\"", ")", ")", "\n", "# set state vehicles", "\n", "new_state", ".", "setVehicle", "(", "veh_type", ")", "\n", "\n", "# add traffic inflows to traffic states", "\n", "", "for", "inflow", "in", "inflows", ":", "\n", "        ", "traffic_state_aimsun", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "inflow", "[", "\"vtype\"", "]", ",", "type_traffic_state", ")", "\n", "edge_aimsun", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "inflow", "[", "'edge'", "]", ",", "type_section", ")", "\n", "traffic_state_aimsun", ".", "setEntranceFlow", "(", "\n", "edge_aimsun", ",", "None", ",", "inflow", "[", "'vehsPerHour'", "]", ")", "\n", "\n", "# get traffic demand", "\n", "", "demand", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "\"Traffic Demand 864\"", ",", "type_demand", ")", "\n", "# clear the demand of any previous item", "\n", "demand", ".", "removeSchedule", "(", ")", "\n", "\n", "# set traffic demand", "\n", "for", "veh_type", "in", "veh_types", ":", "\n", "# find the state for each vehicle type", "\n", "        ", "state_car", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "veh_type", "[", "\"veh_id\"", "]", ",", "type_traffic_state", ")", "\n", "if", "demand", "is", "not", "None", "and", "demand", ".", "isA", "(", "\"GKTrafficDemand\"", ")", ":", "\n", "# Add the state", "\n", "            ", "if", "state_car", "is", "not", "None", "and", "state_car", ".", "isA", "(", "\"GKTrafficState\"", ")", ":", "\n", "                ", "set_demand_item", "(", "model", ",", "demand", ",", "state_car", ")", "\n", "", "model", ".", "getCommander", "(", ")", ".", "addCommand", "(", "None", ")", "\n", "", "else", ":", "\n", "            ", "create_traffic_demand", "(", "model", ",", "veh_type", "[", "\"veh_id\"", "]", ")", "# TODO debug", "\n", "\n", "# set the view to \"whole world\" in Aimsun", "\n", "", "", "view", "=", "gui", ".", "getActiveViewWindow", "(", ")", ".", "getView", "(", ")", "\n", "if", "view", "is", "not", "None", ":", "\n", "        ", "view", ".", "wholeWorld", "(", ")", "\n", "\n", "# set view mode, each vehicle type with different color", "\n", "", "set_vehicles_color", "(", "model", ")", "\n", "\n", "# set API", "\n", "network_name", "=", "data", "[", "\"network_name\"", "]", "\n", "scenario", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "network_name", ",", "model", ".", "getType", "(", "\"GKScenario\"", ")", ")", "# find scenario", "\n", "scenario_data", "=", "scenario", ".", "getInputData", "(", ")", "\n", "scenario_data", ".", "addExtension", "(", "os", ".", "path", ".", "join", "(", "\n", "config", ".", "PROJECT_PATH", ",", "\"flow/utils/aimsun/run.py\"", ")", ",", "True", ")", "\n", "\n", "# save", "\n", "gui", ".", "save", "(", "model", ",", "'flow.ang'", ",", "GGui", ".", "GGuiSaveType", ".", "eSaveAs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.generate_net_osm": [[284, 381], ["inflows.get.get", "model.getType", "model.getType", "model.getType", "model.getType", "GKPoint", "GKPoint.set", "GKBBox", "GKBBox.set", "model.importFile", "model.getCatalog().getObjectsByType", "model.getCatalog().findByName", "model.getCatalog().findByName.removeSchedule", "gui.getActiveViewWindow().getView", "generate.set_vehicles_color", "model.getCatalog().findByName", "model.getCatalog().findByName.getInputData", "scenario.getInputData.addExtension", "gui.save", "model.getCatalog().getObjectsByType.itervalues", "generate.create_state", "model.getCatalog().findByName", "create_state.setVehicle", "model.getCatalog().findByName", "gui.getActiveViewWindow().getView.wholeWorld", "model.getType", "os.path.join", "model.getCatalog", "vehicle.getName", "model.getType", "model.getCatalog().findByName", "model.getCatalog().findByName", "model.getCatalog().findByName.setEntranceFlow", "model.getCatalog", "model.getCatalog().findByName.isA", "model.getCommander().addCommand", "generate.create_traffic_demand", "gui.getActiveViewWindow", "model.getCatalog", "model.getCatalog", "model.getCatalog", "model.getCatalog().findByName.isA", "generate.set_demand_item", "GKObjectDuplicateCmd", "GKObjectDuplicateCmd.init", "model.getCommander().addCommand", "GKObjectDuplicateCmd.createdObject", "cmd.createdObject.setName", "model.getCatalog", "model.getCatalog", "model.getCommander", "model.getCommander"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.set_vehicles_color", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.create_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestObject.getName", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.create_traffic_demand", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.set_demand_item"], ["", "def", "generate_net_osm", "(", "file_name", ",", "inflows", ",", "veh_types", ")", ":", "\n", "    ", "\"\"\"Generate a network from an osm file.\n\n    Parameters\n    ----------\n    file_name : str\n        path to the osm file\n    inflows : flow.core.params.InFlows\n        the flow inflow object\n    veh_types : list of dict\n        list of vehicle types and their corresponding properties\n    \"\"\"", "\n", "inflows", "=", "inflows", ".", "get", "(", ")", "\n", "\n", "type_section", "=", "model", ".", "getType", "(", "\"GKSection\"", ")", "\n", "type_traffic_state", "=", "model", ".", "getType", "(", "\"GKTrafficState\"", ")", "\n", "type_vehicle", "=", "model", ".", "getType", "(", "\"GKVehicle\"", ")", "\n", "type_demand", "=", "model", ".", "getType", "(", "\"GKTrafficDemand\"", ")", "\n", "\n", "# load OSM file", "\n", "layer", "=", "None", "\n", "point", "=", "GKPoint", "(", ")", "\n", "point", ".", "set", "(", "0", ",", "0", ",", "0", ")", "\n", "box", "=", "GKBBox", "(", ")", "\n", "box", ".", "set", "(", "-", "1000", ",", "-", "1000", ",", "0", ",", "1000", ",", "1000", ",", "0", ")", "\n", "\n", "model", ".", "importFile", "(", "file_name", ",", "layer", ",", "point", ",", "box", ")", "\n", "\n", "# set vehicle types", "\n", "vehicles", "=", "model", ".", "getCatalog", "(", ")", ".", "getObjectsByType", "(", "type_vehicle", ")", "\n", "if", "vehicles", "is", "not", "None", ":", "\n", "        ", "for", "vehicle", "in", "vehicles", ".", "itervalues", "(", ")", ":", "\n", "            ", "name", "=", "vehicle", ".", "getName", "(", ")", "\n", "if", "name", "==", "\"Car\"", ":", "\n", "                ", "for", "veh_type", "in", "veh_types", ":", "\n", "                    ", "cmd", "=", "GKObjectDuplicateCmd", "(", ")", "\n", "cmd", ".", "init", "(", "vehicle", ")", "\n", "model", ".", "getCommander", "(", ")", ".", "addCommand", "(", "cmd", ")", "\n", "new_veh", "=", "cmd", ".", "createdObject", "(", ")", "\n", "new_veh", ".", "setName", "(", "veh_type", "[", "\"veh_id\"", "]", ")", "\n", "\n", "# Create new states based on vehicle types", "\n", "", "", "", "", "for", "veh_type", "in", "veh_types", ":", "\n", "        ", "new_state", "=", "create_state", "(", "model", ",", "veh_type", "[", "\"veh_id\"", "]", ")", "\n", "# find vehicle type", "\n", "veh_type", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "veh_type", "[", "\"veh_id\"", "]", ",", "model", ".", "getType", "(", "\"GKVehicle\"", ")", ")", "\n", "# set state vehicles", "\n", "new_state", ".", "setVehicle", "(", "veh_type", ")", "\n", "\n", "# add traffic inflows to traffic states", "\n", "", "if", "inflows", "is", "not", "None", ":", "\n", "        ", "for", "inflow", "in", "inflows", ":", "\n", "            ", "traffic_state_aimsun", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "inflow", "[", "\"vtype\"", "]", ",", "type_traffic_state", ")", "\n", "edge_aimsun", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "inflow", "[", "'edge'", "]", ",", "type_section", ")", "\n", "traffic_state_aimsun", ".", "setEntranceFlow", "(", "\n", "edge_aimsun", ",", "None", ",", "inflow", "[", "'vehsPerHour'", "]", ")", "\n", "\n", "# get traffic demand", "\n", "", "", "demand", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "\"Traffic Demand 864\"", ",", "type_demand", ")", "\n", "# clear the demand of any previous item", "\n", "demand", ".", "removeSchedule", "(", ")", "\n", "\n", "# set traffic demand", "\n", "for", "veh_type", "in", "veh_types", ":", "\n", "# find the state for each vehicle type", "\n", "        ", "state_car", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "veh_type", "[", "\"veh_id\"", "]", ",", "type_traffic_state", ")", "\n", "if", "demand", "is", "not", "None", "and", "demand", ".", "isA", "(", "\"GKTrafficDemand\"", ")", ":", "\n", "# Add the state", "\n", "            ", "if", "state_car", "is", "not", "None", "and", "state_car", ".", "isA", "(", "\"GKTrafficState\"", ")", ":", "\n", "                ", "set_demand_item", "(", "model", ",", "demand", ",", "state_car", ")", "\n", "", "model", ".", "getCommander", "(", ")", ".", "addCommand", "(", "None", ")", "\n", "", "else", ":", "\n", "            ", "create_traffic_demand", "(", "model", ",", "veh_type", "[", "\"veh_id\"", "]", ")", "# TODO debug", "\n", "\n", "# set the view to \"whole world\" in Aimsun", "\n", "", "", "view", "=", "gui", ".", "getActiveViewWindow", "(", ")", ".", "getView", "(", ")", "\n", "if", "view", "is", "not", "None", ":", "\n", "        ", "view", ".", "wholeWorld", "(", ")", "\n", "\n", "# set view mode, each vehicle type with different color", "\n", "", "set_vehicles_color", "(", "model", ")", "\n", "\n", "# set API", "\n", "network_name", "=", "data", "[", "\"network_name\"", "]", "\n", "scenario", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "network_name", ",", "model", ".", "getType", "(", "\"GKScenario\"", ")", ")", "# find scenario", "\n", "scenario_data", "=", "scenario", ".", "getInputData", "(", ")", "\n", "scenario_data", ".", "addExtension", "(", "os", ".", "path", ".", "join", "(", "\n", "config", ".", "PROJECT_PATH", ",", "\"flow/utils/aimsun/run.py\"", ")", ",", "True", ")", "\n", "\n", "# save", "\n", "gui", ".", "save", "(", "model", ",", "'flow.ang'", ",", "GGui", ".", "GGuiSaveType", ".", "eSaveAs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.get_junctions": [[383, 402], ["junctions.append"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "get_junctions", "(", "nodes", ")", ":", "\n", "    ", "\"\"\"Return the nodes with traffic lights.\n\n    Parameters\n    ----------\n    nodes : list of dict\n        all available nodes\n\n    Returns\n    -------\n    list of dict\n        the nodes with traffic lights\n    \"\"\"", "\n", "junctions", "=", "[", "]", "# TODO check", "\n", "for", "node", "in", "nodes", ":", "\n", "        ", "if", "\"type\"", "in", "node", ":", "\n", "            ", "if", "node", "[", "\"type\"", "]", "==", "\"traffic_light\"", ":", "\n", "                ", "junctions", ".", "append", "(", "node", ")", "\n", "", "", "", "return", "junctions", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.get_edge_nodes": [[404, 426], ["next", "next"], "function", ["None"], ["", "def", "get_edge_nodes", "(", "edge", ",", "nodes", ")", ":", "\n", "    ", "\"\"\"Get first and last nodes of an edge.\n\n    Parameters\n    ----------\n    edge : dict\n        the edge information\n    nodes : list of dict\n        all available nodes\n\n    Returns\n    -------\n    dict\n        information on the first node\n    dict\n        information on the last node\n    \"\"\"", "\n", "first_node", "=", "next", "(", "node", "for", "node", "in", "nodes", "\n", "if", "node", "[", "\"id\"", "]", "==", "edge", "[", "\"from\"", "]", ")", "\n", "last_node", "=", "next", "(", "node", "for", "node", "in", "nodes", "\n", "if", "node", "[", "\"id\"", "]", "==", "edge", "[", "\"to\"", "]", ")", "\n", "return", "first_node", ",", "last_node", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.get_edge_angle": [[428, 447], ["numpy.array", "numpy.array", "numpy.arctan2"], "function", ["None"], ["", "def", "get_edge_angle", "(", "first_node", ",", "last_node", ")", ":", "\n", "    ", "\"\"\"Compute the edge angle.\n\n    Parameters\n    ----------\n    first_node : dict\n        information on the first node\n    last_node : dict\n        information on the last node\n\n    Returns\n    -------\n    float\n        edge angle\n    \"\"\"", "\n", "del_x", "=", "np", ".", "array", "(", "[", "last_node", "[", "'x'", "]", "-", "first_node", "[", "'x'", "]", "]", ")", "\n", "del_y", "=", "np", ".", "array", "(", "[", "last_node", "[", "'y'", "]", "-", "first_node", "[", "'y'", "]", "]", ")", "\n", "theta", "=", "np", ".", "arctan2", "(", "del_y", ",", "del_x", ")", "*", "180", "/", "np", ".", "pi", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.get_state_folder": [[449, 470], ["model.getCreateRootFolder().findFolder", "GKSystem.getSystem().createFolder", "model.getCreateRootFolder", "model.getCreateRootFolder", "GKSystem.getSystem"], "function", ["None"], ["", "def", "get_state_folder", "(", "model", ")", ":", "\n", "    ", "\"\"\"Return traffic state folder.\n\n    If the folder doesn't exist, a new folder will be created.\n\n    Parameters\n    ----------\n    model : GKModel\n        Aimsun model object\n\n    Returns\n    -------\n    GKFolder\n        an Aimsun folder object which contains traffic state.\n    \"\"\"", "\n", "folder_name", "=", "\"GKModel::trafficStates\"", "\n", "folder", "=", "model", ".", "getCreateRootFolder", "(", ")", ".", "findFolder", "(", "folder_name", ")", "\n", "if", "folder", "is", "None", ":", "\n", "        ", "folder", "=", "GKSystem", ".", "getSystem", "(", ")", ".", "createFolder", "(", "\n", "model", ".", "getCreateRootFolder", "(", ")", ",", "folder_name", ")", "\n", "", "return", "folder", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.create_state": [[472, 492], ["GKSystem.getSystem().newObject", "GKSystem.getSystem().newObject.setName", "generate.get_state_folder", "get_state_folder.append", "GKSystem.getSystem"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.get_state_folder", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "create_state", "(", "model", ",", "name", ")", ":", "\n", "    ", "\"\"\"Create a traffic state object.\n\n    Parameters\n    ----------\n    model : GKModel\n        Aimsun model object\n    name : str\n        name of the traffic state\n\n    Returns\n    -------\n    GKTrafficState\n        an Aimsun traffic state object\n    \"\"\"", "\n", "state", "=", "GKSystem", ".", "getSystem", "(", ")", ".", "newObject", "(", "\"GKTrafficState\"", ",", "model", ")", "\n", "state", ".", "setName", "(", "name", ")", "\n", "folder", "=", "get_state_folder", "(", "model", ")", "\n", "folder", ".", "append", "(", "state", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.get_demand_folder": [[494, 515], ["model.getCreateRootFolder().findFolder", "GKSystem.getSystem().createFolder", "model.getCreateRootFolder", "model.getCreateRootFolder", "GKSystem.getSystem"], "function", ["None"], ["", "def", "get_demand_folder", "(", "model", ")", ":", "\n", "    ", "\"\"\"Return traffic demand folder.\n\n    If the folder doesn't exist, a new folder will be created.\n\n    Parameters\n    ----------\n    model : GKModel\n        Aimsun model object\n\n    Returns\n    -------\n    GKFolder\n        an Aimsun folder object which contains traffic demand.\n    \"\"\"", "\n", "folder_name", "=", "\"GKModel::trafficDemands\"", "\n", "folder", "=", "model", ".", "getCreateRootFolder", "(", ")", ".", "findFolder", "(", "folder_name", ")", "\n", "if", "folder", "is", "None", ":", "\n", "        ", "folder", "=", "GKSystem", ".", "getSystem", "(", ")", ".", "createFolder", "(", "\n", "model", ".", "getCreateRootFolder", "(", ")", ",", "folder_name", ")", "\n", "", "return", "folder", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.create_traffic_demand": [[517, 539], ["GKSystem.getSystem().newObject", "GKSystem.getSystem().newObject.setName", "generate.get_demand_folder", "get_demand_folder.append", "GKSystem.getSystem"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.get_demand_folder", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "create_traffic_demand", "(", "model", ",", "name", ")", ":", "\n", "    ", "\"\"\"Create a traffic demand object.\n\n    If the folder doesn't exist, a new folder will be created.\n\n    Parameters\n    ----------\n    model : GKModel\n        Aimsun model object\n    name : str\n        name of the traffic state\n\n    Returns\n    -------\n    GKTrafficDemand\n        an Aimsun traffic demand object\n    \"\"\"", "\n", "demand", "=", "GKSystem", ".", "getSystem", "(", ")", ".", "newObject", "(", "\"GKTrafficDemand\"", ",", "model", ")", "\n", "demand", ".", "setName", "(", "name", ")", "\n", "folder", "=", "get_demand_folder", "(", "model", ")", "\n", "folder", ".", "append", "(", "demand", ")", "\n", "return", "demand", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.set_demand_item": [[541, 563], ["item.getVehicle", "model.getLog().addError", "GKScheduleDemandItem", "GKScheduleDemandItem.setTrafficDemandItem", "GKScheduleDemandItem.setFrom", "GKScheduleDemandItem.setDuration", "demand.addToSchedule", "model.getLog"], "function", ["None"], ["", "def", "set_demand_item", "(", "model", ",", "demand", ",", "item", ")", ":", "\n", "    ", "\"\"\"Set a traffic demand item.\n\n    Parameters\n    ----------\n    model : GKModel\n        Aimsun model object\n    demand : GKTrafficDemand\n        an Aimsun traffic demand object\n    item : GKTrafficDemandItem\n        a traffic item which is valid for a vehicle type and a time interval\n    \"\"\"", "\n", "if", "item", ".", "getVehicle", "(", ")", "is", "None", ":", "\n", "        ", "model", ".", "getLog", "(", ")", ".", "addError", "(", "\"Invalid Demand Item: no vehicle\"", ")", "\n", "", "else", ":", "\n", "        ", "schedule", "=", "GKScheduleDemandItem", "(", ")", "\n", "schedule", ".", "setTrafficDemandItem", "(", "item", ")", "\n", "# Starts at 8:00:00 AM", "\n", "schedule", ".", "setFrom", "(", "8", "*", "3600", ")", "\n", "# Duration: 500 hour", "\n", "schedule", ".", "setDuration", "(", "500", "*", "3600", ")", "\n", "demand", ".", "addToSchedule", "(", "schedule", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.set_state_vehicle": [[565, 582], ["model.getCatalog().findByName", "state.setVehicle", "model.getType", "model.getCatalog"], "function", ["None"], ["", "", "def", "set_state_vehicle", "(", "model", ",", "state", ",", "veh_type_name", ")", ":", "\n", "    ", "\"\"\"Set state vehicle type.\n\n    Parameters\n    ----------\n    model : GKModel\n        Aimsun model object\n    state : GKTrafficState\n        an Aimsun traffic state object\n    veh_type_name : str\n        name of the vehicle type\n    \"\"\"", "\n", "# find vehicle type", "\n", "veh_type", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "veh_type_name", ",", "model", ".", "getType", "(", "\"GKVehicle\"", ")", ")", "\n", "# set state vehicles", "\n", "state", ".", "setVehicle", "(", "veh_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.set_vehicles_color": [[584, 627], ["model.getGeoModel().findMode", "GKSystem.getSystem().newObject.removeAllStyles", "model.getGeoModel().findStyle", "GKSystem.getSystem().newObject.addStyle", "GKSystem.getSystem().newObject", "GKSystem.getSystem().newObject.setInternalName", "GKSystem.getSystem().newObject.setName", "model.getGeoModel().addMode", "GKSystem.getSystem().newObject", "GKSystem.getSystem().newObject.setInternalName", "GKSystem.getSystem().newObject.setName", "GKSystem.getSystem().newObject.setStyleType", "GKSystem.getSystem().newObject.setVariableType", "model.getType", "model.getType.getColumn", "GKSystem.getSystem().newObject.setColumn", "GKColorRamp", "GKColorRamp.setType", "model.getCatalog().getObjectsByType", "model.getGeoModel().addStyle", "model.getGeoModel", "model.getGeoModel", "model.getType", "GKColorRamp.lines", "enumerate", "GKSystem.getSystem", "model.getGeoModel", "GKSystem.getSystem", "model.getCatalog", "len", "model.getCatalog().getObjectsByType.itervalues", "GKSystem.getSystem().newObject.addRange", "GKColorRamp.getColor", "model.getGeoModel", "vehicle.getName"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestObject.getName"], ["", "def", "set_vehicles_color", "(", "model", ")", ":", "\n", "    ", "\"\"\"Set view mode and view style.\n\n    View mode and view style are used to show different vehicle types with\n    different colors. View mode and view style are named\n    \"DYNAMIC: Simulation Vehicles by Vehicle Type\".\n\n    Parameters\n    ----------\n    model : GKModel\n        Aimsun model object\n    \"\"\"", "\n", "view_mode", "=", "model", ".", "getGeoModel", "(", ")", ".", "findMode", "(", "\n", "\"GKViewMode::VehiclesByVehicleType\"", ",", "False", ")", "\n", "if", "view_mode", "is", "None", ":", "\n", "        ", "view_mode", "=", "GKSystem", ".", "getSystem", "(", ")", ".", "newObject", "(", "\"GKViewMode\"", ",", "model", ")", "\n", "view_mode", ".", "setInternalName", "(", "\"GKViewMode::VehiclesByVehicleType\"", ")", "\n", "view_mode", ".", "setName", "(", "\"DYNAMIC: Simulation Vehicles by Vehicle Type\"", ")", "\n", "model", ".", "getGeoModel", "(", ")", ".", "addMode", "(", "view_mode", ")", "\n", "", "view_mode", ".", "removeAllStyles", "(", ")", "\n", "view_style", "=", "model", ".", "getGeoModel", "(", ")", ".", "findStyle", "(", "\n", "\"GKViewModeStyle::VehiclesByVehicleType\"", ")", "\n", "if", "view_style", "is", "None", ":", "\n", "        ", "view_style", "=", "GKSystem", ".", "getSystem", "(", ")", ".", "newObject", "(", "\"GKViewModeStyle\"", ",", "model", ")", "\n", "view_style", ".", "setInternalName", "(", "\"GKViewModeStyle::VehiclesByVehicleType\"", ")", "\n", "view_style", ".", "setName", "(", "\"DYNAMIC: Simulation Vehicles by Vehicle Type\"", ")", "\n", "view_style", ".", "setStyleType", "(", "GKViewModeStyle", ".", "eColor", ")", "\n", "view_style", ".", "setVariableType", "(", "GKViewModeStyle", ".", "eDiscrete", ")", "\n", "sim_type", "=", "model", ".", "getType", "(", "\"GKSimVehicle\"", ")", "\n", "type_col", "=", "sim_type", ".", "getColumn", "(", "\"GKSimVehicle::vehicleTypeAtt\"", ",", "\n", "GKType", ".", "eSearchOnlyThisType", ")", "\n", "view_style", ".", "setColumn", "(", "sim_type", ",", "type_col", ")", "\n", "ramp", "=", "GKColorRamp", "(", ")", "\n", "ramp", ".", "setType", "(", "GKColorRamp", ".", "eRGB", ")", "\n", "vehicles", "=", "model", ".", "getCatalog", "(", ")", ".", "getObjectsByType", "(", "\n", "model", ".", "getType", "(", "\"GKVehicle\"", ")", ")", "\n", "if", "vehicles", "is", "not", "None", ":", "\n", "            ", "ramp", ".", "lines", "(", "len", "(", "vehicles", ")", ")", "\n", "for", "i", ",", "vehicle", "in", "enumerate", "(", "vehicles", ".", "itervalues", "(", ")", ")", ":", "\n", "                ", "color_range", "=", "view_style", ".", "addRange", "(", "vehicle", ".", "getName", "(", ")", ")", "\n", "color_range", ".", "color", "=", "ramp", ".", "getColor", "(", "i", ")", "\n", "", "", "model", ".", "getGeoModel", "(", ")", ".", "addStyle", "(", "view_style", ")", "\n", "", "view_mode", ".", "addStyle", "(", "view_style", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.get_control_plan_folder": [[629, 650], ["model.getCreateRootFolder().findFolder", "GKSystem.getSystem().createFolder", "model.getCreateRootFolder", "model.getCreateRootFolder", "GKSystem.getSystem"], "function", ["None"], ["", "def", "get_control_plan_folder", "(", "model", ")", ":", "\n", "    ", "\"\"\"Return control plan folder.\n\n    If the folder doesn't exist, a new folder will be created.\n\n    Parameters\n    ----------\n    model : GKModel\n        Aimsun model object\n\n    Returns\n    -------\n    GKFolder\n        an Aimsun folder object which contains control plan.\n    \"\"\"", "\n", "folder_name", "=", "\"GKModel::controlPlans\"", "\n", "folder", "=", "model", ".", "getCreateRootFolder", "(", ")", ".", "findFolder", "(", "folder_name", ")", "\n", "if", "folder", "is", "None", ":", "\n", "        ", "folder", "=", "GKSystem", ".", "getSystem", "(", ")", ".", "createFolder", "(", "model", ".", "getCreateRootFolder", "(", ")", ",", "\n", "folder_name", ")", "\n", "", "return", "folder", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.create_control_plan": [[652, 672], ["GKSystem.getSystem().newObject", "GKSystem.getSystem().newObject.setName", "generate.get_control_plan_folder", "get_control_plan_folder.append", "GKSystem.getSystem"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.get_control_plan_folder", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "create_control_plan", "(", "model", ",", "name", ")", ":", "\n", "    ", "\"\"\"Create a traffic control plan object.\n\n    Parameters\n    ----------\n    model : GKModel\n        Aimsun model object\n    name : str\n        name of the control plan\n\n    Returns\n    -------\n    GKControlPlan\n        an Aimsun control plan object\n    \"\"\"", "\n", "control_plan", "=", "GKSystem", ".", "getSystem", "(", ")", ".", "newObject", "(", "\"GKControlPlan\"", ",", "model", ")", "\n", "control_plan", ".", "setName", "(", "name", ")", "\n", "folder", "=", "get_control_plan_folder", "(", "model", ")", "\n", "folder", ".", "append", "(", "control_plan", ")", "\n", "return", "control_plan", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.create_meter": [[674, 700], ["model.getCatalog().findByName", "model.getType", "model.createNewCmd", "model.createNewCmd.init", "model.getCommander().addCommand", "model.createNewCmd.createdObject", "cmd.createdObject.setName", "model.getType", "model.getCatalog().findByName.length2D", "model.getType", "model.getCatalog", "model.getCommander", "model.getCatalog().findByName.getName"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestObject.getName"], ["", "def", "create_meter", "(", "model", ",", "edge", ")", ":", "\n", "    ", "\"\"\"Create a metering object.\n\n    Parameters\n    ----------\n    model : GKModel\n        Aimsun model object\n    edge : str\n        name of the edge\n\n    Returns\n    -------\n    GKSectionObject\n        an Aimsun metering (section object) object\n    \"\"\"", "\n", "section", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "edge", ",", "model", ".", "getType", "(", "\"GKSection\"", ")", ")", "\n", "meter_length", "=", "2", "\n", "pos", "=", "section", ".", "length2D", "(", ")", "-", "meter_length", "\n", "type", "=", "model", ".", "getType", "(", "\"GKMetering\"", ")", "\n", "cmd", "=", "model", ".", "createNewCmd", "(", "model", ".", "getType", "(", "\"GKSectionObject\"", ")", ")", "\n", "# TODO double check the zeros", "\n", "cmd", ".", "init", "(", "type", ",", "section", ",", "0", ",", "0", ",", "pos", ",", "meter_length", ")", "\n", "model", ".", "getCommander", "(", ")", ".", "addCommand", "(", "cmd", ")", "\n", "meter", "=", "cmd", ".", "createdObject", "(", ")", "\n", "meter", ".", "setName", "(", "\"meter_{}\"", ".", "format", "(", "section", ".", "getName", "(", ")", ")", ")", "\n", "return", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.set_metering_times": [[702, 733], ["cp.createControlMetering", "cp.createControlMetering.setControlMeteringType", "cp.createControlMetering.setCycle", "cp.createControlMetering.setGreen", "cp.createControlMetering.setYellowTime", "cp.createControlMetering.setOffset", "cp.createControlMetering.setMinGreen", "cp.createControlMetering.setMaxGreen"], "function", ["None"], ["", "def", "set_metering_times", "(", "\n", "cp", ",", "meter", ",", "cycle", ",", "green", ",", "yellow", ",", "offset", ",", "min_green", ",", "max_green", ")", ":", "\n", "    ", "\"\"\"Set a meter timing plan.\n\n    Parameters\n    ----------\n    cp : GKControlPlan\n        an aimsun control plan object\n    meter : GKSectionObject\n        an Aimsun metering (section object) object\n    cycle : int\n        cycle length\n    green : int\n        green phase duration\n    yellow : int\n        yellow phase duration\n    offset : int\n        offset duration\n    min_green : int\n        minimum green phase duration\n    max_green : int\n        maximum green phase duration\n    \"\"\"", "\n", "cp_meter", "=", "cp", ".", "createControlMetering", "(", "meter", ")", "\n", "cp_meter", ".", "setControlMeteringType", "(", "GKControlMetering", ".", "eExternal", ")", "\n", "cp_meter", ".", "setCycle", "(", "cycle", ")", "\n", "cp_meter", ".", "setGreen", "(", "green", ")", "\n", "cp_meter", ".", "setYellowTime", "(", "yellow", ")", "\n", "cp_meter", ".", "setOffset", "(", "offset", ")", "\n", "cp_meter", ".", "setMinGreen", "(", "min_green", ")", "\n", "cp_meter", ".", "setMaxGreen", "(", "max_green", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.create_node_meters": [[735, 782], ["signal_groups.items", "signal_groups.items", "int", "int", "int", "int", "signal_groups[].append", "int", "int", "generate.create_meter", "generate.set_metering_times", "meters.append"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.create_meter", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.set_metering_times", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "create_node_meters", "(", "model", ",", "cp", ",", "node_id", ",", "phases", ")", ":", "\n", "    ", "\"\"\"Create meters for a node.\n\n    Parameters\n    ----------\n    model:\n    cp : GKControlPlan\n        an aimsun control plan object\n    node_id : str\n        node ID\n    phases :  list  of dict\n        list of phases to be followed by the traffic light\n\n    Returns\n    -------\n    list of GKSectionObject\n        list of meters in the node\n    \"\"\"", "\n", "meters", "=", "[", "]", "\n", "signal_groups", "=", "{", "}", "\n", "for", "connection", "in", "connections", "[", "node_id", "]", ":", "\n", "        ", "if", "connection", "[", "\"signal_group\"", "]", "in", "signal_groups", ":", "\n", "            ", "signal_groups", "[", "\n", "connection", "[", "\"signal_group\"", "]", "]", ".", "append", "(", "connection", "[", "\"from\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "signal_groups", "[", "connection", "[", "\"signal_group\"", "]", "]", "=", "[", "connection", "[", "\"from\"", "]", "]", "\n", "\n", "# get cycle length", "\n", "", "", "cycle", "=", "0", "\n", "for", "signal_group", ",", "edges", "in", "signal_groups", ".", "items", "(", ")", ":", "\n", "        ", "cycle", "+=", "int", "(", "phases", "[", "signal_group", "]", "[", "\"duration\"", "]", ")", "+", "int", "(", "phases", "[", "signal_group", "]", "[", "\"yellow\"", "]", ")", "\n", "\n", "# set a meter for each edge in each signal group cycle length", "\n", "", "sum_phases", "=", "0", "\n", "for", "signal_group", ",", "edges", "in", "signal_groups", ".", "items", "(", ")", ":", "\n", "        ", "green", "=", "int", "(", "phases", "[", "signal_group", "]", "[", "\"duration\"", "]", ")", "\n", "yellow", "=", "int", "(", "phases", "[", "signal_group", "]", "[", "\"yellow\"", "]", ")", "\n", "min_green", "=", "int", "(", "phases", "[", "signal_group", "]", "[", "\"minDur\"", "]", ")", "\n", "max_green", "=", "int", "(", "phases", "[", "signal_group", "]", "[", "\"maxDur\"", "]", ")", "\n", "for", "edge", "in", "edges", ":", "\n", "            ", "meter", "=", "create_meter", "(", "model", ",", "edge", ")", "\n", "set_metering_times", "(", "cp", ",", "meter", ",", "cycle", ",", "green", ",", "yellow", ",", "\n", "sum_phases", ",", "min_green", ",", "max_green", ")", "\n", "meters", ".", "append", "(", "meter", ")", "\n", "", "sum_phases", "+=", "green", "+", "yellow", "\n", "", "return", "meters", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.generate.set_sim_step": [[784, 798], ["model.getColumn", "experiment.setDataValue"], "function", ["None"], ["", "def", "set_sim_step", "(", "experiment", ",", "sim_step", ")", ":", "\n", "    ", "\"\"\"Set the simulation step of an Aimsun experiment.\n\n    Parameters\n    ----------\n    experiment : GKTExperiment\n        the experiment object\n    sim_step : float\n        desired simulation step\n    \"\"\"", "\n", "# Get Simulation Step attribute column", "\n", "col_sim", "=", "model", ".", "getColumn", "(", "'GKExperiment::simStepAtt'", ")", "\n", "# Set new simulation step value", "\n", "experiment", ".", "setDataValue", "(", "col_sim", ",", "sim_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.__init__": [[29, 67], ["scripting_api.AimsunTemplate.GKGUISystem.getGUISystem().getActiveGui", "scripting_api.AimsunTemplate.gui.getActiveModel", "scripting_api.AimsunTemplate.GKGUISystem.getGUISystem"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestGUISystemBase.getActiveGui", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestGUISystemBase.getActiveModel", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestGUISystemBase.getGUISystem"], ["def", "__init__", "(", "self", ",", "GKSystem", ",", "GKGUISystem", ")", ":", "\n", "        ", "\"\"\"Initialize the template.\n\n        This assumes that Aimsun is open, as it will try to access the\n        current active Aimsun window.\n\n        After that, this class provides different methods to manipulate\n        templates in this Aimsun window:\n        (1) to load a template, see 'load_template'\n        (2) to create a new template by duplicating an existing one, see\n            'duplicate_template'\n        (3) to create a new blank template, see 'new_template'\n        (4) if the template you want to use is already open in the Aimsun\n            window, then you don't have to do annything\n\n        In cases (2) and (3), see 'save' to then save the template.\n\n        Parameters\n        ----------\n        GKSystem : GKSystem (Aimsun singleton class)\n            Aimsun's GKSystem object\n        GKGUISystem : GKGUISystem (Aimsun singleton class)\n            Aimsun's GKGUISystem object\n\n        Note\n        ----\n        This class takes as parameter the two high-level objects provided\n        when interfacing with Aimsun: GKSystem and GKGUISystem. After having\n        imported this class, you should be able to create an AimsunTemplate\n        object as follows:\n\n            model = AimsunTemplate(GKSystem, GKGUISystem)\n        \"\"\"", "\n", "self", ".", "GKSystem", "=", "GKSystem", "\n", "self", ".", "GKGUISystem", "=", "GKGUISystem", "\n", "\n", "self", ".", "gui", "=", "self", ".", "GKGUISystem", ".", "getGUISystem", "(", ")", ".", "getActiveGui", "(", ")", "\n", "self", ".", "model", "=", "self", ".", "gui", ".", "getActiveModel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.load": [[68, 79], ["scripting_api.AimsunTemplate.gui.loadNetwork", "scripting_api.AimsunTemplate.gui.getActiveModel", "scripting_api.AimsunTemplate.__wrap_object"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestGUISystemBase.getActiveModel", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.__wrap_object"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Load an existing template into Aimsun.\n\n        Parameters\n        ----------\n        path : str\n            the path of the template to load\n        \"\"\"", "\n", "self", ".", "gui", ".", "loadNetwork", "(", "path", ")", "\n", "self", ".", "model", "=", "self", ".", "gui", ".", "getActiveModel", "(", ")", "\n", "self", ".", "__wrap_object", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.new_duplicate": [[80, 91], ["scripting_api.AimsunTemplate.gui.newDoc", "scripting_api.AimsunTemplate.gui.getActiveModel", "scripting_api.AimsunTemplate.__wrap_object"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestGUISystemBase.getActiveModel", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.__wrap_object"], ["", "def", "new_duplicate", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Create a new template by duplicating an existing one.\n\n        Parameters\n        ----------\n        path : str\n            the path of the template to be duplicated\n        \"\"\"", "\n", "self", ".", "gui", ".", "newDoc", "(", "path", ")", "\n", "self", ".", "model", "=", "self", ".", "gui", ".", "getActiveModel", "(", ")", "\n", "self", ".", "__wrap_object", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.new_empty": [[92, 97], ["scripting_api.AimsunTemplate.gui.newSimpleDoc", "scripting_api.AimsunTemplate.gui.getActiveModel", "scripting_api.AimsunTemplate.__wrap_object"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestGUISystemBase.getActiveModel", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.__wrap_object"], ["", "def", "new_empty", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create a new empty template.\"\"\"", "\n", "self", ".", "gui", ".", "newSimpleDoc", "(", ")", "\n", "self", ".", "model", "=", "self", ".", "gui", ".", "getActiveModel", "(", ")", "\n", "self", ".", "__wrap_object", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.save": [[98, 107], ["scripting_api.AimsunTemplate.gui.saveAs"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Save the current template.\n\n        Parameters\n        ----------\n        path : str\n            the path where the current active template should be saved\n        \"\"\"", "\n", "self", ".", "gui", ".", "saveAs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.run_replication": [[108, 123], ["scripting_api.AimsunTemplate.GKSystem.getSystem().executeAction", "scripting_api.AimsunTemplate.GKSystem.getSystem"], "methods", ["None"], ["", "def", "run_replication", "(", "self", ",", "replication", ",", "render", "=", "True", ")", ":", "\n", "        ", "\"\"\"Run a replication in Aimsun.\n\n        Parameters\n        ----------\n        replication : GKReplication\n            the replication to be run; you can access the list of all available\n            GKReplication objects by doing model.replications where\n            model is an instance of the AimsunTemplate class.\n        render : bool (default: True)\n            whether or not the simulation should be rendered\n        \"\"\"", "\n", "# \"play\": run with GUI; \"execute\": run in batch mode", "\n", "mode", "=", "'play'", "if", "render", "else", "'execute'", "\n", "self", ".", "GKSystem", ".", "getSystem", "(", ")", ".", "executeAction", "(", "mode", ",", "replication", ",", "[", "]", ",", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.__getattr__": [[128, 140], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Return object attribute.\n\n        If trying to access an attribute in this AimsunTemplate object\n        fails, try to access it into the Aimsun model object\n\n        Parameters\n        ----------\n        name : str\n            name of the attribute to be retrieved\n        \"\"\"", "\n", "return", "getattr", "(", "self", ".", "model", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.__wrap_object": [[141, 236], ["str[].upper", "map", "name[].lower", "object.__getattribute__", "object.__getattribute__.", "object.__getattribute__", "object.__getattribute__.", "name.split", "type", "map", "scripting_api.AimsunTemplate.__wrap_object", "object.__setattr__", "object.__getattribute__", "map", "AttributeError", "name.split"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.__wrap_object"], ["", "def", "__wrap_object", "(", "self", ",", "obj", ")", ":", "\n", "        ", "\"\"\"Wrap Aimsun objects with custom __getattr__ and __setattr__ methods.\n\n        This provides a more pythonic attribute access and attribute\n        modification.\n\n        Parameters\n        ----------\n        obj : GKObject (Aimsun class)\n            the object to wrap\n\n        Examples of what this method does:\n        - s.getSpeed() becomes s.speed\n        - t.getDestination().getName() becomes t.destination.name\n        - t.getPolygon().length2D() becomes t.polygon.length2D()\n        - exp.setDataValue(model.getColumn(...), ...) becomes\n          exp.set_data_value(model.get_column(...), ...)\n        - s.setName(new_name) becomes s.name = new_name\n        etc.\n\n        Notes\n        -----\n        - This method directly modifies the object and does not return anything\n        - For back-compatibility, it is still possible to call the original\n          Aimsun methods\n        \"\"\"", "\n", "if", "obj", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "# custom capitalize function that doesn't lowercase the suffix", "\n", "", "def", "capitalize", "(", "str", ")", ":", "\n", "            ", "return", "str", "[", "0", "]", ".", "upper", "(", ")", "+", "str", "[", "1", ":", "]", "\n", "\n", "", "outer_self", "=", "self", "\n", "\n", "def", "custom_getattr", "(", "self", ",", "name", ")", ":", "\n", "# transform name from attr_name to AttrName", "\n", "            ", "name", "=", "''", ".", "join", "(", "map", "(", "capitalize", ",", "name", ".", "split", "(", "'_'", ")", ")", ")", "\n", "\n", "# attempt to retrieve getAttrName, or attrName if the first fails", "\n", "name1", "=", "'get'", "+", "name", "\n", "name2", "=", "name", "[", "0", "]", ".", "lower", "(", ")", "+", "name", "[", "1", ":", "]", "\n", "try", ":", "\n", "                ", "aimsun_fct", "=", "object", ".", "__getattribute__", "(", "self", ",", "name1", ")", "\n", "", "except", "AttributeError", ":", "\n", "                ", "try", ":", "\n", "                    ", "aimsun_fct", "=", "object", ".", "__getattribute__", "(", "self", ",", "name2", ")", "\n", "", "except", "AttributeError", ":", "\n", "# if both attempts fail, raise an AttributeError with", "\n", "# the original attribute name (instead of name1 or name2)", "\n", "                    ", "raise", "AttributeError", "(", "\n", "'\\'{}\\' has no attribute \\'{}\\''", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "name", ")", ")", "\n", "\n", "# call the Aimsun function (which most likely is a getter)", "\n", "", "", "try", ":", "\n", "                ", "result", "=", "aimsun_fct", "(", ")", "\n", "", "except", "TypeError", ":", "\n", "# if it is not a function, just return the attribute", "\n", "                ", "result", "=", "aimsun_fct", "\n", "\n", "# wrap whatever object the getter returns, so that we can access", "\n", "# deeper attributes (e.g. turning.destination.name)", "\n", "", "try", ":", "\n", "                ", "if", "type", "(", "result", ")", "is", "list", ":", "\n", "                    ", "map", "(", "outer_self", ".", "__wrap_object", ",", "result", ")", "\n", "", "else", ":", "\n", "                    ", "outer_self", ".", "__wrap_object", "(", "result", ")", "\n", "", "", "except", "TypeError", ":", "\n", "# we can't wrap a basic type like int; ignore the exception", "\n", "                ", "pass", "\n", "\n", "", "return", "result", "\n", "\n", "# assign this custom __getattr__ function to the object", "\n", "# note that it will only be called if __getattribute__ fails,", "\n", "# so we can still call the original Aimsun functions like s.getName()", "\n", "", "obj", ".", "__class__", ".", "__getattr__", "=", "custom_getattr", "\n", "\n", "def", "custom_setattr", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "            ", "try", ":", "\n", "# transform name from attr_name to setAttrName", "\n", "                ", "aimsun_name", "=", "'set'", "+", "''", ".", "join", "(", "map", "(", "capitalize", ",", "name", ".", "split", "(", "'_'", ")", ")", ")", "\n", "# retrieve the Aimsun setter", "\n", "aimsun_setter", "=", "object", ".", "__getattribute__", "(", "self", ",", "aimsun_name", ")", "\n", "# call the setter to set the new value to attribute 'name'", "\n", "aimsun_setter", "(", "value", ")", "\n", "", "except", "AttributeError", ":", "\n", "# if we couldn't retrieve an Aimsun setter, we set the", "\n", "# attribute manually", "\n", "                ", "object", ".", "__setattr__", "(", "self", ",", "name", ",", "value", ")", "\n", "", "return", "value", "\n", "\n", "# assign this custom __setattr__ function to the object", "\n", "", "obj", ".", "__class__", ".", "__setattr__", "=", "custom_setattr", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.__wrap_objects": [[237, 247], ["map"], "methods", ["None"], ["", "def", "__wrap_objects", "(", "self", ",", "objects", ")", ":", "\n", "        ", "\"\"\"See __wrap_object.\n\n        Parameters\n        ----------\n        objects : GKObject (Aimsun class) list\n            list of objects to wrap (IMPORTANT: all the objects in the list\n            must be of the same type)\n        \"\"\"", "\n", "map", "(", "self", ".", "__wrap_object", ",", "objects", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.__get_objects_by_type": [[248, 264], ["scripting_api.AimsunTemplate.model.getType", "scripting_api.AimsunTemplate.model.getCatalog().getObjectsByType().values", "scripting_api.AimsunTemplate.__wrap_objects", "scripting_api.AimsunTemplate.model.getCatalog().getObjectsByType", "scripting_api.AimsunTemplate.model.getCatalog"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.__wrap_objects"], ["", "def", "__get_objects_by_type", "(", "self", ",", "type_name", ")", ":", "\n", "        ", "\"\"\"Simplify getter for Aimsun objects.\n\n        Parameters\n        ----------\n        type_name : str\n\n        Returns\n        -------\n        GKObject (Aimsun class) list\n            list of all Aimsun objects whose type is type_name\n        \"\"\"", "\n", "type_obj", "=", "self", ".", "model", ".", "getType", "(", "type_name", ")", "\n", "objects", "=", "self", ".", "model", ".", "getCatalog", "(", ")", ".", "getObjectsByType", "(", "type_obj", ")", ".", "values", "(", ")", "\n", "self", ".", "__wrap_objects", "(", "objects", ")", "\n", "return", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.find_by_name": [[265, 283], ["next", "scripting_api.AimsunTemplate.__wrap_object", "obj.getName"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.__wrap_object", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestObject.getName"], ["", "def", "find_by_name", "(", "self", ",", "objects", ",", "name", ")", ":", "\n", "        ", "\"\"\"Find an Aimsun object by its name.\n\n        Parameters\n        ----------\n        objects : GKObject (Aimsun type) list\n            list of objects to search into\n        name : str\n            name of the object to look for\n\n        Returns\n        -------\n        the first object in the list 'objects' whose name is 'name'\n        \"\"\"", "\n", "matches", "=", "(", "obj", "for", "obj", "in", "objects", "if", "obj", ".", "getName", "(", ")", "==", "name", ")", "\n", "ret", "=", "next", "(", "matches", ",", "None", ")", "\n", "self", ".", "__wrap_object", "(", "ret", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.find_all_by_type": [[284, 301], ["scripting_api.AimsunTemplate.__wrap_objects", "obj.getTypeName"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.__wrap_objects", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestObject.getTypeName"], ["", "def", "find_all_by_type", "(", "self", ",", "objects", ",", "type_name", ")", ":", "\n", "        ", "\"\"\"Find Aimsun objects by their type.\n\n        Parameters\n        ----------\n        objects : GKObject (Aimsun type) list\n            list of objects to search into\n        type_name : str\n            name of the type to look for\n\n        Returns\n        -------\n        all objects in the list 'objects' whose type's name is 'type_name'\n        \"\"\"", "\n", "matches", "=", "[", "obj", "for", "obj", "in", "objects", "if", "obj", ".", "getTypeName", "(", ")", "==", "type_name", "]", "\n", "self", ".", "__wrap_objects", "(", "matches", ")", "\n", "return", "matches", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.sections": [[302, 314], ["scripting_api.AimsunTemplate.__get_objects_by_type"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.__get_objects_by_type"], ["", "@", "property", "\n", "def", "sections", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return Aimsun GKSection attribute.\n\n        A section is a group of contiguous lanes where vehicles move in the\n        same direction. The partition of the traffic network into sections is\n        usually governed by the physical boundaries of the area and the\n        existence of turn movements. In an urban network, a section corresponds\n        closely to the road from one intersection to the next. In a freeway\n        area, a section can be the part of the road between two ramps.\n        \"\"\"", "\n", "return", "self", ".", "__get_objects_by_type", "(", "'GKSection'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.nodes": [[315, 326], ["scripting_api.AimsunTemplate.__get_objects_by_type"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.__get_objects_by_type"], ["", "@", "property", "\n", "def", "nodes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return Aimsun GKTurning attribute.\n\n        A node is a point or an area in the network where vehicles change their\n        direction and/or disperse. Hence, a node has one or more origin\n        sections and one or more destination sections. Each node has a turns\n        list, which determines the possible exits of a vehicle entering the\n        nodes.\n        \"\"\"", "\n", "return", "self", ".", "__get_objects_by_type", "(", "'GKNode'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.turnings": [[327, 335], ["scripting_api.AimsunTemplate.__get_objects_by_type"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.__get_objects_by_type"], ["", "@", "property", "\n", "def", "turnings", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return Aimsun GKSection attribute.\n\n        This object is responsible for connecting some (or all) lanes between\n        two sections.\n        \"\"\"", "\n", "return", "self", ".", "__get_objects_by_type", "(", "'GKTurning'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.cen_connections": [[336, 344], ["scripting_api.AimsunTemplate.__get_objects_by_type"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.__get_objects_by_type"], ["", "@", "property", "\n", "def", "cen_connections", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return Aimsun GKCenConnection attribute.\n\n        This contains information of a connection between an object and a\n        centroid.\n        \"\"\"", "\n", "return", "self", ".", "__get_objects_by_type", "(", "'GKCenConnection'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.replications": [[345, 354], ["scripting_api.AimsunTemplate.__get_objects_by_type"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.__get_objects_by_type"], ["", "@", "property", "\n", "def", "replications", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return Aimsun GKReplication attribute.\n\n        A replication used by the Aimsun Next Simulators. They are the result\n        of a single simulation and they are groupped in experiment averages\n        (GKExperimentResult).\n        \"\"\"", "\n", "return", "self", ".", "__get_objects_by_type", "(", "'GKReplication'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.centroid_configurations": [[355, 363], ["scripting_api.AimsunTemplate.__get_objects_by_type"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.__get_objects_by_type"], ["", "@", "property", "\n", "def", "centroid_configurations", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return Aimsun GKCentroidConfiguration attribute.\n\n        This object is a centroid set, which is appropriate to simulate either\n        a part of the network or the whole network.\n        \"\"\"", "\n", "return", "self", ".", "__get_objects_by_type", "(", "'GKCentroidConfiguration'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.problem_nets": [[364, 376], ["scripting_api.AimsunTemplate.__get_objects_by_type"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.__get_objects_by_type"], ["", "@", "property", "\n", "def", "problem_nets", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return Aimsun GKProblemNet attribute.\n\n        A subnetwork is an area in a (very large) network that will be studied\n        with more detail using a dynamic simulator (usually a micro one).\n\n        The area is selected either as a polygon or as a set of sections. From\n        that information is possible to extract all the objects delimited by\n        the subnetwork.\n        \"\"\"", "\n", "return", "self", ".", "__get_objects_by_type", "(", "'GKProblemNet'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.load.load_network": [[11, 21], ["load.get_dict_from_objects"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.load.get_dict_from_objects"], ["def", "load_network", "(", ")", ":", "\n", "    ", "\"\"\"Load the whole network into a dictionary and returns it.\"\"\"", "\n", "sections", "=", "model", ".", "sections", "\n", "nodes", "=", "model", ".", "nodes", "\n", "turnings", "=", "model", ".", "turnings", "\n", "cen_connections", "=", "model", ".", "cen_connections", "\n", "\n", "scenario_data", "=", "get_dict_from_objects", "(", "sections", ",", "nodes", ",", "turnings", ",", "\n", "cen_connections", ")", "\n", "return", "scenario_data", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.load.load_subnetwork": [[23, 36], ["list", "model.find_all_by_type", "model.find_all_by_type", "model.find_all_by_type", "model.find_all_by_type", "load.get_dict_from_objects", "subnetwork.classify_objects"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.find_all_by_type", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.find_all_by_type", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.find_all_by_type", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.find_all_by_type", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.load.get_dict_from_objects"], ["", "def", "load_subnetwork", "(", "subnetwork", ",", "scenario", ")", ":", "\n", "    ", "\"\"\"Load subnetwork into a dictionary and returns it.\"\"\"", "\n", "# get all objects in subnetwork", "\n", "objs", "=", "list", "(", "subnetwork", ".", "classify_objects", "(", "scenario", ".", "id", ")", ")", "\n", "\n", "sections", "=", "model", ".", "find_all_by_type", "(", "objs", ",", "'GKSection'", ")", "\n", "nodes", "=", "model", ".", "find_all_by_type", "(", "objs", ",", "'GKNode'", ")", "\n", "turnings", "=", "model", ".", "find_all_by_type", "(", "objs", ",", "'GKTurning'", ")", "\n", "cen_connections", "=", "model", ".", "find_all_by_type", "(", "objs", ",", "'GKCenConnection'", ")", "\n", "\n", "scenario_data", "=", "get_dict_from_objects", "(", "sections", ",", "nodes", ",", "turnings", ",", "\n", "cen_connections", ")", "\n", "return", "scenario_data", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.load.get_dict_from_objects": [[38, 124], ["model.find_by_name", "print", "s.length2D", "len", "t.polygon.length2D"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.find_by_name"], ["", "def", "get_dict_from_objects", "(", "sections", ",", "nodes", ",", "turnings", ",", "cen_connections", ")", ":", "\n", "    ", "\"\"\"Load all relevant data into dictionaries.\"\"\"", "\n", "scenario_data", "=", "{", "\n", "'sections'", ":", "{", "}", ",", "\n", "'nodes'", ":", "{", "}", ",", "\n", "'turnings'", ":", "{", "}", ",", "\n", "'centroids'", ":", "{", "}", ",", "\n", "'connections'", ":", "{", "}", "\n", "}", "\n", "\n", "# load centroids", "\n", "# TODO use centroids when we don't have a centroid configuration", "\n", "# centroids = [o for o in objs if o.getTypeName() == 'GKCentroid']", "\n", "# FIXME doesn't handle centroids that are both in and out", "\n", "# maybe no need to distinguish them since it is done", "\n", "# later with centroid connections", "\n", "centroid_config_name", "=", "data", "[", "'centroid_config_name'", "]", "\n", "centroid_config", "=", "model", ".", "find_by_name", "(", "model", ".", "centroid_configurations", ",", "\n", "centroid_config_name", ")", "\n", "if", "not", "centroid_config", ":", "\n", "        ", "print", "(", "'[load.py] ERROR: Centroid configuration '", "+", "\n", "centroid_config_name", "+", "' does not exist.'", ")", "\n", "", "else", ":", "\n", "# load origin centroids only if they exist", "\n", "        ", "if", "centroid_config", ".", "origin_centroids", ":", "\n", "            ", "for", "c", "in", "centroid_config", ".", "origin_centroids", ":", "\n", "                ", "scenario_data", "[", "'centroids'", "]", "[", "c", ".", "id", "]", "=", "{", "'type'", ":", "'in'", "}", "\n", "\n", "# load destination centroids only if they exist", "\n", "", "", "if", "centroid_config", ".", "destination_centroids", ":", "\n", "            ", "for", "c", "in", "centroid_config", ".", "destination_centroids", ":", "\n", "                ", "scenario_data", "[", "'centroids'", "]", "[", "c", ".", "id", "]", "=", "{", "'type'", ":", "'out'", "}", "\n", "\n", "# load sections", "\n", "", "", "", "for", "s", "in", "sections", ":", "\n", "        ", "scenario_data", "[", "'sections'", "]", "[", "s", ".", "id", "]", "=", "{", "\n", "'name'", ":", "s", ".", "name", ",", "\n", "'numLanes'", ":", "s", ".", "nb_full_lanes", ",", "\n", "'length'", ":", "s", ".", "length2D", "(", ")", ",", "\n", "'speed'", ":", "s", ".", "speed", "\n", "}", "\n", "\n", "# load nodes", "\n", "", "for", "n", "in", "nodes", ":", "\n", "        ", "scenario_data", "[", "'nodes'", "]", "[", "n", ".", "id", "]", "=", "{", "\n", "'name'", ":", "n", ".", "name", ",", "\n", "'nb_turnings'", ":", "len", "(", "n", ".", "turnings", ")", "\n", "}", "\n", "\n", "# load turnings", "\n", "", "for", "t", "in", "turnings", ":", "\n", "        ", "scenario_data", "[", "'turnings'", "]", "[", "t", ".", "id", "]", "=", "{", "\n", "'name'", ":", "t", ".", "name", ",", "\n", "'length'", ":", "t", ".", "polygon", ".", "length2D", "(", ")", "/", "2", ",", "# FIXME not totally accurate", "\n", "'origin_section_name'", ":", "t", ".", "origin", ".", "name", ",", "\n", "'origin_section_id'", ":", "t", ".", "origin", ".", "id", ",", "\n", "'dest_section_name'", ":", "t", ".", "destination", ".", "name", ",", "\n", "'dest_section_id'", ":", "t", ".", "destination", ".", "id", ",", "\n", "'node_id'", ":", "t", ".", "node", ".", "id", ",", "\n", "'max_speed'", ":", "t", ".", "speed", ",", "\n", "'origin_from_lane'", ":", "t", ".", "origin_from_lane", ",", "\n", "'origin_to_lane'", ":", "t", ".", "origin_to_lane", ",", "\n", "'dest_from_lane'", ":", "t", ".", "destination_from_lane", ",", "\n", "'dest_to_lane'", ":", "t", ".", "destination_to_lane", "\n", "}", "\n", "\n", "# load centroid connections", "\n", "", "for", "c", "in", "cen_connections", ":", "\n", "        ", "from_id", "=", "c", ".", "owner", ".", "id", "\n", "from_name", "=", "c", ".", "owner", ".", "name", "\n", "to_id", "=", "c", ".", "connection_object", ".", "id", "\n", "to_name", "=", "c", ".", "connection_object", ".", "name", "\n", "\n", "# invert from and to if connection is reversed", "\n", "if", "c", ".", "connection_type", "==", "1", ":", "# TODO verify this", "\n", "            ", "from_id", ",", "to_id", "=", "to_id", ",", "from_id", "\n", "from_name", ",", "to_name", "=", "to_name", ",", "from_name", "\n", "\n", "", "scenario_data", "[", "'connections'", "]", "[", "c", ".", "id", "]", "=", "{", "\n", "'from_id'", ":", "from_id", ",", "\n", "'from_name'", ":", "from_name", ",", "\n", "'to_id'", ":", "to_id", ",", "\n", "'to_name'", ":", "to_name", "\n", "}", "\n", "\n", "", "return", "scenario_data", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.__init__": [[66, 76], ["api.create_client"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.create_client"], ["def", "__init__", "(", "self", ",", "port", ")", ":", "\n", "        ", "\"\"\"Instantiate the API.\n\n        Parameters\n        ----------\n        port : int\n            the port number of the socket connection\n        \"\"\"", "\n", "self", ".", "port", "=", "port", "\n", "self", ".", "s", "=", "create_client", "(", "port", ",", "print_status", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command": [[77, 156], ["api.FlowAimsunAPI.s.send", "struct.Struct", "str().encode", "api.FlowAimsunAPI.s.recv", "api.FlowAimsunAPI.s.send", "api.FlowAimsunAPI.s.send", "struct.Struct", "struct.Struct.pack", "api.FlowAimsunAPI.s.send", "str.encode", "struct.Struct", "struct.Struct.unpack", "str", "str.encode", "api.FlowAimsunAPI.decode", "api.FlowAimsunAPI.s.send", "struct.Struct", "api.FlowAimsunAPI.s.recv", "api.FlowAimsunAPI.s.recv", "str.encode", "api.FlowAimsunAPI.s.recv", "struct.Struct.unpack"], "methods", ["None"], ["", "def", "_send_command", "(", "self", ",", "command_type", ",", "in_format", ",", "values", ",", "out_format", ")", ":", "\n", "        ", "\"\"\"Send an arbitrary command via the connection.\n\n        Commands are sent in two stages. First, the client sends the command\n        type (e.g. ac.REMOVE_VEHICLE) and waits for a conformation message from\n        the server. Once the confirmation is received, the client send a\n        encoded binary packet that the server will be prepared to decode, and\n        will then receive some return value (either the value the client was\n        requesting or a 0 signifying that the command has been executed. This\n        value is then returned by this method.\n\n        Parameters\n        ----------\n        command_type : flow.utils.aimsun.constants.*\n            the command the client would like Aimsun to execute\n        in_format : str or None\n            format of the input structure\n        values : tuple of Any or None\n            commands to be encoded and issued to the server\n        out_format : str or None\n            format of the output structure\n\n        Returns\n        -------\n        Any\n            the final message received from the Aimsun server\n        \"\"\"", "\n", "# send the command type to the server", "\n", "self", ".", "s", ".", "send", "(", "str", "(", "command_type", ")", ".", "encode", "(", ")", ")", "\n", "\n", "# wait for a response", "\n", "unpacker", "=", "struct", ".", "Struct", "(", "format", "=", "'i'", ")", "\n", "data", "=", "None", "\n", "while", "data", "is", "None", ":", "\n", "            ", "data", "=", "self", ".", "s", ".", "recv", "(", "unpacker", ".", "size", ")", "\n", "\n", "# send the command values", "\n", "", "if", "in_format", "is", "not", "None", ":", "\n", "            ", "if", "in_format", "==", "'str'", ":", "\n", "                ", "self", ".", "s", ".", "send", "(", "str", ".", "encode", "(", "values", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "packer", "=", "struct", ".", "Struct", "(", "format", "=", "in_format", ")", "\n", "packed_data", "=", "packer", ".", "pack", "(", "*", "values", ")", "\n", "self", ".", "s", ".", "send", "(", "packed_data", ")", "\n", "", "", "else", ":", "\n", "# if no command is needed, just send a status response", "\n", "            ", "self", ".", "s", ".", "send", "(", "str", ".", "encode", "(", "'1'", ")", ")", "\n", "\n", "# collect the return values", "\n", "", "if", "out_format", "is", "not", "None", ":", "\n", "            ", "if", "out_format", "==", "'str'", ":", "\n", "                ", "done", "=", "False", "\n", "unpacked_data", "=", "''", "\n", "while", "not", "done", ":", "\n", "# get the next bit of data", "\n", "                    ", "data", "=", "None", "\n", "while", "data", "is", "None", "or", "data", "==", "b''", ":", "\n", "                        ", "data", "=", "self", ".", "s", ".", "recv", "(", "256", ")", "\n", "\n", "# concatenate the results", "\n", "", "unpacked_data", "+=", "data", ".", "decode", "(", "'utf-8'", ")", "\n", "\n", "# ask for a status check (just by sending any command)", "\n", "self", ".", "s", ".", "send", "(", "str", ".", "encode", "(", "'1'", ")", ")", "\n", "\n", "# check if done", "\n", "unpacker", "=", "struct", ".", "Struct", "(", "format", "=", "'i'", ")", "\n", "data", "=", "None", "\n", "while", "data", "is", "None", ":", "\n", "                        ", "data", "=", "self", ".", "s", ".", "recv", "(", "unpacker", ".", "size", ")", "\n", "", "done", "=", "unpacker", ".", "unpack", "(", "data", ")", "[", "0", "]", "==", "0", "\n", "", "", "else", ":", "\n", "                ", "unpacker", "=", "struct", ".", "Struct", "(", "format", "=", "out_format", ")", "\n", "data", "=", "None", "\n", "while", "data", "is", "None", ":", "\n", "                    ", "data", "=", "self", ".", "s", ".", "recv", "(", "unpacker", ".", "size", ")", "\n", "", "unpacked_data", "=", "unpacker", ".", "unpack", "(", "data", ")", "\n", "\n", "", "return", "unpacked_data", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.simulation_step": [[157, 168], ["api.FlowAimsunAPI._send_command", "api.create_client"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.create_client"], ["", "", "def", "simulation_step", "(", "self", ")", ":", "\n", "        ", "\"\"\"Advance the simulation by one step.\n\n        Since the connection is lost when this happens, this method also waits\n        for and reconnects to the server.\n        \"\"\"", "\n", "self", ".", "_send_command", "(", "ac", ".", "SIMULATION_STEP", ",", "\n", "in_format", "=", "None", ",", "values", "=", "None", ",", "out_format", "=", "None", ")", "\n", "\n", "# reconnect to the server", "\n", "self", ".", "s", "=", "create_client", "(", "self", ".", "port", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.stop_simulation": [[169, 181], ["api.FlowAimsunAPI._send_command", "api.FlowAimsunAPI.s.close"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close"], ["", "def", "stop_simulation", "(", "self", ")", ":", "\n", "        ", "\"\"\"Terminate the simulation.\n\n        This will close the connection on both the client and server side.\n        \"\"\"", "\n", "# inform the simulation that it should terminate the simulation and the", "\n", "# server connection", "\n", "self", ".", "_send_command", "(", "ac", ".", "SIMULATION_TERMINATE", ",", "\n", "in_format", "=", "None", ",", "values", "=", "None", ",", "out_format", "=", "None", ")", "\n", "\n", "# terminate the connection", "\n", "self", ".", "s", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_edge_name": [[182, 199], ["api.FlowAimsunAPI._send_command"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "def", "get_edge_name", "(", "self", ",", "edge", ")", ":", "\n", "        ", "\"\"\"Get the name of an edge in Aimsun.\n\n        Parameters\n        ----------\n        edge : str\n            name of the edge in Flow\n\n        Returns\n        -------\n        int\n            name of the edge in Aimsun\n        \"\"\"", "\n", "return", "self", ".", "_send_command", "(", "ac", ".", "GET_EDGE_NAME", ",", "\n", "in_format", "=", "'str'", ",", "\n", "values", "=", "(", "edge", ",", ")", ",", "\n", "out_format", "=", "'i'", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.add_vehicle": [[200, 241], ["isinstance", "api.FlowAimsunAPI._send_command", "api.FlowAimsunAPI._send_command"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "def", "add_vehicle", "(", "self", ",", "edge", ",", "lane", ",", "type_id", ",", "pos", ",", "speed", ",", "next_section", ")", ":", "\n", "        ", "\"\"\"Add a vehicle to the network.\n\n        Parameters\n        ----------\n        edge : int\n            name of the start edge\n        lane : int\n            start lane\n        type_id : int or string\n            vehicle type (id or name)\n        pos : float\n            starting position\n        speed : float\n            starting speed\n        next_section : int\n            the edge number the vehicle should move towards after the current\n            edge it is one. If set to -1, the vehicle takes the next feasible\n            route\n\n        Returns\n        -------\n        int\n            name of the new vehicle in Aimsun\n        \"\"\"", "\n", "# if type_id is a string, retrieve the id of the type", "\n", "if", "isinstance", "(", "type_id", ",", "str", ")", ":", "\n", "            ", "type_id", "=", "self", ".", "_send_command", "(", "ac", ".", "VEH_GET_TYPE_ID", ",", "\n", "in_format", "=", "'str'", ",", "\n", "values", "=", "(", "type_id", ",", ")", ",", "\n", "out_format", "=", "'i'", ")", "[", "0", "]", "\n", "# TODO maybe put back the type conversion dict", "\n", "# to avoid useless API calls", "\n", "\n", "", "veh_id", ",", "=", "self", ".", "_send_command", "(", "\n", "ac", ".", "ADD_VEHICLE", ",", "\n", "in_format", "=", "'i i i f f i'", ",", "\n", "values", "=", "(", "edge", ",", "lane", ",", "type_id", ",", "pos", ",", "speed", ",", "next_section", ")", ",", "\n", "out_format", "=", "'i'", ")", "\n", "\n", "return", "veh_id", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.remove_vehicle": [[242, 254], ["api.FlowAimsunAPI._send_command"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "def", "remove_vehicle", "(", "self", ",", "veh_id", ")", ":", "\n", "        ", "\"\"\"Remove a vehicle from the network.\n\n        Parameters\n        ----------\n        veh_id : int\n            name of the vehicle in Aimsun\n        \"\"\"", "\n", "self", ".", "_send_command", "(", "ac", ".", "REMOVE_VEHICLE", ",", "\n", "in_format", "=", "'i'", ",", "\n", "values", "=", "(", "veh_id", ",", ")", ",", "\n", "out_format", "=", "'i'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.set_speed": [[255, 269], ["api.FlowAimsunAPI._send_command"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "def", "set_speed", "(", "self", ",", "veh_id", ",", "speed", ")", ":", "\n", "        ", "\"\"\"Set the speed of a specific vehicle.\n\n        Parameters\n        ----------\n        veh_id : int\n            name of the vehicle in Aimsun\n        speed : float\n            target speed\n        \"\"\"", "\n", "self", ".", "_send_command", "(", "ac", ".", "VEH_SET_SPEED", ",", "\n", "in_format", "=", "'i f'", ",", "\n", "values", "=", "(", "veh_id", ",", "speed", ")", ",", "\n", "out_format", "=", "'i'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.apply_lane_change": [[270, 289], ["api.FlowAimsunAPI._send_command"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "def", "apply_lane_change", "(", "self", ",", "veh_id", ",", "direction", ")", ":", "\n", "        ", "\"\"\"Set the lane change action of a specific vehicle.\n\n        Parameters\n        ----------\n        veh_id : int\n            name of the vehicle in Aimsun\n        direction : int\n            target direction\n\n        Returns\n        -------\n        float\n            status (should be 0)\n        \"\"\"", "\n", "return", "self", ".", "_send_command", "(", "ac", ".", "VEH_SET_LANE", ",", "\n", "in_format", "=", "'i i'", ",", "\n", "values", "=", "(", "veh_id", ",", "direction", ")", ",", "\n", "out_format", "=", "'i'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.set_route": [[290, 307], ["api.FlowAimsunAPI._send_command"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "def", "set_route", "(", "self", ",", "veh_id", ",", "route", ")", ":", "\n", "        ", "\"\"\"Set the route of a specific vehicle.\n\n        Parameters\n        ----------\n        veh_id : int\n            name of the vehicle in Aimsun\n        route : list of int\n            list of edges the vehicle should traverse\n\n        Returns\n        -------\n        float\n            status (should be 0)\n        \"\"\"", "\n", "return", "self", ".", "_send_command", "(", "ac", ".", "VEH_SET_ROUTE", ",", "\n", "values", "=", "(", "veh_id", ",", "route", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.set_color": [[308, 323], ["api.FlowAimsunAPI._send_command"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "def", "set_color", "(", "self", ",", "veh_id", ",", "color", ")", ":", "\n", "        ", "\"\"\"Set the color of a specific vehicle.\n\n        Parameters\n        ----------\n        veh_id : int\n            name of the vehicle in Aimsun\n        color : (int, int, int)\n            red, green, blue values\n        \"\"\"", "\n", "r", ",", "g", ",", "b", "=", "color", "\n", "return", "self", ".", "_send_command", "(", "ac", ".", "VEH_SET_COLOR", ",", "\n", "in_format", "=", "'i i i i'", ",", "\n", "values", "=", "(", "veh_id", ",", "r", ",", "g", ",", "b", ")", ",", "\n", "out_format", "=", "'i'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_entered_ids": [[324, 336], ["api.FlowAimsunAPI._send_command", "veh_ids.split.split.split", "int"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "def", "get_entered_ids", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the ids of all vehicles that entered the network.\"\"\"", "\n", "veh_ids", "=", "self", ".", "_send_command", "(", "ac", ".", "VEH_GET_ENTERED_IDS", ",", "\n", "in_format", "=", "None", ",", "\n", "values", "=", "None", ",", "\n", "out_format", "=", "'str'", ")", "\n", "\n", "if", "veh_ids", "==", "'-1'", ":", "\n", "            ", "return", "[", "]", "\n", "", "else", ":", "\n", "            ", "veh_ids", "=", "veh_ids", ".", "split", "(", "':'", ")", "\n", "return", "[", "int", "(", "v", ")", "for", "v", "in", "veh_ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_exited_ids": [[337, 349], ["api.FlowAimsunAPI._send_command", "veh_ids.split.split.split", "int"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "", "def", "get_exited_ids", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the ids of all vehicles that exited the network.\"\"\"", "\n", "veh_ids", "=", "self", ".", "_send_command", "(", "ac", ".", "VEH_GET_EXITED_IDS", ",", "\n", "in_format", "=", "None", ",", "\n", "values", "=", "None", ",", "\n", "out_format", "=", "'str'", ")", "\n", "\n", "if", "veh_ids", "==", "'-1'", ":", "\n", "            ", "return", "[", "]", "\n", "", "else", ":", "\n", "            ", "veh_ids", "=", "veh_ids", ".", "split", "(", "':'", ")", "\n", "return", "[", "int", "(", "v", ")", "for", "v", "in", "veh_ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_vehicle_type_id": [[350, 367], ["api.FlowAimsunAPI._send_command"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "", "def", "get_vehicle_type_id", "(", "self", ",", "flow_id", ")", ":", "\n", "        ", "\"\"\"Get the Aimsun type number of a Flow vehicle types.\n\n        Parameters\n        ----------\n        flow_id : str\n            Flow-specific vehicle type\n\n        Returns\n        -------\n        int\n            Aimsun-specific vehicle type\n        \"\"\"", "\n", "return", "self", ".", "_send_command", "(", "ac", ".", "VEH_GET_TYPE_ID", ",", "\n", "in_format", "=", "'str'", ",", "\n", "values", "=", "(", "flow_id", ",", ")", ",", "\n", "out_format", "=", "'i'", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_vehicle_type_name": [[368, 385], ["api.FlowAimsunAPI._send_command"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "def", "get_vehicle_type_name", "(", "self", ",", "veh_id", ")", ":", "\n", "        ", "\"\"\"Get the Aimsun type name of an Aimsun vehicle.\n\n        Parameters\n        ----------\n        veh_id : int\n            id of the vehicle in Aimsun\n\n        Returns\n        -------\n        str\n            Aimsun-specific vehicle type name\n        \"\"\"", "\n", "return", "self", ".", "_send_command", "(", "ac", ".", "VEH_GET_TYPE_NAME", ",", "\n", "in_format", "=", "'i'", ",", "\n", "values", "=", "(", "veh_id", ",", ")", ",", "\n", "out_format", "=", "'str'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_vehicle_length": [[386, 403], ["api.FlowAimsunAPI._send_command"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "def", "get_vehicle_length", "(", "self", ",", "veh_id", ")", ":", "\n", "        ", "\"\"\"Get the length of an Aimsun vehicle.\n\n        Parameters\n        ----------\n        veh_id : int\n            id of the vehicle in Aimsun\n\n        Returns\n        -------\n        float\n            length of the vehicle in Aimsun\n        \"\"\"", "\n", "return", "self", ".", "_send_command", "(", "ac", ".", "VEH_GET_LENGTH", ",", "\n", "in_format", "=", "'i'", ",", "\n", "values", "=", "(", "veh_id", ",", ")", ",", "\n", "out_format", "=", "'f'", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_vehicle_static_info": [[404, 451], ["flow.StaticInfVeh", "flow.StaticInfVeh", "api.FlowAimsunAPI._send_command"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "def", "get_vehicle_static_info", "(", "self", ",", "veh_id", ")", ":", "\n", "        ", "\"\"\"Return the static information of the specified vehicle.\n\n        Parameters\n        ----------\n        veh_id : int\n            name of the vehicle in Aimsun\n\n        Returns\n        -------\n        flow.utils.aimsun.struct.StaticInfVeh\n            static info object\n        \"\"\"", "\n", "static_info", "=", "aimsun_struct", ".", "StaticInfVeh", "(", ")", "\n", "\n", "(", "static_info", ".", "report", ",", "\n", "static_info", ".", "idVeh", ",", "\n", "static_info", ".", "type", ",", "\n", "static_info", ".", "length", ",", "\n", "static_info", ".", "width", ",", "\n", "static_info", ".", "maxDesiredSpeed", ",", "\n", "static_info", ".", "maxAcceleration", ",", "\n", "static_info", ".", "normalDeceleration", ",", "\n", "static_info", ".", "maxDeceleration", ",", "\n", "static_info", ".", "speedAcceptance", ",", "\n", "static_info", ".", "minDistanceVeh", ",", "\n", "static_info", ".", "giveWayTime", ",", "\n", "static_info", ".", "guidanceAcceptance", ",", "\n", "static_info", ".", "enrouted", ",", "\n", "static_info", ".", "equipped", ",", "\n", "static_info", ".", "tracked", ",", "\n", "static_info", ".", "keepfastLane", ",", "\n", "static_info", ".", "headwayMin", ",", "\n", "static_info", ".", "sensitivityFactor", ",", "\n", "static_info", ".", "reactionTime", ",", "\n", "static_info", ".", "reactionTimeAtStop", ",", "\n", "static_info", ".", "reactionTimeAtTrafficLight", ",", "\n", "static_info", ".", "centroidOrigin", ",", "\n", "static_info", ".", "centroidDest", ",", "\n", "static_info", ".", "idsectionExit", ",", "\n", "static_info", ".", "idLine", ")", "=", "self", ".", "_send_command", "(", "\n", "ac", ".", "VEH_GET_STATIC", ",", "\n", "in_format", "=", "'i'", ",", "\n", "values", "=", "(", "veh_id", ",", ")", ",", "\n", "out_format", "=", "'i i i f f f f f f f f f f i i i ? f f f f f i i i i'", ")", "\n", "\n", "return", "static_info", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_vehicle_tracking_info": [[452, 505], ["range", "api.FlowAimsunAPI._send_command", "flow.InfVeh", "flow.InfVeh", "range", "len", "len", "str", "setattr"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "def", "get_vehicle_tracking_info", "(", "self", ",", "veh_id", ",", "info_bitmap", ",", "tracked", "=", "True", ")", ":", "\n", "        ", "\"\"\"Return the tracking information of the specified vehicle.\n\n        Parameters\n        ----------\n        veh_id : int\n            name of the vehicle in Aimsun\n        info_bitmap : str\n            bitmap representing the tracking info to be returned\n            (cf function make_bitmap_for_tracking in vehicle/aimsun.py)\n        tracked : boolean (defaults to True)\n            whether the vehicle is tracked in Aimsun.\n\n\n        Returns\n        -------\n        flow.utils.aimsun.struct.InfVeh\n            tracking info object\n        \"\"\"", "\n", "# build the output format from the bitmap", "\n", "out_format", "=", "''", "\n", "for", "i", "in", "range", "(", "len", "(", "info_bitmap", ")", ")", ":", "\n", "            ", "if", "info_bitmap", "[", "i", "]", "==", "'1'", ":", "\n", "                ", "if", "i", "<=", "12", ":", "\n", "                    ", "out_format", "+=", "'f '", "\n", "", "else", ":", "\n", "                    ", "out_format", "+=", "'i '", "\n", "", "", "", "if", "out_format", "==", "''", ":", "\n", "            ", "return", "\n", "", "else", ":", "\n", "            ", "out_format", "=", "out_format", "[", ":", "-", "1", "]", "\n", "\n", "# append tracked boolean and vehicle id to the bitmap", "\n", "# so that the command only has one parameter", "\n", "", "info_bitmap", "+=", "\"1\"", "if", "tracked", "else", "\"0\"", "\n", "val", "=", "str", "(", "veh_id", ")", "+", "\":\"", "+", "info_bitmap", "\n", "\n", "# retrieve the vehicle tracking info specified by the bitmap", "\n", "info", "=", "self", ".", "_send_command", "(", "\n", "ac", ".", "VEH_GET_TRACKING", ",", "\n", "in_format", "=", "'str'", ",", "\n", "values", "=", "(", "val", ",", ")", ",", "\n", "out_format", "=", "out_format", ")", "\n", "\n", "# place these tracking info into a struct", "\n", "ret", "=", "aimsun_struct", ".", "InfVeh", "(", ")", "\n", "count", "=", "0", "\n", "for", "map_index", "in", "range", "(", "len", "(", "INFOS_ATTR_BY_INDEX", ")", ")", ":", "\n", "            ", "if", "info_bitmap", "[", "map_index", "]", "==", "'1'", ":", "\n", "                ", "setattr", "(", "ret", ",", "INFOS_ATTR_BY_INDEX", "[", "map_index", "]", ",", "info", "[", "count", "]", ")", "\n", "count", "+=", "1", "\n", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_vehicle_leader": [[506, 523], ["api.FlowAimsunAPI._send_command"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "def", "get_vehicle_leader", "(", "self", ",", "veh_id", ")", ":", "\n", "        ", "\"\"\"Return the leader of a specific vehicle.\n\n        Parameters\n        ----------\n        veh_id : int\n            name of the vehicle in Aimsun\n\n        Returns\n        -------\n        int\n            name of the leader\n        \"\"\"", "\n", "return", "self", ".", "_send_command", "(", "ac", ".", "VEH_GET_LEADER", ",", "\n", "in_format", "=", "'i'", ",", "\n", "values", "=", "(", "veh_id", ",", ")", ",", "\n", "out_format", "=", "'i'", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_vehicle_follower": [[524, 541], ["api.FlowAimsunAPI._send_command"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "def", "get_vehicle_follower", "(", "self", ",", "veh_id", ")", ":", "\n", "        ", "\"\"\"Return the follower of a specific vehicle.\n\n        Parameters\n        ----------\n        veh_id : int\n            name of the vehicle in Aimsun\n\n        Returns\n        -------\n        int\n            name of the follower\n        \"\"\"", "\n", "return", "self", ".", "_send_command", "(", "ac", ".", "VEH_GET_FOLLOWER", ",", "\n", "in_format", "=", "'i'", ",", "\n", "values", "=", "(", "veh_id", ",", ")", ",", "\n", "out_format", "=", "'i'", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_next_section": [[542, 561], ["api.FlowAimsunAPI._send_command"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "def", "get_next_section", "(", "self", ",", "veh_id", ",", "section", ")", ":", "\n", "        ", "\"\"\"Return the headway of a specific vehicle.\n\n        Parameters\n        ----------\n        veh_id : int\n            name of the vehicle in Aimsun\n        section : int\n            name of the section the vehicle resides on\n\n        Returns\n        -------\n        int\n            next section\n        \"\"\"", "\n", "return", "self", ".", "_send_command", "(", "ac", ".", "VEH_GET_NEXT_SECTION", ",", "\n", "in_format", "=", "'i i'", ",", "\n", "values", "=", "(", "veh_id", ",", "section", ")", ",", "\n", "out_format", "=", "'i'", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_route": [[562, 577], ["api.FlowAimsunAPI._send_command"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "def", "get_route", "(", "self", ",", "veh_id", ")", ":", "\n", "        ", "\"\"\"Return the route of a specific vehicle.\n\n        Parameters\n        ----------\n        veh_id : int\n            name of the vehicle in Aimsun\n\n        Returns\n        -------\n        list of int\n            list of edge names in Aimsun\n        \"\"\"", "\n", "return", "self", ".", "_send_command", "(", "ac", ".", "VEH_GET_ROUTE", ",", "\n", "values", "=", "[", "veh_id", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_traffic_light_ids": [[578, 590], ["api.FlowAimsunAPI._send_command", "tl_ids.split.split.split", "int"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "def", "get_traffic_light_ids", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the ids of all traffic lights in the network.\"\"\"", "\n", "tl_ids", "=", "self", ".", "_send_command", "(", "ac", ".", "TL_GET_IDS", ",", "\n", "in_format", "=", "None", ",", "\n", "values", "=", "None", ",", "\n", "out_format", "=", "'str'", ")", "\n", "\n", "if", "tl_ids", "==", "'-1'", ":", "\n", "            ", "return", "[", "]", "\n", "", "else", ":", "\n", "            ", "tl_ids", "=", "tl_ids", ".", "split", "(", "':'", ")", "\n", "return", "[", "int", "(", "t", ")", "for", "t", "in", "tl_ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_traffic_light_state": [[591, 608], ["api.FlowAimsunAPI._send_command"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "", "def", "get_traffic_light_state", "(", "self", ",", "tl_id", ")", ":", "\n", "        ", "\"\"\"Get the traffic light state of a specific set of traffic light(s).\n\n        Parameters\n        ----------\n        tl_id : int\n            name of the traffic light node in Aimsun\n\n        Returns\n        -------\n        str\n            traffic light state of each light on that node\n        \"\"\"", "\n", "res", ",", "=", "self", ".", "_send_command", "(", "ac", ".", "TL_GET_STATE", ",", "values", "=", "(", "tl_id", ",", ")", ",", "\n", "in_format", "=", "'i'", ",", "\n", "out_format", "=", "'i'", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.set_traffic_light_state": [[609, 625], ["api.FlowAimsunAPI._send_command"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "def", "set_traffic_light_state", "(", "self", ",", "tl_id", ",", "link_index", ",", "state", ")", ":", "\n", "        ", "\"\"\"Set the state of the specified traffic light(s).\n\n        Parameters\n        ----------\n        tl_id : int\n            name of the traffic light node in Aimsun\n        link_index : TODO\n            TODO\n        state : str\n            TODO\n        \"\"\"", "\n", "self", ".", "_send_command", "(", "ac", ".", "TL_SET_STATE", ",", "\n", "in_format", "=", "'i i i'", ",", "\n", "values", "=", "(", "tl_id", ",", "link_index", ",", "state", ")", ",", "\n", "out_format", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.set_vehicle_tracked": [[626, 640], ["api.FlowAimsunAPI._send_command"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "def", "set_vehicle_tracked", "(", "self", ",", "veh_id", ")", ":", "\n", "        ", "\"\"\"Set a vehicle as tracked in Aimsun.\n\n        This thus allows for faster tracking information retrieval.\n\n        Parameters\n        ----------\n        veh_id : int\n            name of the vehicle in Aimsun\n        \"\"\"", "\n", "self", ".", "_send_command", "(", "ac", ".", "VEH_SET_TRACKED", ",", "\n", "in_format", "=", "'i'", ",", "\n", "values", "=", "(", "veh_id", ",", ")", ",", "\n", "out_format", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.set_vehicle_no_tracked": [[641, 653], ["api.FlowAimsunAPI._send_command"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI._send_command"], ["", "def", "set_vehicle_no_tracked", "(", "self", ",", "veh_id", ")", ":", "\n", "        ", "\"\"\"Set a tracked vehicle as untracked in Aimsun.\n\n        Parameters\n        ----------\n        veh_id : int\n            name of the vehicle in Aimsun\n        \"\"\"", "\n", "self", ".", "_send_command", "(", "ac", ".", "VEH_SET_NO_TRACKED", ",", "\n", "in_format", "=", "'i'", ",", "\n", "values", "=", "(", "veh_id", ",", ")", ",", "\n", "out_format", "=", "None", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.create_client": [[11, 55], ["print", "print", "socket.socket", "socket.socket.connect", "s.recv.decode", "socket.socket.recv", "logging.debug"], "function", ["None"], ["def", "create_client", "(", "port", ",", "print_status", "=", "False", ")", ":", "\n", "    ", "\"\"\"Create a socket connection with the server.\n\n    Parameters\n    ----------\n    port : int\n        the port number of the socket connection\n    print_status : bool, optional\n        specifies whether to print a status check while waiting for connection\n        between the server and client\n\n    Returns\n    -------\n    socket.socket\n        socket for client connection\n    \"\"\"", "\n", "# create a socket connection", "\n", "if", "print_status", ":", "\n", "        ", "print", "(", "'Listening for connection...'", ",", "end", "=", "' '", ")", "\n", "\n", "", "stop", "=", "False", "\n", "while", "not", "stop", ":", "\n", "# try to connect", "\n", "        ", "try", ":", "\n", "            ", "s", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "s", ".", "connect", "(", "(", "'localhost'", ",", "port", ")", ")", "\n", "\n", "# check the connection", "\n", "data", "=", "None", "\n", "while", "data", "is", "None", ":", "\n", "                ", "data", "=", "s", ".", "recv", "(", "2048", ")", "\n", "", "stop", "=", "True", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "logging", ".", "debug", "(", "'Cannot connect to the server: {}'", ".", "format", "(", "e", ")", ")", "\n", "\n", "", "except", "socket", ".", "error", ":", "\n", "            ", "stop", "=", "False", "\n", "\n", "# print the return statement", "\n", "", "", "if", "print_status", ":", "\n", "        ", "print", "(", "data", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.struct.InfVeh.__init__": [[65, 92], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Instantiate InfVeh.\"\"\"", "\n", "self", ".", "CurrentPos", "=", "None", "\n", "self", ".", "distance2End", "=", "None", "\n", "self", ".", "xCurrentPos", "=", "None", "\n", "self", ".", "yCurrentPos", "=", "None", "\n", "self", ".", "zCurrentPos", "=", "None", "\n", "self", ".", "xCurrentPosBack", "=", "None", "\n", "self", ".", "yCurrentPosBack", "=", "None", "\n", "self", ".", "zCurrentPosBack", "=", "None", "\n", "self", ".", "CurrentSpeed", "=", "None", "\n", "self", ".", "TotalDistance", "=", "None", "\n", "self", ".", "SectionEntranceT", "=", "None", "\n", "self", ".", "CurrentStopTime", "=", "None", "\n", "self", ".", "stopped", "=", "None", "\n", "\n", "# Information in Vehicle when it is in a section", "\n", "self", ".", "idSection", "=", "None", "\n", "self", ".", "segment", "=", "None", "\n", "self", ".", "numberLane", "=", "None", "\n", "\n", "# Information in Vehicle when it is in a node", "\n", "self", ".", "idJunction", "=", "None", "\n", "self", ".", "idSectionFrom", "=", "None", "\n", "self", ".", "idLaneFrom", "=", "None", "\n", "self", ".", "idSectionTo", "=", "None", "\n", "self", ".", "idLaneTo", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.struct.StaticInfVeh.__init__": [[172, 200], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Instantiate StaticInfVeh.\"\"\"", "\n", "self", ".", "report", "=", "None", "\n", "self", ".", "idVeh", "=", "None", "\n", "self", ".", "type", "=", "None", "\n", "self", ".", "length", "=", "None", "\n", "self", ".", "width", "=", "None", "\n", "self", ".", "maxDesiredSpeed", "=", "None", "\n", "self", ".", "maxAcceleration", "=", "None", "\n", "self", ".", "normalDeceleration", "=", "None", "\n", "self", ".", "maxDeceleration", "=", "None", "\n", "self", ".", "speedAcceptance", "=", "None", "\n", "self", ".", "minDistanceVeh", "=", "None", "\n", "self", ".", "giveWayTime", "=", "None", "\n", "self", ".", "guidanceAcceptance", "=", "None", "\n", "self", ".", "enrouted", "=", "None", "\n", "self", ".", "equipped", "=", "None", "\n", "self", ".", "tracked", "=", "None", "\n", "self", ".", "keepfastLane", "=", "None", "\n", "self", ".", "headwayMin", "=", "None", "\n", "self", ".", "sensitivityFactor", "=", "None", "\n", "self", ".", "reactionTime", "=", "None", "\n", "self", ".", "reactionTimeAtStop", "=", "None", "\n", "self", ".", "reactionTimeAtTrafficLight", "=", "None", "\n", "self", ".", "centroidOrigin", "=", "None", "\n", "self", ".", "centroidDest", "=", "None", "\n", "self", ".", "idsectionExit", "=", "None", "\n", "self", ".", "idLine", "=", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.run.send_message": [[25, 77], ["struct.Struct", "conn.send", "struct.Struct.pack", "conn.send", "struct.Struct", "struct.Struct.pack", "conn.send", "len", "conn.send", "struct.Struct.pack", "conn.send", "conn.recv", "conn.recv"], "function", ["None"], ["def", "send_message", "(", "conn", ",", "in_format", ",", "values", ")", ":", "\n", "    ", "\"\"\"Send a message to the client.\n\n    If the message is a string, it is sent in segments of length 256 (if the\n    string is longer than such) and concatenated on the client end.\n\n    Parameters\n    ----------\n    conn : socket.socket\n        socket for server connection\n    in_format : str\n        format of the input structure\n    values : tuple of Any\n        commands to be encoded and issued to the client\n    \"\"\"", "\n", "if", "in_format", "==", "'str'", ":", "\n", "        ", "packer", "=", "struct", ".", "Struct", "(", "format", "=", "'i'", ")", "\n", "values", "=", "values", "[", "0", "]", "\n", "\n", "# when the message is too large, send value in segments and inform the", "\n", "# client that additional information will be sent. The value will be", "\n", "# concatenated on the other end", "\n", "while", "len", "(", "values", ")", ">", "256", ":", "\n", "# send the next set of data", "\n", "            ", "conn", ".", "send", "(", "values", "[", ":", "256", "]", ")", "\n", "values", "=", "values", "[", "256", ":", "]", "\n", "\n", "# wait for a reply", "\n", "data", "=", "None", "\n", "while", "data", "is", "None", ":", "\n", "                ", "data", "=", "conn", ".", "recv", "(", "2048", ")", "\n", "\n", "# send a not-done signal", "\n", "", "packed_data", "=", "packer", ".", "pack", "(", "*", "(", "1", ",", ")", ")", "\n", "conn", ".", "send", "(", "packed_data", ")", "\n", "\n", "# send the remaining components of the message (which is of length less", "\n", "# than or equal to 256)", "\n", "", "conn", ".", "send", "(", "values", ")", "\n", "\n", "# wait for a reply", "\n", "data", "=", "None", "\n", "while", "data", "is", "None", ":", "\n", "            ", "data", "=", "conn", ".", "recv", "(", "2048", ")", "\n", "\n", "# send a done signal", "\n", "", "packed_data", "=", "packer", ".", "pack", "(", "*", "(", "0", ",", ")", ")", "\n", "conn", ".", "send", "(", "packed_data", ")", "\n", "", "else", ":", "\n", "        ", "packer", "=", "struct", ".", "Struct", "(", "format", "=", "in_format", ")", "\n", "packed_data", "=", "packer", ".", "pack", "(", "*", "values", ")", "\n", "conn", ".", "send", "(", "packed_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.run.retrieve_message": [[79, 101], ["struct.Struct", "conn.recv", "struct.Struct.unpack"], "function", ["None"], ["", "", "def", "retrieve_message", "(", "conn", ",", "out_format", ")", ":", "\n", "    ", "\"\"\"Retrieve a message from the client.\n\n    Parameters\n    ----------\n    conn : socket.socket\n        socket for server connection\n    out_format : str or None\n        format of the output structure\n\n    Returns\n    -------\n    Any\n        received message\n    \"\"\"", "\n", "unpacker", "=", "struct", ".", "Struct", "(", "format", "=", "out_format", ")", "\n", "try", ":", "\n", "        ", "data", "=", "conn", ".", "recv", "(", "unpacker", ".", "size", ")", "\n", "unpacked_data", "=", "unpacker", ".", "unpack", "(", "data", ")", "\n", "", "finally", ":", "\n", "        ", "pass", "\n", "", "return", "unpacked_data", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.run.threaded_client": [[103, 472], ["conn.send", "conn.close", "conn.recv", "int", "run.send_message", "run.send_message", "run.send_message", "run.retrieve_message", "AAPI.AKIPutVehTrafficFlow", "run.send_message", "run.send_message", "run.retrieve_message", "AAPI.AKIVehTrackedRemove", "run.send_message", "run.send_message", "run.retrieve_message", "AAPI.AKIVehTrackedModifySpeed", "run.send_message", "conn.send", "run.retrieve_message", "AAPI.AKIVehTrackedModifyLane", "run.send_message", "run.send_message", "run.send_message", "run.retrieve_message", "run.send_message", "run.send_message", "run.retrieve_message", "AAPI.AKIVehSetAsTracked", "run.send_message", "run.retrieve_message", "AAPI.AKIVehSetAsNoTracked", "run.send_message", "run.send_message", "conn.recv", "len", "run.send_message", "run.send_message", "conn.recv", "len", "run.send_message", "GKSystem.getSystem().getActiveModel", "GKSystem.getSystem().getActiveModel.getType", "GKSystem.getSystem().getActiveModel.getCatalog().findByName", "model.getCatalog().findByName.getId", "AKIVehGetVehTypeInternalPosition", "run.send_message", "str", "conn.recv", "run.send_message", "run.retrieve_message", "AAPI.AKIVehGetStaticInf", "AAPI.AKIVehGetVehTypeName", "AAPI.boolp", "str", "run.send_message", "str", "GKSystem.getSystem", "GKSystem.getSystem().getActiveModel.getCatalog", "AAPI.AKIConvertToAsciiString", "run.send_message", "run.retrieve_message", "AAPI.AKIVehGetStaticInf", "run.send_message", "run.send_message", "run.retrieve_message", "AAPI.AKIVehGetStaticInf", "run.send_message", "run.send_message", "range", "int", "range", "run.send_message", "conn.recv", "len", "AAPI.AKIVehTrackedGetInf", "AAPI.AKIVehGetInf", "len", "len", "run.send_message", "run.retrieve_message", "AAPI.AKIVehGetLeaderId", "run.send_message", "str.append", "run.send_message", "run.retrieve_message", "AAPI.AKIVehGetFollowerId", "run.send_message", "run.send_message", "run.retrieve_message", "AKIVehInfPathGetNextSection", "run.send_message", "run.send_message", "run.send_message", "AAPI.ECIGetNumberMeterings", "run.send_message", "conn.recv", "range", "run.send_message", "run.retrieve_message", "AKIGetCurrentSimulationTime", "AKIGetSimulationStepTime", "ECIChangeStateMeteringById", "run.send_message", "ECIGetMeteringProperties", "meter_ids.append", "run.send_message", "run.retrieve_message", "ECIGetCurrentStateofMeteringById", "run.send_message", "str", "run.send_message", "GKSystem.getSystem().getActiveModel", "GKSystem.getSystem().getActiveModel.getCatalog().findByName", "run.send_message", "conn.recv", "GKSystem.getSystem().getActiveModel.getType", "run.send_message", "run.send_message", "GKSystem.getSystem", "GKSystem.getSystem().getActiveModel.getCatalog", "model.getCatalog().findByName.getId", "int"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.retrieve_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.retrieve_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.retrieve_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.retrieve_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.retrieve_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.retrieve_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.retrieve_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestGUISystemBase.getActiveModel", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.retrieve_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.retrieve_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.retrieve_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.retrieve_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.retrieve_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.retrieve_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.retrieve_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.retrieve_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestGUISystemBase.getActiveModel", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message"], ["", "def", "threaded_client", "(", "conn", ")", ":", "\n", "    ", "\"\"\"Create a threaded process.\n\n    This process is called every simulation step to interact with the aimsun\n    server, and terminates once the simulation is ready to execute a new step.\n\n    Parameters\n    ----------\n    conn : socket.socket\n        socket for server connection\n    \"\"\"", "\n", "# send feedback that the connection is active", "\n", "conn", ".", "send", "(", "b'Ready.'", ")", "\n", "\n", "done", "=", "False", "\n", "while", "not", "done", ":", "\n", "# receive the next message", "\n", "        ", "data", "=", "conn", ".", "recv", "(", "2048", ")", "\n", "\n", "if", "data", "is", "not", "None", ":", "\n", "# if the message is empty, search for the next message", "\n", "            ", "if", "data", "==", "''", ":", "\n", "                ", "continue", "\n", "\n", "# convert to integer", "\n", "", "data", "=", "int", "(", "data", ")", "\n", "\n", "# if the simulation step is over, terminate the ring and let", "\n", "# the step be executed", "\n", "if", "data", "==", "ac", ".", "SIMULATION_STEP", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "done", "=", "True", "\n", "\n", "# Note that alongside this, the process is closed in Flow,", "\n", "# thereby terminating the socket connection as well.", "\n", "", "elif", "data", "==", "ac", ".", "SIMULATION_TERMINATE", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "done", "=", "True", "\n", "\n", "", "elif", "data", "==", "ac", ".", "ADD_VEHICLE", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "\n", "edge", ",", "lane", ",", "type_id", ",", "pos", ",", "speed", ",", "next_section", "=", "retrieve_message", "(", "conn", ",", "'i i i f f i'", ")", "\n", "\n", "# 1 if tracked, 0 otherwise", "\n", "tracking", "=", "1", "\n", "\n", "veh_id", "=", "aimsun_api", ".", "AKIPutVehTrafficFlow", "(", "\n", "edge", ",", "lane", "+", "1", ",", "type_id", ",", "pos", ",", "speed", ",", "next_section", ",", "\n", "tracking", "\n", ")", "\n", "\n", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "veh_id", ",", ")", ")", "\n", "\n", "", "elif", "data", "==", "ac", ".", "REMOVE_VEHICLE", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "veh_id", ",", "=", "retrieve_message", "(", "conn", ",", "'i'", ")", "\n", "aimsun_api", ".", "AKIVehTrackedRemove", "(", "veh_id", ")", "\n", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "\n", "", "elif", "data", "==", "ac", ".", "VEH_SET_SPEED", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "veh_id", ",", "speed", "=", "retrieve_message", "(", "conn", ",", "'i f'", ")", "\n", "new_speed", "=", "speed", "*", "3.6", "\n", "# aimsun_api.AKIVehTrackedForceSpeed(veh_id, new_speed)", "\n", "aimsun_api", ".", "AKIVehTrackedModifySpeed", "(", "veh_id", ",", "new_speed", ")", "\n", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "\n", "", "elif", "data", "==", "ac", ".", "VEH_SET_LANE", ":", "\n", "                ", "conn", ".", "send", "(", "b'Set vehicle lane.'", ")", "\n", "veh_id", ",", "target_lane", "=", "retrieve_message", "(", "conn", ",", "'i i'", ")", "\n", "aimsun_api", ".", "AKIVehTrackedModifyLane", "(", "veh_id", ",", "target_lane", ")", "\n", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "\n", "", "elif", "data", "==", "ac", ".", "VEH_SET_ROUTE", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "# TODO", "\n", "\n", "", "elif", "data", "==", "ac", ".", "VEH_SET_COLOR", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "veh_id", ",", "r", ",", "g", ",", "b", "=", "retrieve_message", "(", "conn", ",", "'i i i i'", ")", "\n", "# TODO", "\n", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "\n", "", "elif", "data", "==", "ac", ".", "VEH_SET_TRACKED", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "veh_id", ",", "=", "retrieve_message", "(", "conn", ",", "'i'", ")", "\n", "aimsun_api", ".", "AKIVehSetAsTracked", "(", "veh_id", ")", "\n", "\n", "", "elif", "data", "==", "ac", ".", "VEH_SET_NO_TRACKED", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "veh_id", ",", "=", "retrieve_message", "(", "conn", ",", "'i'", ")", "\n", "aimsun_api", ".", "AKIVehSetAsNoTracked", "(", "veh_id", ")", "\n", "\n", "", "elif", "data", "==", "ac", ".", "VEH_GET_ENTERED_IDS", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "\n", "data", "=", "None", "\n", "while", "data", "is", "None", ":", "\n", "                    ", "data", "=", "conn", ".", "recv", "(", "256", ")", "\n", "\n", "", "global", "entered_vehicles", "\n", "if", "len", "(", "entered_vehicles", ")", "==", "0", ":", "\n", "                    ", "output", "=", "'-1'", "\n", "", "else", ":", "\n", "                    ", "output", "=", "':'", ".", "join", "(", "[", "str", "(", "e", ")", "for", "e", "in", "entered_vehicles", "]", ")", "\n", "", "send_message", "(", "conn", ",", "in_format", "=", "'str'", ",", "values", "=", "(", "output", ",", ")", ")", "\n", "entered_vehicles", "=", "[", "]", "\n", "\n", "", "elif", "data", "==", "ac", ".", "VEH_GET_EXITED_IDS", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "\n", "data", "=", "None", "\n", "while", "data", "is", "None", ":", "\n", "                    ", "data", "=", "conn", ".", "recv", "(", "256", ")", "\n", "\n", "", "global", "exited_vehicles", "\n", "if", "len", "(", "exited_vehicles", ")", "==", "0", ":", "\n", "                    ", "output", "=", "'-1'", "\n", "", "else", ":", "\n", "                    ", "output", "=", "':'", ".", "join", "(", "[", "str", "(", "e", ")", "for", "e", "in", "exited_vehicles", "]", ")", "\n", "", "send_message", "(", "conn", ",", "in_format", "=", "'str'", ",", "values", "=", "(", "output", ",", ")", ")", "\n", "exited_vehicles", "=", "[", "]", "\n", "\n", "", "elif", "data", "==", "ac", ".", "VEH_GET_TYPE_ID", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "\n", "# get the type ID in flow", "\n", "type_id", "=", "None", "\n", "while", "type_id", "is", "None", ":", "\n", "                    ", "type_id", "=", "conn", ".", "recv", "(", "2048", ")", "\n", "\n", "# convert the edge name to an edge name in Aimsun", "\n", "", "model", "=", "GKSystem", ".", "getSystem", "(", ")", ".", "getActiveModel", "(", ")", "\n", "type_vehicle", "=", "model", ".", "getType", "(", "\"GKVehicle\"", ")", "\n", "vehicle", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "type_id", ",", "type_vehicle", ")", "\n", "aimsun_type", "=", "vehicle", ".", "getId", "(", ")", "\n", "aimsun_type_pos", "=", "AKIVehGetVehTypeInternalPosition", "(", "aimsun_type", ")", "\n", "\n", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "aimsun_type_pos", ",", ")", ")", "\n", "\n", "# FIXME can probably be done more efficiently cf. VEH_GET_TYPE_ID", "\n", "", "elif", "data", "==", "ac", ".", "VEH_GET_TYPE_NAME", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "veh_id", ",", "=", "retrieve_message", "(", "conn", ",", "'i'", ")", "\n", "\n", "static_info", "=", "aimsun_api", ".", "AKIVehGetStaticInf", "(", "veh_id", ")", "\n", "typename", "=", "aimsun_api", ".", "AKIVehGetVehTypeName", "(", "static_info", ".", "type", ")", "\n", "\n", "anyNonAsciiChar", "=", "aimsun_api", ".", "boolp", "(", ")", "\n", "output", "=", "str", "(", "aimsun_api", ".", "AKIConvertToAsciiString", "(", "\n", "typename", ",", "True", ",", "anyNonAsciiChar", ")", ")", "\n", "\n", "send_message", "(", "conn", ",", "in_format", "=", "'str'", ",", "values", "=", "(", "output", ",", ")", ")", "\n", "\n", "", "elif", "data", "==", "ac", ".", "VEH_GET_LENGTH", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "veh_id", ",", "=", "retrieve_message", "(", "conn", ",", "'i'", ")", "\n", "\n", "static_info", "=", "aimsun_api", ".", "AKIVehGetStaticInf", "(", "veh_id", ")", "\n", "output", "=", "static_info", ".", "length", "\n", "\n", "send_message", "(", "conn", ",", "in_format", "=", "'f'", ",", "values", "=", "(", "output", ",", ")", ")", "\n", "\n", "", "elif", "data", "==", "ac", ".", "VEH_GET_STATIC", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "veh_id", ",", "=", "retrieve_message", "(", "conn", ",", "'i'", ")", "\n", "\n", "static_info", "=", "aimsun_api", ".", "AKIVehGetStaticInf", "(", "veh_id", ")", "\n", "output", "=", "(", "static_info", ".", "report", ",", "\n", "static_info", ".", "idVeh", ",", "\n", "static_info", ".", "type", ",", "\n", "static_info", ".", "length", ",", "\n", "static_info", ".", "width", ",", "\n", "static_info", ".", "maxDesiredSpeed", ",", "\n", "static_info", ".", "maxAcceleration", ",", "\n", "static_info", ".", "normalDeceleration", ",", "\n", "static_info", ".", "maxDeceleration", ",", "\n", "static_info", ".", "speedAcceptance", ",", "\n", "static_info", ".", "minDistanceVeh", ",", "\n", "static_info", ".", "giveWayTime", ",", "\n", "static_info", ".", "guidanceAcceptance", ",", "\n", "static_info", ".", "enrouted", ",", "\n", "static_info", ".", "equipped", ",", "\n", "static_info", ".", "tracked", ",", "\n", "static_info", ".", "keepfastLane", ",", "\n", "static_info", ".", "headwayMin", ",", "\n", "static_info", ".", "sensitivityFactor", ",", "\n", "static_info", ".", "reactionTime", ",", "\n", "static_info", ".", "reactionTimeAtStop", ",", "\n", "static_info", ".", "reactionTimeAtTrafficLight", ",", "\n", "static_info", ".", "centroidOrigin", ",", "\n", "static_info", ".", "centroidDest", ",", "\n", "static_info", ".", "idsectionExit", ",", "\n", "static_info", ".", "idLine", ")", "\n", "\n", "send_message", "(", "conn", ",", "\n", "in_format", "=", "'i i i f f f f f f f f f f i i i ? '", "\n", "'f f f f f i i i i'", ",", "\n", "values", "=", "output", ")", "\n", "\n", "", "elif", "data", "==", "ac", ".", "VEH_GET_TRACKING", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "\n", "info_bitmap", "=", "None", "\n", "while", "info_bitmap", "is", "None", ":", "\n", "                    ", "info_bitmap", "=", "conn", ".", "recv", "(", "2048", ")", "\n", "\n", "# bitmap is built as follows:", "\n", "#   21 bits representing what information is to be returned", "\n", "#   a ':' character", "\n", "#   the id of the vehicle", "\n", "#   a bit representing whether or not the vehicle is tracked", "\n", "\n", "# retrieve the tracked boolean", "\n", "", "tracked", "=", "info_bitmap", "[", "-", "1", "]", "\n", "info_bitmap", "=", "info_bitmap", "[", ":", "-", "1", "]", "\n", "\n", "# separate the actual bitmap from the vehicle id", "\n", "s", "=", "\"\"", "\n", "for", "i", "in", "range", "(", "len", "(", "info_bitmap", ")", ")", ":", "\n", "                    ", "if", "info_bitmap", "[", "i", "]", "==", "':'", ":", "\n", "                        ", "info_bitmap", "=", "info_bitmap", "[", "i", "+", "1", ":", "]", "\n", "break", "\n", "", "s", "+=", "info_bitmap", "[", "i", "]", "\n", "", "veh_id", "=", "int", "(", "s", ")", "\n", "\n", "# retrieve the tracking info of the vehicle", "\n", "if", "tracked", "==", "'1'", ":", "\n", "                    ", "tracking_info", "=", "aimsun_api", ".", "AKIVehTrackedGetInf", "(", "veh_id", ")", "\n", "", "else", ":", "\n", "                    ", "tracking_info", "=", "aimsun_api", ".", "AKIVehGetInf", "(", "veh_id", ")", "\n", "\n", "", "data", "=", "(", "\n", "# tracking_info.report,", "\n", "# tracking_info.idVeh,", "\n", "# tracking_info.type,", "\n", "tracking_info", ".", "CurrentPos", ",", "\n", "tracking_info", ".", "distance2End", ",", "\n", "tracking_info", ".", "xCurrentPos", ",", "\n", "tracking_info", ".", "yCurrentPos", ",", "\n", "tracking_info", ".", "zCurrentPos", ",", "\n", "tracking_info", ".", "xCurrentPosBack", ",", "\n", "tracking_info", ".", "yCurrentPosBack", ",", "\n", "tracking_info", ".", "zCurrentPosBack", ",", "\n", "tracking_info", ".", "CurrentSpeed", ",", "\n", "# tracking_info.PreviousSpeed,", "\n", "tracking_info", ".", "TotalDistance", ",", "\n", "# tracking_info.SystemGenerationT,", "\n", "# tracking_info.SystemEntranceT,", "\n", "tracking_info", ".", "SectionEntranceT", ",", "\n", "tracking_info", ".", "CurrentStopTime", ",", "\n", "tracking_info", ".", "stopped", ",", "\n", "tracking_info", ".", "idSection", ",", "\n", "tracking_info", ".", "segment", ",", "\n", "tracking_info", ".", "numberLane", ",", "\n", "tracking_info", ".", "idJunction", ",", "\n", "tracking_info", ".", "idSectionFrom", ",", "\n", "tracking_info", ".", "idLaneFrom", ",", "\n", "tracking_info", ".", "idSectionTo", ",", "\n", "tracking_info", ".", "idLaneTo", ")", "\n", "\n", "# form the output and output format according to the bitmap", "\n", "output", "=", "[", "]", "\n", "in_format", "=", "''", "\n", "for", "i", "in", "range", "(", "len", "(", "info_bitmap", ")", ")", ":", "\n", "                    ", "if", "info_bitmap", "[", "i", "]", "==", "'1'", ":", "\n", "                        ", "if", "i", "<=", "12", ":", "in_format", "+=", "'f '", "\n", "else", ":", "in_format", "+=", "'i '", "\n", "output", ".", "append", "(", "data", "[", "i", "]", ")", "\n", "", "", "if", "in_format", "==", "''", ":", "\n", "                    ", "return", "\n", "", "else", ":", "\n", "                    ", "in_format", "=", "in_format", "[", ":", "-", "1", "]", "\n", "\n", "", "if", "len", "(", "output", ")", "==", "0", ":", "\n", "                    ", "output", "=", "None", "\n", "\n", "", "send_message", "(", "conn", ",", "\n", "in_format", "=", "in_format", ",", "\n", "values", "=", "output", ")", "\n", "\n", "", "elif", "data", "==", "ac", ".", "VEH_GET_LEADER", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "veh_id", ",", "=", "retrieve_message", "(", "conn", ",", "'i'", ")", "\n", "leader", "=", "aimsun_api", ".", "AKIVehGetLeaderId", "(", "veh_id", ")", "\n", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "leader", ",", ")", ")", "\n", "\n", "", "elif", "data", "==", "ac", ".", "VEH_GET_FOLLOWER", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "veh_id", ",", "=", "retrieve_message", "(", "conn", ",", "'i'", ")", "\n", "follower", "=", "aimsun_api", ".", "AKIVehGetFollowerId", "(", "veh_id", ")", "\n", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "follower", ",", ")", ")", "\n", "\n", "", "elif", "data", "==", "ac", ".", "VEH_GET_NEXT_SECTION", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "veh_id", ",", "section", "=", "retrieve_message", "(", "conn", ",", "'i i'", ")", "\n", "next_section", "=", "AKIVehInfPathGetNextSection", "(", "veh_id", ",", "section", ")", "\n", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "next_section", ",", ")", ")", "\n", "\n", "", "elif", "data", "==", "ac", ".", "VEH_GET_ROUTE", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "# veh_id, = retrieve_message(conn, 'i')", "\n", "# TODO", "\n", "\n", "", "elif", "data", "==", "ac", ".", "TL_GET_IDS", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "\n", "data", "=", "None", "\n", "while", "data", "is", "None", ":", "\n", "                    ", "data", "=", "conn", ".", "recv", "(", "256", ")", "\n", "\n", "", "num_meters", "=", "aimsun_api", ".", "ECIGetNumberMeterings", "(", ")", "\n", "if", "num_meters", "==", "0", ":", "\n", "                    ", "output", "=", "'-1'", "\n", "", "else", ":", "\n", "                    ", "meter_ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "num_meters", "+", "1", ")", ":", "\n", "                        ", "struct_metering", "=", "ECIGetMeteringProperties", "(", "i", ")", "\n", "meter_id", "=", "struct_metering", ".", "Id", "\n", "meter_ids", ".", "append", "(", "meter_id", ")", "\n", "", "output", "=", "':'", ".", "join", "(", "[", "str", "(", "e", ")", "for", "e", "in", "meter_ids", "]", ")", "\n", "", "send_message", "(", "conn", ",", "in_format", "=", "'str'", ",", "values", "=", "(", "output", ",", ")", ")", "\n", "\n", "", "elif", "data", "==", "ac", ".", "TL_SET_STATE", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "meter_aimsun_id", ",", "state", "=", "retrieve_message", "(", "conn", ",", "'i i'", ")", "\n", "time", "=", "AKIGetCurrentSimulationTime", "(", ")", "# simulation time", "\n", "sim_step", "=", "AKIGetSimulationStepTime", "(", ")", "\n", "identity", "=", "0", "\n", "ECIChangeStateMeteringById", "(", "\n", "meter_aimsun_id", ",", "state", ",", "time", ",", "sim_step", ",", "identity", ")", "\n", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "\n", "", "elif", "data", "==", "ac", ".", "TL_GET_STATE", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "meter_aimsun_id", "=", "retrieve_message", "(", "conn", ",", "'i'", ")", "\n", "lane_id", "=", "1", "# TODO double check", "\n", "state", "=", "ECIGetCurrentStateofMeteringById", "(", "\n", "meter_aimsun_id", ",", "lane_id", ")", "\n", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "state", ",", ")", ")", "\n", "\n", "", "elif", "data", "==", "ac", ".", "GET_EDGE_NAME", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "\n", "# get the edge ID in flow", "\n", "edge", "=", "None", "\n", "while", "edge", "is", "None", ":", "\n", "                    ", "edge", "=", "conn", ".", "recv", "(", "2048", ")", "\n", "\n", "", "model", "=", "GKSystem", ".", "getSystem", "(", ")", ".", "getActiveModel", "(", ")", "\n", "edge_aimsun", "=", "model", ".", "getCatalog", "(", ")", ".", "findByName", "(", "\n", "edge", ",", "model", ".", "getType", "(", "'GKSection'", ")", ")", "\n", "\n", "if", "edge_aimsun", ":", "\n", "                    ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "\n", "values", "=", "(", "edge_aimsun", ".", "getId", "(", ")", ",", ")", ")", "\n", "", "else", ":", "\n", "                    ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "\n", "values", "=", "(", "int", "(", "edge", ")", ",", ")", ")", "\n", "\n", "# in case the message is unknown, return -1001", "\n", "", "", "else", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "-", "1001", ",", ")", ")", "\n", "\n", "# close the connection", "\n", "", "", "", "conn", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.run.AAPILoad": [[474, 477], ["None"], "function", ["None"], ["", "def", "AAPILoad", "(", ")", ":", "\n", "    ", "\"\"\"Execute commands while the Aimsun template is loading.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.run.AAPIInit": [[479, 484], ["AKISetEndSimTime"], "function", ["None"], ["", "def", "AAPIInit", "(", ")", ":", "\n", "    ", "\"\"\"Execute commands while the Aimsun instance is initializing.\"\"\"", "\n", "# set the simulation time to be very large", "\n", "AKISetEndSimTime", "(", "2e6", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.run.AAPIManage": [[486, 501], ["socket.socket", "socket.socket.setsockopt", "socket.socket.bind", "socket.socket.listen", "socket.socket.accept", "thread.start_new_thread"], "function", ["None"], ["", "def", "AAPIManage", "(", "time", ",", "timeSta", ",", "timeTrans", ",", "acycle", ")", ":", "\n", "    ", "\"\"\"Execute commands before an Aimsun simulation step.\"\"\"", "\n", "# tcp/ip connection from the aimsun process", "\n", "server_socket", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "server_socket", ".", "setsockopt", "(", "socket", ".", "SOL_SOCKET", ",", "socket", ".", "SO_REUSEADDR", ",", "1", ")", "\n", "server_socket", ".", "bind", "(", "(", "'localhost'", ",", "PORT", ")", ")", "\n", "\n", "# connect to the Flow instance", "\n", "server_socket", ".", "listen", "(", "10", ")", "\n", "c", ",", "address", "=", "server_socket", ".", "accept", "(", ")", "\n", "\n", "# start the threaded process", "\n", "start_new_thread", "(", "threaded_client", ",", "(", "c", ",", ")", ")", "\n", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.run.AAPIPostManage": [[503, 506], ["None"], "function", ["None"], ["", "def", "AAPIPostManage", "(", "time", ",", "timeSta", ",", "timeTrans", ",", "acycle", ")", ":", "\n", "    ", "\"\"\"Execute commands after an Aimsun simulation step.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.run.AAPIFinish": [[508, 511], ["None"], "function", ["None"], ["", "def", "AAPIFinish", "(", ")", ":", "\n", "    ", "\"\"\"Execute commands while the Aimsun instance is terminating.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.run.AAPIUnLoad": [[513, 516], ["None"], "function", ["None"], ["", "def", "AAPIUnLoad", "(", ")", ":", "\n", "    ", "\"\"\"Execute commands while Aimsun is closing.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.run.AAPIPreRouteChoiceCalculation": [[518, 521], ["None"], "function", ["None"], ["", "def", "AAPIPreRouteChoiceCalculation", "(", "time", ",", "timeSta", ")", ":", "\n", "    ", "\"\"\"Execute Aimsun route choice calculation.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.run.AAPIEnterVehicle": [[523, 528], ["entered_vehicles.append"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "AAPIEnterVehicle", "(", "idveh", ",", "idsection", ")", ":", "\n", "    ", "\"\"\"Execute command once a vehicle enters the Aimsun instance.\"\"\"", "\n", "global", "entered_vehicles", "\n", "entered_vehicles", ".", "append", "(", "idveh", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.run.AAPIExitVehicle": [[530, 535], ["exited_vehicles.append"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "AAPIExitVehicle", "(", "idveh", ",", "idsection", ")", ":", "\n", "    ", "\"\"\"Execute command once a vehicle exits the Aimsun instance.\"\"\"", "\n", "global", "exited_vehicles", "\n", "exited_vehicles", ".", "append", "(", "idveh", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.run.AAPIEnterPedestrian": [[537, 540], ["None"], "function", ["None"], ["", "def", "AAPIEnterPedestrian", "(", "idPedestrian", ",", "originCentroid", ")", ":", "\n", "    ", "\"\"\"Execute command once a pedestrian enters the Aimsun instance.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.run.AAPIExitPedestrian": [[542, 545], ["None"], "function", ["None"], ["", "def", "AAPIExitPedestrian", "(", "idPedestrian", ",", "destinationCentroid", ")", ":", "\n", "    ", "\"\"\"Execute command once a pedestrian exits the Aimsun instance.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.run.AAPIEnterVehicleSection": [[547, 550], ["None"], "function", ["None"], ["", "def", "AAPIEnterVehicleSection", "(", "idveh", ",", "idsection", ",", "atime", ")", ":", "\n", "    ", "\"\"\"Execute command once a vehicle enters the Aimsun instance.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.run.AAPIExitVehicleSection": [[552, 555], ["None"], "function", ["None"], ["", "def", "AAPIExitVehicleSection", "(", "idveh", ",", "idsection", ",", "atime", ")", ":", "\n", "    ", "\"\"\"Execute command once a vehicle exits the Aimsun instance.\"\"\"", "\n", "return", "0", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.leaderboard.evaluate.evaluate_policy": [[52, 177], ["dict.get", "dict.get", "__import__", "getattr", "__import__", "getattr", "getattr.", "getattr.", "dict", "flow.core.experiment.Experiment", "flow.core.experiment.Experiment", "flow.core.experiment.Experiment.run", "AVAILABLE_BENCHMARKS.keys", "flow.utils.exceptions.FatalFlowError", "flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "numpy.mean", "numpy.std", "_get_states"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.std"], ["def", "evaluate_policy", "(", "benchmark", ",", "_get_actions", ",", "_get_states", "=", "None", ")", ":", "\n", "    ", "\"\"\"Evaluate the performance of a controller on a predefined benchmark.\n\n    Parameters\n    ----------\n    benchmark : str\n        name of the benchmark, must be printed as it is in the\n        benchmarks folder; otherwise a FatalFlowError will be raised\n    _get_actions : method\n        the mapping from states to actions for the RL agent(s)\n    _get_states : method, optional\n        a mapping from the environment object in Flow to some state, which\n        overrides the _get_states method of the environment. Note that the\n        same cannot be done for the actions.\n\n    Returns\n    -------\n    float\n        mean of the evaluation return of the benchmark from NUM_RUNS number\n        of simulations\n    float\n        standard deviation of the evaluation return of the benchmark from\n        NUM_RUNS number of simulations\n\n    Raises\n    ------\n    flow.utils.exceptions.FatalFlowError\n        If the specified benchmark is not available.\n    \"\"\"", "\n", "if", "benchmark", "not", "in", "AVAILABLE_BENCHMARKS", ".", "keys", "(", ")", ":", "\n", "        ", "raise", "FatalFlowError", "(", "\n", "\"benchmark {} is not available. Check spelling?\"", ".", "format", "(", "benchmark", ")", ")", "\n", "\n", "# get the flow params from the benchmark", "\n", "", "flow_params", "=", "AVAILABLE_BENCHMARKS", "[", "benchmark", "]", "\n", "\n", "exp_tag", "=", "flow_params", "[", "\"exp_tag\"", "]", "\n", "sim_params", "=", "flow_params", "[", "\"sim\"", "]", "\n", "vehicles", "=", "flow_params", "[", "\"veh\"", "]", "\n", "env_params", "=", "flow_params", "[", "\"env\"", "]", "\n", "env_params", ".", "evaluate", "=", "True", "# Set to true to get evaluation returns", "\n", "net_params", "=", "flow_params", "[", "\"net\"", "]", "\n", "initial_config", "=", "flow_params", ".", "get", "(", "\"initial\"", ",", "InitialConfig", "(", ")", ")", "\n", "traffic_lights", "=", "flow_params", ".", "get", "(", "\"tls\"", ",", "TrafficLightParams", "(", ")", ")", "\n", "\n", "# import the environment and network classes", "\n", "module", "=", "__import__", "(", "\"flow.envs\"", ",", "fromlist", "=", "[", "flow_params", "[", "\"env_name\"", "]", "]", ")", "\n", "env_class", "=", "getattr", "(", "module", ",", "flow_params", "[", "\"env_name\"", "]", ")", "\n", "module", "=", "__import__", "(", "\"flow.networks\"", ",", "fromlist", "=", "[", "flow_params", "[", "\"network\"", "]", "]", ")", "\n", "network_class", "=", "getattr", "(", "module", ",", "flow_params", "[", "\"network\"", "]", ")", "\n", "\n", "# recreate the network and environment", "\n", "network", "=", "network_class", "(", "\n", "name", "=", "exp_tag", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "net_params", ",", "\n", "initial_config", "=", "initial_config", ",", "\n", "traffic_lights", "=", "traffic_lights", ")", "\n", "\n", "# make sure the _get_states method of the environment is the one", "\n", "# specified by the user", "\n", "if", "_get_states", "is", "not", "None", ":", "\n", "\n", "        ", "class", "_env_class", "(", "env_class", ")", ":", "\n", "            ", "def", "get_state", "(", "self", ")", ":", "\n", "                ", "return", "_get_states", "(", "self", ")", "\n", "\n", "", "", "env_class", "=", "_env_class", "\n", "\n", "", "env", "=", "env_class", "(", "\n", "env_params", "=", "env_params", ",", "sim_params", "=", "sim_params", ",", "network", "=", "network", ")", "\n", "\n", "flow_params", "=", "dict", "(", "\n", "# name of the experiment", "\n", "exp_tag", "=", "exp_tag", ",", "\n", "\n", "# name of the flow environment the experiment is running on", "\n", "env_name", "=", "env_class", ",", "\n", "\n", "# name of the network class the experiment is running on", "\n", "network", "=", "network_class", ",", "\n", "\n", "# simulator that is used by the experiment", "\n", "simulator", "=", "'traci'", ",", "\n", "\n", "# sumo-related parameters (see flow.core.params.SumoParams)", "\n", "sim", "=", "sim_params", ",", "\n", "\n", "# environment related parameters (see flow.core.params.EnvParams)", "\n", "env", "=", "env_params", ",", "\n", "\n", "# network-related parameters (see flow.core.params.NetParams and the", "\n", "# network's documentation or ADDITIONAL_NET_PARAMS component)", "\n", "net", "=", "net_params", ",", "\n", "\n", "# vehicles to be placed in the network at the start of a rollout (see", "\n", "# flow.core.params.VehicleParams)", "\n", "veh", "=", "vehicles", ",", "\n", "\n", "# parameters specifying the positioning of vehicles upon initialization/", "\n", "# reset (see flow.core.params.InitialConfig)", "\n", "initial", "=", "initial_config", ",", "\n", "\n", "# traffic lights to be introduced to specific nodes (see", "\n", "# flow.core.params.TrafficLightParams)", "\n", "tls", "=", "traffic_lights", ",", "\n", ")", "\n", "\n", "# number of time steps", "\n", "flow_params", "[", "'env'", "]", ".", "horizon", "=", "env", ".", "env_params", ".", "horizon", "\n", "\n", "# create a Experiment object. Note that the state may not be that which is", "\n", "# specified by the environment.", "\n", "exp", "=", "Experiment", "(", "flow_params", ")", "\n", "exp", ".", "env", "=", "env", "\n", "\n", "exp", "=", "Experiment", "(", "flow_params", ")", "\n", "exp", ".", "env", "=", "env", "\n", "\n", "# run the experiment and return the reward", "\n", "res", "=", "exp", ".", "run", "(", "\n", "num_runs", "=", "NUM_RUNS", ",", "\n", "rl_actions", "=", "_get_actions", ")", "\n", "\n", "return", "np", ".", "mean", "(", "res", "[", "\"returns\"", "]", ")", ",", "np", ".", "std", "(", "res", "[", "\"returns\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.leaderboard.evaluate.get_compute_action_rllib": [[179, 221], ["flow.utils.rllib.get_rllib_config", "ray.init", "flow.utils.rllib.get_flow_params", "flow.utils.registry.make_create_env", "ray.tune.registry.register_env", "ray.rllib.agent.get_agent_class", "ray.rllib.agent.get_agent_class.", "agent_cls._restore", "ray.tune.registry.get_registry"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.get_rllib_config", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.get_flow_params", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env"], ["", "def", "get_compute_action_rllib", "(", "path_to_dir", ",", "checkpoint_num", ",", "alg", ")", ":", "\n", "    ", "\"\"\"Collect the compute_action method from RLlib's serialized files.\n\n    Parameters\n    ----------\n    path_to_dir : str\n        RLlib directory containing training results\n    checkpoint_num : int\n        checkpoint number / training iteration of the learned policy\n    alg : str\n        name of the RLlib algorithm that was used during the training\n        procedure\n\n    Returns\n    -------\n    method\n        the compute_action method from the algorithm along with the trained\n        parameters\n    \"\"\"", "\n", "# collect the configuration information from the RLlib checkpoint", "\n", "result_dir", "=", "path_to_dir", "if", "path_to_dir", "[", "-", "1", "]", "!=", "'/'", "else", "path_to_dir", "[", ":", "-", "1", "]", "\n", "config", "=", "get_rllib_config", "(", "result_dir", ")", "\n", "\n", "# run on only one cpu for rendering purposes", "\n", "ray", ".", "init", "(", "num_cpus", "=", "1", ")", "\n", "config", "[", "\"num_workers\"", "]", "=", "1", "\n", "\n", "# create and register a gym+rllib env", "\n", "flow_params", "=", "get_flow_params", "(", "config", ")", "\n", "create_env", ",", "env_name", "=", "make_create_env", "(", "\n", "params", "=", "flow_params", ",", "version", "=", "9999", ",", "render", "=", "False", ")", "\n", "register_env", "(", "env_name", ",", "create_env", ")", "\n", "\n", "# recreate the agent", "\n", "agent_cls", "=", "get_agent_class", "(", "alg", ")", "\n", "agent", "=", "agent_cls", "(", "env", "=", "env_name", ",", "registry", "=", "get_registry", "(", ")", ",", "config", "=", "config", ")", "\n", "\n", "# restore the trained parameters into the policy", "\n", "checkpoint", "=", "result_dir", "+", "'/checkpoint-{}'", ".", "format", "(", "checkpoint_num", ")", "\n", "agent", ".", "_restore", "(", "checkpoint", ")", "\n", "\n", "return", "agent", ".", "compute_action", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.leaderboard.solution.get_actions": [[13, 16], ["None"], "function", ["None"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.leaderboard.solution.get_states": [[19, 22], ["None"], "function", ["None"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args": [[16, 47], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args"], "function", ["None"], ["def", "parse_args", "(", "args", ")", ":", "\n", "    ", "\"\"\"Parse training options user can specify in command line.\n\n    Returns\n    -------\n    argparse.Namespace\n        the output parser object\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "formatter_class", "=", "argparse", ".", "RawDescriptionHelpFormatter", ",", "\n", "description", "=", "\"Parse argument used when running a Flow simulation.\"", ",", "\n", "epilog", "=", "\"python trpo_runner.py BENCHMARK_NAME\"", ")", "\n", "\n", "# required input parameters", "\n", "parser", ".", "add_argument", "(", "\n", "'benchmark_name'", ",", "type", "=", "str", ",", "\n", "help", "=", "'Name of the experiment configuration file, as located in '", "\n", "'flow/benchmarks.'", ")", "\n", "\n", "# optional input parameters", "\n", "parser", ".", "add_argument", "(", "\n", "'--num_cpus'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'How many CPUs to use.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num_steps'", ",", "type", "=", "int", ",", "default", "=", "9000000", ",", "\n", "help", "=", "'How many total steps to perform learning over.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--rollout_size'", ",", "type", "=", "int", ",", "default", "=", "30000", ",", "\n", "help", "=", "'How many steps are in a training batch.'", ")", "\n", "\n", "return", "parser", ".", "parse_known_args", "(", "args", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.run_model": [[49, 82], ["stable_baselines.common.vec_env.DummyVecEnv", "stable_baselines.TRPO", "stable_baselines.TRPO.learn", "flow.utils.registry.env_constructor"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.env_constructor"], ["", "def", "run_model", "(", "params", ",", "rollout_size", "=", "50", ",", "num_steps", "=", "50", ")", ":", "\n", "    ", "\"\"\"Perform the training operation.\n\n    Parameters\n    ----------\n    params : dict\n        flow-specific parameters (see flow/utils/registry.py)\n    rollout_size : int\n        length of a single rollout\n    num_steps : int\n        total number of training steps\n\n    Returns\n    -------\n    stable_baselines.*\n        the trained model\n    \"\"\"", "\n", "constructor", "=", "env_constructor", "(", "params", ",", "version", "=", "0", ")", "(", ")", "\n", "env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "constructor", "]", ")", "\n", "\n", "model", "=", "TRPO", "(", "\n", "'MlpPolicy'", ",", "\n", "env", ",", "\n", "verbose", "=", "2", ",", "\n", "timesteps_per_batch", "=", "rollout_size", ",", "\n", "gamma", "=", "0.999", ",", "\n", "policy_kwargs", "=", "{", "\n", "\"net_arch\"", ":", "[", "100", ",", "50", ",", "25", "]", "\n", "}", ",", "\n", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "num_steps", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.save_model": [[84, 105], ["print", "model.save", "os.path.join", "open", "json.dump", "os.path.join"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save"], ["", "def", "save_model", "(", "model", ",", "params", ",", "save_path", ")", ":", "\n", "    ", "\"\"\"Save the trained model and flow-specific parameters.\n\n    Parameters\n    ----------\n    model : stable_baselines.*\n        the trained model\n    params : dict\n        flow-specific parameters (see flow/utils/registry.py)\n    save_path : str\n        path to saved model and experiment configuration files\n    \"\"\"", "\n", "print", "(", "'Saving the trained model!'", ")", "\n", "\n", "# save the trained model", "\n", "model", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"model\"", ")", ")", "\n", "\n", "# dump the flow params", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'flow_params.json'", ")", ",", "'w'", ")", "as", "outfile", ":", "\n", "        ", "json", ".", "dump", "(", "\n", "params", ",", "outfile", ",", "cls", "=", "FlowParamsEncoder", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.baselines.bottleneck1.bottleneck1_baseline": [[17, 69], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.InFlows", "flow.core.params.InFlows.add", "flow.core.experiment.Experiment", "flow.core.experiment.Experiment.run", "numpy.mean", "numpy.std", "flow.core.params.SumoCarFollowingParams", "flow.core.params.SumoLaneChangeParams"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.std"], ["from", "flow", ".", "controllers", "import", "RLController", ",", "ContinuousRouter", "\n", "\n", "# time horizon of a single rollout", "\n", "HORIZON", "=", "1500", "\n", "\n", "SCALING", "=", "1", "\n", "NUM_LANES", "=", "4", "*", "SCALING", "# number of lanes in the widest highway", "\n", "DISABLE_TB", "=", "True", "\n", "DISABLE_RAMP_METER", "=", "True", "\n", "AV_FRAC", "=", "0.25", "\n", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"human\"", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "9", ",", "\n", ")", ",", "\n", "lane_change_params", "=", "SumoLaneChangeParams", "(", "\n", "lane_change_mode", "=", "1621", ",", "\n", ")", ",", "\n", "num_vehicles", "=", "1", "*", "SCALING", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"rl\"", ",", "\n", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "9", ",", "\n", ")", ",", "\n", "lane_change_params", "=", "SumoLaneChangeParams", "(", "\n", "lane_change_mode", "=", "0", ",", "\n", ")", ",", "\n", "num_vehicles", "=", "1", "*", "SCALING", ")", "\n", "\n", "controlled_segments", "=", "[", "(", "\"1\"", ",", "1", ",", "False", ")", ",", "(", "\"2\"", ",", "2", ",", "True", ")", ",", "(", "\"3\"", ",", "2", ",", "True", ")", ",", "\n", "(", "\"4\"", ",", "2", ",", "True", ")", ",", "(", "\"5\"", ",", "1", ",", "False", ")", "]", "\n", "num_observed_segments", "=", "[", "(", "\"1\"", ",", "1", ")", ",", "(", "\"2\"", ",", "3", ")", ",", "(", "\"3\"", ",", "3", ")", ",", "(", "\"4\"", ",", "3", ")", ",", "(", "\"5\"", ",", "1", ")", "]", "\n", "additional_env_params", "=", "{", "\n", "\"target_velocity\"", ":", "40", ",", "\n", "\"disable_tb\"", ":", "True", ",", "\n", "\"disable_ramp_metering\"", ":", "True", ",", "\n", "\"controlled_segments\"", ":", "controlled_segments", ",", "\n", "\"symmetric\"", ":", "False", ",", "\n", "\"observed_segments\"", ":", "num_observed_segments", ",", "\n", "\"reset_inflow\"", ":", "False", ",", "\n", "\"lane_change_duration\"", ":", "5", ",", "\n", "\"max_accel\"", ":", "3", ",", "\n", "\"max_decel\"", ":", "3", ",", "\n", "\"inflow_range\"", ":", "[", "1200", ",", "2500", "]", "\n", "}", "\n", "\n", "# flow rate", "\n", "flow_rate", "=", "2500", "*", "SCALING", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.baselines.bottleneck2.bottleneck2_baseline": [[17, 69], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.InFlows", "flow.core.params.InFlows.add", "flow.core.experiment.Experiment", "flow.core.experiment.Experiment.run", "numpy.mean", "numpy.std", "flow.core.params.SumoCarFollowingParams", "flow.core.params.SumoLaneChangeParams"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.std"], ["from", "flow", ".", "controllers", "import", "RLController", ",", "ContinuousRouter", "\n", "\n", "# time horizon of a single rollout", "\n", "HORIZON", "=", "1500", "\n", "\n", "SCALING", "=", "2", "\n", "NUM_LANES", "=", "4", "*", "SCALING", "# number of lanes in the widest highway", "\n", "DISABLE_TB", "=", "True", "\n", "DISABLE_RAMP_METER", "=", "True", "\n", "AV_FRAC", "=", ".10", "\n", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"rl\"", ",", "\n", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "9", ",", "\n", ")", ",", "\n", "lane_change_params", "=", "SumoLaneChangeParams", "(", "\n", "lane_change_mode", "=", "0", ",", "\n", ")", ",", "\n", "num_vehicles", "=", "1", "*", "SCALING", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"human\"", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "9", ",", "\n", ")", ",", "\n", "lane_change_params", "=", "SumoLaneChangeParams", "(", "\n", "lane_change_mode", "=", "0", ",", "\n", ")", ",", "\n", "num_vehicles", "=", "1", "*", "SCALING", ")", "\n", "\n", "controlled_segments", "=", "[", "(", "\"1\"", ",", "1", ",", "False", ")", ",", "(", "\"2\"", ",", "2", ",", "True", ")", ",", "(", "\"3\"", ",", "2", ",", "True", ")", ",", "\n", "(", "\"4\"", ",", "2", ",", "True", ")", ",", "(", "\"5\"", ",", "1", ",", "False", ")", "]", "\n", "num_observed_segments", "=", "[", "(", "\"1\"", ",", "1", ")", ",", "(", "\"2\"", ",", "3", ")", ",", "(", "\"3\"", ",", "3", ")", ",", "(", "\"4\"", ",", "3", ")", ",", "(", "\"5\"", ",", "1", ")", "]", "\n", "additional_env_params", "=", "{", "\n", "\"target_velocity\"", ":", "40", ",", "\n", "\"disable_tb\"", ":", "True", ",", "\n", "\"disable_ramp_metering\"", ":", "True", ",", "\n", "\"controlled_segments\"", ":", "controlled_segments", ",", "\n", "\"symmetric\"", ":", "False", ",", "\n", "\"observed_segments\"", ":", "num_observed_segments", ",", "\n", "\"reset_inflow\"", ":", "False", ",", "\n", "\"lane_change_duration\"", ":", "5", ",", "\n", "\"max_accel\"", ":", "3", ",", "\n", "\"max_decel\"", ":", "3", ",", "\n", "\"inflow_range\"", ":", "[", "1200", "*", "SCALING", ",", "2500", "*", "SCALING", "]", "\n", "}", "\n", "\n", "# flow rate", "\n", "flow_rate", "=", "2500", "*", "SCALING", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.baselines.grid0.grid0_baseline": [[14, 62], ["flow.core.params.TrafficLightParams", "range", "flow.core.experiment.Experiment", "flow.core.experiment.Experiment.run", "numpy.mean", "flow.core.params.TrafficLightParams.add", "str"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["# time horizon of a single rollout", "\n", "HORIZON", "=", "400", "\n", "# inflow rate of vehicles at every edge", "\n", "EDGE_INFLOW", "=", "300", "\n", "# enter speed for departing vehicles", "\n", "V_ENTER", "=", "30", "\n", "# number of row of bidirectional lanes", "\n", "N_ROWS", "=", "3", "\n", "# number of columns of bidirectional lanes", "\n", "N_COLUMNS", "=", "3", "\n", "# length of inner edges in the grid network", "\n", "INNER_LENGTH", "=", "300", "\n", "# length of final edge in route", "\n", "LONG_LENGTH", "=", "100", "\n", "# length of edges that vehicles start on", "\n", "SHORT_LENGTH", "=", "300", "\n", "# number of vehicles originating in the left, right, top, and bottom edges", "\n", "N_LEFT", ",", "N_RIGHT", ",", "N_TOP", ",", "N_BOTTOM", "=", "1", ",", "1", ",", "1", ",", "1", "\n", "\n", "# we place a sufficient number of vehicles to ensure they confirm with the", "\n", "# total number specified above. We also use a \"right_of_way\" speed mode to", "\n", "# support traffic light compliance", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"human\"", ",", "\n", "acceleration_controller", "=", "(", "SimCarFollowingController", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "min_gap", "=", "2.5", ",", "\n", "max_speed", "=", "V_ENTER", ",", "\n", "decel", "=", "7.5", ",", "# avoid collisions at emergency stops", "\n", "speed_mode", "=", "\"right_of_way\"", ",", "\n", ")", ",", "\n", "routing_controller", "=", "(", "GridRouter", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "(", "N_LEFT", "+", "N_RIGHT", ")", "*", "N_COLUMNS", "+", "(", "N_BOTTOM", "+", "N_TOP", ")", "*", "N_ROWS", ")", "\n", "\n", "# inflows of vehicles are place on all outer edges (listed here)", "\n", "outer_edges", "=", "[", "]", "\n", "outer_edges", "+=", "[", "\"left{}_{}\"", ".", "format", "(", "N_ROWS", ",", "i", ")", "for", "i", "in", "range", "(", "N_COLUMNS", ")", "]", "\n", "outer_edges", "+=", "[", "\"right0_{}\"", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "N_ROWS", ")", "]", "\n", "outer_edges", "+=", "[", "\"bot{}_0\"", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "N_ROWS", ")", "]", "\n", "outer_edges", "+=", "[", "\"top{}_{}\"", ".", "format", "(", "i", ",", "N_COLUMNS", ")", "for", "i", "in", "range", "(", "N_ROWS", ")", "]", "\n", "\n", "# equal inflows for each edge (as dictate by the EDGE_INFLOW constant)", "\n", "inflow", "=", "InFlows", "(", ")", "\n", "for", "edge", "in", "outer_edges", ":", "\n", "    ", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "edge", ",", "\n", "vehs_per_hour", "=", "EDGE_INFLOW", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.baselines.merge012.merge_baseline": [[11, 43], ["flow.core.experiment.Experiment", "flow.core.experiment.Experiment.run", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["def", "merge_baseline", "(", "num_runs", ",", "render", "=", "True", ")", ":", "\n", "    ", "\"\"\"Run script for all merge baselines.\n\n    Parameters\n    ----------\n        num_runs : int\n            number of rollouts the performance of the environment is evaluated\n            over\n        render: bool, optional\n            specifies whether to use the gui during execution\n\n    Returns\n    -------\n        flow.core.experiment.Experiment\n            class needed to run simulations\n    \"\"\"", "\n", "sim_params", "=", "flow_params", "[", "'sim'", "]", "\n", "env_params", "=", "flow_params", "[", "'env'", "]", "\n", "\n", "# modify the rendering to match what is requested", "\n", "sim_params", ".", "render", "=", "render", "\n", "\n", "# set the evaluation flag to True", "\n", "env_params", ".", "evaluate", "=", "True", "\n", "\n", "flow_params", "[", "'env'", "]", ".", "horizon", "=", "env_params", ".", "horizon", "\n", "exp", "=", "Experiment", "(", "flow_params", ")", "\n", "\n", "results", "=", "exp", ".", "run", "(", "num_runs", ")", "\n", "avg_speed", "=", "np", ".", "mean", "(", "results", "[", "'returns'", "]", ")", "\n", "\n", "return", "avg_speed", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.baselines.bottleneck0.bottleneck0_baseline": [[17, 68], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.InFlows", "flow.core.params.InFlows.add", "flow.core.experiment.Experiment", "flow.core.experiment.Experiment.run", "numpy.mean", "numpy.std", "flow.core.params.SumoCarFollowingParams", "flow.core.params.SumoLaneChangeParams"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.std"], ["\n", "# time horizon of a single rollout", "\n", "HORIZON", "=", "1500", "\n", "\n", "SCALING", "=", "1", "\n", "NUM_LANES", "=", "4", "*", "SCALING", "# number of lanes in the widest highway", "\n", "DISABLE_TB", "=", "True", "\n", "DISABLE_RAMP_METER", "=", "True", "\n", "AV_FRAC", "=", "0.10", "\n", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"human\"", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "9", ",", "\n", ")", ",", "\n", "lane_change_params", "=", "SumoLaneChangeParams", "(", "\n", "lane_change_mode", "=", "0", ",", "\n", ")", ",", "\n", "num_vehicles", "=", "1", "*", "SCALING", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"rl\"", ",", "\n", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "9", ",", "\n", ")", ",", "\n", "lane_change_params", "=", "SumoLaneChangeParams", "(", "\n", "lane_change_mode", "=", "0", ",", "\n", ")", ",", "\n", "num_vehicles", "=", "1", "*", "SCALING", ")", "\n", "\n", "controlled_segments", "=", "[", "(", "\"1\"", ",", "1", ",", "False", ")", ",", "(", "\"2\"", ",", "2", ",", "True", ")", ",", "(", "\"3\"", ",", "2", ",", "True", ")", ",", "\n", "(", "\"4\"", ",", "2", ",", "True", ")", ",", "(", "\"5\"", ",", "1", ",", "False", ")", "]", "\n", "num_observed_segments", "=", "[", "(", "\"1\"", ",", "1", ")", ",", "(", "\"2\"", ",", "3", ")", ",", "(", "\"3\"", ",", "3", ")", ",", "(", "\"4\"", ",", "3", ")", ",", "(", "\"5\"", ",", "1", ")", "]", "\n", "\n", "additional_env_params", "=", "{", "\n", "\"target_velocity\"", ":", "40", ",", "\n", "\"disable_tb\"", ":", "True", ",", "\n", "\"disable_ramp_metering\"", ":", "True", ",", "\n", "\"controlled_segments\"", ":", "controlled_segments", ",", "\n", "\"symmetric\"", ":", "False", ",", "\n", "\"observed_segments\"", ":", "num_observed_segments", ",", "\n", "\"reset_inflow\"", ":", "False", ",", "\n", "\"lane_change_duration\"", ":", "5", ",", "\n", "\"max_accel\"", ":", "3", ",", "\n", "\"max_decel\"", ":", "3", ",", "\n", "\"inflow_range\"", ":", "[", "1200", ",", "2500", "]", "\n", "}", "\n", "\n", "# flow rate", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.baselines.grid1.grid1_baseline": [[14, 60], ["flow.core.params.TrafficLightParams", "range", "flow.core.experiment.Experiment", "flow.core.experiment.Experiment.run", "numpy.mean", "flow.core.params.TrafficLightParams.add", "str"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["# time horizon of a single rollout", "\n", "HORIZON", "=", "400", "\n", "# inflow rate of vehicles at every edge", "\n", "EDGE_INFLOW", "=", "300", "\n", "# enter speed for departing vehicles", "\n", "V_ENTER", "=", "30", "\n", "# number of row of bidirectional lanes", "\n", "N_ROWS", "=", "5", "\n", "# number of columns of bidirectional lanes", "\n", "N_COLUMNS", "=", "5", "\n", "# length of inner edges in the grid network", "\n", "INNER_LENGTH", "=", "300", "\n", "# length of final edge in route", "\n", "LONG_LENGTH", "=", "100", "\n", "# length of edges that vehicles start on", "\n", "SHORT_LENGTH", "=", "300", "\n", "# number of vehicles originating in the left, right, top, and bottom edges", "\n", "N_LEFT", ",", "N_RIGHT", ",", "N_TOP", ",", "N_BOTTOM", "=", "1", ",", "1", ",", "1", ",", "1", "\n", "\n", "# we place a sufficient number of vehicles to ensure they confirm with the", "\n", "# total number specified above. We also use a \"right_of_way\" speed mode to", "\n", "# support traffic light compliance", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"human\"", ",", "\n", "acceleration_controller", "=", "(", "SimCarFollowingController", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "min_gap", "=", "2.5", ",", "\n", "max_speed", "=", "V_ENTER", ",", "\n", "decel", "=", "7.5", ",", "# avoid collisions at emergency stops", "\n", "speed_mode", "=", "\"right_of_way\"", ",", "\n", ")", ",", "\n", "routing_controller", "=", "(", "GridRouter", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "(", "N_LEFT", "+", "N_RIGHT", ")", "*", "N_COLUMNS", "+", "(", "N_BOTTOM", "+", "N_TOP", ")", "*", "N_ROWS", ")", "\n", "\n", "# inflows of vehicles are place on all outer edges (listed here)", "\n", "outer_edges", "=", "[", "]", "\n", "outer_edges", "+=", "[", "\"left{}_{}\"", ".", "format", "(", "N_ROWS", ",", "i", ")", "for", "i", "in", "range", "(", "N_COLUMNS", ")", "]", "\n", "outer_edges", "+=", "[", "\"right0_{}\"", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "N_ROWS", ")", "]", "\n", "outer_edges", "+=", "[", "\"bot{}_0\"", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "N_ROWS", ")", "]", "\n", "outer_edges", "+=", "[", "\"top{}_{}\"", ".", "format", "(", "i", ",", "N_COLUMNS", ")", "for", "i", "in", "range", "(", "N_ROWS", ")", "]", "\n", "\n", "# equal inflows for each edge (as dictate by the EDGE_INFLOW constant)", "\n", "inflow", "=", "InFlows", "(", ")", "\n", "for", "edge", "in", "outer_edges", ":", "\n", "    ", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.baselines.figureeight012.figure_eight_baseline": [[15, 57], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.experiment.Experiment", "flow.core.experiment.Experiment.run", "numpy.mean", "flow.core.params.SumoCarFollowingParams"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["def", "figure_eight_baseline", "(", "num_runs", ",", "render", "=", "True", ")", ":", "\n", "    ", "\"\"\"Run script for all figure eight baselines.\n\n    Parameters\n    ----------\n        num_runs : int\n            number of rollouts the performance of the environment is evaluated\n            over\n        render : bool, optional\n            specifies whether to use the gui during execution\n\n    Returns\n    -------\n        Experiment\n            class needed to run simulations\n    \"\"\"", "\n", "sim_params", "=", "flow_params", "[", "'sim'", "]", "\n", "env_params", "=", "flow_params", "[", "'env'", "]", "\n", "\n", "# modify the rendering to match what is requested", "\n", "sim_params", ".", "render", "=", "render", "\n", "\n", "# set the evaluation flag to True", "\n", "env_params", ".", "evaluate", "=", "True", "\n", "\n", "# we want no autonomous vehicles in the simulation", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "veh_id", "=", "'human'", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "'noise'", ":", "0.2", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "'obey_safe_speed'", ",", "\n", ")", ",", "\n", "num_vehicles", "=", "14", ")", "\n", "\n", "flow_params", "[", "'env'", "]", ".", "horizon", "=", "env_params", ".", "horizon", "\n", "exp", "=", "Experiment", "(", "flow_params", ")", "\n", "\n", "results", "=", "exp", ".", "run", "(", "num_runs", ")", "\n", "avg_speed", "=", "np", ".", "mean", "(", "results", "[", "'returns'", "]", ")", "\n", "\n", "return", "avg_speed", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.visualizer_rllib.visualizer_rllib": [[46, 325], ["flow.utils.rllib.get_rllib_config", "flow.utils.rllib.get_rllib_config.get().get", "flow.utils.rllib.get_flow_params", "setattr", "os.path.dirname", "flow.utils.registry.make_create_env", "ray.tune.registry.register_env", "get_agent_class.", "agent_cls.restore", "range", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "gym.make.unwrapped.terminate", "flow.utils.rllib.get_rllib_pkl", "hasattr", "get_agent_class", "os.path.realpath", "hasattr", "gym.make", "[].keys", "gym.make.restart_simulation", "gym.make.reset", "range", "vehicles.get_outflow_rate", "final_outflows.append", "vehicles.get_inflow_rate", "final_inflows.append", "numpy.all", "mean_speed.append", "std_speed.append", "rets.items", "print", "print", "time.sleep", "os.path.dirname", "flow.core.util.emission_to_csv", "print", "os.remove", "flow.utils.rllib.get_rllib_config.get", "print", "sys.exit", "get_agent_class", "print", "sys.exit", "os.environ.get", "[].keys", "vehicles.get_speed", "gym.make.step", "rets.keys", "rets.append", "numpy.mean", "numpy.std", "rets.items", "print", "print", "print", "print", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "os.path.realpath", "numpy.zeros", "numpy.zeros", "vehicles.get_ids", "vel.append", "env.reset.keys", "agent_cls.compute_action", "reward.items", "rets[].append", "numpy.array", "len", "print", "numpy.mean", "numpy.std", "numpy.zeros", "numpy.zeros", "rets.keys", "numpy.mean", "zip", "numpy.mean", "numpy.std", "agent_cls.compute_action", "agent_cls.compute_action", "policy_map_fn", "policy_map_fn", "policy_map_fn"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.get_rllib_config", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.get_flow_params", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.get_rllib_pkl", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.restart_simulation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_outflow_rate", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_inflow_rate", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.emission_to_csv", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.std", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.std", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.std", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.std", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.std", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.std", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.std", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.std"], ["def", "visualizer_rllib", "(", "args", ")", ":", "\n", "    ", "\"\"\"Visualizer for RLlib experiments.\n\n    This function takes args (see function create_parser below for\n    more detailed information on what information can be fed to this\n    visualizer), and renders the experiment associated with it.\n    \"\"\"", "\n", "result_dir", "=", "args", ".", "result_dir", "if", "args", ".", "result_dir", "[", "-", "1", "]", "!=", "'/'", "else", "args", ".", "result_dir", "[", ":", "-", "1", "]", "\n", "\n", "config", "=", "get_rllib_config", "(", "result_dir", ")", "\n", "\n", "# check if we have a multiagent environment but in a", "\n", "# backwards compatible way", "\n", "if", "config", ".", "get", "(", "'multiagent'", ",", "{", "}", ")", ".", "get", "(", "'policies'", ",", "None", ")", ":", "\n", "        ", "multiagent", "=", "True", "\n", "pkl", "=", "get_rllib_pkl", "(", "result_dir", ")", "\n", "config", "[", "'multiagent'", "]", "=", "pkl", "[", "'multiagent'", "]", "\n", "", "else", ":", "\n", "        ", "multiagent", "=", "False", "\n", "\n", "# Run on only one cpu for rendering purposes", "\n", "", "config", "[", "'num_workers'", "]", "=", "0", "\n", "\n", "flow_params", "=", "get_flow_params", "(", "config", ")", "\n", "\n", "# hack for old pkl files", "\n", "# TODO(ev) remove eventually", "\n", "sim_params", "=", "flow_params", "[", "'sim'", "]", "\n", "setattr", "(", "sim_params", ",", "'num_clients'", ",", "1", ")", "\n", "\n", "# for hacks for old pkl files TODO: remove eventually", "\n", "if", "not", "hasattr", "(", "sim_params", ",", "'use_ballistic'", ")", ":", "\n", "        ", "sim_params", ".", "use_ballistic", "=", "False", "\n", "\n", "# Determine agent and checkpoint", "\n", "", "config_run", "=", "config", "[", "'env_config'", "]", "[", "'run'", "]", "if", "'run'", "in", "config", "[", "'env_config'", "]", "else", "None", "\n", "if", "args", ".", "run", "and", "config_run", ":", "\n", "        ", "if", "args", ".", "run", "!=", "config_run", ":", "\n", "            ", "print", "(", "'visualizer_rllib.py: error: run argument '", "\n", "+", "'\\'{}\\' passed in '", ".", "format", "(", "args", ".", "run", ")", "\n", "+", "'differs from the one stored in params.json '", "\n", "+", "'\\'{}\\''", ".", "format", "(", "config_run", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "", "if", "args", ".", "run", ":", "\n", "        ", "agent_cls", "=", "get_agent_class", "(", "args", ".", "run", ")", "\n", "", "elif", "config_run", ":", "\n", "        ", "agent_cls", "=", "get_agent_class", "(", "config_run", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'visualizer_rllib.py: error: could not find flow parameter '", "\n", "'\\'run\\' in params.json, '", "\n", "'add argument --run to provide the algorithm or model used '", "\n", "'to train the results\\n e.g. '", "\n", "'python ./visualizer_rllib.py /tmp/ray/result_dir 1 --run PPO'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "sim_params", ".", "restart_instance", "=", "True", "\n", "dir_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "emission_path", "=", "'{0}/test_time_rollout/'", ".", "format", "(", "dir_path", ")", "\n", "sim_params", ".", "emission_path", "=", "emission_path", "if", "args", ".", "gen_emission", "else", "None", "\n", "\n", "# pick your rendering mode", "\n", "if", "args", ".", "render_mode", "==", "'sumo_web3d'", ":", "\n", "        ", "sim_params", ".", "num_clients", "=", "2", "\n", "sim_params", ".", "render", "=", "False", "\n", "", "elif", "args", ".", "render_mode", "==", "'drgb'", ":", "\n", "        ", "sim_params", ".", "render", "=", "'drgb'", "\n", "sim_params", ".", "pxpm", "=", "4", "\n", "", "elif", "args", ".", "render_mode", "==", "'sumo_gui'", ":", "\n", "        ", "sim_params", ".", "render", "=", "False", "# will be set to True below", "\n", "", "elif", "args", ".", "render_mode", "==", "'no_render'", ":", "\n", "        ", "sim_params", ".", "render", "=", "False", "\n", "", "if", "args", ".", "save_render", ":", "\n", "        ", "if", "args", ".", "render_mode", "!=", "'sumo_gui'", ":", "\n", "            ", "sim_params", ".", "render", "=", "'drgb'", "\n", "sim_params", ".", "pxpm", "=", "4", "\n", "", "sim_params", ".", "save_render", "=", "True", "\n", "\n", "# Create and register a gym+rllib env", "\n", "", "create_env", ",", "env_name", "=", "make_create_env", "(", "params", "=", "flow_params", ",", "version", "=", "0", ")", "\n", "register_env", "(", "env_name", ",", "create_env", ")", "\n", "\n", "# check if the environment is a single or multiagent environment, and", "\n", "# get the right address accordingly", "\n", "# single_agent_envs = [env for env in dir(flow.envs)", "\n", "#                      if not env.startswith('__')]", "\n", "\n", "# if flow_params['env_name'] in single_agent_envs:", "\n", "#     env_loc = 'flow.envs'", "\n", "# else:", "\n", "#     env_loc = 'flow.envs.multiagent'", "\n", "\n", "# Start the environment with the gui turned on and a path for the", "\n", "# emission file", "\n", "env_params", "=", "flow_params", "[", "'env'", "]", "\n", "env_params", ".", "restart_instance", "=", "False", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "env_params", ".", "evaluate", "=", "True", "\n", "\n", "# lower the horizon if testing", "\n", "", "if", "args", ".", "horizon", ":", "\n", "        ", "config", "[", "'horizon'", "]", "=", "args", ".", "horizon", "\n", "env_params", ".", "horizon", "=", "args", ".", "horizon", "\n", "\n", "# create the agent that will be used to compute the actions", "\n", "", "agent", "=", "agent_cls", "(", "env", "=", "env_name", ",", "config", "=", "config", ")", "\n", "checkpoint", "=", "result_dir", "+", "'/checkpoint_'", "+", "args", ".", "checkpoint_num", "\n", "checkpoint", "=", "checkpoint", "+", "'/checkpoint-'", "+", "args", ".", "checkpoint_num", "\n", "agent", ".", "restore", "(", "checkpoint", ")", "\n", "\n", "if", "hasattr", "(", "agent", ",", "\"local_evaluator\"", ")", "and", "os", ".", "environ", ".", "get", "(", "\"TEST_FLAG\"", ")", "!=", "'True'", ":", "\n", "        ", "env", "=", "agent", ".", "local_evaluator", ".", "env", "\n", "", "else", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "env_name", ")", "\n", "\n", "", "if", "args", ".", "render_mode", "==", "'sumo_gui'", ":", "\n", "        ", "env", ".", "sim_params", ".", "render", "=", "True", "# set to True after initializing agent and env", "\n", "\n", "", "if", "multiagent", ":", "\n", "        ", "rets", "=", "{", "}", "\n", "# map the agent id to its policy", "\n", "policy_map_fn", "=", "config", "[", "'multiagent'", "]", "[", "'policy_mapping_fn'", "]", "\n", "for", "key", "in", "config", "[", "'multiagent'", "]", "[", "'policies'", "]", ".", "keys", "(", ")", ":", "\n", "            ", "rets", "[", "key", "]", "=", "[", "]", "\n", "", "", "else", ":", "\n", "        ", "rets", "=", "[", "]", "\n", "\n", "", "if", "config", "[", "'model'", "]", "[", "'use_lstm'", "]", ":", "\n", "        ", "use_lstm", "=", "True", "\n", "if", "multiagent", ":", "\n", "            ", "state_init", "=", "{", "}", "\n", "# map the agent id to its policy", "\n", "policy_map_fn", "=", "config", "[", "'multiagent'", "]", "[", "'policy_mapping_fn'", "]", "\n", "size", "=", "config", "[", "'model'", "]", "[", "'lstm_cell_size'", "]", "\n", "for", "key", "in", "config", "[", "'multiagent'", "]", "[", "'policies'", "]", ".", "keys", "(", ")", ":", "\n", "                ", "state_init", "[", "key", "]", "=", "[", "np", ".", "zeros", "(", "size", ",", "np", ".", "float32", ")", ",", "\n", "np", ".", "zeros", "(", "size", ",", "np", ".", "float32", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "state_init", "=", "[", "\n", "np", ".", "zeros", "(", "config", "[", "'model'", "]", "[", "'lstm_cell_size'", "]", ",", "np", ".", "float32", ")", ",", "\n", "np", ".", "zeros", "(", "config", "[", "'model'", "]", "[", "'lstm_cell_size'", "]", ",", "np", ".", "float32", ")", "\n", "]", "\n", "", "", "else", ":", "\n", "        ", "use_lstm", "=", "False", "\n", "\n", "# if restart_instance, don't restart here because env.reset will restart later", "\n", "", "if", "not", "sim_params", ".", "restart_instance", ":", "\n", "        ", "env", ".", "restart_simulation", "(", "sim_params", "=", "sim_params", ",", "render", "=", "sim_params", ".", "render", ")", "\n", "\n", "# Simulate and collect metrics", "\n", "", "final_outflows", "=", "[", "]", "\n", "final_inflows", "=", "[", "]", "\n", "mean_speed", "=", "[", "]", "\n", "std_speed", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "num_rollouts", ")", ":", "\n", "        ", "vel", "=", "[", "]", "\n", "state", "=", "env", ".", "reset", "(", ")", "\n", "if", "multiagent", ":", "\n", "            ", "ret", "=", "{", "key", ":", "[", "0", "]", "for", "key", "in", "rets", ".", "keys", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "ret", "=", "0", "\n", "", "for", "_", "in", "range", "(", "env_params", ".", "horizon", ")", ":", "\n", "            ", "vehicles", "=", "env", ".", "unwrapped", ".", "k", ".", "vehicle", "\n", "speeds", "=", "vehicles", ".", "get_speed", "(", "vehicles", ".", "get_ids", "(", ")", ")", "\n", "\n", "# only include non-empty speeds", "\n", "if", "speeds", ":", "\n", "                ", "vel", ".", "append", "(", "np", ".", "mean", "(", "speeds", ")", ")", "\n", "\n", "", "if", "multiagent", ":", "\n", "                ", "action", "=", "{", "}", "\n", "for", "agent_id", "in", "state", ".", "keys", "(", ")", ":", "\n", "                    ", "if", "use_lstm", ":", "\n", "                        ", "action", "[", "agent_id", "]", ",", "state_init", "[", "agent_id", "]", ",", "logits", "=", "agent", ".", "compute_action", "(", "\n", "state", "[", "agent_id", "]", ",", "state", "=", "state_init", "[", "agent_id", "]", ",", "\n", "policy_id", "=", "policy_map_fn", "(", "agent_id", ")", ")", "\n", "", "else", ":", "\n", "                        ", "action", "[", "agent_id", "]", "=", "agent", ".", "compute_action", "(", "\n", "state", "[", "agent_id", "]", ",", "policy_id", "=", "policy_map_fn", "(", "agent_id", ")", ")", "\n", "", "", "", "else", ":", "\n", "                ", "action", "=", "agent", ".", "compute_action", "(", "state", ")", "\n", "", "state", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "if", "multiagent", ":", "\n", "                ", "for", "actor", ",", "rew", "in", "reward", ".", "items", "(", ")", ":", "\n", "                    ", "ret", "[", "policy_map_fn", "(", "actor", ")", "]", "[", "0", "]", "+=", "rew", "\n", "", "", "else", ":", "\n", "                ", "ret", "+=", "reward", "\n", "", "if", "multiagent", "and", "done", "[", "'__all__'", "]", ":", "\n", "                ", "break", "\n", "", "if", "not", "multiagent", "and", "done", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "multiagent", ":", "\n", "            ", "for", "key", "in", "rets", ".", "keys", "(", ")", ":", "\n", "                ", "rets", "[", "key", "]", ".", "append", "(", "ret", "[", "key", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "rets", ".", "append", "(", "ret", ")", "\n", "", "outflow", "=", "vehicles", ".", "get_outflow_rate", "(", "500", ")", "\n", "final_outflows", ".", "append", "(", "outflow", ")", "\n", "inflow", "=", "vehicles", ".", "get_inflow_rate", "(", "500", ")", "\n", "final_inflows", ".", "append", "(", "inflow", ")", "\n", "if", "np", ".", "all", "(", "np", ".", "array", "(", "final_inflows", ")", ">", "1e-5", ")", ":", "\n", "            ", "throughput_efficiency", "=", "[", "x", "/", "y", "for", "x", ",", "y", "in", "\n", "zip", "(", "final_outflows", ",", "final_inflows", ")", "]", "\n", "", "else", ":", "\n", "            ", "throughput_efficiency", "=", "[", "0", "]", "*", "len", "(", "final_inflows", ")", "\n", "", "mean_speed", ".", "append", "(", "np", ".", "mean", "(", "vel", ")", ")", "\n", "std_speed", ".", "append", "(", "np", ".", "std", "(", "vel", ")", ")", "\n", "if", "multiagent", ":", "\n", "            ", "for", "agent_id", ",", "rew", "in", "rets", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "'Round {}, Return: {} for agent {}'", ".", "format", "(", "\n", "i", ",", "ret", ",", "agent_id", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'Round {}, Return: {}'", ".", "format", "(", "i", ",", "ret", ")", ")", "\n", "\n", "", "", "print", "(", "'==== Summary of results ===='", ")", "\n", "print", "(", "\"Return:\"", ")", "\n", "print", "(", "mean_speed", ")", "\n", "if", "multiagent", ":", "\n", "        ", "for", "agent_id", ",", "rew", "in", "rets", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'For agent'", ",", "agent_id", ")", "\n", "print", "(", "rew", ")", "\n", "print", "(", "'Average, std return: {}, {} for agent {}'", ".", "format", "(", "\n", "np", ".", "mean", "(", "rew", ")", ",", "np", ".", "std", "(", "rew", ")", ",", "agent_id", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "rets", ")", "\n", "print", "(", "'Average, std: {}, {}'", ".", "format", "(", "\n", "np", ".", "mean", "(", "rets", ")", ",", "np", ".", "std", "(", "rets", ")", ")", ")", "\n", "\n", "", "print", "(", "\"\\nSpeed, mean (m/s):\"", ")", "\n", "print", "(", "mean_speed", ")", "\n", "print", "(", "'Average, std: {}, {}'", ".", "format", "(", "np", ".", "mean", "(", "mean_speed", ")", ",", "np", ".", "std", "(", "\n", "mean_speed", ")", ")", ")", "\n", "print", "(", "\"\\nSpeed, std (m/s):\"", ")", "\n", "print", "(", "std_speed", ")", "\n", "print", "(", "'Average, std: {}, {}'", ".", "format", "(", "np", ".", "mean", "(", "std_speed", ")", ",", "np", ".", "std", "(", "\n", "std_speed", ")", ")", ")", "\n", "\n", "# Compute arrival rate of vehicles in the last 500 sec of the run", "\n", "print", "(", "\"\\nOutflows (veh/hr):\"", ")", "\n", "print", "(", "final_outflows", ")", "\n", "print", "(", "'Average, std: {}, {}'", ".", "format", "(", "np", ".", "mean", "(", "final_outflows", ")", ",", "\n", "np", ".", "std", "(", "final_outflows", ")", ")", ")", "\n", "# Compute departure rate of vehicles in the last 500 sec of the run", "\n", "print", "(", "\"Inflows (veh/hr):\"", ")", "\n", "print", "(", "final_inflows", ")", "\n", "print", "(", "'Average, std: {}, {}'", ".", "format", "(", "np", ".", "mean", "(", "final_inflows", ")", ",", "\n", "np", ".", "std", "(", "final_inflows", ")", ")", ")", "\n", "# Compute throughput efficiency in the last 500 sec of the", "\n", "print", "(", "\"Throughput efficiency (veh/hr):\"", ")", "\n", "print", "(", "throughput_efficiency", ")", "\n", "print", "(", "'Average, std: {}, {}'", ".", "format", "(", "np", ".", "mean", "(", "throughput_efficiency", ")", ",", "\n", "np", ".", "std", "(", "throughput_efficiency", ")", ")", ")", "\n", "\n", "# terminate the environment", "\n", "env", ".", "unwrapped", ".", "terminate", "(", ")", "\n", "\n", "# if prompted, convert the emission file into a csv file", "\n", "if", "args", ".", "gen_emission", ":", "\n", "        ", "time", ".", "sleep", "(", "0.1", ")", "\n", "\n", "dir_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "emission_filename", "=", "'{0}-emission.xml'", ".", "format", "(", "env", ".", "network", ".", "name", ")", "\n", "\n", "emission_path", "=", "'{0}/test_time_rollout/{1}'", ".", "format", "(", "dir_path", ",", "emission_filename", ")", "\n", "\n", "# convert the emission file into a csv file", "\n", "emission_to_csv", "(", "emission_path", ")", "\n", "\n", "# print the location of the emission csv file", "\n", "emission_path_csv", "=", "emission_path", "[", ":", "-", "4", "]", "+", "\".csv\"", "\n", "print", "(", "\"\\nGenerated emission file at \"", "+", "emission_path_csv", ")", "\n", "\n", "# delete the .xml version of the emission file", "\n", "os", ".", "remove", "(", "emission_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.visualizer_rllib.create_parser": [[327, 380], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "", "def", "create_parser", "(", ")", ":", "\n", "    ", "\"\"\"Create the parser to capture CLI arguments.\"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "formatter_class", "=", "argparse", ".", "RawDescriptionHelpFormatter", ",", "\n", "description", "=", "'[Flow] Evaluates a reinforcement learning agent '", "\n", "'given a checkpoint.'", ",", "\n", "epilog", "=", "EXAMPLE_USAGE", ")", "\n", "\n", "# required input parameters", "\n", "parser", ".", "add_argument", "(", "\n", "'result_dir'", ",", "type", "=", "str", ",", "help", "=", "'Directory containing results'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint_num'", ",", "type", "=", "str", ",", "help", "=", "'Checkpoint number.'", ")", "\n", "\n", "# optional input parameters", "\n", "parser", ".", "add_argument", "(", "\n", "'--run'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'The algorithm or model to train. This may refer to '", "\n", "'the name of a built-on algorithm (e.g. RLLib\\'s DQN '", "\n", "'or PPO), or a user-defined trainable function or '", "\n", "'class registered in the tune registry. '", "\n", "'Required for results trained with flow-0.2.0 and before.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num_rollouts'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'The number of rollouts to visualize.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gen_emission'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Specifies whether to generate an emission file from the '", "\n", "'simulation'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--evaluate'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Specifies whether to use the \\'evaluate\\' reward '", "\n", "'for the environment.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--render_mode'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'sumo_gui'", ",", "\n", "help", "=", "'Pick the render mode. Options include sumo_web3d, '", "\n", "'rgbd and sumo_gui'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--save_render'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Saves a rendered video to a file. NOTE: Overrides render_mode '", "\n", "'with pyglet rendering.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--horizon'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Specifies the horizon.'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.plot_ray_results.plot_progress": [[26, 62], ["collections.defaultdict", "matplotlib.ion", "collections.defaultdict.items", "matplotlib.legend", "matplotlib.show", "open", "matplotlib.plot", "csv.reader", "print", "csv.DictReader", "print", "print", "data[].append", "next", "float"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["def", "plot_progress", "(", "filepath", ",", "columns", ")", ":", "\n", "    ", "\"\"\"Plot ray results from a csv file.\n\n    Plot the values contained in the csv file at <filepath> for each column\n    in the list of string columns.\n    \"\"\"", "\n", "data", "=", "defaultdict", "(", "list", ")", "\n", "\n", "with", "open", "(", "filepath", ")", "as", "f", ":", "\n", "# if columns list is empty, print a list of all columns and return", "\n", "        ", "if", "not", "columns", ":", "\n", "            ", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "print", "(", "'Columns are: '", "+", "', '", ".", "join", "(", "next", "(", "reader", ")", ")", ")", "\n", "return", "\n", "\n", "", "try", ":", "\n", "            ", "reader", "=", "csv", ".", "DictReader", "(", "f", ")", "\n", "for", "row", "in", "reader", ":", "\n", "                ", "for", "col", "in", "columns", ":", "\n", "                    ", "data", "[", "col", "]", ".", "append", "(", "float", "(", "row", "[", "col", "]", ")", ")", "\n", "", "", "", "except", "KeyError", ":", "\n", "            ", "print", "(", "'Error: {} was called with an unknown column name \"{}\".\\n'", "\n", "'Run \"python {} {}\" to get a list of all the existing '", "\n", "'columns'", ".", "format", "(", "__file__", ",", "col", ",", "__file__", ",", "filepath", ")", ")", "\n", "raise", "\n", "", "except", "ValueError", ":", "\n", "            ", "print", "(", "'Error: {} was called with an invalid column name \"{}\".\\n'", "\n", "'This column contains values that are not convertible to '", "\n", "'floats.'", ".", "format", "(", "__file__", ",", "col", ")", ")", "\n", "raise", "\n", "\n", "", "", "plt", ".", "ion", "(", ")", "\n", "for", "col_name", ",", "values", "in", "data", ".", "items", "(", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "values", ",", "label", "=", "col_name", ")", "\n", "", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.plot_ray_results.create_parser": [[64, 82], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "create_parser", "(", ")", ":", "\n", "    ", "\"\"\"Parse visualization options user can specify in command line.\n\n    Returns\n    -------\n    argparse.Namespace\n        the output parser object\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "formatter_class", "=", "argparse", ".", "RawDescriptionHelpFormatter", ",", "\n", "description", "=", "'[Flow] Plots progress.csv file generated by ray.'", ",", "\n", "epilog", "=", "'Example usage:\\n\\t'", "+", "EXAMPLE_USAGE", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'file'", ",", "type", "=", "str", ",", "help", "=", "'Path to the csv file.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'columns'", ",", "type", "=", "str", ",", "nargs", "=", "'*'", ",", "help", "=", "'Names of the columns to plot.'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.import_data_from_trajectory": [[47, 87], ["dict", "pandas.read_csv", "df.rename.rename", "[].shift", "time_space_diagram._get_abs_pos", "df[].notna", "df.rename.groupby"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram._get_abs_pos"], ["def", "import_data_from_trajectory", "(", "fp", ",", "params", "=", "dict", "(", ")", ")", ":", "\n", "    ", "r\"\"\"Import and preprocess data from the Flow trajectory (.csv) file.\n\n    Parameters\n    ----------\n    fp : str\n        file path (for the .csv formatted file)\n    params : dict\n        flow-specific parameters, including:\n\n        * \"network\" (str): name of the network that was used when generating\n          the emission file. Must be one of the network names mentioned in\n          ACCEPTABLE_NETWORKS,\n        * \"net_params\" (flow.core.params.NetParams): network-specific\n          parameters. This is used to collect the lengths of various network\n          links.\n\n    Returns\n    -------\n    pd.DataFrame\n    \"\"\"", "\n", "# Read trajectory csv into pandas dataframe", "\n", "df", "=", "pd", ".", "read_csv", "(", "fp", ")", "\n", "\n", "# Convert column names for backwards compatibility using emissions csv", "\n", "column_conversions", "=", "{", "\n", "'time'", ":", "'time_step'", ",", "\n", "'lane_number'", ":", "'lane_id'", ",", "\n", "}", "\n", "df", "=", "df", ".", "rename", "(", "columns", "=", "column_conversions", ")", "\n", "if", "'distance'", "not", "in", "df", ".", "columns", ":", "\n", "        ", "df", "[", "'distance'", "]", "=", "_get_abs_pos", "(", "df", ",", "params", ")", "\n", "\n", "# Compute line segment ends by shifting dataframe by 1 row", "\n", "", "df", "[", "[", "'next_pos'", ",", "'next_time'", "]", "]", "=", "df", ".", "groupby", "(", "'id'", ")", "[", "[", "'distance'", ",", "'time_step'", "]", "]", ".", "shift", "(", "-", "1", ")", "\n", "\n", "# Remove nans from data", "\n", "df", "=", "df", "[", "df", "[", "'next_time'", "]", ".", "notna", "(", ")", "]", "\n", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.get_time_space_data": [[89, 142], ["func"], "function", ["None"], ["", "def", "get_time_space_data", "(", "data", ",", "params", ")", ":", "\n", "    ", "r\"\"\"Compute the unique inflows and subsequent outflow statistics.\n\n    Parameters\n    ----------\n    data : pd.DataFrame\n        cleaned dataframe of the trajectory data\n    params : dict\n        flow-specific parameters, including:\n\n        * \"network\" (str): name of the network that was used when generating\n          the emission file. Must be one of the network names mentioned in\n          ACCEPTABLE_NETWORKS,\n        * \"net_params\" (flow.core.params.NetParams): network-specific\n          parameters. This is used to collect the lengths of various network\n          links.\n\n    Returns\n    -------\n    ndarray (or dict < str, np.ndarray >)\n        3d array (n_segments x 2 x 2) containing segments to be plotted.\n        every inner 2d array is comprised of two 1d arrays representing\n        [start time, start distance] and [end time, end distance] pairs.\n\n        in the case of I210, the nested arrays are wrapped into a dict,\n        keyed on the lane number, so that each lane can be plotted\n        separately.\n\n    Raises\n    ------\n    AssertionError\n        if the specified network is not supported by this method\n    \"\"\"", "\n", "# check that the network is appropriate", "\n", "assert", "params", "[", "'network'", "]", "in", "ACCEPTABLE_NETWORKS", ",", "'Network must be one of: '", "+", "', '", ".", "join", "(", "[", "network", ".", "__name__", "for", "network", "in", "ACCEPTABLE_NETWORKS", "]", ")", "\n", "\n", "# switcher used to compute the positions based on the type of network", "\n", "switcher", "=", "{", "\n", "RingNetwork", ":", "_ring_road", ",", "\n", "MergeNetwork", ":", "_merge", ",", "\n", "FigureEightNetwork", ":", "_figure_eight", ",", "\n", "I210SubNetwork", ":", "_i210_subnetwork", ",", "\n", "HighwayNetwork", ":", "_highway", ",", "\n", "}", "\n", "\n", "# Get the function from switcher dictionary", "\n", "func", "=", "switcher", "[", "params", "[", "'network'", "]", "]", "\n", "\n", "# Execute the function", "\n", "segs", ",", "data", "=", "func", "(", "data", ")", "\n", "\n", "return", "segs", ",", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram._merge": [[144, 171], ["data[].values.reshape", "data[].isin", "len"], "function", ["None"], ["", "def", "_merge", "(", "data", ")", ":", "\n", "    ", "r\"\"\"Generate time and position data for the merge.\n\n    This only include vehicles on the main highway, and not on the adjacent\n    on-ramp.\n\n    Parameters\n    ----------\n    data : pd.DataFrame\n        cleaned dataframe of the trajectory data\n\n    Returns\n    -------\n    ndarray\n        3d array (n_segments x 2 x 2) containing segments to be plotted.\n        every inner 2d array is comprised of two 1d arrays representing\n        [start time, start distance] and [end time, end distance] pairs.\n    pd.DataFrame\n        modified trajectory dataframe\n    \"\"\"", "\n", "# Omit ghost edges", "\n", "keep_edges", "=", "{", "'inflow_merge'", ",", "'bottom'", ",", "':bottom_0'", "}", "\n", "data", "=", "data", "[", "data", "[", "'edge_id'", "]", ".", "isin", "(", "keep_edges", ")", "]", "\n", "\n", "segs", "=", "data", "[", "[", "'time_step'", ",", "'distance'", ",", "'next_time'", ",", "'next_pos'", "]", "]", ".", "values", ".", "reshape", "(", "(", "len", "(", "data", ")", ",", "2", ",", "2", ")", ")", "\n", "\n", "return", "segs", ",", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram._highway": [[173, 193], ["data[].values.reshape", "len"], "function", ["None"], ["", "def", "_highway", "(", "data", ")", ":", "\n", "    ", "r\"\"\"Generate time and position data for the highway.\n\n    Parameters\n    ----------\n    data : pd.DataFrame\n        cleaned dataframe of the trajectory data\n\n    Returns\n    -------\n    ndarray\n        3d array (n_segments x 2 x 2) containing segments to be plotted.\n        every inner 2d array is comprised of two 1d arrays representing\n        [start time, start distance] and [end time, end distance] pairs.\n    pd.DataFrame\n        modified trajectory dataframe\n    \"\"\"", "\n", "segs", "=", "data", "[", "[", "'time_step'", ",", "'distance'", ",", "'next_time'", ",", "'next_pos'", "]", "]", ".", "values", ".", "reshape", "(", "(", "len", "(", "data", ")", ",", "2", ",", "2", ")", ")", "\n", "\n", "return", "segs", ",", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram._ring_road": [[195, 218], ["data[].values.reshape", "len"], "function", ["None"], ["", "def", "_ring_road", "(", "data", ")", ":", "\n", "    ", "r\"\"\"Generate time and position data for the ring road.\n\n    Vehicles that reach the top of the plot simply return to the bottom and\n    continue.\n\n    Parameters\n    ----------\n    data : pd.DataFrame\n        cleaned dataframe of the trajectory data\n\n    Returns\n    -------\n    ndarray\n        3d array (n_segments x 2 x 2) containing segments to be plotted.\n        every inner 2d array is comprised of two 1d arrays representing\n        [start time, start distance] and [end time, end distance] pairs.\n    pd.DataFrame\n        unmodified trajectory dataframe\n    \"\"\"", "\n", "segs", "=", "data", "[", "[", "'time_step'", ",", "'distance'", ",", "'next_time'", ",", "'next_pos'", "]", "]", ".", "values", ".", "reshape", "(", "(", "len", "(", "data", ")", ",", "2", ",", "2", ")", ")", "\n", "\n", "return", "segs", ",", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram._i210_subnetwork": [[220, 251], ["set", "dict", "data.groupby", "[].unique", "df[].values.reshape", "data[].isin", "len"], "function", ["None"], ["", "def", "_i210_subnetwork", "(", "data", ")", ":", "\n", "    ", "r\"\"\"Generate time and position data for the i210 subnetwork.\n\n    We generate plots for all lanes, so the segments are wrapped in\n    a dictionary.\n\n    Parameters\n    ----------\n    data : pd.DataFrame\n        cleaned dataframe of the trajectory data\n\n    Returns\n    -------\n    dict < str, np.ndarray >\n        dictionary of 3d array (n_segments x 2 x 2) containing segments\n        to be plotted. the dictionary is keyed on lane numbers, with the\n        values being the 3d array representing the segments. every inner\n        2d array is comprised of two 1d arrays representing\n        [start time, start distance] and [end time, end distance] pairs.\n    pd.DataFrame\n        modified trajectory dataframe\n    \"\"\"", "\n", "# Reset lane numbers that are offset by ramp lanes", "\n", "offset_edges", "=", "set", "(", "data", "[", "data", "[", "'lane_id'", "]", "==", "5", "]", "[", "'edge_id'", "]", ".", "unique", "(", ")", ")", "\n", "data", ".", "loc", "[", "data", "[", "'edge_id'", "]", ".", "isin", "(", "offset_edges", ")", ",", "'lane_id'", "]", "-=", "1", "\n", "\n", "segs", "=", "dict", "(", ")", "\n", "for", "lane", ",", "df", "in", "data", ".", "groupby", "(", "'lane_id'", ")", ":", "\n", "        ", "segs", "[", "lane", "]", "=", "df", "[", "[", "'time_step'", ",", "'distance'", ",", "'next_time'", ",", "'next_pos'", "]", "]", ".", "values", ".", "reshape", "(", "(", "len", "(", "df", ")", ",", "2", ",", "2", ")", ")", "\n", "\n", "", "return", "segs", ",", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram._figure_eight": [[253, 277], ["data[].values.reshape", "len"], "function", ["None"], ["", "def", "_figure_eight", "(", "data", ")", ":", "\n", "    ", "r\"\"\"Generate time and position data for the figure eight.\n\n    The vehicles traveling towards the intersection from one side will be\n    plotted from the top downward, while the vehicles from the other side will\n    be plotted from the bottom upward.\n\n    Parameters\n    ----------\n    data : pd.DataFrame\n        cleaned dataframe of the trajectory data\n\n    Returns\n    -------\n    ndarray\n        3d array (n_segments x 2 x 2) containing segments to be plotted.\n        every inner 2d array is comprised of two 1d arrays representing\n        [start time, start distance] and [end time, end distance] pairs.\n    pd.DataFrame\n        unmodified trajectory dataframe\n    \"\"\"", "\n", "segs", "=", "data", "[", "[", "'time_step'", ",", "'distance'", ",", "'next_time'", ",", "'next_pos'", "]", "]", ".", "values", ".", "reshape", "(", "(", "len", "(", "data", ")", ",", "2", ",", "2", ")", ")", "\n", "\n", "return", "segs", ",", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram._get_abs_pos": [[279, 386], ["df.apply", "collections.defaultdict"], "function", ["None"], ["", "def", "_get_abs_pos", "(", "df", ",", "params", ")", ":", "\n", "    ", "\"\"\"Compute the absolute positions from edges and relative positions.\n\n    This is the variable we will ultimately use to plot individual vehicles.\n\n    Parameters\n    ----------\n    df : pd.DataFrame\n        dataframe of trajectory data\n    params : dict\n        flow-specific parameters\n\n    Returns\n    -------\n    pd.Series\n        the absolute positive for every sample\n    \"\"\"", "\n", "if", "params", "[", "'network'", "]", "==", "MergeNetwork", ":", "\n", "        ", "inflow_edge_len", "=", "100", "\n", "premerge", "=", "params", "[", "'net'", "]", ".", "additional_params", "[", "'pre_merge_length'", "]", "\n", "postmerge", "=", "params", "[", "'net'", "]", ".", "additional_params", "[", "'post_merge_length'", "]", "\n", "\n", "# generate edge starts", "\n", "edgestarts", "=", "{", "\n", "'inflow_highway'", ":", "0", ",", "\n", "'left'", ":", "inflow_edge_len", "+", "0.1", ",", "\n", "'center'", ":", "inflow_edge_len", "+", "premerge", "+", "22.6", ",", "\n", "'inflow_merge'", ":", "inflow_edge_len", "+", "premerge", "+", "postmerge", "+", "22.6", ",", "\n", "'bottom'", ":", "2", "*", "inflow_edge_len", "+", "premerge", "+", "postmerge", "+", "22.7", ",", "\n", "':left_0'", ":", "inflow_edge_len", ",", "\n", "':center_0'", ":", "inflow_edge_len", "+", "premerge", "+", "0.1", ",", "\n", "':center_1'", ":", "inflow_edge_len", "+", "premerge", "+", "0.1", ",", "\n", "':bottom_0'", ":", "2", "*", "inflow_edge_len", "+", "premerge", "+", "postmerge", "+", "22.6", "\n", "}", "\n", "", "elif", "params", "[", "'network'", "]", "==", "RingNetwork", ":", "\n", "        ", "ring_length", "=", "params", "[", "'net'", "]", ".", "additional_params", "[", "\"length\"", "]", "\n", "junction_length", "=", "0.1", "# length of inter-edge junctions", "\n", "\n", "edgestarts", "=", "{", "\n", "\"bottom\"", ":", "0", ",", "\n", "\":right_0\"", ":", "0.25", "*", "ring_length", ",", "\n", "\"right\"", ":", "0.25", "*", "ring_length", "+", "junction_length", ",", "\n", "\":top_0\"", ":", "0.5", "*", "ring_length", "+", "junction_length", ",", "\n", "\"top\"", ":", "0.5", "*", "ring_length", "+", "2", "*", "junction_length", ",", "\n", "\":left_0\"", ":", "0.75", "*", "ring_length", "+", "2", "*", "junction_length", ",", "\n", "\"left\"", ":", "0.75", "*", "ring_length", "+", "3", "*", "junction_length", ",", "\n", "\":bottom_0\"", ":", "ring_length", "+", "3", "*", "junction_length", "\n", "}", "\n", "", "elif", "params", "[", "'network'", "]", "==", "FigureEightNetwork", ":", "\n", "        ", "net_params", "=", "params", "[", "'net'", "]", "\n", "ring_radius", "=", "net_params", ".", "additional_params", "[", "'radius_ring'", "]", "\n", "ring_edgelen", "=", "ring_radius", "*", "np", ".", "pi", "/", "2.", "\n", "intersection", "=", "2", "*", "ring_radius", "\n", "junction", "=", "2.9", "+", "3.3", "*", "net_params", ".", "additional_params", "[", "'lanes'", "]", "\n", "inner", "=", "0.28", "\n", "\n", "# generate edge starts", "\n", "edgestarts", "=", "{", "\n", "'bottom'", ":", "inner", ",", "\n", "'top'", ":", "intersection", "/", "2", "+", "junction", "+", "inner", ",", "\n", "'upper_ring'", ":", "intersection", "+", "junction", "+", "2", "*", "inner", ",", "\n", "'right'", ":", "intersection", "+", "3", "*", "ring_edgelen", "+", "junction", "+", "3", "*", "inner", ",", "\n", "'left'", ":", "1.5", "*", "intersection", "+", "3", "*", "ring_edgelen", "+", "2", "*", "junction", "+", "3", "*", "inner", ",", "\n", "'lower_ring'", ":", "2", "*", "intersection", "+", "3", "*", "ring_edgelen", "+", "2", "*", "junction", "+", "4", "*", "inner", ",", "\n", "':bottom_0'", ":", "0", ",", "\n", "':center_1'", ":", "intersection", "/", "2", "+", "inner", ",", "\n", "':top_0'", ":", "intersection", "+", "junction", "+", "inner", ",", "\n", "':right_0'", ":", "intersection", "+", "3", "*", "ring_edgelen", "+", "junction", "+", "2", "*", "inner", ",", "\n", "':center_0'", ":", "1.5", "*", "intersection", "+", "3", "*", "ring_edgelen", "+", "junction", "+", "3", "*", "inner", ",", "\n", "':left_0'", ":", "2", "*", "intersection", "+", "3", "*", "ring_edgelen", "+", "2", "*", "junction", "+", "3", "*", "inner", ",", "\n", "# for aimsun", "\n", "'bottom_to_top'", ":", "intersection", "/", "2", "+", "inner", ",", "\n", "'right_to_left'", ":", "junction", "+", "3", "*", "inner", ",", "\n", "}", "\n", "", "elif", "params", "[", "'network'", "]", "==", "HighwayNetwork", ":", "\n", "        ", "return", "df", "[", "'x'", "]", "\n", "", "elif", "params", "[", "'network'", "]", "==", "I210SubNetwork", ":", "\n", "        ", "edgestarts", "=", "{", "\n", "'119257914'", ":", "-", "5.0999999999995795", ",", "\n", "'119257908#0'", ":", "56.49000000018306", ",", "\n", "':300944379_0'", ":", "56.18000000000016", ",", "\n", "':300944436_0'", ":", "753.4599999999871", ",", "\n", "'119257908#1-AddedOnRampEdge'", ":", "756.3299999991157", ",", "\n", "':119257908#1-AddedOnRampNode_0'", ":", "853.530000000022", ",", "\n", "'119257908#1'", ":", "856.7699999997207", ",", "\n", "':119257908#1-AddedOffRampNode_0'", ":", "1096.4499999999707", ",", "\n", "'119257908#1-AddedOffRampEdge'", ":", "1099.6899999995558", ",", "\n", "':1686591010_1'", ":", "1198.1899999999541", ",", "\n", "'119257908#2'", ":", "1203.6499999994803", ",", "\n", "':1842086610_1'", ":", "1780.2599999999056", ",", "\n", "'119257908#3'", ":", "1784.7899999996537", ",", "\n", "}", "\n", "", "else", ":", "\n", "        ", "edgestarts", "=", "defaultdict", "(", "float", ")", "\n", "\n", "", "ret", "=", "df", ".", "apply", "(", "lambda", "x", ":", "x", "[", "'relative_position'", "]", "+", "edgestarts", "[", "x", "[", "'edge_id'", "]", "]", ",", "axis", "=", "1", ")", "\n", "\n", "if", "params", "[", "'network'", "]", "==", "FigureEightNetwork", ":", "\n", "# reorganize data for space-time plot", "\n", "        ", "figure_eight_len", "=", "6", "*", "ring_edgelen", "+", "2", "*", "intersection", "+", "2", "*", "junction", "+", "10", "*", "inner", "\n", "intersection_loc", "=", "[", "edgestarts", "[", "':center_1'", "]", "+", "intersection", "/", "2", ",", "\n", "edgestarts", "[", "':center_0'", "]", "+", "intersection", "/", "2", "]", "\n", "ret", ".", "loc", "[", "ret", "<", "intersection_loc", "[", "0", "]", "]", "+=", "figure_eight_len", "\n", "ret", ".", "loc", "[", "(", "ret", ">", "intersection_loc", "[", "0", "]", ")", "&", "(", "ret", "<", "intersection_loc", "[", "1", "]", ")", "]", "+=", "-", "intersection_loc", "[", "1", "]", "\n", "ret", ".", "loc", "[", "ret", ">", "intersection_loc", "[", "1", "]", "]", "=", "-", "ret", ".", "loc", "[", "ret", ">", "intersection_loc", "[", "1", "]", "]", "+", "figure_eight_len", "+", "intersection_loc", "[", "0", "]", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.plot_tsd": [[388, 461], ["plt.Normalize", "ax.set_xlim", "ax.set_ylim", "matplotlib.collections.LineCollection", "matplotlib.collections.LineCollection.set_array", "matplotlib.collections.LineCollection.set_linewidth", "ax.add_collection", "ax.autoscale", "ax.set_ylabel", "ax.set_xlabel", "plt.xticks", "plt.yticks", "plt.colorbar", "plt.colorbar.set_label", "plt.colorbar.ax.tick_params", "df[].min", "df[].max", "df[].min", "df[].max", "[].min", "[].max", "rects.append", "rects.append", "rects.append", "matplotlib.collections.PatchCollection", "matplotlib.collections.PatchCollection.set_zorder", "ax.add_collection", "ax.set_title", "ax.set_title", "matplotlib.patches.Rectangle", "matplotlib.patches.Rectangle", "matplotlib.patches.Rectangle", "rects.append", "rects.append", "rects.append", "rects.append", "matplotlib.patches.Rectangle", "matplotlib.patches.Rectangle", "matplotlib.patches.Rectangle", "matplotlib.patches.Rectangle", "df[].isin", "df[].isin"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "plot_tsd", "(", "ax", ",", "df", ",", "segs", ",", "args", ",", "lane", "=", "None", ",", "ghost_edges", "=", "None", ",", "ghost_bounds", "=", "None", ")", ":", "\n", "    ", "\"\"\"Plot the time-space diagram.\n\n    Take the pre-processed segments and other meta-data, then plot all the line segments.\n\n    Parameters\n    ----------\n    ax : matplotlib.axes.Axes\n        figure axes that will be plotted on\n    df : pd.DataFrame\n        data used for axes bounds and speed coloring\n    segs : list of list of lists\n        line segments to be plotted, where each segment is a list of two [x,y] pairs\n    args : dict\n        parsed arguments\n    lane : int, optional\n        lane number to be shown in plot title\n    ghost_edges : list or set of str\n        ghost edge names to be greyed out, default None\n    ghost_bounds : tuple\n        lower and upper bounds of domain, excluding ghost edges, default None\n\n    Returns\n    -------\n    None\n    \"\"\"", "\n", "norm", "=", "plt", ".", "Normalize", "(", "args", ".", "min_speed", ",", "args", ".", "max_speed", ")", "\n", "\n", "xmin", ",", "xmax", "=", "df", "[", "'time_step'", "]", ".", "min", "(", ")", ",", "df", "[", "'time_step'", "]", ".", "max", "(", ")", "\n", "xbuffer", "=", "(", "xmax", "-", "xmin", ")", "*", "0.025", "# 2.5% of range", "\n", "ymin", ",", "ymax", "=", "df", "[", "'distance'", "]", ".", "min", "(", ")", ",", "df", "[", "'distance'", "]", ".", "max", "(", ")", "\n", "ybuffer", "=", "(", "ymax", "-", "ymin", ")", "*", "0.025", "# 2.5% of range", "\n", "\n", "ax", ".", "set_xlim", "(", "xmin", "-", "xbuffer", ",", "xmax", "+", "xbuffer", ")", "\n", "ax", ".", "set_ylim", "(", "ymin", "-", "ybuffer", ",", "ymax", "+", "ybuffer", ")", "\n", "\n", "lc", "=", "LineCollection", "(", "segs", ",", "cmap", "=", "my_cmap", ",", "norm", "=", "norm", ")", "\n", "lc", ".", "set_array", "(", "df", "[", "'speed'", "]", ".", "values", ")", "\n", "lc", ".", "set_linewidth", "(", "1", ")", "\n", "ax", ".", "add_collection", "(", "lc", ")", "\n", "ax", ".", "autoscale", "(", ")", "\n", "\n", "rects", "=", "[", "]", "\n", "if", "ghost_edges", ":", "\n", "        ", "y_domain_min", "=", "df", "[", "~", "df", "[", "'edge_id'", "]", ".", "isin", "(", "ghost_edges", ")", "]", "[", "'distance'", "]", ".", "min", "(", ")", "\n", "y_domain_max", "=", "df", "[", "~", "df", "[", "'edge_id'", "]", ".", "isin", "(", "ghost_edges", ")", "]", "[", "'distance'", "]", ".", "max", "(", ")", "\n", "rects", ".", "append", "(", "Rectangle", "(", "(", "xmin", ",", "y_domain_min", ")", ",", "args", ".", "start", "-", "xmin", ",", "y_domain_max", "-", "y_domain_min", ")", ")", "\n", "rects", ".", "append", "(", "Rectangle", "(", "(", "xmin", ",", "ymin", ")", ",", "xmax", "-", "xmin", ",", "y_domain_min", "-", "ymin", ")", ")", "\n", "rects", ".", "append", "(", "Rectangle", "(", "(", "xmin", ",", "y_domain_max", ")", ",", "xmax", "-", "xmin", ",", "ymax", "-", "y_domain_max", ")", ")", "\n", "", "elif", "ghost_bounds", ":", "\n", "        ", "rects", ".", "append", "(", "Rectangle", "(", "(", "xmin", ",", "ghost_bounds", "[", "0", "]", ")", ",", "args", ".", "start", "-", "xmin", ",", "ghost_bounds", "[", "1", "]", "-", "ghost_bounds", "[", "0", "]", ")", ")", "\n", "rects", ".", "append", "(", "Rectangle", "(", "(", "xmin", ",", "ymin", ")", ",", "xmax", "-", "xmin", ",", "ghost_bounds", "[", "0", "]", "-", "ymin", ")", ")", "\n", "rects", ".", "append", "(", "Rectangle", "(", "(", "xmin", ",", "ghost_bounds", "[", "1", "]", ")", ",", "xmax", "-", "xmin", ",", "ymax", "-", "ghost_bounds", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "rects", ".", "append", "(", "Rectangle", "(", "(", "xmin", ",", "ymin", ")", ",", "args", ".", "start", "-", "xmin", ",", "ymax", "-", "ymin", ")", ")", "\n", "\n", "", "if", "rects", ":", "\n", "        ", "pc", "=", "PatchCollection", "(", "rects", ",", "facecolor", "=", "'grey'", ",", "alpha", "=", "0.5", ",", "edgecolor", "=", "None", ")", "\n", "pc", ".", "set_zorder", "(", "20", ")", "\n", "ax", ".", "add_collection", "(", "pc", ")", "\n", "\n", "", "if", "lane", ":", "\n", "        ", "ax", ".", "set_title", "(", "'Time-Space Diagram: Lane {}'", ".", "format", "(", "lane", ")", ",", "fontsize", "=", "25", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_title", "(", "'Time-Space Diagram'", ",", "fontsize", "=", "25", ")", "\n", "", "ax", ".", "set_ylabel", "(", "'Position (m)'", ",", "fontsize", "=", "20", ")", "\n", "ax", ".", "set_xlabel", "(", "'Time (s)'", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "xticks", "(", "fontsize", "=", "18", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "18", ")", "\n", "\n", "cbar", "=", "plt", ".", "colorbar", "(", "lc", ",", "ax", "=", "ax", ",", "norm", "=", "norm", ")", "\n", "cbar", ".", "set_label", "(", "'Velocity (m/s)'", ",", "fontsize", "=", "20", ")", "\n", "cbar", ".", "ax", ".", "tick_params", "(", "labelsize", "=", "18", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.capacity_diagram_generator.import_data_from_csv": [[27, 50], ["open", "csv.reader", "inflows.append", "outflows.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["def", "import_data_from_csv", "(", "fp", ")", ":", "\n", "    ", "r\"\"\"Import inflow/outflow data from the predefined csv file.\n\n    Parameters\n    ----------\n    fp : string\n        file path\n\n    Returns\n    -------\n    dict\n        \"inflows\": list of all the inflows \\n\n        \"outflows\" list of the outflows matching the inflow at the same index\n    \"\"\"", "\n", "inflows", "=", "[", "]", "\n", "outflows", "=", "[", "]", "\n", "with", "open", "(", "fp", ",", "'rt'", ")", "as", "csvfile", ":", "\n", "        ", "spamreader", "=", "csv", ".", "reader", "(", "csvfile", ")", "\n", "for", "row", "in", "spamreader", ":", "\n", "            ", "inflows", ".", "append", "(", "float", "(", "row", "[", "0", "]", ")", ")", "\n", "outflows", ".", "append", "(", "float", "(", "row", "[", "1", "]", ")", ")", "\n", "\n", "", "", "return", "{", "'inflows'", ":", "inflows", ",", "'outflows'", ":", "outflows", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.capacity_diagram_generator.get_capacity_data": [[52, 80], ["sorted", "zip", "numpy.asarray", "numpy.asarray", "list", "sorted_outflows[].append", "set", "numpy.mean", "numpy.std"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.std"], ["", "def", "get_capacity_data", "(", "data", ")", ":", "\n", "    ", "r\"\"\"Compute the unique inflows and subsequent outflow statistics.\n\n    Parameters\n    ----------\n    data : dict\n        \"inflows\": list of all the inflows \\n\n        \"outflows\" list of the outflows matching the inflow at the same index\n\n    Returns\n    -------\n    as_array\n        unique inflows\n    as_array\n        mean outflow at given inflow\n    as_array\n        std deviation of outflow at given inflow\n    \"\"\"", "\n", "unique_vals", "=", "sorted", "(", "list", "(", "set", "(", "data", "[", "'inflows'", "]", ")", ")", ")", "\n", "sorted_outflows", "=", "{", "inflow", ":", "[", "]", "for", "inflow", "in", "unique_vals", "}", "\n", "\n", "for", "inflow", ",", "outlfow", "in", "zip", "(", "data", "[", "'inflows'", "]", ",", "data", "[", "'outflows'", "]", ")", ":", "\n", "        ", "sorted_outflows", "[", "inflow", "]", ".", "append", "(", "outlfow", ")", "\n", "\n", "", "mean", "=", "np", ".", "asarray", "(", "[", "np", ".", "mean", "(", "sorted_outflows", "[", "val", "]", ")", "for", "val", "in", "unique_vals", "]", ")", "\n", "std", "=", "np", ".", "asarray", "(", "[", "np", ".", "std", "(", "sorted_outflows", "[", "val", "]", ")", "for", "val", "in", "unique_vals", "]", ")", "\n", "\n", "return", "unique_vals", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.capacity_diagram_generator.create_parser": [[82, 92], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "create_parser", "(", ")", ":", "\n", "    ", "\"\"\"Create an argument parser.\"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "formatter_class", "=", "argparse", ".", "RawDescriptionHelpFormatter", ",", "\n", "description", "=", "'[Flow] Generates capacity diagrams for the bottleneck.'", ",", "\n", "epilog", "=", "\"python capacity_diagram_generator.py </path/to/file>.csv\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'file'", ",", "type", "=", "str", ",", "help", "=", "'path to the csv file.'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.velocity_controllers.FollowerStopper.__init__": [[25, 49], ["flow.controllers.base_controller.BaseController.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "\n", "veh_id", ",", "\n", "car_following_params", ",", "\n", "v_des", "=", "15", ",", "\n", "danger_edges", "=", "None", ")", ":", "\n", "        ", "\"\"\"Instantiate FollowerStopper.\"\"\"", "\n", "BaseController", ".", "__init__", "(", "\n", "self", ",", "veh_id", ",", "car_following_params", ",", "delay", "=", "1.0", ",", "\n", "fail_safe", "=", "'safe_velocity'", ")", "\n", "\n", "# desired speed of the vehicle", "\n", "self", ".", "v_des", "=", "v_des", "\n", "\n", "# maximum achievable acceleration by the vehicle", "\n", "self", ".", "max_accel", "=", "car_following_params", ".", "controller_params", "[", "'accel'", "]", "\n", "\n", "# other parameters", "\n", "self", ".", "dx_1_0", "=", "4.5", "\n", "self", ".", "dx_2_0", "=", "5.25", "\n", "self", ".", "dx_3_0", "=", "6.0", "\n", "self", ".", "d_1", "=", "1.5", "\n", "self", ".", "d_2", "=", "1.0", "\n", "self", ".", "d_3", "=", "0.5", "\n", "self", ".", "danger_edges", "=", "danger_edges", "if", "danger_edges", "else", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.velocity_controllers.FollowerStopper.find_intersection_dist": [[50, 74], ["env.k.vehicle.get_edge", "env.k.network.edge_length", "env.k.vehicle.get_position"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position"], ["", "def", "find_intersection_dist", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Find distance to intersection.\n\n        Parameters\n        ----------\n        env : flow.envs.Env\n            see flow/envs/base.py\n\n        Returns\n        -------\n        float\n            distance from the vehicle's current position to the position of the\n            node it is heading toward.\n        \"\"\"", "\n", "edge_id", "=", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "self", ".", "veh_id", ")", "\n", "# FIXME this might not be the best way of handling this", "\n", "if", "edge_id", "==", "\"\"", ":", "\n", "            ", "return", "-", "10", "\n", "", "if", "'center'", "in", "edge_id", ":", "\n", "            ", "return", "0", "\n", "", "edge_len", "=", "env", ".", "k", ".", "network", ".", "edge_length", "(", "edge_id", ")", "\n", "relative_pos", "=", "env", ".", "k", ".", "vehicle", ".", "get_position", "(", "self", ".", "veh_id", ")", "\n", "dist", "=", "edge_len", "-", "relative_pos", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.velocity_controllers.FollowerStopper.get_accel": [[75, 117], ["env.k.vehicle.get_leader", "env.k.vehicle.get_speed", "env.k.vehicle.get_speed", "env.k.vehicle.get_edge", "env.k.vehicle.get_headway", "min", "min", "max", "velocity_controllers.FollowerStopper.find_intersection_dist", "env.k.vehicle.get_edge", "env.k.vehicle.get_edge"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.find_intersection_dist", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge"], ["", "def", "get_accel", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "lead_id", "=", "env", ".", "k", ".", "vehicle", ".", "get_leader", "(", "self", ".", "veh_id", ")", "\n", "this_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "self", ".", "veh_id", ")", "\n", "lead_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "lead_id", ")", "\n", "\n", "if", "self", ".", "v_des", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "lead_id", "is", "None", ":", "\n", "            ", "v_cmd", "=", "self", ".", "v_des", "\n", "", "else", ":", "\n", "            ", "dx", "=", "env", ".", "k", ".", "vehicle", ".", "get_headway", "(", "self", ".", "veh_id", ")", "\n", "dv_minus", "=", "min", "(", "lead_vel", "-", "this_vel", ",", "0", ")", "\n", "\n", "dx_1", "=", "self", ".", "dx_1_0", "+", "1", "/", "(", "2", "*", "self", ".", "d_1", ")", "*", "dv_minus", "**", "2", "\n", "dx_2", "=", "self", ".", "dx_2_0", "+", "1", "/", "(", "2", "*", "self", ".", "d_2", ")", "*", "dv_minus", "**", "2", "\n", "dx_3", "=", "self", ".", "dx_3_0", "+", "1", "/", "(", "2", "*", "self", ".", "d_3", ")", "*", "dv_minus", "**", "2", "\n", "v", "=", "min", "(", "max", "(", "lead_vel", ",", "0", ")", ",", "self", ".", "v_des", ")", "\n", "# compute the desired velocity", "\n", "if", "dx", "<=", "dx_1", ":", "\n", "                ", "v_cmd", "=", "0", "\n", "", "elif", "dx", "<=", "dx_2", ":", "\n", "                ", "v_cmd", "=", "v", "*", "(", "dx", "-", "dx_1", ")", "/", "(", "dx_2", "-", "dx_1", ")", "\n", "", "elif", "dx", "<=", "dx_3", ":", "\n", "                ", "v_cmd", "=", "v", "+", "(", "self", ".", "v_des", "-", "this_vel", ")", "*", "(", "dx", "-", "dx_2", ")", "/", "(", "dx_3", "-", "dx_2", ")", "\n", "", "else", ":", "\n", "                ", "v_cmd", "=", "self", ".", "v_des", "\n", "\n", "", "", "edge", "=", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "self", ".", "veh_id", ")", "\n", "\n", "if", "edge", "==", "\"\"", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "self", ".", "find_intersection_dist", "(", "env", ")", "<=", "10", "and", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "self", ".", "veh_id", ")", "in", "self", ".", "danger_edges", "or", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "self", ".", "veh_id", ")", "[", "0", "]", "==", "\":\"", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "# compute the acceleration from the desired velocity", "\n", "            ", "return", "(", "v_cmd", "-", "this_vel", ")", "/", "env", ".", "sim_step", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.velocity_controllers.NonLocalFollowerStopper.get_accel": [[122, 165], ["env.k.vehicle.get_leader", "env.k.vehicle.get_speed", "env.k.vehicle.get_speed", "numpy.mean", "env.k.vehicle.get_edge", "env.k.vehicle.get_speed", "env.k.vehicle.get_headway", "min", "min", "env.k.vehicle.get_ids", "max", "velocity_controllers.NonLocalFollowerStopper.find_intersection_dist", "env.k.vehicle.get_edge", "env.k.vehicle.get_edge"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.find_intersection_dist", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge"], ["def", "get_accel", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "lead_id", "=", "env", ".", "k", ".", "vehicle", ".", "get_leader", "(", "self", ".", "veh_id", ")", "\n", "this_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "self", ".", "veh_id", ")", "\n", "lead_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "lead_id", ")", "\n", "self", ".", "v_des", "=", "np", ".", "mean", "(", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ")", ")", "\n", "\n", "if", "self", ".", "v_des", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "lead_id", "is", "None", ":", "\n", "            ", "v_cmd", "=", "self", ".", "v_des", "\n", "", "else", ":", "\n", "            ", "dx", "=", "env", ".", "k", ".", "vehicle", ".", "get_headway", "(", "self", ".", "veh_id", ")", "\n", "dv_minus", "=", "min", "(", "lead_vel", "-", "this_vel", ",", "0", ")", "\n", "\n", "dx_1", "=", "self", ".", "dx_1_0", "+", "1", "/", "(", "2", "*", "self", ".", "d_1", ")", "*", "dv_minus", "**", "2", "\n", "dx_2", "=", "self", ".", "dx_2_0", "+", "1", "/", "(", "2", "*", "self", ".", "d_2", ")", "*", "dv_minus", "**", "2", "\n", "dx_3", "=", "self", ".", "dx_3_0", "+", "1", "/", "(", "2", "*", "self", ".", "d_3", ")", "*", "dv_minus", "**", "2", "\n", "v", "=", "min", "(", "max", "(", "lead_vel", ",", "0", ")", ",", "self", ".", "v_des", ")", "\n", "# compute the desired velocity", "\n", "if", "dx", "<=", "dx_1", ":", "\n", "                ", "v_cmd", "=", "0", "\n", "", "elif", "dx", "<=", "dx_2", ":", "\n", "                ", "v_cmd", "=", "v", "*", "(", "dx", "-", "dx_1", ")", "/", "(", "dx_2", "-", "dx_1", ")", "\n", "", "elif", "dx", "<=", "dx_3", ":", "\n", "                ", "v_cmd", "=", "v", "+", "(", "self", ".", "v_des", "-", "this_vel", ")", "*", "(", "dx", "-", "dx_2", ")", "/", "(", "dx_3", "-", "dx_2", ")", "\n", "", "else", ":", "\n", "                ", "v_cmd", "=", "self", ".", "v_des", "\n", "\n", "", "", "edge", "=", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "self", ".", "veh_id", ")", "\n", "\n", "if", "edge", "==", "\"\"", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "self", ".", "find_intersection_dist", "(", "env", ")", "<=", "10", "and", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "self", ".", "veh_id", ")", "in", "self", ".", "danger_edges", "or", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "self", ".", "veh_id", ")", "[", "0", "]", "==", "\":\"", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "# compute the acceleration from the desired velocity", "\n", "            ", "return", "(", "v_cmd", "-", "this_vel", ")", "/", "env", ".", "sim_step", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.velocity_controllers.PISaturation.__init__": [[185, 207], ["flow.controllers.base_controller.BaseController.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "veh_id", ",", "car_following_params", ")", ":", "\n", "        ", "\"\"\"Instantiate PISaturation.\"\"\"", "\n", "BaseController", ".", "__init__", "(", "self", ",", "veh_id", ",", "car_following_params", ",", "delay", "=", "1.0", ")", "\n", "\n", "# maximum achievable acceleration by the vehicle", "\n", "self", ".", "max_accel", "=", "car_following_params", ".", "controller_params", "[", "'accel'", "]", "\n", "\n", "# history used to determine AV desired velocity", "\n", "self", ".", "v_history", "=", "[", "]", "\n", "\n", "# other parameters", "\n", "self", ".", "gamma", "=", "2", "\n", "self", ".", "g_l", "=", "7", "\n", "self", ".", "g_u", "=", "30", "\n", "self", ".", "v_catch", "=", "1", "\n", "\n", "# values that are updated by using their old information", "\n", "self", ".", "alpha", "=", "0", "\n", "self", ".", "beta", "=", "1", "-", "0.5", "*", "self", ".", "alpha", "\n", "self", ".", "U", "=", "0", "\n", "self", ".", "v_target", "=", "0", "\n", "self", ".", "v_cmd", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.velocity_controllers.PISaturation.get_accel": [[208, 241], ["env.k.vehicle.get_leader", "env.k.vehicle.get_speed", "env.k.vehicle.get_speed", "env.k.vehicle.get_headway", "max", "velocity_controllers.PISaturation.v_history.append", "numpy.mean", "min", "min", "len", "int", "max", "min", "max"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max"], ["", "def", "get_accel", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "lead_id", "=", "env", ".", "k", ".", "vehicle", ".", "get_leader", "(", "self", ".", "veh_id", ")", "\n", "lead_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "lead_id", ")", "\n", "this_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "self", ".", "veh_id", ")", "\n", "\n", "dx", "=", "env", ".", "k", ".", "vehicle", ".", "get_headway", "(", "self", ".", "veh_id", ")", "\n", "dv", "=", "lead_vel", "-", "this_vel", "\n", "dx_s", "=", "max", "(", "2", "*", "dv", ",", "4", ")", "\n", "\n", "# update the AV's velocity history", "\n", "self", ".", "v_history", ".", "append", "(", "this_vel", ")", "\n", "\n", "if", "len", "(", "self", ".", "v_history", ")", "==", "int", "(", "38", "/", "env", ".", "sim_step", ")", ":", "\n", "            ", "del", "self", ".", "v_history", "[", "0", "]", "\n", "\n", "# update desired velocity values", "\n", "", "v_des", "=", "np", ".", "mean", "(", "self", ".", "v_history", ")", "\n", "v_target", "=", "v_des", "+", "self", ".", "v_catch", "*", "min", "(", "max", "(", "(", "dx", "-", "self", ".", "g_l", ")", "/", "(", "self", ".", "g_u", "-", "self", ".", "g_l", ")", ",", "0", ")", ",", "1", ")", "\n", "\n", "# update the alpha and beta values", "\n", "alpha", "=", "min", "(", "max", "(", "(", "dx", "-", "dx_s", ")", "/", "self", ".", "gamma", ",", "0", ")", ",", "1", ")", "\n", "beta", "=", "1", "-", "0.5", "*", "alpha", "\n", "\n", "# compute desired velocity", "\n", "self", ".", "v_cmd", "=", "beta", "*", "(", "alpha", "*", "v_target", "+", "(", "1", "-", "alpha", ")", "*", "lead_vel", ")", "+", "(", "1", "-", "beta", ")", "*", "self", ".", "v_cmd", "\n", "\n", "# compute the acceleration", "\n", "accel", "=", "(", "self", ".", "v_cmd", "-", "this_vel", ")", "/", "env", ".", "sim_step", "\n", "\n", "return", "min", "(", "accel", ",", "self", ".", "max_accel", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_controller.BaseController.__init__": [[47, 93], ["isinstance", "abs", "isinstance", "ValueError", "base_controller.BaseController.get_feasible_action", "base_controller.BaseController.failsafes.append", "ValueError", "failsafe_map.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_controller.BaseController.get_feasible_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], ["def", "__init__", "(", "self", ",", "\n", "veh_id", ",", "\n", "car_following_params", ",", "\n", "delay", "=", "0", ",", "\n", "fail_safe", "=", "None", ",", "\n", "display_warnings", "=", "True", ",", "\n", "noise", "=", "0", ")", ":", "\n", "        ", "\"\"\"Instantiate the base class for acceleration behavior.\"\"\"", "\n", "self", ".", "veh_id", "=", "veh_id", "\n", "\n", "# magnitude of gaussian noise", "\n", "self", ".", "accel_noise", "=", "noise", "\n", "\n", "# delay used by the safe_velocity failsafe", "\n", "self", ".", "delay", "=", "delay", "\n", "\n", "# longitudinal failsafe used by the vehicle", "\n", "if", "isinstance", "(", "fail_safe", ",", "str", ")", ":", "\n", "            ", "failsafe_list", "=", "[", "fail_safe", "]", "\n", "", "elif", "isinstance", "(", "fail_safe", ",", "list", ")", "or", "fail_safe", "is", "None", ":", "\n", "            ", "failsafe_list", "=", "fail_safe", "\n", "", "else", ":", "\n", "            ", "failsafe_list", "=", "None", "\n", "raise", "ValueError", "(", "\"fail_safe should be string or list of strings. Setting fail_safe to None\\n\"", ")", "\n", "\n", "", "failsafe_map", "=", "{", "\n", "'instantaneous'", ":", "self", ".", "get_safe_action_instantaneous", ",", "\n", "'safe_velocity'", ":", "self", ".", "get_safe_velocity_action", ",", "\n", "'feasible_accel'", ":", "lambda", "_", ",", "accel", ":", "self", ".", "get_feasible_action", "(", "accel", ")", ",", "\n", "'obey_speed_limit'", ":", "self", ".", "get_obey_speed_limit_action", "\n", "}", "\n", "self", ".", "failsafes", "=", "[", "]", "\n", "if", "failsafe_list", ":", "\n", "            ", "for", "check", "in", "failsafe_list", ":", "\n", "                ", "if", "check", "in", "failsafe_map", ":", "\n", "                    ", "self", ".", "failsafes", ".", "append", "(", "failsafe_map", ".", "get", "(", "check", ")", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "'Skipping {}, as it is not a valid failsafe.'", ".", "format", "(", "check", ")", ")", "\n", "\n", "", "", "", "self", ".", "display_warnings", "=", "display_warnings", "\n", "\n", "self", ".", "max_accel", "=", "car_following_params", ".", "controller_params", "[", "'accel'", "]", "\n", "# max deaccel should always be a positive", "\n", "self", ".", "max_deaccel", "=", "abs", "(", "car_following_params", ".", "controller_params", "[", "'decel'", "]", ")", "\n", "\n", "self", ".", "car_following_params", "=", "car_following_params", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_controller.BaseController.get_accel": [[94, 98], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_accel", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Return the acceleration of the controller.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_controller.BaseController.get_action": [[99, 164], ["env.k.vehicle.update_accel", "env.k.vehicle.update_accel", "env.k.vehicle.update_accel", "env.k.vehicle.update_accel", "base_controller.BaseController.get_accel", "env.k.vehicle.update_accel", "env.k.vehicle.update_accel", "env.k.vehicle.update_accel", "env.k.vehicle.update_accel", "len", "failsafe", "failsafe", "env.k.vehicle.get_edge", "env.k.vehicle.get_edge", "numpy.sqrt", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.update_accel", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.update_accel", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.update_accel", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.update_accel", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_accel", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.update_accel", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.update_accel", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.update_accel", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.update_accel", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge"], ["", "def", "get_action", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Convert the get_accel() acceleration into an action.\n\n        If no acceleration is specified, the action returns a None as well,\n        signifying that sumo should control the accelerations for the current\n        time step.\n\n        This method also augments the controller with the desired level of\n        stochastic noise, and utlizes the \"instantaneous\", \"safe_velocity\",\n        \"feasible_accel\", and/or \"obey_speed_limit\" failsafes if requested.\n\n        Parameters\n        ----------\n        env : flow.envs.Env\n            state of the environment at the current time step\n\n        Returns\n        -------\n        float\n            the modified form of the acceleration\n        \"\"\"", "\n", "# clear the current stored accels of this vehicle to None", "\n", "env", ".", "k", ".", "vehicle", ".", "update_accel", "(", "self", ".", "veh_id", ",", "None", ",", "noise", "=", "False", ",", "failsafe", "=", "False", ")", "\n", "env", ".", "k", ".", "vehicle", ".", "update_accel", "(", "self", ".", "veh_id", ",", "None", ",", "noise", "=", "False", ",", "failsafe", "=", "True", ")", "\n", "env", ".", "k", ".", "vehicle", ".", "update_accel", "(", "self", ".", "veh_id", ",", "None", ",", "noise", "=", "True", ",", "failsafe", "=", "False", ")", "\n", "env", ".", "k", ".", "vehicle", ".", "update_accel", "(", "self", ".", "veh_id", ",", "None", ",", "noise", "=", "True", ",", "failsafe", "=", "True", ")", "\n", "\n", "# this is to avoid abrupt decelerations when a vehicle has just entered", "\n", "# a network and it's data is still not subscribed", "\n", "if", "len", "(", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "self", ".", "veh_id", ")", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "# this allows the acceleration behavior of vehicles in a junction be", "\n", "# described by sumo instead of an explicit model", "\n", "", "if", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "self", ".", "veh_id", ")", "[", "0", "]", "==", "\":\"", ":", "\n", "            ", "return", "None", "\n", "\n", "", "accel", "=", "self", ".", "get_accel", "(", "env", ")", "\n", "\n", "# if no acceleration is specified, let sumo take over for the current", "\n", "# time step", "\n", "if", "accel", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "# store the acceleration without noise to each vehicle", "\n", "# run fail safe if requested", "\n", "", "env", ".", "k", ".", "vehicle", ".", "update_accel", "(", "self", ".", "veh_id", ",", "accel", ",", "noise", "=", "False", ",", "failsafe", "=", "False", ")", "\n", "accel_no_noise_with_failsafe", "=", "accel", "\n", "\n", "for", "failsafe", "in", "self", ".", "failsafes", ":", "\n", "            ", "accel_no_noise_with_failsafe", "=", "failsafe", "(", "env", ",", "accel_no_noise_with_failsafe", ")", "\n", "\n", "", "env", ".", "k", ".", "vehicle", ".", "update_accel", "(", "self", ".", "veh_id", ",", "accel_no_noise_with_failsafe", ",", "noise", "=", "False", ",", "failsafe", "=", "True", ")", "\n", "\n", "# add noise to the accelerations, if requested", "\n", "if", "self", ".", "accel_noise", ">", "0", ":", "\n", "            ", "accel", "+=", "np", ".", "sqrt", "(", "env", ".", "sim_step", ")", "*", "np", ".", "random", ".", "normal", "(", "0", ",", "self", ".", "accel_noise", ")", "\n", "", "env", ".", "k", ".", "vehicle", ".", "update_accel", "(", "self", ".", "veh_id", ",", "accel", ",", "noise", "=", "True", ",", "failsafe", "=", "False", ")", "\n", "\n", "# run the fail-safes, if requested", "\n", "for", "failsafe", "in", "self", ".", "failsafes", ":", "\n", "            ", "accel", "=", "failsafe", "(", "env", ",", "accel", ")", "\n", "\n", "", "env", ".", "k", ".", "vehicle", ".", "update_accel", "(", "self", ".", "veh_id", ",", "accel", ",", "noise", "=", "True", ",", "failsafe", "=", "True", ")", "\n", "return", "accel", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_controller.BaseController.get_safe_action_instantaneous": [[165, 222], ["env.k.vehicle.get_leader", "env.k.vehicle.get_speed", "env.k.vehicle.get_headway", "print"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway"], ["", "def", "get_safe_action_instantaneous", "(", "self", ",", "env", ",", "action", ")", ":", "\n", "        ", "\"\"\"Perform the \"instantaneous\" failsafe action.\n\n        Instantaneously stops the car if there is a change of colliding into\n        the leading vehicle in the next step\n\n        Parameters\n        ----------\n        env : flow.envs.Env\n            current environment, which contains information of the state of the\n            network at the current time step\n        action : float\n            requested acceleration action\n\n        Returns\n        -------\n        float\n            the requested action if it does not lead to a crash; and a stopping\n            action otherwise\n        \"\"\"", "\n", "# if there is only one vehicle in the network, all actions are safe", "\n", "if", "env", ".", "k", ".", "vehicle", ".", "num_vehicles", "==", "1", ":", "\n", "            ", "return", "action", "\n", "\n", "", "lead_id", "=", "env", ".", "k", ".", "vehicle", ".", "get_leader", "(", "self", ".", "veh_id", ")", "\n", "\n", "# if there is no other vehicle in the lane, all actions are safe", "\n", "if", "lead_id", "is", "None", ":", "\n", "            ", "return", "action", "\n", "\n", "", "this_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "self", ".", "veh_id", ")", "\n", "sim_step", "=", "env", ".", "sim_step", "\n", "next_vel", "=", "this_vel", "+", "action", "*", "sim_step", "\n", "h", "=", "env", ".", "k", ".", "vehicle", ".", "get_headway", "(", "self", ".", "veh_id", ")", "\n", "\n", "if", "next_vel", ">", "0", ":", "\n", "# the second and third terms cover (conservatively) the extra", "\n", "# distance the vehicle will cover before it fully decelerates", "\n", "            ", "if", "h", "<", "sim_step", "*", "next_vel", "+", "this_vel", "*", "1e-3", "+", "0.5", "*", "this_vel", "*", "sim_step", ":", "\n", "# if the vehicle will crash into the vehicle ahead of it in the", "\n", "# next time step (assuming the vehicle ahead of it is not", "\n", "# moving), then stop immediately", "\n", "                ", "if", "self", ".", "display_warnings", ":", "\n", "                    ", "print", "(", "\n", "\"=====================================\\n\"", "\n", "\"Vehicle {} is about to crash. Instantaneous acceleration \"", "\n", "\"clipping applied.\\n\"", "\n", "\"=====================================\"", ".", "format", "(", "self", ".", "veh_id", ")", ")", "\n", "\n", "", "return", "-", "this_vel", "/", "sim_step", "\n", "", "else", ":", "\n", "# if the vehicle is not in danger of crashing, continue with", "\n", "# the requested action", "\n", "                ", "return", "action", "\n", "", "", "else", ":", "\n", "            ", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_controller.BaseController.get_safe_velocity_action": [[223, 259], ["base_controller.BaseController.safe_velocity", "env.k.vehicle.get_speed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_controller.BaseController.safe_velocity", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], ["", "", "def", "get_safe_velocity_action", "(", "self", ",", "env", ",", "action", ")", ":", "\n", "        ", "\"\"\"Perform the \"safe_velocity\" failsafe action.\n\n        Checks if the computed acceleration would put us above safe velocity.\n        If it would, output the acceleration that would put at to safe\n        velocity.\n\n        Parameters\n        ----------\n        env : flow.envs.Env\n            current environment, which contains information of the state of the\n            network at the current time step\n        action : float\n            requested acceleration action\n\n        Returns\n        -------\n        float\n            the requested action clipped by the safe velocity\n        \"\"\"", "\n", "if", "env", ".", "k", ".", "vehicle", ".", "num_vehicles", "==", "1", ":", "\n", "# if there is only one vehicle in the network, all actions are safe", "\n", "            ", "return", "action", "\n", "", "else", ":", "\n", "            ", "safe_velocity", "=", "self", ".", "safe_velocity", "(", "env", ")", "\n", "\n", "this_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "self", ".", "veh_id", ")", "\n", "sim_step", "=", "env", ".", "sim_step", "\n", "\n", "if", "this_vel", "+", "action", "*", "sim_step", ">", "safe_velocity", ":", "\n", "                ", "if", "safe_velocity", ">", "0", ":", "\n", "                    ", "return", "(", "safe_velocity", "-", "this_vel", ")", "/", "sim_step", "\n", "", "else", ":", "\n", "                    ", "return", "-", "this_vel", "/", "sim_step", "\n", "", "", "else", ":", "\n", "                ", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_controller.BaseController.safe_velocity": [[260, 301], ["env.k.vehicle.get_leader", "env.k.vehicle.get_speed", "env.k.vehicle.get_speed", "env.k.vehicle.get_headway", "print"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway"], ["", "", "", "def", "safe_velocity", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Compute a safe velocity for the vehicles.\n\n        Finds maximum velocity such that if the lead vehicle were to stop\n        entirely, we can bring the following vehicle to rest at the point at\n        which the headway is zero.\n\n        Parameters\n        ----------\n        env : flow.envs.Env\n            current environment, which contains information of the state of the\n            network at the current time step\n\n        Returns\n        -------\n        float\n            maximum safe velocity given a maximum deceleration, delay in\n            performing the breaking action, and speed limit\n        \"\"\"", "\n", "lead_id", "=", "env", ".", "k", ".", "vehicle", ".", "get_leader", "(", "self", ".", "veh_id", ")", "\n", "lead_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "lead_id", ")", "\n", "this_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "self", ".", "veh_id", ")", "\n", "\n", "h", "=", "env", ".", "k", ".", "vehicle", ".", "get_headway", "(", "self", ".", "veh_id", ")", "\n", "dv", "=", "lead_vel", "-", "this_vel", "\n", "\n", "v_safe", "=", "2", "*", "h", "/", "env", ".", "sim_step", "+", "dv", "-", "this_vel", "*", "(", "2", "*", "self", ".", "delay", ")", "\n", "\n", "# check for speed limit  FIXME: this is not called", "\n", "# this_edge = env.k.vehicle.get_edge(self.veh_id)", "\n", "# edge_speed_limit = env.k.network.speed_limit(this_edge)", "\n", "\n", "if", "this_vel", ">", "v_safe", ":", "\n", "            ", "if", "self", ".", "display_warnings", ":", "\n", "                ", "print", "(", "\n", "\"=====================================\\n\"", "\n", "\"Speed of vehicle {} is greater than safe speed. Safe velocity \"", "\n", "\"clipping applied.\\n\"", "\n", "\"=====================================\"", ".", "format", "(", "self", ".", "veh_id", ")", ")", "\n", "\n", "", "", "return", "v_safe", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_controller.BaseController.get_obey_speed_limit_action": [[302, 342], ["env.k.vehicle.get_edge", "env.k.network.speed_limit", "env.k.vehicle.get_speed", "print"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.speed_limit", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], ["", "def", "get_obey_speed_limit_action", "(", "self", ",", "env", ",", "action", ")", ":", "\n", "        ", "\"\"\"Perform the \"obey_speed_limit\" failsafe action.\n\n        Checks if the computed acceleration would put us above edge speed limit.\n        If it would, output the acceleration that would put at the speed limit\n        velocity.\n\n        Parameters\n        ----------\n        env : flow.envs.Env\n            current environment, which contains information of the state of the\n            network at the current time step\n        action : float\n            requested acceleration action\n\n        Returns\n        -------\n        float\n            the requested action clipped by the speed limit\n        \"\"\"", "\n", "# check for speed limit", "\n", "this_edge", "=", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "self", ".", "veh_id", ")", "\n", "edge_speed_limit", "=", "env", ".", "k", ".", "network", ".", "speed_limit", "(", "this_edge", ")", "\n", "\n", "this_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "self", ".", "veh_id", ")", "\n", "sim_step", "=", "env", ".", "sim_step", "\n", "\n", "if", "this_vel", "+", "action", "*", "sim_step", ">", "edge_speed_limit", ":", "\n", "            ", "if", "edge_speed_limit", ">", "0", ":", "\n", "                ", "if", "self", ".", "display_warnings", ":", "\n", "                    ", "print", "(", "\n", "\"=====================================\\n\"", "\n", "\"Speed of vehicle {} is greater than speed limit. Obey \"", "\n", "\"speed limit clipping applied.\\n\"", "\n", "\"=====================================\"", ".", "format", "(", "self", ".", "veh_id", ")", ")", "\n", "", "return", "(", "edge_speed_limit", "-", "this_vel", ")", "/", "sim_step", "\n", "", "else", ":", "\n", "                ", "return", "-", "this_vel", "/", "sim_step", "\n", "", "", "else", ":", "\n", "            ", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_controller.BaseController.get_feasible_action": [[343, 382], ["print", "print"], "methods", ["None"], ["", "", "def", "get_feasible_action", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Perform the \"feasible_accel\" failsafe action.\n\n        Checks if the computed acceleration would put us above maximum\n        acceleration or deceleration. If it would, output the acceleration\n        equal to maximum acceleration or deceleration.\n\n        Parameters\n        ----------\n        action : float\n            requested acceleration action\n\n        Returns\n        -------\n        float\n            the requested action clipped by the feasible acceleration or\n            deceleration.\n        \"\"\"", "\n", "if", "action", ">", "self", ".", "max_accel", ":", "\n", "            ", "action", "=", "self", ".", "max_accel", "\n", "\n", "if", "self", ".", "display_warnings", ":", "\n", "                ", "print", "(", "\n", "\"=====================================\\n\"", "\n", "\"Acceleration of vehicle {} is greater than the max \"", "\n", "\"acceleration. Feasible acceleration clipping applied.\\n\"", "\n", "\"=====================================\"", ".", "format", "(", "self", ".", "veh_id", ")", ")", "\n", "\n", "", "", "if", "action", "<", "-", "self", ".", "max_deaccel", ":", "\n", "            ", "action", "=", "-", "self", ".", "max_deaccel", "\n", "\n", "if", "self", ".", "display_warnings", ":", "\n", "                ", "print", "(", "\n", "\"=====================================\\n\"", "\n", "\"Deceleration of vehicle {} is greater than the max \"", "\n", "\"deceleration. Feasible acceleration clipping applied.\\n\"", "\n", "\"=====================================\"", ".", "format", "(", "self", ".", "veh_id", ")", ")", "\n", "\n", "", "", "return", "action", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.__init__": [[33, 40], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "veh_id", ",", "lane_change_params", "=", "None", ")", ":", "\n", "        ", "\"\"\"Instantiate the base class for lane-changing controllers.\"\"\"", "\n", "if", "lane_change_params", "is", "None", ":", "\n", "            ", "lane_change_params", "=", "{", "}", "\n", "\n", "", "self", ".", "veh_id", "=", "veh_id", "\n", "self", ".", "lane_change_params", "=", "lane_change_params", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_lane_change_action": [[41, 62], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_lane_change_action", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Specify the lane change action to be performed.\n\n        If discrete lane changes are being performed, the action is a direction\n\n        * -1: lane change right\n        * 0: no lane change\n        * 1: lane change left\n\n        Parameters\n        ----------\n        env : flow.envs.Env\n            state of the environment at the current time step\n\n        Returns\n        -------\n        float or int\n            requested lane change action\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action": [[63, 82], ["base_lane_changing_controller.BaseLaneChangeController.get_lane_change_action"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.lane_change_controllers.StaticLaneChanger.get_lane_change_action"], ["", "def", "get_action", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Return the action of the lane change controller.\n\n        Modifies the lane change action to ensure safety, if requested.\n\n        Parameters\n        ----------\n        env : flow.envs.Env\n            state of the environment at the current time step\n\n        Returns\n        -------\n        float or int\n            lane change action\n        \"\"\"", "\n", "lc_action", "=", "self", ".", "get_lane_change_action", "(", "env", ")", "\n", "# TODO(ak): add failsafe", "\n", "\n", "return", "lc_action", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.rlcontroller.RLController.__init__": [[34, 40], ["flow.controllers.base_controller.BaseController.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "veh_id", ",", "car_following_params", ")", ":", "\n", "        ", "\"\"\"Instantiate an RL Controller.\"\"\"", "\n", "BaseController", ".", "__init__", "(", "\n", "self", ",", "\n", "veh_id", ",", "\n", "car_following_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.rlcontroller.RLController.get_accel": [[41, 44], ["None"], "methods", ["None"], ["", "def", "get_accel", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Pass, as this is never called; required to override abstractmethod.\"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.routing_controllers.ContinuousRouter.choose_route": [[19, 43], ["env.k.vehicle.get_edge", "env.k.vehicle.get_route", "len", "len", "numpy.random.choice", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_route"], ["def", "choose_route", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"See parent class.\n\n        Adopt one of the current edge's routes if about to leave the network.\n        \"\"\"", "\n", "edge", "=", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "self", ".", "veh_id", ")", "\n", "current_route", "=", "env", ".", "k", ".", "vehicle", ".", "get_route", "(", "self", ".", "veh_id", ")", "\n", "\n", "if", "len", "(", "current_route", ")", "==", "0", ":", "\n", "# this occurs to inflowing vehicles, whose information is not added", "\n", "# to the subscriptions in the first step that they departed", "\n", "            ", "return", "None", "\n", "", "elif", "edge", "==", "current_route", "[", "-", "1", "]", ":", "\n", "# choose one of the available routes based on the fraction of times", "\n", "# the given route can be chosen", "\n", "            ", "num_routes", "=", "len", "(", "env", ".", "available_routes", "[", "edge", "]", ")", "\n", "frac", "=", "[", "val", "[", "1", "]", "for", "val", "in", "env", ".", "available_routes", "[", "edge", "]", "]", "\n", "route_id", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "i", "for", "i", "in", "range", "(", "num_routes", ")", "]", ",", "size", "=", "1", ",", "p", "=", "frac", ")", "[", "0", "]", "\n", "\n", "# pass the chosen route", "\n", "return", "env", ".", "available_routes", "[", "edge", "]", "[", "route_id", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.routing_controllers.MinicityRouter.choose_route": [[55, 82], ["vehicles.get_edge", "vehicles.get_route", "env.k.network.next_edge", "vehicles.get_lane", "len", "random.randint", "env.k.network.next_edge", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_route", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.next_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.next_edge"], ["def", "choose_route", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "vehicles", "=", "env", ".", "k", ".", "vehicle", "\n", "veh_id", "=", "self", ".", "veh_id", "\n", "veh_edge", "=", "vehicles", ".", "get_edge", "(", "veh_id", ")", "\n", "veh_route", "=", "vehicles", ".", "get_route", "(", "veh_id", ")", "\n", "veh_next_edge", "=", "env", ".", "k", ".", "network", ".", "next_edge", "(", "veh_edge", ",", "\n", "vehicles", ".", "get_lane", "(", "veh_id", ")", ")", "\n", "not_an_edge", "=", "\":\"", "\n", "no_next", "=", "0", "\n", "\n", "if", "len", "(", "veh_next_edge", ")", "==", "no_next", ":", "\n", "            ", "next_route", "=", "None", "\n", "", "elif", "veh_route", "[", "-", "1", "]", "==", "veh_edge", ":", "\n", "            ", "random_route", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "veh_next_edge", ")", "-", "1", ")", "\n", "while", "veh_next_edge", "[", "0", "]", "[", "0", "]", "[", "0", "]", "==", "not_an_edge", ":", "\n", "                ", "veh_next_edge", "=", "env", ".", "k", ".", "network", ".", "next_edge", "(", "\n", "veh_next_edge", "[", "random_route", "]", "[", "0", "]", ",", "\n", "veh_next_edge", "[", "random_route", "]", "[", "1", "]", ")", "\n", "", "next_route", "=", "[", "veh_edge", ",", "veh_next_edge", "[", "0", "]", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "            ", "next_route", "=", "None", "\n", "\n", "", "if", "veh_edge", "in", "[", "'e_37'", ",", "'e_51'", "]", ":", "\n", "            ", "next_route", "=", "[", "veh_edge", ",", "'e_29_u'", ",", "'e_21'", "]", "\n", "\n", "", "return", "next_route", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.routing_controllers.GridRouter.choose_route": [[92, 103], ["len", "env.k.vehicle.get_route", "env.k.vehicle.get_edge", "env.k.vehicle.get_route", "env.k.vehicle.get_edge"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_route", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_route", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge"], ["def", "choose_route", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "if", "len", "(", "env", ".", "k", ".", "vehicle", ".", "get_route", "(", "self", ".", "veh_id", ")", ")", "==", "0", ":", "\n", "# this occurs to inflowing vehicles, whose information is not added", "\n", "# to the subscriptions in the first step that they departed", "\n", "            ", "return", "None", "\n", "", "elif", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "self", ".", "veh_id", ")", "==", "env", ".", "k", ".", "vehicle", ".", "get_route", "(", "self", ".", "veh_id", ")", "[", "-", "1", "]", ":", "\n", "            ", "return", "[", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "self", ".", "veh_id", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.routing_controllers.BayBridgeRouter.choose_route": [[115, 127], ["env.k.vehicle.get_edge", "env.k.vehicle.get_lane", "routing_controllers.ContinuousRouter.choose_route"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_routing_controller.BaseRouter.choose_route"], ["def", "choose_route", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "edge", "=", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "self", ".", "veh_id", ")", "\n", "lane", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane", "(", "self", ".", "veh_id", ")", "\n", "\n", "if", "edge", "==", "\"183343422\"", "and", "lane", "in", "[", "2", "]", "or", "edge", "==", "\"124952179\"", "and", "lane", "in", "[", "1", ",", "2", "]", ":", "\n", "            ", "new_route", "=", "env", ".", "available_routes", "[", "edge", "+", "\"_1\"", "]", "[", "0", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "new_route", "=", "super", "(", ")", ".", "choose_route", "(", "env", ")", "\n", "\n", "", "return", "new_route", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.routing_controllers.I210Router.choose_route": [[139, 153], ["env.k.vehicle.get_edge", "env.k.vehicle.get_lane", "routing_controllers.ContinuousRouter.choose_route"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_routing_controller.BaseRouter.choose_route"], ["def", "choose_route", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "edge", "=", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "self", ".", "veh_id", ")", "\n", "lane", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane", "(", "self", ".", "veh_id", ")", "\n", "\n", "# vehicles on these edges in lanes 4 and 5 are not going to be able to", "\n", "# make it out in time", "\n", "if", "edge", "==", "\"119257908#1-AddedOffRampEdge\"", "and", "lane", "in", "[", "5", ",", "4", ",", "3", "]", ":", "\n", "            ", "new_route", "=", "env", ".", "available_routes", "[", "\n", "\"119257908#1-AddedOffRampEdge\"", "]", "[", "0", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "new_route", "=", "super", "(", ")", ".", "choose_route", "(", "env", ")", "\n", "\n", "", "return", "new_route", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_routing_controller.BaseRouter.__init__": [[30, 34], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "veh_id", ",", "router_params", ")", ":", "\n", "        ", "\"\"\"Instantiate the base class for routing controllers.\"\"\"", "\n", "self", ".", "veh_id", "=", "veh_id", "\n", "self", ".", "router_params", "=", "router_params", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_routing_controller.BaseRouter.choose_route": [[35, 52], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "choose_route", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Return the routing method implemented by the controller.\n\n        Parameters\n        ----------\n        env : flow.envs.Env\n            see flow/envs/base.py\n\n        Returns\n        -------\n        list or None\n            The sequence of edges the vehicle should adopt. If a None value\n            is returned, the vehicle performs no routing action in the current\n            time step.\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.lane_change_controllers.SimLaneChangeController.get_lane_change_action": [[13, 16], ["None"], "methods", ["None"], ["def", "get_lane_change_action", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.lane_change_controllers.StaticLaneChanger.get_lane_change_action": [[24, 27], ["None"], "methods", ["None"], ["def", "get_lane_change_action", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "return", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.car_following_models.CFMController.__init__": [[49, 78], ["flow.controllers.base_controller.BaseController.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "\n", "veh_id", ",", "\n", "car_following_params", ",", "\n", "k_d", "=", "1", ",", "\n", "k_v", "=", "1", ",", "\n", "k_c", "=", "1", ",", "\n", "d_des", "=", "1", ",", "\n", "v_des", "=", "8", ",", "\n", "time_delay", "=", "0.0", ",", "\n", "noise", "=", "0", ",", "\n", "fail_safe", "=", "None", ",", "\n", "display_warnings", "=", "True", ")", ":", "\n", "        ", "\"\"\"Instantiate a CFM controller.\"\"\"", "\n", "BaseController", ".", "__init__", "(", "\n", "self", ",", "\n", "veh_id", ",", "\n", "car_following_params", ",", "\n", "delay", "=", "time_delay", ",", "\n", "fail_safe", "=", "fail_safe", ",", "\n", "noise", "=", "noise", ",", "\n", "display_warnings", "=", "display_warnings", ",", "\n", ")", "\n", "\n", "self", ".", "veh_id", "=", "veh_id", "\n", "self", ".", "k_d", "=", "k_d", "\n", "self", ".", "k_v", "=", "k_v", "\n", "self", ".", "k_c", "=", "k_c", "\n", "self", ".", "d_des", "=", "d_des", "\n", "self", ".", "v_des", "=", "v_des", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.car_following_models.CFMController.get_accel": [[79, 92], ["env.k.vehicle.get_leader", "env.k.vehicle.get_speed", "env.k.vehicle.get_speed", "env.k.vehicle.get_headway"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway"], ["", "def", "get_accel", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "lead_id", "=", "env", ".", "k", ".", "vehicle", ".", "get_leader", "(", "self", ".", "veh_id", ")", "\n", "if", "not", "lead_id", ":", "# no car ahead", "\n", "            ", "return", "self", ".", "max_accel", "\n", "\n", "", "lead_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "lead_id", ")", "\n", "this_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "self", ".", "veh_id", ")", "\n", "\n", "d_l", "=", "env", ".", "k", ".", "vehicle", ".", "get_headway", "(", "self", ".", "veh_id", ")", "\n", "\n", "return", "self", ".", "k_d", "*", "(", "d_l", "-", "self", ".", "d_des", ")", "+", "self", ".", "k_v", "*", "(", "lead_vel", "-", "this_vel", ")", "+", "self", ".", "k_c", "*", "(", "self", ".", "v_des", "-", "this_vel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.car_following_models.BCMController.__init__": [[128, 157], ["flow.controllers.base_controller.BaseController.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "\n", "veh_id", ",", "\n", "car_following_params", ",", "\n", "k_d", "=", "1", ",", "\n", "k_v", "=", "1", ",", "\n", "k_c", "=", "1", ",", "\n", "d_des", "=", "1", ",", "\n", "v_des", "=", "8", ",", "\n", "time_delay", "=", "0.0", ",", "\n", "noise", "=", "0", ",", "\n", "fail_safe", "=", "None", ",", "\n", "display_warnings", "=", "True", ")", ":", "\n", "        ", "\"\"\"Instantiate a Bilateral car-following model controller.\"\"\"", "\n", "BaseController", ".", "__init__", "(", "\n", "self", ",", "\n", "veh_id", ",", "\n", "car_following_params", ",", "\n", "delay", "=", "time_delay", ",", "\n", "fail_safe", "=", "fail_safe", ",", "\n", "noise", "=", "noise", ",", "\n", "display_warnings", "=", "display_warnings", ",", "\n", ")", "\n", "\n", "self", ".", "veh_id", "=", "veh_id", "\n", "self", ".", "k_d", "=", "k_d", "\n", "self", ".", "k_v", "=", "k_v", "\n", "self", ".", "k_c", "=", "k_c", "\n", "self", ".", "d_des", "=", "d_des", "\n", "self", ".", "v_des", "=", "v_des", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.car_following_models.BCMController.get_accel": [[158, 183], ["env.k.vehicle.get_leader", "env.k.vehicle.get_speed", "env.k.vehicle.get_speed", "env.k.vehicle.get_follower", "env.k.vehicle.get_speed", "env.k.vehicle.get_headway", "env.k.vehicle.get_headway"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_follower", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway"], ["", "def", "get_accel", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"See parent class.\n\n        From the paper:\n        There would also be additional control rules that take\n        into account minimum safe separation, relative speeds,\n        speed limits, weather and lighting conditions, traffic density\n        and traffic advisories\n        \"\"\"", "\n", "lead_id", "=", "env", ".", "k", ".", "vehicle", ".", "get_leader", "(", "self", ".", "veh_id", ")", "\n", "if", "not", "lead_id", ":", "# no car ahead", "\n", "            ", "return", "self", ".", "max_accel", "\n", "\n", "", "lead_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "lead_id", ")", "\n", "this_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "self", ".", "veh_id", ")", "\n", "\n", "trail_id", "=", "env", ".", "k", ".", "vehicle", ".", "get_follower", "(", "self", ".", "veh_id", ")", "\n", "trail_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "trail_id", ")", "\n", "\n", "headway", "=", "env", ".", "k", ".", "vehicle", ".", "get_headway", "(", "self", ".", "veh_id", ")", "\n", "footway", "=", "env", ".", "k", ".", "vehicle", ".", "get_headway", "(", "trail_id", ")", "\n", "\n", "return", "self", ".", "k_d", "*", "(", "headway", "-", "footway", ")", "+", "self", ".", "k_v", "*", "(", "(", "lead_vel", "-", "this_vel", ")", "-", "(", "this_vel", "-", "trail_vel", ")", ")", "+", "self", ".", "k_c", "*", "(", "self", ".", "v_des", "-", "this_vel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.car_following_models.LACController.__init__": [[211, 240], ["flow.controllers.base_controller.BaseController.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "\n", "veh_id", ",", "\n", "car_following_params", ",", "\n", "k_1", "=", "0.3", ",", "\n", "k_2", "=", "0.4", ",", "\n", "h", "=", "1", ",", "\n", "tau", "=", "0.1", ",", "\n", "a", "=", "0", ",", "\n", "time_delay", "=", "0.0", ",", "\n", "noise", "=", "0", ",", "\n", "fail_safe", "=", "None", ",", "\n", "display_warnings", "=", "True", ")", ":", "\n", "        ", "\"\"\"Instantiate a Linear Adaptive Cruise controller.\"\"\"", "\n", "BaseController", ".", "__init__", "(", "\n", "self", ",", "\n", "veh_id", ",", "\n", "car_following_params", ",", "\n", "delay", "=", "time_delay", ",", "\n", "fail_safe", "=", "fail_safe", ",", "\n", "noise", "=", "noise", ",", "\n", "display_warnings", "=", "display_warnings", ",", "\n", ")", "\n", "\n", "self", ".", "veh_id", "=", "veh_id", "\n", "self", ".", "k_1", "=", "k_1", "\n", "self", ".", "k_2", "=", "k_2", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "a", "=", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.car_following_models.LACController.get_accel": [[241, 255], ["env.k.vehicle.get_leader", "env.k.vehicle.get_speed", "env.k.vehicle.get_speed", "env.k.vehicle.get_headway", "env.k.vehicle.get_length"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_length"], ["", "def", "get_accel", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "lead_id", "=", "env", ".", "k", ".", "vehicle", ".", "get_leader", "(", "self", ".", "veh_id", ")", "\n", "lead_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "lead_id", ")", "\n", "this_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "self", ".", "veh_id", ")", "\n", "headway", "=", "env", ".", "k", ".", "vehicle", ".", "get_headway", "(", "self", ".", "veh_id", ")", "\n", "L", "=", "env", ".", "k", ".", "vehicle", ".", "get_length", "(", "self", ".", "veh_id", ")", "\n", "ex", "=", "headway", "-", "L", "-", "self", ".", "h", "*", "this_vel", "\n", "ev", "=", "lead_vel", "-", "this_vel", "\n", "u", "=", "self", ".", "k_1", "*", "ex", "+", "self", ".", "k_2", "*", "ev", "\n", "a_dot", "=", "-", "(", "self", ".", "a", "/", "self", ".", "tau", ")", "+", "(", "u", "/", "self", ".", "tau", ")", "\n", "self", ".", "a", "=", "a_dot", "*", "env", ".", "sim_step", "+", "self", ".", "a", "\n", "\n", "return", "self", ".", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.car_following_models.OVMController.__init__": [[291, 319], ["flow.controllers.base_controller.BaseController.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "\n", "veh_id", ",", "\n", "car_following_params", ",", "\n", "alpha", "=", "1", ",", "\n", "beta", "=", "1", ",", "\n", "h_st", "=", "2", ",", "\n", "h_go", "=", "15", ",", "\n", "v_max", "=", "30", ",", "\n", "time_delay", "=", "0", ",", "\n", "noise", "=", "0", ",", "\n", "fail_safe", "=", "None", ",", "\n", "display_warnings", "=", "True", ")", ":", "\n", "        ", "\"\"\"Instantiate an Optimal Vehicle Model controller.\"\"\"", "\n", "BaseController", ".", "__init__", "(", "\n", "self", ",", "\n", "veh_id", ",", "\n", "car_following_params", ",", "\n", "delay", "=", "time_delay", ",", "\n", "fail_safe", "=", "fail_safe", ",", "\n", "noise", "=", "noise", ",", "\n", "display_warnings", "=", "display_warnings", ",", "\n", ")", "\n", "self", ".", "veh_id", "=", "veh_id", "\n", "self", ".", "v_max", "=", "v_max", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "h_st", "=", "h_st", "\n", "self", ".", "h_go", "=", "h_go", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.car_following_models.OVMController.get_accel": [[320, 341], ["env.k.vehicle.get_leader", "env.k.vehicle.get_speed", "env.k.vehicle.get_speed", "env.k.vehicle.get_headway", "math.cos"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway"], ["", "def", "get_accel", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "lead_id", "=", "env", ".", "k", ".", "vehicle", ".", "get_leader", "(", "self", ".", "veh_id", ")", "\n", "if", "not", "lead_id", ":", "# no car ahead", "\n", "            ", "return", "self", ".", "max_accel", "\n", "\n", "", "lead_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "lead_id", ")", "\n", "this_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "self", ".", "veh_id", ")", "\n", "h", "=", "env", ".", "k", ".", "vehicle", ".", "get_headway", "(", "self", ".", "veh_id", ")", "\n", "h_dot", "=", "lead_vel", "-", "this_vel", "\n", "\n", "# V function here - input: h, output : Vh", "\n", "if", "h", "<=", "self", ".", "h_st", ":", "\n", "            ", "v_h", "=", "0", "\n", "", "elif", "self", ".", "h_st", "<", "h", "<", "self", ".", "h_go", ":", "\n", "            ", "v_h", "=", "self", ".", "v_max", "/", "2", "*", "(", "1", "-", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "h", "-", "self", ".", "h_st", ")", "/", "\n", "(", "self", ".", "h_go", "-", "self", ".", "h_st", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "v_h", "=", "self", ".", "v_max", "\n", "\n", "", "return", "self", ".", "alpha", "*", "(", "v_h", "-", "this_vel", ")", "+", "self", ".", "beta", "*", "h_dot", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.car_following_models.LinearOVM.__init__": [[371, 397], ["flow.controllers.base_controller.BaseController.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "\n", "veh_id", ",", "\n", "car_following_params", ",", "\n", "v_max", "=", "30", ",", "\n", "adaptation", "=", "0.65", ",", "\n", "h_st", "=", "5", ",", "\n", "time_delay", "=", "0.0", ",", "\n", "noise", "=", "0", ",", "\n", "fail_safe", "=", "None", ",", "\n", "display_warnings", "=", "True", ")", ":", "\n", "        ", "\"\"\"Instantiate a Linear OVM controller.\"\"\"", "\n", "BaseController", ".", "__init__", "(", "\n", "self", ",", "\n", "veh_id", ",", "\n", "car_following_params", ",", "\n", "delay", "=", "time_delay", ",", "\n", "fail_safe", "=", "fail_safe", ",", "\n", "noise", "=", "noise", ",", "\n", "display_warnings", "=", "display_warnings", ",", "\n", ")", "\n", "self", ".", "veh_id", "=", "veh_id", "\n", "# 4.8*1.85 for case I, 3.8*1.85 for case II, per Nakayama", "\n", "self", ".", "v_max", "=", "v_max", "\n", "# TAU in Traffic Flow Dynamics textbook", "\n", "self", ".", "adaptation", "=", "adaptation", "\n", "self", ".", "h_st", "=", "h_st", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.car_following_models.LinearOVM.get_accel": [[398, 413], ["env.k.vehicle.get_speed", "env.k.vehicle.get_headway"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway"], ["", "def", "get_accel", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "this_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "self", ".", "veh_id", ")", "\n", "h", "=", "env", ".", "k", ".", "vehicle", ".", "get_headway", "(", "self", ".", "veh_id", ")", "\n", "\n", "# V function here - input: h, output : Vh", "\n", "alpha", "=", "1.689", "# the average value from Nakayama paper", "\n", "if", "h", "<", "self", ".", "h_st", ":", "\n", "            ", "v_h", "=", "0", "\n", "", "elif", "self", ".", "h_st", "<=", "h", "<=", "self", ".", "h_st", "+", "self", ".", "v_max", "/", "alpha", ":", "\n", "            ", "v_h", "=", "alpha", "*", "(", "h", "-", "self", ".", "h_st", ")", "\n", "", "else", ":", "\n", "            ", "v_h", "=", "self", ".", "v_max", "\n", "\n", "", "return", "(", "v_h", "-", "this_vel", ")", "/", "self", ".", "adaptation", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.car_following_models.IDMController.__init__": [[452, 481], ["flow.controllers.base_controller.BaseController.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "\n", "veh_id", ",", "\n", "v0", "=", "30", ",", "\n", "T", "=", "1", ",", "\n", "a", "=", "1", ",", "\n", "b", "=", "1.5", ",", "\n", "delta", "=", "4", ",", "\n", "s0", "=", "2", ",", "\n", "time_delay", "=", "0.0", ",", "\n", "noise", "=", "0", ",", "\n", "fail_safe", "=", "None", ",", "\n", "display_warnings", "=", "True", ",", "\n", "car_following_params", "=", "None", ")", ":", "\n", "        ", "\"\"\"Instantiate an IDM controller.\"\"\"", "\n", "BaseController", ".", "__init__", "(", "\n", "self", ",", "\n", "veh_id", ",", "\n", "car_following_params", ",", "\n", "delay", "=", "time_delay", ",", "\n", "fail_safe", "=", "fail_safe", ",", "\n", "noise", "=", "noise", ",", "\n", "display_warnings", "=", "display_warnings", ",", "\n", ")", "\n", "self", ".", "v0", "=", "v0", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "a", "=", "a", "\n", "self", ".", "b", "=", "b", "\n", "self", ".", "delta", "=", "delta", "\n", "self", ".", "s0", "=", "s0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.car_following_models.IDMController.get_accel": [[482, 501], ["env.k.vehicle.get_speed", "env.k.vehicle.get_leader", "env.k.vehicle.get_headway", "abs", "env.k.vehicle.get_speed", "max", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max"], ["", "def", "get_accel", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "v", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "self", ".", "veh_id", ")", "\n", "lead_id", "=", "env", ".", "k", ".", "vehicle", ".", "get_leader", "(", "self", ".", "veh_id", ")", "\n", "h", "=", "env", ".", "k", ".", "vehicle", ".", "get_headway", "(", "self", ".", "veh_id", ")", "\n", "\n", "# in order to deal with ZeroDivisionError", "\n", "if", "abs", "(", "h", ")", "<", "1e-3", ":", "\n", "            ", "h", "=", "1e-3", "\n", "\n", "", "if", "lead_id", "is", "None", "or", "lead_id", "==", "''", ":", "# no car ahead", "\n", "            ", "s_star", "=", "0", "\n", "", "else", ":", "\n", "            ", "lead_vel", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "lead_id", ")", "\n", "s_star", "=", "self", ".", "s0", "+", "max", "(", "\n", "0", ",", "v", "*", "self", ".", "T", "+", "v", "*", "(", "v", "-", "lead_vel", ")", "/", "\n", "(", "2", "*", "np", ".", "sqrt", "(", "self", ".", "a", "*", "self", ".", "b", ")", ")", ")", "\n", "\n", "", "return", "self", ".", "a", "*", "(", "1", "-", "(", "v", "/", "self", ".", "v0", ")", "**", "self", ".", "delta", "-", "(", "s_star", "/", "h", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.car_following_models.SimCarFollowingController.get_accel": [[513, 516], ["None"], "methods", ["None"], ["def", "get_accel", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.car_following_models.GippsController.__init__": [[556, 586], ["flow.controllers.base_controller.BaseController.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "\n", "veh_id", ",", "\n", "car_following_params", "=", "None", ",", "\n", "v0", "=", "30", ",", "\n", "acc", "=", "1.5", ",", "\n", "b", "=", "-", "1", ",", "\n", "b_l", "=", "-", "1", ",", "\n", "s0", "=", "2", ",", "\n", "tau", "=", "1", ",", "\n", "delay", "=", "0", ",", "\n", "noise", "=", "0", ",", "\n", "fail_safe", "=", "None", ",", "\n", "display_warnings", "=", "True", ")", ":", "\n", "        ", "\"\"\"Instantiate a Gipps' controller.\"\"\"", "\n", "BaseController", ".", "__init__", "(", "\n", "self", ",", "\n", "veh_id", ",", "\n", "car_following_params", ",", "\n", "delay", "=", "delay", ",", "\n", "fail_safe", "=", "fail_safe", ",", "\n", "noise", "=", "noise", ",", "\n", "display_warnings", "=", "display_warnings", ",", "\n", ")", "\n", "\n", "self", ".", "v_desired", "=", "v0", "\n", "self", ".", "acc", "=", "acc", "\n", "self", ".", "b", "=", "b", "\n", "self", ".", "b_l", "=", "b_l", "\n", "self", ".", "s0", "=", "s0", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.car_following_models.GippsController.get_accel": [[587, 603], ["env.k.vehicle.get_speed", "env.k.vehicle.get_headway", "env.k.vehicle.get_speed", "min", "env.k.vehicle.get_leader", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader"], ["", "def", "get_accel", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "v", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "self", ".", "veh_id", ")", "\n", "h", "=", "env", ".", "k", ".", "vehicle", ".", "get_headway", "(", "self", ".", "veh_id", ")", "\n", "v_l", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "\n", "env", ".", "k", ".", "vehicle", ".", "get_leader", "(", "self", ".", "veh_id", ")", ")", "\n", "\n", "# get velocity dynamics", "\n", "v_acc", "=", "v", "+", "(", "2.5", "*", "self", ".", "acc", "*", "self", ".", "tau", "*", "(", "\n", "1", "-", "(", "v", "/", "self", ".", "v_desired", ")", ")", "*", "np", ".", "sqrt", "(", "0.025", "+", "(", "v", "/", "self", ".", "v_desired", ")", ")", ")", "\n", "v_safe", "=", "(", "self", ".", "tau", "*", "self", ".", "b", ")", "+", "np", ".", "sqrt", "(", "(", "(", "self", ".", "tau", "**", "2", ")", "*", "(", "self", ".", "b", "**", "2", ")", ")", "-", "(", "\n", "self", ".", "b", "*", "(", "(", "2", "*", "(", "h", "-", "self", ".", "s0", ")", ")", "-", "(", "self", ".", "tau", "*", "v", ")", "-", "(", "(", "v_l", "**", "2", ")", "/", "self", ".", "b_l", ")", ")", ")", ")", "\n", "\n", "v_next", "=", "min", "(", "v_acc", ",", "v_safe", ",", "self", ".", "v_desired", ")", "\n", "\n", "return", "(", "v_next", "-", "v", ")", "/", "env", ".", "sim_step", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.car_following_models.BandoFTLController.__init__": [[639, 669], ["flow.controllers.base_controller.BaseController.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "\n", "veh_id", ",", "\n", "car_following_params", ",", "\n", "alpha", "=", ".5", ",", "\n", "beta", "=", "20", ",", "\n", "h_st", "=", "2", ",", "\n", "h_go", "=", "10", ",", "\n", "v_max", "=", "32", ",", "\n", "want_max_accel", "=", "False", ",", "\n", "time_delay", "=", "0", ",", "\n", "noise", "=", "0", ",", "\n", "fail_safe", "=", "None", ",", "\n", "display_warnings", "=", "True", ")", ":", "\n", "        ", "\"\"\"Instantiate an Bando controller.\"\"\"", "\n", "BaseController", ".", "__init__", "(", "\n", "self", ",", "\n", "veh_id", ",", "\n", "car_following_params", ",", "\n", "delay", "=", "time_delay", ",", "\n", "fail_safe", "=", "fail_safe", ",", "\n", "noise", "=", "noise", ",", "\n", "display_warnings", "=", "display_warnings", ",", "\n", ")", "\n", "self", ".", "veh_id", "=", "veh_id", "\n", "self", ".", "v_max", "=", "v_max", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "h_st", "=", "h_st", "\n", "self", ".", "h_go", "=", "h_go", "\n", "self", ".", "want_max_accel", "=", "want_max_accel", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.car_following_models.BandoFTLController.get_accel": [[670, 681], ["env.k.vehicle.get_leader", "env.k.vehicle.get_speed", "env.k.vehicle.get_speed", "env.k.vehicle.get_headway", "car_following_models.BandoFTLController.accel_func"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.car_following_models.BandoFTLController.accel_func"], ["", "def", "get_accel", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "lead_id", "=", "env", ".", "k", ".", "vehicle", ".", "get_leader", "(", "self", ".", "veh_id", ")", "\n", "if", "not", "lead_id", ":", "# no car ahead", "\n", "            ", "if", "self", ".", "want_max_accel", ":", "\n", "                ", "return", "self", ".", "max_accel", "\n", "\n", "", "", "v_l", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "lead_id", ")", "\n", "v", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "self", ".", "veh_id", ")", "\n", "s", "=", "env", ".", "k", ".", "vehicle", ".", "get_headway", "(", "self", ".", "veh_id", ")", "\n", "return", "self", ".", "accel_func", "(", "v", ",", "v_l", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.car_following_models.BandoFTLController.accel_func": [[682, 688], ["numpy.tanh", "numpy.tanh", "numpy.tanh"], "methods", ["None"], ["", "def", "accel_func", "(", "self", ",", "v", ",", "v_l", ",", "s", ")", ":", "\n", "        ", "\"\"\"Compute the acceleration function.\"\"\"", "\n", "v_h", "=", "self", ".", "v_max", "*", "(", "(", "np", ".", "tanh", "(", "s", "/", "self", ".", "h_st", "-", "2", ")", "+", "np", ".", "tanh", "(", "2", ")", ")", "/", "(", "1", "+", "np", ".", "tanh", "(", "2", ")", ")", ")", "\n", "s_dot", "=", "v_l", "-", "v", "\n", "u", "=", "self", ".", "alpha", "*", "(", "v_h", "-", "v", ")", "+", "self", ".", "beta", "*", "s_dot", "/", "(", "s", "**", "2", ")", "\n", "return", "u", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.__init__": [[103, 231], ["copy.deepcopy", "os.environ.get", "sumolib.miscutils.getFreeSocketPort", "flow.core.kernel.Kernel", "base.Env.k.network.generate_network", "base.Env.k.vehicle.initialize", "base.Env.k.simulation.start_simulation", "base.Env.k.pass_api", "copy.deepcopy", "copy.deepcopy", "base.Env.setup_initial_state", "atexit.register", "flow.utils.flow_warnings.deprecated_attribute", "str().split", "time.sleep", "copy.deepcopy", "base.Env.k.kernel_api.lane.getIDList", "flow.renderer.pyglet_renderer.PygletRenderer", "base.Env.render", "base.Env.k.kernel_api.lane.getShape", "network.append", "flow.utils.exceptions.FatalFlowError", "str", "os.makedirs", "time.time", "int", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.generate_network", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.initialize", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.start_simulation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.pass_api", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.setup_initial_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated_attribute", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.restart_simulation": [[232, 268], ["base.Env.k.close", "base.Env.k.network.generate_network", "base.Env.k.vehicle.initialize", "base.Env.k.simulation.start_simulation", "base.Env.k.pass_api", "base.Env.setup_initial_state", "base.Env.k.simulation.sumo_proc.kill", "flow.core.util.ensure_dir", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.generate_network", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.initialize", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.start_simulation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.pass_api", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.setup_initial_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.ensure_dir"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.setup_initial_state": [[269, 294], ["base.Env.k.network.generate_starting_positions", "enumerate", "random.shuffle", "base.Env.k.vehicle.get_type", "base.Env.k.vehicle.get_initial_speed", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.generate_starting_positions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_type", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_initial_speed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.step": [[295, 414], ["range", "base.Env.get_state", "numpy.copy", "base.Env.k.vehicle.get_ids", "base.Env.k.vehicle.choose_routes", "base.Env.apply_rl_actions", "base.Env.additional_command", "base.Env.k.simulation.simulation_step", "base.Env.k.update", "base.Env.k.simulation.check_collision", "base.Env.render", "numpy.asarray", "base.Env.clip_actions", "base.Env.compute_reward", "base.Env.compute_reward", "len", "base.Env.k.vehicle.get_controlled_ids", "base.Env.k.vehicle.apply_acceleration", "len", "base.Env.k.vehicle.get_controlled_lc_ids", "base.Env.k.vehicle.apply_lane_change", "base.Env.k.vehicle.update_vehicle_colors", "base.Env.k.vehicle.get_controlled_ids", "base.Env.k.vehicle.get_acc_controller().get_action", "accel.append", "base.Env.k.vehicle.get_controlled_ids", "base.Env.k.vehicle.get_controlled_lc_ids", "base.Env.k.vehicle.get_lane_changing_controller().get_action", "direction.append", "base.Env.k.vehicle.get_controlled_lc_ids", "base.Env.k.vehicle.get_routing_controller", "routing_ids.append", "base.Env.k.vehicle.get_routing_controller", "routing_actions.append", "base.Env.choose_route", "base.Env.k.vehicle.get_acc_controller", "base.Env.k.vehicle.get_lane_changing_controller"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.get_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.choose_routes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.apply_rl_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.WaveAttenuationPOEnv.additional_command", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.simulation_step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.check_collision", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.clip_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.compute_reward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.compute_reward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_acceleration", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_lc_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_lane_change", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.update_vehicle_colors", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_lc_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_lc_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_routing_controller", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_routing_controller", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_routing_controller.BaseRouter.choose_route", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_changing_controller"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.reset": [[415, 562], ["list", "base.Env.k.vehicle.reset", "base.Env.k.simulation.simulation_step", "base.Env.k.update", "base.Env.get_state", "numpy.copy", "range", "base.Env.render", "base.Env.restart_simulation", "print", "random.randint", "copy.deepcopy", "base.Env.restart_simulation", "base.Env.k.kernel_api.vehicle.getIDList", "base.Env.k.vehicle.get_ids", "base.Env.k.vehicle.update_vehicle_colors", "base.Env.k.kernel_api.vehicle.getIDList", "len", "len", "list", "flow.utils.exceptions.FatalFlowError", "numpy.asarray", "base.Env.step", "len", "base.Env.setup_initial_state", "base.Env.k.vehicle.remove", "base.Env.k.vehicle.add", "base.Env.net_params.inflows.get", "base.Env.k.vehicle.remove", "print", "base.Env.k.vehicle.remove", "base.Env.k.vehicle.add", "set", "set", "print", "base.Env.k.kernel_api.vehicle.remove", "traceback.format_exc", "traceback.format_exc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.simulation_step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.get_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.restart_simulation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.restart_simulation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.update_vehicle_colors", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.setup_initial_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.additional_command": [[563, 566], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.clip_actions": [[567, 599], ["isinstance", "numpy.clip", "isinstance", "enumerate", "isinstance", "numpy.clip"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.apply_rl_actions": [[600, 617], ["base.Env.clip_actions", "base.Env._apply_rl_actions"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.clip_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv._apply_rl_actions"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env._apply_rl_actions": [[618, 621], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.get_state": [[622, 635], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.action_space": [[636, 649], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.observation_space": [[650, 664], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.compute_reward": [[665, 684], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate": [[685, 709], ["base.Env.k.close", "base.Env.renderer.close", "print", "subprocess.Popen", "subprocess.Popen.wait", "shutil.rmtree", "traceback.format_exc", "base.Env.path.split", "str"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.render": [[710, 738], ["base.Env.pyglet_render", "base.Env.k.kernel_api.gui.screenshot", "base.Env.frame.copy", "base.Env.sights.copy", "base.Env.frame_buffer.append", "base.Env.sights_buffer.append", "len", "base.Env.frame_buffer.pop", "base.Env.sights_buffer.pop", "range", "range", "int", "base.Env.frame.copy", "base.Env.sights.copy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.pyglet_render", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.pyglet_render": [[739, 805], ["base.Env.k.vehicle.get_human_ids", "base.Env.k.vehicle.get_rl_ids", "base.Env.k.network.max_speed", "base.Env.renderer.render", "machine_logs.append", "machine_orientations.append", "machine_dynamics.append", "base.Env.k.vehicle.get_orientation", "base.Env.renderer.get_sight", "base.Env.sights.append", "machine_logs.append", "machine_orientations.append", "machine_dynamics.append", "human_logs.append", "human_orientations.append", "human_dynamics.append", "base.Env.k.vehicle.get_orientation", "base.Env.k.vehicle.get_orientation", "base.Env.renderer.get_sight", "base.Env.sights.append", "base.Env.k.vehicle.get_orientation", "base.Env.k.vehicle.get_orientation", "base.Env.k.vehicle.get_timestep", "base.Env.k.vehicle.get_timedelta", "base.Env.k.vehicle.get_speed", "base.Env.k.vehicle.get_timestep", "base.Env.k.vehicle.get_timedelta", "base.Env.k.vehicle.get_speed", "base.Env.k.vehicle.get_timestep", "base.Env.k.vehicle.get_timedelta", "base.Env.k.vehicle.get_speed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_human_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.max_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_orientation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer.get_sight", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_orientation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_orientation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer.get_sight", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_orientation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_orientation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_timestep", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_timedelta", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_timestep", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_timedelta", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_timestep", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_timedelta", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bay_bridge.BayBridgeEnv.__init__": [[64, 82], ["flow.envs.Env.__init__", "collections.defaultdict", "dict", "dict", "numpy.abs", "numpy.random.normal", "env_params.get_additional_param", "env_params.get_additional_param"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.EnvParams.get_additional_param", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.EnvParams.get_additional_param"], ["departLane", "=", "\"0\"", ",", "\n", "departSpeed", "=", "20", ")", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"183343422\"", ",", "\n", "vehsPerHour", "=", "864", ",", "\n", "departLane", "=", "\"1\"", ",", "\n", "departSpeed", "=", "20", ")", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"183343422\"", ",", "\n", "vehsPerHour", "=", "600", ",", "\n", "departLane", "=", "\"2\"", ",", "\n", "departSpeed", "=", "20", ")", "\n", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"393649534\"", ",", "\n", "probability", "=", "0.1", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bay_bridge.BayBridgeEnv.additional_command": [[83, 113], ["super().additional_command", "collections.defaultdict", "bay_bridge.BayBridgeEnv.edge_dict.update", "bay_bridge.BayBridgeEnv.k.vehicle.get_ids", "bay_bridge.BayBridgeEnv.k.vehicle.get_edge", "bay_bridge.BayBridgeEnv.k.vehicle.get_lane", "bay_bridge.BayBridgeEnv.k.vehicle.get_position", "[].append", "bay_bridge.BayBridgeEnv.apply_toll_bridge_control", "bay_bridge.BayBridgeEnv.ramp_meter_lane_change_control", "bay_bridge.BayBridgeEnv.edge_dict.update", "bay_bridge.BayBridgeEnv.k.vehicle.apply_lane_change", "range", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.WaveAttenuationPOEnv.additional_command", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckEnv.apply_toll_bridge_control", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckEnv.ramp_meter_lane_change_control", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_lane_change"], ["departLane", "=", "\"0\"", ",", "\n", "departSpeed", "=", "20", ")", "# no data for this", "\n", "\n", "# west", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"11189946\"", ",", "\n", "vehsPerHour", "=", "1752", ",", "\n", "departLane", "=", "\"0\"", ",", "\n", "departSpeed", "=", "20", ")", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"11189946\"", ",", "\n", "vehsPerHour", "=", "2136", ",", "\n", "departLane", "=", "\"1\"", ",", "\n", "departSpeed", "=", "20", ")", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"11189946\"", ",", "\n", "vehsPerHour", "=", "576", ",", "\n", "departLane", "=", "\"2\"", ",", "\n", "departSpeed", "=", "20", ")", "\n", "\n", "# north", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"28413687#0\"", ",", "\n", "vehsPerHour", "=", "2880", ",", "\n", "departLane", "=", "\"0\"", ",", "\n", "departSpeed", "=", "20", ")", "\n", "inflow", ".", "add", "(", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bay_bridge.BayBridgeEnv.ramp_meter_lane_change_control": [[114, 156], ["range", "bay_bridge.BayBridgeEnv.cars_before_ramp.__delitem__", "bay_bridge.BayBridgeEnv.k.vehicle.get_edge", "bay_bridge.BayBridgeEnv.k.vehicle.set_color", "cars_that_have_left.append", "bay_bridge.BayBridgeEnv.k.kernel_api.vehicle.setLaneChangeMode", "bay_bridge.BayBridgeEnv.k.vehicle.get_color", "bay_bridge.BayBridgeEnv.k.vehicle.set_color", "bay_bridge.BayBridgeEnv.k.kernel_api.vehicle.getLaneChangeMode", "bay_bridge.BayBridgeEnv.k.kernel_api.vehicle.setLaneChangeMode"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_color", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_color", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_color"], ["veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"28413687#0\"", ",", "\n", "vehsPerHour", "=", "2328", ",", "\n", "departLane", "=", "\"1\"", ",", "\n", "departSpeed", "=", "20", ")", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"28413687#0\"", ",", "\n", "vehsPerHour", "=", "3060", ",", "\n", "departLane", "=", "\"2\"", ",", "\n", "departSpeed", "=", "20", ")", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"11198593\"", ",", "\n", "probability", "=", "0.1", ",", "\n", "departLane", "=", "\"0\"", ",", "\n", "departSpeed", "=", "20", ")", "# no data for this", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"11197889\"", ",", "\n", "probability", "=", "0.1", ",", "\n", "departLane", "=", "\"0\"", ",", "\n", "departSpeed", "=", "20", ")", "# no data for this", "\n", "\n", "# midway through bridge", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"35536683\"", ",", "\n", "probability", "=", "0.1", ",", "\n", "departLane", "=", "\"0\"", ",", "\n", "departSpeed", "=", "20", ")", "# no data for this", "\n", "\n", "\n", "", "flow_params", "=", "dict", "(", "\n", "# name of the experiment", "\n", "exp_tag", "=", "'bay_bridge'", ",", "\n", "\n", "# name of the flow environment the experiment is running on", "\n", "env_name", "=", "BayBridgeEnv", ",", "\n", "\n", "# name of the network class the experiment is running on", "\n", "network", "=", "BayBridgeNetwork", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bay_bridge.BayBridgeEnv.apply_toll_bridge_control": [[158, 227], ["range", "bay_bridge.BayBridgeEnv.cars_waiting_for_toll.__delitem__", "bay_bridge.BayBridgeEnv.k.traffic_light.set_state", "bay_bridge.BayBridgeEnv.k.vehicle.get_edge", "bay_bridge.BayBridgeEnv.k.vehicle.get_lane", "bay_bridge.BayBridgeEnv.k.vehicle.set_color", "cars_that_have_left.append", "bay_bridge.BayBridgeEnv.k.kernel_api.vehicle.setLaneChangeMode", "max", "max", "numpy.random.normal", "numpy.random.normal", "bay_bridge.BayBridgeEnv.k.vehicle.get_color", "bay_bridge.BayBridgeEnv.k.vehicle.set_color", "bay_bridge.BayBridgeEnv.k.kernel_api.vehicle.getLaneChangeMode", "bay_bridge.BayBridgeEnv.k.kernel_api.vehicle.setLaneChangeMode"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.set_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_color", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_color", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_color"], ["simulator", "=", "'traci'", ",", "\n", "\n", "# sumo-related parameters (see flow.core.params.SumoParams)", "\n", "sim", "=", "SumoParams", "(", "\n", "render", "=", "True", ",", "\n", "sim_step", "=", "0.6", ",", "\n", "overtake_right", "=", "True", ",", "\n", ")", ",", "\n", "\n", "# environment related parameters (see flow.core.params.EnvParams)", "\n", "env", "=", "EnvParams", "(", "\n", "horizon", "=", "1500", ",", "\n", "additional_params", "=", "{", "}", ",", "\n", ")", ",", "\n", "\n", "# network-related parameters (see flow.core.params.NetParams and the", "\n", "# network's documentation or ADDITIONAL_NET_PARAMS component)", "\n", "net", "=", "NetParams", "(", "\n", "inflows", "=", "inflow", ",", "\n", "template", "=", "TEMPLATE", ",", "\n", ")", ",", "\n", "\n", "# vehicles to be placed in the network at the start of a rollout (see", "\n", "# flow.core.params.VehicleParams)", "\n", "veh", "=", "vehicles", ",", "\n", "\n", "# parameters specifying the positioning of vehicles upon initialization/", "\n", "# reset (see flow.core.params.InitialConfig)", "\n", "initial", "=", "InitialConfig", "(", "\n", "spacing", "=", "\"uniform\"", ",", "\n", "min_gap", "=", "15", ",", "\n", "edges_distribution", "=", "EDGES_DISTRIBUTION", ".", "copy", "(", ")", ",", "\n", ")", ",", "\n", "\n", "# traffic lights to be introduced to specific nodes (see", "\n", "# flow.core.params.TrafficLightParams)", "\n", "tls", "=", "TrafficLightParams", "(", ")", ",", "\n", ")", "\n", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bay_bridge.BayBridgeEnv.compute_reward": [[229, 232], ["numpy.mean", "bay_bridge.BayBridgeEnv.k.vehicle.get_speed", "bay_bridge.BayBridgeEnv.k.vehicle.get_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bay_bridge.BayBridgeEnv.action_space": [[237, 244], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bay_bridge.BayBridgeEnv.observation_space": [[245, 252], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bay_bridge.BayBridgeEnv._apply_rl_actions": [[253, 259], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bay_bridge.BayBridgeEnv.get_state": [[260, 266], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckEnv.__init__": [[194, 233], ["ADDITIONAL_ENV_PARAMS.keys", "flow.envs.base.Env.__init__", "network.net_params.additional_params.get", "dict", "dict", "dict", "numpy.abs", "range", "env_add_params.get", "env_add_params.get", "env_add_params.get", "env_add_params.get", "numpy.linspace", "env_add_params.get", "numpy.zeros", "numpy.random.normal", "int", "int", "KeyError", "numpy.ceil", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckEnv.additional_command": [[234, 269], ["super().additional_command", "bottleneck.BottleneckEnv.k.vehicle.get_ids", "bottleneck.BottleneckEnv.k.vehicle.get_ids_by_edge", "len", "copy.deepcopy", "bottleneck.BottleneckEnv.apply_toll_bridge_control", "bottleneck.BottleneckEnv.ramp_meter_lane_change_control", "bottleneck.BottleneckEnv.alinea", "range", "bottleneck.BottleneckEnv.k.vehicle.get_edge", "bottleneck.BottleneckEnv.k.vehicle.get_lane", "bottleneck.BottleneckEnv.k.vehicle.get_position", "[].append", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.WaveAttenuationPOEnv.additional_command", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids_by_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckEnv.apply_toll_bridge_control", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckEnv.ramp_meter_lane_change_control", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckEnv.alinea", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckEnv.ramp_meter_lane_change_control": [[270, 318], ["range", "bottleneck.BottleneckEnv.k.vehicle.get_edge", "bottleneck.BottleneckEnv.k.vehicle.set_color", "cars_that_have_left.append", "bottleneck.BottleneckEnv.k.kernel_api.vehicle.setLaneChangeMode", "bottleneck.BottleneckEnv.k.vehicle.get_color", "bottleneck.BottleneckEnv.k.vehicle.set_color", "bottleneck.BottleneckEnv.k.kernel_api.vehicle.getLaneChangeMode", "bottleneck.BottleneckEnv.k.kernel_api.vehicle.setLaneChangeMode"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_color", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_color", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_color"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckEnv.alinea": [[320, 359], ["bottleneck.BottleneckEnv.k.traffic_light.set_state", "numpy.clip", "numpy.average"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.set_state"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckEnv.apply_toll_bridge_control": [[360, 438], ["range", "bottleneck.BottleneckEnv.k.traffic_light.set_state", "bottleneck.BottleneckEnv.k.vehicle.get_edge", "bottleneck.BottleneckEnv.k.vehicle.get_lane", "bottleneck.BottleneckEnv.k.vehicle.set_color", "cars_that_have_left.append", "bottleneck.BottleneckEnv.k.kernel_api.vehicle.setLaneChangeMode", "max", "max", "numpy.random.normal", "numpy.random.normal", "bottleneck.BottleneckEnv.k.vehicle.get_color", "bottleneck.BottleneckEnv.k.vehicle.set_color", "bottleneck.BottleneckEnv.k.kernel_api.vehicle.getLaneChangeMode", "bottleneck.BottleneckEnv.k.kernel_api.vehicle.setLaneChangeMode"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.set_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_color", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_color", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_color"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckEnv.get_bottleneck_density": [[439, 455], ["bottleneck.BottleneckEnv.k.vehicle.get_ids_by_edge", "bottleneck.BottleneckEnv.k.vehicle.get_ids_by_edge", "len", "str", "str", "bottleneck.BottleneckEnv.k.vehicle.get_lane", "bottleneck.BottleneckEnv.k.vehicle.get_edge"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids_by_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids_by_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckEnv.action_space": [[457, 465], ["gym.spaces.box.Box", "float", "float"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckEnv.observation_space": [[466, 474], ["gym.spaces.box.Box", "float", "float"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckEnv._apply_rl_actions": [[475, 481], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckEnv.compute_reward": [[482, 487], ["bottleneck.BottleneckEnv.k.vehicle.get_outflow_rate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_outflow_rate"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckEnv.get_state": [[488, 491], ["numpy.asarray"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckAccelEnv.__init__": [[523, 535], ["ADDITIONAL_RL_ENV_PARAMS.keys", "bottleneck.BottleneckEnv.__init__", "env_params.get_additional_param", "copy.deepcopy", "copy.deepcopy", "bottleneck.BottleneckAccelEnv.k.network.max_speed", "bottleneck.BottleneckAccelEnv.initial_vehicles.get_rl_ids", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.EnvParams.get_additional_param", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.max_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckAccelEnv.observation_space": [[536, 545], ["len", "gym.spaces.box.Box", "bottleneck.BottleneckAccelEnv.k.network.get_edge_list"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckAccelEnv.get_state": [[546, 641], ["bottleneck.BottleneckAccelEnv.k.vehicle.get_rl_ids", "numpy.empty", "numpy.empty", "bottleneck.BottleneckAccelEnv.k.network.get_edge_list", "numpy.concatenate", "bottleneck.BottleneckAccelEnv.rl_id_list.index", "bottleneck.BottleneckAccelEnv.k.vehicle.get_edge", "numpy.concatenate", "int", "numpy.concatenate", "bottleneck.BottleneckAccelEnv.rl_id_list.index", "bottleneck.BottleneckAccelEnv.k.vehicle.get_lane_leaders", "bottleneck.BottleneckAccelEnv.k.vehicle.get_lane_followers", "bottleneck.BottleneckAccelEnv.k.vehicle.get_lane_headways", "bottleneck.BottleneckAccelEnv.k.vehicle.get_lane_tailways", "enumerate", "enumerate", "numpy.concatenate", "int", "numpy.concatenate", "bottleneck.BottleneckAccelEnv.k.vehicle.get_ids_by_edge", "numpy.concatenate", "numpy.zeros", "numpy.concatenate", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "len", "int", "numpy.zeros", "len", "len", "numpy.zeros", "len", "bottleneck.BottleneckAccelEnv.k.network.edge_length", "numpy.zeros", "bottleneck.BottleneckAccelEnv.k.vehicle.get_speed", "bottleneck.BottleneckAccelEnv.k.vehicle.get_speed", "sum", "len", "bottleneck.BottleneckAccelEnv.k.vehicle.get_x_by_id", "bottleneck.BottleneckAccelEnv.k.vehicle.get_speed", "bottleneck.BottleneckAccelEnv.k.vehicle.get_lane", "bottleneck.BottleneckAccelEnv.k.vehicle.get_speed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_leaders", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_followers", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_headways", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_tailways", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids_by_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckAccelEnv.compute_reward": [[642, 649], ["numpy.abs", "flow.core.rewards.boolean_action_penalty", "numpy.round", "flow.core.rewards.desired_velocity", "flow.core.rewards.rl_forward_progress"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.boolean_action_penalty", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.desired_velocity", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.rl_forward_progress"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckAccelEnv.action_space": [[650, 660], ["gym.spaces.box.Box", "numpy.array", "numpy.array", "abs"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckAccelEnv._apply_rl_actions": [[661, 691], ["sorted", "numpy.array", "bottleneck.BottleneckAccelEnv.k.vehicle.apply_acceleration", "bottleneck.BottleneckAccelEnv.k.vehicle.apply_lane_change", "numpy.round", "bottleneck.BottleneckAccelEnv.k.vehicle.get_rl_ids", "sum", "bottleneck.BottleneckAccelEnv.k.vehicle.get_last_lc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_acceleration", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_lane_change", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_last_lc"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckAccelEnv.additional_command": [[692, 721], ["bottleneck.BottleneckEnv.additional_command", "list", "len", "set().difference", "bottleneck.BottleneckAccelEnv.k.vehicle.get_rl_ids", "bottleneck.BottleneckAccelEnv.k.vehicle.add", "set", "bottleneck.BottleneckAccelEnv.rl_id_list.index", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.WaveAttenuationPOEnv.additional_command", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckDesiredVelocityEnv.__init__": [[744, 843], ["bottleneck.BottleneckEnv.__init__", "ADDITIONAL_VSL_ENV_PARAMS.keys", "bottleneck.BottleneckEnv.__init__", "add_env_params.get", "int", "int", "additional_params.get", "additional_params.get", "enumerate", "numpy.sum", "numpy.sum", "bottleneck.BottleneckDesiredVelocityEnv.k.network.edge_length", "numpy.linspace", "bottleneck.BottleneckDesiredVelocityEnv.k.network.edge_length", "numpy.linspace", "KeyError", "str", "range", "bottleneck.BottleneckDesiredVelocityEnv.k.network.num_lanes", "bottleneck.BottleneckDesiredVelocityEnv.k.network.num_lanes"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckDesiredVelocityEnv.observation_space": [[844, 854], ["gym.spaces.box.Box", "bottleneck.BottleneckDesiredVelocityEnv.k.network.num_lanes"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckDesiredVelocityEnv.action_space": [[855, 872], ["add_params.get", "add_params.get", "gym.spaces.box.Box", "bottleneck.BottleneckDesiredVelocityEnv.k.network.num_lanes", "int"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckDesiredVelocityEnv.get_state": [[873, 947], ["enumerate", "len", "len", "numpy.nan_to_num", "numpy.asarray", "numpy.concatenate", "bottleneck.BottleneckDesiredVelocityEnv.k.network.num_lanes", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "bottleneck.BottleneckDesiredVelocityEnv.k.vehicle.get_ids_by_edge", "bottleneck.BottleneckDesiredVelocityEnv.k.vehicle.get_lane", "bottleneck.BottleneckDesiredVelocityEnv.k.vehicle.get_position", "enumerate", "numpy.zeros.flatten().tolist", "numpy.zeros.flatten().tolist", "numpy.zeros.flatten().tolist", "numpy.zeros.flatten().tolist", "numpy.asarray", "numpy.asarray", "numpy.nan_to_num", "bottleneck.BottleneckDesiredVelocityEnv.k.vehicle.get_outflow_rate", "numpy.searchsorted", "bottleneck.BottleneckDesiredVelocityEnv.k.vehicle.get_rl_ids", "bottleneck.BottleneckDesiredVelocityEnv.k.vehicle.get_speed", "bottleneck.BottleneckDesiredVelocityEnv.k.vehicle.get_speed", "numpy.zeros.flatten", "numpy.zeros.flatten", "numpy.zeros.flatten", "numpy.zeros.flatten", "int", "range", "int", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids_by_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_outflow_rate", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckDesiredVelocityEnv._apply_rl_actions": [[948, 982], ["bottleneck.BottleneckDesiredVelocityEnv.k.vehicle.get_rl_ids", "bottleneck.BottleneckDesiredVelocityEnv.k.vehicle.get_edge", "bottleneck.BottleneckDesiredVelocityEnv.k.vehicle.get_lane", "bottleneck.BottleneckDesiredVelocityEnv.k.vehicle.get_position", "bottleneck.BottleneckDesiredVelocityEnv.k.vehicle.get_max_speed", "numpy.clip", "bottleneck.BottleneckDesiredVelocityEnv.k.vehicle.set_max_speed", "bottleneck.BottleneckDesiredVelocityEnv.k.vehicle.set_max_speed", "bottleneck.BottleneckDesiredVelocityEnv.k.network.num_lanes", "numpy.searchsorted", "numpy.searchsorted", "int"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_max_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_max_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_max_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckDesiredVelocityEnv.compute_reward": [[983, 994], ["bottleneck.BottleneckDesiredVelocityEnv.k.vehicle.get_outflow_rate", "bottleneck.BottleneckDesiredVelocityEnv.k.vehicle.get_outflow_rate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_outflow_rate", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_outflow_rate"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckDesiredVelocityEnv.reset": [[995, 1093], ["add_params.get", "super().reset", "add_params.get", "range", "numpy.random.uniform", "min", "max", "flow.core.params.InFlows", "flow.core.params.InFlows.add", "flow.core.params.InFlows.add", "flow.core.params.NetParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.VehicleParams.add", "bottleneck.BottleneckDesiredVelocityEnv.network.__class__", "super().reset", "print", "flow.core.params.SumoCarFollowingParams", "flow.core.params.SumoLaneChangeParams", "flow.core.params.SumoCarFollowingParams", "flow.core.params.SumoLaneChangeParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.test.TestEnv.action_space": [[32, 36], ["gym.spaces.box.Box"], "methods", ["None"], ["@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "return", "Box", "(", "low", "=", "0", ",", "high", "=", "0", ",", "shape", "=", "(", "0", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.test.TestEnv.observation_space": [[37, 41], ["gym.spaces.box.Box"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "return", "Box", "(", "low", "=", "0", ",", "high", "=", "0", ",", "shape", "=", "(", "0", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.test.TestEnv._apply_rl_actions": [[42, 44], ["None"], "methods", ["None"], ["", "def", "_apply_rl_actions", "(", "self", ",", "rl_actions", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.test.TestEnv.compute_reward": [[45, 51], ["None"], "methods", ["None"], ["", "def", "compute_reward", "(", "self", ",", "rl_actions", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "if", "\"reward_fn\"", "in", "self", ".", "env_params", ".", "additional_params", ":", "\n", "            ", "return", "self", ".", "env_params", ".", "additional_params", "[", "\"reward_fn\"", "]", "(", "self", ")", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.test.TestEnv.get_state": [[52, 55], ["numpy.array"], "methods", ["None"], ["", "", "def", "get_state", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "return", "np", ".", "array", "(", "[", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.__init__": [[112, 171], ["ADDITIONAL_ENV_PARAMS.keys", "env_params.additional_params.get", "flow.envs.base.Env.__init__", "numpy.zeros", "numpy.zeros", "numpy.zeros", "env_params.additional_params.get", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "KeyError", "traffic_light_grid.TrafficLightGridEnv.k.traffic_light.set_state", "str"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.set_state"], ["\n", "additional_init_params", "=", "{", "'enter_speed'", ":", "enter_speed", "}", "\n", "initial", "=", "InitialConfig", "(", "\n", "spacing", "=", "'custom'", ",", "additional_params", "=", "additional_init_params", ")", "\n", "net", "=", "NetParams", "(", "additional_params", "=", "add_net_params", ")", "\n", "\n", "return", "initial", ",", "net", "\n", "\n", "\n", "", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"human\"", ",", "\n", "routing_controller", "=", "(", "GridRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "min_gap", "=", "2.5", ",", "\n", "decel", "=", "7.5", ",", "# avoid collisions at emergency stops", "\n", ")", ",", "\n", "num_vehicles", "=", "tot_cars", ")", "\n", "\n", "env_params", "=", "EnvParams", "(", "additional_params", "=", "ADDITIONAL_ENV_PARAMS", ")", "\n", "\n", "tl_logic", "=", "TrafficLightParams", "(", "baseline", "=", "False", ")", "\n", "phases", "=", "[", "{", "\n", "\"duration\"", ":", "\"31\"", ",", "\n", "\"minDur\"", ":", "\"8\"", ",", "\n", "\"maxDur\"", ":", "\"45\"", ",", "\n", "\"state\"", ":", "\"GrGrGrGrGrGr\"", "\n", "}", ",", "{", "\n", "\"duration\"", ":", "\"6\"", ",", "\n", "\"minDur\"", ":", "\"3\"", ",", "\n", "\"maxDur\"", ":", "\"6\"", ",", "\n", "\"state\"", ":", "\"yryryryryryr\"", "\n", "}", ",", "{", "\n", "\"duration\"", ":", "\"31\"", ",", "\n", "\"minDur\"", ":", "\"8\"", ",", "\n", "\"maxDur\"", ":", "\"45\"", ",", "\n", "\"state\"", ":", "\"rGrGrGrGrGrG\"", "\n", "}", ",", "{", "\n", "\"duration\"", ":", "\"6\"", ",", "\n", "\"minDur\"", ":", "\"3\"", ",", "\n", "\"maxDur\"", ":", "\"6\"", ",", "\n", "\"state\"", ":", "\"ryryryryryry\"", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.action_space": [[172, 183], ["gym.spaces.discrete.Discrete", "gym.spaces.box.Box"], "methods", ["None"], ["}", "]", "\n", "tl_logic", ".", "add", "(", "\"center0\"", ",", "phases", "=", "phases", ",", "programID", "=", "1", ")", "\n", "tl_logic", ".", "add", "(", "\"center1\"", ",", "phases", "=", "phases", ",", "programID", "=", "1", ")", "\n", "tl_logic", ".", "add", "(", "\"center2\"", ",", "phases", "=", "phases", ",", "programID", "=", "1", ",", "tls_type", "=", "\"actuated\"", ")", "\n", "\n", "additional_net_params", "=", "{", "\n", "\"grid_array\"", ":", "grid_array", ",", "\n", "\"speed_limit\"", ":", "35", ",", "\n", "\"horizontal_lanes\"", ":", "1", ",", "\n", "\"vertical_lanes\"", ":", "1", "\n", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.observation_space": [[184, 208], ["gym.spaces.box.Box", "gym.spaces.box.Box", "gym.spaces.box.Box", "gym.spaces.box.Box", "gym.spaces.Tuple"], "methods", ["None"], ["if", "USE_INFLOWS", ":", "\n", "    ", "initial_config", ",", "net_params", "=", "get_flow_params", "(", "\n", "col_num", "=", "n_columns", ",", "\n", "row_num", "=", "n_rows", ",", "\n", "additional_net_params", "=", "additional_net_params", ")", "\n", "", "else", ":", "\n", "    ", "initial_config", ",", "net_params", "=", "get_non_flow_params", "(", "\n", "enter_speed", "=", "v_enter", ",", "\n", "add_net_params", "=", "additional_net_params", ")", "\n", "\n", "\n", "", "flow_params", "=", "dict", "(", "\n", "# name of the experiment", "\n", "exp_tag", "=", "'grid-intersection'", ",", "\n", "\n", "# name of the flow environment the experiment is running on", "\n", "env_name", "=", "AccelEnv", ",", "\n", "\n", "# name of the network class the experiment is running on", "\n", "network", "=", "TrafficLightGridNetwork", ",", "\n", "\n", "# simulator that is used by the experiment", "\n", "simulator", "=", "'traci'", ",", "\n", "\n", "# sumo-related parameters (see flow.core.params.SumoParams)", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.get_state": [[209, 239], ["max", "numpy.array", "traffic_light_grid.TrafficLightGridEnv.last_change.flatten().tolist", "traffic_light_grid.TrafficLightGridEnv.direction.flatten().tolist", "traffic_light_grid.TrafficLightGridEnv.currently_yellow.flatten().tolist", "traffic_light_grid.TrafficLightGridEnv.k.vehicle.get_speed", "traffic_light_grid.TrafficLightGridEnv.k.network.max_speed", "traffic_light_grid.TrafficLightGridEnv.k.vehicle.get_ids", "traffic_light_grid.TrafficLightGridEnv.get_distance_to_intersection", "traffic_light_grid.TrafficLightGridEnv.k.vehicle.get_ids", "traffic_light_grid.TrafficLightGridEnv._convert_edge", "traffic_light_grid.TrafficLightGridEnv.k.vehicle.get_ids", "traffic_light_grid.TrafficLightGridEnv.k.vehicle.get_edge", "traffic_light_grid.TrafficLightGridEnv.last_change.flatten", "traffic_light_grid.TrafficLightGridEnv.direction.flatten", "traffic_light_grid.TrafficLightGridEnv.currently_yellow.flatten"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.max_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.get_distance_to_intersection", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._convert_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge"], ["sim", "=", "SumoParams", "(", "\n", "sim_step", "=", "0.1", ",", "\n", "render", "=", "True", ",", "\n", ")", ",", "\n", "\n", "# environment related parameters (see flow.core.params.EnvParams)", "\n", "env", "=", "EnvParams", "(", "\n", "horizon", "=", "1500", ",", "\n", "additional_params", "=", "ADDITIONAL_ENV_PARAMS", ".", "copy", "(", ")", ",", "\n", ")", ",", "\n", "\n", "# network-related parameters (see flow.core.params.NetParams and the", "\n", "# network's documentation or ADDITIONAL_NET_PARAMS component)", "\n", "net", "=", "net_params", ",", "\n", "\n", "# vehicles to be placed in the network at the start of a rollout (see", "\n", "# flow.core.params.VehicleParams)", "\n", "veh", "=", "vehicles", ",", "\n", "\n", "# parameters specifying the positioning of vehicles upon initialization/", "\n", "# reset (see flow.core.params.InitialConfig)", "\n", "initial", "=", "initial_config", ",", "\n", "\n", "# traffic lights to be introduced to specific nodes (see", "\n", "# flow.core.params.TrafficLightParams)", "\n", "tls", "=", "tl_logic", ",", "\n", ")", "\n", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._apply_rl_actions": [[240, 281], ["enumerate", "int", "list", "len", "traffic_light_grid.TrafficLightGridEnv.k.traffic_light.set_state", "traffic_light_grid.TrafficLightGridEnv.k.traffic_light.set_state", "traffic_light_grid.TrafficLightGridEnv.k.traffic_light.set_state", "traffic_light_grid.TrafficLightGridEnv.k.traffic_light.set_state"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.set_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.set_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.set_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.set_state"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.compute_reward": [[282, 286], ["flow.core.rewards.boolean_action_penalty", "flow.core.rewards.min_delay_unscaled"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.boolean_action_penalty", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.min_delay_unscaled"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.get_distance_to_intersection": [[291, 308], ["isinstance", "traffic_light_grid.TrafficLightGridEnv.find_intersection_dist", "traffic_light_grid.TrafficLightGridEnv.get_distance_to_intersection"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.find_intersection_dist", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.get_distance_to_intersection"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.find_intersection_dist": [[309, 325], ["traffic_light_grid.TrafficLightGridEnv.k.vehicle.get_edge", "traffic_light_grid.TrafficLightGridEnv.k.network.edge_length", "traffic_light_grid.TrafficLightGridEnv.k.vehicle.get_position"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._convert_edge": [[326, 352], ["isinstance", "traffic_light_grid.TrafficLightGridEnv._split_edge", "traffic_light_grid.TrafficLightGridEnv._split_edge"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._split_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._split_edge"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._split_edge": [[353, 378], ["int", "re.compile", "re.compile.match().group", "[].split", "int", "re.compile.match", "[].split.split", "[].split.split"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._get_relative_node": [[379, 433], ["int", "agent_id.split"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.additional_command": [[434, 442], ["traffic_light_grid.TrafficLightGridEnv.k.vehicle.get_ids", "traffic_light_grid.TrafficLightGridEnv._reroute_if_final_edge"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._reroute_if_final_edge"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._reroute_if_final_edge": [[443, 484], ["traffic_light_grid.TrafficLightGridEnv.k.vehicle.get_edge", "re.compile", "re.compile.match().group", "[].split", "int", "traffic_light_grid.TrafficLightGridEnv.k.vehicle.get_type", "traffic_light_grid.TrafficLightGridEnv.k.vehicle.get_lane", "traffic_light_grid.TrafficLightGridEnv.k.vehicle.remove", "traffic_light_grid.TrafficLightGridEnv.k.vehicle.add", "re.compile.match", "[].split.split", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_type", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.get_closest_to_intersection": [[485, 580], ["isinstance", "sorted", "ValueError", "traffic_light_grid.TrafficLightGridEnv.k.vehicle.get_ids_by_edge", "traffic_light_grid.TrafficLightGridEnv.get_closest_to_intersection", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids_by_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.get_closest_to_intersection"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridPOEnv.__init__": [[617, 631], ["traffic_light_grid.TrafficLightGridEnv.__init__", "ADDITIONAL_PO_ENV_PARAMS.keys", "env_params.additional_params.get", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridPOEnv.observation_space": [[632, 648], ["gym.spaces.box.Box", "len", "traffic_light_grid.TrafficLightGridPOEnv.k.network.get_edge_list"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridPOEnv.get_state": [[649, 718], ["max", "max", "traffic_light_grid.TrafficLightGridPOEnv.k.network.get_edge_list", "numpy.array", "traffic_light_grid.TrafficLightGridPOEnv.k.vehicle.get_ids_by_edge", "numpy.concatenate", "traffic_light_grid.TrafficLightGridPOEnv.k.network.speed_limit", "traffic_light_grid.TrafficLightGridPOEnv.get_closest_to_intersection", "len", "traffic_light_grid.TrafficLightGridPOEnv.k.network.get_edge_list", "len", "traffic_light_grid.TrafficLightGridPOEnv.last_change.flatten().tolist", "traffic_light_grid.TrafficLightGridPOEnv.direction.flatten().tolist", "traffic_light_grid.TrafficLightGridPOEnv.currently_yellow.flatten().tolist", "traffic_light_grid.TrafficLightGridPOEnv.k.vehicle.get_speed", "traffic_light_grid.TrafficLightGridPOEnv._convert_edge", "len", "traffic_light_grid.TrafficLightGridPOEnv.k.network.edge_length", "numpy.mean", "traffic_light_grid.TrafficLightGridPOEnv.k.network.edge_length", "traffic_light_grid.TrafficLightGridPOEnv.k.vehicle.get_position", "traffic_light_grid.TrafficLightGridPOEnv.k.vehicle.get_edge", "len", "traffic_light_grid.TrafficLightGridPOEnv.last_change.flatten", "traffic_light_grid.TrafficLightGridPOEnv.direction.flatten", "traffic_light_grid.TrafficLightGridPOEnv.currently_yellow.flatten", "traffic_light_grid.TrafficLightGridPOEnv.k.vehicle.get_edge", "traffic_light_grid.TrafficLightGridPOEnv.k.vehicle.get_speed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids_by_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.speed_limit", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.get_closest_to_intersection", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._convert_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridPOEnv.compute_reward": [[720, 727], ["flow.core.rewards.min_delay_unscaled", "flow.core.rewards.penalize_standstill", "flow.core.rewards.min_delay_unscaled"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.min_delay_unscaled", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.penalize_standstill", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.min_delay_unscaled"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridPOEnv.additional_command": [[728, 732], ["traffic_light_grid.TrafficLightGridPOEnv.k.vehicle.set_observed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridBenchmarkEnv.compute_reward": [[737, 743], ["flow.core.rewards.desired_velocity", "flow.core.rewards.min_delay_unscaled"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.desired_velocity", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.min_delay_unscaled"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridTestEnv._apply_rl_actions": [[753, 756], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridTestEnv.compute_reward": [[757, 760], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.merge.MergePOEnv.__init__": [[73, 94], ["ADDITIONAL_ENV_PARAMS.keys", "collections.deque", "flow.envs.base.Env.__init__", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["# network-related parameters (see flow.core.params.NetParams and the", "\n", "# network's documentation or ADDITIONAL_NET_PARAMS component)", "\n", "net", "=", "NetParams", "(", "\n", "inflows", "=", "inflow", ",", "\n", "additional_params", "=", "{", "\n", "\"merge_length\"", ":", "100", ",", "\n", "\"pre_merge_length\"", ":", "500", ",", "\n", "\"post_merge_length\"", ":", "100", ",", "\n", "\"merge_lanes\"", ":", "1", ",", "\n", "\"highway_lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "}", ",", "\n", ")", ",", "\n", "\n", "# vehicles to be placed in the network at the start of a rollout (see", "\n", "# flow.core.params.VehicleParams)", "\n", "veh", "=", "vehicles", ",", "\n", "\n", "# parameters specifying the positioning of vehicles upon initialization/", "\n", "# reset (see flow.core.params.InitialConfig)", "\n", "initial", "=", "InitialConfig", "(", "\n", "spacing", "=", "\"uniform\"", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.merge.MergePOEnv.action_space": [[95, 103], ["gym.spaces.box.Box", "abs"], "methods", ["None"], ["perturbation", "=", "5.0", ",", "\n", ")", ",", "\n", ")", "\n", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.merge.MergePOEnv.observation_space": [[104, 108], ["gym.spaces.box.Box"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.merge.MergePOEnv._apply_rl_actions": [[109, 116], ["enumerate", "merge.MergePOEnv.k.vehicle.apply_acceleration", "merge.MergePOEnv.k.vehicle.get_rl_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_acceleration", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.merge.MergePOEnv.get_state": [[117, 159], ["merge.MergePOEnv.k.network.max_speed", "merge.MergePOEnv.k.network.length", "enumerate", "merge.MergePOEnv.k.vehicle.get_speed", "merge.MergePOEnv.k.vehicle.get_leader", "merge.MergePOEnv.k.vehicle.get_follower", "range", "merge.MergePOEnv.leader.append", "merge.MergePOEnv.k.vehicle.get_speed", "merge.MergePOEnv.follower.append", "merge.MergePOEnv.k.vehicle.get_speed", "merge.MergePOEnv.k.vehicle.get_headway", "merge.MergePOEnv.k.vehicle.get_length", "merge.MergePOEnv.k.vehicle.get_x_by_id", "merge.MergePOEnv.k.vehicle.get_x_by_id"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.max_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_follower", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.merge.MergePOEnv.compute_reward": [[160, 188], ["numpy.mean", "flow.core.rewards.desired_velocity", "max", "merge.MergePOEnv.k.vehicle.get_speed", "merge.MergePOEnv.k.vehicle.get_leader", "merge.MergePOEnv.k.vehicle.get_ids", "max", "min", "merge.MergePOEnv.k.vehicle.get_speed", "merge.MergePOEnv.k.vehicle.get_headway", "merge.MergePOEnv.k.vehicle.get_speed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.desired_velocity", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.merge.MergePOEnv.additional_command": [[189, 222], ["merge.MergePOEnv.k.vehicle.get_rl_ids", "list", "merge.MergePOEnv.rl_queue.popleft", "merge.MergePOEnv.rl_veh.append", "merge.MergePOEnv.k.vehicle.set_observed", "merge.MergePOEnv.rl_queue.append", "merge.MergePOEnv.k.vehicle.get_rl_ids", "merge.MergePOEnv.rl_queue.remove", "merge.MergePOEnv.k.vehicle.get_rl_ids", "merge.MergePOEnv.rl_veh.remove", "len", "len", "list"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.popleft", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.merge.MergePOEnv.reset": [[223, 232], ["super().reset"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.serial_vector_env.SerialVectorEnv.__init__": [[16, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "envs", ")", ":", "\n", "        ", "self", ".", "envs", "=", "envs", "\n", "self", ".", "last_obs", "=", "[", "None", "]", "*", "self", ".", "num_envs", "\n", "self", ".", "action_space", "=", "envs", "[", "0", "]", ".", "action_space", "\n", "self", ".", "observation_space", "=", "envs", "[", "0", "]", ".", "observation_space", "\n", "self", ".", "spec", "=", "envs", "[", "0", "]", ".", "observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.serial_vector_env.SerialVectorEnv.step": [[23, 27], ["zip", "env.step", "zip"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step"], ["", "def", "step", "(", "self", ",", "actions", ")", ":", "\n", "        ", "results", "=", "[", "env", ".", "step", "(", "a", ")", "for", "env", ",", "a", "in", "zip", "(", "self", ".", "envs", ",", "actions", ")", "]", "\n", "self", ".", "last_obs", ",", "rews", ",", "dones", ",", "infos", "=", "zip", "(", "*", "results", ")", "\n", "return", "self", ".", "last_obs", ",", "rews", ",", "dones", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.serial_vector_env.SerialVectorEnv.reset": [[28, 37], ["numpy.zeros", "env.reset", "zip"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], ["", "def", "reset", "(", "self", ",", "mask", "=", "None", ")", ":", "\n", "        ", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ")", "\n", "", "obs", "=", "[", "\n", "env", ".", "reset", "(", ")", "if", "not", "m", "else", "o", "\n", "for", "m", ",", "env", ",", "o", "in", "zip", "(", "mask", ",", "self", ".", "envs", ",", "self", ".", "last_obs", ")", "\n", "]", "\n", "self", ".", "last_obs", "=", "obs", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.serial_vector_env.SerialVectorEnv.seed": [[38, 41], ["zip", "env.seed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.seed"], ["", "def", "seed", "(", "self", ",", "seeds", ")", ":", "\n", "        ", "for", "env", ",", "seed", "in", "zip", "(", "self", ".", "envs", ",", "seeds", ")", ":", "\n", "            ", "env", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.serial_vector_env.SerialVectorEnv.close": [[42, 45], ["env.close"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "env", "in", "self", ".", "envs", ":", "\n", "            ", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.serial_vector_env.SerialVectorEnv.num_envs": [[46, 49], ["len"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "num_envs", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "envs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.abc.ABC.__init__": [[76, 106], ["gym.spaces.Box", "gym.spaces.Discrete", "gym.spaces.Box"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "size", "=", "2", ",", "\n", "discrete", "=", "True", ",", "\n", "partially_observable", "=", "False", ",", "\n", "episodic", "=", "True", ",", "\n", "deterministic", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "terminal_state", "=", "size", "\n", "self", ".", "episodic", "=", "episodic", "\n", "self", ".", "partially_observable", "=", "partially_observable", "\n", "self", ".", "deterministic", "=", "deterministic", "\n", "self", ".", "n_max_offset", "=", "1", "\n", "# (s_0, ..., s_N) + terminal state + offset", "\n", "self", ".", "n_dim_obs", "=", "self", ".", "size", "+", "1", "+", "self", ".", "n_max_offset", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "-", "np", ".", "inf", ",", "\n", "high", "=", "np", ".", "inf", ",", "\n", "shape", "=", "(", "self", ".", "n_dim_obs", ",", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "if", "discrete", ":", "\n", "            ", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "self", ".", "size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "-", "1.0", ",", "\n", "high", "=", "1.0", ",", "\n", "shape", "=", "(", "self", ".", "size", ",", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.abc.ABC.observe": [[108, 112], ["numpy.zeros"], "methods", ["None"], ["", "", "def", "observe", "(", "self", ")", ":", "\n", "        ", "state_vec", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_dim_obs", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "state_vec", "[", "self", ".", "_state", "+", "self", ".", "_offset", "]", "=", "1.0", "\n", "return", "state_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.abc.ABC.reset": [[113, 127], ["abc.ABC.observe", "numpy.random.randint", "getattr"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.observe"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_state", "=", "0", "\n", "if", "self", ".", "partially_observable", ":", "\n", "# For partially observable settings, observations are shifted by", "\n", "# episode-dependent some offsets.", "\n", "            ", "if", "self", ".", "deterministic", ":", "\n", "                ", "self", ".", "_offset", "=", "(", "getattr", "(", "self", ",", "\"_offset\"", ",", "0", ")", "+", "1", ")", "%", "(", "\n", "self", ".", "n_max_offset", "+", "1", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_offset", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "n_max_offset", "+", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_offset", "=", "0", "\n", "", "return", "self", ".", "observe", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.abc.ABC.step": [[128, 160], ["isinstance", "isinstance", "numpy.clip", "abc.ABC.observe", "numpy.argmax", "numpy.random.choice", "numpy.exp", "numpy.exp().sum", "range", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.observe", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "action_space", ",", "spaces", ".", "Box", ")", ":", "\n", "            ", "assert", "isinstance", "(", "action", ",", "np", ".", "ndarray", ")", "\n", "action", "=", "np", ".", "clip", "(", "action", ",", "self", ".", "action_space", ".", "low", ",", "self", ".", "action_space", ".", "high", ")", "\n", "if", "self", ".", "deterministic", ":", "\n", "                ", "action", "=", "np", ".", "argmax", "(", "action", ")", "\n", "", "else", ":", "\n", "                ", "prob", "=", "np", ".", "exp", "(", "action", ")", "/", "np", ".", "exp", "(", "action", ")", ".", "sum", "(", ")", "\n", "action", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "self", ".", "size", ")", ",", "p", "=", "prob", ")", "\n", "", "", "reward", "=", "0", "\n", "done", "=", "False", "\n", "if", "action", "==", "self", ".", "_state", ":", "\n", "# Correct", "\n", "            ", "if", "self", ".", "_state", "==", "self", ".", "size", "-", "1", ":", "\n", "# Goal", "\n", "                ", "reward", "=", "1.0", "\n", "if", "self", ".", "episodic", ":", "\n", "# Terminal", "\n", "                    ", "done", "=", "True", "\n", "self", ".", "_state", "=", "self", ".", "terminal_state", "\n", "", "else", ":", "\n", "# Restart", "\n", "                    ", "self", ".", "_state", "=", "0", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "_state", "+=", "1", "\n", "", "", "else", ":", "\n", "# Incorrect", "\n", "            ", "if", "self", ".", "episodic", ":", "\n", "# Terminal", "\n", "                ", "done", "=", "True", "\n", "self", ".", "_state", "=", "self", ".", "terminal_state", "\n", "", "", "return", "self", ".", "observe", "(", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.abc.ABC.close": [[161, 163], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.multiprocess_vector_env.MultiprocessVectorEnv.__init__": [[47, 69], ["len", "zip", "multiprocess_vector_env.MultiprocessVectorEnv.remotes[].send", "multiprocess_vector_env.MultiprocessVectorEnv.remotes[].recv", "warnings.warn", "multiprocessing.Process", "p.start", "zip", "multiprocessing.Pipe", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stress_tests.stress_test_start.start"], ["def", "__init__", "(", "self", ",", "env_fns", ")", ":", "\n", "        ", "if", "np", ".", "__version__", "==", "\"1.16.0\"", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"\"\"\nNumPy 1.16.0 can cause severe memory leak in pfrl.envs.MultiprocessVectorEnv.\nWe recommend using other versions of NumPy.\nSee https://github.com/numpy/numpy/issues/12793 for details.\n\"\"\"", "\n", ")", "# NOQA", "\n", "\n", "", "nenvs", "=", "len", "(", "env_fns", ")", "\n", "self", ".", "remotes", ",", "self", ".", "work_remotes", "=", "zip", "(", "*", "[", "Pipe", "(", ")", "for", "_", "in", "range", "(", "nenvs", ")", "]", ")", "\n", "self", ".", "ps", "=", "[", "\n", "Process", "(", "target", "=", "worker", ",", "args", "=", "(", "work_remote", ",", "env_fn", ")", ")", "\n", "for", "(", "work_remote", ",", "env_fn", ")", "in", "zip", "(", "self", ".", "work_remotes", ",", "env_fns", ")", "\n", "]", "\n", "for", "p", "in", "self", ".", "ps", ":", "\n", "            ", "p", ".", "start", "(", ")", "\n", "", "self", ".", "last_obs", "=", "[", "None", "]", "*", "self", ".", "num_envs", "\n", "self", ".", "remotes", "[", "0", "]", ".", "send", "(", "(", "\"get_spaces\"", ",", "None", ")", ")", "\n", "self", ".", "action_space", ",", "self", ".", "observation_space", "=", "self", ".", "remotes", "[", "0", "]", ".", "recv", "(", ")", "\n", "self", ".", "closed", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.multiprocess_vector_env.MultiprocessVectorEnv.__del__": [[70, 73], ["multiprocess_vector_env.MultiprocessVectorEnv.close"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "closed", ":", "\n", "            ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.multiprocess_vector_env.MultiprocessVectorEnv.spec": [[74, 80], ["multiprocess_vector_env.MultiprocessVectorEnv._assert_not_closed", "multiprocess_vector_env.MultiprocessVectorEnv.remotes[].send", "multiprocess_vector_env.MultiprocessVectorEnv.remotes[].recv"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.multiprocess_vector_env.MultiprocessVectorEnv._assert_not_closed"], ["", "", "@", "lazy_property", "\n", "def", "spec", "(", "self", ")", ":", "\n", "        ", "self", ".", "_assert_not_closed", "(", ")", "\n", "self", ".", "remotes", "[", "0", "]", ".", "send", "(", "(", "\"spec\"", ",", "None", ")", ")", "\n", "spec", "=", "self", ".", "remotes", "[", "0", "]", ".", "recv", "(", ")", "\n", "return", "spec", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.multiprocess_vector_env.MultiprocessVectorEnv.step": [[81, 88], ["multiprocess_vector_env.MultiprocessVectorEnv._assert_not_closed", "zip", "zip", "remote.send", "remote.recv"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.multiprocess_vector_env.MultiprocessVectorEnv._assert_not_closed"], ["", "def", "step", "(", "self", ",", "actions", ")", ":", "\n", "        ", "self", ".", "_assert_not_closed", "(", ")", "\n", "for", "remote", ",", "action", "in", "zip", "(", "self", ".", "remotes", ",", "actions", ")", ":", "\n", "            ", "remote", ".", "send", "(", "(", "\"step\"", ",", "action", ")", ")", "\n", "", "results", "=", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", "\n", "self", ".", "last_obs", ",", "rews", ",", "dones", ",", "infos", "=", "zip", "(", "*", "results", ")", "\n", "return", "self", ".", "last_obs", ",", "rews", ",", "dones", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.multiprocess_vector_env.MultiprocessVectorEnv.reset": [[89, 103], ["multiprocess_vector_env.MultiprocessVectorEnv._assert_not_closed", "zip", "numpy.zeros", "remote.send", "remote.recv", "zip"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.multiprocess_vector_env.MultiprocessVectorEnv._assert_not_closed"], ["", "def", "reset", "(", "self", ",", "mask", "=", "None", ")", ":", "\n", "        ", "self", ".", "_assert_not_closed", "(", ")", "\n", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ")", "\n", "", "for", "m", ",", "remote", "in", "zip", "(", "mask", ",", "self", ".", "remotes", ")", ":", "\n", "            ", "if", "not", "m", ":", "\n", "                ", "remote", ".", "send", "(", "(", "\"reset\"", ",", "None", ")", ")", "\n", "\n", "", "", "obs", "=", "[", "\n", "remote", ".", "recv", "(", ")", "if", "not", "m", "else", "o", "\n", "for", "m", ",", "remote", ",", "o", "in", "zip", "(", "mask", ",", "self", ".", "remotes", ",", "self", ".", "last_obs", ")", "\n", "]", "\n", "self", ".", "last_obs", "=", "obs", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.multiprocess_vector_env.MultiprocessVectorEnv.close": [[104, 111], ["multiprocess_vector_env.MultiprocessVectorEnv._assert_not_closed", "remote.send", "p.join"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.multiprocess_vector_env.MultiprocessVectorEnv._assert_not_closed"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "_assert_not_closed", "(", ")", "\n", "self", ".", "closed", "=", "True", "\n", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "\"close\"", ",", "None", ")", ")", "\n", "", "for", "p", "in", "self", ".", "ps", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.multiprocess_vector_env.MultiprocessVectorEnv.seed": [[112, 135], ["multiprocess_vector_env.MultiprocessVectorEnv._assert_not_closed", "zip", "isinstance", "remote.send", "remote.recv", "isinstance", "TypeError", "len", "ValueError", "type"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.multiprocess_vector_env.MultiprocessVectorEnv._assert_not_closed"], ["", "", "def", "seed", "(", "self", ",", "seeds", "=", "None", ")", ":", "\n", "        ", "self", ".", "_assert_not_closed", "(", ")", "\n", "if", "seeds", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "seeds", ",", "int", ")", ":", "\n", "                ", "seeds", "=", "[", "seeds", "]", "*", "self", ".", "num_envs", "\n", "", "elif", "isinstance", "(", "seeds", ",", "list", ")", ":", "\n", "                ", "if", "len", "(", "seeds", ")", "!=", "self", ".", "num_envs", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"length of seeds must be same as num_envs {}\"", ".", "format", "(", "\n", "self", ".", "num_envs", "\n", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Type of Seeds {} is not supported.\"", ".", "format", "(", "type", "(", "seeds", ")", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "seeds", "=", "[", "None", "]", "*", "self", ".", "num_envs", "\n", "\n", "", "for", "remote", ",", "seed", "in", "zip", "(", "self", ".", "remotes", ",", "seeds", ")", ":", "\n", "            ", "remote", ".", "send", "(", "(", "\"seed\"", ",", "seed", ")", ")", "\n", "", "results", "=", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.multiprocess_vector_env.MultiprocessVectorEnv.num_envs": [[136, 139], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_envs", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "remotes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.multiprocess_vector_env.MultiprocessVectorEnv._assert_not_closed": [[140, 142], ["None"], "methods", ["None"], ["", "def", "_assert_not_closed", "(", "self", ")", ":", "\n", "        ", "assert", "not", "self", ".", "closed", ",", "\"This env is already closed\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.multiprocess_vector_env.worker": [[11, 37], ["signal.signal", "env_fn", "env_fn.close", "remote.recv", "env_fn.step", "remote.send", "env_fn.reset", "remote.send", "remote.close", "remote.send", "remote.send", "remote.send", "env_fn.seed"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.seed"], ["def", "worker", "(", "remote", ",", "env_fn", ")", ":", "\n", "# Ignore CTRL+C in the worker process", "\n", "    ", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "signal", ".", "SIG_IGN", ")", "\n", "env", "=", "env_fn", "(", ")", "\n", "try", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "cmd", ",", "data", "=", "remote", ".", "recv", "(", ")", "\n", "if", "cmd", "==", "\"step\"", ":", "\n", "                ", "ob", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "data", ")", "\n", "remote", ".", "send", "(", "(", "ob", ",", "reward", ",", "done", ",", "info", ")", ")", "\n", "", "elif", "cmd", "==", "\"reset\"", ":", "\n", "                ", "ob", "=", "env", ".", "reset", "(", ")", "\n", "remote", ".", "send", "(", "ob", ")", "\n", "", "elif", "cmd", "==", "\"close\"", ":", "\n", "                ", "remote", ".", "close", "(", ")", "\n", "break", "\n", "", "elif", "cmd", "==", "\"get_spaces\"", ":", "\n", "                ", "remote", ".", "send", "(", "(", "env", ".", "action_space", ",", "env", ".", "observation_space", ")", ")", "\n", "", "elif", "cmd", "==", "\"spec\"", ":", "\n", "                ", "remote", ".", "send", "(", "env", ".", "spec", ")", "\n", "", "elif", "cmd", "==", "\"seed\"", ":", "\n", "                ", "remote", ".", "send", "(", "env", ".", "seed", "(", "data", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "", "finally", ":", "\n", "        ", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.AdversarialAccelEnv._apply_rl_actions": [[49, 60], ["accel.AdversarialAccelEnv.k.vehicle.apply_acceleration", "accel.AdversarialAccelEnv.k.vehicle.get_rl_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_acceleration", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids"], ["def", "_apply_rl_actions", "(", "self", ",", "rl_actions", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "sorted_rl_ids", "=", "[", "\n", "veh_id", "for", "veh_id", "in", "self", ".", "sorted_ids", "\n", "if", "veh_id", "in", "self", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", "\n", "]", "\n", "av_action", "=", "rl_actions", "[", "'av'", "]", "\n", "adv_action", "=", "rl_actions", "[", "'adversary'", "]", "\n", "perturb_weight", "=", "self", ".", "env_params", ".", "additional_params", "[", "'perturb_weight'", "]", "\n", "rl_action", "=", "av_action", "+", "perturb_weight", "*", "adv_action", "\n", "self", ".", "k", ".", "vehicle", ".", "apply_acceleration", "(", "sorted_rl_ids", ",", "rl_action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.AdversarialAccelEnv.compute_reward": [[61, 74], ["numpy.mean", "flow.core.rewards.desired_velocity", "accel.AdversarialAccelEnv.k.vehicle.get_speed", "accel.AdversarialAccelEnv.k.vehicle.get_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.desired_velocity", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids"], ["", "def", "compute_reward", "(", "self", ",", "rl_actions", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Compute opposing rewards for agents.\n\n        The agent receives the class definition reward,\n        the adversary receives the negative of the agent reward\n        \"\"\"", "\n", "if", "self", ".", "env_params", ".", "evaluate", ":", "\n", "            ", "reward", "=", "np", ".", "mean", "(", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "\n", "self", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ")", ")", "\n", "return", "{", "'av'", ":", "reward", ",", "'adversary'", ":", "-", "reward", "}", "\n", "", "else", ":", "\n", "            ", "reward", "=", "rewards", ".", "desired_velocity", "(", "self", ",", "fail", "=", "kwargs", "[", "'fail'", "]", ")", "\n", "return", "{", "'av'", ":", "reward", ",", "'adversary'", ":", "-", "reward", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.AdversarialAccelEnv.get_state": [[75, 86], ["numpy.array", "numpy.ndarray.flatten", "accel.AdversarialAccelEnv.k.vehicle.get_speed", "accel.AdversarialAccelEnv.k.network.max_speed", "accel.AdversarialAccelEnv.k.vehicle.get_x_by_id", "accel.AdversarialAccelEnv.k.network.length"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.max_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.length"], ["", "", "def", "get_state", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"See class definition for the state.\n\n        The adversary state and the agent state are identical.\n        \"\"\"", "\n", "state", "=", "np", ".", "array", "(", "[", "[", "\n", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "veh_id", ")", "/", "self", ".", "k", ".", "network", ".", "max_speed", "(", ")", ",", "\n", "self", ".", "k", ".", "vehicle", ".", "get_x_by_id", "(", "veh_id", ")", "/", "self", ".", "k", ".", "network", ".", "length", "(", ")", "\n", "]", "for", "veh_id", "in", "self", ".", "sorted_ids", "]", ")", "\n", "state", "=", "np", ".", "ndarray", ".", "flatten", "(", "state", ")", "\n", "return", "{", "'av'", ":", "state", ",", "'adversary'", ":", "state", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.MultiAgentAccelPOEnv.__init__": [[125, 135], ["ADDITIONAL_ENV_PARAMS.keys", "flow.envs.multiagent.base.MultiEnv.__init__", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "env_params", ",", "sim_params", ",", "network", ",", "simulator", "=", "'traci'", ")", ":", "\n", "        ", "for", "p", "in", "ADDITIONAL_ENV_PARAMS", ".", "keys", "(", ")", ":", "\n", "            ", "if", "p", "not", "in", "env_params", ".", "additional_params", ":", "\n", "                ", "raise", "KeyError", "(", "\n", "'Environment parameter \"{}\" not supplied'", ".", "format", "(", "p", ")", ")", "\n", "\n", "", "", "self", ".", "leader", "=", "[", "]", "\n", "self", ".", "follower", "=", "[", "]", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "env_params", ",", "sim_params", ",", "network", ",", "simulator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.MultiAgentAccelPOEnv.action_space": [[136, 144], ["gym.spaces.Box", "abs"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "return", "Box", "(", "\n", "low", "=", "-", "abs", "(", "self", ".", "env_params", ".", "additional_params", "[", "\"max_decel\"", "]", ")", ",", "\n", "high", "=", "self", ".", "env_params", ".", "additional_params", "[", "\"max_accel\"", "]", ",", "\n", "shape", "=", "(", "1", ",", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.MultiAgentAccelPOEnv.observation_space": [[145, 149], ["gym.spaces.Box"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "return", "Box", "(", "low", "=", "-", "5", ",", "high", "=", "5", ",", "shape", "=", "(", "6", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.MultiAgentAccelPOEnv._apply_rl_actions": [[150, 154], ["accel.MultiAgentAccelPOEnv.k.vehicle.get_rl_ids", "accel.MultiAgentAccelPOEnv.k.vehicle.apply_acceleration"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_acceleration"], ["", "def", "_apply_rl_actions", "(", "self", ",", "rl_actions", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "for", "veh_id", "in", "self", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", ":", "\n", "            ", "self", ".", "k", ".", "vehicle", ".", "apply_acceleration", "(", "veh_id", ",", "rl_actions", "[", "veh_id", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.MultiAgentAccelPOEnv.compute_reward": [[155, 162], ["flow.core.rewards.desired_velocity", "accel.MultiAgentAccelPOEnv.k.vehicle.get_rl_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.desired_velocity", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids"], ["", "", "def", "compute_reward", "(", "self", ",", "rl_actions", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "# Compute the common reward.", "\n", "reward", "=", "rewards", ".", "desired_velocity", "(", "self", ",", "fail", "=", "kwargs", "[", "'fail'", "]", ")", "\n", "\n", "# Reward is shared by all agents.", "\n", "return", "{", "key", ":", "reward", "for", "key", "in", "self", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.MultiAgentAccelPOEnv.get_state": [[163, 210], ["accel.MultiAgentAccelPOEnv.k.network.max_speed", "accel.MultiAgentAccelPOEnv.k.network.length", "accel.MultiAgentAccelPOEnv.k.vehicle.get_rl_ids", "accel.MultiAgentAccelPOEnv.k.vehicle.get_x_by_id", "accel.MultiAgentAccelPOEnv.k.vehicle.get_speed", "accel.MultiAgentAccelPOEnv.k.vehicle.get_leader", "accel.MultiAgentAccelPOEnv.k.vehicle.get_follower", "numpy.array", "accel.MultiAgentAccelPOEnv.leader.append", "accel.MultiAgentAccelPOEnv.k.vehicle.get_speed", "accel.MultiAgentAccelPOEnv.follower.append", "accel.MultiAgentAccelPOEnv.k.vehicle.get_speed", "accel.MultiAgentAccelPOEnv.k.vehicle.get_headway", "accel.MultiAgentAccelPOEnv.k.vehicle.get_length", "accel.MultiAgentAccelPOEnv.k.vehicle.get_x_by_id", "accel.MultiAgentAccelPOEnv.k.vehicle.get_x_by_id"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.max_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_follower", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id"], ["", "def", "get_state", "(", "self", ",", "**", "kwargs", ")", ":", "# FIXME", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "self", ".", "leader", "=", "[", "]", "\n", "self", ".", "follower", "=", "[", "]", "\n", "obs", "=", "{", "}", "\n", "\n", "# normalizing constants", "\n", "max_speed", "=", "self", ".", "k", ".", "network", ".", "max_speed", "(", ")", "\n", "max_length", "=", "self", ".", "k", ".", "network", ".", "length", "(", ")", "\n", "\n", "for", "rl_id", "in", "self", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", ":", "\n", "            ", "this_pos", "=", "self", ".", "k", ".", "vehicle", ".", "get_x_by_id", "(", "rl_id", ")", "\n", "this_speed", "=", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "rl_id", ")", "\n", "lead_id", "=", "self", ".", "k", ".", "vehicle", ".", "get_leader", "(", "rl_id", ")", "\n", "follower", "=", "self", ".", "k", ".", "vehicle", ".", "get_follower", "(", "rl_id", ")", "\n", "\n", "if", "lead_id", "in", "[", "\"\"", ",", "None", "]", ":", "\n", "# in case leader is not visible", "\n", "                ", "lead_speed", "=", "max_speed", "\n", "lead_head", "=", "max_length", "\n", "", "else", ":", "\n", "                ", "self", ".", "leader", ".", "append", "(", "lead_id", ")", "\n", "lead_speed", "=", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "lead_id", ")", "\n", "lead_head", "=", "self", ".", "k", ".", "vehicle", ".", "get_x_by_id", "(", "lead_id", ")", "-", "self", ".", "k", ".", "vehicle", ".", "get_x_by_id", "(", "rl_id", ")", "-", "self", ".", "k", ".", "vehicle", ".", "get_length", "(", "rl_id", ")", "\n", "\n", "", "if", "follower", "in", "[", "\"\"", ",", "None", "]", ":", "\n", "# in case follower is not visible", "\n", "                ", "follow_speed", "=", "0", "\n", "follow_head", "=", "max_length", "\n", "", "else", ":", "\n", "                ", "self", ".", "follower", ".", "append", "(", "follower", ")", "\n", "follow_speed", "=", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "follower", ")", "\n", "follow_head", "=", "self", ".", "k", ".", "vehicle", ".", "get_headway", "(", "follower", ")", "\n", "\n", "# Add the next observation.", "\n", "", "obs", "[", "rl_id", "]", "=", "np", ".", "array", "(", "[", "\n", "this_pos", "/", "max_length", ",", "\n", "this_speed", "/", "max_speed", ",", "\n", "(", "lead_speed", "-", "this_speed", ")", "/", "max_speed", ",", "\n", "lead_head", "/", "max_length", ",", "\n", "(", "this_speed", "-", "follow_speed", ")", "/", "max_speed", ",", "\n", "follow_head", "/", "max_length", "\n", "]", ")", "\n", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.MultiAgentAccelPOEnv.additional_command": [[211, 220], ["accel.MultiAgentAccelPOEnv.k.vehicle.set_observed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed"], ["", "def", "additional_command", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\n\n        This method defines which vehicles are observed for visualization\n        purposes.\n        \"\"\"", "\n", "# specify observed vehicles", "\n", "for", "veh_id", "in", "self", ".", "leader", "+", "self", ".", "follower", ":", "\n", "            ", "self", ".", "k", ".", "vehicle", ".", "set_observed", "(", "veh_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.MultiAgentAccelPOEnv.reset": [[221, 230], ["super().reset"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\n\n        In addition, a few variables that are specific to this class are\n        emptied before they are used by the new rollout.\n        \"\"\"", "\n", "self", ".", "leader", "=", "[", "]", "\n", "self", ".", "follower", "=", "[", "]", "\n", "return", "super", "(", ")", ".", "reset", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.MultiWaveAttenuationPOEnv.observation_space": [[57, 61], ["gym.spaces.box.Box"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.MultiWaveAttenuationPOEnv.action_space": [[62, 72], ["gym.spaces.box.Box", "numpy.abs", "int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.MultiWaveAttenuationPOEnv.get_state": [[73, 93], ["wave_attenuation.MultiWaveAttenuationPOEnv.k.vehicle.get_rl_ids", "numpy.array", "obs.update", "wave_attenuation.MultiWaveAttenuationPOEnv.k.vehicle.get_leader", "wave_attenuation.MultiWaveAttenuationPOEnv.k.vehicle.get_speed", "wave_attenuation.MultiWaveAttenuationPOEnv.k.vehicle.get_headway", "wave_attenuation.MultiWaveAttenuationPOEnv.k.vehicle.get_speed", "wave_attenuation.MultiWaveAttenuationPOEnv.k.vehicle.get_speed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.MultiWaveAttenuationPOEnv._apply_rl_actions": [[94, 100], ["list", "list", "wave_attenuation.MultiWaveAttenuationPOEnv.k.vehicle.apply_acceleration", "rl_actions.keys", "rl_actions.values"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_acceleration"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.MultiWaveAttenuationPOEnv.compute_reward": [[101, 128], ["rl_actions.keys", "wave_attenuation.MultiWaveAttenuationPOEnv.gen_edges", "wave_attenuation.MultiWaveAttenuationPOEnv.k.vehicle.get_ids_by_edge", "numpy.array", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm", "rl_id.split", "any", "max", "wave_attenuation.MultiWaveAttenuationPOEnv.k.vehicle.get_speed", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_light_grid.Test1x1Environment.gen_edges", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids_by_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.MultiWaveAttenuationPOEnv.additional_command": [[129, 135], ["wave_attenuation.MultiWaveAttenuationPOEnv.k.vehicle.get_rl_ids", "wave_attenuation.MultiWaveAttenuationPOEnv.k.vehicle.set_observed", "wave_attenuation.MultiWaveAttenuationPOEnv.k.vehicle.get_leader"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.MultiWaveAttenuationPOEnv.gen_edges": [[136, 141], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.MultiAgentWaveAttenuationPOEnv.__init__": [[174, 181], ["ADDITIONAL_ENV_PARAMS.keys", "flow.envs.multiagent.base.MultiEnv.__init__", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.MultiAgentWaveAttenuationPOEnv.observation_space": [[182, 186], ["gym.spaces.box.Box"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.MultiAgentWaveAttenuationPOEnv.action_space": [[187, 195], ["gym.spaces.box.Box", "numpy.abs"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.MultiAgentWaveAttenuationPOEnv.get_state": [[196, 216], ["wave_attenuation.MultiAgentWaveAttenuationPOEnv.k.vehicle.get_rl_ids", "numpy.array", "obs.update", "wave_attenuation.MultiAgentWaveAttenuationPOEnv.k.vehicle.get_leader", "wave_attenuation.MultiAgentWaveAttenuationPOEnv.k.vehicle.get_speed", "wave_attenuation.MultiAgentWaveAttenuationPOEnv.k.vehicle.get_headway", "wave_attenuation.MultiAgentWaveAttenuationPOEnv.k.vehicle.get_speed", "wave_attenuation.MultiAgentWaveAttenuationPOEnv.k.vehicle.get_speed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.MultiAgentWaveAttenuationPOEnv._apply_rl_actions": [[217, 223], ["list", "list", "wave_attenuation.MultiAgentWaveAttenuationPOEnv.k.vehicle.apply_acceleration", "rl_actions.keys", "rl_actions.values"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_acceleration"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.MultiAgentWaveAttenuationPOEnv.compute_reward": [[224, 251], ["numpy.array", "numpy.mean", "any", "numpy.abs", "wave_attenuation.MultiAgentWaveAttenuationPOEnv.k.vehicle.get_speed", "numpy.mean", "list", "wave_attenuation.MultiAgentWaveAttenuationPOEnv.k.vehicle.get_rl_ids", "wave_attenuation.MultiAgentWaveAttenuationPOEnv.k.vehicle.get_ids", "rl_actions.values"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.MultiAgentWaveAttenuationPOEnv.additional_command": [[252, 258], ["wave_attenuation.MultiAgentWaveAttenuationPOEnv.k.vehicle.get_rl_ids", "wave_attenuation.MultiAgentWaveAttenuationPOEnv.k.vehicle.set_observed", "wave_attenuation.MultiAgentWaveAttenuationPOEnv.k.vehicle.get_leader"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.MultiAgentWaveAttenuationPOEnv.reset": [[259, 313], ["flow.core.params.InitialConfig", "random.randint", "flow.core.params.NetParams", "wave_attenuation.MultiAgentWaveAttenuationPOEnv.network.__class__", "copy.deepcopy", "print", "print", "print", "print", "wave_attenuation.MultiAgentWaveAttenuationPOEnv.restart_simulation", "super().reset", "super().reset", "scipy.optimize.fsolve", "numpy.array", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.restart_simulation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.lane_change_accel.LaneChangeAccelEnv.__init__": [[72, 79], ["ADDITIONAL_ENV_PARAMS.keys", "flow.envs.ring.accel.AccelEnv.__init__", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "env_params", ",", "sim_params", ",", "network", ",", "simulator", "=", "'traci'", ")", ":", "\n", "        ", "for", "p", "in", "ADDITIONAL_ENV_PARAMS", ".", "keys", "(", ")", ":", "\n", "            ", "if", "p", "not", "in", "env_params", ".", "additional_params", ":", "\n", "                ", "raise", "KeyError", "(", "\n", "'Environment parameter \"{}\" not supplied'", ".", "format", "(", "p", ")", ")", "\n", "\n", "", "", "super", "(", ")", ".", "__init__", "(", "env_params", ",", "sim_params", ",", "network", ",", "simulator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.lane_change_accel.LaneChangeAccelEnv.action_space": [[80, 90], ["gym.spaces.box.Box", "numpy.array", "numpy.array", "abs"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "max_decel", "=", "self", ".", "env_params", ".", "additional_params", "[", "\"max_decel\"", "]", "\n", "max_accel", "=", "self", ".", "env_params", ".", "additional_params", "[", "\"max_accel\"", "]", "\n", "\n", "lb", "=", "[", "-", "abs", "(", "max_decel", ")", ",", "-", "1", "]", "*", "self", ".", "initial_vehicles", ".", "num_rl_vehicles", "\n", "ub", "=", "[", "max_accel", ",", "1", "]", "*", "self", ".", "initial_vehicles", ".", "num_rl_vehicles", "\n", "\n", "return", "Box", "(", "np", ".", "array", "(", "lb", ")", ",", "np", ".", "array", "(", "ub", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.lane_change_accel.LaneChangeAccelEnv.observation_space": [[91, 99], ["gym.spaces.box.Box"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "return", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "1", ",", "\n", "shape", "=", "(", "3", "*", "self", ".", "initial_vehicles", ".", "num_vehicles", ",", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.lane_change_accel.LaneChangeAccelEnv.compute_reward": [[100, 113], ["flow.core.rewards.desired_velocity", "lane_change_accel.LaneChangeAccelEnv.k.vehicle.get_rl_ids", "lane_change_accel.LaneChangeAccelEnv.k.vehicle.get_last_lc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.desired_velocity", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_last_lc"], ["", "def", "compute_reward", "(", "self", ",", "rl_actions", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "# compute the system-level performance of vehicles from a velocity", "\n", "# perspective", "\n", "reward", "=", "rewards", ".", "desired_velocity", "(", "self", ",", "fail", "=", "kwargs", "[", "\"fail\"", "]", ")", "\n", "\n", "# punish excessive lane changes by reducing the reward by a set value", "\n", "# every time an rl car changes lanes (10% of max reward)", "\n", "for", "veh_id", "in", "self", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", ":", "\n", "            ", "if", "self", ".", "k", ".", "vehicle", ".", "get_last_lc", "(", "veh_id", ")", "==", "self", ".", "time_counter", ":", "\n", "                ", "reward", "-=", "0.1", "\n", "\n", "", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.lane_change_accel.LaneChangeAccelEnv.get_state": [[114, 131], ["lane_change_accel.LaneChangeAccelEnv.k.network.max_speed", "lane_change_accel.LaneChangeAccelEnv.k.network.length", "max", "numpy.array", "lane_change_accel.LaneChangeAccelEnv.k.network.num_lanes", "lane_change_accel.LaneChangeAccelEnv.k.vehicle.get_speed", "lane_change_accel.LaneChangeAccelEnv.k.vehicle.get_x_by_id", "lane_change_accel.LaneChangeAccelEnv.k.vehicle.get_lane", "lane_change_accel.LaneChangeAccelEnv.k.network.get_edge_list"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.max_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "# normalizers", "\n", "max_speed", "=", "self", ".", "k", ".", "network", ".", "max_speed", "(", ")", "\n", "length", "=", "self", ".", "k", ".", "network", ".", "length", "(", ")", "\n", "max_lanes", "=", "max", "(", "\n", "self", ".", "k", ".", "network", ".", "num_lanes", "(", "edge", ")", "\n", "for", "edge", "in", "self", ".", "k", ".", "network", ".", "get_edge_list", "(", ")", ")", "\n", "\n", "speed", "=", "[", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "veh_id", ")", "/", "max_speed", "\n", "for", "veh_id", "in", "self", ".", "sorted_ids", "]", "\n", "pos", "=", "[", "self", ".", "k", ".", "vehicle", ".", "get_x_by_id", "(", "veh_id", ")", "/", "length", "\n", "for", "veh_id", "in", "self", ".", "sorted_ids", "]", "\n", "lane", "=", "[", "self", ".", "k", ".", "vehicle", ".", "get_lane", "(", "veh_id", ")", "/", "max_lanes", "\n", "for", "veh_id", "in", "self", ".", "sorted_ids", "]", "\n", "\n", "return", "np", ".", "array", "(", "speed", "+", "pos", "+", "lane", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.lane_change_accel.LaneChangeAccelEnv._apply_rl_actions": [[132, 155], ["numpy.array", "lane_change_accel.LaneChangeAccelEnv.k.vehicle.apply_acceleration", "lane_change_accel.LaneChangeAccelEnv.k.vehicle.apply_lane_change", "sum", "lane_change_accel.LaneChangeAccelEnv.k.vehicle.get_rl_ids", "lane_change_accel.LaneChangeAccelEnv.k.vehicle.get_last_lc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_acceleration", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_lane_change", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_last_lc"], ["", "def", "_apply_rl_actions", "(", "self", ",", "actions", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "acceleration", "=", "actions", "[", ":", ":", "2", "]", "\n", "direction", "=", "actions", "[", "1", ":", ":", "2", "]", "\n", "\n", "# re-arrange actions according to mapping in observation space", "\n", "sorted_rl_ids", "=", "[", "\n", "veh_id", "for", "veh_id", "in", "self", ".", "sorted_ids", "\n", "if", "veh_id", "in", "self", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", "\n", "]", "\n", "\n", "# represents vehicles that are allowed to change lanes", "\n", "non_lane_changing_veh", "=", "[", "self", ".", "time_counter", "<=", "\n", "self", ".", "env_params", ".", "additional_params", "[", "\"lane_change_duration\"", "]", "\n", "+", "self", ".", "k", ".", "vehicle", ".", "get_last_lc", "(", "veh_id", ")", "\n", "for", "veh_id", "in", "sorted_rl_ids", "]", "\n", "# vehicle that are not allowed to change have their directions set to 0", "\n", "direction", "[", "non_lane_changing_veh", "]", "=", "np", ".", "array", "(", "[", "0", "]", "*", "sum", "(", "non_lane_changing_veh", ")", ")", "\n", "\n", "self", ".", "k", ".", "vehicle", ".", "apply_acceleration", "(", "sorted_rl_ids", ",", "acc", "=", "acceleration", ")", "\n", "self", ".", "k", ".", "vehicle", ".", "apply_lane_change", "(", "sorted_rl_ids", ",", "direction", "=", "direction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.lane_change_accel.LaneChangeAccelEnv.additional_command": [[156, 162], ["lane_change_accel.LaneChangeAccelEnv.k.vehicle.get_human_ids", "lane_change_accel.LaneChangeAccelEnv.k.vehicle.set_observed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_human_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed"], ["", "def", "additional_command", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define which vehicles are observed for visualization purposes.\"\"\"", "\n", "# specify observed vehicles", "\n", "if", "self", ".", "k", ".", "vehicle", ".", "num_rl_vehicles", ">", "0", ":", "\n", "            ", "for", "veh_id", "in", "self", ".", "k", ".", "vehicle", ".", "get_human_ids", "(", ")", ":", "\n", "                ", "self", ".", "k", ".", "vehicle", ".", "set_observed", "(", "veh_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.lane_change_accel.LaneChangeAccelPOEnv.__init__": [[198, 204], ["lane_change_accel.LaneChangeAccelEnv.__init__", "max", "lane_change_accel.LaneChangeAccelPOEnv.k.network.num_lanes", "lane_change_accel.LaneChangeAccelPOEnv.k.network.get_edge_list"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list"], ["def", "__init__", "(", "self", ",", "env_params", ",", "sim_params", ",", "network", ",", "simulator", "=", "'traci'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env_params", ",", "sim_params", ",", "network", ",", "simulator", ")", "\n", "\n", "self", ".", "num_lanes", "=", "max", "(", "self", ".", "k", ".", "network", ".", "num_lanes", "(", "edge", ")", "\n", "for", "edge", "in", "self", ".", "k", ".", "network", ".", "get_edge_list", "(", ")", ")", "\n", "self", ".", "visible", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.lane_change_accel.LaneChangeAccelPOEnv.observation_space": [[205, 214], ["gym.spaces.box.Box"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "return", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "1", ",", "\n", "shape", "=", "(", "4", "*", "self", ".", "initial_vehicles", ".", "num_rl_vehicles", "*", "\n", "self", ".", "num_lanes", "+", "self", ".", "initial_vehicles", ".", "num_rl_vehicles", ",", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.lane_change_accel.LaneChangeAccelPOEnv.get_state": [[215, 264], ["enumerate", "lane_change_accel.LaneChangeAccelPOEnv.k.vehicle.get_rl_ids", "lane_change_accel.LaneChangeAccelPOEnv.k.network.length", "lane_change_accel.LaneChangeAccelPOEnv.k.network.max_speed", "lane_change_accel.LaneChangeAccelPOEnv.k.vehicle.get_lane_leaders", "lane_change_accel.LaneChangeAccelPOEnv.k.vehicle.get_lane_followers", "lane_change_accel.LaneChangeAccelPOEnv.k.vehicle.get_lane_headways", "lane_change_accel.LaneChangeAccelPOEnv.k.vehicle.get_lane_tailways", "enumerate", "enumerate", "numpy.concatenate", "obs.append", "numpy.array", "range", "lane_change_accel.LaneChangeAccelPOEnv.k.vehicle.get_speed", "len", "len", "lane_change_accel.LaneChangeAccelPOEnv.visible.extend", "lane_change_accel.LaneChangeAccelPOEnv.visible.extend", "lane_change_accel.LaneChangeAccelPOEnv.k.vehicle.get_speed", "lane_change_accel.LaneChangeAccelPOEnv.k.vehicle.get_speed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.max_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_leaders", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_followers", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_headways", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_tailways", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "obs", "=", "[", "\n", "0", "\n", "for", "_", "in", "range", "(", "4", "*", "self", ".", "k", ".", "vehicle", ".", "num_rl_vehicles", "*", "self", ".", "num_lanes", ")", "\n", "]", "\n", "\n", "self", ".", "visible", "=", "[", "]", "\n", "for", "i", ",", "rl_id", "in", "enumerate", "(", "self", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", ")", ":", "\n", "# normalizers", "\n", "            ", "max_length", "=", "self", ".", "k", ".", "network", ".", "length", "(", ")", "\n", "max_speed", "=", "self", ".", "k", ".", "network", ".", "max_speed", "(", ")", "\n", "\n", "# set to 1000 since the absence of a vehicle implies a large", "\n", "# headway", "\n", "headway", "=", "[", "1", "]", "*", "self", ".", "num_lanes", "\n", "tailway", "=", "[", "1", "]", "*", "self", ".", "num_lanes", "\n", "vel_in_front", "=", "[", "0", "]", "*", "self", ".", "num_lanes", "\n", "vel_behind", "=", "[", "0", "]", "*", "self", ".", "num_lanes", "\n", "\n", "lane_leaders", "=", "self", ".", "k", ".", "vehicle", ".", "get_lane_leaders", "(", "rl_id", ")", "\n", "lane_followers", "=", "self", ".", "k", ".", "vehicle", ".", "get_lane_followers", "(", "rl_id", ")", "\n", "lane_headways", "=", "self", ".", "k", ".", "vehicle", ".", "get_lane_headways", "(", "rl_id", ")", "\n", "lane_tailways", "=", "self", ".", "k", ".", "vehicle", ".", "get_lane_tailways", "(", "rl_id", ")", "\n", "headway", "[", "0", ":", "len", "(", "lane_headways", ")", "]", "=", "lane_headways", "\n", "tailway", "[", "0", ":", "len", "(", "lane_tailways", ")", "]", "=", "lane_tailways", "\n", "\n", "for", "j", ",", "lane_leader", "in", "enumerate", "(", "lane_leaders", ")", ":", "\n", "                ", "if", "lane_leader", "!=", "''", ":", "\n", "                    ", "lane_headways", "[", "j", "]", "/=", "max_length", "\n", "vel_in_front", "[", "j", "]", "=", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "lane_leader", ")", "/", "max_speed", "\n", "self", ".", "visible", ".", "extend", "(", "[", "lane_leader", "]", ")", "\n", "", "", "for", "j", ",", "lane_follower", "in", "enumerate", "(", "lane_followers", ")", ":", "\n", "                ", "if", "lane_follower", "!=", "''", ":", "\n", "                    ", "lane_headways", "[", "j", "]", "/=", "max_length", "\n", "vel_behind", "[", "j", "]", "=", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "lane_follower", ")", "/", "max_speed", "\n", "self", ".", "visible", ".", "extend", "(", "[", "lane_follower", "]", ")", "\n", "\n", "# add the headways, tailways, and speed for all lane leaders", "\n", "# and followers", "\n", "", "", "obs", "[", "4", "*", "self", ".", "num_lanes", "*", "i", ":", "4", "*", "self", ".", "num_lanes", "*", "(", "i", "+", "1", ")", "]", "=", "np", ".", "concatenate", "(", "(", "headway", ",", "tailway", ",", "vel_in_front", ",", "vel_behind", ")", ")", "\n", "\n", "# add the speed for the ego rl vehicle", "\n", "obs", ".", "append", "(", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "rl_id", ")", ")", "\n", "\n", "return", "np", ".", "array", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.lane_change_accel.LaneChangeAccelPOEnv.additional_command": [[265, 270], ["lane_change_accel.LaneChangeAccelPOEnv.k.vehicle.set_observed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed"], ["", "", "def", "additional_command", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define which vehicles are observed for visualization purposes.\"\"\"", "\n", "# specify observed vehicles", "\n", "for", "veh_id", "in", "self", ".", "visible", ":", "\n", "            ", "self", ".", "k", ".", "vehicle", ".", "set_observed", "(", "veh_id", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.AccelEnv.__init__": [[69, 81], ["ADDITIONAL_ENV_PARAMS.keys", "dict", "dict", "flow.envs.base.Env.__init__", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["self", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ")", ")", "\n", "return", "{", "'av'", ":", "reward", ",", "'adversary'", ":", "-", "reward", "}", "\n", "", "else", ":", "\n", "            ", "reward", "=", "rewards", ".", "desired_velocity", "(", "self", ",", "fail", "=", "kwargs", "[", "'fail'", "]", ")", "\n", "return", "{", "'av'", ":", "reward", ",", "'adversary'", ":", "-", "reward", "}", "\n", "\n", "", "", "def", "get_state", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"See class definition for the state.\n\n        The adversary state and the agent state are identical.\n        \"\"\"", "\n", "state", "=", "np", ".", "array", "(", "[", "[", "\n", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "veh_id", ")", "/", "self", ".", "k", ".", "network", ".", "max_speed", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.AccelEnv.action_space": [[82, 90], ["gym.spaces.box.Box", "abs"], "methods", ["None"], ["self", ".", "k", ".", "vehicle", ".", "get_x_by_id", "(", "veh_id", ")", "/", "self", ".", "k", ".", "network", ".", "length", "(", ")", "\n", "]", "for", "veh_id", "in", "self", ".", "sorted_ids", "]", ")", "\n", "state", "=", "np", ".", "ndarray", ".", "flatten", "(", "state", ")", "\n", "return", "{", "'av'", ":", "state", ",", "'adversary'", ":", "state", "}", "\n", "\n", "\n", "", "", "class", "MultiAgentAccelPOEnv", "(", "MultiEnv", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.AccelEnv.observation_space": [[91, 100], ["gym.spaces.box.Box"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.AccelEnv._apply_rl_actions": [[101, 108], ["accel.AccelEnv.k.vehicle.apply_acceleration", "accel.AccelEnv.k.vehicle.get_rl_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_acceleration", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.AccelEnv.compute_reward": [[109, 115], ["numpy.mean", "flow.core.rewards.desired_velocity", "accel.AccelEnv.k.vehicle.get_speed", "accel.AccelEnv.k.vehicle.get_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.desired_velocity", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.AccelEnv.get_state": [[116, 124], ["numpy.array", "accel.AccelEnv.k.vehicle.get_speed", "accel.AccelEnv.k.network.max_speed", "accel.AccelEnv.k.vehicle.get_x_by_id", "accel.AccelEnv.k.network.length"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.max_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.length"], ["\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.AccelEnv.additional_command": [[125, 149], ["accel.AccelEnv.k.vehicle.get_ids", "accel.AccelEnv.k.vehicle.get_human_ids", "accel.AccelEnv.k.vehicle.get_x_by_id", "accel.AccelEnv.k.vehicle.set_observed", "accel.AccelEnv.prev_pos.get", "accel.AccelEnv.k.network.length", "accel.AccelEnv.absolute_position.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_human_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], ["def", "__init__", "(", "self", ",", "env_params", ",", "sim_params", ",", "network", ",", "simulator", "=", "'traci'", ")", ":", "\n", "        ", "for", "p", "in", "ADDITIONAL_ENV_PARAMS", ".", "keys", "(", ")", ":", "\n", "            ", "if", "p", "not", "in", "env_params", ".", "additional_params", ":", "\n", "                ", "raise", "KeyError", "(", "\n", "'Environment parameter \"{}\" not supplied'", ".", "format", "(", "p", ")", ")", "\n", "\n", "", "", "self", ".", "leader", "=", "[", "]", "\n", "self", ".", "follower", "=", "[", "]", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "env_params", ",", "sim_params", ",", "network", ",", "simulator", ")", "\n", "\n", "", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "return", "Box", "(", "\n", "low", "=", "-", "abs", "(", "self", ".", "env_params", ".", "additional_params", "[", "\"max_decel\"", "]", ")", ",", "\n", "high", "=", "self", ".", "env_params", ".", "additional_params", "[", "\"max_accel\"", "]", ",", "\n", "shape", "=", "(", "1", ",", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "return", "Box", "(", "low", "=", "-", "5", ",", "high", "=", "5", ",", "shape", "=", "(", "6", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.AccelEnv.sorted_ids": [[150, 166], ["sorted", "accel.AccelEnv.k.vehicle.get_ids", "accel.AccelEnv.k.vehicle.get_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids"], ["", "def", "_apply_rl_actions", "(", "self", ",", "rl_actions", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "for", "veh_id", "in", "self", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", ":", "\n", "            ", "self", ".", "k", ".", "vehicle", ".", "apply_acceleration", "(", "veh_id", ",", "rl_actions", "[", "veh_id", "]", ")", "\n", "\n", "", "", "def", "compute_reward", "(", "self", ",", "rl_actions", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "# Compute the common reward.", "\n", "reward", "=", "rewards", ".", "desired_velocity", "(", "self", ",", "fail", "=", "kwargs", "[", "'fail'", "]", ")", "\n", "\n", "# Reward is shared by all agents.", "\n", "return", "{", "key", ":", "reward", "for", "key", "in", "self", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", "}", "\n", "\n", "", "def", "get_state", "(", "self", ",", "**", "kwargs", ")", ":", "# FIXME", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "self", ".", "leader", "=", "[", "]", "\n", "self", ".", "follower", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.AccelEnv._get_abs_position": [[167, 170], ["accel.AccelEnv.absolute_position.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], ["obs", "=", "{", "}", "\n", "\n", "# normalizing constants", "\n", "max_speed", "=", "self", ".", "k", ".", "network", ".", "max_speed", "(", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.accel.AccelEnv.reset": [[171, 184], ["super().reset", "accel.AccelEnv.k.vehicle.get_ids", "accel.AccelEnv.k.vehicle.get_x_by_id", "accel.AccelEnv.k.vehicle.get_x_by_id"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id"], ["max_length", "=", "self", ".", "k", ".", "network", ".", "length", "(", ")", "\n", "\n", "for", "rl_id", "in", "self", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", ":", "\n", "            ", "this_pos", "=", "self", ".", "k", ".", "vehicle", ".", "get_x_by_id", "(", "rl_id", ")", "\n", "this_speed", "=", "self", ".", "k", ".", "vehicle", ".", "get_speed", "(", "rl_id", ")", "\n", "lead_id", "=", "self", ".", "k", ".", "vehicle", ".", "get_leader", "(", "rl_id", ")", "\n", "follower", "=", "self", ".", "k", ".", "vehicle", ".", "get_follower", "(", "rl_id", ")", "\n", "\n", "if", "lead_id", "in", "[", "\"\"", ",", "None", "]", ":", "\n", "# in case leader is not visible", "\n", "                ", "lead_speed", "=", "max_speed", "\n", "lead_head", "=", "max_length", "\n", "", "else", ":", "\n", "                ", "self", ".", "leader", ".", "append", "(", "lead_id", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.WaveAttenuationEnv.__init__": [[81, 88], ["ADDITIONAL_ENV_PARAMS.keys", "flow.envs.base.Env.__init__", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.WaveAttenuationEnv.action_space": [[89, 97], ["gym.spaces.box.Box", "numpy.abs"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.WaveAttenuationEnv.observation_space": [[98, 107], ["gym.spaces.box.Box"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.WaveAttenuationEnv._apply_rl_actions": [[108, 112], ["wave_attenuation.WaveAttenuationEnv.k.vehicle.apply_acceleration", "wave_attenuation.WaveAttenuationEnv.k.vehicle.get_rl_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_acceleration", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.WaveAttenuationEnv.compute_reward": [[113, 140], ["numpy.array", "numpy.mean", "float", "any", "numpy.abs", "wave_attenuation.WaveAttenuationEnv.k.vehicle.get_speed", "numpy.mean", "numpy.array", "wave_attenuation.WaveAttenuationEnv.k.vehicle.get_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.WaveAttenuationEnv.get_state": [[141, 149], ["numpy.array", "wave_attenuation.WaveAttenuationEnv.k.vehicle.get_speed", "wave_attenuation.WaveAttenuationEnv.k.network.max_speed", "wave_attenuation.WaveAttenuationEnv.k.vehicle.get_ids", "wave_attenuation.WaveAttenuationEnv.k.vehicle.get_x_by_id", "wave_attenuation.WaveAttenuationEnv.k.network.length", "wave_attenuation.WaveAttenuationEnv.k.vehicle.get_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.max_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.WaveAttenuationEnv.additional_command": [[150, 156], ["wave_attenuation.WaveAttenuationEnv.k.vehicle.get_human_ids", "wave_attenuation.WaveAttenuationEnv.k.vehicle.set_observed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_human_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.WaveAttenuationEnv.reset": [[157, 211], ["flow.core.params.InitialConfig", "random.randint", "flow.core.params.NetParams", "wave_attenuation.WaveAttenuationEnv.network.__class__", "copy.deepcopy", "print", "print", "print", "print", "wave_attenuation.WaveAttenuationEnv.restart_simulation", "super().reset", "super().reset", "scipy.optimize.fsolve", "numpy.array", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.restart_simulation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.WaveAttenuationPOEnv.observation_space": [[242, 247], ["gym.spaces.box.Box", "float", "float"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.WaveAttenuationPOEnv.get_state": [[248, 270], ["numpy.array", "wave_attenuation.WaveAttenuationPOEnv.k.vehicle.get_rl_ids", "wave_attenuation.WaveAttenuationPOEnv.k.vehicle.get_leader", "wave_attenuation.WaveAttenuationPOEnv.k.network.length", "wave_attenuation.WaveAttenuationPOEnv.k.vehicle.get_speed", "wave_attenuation.WaveAttenuationPOEnv.k.vehicle.get_speed", "wave_attenuation.WaveAttenuationPOEnv.k.vehicle.get_speed", "wave_attenuation.WaveAttenuationPOEnv.k.network.length", "wave_attenuation.WaveAttenuationPOEnv.k.vehicle.get_x_by_id", "wave_attenuation.WaveAttenuationPOEnv.k.vehicle.get_x_by_id"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.WaveAttenuationPOEnv.additional_command": [[271, 277], ["wave_attenuation.WaveAttenuationPOEnv.k.vehicle.set_observed", "wave_attenuation.WaveAttenuationPOEnv.k.vehicle.get_rl_ids", "wave_attenuation.WaveAttenuationPOEnv.k.vehicle.get_leader"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.v_eq_max_function": [[33, 48], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.highway_ramps.HighwayRampsNetwork.__init__": [[59, 120], ["flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "ADDITIONAL_NET_PARAMS.keys", "sorted", "sorted", "highway_ramps.HighwayRampsNetwork.ramp_pos.update", "flow.networks.base.Network.__init__", "list", "ValueError", "len", "len", "ValueError", "KeyError", "set", "enumerate", "enumerate", "len", "list", "enumerate", "min", "max", "set"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max"], ["edge", "=", "\"on_ramp_{}\"", ".", "format", "(", "i", ")", ",", "\n", "vehs_per_hour", "=", "ON_RAMPS_INFLOW_RATE", ",", "\n", "depart_lane", "=", "\"first\"", ",", "\n", "depart_speed", "=", "\"max\"", ",", "\n", "name", "=", "\"on_ramp_flow\"", ")", "\n", "\n", "\n", "", "flow_params", "=", "dict", "(", "\n", "# name of the experiment", "\n", "exp_tag", "=", "'highway-ramp'", ",", "\n", "\n", "# name of the flow environment the experiment is running on", "\n", "env_name", "=", "AccelEnv", ",", "\n", "\n", "# name of the network class the experiment is running on", "\n", "network", "=", "HighwayRampsNetwork", ",", "\n", "\n", "# simulator that is used by the experiment", "\n", "simulator", "=", "'traci'", ",", "\n", "\n", "# sumo-related parameters (see flow.core.params.SumoParams)", "\n", "sim", "=", "SumoParams", "(", "\n", "render", "=", "True", ",", "\n", "emission_path", "=", "\"./data/\"", ",", "\n", "sim_step", "=", "0.2", ",", "\n", "restart_instance", "=", "True", "\n", ")", ",", "\n", "\n", "# environment related parameters (see flow.core.params.EnvParams)", "\n", "env", "=", "EnvParams", "(", "\n", "additional_params", "=", "ADDITIONAL_ENV_PARAMS", ",", "\n", "horizon", "=", "3600", ",", "\n", "sims_per_step", "=", "5", ",", "\n", "warmup_steps", "=", "0", "\n", ")", ",", "\n", "\n", "# network-related parameters (see flow.core.params.NetParams and the", "\n", "# network's documentation or ADDITIONAL_NET_PARAMS component)", "\n", "net", "=", "NetParams", "(", "\n", "inflows", "=", "inflows", ",", "\n", "additional_params", "=", "additional_net_params", "\n", ")", ",", "\n", "\n", "# vehicles to be placed in the network at the start of a rollout (see", "\n", "# flow.core.params.VehicleParams)", "\n", "veh", "=", "vehicles", ",", "\n", "\n", "# parameters specifying the positioning of vehicles upon initialization/", "\n", "# reset (see flow.core.params.InitialConfig)", "\n", "initial", "=", "InitialConfig", "(", ")", ",", "\n", "\n", "# traffic lights to be introduced to specific nodes (see", "\n", "# flow.core.params.TrafficLightParams)", "\n", "tls", "=", "TrafficLightParams", "(", ")", ",", "\n", ")", "\n", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.highway_ramps.HighwayRampsNetwork.specify_nodes": [[121, 143], ["range", "enumerate", "enumerate", "len", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.highway_ramps.HighwayRampsNetwork.specify_edges": [[144, 171], ["range", "enumerate", "enumerate", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.highway_ramps.HighwayRampsNetwork.specify_routes": [[172, 221], ["highway_ramps.HighwayRampsNetwork.specify_routes.get_routes"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.highway_ramps.HighwayRampsNetwork.specify_types": [[222, 239], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.minicity.MiniCityNetwork.__init__": [[33, 44], ["flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "dict", "flow.networks.base.Network.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["num_vehicles", "=", "10", ")", "\n", "\n", "\n", "flow_params", "=", "dict", "(", "\n", "# name of the experiment", "\n", "exp_tag", "=", "'minicity'", ",", "\n", "\n", "# name of the flow environment the experiment is running on", "\n", "env_name", "=", "AccelEnv", ",", "\n", "\n", "# name of the network class the experiment is running on", "\n", "network", "=", "MiniCityNetwork", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.minicity.MiniCityNetwork.specify_edge_starts": [[45, 57], ["edgestarts.append", "float"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["\n", "# simulator that is used by the experiment", "\n", "simulator", "=", "'traci'", ",", "\n", "\n", "# sumo-related parameters (see flow.core.params.SumoParams)", "\n", "sim", "=", "SumoParams", "(", "\n", "sim_step", "=", "0.25", ",", "\n", "render", "=", "'drgb'", ",", "\n", "save_render", "=", "False", ",", "\n", "sight_radius", "=", "30", ",", "\n", "pxpm", "=", "3", ",", "\n", "show_radius", "=", "True", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.minicity.MiniCityNetwork.specify_nodes": [[58, 116], ["numpy.array", "numpy.cos", "numpy.sin"], "methods", ["None"], ["\n", "# environment related parameters (see flow.core.params.EnvParams)", "\n", "env", "=", "EnvParams", "(", "\n", "horizon", "=", "750", ",", "\n", "additional_params", "=", "ADDITIONAL_ENV_PARAMS", "\n", ")", ",", "\n", "\n", "# network-related parameters (see flow.core.params.NetParams and the", "\n", "# network's documentation or ADDITIONAL_NET_PARAMS component)", "\n", "net", "=", "NetParams", "(", ")", ",", "\n", "\n", "# vehicles to be placed in the network at the start of a rollout (see", "\n", "# flow.core.params.VehicleParams)", "\n", "veh", "=", "vehicles", ",", "\n", "\n", "# parameters specifying the positioning of vehicles upon initialization/", "\n", "# reset (see flow.core.params.InitialConfig)", "\n", "initial", "=", "InitialConfig", "(", "\n", "spacing", "=", "\"random\"", ",", "\n", "min_gap", "=", "5", ",", "\n", ")", ",", "\n", ")", "\n", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.minicity.MiniCityNetwork.specify_edges": [[117, 458], ["sum", "numpy.linalg.norm", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "reversed", "reversed", "reversed", "numpy.linspace", "reversed", "reversed", "numpy.linspace", "reversed", "reversed", "reversed", "reversed", "numpy.linspace", "numpy.linspace", "numpy.linspace", "reversed", "numpy.linspace", "numpy.linspace", "numpy.linspace", "reversed", "reversed", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.sqrt", "range", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.sin", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.minicity.MiniCityNetwork.specify_connections": [[459, 507], ["zip", "zip", "zip", "range", "range", "range", "int", "numpy.floor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.minicity.MiniCityNetwork.specify_types": [[508, 512], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.minicity.MiniCityNetwork.specify_routes": [[513, 612], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.base.Network.__init__": [[309, 390], ["flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "base.Network.specify_routes", "base.Network.specify_edge_starts", "base.Network.specify_internal_edge_starts", "str", "base.Network.specify_nodes", "base.Network.specify_edges", "base.Network.specify_types", "base.Network.specify_connections", "time.strftime", "time.time", "type", "base.Network._vehicle_infos", "base.Network._vehicle_type", "base.Network._get_cf_params", "base.Network._get_lc_params", "net_params.template.get", "vehicles.add"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.NoRouteNetwork.specify_routes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.i210_subnetwork.I210SubNetwork.specify_edge_starts", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.i210_subnetwork.I210SubNetwork.specify_internal_edge_starts", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.merge.MergeNetwork.specify_nodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.VariableLanesNetwork.specify_edges", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.merge.MergeNetwork.specify_types", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.traffic_light_grid.TrafficLightGridNetwork.specify_connections", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.base.Network._vehicle_infos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.base.Network._vehicle_type", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.base.Network._get_cf_params", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.base.Network._get_lc_params", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.base.Network.specify_edge_starts": [[392, 410], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.base.Network.specify_internal_edge_starts": [[412, 433], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.base.Network.specify_nodes": [[435, 458], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.base.Network.specify_edges": [[460, 492], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.base.Network.specify_types": [[494, 512], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.base.Network.specify_connections": [[514, 536], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.base.Network.specify_routes": [[538, 637], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.base.Network.gen_custom_start_pos": [[638, 663], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.base.Network._vehicle_infos": [[664, 729], ["isinstance", "dict", "dict", "collections.defaultdict", "lxml.etree.XMLParser", "xml.parse", "xml.parse.getroot", "ElementTree.parse.getroot.findall", "ElementTree.parse.getroot.findall", "vehicle.find", "vehicle.find.attrib[].split", "vehicle.find.attrib[].split"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.base.Network._vehicle_type": [[730, 778], ["lxml.etree.XMLParser", "xml.parse", "xml.parse.getroot", "ElementTree.parse.getroot.findall", "r.findall", "len", "ElementTree.parse.getroot.findall", "vtype.attrib.get", "vtype.attrib.get", "vtype.attrib.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.base.Network._get_cf_params": [[779, 798], ["flow.core.params.SumoCarFollowingParams", "float", "float", "float", "float", "float", "float", "float", "float"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.base.Network._get_lc_params": [[799, 807], ["flow.core.params.SumoLaneChangeParams"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.base.Network.__str__": [[808, 812], ["str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.figure_eight.FigureEightNetwork.__init__": [[59, 83], ["flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "ADDITIONAL_NET_PARAMS.keys", "flow.networks.base.Network.__init__", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["# vehicles to be placed in the network at the start of a rollout (see", "\n", "# flow.core.params.VehicleParams)", "\n", "veh", "=", "vehicles", ",", "\n", ")", "\n", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.figure_eight.FigureEightNetwork.specify_nodes": [[84, 117], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.figure_eight.FigureEightNetwork.specify_edges": [[118, 176], ["numpy.linspace", "numpy.linspace", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.figure_eight.FigureEightNetwork.specify_types": [[177, 188], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.figure_eight.FigureEightNetwork.specify_routes": [[189, 207], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.figure_eight.FigureEightNetwork.specify_connections": [[208, 224], ["range", "str", "str", "str", "str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.figure_eight.FigureEightNetwork.specify_edge_starts": [[225, 241], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.figure_eight.FigureEightNetwork.specify_internal_edge_starts": [[242, 264], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.bay_bridge.BayBridgeNetwork.specify_routes": [[78, 148], ["None"], "methods", ["None"], ["\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"393649534\"", ",", "\n", "probability", "=", "0.1", ",", "\n", "departLane", "=", "\"0\"", ",", "\n", "departSpeed", "=", "20", ")", "# no data for this", "\n", "\n", "# west", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"11189946\"", ",", "\n", "vehsPerHour", "=", "1752", ",", "\n", "departLane", "=", "\"0\"", ",", "\n", "departSpeed", "=", "20", ")", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"11189946\"", ",", "\n", "vehsPerHour", "=", "2136", ",", "\n", "departLane", "=", "\"1\"", ",", "\n", "departSpeed", "=", "20", ")", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"11189946\"", ",", "\n", "vehsPerHour", "=", "576", ",", "\n", "departLane", "=", "\"2\"", ",", "\n", "departSpeed", "=", "20", ")", "\n", "\n", "# north", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"28413687#0\"", ",", "\n", "vehsPerHour", "=", "2880", ",", "\n", "departLane", "=", "\"0\"", ",", "\n", "departSpeed", "=", "20", ")", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"28413687#0\"", ",", "\n", "vehsPerHour", "=", "2328", ",", "\n", "departLane", "=", "\"1\"", ",", "\n", "departSpeed", "=", "20", ")", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"28413687#0\"", ",", "\n", "vehsPerHour", "=", "3060", ",", "\n", "departLane", "=", "\"2\"", ",", "\n", "departSpeed", "=", "20", ")", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"11198593\"", ",", "\n", "probability", "=", "0.1", ",", "\n", "departLane", "=", "\"0\"", ",", "\n", "departSpeed", "=", "20", ")", "# no data for this", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"11197889\"", ",", "\n", "probability", "=", "0.1", ",", "\n", "departLane", "=", "\"0\"", ",", "\n", "departSpeed", "=", "20", ")", "# no data for this", "\n", "\n", "# midway through bridge", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"35536683\"", ",", "\n", "probability", "=", "0.1", ",", "\n", "departLane", "=", "\"0\"", ",", "\n", "departSpeed", "=", "20", ")", "# no data for this", "\n", "\n", "\n", "", "flow_params", "=", "dict", "(", "\n", "# name of the experiment", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.bottleneck.BottleneckNetwork.__init__": [[48, 61], ["flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "ADDITIONAL_NET_PARAMS.keys", "flow.networks.base.Network.__init__", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["# name of the experiment", "\n", "exp_tag", "=", "'bay_bridge_toll'", ",", "\n", "\n", "# name of the flow environment the experiment is running on", "\n", "env_name", "=", "BottleneckEnv", ",", "\n", "\n", "# name of the network class the experiment is running on", "\n", "network", "=", "BottleneckNetwork", ",", "\n", "\n", "# simulator that is used by the experiment", "\n", "simulator", "=", "'traci'", ",", "\n", "\n", "# sumo-related parameters (see flow.core.params.SumoParams)", "\n", "sim", "=", "SumoParams", "(", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.bottleneck.BottleneckNetwork.specify_nodes": [[62, 112], ["None"], "methods", ["None"], ["sim_step", "=", "0.5", ",", "\n", "render", "=", "False", ",", "\n", "overtake_right", "=", "False", ",", "\n", "restart_instance", "=", "False", "\n", ")", ",", "\n", "\n", "# environment related parameters (see flow.core.params.EnvParams)", "\n", "env", "=", "EnvParams", "(", "\n", "horizon", "=", "HORIZON", ",", "\n", "additional_params", "=", "{", "\n", "\"target_velocity\"", ":", "40", ",", "\n", "\"max_accel\"", ":", "1", ",", "\n", "\"max_decel\"", ":", "1", ",", "\n", "\"lane_change_duration\"", ":", "5", ",", "\n", "\"add_rl_if_exit\"", ":", "False", ",", "\n", "\"disable_tb\"", ":", "DISABLE_TB", ",", "\n", "\"disable_ramp_metering\"", ":", "DISABLE_RAMP_METER", "\n", "}", "\n", ")", ",", "\n", "\n", "# network-related parameters (see flow.core.params.NetParams and the", "\n", "# network's documentation or ADDITIONAL_NET_PARAMS component)", "\n", "net", "=", "NetParams", "(", "\n", "inflows", "=", "inflow", ",", "\n", "additional_params", "=", "{", "\n", "\"scaling\"", ":", "SCALING", ",", "\n", "\"speed_limit\"", ":", "23", "\n", "}", "\n", ")", ",", "\n", "\n", "# vehicles to be placed in the network at the start of a rollout (see", "\n", "# flow.core.params.VehicleParams)", "\n", "veh", "=", "vehicles", ",", "\n", "\n", "# parameters specifying the positioning of vehicles upon initialization/", "\n", "# reset (see flow.core.params.InitialConfig)", "\n", "initial", "=", "InitialConfig", "(", "\n", "spacing", "=", "\"random\"", ",", "\n", "min_gap", "=", "5", ",", "\n", "lanes_distribution", "=", "float", "(", "\"inf\"", ")", ",", "\n", "edges_distribution", "=", "[", "\"2\"", ",", "\"3\"", ",", "\"4\"", ",", "\"5\"", "]", "\n", ")", ",", "\n", "\n", "# traffic lights to be introduced to specific nodes (see", "\n", "# flow.core.params.TrafficLightParams)", "\n", "tls", "=", "traffic_lights", ",", "\n", ")", "\n", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.bottleneck.BottleneckNetwork.specify_edges": [[113, 178], ["net_params.additional_params.get", "isinstance"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.bottleneck.BottleneckNetwork.specify_connections": [[179, 202], ["net_params.additional_params.get", "range", "range", "int", "int", "numpy.floor", "numpy.floor"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.bottleneck.BottleneckNetwork.specify_centroids": [[203, 221], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.bottleneck.BottleneckNetwork.specify_routes": [[222, 233], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.bottleneck.BottleneckNetwork.specify_edge_starts": [[234, 237], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.bottleneck.BottleneckNetwork.get_bottleneck_lanes": [[238, 241], ["int", "int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.bay_bridge_toll.BayBridgeTollNetwork.specify_routes": [[55, 98], ["None"], "methods", ["None"], ["inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"393649534\"", ",", "\n", "probability", "=", "0.2", ",", "\n", "departLane", "=", "\"random\"", ",", "\n", "departSpeed", "=", "10", ")", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"4757680\"", ",", "\n", "probability", "=", "0.2", ",", "\n", "departLane", "=", "\"random\"", ",", "\n", "departSpeed", "=", "10", ")", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"32661316\"", ",", "\n", "probability", "=", "0.2", ",", "\n", "departLane", "=", "\"random\"", ",", "\n", "departSpeed", "=", "10", ")", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"90077193#0\"", ",", "\n", "vehs_per_hour", "=", "2000", ",", "\n", "departLane", "=", "\"random\"", ",", "\n", "departSpeed", "=", "10", ")", "\n", "\n", "\n", "flow_params", "=", "dict", "(", "\n", "# name of the experiment", "\n", "exp_tag", "=", "'bay_bridge_toll'", ",", "\n", "\n", "# name of the flow environment the experiment is running on", "\n", "env_name", "=", "BayBridgeEnv", ",", "\n", "\n", "# name of the network class the experiment is running on", "\n", "network", "=", "BayBridgeTollNetwork", ",", "\n", "\n", "# simulator that is used by the experiment", "\n", "simulator", "=", "'traci'", ",", "\n", "\n", "# sumo-related parameters (see flow.core.params.SumoParams)", "\n", "sim", "=", "SumoParams", "(", "\n", "render", "=", "True", ",", "\n", "sim_step", "=", "0.4", ",", "\n", "overtake_right", "=", "True", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.highway.HighwayNetwork.__init__": [[66, 79], ["flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "ADDITIONAL_NET_PARAMS.keys", "flow.networks.base.Network.__init__", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["horizon", "=", "1500", ",", "\n", "additional_params", "=", "ADDITIONAL_ENV_PARAMS", ".", "copy", "(", ")", ",", "\n", ")", ",", "\n", "\n", "# network-related parameters (see flow.core.params.NetParams and the", "\n", "# network's documentation or ADDITIONAL_NET_PARAMS component)", "\n", "net", "=", "NetParams", "(", "\n", "inflows", "=", "inflow", ",", "\n", "additional_params", "=", "ADDITIONAL_NET_PARAMS", ".", "copy", "(", ")", ",", "\n", ")", ",", "\n", "\n", "# vehicles to be placed in the network at the start of a rollout (see", "\n", "# flow.core.params.VehicleParams)", "\n", "veh", "=", "vehicles", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.highway.HighwayNetwork.specify_nodes": [[80, 103], ["net_params.additional_params.get", "numpy.linspace", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], ["\n", "# parameters specifying the positioning of vehicles upon initialization/", "\n", "# reset (see flow.core.params.InitialConfig)", "\n", "initial", "=", "InitialConfig", "(", "\n", "spacing", "=", "\"uniform\"", ",", "\n", "shuffle", "=", "True", ",", "\n", ")", ",", "\n", ")", "\n", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.highway.HighwayNetwork.specify_edges": [[104, 131], ["net_params.additional_params.get", "range", "float"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.highway.HighwayNetwork.specify_types": [[132, 152], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.highway.HighwayNetwork.specify_routes": [[153, 164], ["net_params.additional_params.get", "range", "rts[].append", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.highway.HighwayNetwork.specify_edge_starts": [[165, 184], ["highway.HighwayNetwork.net_params.additional_params.get", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.highway.HighwayNetwork.specify_internal_edge_starts": [[185, 205], ["highway.HighwayNetwork.net_params.additional_params.get", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.highway.HighwayNetwork.gen_custom_start_pos": [[206, 214], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.traffic_light_grid.TrafficLightGridNetwork.__init__": [[108, 165], ["flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "ADDITIONAL_NET_PARAMS.keys", "ADDITIONAL_NET_PARAMS[].keys", "net_params.additional_params.get", "flow.networks.base.Network.__init__", "isinstance", "KeyError", "KeyError", "max"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max"], ["\n", "", "def", "get_non_flow_params", "(", "enter_speed", ",", "add_net_params", ")", ":", "\n", "    ", "\"\"\"Define the network and initial params in the absence of inflows.\n\n    Note that when a vehicle leaves a network in this case, it is immediately\n    returns to the start of the row/column it was traversing, and in the same\n    direction as it was before.\n\n    Parameters\n    ----------\n    enter_speed : float\n        initial speed of vehicles as they enter the network.\n    add_net_params: dict\n        additional network-specific parameters (unique to the grid)\n\n    Returns\n    -------\n    flow.core.params.InitialConfig\n        parameters specifying the initial configuration of vehicles in the\n        network\n    flow.core.params.NetParams\n        network-specific parameters used to generate the network\n    \"\"\"", "\n", "additional_init_params", "=", "{", "'enter_speed'", ":", "enter_speed", "}", "\n", "initial", "=", "InitialConfig", "(", "\n", "spacing", "=", "'custom'", ",", "additional_params", "=", "additional_init_params", ")", "\n", "net", "=", "NetParams", "(", "additional_params", "=", "add_net_params", ")", "\n", "\n", "return", "initial", ",", "net", "\n", "\n", "\n", "", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"human\"", ",", "\n", "routing_controller", "=", "(", "GridRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "min_gap", "=", "2.5", ",", "\n", "decel", "=", "7.5", ",", "# avoid collisions at emergency stops", "\n", ")", ",", "\n", "num_vehicles", "=", "tot_cars", ")", "\n", "\n", "env_params", "=", "EnvParams", "(", "additional_params", "=", "ADDITIONAL_ENV_PARAMS", ")", "\n", "\n", "tl_logic", "=", "TrafficLightParams", "(", "baseline", "=", "False", ")", "\n", "phases", "=", "[", "{", "\n", "\"duration\"", ":", "\"31\"", ",", "\n", "\"minDur\"", ":", "\"8\"", ",", "\n", "\"maxDur\"", ":", "\"45\"", ",", "\n", "\"state\"", ":", "\"GrGrGrGrGrGr\"", "\n", "}", ",", "{", "\n", "\"duration\"", ":", "\"6\"", ",", "\n", "\"minDur\"", ":", "\"3\"", ",", "\n", "\"maxDur\"", ":", "\"6\"", ",", "\n", "\"state\"", ":", "\"yryryryryryr\"", "\n", "}", ",", "{", "\n", "\"duration\"", ":", "\"31\"", ",", "\n", "\"minDur\"", ":", "\"8\"", ",", "\n", "\"maxDur\"", ":", "\"45\"", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.traffic_light_grid.TrafficLightGridNetwork.specify_nodes": [[166, 169], ["None"], "methods", ["None"], ["\"state\"", ":", "\"rGrGrGrGrGrG\"", "\n", "}", ",", "{", "\n", "\"duration\"", ":", "\"6\"", ",", "\n", "\"minDur\"", ":", "\"3\"", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.traffic_light_grid.TrafficLightGridNetwork.specify_edges": [[170, 173], ["None"], "methods", ["None"], ["\"maxDur\"", ":", "\"6\"", ",", "\n", "\"state\"", ":", "\"ryryryryryry\"", "\n", "}", "]", "\n", "tl_logic", ".", "add", "(", "\"center0\"", ",", "phases", "=", "phases", ",", "programID", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.traffic_light_grid.TrafficLightGridNetwork.specify_routes": [[174, 195], ["collections.defaultdict", "range", "range", "range", "range"], "methods", ["None"], ["tl_logic", ".", "add", "(", "\"center1\"", ",", "phases", "=", "phases", ",", "programID", "=", "1", ")", "\n", "tl_logic", ".", "add", "(", "\"center2\"", ",", "phases", "=", "phases", ",", "programID", "=", "1", ",", "tls_type", "=", "\"actuated\"", ")", "\n", "\n", "additional_net_params", "=", "{", "\n", "\"grid_array\"", ":", "grid_array", ",", "\n", "\"speed_limit\"", ":", "35", ",", "\n", "\"horizontal_lanes\"", ":", "1", ",", "\n", "\"vertical_lanes\"", ":", "1", "\n", "}", "\n", "\n", "if", "USE_INFLOWS", ":", "\n", "    ", "initial_config", ",", "net_params", "=", "get_flow_params", "(", "\n", "col_num", "=", "n_columns", ",", "\n", "row_num", "=", "n_rows", ",", "\n", "additional_net_params", "=", "additional_net_params", ")", "\n", "", "else", ":", "\n", "    ", "initial_config", ",", "net_params", "=", "get_non_flow_params", "(", "\n", "enter_speed", "=", "v_enter", ",", "\n", "add_net_params", "=", "additional_net_params", ")", "\n", "\n", "\n", "", "flow_params", "=", "dict", "(", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.traffic_light_grid.TrafficLightGridNetwork.specify_types": [[196, 209], ["None"], "methods", ["None"], ["# name of the experiment", "\n", "exp_tag", "=", "'grid-intersection'", ",", "\n", "\n", "# name of the flow environment the experiment is running on", "\n", "env_name", "=", "AccelEnv", ",", "\n", "\n", "# name of the network class the experiment is running on", "\n", "network", "=", "TrafficLightGridNetwork", ",", "\n", "\n", "# simulator that is used by the experiment", "\n", "simulator", "=", "'traci'", ",", "\n", "\n", "# sumo-related parameters (see flow.core.params.SumoParams)", "\n", "sim", "=", "SumoParams", "(", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.traffic_light_grid.TrafficLightGridNetwork._inner_nodes": [[214, 253], ["range", "range", "nodes.append"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["# environment related parameters (see flow.core.params.EnvParams)", "\n", "env", "=", "EnvParams", "(", "\n", "horizon", "=", "1500", ",", "\n", "additional_params", "=", "ADDITIONAL_ENV_PARAMS", ".", "copy", "(", ")", ",", "\n", ")", ",", "\n", "\n", "# network-related parameters (see flow.core.params.NetParams and the", "\n", "# network's documentation or ADDITIONAL_NET_PARAMS component)", "\n", "net", "=", "net_params", ",", "\n", "\n", "# vehicles to be placed in the network at the start of a rollout (see", "\n", "# flow.core.params.VehicleParams)", "\n", "veh", "=", "vehicles", ",", "\n", "\n", "# parameters specifying the positioning of vehicles upon initialization/", "\n", "# reset (see flow.core.params.InitialConfig)", "\n", "initial", "=", "initial_config", ",", "\n", "\n", "# traffic lights to be introduced to specific nodes (see", "\n", "# flow.core.params.TrafficLightParams)", "\n", "tls", "=", "tl_logic", ",", "\n", ")", "\n", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.traffic_light_grid.TrafficLightGridNetwork._outer_nodes": [[254, 319], ["range", "range", "traffic_light_grid.TrafficLightGridNetwork._outer_nodes.new_node"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.traffic_light_grid.TrafficLightGridNetwork._inner_edges": [[320, 391], ["range", "range", "range", "range", "traffic_light_grid.TrafficLightGridNetwork._inner_edges.new_edge"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.traffic_light_grid.TrafficLightGridNetwork._outer_edges": [[392, 486], ["range", "range", "traffic_light_grid.TrafficLightGridNetwork._inner_edges.new_edge"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.traffic_light_grid.TrafficLightGridNetwork.specify_connections": [[487, 524], ["range", "range", "range", "range", "str", "str", "traffic_light_grid.TrafficLightGridNetwork.specify_connections.new_con"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.traffic_light_grid.TrafficLightGridNetwork.specify_edge_starts": [[526, 540], ["range", "range"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.traffic_light_grid.TrafficLightGridNetwork.gen_custom_start_pos": [[542, 578], ["range", "range", "numpy.random.randint().tolist", "numpy.random.randint().tolist", "range", "range", "numpy.random.randint", "range", "range", "numpy.random.randint"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.traffic_light_grid.TrafficLightGridNetwork.node_mapping": [[579, 604], ["range", "sorted", "range", "mapping.items"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.ring.RingNetwork.__init__": [[56, 69], ["flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "ADDITIONAL_NET_PARAMS.keys", "flow.networks.base.Network.__init__", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["# parameters specifying the positioning of vehicles upon initialization/", "\n", "# reset (see flow.core.params.InitialConfig)", "\n", "initial", "=", "InitialConfig", "(", "\n", "bunching", "=", "20", ",", "\n", ")", ",", "\n", ")", "\n", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.ring.RingNetwork.specify_nodes": [[70, 94], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.ring.RingNetwork.specify_edges": [[95, 169], ["numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.ring.RingNetwork.specify_types": [[170, 182], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.ring.RingNetwork.specify_routes": [[183, 193], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.ring.RingNetwork.specify_edge_starts": [[194, 205], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.ring.RingNetwork.specify_internal_edge_starts": [[206, 217], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.multi_ring.MultiRingNetwork.__init__": [[60, 77], ["flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "ADDITIONAL_NET_PARAMS.keys", "flow.networks.base.Network.__init__", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.multi_ring.MultiRingNetwork.specify_edge_starts": [[78, 91], ["range"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.multi_ring.MultiRingNetwork.gen_custom_start_pos": [[92, 149], ["cls._get_start_pos_util", "cls.get_edge", "range", "min", "startpositions.append", "startlanes.append", "int", "cls.num_lanes"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork._get_start_pos_util", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.multi_ring.MultiRingNetwork.specify_nodes": [[150, 188], ["int", "range", "numpy.ceil", "range", "numpy.sqrt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.multi_ring.MultiRingNetwork.specify_edges": [[189, 280], ["int", "range", "numpy.ceil", "range", "numpy.sqrt", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.multi_ring.MultiRingNetwork.specify_types": [[281, 293], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.multi_ring.MultiRingNetwork.specify_routes": [[294, 320], ["range", "rts.update"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.merge.MergeNetwork.__init__": [[66, 79], ["flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "ADDITIONAL_NET_PARAMS.keys", "flow.networks.base.Network.__init__", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["env", "=", "EnvParams", "(", "\n", "horizon", "=", "3600", ",", "\n", "additional_params", "=", "ADDITIONAL_ENV_PARAMS", ",", "\n", "sims_per_step", "=", "5", ",", "\n", "warmup_steps", "=", "0", ",", "\n", ")", ",", "\n", "\n", "# network-related parameters (see flow.core.params.NetParams and the", "\n", "# network's documentation or ADDITIONAL_NET_PARAMS component)", "\n", "net", "=", "NetParams", "(", "\n", "inflows", "=", "inflow", ",", "\n", "additional_params", "=", "{", "\n", "\"merge_length\"", ":", "100", ",", "\n", "\"pre_merge_length\"", ":", "500", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.merge.MergeNetwork.specify_nodes": [[80, 122], ["numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos"], "methods", ["None"], ["\"post_merge_length\"", ":", "100", ",", "\n", "\"merge_lanes\"", ":", "1", ",", "\n", "\"highway_lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "}", ",", "\n", ")", ",", "\n", "\n", "# vehicles to be placed in the network at the start of a rollout (see", "\n", "# flow.core.params.VehicleParams)", "\n", "veh", "=", "vehicles", ",", "\n", "\n", "# parameters specifying the positioning of vehicles upon initialization/", "\n", "# reset (see flow.core.params.InitialConfig)", "\n", "initial", "=", "InitialConfig", "(", "\n", "spacing", "=", "\"uniform\"", ",", "\n", "perturbation", "=", "5.0", ",", "\n", ")", ",", "\n", ")", "\n", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.merge.MergeNetwork.specify_edges": [[123, 162], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.merge.MergeNetwork.specify_types": [[163, 180], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.merge.MergeNetwork.specify_routes": [[181, 192], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.merge.MergeNetwork.specify_edge_starts": [[193, 206], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.merge.MergeNetwork.specify_internal_edge_starts": [[207, 219], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.i210_subnetwork.I210SubNetwork.__init__": [[57, 94], ["flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "ADDITIONAL_NET_PARAMS.keys", "flow.networks.base.Network.__init__", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["", "edges_distribution", "=", "EDGES_DISTRIBUTION", ".", "copy", "(", ")", "\n", "if", "not", "WANT_GHOST_CELL", ":", "\n", "    ", "edges_distribution", ".", "remove", "(", "\"ghost0\"", ")", "\n", "\n", "# =========================================================================== #", "\n", "# Specify vehicle-specific information and inflows.                           #", "\n", "# =========================================================================== #", "\n", "\n", "", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "\"human\"", ",", "\n", "num_vehicles", "=", "0", ",", "\n", "lane_change_params", "=", "SumoLaneChangeParams", "(", "\n", "lane_change_mode", "=", "\"strategic\"", ",", "\n", ")", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "\n", "\"a\"", ":", "1.3", ",", "\n", "\"b\"", ":", "2.0", ",", "\n", "\"noise\"", ":", "0.3", ",", "\n", "}", ")", ",", "\n", "routing_controller", "=", "(", "I210Router", ",", "{", "}", ")", "if", "ON_RAMP", "else", "None", ",", "\n", ")", "\n", "\n", "inflow", "=", "InFlows", "(", ")", "\n", "# main highway", "\n", "for", "lane", "in", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", "]", ":", "\n", "    ", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"ghost0\"", "if", "WANT_GHOST_CELL", "else", "\"119257914\"", ",", "\n", "vehs_per_hour", "=", "INFLOW_RATE", ",", "\n", "departLane", "=", "lane", ",", "\n", "departSpeed", "=", "INFLOW_SPEED", ")", "\n", "# on ramp", "\n", "", "if", "ON_RAMP", ":", "\n", "    ", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"27414345\"", ",", "\n", "vehs_per_hour", "=", "500", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.i210_subnetwork.I210SubNetwork.specify_routes": [[96, 219], ["rts.update", "rts.update"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update"], ["departSpeed", "=", "10", ")", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"27414342#0\"", ",", "\n", "vehs_per_hour", "=", "500", ",", "\n", "departLane", "=", "\"random\"", ",", "\n", "departSpeed", "=", "10", ")", "\n", "\n", "# =========================================================================== #", "\n", "# Generate the flow_params dict with all relevant simulation information.     #", "\n", "# =========================================================================== #", "\n", "\n", "", "flow_params", "=", "dict", "(", "\n", "# name of the experiment", "\n", "exp_tag", "=", "'I-210_subnetwork'", ",", "\n", "\n", "# name of the flow environment the experiment is running on", "\n", "env_name", "=", "TestEnv", ",", "\n", "\n", "# name of the network class the experiment is running on", "\n", "network", "=", "I210SubNetwork", ",", "\n", "\n", "# simulator that is used by the experiment", "\n", "simulator", "=", "'traci'", ",", "\n", "\n", "# simulation-related parameters", "\n", "sim", "=", "SumoParams", "(", "\n", "sim_step", "=", "0.4", ",", "\n", "render", "=", "False", ",", "\n", "color_by_speed", "=", "True", ",", "\n", "use_ballistic", "=", "True", "\n", ")", ",", "\n", "\n", "# environment related parameters (see flow.core.params.EnvParams)", "\n", "env", "=", "EnvParams", "(", "\n", "horizon", "=", "HORIZON", ",", "\n", "warmup_steps", "=", "WARMUP_STEPS", ",", "\n", "sims_per_step", "=", "3", "\n", ")", ",", "\n", "\n", "# network-related parameters (see flow.core.params.NetParams and the", "\n", "# network's documentation or ADDITIONAL_NET_PARAMS component)", "\n", "net", "=", "NetParams", "(", "\n", "inflows", "=", "inflow", ",", "\n", "template", "=", "NET_TEMPLATE", ",", "\n", "additional_params", "=", "{", "\n", "\"on_ramp\"", ":", "ON_RAMP", ",", "\n", "\"ghost_edge\"", ":", "WANT_GHOST_CELL", ",", "\n", "}", "\n", ")", ",", "\n", "\n", "# vehicles to be placed in the network at the start of a rollout (see", "\n", "# flow.core.params.VehicleParams)", "\n", "veh", "=", "vehicles", ",", "\n", "\n", "# parameters specifying the positioning of vehicles upon initialization/", "\n", "# reset (see flow.core.params.InitialConfig)", "\n", "initial", "=", "InitialConfig", "(", "\n", "edges_distribution", "=", "edges_distribution", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "# =========================================================================== #", "\n", "# Specify custom callable that is logged during simulation runtime.           #", "\n", "# =========================================================================== #", "\n", "\n", "edge_id", "=", "\"119257908#1-AddedOnRampEdge\"", "\n", "custom_callables", "=", "{", "\n", "\"avg_merge_speed\"", ":", "lambda", "env", ":", "np", ".", "nan_to_num", "(", "np", ".", "mean", "(", "\n", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "env", ".", "k", ".", "vehicle", ".", "get_ids_by_edge", "(", "edge_id", ")", ")", ")", ")", ",", "\n", "\"avg_outflow\"", ":", "lambda", "env", ":", "np", ".", "nan_to_num", "(", "\n", "env", ".", "k", ".", "vehicle", ".", "get_outflow_rate", "(", "120", ")", ")", ",", "\n", "# we multiply by 5 to account for the vehicle length and by 1000 to convert", "\n", "# into veh/km", "\n", "\"avg_density\"", ":", "lambda", "env", ":", "5", "*", "1000", "*", "len", "(", "env", ".", "k", ".", "vehicle", ".", "get_ids_by_edge", "(", "\n", "edge_id", ")", ")", "/", "(", "env", ".", "k", ".", "network", ".", "edge_length", "(", "edge_id", ")", "\n", "*", "env", ".", "k", ".", "network", ".", "num_lanes", "(", "edge_id", ")", ")", ",", "\n", "}", "\n", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.i210_subnetwork.I210SubNetwork.specify_edge_starts": [[220, 253], ["next", "edge_starts.append", "e[].startswith", "sum", "range", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.networks.i210_subnetwork.I210SubNetwork.specify_internal_edge_starts": [[254, 287], ["next", "edge_starts.append", "e[].startswith", "sum", "range", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer.__init__": [[73, 180], ["pyglet.gl.glEnable", "pyglet.gl.glBlendFunc", "copy.deepcopy", "numpy.asarray", "int", "numpy.asarray", "int", "ValueError", "time.strftime", "os.mkdir", "numpy.asarray.min", "numpy.asarray.min", "pyglet_renderer.PygletRenderer.lane_colors.append", "pyglet.window.Window", "pyglet.gl.glClearColor", "pyglet_renderer.PygletRenderer.window.clear", "pyglet_renderer.PygletRenderer.window.switch_to", "pyglet_renderer.PygletRenderer.window.dispatch_events", "pyglet.graphics.Batch", "pyglet_renderer.PygletRenderer._add_lane_polys", "pyglet_renderer.PygletRenderer.lane_batch.draw", "pyglet.image.get_buffer_manager().get_color_buffer", "pyglet.image.get_buffer_manager().get_color_buffer.get_image_data", "numpy.fromstring", "frame.reshape.reshape.reshape", "pyglet_renderer.PygletRenderer.frame.copy", "print", "os.path.exists", "os.mkdir", "numpy.asarray.max", "numpy.asarray.min", "numpy.asarray.max", "numpy.asarray.min", "warnings.warn", "range", "pyglet.image.get_buffer_manager", "int", "int", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer._add_lane_polys", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min"], ["def", "__init__", "(", "self", ",", "network", ",", "mode", ",", "\n", "save_render", "=", "False", ",", "\n", "path", "=", "HOME", "+", "\"/flow_rendering\"", ",", "\n", "sight_radius", "=", "50", ",", "\n", "show_radius", "=", "False", ",", "\n", "pxpm", "=", "2", ",", "\n", "alpha", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"Initialize Pyglet Renderer.\n\n        Parameters\n        ----------\n        network : list of list\n            A list of road network polygons. Each polygon is expressed as\n            a list of x and y coordinates, e.g., [x1, y1, x2, y2, ...]\n        mode : str or bool\n\n            * False: no rendering\n            * True: delegate rendering to sumo-gui for back-compatibility\n            * \"gray\": static grayscale rendering, which is good for training\n            * \"dgray\": dynamic grayscale rendering\n            * \"rgb\": static RGB rendering\n            * \"drgb\": dynamic RGB rendering, which is good for visualization\n\n        save_render : bool\n            Specify whether to save rendering data to disk\n        path : str\n            Specify where to store the rendering data\n        sight_radius : int\n            Set the radius of observation for RL vehicles (meter)\n        show_radius : bool\n            Specify whether to render the radius of RL observation\n        pxpm : int\n            Specify rendering resolution (pixel / meter)\n        alpha : int\n            Specify opacity of the alpha channel.\n            1.0 is fully opaque; 0.0 is fully transparent.\n        \"\"\"", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "self", ".", "mode", "not", "in", "[", "True", ",", "False", ",", "\"rgb\"", ",", "\"drgb\"", ",", "\"gray\"", ",", "\"dgray\"", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"Mode %s is not supported!\"", "%", "self", ".", "mode", ")", "\n", "", "self", ".", "save_render", "=", "save_render", "\n", "self", ".", "path", "=", "path", "+", "'/'", "+", "time", ".", "strftime", "(", "\"%Y-%m-%d-%H%M%S\"", ")", "\n", "if", "self", ".", "save_render", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "os", ".", "mkdir", "(", "self", ".", "path", ")", "\n", "self", ".", "data", "=", "[", "network", "]", "\n", "", "self", ".", "sight_radius", "=", "sight_radius", "\n", "self", ".", "pxpm", "=", "pxpm", "# Pixel per meter", "\n", "self", ".", "show_radius", "=", "show_radius", "\n", "self", ".", "alpha", "=", "alpha", "\n", "pyglet", ".", "gl", ".", "glEnable", "(", "pyglet", ".", "gl", ".", "GL_BLEND", ")", "\n", "pyglet", ".", "gl", ".", "glBlendFunc", "(", "\n", "pyglet", ".", "gl", ".", "GL_SRC_ALPHA", ",", "pyglet", ".", "gl", ".", "GL_ONE_MINUS_SRC_ALPHA", ")", "\n", "self", ".", "time", "=", "0", "\n", "\n", "self", ".", "lane_polys", "=", "copy", ".", "deepcopy", "(", "network", ")", "\n", "lane_polys_flat", "=", "[", "pt", "for", "poly", "in", "network", "for", "pt", "in", "poly", "]", "\n", "\n", "polys_x", "=", "np", ".", "asarray", "(", "lane_polys_flat", "[", ":", ":", "2", "]", ")", "\n", "width", "=", "int", "(", "polys_x", ".", "max", "(", ")", "-", "polys_x", ".", "min", "(", ")", ")", "\n", "shift", "=", "polys_x", ".", "min", "(", ")", "-", "2", "\n", "scale", "=", "(", "width", "-", "4", ")", "/", "width", "\n", "self", ".", "width", "=", "(", "width", "+", "2", "*", "self", ".", "sight_radius", ")", "*", "self", ".", "pxpm", "\n", "self", ".", "x_shift", "=", "shift", "-", "self", ".", "sight_radius", "\n", "self", ".", "x_scale", "=", "scale", "\n", "\n", "polys_y", "=", "np", ".", "asarray", "(", "lane_polys_flat", "[", "1", ":", ":", "2", "]", ")", "\n", "height", "=", "int", "(", "polys_y", ".", "max", "(", ")", "-", "polys_y", ".", "min", "(", ")", ")", "\n", "shift", "=", "polys_y", ".", "min", "(", ")", "-", "2", "\n", "scale", "=", "(", "height", "-", "4", ")", "/", "height", "\n", "self", ".", "height", "=", "(", "height", "+", "2", "*", "self", ".", "sight_radius", ")", "*", "self", ".", "pxpm", "\n", "self", ".", "y_shift", "=", "shift", "-", "self", ".", "sight_radius", "\n", "self", ".", "y_scale", "=", "scale", "\n", "\n", "self", ".", "lane_colors", "=", "[", "]", "\n", "for", "lane_poly", "in", "self", ".", "lane_polys", ":", "\n", "            ", "lane_poly", "[", ":", ":", "2", "]", "=", "[", "(", "x", "-", "self", ".", "x_shift", ")", "*", "self", ".", "x_scale", "*", "self", ".", "pxpm", "\n", "for", "x", "in", "lane_poly", "[", ":", ":", "2", "]", "]", "\n", "lane_poly", "[", "1", ":", ":", "2", "]", "=", "[", "(", "y", "-", "self", ".", "y_shift", ")", "*", "self", ".", "y_scale", "*", "self", ".", "pxpm", "\n", "for", "y", "in", "lane_poly", "[", "1", ":", ":", "2", "]", "]", "\n", "color", "=", "[", "c", "for", "_", "in", "range", "(", "int", "(", "len", "(", "lane_poly", ")", "/", "2", ")", ")", "\n", "for", "c", "in", "[", "224", ",", "224", ",", "224", ",", "int", "(", "self", ".", "alpha", "*", "255", ")", "]", "]", "\n", "self", ".", "lane_colors", ".", "append", "(", "color", ")", "\n", "\n", "", "try", ":", "\n", "            ", "self", ".", "window", "=", "pyglet", ".", "window", ".", "Window", "(", "width", "=", "self", ".", "width", ",", "\n", "height", "=", "self", ".", "height", ")", "\n", "pyglet", ".", "gl", ".", "glClearColor", "(", "0.125", ",", "0.125", ",", "0.125", ",", "self", ".", "alpha", ")", "\n", "self", ".", "window", ".", "clear", "(", ")", "\n", "self", ".", "window", ".", "switch_to", "(", ")", "\n", "self", ".", "window", ".", "dispatch_events", "(", ")", "\n", "self", ".", "lane_batch", "=", "pyglet", ".", "graphics", ".", "Batch", "(", ")", "\n", "self", ".", "_add_lane_polys", "(", ")", "\n", "self", ".", "lane_batch", ".", "draw", "(", ")", "\n", "buffer", "=", "pyglet", ".", "image", ".", "get_buffer_manager", "(", ")", ".", "get_color_buffer", "(", ")", "\n", "image_data", "=", "buffer", ".", "get_image_data", "(", ")", "\n", "frame", "=", "np", ".", "fromstring", "(", "image_data", ".", "data", ",", "dtype", "=", "np", ".", "uint8", ",", "sep", "=", "''", ")", "\n", "frame", "=", "frame", ".", "reshape", "(", "buffer", ".", "height", ",", "buffer", ".", "width", ",", "4", ")", "\n", "self", ".", "frame", "=", "frame", "[", ":", ":", "-", "1", ",", ":", ",", "0", ":", "3", "]", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "self", ".", "network", "=", "self", ".", "frame", ".", "copy", "(", ")", "\n", "print", "(", "'Rendering with frame {} x {}...'", "\n", ".", "format", "(", "self", ".", "width", ",", "self", ".", "height", ")", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "self", ".", "window", "=", "None", "\n", "self", ".", "frame", "=", "None", "\n", "warnings", ".", "warn", "(", "\"Cannot access display. Aborting.\"", ",", "ResourceWarning", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer.render": [[181, 305], ["pyglet.gl.glClearColor", "pyglet_renderer.PygletRenderer.window.clear", "pyglet_renderer.PygletRenderer.window.switch_to", "pyglet_renderer.PygletRenderer.window.dispatch_events", "pyglet.graphics.Batch", "pyglet_renderer.PygletRenderer._add_lane_polys", "pyglet_renderer.PygletRenderer.lane_batch.draw", "pyglet.graphics.Batch", "pyglet_renderer.PygletRenderer._add_vehicle_polys", "pyglet_renderer.PygletRenderer.vehicle_batch.draw", "pyglet.image.get_buffer_manager().get_color_buffer", "pyglet.image.get_buffer_manager().get_color_buffer.get_image_data", "numpy.fromstring", "frame.reshape.reshape.reshape", "pyglet_renderer.PygletRenderer.window.flip", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "pyglet_renderer.PygletRenderer._truncate_colormap", "pyglet_renderer.PygletRenderer._truncate_colormap", "pyglet_renderer.PygletRenderer._add_vehicle_polys", "pyglet_renderer.PygletRenderer._add_vehicle_polys", "cv2.imwrite", "pyglet_renderer.PygletRenderer.data.append", "pyglet_renderer.PygletRenderer._truncate_colormap", "pyglet_renderer.PygletRenderer._truncate_colormap", "pyglet.image.get_buffer_manager", "ValueError", "int", "int", "int", "int", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "pyglet_renderer.PygletRenderer.", "pyglet_renderer.PygletRenderer.", "pyglet_renderer.PygletRenderer.", "pyglet_renderer.PygletRenderer."], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer._add_lane_polys", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer._add_vehicle_polys", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer._truncate_colormap", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer._truncate_colormap", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer._add_vehicle_polys", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer._add_vehicle_polys", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer._truncate_colormap", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer._truncate_colormap"], ["", "", "def", "render", "(", "self", ",", "\n", "human_orientations", ",", "\n", "machine_orientations", ",", "\n", "human_dynamics", ",", "\n", "machine_dynamics", ",", "\n", "human_logs", ",", "\n", "machine_logs", ")", ":", "\n", "        ", "\"\"\"Update the rendering frame.\n\n        Parameters\n        ----------\n        human_orientations : list\n            A list contains orientations of all human vehicles\n            An orientation is a list contains [x, y, angle].\n        machine_orientations : list\n            A list contains orientations of all RL vehicles\n            An orientation is a list contains [x, y, angle].\n        human_dynamics : list\n            A list contains the speed of all human vehicles normalized by\n            max speed, i.e., speed/max_speed\n            This is used to dynamically color human vehicles based on its\n            velocity.\n        machine_dynamics : list\n            A list contains the speed of all RL vehicles normalized by\n            max speed, i.e., speed/max_speed\n            This is used to dynamically color RL vehicles based on its\n            velocity.\n        human_logs : list\n            A list contains the timestep (ms), timedelta (ms), and id of\n            all human vehicles\n        machine_logs : list\n            A list contains the timestep (ms), timedelta (ms), and id of\n            all RL vehicles\n        \"\"\"", "\n", "if", "self", ".", "save_render", ":", "\n", "            ", "_human_orientations", "=", "copy", ".", "deepcopy", "(", "human_orientations", ")", "\n", "_machine_orientations", "=", "copy", ".", "deepcopy", "(", "machine_orientations", ")", "\n", "_human_dynamics", "=", "copy", ".", "deepcopy", "(", "human_dynamics", ")", "\n", "_machine_dynamics", "=", "copy", ".", "deepcopy", "(", "machine_dynamics", ")", "\n", "_human_logs", "=", "copy", ".", "deepcopy", "(", "human_logs", ")", "\n", "_machine_logs", "=", "copy", ".", "deepcopy", "(", "machine_logs", ")", "\n", "\n", "", "self", ".", "time", "+=", "1", "\n", "\n", "pyglet", ".", "gl", ".", "glClearColor", "(", "0.125", ",", "0.125", ",", "0.125", ",", "self", ".", "alpha", ")", "\n", "self", ".", "window", ".", "clear", "(", ")", "\n", "self", ".", "window", ".", "switch_to", "(", ")", "\n", "self", ".", "window", ".", "dispatch_events", "(", ")", "\n", "\n", "self", ".", "lane_batch", "=", "pyglet", ".", "graphics", ".", "Batch", "(", ")", "\n", "self", ".", "_add_lane_polys", "(", ")", "\n", "self", ".", "lane_batch", ".", "draw", "(", ")", "\n", "self", ".", "vehicle_batch", "=", "pyglet", ".", "graphics", ".", "Batch", "(", ")", "\n", "if", "\"drgb\"", "in", "self", ".", "mode", ":", "\n", "            ", "human_cmap", "=", "self", ".", "_truncate_colormap", "(", "cm", ".", "Greens", ",", "0.2", ",", "0.8", ")", "\n", "machine_cmap", "=", "self", ".", "_truncate_colormap", "(", "cm", ".", "Blues", ",", "0.2", ",", "0.8", ")", "\n", "human_conditions", "=", "[", "\n", "(", "255", "*", "np", ".", "array", "(", "human_cmap", "(", "d", ")", "[", ":", "3", "]", "+", "(", "self", ".", "alpha", ",", ")", ")", ")", "\n", ".", "astype", "(", "np", ".", "uint8", ")", ".", "tolist", "(", ")", "\n", "for", "d", "in", "human_dynamics", "]", "\n", "machine_conditions", "=", "[", "\n", "(", "255", "*", "np", ".", "array", "(", "machine_cmap", "(", "d", ")", "[", ":", "3", "]", "+", "(", "self", ".", "alpha", ",", ")", ")", ")", "\n", ".", "astype", "(", "np", ".", "uint8", ")", ".", "tolist", "(", ")", "\n", "for", "d", "in", "machine_dynamics", "]", "\n", "\n", "", "elif", "\"dgray\"", "in", "self", ".", "mode", ":", "\n", "            ", "human_cmap", "=", "self", ".", "_truncate_colormap", "(", "cm", ".", "binary", ",", "0.55", ",", "0.95", ")", "\n", "machine_cmap", "=", "self", ".", "_truncate_colormap", "(", "cm", ".", "binary", ",", "0.05", ",", "0.45", ")", "\n", "human_conditions", "=", "[", "\n", "(", "255", "*", "np", ".", "array", "(", "human_cmap", "(", "d", ")", "[", ":", "3", "]", "+", "(", "self", ".", "alpha", ",", ")", ")", ")", "\n", ".", "astype", "(", "np", ".", "uint8", ")", ".", "tolist", "(", ")", "\n", "for", "d", "in", "human_dynamics", "]", "\n", "machine_conditions", "=", "[", "\n", "(", "255", "*", "np", ".", "array", "(", "machine_cmap", "(", "d", ")", "[", ":", "3", "]", "+", "(", "self", ".", "alpha", ",", ")", ")", ")", "\n", ".", "astype", "(", "np", ".", "uint8", ")", ".", "tolist", "(", ")", "\n", "for", "d", "in", "machine_dynamics", "]", "\n", "\n", "", "elif", "\"rgb\"", "in", "self", ".", "mode", ":", "\n", "            ", "human_conditions", "=", "[", "\n", "[", "0", ",", "225", ",", "0", ",", "int", "(", "255", "*", "self", ".", "alpha", ")", "]", "for", "d", "in", "human_dynamics", "]", "\n", "machine_conditions", "=", "[", "\n", "[", "0", ",", "150", ",", "200", ",", "int", "(", "255", "*", "self", ".", "alpha", ")", "]", "for", "d", "in", "machine_dynamics", "]", "\n", "\n", "", "elif", "\"gray\"", "in", "self", ".", "mode", ":", "\n", "            ", "human_conditions", "=", "[", "\n", "[", "100", ",", "100", ",", "100", ",", "int", "(", "255", "*", "self", ".", "alpha", ")", "]", "for", "d", "in", "human_dynamics", "]", "\n", "machine_conditions", "=", "[", "\n", "[", "150", ",", "150", ",", "150", ",", "int", "(", "255", "*", "self", ".", "alpha", ")", "]", "for", "d", "in", "machine_dynamics", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown mode: {}\"", ".", "format", "(", "self", ".", "mode", ")", ")", "\n", "\n", "", "self", ".", "_add_vehicle_polys", "(", "\n", "human_orientations", ",", "\n", "human_conditions", ",", "0", "\n", ")", "\n", "if", "self", ".", "show_radius", ":", "\n", "            ", "self", ".", "_add_vehicle_polys", "(", "\n", "machine_orientations", ",", "\n", "machine_conditions", ",", "self", ".", "sight_radius", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_add_vehicle_polys", "(", "\n", "machine_orientations", ",", "\n", "machine_conditions", ",", "0", "\n", ")", "\n", "", "self", ".", "vehicle_batch", ".", "draw", "(", ")", "\n", "\n", "buffer", "=", "pyglet", ".", "image", ".", "get_buffer_manager", "(", ")", ".", "get_color_buffer", "(", ")", "\n", "image_data", "=", "buffer", ".", "get_image_data", "(", ")", "\n", "frame", "=", "np", ".", "fromstring", "(", "image_data", ".", "data", ",", "dtype", "=", "np", ".", "uint8", ",", "sep", "=", "''", ")", "\n", "frame", "=", "frame", ".", "reshape", "(", "buffer", ".", "height", ",", "buffer", ".", "width", ",", "4", ")", "\n", "self", ".", "frame", "=", "frame", "[", ":", ":", "-", "1", ",", ":", ",", "0", ":", "3", "]", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "self", ".", "window", ".", "flip", "(", ")", "\n", "\n", "if", "self", ".", "save_render", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "\"%s/frame_%06d.png\"", "%", "\n", "(", "self", ".", "path", ",", "self", ".", "time", ")", ",", "self", ".", "frame", ")", "\n", "self", ".", "data", ".", "append", "(", "[", "_human_orientations", ",", "_machine_orientations", ",", "\n", "_human_dynamics", ",", "_machine_dynamics", ",", "\n", "_human_logs", ",", "_machine_logs", "]", ")", "\n", "", "if", "\"gray\"", "in", "self", ".", "mode", ":", "\n", "            ", "return", "self", ".", "frame", "[", ":", ",", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "frame", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer.close": [[306, 316], ["print", "pyglet_renderer.PygletRenderer.window.close", "print", "numpy.save"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Terminate the renderer.\"\"\"", "\n", "print", "(", "'Closing renderer...'", ")", "\n", "save_path", "=", "''", "\n", "if", "self", ".", "save_render", ":", "\n", "            ", "save_path", "=", "'%s/data_%06d.npy'", "%", "(", "self", ".", "path", ",", "self", ".", "time", ")", "\n", "np", ".", "save", "(", "save_path", ",", "self", ".", "data", ")", "\n", "", "self", ".", "window", ".", "close", "(", ")", "\n", "print", "(", "'Goodbye!'", ")", "\n", "return", "save_path", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer.get_sight": [[317, 353], ["int", "int", "int", "int", "numpy.zeros", "cv2.circle", "cv2.bitwise_and", "imutils.rotate", "int", "cv2.imwrite", "int", "int"], "methods", ["None"], ["", "def", "get_sight", "(", "self", ",", "orientation", ",", "veh_id", ")", ":", "\n", "        ", "\"\"\"Return the local observation of a vehicle.\n\n        Parameters\n        ----------\n        orientation : list\n            An orientation is a list contains [x, y, angle]\n        veh_id : str\n            The vehicle to observe for\n        \"\"\"", "\n", "x", ",", "y", ",", "ang", "=", "orientation", "\n", "x", "=", "(", "x", "-", "self", ".", "x_shift", ")", "*", "self", ".", "x_scale", "*", "self", ".", "pxpm", "\n", "y", "=", "(", "y", "-", "self", ".", "y_shift", ")", "*", "self", ".", "y_scale", "*", "self", ".", "pxpm", "\n", "x_med", "=", "x", "\n", "y_med", "=", "self", ".", "height", "-", "y", "\n", "sight_radius", "=", "self", ".", "sight_radius", "*", "self", ".", "pxpm", "\n", "x_min", "=", "int", "(", "x_med", "-", "sight_radius", ")", "\n", "y_min", "=", "int", "(", "y_med", "-", "sight_radius", ")", "\n", "x_max", "=", "int", "(", "x_med", "+", "sight_radius", ")", "\n", "y_max", "=", "int", "(", "y_med", "+", "sight_radius", ")", "\n", "fixed_sight", "=", "self", ".", "frame", "[", "y_min", ":", "y_max", ",", "x_min", ":", "x_max", "]", "\n", "height", ",", "width", "=", "fixed_sight", ".", "shape", "[", "0", ":", "2", "]", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ",", "np", ".", "uint8", ")", "\n", "cv2", ".", "circle", "(", "mask", ",", "(", "int", "(", "sight_radius", ")", ",", "int", "(", "sight_radius", ")", ")", ",", "\n", "int", "(", "sight_radius", ")", ",", "(", "255", ",", "255", ",", "255", ")", ",", "thickness", "=", "-", "1", ")", "\n", "rotated_sight", "=", "cv2", ".", "bitwise_and", "(", "fixed_sight", ",", "fixed_sight", ",", "mask", "=", "mask", ")", "\n", "rotated_sight", "=", "imutils", ".", "rotate", "(", "rotated_sight", ",", "ang", ")", "\n", "\n", "if", "self", ".", "save_render", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "\"%s/sight_%s_%06d.png\"", "%", "\n", "(", "self", ".", "path", ",", "veh_id", ",", "self", ".", "time", ")", ",", "\n", "rotated_sight", ")", "\n", "", "if", "\"gray\"", "in", "self", ".", "mode", ":", "\n", "            ", "return", "rotated_sight", "[", ":", ",", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "rotated_sight", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer._add_lane_polys": [[354, 358], ["zip", "pyglet_renderer.PygletRenderer._add_line"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer._add_line"], ["", "", "def", "_add_lane_polys", "(", "self", ")", ":", "\n", "        ", "\"\"\"Render road network polygons.\"\"\"", "\n", "for", "lane_poly", ",", "lane_color", "in", "zip", "(", "self", ".", "lane_polys", ",", "self", ".", "lane_colors", ")", ":", "\n", "            ", "self", ".", "_add_line", "(", "lane_poly", ",", "lane_color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer._add_vehicle_polys": [[359, 378], ["zip", "pyglet_renderer.PygletRenderer._add_triangle", "pyglet_renderer.PygletRenderer._add_circle"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer._add_triangle", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer._add_circle"], ["", "", "def", "_add_vehicle_polys", "(", "self", ",", "orientations", ",", "colors", ",", "sight_radius", ")", ":", "\n", "        ", "\"\"\"Render vehicle polygons.\n\n        Parameters\n        ----------\n        orientations : list\n            A list of orientations\n            An orientation is a list contains [x, y, angle].\n        colors : list\n            A list of colors corresponding to the vehicle orientations\n        sight_radius : int\n            Set the radius of observation for RL vehicles (meter)\n        \"\"\"", "\n", "for", "orientation", ",", "color", "in", "zip", "(", "orientations", ",", "colors", ")", ":", "\n", "            ", "x", ",", "y", ",", "ang", "=", "orientation", "\n", "x", "=", "(", "x", "-", "self", ".", "x_shift", ")", "*", "self", ".", "x_scale", "*", "self", ".", "pxpm", "\n", "y", "=", "(", "y", "-", "self", ".", "y_shift", ")", "*", "self", ".", "y_scale", "*", "self", ".", "pxpm", "\n", "self", ".", "_add_triangle", "(", "(", "x", ",", "y", ")", ",", "ang", ",", "5", ",", "color", ")", "\n", "self", ".", "_add_circle", "(", "(", "x", ",", "y", ")", ",", "sight_radius", ",", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer._add_line": [[379, 395], ["int", "pyglet.graphics.Group", "pyglet_renderer.PygletRenderer.lane_batch.add_indexed", "len", "range"], "methods", ["None"], ["", "", "def", "_add_line", "(", "self", ",", "lane_poly", ",", "lane_color", ")", ":", "\n", "        ", "\"\"\"Render road network polygons.\n\n        Parameters\n        ----------\n        lane_poly : list\n            A list of road network polygons\n        lane_color : list\n            A list of colors corresponding to the road network polygons\n        \"\"\"", "\n", "num", "=", "int", "(", "len", "(", "lane_poly", ")", "/", "2", ")", "\n", "index", "=", "[", "x", "for", "x", "in", "range", "(", "num", ")", "]", "\n", "group", "=", "pyglet", ".", "graphics", ".", "Group", "(", ")", "\n", "self", ".", "lane_batch", ".", "add_indexed", "(", "\n", "num", ",", "pyglet", ".", "gl", ".", "GL_LINE_STRIP", ",", "group", ",", "index", ",", "\n", "(", "\"v2f\"", ",", "lane_poly", ")", ",", "(", "\"c4B\"", ",", "lane_color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer._add_triangle": [[396, 430], ["numpy.radians", "pyglet.graphics.Group", "pyglet_renderer.PygletRenderer.vehicle_batch.add_indexed", "range", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos"], "methods", ["None"], ["", "def", "_add_triangle", "(", "self", ",", "center", ",", "angle", ",", "size", ",", "color", ")", ":", "\n", "        ", "\"\"\"Render a vehicle as a triangle.\n\n        Parameters\n        ----------\n        center : tuple\n            The center coordinate of the vehicle\n        angle : float\n            The angle of the vehicle\n        size : int\n            The size of the rendered triangle\n        color : list\n            The color of the vehicle  [r, g, b].\n        \"\"\"", "\n", "cx", ",", "cy", "=", "center", "\n", "ang", "=", "np", ".", "radians", "(", "angle", ")", "\n", "s", "=", "size", "*", "self", ".", "pxpm", "\n", "pt1", "=", "[", "cx", ",", "cy", "]", "\n", "pt1_", "=", "[", "cx", "-", "s", "*", "self", ".", "x_scale", "*", "np", ".", "sin", "(", "ang", ")", ",", "\n", "cy", "-", "s", "*", "self", ".", "y_scale", "*", "np", ".", "cos", "(", "ang", ")", "]", "\n", "pt2", "=", "[", "pt1_", "[", "0", "]", "+", "0.25", "*", "s", "*", "self", ".", "x_scale", "*", "np", ".", "sin", "(", "np", ".", "pi", "/", "2", "-", "ang", ")", ",", "\n", "pt1_", "[", "1", "]", "-", "0.25", "*", "s", "*", "self", ".", "y_scale", "*", "np", ".", "cos", "(", "np", ".", "pi", "/", "2", "-", "ang", ")", "]", "\n", "pt3", "=", "[", "pt1_", "[", "0", "]", "-", "0.25", "*", "s", "*", "self", ".", "x_scale", "*", "np", ".", "sin", "(", "np", ".", "pi", "/", "2", "-", "ang", ")", ",", "\n", "pt1_", "[", "1", "]", "+", "0.25", "*", "s", "*", "self", ".", "y_scale", "*", "np", ".", "cos", "(", "np", ".", "pi", "/", "2", "-", "ang", ")", "]", "\n", "vertex_list", "=", "[", "]", "\n", "vertex_color", "=", "[", "]", "\n", "for", "point", "in", "[", "pt1", ",", "pt2", ",", "pt3", "]", ":", "\n", "            ", "vertex_list", "+=", "point", "\n", "vertex_color", "+=", "color", "\n", "", "index", "=", "[", "x", "for", "x", "in", "range", "(", "3", ")", "]", "\n", "group", "=", "pyglet", ".", "graphics", ".", "Group", "(", ")", "\n", "self", ".", "vehicle_batch", ".", "add_indexed", "(", "\n", "3", ",", "pyglet", ".", "gl", ".", "GL_POLYGON", ",", "group", ",", "index", ",", "\n", "(", "\"v2f\"", ",", "vertex_list", ")", ",", "(", "\"c4B\"", ",", "vertex_color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer._add_circle": [[431, 461], ["int", "range", "pyglet.graphics.Group", "pyglet_renderer.PygletRenderer.vehicle_batch.add_indexed", "numpy.radians", "range", "numpy.cos", "numpy.sin", "float"], "methods", ["None"], ["", "def", "_add_circle", "(", "self", ",", "center", ",", "radius", ",", "color", ")", ":", "\n", "        ", "\"\"\"Render a vehicle as a circle or render its observation radius.\n\n        Parameters\n        ----------\n        center : tuple\n            The center coordinate of the vehicle\n        radius : float\n            The size of the rendered vehicle or the radius of observation\n        color : list\n            The color of the vehicle  [r, g, b].\n        \"\"\"", "\n", "if", "radius", "==", "0", ":", "\n", "            ", "return", "\n", "", "cx", ",", "cy", "=", "center", "\n", "radius", "=", "radius", "*", "self", ".", "pxpm", "\n", "pxpm", "=", "int", "(", "self", ".", "pxpm", "*", "50", ")", "\n", "vertex_list", "=", "[", "]", "\n", "vertex_color", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "pxpm", ")", ":", "\n", "            ", "angle", "=", "np", ".", "radians", "(", "float", "(", "idx", ")", "/", "pxpm", "*", "360.0", ")", "\n", "x", "=", "radius", "*", "self", ".", "x_scale", "*", "np", ".", "cos", "(", "angle", ")", "+", "cx", "\n", "y", "=", "radius", "*", "self", ".", "y_scale", "*", "np", ".", "sin", "(", "angle", ")", "+", "cy", "\n", "vertex_list", "+=", "[", "x", ",", "y", "]", "\n", "vertex_color", "+=", "color", "\n", "", "index", "=", "[", "x", "for", "x", "in", "range", "(", "pxpm", ")", "]", "\n", "group", "=", "pyglet", ".", "graphics", ".", "Group", "(", ")", "\n", "self", ".", "vehicle_batch", ".", "add_indexed", "(", "\n", "pxpm", ",", "pyglet", ".", "gl", ".", "GL_LINE_LOOP", ",", "group", ",", "index", ",", "\n", "(", "\"v2f\"", ",", "vertex_list", ")", ",", "(", "\"c4B\"", ",", "vertex_color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer._truncate_colormap": [[462, 487], ["matplotlib.LinearSegmentedColormap.from_list", "matplotlib.LinearSegmentedColormap.from_list", "cmap", "numpy.linspace"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_truncate_colormap", "(", "cmap", ",", "minval", "=", "0.25", ",", "maxval", "=", "0.75", ",", "n", "=", "100", ")", ":", "\n", "        ", "\"\"\"Truncate a matplotlib colormap.\n\n        Parameters\n        ----------\n        cmap : matplotlib.colors.LinearSegmentedColormap\n            Original colormap\n        minval : float\n            Minimum value of the truncated colormap\n        maxval : float\n            Maximum value of the truncated colormap\n        n : int\n            Number of RGB quantization levels of the truncated colormap\n\n        Returns\n        -------\n        matplotlib.colors.LinearSegmentedColormap\n            truncated colormap\n        \"\"\"", "\n", "new_cmap", "=", "colors", ".", "LinearSegmentedColormap", ".", "from_list", "(", "\n", "'trunc({n},{a:.2f},{b:.2f})'", "\n", ".", "format", "(", "n", "=", "cmap", ".", "name", ",", "a", "=", "minval", ",", "b", "=", "maxval", ")", ",", "\n", "cmap", "(", "np", ".", "linspace", "(", "minval", ",", "maxval", ",", "n", ")", ")", ")", "\n", "return", "new_cmap", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.TrafficLightParams.__init__": [[57, 69], ["dict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "baseline", "=", "False", ")", ":", "\n", "        ", "\"\"\"Instantiate base traffic light.\n\n        Attributes\n        ----------\n        baseline: bool\n        \"\"\"", "\n", "# traffic light xml properties", "\n", "self", ".", "__tls_properties", "=", "dict", "(", ")", "\n", "\n", "# all traffic light parameters are set to default baseline values", "\n", "self", ".", "baseline", "=", "baseline", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.TrafficLightParams.add": [[70, 162], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "\n", "node_id", ",", "\n", "tls_type", "=", "\"static\"", ",", "\n", "programID", "=", "10", ",", "\n", "offset", "=", "None", ",", "\n", "phases", "=", "None", ",", "\n", "maxGap", "=", "None", ",", "\n", "detectorGap", "=", "None", ",", "\n", "showDetectors", "=", "None", ",", "\n", "file", "=", "None", ",", "\n", "freq", "=", "None", ")", ":", "\n", "        ", "\"\"\"Add a traffic light component to the network.\n\n        When generating networks using xml files, using this method to add a\n        traffic light will explicitly place the traffic light in the requested\n        node of the generated network.\n\n        If traffic lights are not added here but are already present in the\n        network (e.g. through a prebuilt net.xml file), then the traffic light\n        class will identify and add them separately.\n\n        Parameters\n        ----------\n        node_id : str\n            name of the node with traffic lights\n        tls_type : str, optional\n            type of the traffic light (see Note)\n        programID : str, optional\n            id of the traffic light program (see Note)\n        offset : int, optional\n            initial time offset of the program\n        phases : list  of dict, optional\n            list of phases to be followed by the traffic light, defaults\n            to default sumo traffic light behavior. Each element in the list\n            must consist of a dict with two keys:\n\n            * \"duration\": length of the current phase cycle (in sec)\n            * \"state\": string consist the sequence of states in the phase\n            * \"minDur\": optional\n                The minimum duration of the phase when using type actuated\n            * \"maxDur\": optional\n                The maximum duration of the phase when using type actuated\n\n        maxGap : int, optional\n            describes the maximum time gap between successive vehicle that will\n            cause the current phase to be prolonged, **used for actuated\n            traffic lights**\n        detectorGap : int, optional\n            used for actuated traffic lights\n            determines the time distance between the (automatically generated)\n            detector and the stop line in seconds (at each lanes maximum\n            speed), **used for actuated traffic lights**\n        showDetectors : bool, optional\n            toggles whether or not detectors are shown in sumo-gui, **used for\n            actuated traffic lights**\n        file : str, optional\n            which file the detector shall write results into\n        freq : int, optional\n            the period over which collected values shall be aggregated\n\n        Note\n        ----\n        For information on defining traffic light properties, see:\n        http://sumo.dlr.de/wiki/Simulation/Traffic_Lights#Defining_New_TLS-Programs\n        \"\"\"", "\n", "# prepare the data needed to generate xml files", "\n", "self", ".", "__tls_properties", "[", "node_id", "]", "=", "{", "\"id\"", ":", "node_id", ",", "\"type\"", ":", "tls_type", "}", "\n", "\n", "if", "programID", ":", "\n", "            ", "self", ".", "__tls_properties", "[", "node_id", "]", "[", "\"programID\"", "]", "=", "programID", "\n", "\n", "", "if", "offset", ":", "\n", "            ", "self", ".", "__tls_properties", "[", "node_id", "]", "[", "\"offset\"", "]", "=", "offset", "\n", "\n", "", "if", "phases", ":", "\n", "            ", "self", ".", "__tls_properties", "[", "node_id", "]", "[", "\"phases\"", "]", "=", "phases", "\n", "\n", "", "if", "tls_type", "==", "\"actuated\"", ":", "\n", "# Required parameters", "\n", "            ", "self", ".", "__tls_properties", "[", "node_id", "]", "[", "\"max-gap\"", "]", "=", "maxGap", "if", "maxGap", "else", "MAX_GAP", "\n", "self", ".", "__tls_properties", "[", "node_id", "]", "[", "\"detector-gap\"", "]", "=", "detectorGap", "if", "detectorGap", "else", "DETECTOR_GAP", "\n", "self", ".", "__tls_properties", "[", "node_id", "]", "[", "\"show-detectors\"", "]", "=", "showDetectors", "if", "showDetectors", "else", "SHOW_DETECTORS", "\n", "\n", "# Optional parameters", "\n", "if", "file", ":", "\n", "                ", "self", ".", "__tls_properties", "[", "node_id", "]", "[", "\"file\"", "]", "=", "file", "\n", "\n", "", "if", "freq", ":", "\n", "                ", "self", ".", "__tls_properties", "[", "node_id", "]", "[", "\"freq\"", "]", "=", "freq", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.TrafficLightParams.get_properties": [[163, 170], ["None"], "methods", ["None"], ["", "", "", "def", "get_properties", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return traffic light properties.\n\n        This is meant to be used by the generator to import traffic light data\n        to the .net.xml file\n        \"\"\"", "\n", "return", "self", ".", "__tls_properties", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.TrafficLightParams.actuated_default": [[171, 216], ["str", "str", "str", "str"], "methods", ["None"], ["", "def", "actuated_default", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the default values for an actuated network.\n\n        An actuated network is a network for a system where\n        all junctions are actuated traffic lights.\n\n        Returns\n        -------\n        tl_logic : dict\n            traffic light logic\n        \"\"\"", "\n", "tl_type", "=", "\"actuated\"", "\n", "program_id", "=", "1", "\n", "max_gap", "=", "3.0", "\n", "detector_gap", "=", "0.8", "\n", "show_detectors", "=", "True", "\n", "phases", "=", "[", "{", "\n", "\"duration\"", ":", "\"31\"", ",", "\n", "\"minDur\"", ":", "\"8\"", ",", "\n", "\"maxDur\"", ":", "\"45\"", ",", "\n", "\"state\"", ":", "\"GrGr\"", "\n", "}", ",", "{", "\n", "\"duration\"", ":", "\"6\"", ",", "\n", "\"minDur\"", ":", "\"3\"", ",", "\n", "\"maxDur\"", ":", "\"6\"", ",", "\n", "\"state\"", ":", "\"yryr\"", "\n", "}", ",", "{", "\n", "\"duration\"", ":", "\"31\"", ",", "\n", "\"minDur\"", ":", "\"8\"", ",", "\n", "\"maxDur\"", ":", "\"45\"", ",", "\n", "\"state\"", ":", "\"rGrG\"", "\n", "}", ",", "{", "\n", "\"duration\"", ":", "\"6\"", ",", "\n", "\"minDur\"", ":", "\"3\"", ",", "\n", "\"maxDur\"", ":", "\"6\"", ",", "\n", "\"state\"", ":", "\"ryry\"", "\n", "}", "]", "\n", "\n", "return", "{", "\n", "\"tl_type\"", ":", "str", "(", "tl_type", ")", ",", "\n", "\"program_id\"", ":", "str", "(", "program_id", ")", ",", "\n", "\"max_gap\"", ":", "str", "(", "max_gap", ")", ",", "\n", "\"detector_gap\"", ":", "str", "(", "detector_gap", ")", ",", "\n", "\"show_detectors\"", ":", "show_detectors", ",", "\n", "\"phases\"", ":", "phases", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.VehicleParams.__init__": [[227, 255], ["collections.OrderedDict", "dict", "dict"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Instantiate the base vehicle class.\"\"\"", "\n", "self", ".", "ids", "=", "[", "]", "# ids of all vehicles", "\n", "\n", "# vehicles: Key = Vehicle ID, Value = Dictionary describing the vehicle", "\n", "# Ordered dictionary used to keep neural net inputs in order", "\n", "self", ".", "__vehicles", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "\n", "#: total number of vehicles in the network", "\n", "self", ".", "num_vehicles", "=", "0", "\n", "#: int : number of rl vehicles in the network", "\n", "self", ".", "num_rl_vehicles", "=", "0", "\n", "#: int : number of unique types of vehicles in the network", "\n", "self", ".", "num_types", "=", "0", "\n", "#: list of str : types of vehicles in the network", "\n", "self", ".", "types", "=", "[", "]", "\n", "\n", "#: dict (str, str) : contains the parameters associated with each type", "\n", "#: of vehicle", "\n", "self", ".", "type_parameters", "=", "dict", "(", ")", "\n", "\n", "#: dict (str, int) : contains the minGap attribute of each type of", "\n", "#: vehicle", "\n", "self", ".", "minGap", "=", "dict", "(", ")", "\n", "\n", "#: list : initial state of the vehicles class, used for serialization", "\n", "#: purposes", "\n", "self", ".", "initial", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.VehicleParams.add": [[256, 365], ["type_params.update", "type_params.update", "params.VehicleParams.initial.append", "range", "params.VehicleParams.types.append", "params.SumoCarFollowingParams", "params.SumoLaneChangeParams", "params.VehicleParams.ids.append", "dict"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "add", "(", "self", ",", "\n", "veh_id", ",", "\n", "acceleration_controller", "=", "(", "SimCarFollowingController", ",", "{", "}", ")", ",", "\n", "lane_change_controller", "=", "(", "SimLaneChangeController", ",", "{", "}", ")", ",", "\n", "routing_controller", "=", "None", ",", "\n", "initial_speed", "=", "0", ",", "\n", "num_vehicles", "=", "0", ",", "\n", "car_following_params", "=", "None", ",", "\n", "lane_change_params", "=", "None", ",", "\n", "color", "=", "None", ")", ":", "\n", "        ", "\"\"\"Add a sequence of vehicles to the list of vehicles in the network.\n\n        Parameters\n        ----------\n        veh_id : str\n            base vehicle ID for the vehicles (will be appended by a number)\n        acceleration_controller : tup, optional\n            1st element: flow-specified acceleration controller\n            2nd element: controller parameters (may be set to None to maintain\n            default parameters)\n        lane_change_controller : tup, optional\n            1st element: flow-specified lane-changer controller\n            2nd element: controller parameters (may be set to None to maintain\n            default parameters)\n        routing_controller : tup, optional\n            1st element: flow-specified routing controller\n            2nd element: controller parameters (may be set to None to maintain\n            default parameters)\n        initial_speed : float, optional\n            initial speed of the vehicles being added (in m/s)\n        num_vehicles : int, optional\n            number of vehicles of this type to be added to the network\n        car_following_params : flow.core.params.SumoCarFollowingParams\n            Params object specifying attributes for Sumo car following model.\n        lane_change_params : flow.core.params.SumoLaneChangeParams\n            Params object specifying attributes for Sumo lane changing model.\n        \"\"\"", "\n", "if", "car_following_params", "is", "None", ":", "\n", "# FIXME: depends on simulator", "\n", "            ", "car_following_params", "=", "SumoCarFollowingParams", "(", ")", "\n", "\n", "", "if", "lane_change_params", "is", "None", ":", "\n", "# FIXME: depends on simulator", "\n", "            ", "lane_change_params", "=", "SumoLaneChangeParams", "(", ")", "\n", "\n", "", "type_params", "=", "{", "}", "\n", "type_params", ".", "update", "(", "car_following_params", ".", "controller_params", ")", "\n", "type_params", ".", "update", "(", "lane_change_params", ".", "controller_params", ")", "\n", "\n", "# This dict will be used when trying to introduce new vehicles into", "\n", "# the network via a Flow. It is passed to the vehicle kernel object", "\n", "# during environment instantiation.", "\n", "self", ".", "type_parameters", "[", "veh_id", "]", "=", "{", "\"acceleration_controller\"", ":", "acceleration_controller", ",", "\n", "\"lane_change_controller\"", ":", "lane_change_controller", ",", "\n", "\"routing_controller\"", ":", "routing_controller", ",", "\n", "\"initial_speed\"", ":", "initial_speed", ",", "\n", "\"car_following_params\"", ":", "car_following_params", ",", "\n", "\"lane_change_params\"", ":", "lane_change_params", "}", "\n", "\n", "if", "color", ":", "\n", "            ", "type_params", "[", "'color'", "]", "=", "color", "\n", "self", ".", "type_parameters", "[", "veh_id", "]", "[", "'color'", "]", "=", "color", "\n", "\n", "# TODO: delete?", "\n", "", "self", ".", "initial", ".", "append", "(", "{", "\n", "\"veh_id\"", ":", "\n", "veh_id", ",", "\n", "\"acceleration_controller\"", ":", "\n", "acceleration_controller", ",", "\n", "\"lane_change_controller\"", ":", "\n", "lane_change_controller", ",", "\n", "\"routing_controller\"", ":", "\n", "routing_controller", ",", "\n", "\"initial_speed\"", ":", "\n", "initial_speed", ",", "\n", "\"num_vehicles\"", ":", "\n", "num_vehicles", ",", "\n", "\"car_following_params\"", ":", "\n", "car_following_params", ",", "\n", "\"lane_change_params\"", ":", "\n", "lane_change_params", "\n", "}", ")", "\n", "\n", "# This is used to return the actual headways from the vehicles class.", "\n", "# It is passed to the vehicle kernel class during environment", "\n", "# instantiation.", "\n", "self", ".", "minGap", "[", "veh_id", "]", "=", "type_params", "[", "\"minGap\"", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_vehicles", ")", ":", "\n", "            ", "v_id", "=", "veh_id", "+", "'_%d'", "%", "i", "\n", "\n", "# add the vehicle to the list of vehicle ids", "\n", "self", ".", "ids", ".", "append", "(", "v_id", ")", "\n", "\n", "self", ".", "__vehicles", "[", "v_id", "]", "=", "dict", "(", ")", "\n", "\n", "# specify the type", "\n", "self", ".", "__vehicles", "[", "v_id", "]", "[", "\"type\"", "]", "=", "veh_id", "\n", "\n", "# update the number of vehicles", "\n", "self", ".", "num_vehicles", "+=", "1", "\n", "if", "acceleration_controller", "[", "0", "]", "==", "RLController", ":", "\n", "                ", "self", ".", "num_rl_vehicles", "+=", "1", "\n", "\n", "# increase the number of unique types of vehicles in the network, and", "\n", "# add the type to the list of types", "\n", "", "", "self", ".", "num_types", "+=", "1", "\n", "self", ".", "types", ".", "append", "(", "{", "\"veh_id\"", ":", "veh_id", ",", "\"type_params\"", ":", "type_params", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.VehicleParams.get_type": [[366, 375], ["None"], "methods", ["None"], ["", "def", "get_type", "(", "self", ",", "veh_id", ")", ":", "\n", "        ", "\"\"\"Return the type of a specified vehicle.\n\n        Parameters\n        ----------\n        veh_id : str\n            vehicle ID whose type the user is querying\n        \"\"\"", "\n", "return", "self", ".", "__vehicles", "[", "veh_id", "]", "[", "\"type\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.SimParams.__init__": [[416, 436], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "sim_step", "=", "0.1", ",", "\n", "render", "=", "False", ",", "\n", "restart_instance", "=", "False", ",", "\n", "emission_path", "=", "None", ",", "\n", "save_render", "=", "False", ",", "\n", "sight_radius", "=", "25", ",", "\n", "show_radius", "=", "False", ",", "\n", "pxpm", "=", "2", ",", "\n", "force_color_update", "=", "False", ")", ":", "\n", "        ", "\"\"\"Instantiate SimParams.\"\"\"", "\n", "self", ".", "sim_step", "=", "sim_step", "\n", "self", ".", "render", "=", "render", "\n", "self", ".", "restart_instance", "=", "restart_instance", "\n", "self", ".", "emission_path", "=", "emission_path", "\n", "self", ".", "save_render", "=", "save_render", "\n", "self", ".", "sight_radius", "=", "sight_radius", "\n", "self", ".", "pxpm", "=", "pxpm", "\n", "self", ".", "show_radius", "=", "show_radius", "\n", "self", ".", "force_color_update", "=", "force_color_update", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.AimsunParams.__init__": [[495, 521], ["params.SimParams.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "\n", "sim_step", "=", "0.1", ",", "\n", "render", "=", "False", ",", "\n", "restart_instance", "=", "False", ",", "\n", "emission_path", "=", "None", ",", "\n", "save_render", "=", "False", ",", "\n", "sight_radius", "=", "25", ",", "\n", "show_radius", "=", "False", ",", "\n", "pxpm", "=", "2", ",", "\n", "# set to match Flow_Aimsun.ang's scenario name", "\n", "network_name", "=", "\"Dynamic Scenario 866\"", ",", "\n", "# set to match Flow_Aimsun.ang's experiment name", "\n", "experiment_name", "=", "\"Micro SRC Experiment 867\"", ",", "\n", "# set to match Flow_Aimsun.ang's replication name", "\n", "replication_name", "=", "\"Replication 870\"", ",", "\n", "centroid_config_name", "=", "None", ",", "\n", "subnetwork_name", "=", "None", ")", ":", "\n", "        ", "\"\"\"Instantiate AimsunParams.\"\"\"", "\n", "super", "(", "AimsunParams", ",", "self", ")", ".", "__init__", "(", "\n", "sim_step", ",", "render", ",", "restart_instance", ",", "emission_path", ",", "save_render", ",", "\n", "sight_radius", ",", "show_radius", ",", "pxpm", ")", "\n", "self", ".", "network_name", "=", "network_name", "\n", "self", ".", "experiment_name", "=", "experiment_name", "\n", "self", ".", "replication_name", "=", "replication_name", "\n", "self", ".", "centroid_config_name", "=", "centroid_config_name", "\n", "self", ".", "subnetwork_name", "=", "subnetwork_name", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.SumoParams.__init__": [[593, 627], ["params.SimParams.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "\n", "port", "=", "None", ",", "\n", "sim_step", "=", "0.1", ",", "\n", "emission_path", "=", "None", ",", "\n", "lateral_resolution", "=", "None", ",", "\n", "no_step_log", "=", "True", ",", "\n", "render", "=", "False", ",", "\n", "save_render", "=", "False", ",", "\n", "sight_radius", "=", "25", ",", "\n", "show_radius", "=", "False", ",", "\n", "pxpm", "=", "2", ",", "\n", "force_color_update", "=", "False", ",", "\n", "overtake_right", "=", "False", ",", "\n", "seed", "=", "None", ",", "\n", "restart_instance", "=", "False", ",", "\n", "print_warnings", "=", "True", ",", "\n", "teleport_time", "=", "-", "1", ",", "\n", "num_clients", "=", "1", ",", "\n", "color_by_speed", "=", "False", ",", "\n", "use_ballistic", "=", "False", ")", ":", "\n", "        ", "\"\"\"Instantiate SumoParams.\"\"\"", "\n", "super", "(", "SumoParams", ",", "self", ")", ".", "__init__", "(", "\n", "sim_step", ",", "render", ",", "restart_instance", ",", "emission_path", ",", "save_render", ",", "\n", "sight_radius", ",", "show_radius", ",", "pxpm", ",", "force_color_update", ")", "\n", "self", ".", "port", "=", "port", "\n", "self", ".", "lateral_resolution", "=", "lateral_resolution", "\n", "self", ".", "no_step_log", "=", "no_step_log", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "overtake_right", "=", "overtake_right", "\n", "self", ".", "print_warnings", "=", "print_warnings", "\n", "self", ".", "teleport_time", "=", "teleport_time", "\n", "self", ".", "num_clients", "=", "num_clients", "\n", "self", ".", "color_by_speed", "=", "color_by_speed", "\n", "self", ".", "use_ballistic", "=", "use_ballistic", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.EnvParams.__init__": [[662, 677], ["float"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "additional_params", "=", "None", ",", "\n", "horizon", "=", "float", "(", "'inf'", ")", ",", "\n", "warmup_steps", "=", "0", ",", "\n", "sims_per_step", "=", "1", ",", "\n", "evaluate", "=", "False", ",", "\n", "clip_actions", "=", "True", ")", ":", "\n", "        ", "\"\"\"Instantiate EnvParams.\"\"\"", "\n", "self", ".", "additional_params", "=", "additional_params", "if", "additional_params", "is", "not", "None", "else", "{", "}", "\n", "self", ".", "horizon", "=", "horizon", "\n", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "self", ".", "sims_per_step", "=", "sims_per_step", "\n", "self", ".", "evaluate", "=", "evaluate", "\n", "self", ".", "clip_actions", "=", "clip_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.EnvParams.get_additional_param": [[678, 681], ["None"], "methods", ["None"], ["", "def", "get_additional_param", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"Return a variable from additional_params.\"\"\"", "\n", "return", "self", ".", "additional_params", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.NetParams.__init__": [[711, 721], ["params.InFlows"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "inflows", "=", "None", ",", "\n", "osm_path", "=", "None", ",", "\n", "template", "=", "None", ",", "\n", "additional_params", "=", "None", ")", ":", "\n", "        ", "\"\"\"Instantiate NetParams.\"\"\"", "\n", "self", ".", "inflows", "=", "inflows", "or", "InFlows", "(", ")", "\n", "self", ".", "osm_path", "=", "osm_path", "\n", "self", ".", "template", "=", "template", "\n", "self", ".", "additional_params", "=", "additional_params", "or", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InitialConfig.__init__": [[767, 792], ["float", "dict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "shuffle", "=", "False", ",", "\n", "spacing", "=", "\"uniform\"", ",", "\n", "min_gap", "=", "0", ",", "\n", "perturbation", "=", "0.0", ",", "\n", "x0", "=", "0", ",", "\n", "bunching", "=", "0", ",", "\n", "lanes_distribution", "=", "float", "(", "\"inf\"", ")", ",", "\n", "edges_distribution", "=", "\"all\"", ",", "\n", "additional_params", "=", "None", ")", ":", "\n", "        ", "\"\"\"Instantiate InitialConfig.\n\n        These parameters that affect the positioning of vehicle in the\n        network at the start of a rollout. By default, vehicles are uniformly\n        distributed in the network.\n        \"\"\"", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "spacing", "=", "spacing", "\n", "self", ".", "min_gap", "=", "min_gap", "\n", "self", ".", "perturbation", "=", "perturbation", "\n", "self", ".", "x0", "=", "x0", "\n", "self", ".", "bunching", "=", "bunching", "\n", "self", ".", "lanes_distribution", "=", "lanes_distribution", "\n", "self", ".", "edges_distribution", "=", "edges_distribution", "\n", "self", ".", "additional_params", "=", "additional_params", "or", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.SumoCarFollowingParams.__init__": [[848, 911], ["flow.utils.flow_warnings.deprecated_attribute", "flow.utils.flow_warnings.deprecated_attribute", "flow.utils.flow_warnings.deprecated_attribute", "flow.utils.flow_warnings.deprecated_attribute", "flow.utils.flow_warnings.deprecated_attribute", "isinstance", "logging.error", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated_attribute", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated_attribute", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated_attribute", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated_attribute", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated_attribute"], ["def", "__init__", "(", "\n", "self", ",", "\n", "speed_mode", "=", "'right_of_way'", ",", "\n", "accel", "=", "2.6", ",", "\n", "decel", "=", "4.5", ",", "\n", "sigma", "=", "0.5", ",", "\n", "tau", "=", "1.0", ",", "# past 1 at sim_step=0.1 you no longer see waves", "\n", "min_gap", "=", "2.5", ",", "\n", "max_speed", "=", "30", ",", "\n", "speed_factor", "=", "1.0", ",", "\n", "speed_dev", "=", "0.1", ",", "\n", "impatience", "=", "0.5", ",", "\n", "car_follow_model", "=", "\"IDM\"", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Instantiate SumoCarFollowingParams.\"\"\"", "\n", "# check for deprecations (minGap)", "\n", "if", "\"minGap\"", "in", "kwargs", ":", "\n", "            ", "deprecated_attribute", "(", "self", ",", "\"minGap\"", ",", "\"min_gap\"", ")", "\n", "min_gap", "=", "kwargs", "[", "\"minGap\"", "]", "\n", "\n", "# check for deprecations (maxSpeed)", "\n", "", "if", "\"maxSpeed\"", "in", "kwargs", ":", "\n", "            ", "deprecated_attribute", "(", "self", ",", "\"maxSpeed\"", ",", "\"max_speed\"", ")", "\n", "max_speed", "=", "kwargs", "[", "\"maxSpeed\"", "]", "\n", "\n", "# check for deprecations (speedFactor)", "\n", "", "if", "\"speedFactor\"", "in", "kwargs", ":", "\n", "            ", "deprecated_attribute", "(", "self", ",", "\"speedFactor\"", ",", "\"speed_factor\"", ")", "\n", "speed_factor", "=", "kwargs", "[", "\"speedFactor\"", "]", "\n", "\n", "# check for deprecations (speedDev)", "\n", "", "if", "\"speedDev\"", "in", "kwargs", ":", "\n", "            ", "deprecated_attribute", "(", "self", ",", "\"speedDev\"", ",", "\"speed_dev\"", ")", "\n", "speed_dev", "=", "kwargs", "[", "\"speedDev\"", "]", "\n", "\n", "# check for deprecations (carFollowModel)", "\n", "", "if", "\"carFollowModel\"", "in", "kwargs", ":", "\n", "            ", "deprecated_attribute", "(", "self", ",", "\"carFollowModel\"", ",", "\"car_follow_model\"", ")", "\n", "car_follow_model", "=", "kwargs", "[", "\"carFollowModel\"", "]", "\n", "\n", "# create a controller_params dict with all the specified parameters", "\n", "", "self", ".", "controller_params", "=", "{", "\n", "\"accel\"", ":", "accel", ",", "\n", "\"decel\"", ":", "decel", ",", "\n", "\"sigma\"", ":", "sigma", ",", "\n", "\"tau\"", ":", "tau", ",", "\n", "\"minGap\"", ":", "min_gap", ",", "\n", "\"maxSpeed\"", ":", "max_speed", ",", "\n", "\"speedFactor\"", ":", "speed_factor", ",", "\n", "\"speedDev\"", ":", "speed_dev", ",", "\n", "\"impatience\"", ":", "impatience", ",", "\n", "\"carFollowModel\"", ":", "car_follow_model", ",", "\n", "}", "\n", "\n", "# adjust the speed mode value", "\n", "if", "isinstance", "(", "speed_mode", ",", "str", ")", "and", "speed_mode", "in", "SPEED_MODES", ":", "\n", "            ", "speed_mode", "=", "SPEED_MODES", "[", "speed_mode", "]", "\n", "", "elif", "not", "(", "isinstance", "(", "speed_mode", ",", "int", ")", "\n", "or", "isinstance", "(", "speed_mode", ",", "float", ")", ")", ":", "\n", "            ", "logging", ".", "error", "(", "\"Setting speed mode of to default.\"", ")", "\n", "speed_mode", "=", "SPEED_MODES", "[", "\"obey_safe_speed\"", "]", "\n", "\n", "", "self", ".", "speed_mode", "=", "speed_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.SumoLaneChangeParams.__init__": [[1022, 1134], ["flow.utils.flow_warnings.deprecated_attribute", "flow.utils.flow_warnings.deprecated_attribute", "flow.utils.flow_warnings.deprecated_attribute", "flow.utils.flow_warnings.deprecated_attribute", "flow.utils.flow_warnings.deprecated_attribute", "flow.utils.flow_warnings.deprecated_attribute", "flow.utils.flow_warnings.deprecated_attribute", "flow.utils.flow_warnings.deprecated_attribute", "flow.utils.flow_warnings.deprecated_attribute", "flow.utils.flow_warnings.deprecated_attribute", "flow.utils.flow_warnings.deprecated_attribute", "logging.error", "isinstance", "str", "str", "str", "str", "logging.error", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated_attribute", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated_attribute", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated_attribute", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated_attribute", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated_attribute", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated_attribute", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated_attribute", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated_attribute", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated_attribute", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated_attribute", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated_attribute"], ["def", "__init__", "(", "self", ",", "\n", "lane_change_mode", "=", "\"no_lc_safe\"", ",", "\n", "model", "=", "\"LC2013\"", ",", "\n", "lc_strategic", "=", "1.0", ",", "\n", "lc_cooperative", "=", "1.0", ",", "\n", "lc_speed_gain", "=", "1.0", ",", "\n", "lc_keep_right", "=", "1.0", ",", "\n", "lc_look_ahead_left", "=", "2.0", ",", "\n", "lc_speed_gain_right", "=", "1.0", ",", "\n", "lc_sublane", "=", "1.0", ",", "\n", "lc_pushy", "=", "0", ",", "\n", "lc_pushy_gap", "=", "0.6", ",", "\n", "lc_assertive", "=", "1.0", ",", "\n", "lc_accel_lat", "=", "1.0", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Instantiate SumoLaneChangeParams.\"\"\"", "\n", "# check for deprecations (lcStrategic)", "\n", "if", "\"lcStrategic\"", "in", "kwargs", ":", "\n", "            ", "deprecated_attribute", "(", "self", ",", "\"lcStrategic\"", ",", "\"lc_strategic\"", ")", "\n", "lc_strategic", "=", "kwargs", "[", "\"lcStrategic\"", "]", "\n", "\n", "# check for deprecations (lcCooperative)", "\n", "", "if", "\"lcCooperative\"", "in", "kwargs", ":", "\n", "            ", "deprecated_attribute", "(", "self", ",", "\"lcCooperative\"", ",", "\"lc_cooperative\"", ")", "\n", "lc_cooperative", "=", "kwargs", "[", "\"lcCooperative\"", "]", "\n", "\n", "# check for deprecations (lcSpeedGain)", "\n", "", "if", "\"lcSpeedGain\"", "in", "kwargs", ":", "\n", "            ", "deprecated_attribute", "(", "self", ",", "\"lcSpeedGain\"", ",", "\"lc_speed_gain\"", ")", "\n", "lc_speed_gain", "=", "kwargs", "[", "\"lcSpeedGain\"", "]", "\n", "\n", "# check for deprecations (lcKeepRight)", "\n", "", "if", "\"lcKeepRight\"", "in", "kwargs", ":", "\n", "            ", "deprecated_attribute", "(", "self", ",", "\"lcKeepRight\"", ",", "\"lc_keep_right\"", ")", "\n", "lc_keep_right", "=", "kwargs", "[", "\"lcKeepRight\"", "]", "\n", "\n", "# check for deprecations (lcLookaheadLeft)", "\n", "", "if", "\"lcLookaheadLeft\"", "in", "kwargs", ":", "\n", "            ", "deprecated_attribute", "(", "self", ",", "\"lcLookaheadLeft\"", ",", "\"lc_look_ahead_left\"", ")", "\n", "lc_look_ahead_left", "=", "kwargs", "[", "\"lcLookaheadLeft\"", "]", "\n", "\n", "# check for deprecations (lcSpeedGainRight)", "\n", "", "if", "\"lcSpeedGainRight\"", "in", "kwargs", ":", "\n", "            ", "deprecated_attribute", "(", "self", ",", "\"lcSpeedGainRight\"", ",", "\n", "\"lc_speed_gain_right\"", ")", "\n", "lc_speed_gain_right", "=", "kwargs", "[", "\"lcSpeedGainRight\"", "]", "\n", "\n", "# check for deprecations (lcSublane)", "\n", "", "if", "\"lcSublane\"", "in", "kwargs", ":", "\n", "            ", "deprecated_attribute", "(", "self", ",", "\"lcSublane\"", ",", "\"lc_sublane\"", ")", "\n", "lc_sublane", "=", "kwargs", "[", "\"lcSublane\"", "]", "\n", "\n", "# check for deprecations (lcPushy)", "\n", "", "if", "\"lcPushy\"", "in", "kwargs", ":", "\n", "            ", "deprecated_attribute", "(", "self", ",", "\"lcPushy\"", ",", "\"lc_pushy\"", ")", "\n", "lc_pushy", "=", "kwargs", "[", "\"lcPushy\"", "]", "\n", "\n", "# check for deprecations (lcPushyGap)", "\n", "", "if", "\"lcPushyGap\"", "in", "kwargs", ":", "\n", "            ", "deprecated_attribute", "(", "self", ",", "\"lcPushyGap\"", ",", "\"lc_pushy_gap\"", ")", "\n", "lc_pushy_gap", "=", "kwargs", "[", "\"lcPushyGap\"", "]", "\n", "\n", "# check for deprecations (lcAssertive)", "\n", "", "if", "\"lcAssertive\"", "in", "kwargs", ":", "\n", "            ", "deprecated_attribute", "(", "self", ",", "\"lcAssertive\"", ",", "\"lc_assertive\"", ")", "\n", "lc_assertive", "=", "kwargs", "[", "\"lcAssertive\"", "]", "\n", "\n", "# check for deprecations (lcAccelLat)", "\n", "", "if", "\"lcAccelLat\"", "in", "kwargs", ":", "\n", "            ", "deprecated_attribute", "(", "self", ",", "\"lcAccelLat\"", ",", "\"lc_accel_lat\"", ")", "\n", "lc_accel_lat", "=", "kwargs", "[", "\"lcAccelLat\"", "]", "\n", "\n", "# check for valid model", "\n", "", "if", "model", "not", "in", "[", "\"LC2013\"", ",", "\"SL2015\"", "]", ":", "\n", "            ", "logging", ".", "error", "(", "\"Invalid lane change model! Defaulting to LC2013\"", ")", "\n", "model", "=", "\"LC2013\"", "\n", "\n", "", "if", "model", "==", "\"LC2013\"", ":", "\n", "            ", "self", ".", "controller_params", "=", "{", "\n", "\"laneChangeModel\"", ":", "model", ",", "\n", "\"lcStrategic\"", ":", "str", "(", "lc_strategic", ")", ",", "\n", "\"lcCooperative\"", ":", "str", "(", "lc_cooperative", ")", ",", "\n", "\"lcSpeedGain\"", ":", "str", "(", "lc_speed_gain", ")", ",", "\n", "\"lcKeepRight\"", ":", "str", "(", "lc_keep_right", ")", ",", "\n", "# \"lcLookaheadLeft\": str(lc_look_ahead_left),", "\n", "# \"lcSpeedGainRight\": str(lcSpeedGainRight)", "\n", "}", "\n", "", "elif", "model", "==", "\"SL2015\"", ":", "\n", "            ", "self", ".", "controller_params", "=", "{", "\n", "\"laneChangeModel\"", ":", "model", ",", "\n", "\"lcStrategic\"", ":", "str", "(", "lc_strategic", ")", ",", "\n", "\"lcCooperative\"", ":", "str", "(", "lc_cooperative", ")", ",", "\n", "\"lcSpeedGain\"", ":", "str", "(", "lc_speed_gain", ")", ",", "\n", "\"lcKeepRight\"", ":", "str", "(", "lc_keep_right", ")", ",", "\n", "\"lcLookaheadLeft\"", ":", "str", "(", "lc_look_ahead_left", ")", ",", "\n", "\"lcSpeedGainRight\"", ":", "str", "(", "lc_speed_gain_right", ")", ",", "\n", "\"lcSublane\"", ":", "str", "(", "lc_sublane", ")", ",", "\n", "\"lcPushy\"", ":", "str", "(", "lc_pushy", ")", ",", "\n", "\"lcPushyGap\"", ":", "str", "(", "lc_pushy_gap", ")", ",", "\n", "\"lcAssertive\"", ":", "str", "(", "lc_assertive", ")", ",", "\n", "\"lcAccelLat\"", ":", "str", "(", "lc_accel_lat", ")", "\n", "}", "\n", "\n", "# adjust the lane change mode value", "\n", "", "if", "isinstance", "(", "lane_change_mode", ",", "str", ")", "and", "lane_change_mode", "in", "LC_MODES", ":", "\n", "            ", "lane_change_mode", "=", "LC_MODES", "[", "lane_change_mode", "]", "\n", "", "elif", "not", "(", "isinstance", "(", "lane_change_mode", ",", "int", ")", "\n", "or", "isinstance", "(", "lane_change_mode", ",", "float", ")", ")", ":", "\n", "            ", "logging", ".", "error", "(", "\"Setting lane change mode to default.\"", ")", "\n", "lane_change_mode", "=", "LC_MODES", "[", "\"no_lc_safe\"", "]", "\n", "\n", "", "self", ".", "lane_change_mode", "=", "lane_change_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.__init__": [[1142, 1145], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Instantiate Inflows.\"\"\"", "\n", "self", ".", "__flows", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.add": [[1146, 1280], ["new_inflow.update", "params.InFlows.__flows.append", "flow.utils.flow_warnings.deprecated_attribute", "params.InFlows.add.deprecate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.flow_warnings.deprecated_attribute"], ["", "def", "add", "(", "self", ",", "\n", "edge", ",", "\n", "veh_type", ",", "\n", "vehs_per_hour", "=", "None", ",", "\n", "probability", "=", "None", ",", "\n", "period", "=", "None", ",", "\n", "depart_lane", "=", "\"first\"", ",", "\n", "depart_speed", "=", "0", ",", "\n", "name", "=", "\"flow\"", ",", "\n", "begin", "=", "1", ",", "\n", "end", "=", "86400", ",", "\n", "number", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Specify a new inflow for a given type of vehicles and edge.\n\n        Parameters\n        ----------\n        edge : str\n            starting edge for the vehicles in this inflow\n        veh_type : str\n            type of the vehicles entering the edge. Must match one of the types\n            set in the Vehicles class\n        vehs_per_hour : float, optional\n            number of vehicles per hour, equally spaced (in vehicles/hour).\n            Cannot be specified together with probability or period\n        probability : float, optional\n            probability for emitting a vehicle each second (between 0 and 1).\n            Cannot be specified together with vehs_per_hour or period\n        period : float, optional\n            insert equally spaced vehicles at that period (in seconds). Cannot\n            be specified together with vehs_per_hour or probability\n        depart_lane : int or str\n            the lane on which the vehicle shall be inserted. Can be either one\n            of:\n\n            * int >= 0: index of the lane (starting with rightmost = 0)\n            * \"random\": a random lane is chosen, but the vehicle insertion is\n              not retried if it could not be inserted\n            * \"free\": the most free (least occupied) lane is chosen\n            * \"best\": the \"free\" lane (see above) among those who allow the\n              vehicle the longest ride without the need to change lane\n            * \"first\": the rightmost lane the vehicle may use\n\n            Defaults to \"first\".\n        depart_speed : float or str\n            the speed with which the vehicle shall enter the network (in m/s)\n            can be either one of:\n\n            - float >= 0: the vehicle is tried to be inserted using the given\n              speed; if that speed is unsafe, departure is delayed\n            - \"random\": vehicles enter the edge with a random speed between 0\n              and the speed limit on the edge; the entering speed may be\n              adapted to ensure a safe distance to the leading vehicle is kept\n            - \"speedLimit\": vehicles enter the edge with the maximum speed that\n              is allowed on this edge; if that speed is unsafe, departure is\n              delayed\n\n            Defaults to 0.\n        name : str, optional\n            prefix for the id of the vehicles entering via this inflow.\n            Defaults to \"flow\"\n        begin : float, optional\n            first vehicle departure time (in seconds, minimum 1 second).\n            Defaults to 1 second\n        end : float, optional\n            end of departure interval (in seconds). This parameter is not taken\n            into account if 'number' is specified. Defaults to 24 hours\n        number : int, optional\n            total number of vehicles the inflow should create (due to rounding\n            up, this parameter may not be exactly enforced and shouldn't be set\n            too small). Default: infinite (c.f. 'end' parameter)\n        kwargs : dict, optional\n            see Note\n\n        Note\n        ----\n        For information on the parameters start, end, vehs_per_hour,\n        probability, period, number, as well as other vehicle type and routing\n        parameters that may be added via \\*\\*kwargs, refer to:\n        http://sumo.dlr.de/wiki/Definition_of_Vehicles,_Vehicle_Types,_and_Routes\n        \"\"\"", "\n", "# check for deprecations", "\n", "def", "deprecate", "(", "old", ",", "new", ")", ":", "\n", "            ", "deprecated_attribute", "(", "self", ",", "old", ",", "new", ")", "\n", "new_val", "=", "kwargs", "[", "old", "]", "\n", "del", "kwargs", "[", "old", "]", "\n", "return", "new_val", "\n", "\n", "", "if", "\"vehsPerHour\"", "in", "kwargs", ":", "\n", "            ", "vehs_per_hour", "=", "deprecate", "(", "\"vehsPerHour\"", ",", "\"vehs_per_hour\"", ")", "\n", "", "if", "\"departLane\"", "in", "kwargs", ":", "\n", "            ", "depart_lane", "=", "deprecate", "(", "\"departLane\"", ",", "\"depart_lane\"", ")", "\n", "", "if", "\"departSpeed\"", "in", "kwargs", ":", "\n", "            ", "depart_speed", "=", "deprecate", "(", "\"departSpeed\"", ",", "\"depart_speed\"", ")", "\n", "\n", "", "new_inflow", "=", "{", "\n", "\"name\"", ":", "\"%s_%d\"", "%", "(", "name", ",", "len", "(", "self", ".", "__flows", ")", ")", ",", "\n", "\"vtype\"", ":", "veh_type", ",", "\n", "\"edge\"", ":", "edge", ",", "\n", "\"departLane\"", ":", "depart_lane", ",", "\n", "\"departSpeed\"", ":", "depart_speed", ",", "\n", "\"begin\"", ":", "begin", ",", "\n", "\"end\"", ":", "end", "\n", "}", "\n", "new_inflow", ".", "update", "(", "kwargs", ")", "\n", "\n", "inflow_params", "=", "[", "vehs_per_hour", ",", "probability", ",", "period", "]", "\n", "n_inflow_params", "=", "len", "(", "inflow_params", ")", "-", "inflow_params", ".", "count", "(", "None", ")", "\n", "if", "n_inflow_params", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Exactly one among the three parameters 'vehs_per_hour', \"", "\n", "\"'probability' and 'period' must be specified in InFlows.add. \"", "\n", "\"{} were specified.\"", ".", "format", "(", "n_inflow_params", ")", ")", "\n", "", "if", "probability", "is", "not", "None", "and", "(", "probability", "<", "0", "or", "probability", ">", "1", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Inflow.add called with parameter 'probability' set to {}, but\"", "\n", "\" probability should be between 0 and 1.\"", ".", "format", "(", "probability", ")", ")", "\n", "", "if", "begin", "is", "not", "None", "and", "begin", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Inflow.add called with parameter 'begin' set to {}, but begin\"", "\n", "\" should be greater or equal than 1 second.\"", ".", "format", "(", "begin", ")", ")", "\n", "\n", "", "if", "number", "is", "not", "None", ":", "\n", "            ", "del", "new_inflow", "[", "\"end\"", "]", "\n", "new_inflow", "[", "\"number\"", "]", "=", "number", "\n", "\n", "", "if", "vehs_per_hour", "is", "not", "None", ":", "\n", "            ", "new_inflow", "[", "\"vehsPerHour\"", "]", "=", "vehs_per_hour", "\n", "", "if", "probability", "is", "not", "None", ":", "\n", "            ", "new_inflow", "[", "\"probability\"", "]", "=", "probability", "\n", "", "if", "period", "is", "not", "None", ":", "\n", "            ", "new_inflow", "[", "\"period\"", "]", "=", "period", "\n", "\n", "", "self", ".", "__flows", ".", "append", "(", "new_inflow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get": [[1281, 1284], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the inflows of each edge.\"\"\"", "\n", "return", "self", ".", "__flows", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.__init__": [[60, 85], ["flow.utils.registry.make_create_env", "create_env", "logging.info", "logging.info", "str", "datetime.datetime.datetime.utcnow"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env"], ["def", "__init__", "(", "self", ",", "flow_params", ",", "custom_callables", "=", "None", ")", ":", "\n", "        ", "\"\"\"Instantiate the Experiment class.\n\n        Parameters\n        ----------\n        flow_params : dict\n            flow-specific parameters\n        custom_callables : dict < str, lambda >\n            strings and lambda functions corresponding to some information we\n            want to extract from the environment. The lambda will be called at\n            each step to extract information from the env and it will be stored\n            in a dict keyed by the str.\n        \"\"\"", "\n", "self", ".", "custom_callables", "=", "custom_callables", "or", "{", "}", "\n", "\n", "# Get the env name and a creator for the environment.", "\n", "create_env", ",", "_", "=", "make_create_env", "(", "flow_params", ")", "\n", "\n", "# Create the environment.", "\n", "self", ".", "env", "=", "create_env", "(", ")", "\n", "\n", "logging", ".", "info", "(", "\" Starting experiment {} at {}\"", ".", "format", "(", "\n", "self", ".", "env", ".", "network", ".", "name", ",", "str", "(", "datetime", ".", "utcnow", "(", ")", ")", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\"Initializing environment.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run": [[86, 186], ["info_dict.update", "time.time", "range", "info_dict.keys", "print", "print", "experiment.Experiment.env.terminate", "ValueError", "experiment.Experiment.env.reset", "range", "experiment.Experiment.env.k.vehicle.get_outflow_rate", "info_dict[].append", "info_dict[].append", "info_dict[].append", "custom_vals.keys", "print", "print", "numpy.mean", "time.time", "experiment.Experiment.env.step", "time.time", "times.append", "experiment.Experiment.env.k.vehicle.get_ids", "vel.append", "experiment.Experiment.custom_callables.items", "int", "numpy.mean", "info_dict[].append", "experiment.Experiment.env.k.simulation.save_emission", "time.time", "experiment.Experiment.custom_callables.keys", "experiment.Experiment.custom_callables.keys", "experiment.Experiment.run.rl_actions"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_outflow_rate", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.traci.TraCISimulation.save_emission"], ["", "def", "run", "(", "self", ",", "num_runs", ",", "rl_actions", "=", "None", ",", "convert_to_csv", "=", "False", ")", ":", "\n", "        ", "\"\"\"Run the given network for a set number of runs.\n\n        Parameters\n        ----------\n        num_runs : int\n            number of runs the experiment should perform\n        rl_actions : method, optional\n            maps states to actions to be performed by the RL agents (if\n            there are any)\n        convert_to_csv : bool\n            Specifies whether to convert the emission file created by sumo\n            into a csv file\n\n        Returns\n        -------\n        info_dict : dict < str, Any >\n            contains returns, average speed per step\n        \"\"\"", "\n", "num_steps", "=", "self", ".", "env", ".", "env_params", ".", "horizon", "\n", "\n", "# raise an error if convert_to_csv is set to True but no emission", "\n", "# file will be generated, to avoid getting an error at the end of the", "\n", "# simulation", "\n", "if", "convert_to_csv", "and", "self", ".", "env", ".", "sim_params", ".", "emission_path", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'The experiment was run with convert_to_csv set '", "\n", "'to True, but no emission file will be generated. If you wish '", "\n", "'to generate an emission file, you should set the parameter '", "\n", "'emission_path in the simulation parameters (SumoParams or '", "\n", "'AimsunParams) to the path of the folder where emissions '", "\n", "'output should be generated. If you do not wish to generate '", "\n", "'emissions, set the convert_to_csv parameter to False.'", ")", "\n", "\n", "# used to store", "\n", "", "info_dict", "=", "{", "\n", "\"returns\"", ":", "[", "]", ",", "\n", "\"velocities\"", ":", "[", "]", ",", "\n", "\"outflows\"", ":", "[", "]", ",", "\n", "}", "\n", "info_dict", ".", "update", "(", "{", "\n", "key", ":", "[", "]", "for", "key", "in", "self", ".", "custom_callables", ".", "keys", "(", ")", "\n", "}", ")", "\n", "\n", "if", "rl_actions", "is", "None", ":", "\n", "            ", "def", "rl_actions", "(", "*", "_", ")", ":", "\n", "                ", "return", "None", "\n", "\n", "# time profiling information", "\n", "", "", "t", "=", "time", ".", "time", "(", ")", "\n", "times", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_runs", ")", ":", "\n", "            ", "ret", "=", "0", "\n", "vel", "=", "[", "]", "\n", "custom_vals", "=", "{", "key", ":", "[", "]", "for", "key", "in", "self", ".", "custom_callables", ".", "keys", "(", ")", "}", "\n", "state", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "for", "j", "in", "range", "(", "num_steps", ")", ":", "\n", "                ", "t0", "=", "time", ".", "time", "(", ")", "\n", "state", ",", "reward", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "rl_actions", "(", "state", ")", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "times", ".", "append", "(", "1", "/", "(", "t1", "-", "t0", ")", ")", "\n", "\n", "# Compute the velocity speeds and cumulative returns.", "\n", "veh_ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "vel", ".", "append", "(", "np", ".", "mean", "(", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "veh_ids", ")", ")", ")", "\n", "ret", "+=", "reward", "\n", "\n", "# Compute the results for the custom callables.", "\n", "for", "(", "key", ",", "lambda_func", ")", "in", "self", ".", "custom_callables", ".", "items", "(", ")", ":", "\n", "                    ", "custom_vals", "[", "key", "]", ".", "append", "(", "lambda_func", "(", "self", ".", "env", ")", ")", "\n", "\n", "", "if", "done", ":", "\n", "                    ", "break", "\n", "\n", "# Store the information from the run in info_dict.", "\n", "", "", "outflow", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_outflow_rate", "(", "int", "(", "500", ")", ")", "\n", "info_dict", "[", "\"returns\"", "]", ".", "append", "(", "ret", ")", "\n", "info_dict", "[", "\"velocities\"", "]", ".", "append", "(", "np", ".", "mean", "(", "vel", ")", ")", "\n", "info_dict", "[", "\"outflows\"", "]", ".", "append", "(", "outflow", ")", "\n", "for", "key", "in", "custom_vals", ".", "keys", "(", ")", ":", "\n", "                ", "info_dict", "[", "key", "]", ".", "append", "(", "np", ".", "mean", "(", "custom_vals", "[", "key", "]", ")", ")", "\n", "\n", "", "print", "(", "\"Round {0}, return: {1}\"", ".", "format", "(", "i", ",", "ret", ")", ")", "\n", "\n", "# Save emission data at the end of every rollout. This is skipped", "\n", "# by the internal method if no emission path was specified.", "\n", "if", "self", ".", "env", ".", "simulator", "==", "\"traci\"", ":", "\n", "                ", "self", ".", "env", ".", "k", ".", "simulation", ".", "save_emission", "(", "run_id", "=", "i", ")", "\n", "\n", "# Print the averages/std for all variables in the info_dict.", "\n", "", "", "for", "key", "in", "info_dict", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "\"Average, std {}: {}, {}\"", ".", "format", "(", "\n", "key", ",", "np", ".", "mean", "(", "info_dict", "[", "key", "]", ")", ",", "np", ".", "std", "(", "info_dict", "[", "key", "]", ")", ")", ")", "\n", "\n", "", "print", "(", "\"Total time:\"", ",", "time", ".", "time", "(", ")", "-", "t", ")", "\n", "print", "(", "\"steps/second:\"", ",", "np", ".", "mean", "(", "times", ")", ")", "\n", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "return", "info_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.desired_velocity": [[6, 60], ["numpy.array", "len", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm", "env.k.vehicle.get_ids", "env.k.vehicle.get_ids_by_edge", "env.k.vehicle.get_speed", "any", "numpy.finfo", "max"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids_by_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max"], ["def", "desired_velocity", "(", "env", ",", "fail", "=", "False", ",", "edge_list", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Encourage proximity to a desired velocity.\n\n    This function measures the deviation of a system of vehicles from a\n    user-specified desired velocity peaking when all vehicles in the ring\n    are set to this desired velocity. Moreover, in order to ensure that the\n    reward function naturally punishing the early termination of rollouts due\n    to collisions or other failures, the function is formulated as a mapping\n    :math:`r: \\\\mathcal{S} \\\\times \\\\mathcal{A}\n    \\\\rightarrow \\\\mathbb{R}_{\\\\geq 0}`.\n    This is done by subtracting the deviation of the system from the\n    desired velocity from the peak allowable deviation from the desired\n    velocity. Additionally, since the velocity of vehicles are\n    unbounded above, the reward is bounded below by zero,\n    to ensure nonnegativity.\n\n    Parameters\n    ----------\n    env : flow.envs.Env\n        the environment variable, which contains information on the current\n        state of the system.\n    fail : bool, optional\n        specifies if any crash or other failure occurred in the system\n    edge_list : list  of str, optional\n        list of edges the reward is computed over. If no edge_list is defined,\n        the reward is computed over all edges\n\n    Returns\n    -------\n    float\n        reward value\n    \"\"\"", "\n", "if", "edge_list", "is", "None", ":", "\n", "        ", "veh_ids", "=", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "", "else", ":", "\n", "        ", "veh_ids", "=", "env", ".", "k", ".", "vehicle", ".", "get_ids_by_edge", "(", "edge_list", ")", "\n", "\n", "", "vel", "=", "np", ".", "array", "(", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "veh_ids", ")", ")", "\n", "num_vehicles", "=", "len", "(", "veh_ids", ")", "\n", "\n", "if", "any", "(", "vel", "<", "-", "100", ")", "or", "fail", "or", "num_vehicles", "==", "0", ":", "\n", "        ", "return", "0.", "\n", "\n", "", "target_vel", "=", "env", ".", "env_params", ".", "additional_params", "[", "'target_velocity'", "]", "\n", "max_cost", "=", "np", ".", "array", "(", "[", "target_vel", "]", "*", "num_vehicles", ")", "\n", "max_cost", "=", "np", ".", "linalg", ".", "norm", "(", "max_cost", ")", "\n", "\n", "cost", "=", "vel", "-", "target_vel", "\n", "cost", "=", "np", ".", "linalg", ".", "norm", "(", "cost", ")", "\n", "\n", "# epsilon term (to deal with ZeroDivisionError exceptions)", "\n", "eps", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", "\n", "\n", "return", "max", "(", "max_cost", "-", "cost", ",", "0", ")", "/", "(", "max_cost", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.average_velocity": [[62, 89], ["numpy.array", "numpy.mean", "env.k.vehicle.get_speed", "any", "len", "env.k.vehicle.get_ids"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids"], ["", "def", "average_velocity", "(", "env", ",", "fail", "=", "False", ")", ":", "\n", "    ", "\"\"\"Encourage proximity to an average velocity.\n\n    This reward function returns the average velocity of all\n    vehicles in the system.\n\n    Parameters\n    ----------\n    env : flow.envs.Env\n        the environment variable, which contains information on the current\n        state of the system.\n    fail : bool, optional\n        specifies if any crash or other failure occurred in the system\n\n    Returns\n    -------\n    float\n        reward value\n    \"\"\"", "\n", "vel", "=", "np", ".", "array", "(", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ")", ")", "\n", "\n", "if", "any", "(", "vel", "<", "-", "100", ")", "or", "fail", ":", "\n", "        ", "return", "0.", "\n", "", "if", "len", "(", "vel", ")", "==", "0", ":", "\n", "        ", "return", "0.", "\n", "\n", "", "return", "np", ".", "mean", "(", "vel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.rl_forward_progress": [[91, 110], ["env.k.vehicle.get_speed", "numpy.linalg.norm", "env.k.vehicle.get_rl_ids"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids"], ["", "def", "rl_forward_progress", "(", "env", ",", "gain", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"Rewared function used to reward the RL vehicles for travelling forward.\n\n    Parameters\n    ----------\n    env : flow.envs.Env\n        the environment variable, which contains information on the current\n        state of the system.\n    gain : float\n        specifies how much to reward the RL vehicles\n\n    Returns\n    -------\n    float\n        reward value\n    \"\"\"", "\n", "rl_velocity", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "env", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", ")", "\n", "rl_norm_vel", "=", "np", ".", "linalg", ".", "norm", "(", "rl_velocity", ",", "1", ")", "\n", "return", "rl_norm_vel", "*", "gain", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.boolean_action_penalty": [[112, 115], ["numpy.sum"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "def", "boolean_action_penalty", "(", "discrete_actions", ",", "gain", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Penalize boolean actions that indicate a switch.\"\"\"", "\n", "return", "gain", "*", "np", ".", "sum", "(", "discrete_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.min_delay": [[117, 149], ["numpy.array", "max", "max", "env.k.vehicle.get_speed", "sum", "numpy.finfo", "sum", "env.k.vehicle.get_ids", "env.k.network.speed_limit", "env.k.network.get_edge_list"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.speed_limit", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list"], ["", "def", "min_delay", "(", "env", ")", ":", "\n", "    ", "\"\"\"Reward function used to encourage minimization of total delay.\n\n    This function measures the deviation of a system of vehicles from all the\n    vehicles smoothly travelling at a fixed speed to their destinations.\n\n    Parameters\n    ----------\n    env : flow.envs.Env\n        the environment variable, which contains information on the current\n        state of the system.\n\n    Returns\n    -------\n    float\n        reward value\n    \"\"\"", "\n", "vel", "=", "np", ".", "array", "(", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ")", ")", "\n", "\n", "vel", "=", "vel", "[", "vel", ">=", "-", "1e-6", "]", "\n", "v_top", "=", "max", "(", "\n", "env", ".", "k", ".", "network", ".", "speed_limit", "(", "edge", ")", "\n", "for", "edge", "in", "env", ".", "k", ".", "network", ".", "get_edge_list", "(", ")", ")", "\n", "time_step", "=", "env", ".", "sim_step", "\n", "\n", "max_cost", "=", "time_step", "*", "sum", "(", "vel", ".", "shape", ")", "\n", "\n", "# epsilon term (to deal with ZeroDivisionError exceptions)", "\n", "eps", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", "\n", "\n", "cost", "=", "time_step", "*", "sum", "(", "(", "v_top", "-", "vel", ")", "/", "v_top", ")", "\n", "return", "max", "(", "(", "max_cost", "-", "cost", ")", "/", "(", "max_cost", "+", "eps", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.avg_delay_specified_vehicles": [[151, 177], ["env.k.network.get_edge_list", "env.k.vehicle.get_ids_by_edge", "env.k.network.speed_limit", "len", "env.k.vehicle.get_speed"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids_by_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.speed_limit", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], ["", "def", "avg_delay_specified_vehicles", "(", "env", ",", "veh_ids", ")", ":", "\n", "    ", "\"\"\"Calculate the average delay for a set of vehicles in the system.\n\n    Parameters\n    ----------\n    env: flow.envs.Env\n        the environment variable, which contains information on the current\n        state of the system.\n    veh_ids: a list of the ids of the vehicles, for which we are calculating\n        average delay\n    Returns\n    -------\n    float\n        average delay\n    \"\"\"", "\n", "sum", "=", "0", "\n", "for", "edge", "in", "env", ".", "k", ".", "network", ".", "get_edge_list", "(", ")", ":", "\n", "        ", "for", "veh_id", "in", "env", ".", "k", ".", "vehicle", ".", "get_ids_by_edge", "(", "edge", ")", ":", "\n", "            ", "v_top", "=", "env", ".", "k", ".", "network", ".", "speed_limit", "(", "edge", ")", "\n", "sum", "+=", "(", "v_top", "-", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "veh_id", ")", ")", "/", "v_top", "\n", "", "", "time_step", "=", "env", ".", "sim_step", "\n", "try", ":", "\n", "        ", "cost", "=", "time_step", "*", "sum", "\n", "return", "cost", "/", "len", "(", "veh_ids", ")", "\n", "", "except", "ZeroDivisionError", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.min_delay_unscaled": [[179, 206], ["numpy.array", "max", "env.k.vehicle.get_speed", "numpy.finfo", "sum", "env.k.vehicle.get_ids", "env.k.network.speed_limit", "env.k.network.get_edge_list"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.speed_limit", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list"], ["", "", "def", "min_delay_unscaled", "(", "env", ")", ":", "\n", "    ", "\"\"\"Return the average delay for all vehicles in the system.\n\n    Parameters\n    ----------\n    env : flow.envs.Env\n        the environment variable, which contains information on the current\n        state of the system.\n\n    Returns\n    -------\n    float\n        reward value\n    \"\"\"", "\n", "vel", "=", "np", ".", "array", "(", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ")", ")", "\n", "\n", "vel", "=", "vel", "[", "vel", ">=", "-", "1e-6", "]", "\n", "v_top", "=", "max", "(", "\n", "env", ".", "k", ".", "network", ".", "speed_limit", "(", "edge", ")", "\n", "for", "edge", "in", "env", ".", "k", ".", "network", ".", "get_edge_list", "(", ")", ")", "\n", "time_step", "=", "env", ".", "sim_step", "\n", "\n", "# epsilon term (to deal with ZeroDivisionError exceptions)", "\n", "eps", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", "\n", "\n", "cost", "=", "time_step", "*", "sum", "(", "(", "v_top", "-", "vel", ")", "/", "v_top", ")", "\n", "return", "cost", "/", "(", "env", ".", "k", ".", "vehicle", ".", "num_vehicles", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.penalize_standstill": [[208, 233], ["env.k.vehicle.get_ids", "numpy.array", "len", "env.k.vehicle.get_speed"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], ["", "def", "penalize_standstill", "(", "env", ",", "gain", "=", "1", ")", ":", "\n", "    ", "\"\"\"Reward function that penalizes vehicle standstill.\n\n    Is it better for this to be:\n        a) penalize standstill in general?\n        b) multiplicative based on time that vel=0?\n\n    Parameters\n    ----------\n    env : flow.envs.Env\n        the environment variable, which contains information on the current\n        state of the system.\n    gain : float\n        multiplicative factor on the action penalty\n\n    Returns\n    -------\n    float\n        reward value\n    \"\"\"", "\n", "veh_ids", "=", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "vel", "=", "np", ".", "array", "(", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "veh_ids", ")", ")", "\n", "num_standstill", "=", "len", "(", "vel", "[", "vel", "==", "0", "]", ")", "\n", "penalty", "=", "gain", "*", "num_standstill", "\n", "return", "-", "penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.penalize_near_standstill": [[235, 257], ["env.k.vehicle.get_ids", "numpy.array", "len", "env.k.vehicle.get_speed"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], ["", "def", "penalize_near_standstill", "(", "env", ",", "thresh", "=", "0.3", ",", "gain", "=", "1", ")", ":", "\n", "    ", "\"\"\"Reward function which penalizes vehicles at a low velocity.\n\n    This reward function is used to penalize vehicles below a\n    specified threshold. This assists with discouraging RL from\n    gamifying a network, which can result in standstill behavior\n    or similarly bad, near-zero velocities.\n\n    Parameters\n    ----------\n    env : flow.envs.Env\n        the environment variable, which contains information on the current\n    thresh : float\n        the velocity threshold below which penalties are applied\n    gain : float\n        multiplicative factor on the action penalty\n    \"\"\"", "\n", "veh_ids", "=", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "vel", "=", "np", ".", "array", "(", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "veh_ids", ")", ")", "\n", "penalize", "=", "len", "(", "vel", "[", "vel", "<", "thresh", "]", ")", "\n", "penalty", "=", "gain", "*", "penalize", "\n", "return", "-", "penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.penalize_headway_variance": [[259, 285], ["numpy.power", "numpy.var", "numpy.array", "vehicles.get_headway"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway"], ["", "def", "penalize_headway_variance", "(", "vehicles", ",", "\n", "vids", ",", "\n", "normalization", "=", "1", ",", "\n", "penalty_gain", "=", "1", ",", "\n", "penalty_exponent", "=", "1", ")", ":", "\n", "    ", "\"\"\"Reward function used to train rl vehicles to encourage large headways.\n\n    Parameters\n    ----------\n    vehicles : flow.core.kernel.vehicle.KernelVehicle\n        contains the state of all vehicles in the network (generally\n        self.vehicles)\n    vids : list of str\n        list of ids for vehicles\n    normalization : float, optional\n        constant for scaling (down) the headways\n    penalty_gain : float, optional\n        sets the penalty for each vehicle between 0 and this value\n    penalty_exponent : float, optional\n        used to allow exponential punishing of smaller headways\n    \"\"\"", "\n", "headways", "=", "penalty_gain", "*", "np", ".", "power", "(", "\n", "np", ".", "array", "(", "\n", "[", "vehicles", ".", "get_headway", "(", "veh_id", ")", "/", "normalization", "\n", "for", "veh_id", "in", "vids", "]", ")", ",", "penalty_exponent", ")", "\n", "return", "-", "np", ".", "var", "(", "headways", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.punish_rl_lane_changes": [[287, 307], ["env.k.vehicle.get_rl_ids", "env.k.vehicle.get_last_lc"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_last_lc"], ["", "def", "punish_rl_lane_changes", "(", "env", ",", "penalty", "=", "1", ")", ":", "\n", "    ", "\"\"\"Penalize an RL vehicle performing lane changes.\n\n    This reward function is meant to minimize the number of lane changes and RL\n    vehicle performs.\n\n    Parameters\n    ----------\n    env : flow.envs.Env\n        the environment variable, which contains information on the current\n        state of the system.\n    penalty : float, optional\n        penalty imposed on the reward function for any rl lane change action\n    \"\"\"", "\n", "total_lane_change_penalty", "=", "0", "\n", "for", "veh_id", "in", "env", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", ":", "\n", "        ", "if", "env", ".", "k", ".", "vehicle", ".", "get_last_lc", "(", "veh_id", ")", "==", "env", ".", "timer", ":", "\n", "            ", "total_lane_change_penalty", "-=", "penalty", "\n", "\n", "", "", "return", "total_lane_change_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.energy_consumption": [[309, 333], ["env.k.vehicle.get_ids", "env.k.vehicle.get_speed", "env.k.vehicle.get_previous_speed", "abs"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_previous_speed"], ["", "def", "energy_consumption", "(", "env", ",", "gain", "=", ".001", ")", ":", "\n", "    ", "\"\"\"Calculate power consumption of a vehicle.\n\n    Assumes vehicle is an average sized vehicle.\n    The power calculated here is the lower bound of the actual power consumed\n    by a vehicle.\n    \"\"\"", "\n", "power", "=", "0", "\n", "\n", "M", "=", "1200", "# mass of average sized vehicle (kg)", "\n", "g", "=", "9.81", "# gravitational acceleration (m/s^2)", "\n", "Cr", "=", "0.005", "# rolling resistance coefficient", "\n", "Ca", "=", "0.3", "# aerodynamic drag coefficient", "\n", "rho", "=", "1.225", "# air density (kg/m^3)", "\n", "A", "=", "2.6", "# vehicle cross sectional area (m^2)", "\n", "for", "veh_id", "in", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ":", "\n", "        ", "speed", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "veh_id", ")", "\n", "prev_speed", "=", "env", ".", "k", ".", "vehicle", ".", "get_previous_speed", "(", "veh_id", ")", "\n", "\n", "accel", "=", "abs", "(", "speed", "-", "prev_speed", ")", "/", "env", ".", "sim_step", "\n", "\n", "power", "+=", "M", "*", "speed", "*", "accel", "+", "M", "*", "g", "*", "Cr", "*", "speed", "+", "0.5", "*", "rho", "*", "A", "*", "Ca", "*", "speed", "**", "3", "\n", "\n", "", "return", "-", "gain", "*", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.veh_energy_consumption": [[335, 358], ["env.k.vehicle.get_speed", "env.k.vehicle.get_previous_speed", "abs"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_previous_speed"], ["", "def", "veh_energy_consumption", "(", "env", ",", "veh_id", ",", "gain", "=", ".001", ")", ":", "\n", "    ", "\"\"\"Calculate power consumption of a vehicle.\n\n    Assumes vehicle is an average sized vehicle.\n    The power calculated here is the lower bound of the actual power consumed\n    by a vehicle.\n    \"\"\"", "\n", "power", "=", "0", "\n", "\n", "M", "=", "1200", "# mass of average sized vehicle (kg)", "\n", "g", "=", "9.81", "# gravitational acceleration (m/s^2)", "\n", "Cr", "=", "0.005", "# rolling resistance coefficient", "\n", "Ca", "=", "0.3", "# aerodynamic drag coefficient", "\n", "rho", "=", "1.225", "# air density (kg/m^3)", "\n", "A", "=", "2.6", "# vehicle cross sectional area (m^2)", "\n", "speed", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "veh_id", ")", "\n", "prev_speed", "=", "env", ".", "k", ".", "vehicle", ".", "get_previous_speed", "(", "veh_id", ")", "\n", "\n", "accel", "=", "abs", "(", "speed", "-", "prev_speed", ")", "/", "env", ".", "sim_step", "\n", "\n", "power", "+=", "M", "*", "speed", "*", "accel", "+", "M", "*", "g", "*", "Cr", "*", "speed", "+", "0.5", "*", "rho", "*", "A", "*", "Ca", "*", "speed", "**", "3", "\n", "\n", "return", "-", "gain", "*", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.miles_per_megajoule": [[360, 400], ["env.k.vehicle.get_ids", "env.k.vehicle.get_speed", "isinstance", "rewards.veh_energy_consumption"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.veh_energy_consumption"], ["", "def", "miles_per_megajoule", "(", "env", ",", "veh_ids", "=", "None", ",", "gain", "=", ".001", ")", ":", "\n", "    ", "\"\"\"Calculate miles per mega-joule of either a particular vehicle or the total average of all the vehicles.\n\n    Assumes vehicle is an average sized vehicle.\n    The power calculated here is the lower bound of the actual power consumed\n    by a vehicle.\n\n    Parameters\n    ----------\n    env : flow.envs.Env\n        the environment variable, which contains information on the current\n        state of the system.\n    veh_ids : [list]\n        list of veh_ids to compute the reward over\n    gain : float\n        scaling factor for the reward\n    \"\"\"", "\n", "mpj", "=", "0", "\n", "counter", "=", "0", "\n", "if", "veh_ids", "is", "None", ":", "\n", "        ", "veh_ids", "=", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "", "elif", "not", "isinstance", "(", "veh_ids", ",", "list", ")", ":", "\n", "        ", "veh_ids", "=", "[", "veh_ids", "]", "\n", "", "for", "veh_id", "in", "veh_ids", ":", "\n", "        ", "speed", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "veh_id", ")", "\n", "# convert to be positive since the function called is a penalty", "\n", "power", "=", "-", "veh_energy_consumption", "(", "env", ",", "veh_id", ",", "gain", "=", "1.0", ")", "\n", "if", "power", ">", "0", "and", "speed", ">=", "0.0", ":", "\n", "            ", "counter", "+=", "1", "\n", "# meters / joule is (v * \\delta t) / (power * \\delta t)", "\n", "mpj", "+=", "speed", "/", "power", "\n", "", "", "if", "counter", ">", "0", ":", "\n", "        ", "mpj", "/=", "counter", "\n", "\n", "# convert from meters per joule to miles per joule", "\n", "", "mpj", "/=", "1609.0", "\n", "# convert from miles per joule to miles per megajoule", "\n", "mpj", "*=", "10", "**", "6", "\n", "\n", "return", "mpj", "*", "gain", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.miles_per_gallon": [[402, 439], ["env.k.vehicle.get_ids", "env.k.vehicle.get_speed", "env.k.vehicle.get_fuel_consumption", "isinstance"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_fuel_consumption"], ["", "def", "miles_per_gallon", "(", "env", ",", "veh_ids", "=", "None", ",", "gain", "=", ".001", ")", ":", "\n", "    ", "\"\"\"Calculate mpg of either a particular vehicle or the total average of all the vehicles.\n\n    Assumes vehicle is an average sized vehicle.\n    The power calculated here is the lower bound of the actual power consumed\n    by a vehicle.\n\n    Parameters\n    ----------\n    env : flow.envs.Env\n        the environment variable, which contains information on the current\n        state of the system.\n    veh_ids : [list]\n        list of veh_ids to compute the reward over\n    gain : float\n        scaling factor for the reward\n    \"\"\"", "\n", "mpg", "=", "0", "\n", "counter", "=", "0", "\n", "if", "veh_ids", "is", "None", ":", "\n", "        ", "veh_ids", "=", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "", "elif", "not", "isinstance", "(", "veh_ids", ",", "list", ")", ":", "\n", "        ", "veh_ids", "=", "[", "veh_ids", "]", "\n", "", "for", "veh_id", "in", "veh_ids", ":", "\n", "        ", "speed", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "veh_id", ")", "\n", "gallons_per_s", "=", "env", ".", "k", ".", "vehicle", ".", "get_fuel_consumption", "(", "veh_id", ")", "\n", "if", "gallons_per_s", ">", "0", "and", "speed", ">=", "0.0", ":", "\n", "            ", "counter", "+=", "1", "\n", "# meters / gallon is (v * \\delta t) / (gallons_per_s * \\delta t)", "\n", "mpg", "+=", "speed", "/", "gallons_per_s", "\n", "", "", "if", "counter", ">", "0", ":", "\n", "        ", "mpg", "/=", "counter", "\n", "\n", "# convert from meters per gallon to miles per gallon", "\n", "", "mpg", "/=", "1609.0", "\n", "\n", "return", "mpg", "*", "gain", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.makexml": [[10, 17], ["lxml.etree.Element"], "function", ["None"], ["def", "makexml", "(", "name", ",", "nsl", ")", ":", "\n", "    ", "\"\"\"Create an xml file.\"\"\"", "\n", "xsi", "=", "\"http://www.w3.org/2001/XMLSchema-instance\"", "\n", "ns", "=", "{", "\"xsi\"", ":", "xsi", "}", "\n", "attr", "=", "{", "\"{%s}noNamespaceSchemaLocation\"", "%", "xsi", ":", "nsl", "}", "\n", "t", "=", "etree", ".", "Element", "(", "name", ",", "attrib", "=", "attr", ",", "nsmap", "=", "ns", ")", "\n", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.printxml": [[19, 23], ["lxml.etree.ElementTree().write", "lxml.etree.ElementTree"], "function", ["None"], ["", "def", "printxml", "(", "t", ",", "fn", ")", ":", "\n", "    ", "\"\"\"Print information from a dict into an xml file.\"\"\"", "\n", "etree", ".", "ElementTree", "(", "t", ")", ".", "write", "(", "\n", "fn", ",", "pretty_print", "=", "True", ",", "encoding", "=", "'UTF-8'", ",", "xml_declaration", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.ensure_dir": [[25, 33], ["os.makedirs"], "function", ["None"], ["", "def", "ensure_dir", "(", "path", ")", ":", "\n", "    ", "\"\"\"Ensure that the directory specified exists, and if not, create it.\"\"\"", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "exception", ":", "\n", "        ", "if", "exception", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.emission_to_csv": [[35, 100], ["lxml.etree.XMLParser", "xml.etree.ElementTree.parse", "ElementTree.parse.getroot", "tree.getroot.findall", "sorted", "out_data[].keys", "float", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "csv.DictWriter.writerows", "sorted.append", "dict", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "car.attrib[].rpartition", "car.attrib[].rpartition"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "emission_to_csv", "(", "emission_path", ",", "output_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"Convert an emission file generated by sumo into a csv file.\n\n    Note that the emission file contains information generated by sumo, not\n    flow. This means that some data, such as absolute position, is not\n    immediately available from the emission file, but can be recreated.\n\n    Parameters\n    ----------\n    emission_path : str\n        path to the emission file that should be converted\n    output_path : str\n        path to the csv file that will be generated, default is the same\n        directory as the emission file, with the same name\n    \"\"\"", "\n", "parser", "=", "etree", ".", "XMLParser", "(", "recover", "=", "True", ")", "\n", "tree", "=", "ElementTree", ".", "parse", "(", "emission_path", ",", "parser", "=", "parser", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "\n", "# parse the xml data into a dict", "\n", "out_data", "=", "[", "]", "\n", "for", "time", "in", "root", ".", "findall", "(", "'timestep'", ")", ":", "\n", "        ", "t", "=", "float", "(", "time", ".", "attrib", "[", "'time'", "]", ")", "\n", "\n", "for", "car", "in", "time", ":", "\n", "            ", "out_data", ".", "append", "(", "dict", "(", ")", ")", "\n", "try", ":", "\n", "                ", "out_data", "[", "-", "1", "]", "[", "'time'", "]", "=", "t", "\n", "out_data", "[", "-", "1", "]", "[", "'CO'", "]", "=", "float", "(", "car", ".", "attrib", "[", "'CO'", "]", ")", "\n", "out_data", "[", "-", "1", "]", "[", "'y'", "]", "=", "float", "(", "car", ".", "attrib", "[", "'y'", "]", ")", "\n", "out_data", "[", "-", "1", "]", "[", "'CO2'", "]", "=", "float", "(", "car", ".", "attrib", "[", "'CO2'", "]", ")", "\n", "out_data", "[", "-", "1", "]", "[", "'electricity'", "]", "=", "float", "(", "car", ".", "attrib", "[", "'electricity'", "]", ")", "\n", "out_data", "[", "-", "1", "]", "[", "'type'", "]", "=", "car", ".", "attrib", "[", "'type'", "]", "\n", "out_data", "[", "-", "1", "]", "[", "'id'", "]", "=", "car", ".", "attrib", "[", "'id'", "]", "\n", "out_data", "[", "-", "1", "]", "[", "'eclass'", "]", "=", "car", ".", "attrib", "[", "'eclass'", "]", "\n", "out_data", "[", "-", "1", "]", "[", "'waiting'", "]", "=", "float", "(", "car", ".", "attrib", "[", "'waiting'", "]", ")", "\n", "out_data", "[", "-", "1", "]", "[", "'NOx'", "]", "=", "float", "(", "car", ".", "attrib", "[", "'NOx'", "]", ")", "\n", "out_data", "[", "-", "1", "]", "[", "'fuel'", "]", "=", "float", "(", "car", ".", "attrib", "[", "'fuel'", "]", ")", "\n", "out_data", "[", "-", "1", "]", "[", "'HC'", "]", "=", "float", "(", "car", ".", "attrib", "[", "'HC'", "]", ")", "\n", "out_data", "[", "-", "1", "]", "[", "'x'", "]", "=", "float", "(", "car", ".", "attrib", "[", "'x'", "]", ")", "\n", "out_data", "[", "-", "1", "]", "[", "'route'", "]", "=", "car", ".", "attrib", "[", "'route'", "]", "\n", "out_data", "[", "-", "1", "]", "[", "'relative_position'", "]", "=", "float", "(", "car", ".", "attrib", "[", "'pos'", "]", ")", "\n", "out_data", "[", "-", "1", "]", "[", "'noise'", "]", "=", "float", "(", "car", ".", "attrib", "[", "'noise'", "]", ")", "\n", "out_data", "[", "-", "1", "]", "[", "'angle'", "]", "=", "float", "(", "car", ".", "attrib", "[", "'angle'", "]", ")", "\n", "out_data", "[", "-", "1", "]", "[", "'PMx'", "]", "=", "float", "(", "car", ".", "attrib", "[", "'PMx'", "]", ")", "\n", "out_data", "[", "-", "1", "]", "[", "'speed'", "]", "=", "float", "(", "car", ".", "attrib", "[", "'speed'", "]", ")", "\n", "out_data", "[", "-", "1", "]", "[", "'edge_id'", "]", "=", "car", ".", "attrib", "[", "'lane'", "]", ".", "rpartition", "(", "'_'", ")", "[", "0", "]", "\n", "out_data", "[", "-", "1", "]", "[", "'lane_number'", "]", "=", "car", ".", "attrib", "[", "'lane'", "]", ".", "rpartition", "(", "'_'", ")", "[", "-", "1", "]", "\n", "", "except", "KeyError", ":", "\n", "                ", "del", "out_data", "[", "-", "1", "]", "\n", "\n", "# sort the elements of the dictionary by the vehicle id", "\n", "", "", "", "out_data", "=", "sorted", "(", "out_data", ",", "key", "=", "lambda", "k", ":", "k", "[", "'id'", "]", ")", "\n", "\n", "# default output path", "\n", "if", "output_path", "is", "None", ":", "\n", "        ", "output_path", "=", "emission_path", "[", ":", "-", "3", "]", "+", "'csv'", "\n", "\n", "# output the dict data into a csv file", "\n", "", "keys", "=", "out_data", "[", "0", "]", ".", "keys", "(", ")", "\n", "with", "open", "(", "output_path", ",", "'w'", ")", "as", "output_file", ":", "\n", "        ", "dict_writer", "=", "csv", ".", "DictWriter", "(", "output_file", ",", "keys", ")", "\n", "dict_writer", ".", "writeheader", "(", ")", "\n", "dict_writer", ".", "writerows", "(", "out_data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.kernel.kernel.Kernel.__init__": [[48, 78], ["flow.core.kernel.simulation.TraCISimulation", "flow.core.kernel.network.TraCIKernelNetwork", "flow.core.kernel.vehicle.TraCIVehicle", "flow.core.kernel.traffic_light.TraCITrafficLight", "flow.core.kernel.simulation.AimsunKernelSimulation", "flow.core.kernel.network.AimsunKernelNetwork", "flow.core.kernel.vehicle.AimsunKernelVehicle", "flow.core.kernel.traffic_light.AimsunKernelTrafficLight", "flow.utils.exceptions.FatalFlowError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "simulator", ",", "sim_params", ")", ":", "\n", "        ", "\"\"\"Instantiate a Flow kernel object.\n\n        Parameters\n        ----------\n        simulator : str\n            simulator type, must be one of {\"traci\"}\n        sim_params : flow.core.params.SimParams\n            simulation-specific parameters\n\n        Raises\n        ------\n        flow.utils.exceptions.FatalFlowError\n            if the specified input simulator is not a valid type\n        \"\"\"", "\n", "self", ".", "kernel_api", "=", "None", "\n", "\n", "if", "simulator", "==", "\"traci\"", ":", "\n", "            ", "self", ".", "simulation", "=", "TraCISimulation", "(", "self", ")", "\n", "self", ".", "network", "=", "TraCIKernelNetwork", "(", "self", ",", "sim_params", ")", "\n", "self", ".", "vehicle", "=", "TraCIVehicle", "(", "self", ",", "sim_params", ")", "\n", "self", ".", "traffic_light", "=", "TraCITrafficLight", "(", "self", ")", "\n", "", "elif", "simulator", "==", "'aimsun'", ":", "\n", "            ", "self", ".", "simulation", "=", "AimsunKernelSimulation", "(", "self", ")", "\n", "self", ".", "network", "=", "AimsunKernelNetwork", "(", "self", ",", "sim_params", ")", "\n", "self", ".", "vehicle", "=", "AimsunKernelVehicle", "(", "self", ",", "sim_params", ")", "\n", "self", ".", "traffic_light", "=", "AimsunKernelTrafficLight", "(", "self", ")", "\n", "", "else", ":", "\n", "            ", "raise", "FatalFlowError", "(", "'Simulator type \"{}\" is not valid.'", ".", "\n", "format", "(", "simulator", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.kernel.kernel.Kernel.pass_api": [[79, 86], ["kernel.Kernel.simulation.pass_api", "kernel.Kernel.network.pass_api", "kernel.Kernel.vehicle.pass_api", "kernel.Kernel.traffic_light.pass_api"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.pass_api", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.pass_api", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.pass_api", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.pass_api"], ["", "", "def", "pass_api", "(", "self", ",", "kernel_api", ")", ":", "\n", "        ", "\"\"\"Pass the kernel API to all kernel subclasses.\"\"\"", "\n", "self", ".", "kernel_api", "=", "kernel_api", "\n", "self", ".", "simulation", ".", "pass_api", "(", "kernel_api", ")", "\n", "self", ".", "network", ".", "pass_api", "(", "kernel_api", ")", "\n", "self", ".", "vehicle", ".", "pass_api", "(", "kernel_api", ")", "\n", "self", ".", "traffic_light", ".", "pass_api", "(", "kernel_api", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.kernel.kernel.Kernel.update": [[87, 105], ["kernel.Kernel.vehicle.update", "kernel.Kernel.traffic_light.update", "kernel.Kernel.network.update", "kernel.Kernel.simulation.update"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update"], ["", "def", "update", "(", "self", ",", "reset", ")", ":", "\n", "        ", "\"\"\"Update the kernel subclasses after a simulation step.\n\n        This is meant to support optimizations in the performance of some\n        simulators. For example, this step allows the vehicle subclass in the\n        \"traci\" simulator uses the ``update`` method to collect and store\n        subscription information.\n\n        Parameters\n        ----------\n        reset : bool\n            specifies whether the simulator was reset in the last simulation\n            step\n        \"\"\"", "\n", "self", ".", "vehicle", ".", "update", "(", "reset", ")", "\n", "self", ".", "traffic_light", ".", "update", "(", "reset", ")", "\n", "self", ".", "network", ".", "update", "(", "reset", ")", "\n", "self", ".", "simulation", ".", "update", "(", "reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.kernel.kernel.Kernel.close": [[106, 110], ["kernel.Kernel.network.close", "kernel.Kernel.simulation.close"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Terminate all components within the simulation and network.\"\"\"", "\n", "self", ".", "network", ".", "close", "(", ")", "\n", "self", ".", "simulation", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.kernel.kernel.Kernel.scenario": [[111, 121], ["warnings.simplefilter", "warnings.warn"], "methods", ["None"], ["", "@", "property", "\n", "def", "scenario", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return network for this deprecated method.\"\"\"", "\n", "warnings", ".", "simplefilter", "(", "'always'", ",", "PendingDeprecationWarning", ")", "\n", "warnings", ".", "warn", "(", "\n", "\"self.k.scenario will be deprecated in a future release. Please \"", "\n", "\"use self.k.network instead.\"", ",", "\n", "PendingDeprecationWarning", "\n", ")", "\n", "return", "self", ".", "network", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.base.KernelSimulation.__init__": [[18, 29], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.base.KernelSimulation.pass_api": [[30, 39], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.base.KernelSimulation.start_simulation": [[40, 51], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.base.KernelSimulation.simulation_step": [[52, 58], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.base.KernelSimulation.update": [[59, 72], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.base.KernelSimulation.check_collision": [[73, 82], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.base.KernelSimulation.close": [[83, 86], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.traci.TraCISimulation.__init__": [[53, 69], ["flow.core.kernel.simulation.KernelSimulation.__init__", "dict"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "master_kernel", ")", ":", "\n", "        ", "\"\"\"Instantiate the sumo simulator kernel.\n\n        Parameters\n        ----------\n        master_kernel : flow.core.kernel.Kernel\n            the higher level kernel (used to call methods from other\n            sub-kernels)\n        \"\"\"", "\n", "KernelSimulation", ".", "__init__", "(", "self", ",", "master_kernel", ")", "\n", "\n", "self", ".", "sumo_proc", "=", "None", "\n", "self", ".", "sim_step", "=", "None", "\n", "self", ".", "emission_path", "=", "None", "\n", "self", ".", "time", "=", "0", "\n", "self", ".", "stored_data", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.traci.TraCISimulation.pass_api": [[70, 88], ["flow.core.kernel.simulation.KernelSimulation.pass_api", "traci.TraCISimulation.kernel_api.simulation.subscribe", "traci.TraCISimulation.kernel_api.simulation.subscribe"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.pass_api"], ["", "def", "pass_api", "(", "self", ",", "kernel_api", ")", ":", "\n", "        ", "\"\"\"See parent class.\n\n        Also initializes subscriptions.\n        \"\"\"", "\n", "KernelSimulation", ".", "pass_api", "(", "self", ",", "kernel_api", ")", "\n", "\n", "# subscribe some simulation parameters needed to check for entering,", "\n", "# exiting, and colliding vehicles", "\n", "self", ".", "kernel_api", ".", "simulation", ".", "subscribe", "(", "[", "\n", "tc", ".", "VAR_DEPARTED_VEHICLES_IDS", ",", "\n", "tc", ".", "VAR_ARRIVED_VEHICLES_IDS", ",", "\n", "tc", ".", "VAR_TELEPORT_STARTING_VEHICLES_IDS", ",", "\n", "tc", ".", "VAR_TIME_STEP", ",", "\n", "tc", ".", "VAR_DELTA_T", ",", "\n", "tc", ".", "VAR_LOADED_VEHICLES_NUMBER", ",", "\n", "tc", ".", "VAR_DEPARTED_VEHICLES_NUMBER", ",", "\n", "tc", ".", "VAR_ARRIVED_VEHICLES_NUMBER", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.traci.TraCISimulation.simulation_step": [[90, 93], ["traci.TraCISimulation.kernel_api.simulationStep", "traci.TraCISimulation.kernel_api.simulationStep"], "methods", ["None"], ["", "def", "simulation_step", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "self", ".", "kernel_api", ".", "simulationStep", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.traci.TraCISimulation.update": [[94, 143], ["traci.TraCISimulation.master_kernel.vehicle.get_ids", "traci.TraCISimulation.master_kernel.vehicle.get_ids", "round", "kv.get_2d_position", "[].update", "traci.TraCISimulation.stored_data.keys", "traci.TraCISimulation.stored_data.keys", "dict", "traci.TraCISimulation.stored_data[].keys", "traci.TraCISimulation.stored_data[].keys", "dict", "kv.get_speed", "kv.get_lane", "kv.get_edge", "kv.get_position", "kv.get_headway", "kv.get_leader", "kv.get_follower", "kv.get_accel", "kv.get_accel", "kv.get_accel", "kv.get_accel", "kv.get_realized_accel", "kv.get_road_grade", "kv.get_distance", "kv.get_speed", "kv.get_speed", "kv.get_leader"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_2d_position", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_follower", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_accel", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_accel", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_accel", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_accel", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_realized_accel", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_road_grade", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_distance", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader"], ["", "def", "update", "(", "self", ",", "reset", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "if", "reset", ":", "\n", "            ", "self", ".", "time", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "time", "+=", "self", ".", "sim_step", "\n", "\n", "# Collect the additional data to store in the emission file.", "\n", "", "if", "self", ".", "emission_path", "is", "not", "None", ":", "\n", "            ", "kv", "=", "self", ".", "master_kernel", ".", "vehicle", "\n", "for", "veh_id", "in", "self", ".", "master_kernel", ".", "vehicle", ".", "get_ids", "(", ")", ":", "\n", "                ", "t", "=", "round", "(", "self", ".", "time", ",", "2", ")", "\n", "\n", "# some miscellaneous pre-processing", "\n", "position", "=", "kv", ".", "get_2d_position", "(", "veh_id", ")", "\n", "\n", "# Make sure dictionaries corresponding to the vehicle and", "\n", "# time are available.", "\n", "if", "veh_id", "not", "in", "self", ".", "stored_data", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "stored_data", "[", "veh_id", "]", "=", "dict", "(", ")", "\n", "", "if", "t", "not", "in", "self", ".", "stored_data", "[", "veh_id", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "stored_data", "[", "veh_id", "]", "[", "t", "]", "=", "dict", "(", ")", "\n", "\n", "# Add the speed, position, and lane data.", "\n", "", "self", ".", "stored_data", "[", "veh_id", "]", "[", "t", "]", ".", "update", "(", "{", "\n", "\"speed\"", ":", "kv", ".", "get_speed", "(", "veh_id", ")", ",", "\n", "\"lane_number\"", ":", "kv", ".", "get_lane", "(", "veh_id", ")", ",", "\n", "\"edge_id\"", ":", "kv", ".", "get_edge", "(", "veh_id", ")", ",", "\n", "\"relative_position\"", ":", "kv", ".", "get_position", "(", "veh_id", ")", ",", "\n", "\"x\"", ":", "position", "[", "0", "]", ",", "\n", "\"y\"", ":", "position", "[", "1", "]", ",", "\n", "\"headway\"", ":", "kv", ".", "get_headway", "(", "veh_id", ")", ",", "\n", "\"leader_id\"", ":", "kv", ".", "get_leader", "(", "veh_id", ")", ",", "\n", "\"follower_id\"", ":", "kv", ".", "get_follower", "(", "veh_id", ")", ",", "\n", "\"leader_rel_speed\"", ":", "\n", "kv", ".", "get_speed", "(", "kv", ".", "get_leader", "(", "veh_id", ")", ")", "\n", "-", "kv", ".", "get_speed", "(", "veh_id", ")", ",", "\n", "\"target_accel_with_noise_with_failsafe\"", ":", "\n", "kv", ".", "get_accel", "(", "veh_id", ",", "noise", "=", "True", ",", "failsafe", "=", "True", ")", ",", "\n", "\"target_accel_no_noise_no_failsafe\"", ":", "\n", "kv", ".", "get_accel", "(", "veh_id", ",", "noise", "=", "False", ",", "failsafe", "=", "False", ")", ",", "\n", "\"target_accel_with_noise_no_failsafe\"", ":", "\n", "kv", ".", "get_accel", "(", "veh_id", ",", "noise", "=", "True", ",", "failsafe", "=", "False", ")", ",", "\n", "\"target_accel_no_noise_with_failsafe\"", ":", "\n", "kv", ".", "get_accel", "(", "veh_id", ",", "noise", "=", "False", ",", "failsafe", "=", "True", ")", ",", "\n", "\"realized_accel\"", ":", "\n", "kv", ".", "get_realized_accel", "(", "veh_id", ")", ",", "\n", "\"road_grade\"", ":", "kv", ".", "get_road_grade", "(", "veh_id", ")", ",", "\n", "\"distance\"", ":", "kv", ".", "get_distance", "(", "veh_id", ")", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.traci.TraCISimulation.close": [[145, 152], ["traci.TraCISimulation.kernel_api.close", "traci.TraCISimulation.kernel_api.close", "traci.TraCISimulation.save_emission", "traci.TraCISimulation.save_emission"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.traci.TraCISimulation.save_emission", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.traci.TraCISimulation.save_emission"], ["", "", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "# Save the emission data to a csv.", "\n", "if", "self", ".", "emission_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "save_emission", "(", ")", "\n", "\n", "", "self", ".", "kernel_api", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.traci.TraCISimulation.check_collision": [[153, 157], ["traci.TraCISimulation.kernel_api.simulation.getCollidingVehiclesNumber", "traci.TraCISimulation.kernel_api.simulation.getCollidingVehiclesNumber"], "methods", ["None"], ["", "def", "check_collision", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "# return self.kernel_api.simulation.getStartingTeleportNumber() != 0", "\n", "return", "self", ".", "kernel_api", ".", "simulation", ".", "getCollidingVehiclesNumber", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.traci.TraCISimulation.start_simulation": [[158, 264], ["range", "flow.core.util.ensure_dir", "sumo_call.append", "sumo_call.append", "sumo_call.append", "sumo_call.append", "sumo_call.append", "sumo_call.append", "logging.info", "logging.debug", "logging.debug", "logging.debug", "subprocess.Popen", "os.environ.get", "traci.connect", "traci.connect", "traci.connect", "traci.connect", "traci.connect.setOrder", "traci.connect.setOrder", "traci.connect.simulationStep", "traci.connect.simulationStep", "str", "str", "str", "sumo_call.append", "sumo_call.append", "sumo_call.append", "sumo_call.append", "sumo_call.append", "sumo_call.append", "sumo_call.append", "sumo_call.append", "sumo_call.append", "sumo_call.append", "str", "logging.info", "time.sleep", "time.sleep", "print", "traci.TraCISimulation.teardown_sumo", "traci.TraCISimulation.teardown_sumo", "str", "str", "int", "str", "str", "str", "str", "str", "traceback.format_exc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.ensure_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.traci.TraCISimulation.teardown_sumo", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.traci.TraCISimulation.teardown_sumo"], ["", "def", "start_simulation", "(", "self", ",", "network", ",", "sim_params", ")", ":", "\n", "        ", "\"\"\"Start a sumo simulation instance.\n\n        This method performs the following operations:\n\n        1. It collect the simulation step size and the emission path\n           information. If an emission path is specifies, it ensures that the\n           path exists.\n        2. It also uses the configuration files created by the network class to\n           initialize a sumo instance.\n        3. Finally, It initializes a traci connection to interface with sumo\n           from Python and returns the connection.\n        \"\"\"", "\n", "# Save the simulation step size (for later use).", "\n", "self", ".", "sim_step", "=", "sim_params", ".", "sim_step", "\n", "\n", "# Update the emission path term.", "\n", "self", ".", "emission_path", "=", "sim_params", ".", "emission_path", "\n", "if", "self", ".", "emission_path", "is", "not", "None", ":", "\n", "            ", "ensure_dir", "(", "self", ".", "emission_path", ")", "\n", "\n", "", "error", "=", "None", "\n", "for", "_", "in", "range", "(", "RETRIES_ON_ERROR", ")", ":", "\n", "            ", "try", ":", "\n", "# port number the sumo instance will be run on", "\n", "                ", "port", "=", "sim_params", ".", "port", "\n", "\n", "sumo_binary", "=", "\"sumo-gui\"", "if", "sim_params", ".", "render", "is", "True", "else", "\"sumo\"", "\n", "\n", "# command used to start sumo", "\n", "sumo_call", "=", "[", "\n", "sumo_binary", ",", "\"-c\"", ",", "network", ".", "cfg", ",", "\n", "\"--remote-port\"", ",", "str", "(", "sim_params", ".", "port", ")", ",", "\n", "\"--num-clients\"", ",", "str", "(", "sim_params", ".", "num_clients", ")", ",", "\n", "\"--step-length\"", ",", "str", "(", "sim_params", ".", "sim_step", ")", "\n", "]", "\n", "\n", "# use a ballistic integration step (if request)", "\n", "if", "sim_params", ".", "use_ballistic", ":", "\n", "                    ", "sumo_call", ".", "append", "(", "\"--step-method.ballistic\"", ")", "\n", "\n", "# ignore step logs (if requested)", "\n", "", "if", "sim_params", ".", "no_step_log", ":", "\n", "                    ", "sumo_call", ".", "append", "(", "\"--no-step-log\"", ")", "\n", "\n", "# add the lateral resolution of the sublanes (if requested)", "\n", "", "if", "sim_params", ".", "lateral_resolution", "is", "not", "None", ":", "\n", "                    ", "sumo_call", ".", "append", "(", "\"--lateral-resolution\"", ")", "\n", "sumo_call", ".", "append", "(", "str", "(", "sim_params", ".", "lateral_resolution", ")", ")", "\n", "\n", "", "if", "sim_params", ".", "overtake_right", ":", "\n", "                    ", "sumo_call", ".", "append", "(", "\"--lanechange.overtake-right\"", ")", "\n", "sumo_call", ".", "append", "(", "\"true\"", ")", "\n", "\n", "# specify a simulation seed (if requested)", "\n", "", "if", "sim_params", ".", "seed", "is", "not", "None", ":", "\n", "                    ", "sumo_call", ".", "append", "(", "\"--seed\"", ")", "\n", "sumo_call", ".", "append", "(", "str", "(", "sim_params", ".", "seed", ")", ")", "\n", "\n", "", "if", "not", "sim_params", ".", "print_warnings", ":", "\n", "                    ", "sumo_call", ".", "append", "(", "\"--no-warnings\"", ")", "\n", "sumo_call", ".", "append", "(", "\"true\"", ")", "\n", "\n", "# set the time it takes for a gridlock teleport to occur", "\n", "", "sumo_call", ".", "append", "(", "\"--time-to-teleport\"", ")", "\n", "sumo_call", ".", "append", "(", "str", "(", "int", "(", "sim_params", ".", "teleport_time", ")", ")", ")", "\n", "\n", "# check collisions at intersections", "\n", "sumo_call", ".", "append", "(", "\"--collision.check-junctions\"", ")", "\n", "sumo_call", ".", "append", "(", "\"true\"", ")", "\n", "\n", "sumo_call", ".", "append", "(", "\"--collision.action\"", ")", "\n", "sumo_call", ".", "append", "(", "\"warn\"", ")", "\n", "\n", "logging", ".", "info", "(", "\" Starting SUMO on port \"", "+", "str", "(", "port", ")", ")", "\n", "logging", ".", "debug", "(", "\" Cfg file: \"", "+", "str", "(", "network", ".", "cfg", ")", ")", "\n", "if", "sim_params", ".", "num_clients", ">", "1", ":", "\n", "                    ", "logging", ".", "info", "(", "\" Num clients are\"", "+", "\n", "str", "(", "sim_params", ".", "num_clients", ")", ")", "\n", "", "logging", ".", "debug", "(", "\" Emission file: \"", "+", "str", "(", "self", ".", "emission_path", ")", ")", "\n", "logging", ".", "debug", "(", "\" Step length: \"", "+", "str", "(", "sim_params", ".", "sim_step", ")", ")", "\n", "\n", "# Opening the I/O thread to SUMO", "\n", "self", ".", "sumo_proc", "=", "subprocess", ".", "Popen", "(", "\n", "sumo_call", ",", "\n", "stdout", "=", "subprocess", ".", "DEVNULL", "\n", ")", "\n", "\n", "# wait a small period of time for the subprocess to activate", "\n", "# before trying to connect with traci", "\n", "if", "os", ".", "environ", ".", "get", "(", "\"TEST_FLAG\"", ",", "0", ")", ":", "\n", "                    ", "time", ".", "sleep", "(", "0.1", ")", "\n", "", "else", ":", "\n", "                    ", "time", ".", "sleep", "(", "config", ".", "SUMO_SLEEP", ")", "\n", "\n", "", "traci_connection", "=", "traci", ".", "connect", "(", "port", ",", "numRetries", "=", "100", ")", "\n", "traci_connection", ".", "setOrder", "(", "0", ")", "\n", "traci_connection", ".", "simulationStep", "(", ")", "\n", "\n", "return", "traci_connection", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "\"Error during start: {}\"", ".", "format", "(", "traceback", ".", "format_exc", "(", ")", ")", ")", "\n", "error", "=", "e", "\n", "self", ".", "teardown_sumo", "(", ")", "\n", "", "", "raise", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.traci.TraCISimulation.teardown_sumo": [[265, 271], ["os.killpg", "print"], "methods", ["None"], ["", "def", "teardown_sumo", "(", "self", ")", ":", "\n", "        ", "\"\"\"Kill the sumo subprocess instance.\"\"\"", "\n", "try", ":", "\n", "            ", "os", ".", "killpg", "(", "self", ".", "sumo_proc", ".", "pid", ",", "signal", ".", "SIGTERM", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"Error during teardown: {}\"", ".", "format", "(", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.traci.TraCISimulation.save_emission": [[272, 334], ["final_data.update", "traci.TraCISimulation.stored_data.keys", "traci.TraCISimulation.stored_data.keys", "traci.TraCISimulation.stored_data.clear", "traci.TraCISimulation.stored_data.clear", "len", "traci.TraCISimulation.stored_data[].keys", "traci.TraCISimulation.stored_data[].keys", "open", "print", "csv.writer", "csv.writer.writerow", "csv.writer.writerows", "final_data[].append", "final_data[].append", "os.path.join", "os.path.join", "final_data.keys", "zip", "final_data[].append", "final_data.values"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "", "def", "save_emission", "(", "self", ",", "run_id", "=", "0", ")", ":", "\n", "        ", "\"\"\"Save any collected emission data to a csv file.\n\n        If not data was collected, nothing happens. Moreover, any internally\n        stored data by this class is clear whenever data is stored.\n\n        Parameters\n        ----------\n        run_id : int\n            the rollout number, appended to the name of the emission file. Used\n            to store emission files from multiple rollouts run sequentially.\n        \"\"\"", "\n", "# If there is no stored data, ignore this operation. This is to ensure", "\n", "# that data isn't deleted if the operation is called twice.", "\n", "if", "len", "(", "self", ".", "stored_data", ")", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "# Get a csv name for the emission file.", "\n", "", "name", "=", "\"{}-{}_emission.csv\"", ".", "format", "(", "\n", "self", ".", "master_kernel", ".", "network", ".", "network", ".", "name", ",", "run_id", ")", "\n", "\n", "# The name of all stored data-points (excluding id and time)", "\n", "stored_ids", "=", "[", "\n", "\"x\"", ",", "\n", "\"y\"", ",", "\n", "\"speed\"", ",", "\n", "\"headway\"", ",", "\n", "\"leader_id\"", ",", "\n", "\"target_accel_with_noise_with_failsafe\"", ",", "\n", "\"target_accel_no_noise_no_failsafe\"", ",", "\n", "\"target_accel_with_noise_no_failsafe\"", ",", "\n", "\"target_accel_no_noise_with_failsafe\"", ",", "\n", "\"realized_accel\"", ",", "\n", "\"road_grade\"", ",", "\n", "\"edge_id\"", ",", "\n", "\"lane_number\"", ",", "\n", "\"distance\"", ",", "\n", "\"relative_position\"", ",", "\n", "\"follower_id\"", ",", "\n", "\"leader_rel_speed\"", ",", "\n", "]", "\n", "\n", "# Update the stored data to push to the csv file.", "\n", "final_data", "=", "{", "\"time\"", ":", "[", "]", ",", "\"id\"", ":", "[", "]", "}", "\n", "final_data", ".", "update", "(", "{", "key", ":", "[", "]", "for", "key", "in", "stored_ids", "}", ")", "\n", "\n", "for", "veh_id", "in", "self", ".", "stored_data", ".", "keys", "(", ")", ":", "\n", "            ", "for", "t", "in", "self", ".", "stored_data", "[", "veh_id", "]", ".", "keys", "(", ")", ":", "\n", "                ", "final_data", "[", "'time'", "]", ".", "append", "(", "t", ")", "\n", "final_data", "[", "'id'", "]", ".", "append", "(", "veh_id", ")", "\n", "for", "key", "in", "stored_ids", ":", "\n", "                    ", "final_data", "[", "key", "]", ".", "append", "(", "self", ".", "stored_data", "[", "veh_id", "]", "[", "t", "]", "[", "key", "]", ")", "\n", "\n", "", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "emission_path", ",", "name", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "print", "(", "os", ".", "path", ".", "join", "(", "self", ".", "emission_path", ",", "name", ")", ",", "self", ".", "emission_path", ")", "\n", "writer", "=", "csv", ".", "writer", "(", "f", ",", "delimiter", "=", "','", ")", "\n", "writer", ".", "writerow", "(", "final_data", ".", "keys", "(", ")", ")", "\n", "writer", ".", "writerows", "(", "zip", "(", "*", "final_data", ".", "values", "(", ")", ")", ")", "\n", "\n", "# Clear all memory from the stored data. This is useful if this", "\n", "# function is called in between resets.", "\n", "", "self", ".", "stored_data", ".", "clear", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.__init__": [[31, 51], ["flow.core.kernel.simulation.base.KernelSimulation.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "master_kernel", ")", ":", "\n", "        ", "\"\"\"Initialize the Aimsun simulation kernel.\"\"\"", "\n", "KernelSimulation", ".", "__init__", "(", "self", ",", "master_kernel", ")", "\n", "\n", "self", ".", "master_kernel", "=", "master_kernel", "\n", "self", ".", "kernel_api", "=", "None", "\n", "self", ".", "sim_step", "=", "None", "\n", "self", ".", "emission_path", "=", "None", "\n", "self", ".", "time", "=", "0", "\n", "self", ".", "stored_data", "=", "{", "\n", "'time'", ":", "[", "]", ",", "\n", "'x'", ":", "[", "]", ",", "\n", "'y'", ":", "[", "]", ",", "\n", "'angle'", ":", "[", "]", ",", "\n", "'type'", ":", "[", "]", ",", "\n", "'id'", ":", "[", "]", ",", "\n", "'relative_position'", ":", "[", "]", ",", "\n", "'speed'", ":", "[", "]", ",", "\n", "'edge_id'", ":", "[", "]", ",", "\n", "'lane_number'", ":", "[", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.pass_api": [[53, 56], ["None"], "methods", ["None"], ["", "def", "pass_api", "(", "self", ",", "kernel_api", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "self", ".", "kernel_api", "=", "kernel_api", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.start_simulation": [[57, 72], ["flow.utils.aimsun.api.FlowAimsunAPI", "flow.core.util.ensure_dir"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.ensure_dir"], ["", "def", "start_simulation", "(", "self", ",", "network", ",", "sim_params", ")", ":", "\n", "        ", "\"\"\"See parent class.\n\n        This method calls the aimsun generator to generate the network, starts\n        a simulation, and creates a class to communicate with the simulation\n        via an TCP connection.\n        \"\"\"", "\n", "# save the simulation step size (for later use)", "\n", "self", ".", "sim_step", "=", "sim_params", ".", "sim_step", "\n", "\n", "self", ".", "emission_path", "=", "sim_params", ".", "emission_path", "\n", "if", "self", ".", "emission_path", "is", "not", "None", ":", "\n", "            ", "ensure_dir", "(", "self", ".", "emission_path", ")", "\n", "\n", "", "return", "FlowAimsunAPI", "(", "port", "=", "sim_params", ".", "port", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.simulation_step": [[73, 76], ["aimsun.AimsunKernelSimulation.kernel_api.simulation_step"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.simulation_step"], ["", "def", "simulation_step", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "self", ".", "kernel_api", ".", "simulation_step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.update": [[77, 110], ["aimsun.AimsunKernelSimulation.master_kernel.vehicle.get_ids", "aimsun.AimsunKernelSimulation.master_kernel.vehicle.get_position_world", "aimsun.AimsunKernelSimulation.stored_data[].append", "aimsun.AimsunKernelSimulation.stored_data[].append", "aimsun.AimsunKernelSimulation.stored_data[].append", "aimsun.AimsunKernelSimulation.stored_data[].append", "aimsun.AimsunKernelSimulation.stored_data[].append", "aimsun.AimsunKernelSimulation.stored_data[].append", "aimsun.AimsunKernelSimulation.stored_data[].append", "aimsun.AimsunKernelSimulation.stored_data[].append", "aimsun.AimsunKernelSimulation.stored_data[].append", "aimsun.AimsunKernelSimulation.stored_data[].append", "aimsun.AimsunKernelSimulation.master_kernel.vehicle.get_type", "aimsun.AimsunKernelSimulation.master_kernel.vehicle.get_position", "aimsun.AimsunKernelSimulation.master_kernel.vehicle.get_angle", "aimsun.AimsunKernelSimulation.master_kernel.vehicle.get_speed", "aimsun.AimsunKernelSimulation.master_kernel.vehicle.get_edge", "aimsun.AimsunKernelSimulation.master_kernel.vehicle.get_lane"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position_world", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_type", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_angle", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane"], ["", "def", "update", "(", "self", ",", "reset", ")", ":", "\n", "        ", "\"\"\"See parent class.\n\n        No update is needed in this case.\n        \"\"\"", "\n", "if", "reset", ":", "\n", "            ", "self", ".", "time", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "time", "+=", "self", ".", "sim_step", "\n", "\n", "", "if", "self", ".", "emission_path", "is", "not", "None", ":", "\n", "            ", "for", "veh_id", "in", "self", ".", "master_kernel", ".", "vehicle", ".", "get_ids", "(", ")", ":", "\n", "                ", "pos", "=", "self", ".", "master_kernel", ".", "vehicle", ".", "get_position_world", "(", "veh_id", ")", "\n", "self", ".", "stored_data", "[", "'id'", "]", ".", "append", "(", "\n", "veh_id", ")", "\n", "self", ".", "stored_data", "[", "'time'", "]", ".", "append", "(", "\n", "self", ".", "time", ")", "\n", "self", ".", "stored_data", "[", "'type'", "]", ".", "append", "(", "\n", "self", ".", "master_kernel", ".", "vehicle", ".", "get_type", "(", "veh_id", ")", ")", "\n", "self", ".", "stored_data", "[", "'x'", "]", ".", "append", "(", "\n", "pos", "[", "0", "]", ")", "\n", "self", ".", "stored_data", "[", "'y'", "]", ".", "append", "(", "\n", "pos", "[", "1", "]", ")", "\n", "self", ".", "stored_data", "[", "'relative_position'", "]", ".", "append", "(", "\n", "self", ".", "master_kernel", ".", "vehicle", ".", "get_position", "(", "veh_id", ")", ")", "\n", "self", ".", "stored_data", "[", "'angle'", "]", ".", "append", "(", "\n", "self", ".", "master_kernel", ".", "vehicle", ".", "get_angle", "(", "veh_id", ")", ")", "\n", "self", ".", "stored_data", "[", "'speed'", "]", ".", "append", "(", "\n", "self", ".", "master_kernel", ".", "vehicle", ".", "get_speed", "(", "veh_id", ")", ")", "\n", "self", ".", "stored_data", "[", "'edge_id'", "]", ".", "append", "(", "\n", "self", ".", "master_kernel", ".", "vehicle", ".", "get_edge", "(", "veh_id", ")", ")", "\n", "self", ".", "stored_data", "[", "'lane_number'", "]", ".", "append", "(", "\n", "self", ".", "master_kernel", ".", "vehicle", ".", "get_lane", "(", "veh_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.check_collision": [[111, 114], ["None"], "methods", ["None"], ["", "", "", "def", "check_collision", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.close": [[115, 132], ["aimsun.AimsunKernelSimulation.kernel_api.stop_simulation", "aimsun.AimsunKernelSimulation.master_kernel.network.aimsun_proc.kill", "open", "csv.writer", "csv.writer.writerow", "csv.writer.writerows", "os.join", "aimsun.AimsunKernelSimulation.stored_data.keys", "zip", "aimsun.AimsunKernelSimulation.stored_data.values"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.stop_simulation"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "# save the emission data to a csv", "\n", "if", "self", ".", "emission_path", "is", "not", "None", ":", "\n", "            ", "name", "=", "\"%s_emission.csv\"", "%", "self", ".", "master_kernel", ".", "network", ".", "network", ".", "name", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "emission_path", ",", "name", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "writer", "=", "csv", ".", "writer", "(", "f", ",", "delimiter", "=", "','", ")", "\n", "writer", ".", "writerow", "(", "self", ".", "stored_data", ".", "keys", "(", ")", ")", "\n", "writer", ".", "writerows", "(", "zip", "(", "*", "self", ".", "stored_data", ".", "values", "(", ")", ")", ")", "\n", "\n", "# close the API and simulation process", "\n", "", "", "try", ":", "\n", "            ", "self", ".", "kernel_api", ".", "stop_simulation", "(", ")", "\n", "self", ".", "master_kernel", ".", "network", ".", "aimsun_proc", ".", "kill", "(", ")", "\n", "", "except", "OSError", ":", "\n", "# in case no simulation originally existed (used by the visualizer)", "\n", "            ", "pass", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.__init__": [[50, 75], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.generate_network": [[76, 86], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.pass_api": [[87, 96], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.update": [[97, 111], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.close": [[112, 115], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.edge_length": [[120, 126], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.length": [[127, 130], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.speed_limit": [[131, 137], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.max_speed": [[138, 141], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.num_lanes": [[142, 148], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.get_edge_list": [[149, 152], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.get_junction_list": [[153, 156], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.get_edge": [[157, 172], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.get_x": [[173, 189], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.next_edge": [[190, 197], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.prev_edge": [[198, 205], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.generate_starting_positions": [[210, 251], ["base.BaseKernelNetwork.gen_even_start_pos", "base.BaseKernelNetwork.gen_random_start_pos", "base.BaseKernelNetwork.gen_custom_start_pos", "flow.utils.exceptions.FatalFlowError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.gen_even_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.gen_random_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.gen_custom_start_pos"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.gen_even_start_pos": [[252, 381], ["isinstance", "base.BaseKernelNetwork._get_start_pos_util", "any", "sum", "copy.deepcopy", "base.BaseKernelNetwork.num_lanes", "base.BaseKernelNetwork.get_edge", "range", "range", "base.BaseKernelNetwork.gen_even_start_pos", "startpositions.extend", "startlanes.extend", "base.BaseKernelNetwork.get_edge_list", "dict().keys", "next", "base.BaseKernelNetwork.get_edge", "min", "startpositions.append", "startlanes.append", "base.BaseKernelNetwork.non_internal_length", "numpy.random.normal", "max", "range", "base.BaseKernelNetwork.non_internal_length", "min", "len", "dict", "len", "base.BaseKernelNetwork.edge_length", "base.BaseKernelNetwork.num_lanes", "base.BaseKernelNetwork.num_lanes", "base.BaseKernelNetwork.edge_length", "enumerate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork._get_start_pos_util", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.gen_even_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.non_internal_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.non_internal_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.gen_random_start_pos": [[382, 477], ["isinstance", "base.BaseKernelNetwork._get_start_pos_util", "init_absolute_pos.sort", "range", "range", "sum", "copy.deepcopy", "int", "startpositions.append", "startlanes.append", "base.BaseKernelNetwork.gen_random_start_pos", "startpositions.extend", "startlanes.extend", "min", "random.random", "range", "int", "base.BaseKernelNetwork.edge_length", "min", "min", "base.BaseKernelNetwork.num_lanes", "base.BaseKernelNetwork.edge_length", "base.BaseKernelNetwork.edge_length", "base.BaseKernelNetwork.edge_length", "base.BaseKernelNetwork.num_lanes", "base.BaseKernelNetwork.num_lanes", "base.BaseKernelNetwork.edge_length"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork._get_start_pos_util", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.gen_random_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.gen_custom_start_pos": [[478, 502], ["base.BaseKernelNetwork.network.gen_custom_start_pos"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.gen_custom_start_pos"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork._get_start_pos_util": [[504, 598], ["max", "logging.warning", "max", "max", "sum", "sum", "flow.utils.exceptions.FatalFlowError", "logging.warning", "base.BaseKernelNetwork.num_lanes", "base.BaseKernelNetwork.num_lanes", "base.BaseKernelNetwork.get_edge_list", "base.BaseKernelNetwork.get_edge_list", "base.BaseKernelNetwork.edge_length", "min", "base.BaseKernelNetwork.get_edge_list", "base.BaseKernelNetwork.edge_length", "min", "base.BaseKernelNetwork.edge_length", "base.BaseKernelNetwork.edge_length", "base.BaseKernelNetwork.edge_length", "base.BaseKernelNetwork.num_lanes", "base.BaseKernelNetwork.edge_length", "base.BaseKernelNetwork.num_lanes"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.__init__": [[43, 85], ["flow.core.kernel.network.BaseKernelNetwork.__init__", "os.path.join", "os.path.join", "flow.core.util.ensure_dir", "flow.core.util.ensure_dir", "tempfile.gettempdir", "tempfile.gettempdir"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.ensure_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.ensure_dir"], ["\n", "\n", "def", "__init__", "(", "self", ",", "master_kernel", ")", ":", "\n", "        ", "\"\"\"Instantiate the sumo simulator kernel.\n\n        Parameters\n        ----------\n        master_kernel : flow.core.kernel.Kernel\n            the higher level kernel (used to call methods from other\n            sub-kernels)\n        \"\"\"", "\n", "KernelSimulation", ".", "__init__", "(", "self", ",", "master_kernel", ")", "\n", "\n", "self", ".", "sumo_proc", "=", "None", "\n", "self", ".", "sim_step", "=", "None", "\n", "self", ".", "emission_path", "=", "None", "\n", "self", ".", "time", "=", "0", "\n", "self", ".", "stored_data", "=", "dict", "(", ")", "\n", "\n", "", "def", "pass_api", "(", "self", ",", "kernel_api", ")", ":", "\n", "        ", "\"\"\"See parent class.\n\n        Also initializes subscriptions.\n        \"\"\"", "\n", "KernelSimulation", ".", "pass_api", "(", "self", ",", "kernel_api", ")", "\n", "\n", "# subscribe some simulation parameters needed to check for entering,", "\n", "# exiting, and colliding vehicles", "\n", "self", ".", "kernel_api", ".", "simulation", ".", "subscribe", "(", "[", "\n", "tc", ".", "VAR_DEPARTED_VEHICLES_IDS", ",", "\n", "tc", ".", "VAR_ARRIVED_VEHICLES_IDS", ",", "\n", "tc", ".", "VAR_TELEPORT_STARTING_VEHICLES_IDS", ",", "\n", "tc", ".", "VAR_TIME_STEP", ",", "\n", "tc", ".", "VAR_DELTA_T", ",", "\n", "tc", ".", "VAR_LOADED_VEHICLES_NUMBER", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.generate_network": [[86, 211], ["list", "max", "sum", "dict", "traci.TraCIKernelNetwork.total_edgestarts.sort", "dict", "sum", "traci.TraCIKernelNetwork.generate_cfg", "traci.TraCIKernelNetwork.generate_net_from_template", "sorted", "print", "traci.TraCIKernelNetwork.generate_net_from_osm", "traci.TraCIKernelNetwork.generate_net", "traci.TraCIKernelNetwork._edges.keys", "set", "set", "traci.TraCIKernelNetwork.speed_limit", "traci.TraCIKernelNetwork.edge_length", "traci.TraCIKernelNetwork.edgestarts.append", "isinstance", "traci.TraCIKernelNetwork._edges.keys", "traci.TraCIKernelNetwork.get_edge_list", "traci.TraCIKernelNetwork.get_edge_list", "network.connections.keys", "connections.extend"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.generate_cfg", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.generate_net_from_template", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.generate_net_from_osm", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.generate_net", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.speed_limit", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend"], ["tc", ".", "VAR_DEPARTED_VEHICLES_NUMBER", ",", "\n", "tc", ".", "VAR_ARRIVED_VEHICLES_NUMBER", "\n", "]", ")", "\n", "\n", "", "def", "simulation_step", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "self", ".", "kernel_api", ".", "simulationStep", "(", ")", "\n", "\n", "", "def", "update", "(", "self", ",", "reset", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "if", "reset", ":", "\n", "            ", "self", ".", "time", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "time", "+=", "self", ".", "sim_step", "\n", "\n", "# Collect the additional data to store in the emission file.", "\n", "", "if", "self", ".", "emission_path", "is", "not", "None", ":", "\n", "            ", "kv", "=", "self", ".", "master_kernel", ".", "vehicle", "\n", "for", "veh_id", "in", "self", ".", "master_kernel", ".", "vehicle", ".", "get_ids", "(", ")", ":", "\n", "                ", "t", "=", "round", "(", "self", ".", "time", ",", "2", ")", "\n", "\n", "# some miscellaneous pre-processing", "\n", "position", "=", "kv", ".", "get_2d_position", "(", "veh_id", ")", "\n", "\n", "# Make sure dictionaries corresponding to the vehicle and", "\n", "# time are available.", "\n", "if", "veh_id", "not", "in", "self", ".", "stored_data", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "stored_data", "[", "veh_id", "]", "=", "dict", "(", ")", "\n", "", "if", "t", "not", "in", "self", ".", "stored_data", "[", "veh_id", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "stored_data", "[", "veh_id", "]", "[", "t", "]", "=", "dict", "(", ")", "\n", "\n", "# Add the speed, position, and lane data.", "\n", "", "self", ".", "stored_data", "[", "veh_id", "]", "[", "t", "]", ".", "update", "(", "{", "\n", "\"speed\"", ":", "kv", ".", "get_speed", "(", "veh_id", ")", ",", "\n", "\"lane_number\"", ":", "kv", ".", "get_lane", "(", "veh_id", ")", ",", "\n", "\"edge_id\"", ":", "kv", ".", "get_edge", "(", "veh_id", ")", ",", "\n", "\"relative_position\"", ":", "kv", ".", "get_position", "(", "veh_id", ")", ",", "\n", "\"x\"", ":", "position", "[", "0", "]", ",", "\n", "\"y\"", ":", "position", "[", "1", "]", ",", "\n", "\"headway\"", ":", "kv", ".", "get_headway", "(", "veh_id", ")", ",", "\n", "\"leader_id\"", ":", "kv", ".", "get_leader", "(", "veh_id", ")", ",", "\n", "\"follower_id\"", ":", "kv", ".", "get_follower", "(", "veh_id", ")", ",", "\n", "\"leader_rel_speed\"", ":", "\n", "kv", ".", "get_speed", "(", "kv", ".", "get_leader", "(", "veh_id", ")", ")", "\n", "-", "kv", ".", "get_speed", "(", "veh_id", ")", ",", "\n", "\"target_accel_with_noise_with_failsafe\"", ":", "\n", "kv", ".", "get_accel", "(", "veh_id", ",", "noise", "=", "True", ",", "failsafe", "=", "True", ")", ",", "\n", "\"target_accel_no_noise_no_failsafe\"", ":", "\n", "kv", ".", "get_accel", "(", "veh_id", ",", "noise", "=", "False", ",", "failsafe", "=", "False", ")", ",", "\n", "\"target_accel_with_noise_no_failsafe\"", ":", "\n", "kv", ".", "get_accel", "(", "veh_id", ",", "noise", "=", "True", ",", "failsafe", "=", "False", ")", ",", "\n", "\"target_accel_no_noise_with_failsafe\"", ":", "\n", "kv", ".", "get_accel", "(", "veh_id", ",", "noise", "=", "False", ",", "failsafe", "=", "True", ")", ",", "\n", "\"realized_accel\"", ":", "\n", "kv", ".", "get_realized_accel", "(", "veh_id", ")", ",", "\n", "\"road_grade\"", ":", "kv", ".", "get_road_grade", "(", "veh_id", ")", ",", "\n", "\"distance\"", ":", "kv", ".", "get_distance", "(", "veh_id", ")", ",", "\n", "}", ")", "\n", "\n", "", "", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "# Save the emission data to a csv.", "\n", "if", "self", ".", "emission_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "save_emission", "(", ")", "\n", "\n", "", "self", ".", "kernel_api", ".", "close", "(", ")", "\n", "\n", "", "def", "check_collision", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "# return self.kernel_api.simulation.getStartingTeleportNumber() != 0", "\n", "return", "self", ".", "kernel_api", ".", "simulation", ".", "getCollidingVehiclesNumber", "(", ")", "\n", "\n", "", "def", "start_simulation", "(", "self", ",", "network", ",", "sim_params", ")", ":", "\n", "        ", "\"\"\"Start a sumo simulation instance.\n\n        This method performs the following operations:\n\n        1. It collect the simulation step size and the emission path\n           information. If an emission path is specifies, it ensures that the\n           path exists.\n        2. It also uses the configuration files created by the network class to\n           initialize a sumo instance.\n        3. Finally, It initializes a traci connection to interface with sumo\n           from Python and returns the connection.\n        \"\"\"", "\n", "# Save the simulation step size (for later use).", "\n", "self", ".", "sim_step", "=", "sim_params", ".", "sim_step", "\n", "\n", "# Update the emission path term.", "\n", "self", ".", "emission_path", "=", "sim_params", ".", "emission_path", "\n", "if", "self", ".", "emission_path", "is", "not", "None", ":", "\n", "            ", "ensure_dir", "(", "self", ".", "emission_path", ")", "\n", "\n", "", "error", "=", "None", "\n", "for", "_", "in", "range", "(", "RETRIES_ON_ERROR", ")", ":", "\n", "            ", "try", ":", "\n", "# port number the sumo instance will be run on", "\n", "                ", "port", "=", "sim_params", ".", "port", "\n", "\n", "sumo_binary", "=", "\"sumo-gui\"", "if", "sim_params", ".", "render", "is", "True", "else", "\"sumo\"", "\n", "\n", "# command used to start sumo", "\n", "sumo_call", "=", "[", "\n", "sumo_binary", ",", "\"-c\"", ",", "network", ".", "cfg", ",", "\n", "\"--remote-port\"", ",", "str", "(", "sim_params", ".", "port", ")", ",", "\n", "\"--num-clients\"", ",", "str", "(", "sim_params", ".", "num_clients", ")", ",", "\n", "\"--step-length\"", ",", "str", "(", "sim_params", ".", "sim_step", ")", "\n", "]", "\n", "\n", "# use a ballistic integration step (if request)", "\n", "if", "sim_params", ".", "use_ballistic", ":", "\n", "                    ", "sumo_call", ".", "append", "(", "\"--step-method.ballistic\"", ")", "\n", "\n", "# ignore step logs (if requested)", "\n", "", "if", "sim_params", ".", "no_step_log", ":", "\n", "                    ", "sumo_call", ".", "append", "(", "\"--no-step-log\"", ")", "\n", "\n", "# add the lateral resolution of the sublanes (if requested)", "\n", "", "if", "sim_params", ".", "lateral_resolution", "is", "not", "None", ":", "\n", "                    ", "sumo_call", ".", "append", "(", "\"--lateral-resolution\"", ")", "\n", "sumo_call", ".", "append", "(", "str", "(", "sim_params", ".", "lateral_resolution", ")", ")", "\n", "\n", "", "if", "sim_params", ".", "overtake_right", ":", "\n", "                    ", "sumo_call", ".", "append", "(", "\"--lanechange.overtake-right\"", ")", "\n", "sumo_call", ".", "append", "(", "\"true\"", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.update": [[212, 215], ["None"], "methods", ["None"], ["\n", "# specify a simulation seed (if requested)", "\n", "", "if", "sim_params", ".", "seed", "is", "not", "None", ":", "\n", "                    ", "sumo_call", ".", "append", "(", "\"--seed\"", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.close": [[216, 245], ["os.remove"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove"], ["sumo_call", ".", "append", "(", "str", "(", "sim_params", ".", "seed", ")", ")", "\n", "\n", "", "if", "not", "sim_params", ".", "print_warnings", ":", "\n", "                    ", "sumo_call", ".", "append", "(", "\"--no-warnings\"", ")", "\n", "sumo_call", ".", "append", "(", "\"true\"", ")", "\n", "\n", "# set the time it takes for a gridlock teleport to occur", "\n", "", "sumo_call", ".", "append", "(", "\"--time-to-teleport\"", ")", "\n", "sumo_call", ".", "append", "(", "str", "(", "int", "(", "sim_params", ".", "teleport_time", ")", ")", ")", "\n", "\n", "# check collisions at intersections", "\n", "sumo_call", ".", "append", "(", "\"--collision.check-junctions\"", ")", "\n", "sumo_call", ".", "append", "(", "\"true\"", ")", "\n", "\n", "sumo_call", ".", "append", "(", "\"--collision.action\"", ")", "\n", "sumo_call", ".", "append", "(", "\"warn\"", ")", "\n", "\n", "logging", ".", "info", "(", "\" Starting SUMO on port \"", "+", "str", "(", "port", ")", ")", "\n", "logging", ".", "debug", "(", "\" Cfg file: \"", "+", "str", "(", "network", ".", "cfg", ")", ")", "\n", "if", "sim_params", ".", "num_clients", ">", "1", ":", "\n", "                    ", "logging", ".", "info", "(", "\" Num clients are\"", "+", "\n", "str", "(", "sim_params", ".", "num_clients", ")", ")", "\n", "", "logging", ".", "debug", "(", "\" Emission file: \"", "+", "str", "(", "self", ".", "emission_path", ")", ")", "\n", "logging", ".", "debug", "(", "\" Step length: \"", "+", "str", "(", "sim_params", ".", "sim_step", ")", ")", "\n", "\n", "# Opening the I/O thread to SUMO", "\n", "self", ".", "sumo_proc", "=", "subprocess", ".", "Popen", "(", "\n", "sumo_call", ",", "\n", "stdout", "=", "subprocess", ".", "DEVNULL", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.get_edge": [[246, 251], ["reversed"], "methods", ["None"], ["\n", "# wait a small period of time for the subprocess to activate", "\n", "# before trying to connect with traci", "\n", "if", "os", ".", "environ", ".", "get", "(", "\"TEST_FLAG\"", ",", "0", ")", ":", "\n", "                    ", "time", ".", "sleep", "(", "0.1", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.get_x": [[252, 269], ["len", "traci.TraCIKernelNetwork.total_edgestarts_dict.get", "edge.rsplit"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], ["                    ", "time", ".", "sleep", "(", "config", ".", "SUMO_SLEEP", ")", "\n", "\n", "", "traci_connection", "=", "traci", ".", "connect", "(", "port", ",", "numRetries", "=", "100", ")", "\n", "traci_connection", ".", "setOrder", "(", "0", ")", "\n", "traci_connection", ".", "simulationStep", "(", ")", "\n", "\n", "return", "traci_connection", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "\"Error during start: {}\"", ".", "format", "(", "traceback", ".", "format_exc", "(", ")", ")", ")", "\n", "error", "=", "e", "\n", "self", ".", "teardown_sumo", "(", ")", "\n", "", "", "raise", "error", "\n", "\n", "", "def", "teardown_sumo", "(", "self", ")", ":", "\n", "        ", "\"\"\"Kill the sumo subprocess instance.\"\"\"", "\n", "try", ":", "\n", "            ", "os", ".", "killpg", "(", "self", ".", "sumo_proc", ".", "pid", ",", "signal", ".", "SIGTERM", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.edge_length": [[270, 277], ["print"], "methods", ["None"], ["            ", "print", "(", "\"Error during teardown: {}\"", ".", "format", "(", "e", ")", ")", "\n", "\n", "", "", "def", "save_emission", "(", "self", ",", "run_id", "=", "0", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.length": [[278, 281], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.non_internal_length": [[282, 285], ["None"], "methods", ["None"], ["\n", "# If there is no stored data, ignore this operation. This is to ensure", "\n", "# that data isn't deleted if the operation is called twice.", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.speed_limit": [[286, 293], ["print"], "methods", ["None"], ["if", "len", "(", "self", ".", "stored_data", ")", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "# Get a csv name for the emission file.", "\n", "", "name", "=", "\"{}-{}_emission.csv\"", ".", "format", "(", "\n", "self", ".", "master_kernel", ".", "network", ".", "network", ".", "name", ",", "run_id", ")", "\n", "\n", "# The name of all stored data-points (excluding id and time)", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.num_lanes": [[294, 301], ["print"], "methods", ["None"], ["stored_ids", "=", "[", "\n", "\"x\"", ",", "\n", "\"y\"", ",", "\n", "\"speed\"", ",", "\n", "\"headway\"", ",", "\n", "\"leader_id\"", ",", "\n", "\"target_accel_with_noise_with_failsafe\"", ",", "\n", "\"target_accel_no_noise_no_failsafe\"", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.max_speed": [[302, 305], ["None"], "methods", ["None"], ["\"target_accel_with_noise_no_failsafe\"", ",", "\n", "\"target_accel_no_noise_with_failsafe\"", ",", "\n", "\"realized_accel\"", ",", "\n", "\"road_grade\"", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.get_edge_list": [[306, 309], ["None"], "methods", ["None"], ["\"edge_id\"", ",", "\n", "\"lane_number\"", ",", "\n", "\"distance\"", ",", "\n", "\"relative_position\"", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.get_junction_list": [[310, 313], ["None"], "methods", ["None"], ["\"follower_id\"", ",", "\n", "\"leader_rel_speed\"", ",", "\n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.next_edge": [[314, 320], ["None"], "methods", ["None"], ["# Update the stored data to push to the csv file.", "\n", "final_data", "=", "{", "\"time\"", ":", "[", "]", ",", "\"id\"", ":", "[", "]", "}", "\n", "final_data", ".", "update", "(", "{", "key", ":", "[", "]", "for", "key", "in", "stored_ids", "}", ")", "\n", "\n", "for", "veh_id", "in", "self", ".", "stored_data", ".", "keys", "(", ")", ":", "\n", "            ", "for", "t", "in", "self", ".", "stored_data", "[", "veh_id", "]", ".", "keys", "(", ")", ":", "\n", "                ", "final_data", "[", "'time'", "]", ".", "append", "(", "t", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.prev_edge": [[321, 327], ["None"], "methods", ["None"], ["final_data", "[", "'id'", "]", ".", "append", "(", "veh_id", ")", "\n", "for", "key", "in", "stored_ids", ":", "\n", "                    ", "final_data", "[", "key", "]", ".", "append", "(", "self", ".", "stored_data", "[", "veh_id", "]", "[", "t", "]", "[", "key", "]", ")", "\n", "\n", "", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "emission_path", ",", "name", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "print", "(", "os", ".", "path", ".", "join", "(", "self", ".", "emission_path", ",", "name", ")", ",", "self", ".", "emission_path", ")", "\n", "writer", "=", "csv", ".", "writer", "(", "f", ",", "delimiter", "=", "','", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.generate_net": [[329, 528], ["list", "flow.core.util.makexml", "flow.core.util.printxml", "flow.core.util.makexml", "flow.core.util.printxml", "flow.core.util.makexml", "E", "E.append", "E.append", "flow.core.util.makexml.append", "E", "E.append", "flow.core.util.makexml.append", "E", "E.append", "E.append", "flow.core.util.makexml.append", "flow.core.util.printxml", "subprocess.call", "range", "traffic_lights.get_properties().keys", "next", "str", "str", "flow.core.util.makexml.append", "str", "flow.core.util.makexml.append", "flow.core.util.makexml", "flow.core.util.printxml", "flow.core.util.makexml", "flow.core.util.printxml", "E", "E", "E.append", "E.append", "E", "E", "E", "traffic_lights.add", "str", "E", "str", "str", "str", "E", "flow.core.util.makexml.append", "flow.core.util.makexml.append", "E", "E", "traci.TraCIKernelNetwork._import_edges_from_net", "traffic_lights.get_properties", "node.get", "isinstance", "str", "str", "E", "str", "str", "E", "print", "print", "time.sleep", "enumerate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.makexml", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.printxml", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.makexml", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.printxml", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.makexml", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.printxml", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.makexml", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.printxml", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.makexml", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.printxml", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork._import_edges_from_net", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.TrafficLightParams.get_properties", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], ["writer", ".", "writerows", "(", "zip", "(", "*", "final_data", ".", "values", "(", ")", ")", ")", "\n", "\n", "# Clear all memory from the stored data. This is useful if this", "\n", "# function is called in between resets.", "\n", "", "self", ".", "stored_data", ".", "clear", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.generate_net_from_osm": [[529, 578], ["subprocess.call", "traci.TraCIKernelNetwork._import_edges_from_net"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork._import_edges_from_net"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.generate_net_from_template": [[579, 612], ["traci.TraCIKernelNetwork._import_edges_from_net", "type"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork._import_edges_from_net"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork.generate_cfg": [[613, 811], ["flow.core.util.makexml", "len", "flow.core.util.printxml", "E", "E.append", "E.append", "flow.core.util.printxml", "flow.core.util.makexml", "routes.keys", "flow.core.util.printxml", "flow.core.util.makexml", "flow.core.util.makexml.append", "E", "E.append", "flow.core.util.makexml.append", "flow.core.util.printxml", "flow.core.util.makexml.append", "list", "E", "E", "isinstance", "range", "traci.TraCIKernelNetwork.network.net_params.inflows.get", "traci._inputs", "E", "str", "E", "traffic_lights.get_properties().keys", "traffic_lights.actuated_default", "str", "str", "str", "str", "traffic_lights.get_properties", "traffic_lights.get_properties.values", "len", "flow.core.util.makexml.append", "copy.deepcopy", "tll.append", "E", "E.append", "E.append", "E.append", "flow.core.util.makexml.append", "node.get", "E", "node.items", "flow.core.util.makexml.append", "E", "enumerate", "flow.core.util.makexml.append", "repr", "traffic_lights.get_properties", "E", "E", "E", "E.append", "str", "str", "str", "str", "isinstance", "repr", "str", "flow.core.util.makexml.append", "traci._flow", "E", "node.get", "node.get", "node.get", "E.append", "str", "traci._flow", "E.append", "E", "str", "int", "E", "float", "float", "str"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.makexml", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.printxml", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.printxml", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.makexml", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.printxml", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.makexml", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.printxml", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci._inputs", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.TrafficLightParams.actuated_default", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.TrafficLightParams.get_properties", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.TrafficLightParams.get_properties", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci._flow", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci._flow", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci.TraCIKernelNetwork._import_edges_from_net": [[812, 936], ["lxml.etree.XMLParser", "xml.parse", "xml.parse.getroot", "dict", "ElementTree.parse.getroot.findall", "dict", "dict", "dict", "ElementTree.parse.getroot.findall", "ElementTree.parse.getroot.findall", "os.path.join", "dict", "dict", "enumerate", "int", "[].append", "[].append", "float", "int", "float", "connection.attrib[].rsplit", "int", "int", "dict", "list", "dict", "list", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci._flow": [[21, 23], ["E"], "function", ["None"], ["class", "TraCISimulation", "(", "KernelSimulation", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.traci._inputs": [[25, 32], ["E", "E.append", "E.append", "E.append", "E.append", "E", "E", "E", "E"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.__init__": [[37, 52], ["flow.core.kernel.network.base.BaseKernelNetwork.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["self", ".", "sim_step", "=", "None", "\n", "self", ".", "emission_path", "=", "None", "\n", "self", ".", "time", "=", "0", "\n", "self", ".", "stored_data", "=", "{", "\n", "'time'", ":", "[", "]", ",", "\n", "'x'", ":", "[", "]", ",", "\n", "'y'", ":", "[", "]", ",", "\n", "'angle'", ":", "[", "]", ",", "\n", "'type'", ":", "[", "]", ",", "\n", "'id'", ":", "[", "]", ",", "\n", "'relative_position'", ":", "[", "]", ",", "\n", "'speed'", ":", "[", "]", ",", "\n", "'edge_id'", ":", "[", "]", ",", "\n", "'lane_number'", ":", "[", "]", "\n", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.generate_network": [[53, 240], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.join", "os.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "subprocess.Popen", "max", "sum", "dict", "aimsun.AimsunKernelNetwork.total_edgestarts.sort", "dict", "open", "json.dump", "platform.system", "os.expanduser", "os.expanduser", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.popen", "os.popen", "os.popen", "os.popen", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "list", "os.remove", "os.remove", "os.remove", "os.remove", "sorted", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "f.write", "range", "copy.deepcopy", "list", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "aimsun.AimsunKernelNetwork._edges.keys", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "time.sleep", "open", "json.load", "aimsun.AimsunKernelNetwork.speed_limit", "aimsun.AimsunKernelNetwork.edge_length", "aimsun.AimsunKernelNetwork.edgestarts.append", "len", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "time.sleep", "open", "json.load", "aimsun.AimsunKernelNetwork._edges.keys", "set", "set", "aimsun.AimsunKernelNetwork.get_edge_list", "aimsun.AimsunKernelNetwork.get_edge_list", "aimsun.AimsunKernelNetwork._edges.keys", "set", "set", "aimsun.AimsunKernelNetwork._edges.keys", "aimsun.AimsunKernelNetwork._edges.keys", "copy.deepcopy", "copy.deepcopy.pop", "network.edges[].update"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.speed_limit", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update"], ["", "def", "pass_api", "(", "self", ",", "kernel_api", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "self", ".", "kernel_api", "=", "kernel_api", "\n", "\n", "", "def", "start_simulation", "(", "self", ",", "network", ",", "sim_params", ")", ":", "\n", "        ", "\"\"\"See parent class.\n\n        This method calls the aimsun generator to generate the network, starts\n        a simulation, and creates a class to communicate with the simulation\n        via an TCP connection.\n        \"\"\"", "\n", "# save the simulation step size (for later use)", "\n", "self", ".", "sim_step", "=", "sim_params", ".", "sim_step", "\n", "\n", "self", ".", "emission_path", "=", "sim_params", ".", "emission_path", "\n", "if", "self", ".", "emission_path", "is", "not", "None", ":", "\n", "            ", "ensure_dir", "(", "self", ".", "emission_path", ")", "\n", "\n", "", "return", "FlowAimsunAPI", "(", "port", "=", "sim_params", ".", "port", ")", "\n", "\n", "", "def", "simulation_step", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "self", ".", "kernel_api", ".", "simulation_step", "(", ")", "\n", "\n", "", "def", "update", "(", "self", ",", "reset", ")", ":", "\n", "        ", "\"\"\"See parent class.\n\n        No update is needed in this case.\n        \"\"\"", "\n", "if", "reset", ":", "\n", "            ", "self", ".", "time", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "time", "+=", "self", ".", "sim_step", "\n", "\n", "", "if", "self", ".", "emission_path", "is", "not", "None", ":", "\n", "            ", "for", "veh_id", "in", "self", ".", "master_kernel", ".", "vehicle", ".", "get_ids", "(", ")", ":", "\n", "                ", "pos", "=", "self", ".", "master_kernel", ".", "vehicle", ".", "get_position_world", "(", "veh_id", ")", "\n", "self", ".", "stored_data", "[", "'id'", "]", ".", "append", "(", "\n", "veh_id", ")", "\n", "self", ".", "stored_data", "[", "'time'", "]", ".", "append", "(", "\n", "self", ".", "time", ")", "\n", "self", ".", "stored_data", "[", "'type'", "]", ".", "append", "(", "\n", "self", ".", "master_kernel", ".", "vehicle", ".", "get_type", "(", "veh_id", ")", ")", "\n", "self", ".", "stored_data", "[", "'x'", "]", ".", "append", "(", "\n", "pos", "[", "0", "]", ")", "\n", "self", ".", "stored_data", "[", "'y'", "]", ".", "append", "(", "\n", "pos", "[", "1", "]", ")", "\n", "self", ".", "stored_data", "[", "'relative_position'", "]", ".", "append", "(", "\n", "self", ".", "master_kernel", ".", "vehicle", ".", "get_position", "(", "veh_id", ")", ")", "\n", "self", ".", "stored_data", "[", "'angle'", "]", ".", "append", "(", "\n", "self", ".", "master_kernel", ".", "vehicle", ".", "get_angle", "(", "veh_id", ")", ")", "\n", "self", ".", "stored_data", "[", "'speed'", "]", ".", "append", "(", "\n", "self", ".", "master_kernel", ".", "vehicle", ".", "get_speed", "(", "veh_id", ")", ")", "\n", "self", ".", "stored_data", "[", "'edge_id'", "]", ".", "append", "(", "\n", "self", ".", "master_kernel", ".", "vehicle", ".", "get_edge", "(", "veh_id", ")", ")", "\n", "self", ".", "stored_data", "[", "'lane_number'", "]", ".", "append", "(", "\n", "self", ".", "master_kernel", ".", "vehicle", ".", "get_lane", "(", "veh_id", ")", ")", "\n", "\n", "", "", "", "def", "check_collision", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "return", "False", "\n", "\n", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "# save the emission data to a csv", "\n", "if", "self", ".", "emission_path", "is", "not", "None", ":", "\n", "            ", "name", "=", "\"%s_emission.csv\"", "%", "self", ".", "master_kernel", ".", "network", ".", "network", ".", "name", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "emission_path", ",", "name", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "writer", "=", "csv", ".", "writer", "(", "f", ",", "delimiter", "=", "','", ")", "\n", "writer", ".", "writerow", "(", "self", ".", "stored_data", ".", "keys", "(", ")", ")", "\n", "writer", ".", "writerows", "(", "zip", "(", "*", "self", ".", "stored_data", ".", "values", "(", ")", ")", ")", "\n", "\n", "# close the API and simulation process", "\n", "", "", "try", ":", "\n", "            ", "self", ".", "kernel_api", ".", "stop_simulation", "(", ")", "\n", "self", ".", "master_kernel", ".", "network", ".", "aimsun_proc", ".", "kill", "(", ")", "\n", "", "except", "OSError", ":", "\n", "# in case no simulation originally existed (used by the visualizer)", "\n", "            ", "pass", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.pass_api": [[241, 254], ["aimsun.AimsunKernelNetwork.get_edge_list", "aimsun.AimsunKernelNetwork.kernel_api.get_edge_name"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_edge_name"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.update": [[255, 258], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.close": [[259, 268], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.remove", "os.remove", "os.remove", "os.remove", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.remove", "os.remove", "os.remove", "os.remove"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length": [[273, 280], ["print"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.length": [[281, 285], ["sum", "aimsun.AimsunKernelNetwork.edge_length", "aimsun.AimsunKernelNetwork.get_edge_list"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.non_internal_length": [[286, 290], ["sum", "aimsun.AimsunKernelNetwork.edge_length", "aimsun.AimsunKernelNetwork.get_edge_list"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.speed_limit": [[291, 298], ["print"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.max_speed": [[299, 303], ["max", "aimsun.AimsunKernelNetwork.speed_limit", "aimsun.AimsunKernelNetwork.get_edge_list"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.speed_limit", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes": [[304, 311], ["print"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list": [[312, 315], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_junction_list": [[316, 319], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge": [[320, 325], ["reversed"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_x": [[326, 343], ["len", "aimsun.AimsunKernelNetwork.total_edgestarts_dict.get", "edge.rsplit"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.next_edge": [[344, 350], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.prev_edge": [[351, 357], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.aimsun_edge_name": [[358, 361], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.flow_edge_name": [[362, 369], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.base.KernelTrafficLight.__init__": [[31, 42], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.base.KernelTrafficLight.pass_api": [[43, 52], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.base.KernelTrafficLight.update": [[53, 66], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.base.KernelTrafficLight.get_ids": [[67, 70], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.base.KernelTrafficLight.set_state": [[71, 85], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.base.KernelTrafficLight.get_state": [[86, 101], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.traci.TraCITrafficLight.__init__": [[13, 32], ["flow.core.kernel.traffic_light.KernelTrafficLight.__init__", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["import", "signal", "\n", "import", "csv", "\n", "\n", "\n", "# Number of retries on restarting SUMO before giving up", "\n", "RETRIES_ON_ERROR", "=", "10", "\n", "\n", "\n", "class", "TraCISimulation", "(", "KernelSimulation", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.traci.TraCITrafficLight.pass_api": [[33, 50], ["flow.core.kernel.traffic_light.KernelTrafficLight.pass_api", "kernel_api.trafficlight.getIDList", "len", "traci.TraCITrafficLight.kernel_api.trafficlight.subscribe"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.pass_api"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.traci.TraCITrafficLight.update": [[51, 58], ["tls_obs.copy", "traci.TraCITrafficLight.kernel_api.trafficlight.getSubscriptionResults"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "master_kernel", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.traci.TraCITrafficLight.get_ids": [[59, 62], ["None"], "methods", ["None"], ["\n", "KernelSimulation", ".", "__init__", "(", "self", ",", "master_kernel", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.traci.TraCITrafficLight.set_state": [[63, 73], ["traci.TraCITrafficLight.kernel_api.trafficlight.setRedYellowGreenState", "traci.TraCITrafficLight.kernel_api.trafficlight.setLinkState"], "methods", ["None"], ["\n", "self", ".", "sumo_proc", "=", "None", "\n", "self", ".", "sim_step", "=", "None", "\n", "self", ".", "emission_path", "=", "None", "\n", "self", ".", "time", "=", "0", "\n", "self", ".", "stored_data", "=", "dict", "(", ")", "\n", "\n", "", "def", "pass_api", "(", "self", ",", "kernel_api", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.traci.TraCITrafficLight.get_state": [[74, 77], ["None"], "methods", ["None"], ["\n", "KernelSimulation", ".", "pass_api", "(", "self", ",", "kernel_api", ")", "\n", "\n", "# subscribe some simulation parameters needed to check for entering,", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.__init__": [[11, 25], ["flow.core.kernel.traffic_light.base.KernelTrafficLight.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.pass_api": [[26, 29], ["None"], "methods", ["None"], ["\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.update": [[30, 33], ["None"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "master_kernel", ")", ":", "\n", "        ", "\"\"\"Initialize the Aimsun simulation kernel.\"\"\"", "\n", "KernelSimulation", ".", "__init__", "(", "self", ",", "master_kernel", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.get_ids": [[34, 37], ["aimsun.AimsunKernelTrafficLight.kernel_api.get_traffic_light_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_traffic_light_ids"], ["\n", "self", ".", "master_kernel", "=", "master_kernel", "\n", "self", ".", "kernel_api", "=", "None", "\n", "self", ".", "sim_step", "=", "None", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.set_state": [[38, 55], ["aimsun.AimsunKernelTrafficLight.kernel_api.set_traffic_light_state"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.set_traffic_light_state"], ["self", ".", "emission_path", "=", "None", "\n", "self", ".", "time", "=", "0", "\n", "self", ".", "stored_data", "=", "{", "\n", "'time'", ":", "[", "]", ",", "\n", "'x'", ":", "[", "]", ",", "\n", "'y'", ":", "[", "]", ",", "\n", "'angle'", ":", "[", "]", ",", "\n", "'type'", ":", "[", "]", ",", "\n", "'id'", ":", "[", "]", ",", "\n", "'relative_position'", ":", "[", "]", ",", "\n", "'speed'", ":", "[", "]", ",", "\n", "'edge_id'", ":", "[", "]", ",", "\n", "'lane_number'", ":", "[", "]", "\n", "}", "\n", "\n", "", "def", "pass_api", "(", "self", ",", "kernel_api", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "self", ".", "kernel_api", "=", "kernel_api", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.get_state": [[56, 73], ["aimsun.AimsunKernelTrafficLight.kernel_api.get_traffic_light_state"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_traffic_light_state"], ["\n", "", "def", "start_simulation", "(", "self", ",", "network", ",", "sim_params", ")", ":", "\n", "        ", "\"\"\"See parent class.\n\n        This method calls the aimsun generator to generate the network, starts\n        a simulation, and creates a class to communicate with the simulation\n        via an TCP connection.\n        \"\"\"", "\n", "# save the simulation step size (for later use)", "\n", "self", ".", "sim_step", "=", "sim_params", ".", "sim_step", "\n", "\n", "self", ".", "emission_path", "=", "sim_params", ".", "emission_path", "\n", "if", "self", ".", "emission_path", "is", "not", "None", ":", "\n", "            ", "ensure_dir", "(", "self", ".", "emission_path", ")", "\n", "\n", "", "return", "FlowAimsunAPI", "(", "port", "=", "sim_params", ".", "port", ")", "\n", "\n", "", "def", "simulation_step", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.__init__": [[40, 56], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.pass_api": [[57, 66], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.update": [[71, 85], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.add": [[86, 106], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.reset": [[107, 111], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.remove": [[112, 129], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.apply_acceleration": [[130, 146], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.apply_lane_change": [[147, 171], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.choose_routes": [[172, 186], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.set_max_speed": [[187, 199], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.update_vehicle_colors": [[204, 208], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.set_observed": [[209, 213], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.remove_observed": [[214, 218], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_observed_ids": [[219, 223], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_color": [[224, 228], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.set_color": [[229, 233], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_orientation": [[238, 242], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_timestep": [[243, 247], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_timedelta": [[248, 252], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_type": [[253, 257], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_ids": [[258, 262], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_human_ids": [[263, 267], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_controlled_ids": [[268, 275], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_controlled_lc_ids": [[276, 283], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_rl_ids": [[284, 288], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_ids_by_edge": [[289, 296], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_inflow_rate": [[297, 304], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_outflow_rate": [[305, 312], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_num_arrived": [[313, 317], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_arrived_ids": [[318, 322], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_departed_ids": [[323, 327], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_num_not_departed": [[328, 335], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_fuel_consumption": [[336, 352], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_speed": [[353, 369], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_default_speed": [[370, 386], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_position": [[387, 403], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_edge": [[404, 420], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_lane": [[421, 437], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_route": [[438, 454], ["list"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_length": [[455, 471], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_leader": [[472, 488], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_follower": [[489, 505], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_headway": [[506, 522], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_last_lc": [[523, 543], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_acc_controller": [[544, 560], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_lane_changing_controller": [[561, 577], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_routing_controller": [[578, 594], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_lane_headways": [[595, 614], ["list"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_lane_leaders_speed": [[615, 636], ["list"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_lane_followers_speed": [[637, 658], ["list"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_lane_leaders": [[659, 675], ["list"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_lane_tailways": [[676, 695], ["list"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_lane_followers": [[696, 712], ["list"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_x_by_id": [[713, 731], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_max_speed": [[732, 748], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_accel": [[753, 757], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.update_accel": [[758, 762], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_2d_position": [[763, 767], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_realized_accel": [[768, 772], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.base.KernelVehicle.get_road_grade": [[773, 777], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.__init__": [[35, 90], ["flow.core.kernel.vehicle.KernelVehicle.__init__", "collections.OrderedDict", "dict"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["\n", "\n", "def", "__init__", "(", "self", ",", "master_kernel", ")", ":", "\n", "        ", "\"\"\"Instantiate the sumo simulator kernel.\n\n        Parameters\n        ----------\n        master_kernel : flow.core.kernel.Kernel\n            the higher level kernel (used to call methods from other\n            sub-kernels)\n        \"\"\"", "\n", "KernelSimulation", ".", "__init__", "(", "self", ",", "master_kernel", ")", "\n", "\n", "self", ".", "sumo_proc", "=", "None", "\n", "self", ".", "sim_step", "=", "None", "\n", "self", ".", "emission_path", "=", "None", "\n", "self", ".", "time", "=", "0", "\n", "self", ".", "stored_data", "=", "dict", "(", ")", "\n", "\n", "", "def", "pass_api", "(", "self", ",", "kernel_api", ")", ":", "\n", "        ", "\"\"\"See parent class.\n\n        Also initializes subscriptions.\n        \"\"\"", "\n", "KernelSimulation", ".", "pass_api", "(", "self", ",", "kernel_api", ")", "\n", "\n", "# subscribe some simulation parameters needed to check for entering,", "\n", "# exiting, and colliding vehicles", "\n", "self", ".", "kernel_api", ".", "simulation", ".", "subscribe", "(", "[", "\n", "tc", ".", "VAR_DEPARTED_VEHICLES_IDS", ",", "\n", "tc", ".", "VAR_ARRIVED_VEHICLES_IDS", ",", "\n", "tc", ".", "VAR_TELEPORT_STARTING_VEHICLES_IDS", ",", "\n", "tc", ".", "VAR_TIME_STEP", ",", "\n", "tc", ".", "VAR_DELTA_T", ",", "\n", "tc", ".", "VAR_LOADED_VEHICLES_NUMBER", ",", "\n", "tc", ".", "VAR_DEPARTED_VEHICLES_NUMBER", ",", "\n", "tc", ".", "VAR_ARRIVED_VEHICLES_NUMBER", "\n", "]", ")", "\n", "\n", "", "def", "simulation_step", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.initialize": [[91, 119], ["traci.TraCIVehicle.__vehicles.clear", "range", "dict"], "methods", ["None"], ["        ", "\"\"\"See parent class.\"\"\"", "\n", "self", ".", "kernel_api", ".", "simulationStep", "(", ")", "\n", "\n", "", "def", "update", "(", "self", ",", "reset", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "if", "reset", ":", "\n", "            ", "self", ".", "time", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "time", "+=", "self", ".", "sim_step", "\n", "\n", "# Collect the additional data to store in the emission file.", "\n", "", "if", "self", ".", "emission_path", "is", "not", "None", ":", "\n", "            ", "kv", "=", "self", ".", "master_kernel", ".", "vehicle", "\n", "for", "veh_id", "in", "self", ".", "master_kernel", ".", "vehicle", ".", "get_ids", "(", ")", ":", "\n", "                ", "t", "=", "round", "(", "self", ".", "time", ",", "2", ")", "\n", "\n", "# some miscellaneous pre-processing", "\n", "position", "=", "kv", ".", "get_2d_position", "(", "veh_id", ")", "\n", "\n", "# Make sure dictionaries corresponding to the vehicle and", "\n", "# time are available.", "\n", "if", "veh_id", "not", "in", "self", ".", "stored_data", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "stored_data", "[", "veh_id", "]", "=", "dict", "(", ")", "\n", "", "if", "t", "not", "in", "self", ".", "stored_data", "[", "veh_id", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "stored_data", "[", "veh_id", "]", "[", "t", "]", "=", "dict", "(", ")", "\n", "\n", "# Add the speed, position, and lane data.", "\n", "", "self", ".", "stored_data", "[", "veh_id", "]", "[", "t", "]", ".", "update", "(", "{", "\n", "\"speed\"", ":", "kv", ".", "get_speed", "(", "veh_id", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.update": [[120, 265], ["traci.TraCIVehicle.kernel_api.simulation.getSubscriptionResults", "traci.TraCIVehicle._arrived_rl_ids.append", "vehicle_obs.copy", "traci.TraCIVehicle._multi_lane_headways", "traci.TraCIVehicle.__rl_ids.sort", "traci.TraCIVehicle.get_speed", "traci.TraCIVehicle.kernel_api.vehicle.getSubscriptionResults", "traci.TraCIVehicle.remove", "dict", "traci.TraCIVehicle._num_departed.clear", "traci.TraCIVehicle._num_arrived.clear", "traci.TraCIVehicle._arrived_rl_ids.clear", "hasattr", "traci.TraCIVehicle._num_departed.append", "traci.TraCIVehicle._num_arrived.append", "vehicle_obs.get().get", "traci.TraCIVehicle.get_rl_ids", "arrived_rl_ids.append", "vehicle_obs.pop", "traci.TraCIVehicle.kernel_api.vehicle.getTypeID", "traci.TraCIVehicle._add_departed", "traci.TraCIVehicle.get_lane", "vehicle_obs.get().get", "vehicle_obs.get().get", "traci.TraCIVehicle.get_ids", "float", "float", "copy.deepcopy", "str", "traci.TraCIVehicle.kernel_api.vehicle.addFull", "list", "print", "vehicle_obs.get", "vehicle_obs.get", "vehicle_obs.get", "traceback.format_exc", "traci.TraCIVehicle.get_type", "float"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle._multi_lane_headways", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle._add_departed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_type"], ["\"lane_number\"", ":", "kv", ".", "get_lane", "(", "veh_id", ")", ",", "\n", "\"edge_id\"", ":", "kv", ".", "get_edge", "(", "veh_id", ")", ",", "\n", "\"relative_position\"", ":", "kv", ".", "get_position", "(", "veh_id", ")", ",", "\n", "\"x\"", ":", "position", "[", "0", "]", ",", "\n", "\"y\"", ":", "position", "[", "1", "]", ",", "\n", "\"headway\"", ":", "kv", ".", "get_headway", "(", "veh_id", ")", ",", "\n", "\"leader_id\"", ":", "kv", ".", "get_leader", "(", "veh_id", ")", ",", "\n", "\"follower_id\"", ":", "kv", ".", "get_follower", "(", "veh_id", ")", ",", "\n", "\"leader_rel_speed\"", ":", "\n", "kv", ".", "get_speed", "(", "kv", ".", "get_leader", "(", "veh_id", ")", ")", "\n", "-", "kv", ".", "get_speed", "(", "veh_id", ")", ",", "\n", "\"target_accel_with_noise_with_failsafe\"", ":", "\n", "kv", ".", "get_accel", "(", "veh_id", ",", "noise", "=", "True", ",", "failsafe", "=", "True", ")", ",", "\n", "\"target_accel_no_noise_no_failsafe\"", ":", "\n", "kv", ".", "get_accel", "(", "veh_id", ",", "noise", "=", "False", ",", "failsafe", "=", "False", ")", ",", "\n", "\"target_accel_with_noise_no_failsafe\"", ":", "\n", "kv", ".", "get_accel", "(", "veh_id", ",", "noise", "=", "True", ",", "failsafe", "=", "False", ")", ",", "\n", "\"target_accel_no_noise_with_failsafe\"", ":", "\n", "kv", ".", "get_accel", "(", "veh_id", ",", "noise", "=", "False", ",", "failsafe", "=", "True", ")", ",", "\n", "\"realized_accel\"", ":", "\n", "kv", ".", "get_realized_accel", "(", "veh_id", ")", ",", "\n", "\"road_grade\"", ":", "kv", ".", "get_road_grade", "(", "veh_id", ")", ",", "\n", "\"distance\"", ":", "kv", ".", "get_distance", "(", "veh_id", ")", ",", "\n", "}", ")", "\n", "\n", "", "", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "# Save the emission data to a csv.", "\n", "if", "self", ".", "emission_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "save_emission", "(", ")", "\n", "\n", "", "self", ".", "kernel_api", ".", "close", "(", ")", "\n", "\n", "", "def", "check_collision", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "# return self.kernel_api.simulation.getStartingTeleportNumber() != 0", "\n", "return", "self", ".", "kernel_api", ".", "simulation", ".", "getCollidingVehiclesNumber", "(", ")", "\n", "\n", "", "def", "start_simulation", "(", "self", ",", "network", ",", "sim_params", ")", ":", "\n", "        ", "\"\"\"Start a sumo simulation instance.\n\n        This method performs the following operations:\n\n        1. It collect the simulation step size and the emission path\n           information. If an emission path is specifies, it ensures that the\n           path exists.\n        2. It also uses the configuration files created by the network class to\n           initialize a sumo instance.\n        3. Finally, It initializes a traci connection to interface with sumo\n           from Python and returns the connection.\n        \"\"\"", "\n", "# Save the simulation step size (for later use).", "\n", "self", ".", "sim_step", "=", "sim_params", ".", "sim_step", "\n", "\n", "# Update the emission path term.", "\n", "self", ".", "emission_path", "=", "sim_params", ".", "emission_path", "\n", "if", "self", ".", "emission_path", "is", "not", "None", ":", "\n", "            ", "ensure_dir", "(", "self", ".", "emission_path", ")", "\n", "\n", "", "error", "=", "None", "\n", "for", "_", "in", "range", "(", "RETRIES_ON_ERROR", ")", ":", "\n", "            ", "try", ":", "\n", "# port number the sumo instance will be run on", "\n", "                ", "port", "=", "sim_params", ".", "port", "\n", "\n", "sumo_binary", "=", "\"sumo-gui\"", "if", "sim_params", ".", "render", "is", "True", "else", "\"sumo\"", "\n", "\n", "# command used to start sumo", "\n", "sumo_call", "=", "[", "\n", "sumo_binary", ",", "\"-c\"", ",", "network", ".", "cfg", ",", "\n", "\"--remote-port\"", ",", "str", "(", "sim_params", ".", "port", ")", ",", "\n", "\"--num-clients\"", ",", "str", "(", "sim_params", ".", "num_clients", ")", ",", "\n", "\"--step-length\"", ",", "str", "(", "sim_params", ".", "sim_step", ")", "\n", "]", "\n", "\n", "# use a ballistic integration step (if request)", "\n", "if", "sim_params", ".", "use_ballistic", ":", "\n", "                    ", "sumo_call", ".", "append", "(", "\"--step-method.ballistic\"", ")", "\n", "\n", "# ignore step logs (if requested)", "\n", "", "if", "sim_params", ".", "no_step_log", ":", "\n", "                    ", "sumo_call", ".", "append", "(", "\"--no-step-log\"", ")", "\n", "\n", "# add the lateral resolution of the sublanes (if requested)", "\n", "", "if", "sim_params", ".", "lateral_resolution", "is", "not", "None", ":", "\n", "                    ", "sumo_call", ".", "append", "(", "\"--lateral-resolution\"", ")", "\n", "sumo_call", ".", "append", "(", "str", "(", "sim_params", ".", "lateral_resolution", ")", ")", "\n", "\n", "", "if", "sim_params", ".", "overtake_right", ":", "\n", "                    ", "sumo_call", ".", "append", "(", "\"--lanechange.overtake-right\"", ")", "\n", "sumo_call", ".", "append", "(", "\"true\"", ")", "\n", "\n", "# specify a simulation seed (if requested)", "\n", "", "if", "sim_params", ".", "seed", "is", "not", "None", ":", "\n", "                    ", "sumo_call", ".", "append", "(", "\"--seed\"", ")", "\n", "sumo_call", ".", "append", "(", "str", "(", "sim_params", ".", "seed", ")", ")", "\n", "\n", "", "if", "not", "sim_params", ".", "print_warnings", ":", "\n", "                    ", "sumo_call", ".", "append", "(", "\"--no-warnings\"", ")", "\n", "sumo_call", ".", "append", "(", "\"true\"", ")", "\n", "\n", "# set the time it takes for a gridlock teleport to occur", "\n", "", "sumo_call", ".", "append", "(", "\"--time-to-teleport\"", ")", "\n", "sumo_call", ".", "append", "(", "str", "(", "int", "(", "sim_params", ".", "teleport_time", ")", ")", ")", "\n", "\n", "# check collisions at intersections", "\n", "sumo_call", ".", "append", "(", "\"--collision.check-junctions\"", ")", "\n", "sumo_call", ".", "append", "(", "\"true\"", ")", "\n", "\n", "sumo_call", ".", "append", "(", "\"--collision.action\"", ")", "\n", "sumo_call", ".", "append", "(", "\"warn\"", ")", "\n", "\n", "logging", ".", "info", "(", "\" Starting SUMO on port \"", "+", "str", "(", "port", ")", ")", "\n", "logging", ".", "debug", "(", "\" Cfg file: \"", "+", "str", "(", "network", ".", "cfg", ")", ")", "\n", "if", "sim_params", ".", "num_clients", ">", "1", ":", "\n", "                    ", "logging", ".", "info", "(", "\" Num clients are\"", "+", "\n", "str", "(", "sim_params", ".", "num_clients", ")", ")", "\n", "", "logging", ".", "debug", "(", "\" Emission file: \"", "+", "str", "(", "self", ".", "emission_path", ")", ")", "\n", "logging", ".", "debug", "(", "\" Step length: \"", "+", "str", "(", "sim_params", ".", "sim_step", ")", ")", "\n", "\n", "# Opening the I/O thread to SUMO", "\n", "self", ".", "sumo_proc", "=", "subprocess", ".", "Popen", "(", "\n", "sumo_call", ",", "\n", "stdout", "=", "subprocess", ".", "DEVNULL", "\n", ")", "\n", "\n", "# wait a small period of time for the subprocess to activate", "\n", "# before trying to connect with traci", "\n", "if", "os", ".", "environ", ".", "get", "(", "\"TEST_FLAG\"", ",", "0", ")", ":", "\n", "                    ", "time", ".", "sleep", "(", "0.1", ")", "\n", "", "else", ":", "\n", "                    ", "time", ".", "sleep", "(", "config", ".", "SUMO_SLEEP", ")", "\n", "\n", "", "traci_connection", "=", "traci", ".", "connect", "(", "port", ",", "numRetries", "=", "100", ")", "\n", "traci_connection", ".", "setOrder", "(", "0", ")", "\n", "traci_connection", ".", "simulationStep", "(", ")", "\n", "\n", "return", "traci_connection", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "\"Error during start: {}\"", ".", "format", "(", "traceback", ".", "format_exc", "(", ")", ")", ")", "\n", "error", "=", "e", "\n", "self", ".", "teardown_sumo", "(", ")", "\n", "", "", "raise", "error", "\n", "\n", "", "def", "teardown_sumo", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle._add_departed": [[266, 386], ["traci.TraCIVehicle.kernel_api.vehicle.subscribe", "traci.TraCIVehicle.kernel_api.vehicle.subscribeLeader", "traci.TraCIVehicle.kernel_api.vehicle.getLength", "traci.TraCIVehicle.kernel_api.vehicle.setSpeedMode", "traci.TraCIVehicle.kernel_api.vehicle.setLaneChangeMode", "dict", "traci.TraCIVehicle.kernel_api.vehicle.getRoadID", "traci.TraCIVehicle.kernel_api.vehicle.getLanePosition", "traci.TraCIVehicle.kernel_api.vehicle.getLaneIndex", "traci.TraCIVehicle.kernel_api.vehicle.getSpeed", "traci.TraCIVehicle.kernel_api.vehicle.getFuelConsumption", "traci.TraCIVehicle.__rl_ids.sort", "len", "traci.TraCIVehicle.kernel_api.vehicle.getSubscriptionResults", "KeyError", "traci.TraCIVehicle.__ids.append", "dict", "float", "traci.TraCIVehicle.__rl_ids.append", "traci.TraCIVehicle.__human_ids.append", "traci.TraCIVehicle.__controlled_ids.append", "traci.TraCIVehicle.__controlled_lc_ids.append"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["        ", "\"\"\"Kill the sumo subprocess instance.\"\"\"", "\n", "try", ":", "\n", "            ", "os", ".", "killpg", "(", "self", ".", "sumo_proc", ".", "pid", ",", "signal", ".", "SIGTERM", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"Error during teardown: {}\"", ".", "format", "(", "e", ")", ")", "\n", "\n", "", "", "def", "save_emission", "(", "self", ",", "run_id", "=", "0", ")", ":", "\n", "        ", "\"\"\"Save any collected emission data to a csv file.\n\n        If not data was collected, nothing happens. Moreover, any internally\n        stored data by this class is clear whenever data is stored.\n\n        Parameters\n        ----------\n        run_id : int\n            the rollout number, appended to the name of the emission file. Used\n            to store emission files from multiple rollouts run sequentially.\n        \"\"\"", "\n", "# If there is no stored data, ignore this operation. This is to ensure", "\n", "# that data isn't deleted if the operation is called twice.", "\n", "if", "len", "(", "self", ".", "stored_data", ")", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "# Get a csv name for the emission file.", "\n", "", "name", "=", "\"{}-{}_emission.csv\"", ".", "format", "(", "\n", "self", ".", "master_kernel", ".", "network", ".", "network", ".", "name", ",", "run_id", ")", "\n", "\n", "# The name of all stored data-points (excluding id and time)", "\n", "stored_ids", "=", "[", "\n", "\"x\"", ",", "\n", "\"y\"", ",", "\n", "\"speed\"", ",", "\n", "\"headway\"", ",", "\n", "\"leader_id\"", ",", "\n", "\"target_accel_with_noise_with_failsafe\"", ",", "\n", "\"target_accel_no_noise_no_failsafe\"", ",", "\n", "\"target_accel_with_noise_no_failsafe\"", ",", "\n", "\"target_accel_no_noise_with_failsafe\"", ",", "\n", "\"realized_accel\"", ",", "\n", "\"road_grade\"", ",", "\n", "\"edge_id\"", ",", "\n", "\"lane_number\"", ",", "\n", "\"distance\"", ",", "\n", "\"relative_position\"", ",", "\n", "\"follower_id\"", ",", "\n", "\"leader_rel_speed\"", ",", "\n", "]", "\n", "\n", "# Update the stored data to push to the csv file.", "\n", "final_data", "=", "{", "\"time\"", ":", "[", "]", ",", "\"id\"", ":", "[", "]", "}", "\n", "final_data", ".", "update", "(", "{", "key", ":", "[", "]", "for", "key", "in", "stored_ids", "}", ")", "\n", "\n", "for", "veh_id", "in", "self", ".", "stored_data", ".", "keys", "(", ")", ":", "\n", "            ", "for", "t", "in", "self", ".", "stored_data", "[", "veh_id", "]", ".", "keys", "(", ")", ":", "\n", "                ", "final_data", "[", "'time'", "]", ".", "append", "(", "t", ")", "\n", "final_data", "[", "'id'", "]", ".", "append", "(", "veh_id", ")", "\n", "for", "key", "in", "stored_ids", ":", "\n", "                    ", "final_data", "[", "key", "]", ".", "append", "(", "self", ".", "stored_data", "[", "veh_id", "]", "[", "t", "]", "[", "key", "]", ")", "\n", "\n", "", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "emission_path", ",", "name", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "print", "(", "os", ".", "path", ".", "join", "(", "self", ".", "emission_path", ",", "name", ")", ",", "self", ".", "emission_path", ")", "\n", "writer", "=", "csv", ".", "writer", "(", "f", ",", "delimiter", "=", "','", ")", "\n", "writer", ".", "writerow", "(", "final_data", ".", "keys", "(", ")", ")", "\n", "writer", ".", "writerows", "(", "zip", "(", "*", "final_data", ".", "values", "(", ")", ")", ")", "\n", "\n", "# Clear all memory from the stored data. This is useful if this", "\n", "# function is called in between resets.", "\n", "", "self", ".", "stored_data", ".", "clear", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.reset": [[387, 390], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.remove": [[391, 423], ["len", "len", "traci.TraCIVehicle.kernel_api.vehicle.getIDList", "traci.TraCIVehicle.kernel_api.vehicle.unsubscribe", "traci.TraCIVehicle.kernel_api.vehicle.remove", "traci.TraCIVehicle.__ids.remove", "traci.TraCIVehicle.__human_ids.remove", "traci.TraCIVehicle.get_ids", "traci.TraCIVehicle.get_rl_ids", "traci.TraCIVehicle.__controlled_ids.remove", "traci.TraCIVehicle.__controlled_lc_ids.remove", "traci.TraCIVehicle.__rl_ids.remove", "traci.TraCIVehicle.__rl_ids.sort"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed": [[424, 427], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_edge": [[428, 431], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_follower": [[432, 435], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_headway": [[436, 439], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_orientation": [[440, 443], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_timestep": [[444, 447], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_timedelta": [[448, 451], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_type": [[452, 455], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_initial_speed": [[456, 459], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_ids": [[460, 463], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_human_ids": [[464, 467], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_controlled_ids": [[468, 471], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_controlled_lc_ids": [[472, 475], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_rl_ids": [[476, 479], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_observed": [[480, 484], ["traci.TraCIVehicle.__observed_ids.append"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.remove_observed": [[485, 489], ["traci.TraCIVehicle.__observed_ids.remove"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_observed_ids": [[490, 493], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_ids_by_edge": [[494, 499], ["isinstance", "sum", "traci.TraCIVehicle._ids_by_edge.get", "traci.TraCIVehicle.get_ids_by_edge"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids_by_edge"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_inflow_rate": [[500, 506], ["len", "sum", "len", "int"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_outflow_rate": [[507, 513], ["len", "sum", "len", "int"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_num_arrived": [[514, 520], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_arrived_ids": [[521, 524], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_arrived_rl_ids": [[525, 534], ["len", "arrived.extend"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_departed_ids": [[535, 538], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_num_not_departed": [[539, 542], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_fuel_consumption": [[543, 549], ["isinstance", "traci.TraCIVehicle.__sumo_obs.get().get", "traci.TraCIVehicle.get_fuel_consumption", "traci.TraCIVehicle.__sumo_obs.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_fuel_consumption", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_previous_speed": [[550, 555], ["isinstance", "traci.TraCIVehicle.previous_speeds.get", "traci.TraCIVehicle.get_previous_speed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_previous_speed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_speed": [[556, 561], ["isinstance", "traci.TraCIVehicle.__sumo_obs.get().get", "traci.TraCIVehicle.get_speed", "traci.TraCIVehicle.__sumo_obs.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_default_speed": [[562, 568], ["isinstance", "traci.TraCIVehicle.__sumo_obs.get().get", "traci.TraCIVehicle.get_default_speed", "traci.TraCIVehicle.__sumo_obs.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_default_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_position": [[569, 574], ["isinstance", "traci.TraCIVehicle.__sumo_obs.get().get", "traci.TraCIVehicle.get_position", "traci.TraCIVehicle.__sumo_obs.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_edge": [[575, 580], ["isinstance", "traci.TraCIVehicle.__sumo_obs.get().get", "traci.TraCIVehicle.get_edge", "traci.TraCIVehicle.__sumo_obs.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_lane": [[581, 586], ["isinstance", "traci.TraCIVehicle.__sumo_obs.get().get", "traci.TraCIVehicle.get_lane", "traci.TraCIVehicle.__sumo_obs.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_route": [[587, 594], ["isinstance", "traci.TraCIVehicle.__sumo_obs.get().get", "list", "traci.TraCIVehicle.get_route", "traci.TraCIVehicle.__sumo_obs.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_route", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_length": [[595, 600], ["isinstance", "traci.TraCIVehicle.__vehicles.get().get", "traci.TraCIVehicle.get_length", "traci.TraCIVehicle.__vehicles.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_leader": [[601, 606], ["isinstance", "traci.TraCIVehicle.__vehicles.get().get", "traci.TraCIVehicle.get_leader", "traci.TraCIVehicle.__vehicles.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_follower": [[607, 612], ["isinstance", "traci.TraCIVehicle.__vehicles.get().get", "traci.TraCIVehicle.get_follower", "traci.TraCIVehicle.__vehicles.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_follower", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_headway": [[613, 618], ["isinstance", "traci.TraCIVehicle.__vehicles.get().get", "traci.TraCIVehicle.get_headway", "traci.TraCIVehicle.__vehicles.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_last_lc": [[619, 633], ["isinstance", "warnings.warn", "traci.TraCIVehicle.__vehicles.get().get", "traci.TraCIVehicle.get_headway", "traci.TraCIVehicle.__vehicles.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_acc_controller": [[634, 639], ["isinstance", "traci.TraCIVehicle.__vehicles.get().get", "traci.TraCIVehicle.get_acc_controller", "traci.TraCIVehicle.__vehicles.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_lane_changing_controller": [[640, 648], ["isinstance", "traci.TraCIVehicle.__vehicles.get().get", "traci.TraCIVehicle.get_lane_changing_controller", "traci.TraCIVehicle.__vehicles.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_changing_controller", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_routing_controller": [[649, 656], ["isinstance", "traci.TraCIVehicle.__vehicles.get().get", "traci.TraCIVehicle.get_routing_controller", "traci.TraCIVehicle.__vehicles.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_routing_controller", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_lane_headways": [[657, 660], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_lane_headways": [[661, 668], ["isinstance", "traci.TraCIVehicle.__vehicles.get().get", "list", "traci.TraCIVehicle.get_lane_headways", "traci.TraCIVehicle.__vehicles.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_headways", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_lane_leaders_speed": [[669, 674], ["traci.TraCIVehicle.get_lane_leaders", "traci.TraCIVehicle.get_speed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_leaders", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_lane_followers_speed": [[675, 680], ["traci.TraCIVehicle.get_lane_followers", "traci.TraCIVehicle.get_speed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_followers", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_lane_leaders": [[681, 684], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_lane_leaders": [[685, 692], ["isinstance", "list", "traci.TraCIVehicle.get_lane_leaders"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_leaders"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_lane_tailways": [[693, 696], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_lane_tailways": [[697, 704], ["isinstance", "traci.TraCIVehicle.__vehicles.get().get", "list", "traci.TraCIVehicle.get_lane_tailways", "traci.TraCIVehicle.__vehicles.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_tailways", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_lane_followers": [[705, 708], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_lane_followers": [[709, 716], ["isinstance", "traci.TraCIVehicle.__vehicles.get().get", "list", "traci.TraCIVehicle.get_lane_followers", "traci.TraCIVehicle.__vehicles.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_followers", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle._multi_lane_headways": [[717, 782], ["traci.TraCIVehicle.master_kernel.network.get_edge_list", "traci.TraCIVehicle.master_kernel.network.get_junction_list", "max", "dict.fromkeys", "traci.TraCIVehicle.get_ids", "traci.TraCIVehicle.get_rl_ids", "dict().fromkeys", "len", "len", "traci.TraCIVehicle.get_edge", "traci.TraCIVehicle.get_lane", "traci.TraCIVehicle.get_position", "traci.TraCIVehicle.get_edge", "list", "traci.TraCIVehicle.master_kernel.network.get_edge_list", "traci.TraCIVehicle.master_kernel.network.get_junction_list", "traci.TraCIVehicle.master_kernel.network.num_lanes", "[].append", "range", "traci.TraCIVehicle._multi_lane_headways_util", "traci.TraCIVehicle.set_lane_headways", "traci.TraCIVehicle.set_lane_tailways", "traci.TraCIVehicle.set_lane_leaders", "traci.TraCIVehicle.set_lane_followers", "dict", "itertools.chain.from_iterable", "len", "zip", "list", "[].sort", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_junction_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_junction_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle._multi_lane_headways_util", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_lane_headways", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_lane_tailways", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_lane_leaders", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_lane_followers"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle._multi_lane_headways_util": [[783, 868], ["traci.TraCIVehicle.get_position", "traci.TraCIVehicle.get_edge", "traci.TraCIVehicle.get_lane", "traci.TraCIVehicle.master_kernel.network.num_lanes", "range", "len", "zip", "list", "list", "bisect.bisect_left", "traci.TraCIVehicle._next_edge_leaders", "traci.TraCIVehicle._prev_edge_followers", "traci.TraCIVehicle.get_length", "len", "traci.TraCIVehicle.get_length", "traci.TraCIVehicle.get_length", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle._next_edge_leaders", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle._prev_edge_followers", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_length"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle._next_edge_leaders": [[869, 913], ["traci.TraCIVehicle.get_position", "traci.TraCIVehicle.get_edge", "range", "traci.TraCIVehicle.master_kernel.network.edge_length", "len", "traci.TraCIVehicle.master_kernel.network.next_edge", "traci.TraCIVehicle.master_kernel.network.next_edge", "len", "traci.TraCIVehicle.get_length"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.next_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.next_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_length"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle._prev_edge_followers": [[914, 958], ["traci.TraCIVehicle.get_position", "traci.TraCIVehicle.get_edge", "range", "traci.TraCIVehicle.master_kernel.network.edge_length", "len", "traci.TraCIVehicle.master_kernel.network.prev_edge", "traci.TraCIVehicle.master_kernel.network.prev_edge", "len", "traci.TraCIVehicle.get_length"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.prev_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.prev_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_length"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.apply_acceleration": [[959, 975], ["enumerate", "type", "traci.TraCIVehicle.get_speed", "max", "traci.TraCIVehicle.get_ids", "traci.TraCIVehicle.kernel_api.vehicle.slowDown", "traci.TraCIVehicle.kernel_api.vehicle.setSpeed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.apply_lane_change": [[976, 1009], ["any", "enumerate", "type", "ValueError", "traci.TraCIVehicle.get_lane", "traci.TraCIVehicle.get_edge", "min", "max", "traci.TraCIVehicle.kernel_api.vehicle.changeLane", "traci.TraCIVehicle.master_kernel.network.num_lanes", "int", "traci.TraCIVehicle.get_rl_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.choose_routes": [[1010, 1021], ["enumerate", "type", "traci.TraCIVehicle.kernel_api.vehicle.setRoute"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_x_by_id": [[1022, 1031], ["isinstance", "traci.TraCIVehicle.master_kernel.network.get_x", "traci.TraCIVehicle.get_edge", "traci.TraCIVehicle.get_edge", "traci.TraCIVehicle.get_position", "traci.TraCIVehicle.get_x_by_id"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_x", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.update_vehicle_colors": [[1032, 1087], ["traci.TraCIVehicle.get_rl_ids", "traci.TraCIVehicle.get_human_ids", "traci.TraCIVehicle.get_ids", "traci.TraCIVehicle.get_observed_ids", "traci.TraCIVehicle.master_kernel.network.max_speed", "numpy.linspace", "traci.TraCIVehicle.get_ids", "traci.TraCIVehicle.remove_observed", "traci.TraCIVehicle.get_speed", "numpy.digitize", "traci.TraCIVehicle.set_color", "print", "traci.TraCIVehicle.set_color", "print", "print", "traci.TraCIVehicle.set_color", "traci.TraCIVehicle.get_observed_ids", "traci.TraCIVehicle.set_color", "traci.TraCIVehicle.get_type", "traci.TraCIVehicle.get_type", "traci.TraCIVehicle.get_type", "traci.TraCIVehicle.get_type"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_human_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_observed_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.max_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove_observed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_color", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_color", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_color", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_observed_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_color", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_type", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_type", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_type", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_type"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_color": [[1088, 1095], ["traci.TraCIVehicle.kernel_api.vehicle.getColor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_color": [[1096, 1104], ["traci.TraCIVehicle.kernel_api.vehicle.setColor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.add": [[1105, 1124], ["traci.TraCIVehicle.kernel_api.vehicle.addFull", "len", "str", "str", "str", "str", "numpy.random.choice", "range"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_max_speed": [[1125, 1130], ["isinstance", "traci.TraCIVehicle.kernel_api.vehicle.getMaxSpeed", "traci.TraCIVehicle.get_max_speed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_max_speed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_max_speed": [[1131, 1134], ["traci.TraCIVehicle.kernel_api.vehicle.setMaxSpeed"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_accel": [[1135, 1150], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.update_accel": [[1151, 1164], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_realized_accel": [[1165, 1170], ["traci.TraCIVehicle.get_distance", "traci.TraCIVehicle.get_speed", "traci.TraCIVehicle.get_previous_speed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_distance", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_previous_speed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_2d_position": [[1171, 1174], ["traci.TraCIVehicle.__sumo_obs.get().get", "traci.TraCIVehicle.__sumo_obs.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_distance": [[1175, 1178], ["traci.TraCIVehicle.__sumo_obs.get().get", "traci.TraCIVehicle.__sumo_obs.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_road_grade": [[1179, 1183], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.__init__": [[33, 97], ["flow.core.kernel.vehicle.base.KernelVehicle.__init__", "collections.OrderedDict", "dict", "aimsun.AimsunKernelVehicle.make_bitmap_for_tracking"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.make_bitmap_for_tracking"], ["KernelSimulation", ".", "__init__", "(", "self", ",", "master_kernel", ")", "\n", "\n", "self", ".", "master_kernel", "=", "master_kernel", "\n", "self", ".", "kernel_api", "=", "None", "\n", "self", ".", "sim_step", "=", "None", "\n", "self", ".", "emission_path", "=", "None", "\n", "self", ".", "time", "=", "0", "\n", "self", ".", "stored_data", "=", "{", "\n", "'time'", ":", "[", "]", ",", "\n", "'x'", ":", "[", "]", ",", "\n", "'y'", ":", "[", "]", ",", "\n", "'angle'", ":", "[", "]", ",", "\n", "'type'", ":", "[", "]", ",", "\n", "'id'", ":", "[", "]", ",", "\n", "'relative_position'", ":", "[", "]", ",", "\n", "'speed'", ":", "[", "]", ",", "\n", "'edge_id'", ":", "[", "]", ",", "\n", "'lane_number'", ":", "[", "]", "\n", "}", "\n", "\n", "", "def", "pass_api", "(", "self", ",", "kernel_api", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "self", ".", "kernel_api", "=", "kernel_api", "\n", "\n", "", "def", "start_simulation", "(", "self", ",", "network", ",", "sim_params", ")", ":", "\n", "        ", "\"\"\"See parent class.\n\n        This method calls the aimsun generator to generate the network, starts\n        a simulation, and creates a class to communicate with the simulation\n        via an TCP connection.\n        \"\"\"", "\n", "# save the simulation step size (for later use)", "\n", "self", ".", "sim_step", "=", "sim_params", ".", "sim_step", "\n", "\n", "self", ".", "emission_path", "=", "sim_params", ".", "emission_path", "\n", "if", "self", ".", "emission_path", "is", "not", "None", ":", "\n", "            ", "ensure_dir", "(", "self", ".", "emission_path", ")", "\n", "\n", "", "return", "FlowAimsunAPI", "(", "port", "=", "sim_params", ".", "port", ")", "\n", "\n", "", "def", "simulation_step", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "self", ".", "kernel_api", ".", "simulation_step", "(", ")", "\n", "\n", "", "def", "update", "(", "self", ",", "reset", ")", ":", "\n", "        ", "\"\"\"See parent class.\n\n        No update is needed in this case.\n        \"\"\"", "\n", "if", "reset", ":", "\n", "            ", "self", ".", "time", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "time", "+=", "self", ".", "sim_step", "\n", "\n", "", "if", "self", ".", "emission_path", "is", "not", "None", ":", "\n", "            ", "for", "veh_id", "in", "self", ".", "master_kernel", ".", "vehicle", ".", "get_ids", "(", ")", ":", "\n", "                ", "pos", "=", "self", ".", "master_kernel", ".", "vehicle", ".", "get_position_world", "(", "veh_id", ")", "\n", "self", ".", "stored_data", "[", "'id'", "]", ".", "append", "(", "\n", "veh_id", ")", "\n", "self", ".", "stored_data", "[", "'time'", "]", ".", "append", "(", "\n", "self", ".", "time", ")", "\n", "self", ".", "stored_data", "[", "'type'", "]", ".", "append", "(", "\n", "self", ".", "master_kernel", ".", "vehicle", ".", "get_type", "(", "veh_id", ")", ")", "\n", "self", ".", "stored_data", "[", "'x'", "]", ".", "append", "(", "\n", "pos", "[", "0", "]", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.initialize": [[101, 128], ["aimsun.AimsunKernelVehicle.__vehicles.clear", "range", "dict"], "methods", ["None"], ["self", ".", "master_kernel", ".", "vehicle", ".", "get_position", "(", "veh_id", ")", ")", "\n", "self", ".", "stored_data", "[", "'angle'", "]", ".", "append", "(", "\n", "self", ".", "master_kernel", ".", "vehicle", ".", "get_angle", "(", "veh_id", ")", ")", "\n", "self", ".", "stored_data", "[", "'speed'", "]", ".", "append", "(", "\n", "self", ".", "master_kernel", ".", "vehicle", ".", "get_speed", "(", "veh_id", ")", ")", "\n", "self", ".", "stored_data", "[", "'edge_id'", "]", ".", "append", "(", "\n", "self", ".", "master_kernel", ".", "vehicle", ".", "get_edge", "(", "veh_id", ")", ")", "\n", "self", ".", "stored_data", "[", "'lane_number'", "]", ".", "append", "(", "\n", "self", ".", "master_kernel", ".", "vehicle", ".", "get_lane", "(", "veh_id", ")", ")", "\n", "\n", "", "", "", "def", "check_collision", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "return", "False", "\n", "\n", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "# save the emission data to a csv", "\n", "if", "self", ".", "emission_path", "is", "not", "None", ":", "\n", "            ", "name", "=", "\"%s_emission.csv\"", "%", "self", ".", "master_kernel", ".", "network", ".", "network", ".", "name", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "emission_path", ",", "name", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "writer", "=", "csv", ".", "writer", "(", "f", ",", "delimiter", "=", "','", ")", "\n", "writer", ".", "writerow", "(", "self", ".", "stored_data", ".", "keys", "(", ")", ")", "\n", "writer", ".", "writerows", "(", "zip", "(", "*", "self", ".", "stored_data", ".", "values", "(", ")", ")", ")", "\n", "\n", "# close the API and simulation process", "\n", "", "", "try", ":", "\n", "            ", "self", ".", "kernel_api", ".", "stop_simulation", "(", ")", "\n", "self", ".", "master_kernel", ".", "network", ".", "aimsun_proc", ".", "kill", "(", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.pass_api": [[134, 137], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.make_bitmap_for_tracking": [[138, 159], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.update": [[164, 288], ["aimsun.AimsunKernelVehicle.kernel_api.get_entered_ids", "aimsun.AimsunKernelVehicle.kernel_api.get_exited_ids", "aimsun.AimsunKernelVehicle._arrived_rl_ids.append", "aimsun.AimsunKernelVehicle.kernel_api.get_vehicle_type_name", "aimsun.AimsunKernelVehicle.kernel_api.get_vehicle_tracking_info", "aimsun.AimsunKernelVehicle.kernel_api.get_vehicle_leader", "aimsun.AimsunKernelVehicle._add_departed", "aimsun.AimsunKernelVehicle.get_rl_ids", "arrived_rl_ids.append", "aimsun.AimsunKernelVehicle.remove", "aimsun.AimsunKernelVehicle.make_bitmap_for_tracking", "aimsun.AimsunKernelVehicle.kernel_api.get_vehicle_tracking_info", "aimsun.AimsunKernelVehicle.kernel_api.get_vehicle_length", "aimsun.AimsunKernelVehicle.kernel_api.get_next_section"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_entered_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_exited_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_vehicle_type_name", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_vehicle_tracking_info", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_vehicle_leader", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle._add_departed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.make_bitmap_for_tracking", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_vehicle_tracking_info", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_vehicle_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_next_section"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle._add_departed": [[294, 376], ["aimsun.AimsunKernelVehicle.kernel_api.get_vehicle_static_info", "aimsun.AimsunKernelVehicle.kernel_api.get_vehicle_type_name", "aimsun.AimsunKernelVehicle.kernel_api.set_vehicle_tracked", "flow.utils.aimsun.struct.InfVeh", "aimsun.AimsunKernelVehicle.__human_ids.append", "aimsun.AimsunKernelVehicle.__rl_ids.sort", "aimsun.AimsunKernelVehicle._id_aimsun2flow.keys", "aimsun.AimsunKernelVehicle.__ids.append", "float", "aimsun.AimsunKernelVehicle.__rl_ids.append", "aimsun.AimsunKernelVehicle.__human_ids.append", "aimsun.AimsunKernelVehicle.__controlled_ids.append", "aimsun.AimsunKernelVehicle.__controlled_lc_ids.append"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_vehicle_static_info", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_vehicle_type_name", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.set_vehicle_tracked", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add": [[377, 410], ["aimsun.AimsunKernelVehicle.__ids.append", "aimsun.AimsunKernelVehicle.kernel_api.add_vehicle", "aimsun.AimsunKernelVehicle.kernel_api.get_vehicle_static_info", "flow.utils.aimsun.struct.InfVeh", "aimsun.AimsunKernelVehicle.master_kernel.network.aimsun_edge_name"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.add_vehicle", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_vehicle_static_info", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.aimsun_edge_name"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.reset": [[411, 414], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove": [[415, 444], ["aimsun.AimsunKernelVehicle.kernel_api.remove_vehicle", "aimsun.AimsunKernelVehicle.__ids.remove", "aimsun.AimsunKernelVehicle.__rl_ids.sort", "aimsun.AimsunKernelVehicle.__human_ids.remove", "aimsun.AimsunKernelVehicle.__controlled_ids.remove", "aimsun.AimsunKernelVehicle.__controlled_lc_ids.remove", "aimsun.AimsunKernelVehicle.__rl_ids.remove"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.remove_vehicle", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_acceleration": [[445, 458], ["enumerate", "type", "aimsun.AimsunKernelVehicle.get_speed", "max", "aimsun.AimsunKernelVehicle.kernel_api.set_speed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.set_speed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_lane_change": [[459, 514], ["any", "enumerate", "type", "ValueError", "aimsun.AimsunKernelVehicle.get_lane", "aimsun.AimsunKernelVehicle.get_edge", "min", "max", "aimsun.AimsunKernelVehicle.kernel_api.apply_lane_change", "aimsun.AimsunKernelVehicle.master_kernel.network.num_lanes", "int", "aimsun.AimsunKernelVehicle.get_rl_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_lane_change", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.choose_routes": [[515, 528], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_max_speed": [[535, 538], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.update_vehicle_colors": [[543, 559], ["aimsun.AimsunKernelVehicle.get_rl_ids", "aimsun.AimsunKernelVehicle.get_human_ids", "aimsun.AimsunKernelVehicle.get_observed_ids", "aimsun.AimsunKernelVehicle.kernel_api.set_color", "aimsun.AimsunKernelVehicle.kernel_api.set_color", "aimsun.AimsunKernelVehicle.remove_observed", "aimsun.AimsunKernelVehicle.get_observed_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_human_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_observed_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_color", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_color", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove_observed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_observed_ids"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed": [[560, 564], ["aimsun.AimsunKernelVehicle.__observed_ids.append"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove_observed": [[565, 569], ["aimsun.AimsunKernelVehicle.__observed_ids.remove"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_observed_ids": [[570, 573], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_color": [[574, 577], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_color": [[578, 581], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_orientation": [[586, 589], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_timestep": [[590, 593], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_timedelta": [[594, 597], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids": [[598, 601], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_human_ids": [[602, 605], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_ids": [[606, 609], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_lc_ids": [[610, 613], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids": [[614, 617], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids_by_edge": [[618, 623], ["isinstance", "sum", "aimsun.AimsunKernelVehicle.get_ids_by_edge", "aimsun.AimsunKernelVehicle.get_edge"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids_by_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_inflow_rate": [[624, 630], ["len", "sum", "len", "int"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_outflow_rate": [[631, 637], ["len", "sum", "len", "int"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_num_arrived": [[638, 644], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_arrived_ids": [[645, 648], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_arrived_rl_ids": [[649, 658], ["len", "arrived.extend"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_departed_ids": [[659, 662], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_num_not_departed": [[663, 666], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_fuel_consumption": [[667, 670], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_type": [[671, 676], ["isinstance", "aimsun.AimsunKernelVehicle.__vehicles.get().get", "aimsun.AimsunKernelVehicle.get_type", "aimsun.AimsunKernelVehicle.__vehicles.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_type", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_initial_speed": [[677, 680], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed": [[681, 686], ["isinstance", "aimsun.AimsunKernelVehicle.get_speed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_default_speed": [[687, 690], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position": [[691, 696], ["isinstance", "aimsun.AimsunKernelVehicle.get_position"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position_world": [[697, 722], ["isinstance", "aimsun.AimsunKernelVehicle.get_position_world"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position_world"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge": [[723, 737], ["isinstance", "aimsun.AimsunKernelVehicle.master_kernel.network.flow_edge_name", "aimsun.AimsunKernelVehicle.master_kernel.network.flow_edge_name", "aimsun.AimsunKernelVehicle.master_kernel.network.flow_edge_name", "aimsun.AimsunKernelVehicle.get_edge"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.flow_edge_name", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.flow_edge_name", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.flow_edge_name", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_angle": [[738, 764], ["isinstance", "numpy.arctan2", "aimsun.AimsunKernelVehicle.get_angle"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_angle"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane": [[765, 770], ["isinstance", "aimsun.AimsunKernelVehicle.get_lane"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_route": [[771, 776], ["isinstance", "aimsun.AimsunKernelVehicle.get_route"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_route"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_length": [[782, 787], ["isinstance", "aimsun.AimsunKernelVehicle.get_length"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_length"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader": [[788, 793], ["isinstance", "aimsun.AimsunKernelVehicle.get_leader"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_leader"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_follower": [[794, 799], ["isinstance", "aimsun.AimsunKernelVehicle.get_follower"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_follower"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway": [[800, 805], ["isinstance", "aimsun.AimsunKernelVehicle.get_headway"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_headway"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_last_lc": [[806, 809], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller": [[810, 813], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_changing_controller": [[814, 817], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_routing_controller": [[818, 825], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id": [[826, 830], ["aimsun.AimsunKernelVehicle.master_kernel.network.get_x", "aimsun.AimsunKernelVehicle.get_edge", "aimsun.AimsunKernelVehicle.get_position"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_x", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_position"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_lane_headways": [[831, 834], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_headways": [[835, 838], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_lane_leaders": [[839, 842], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_leaders": [[843, 846], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_lane_tailways": [[847, 850], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_tailways": [[851, 854], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_lane_followers": [[855, 858], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_followers": [[859, 862], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_followers_speed": [[863, 866], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_leaders_speed": [[867, 870], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_max_speed": [[871, 874], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.VariableLanesNetwork.specify_edges": [[708, 794], ["numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["None"], ["def", "specify_edges", "(", "self", ",", "net_params", ")", ":", "\n", "        ", "\"\"\"See parent class.\n\n        Each edge can be provided with a separate number of lanes.\n        \"\"\"", "\n", "length", "=", "net_params", ".", "additional_params", "[", "\"length\"", "]", "\n", "resolution", "=", "net_params", ".", "additional_params", "[", "\"resolution\"", "]", "\n", "v", "=", "net_params", ".", "additional_params", "[", "\"speed_limit\"", "]", "\n", "r", "=", "length", "/", "(", "2", "*", "pi", ")", "\n", "edgelen", "=", "length", "/", "4.", "\n", "\n", "edges", "=", "[", "{", "\n", "\"id\"", ":", "\n", "\"bottom\"", ",", "\n", "\"from\"", ":", "\n", "\"bottom\"", ",", "\n", "\"to\"", ":", "\n", "\"right\"", ",", "\n", "\"speed\"", ":", "\n", "v", ",", "\n", "\"length\"", ":", "\n", "edgelen", ",", "\n", "\"numLanes\"", ":", "\n", "1", ",", "\n", "\"shape\"", ":", "\n", "[", "\n", "(", "r", "*", "cos", "(", "t", ")", ",", "r", "*", "sin", "(", "t", ")", ")", "\n", "for", "t", "in", "linspace", "(", "-", "pi", "/", "2", ",", "0", ",", "resolution", ")", "\n", "]", "\n", "}", ",", "{", "\n", "\"id\"", ":", "\n", "\"right\"", ",", "\n", "\"from\"", ":", "\n", "\"right\"", ",", "\n", "\"to\"", ":", "\n", "\"top\"", ",", "\n", "\"speed\"", ":", "\n", "v", ",", "\n", "\"length\"", ":", "\n", "edgelen", ",", "\n", "\"numLanes\"", ":", "\n", "3", ",", "\n", "\"shape\"", ":", "\n", "[", "\n", "(", "r", "*", "cos", "(", "t", ")", ",", "r", "*", "sin", "(", "t", ")", ")", "\n", "for", "t", "in", "linspace", "(", "0", ",", "pi", "/", "2", ",", "resolution", ")", "\n", "]", "\n", "}", ",", "{", "\n", "\"id\"", ":", "\n", "\"top\"", ",", "\n", "\"from\"", ":", "\n", "\"top\"", ",", "\n", "\"to\"", ":", "\n", "\"left\"", ",", "\n", "\"speed\"", ":", "\n", "v", ",", "\n", "\"length\"", ":", "\n", "edgelen", ",", "\n", "\"numLanes\"", ":", "\n", "2", ",", "\n", "\"shape\"", ":", "\n", "[", "\n", "(", "r", "*", "cos", "(", "t", ")", ",", "r", "*", "sin", "(", "t", ")", ")", "\n", "for", "t", "in", "linspace", "(", "pi", "/", "2", ",", "pi", ",", "resolution", ")", "\n", "]", "\n", "}", ",", "{", "\n", "\"id\"", ":", "\n", "\"left\"", ",", "\n", "\"from\"", ":", "\n", "\"left\"", ",", "\n", "\"to\"", ":", "\n", "\"bottom\"", ",", "\n", "\"speed\"", ":", "\n", "v", ",", "\n", "\"length\"", ":", "\n", "edgelen", ",", "\n", "\"numLanes\"", ":", "\n", "4", ",", "\n", "\"shape\"", ":", "\n", "[", "\n", "(", "r", "*", "cos", "(", "t", ")", ",", "r", "*", "sin", "(", "t", ")", ")", "\n", "for", "t", "in", "linspace", "(", "pi", ",", "3", "*", "pi", "/", "2", ",", "resolution", ")", "\n", "]", "\n", "}", "]", "\n", "\n", "return", "edges", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup": [[26, 152], ["logging.basicConfig", "dict", "flow.networks.ring.RingNetwork", "flow.envs.ring.accel.AccelEnv", "flow.envs.ring.accel.AccelEnv.reset", "flow.core.params.SumoParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "flow.core.params.SumoCarFollowingParams"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["def", "ring_road_exp_setup", "(", "sim_params", "=", "None", ",", "\n", "vehicles", "=", "None", ",", "\n", "env_params", "=", "None", ",", "\n", "net_params", "=", "None", ",", "\n", "initial_config", "=", "None", ",", "\n", "traffic_lights", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Create an environment and network pair for ring road test experiments.\n\n    Parameters\n    ----------\n    sim_params : flow.core.params.SumoParams\n        sumo-related configuration parameters, defaults to a time step of 0.1s\n        and no sumo-imposed failsafe on human or rl vehicles\n    vehicles : Vehicles type\n        vehicles to be placed in the network, default is one vehicles with an\n        IDM acceleration controller and ContinuousRouter routing controller.\n    env_params : flow.core.params.EnvParams\n        environment-specific parameters, defaults to a environment with no\n        failsafes, where other parameters do not matter for non-rl runs\n    net_params : flow.core.params.NetParams\n        network-specific configuration parameters, defaults to a single lane\n        ring road of length 230 m\n    initial_config : flow.core.params.InitialConfig\n        specifies starting positions of vehicles, defaults to evenly\n        distributed vehicles across the length of the network\n    traffic_lights : flow.core.params.TrafficLightParams\n        traffic light signals, defaults to no traffic lights in the network\n    \"\"\"", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "WARNING", ")", "\n", "\n", "if", "sim_params", "is", "None", ":", "\n", "# set default sim_params configuration", "\n", "        ", "sim_params", "=", "SumoParams", "(", "sim_step", "=", "0.1", ",", "render", "=", "False", ")", "\n", "\n", "", "if", "vehicles", "is", "None", ":", "\n", "# set default vehicles configuration", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"idm\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "\"aggressive\"", ",", "\n", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "\n", "", "if", "env_params", "is", "None", ":", "\n", "# set default env_params configuration", "\n", "        ", "additional_env_params", "=", "{", "\n", "\"target_velocity\"", ":", "8", ",", "\n", "\"max_accel\"", ":", "1", ",", "\n", "\"max_decel\"", ":", "1", ",", "\n", "\"sort_vehicles\"", ":", "False", ",", "\n", "}", "\n", "env_params", "=", "EnvParams", "(", "additional_params", "=", "additional_env_params", ")", "\n", "\n", "", "if", "net_params", "is", "None", ":", "\n", "# set default net_params configuration", "\n", "        ", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "230", ",", "\n", "\"lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "", "if", "initial_config", "is", "None", ":", "\n", "# set default initial_config configuration", "\n", "        ", "initial_config", "=", "InitialConfig", "(", "lanes_distribution", "=", "1", ")", "\n", "\n", "", "if", "traffic_lights", "is", "None", ":", "\n", "# set default to no traffic lights", "\n", "        ", "traffic_lights", "=", "TrafficLightParams", "(", ")", "\n", "\n", "", "flow_params", "=", "dict", "(", "\n", "# name of the experiment", "\n", "exp_tag", "=", "\"RingRoadTest\"", ",", "\n", "\n", "# name of the flow environment the experiment is running on", "\n", "env_name", "=", "AccelEnv", ",", "\n", "\n", "# name of the network class the experiment is running on", "\n", "network", "=", "RingNetwork", ",", "\n", "\n", "# simulator that is used by the experiment", "\n", "simulator", "=", "'traci'", ",", "\n", "\n", "# sumo-related parameters (see flow.core.params.SumoParams)", "\n", "sim", "=", "sim_params", ",", "\n", "\n", "# environment related parameters (see flow.core.params.EnvParams)", "\n", "env", "=", "env_params", ",", "\n", "# network-related parameters (see flow.core.params.NetParams and the", "\n", "# network's documentation or ADDITIONAL_NET_PARAMS component)", "\n", "net", "=", "net_params", ",", "\n", "\n", "# vehicles to be placed in the network at the start of a rollout (see", "\n", "# flow.core.params.VehicleParams)", "\n", "veh", "=", "vehicles", ",", "\n", "\n", "# parameters specifying the positioning of vehicles upon initialization/", "\n", "# reset (see flow.core.params.InitialConfig)", "\n", "initial", "=", "initial_config", ",", "\n", "\n", "# traffic lights to be introduced to specific nodes (see", "\n", "# flow.core.params.TrafficLightParams)", "\n", "tls", "=", "traffic_lights", ",", "\n", ")", "\n", "\n", "# create the network", "\n", "network", "=", "RingNetwork", "(", "\n", "name", "=", "\"RingRoadTest\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "net_params", ",", "\n", "initial_config", "=", "initial_config", ",", "\n", "traffic_lights", "=", "traffic_lights", ")", "\n", "\n", "# create the environment", "\n", "env", "=", "AccelEnv", "(", "\n", "env_params", "=", "env_params", ",", "sim_params", "=", "sim_params", ",", "network", "=", "network", ")", "\n", "\n", "# reset the environment", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "return", "env", ",", "network", ",", "flow_params", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.figure_eight_exp_setup": [[154, 280], ["logging.basicConfig", "dict", "flow.networks.figure_eight.FigureEightNetwork", "flow.envs.ring.accel.AccelEnv", "flow.envs.ring.accel.AccelEnv.reset", "flow.core.params.SumoParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "flow.core.params.SumoCarFollowingParams"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["", "def", "figure_eight_exp_setup", "(", "sim_params", "=", "None", ",", "\n", "vehicles", "=", "None", ",", "\n", "env_params", "=", "None", ",", "\n", "net_params", "=", "None", ",", "\n", "initial_config", "=", "None", ",", "\n", "traffic_lights", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Create an environment and network pair for figure eight test experiments.\n\n    Parameters\n    ----------\n    sim_params : flow.core.params.SumoParams\n        sumo-related configuration parameters, defaults to a time step of 0.1s\n        and no sumo-imposed failsafe on human or rl vehicles\n    vehicles : Vehicles type\n        vehicles to be placed in the network, default is one vehicles with an\n        IDM acceleration controller and ContinuousRouter routing controller.\n    env_params : flow.core.params.EnvParams\n        environment-specific parameters, defaults to a environment with no\n        failsafes, where other parameters do not matter for non-rl runs\n    net_params : flow.core.params.NetParams\n        network-specific configuration parameters, defaults to a figure eight\n        with a 30 m radius\n    initial_config : flow.core.params.InitialConfig\n        specifies starting positions of vehicles, defaults to evenly\n        distributed vehicles across the length of the network\n    traffic_lights: flow.core.params.TrafficLightParams\n        traffic light signals, defaults to no traffic lights in the network\n    \"\"\"", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "WARNING", ")", "\n", "\n", "if", "sim_params", "is", "None", ":", "\n", "# set default sim_params configuration", "\n", "        ", "sim_params", "=", "SumoParams", "(", "sim_step", "=", "0.1", ",", "render", "=", "False", ")", "\n", "\n", "", "if", "vehicles", "is", "None", ":", "\n", "# set default vehicles configuration", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"idm\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "\"aggressive\"", ",", "\n", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "\n", "", "if", "env_params", "is", "None", ":", "\n", "# set default env_params configuration", "\n", "        ", "additional_env_params", "=", "{", "\n", "\"target_velocity\"", ":", "8", ",", "\n", "\"max_accel\"", ":", "1", ",", "\n", "\"max_decel\"", ":", "1", ",", "\n", "\"sort_vehicles\"", ":", "False", "\n", "}", "\n", "env_params", "=", "EnvParams", "(", "additional_params", "=", "additional_env_params", ")", "\n", "\n", "", "if", "net_params", "is", "None", ":", "\n", "# set default net_params configuration", "\n", "        ", "additional_net_params", "=", "{", "\n", "\"radius_ring\"", ":", "30", ",", "\n", "\"lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "", "if", "initial_config", "is", "None", ":", "\n", "# set default initial_config configuration", "\n", "        ", "initial_config", "=", "InitialConfig", "(", "lanes_distribution", "=", "1", ")", "\n", "\n", "", "if", "traffic_lights", "is", "None", ":", "\n", "# set default to no traffic lights", "\n", "        ", "traffic_lights", "=", "TrafficLightParams", "(", ")", "\n", "\n", "", "flow_params", "=", "dict", "(", "\n", "# name of the experiment", "\n", "exp_tag", "=", "\"FigureEightTest\"", ",", "\n", "\n", "# name of the flow environment the experiment is running on", "\n", "env_name", "=", "AccelEnv", ",", "\n", "\n", "# name of the network class the experiment is running on", "\n", "network", "=", "FigureEightNetwork", ",", "\n", "\n", "# simulator that is used by the experiment", "\n", "simulator", "=", "'traci'", ",", "\n", "\n", "# sumo-related parameters (see flow.core.params.SumoParams)", "\n", "sim", "=", "sim_params", ",", "\n", "\n", "# environment related parameters (see flow.core.params.EnvParams)", "\n", "env", "=", "env_params", ",", "\n", "# network-related parameters (see flow.core.params.NetParams and the", "\n", "# network's documentation or ADDITIONAL_NET_PARAMS component)", "\n", "net", "=", "net_params", ",", "\n", "\n", "# vehicles to be placed in the network at the start of a rollout (see", "\n", "# flow.core.params.VehicleParams)", "\n", "veh", "=", "vehicles", ",", "\n", "\n", "# parameters specifying the positioning of vehicles upon initialization/", "\n", "# reset (see flow.core.params.InitialConfig)", "\n", "initial", "=", "initial_config", ",", "\n", "\n", "# traffic lights to be introduced to specific nodes (see", "\n", "# flow.core.params.TrafficLightParams)", "\n", "tls", "=", "traffic_lights", ",", "\n", ")", "\n", "\n", "# create the network", "\n", "network", "=", "FigureEightNetwork", "(", "\n", "name", "=", "\"FigureEightTest\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "net_params", ",", "\n", "initial_config", "=", "initial_config", ",", "\n", "traffic_lights", "=", "traffic_lights", ")", "\n", "\n", "# create the environment", "\n", "env", "=", "AccelEnv", "(", "\n", "env_params", "=", "env_params", ",", "sim_params", "=", "sim_params", ",", "network", "=", "network", ")", "\n", "\n", "# reset the environment", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "return", "env", ",", "network", ",", "flow_params", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.highway_exp_setup": [[282, 412], ["logging.basicConfig", "dict", "flow.networks.highway.HighwayNetwork", "flow.envs.ring.accel.AccelEnv", "flow.envs.ring.accel.AccelEnv.reset", "flow.core.params.SumoParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "flow.core.params.SumoCarFollowingParams"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["", "def", "highway_exp_setup", "(", "sim_params", "=", "None", ",", "\n", "vehicles", "=", "None", ",", "\n", "env_params", "=", "None", ",", "\n", "net_params", "=", "None", ",", "\n", "initial_config", "=", "None", ",", "\n", "traffic_lights", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Create an environment and network pair for highway test experiments.\n\n    Parameters\n    ----------\n    sim_params : flow.core.params.SumoParams\n        sumo-related configuration parameters, defaults to a time step of 0.1s\n        and no sumo-imposed failsafe on human or rl vehicles\n    vehicles : Vehicles type\n        vehicles to be placed in the network, default is one vehicles with an\n        IDM acceleration controller and ContinuousRouter routing controller.\n    env_params : flow.core.params.EnvParams\n        environment-specific parameters, defaults to a environment with no\n        failsafes, where other parameters do not matter for non-rl runs\n    net_params : flow.core.params.NetParams\n        network-specific configuration parameters, defaults to a single lane\n        highway of length 100 m\n    initial_config : flow.core.params.InitialConfig\n        specifies starting positions of vehicles, defaults to evenly\n        distributed vehicles across the length of the network\n    traffic_lights: flow.core.params.TrafficLightParams\n        traffic light signals, defaults to no traffic lights in the network\n    \"\"\"", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "WARNING", ")", "\n", "\n", "if", "sim_params", "is", "None", ":", "\n", "# set default sim_params configuration", "\n", "        ", "sim_params", "=", "SumoParams", "(", "sim_step", "=", "0.1", ",", "render", "=", "False", ")", "\n", "\n", "", "if", "vehicles", "is", "None", ":", "\n", "# set default vehicles configuration", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"idm\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "\"aggressive\"", ",", "\n", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "\n", "", "if", "env_params", "is", "None", ":", "\n", "# set default env_params configuration", "\n", "        ", "additional_env_params", "=", "{", "\n", "\"target_velocity\"", ":", "8", ",", "\n", "\"max_accel\"", ":", "1", ",", "\n", "\"max_decel\"", ":", "1", ",", "\n", "\"sort_vehicles\"", ":", "False", "\n", "}", "\n", "env_params", "=", "EnvParams", "(", "additional_params", "=", "additional_env_params", ")", "\n", "\n", "", "if", "net_params", "is", "None", ":", "\n", "# set default net_params configuration", "\n", "        ", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "100", ",", "\n", "\"lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", ",", "\n", "\"num_edges\"", ":", "1", ",", "\n", "\"use_ghost_edge\"", ":", "False", ",", "\n", "\"ghost_speed_limit\"", ":", "25", ",", "\n", "\"boundary_cell_length\"", ":", "300", ",", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "", "if", "initial_config", "is", "None", ":", "\n", "# set default initial_config configuration", "\n", "        ", "initial_config", "=", "InitialConfig", "(", ")", "\n", "\n", "", "if", "traffic_lights", "is", "None", ":", "\n", "# set default to no traffic lights", "\n", "        ", "traffic_lights", "=", "TrafficLightParams", "(", ")", "\n", "\n", "", "flow_params", "=", "dict", "(", "\n", "# name of the experiment", "\n", "exp_tag", "=", "\"RingRoadTest\"", ",", "\n", "\n", "# name of the flow environment the experiment is running on", "\n", "env_name", "=", "AccelEnv", ",", "\n", "\n", "# name of the network class the experiment is running on", "\n", "network", "=", "HighwayNetwork", ",", "\n", "\n", "# simulator that is used by the experiment", "\n", "simulator", "=", "'traci'", ",", "\n", "\n", "# sumo-related parameters (see flow.core.params.SumoParams)", "\n", "sim", "=", "sim_params", ",", "\n", "\n", "# environment related parameters (see flow.core.params.EnvParams)", "\n", "env", "=", "env_params", ",", "\n", "# network-related parameters (see flow.core.params.NetParams and the", "\n", "# network's documentation or ADDITIONAL_NET_PARAMS component)", "\n", "net", "=", "net_params", ",", "\n", "\n", "# vehicles to be placed in the network at the start of a rollout (see", "\n", "# flow.core.params.VehicleParams)", "\n", "veh", "=", "vehicles", ",", "\n", "\n", "# parameters specifying the positioning of vehicles upon initialization/", "\n", "# reset (see flow.core.params.InitialConfig)", "\n", "initial", "=", "initial_config", ",", "\n", "\n", "# traffic lights to be introduced to specific nodes (see", "\n", "# flow.core.params.TrafficLightParams)", "\n", "tls", "=", "traffic_lights", ",", "\n", ")", "\n", "\n", "# create the network", "\n", "network", "=", "HighwayNetwork", "(", "\n", "name", "=", "\"RingRoadTest\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "net_params", ",", "\n", "initial_config", "=", "initial_config", ",", "\n", "traffic_lights", "=", "traffic_lights", ")", "\n", "\n", "# create the environment", "\n", "env", "=", "AccelEnv", "(", "\n", "env_params", "=", "env_params", ",", "sim_params", "=", "sim_params", ",", "network", "=", "network", ")", "\n", "\n", "# reset the environment", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "return", "env", ",", "network", ",", "flow_params", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.traffic_light_grid_mxn_exp_setup": [[414, 572], ["logging.basicConfig", "dict", "flow.networks.traffic_light_grid.TrafficLightGridNetwork", "flow.envs.traffic_light_grid.TrafficLightGridTestEnv", "flow.envs.traffic_light_grid.TrafficLightGridTestEnv.reset", "flow.core.params.TrafficLightParams", "flow.core.params.SumoParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.core.params.InitialConfig", "int", "int", "int", "int", "flow.core.params.SumoCarFollowingParams"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["", "def", "traffic_light_grid_mxn_exp_setup", "(", "row_num", "=", "1", ",", "\n", "col_num", "=", "1", ",", "\n", "sim_params", "=", "None", ",", "\n", "vehicles", "=", "None", ",", "\n", "env_params", "=", "None", ",", "\n", "net_params", "=", "None", ",", "\n", "initial_config", "=", "None", ",", "\n", "tl_logic", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Create an environment and network pair for traffic light grid 1x1 test experiments.\n\n    Parameters\n    ----------\n    row_num: int, optional\n        number of horizontal rows of edges in the traffic light grid network\n    col_num: int, optional\n        number of vertical columns of edges in the traffic light grid network\n    sim_params : flow.core.params.SumoParams\n        sumo-related configuration parameters, defaults to a time step of 1s\n        and no sumo-imposed failsafe on human or rl vehicles\n    vehicles : Vehicles type\n        vehicles to be placed in the network, default is 5 vehicles per edge\n        for a total of 20 vehicles with an IDM acceleration controller and\n        GridRouter routing controller.\n    env_params : flow.core.params.EnvParams\n        environment-specific parameters, defaults to a environment with\n        failsafes, where other parameters do not matter for non-rl runs\n    net_params : flow.core.params.NetParams\n        network-specific configuration parameters, defaults to a 1x1 traffic\n        light grid with traffic lights on\n    initial_config : flow.core.params.InitialConfig\n        specifies starting positions of vehicles, defaults to evenly\n        distributed vehicles across the length of the network\n    tl_logic: flow.core.params.TrafficLightParams\n        specifies logic of any traffic lights added to the system\n    \"\"\"", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "WARNING", ")", "\n", "\n", "if", "tl_logic", "is", "None", ":", "\n", "        ", "tl_logic", "=", "TrafficLightParams", "(", "baseline", "=", "False", ")", "\n", "\n", "", "if", "sim_params", "is", "None", ":", "\n", "# set default sim_params configuration", "\n", "        ", "sim_params", "=", "SumoParams", "(", "sim_step", "=", "1", ",", "render", "=", "False", ")", "\n", "\n", "", "if", "vehicles", "is", "None", ":", "\n", "        ", "vehicles_per_edge", "=", "5", "\n", "num_edges", "=", "2", "*", "(", "row_num", "+", "col_num", ")", "\n", "total_vehicles", "=", "num_edges", "*", "vehicles_per_edge", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"idm\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "min_gap", "=", "2.5", ",", "tau", "=", "1.1", ",", "max_speed", "=", "30", ")", ",", "\n", "routing_controller", "=", "(", "GridRouter", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "total_vehicles", ")", "\n", "\n", "", "if", "env_params", "is", "None", ":", "\n", "# set default env_params configuration", "\n", "        ", "additional_env_params", "=", "{", "\n", "\"target_velocity\"", ":", "50", ",", "\n", "\"switch_time\"", ":", "3.0", ",", "\n", "\"tl_type\"", ":", "\"controlled\"", ",", "\n", "\"discrete\"", ":", "False", "\n", "}", "\n", "\n", "env_params", "=", "EnvParams", "(", "\n", "additional_params", "=", "additional_env_params", ",", "horizon", "=", "100", ")", "\n", "\n", "", "if", "net_params", "is", "None", ":", "\n", "# set default net_params configuration", "\n", "        ", "total_vehicles", "=", "vehicles", ".", "num_vehicles", "\n", "num_entries", "=", "2", "*", "row_num", "+", "2", "*", "col_num", "\n", "assert", "total_vehicles", "%", "num_entries", "==", "0", ",", "\"{} total vehicles should \"", "\"be divisible by {\"", "\"}\"", ".", "format", "(", "total_vehicles", ",", "\n", "num_entries", ")", "\n", "grid_array", "=", "{", "\n", "\"short_length\"", ":", "100", ",", "\n", "\"inner_length\"", ":", "300", ",", "\n", "\"long_length\"", ":", "3000", ",", "\n", "\"row_num\"", ":", "row_num", ",", "\n", "\"col_num\"", ":", "col_num", ",", "\n", "\"cars_left\"", ":", "int", "(", "total_vehicles", "/", "num_entries", ")", ",", "\n", "\"cars_right\"", ":", "int", "(", "total_vehicles", "/", "num_entries", ")", ",", "\n", "\"cars_top\"", ":", "int", "(", "total_vehicles", "/", "num_entries", ")", ",", "\n", "\"cars_bot\"", ":", "int", "(", "total_vehicles", "/", "num_entries", ")", "\n", "}", "\n", "\n", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "200", ",", "\n", "\"lanes\"", ":", "2", ",", "\n", "\"speed_limit\"", ":", "35", ",", "\n", "\"resolution\"", ":", "40", ",", "\n", "\"grid_array\"", ":", "grid_array", ",", "\n", "\"horizontal_lanes\"", ":", "1", ",", "\n", "\"vertical_lanes\"", ":", "1", "\n", "}", "\n", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "", "if", "initial_config", "is", "None", ":", "\n", "# set default initial_config configuration", "\n", "        ", "initial_config", "=", "InitialConfig", "(", "\n", "spacing", "=", "\"custom\"", ",", "additional_params", "=", "{", "\"enter_speed\"", ":", "30", "}", ")", "\n", "\n", "", "flow_params", "=", "dict", "(", "\n", "# name of the experiment", "\n", "exp_tag", "=", "\"Grid1x1Test\"", ",", "\n", "\n", "# name of the flow environment the experiment is running on", "\n", "env_name", "=", "TrafficLightGridTestEnv", ",", "\n", "\n", "# name of the network class the experiment is running on", "\n", "network", "=", "TrafficLightGridNetwork", ",", "\n", "\n", "# simulator that is used by the experiment", "\n", "simulator", "=", "'traci'", ",", "\n", "\n", "# sumo-related parameters (see flow.core.params.SumoParams)", "\n", "sim", "=", "sim_params", ",", "\n", "\n", "# environment related parameters (see flow.core.params.EnvParams)", "\n", "env", "=", "env_params", ",", "\n", "# network-related parameters (see flow.core.params.NetParams and the", "\n", "# network's documentation or ADDITIONAL_NET_PARAMS component)", "\n", "net", "=", "net_params", ",", "\n", "\n", "# vehicles to be placed in the network at the start of a rollout (see", "\n", "# flow.core.params.VehicleParams)", "\n", "veh", "=", "vehicles", ",", "\n", "\n", "# parameters specifying the positioning of vehicles upon initialization/", "\n", "# reset (see flow.core.params.InitialConfig)", "\n", "initial", "=", "initial_config", ",", "\n", "\n", "# traffic lights to be introduced to specific nodes (see", "\n", "# flow.core.params.TrafficLightParams)", "\n", "tls", "=", "tl_logic", "\n", ")", "\n", "\n", "# create the network", "\n", "network", "=", "TrafficLightGridNetwork", "(", "\n", "name", "=", "\"Grid1x1Test\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "net_params", ",", "\n", "initial_config", "=", "initial_config", ",", "\n", "traffic_lights", "=", "tl_logic", ")", "\n", "\n", "# create the environment", "\n", "env", "=", "TrafficLightGridTestEnv", "(", "\n", "env_params", "=", "env_params", ",", "sim_params", "=", "sim_params", ",", "network", "=", "network", ")", "\n", "\n", "# reset the environment", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "return", "env", ",", "network", ",", "flow_params", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.variable_lanes_exp_setup": [[574, 703], ["logging.basicConfig", "dict", "setup_scripts.VariableLanesNetwork", "flow.envs.ring.accel.AccelEnv", "flow.envs.ring.accel.AccelEnv.reset", "flow.core.params.SumoParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams", "flow.core.params.SumoCarFollowingParams"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["", "def", "variable_lanes_exp_setup", "(", "sim_params", "=", "None", ",", "\n", "vehicles", "=", "None", ",", "\n", "env_params", "=", "None", ",", "\n", "net_params", "=", "None", ",", "\n", "initial_config", "=", "None", ",", "\n", "traffic_lights", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Create an environment and network variable-lane ring road.\n\n    Each edge in this network can have a different number of lanes. Used for\n    test purposes.\n\n    Parameters\n    ----------\n    sim_params : flow.core.params.SumoParams\n        sumo-related configuration parameters, defaults to a time step of 0.1s\n        and no sumo-imposed failsafe on human or rl vehicles\n    vehicles : Vehicles type\n        vehicles to be placed in the network, default is one vehicles with an\n        IDM acceleration controller and ContinuousRouter routing controller.\n    env_params : flow.core.params.EnvParams\n        environment-specific parameters, defaults to a environment with no\n        failsafes, where other parameters do not matter for non-rl runs\n    net_params : flow.core.params.NetParams\n        network-specific configuration parameters, defaults to a figure eight\n        with a 30 m radius\n    initial_config : flow.core.params.InitialConfig\n        specifies starting positions of vehicles, defaults to evenly\n        distributed vehicles across the length of the network\n    traffic_lights: flow.core.params.TrafficLightParams\n        traffic light signals, defaults to no traffic lights in the network\n    \"\"\"", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "WARNING", ")", "\n", "\n", "if", "sim_params", "is", "None", ":", "\n", "# set default sim_params configuration", "\n", "        ", "sim_params", "=", "SumoParams", "(", "sim_step", "=", "0.1", ",", "render", "=", "False", ")", "\n", "\n", "", "if", "vehicles", "is", "None", ":", "\n", "# set default vehicles configuration", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"idm\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "\"aggressive\"", ",", "\n", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "\n", "", "if", "env_params", "is", "None", ":", "\n", "# set default env_params configuration", "\n", "        ", "additional_env_params", "=", "{", "\n", "\"target_velocity\"", ":", "8", ",", "\n", "\"max_accel\"", ":", "1", ",", "\n", "\"max_decel\"", ":", "1", ",", "\n", "\"sort_vehicles\"", ":", "False", "\n", "}", "\n", "env_params", "=", "EnvParams", "(", "additional_params", "=", "additional_env_params", ")", "\n", "\n", "", "if", "net_params", "is", "None", ":", "\n", "# set default net_params configuration", "\n", "        ", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "230", ",", "\n", "\"lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "", "if", "initial_config", "is", "None", ":", "\n", "# set default initial_config configuration", "\n", "        ", "initial_config", "=", "InitialConfig", "(", ")", "\n", "\n", "", "if", "traffic_lights", "is", "None", ":", "\n", "# set default to no traffic lights", "\n", "        ", "traffic_lights", "=", "TrafficLightParams", "(", ")", "\n", "\n", "", "flow_params", "=", "dict", "(", "\n", "# name of the experiment", "\n", "exp_tag", "=", "\"VariableLaneRingRoadTest\"", ",", "\n", "\n", "# name of the flow environment the experiment is running on", "\n", "env_name", "=", "AccelEnv", ",", "\n", "\n", "# name of the network class the experiment is running on", "\n", "network", "=", "VariableLanesNetwork", ",", "\n", "\n", "# simulator that is used by the experiment", "\n", "simulator", "=", "'traci'", ",", "\n", "\n", "# sumo-related parameters (see flow.core.params.SumoParams)", "\n", "sim", "=", "sim_params", ",", "\n", "\n", "# environment related parameters (see flow.core.params.EnvParams)", "\n", "env", "=", "env_params", ",", "\n", "# network-related parameters (see flow.core.params.NetParams and the", "\n", "# network's documentation or ADDITIONAL_NET_PARAMS component)", "\n", "net", "=", "net_params", ",", "\n", "\n", "# vehicles to be placed in the network at the start of a rollout (see", "\n", "# flow.core.params.VehicleParams)", "\n", "veh", "=", "vehicles", ",", "\n", "\n", "# parameters specifying the positioning of vehicles upon initialization/", "\n", "# reset (see flow.core.params.InitialConfig)", "\n", "initial", "=", "initial_config", ",", "\n", "\n", "# traffic lights to be introduced to specific nodes (see", "\n", "# flow.core.params.TrafficLightParams)", "\n", "tls", "=", "traffic_lights", ",", "\n", ")", "\n", "\n", "# create the network", "\n", "network", "=", "VariableLanesNetwork", "(", "\n", "name", "=", "\"VariableLaneRingRoadTest\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "net_params", ",", "\n", "initial_config", "=", "initial_config", ",", "\n", "traffic_lights", "=", "traffic_lights", ")", "\n", "\n", "# create the environment", "\n", "env", "=", "AccelEnv", "(", "\n", "env_params", "=", "env_params", ",", "sim_params", "=", "sim_params", ",", "network", "=", "network", ")", "\n", "\n", "# reset the environment", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "return", "env", ",", "network", ",", "flow_params", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message": [[21, 73], ["struct.Struct", "conn.send", "struct.Struct.pack", "conn.send", "struct.Struct", "struct.Struct.pack", "conn.send", "len", "conn.send", "struct.Struct.pack", "conn.send", "conn.recv", "conn.recv"], "function", ["None"], ["def", "send_message", "(", "conn", ",", "in_format", ",", "values", ")", ":", "\n", "    ", "\"\"\"Send a message to the client.\n\n    If the message is a string, it is sent in segments of length 256 (if the\n    string is longer than such) and concatenated on the client end.\n\n    Parameters\n    ----------\n    conn : socket.socket\n        socket for server connection\n    in_format : str\n        format of the input structure\n    values : tuple of Any\n        commands to be encoded and issued to the client\n    \"\"\"", "\n", "if", "in_format", "==", "'str'", ":", "\n", "        ", "packer", "=", "struct", ".", "Struct", "(", "format", "=", "'i'", ")", "\n", "values", "=", "values", "[", "0", "]", "\n", "\n", "# when the message is too large, send value in segments and inform the", "\n", "# client that additional information will be sent. The value will be", "\n", "# concatenated on the other end", "\n", "while", "len", "(", "values", ")", ">", "256", ":", "\n", "# send the next set of data", "\n", "            ", "conn", ".", "send", "(", "values", "[", ":", "256", "]", ")", "\n", "values", "=", "values", "[", "256", ":", "]", "\n", "\n", "# wait for a reply", "\n", "data", "=", "None", "\n", "while", "data", "is", "None", ":", "\n", "                ", "data", "=", "conn", ".", "recv", "(", "2048", ")", "\n", "\n", "# send a not-done signal", "\n", "", "packed_data", "=", "packer", ".", "pack", "(", "*", "(", "1", ",", ")", ")", "\n", "conn", ".", "send", "(", "packed_data", ")", "\n", "\n", "# send the remaining components of the message (which is of length less", "\n", "# than or equal to 256)", "\n", "", "conn", ".", "send", "(", "values", ")", "\n", "\n", "# wait for a reply", "\n", "data", "=", "None", "\n", "while", "data", "is", "None", ":", "\n", "            ", "data", "=", "conn", ".", "recv", "(", "2048", ")", "\n", "\n", "# send a done signal", "\n", "", "packed_data", "=", "packer", ".", "pack", "(", "*", "(", "0", ",", ")", ")", "\n", "conn", ".", "send", "(", "packed_data", ")", "\n", "", "else", ":", "\n", "        ", "packer", "=", "struct", ".", "Struct", "(", "format", "=", "in_format", ")", "\n", "packed_data", "=", "packer", ".", "pack", "(", "*", "values", ")", "\n", "conn", ".", "send", "(", "packed_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.retrieve_message": [[75, 97], ["struct.Struct", "conn.recv", "struct.Struct.unpack"], "function", ["None"], ["", "", "def", "retrieve_message", "(", "conn", ",", "out_format", ")", ":", "\n", "    ", "\"\"\"Retrieve a message from the client.\n\n    Parameters\n    ----------\n    conn : socket.socket\n        socket for server connection\n    out_format : str or None\n        format of the output structure\n\n    Returns\n    -------\n    Any\n        received message\n    \"\"\"", "\n", "unpacker", "=", "struct", ".", "Struct", "(", "format", "=", "out_format", ")", "\n", "try", ":", "\n", "        ", "data", "=", "conn", ".", "recv", "(", "unpacker", ".", "size", ")", "\n", "unpacked_data", "=", "unpacker", ".", "unpack", "(", "data", ")", "\n", "", "finally", ":", "\n", "        ", "pass", "\n", "", "return", "unpacked_data", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.threaded_client": [[99, 189], ["conn.send", "conn.recv", "int", "dummy_server.send_message", "dummy_server.send_message", "conn.recv", "len", "dummy_server.send_message", "dummy_server.send_message", "conn.recv", "len", "dummy_server.send_message", "dummy_server.retrieve_message", "dummy_server.send_message", "str", "dummy_server.send_message", "dummy_server.send_message", "str", "conn.recv", "dummy_server.send_message", "dummy_server.send_message", "dummy_server.send_message", "conn.recv", "len", "str"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.retrieve_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.dummy_server.send_message"], ["", "def", "threaded_client", "(", "conn", ")", ":", "\n", "    ", "\"\"\"Create a dummy threaded process.\n\n    For testing purposes.\n\n    Parameters\n    ----------\n    conn : socket.socket\n        socket for server connection\n    \"\"\"", "\n", "# send feedback that the connection is active", "\n", "conn", ".", "send", "(", "b'Ready.'", ")", "\n", "\n", "done", "=", "False", "\n", "while", "not", "done", ":", "\n", "# receive the next message", "\n", "        ", "data", "=", "conn", ".", "recv", "(", "256", ")", "\n", "\n", "if", "data", "is", "not", "None", ":", "\n", "# if the message is empty, search for the next message", "\n", "            ", "if", "data", "==", "''", ":", "\n", "                ", "continue", "\n", "\n", "# convert to integer", "\n", "", "data", "=", "int", "(", "data", ")", "\n", "\n", "if", "data", "==", "ac", ".", "VEH_GET_ENTERED_IDS", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "data", "=", "None", "\n", "while", "data", "is", "None", ":", "\n", "                    ", "data", "=", "conn", ".", "recv", "(", "256", ")", "\n", "", "global", "entered_vehicles", "\n", "if", "len", "(", "entered_vehicles", ")", "==", "0", ":", "\n", "                    ", "output", "=", "'-1'", "\n", "", "else", ":", "\n", "                    ", "output", "=", "':'", ".", "join", "(", "[", "str", "(", "e", ")", "for", "e", "in", "entered_vehicles", "]", ")", "\n", "", "send_message", "(", "conn", ",", "in_format", "=", "'str'", ",", "values", "=", "(", "output", ",", ")", ")", "\n", "entered_vehicles", "=", "[", "]", "\n", "\n", "", "elif", "data", "==", "ac", ".", "VEH_GET_EXITED_IDS", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "data", "=", "None", "\n", "while", "data", "is", "None", ":", "\n", "                    ", "data", "=", "conn", ".", "recv", "(", "256", ")", "\n", "", "global", "exited_vehicles", "\n", "if", "len", "(", "exited_vehicles", ")", "==", "0", ":", "\n", "                    ", "output", "=", "'-1'", "\n", "", "else", ":", "\n", "                    ", "output", "=", "':'", ".", "join", "(", "[", "str", "(", "e", ")", "for", "e", "in", "exited_vehicles", "]", ")", "\n", "", "send_message", "(", "conn", ",", "in_format", "=", "'str'", ",", "values", "=", "(", "output", ",", ")", ")", "\n", "exited_vehicles", "=", "[", "]", "\n", "\n", "", "elif", "data", "==", "ac", ".", "VEH_GET_STATIC", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "retrieve_message", "(", "conn", ",", "'i'", ")", "\n", "output", "=", "(", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "\n", "16", ",", "False", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ")", "\n", "send_message", "(", "conn", ",", "\n", "in_format", "=", "'i i i f f f f f f f f f f i i i ? '", "\n", "'f f f f f i i i i'", ",", "\n", "values", "=", "output", ")", "\n", "\n", "", "elif", "data", "==", "ac", ".", "VEH_GET_TRACKING", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "info_bitmap", "=", "None", "\n", "while", "info_bitmap", "is", "None", ":", "\n", "                    ", "info_bitmap", "=", "conn", ".", "recv", "(", "2048", ")", "\n", "", "output", "=", "(", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "14", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "\n", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ")", "\n", "send_message", "(", "conn", ",", "\n", "in_format", "=", "'f f f f f f f f f f f f f i i i i i i '", "\n", "'i i'", ",", "\n", "values", "=", "output", ")", "\n", "\n", "", "elif", "data", "==", "ac", ".", "TL_GET_IDS", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "0", ",", ")", ")", "\n", "data", "=", "None", "\n", "while", "data", "is", "None", ":", "\n", "                    ", "data", "=", "conn", ".", "recv", "(", "256", ")", "\n", "", "global", "tl_ids", "\n", "if", "len", "(", "tl_ids", ")", "==", "0", ":", "\n", "                    ", "output", "=", "'-1'", "\n", "", "else", ":", "\n", "                    ", "output", "=", "':'", ".", "join", "(", "[", "str", "(", "e", ")", "for", "e", "in", "tl_ids", "]", ")", "\n", "", "send_message", "(", "conn", ",", "in_format", "=", "'str'", ",", "values", "=", "(", "output", ",", ")", ")", "\n", "tl_ids", "=", "[", "]", "\n", "\n", "# in case the message is unknown, return -1001", "\n", "", "else", ":", "\n", "                ", "send_message", "(", "conn", ",", "in_format", "=", "'i'", ",", "values", "=", "(", "-", "1001", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestDiscreteActionValue.setUp": [[14, 22], ["pytest.fixture", "numpy.random.normal().astype", "pfrl.action_value.DiscreteActionValue", "torch.from_numpy", "numpy.random.normal"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "30", "\n", "self", ".", "action_size", "=", "3", "\n", "self", ".", "q_values", "=", "np", ".", "random", ".", "normal", "(", "\n", "size", "=", "(", "self", ".", "batch_size", ",", "self", ".", "action_size", ")", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "qout", "=", "action_value", ".", "DiscreteActionValue", "(", "torch", ".", "from_numpy", "(", "self", ".", "q_values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestDiscreteActionValue.test_max": [[23, 26], ["assertions.assertIsInstance", "numpy.testing.assert_almost_equal", "test_action_value.TestDiscreteActionValue.qout.max.numpy", "test_action_value.TestDiscreteActionValue.q_values.max"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max"], ["", "def", "test_max", "(", "self", ")", ":", "\n", "        ", "assertions", ".", "assertIsInstance", "(", "self", ".", "qout", ".", "max", ",", "torch", ".", "Tensor", ")", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "self", ".", "qout", ".", "max", ".", "numpy", "(", ")", ",", "self", ".", "q_values", ".", "max", "(", "axis", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestDiscreteActionValue.test_greedy_actions": [[27, 31], ["assertions.assertIsInstance", "numpy.testing.assert_equal", "test_action_value.TestDiscreteActionValue.qout.greedy_actions.numpy", "test_action_value.TestDiscreteActionValue.q_values.argmax"], "methods", ["None"], ["", "def", "test_greedy_actions", "(", "self", ")", ":", "\n", "        ", "assertions", ".", "assertIsInstance", "(", "self", ".", "qout", ".", "greedy_actions", ",", "torch", ".", "Tensor", ")", "\n", "np", ".", "testing", ".", "assert_equal", "(", "\n", "self", ".", "qout", ".", "greedy_actions", ".", "numpy", "(", ")", ",", "self", ".", "q_values", ".", "argmax", "(", "axis", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestDiscreteActionValue.test_evaluate_actions": [[33, 41], ["numpy.random.randint", "torch.from_numpy", "test_action_value.TestDiscreteActionValue.qout.evaluate_actions", "assertions.assertIsInstance", "range", "assertions.assertAlmostEqual", "test_action_value.TestDiscreteActionValue.numpy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions"], ["", "def", "test_evaluate_actions", "(", "self", ")", ":", "\n", "        ", "sample_actions", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "action_size", ",", "size", "=", "self", ".", "batch_size", ")", "\n", "sample_actions", "=", "torch", ".", "from_numpy", "(", "sample_actions", ")", "\n", "ret", "=", "self", ".", "qout", ".", "evaluate_actions", "(", "sample_actions", ")", "\n", "assertions", ".", "assertIsInstance", "(", "ret", ",", "torch", ".", "Tensor", ")", "\n", "for", "b", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "assertions", ".", "assertAlmostEqual", "(", "\n", "ret", ".", "numpy", "(", ")", "[", "b", "]", ",", "self", ".", "q_values", "[", "b", ",", "sample_actions", "[", "b", "]", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestDiscreteActionValue.test_compute_advantage": [[43, 59], ["numpy.random.randint", "test_action_value.TestDiscreteActionValue.q_values.argmax", "torch.from_numpy", "test_action_value.TestDiscreteActionValue.qout.compute_advantage", "assertions.assertIsInstance", "range", "assertions.assertAlmostEqual", "assertions.assertLess", "assertions.assertAlmostEqual", "test_action_value.TestDiscreteActionValue.numpy", "test_action_value.TestDiscreteActionValue.numpy", "test_action_value.TestDiscreteActionValue.numpy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.compute_advantage"], ["", "", "def", "test_compute_advantage", "(", "self", ")", ":", "\n", "        ", "sample_actions", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "action_size", ",", "size", "=", "self", ".", "batch_size", ")", "\n", "greedy_actions", "=", "self", ".", "q_values", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "sample_actions", "=", "torch", ".", "from_numpy", "(", "sample_actions", ")", "\n", "ret", "=", "self", ".", "qout", ".", "compute_advantage", "(", "sample_actions", ")", "\n", "assertions", ".", "assertIsInstance", "(", "ret", ",", "torch", ".", "Tensor", ")", "\n", "for", "b", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "if", "sample_actions", "[", "b", "]", "==", "greedy_actions", "[", "b", "]", ":", "\n", "                ", "assertions", ".", "assertAlmostEqual", "(", "ret", ".", "numpy", "(", ")", "[", "b", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "# An advantage to the optimal policy must be always negative", "\n", "                ", "assertions", ".", "assertLess", "(", "ret", ".", "numpy", "(", ")", "[", "b", "]", ",", "0", ")", "\n", "q", "=", "self", ".", "q_values", "[", "b", ",", "sample_actions", "[", "b", "]", "]", "\n", "v", "=", "self", ".", "q_values", "[", "b", ",", "greedy_actions", "[", "b", "]", "]", "\n", "adv", "=", "q", "-", "v", "\n", "assertions", ".", "assertAlmostEqual", "(", "ret", ".", "numpy", "(", ")", "[", "b", "]", ",", "adv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestDiscreteActionValue.test_params": [[60, 63], ["assertions.assertEqual", "assertions.assertEqual", "len", "id", "id"], "methods", ["None"], ["", "", "", "def", "test_params", "(", "self", ")", ":", "\n", "        ", "assertions", ".", "assertEqual", "(", "len", "(", "self", ".", "qout", ".", "params", ")", ",", "1", ")", "\n", "assertions", ".", "assertEqual", "(", "id", "(", "self", ".", "qout", ".", "params", "[", "0", "]", ")", ",", "id", "(", "self", ".", "qout", ".", "q_values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestDiscreteActionValue.test_getitem": [[64, 69], ["numpy.testing.assert_equal", "assertions.assertEqual", "assertions.assertIs", "sliced.q_values.numpy"], "methods", ["None"], ["", "def", "test_getitem", "(", "self", ")", ":", "\n", "        ", "sliced", "=", "self", ".", "qout", "[", ":", "10", "]", "\n", "np", ".", "testing", ".", "assert_equal", "(", "sliced", ".", "q_values", ".", "numpy", "(", ")", ",", "self", ".", "q_values", "[", ":", "10", "]", ")", "\n", "assertions", ".", "assertEqual", "(", "sliced", ".", "n_actions", ",", "self", ".", "action_size", ")", "\n", "assertions", ".", "assertIs", "(", "sliced", ".", "q_values_formatter", ",", "self", ".", "qout", ".", "q_values_formatter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestDistributionalDiscreteActionValue.setUp": [[72, 84], ["numpy.random.dirichlet().astype", "numpy.linspace", "pfrl.action_value.DistributionalDiscreteActionValue", "torch.as_tensor", "torch.as_tensor", "numpy.random.dirichlet", "numpy.ones"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "30", "\n", "self", ".", "action_size", "=", "3", "\n", "self", ".", "n_atoms", "=", "51", "\n", "self", ".", "atom_probs", "=", "np", ".", "random", ".", "dirichlet", "(", "\n", "alpha", "=", "np", ".", "ones", "(", "self", ".", "n_atoms", ")", ",", "size", "=", "(", "self", ".", "batch_size", ",", "self", ".", "action_size", ")", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "z_values", "=", "np", ".", "linspace", "(", "-", "10", ",", "10", ",", "num", "=", "self", ".", "n_atoms", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "qout", "=", "action_value", ".", "DistributionalDiscreteActionValue", "(", "\n", "torch", ".", "as_tensor", "(", "self", ".", "atom_probs", ")", ",", "torch", ".", "as_tensor", "(", "self", ".", "z_values", ")", "\n", ")", "\n", "self", ".", "q_values", "=", "(", "self", ".", "atom_probs", "*", "self", ".", "z_values", ")", ".", "sum", "(", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestDistributionalDiscreteActionValue.test_max": [[85, 89], ["test_action_value.TestDistributionalDiscreteActionValue.assertIsInstance", "numpy.testing.assert_almost_equal", "test_action_value.TestDistributionalDiscreteActionValue.qout.max.detach().cpu().numpy", "test_action_value.TestDistributionalDiscreteActionValue.q_values.max", "test_action_value.TestDistributionalDiscreteActionValue.qout.max.detach().cpu", "test_action_value.TestDistributionalDiscreteActionValue.qout.max.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max"], ["", "def", "test_max", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertIsInstance", "(", "self", ".", "qout", ".", "max", ",", "torch", ".", "Tensor", ")", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "\n", "self", ".", "qout", ".", "max", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "self", ".", "q_values", ".", "max", "(", "axis", "=", "1", ")", ",", "decimal", "=", "5", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestDistributionalDiscreteActionValue.test_max_as_distribution": [[91, 98], ["test_action_value.TestDistributionalDiscreteActionValue.assertIsInstance", "range", "numpy.testing.assert_almost_equal", "test_action_value.TestDistributionalDiscreteActionValue.qout.max_as_distribution.detach().cpu().numpy", "test_action_value.TestDistributionalDiscreteActionValue.qout.max_as_distribution.detach().cpu", "test_action_value.TestDistributionalDiscreteActionValue.qout.greedy_actions.detach().cpu().numpy", "test_action_value.TestDistributionalDiscreteActionValue.qout.max_as_distribution.detach", "test_action_value.TestDistributionalDiscreteActionValue.qout.greedy_actions.detach().cpu", "test_action_value.TestDistributionalDiscreteActionValue.qout.greedy_actions.detach"], "methods", ["None"], ["", "def", "test_max_as_distribution", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertIsInstance", "(", "self", ".", "qout", ".", "max_as_distribution", ",", "torch", ".", "Tensor", ")", "\n", "for", "b", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "np", ".", "testing", ".", "assert_almost_equal", "(", "\n", "self", ".", "qout", ".", "max_as_distribution", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "b", "]", ",", "\n", "self", ".", "atom_probs", "[", "b", ",", "self", ".", "qout", ".", "greedy_actions", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "b", "]", "]", ",", "\n", "decimal", "=", "5", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestDistributionalDiscreteActionValue.test_greedy_actions": [[100, 106], ["test_action_value.TestDistributionalDiscreteActionValue.assertIsInstance", "numpy.testing.assert_almost_equal", "test_action_value.TestDistributionalDiscreteActionValue.qout.greedy_actions.detach().cpu().numpy", "test_action_value.TestDistributionalDiscreteActionValue.q_values.argmax", "test_action_value.TestDistributionalDiscreteActionValue.qout.greedy_actions.detach().cpu", "test_action_value.TestDistributionalDiscreteActionValue.qout.greedy_actions.detach"], "methods", ["None"], ["", "", "def", "test_greedy_actions", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertIsInstance", "(", "self", ".", "qout", ".", "greedy_actions", ",", "torch", ".", "Tensor", ")", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "\n", "self", ".", "qout", ".", "greedy_actions", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "self", ".", "q_values", ".", "argmax", "(", "axis", "=", "1", ")", ",", "\n", "decimal", "=", "5", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestDistributionalDiscreteActionValue.test_evaluate_actions": [[108, 119], ["torch.as_tensor", "test_action_value.TestDistributionalDiscreteActionValue.qout.evaluate_actions", "test_action_value.TestDistributionalDiscreteActionValue.assertIsInstance", "range", "numpy.random.randint", "test_action_value.TestDistributionalDiscreteActionValue.assertAlmostEqual", "test_action_value.TestDistributionalDiscreteActionValue.detach().cpu().numpy", "test_action_value.TestDistributionalDiscreteActionValue.detach().cpu", "test_action_value.TestDistributionalDiscreteActionValue.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions"], ["", "def", "test_evaluate_actions", "(", "self", ")", ":", "\n", "        ", "sample_actions", "=", "torch", ".", "as_tensor", "(", "\n", "np", ".", "random", ".", "randint", "(", "self", ".", "action_size", ",", "size", "=", "self", ".", "batch_size", ")", "\n", ")", "\n", "ret", "=", "self", ".", "qout", ".", "evaluate_actions", "(", "sample_actions", ")", "\n", "self", ".", "assertIsInstance", "(", "ret", ",", "torch", ".", "Tensor", ")", "\n", "for", "b", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "self", ".", "assertAlmostEqual", "(", "\n", "ret", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "b", "]", ",", "\n", "self", ".", "q_values", "[", "b", ",", "sample_actions", "[", "b", "]", "]", ",", "\n", "places", "=", "5", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestDistributionalDiscreteActionValue.test_evaluate_actions_as_distribution": [[121, 132], ["torch.as_tensor", "test_action_value.TestDistributionalDiscreteActionValue.qout.evaluate_actions_as_distribution", "test_action_value.TestDistributionalDiscreteActionValue.assertIsInstance", "range", "numpy.random.randint", "numpy.testing.assert_almost_equal", "test_action_value.TestDistributionalDiscreteActionValue.detach().cpu().numpy", "test_action_value.TestDistributionalDiscreteActionValue.detach().cpu", "test_action_value.TestDistributionalDiscreteActionValue.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DistributionalDiscreteActionValue.evaluate_actions_as_distribution"], ["", "", "def", "test_evaluate_actions_as_distribution", "(", "self", ")", ":", "\n", "        ", "sample_actions", "=", "torch", ".", "as_tensor", "(", "\n", "np", ".", "random", ".", "randint", "(", "self", ".", "action_size", ",", "size", "=", "self", ".", "batch_size", ")", "\n", ")", "\n", "ret", "=", "self", ".", "qout", ".", "evaluate_actions_as_distribution", "(", "sample_actions", ")", "\n", "self", ".", "assertIsInstance", "(", "ret", ",", "torch", ".", "Tensor", ")", "\n", "for", "b", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "np", ".", "testing", ".", "assert_almost_equal", "(", "\n", "ret", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "b", "]", ",", "\n", "self", ".", "atom_probs", "[", "b", ",", "sample_actions", "[", "b", "]", "]", ",", "\n", "decimal", "=", "5", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestDistributionalDiscreteActionValue.test_compute_advantage": [[134, 151], ["torch.as_tensor", "test_action_value.TestDistributionalDiscreteActionValue.q_values.argmax", "test_action_value.TestDistributionalDiscreteActionValue.qout.compute_advantage", "test_action_value.TestDistributionalDiscreteActionValue.assertIsInstance", "range", "numpy.random.randint", "test_action_value.TestDistributionalDiscreteActionValue.assertAlmostEqual", "test_action_value.TestDistributionalDiscreteActionValue.assertLess", "test_action_value.TestDistributionalDiscreteActionValue.assertAlmostEqual", "test_action_value.TestDistributionalDiscreteActionValue.detach().cpu().numpy", "test_action_value.TestDistributionalDiscreteActionValue.detach().cpu().numpy", "test_action_value.TestDistributionalDiscreteActionValue.detach().cpu().numpy", "test_action_value.TestDistributionalDiscreteActionValue.detach().cpu", "test_action_value.TestDistributionalDiscreteActionValue.detach().cpu", "test_action_value.TestDistributionalDiscreteActionValue.detach().cpu", "test_action_value.TestDistributionalDiscreteActionValue.detach", "test_action_value.TestDistributionalDiscreteActionValue.detach", "test_action_value.TestDistributionalDiscreteActionValue.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.compute_advantage"], ["", "", "def", "test_compute_advantage", "(", "self", ")", ":", "\n", "        ", "sample_actions", "=", "torch", ".", "as_tensor", "(", "\n", "np", ".", "random", ".", "randint", "(", "self", ".", "action_size", ",", "size", "=", "self", ".", "batch_size", ")", "\n", ")", "\n", "greedy_actions", "=", "self", ".", "q_values", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "ret", "=", "self", ".", "qout", ".", "compute_advantage", "(", "sample_actions", ")", "\n", "self", ".", "assertIsInstance", "(", "ret", ",", "torch", ".", "Tensor", ")", "\n", "for", "b", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "if", "sample_actions", "[", "b", "]", "==", "greedy_actions", "[", "b", "]", ":", "\n", "                ", "self", ".", "assertAlmostEqual", "(", "ret", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "b", "]", ",", "0", ",", "places", "=", "5", ")", "\n", "", "else", ":", "\n", "# An advantage to the optimal policy must be always negative", "\n", "                ", "self", ".", "assertLess", "(", "ret", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "b", "]", ",", "0", ")", "\n", "q", "=", "self", ".", "q_values", "[", "b", ",", "sample_actions", "[", "b", "]", "]", "\n", "v", "=", "self", ".", "q_values", "[", "b", ",", "greedy_actions", "[", "b", "]", "]", "\n", "adv", "=", "q", "-", "v", "\n", "self", ".", "assertAlmostEqual", "(", "ret", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "b", "]", ",", "adv", ",", "places", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestDistributionalDiscreteActionValue.test_params": [[152, 155], ["test_action_value.TestDistributionalDiscreteActionValue.assertEqual", "test_action_value.TestDistributionalDiscreteActionValue.assertIs", "len"], "methods", ["None"], ["", "", "", "def", "test_params", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "qout", ".", "params", ")", ",", "1", ")", "\n", "self", ".", "assertIs", "(", "self", ".", "qout", ".", "params", "[", "0", "]", ",", "self", ".", "qout", ".", "q_dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestDistributionalDiscreteActionValue.test_getitem": [[156, 167], ["numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "test_action_value.TestDistributionalDiscreteActionValue.assertEqual", "test_action_value.TestDistributionalDiscreteActionValue.assertIs", "sliced.q_values.detach().cpu().numpy", "sliced.q_dist.detach().cpu().numpy", "sliced.q_values.detach().cpu", "sliced.q_dist.detach().cpu", "sliced.q_values.detach", "sliced.q_dist.detach"], "methods", ["None"], ["", "def", "test_getitem", "(", "self", ")", ":", "\n", "        ", "sliced", "=", "self", ".", "qout", "[", ":", "10", "]", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "\n", "sliced", ".", "q_values", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "self", ".", "q_values", "[", ":", "10", "]", ",", "decimal", "=", "5", "\n", ")", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "sliced", ".", "z_values", ",", "self", ".", "z_values", ",", "decimal", "=", "5", ")", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "\n", "sliced", ".", "q_dist", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "self", ".", "atom_probs", "[", ":", "10", "]", ",", "decimal", "=", "5", "\n", ")", "\n", "self", ".", "assertEqual", "(", "sliced", ".", "n_actions", ",", "self", ".", "action_size", ")", "\n", "self", ".", "assertIs", "(", "sliced", ".", "q_values_formatter", ",", "self", ".", "qout", ".", "q_values_formatter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestQuantileDiscreteActionValue.setUp": [[170, 182], ["torch.randn", "pfrl.action_value.QuantileDiscreteActionValue", "test_action_value.TestQuantileDiscreteActionValue.quantiles.mean"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "30", "\n", "self", ".", "action_size", "=", "3", "\n", "self", ".", "n_taus", "=", "5", "\n", "self", ".", "quantiles", "=", "torch", ".", "randn", "(", "\n", "self", ".", "batch_size", ",", "\n", "self", ".", "n_taus", ",", "\n", "self", ".", "action_size", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", "\n", "self", ".", "av", "=", "action_value", ".", "QuantileDiscreteActionValue", "(", "self", ".", "quantiles", ")", "\n", "self", ".", "q_values", "=", "self", ".", "quantiles", ".", "mean", "(", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestQuantileDiscreteActionValue.test_q_values": [[183, 186], ["test_action_value.TestQuantileDiscreteActionValue.assertIsInstance", "pfrl.testing.torch_assert_allclose"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose"], ["", "def", "test_q_values", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertIsInstance", "(", "self", ".", "av", ".", "q_values", ",", "torch", ".", "Tensor", ")", "\n", "torch_assert_allclose", "(", "self", ".", "av", ".", "q_values", ",", "self", ".", "q_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestQuantileDiscreteActionValue.test_evaluate_actions_as_quantiles": [[187, 193], ["torch.randint", "test_action_value.TestQuantileDiscreteActionValue.av.evaluate_actions_as_quantiles", "test_action_value.TestQuantileDiscreteActionValue.assertIsInstance", "range", "pfrl.testing.torch_assert_allclose"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.QuantileDiscreteActionValue.evaluate_actions_as_quantiles", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose"], ["", "def", "test_evaluate_actions_as_quantiles", "(", "self", ")", ":", "\n", "        ", "sample_actions", "=", "torch", ".", "randint", "(", "self", ".", "action_size", ",", "size", "=", "(", "self", ".", "batch_size", ",", ")", ")", "\n", "z", "=", "self", ".", "av", ".", "evaluate_actions_as_quantiles", "(", "sample_actions", ")", "\n", "self", ".", "assertIsInstance", "(", "z", ",", "torch", ".", "Tensor", ")", "\n", "for", "b", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "torch_assert_allclose", "(", "z", "[", "b", "]", ",", "self", ".", "quantiles", "[", "b", ",", ":", ",", "sample_actions", "[", "b", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestQuantileDiscreteActionValue.test_params": [[194, 197], ["test_action_value.TestQuantileDiscreteActionValue.assertEqual", "test_action_value.TestQuantileDiscreteActionValue.assertIs", "len"], "methods", ["None"], ["", "", "def", "test_params", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "av", ".", "params", ")", ",", "1", ")", "\n", "self", ".", "assertIs", "(", "self", ".", "av", ".", "params", "[", "0", "]", ",", "self", ".", "av", ".", "quantiles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestQuantileDiscreteActionValue.test_getitem": [[198, 204], ["pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "test_action_value.TestQuantileDiscreteActionValue.assertEqual", "test_action_value.TestQuantileDiscreteActionValue.assertIs"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose"], ["", "def", "test_getitem", "(", "self", ")", ":", "\n", "        ", "sliced", "=", "self", ".", "av", "[", ":", "10", "]", "\n", "torch_assert_allclose", "(", "sliced", ".", "q_values", ",", "self", ".", "q_values", "[", ":", "10", "]", ")", "\n", "torch_assert_allclose", "(", "sliced", ".", "quantiles", ",", "self", ".", "quantiles", "[", ":", "10", "]", ")", "\n", "self", ".", "assertEqual", "(", "sliced", ".", "n_actions", ",", "self", ".", "action_size", ")", "\n", "self", ".", "assertIs", "(", "sliced", ".", "q_values_formatter", ",", "self", ".", "av", ".", "q_values_formatter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestQuadraticActionValue.test_max_unbounded": [[207, 225], ["numpy.random.randn().astype", "numpy.broadcast_to", "numpy.random.randn().astype", "pfrl.action_value.QuadraticActionValue", "test_action_value.TestQuadraticActionValue.assertIsInstance", "v_out.detach().numpy.detach().numpy.detach().numpy", "numpy.testing.assert_almost_equal", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.random.randn", "numpy.eye", "numpy.random.randn", "v_out.detach().numpy.detach().numpy.detach"], "methods", ["None"], ["    ", "def", "test_max_unbounded", "(", "self", ")", ":", "\n", "        ", "n_batch", "=", "7", "\n", "ndim_action", "=", "3", "\n", "mu", "=", "np", ".", "random", ".", "randn", "(", "n_batch", ",", "ndim_action", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mat", "=", "np", ".", "broadcast_to", "(", "\n", "np", ".", "eye", "(", "ndim_action", ",", "dtype", "=", "np", ".", "float32", ")", "[", "None", "]", ",", "\n", "(", "n_batch", ",", "ndim_action", ",", "ndim_action", ")", ",", "\n", ")", "\n", "v", "=", "np", ".", "random", ".", "randn", "(", "n_batch", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "q_out", "=", "action_value", ".", "QuadraticActionValue", "(", "\n", "torch", ".", "tensor", "(", "mu", ")", ",", "torch", ".", "tensor", "(", "mat", ")", ",", "torch", ".", "tensor", "(", "v", ")", "\n", ")", "\n", "\n", "v_out", "=", "q_out", ".", "max", "\n", "self", ".", "assertIsInstance", "(", "v_out", ",", "torch", ".", "Tensor", ")", "\n", "v_out", "=", "v_out", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "v_out", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestQuadraticActionValue.test_max_bounded": [[226, 253], ["numpy.random.randn().astype", "numpy.broadcast_to", "numpy.random.randn().astype", "pfrl.action_value.QuadraticActionValue", "test_action_value.TestQuadraticActionValue.assertIsInstance", "v_out.detach().numpy.detach().numpy.detach().numpy", "numpy.all", "numpy.testing.assert_almost_equal", "numpy.testing.assert_array_less", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.all", "numpy.random.randn", "numpy.eye", "numpy.random.randn", "v_out.detach().numpy.detach().numpy.detach"], "methods", ["None"], ["", "def", "test_max_bounded", "(", "self", ")", ":", "\n", "        ", "n_batch", "=", "20", "\n", "ndim_action", "=", "3", "\n", "mu", "=", "np", ".", "random", ".", "randn", "(", "n_batch", ",", "ndim_action", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mat", "=", "np", ".", "broadcast_to", "(", "\n", "np", ".", "eye", "(", "ndim_action", ",", "dtype", "=", "np", ".", "float32", ")", "[", "None", "]", ",", "\n", "(", "n_batch", ",", "ndim_action", ",", "ndim_action", ")", ",", "\n", ")", "\n", "v", "=", "np", ".", "random", ".", "randn", "(", "n_batch", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "min_action", ",", "max_action", "=", "-", "1.3", ",", "1.3", "\n", "q_out", "=", "action_value", ".", "QuadraticActionValue", "(", "\n", "torch", ".", "tensor", "(", "mu", ")", ",", "torch", ".", "tensor", "(", "mat", ")", ",", "torch", ".", "tensor", "(", "v", ")", ",", "min_action", ",", "max_action", "\n", ")", "\n", "\n", "v_out", "=", "q_out", ".", "max", "\n", "self", ".", "assertIsInstance", "(", "v_out", ",", "torch", ".", "Tensor", ")", "\n", "v_out", "=", "v_out", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# If mu[i] is an valid action, v_out[i] should be v[i]", "\n", "mu_is_allowed", "=", "np", ".", "all", "(", "(", "min_action", "<", "mu", ")", "*", "(", "mu", "<", "max_action", ")", ",", "axis", "=", "1", ")", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "v_out", "[", "mu_is_allowed", "]", ",", "v", "[", "mu_is_allowed", "]", ")", "\n", "\n", "# Otherwise, v_out[i] should be less than v[i]", "\n", "mu_is_not_allowed", "=", "~", "np", ".", "all", "(", "\n", "(", "min_action", "-", "1e-2", "<", "mu", ")", "*", "(", "mu", "<", "max_action", "+", "1e-2", ")", ",", "axis", "=", "1", "\n", ")", "\n", "np", ".", "testing", ".", "assert_array_less", "(", "v_out", "[", "mu_is_not_allowed", "]", ",", "v", "[", "mu_is_not_allowed", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestQuadraticActionValue.test_getitem": [[254, 277], ["numpy.random.randn().astype", "numpy.broadcast_to", "numpy.random.randn().astype", "pfrl.action_value.QuadraticActionValue", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.random.randn", "numpy.eye", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose"], ["", "def", "test_getitem", "(", "self", ")", ":", "\n", "        ", "n_batch", "=", "7", "\n", "ndim_action", "=", "3", "\n", "mu", "=", "np", ".", "random", ".", "randn", "(", "n_batch", ",", "ndim_action", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mat", "=", "np", ".", "broadcast_to", "(", "\n", "np", ".", "eye", "(", "ndim_action", ",", "dtype", "=", "np", ".", "float32", ")", "[", "None", "]", ",", "\n", "(", "n_batch", ",", "ndim_action", ",", "ndim_action", ")", ",", "\n", ")", "\n", "v", "=", "np", ".", "random", ".", "randn", "(", "n_batch", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "min_action", ",", "max_action", "=", "-", "1", ",", "1", "\n", "qout", "=", "action_value", ".", "QuadraticActionValue", "(", "\n", "torch", ".", "tensor", "(", "mu", ")", ",", "\n", "torch", ".", "tensor", "(", "mat", ")", ",", "\n", "torch", ".", "tensor", "(", "v", ")", ",", "\n", "min_action", ",", "\n", "max_action", ",", "\n", ")", "\n", "sliced", "=", "qout", "[", ":", "3", "]", "\n", "torch_assert_allclose", "(", "sliced", ".", "mu", ",", "mu", "[", ":", "3", "]", ")", "\n", "torch_assert_allclose", "(", "sliced", ".", "mat", ",", "mat", "[", ":", "3", "]", ")", "\n", "torch_assert_allclose", "(", "sliced", ".", "v", ",", "v", "[", ":", "3", "]", ")", "\n", "torch_assert_allclose", "(", "sliced", ".", "min_action", "[", "0", "]", ",", "min_action", ")", "\n", "torch_assert_allclose", "(", "sliced", ".", "max_action", "[", "0", "]", ",", "max_action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestSingleActionValue.setUp": [[283, 307], ["pytest.fixture", "pfrl.action_value.SingleActionValue", "torch.sum", "torch.from_numpy", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "batch_size", ",", "action_size", ",", "has_maximizer", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "action_size", "=", "action_size", "\n", "self", ".", "has_maximizer", "=", "has_maximizer", "\n", "\n", "def", "evaluator", "(", "actions", ")", ":", "\n", "# negative square norm of actions", "\n", "            ", "return", "-", "torch", ".", "sum", "(", "actions", "**", "2", ",", "dim", "=", "1", ")", "\n", "\n", "", "self", ".", "evaluator", "=", "evaluator", "\n", "\n", "if", "self", ".", "has_maximizer", ":", "\n", "\n", "            ", "def", "maximizer", "(", ")", ":", "\n", "                ", "return", "torch", ".", "from_numpy", "(", "\n", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "action_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "maximizer", "=", "None", "\n", "", "self", ".", "maximizer", "=", "maximizer", "\n", "self", ".", "av", "=", "action_value", ".", "SingleActionValue", "(", "\n", "evaluator", "=", "evaluator", ",", "maximizer", "=", "maximizer", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestSingleActionValue.test_max": [[309, 315], ["assertions.assertIsInstance", "numpy.testing.assert_almost_equal", "test_action_value.TestSingleActionValue.av.max.numpy", "test_action_value.TestSingleActionValue.evaluator().numpy", "test_action_value.TestSingleActionValue.evaluator", "test_action_value.TestSingleActionValue.maximizer"], "methods", ["None"], ["", "def", "test_max", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "has_maximizer", ":", "\n", "            ", "return", "\n", "", "assertions", ".", "assertIsInstance", "(", "self", ".", "av", ".", "max", ",", "torch", ".", "Tensor", ")", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "\n", "self", ".", "av", ".", "max", ".", "numpy", "(", ")", ",", "self", ".", "evaluator", "(", "self", ".", "maximizer", "(", ")", ")", ".", "numpy", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestSingleActionValue.test_greedy_actions": [[317, 323], ["assertions.assertIsInstance", "numpy.testing.assert_equal", "test_action_value.TestSingleActionValue.av.greedy_actions.numpy", "test_action_value.TestSingleActionValue.maximizer().numpy", "test_action_value.TestSingleActionValue.maximizer"], "methods", ["None"], ["", "def", "test_greedy_actions", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "has_maximizer", ":", "\n", "            ", "return", "\n", "", "assertions", ".", "assertIsInstance", "(", "self", ".", "av", ".", "greedy_actions", ",", "torch", ".", "Tensor", ")", "\n", "np", ".", "testing", ".", "assert_equal", "(", "\n", "self", ".", "av", ".", "greedy_actions", ".", "numpy", "(", ")", ",", "self", ".", "maximizer", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestSingleActionValue.test_evaluate_actions": [[325, 333], ["numpy.random.randn().astype", "torch.from_numpy", "test_action_value.TestSingleActionValue.av.evaluate_actions", "assertions.assertIsInstance", "numpy.testing.assert_equal", "test_action_value.TestSingleActionValue.numpy", "test_action_value.TestSingleActionValue.evaluator().numpy", "numpy.random.randn", "test_action_value.TestSingleActionValue.evaluator"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions"], ["", "def", "test_evaluate_actions", "(", "self", ")", ":", "\n", "        ", "sample_actions", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "batch_size", ",", "self", ".", "action_size", ")", ".", "astype", "(", "\n", "np", ".", "float32", "\n", ")", "\n", "sample_actions", "=", "torch", ".", "from_numpy", "(", "sample_actions", ")", "\n", "ret", "=", "self", ".", "av", ".", "evaluate_actions", "(", "sample_actions", ")", "\n", "assertions", ".", "assertIsInstance", "(", "ret", ",", "torch", ".", "Tensor", ")", "\n", "np", ".", "testing", ".", "assert_equal", "(", "ret", ".", "numpy", "(", ")", ",", "self", ".", "evaluator", "(", "sample_actions", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestSingleActionValue.test_compute_advantage": [[334, 348], ["numpy.random.randn().astype", "torch.from_numpy", "test_action_value.TestSingleActionValue.av.compute_advantage", "assertions.assertIsInstance", "numpy.testing.assert_equal", "test_action_value.TestSingleActionValue.numpy", "numpy.random.randn", "test_action_value.TestSingleActionValue.evaluator().numpy", "test_action_value.TestSingleActionValue.evaluator().numpy", "test_action_value.TestSingleActionValue.evaluator", "test_action_value.TestSingleActionValue.evaluator", "test_action_value.TestSingleActionValue.maximizer"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.compute_advantage"], ["", "def", "test_compute_advantage", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "has_maximizer", ":", "\n", "            ", "return", "\n", "", "sample_actions", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "batch_size", ",", "self", ".", "action_size", ")", ".", "astype", "(", "\n", "np", ".", "float32", "\n", ")", "\n", "sample_actions", "=", "torch", ".", "from_numpy", "(", "sample_actions", ")", "\n", "ret", "=", "self", ".", "av", ".", "compute_advantage", "(", "sample_actions", ")", "\n", "assertions", ".", "assertIsInstance", "(", "ret", ",", "torch", ".", "Tensor", ")", "\n", "np", ".", "testing", ".", "assert_equal", "(", "\n", "ret", ".", "numpy", "(", ")", ",", "\n", "(", "\n", "self", ".", "evaluator", "(", "sample_actions", ")", ".", "numpy", "(", ")", "\n", "-", "self", ".", "evaluator", "(", "self", ".", "maximizer", "(", ")", ")", ".", "numpy", "(", ")", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestSingleActionValue.test_params": [[351, 354], ["assertions.assertEqual", "len"], "methods", ["None"], ["", "def", "test_params", "(", "self", ")", ":", "\n", "# no params", "\n", "        ", "assertions", ".", "assertEqual", "(", "len", "(", "self", ".", "av", ".", "params", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_action_value.TestSingleActionValue.test_getitem": [[355, 358], ["assertions.assertRaises"], "methods", ["None"], ["", "def", "test_getitem", "(", "self", ")", ":", "\n", "        ", "with", "assertions", ".", "assertRaises", "(", "NotImplementedError", ")", ":", "\n", "            ", "self", ".", "av", "[", ":", "1", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_testing.test_torch_assert_allclose": [[7, 11], ["pfrl.testing.torch_assert_allclose", "torch.zeros", "torch.ones"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose"], ["def", "test_torch_assert_allclose", "(", ")", ":", "\n", "    ", "x", "=", "[", "torch", ".", "zeros", "(", "2", ")", ",", "torch", ".", "ones", "(", "2", ")", "]", "\n", "y", "=", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "1", "]", "]", "\n", "torch_assert_allclose", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_testing.test_torch_assert_allclose_fail": [[13, 18], ["pytest.raises", "pfrl.testing.torch_assert_allclose", "torch.zeros", "torch.ones"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose"], ["", "def", "test_torch_assert_allclose_fail", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "x", "=", "[", "torch", ".", "zeros", "(", "2", ")", ",", "torch", ".", "ones", "(", "2", ")", "]", "\n", "y", "=", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "0", "]", "]", "\n", "torch_assert_allclose", "(", "x", ",", "y", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_agent.Parent.__init__": [[20, 23], ["test_agent.create_simple_link", "test_agent.Child"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_agent.create_simple_link"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "link", "=", "create_simple_link", "(", ")", "\n", "self", ".", "child", "=", "Child", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_agent.Child.__init__": [[29, 31], ["test_agent.create_simple_link"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_agent.create_simple_link"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "link", "=", "create_simple_link", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_agent.Parent2.__init__": [[37, 40], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "child_a", ",", "child_b", ")", ":", "\n", "        ", "self", ".", "child_a", "=", "child_a", "\n", "self", ".", "child_b", "=", "child_b", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_agent.TestAttributeSavingMixin.test_save_load": [[43, 61], ["test_agent.Parent", "tempfile.mkdtemp", "Parent.save", "test_agent.TestAttributeSavingMixin.assertTrue", "test_agent.TestAttributeSavingMixin.assertTrue", "test_agent.TestAttributeSavingMixin.assertTrue", "test_agent.TestAttributeSavingMixin.assertTrue", "test_agent.Parent", "test_agent.TestAttributeSavingMixin.assertEqual", "test_agent.TestAttributeSavingMixin.assertEqual", "Parent.load", "test_agent.TestAttributeSavingMixin.assertEqual", "test_agent.TestAttributeSavingMixin.assertEqual", "Parent.link.param.detach().numpy", "Parent.child.link.param.detach().numpy", "os.path.isdir", "os.path.isfile", "os.path.isdir", "os.path.isfile", "int", "int", "int", "int", "os.path.join", "os.path.join", "os.path.join", "Parent.link.param.detach().numpy", "Parent.child.link.param.detach().numpy", "Parent.link.param.detach().numpy", "Parent.child.link.param.detach().numpy", "Parent.link.param.detach", "Parent.child.link.param.detach", "Parent.link.param.detach", "Parent.child.link.param.detach", "Parent.link.param.detach", "Parent.child.link.param.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load"], ["    ", "def", "test_save_load", "(", "self", ")", ":", "\n", "        ", "parent", "=", "Parent", "(", ")", "\n", "parent", ".", "link", ".", "param", ".", "detach", "(", ")", ".", "numpy", "(", ")", "[", ":", "]", "=", "1", "\n", "parent", ".", "child", ".", "link", ".", "param", ".", "detach", "(", ")", ".", "numpy", "(", ")", "[", ":", "]", "=", "2", "\n", "# Save", "\n", "dirname", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "parent", ".", "save", "(", "dirname", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isdir", "(", "dirname", ")", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "\"link.pt\"", ")", ")", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "\"child\"", ")", ")", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "\"child\"", ",", "\"link.pt\"", ")", ")", ")", "\n", "# Load", "\n", "parent", "=", "Parent", "(", ")", "\n", "self", ".", "assertEqual", "(", "int", "(", "parent", ".", "link", ".", "param", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "int", "(", "parent", ".", "child", ".", "link", ".", "param", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "0", ")", "\n", "parent", ".", "load", "(", "dirname", ")", "\n", "self", ".", "assertEqual", "(", "int", "(", "parent", ".", "link", ".", "param", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "int", "(", "parent", ".", "child", ".", "link", ".", "param", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_agent.TestAttributeSavingMixin.test_save_load_2": [[62, 72], ["test_agent.Parent", "test_agent.Parent2", "tempfile.mkdtemp", "Parent2.save", "test_agent.Parent", "test_agent.Parent2", "Parent2.load"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load"], ["", "def", "test_save_load_2", "(", "self", ")", ":", "\n", "        ", "parent", "=", "Parent", "(", ")", "\n", "parent2", "=", "Parent2", "(", "parent", ".", "child", ",", "parent", ")", "\n", "# Save", "\n", "dirname", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "parent2", ".", "save", "(", "dirname", ")", "\n", "# Load", "\n", "parent", "=", "Parent", "(", ")", "\n", "parent2", "=", "Parent2", "(", "parent", ".", "child", ",", "parent", ")", "\n", "parent2", ".", "load", "(", "dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_agent.TestAttributeSavingMixin.test_loop1": [[73, 82], ["test_agent.Parent", "tempfile.mkdtemp", "test_agent.TestAttributeSavingMixin.assertRaises", "Parent.save"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save"], ["", "def", "test_loop1", "(", "self", ")", ":", "\n", "        ", "parent", "=", "Parent", "(", ")", "\n", "parent", ".", "child", "=", "parent", "\n", "dirname", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "# The assertion in PFRL should fail on save().", "\n", "# Otherwise it seems to raise OSError: [Errno 63] File name too long", "\n", "with", "self", ".", "assertRaises", "(", "AssertionError", ")", ":", "\n", "            ", "parent", ".", "save", "(", "dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_agent.TestAttributeSavingMixin.test_loop2": [[83, 94], ["test_agent.Parent", "test_agent.Parent", "tempfile.mkdtemp", "test_agent.TestAttributeSavingMixin.assertRaises", "Parent.save"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save"], ["", "", "def", "test_loop2", "(", "self", ")", ":", "\n", "        ", "parent1", "=", "Parent", "(", ")", "\n", "parent2", "=", "Parent", "(", ")", "\n", "parent1", ".", "child", "=", "parent2", "\n", "parent2", ".", "child", "=", "parent1", "\n", "dirname", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "# The assertion in PFRL should fail on save().", "\n", "# Otherwise it seems to raise OSError: [Errno 63] File name too long", "\n", "with", "self", ".", "assertRaises", "(", "AssertionError", ")", ":", "\n", "            ", "parent1", ".", "save", "(", "dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_agent.TestAttributeSavingMixin.test_with_data_parallel": [[95, 125], ["test_agent.Parent", "torch.nn.DataParallel", "tempfile.mkdtemp", "Parent.save", "test_agent.TestAttributeSavingMixin.assertTrue", "test_agent.TestAttributeSavingMixin.assertTrue", "test_agent.TestAttributeSavingMixin.assertTrue", "test_agent.TestAttributeSavingMixin.assertTrue", "test_agent.Parent", "test_agent.TestAttributeSavingMixin.assertEqual", "test_agent.TestAttributeSavingMixin.assertEqual", "Parent.load", "test_agent.TestAttributeSavingMixin.assertEqual", "test_agent.TestAttributeSavingMixin.assertEqual", "test_agent.Parent", "torch.nn.DataParallel", "test_agent.TestAttributeSavingMixin.assertEqual", "test_agent.TestAttributeSavingMixin.assertEqual", "Parent.load", "test_agent.TestAttributeSavingMixin.assertEqual", "test_agent.TestAttributeSavingMixin.assertEqual", "Parent.link.param.detach().numpy", "Parent.child.link.param.detach().numpy", "os.path.isdir", "os.path.isfile", "os.path.isdir", "os.path.isfile", "int", "int", "int", "int", "int", "int", "int", "int", "os.path.join", "os.path.join", "os.path.join", "Parent.link.param.detach().numpy", "Parent.child.link.param.detach().numpy", "Parent.link.param.detach().numpy", "Parent.child.link.param.detach().numpy", "Parent.link.module.param.detach().numpy", "Parent.child.link.param.detach().numpy", "Parent.link.module.param.detach().numpy", "Parent.child.link.param.detach().numpy", "Parent.link.param.detach", "Parent.child.link.param.detach", "Parent.link.param.detach", "Parent.child.link.param.detach", "Parent.link.param.detach", "Parent.child.link.param.detach", "Parent.link.module.param.detach", "Parent.child.link.param.detach", "Parent.link.module.param.detach", "Parent.child.link.param.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load"], ["", "", "def", "test_with_data_parallel", "(", "self", ")", ":", "\n", "        ", "parent", "=", "Parent", "(", ")", "\n", "parent", ".", "link", ".", "param", ".", "detach", "(", ")", ".", "numpy", "(", ")", "[", ":", "]", "=", "1", "\n", "parent", ".", "child", ".", "link", ".", "param", ".", "detach", "(", ")", ".", "numpy", "(", ")", "[", ":", "]", "=", "2", "\n", "parent", ".", "link", "=", "torch", ".", "nn", ".", "DataParallel", "(", "parent", ".", "link", ")", "\n", "\n", "# Save", "\n", "dirname", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "parent", ".", "save", "(", "dirname", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isdir", "(", "dirname", ")", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "\"link.pt\"", ")", ")", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "\"child\"", ")", ")", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "\"child\"", ",", "\"link.pt\"", ")", ")", ")", "\n", "\n", "# Load Parent without data parallel", "\n", "parent", "=", "Parent", "(", ")", "\n", "self", ".", "assertEqual", "(", "int", "(", "parent", ".", "link", ".", "param", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "int", "(", "parent", ".", "child", ".", "link", ".", "param", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "0", ")", "\n", "parent", ".", "load", "(", "dirname", ")", "\n", "self", ".", "assertEqual", "(", "int", "(", "parent", ".", "link", ".", "param", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "int", "(", "parent", ".", "child", ".", "link", ".", "param", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "2", ")", "\n", "\n", "# Load Parent with data parallel", "\n", "parent", "=", "Parent", "(", ")", "\n", "parent", ".", "link", "=", "torch", ".", "nn", ".", "DataParallel", "(", "parent", ".", "link", ")", "\n", "self", ".", "assertEqual", "(", "int", "(", "parent", ".", "link", ".", "module", ".", "param", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "int", "(", "parent", ".", "child", ".", "link", ".", "param", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "0", ")", "\n", "parent", ".", "load", "(", "dirname", ")", "\n", "self", ".", "assertEqual", "(", "int", "(", "parent", ".", "link", ".", "module", ".", "param", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "int", "(", "parent", ".", "child", ".", "link", ".", "param", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.test_agent.create_simple_link": [[10, 14], ["torch.nn.Module", "torch.nn.Parameter", "torch.zeros"], "function", ["None"], ["def", "create_simple_link", "(", ")", ":", "\n", "    ", "link", "=", "torch", ".", "nn", ".", "Module", "(", ")", "\n", "link", ".", "param", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "return", "link", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stress_tests.stress_test_start.start": [[11, 38], ["flow.core.params.SumoParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.EnvParams", "flow.networks.ring.ADDITIONAL_NET_PARAMS.copy", "flow.core.params.NetParams", "flow.core.params.InitialConfig", "flow.networks.ring.RingNetwork", "flow.envs.ring.accel.AccelEnv", "flow.envs.ring.accel.AccelEnv.close"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close"], ["@", "ray", ".", "remote", "\n", "def", "start", "(", ")", ":", "\n", "    ", "\"\"\"Start a environment object with ray.\"\"\"", "\n", "sim_params", "=", "SumoParams", "(", "sim_step", "=", "0.1", ",", "render", "=", "False", ")", "\n", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"idm\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "22", ")", "\n", "\n", "env_params", "=", "EnvParams", "(", "additional_params", "=", "ADDITIONAL_ENV_PARAMS", ")", "\n", "\n", "additional_net_params", "=", "ADDITIONAL_NET_PARAMS", ".", "copy", "(", ")", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "initial_config", "=", "InitialConfig", "(", "bunching", "=", "20", ")", "\n", "\n", "network", "=", "RingNetwork", "(", "\n", "name", "=", "\"ring\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "net_params", ",", "\n", "initial_config", "=", "initial_config", ")", "\n", "\n", "env", "=", "AccelEnv", "(", "env_params", ",", "sim_params", ",", "network", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_pyglet_renderer.TestPygletRenderer.setUp": [[11, 25], ["numpy.load", "os.path.dirname", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "[", ":", "-", "11", "]", "\n", "self", ".", "data", "=", "np", ".", "load", "(", "\n", "'{}/data/renderer_data/replay.npy'", ".", "format", "(", "path", ")", ",", "\n", "allow_pickle", "=", "True", "\n", ")", "\n", "# Default renderer parameters", "\n", "self", ".", "network", "=", "self", ".", "data", "[", "0", "]", "\n", "self", ".", "mode", "=", "\"drgb\"", "\n", "self", ".", "save_render", "=", "False", "\n", "self", ".", "sight_radius", "=", "25", "\n", "self", ".", "pxpm", "=", "3", "\n", "self", ".", "show_radius", "=", "True", "\n", "self", ".", "alpha", "=", "0.9", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_pyglet_renderer.TestPygletRenderer.tearDown": [[26, 28], ["test_pyglet_renderer.TestPygletRenderer.renderer.close"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "self", ".", "renderer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_pyglet_renderer.TestPygletRenderer.test_init": [[29, 48], ["flow.renderer.pyglet_renderer.PygletRenderer", "test_pyglet_renderer.TestPygletRenderer.assertEqual", "test_pyglet_renderer.TestPygletRenderer.assertEqual", "test_pyglet_renderer.TestPygletRenderer.assertEqual", "test_pyglet_renderer.TestPygletRenderer.assertEqual", "test_pyglet_renderer.TestPygletRenderer.assertEqual", "test_pyglet_renderer.TestPygletRenderer.assertEqual"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "# Initialize a pyglet renderer", "\n", "        ", "self", ".", "renderer", "=", "Renderer", "(", "\n", "self", ".", "network", ",", "\n", "mode", "=", "self", ".", "mode", ",", "\n", "save_render", "=", "self", ".", "save_render", ",", "\n", "sight_radius", "=", "self", ".", "sight_radius", ",", "\n", "pxpm", "=", "self", ".", "pxpm", ",", "\n", "show_radius", "=", "self", ".", "show_radius", ",", "\n", "alpha", "=", "self", ".", "alpha", "\n", ")", "\n", "\n", "# Ensure that the attributes match their correct values", "\n", "self", ".", "assertEqual", "(", "self", ".", "renderer", ".", "mode", ",", "self", ".", "mode", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "renderer", ".", "save_render", ",", "self", ".", "save_render", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "renderer", ".", "sight_radius", ",", "self", ".", "sight_radius", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "renderer", ".", "pxpm", ",", "self", ".", "pxpm", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "renderer", ".", "show_radius", ",", "self", ".", "show_radius", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "renderer", ".", "alpha", ",", "self", ".", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_pyglet_renderer.TestPygletRenderer.test_render_drgb": [[49, 71], ["flow.renderer.pyglet_renderer.PygletRenderer", "test_pyglet_renderer.TestPygletRenderer.renderer.render", "test_pyglet_renderer.TestPygletRenderer.assertEqual", "test_pyglet_renderer.TestPygletRenderer.assertEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render"], ["", "def", "test_render_drgb", "(", "self", ")", ":", "\n", "# Initialize a pyglet renderer", "\n", "        ", "self", ".", "renderer", "=", "Renderer", "(", "\n", "self", ".", "network", ",", "\n", "mode", "=", "self", ".", "mode", ",", "\n", "save_render", "=", "self", ".", "save_render", ",", "\n", "sight_radius", "=", "self", ".", "sight_radius", ",", "\n", "pxpm", "=", "self", ".", "pxpm", ",", "\n", "show_radius", "=", "self", ".", "show_radius", ",", "\n", "alpha", "=", "self", ".", "alpha", "\n", ")", "\n", "\n", "_human_orientations", ",", "_machine_orientations", ",", "_human_dynamics", ",", "_machine_dynamics", ",", "_human_logs", ",", "_machine_logs", "=", "self", ".", "data", "[", "100", "]", "\n", "frame", "=", "self", ".", "renderer", ".", "render", "(", "\n", "_human_orientations", ",", "_machine_orientations", ",", "\n", "_human_dynamics", ",", "_machine_dynamics", ",", "\n", "_human_logs", ",", "_machine_logs", "\n", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "renderer", ".", "mode", ",", "'drgb'", ")", "\n", "self", ".", "assertEqual", "(", "frame", ".", "shape", ",", "(", "378", ",", "378", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_pyglet_renderer.TestPygletRenderer.test_render_rgb": [[72, 95], ["flow.renderer.pyglet_renderer.PygletRenderer", "test_pyglet_renderer.TestPygletRenderer.renderer.render", "test_pyglet_renderer.TestPygletRenderer.assertEqual", "test_pyglet_renderer.TestPygletRenderer.assertEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render"], ["", "def", "test_render_rgb", "(", "self", ")", ":", "\n", "        ", "self", ".", "mode", "=", "'rgb'", "\n", "# Initialize a pyglet renderer", "\n", "self", ".", "renderer", "=", "Renderer", "(", "\n", "self", ".", "network", ",", "\n", "mode", "=", "self", ".", "mode", ",", "\n", "save_render", "=", "self", ".", "save_render", ",", "\n", "sight_radius", "=", "self", ".", "sight_radius", ",", "\n", "pxpm", "=", "self", ".", "pxpm", ",", "\n", "show_radius", "=", "self", ".", "show_radius", ",", "\n", "alpha", "=", "self", ".", "alpha", "\n", ")", "\n", "\n", "_human_orientations", ",", "_machine_orientations", ",", "_human_dynamics", ",", "_machine_dynamics", ",", "_human_logs", ",", "_machine_logs", "=", "self", ".", "data", "[", "100", "]", "\n", "frame", "=", "self", ".", "renderer", ".", "render", "(", "\n", "_human_orientations", ",", "_machine_orientations", ",", "\n", "_human_dynamics", ",", "_machine_dynamics", ",", "\n", "_human_logs", ",", "_machine_logs", "\n", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "renderer", ".", "mode", ",", "'rgb'", ")", "\n", "self", ".", "assertEqual", "(", "frame", ".", "shape", ",", "(", "378", ",", "378", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_pyglet_renderer.TestPygletRenderer.test_render_dgray": [[96, 119], ["flow.renderer.pyglet_renderer.PygletRenderer", "test_pyglet_renderer.TestPygletRenderer.renderer.render", "test_pyglet_renderer.TestPygletRenderer.assertEqual", "test_pyglet_renderer.TestPygletRenderer.assertEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render"], ["", "def", "test_render_dgray", "(", "self", ")", ":", "\n", "        ", "self", ".", "mode", "=", "'dgray'", "\n", "# Initialize a pyglet renderer", "\n", "self", ".", "renderer", "=", "Renderer", "(", "\n", "self", ".", "network", ",", "\n", "mode", "=", "self", ".", "mode", ",", "\n", "save_render", "=", "self", ".", "save_render", ",", "\n", "sight_radius", "=", "self", ".", "sight_radius", ",", "\n", "pxpm", "=", "self", ".", "pxpm", ",", "\n", "show_radius", "=", "self", ".", "show_radius", ",", "\n", "alpha", "=", "self", ".", "alpha", "\n", ")", "\n", "\n", "_human_orientations", ",", "_machine_orientations", ",", "_human_dynamics", ",", "_machine_dynamics", ",", "_human_logs", ",", "_machine_logs", "=", "self", ".", "data", "[", "100", "]", "\n", "frame", "=", "self", ".", "renderer", ".", "render", "(", "\n", "_human_orientations", ",", "_machine_orientations", ",", "\n", "_human_dynamics", ",", "_machine_dynamics", ",", "\n", "_human_logs", ",", "_machine_logs", "\n", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "renderer", ".", "mode", ",", "'dgray'", ")", "\n", "self", ".", "assertEqual", "(", "frame", ".", "shape", ",", "(", "378", ",", "378", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_pyglet_renderer.TestPygletRenderer.test_render_gray": [[120, 143], ["flow.renderer.pyglet_renderer.PygletRenderer", "test_pyglet_renderer.TestPygletRenderer.renderer.render", "test_pyglet_renderer.TestPygletRenderer.assertEqual", "test_pyglet_renderer.TestPygletRenderer.assertEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render"], ["", "def", "test_render_gray", "(", "self", ")", ":", "\n", "        ", "self", ".", "mode", "=", "'gray'", "\n", "# Initialize a pyglet renderer", "\n", "self", ".", "renderer", "=", "Renderer", "(", "\n", "self", ".", "network", ",", "\n", "mode", "=", "self", ".", "mode", ",", "\n", "save_render", "=", "self", ".", "save_render", ",", "\n", "sight_radius", "=", "self", ".", "sight_radius", ",", "\n", "pxpm", "=", "self", ".", "pxpm", ",", "\n", "show_radius", "=", "self", ".", "show_radius", ",", "\n", "alpha", "=", "self", ".", "alpha", "\n", ")", "\n", "\n", "_human_orientations", ",", "_machine_orientations", ",", "_human_dynamics", ",", "_machine_dynamics", ",", "_human_logs", ",", "_machine_logs", "=", "self", ".", "data", "[", "100", "]", "\n", "frame", "=", "self", ".", "renderer", ".", "render", "(", "\n", "_human_orientations", ",", "_machine_orientations", ",", "\n", "_human_dynamics", ",", "_machine_dynamics", ",", "\n", "_human_logs", ",", "_machine_logs", "\n", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "renderer", ".", "mode", ",", "'gray'", ")", "\n", "self", ".", "assertEqual", "(", "frame", ".", "shape", ",", "(", "378", ",", "378", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_pyglet_renderer.TestPygletRenderer.test_get_sight": [[144, 169], ["flow.renderer.pyglet_renderer.PygletRenderer", "test_pyglet_renderer.TestPygletRenderer.renderer.render", "test_pyglet_renderer.TestPygletRenderer.renderer.get_sight", "test_pyglet_renderer.TestPygletRenderer.assertEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.renderer.pyglet_renderer.PygletRenderer.get_sight"], ["", "def", "test_get_sight", "(", "self", ")", ":", "\n", "# Initialize a pyglet renderer", "\n", "        ", "self", ".", "renderer", "=", "Renderer", "(", "\n", "self", ".", "network", ",", "\n", "mode", "=", "self", ".", "mode", ",", "\n", "save_render", "=", "self", ".", "save_render", ",", "\n", "sight_radius", "=", "self", ".", "sight_radius", ",", "\n", "pxpm", "=", "self", ".", "pxpm", ",", "\n", "show_radius", "=", "self", ".", "show_radius", ",", "\n", "alpha", "=", "self", ".", "alpha", "\n", ")", "\n", "\n", "_human_orientations", ",", "_machine_orientations", ",", "_human_dynamics", ",", "_machine_dynamics", ",", "_human_logs", ",", "_machine_logs", "=", "self", ".", "data", "[", "101", "]", "\n", "\n", "self", ".", "renderer", ".", "render", "(", "\n", "_human_orientations", ",", "_machine_orientations", ",", "\n", "_human_dynamics", ",", "_machine_dynamics", ",", "\n", "_human_logs", ",", "_machine_logs", "\n", ")", "\n", "orientation", "=", "self", ".", "data", "[", "101", "]", "[", "0", "]", "[", "0", "]", "\n", "id", "=", "self", ".", "data", "[", "101", "]", "[", "4", "]", "[", "0", "]", "[", "-", "1", "]", "\n", "sight", "=", "self", ".", "renderer", ".", "get_sight", "(", "orientation", ",", "id", ")", "\n", "self", ".", "assertEqual", "(", "sight", ".", "shape", ",", "(", "150", ",", "150", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_pyglet_renderer.TestPygletRenderer.test_save_renderer": [[170, 198], ["flow.renderer.pyglet_renderer.PygletRenderer", "test_pyglet_renderer.TestPygletRenderer.renderer.render", "test_pyglet_renderer.TestPygletRenderer.renderer.close", "numpy.load", "test_pyglet_renderer.TestPygletRenderer.assertEqual", "test_pyglet_renderer.TestPygletRenderer.assertEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load"], ["", "def", "test_save_renderer", "(", "self", ")", ":", "\n", "        ", "self", ".", "save_render", "=", "True", "\n", "# Initialize a pyglet renderer", "\n", "self", ".", "renderer", "=", "Renderer", "(", "\n", "self", ".", "network", ",", "\n", "mode", "=", "self", ".", "mode", ",", "\n", "save_render", "=", "self", ".", "save_render", ",", "\n", "path", "=", "'/tmp'", ",", "\n", "sight_radius", "=", "self", ".", "sight_radius", ",", "\n", "pxpm", "=", "self", ".", "pxpm", ",", "\n", "show_radius", "=", "self", ".", "show_radius", ",", "\n", "alpha", "=", "self", ".", "alpha", "\n", ")", "\n", "_human_orientations", ",", "_machine_orientations", ",", "_human_dynamics", ",", "_machine_dynamics", ",", "_human_logs", ",", "_machine_logs", "=", "self", ".", "data", "[", "101", "]", "\n", "\n", "self", ".", "renderer", ".", "render", "(", "\n", "_human_orientations", ",", "_machine_orientations", ",", "\n", "_human_dynamics", ",", "_machine_dynamics", ",", "\n", "_human_logs", ",", "_machine_logs", "\n", ")", "\n", "\n", "save_path", "=", "self", ".", "renderer", ".", "close", "(", ")", "\n", "saved_data", "=", "np", ".", "load", "(", "save_path", ",", "allow_pickle", "=", "True", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "data", "[", "0", "]", ",", "saved_data", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "data", "[", "101", "]", ",", "saved_data", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_pyglet_renderer.TestPygletRenderer.test_close": [[199, 225], ["flow.renderer.pyglet_renderer.PygletRenderer", "test_pyglet_renderer.TestPygletRenderer.renderer.close", "test_pyglet_renderer.TestPygletRenderer.assertRaises"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close"], ["", "def", "test_close", "(", "self", ")", ":", "\n", "# Initialize a pyglet renderer", "\n", "        ", "self", ".", "renderer", "=", "Renderer", "(", "\n", "self", ".", "network", ",", "\n", "mode", "=", "self", ".", "mode", ",", "\n", "save_render", "=", "self", ".", "save_render", ",", "\n", "sight_radius", "=", "self", ".", "sight_radius", ",", "\n", "pxpm", "=", "self", ".", "pxpm", ",", "\n", "show_radius", "=", "self", ".", "show_radius", ",", "\n", "alpha", "=", "self", ".", "alpha", "\n", ")", "\n", "\n", "self", ".", "renderer", ".", "close", "(", ")", "\n", "\n", "_human_orientations", ",", "_machine_orientations", ",", "_human_dynamics", ",", "_machine_dynamics", ",", "_human_logs", ",", "_machine_logs", "=", "self", ".", "data", "[", "1", "]", "\n", "self", ".", "assertRaises", "(", "\n", "ctypes", ".", "ArgumentError", ",", "\n", "self", ".", "renderer", ".", "render", ",", "\n", "_human_orientations", ",", "\n", "_machine_orientations", ",", "\n", "_human_dynamics", ",", "\n", "_machine_dynamics", ",", "\n", "_human_logs", ",", "\n", "_machine_logs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.NoRouteNetwork.specify_routes": [[32, 34], ["None"], "methods", ["None"], ["def", "specify_routes", "(", "self", ",", "net_params", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestGetX.setUp": [[43, 46], ["tests.setup_scripts.figure_eight_exp_setup"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.figure_eight_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# create the environment and network classes for a figure eight", "\n", "        ", "self", ".", "env", ",", "_", ",", "_", "=", "figure_eight_exp_setup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestGetX.tearDown": [[47, 50], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# free data used by the class", "\n", "        ", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestGetX.test_getx": [[51, 61], ["test_scenario_base_class.TestGetX.assertAlmostEqual", "test_scenario_base_class.TestGetX.assertAlmostEqual", "test_scenario_base_class.TestGetX.env.k.network.get_x", "test_scenario_base_class.TestGetX.env.k.network.get_x"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_x", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_x"], ["", "def", "test_getx", "(", "self", ")", ":", "\n", "# test for an edge in the lanes", "\n", "        ", "edge_1", "=", "\"bottom\"", "\n", "pos_1", "=", "4.72", "\n", "self", ".", "assertAlmostEqual", "(", "self", ".", "env", ".", "k", ".", "network", ".", "get_x", "(", "edge_1", ",", "pos_1", ")", ",", "5", ")", "\n", "\n", "# test for an edge in the internal links", "\n", "edge_2", "=", "\":bottom\"", "\n", "pos_2", "=", "0.1", "\n", "self", ".", "assertAlmostEqual", "(", "self", ".", "env", ".", "k", ".", "network", ".", "get_x", "(", "edge_2", ",", "pos_2", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestGetX.test_error": [[62, 66], ["test_scenario_base_class.TestGetX.assertAlmostEqual", "test_scenario_base_class.TestGetX.env.k.network.get_x"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_x"], ["", "def", "test_error", "(", "self", ")", ":", "\n", "        ", "edge", "=", "''", "\n", "pos", "=", "4.72", "\n", "self", ".", "assertAlmostEqual", "(", "self", ".", "env", ".", "k", ".", "network", ".", "get_x", "(", "edge", ",", "pos", ")", ",", "-", "1001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestGetEdge.setUp": [[75, 78], ["tests.setup_scripts.figure_eight_exp_setup"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.figure_eight_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# create the environment and network classes for a figure eight", "\n", "        ", "self", ".", "env", ",", "_", ",", "_", "=", "figure_eight_exp_setup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestGetEdge.tearDown": [[79, 83], ["test_scenario_base_class.TestGetEdge.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# free data used by the class", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestGetEdge.test_get_edge": [[84, 94], ["test_scenario_base_class.TestGetEdge.assertTupleEqual", "test_scenario_base_class.TestGetEdge.assertTupleEqual", "test_scenario_base_class.TestGetEdge.env.k.network.get_edge", "test_scenario_base_class.TestGetEdge.env.k.network.get_edge"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge"], ["", "def", "test_get_edge", "(", "self", ")", ":", "\n", "# test for a position in the lanes", "\n", "        ", "x1", "=", "5", "\n", "self", ".", "assertTupleEqual", "(", "\n", "self", ".", "env", ".", "k", ".", "network", ".", "get_edge", "(", "x1", ")", ",", "(", "\"bottom\"", ",", "4.72", ")", ")", "\n", "\n", "# test for a position in the internal links", "\n", "x2", "=", "0.1", "\n", "self", ".", "assertTupleEqual", "(", "\n", "self", ".", "env", ".", "k", ".", "network", ".", "get_edge", "(", "x2", ")", ",", "(", "\":bottom\"", ",", "0.1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPos.setUp_gen_start_pos": [[104, 135], ["flow.core.params.InitialConfig", "flow.core.params.NetParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "flow.core.params.SumoCarFollowingParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp_gen_start_pos", "(", "self", ",", "initial_config", "=", "InitialConfig", "(", ")", ")", ":", "\n", "        ", "\"\"\"\n        Replace with any network you would like to test gen_even_start_pos on.\n        In ordering for all the tests to be meaningful, the network must\n        contain MORE THAN TWO LANES.\n        \"\"\"", "\n", "# create a multi-lane ring road network", "\n", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "230", ",", "\n", "\"lanes\"", ":", "4", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "# place 15 vehicles in the network (we need at least more than 1)", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "min_gap", "=", "0", "\n", ")", ",", "\n", "num_vehicles", "=", "15", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "\n", "net_params", "=", "net_params", ",", "\n", "initial_config", "=", "initial_config", ",", "\n", "vehicles", "=", "vehicles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPos.tearDown_gen_start_pos": [[136, 142], ["test_scenario_base_class.TestEvenStartPos.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown_gen_start_pos", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPos.test_base": [[143, 174], ["flow.core.params.InitialConfig", "test_scenario_base_class.TestEvenStartPos.setUp_gen_start_pos", "test_scenario_base_class.TestEvenStartPos.env.k.vehicle.get_ids", "numpy.array", "numpy.mod", "test_scenario_base_class.TestEvenStartPos.assertEqual", "test_scenario_base_class.TestEvenStartPos.assertEqual", "test_scenario_base_class.TestEvenStartPos.tearDown_gen_start_pos", "test_scenario_base_class.TestEvenStartPos.env.k.network.non_internal_length", "test_scenario_base_class.TestEvenStartPos.env.k.vehicle.get_x_by_id", "numpy.append", "numpy.unique", "numpy.around"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestRandomStartPos.setUp_gen_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPos.tearDown_gen_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.non_internal_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "test_base", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that get_even_start_pos function evenly distributed vehicles in a\n        network.\n        \"\"\"", "\n", "# set the initial_config parameters as default (even spacing, no extra", "\n", "# conditions), and reset", "\n", "initial_config", "=", "InitialConfig", "(", "lanes_distribution", "=", "1", ")", "\n", "\n", "# create the environment", "\n", "self", ".", "setUp_gen_start_pos", "(", "initial_config", ")", "\n", "\n", "# get the positions of all vehicles", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "veh_pos", "=", "np", ".", "array", "(", "[", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_x_by_id", "(", "veh_id", ")", "\n", "for", "veh_id", "in", "ids", "]", ")", "\n", "\n", "# difference in position between the nth vehicle and the vehicle ahead", "\n", "# of it", "\n", "nth_headway", "=", "np", ".", "mod", "(", "\n", "np", ".", "append", "(", "veh_pos", "[", "1", ":", "]", ",", "veh_pos", "[", "0", "]", ")", "-", "veh_pos", ",", "\n", "self", ".", "env", ".", "k", ".", "network", ".", "non_internal_length", "(", ")", ")", "\n", "\n", "# check that the position of the first vehicle is at 0", "\n", "self", ".", "assertEqual", "(", "veh_pos", "[", "0", "]", ",", "0", ")", "\n", "\n", "# if all element are equal, there should only be one unique value", "\n", "self", ".", "assertEqual", "(", "np", ".", "unique", "(", "np", ".", "around", "(", "nth_headway", ",", "2", ")", ")", ".", "size", ",", "1", ")", "\n", "\n", "# delete the created environment", "\n", "self", ".", "tearDown_gen_start_pos", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPos.test_x0": [[175, 207], ["flow.core.params.InitialConfig", "test_scenario_base_class.TestEvenStartPos.setUp_gen_start_pos", "test_scenario_base_class.TestEvenStartPos.env.k.vehicle.get_ids", "numpy.array", "numpy.mod", "test_scenario_base_class.TestEvenStartPos.assertEqual", "test_scenario_base_class.TestEvenStartPos.assertEqual", "test_scenario_base_class.TestEvenStartPos.tearDown_gen_start_pos", "test_scenario_base_class.TestEvenStartPos.env.k.network.non_internal_length", "test_scenario_base_class.TestEvenStartPos.env.k.vehicle.get_x_by_id", "numpy.append", "test_scenario_base_class.TestEvenStartPos.env.k.network.non_internal_length", "numpy.unique", "numpy.around"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestRandomStartPos.setUp_gen_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPos.tearDown_gen_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.non_internal_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.non_internal_length"], ["", "def", "test_x0", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that the vehicles are uniformly distributed and the initial\n        vehicle if at a given x0.\n        \"\"\"", "\n", "# set the initial_config parameters with an x0 value that is something", "\n", "# in between zero and the length of the network", "\n", "x0", "=", "10", "\n", "initial_config", "=", "InitialConfig", "(", "x0", "=", "x0", ",", "lanes_distribution", "=", "1", ")", "\n", "\n", "# create the environment", "\n", "self", ".", "setUp_gen_start_pos", "(", "initial_config", ")", "\n", "\n", "# get the positions of all vehicles", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "veh_pos", "=", "np", ".", "array", "(", "[", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_x_by_id", "(", "veh_id", ")", "\n", "for", "veh_id", "in", "ids", "]", ")", "\n", "\n", "# difference in position between the nth vehicle and the vehicle ahead", "\n", "# of it", "\n", "nth_headway", "=", "np", ".", "mod", "(", "\n", "np", ".", "append", "(", "veh_pos", "[", "1", ":", "]", ",", "veh_pos", "[", "0", "]", ")", "-", "veh_pos", ",", "\n", "self", ".", "env", ".", "k", ".", "network", ".", "non_internal_length", "(", ")", ")", "\n", "\n", "# check that the position of the first vehicle is at 0", "\n", "self", ".", "assertEqual", "(", "veh_pos", "[", "0", "]", ",", "x0", "%", "self", ".", "env", ".", "k", ".", "network", ".", "non_internal_length", "(", ")", ")", "\n", "\n", "# if all element are equal, there should only be one unique value", "\n", "self", ".", "assertEqual", "(", "np", ".", "unique", "(", "np", ".", "around", "(", "nth_headway", ",", "2", ")", ")", ".", "size", ",", "1", ")", "\n", "\n", "# delete the created environment", "\n", "self", ".", "tearDown_gen_start_pos", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPos.test_bunching": [[208, 239], ["flow.core.params.InitialConfig", "test_scenario_base_class.TestEvenStartPos.setUp_gen_start_pos", "test_scenario_base_class.TestEvenStartPos.env.k.vehicle.get_ids", "numpy.array", "numpy.mod", "test_scenario_base_class.TestEvenStartPos.assertEqual", "test_scenario_base_class.TestEvenStartPos.assertAlmostEqual", "test_scenario_base_class.TestEvenStartPos.tearDown_gen_start_pos", "test_scenario_base_class.TestEvenStartPos.env.k.network.non_internal_length", "test_scenario_base_class.TestEvenStartPos.env.k.vehicle.get_x_by_id", "numpy.append", "numpy.unique", "numpy.around"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestRandomStartPos.setUp_gen_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPos.tearDown_gen_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.non_internal_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "test_bunching", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that vehicles are uniformly distributed given a certain bunching\n        \"\"\"", "\n", "# set the initial_config parameters with a modest bunching term", "\n", "bunching", "=", "10", "\n", "initial_config", "=", "InitialConfig", "(", "bunching", "=", "bunching", ",", "lanes_distribution", "=", "1", ")", "\n", "\n", "# create the environment", "\n", "self", ".", "setUp_gen_start_pos", "(", "initial_config", ")", "\n", "\n", "# get the positions of all vehicles", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "veh_pos", "=", "np", ".", "array", "(", "[", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_x_by_id", "(", "veh_id", ")", "\n", "for", "veh_id", "in", "ids", "]", ")", "\n", "\n", "# difference in position between the nth vehicle and the vehicle ahead", "\n", "# of it", "\n", "nth_headway", "=", "np", ".", "mod", "(", "\n", "np", ".", "append", "(", "veh_pos", "[", "1", ":", "]", ",", "veh_pos", "[", "0", "]", ")", "-", "veh_pos", ",", "\n", "self", ".", "env", ".", "k", ".", "network", ".", "non_internal_length", "(", ")", ")", "\n", "\n", "# check that all vehicles except the last vehicle have the same spacing", "\n", "self", ".", "assertEqual", "(", "np", ".", "unique", "(", "np", ".", "around", "(", "nth_headway", "[", ":", "-", "1", "]", ",", "2", ")", ")", ".", "size", ",", "1", ")", "\n", "\n", "# check that the spacing of the last vehicle is just offset by the", "\n", "# bunching term", "\n", "self", ".", "assertAlmostEqual", "(", "nth_headway", "[", "-", "1", "]", "-", "nth_headway", "[", "-", "2", "]", ",", "bunching", ")", "\n", "\n", "# delete the created environment", "\n", "self", ".", "tearDown_gen_start_pos", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPos.test_bunching_too_small": [[240, 271], ["flow.core.params.InitialConfig", "test_scenario_base_class.TestEvenStartPos.setUp_gen_start_pos", "test_scenario_base_class.TestEvenStartPos.env.k.network.generate_starting_positions", "numpy.array", "numpy.mod", "test_scenario_base_class.TestEvenStartPos.assertEqual", "test_scenario_base_class.TestEvenStartPos.tearDown_gen_start_pos", "test_scenario_base_class.TestEvenStartPos.env.k.network.non_internal_length", "test_scenario_base_class.TestEvenStartPos.env.k.network.get_x", "numpy.append", "numpy.unique", "numpy.around"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestRandomStartPos.setUp_gen_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.generate_starting_positions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPos.tearDown_gen_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.non_internal_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_x", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "test_bunching_too_small", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that if bunching is negative, it is set to 0\n        \"\"\"", "\n", "# set the initial_config parameters with a negative bunching term", "\n", "bunching", "=", "-", "10", "\n", "initial_config", "=", "InitialConfig", "(", "bunching", "=", "bunching", ",", "lanes_distribution", "=", "1", ")", "\n", "\n", "# create the environment", "\n", "self", ".", "setUp_gen_start_pos", "(", "initial_config", ")", "\n", "\n", "startpos", ",", "_", "=", "self", ".", "env", ".", "k", ".", "network", ".", "generate_starting_positions", "(", "\n", "initial_config", "=", "initial_config", "\n", ")", "\n", "\n", "# get the positions of all vehicles", "\n", "veh_pos", "=", "np", ".", "array", "(", "[", "self", ".", "env", ".", "k", ".", "network", ".", "get_x", "(", "pos", "[", "0", "]", ",", "pos", "[", "1", "]", ")", "\n", "for", "pos", "in", "startpos", "]", ")", "\n", "\n", "# difference in position between the nth vehicle and the vehicle ahead", "\n", "# of it", "\n", "nth_headway", "=", "np", ".", "mod", "(", "\n", "np", ".", "append", "(", "veh_pos", "[", "1", ":", "]", ",", "veh_pos", "[", "0", "]", ")", "-", "veh_pos", ",", "\n", "self", ".", "env", ".", "k", ".", "network", ".", "non_internal_length", "(", ")", ")", "\n", "\n", "# check that all vehicles, including the last vehicle, have the same", "\n", "# spacing", "\n", "self", ".", "assertEqual", "(", "np", ".", "unique", "(", "np", ".", "around", "(", "nth_headway", ",", "2", ")", ")", ".", "size", ",", "1", ")", "\n", "\n", "# delete the created environment", "\n", "self", ".", "tearDown_gen_start_pos", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPos.test_lanes_distribution": [[272, 313], ["flow.core.params.InitialConfig", "test_scenario_base_class.TestEvenStartPos.setUp_gen_start_pos", "test_scenario_base_class.TestEvenStartPos.env.k.vehicle.get_ids", "range", "range", "range", "test_scenario_base_class.TestEvenStartPos.tearDown_gen_start_pos", "veh_pos.append", "numpy.mod", "test_scenario_base_class.TestEvenStartPos.assertEqual", "test_scenario_base_class.TestEvenStartPos.assertEqual", "test_scenario_base_class.TestEvenStartPos.env.k.network.non_internal_length", "len", "test_scenario_base_class.TestEvenStartPos.env.k.vehicle.get_x_by_id", "numpy.append", "numpy.unique", "numpy.around", "test_scenario_base_class.TestEvenStartPos.env.k.vehicle.get_lane"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestRandomStartPos.setUp_gen_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPos.tearDown_gen_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.non_internal_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane"], ["", "def", "test_lanes_distribution", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that if lanes_distribution is less than the total number of\n        lanes, the vehicles are uniformly distributed over the specified number\n        of lanes.\n        \"\"\"", "\n", "# set the initial_config parameters with a lanes distribution less than", "\n", "# the number of lanes in the network.", "\n", "lanes_distribution", "=", "2", "\n", "initial_config", "=", "InitialConfig", "(", "lanes_distribution", "=", "lanes_distribution", ")", "\n", "\n", "# create the environment", "\n", "self", ".", "setUp_gen_start_pos", "(", "initial_config", ")", "\n", "lanes", "=", "self", ".", "env", ".", "net_params", ".", "additional_params", "[", "'lanes'", "]", "\n", "\n", "# get the positions of all vehicles", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "veh_pos", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "lanes", ")", ":", "\n", "            ", "veh_pos", ".", "append", "(", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_x_by_id", "(", "veh_id", ")", "for", "veh_id", "in", "ids", "\n", "if", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_lane", "(", "veh_id", ")", "==", "i", "\n", "]", ")", "\n", "\n", "# check that the vehicles are uniformly distributed in the number of", "\n", "# requested lanes", "\n", "", "for", "i", "in", "range", "(", "lanes_distribution", ")", ":", "\n", "# difference in position between the nth vehicle and the vehicle", "\n", "# ahead of it", "\n", "            ", "nth_headway", "=", "np", ".", "mod", "(", "np", ".", "append", "(", "veh_pos", "[", "i", "]", "[", "1", ":", "]", ",", "veh_pos", "[", "i", "]", "[", "0", "]", ")", "-", "veh_pos", "[", "i", "]", ",", "\n", "self", ".", "env", ".", "k", ".", "network", ".", "non_internal_length", "(", ")", ")", "\n", "\n", "self", ".", "assertEqual", "(", "np", ".", "unique", "(", "np", ".", "around", "(", "nth_headway", "[", ":", "-", "1", "]", ",", "2", ")", ")", ".", "size", ",", "1", ")", "\n", "\n", "# check that there are no vehicles in the remaining lanes", "\n", "", "for", "i", "in", "range", "(", "lanes", "-", "lanes_distribution", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "len", "(", "veh_pos", "[", "i", "+", "lanes_distribution", "]", ")", ",", "0", ")", "\n", "\n", "# delete the created environment", "\n", "", "self", ".", "tearDown_gen_start_pos", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPos.test_lanes_distribution_too_small": [[314, 334], ["numpy.random.randint", "flow.core.params.InitialConfig", "test_scenario_base_class.TestEvenStartPos.setUp_gen_start_pos", "test_scenario_base_class.TestEvenStartPos.env.k.vehicle.get_ids", "test_scenario_base_class.TestEvenStartPos.assertEqual", "test_scenario_base_class.TestEvenStartPos.tearDown_gen_start_pos", "test_scenario_base_class.TestEvenStartPos.env.k.vehicle.get_lane", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestRandomStartPos.setUp_gen_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPos.tearDown_gen_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane"], ["", "def", "test_lanes_distribution_too_small", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that when lanes_distribution is less than 1, the number is set\n        to 1.\n        \"\"\"", "\n", "# set the initial_config parameters with a small or negative", "\n", "# lanes_distribution", "\n", "lanes_distribution", "=", "np", ".", "random", ".", "randint", "(", "-", "100", ",", "0", ")", "\n", "initial_config", "=", "InitialConfig", "(", "lanes_distribution", "=", "lanes_distribution", ")", "\n", "\n", "# create the environment", "\n", "self", ".", "setUp_gen_start_pos", "(", "initial_config", ")", "\n", "\n", "# check that only the first lane has vehicles", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "veh_lanes", "=", "[", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_lane", "(", "veh_id", ")", "for", "veh_id", "in", "ids", "]", "\n", "self", ".", "assertEqual", "(", "np", ".", "unique", "(", "veh_lanes", ")", ".", "size", ",", "1", ")", "\n", "\n", "# delete the created environment", "\n", "self", ".", "tearDown_gen_start_pos", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPos.test_lanes_distribution_too_large": [[335, 370], ["flow.core.params.InitialConfig", "test_scenario_base_class.TestEvenStartPos.setUp_gen_start_pos", "test_scenario_base_class.TestEvenStartPos.env.k.vehicle.get_ids", "range", "range", "test_scenario_base_class.TestEvenStartPos.tearDown_gen_start_pos", "veh_pos.append", "numpy.mod", "test_scenario_base_class.TestEvenStartPos.assertEqual", "test_scenario_base_class.TestEvenStartPos.env.k.network.non_internal_length", "test_scenario_base_class.TestEvenStartPos.env.k.vehicle.get_x_by_id", "numpy.append", "numpy.unique", "numpy.around", "test_scenario_base_class.TestEvenStartPos.env.k.vehicle.get_lane"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestRandomStartPos.setUp_gen_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPos.tearDown_gen_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.non_internal_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane"], ["", "def", "test_lanes_distribution_too_large", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that when lanes_distribution is greater than the number of lanes,\n        the vehicles are distributed over the maximum number of lanes instead.\n        \"\"\"", "\n", "# set the initial_config parameter with a very large lanes_distribution", "\n", "lanes_distribution", "=", "np", ".", "inf", "\n", "initial_config", "=", "InitialConfig", "(", "lanes_distribution", "=", "lanes_distribution", ")", "\n", "\n", "# create the environment", "\n", "self", ".", "setUp_gen_start_pos", "(", "initial_config", ")", "\n", "lanes", "=", "self", ".", "env", ".", "net_params", ".", "additional_params", "[", "'lanes'", "]", "\n", "\n", "# get the positions of all vehicles", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "veh_pos", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "lanes", ")", ":", "\n", "            ", "veh_pos", ".", "append", "(", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_x_by_id", "(", "veh_id", ")", "for", "veh_id", "in", "ids", "\n", "if", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_lane", "(", "veh_id", ")", "==", "i", "\n", "]", ")", "\n", "\n", "# check that the vehicles are uniformly distributed in the number of", "\n", "# requested lanes lanes", "\n", "", "for", "i", "in", "range", "(", "lanes", ")", ":", "\n", "# difference in position between the nth vehicle and the vehicle", "\n", "# ahead of it", "\n", "            ", "nth_headway", "=", "np", ".", "mod", "(", "np", ".", "append", "(", "veh_pos", "[", "i", "]", "[", "1", ":", "]", ",", "veh_pos", "[", "i", "]", "[", "0", "]", ")", "-", "veh_pos", "[", "i", "]", ",", "\n", "self", ".", "env", ".", "k", ".", "network", ".", "non_internal_length", "(", ")", ")", "\n", "\n", "self", ".", "assertEqual", "(", "np", ".", "unique", "(", "np", ".", "around", "(", "nth_headway", "[", ":", "-", "1", "]", ",", "2", ")", ")", ".", "size", ",", "1", ")", "\n", "\n", "# delete the created environment", "\n", "", "self", ".", "tearDown_gen_start_pos", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPos.test_edges_distribution": [[371, 388], ["flow.core.params.InitialConfig", "test_scenario_base_class.TestEvenStartPos.setUp_gen_start_pos", "test_scenario_base_class.TestEvenStartPos.env.k.vehicle.get_ids", "test_scenario_base_class.TestEvenStartPos.assertTrue", "test_scenario_base_class.TestEvenStartPos.env.k.vehicle.get_edge"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestRandomStartPos.setUp_gen_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge"], ["", "def", "test_edges_distribution", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that vehicles are only placed in edges listed in the\n        edges_distribution parameter, when edges are specified\n        \"\"\"", "\n", "# set the initial_config parameters with an edges_distribution term for", "\n", "# only a few edges", "\n", "edges", "=", "[", "\"top\"", ",", "\"bottom\"", "]", "\n", "initial_config", "=", "InitialConfig", "(", "edges_distribution", "=", "edges", ")", "\n", "\n", "# create the environment", "\n", "self", ".", "setUp_gen_start_pos", "(", "initial_config", ")", "\n", "\n", "# check that all vehicles are only placed in edges specified in the", "\n", "# edges_distribution term", "\n", "for", "veh_id", "in", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ":", "\n", "            ", "self", ".", "assertTrue", "(", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "veh_id", ")", "in", "edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPos.test_edges_distribution_dict": [[389, 409], ["flow.core.params.InitialConfig", "test_scenario_base_class.TestEvenStartPos.assertRaises", "flow.core.params.InitialConfig", "test_scenario_base_class.TestEvenStartPos.setUp_gen_start_pos", "test_scenario_base_class.TestEvenStartPos.assertEqual", "len", "test_scenario_base_class.TestEvenStartPos.env.k.vehicle.get_ids_by_edge"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestRandomStartPos.setUp_gen_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids_by_edge"], ["", "", "def", "test_edges_distribution_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that vehicles of the correct quantity are placed on each edge\n        when edges_distribution is a dict.\n        \"\"\"", "\n", "# test that when the number of vehicles don't match an AssertionError", "\n", "# is raised", "\n", "edges", "=", "{", "\"top\"", ":", "2", ",", "\"bottom\"", ":", "1", "}", "\n", "initial_config", "=", "InitialConfig", "(", "edges_distribution", "=", "edges", ")", "\n", "self", ".", "assertRaises", "(", "AssertionError", ",", "self", ".", "setUp_gen_start_pos", ",", "\n", "initial_config", "=", "initial_config", ")", "\n", "\n", "# verify that the correct number of vehicles are placed in each edge", "\n", "edges", "=", "{", "\"top\"", ":", "5", ",", "\"bottom\"", ":", "6", ",", "\"left\"", ":", "4", "}", "\n", "initial_config", "=", "InitialConfig", "(", "edges_distribution", "=", "edges", ")", "\n", "self", ".", "setUp_gen_start_pos", "(", "initial_config", ")", "\n", "\n", "for", "edge", "in", "edges", ":", "\n", "            ", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids_by_edge", "(", "edge", ")", ")", ",", "\n", "edges", "[", "edge", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPos.test_num_vehicles": [[410, 431], ["test_scenario_base_class.TestEvenStartPos.setUp_gen_start_pos", "test_scenario_base_class.TestEvenStartPos.env.k.network.generate_starting_positions", "test_scenario_base_class.TestEvenStartPos.assertEqual", "test_scenario_base_class.TestEvenStartPos.assertEqual", "test_scenario_base_class.TestEvenStartPos.env.k.network.generate_starting_positions", "test_scenario_base_class.TestEvenStartPos.assertEqual", "test_scenario_base_class.TestEvenStartPos.assertEqual", "len", "len", "len", "len", "flow.core.params.InitialConfig", "flow.core.params.InitialConfig"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestRandomStartPos.setUp_gen_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.generate_starting_positions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.base.BaseKernelNetwork.generate_starting_positions"], ["", "", "def", "test_num_vehicles", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that the number of starting positions generated is:\n        - the number of vehicles in the vehicles class is no \"num_vehicles\"\n          parameter is specified\n        - equal to \"num_vehicles\" if this value is specified\n        \"\"\"", "\n", "# create the environment", "\n", "self", ".", "setUp_gen_start_pos", "(", ")", "\n", "\n", "# check when \"num_vehicles\" is not specified", "\n", "pos", ",", "lanes", "=", "self", ".", "env", ".", "k", ".", "network", ".", "generate_starting_positions", "(", "\n", "initial_config", "=", "InitialConfig", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "pos", ")", ",", "self", ".", "env", ".", "k", ".", "vehicle", ".", "num_vehicles", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "lanes", ")", ",", "self", ".", "env", ".", "k", ".", "vehicle", ".", "num_vehicles", ")", "\n", "\n", "# check when \"num_vehicles\" is specified", "\n", "pos", ",", "lanes", "=", "self", ".", "env", ".", "k", ".", "network", ".", "generate_starting_positions", "(", "\n", "initial_config", "=", "InitialConfig", "(", ")", ",", "num_vehicles", "=", "10", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "pos", ")", ",", "10", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "lanes", ")", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPosInternalLinks.setUp": [[441, 458], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.InitialConfig", "tests.setup_scripts.figure_eight_exp_setup", "flow.core.params.SumoCarFollowingParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.figure_eight_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# place 15 vehicles in the network (we need at least more than 1)", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "min_gap", "=", "0", "\n", ")", ",", "\n", "num_vehicles", "=", "15", ")", "\n", "\n", "initial_config", "=", "InitialConfig", "(", "x0", "=", "150", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "figure_eight_exp_setup", "(", "\n", "initial_config", "=", "initial_config", ",", "vehicles", "=", "vehicles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPosInternalLinks.tearDown": [[459, 465], ["test_scenario_base_class.TestEvenStartPosInternalLinks.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPosInternalLinks.test_even_start_pos_internal": [[466, 498], ["test_scenario_base_class.TestEvenStartPosInternalLinks.env.k.vehicle.get_ids", "numpy.array", "numpy.mod", "test_scenario_base_class.TestEvenStartPosInternalLinks.env.k.network.non_internal_length", "test_scenario_base_class.TestEvenStartPosInternalLinks.assertEqual", "test_scenario_base_class.TestEvenStartPosInternalLinks.env.k.vehicle.get_x_by_id", "numpy.append", "range", "numpy.unique", "numpy.around", "len", "test_scenario_base_class.TestEvenStartPosInternalLinks.assertTrue", "numpy.mean", "test_scenario_base_class.TestEvenStartPosInternalLinks.env.k.vehicle.get_x_by_id", "numpy.any", "test_scenario_base_class.TestEvenStartPosInternalLinks.env.k.network.get_edge", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.non_internal_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge"], ["", "def", "test_even_start_pos_internal", "(", "self", ")", ":", "\n", "# get the positions of all vehicles", "\n", "        ", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "veh_pos", "=", "np", ".", "array", "(", "[", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_x_by_id", "(", "veh_id", ")", "\n", "for", "veh_id", "in", "ids", "]", ")", "\n", "\n", "# difference in position between the nth vehicle and the vehicle ahead", "\n", "# of it", "\n", "nth_headway", "=", "np", ".", "mod", "(", "\n", "np", ".", "append", "(", "veh_pos", "[", "1", ":", "]", ",", "veh_pos", "[", "0", "]", ")", "-", "veh_pos", ",", "\n", "self", ".", "env", ".", "k", ".", "network", ".", "non_internal_length", "(", ")", ")", "\n", "\n", "try", ":", "\n", "# if all element are equal, there should only be one unique value", "\n", "            ", "self", ".", "assertEqual", "(", "np", ".", "unique", "(", "np", ".", "around", "(", "nth_headway", ",", "2", ")", ")", ".", "size", ",", "1", ")", "\n", "", "except", "AssertionError", ":", "\n", "# check that, if not all vehicles are equally spaced, that the", "\n", "# vehicle that is not equally spaced is right after an internal", "\n", "# link, and at position 0", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "nth_headway", ")", "-", "1", ")", ":", "\n", "                ", "if", "nth_headway", "[", "i", "]", "-", "np", ".", "mean", "(", "nth_headway", ")", ">", "0.001", ":", "\n", "# if not, check that the last or first vehicle is right", "\n", "# after an internal link, on position 0", "\n", "                    ", "pos", "=", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_x_by_id", "(", "veh_id", ")", "\n", "for", "veh_id", "in", "[", "ids", "[", "i", "+", "1", "]", ",", "ids", "[", "i", "]", "]", "\n", "]", "\n", "rel_pos", "=", "[", "\n", "self", ".", "env", ".", "k", ".", "network", ".", "get_edge", "(", "pos_i", ")", "[", "1", "]", "for", "pos_i", "in", "pos", "\n", "]", "\n", "\n", "self", ".", "assertTrue", "(", "np", ".", "any", "(", "np", ".", "array", "(", "rel_pos", ")", "==", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestRandomStartPos.setUp_gen_start_pos": [[505, 534], ["flow.core.params.InitialConfig", "flow.core.params.NetParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "flow.core.params.SumoCarFollowingParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp_gen_start_pos", "(", "self", ",", "initial_config", "=", "InitialConfig", "(", ")", ")", ":", "\n", "# ensures that the random starting position method is being used", "\n", "        ", "initial_config", ".", "spacing", "=", "\"random\"", "\n", "\n", "# create a multi-lane ring road network", "\n", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "230", ",", "\n", "\"lanes\"", ":", "4", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "# place 5 vehicles in the network (we need at least more than 1)", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "min_gap", "=", "0", "\n", ")", ",", "\n", "num_vehicles", "=", "5", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "\n", "net_params", "=", "net_params", ",", "\n", "initial_config", "=", "initial_config", ",", "\n", "vehicles", "=", "vehicles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestRandomStartPos.tearDown": [[535, 541], ["test_scenario_base_class.TestRandomStartPos.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestRandomStartPos.test_lanes_distribution": [[542, 554], ["flow.core.params.InitialConfig", "test_scenario_base_class.TestRandomStartPos.setUp_gen_start_pos", "test_scenario_base_class.TestRandomStartPos.env.k.vehicle.get_ids", "test_scenario_base_class.TestRandomStartPos.assertLess", "test_scenario_base_class.TestRandomStartPos.env.k.vehicle.get_lane"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestRandomStartPos.setUp_gen_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane"], ["", "def", "test_lanes_distribution", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that vehicles are only placed in the requested number of lanes.\n        \"\"\"", "\n", "# create the environment", "\n", "initial_config", "=", "InitialConfig", "(", "spacing", "=", "\"random\"", ",", "lanes_distribution", "=", "2", ")", "\n", "self", ".", "setUp_gen_start_pos", "(", "initial_config", ")", "\n", "\n", "# verify that all vehicles are located in the number of allocated lanes", "\n", "for", "veh_id", "in", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ":", "\n", "            ", "self", ".", "assertLess", "(", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_lane", "(", "veh_id", ")", ",", "\n", "initial_config", ".", "lanes_distribution", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestRandomStartPos.test_edges_distribution": [[555, 572], ["flow.core.params.InitialConfig", "test_scenario_base_class.TestRandomStartPos.setUp_gen_start_pos", "test_scenario_base_class.TestRandomStartPos.env.k.vehicle.get_ids", "test_scenario_base_class.TestRandomStartPos.assertTrue", "test_scenario_base_class.TestRandomStartPos.env.k.vehicle.get_edge"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestRandomStartPos.setUp_gen_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge"], ["", "", "def", "test_edges_distribution", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that vehicles are only placed in the requested edges.\n        \"\"\"", "\n", "# set the initial_config parameters with an edges_distribution term for", "\n", "# only a few edges", "\n", "edges", "=", "[", "\"top\"", ",", "\"bottom\"", "]", "\n", "initial_config", "=", "InitialConfig", "(", "\n", "spacing", "=", "\"random\"", ",", "edges_distribution", "=", "edges", ")", "\n", "\n", "# create the environment", "\n", "self", ".", "setUp_gen_start_pos", "(", "initial_config", ")", "\n", "\n", "# check that all vehicles are only placed in edges specified in the", "\n", "# edges_distribution term", "\n", "for", "veh_id", "in", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ":", "\n", "            ", "self", ".", "assertTrue", "(", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "veh_id", ")", "in", "edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestRandomStartPos.test_edges_distribution_dict": [[573, 593], ["flow.core.params.InitialConfig", "test_scenario_base_class.TestRandomStartPos.assertRaises", "flow.core.params.InitialConfig", "test_scenario_base_class.TestRandomStartPos.setUp_gen_start_pos", "test_scenario_base_class.TestRandomStartPos.assertEqual", "len", "test_scenario_base_class.TestRandomStartPos.env.k.vehicle.get_ids_by_edge"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestRandomStartPos.setUp_gen_start_pos", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids_by_edge"], ["", "", "def", "test_edges_distribution_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that vehicles of the correct quantity are placed on each edge\n        when edges_distribution is a dict.\n        \"\"\"", "\n", "# test that when the number of vehicles don't match an AssertionError", "\n", "# is raised", "\n", "edges", "=", "{", "\"top\"", ":", "2", ",", "\"bottom\"", ":", "1", "}", "\n", "initial_config", "=", "InitialConfig", "(", "edges_distribution", "=", "edges", ")", "\n", "self", ".", "assertRaises", "(", "AssertionError", ",", "self", ".", "setUp_gen_start_pos", ",", "\n", "initial_config", "=", "initial_config", ")", "\n", "\n", "# verify that the correct number of vehicles are placed in each edge", "\n", "edges", "=", "{", "\"top\"", ":", "2", ",", "\"bottom\"", ":", "3", ",", "\"left\"", ":", "0", "}", "\n", "initial_config", "=", "InitialConfig", "(", "edges_distribution", "=", "edges", ")", "\n", "self", ".", "setUp_gen_start_pos", "(", "initial_config", ")", "\n", "\n", "for", "edge", "in", "edges", ":", "\n", "            ", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids_by_edge", "(", "edge", ")", ")", ",", "\n", "edges", "[", "edge", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPosVariableLanes.setUp": [[596, 614], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.InitialConfig", "tests.setup_scripts.variable_lanes_exp_setup", "flow.core.params.SumoCarFollowingParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.variable_lanes_exp_setup"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "# place 15 vehicles in the network (we need at least more than 1)", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "min_gap", "=", "0", "\n", ")", ",", "\n", "num_vehicles", "=", "50", ")", "\n", "\n", "initial_config", "=", "InitialConfig", "(", "lanes_distribution", "=", "5", ")", "\n", "\n", "# create the environment and network classes for a variable lanes per", "\n", "# edge ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "variable_lanes_exp_setup", "(", "\n", "vehicles", "=", "vehicles", ",", "initial_config", "=", "initial_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPosVariableLanes.tearDown": [[615, 621], ["test_scenario_base_class.TestEvenStartPosVariableLanes.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEvenStartPosVariableLanes.test_even_start_pos_coverage": [[622, 628], ["test_scenario_base_class.TestEvenStartPosVariableLanes.env.k.vehicle.get_lane", "test_scenario_base_class.TestEvenStartPosVariableLanes.assertFalse", "test_scenario_base_class.TestEvenStartPosVariableLanes.env.k.vehicle.get_ids", "any", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids"], ["", "def", "test_even_start_pos_coverage", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Ensure that the vehicles cover all possible lanes.\n        \"\"\"", "\n", "lanes", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_lane", "(", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ")", "\n", "self", ".", "assertFalse", "(", "any", "(", "i", "not", "in", "lanes", "for", "i", "in", "range", "(", "4", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestRandomStartPosVariableLanes.setUp": [[631, 649], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.InitialConfig", "tests.setup_scripts.variable_lanes_exp_setup", "flow.core.params.SumoCarFollowingParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.variable_lanes_exp_setup"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "# place 15 vehicles in the network (we need at least more than 1)", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "min_gap", "=", "0", "\n", ")", ",", "\n", "num_vehicles", "=", "50", ")", "\n", "\n", "initial_config", "=", "InitialConfig", "(", "spacing", "=", "\"random\"", ",", "lanes_distribution", "=", "5", ")", "\n", "\n", "# create the environment and network classes for a variable lanes per", "\n", "# edge ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "variable_lanes_exp_setup", "(", "\n", "vehicles", "=", "vehicles", ",", "initial_config", "=", "initial_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEdgeLength.test_edge_length_edges": [[656, 675], ["flow.core.params.NetParams", "tests.setup_scripts.ring_road_exp_setup", "test_scenario_base_class.TestEdgeLength.assertEqual", "test_scenario_base_class.TestEdgeLength.assertAlmostEqual", "env.k.network.edge_length", "env.k.network.edge_length"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length"], ["def", "test_edge_length_edges", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests the edge_length() method when called on edges\n        \"\"\"", "\n", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "1000", ",", "\n", "\"lanes\"", ":", "2", ",", "\n", "\"speed_limit\"", ":", "60", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "net_params", "=", "net_params", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "edge_length", "(", "\"top\"", ")", ",", "250", ")", "\n", "\n", "# test for errors as well", "\n", "self", ".", "assertAlmostEqual", "(", "env", ".", "k", ".", "network", ".", "edge_length", "(", "\"wrong_name\"", ")", ",", "-", "1001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestEdgeLength.test_edge_length_junctions": [[676, 694], ["flow.core.params.NetParams", "tests.setup_scripts.figure_eight_exp_setup", "test_scenario_base_class.TestEdgeLength.assertAlmostEqual", "test_scenario_base_class.TestEdgeLength.assertAlmostEqual", "env.k.network.edge_length", "env.k.network.edge_length"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.figure_eight_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.edge_length"], ["", "def", "test_edge_length_junctions", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests the speed_limit() method when called on junctions\n        \"\"\"", "\n", "additional_net_params", "=", "{", "\n", "\"radius_ring\"", ":", "30", ",", "\n", "\"lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "60", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "env", ",", "_", ",", "_", "=", "figure_eight_exp_setup", "(", "net_params", "=", "net_params", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "env", ".", "k", ".", "network", ".", "edge_length", "(", "\":center_0\"", ")", ",", "9.40", ")", "# FIXME: 6.2?", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "env", ".", "k", ".", "network", ".", "edge_length", "(", "\":center_1\"", ")", ",", "9.40", ")", "# FIXME: 6.2?", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestSpeedLimit.test_speed_limit_edges": [[701, 720], ["flow.core.params.NetParams", "tests.setup_scripts.ring_road_exp_setup", "test_scenario_base_class.TestSpeedLimit.assertAlmostEqual", "test_scenario_base_class.TestSpeedLimit.assertAlmostEqual", "env.k.network.speed_limit", "env.k.network.speed_limit"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.speed_limit", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.speed_limit"], ["def", "test_speed_limit_edges", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests the speed_limit() method when called on edges\n        \"\"\"", "\n", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "230", ",", "\n", "\"lanes\"", ":", "2", ",", "\n", "\"speed_limit\"", ":", "60", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "# create the environment and network classes for a figure eight", "\n", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "net_params", "=", "net_params", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "env", ".", "k", ".", "network", ".", "speed_limit", "(", "\"top\"", ")", ",", "60", ")", "\n", "\n", "# test for errors as well", "\n", "self", ".", "assertAlmostEqual", "(", "env", ".", "k", ".", "network", ".", "speed_limit", "(", "\"wrong_name\"", ")", ",", "-", "1001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestSpeedLimit.test_speed_limit_junctions": [[721, 739], ["flow.core.params.NetParams", "tests.setup_scripts.figure_eight_exp_setup", "test_scenario_base_class.TestSpeedLimit.assertAlmostEqual", "test_scenario_base_class.TestSpeedLimit.assertAlmostEqual", "env.k.network.speed_limit", "env.k.network.speed_limit"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.figure_eight_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.speed_limit", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.speed_limit"], ["", "def", "test_speed_limit_junctions", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests the speed_limit() method when called on junctions\n        \"\"\"", "\n", "additional_net_params", "=", "{", "\n", "\"radius_ring\"", ":", "30", ",", "\n", "\"lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "60", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "env", ",", "network", ",", "_", "=", "figure_eight_exp_setup", "(", "net_params", "=", "net_params", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "env", ".", "k", ".", "network", ".", "speed_limit", "(", "\"bottom\"", ")", ",", "60", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "env", ".", "k", ".", "network", ".", "speed_limit", "(", "\":top_0\"", ")", ",", "60", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestNumLanes.test_num_lanes_edges": [[746, 765], ["flow.core.params.NetParams", "tests.setup_scripts.ring_road_exp_setup", "test_scenario_base_class.TestNumLanes.assertEqual", "test_scenario_base_class.TestNumLanes.assertAlmostEqual", "env.k.network.num_lanes", "env.k.network.num_lanes"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes"], ["def", "test_num_lanes_edges", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests the num_lanes() method when called on edges\n        \"\"\"", "\n", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "230", ",", "\n", "\"lanes\"", ":", "2", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "# create the environment and network classes for a figure eight", "\n", "env", ",", "network", ",", "_", "=", "ring_road_exp_setup", "(", "net_params", "=", "net_params", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "num_lanes", "(", "\"top\"", ")", ",", "2", ")", "\n", "\n", "# test for errors as well", "\n", "self", ".", "assertAlmostEqual", "(", "env", ".", "k", ".", "network", ".", "num_lanes", "(", "\"wrong_name\"", ")", ",", "-", "1001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestNumLanes.test_num_lanes_junctions": [[766, 782], ["flow.core.params.NetParams", "tests.setup_scripts.figure_eight_exp_setup", "test_scenario_base_class.TestNumLanes.assertEqual", "test_scenario_base_class.TestNumLanes.assertEqual", "env.k.network.num_lanes", "env.k.network.num_lanes"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.figure_eight_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.num_lanes"], ["", "def", "test_num_lanes_junctions", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests the num_lanes() method when called on junctions\n        \"\"\"", "\n", "additional_net_params", "=", "{", "\n", "\"radius_ring\"", ":", "30", ",", "\n", "\"lanes\"", ":", "3", ",", "\n", "\"speed_limit\"", ":", "60", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "env", ",", "network", ",", "_", "=", "figure_eight_exp_setup", "(", "net_params", "=", "net_params", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "num_lanes", "(", "\"bottom\"", ")", ",", "3", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "num_lanes", "(", "\":top_0\"", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestGetEdgeList.setUp": [[790, 793], ["tests.setup_scripts.figure_eight_exp_setup"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.figure_eight_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# create the environment and network classes for a figure eight", "\n", "        ", "self", ".", "env", ",", "_", ",", "_", "=", "figure_eight_exp_setup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestGetEdgeList.tearDown": [[794, 798], ["test_scenario_base_class.TestGetEdgeList.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# free data used by the class", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestGetEdgeList.test_get_edge_list": [[799, 805], ["test_scenario_base_class.TestGetEdgeList.env.k.network.get_edge_list", "test_scenario_base_class.TestGetEdgeList.assertCountEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list"], ["", "def", "test_get_edge_list", "(", "self", ")", ":", "\n", "        ", "edge_list", "=", "self", ".", "env", ".", "k", ".", "network", ".", "get_edge_list", "(", ")", "\n", "expected_edge_list", "=", "[", "\n", "\"bottom\"", ",", "\"top\"", ",", "\"upper_ring\"", ",", "\"right\"", ",", "\"left\"", ",", "\"lower_ring\"", "]", "\n", "\n", "self", ".", "assertCountEqual", "(", "edge_list", ",", "expected_edge_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestGetJunctionList.setUp": [[813, 816], ["tests.setup_scripts.figure_eight_exp_setup"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.figure_eight_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# create the environment and network classes for a figure eight", "\n", "        ", "self", ".", "env", ",", "_", ",", "_", "=", "figure_eight_exp_setup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestGetJunctionList.tearDown": [[817, 821], ["test_scenario_base_class.TestGetJunctionList.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# free data used by the class", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestGetJunctionList.test_get_junction_list": [[822, 829], ["test_scenario_base_class.TestGetJunctionList.env.k.network.get_junction_list", "test_scenario_base_class.TestGetJunctionList.assertCountEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_junction_list"], ["", "def", "test_get_junction_list", "(", "self", ")", ":", "\n", "        ", "junction_list", "=", "self", ".", "env", ".", "k", ".", "network", ".", "get_junction_list", "(", ")", "\n", "expected_junction_list", "=", "[", "':right_0'", ",", "':left_0'", ",", "':bottom_0'", ",", "':top_0'", ",", "':center_1'", ",", "\n", "':center_0'", "]", "\n", "\n", "self", ".", "assertCountEqual", "(", "junction_list", ",", "expected_junction_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestNextPrevEdge.test_next_prev_edge_figure_eight": [[839, 852], ["tests.setup_scripts.figure_eight_exp_setup", "env.k.network.next_edge", "test_scenario_base_class.TestNextPrevEdge.assertCountEqual", "env.k.network.prev_edge", "test_scenario_base_class.TestNextPrevEdge.assertCountEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.figure_eight_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.next_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.prev_edge"], ["def", "test_next_prev_edge_figure_eight", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests the next_edge() and prev_edge() methods for the figure eight.\n        \"\"\"", "\n", "env", ",", "_", ",", "_", "=", "figure_eight_exp_setup", "(", ")", "\n", "\n", "next_edge", "=", "env", ".", "k", ".", "network", ".", "next_edge", "(", "\"bottom\"", ",", "0", ")", "\n", "expected_next_edge", "=", "[", "(", "':center_1'", ",", "0", ")", "]", "\n", "self", ".", "assertCountEqual", "(", "next_edge", ",", "expected_next_edge", ")", "\n", "\n", "prev_edge", "=", "env", ".", "k", ".", "network", ".", "prev_edge", "(", "\"bottom\"", ",", "0", ")", "\n", "expected_prev_edge", "=", "[", "(", "':bottom_0'", ",", "0", ")", "]", "\n", "self", ".", "assertCountEqual", "(", "prev_edge", ",", "expected_prev_edge", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestNextPrevEdge.test_next_prev_edge_ring_road": [[853, 866], ["tests.setup_scripts.ring_road_exp_setup", "env.k.network.next_edge", "test_scenario_base_class.TestNextPrevEdge.assertCountEqual", "env.k.network.prev_edge", "test_scenario_base_class.TestNextPrevEdge.assertCountEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.next_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.prev_edge"], ["", "def", "test_next_prev_edge_ring_road", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests the next_edge() and prev_edge() methods for the ring road.\n        \"\"\"", "\n", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", ")", "\n", "\n", "next_edge", "=", "env", ".", "k", ".", "network", ".", "next_edge", "(", "\"top\"", ",", "0", ")", "\n", "expected_next_edge", "=", "[", "(", "\":left_0\"", ",", "0", ")", "]", "\n", "self", ".", "assertCountEqual", "(", "next_edge", ",", "expected_next_edge", ")", "\n", "\n", "prev_edge", "=", "env", ".", "k", ".", "network", ".", "prev_edge", "(", "\"top\"", ",", "0", ")", "\n", "expected_prev_edge", "=", "[", "(", "\":top_0\"", ",", "0", ")", "]", "\n", "self", ".", "assertCountEqual", "(", "prev_edge", ",", "expected_prev_edge", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestNextPrevEdge.test_no_edge_ahead": [[867, 876], ["tests.setup_scripts.highway_exp_setup", "env.k.network.next_edge", "test_scenario_base_class.TestNextPrevEdge.assertTrue", "env.k.network.get_edge_list", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.highway_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.next_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list"], ["", "def", "test_no_edge_ahead", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that, when there are no edges in front, next_edge() returns an\n        empty list\n        \"\"\"", "\n", "env", ",", "_", ",", "_", "=", "highway_exp_setup", "(", ")", "\n", "next_edge", "=", "env", ".", "k", ".", "network", ".", "next_edge", "(", "\n", "env", ".", "k", ".", "network", ".", "get_edge_list", "(", ")", "[", "0", "]", ",", "0", ")", "\n", "self", ".", "assertTrue", "(", "len", "(", "next_edge", ")", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestNextPrevEdge.test_no_edge_behind": [[877, 886], ["tests.setup_scripts.highway_exp_setup", "env.k.network.prev_edge", "test_scenario_base_class.TestNextPrevEdge.assertTrue", "env.k.network.get_edge_list", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.highway_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.prev_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list"], ["", "def", "test_no_edge_behind", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that, when there are no edges behind, prev_edge() returns an\n        empty list\n        \"\"\"", "\n", "env", ",", "_", ",", "_", "=", "highway_exp_setup", "(", ")", "\n", "prev_edge", "=", "env", ".", "k", ".", "network", ".", "prev_edge", "(", "\n", "env", ".", "k", ".", "network", ".", "get_edge_list", "(", ")", "[", "0", "]", ",", "0", ")", "\n", "self", ".", "assertTrue", "(", "len", "(", "prev_edge", ")", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestDefaultRoutes.test_default_routes": [[890, 920], ["flow.core.params.EnvParams", "flow.core.params.SumoParams", "flow.core.params.InitialConfig", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.NetParams", "test_scenario_base_class.NoRouteNetwork", "flow.envs.TestEnv", "test_scenario_base_class.TestDefaultRoutes.assertDictEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["    ", "def", "test_default_routes", "(", "self", ")", ":", "\n", "        ", "env_params", "=", "EnvParams", "(", ")", "\n", "sim_params", "=", "SumoParams", "(", "render", "=", "False", ")", "\n", "initial_config", "=", "InitialConfig", "(", ")", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "'human'", ",", "num_vehicles", "=", "1", ")", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "ADDITIONAL_NET_PARAMS", ")", "\n", "\n", "# create the network", "\n", "network", "=", "NoRouteNetwork", "(", "\n", "name", "=", "'bay_bridge'", ",", "\n", "net_params", "=", "net_params", ",", "\n", "initial_config", "=", "initial_config", ",", "\n", "vehicles", "=", "vehicles", "\n", ")", "\n", "\n", "# create the environment", "\n", "env", "=", "TestEnv", "(", "\n", "env_params", "=", "env_params", ",", "\n", "sim_params", "=", "sim_params", ",", "\n", "network", "=", "network", "\n", ")", "\n", "\n", "# check the routes", "\n", "self", ".", "assertDictEqual", "(", "\n", "env", ".", "k", ".", "network", ".", "rts", ",", "\n", "{", "\"top\"", ":", "[", "(", "[", "\"top\"", "]", ",", "1", ")", "]", ",", "\n", "\"bottom\"", ":", "[", "(", "[", "\"bottom\"", "]", ",", "1", ")", "]", ",", "\n", "\"left\"", ":", "[", "(", "[", "\"left\"", "]", ",", "1", ")", "]", ",", "\n", "\"right\"", ":", "[", "(", "[", "\"right\"", "]", ",", "1", ")", "]", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestOpenStreetMap.test_sumo": [[927, 944], ["flow.core.params.SumoParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.networks.Network", "flow.envs.TestEnv", "test_scenario_base_class.TestOpenStreetMap.assertEqual", "len", "os.path.join", "flow.envs.TestEnv.k.network.get_edge_list"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list"], ["def", "test_sumo", "(", "self", ")", ":", "\n", "        ", "sim_params", "=", "SumoParams", "(", ")", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "veh_id", "=", "\"test\"", ")", "\n", "env_params", "=", "EnvParams", "(", ")", "\n", "net_params", "=", "NetParams", "(", "\n", "osm_path", "=", "os", ".", "path", ".", "join", "(", "PROJECT_PATH", ",", "'tests/data/euclid.osm'", ")", ")", "\n", "\n", "network", "=", "Network", "(", "\n", "name", "=", "\"UC-Berkeley-Northside\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "net_params", ")", "\n", "\n", "env", "=", "TestEnv", "(", "env_params", ",", "sim_params", ",", "network", ")", "\n", "\n", "# check that all the edges were generated", "\n", "self", ".", "assertEqual", "(", "len", "(", "env", ".", "k", ".", "network", ".", "get_edge_list", "(", ")", ")", ",", "29", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.TestNetworkTemplateGenerator.test_network_template": [[948, 1058], ["os.path.dirname", "flow.core.params.NetParams", "flow.networks.Network", "test_scenario_base_class.TestNetworkTemplateGenerator.assertDictEqual", "test_scenario_base_class.TestNetworkTemplateGenerator.assertDictEqual", "test_scenario_base_class.TestNetworkTemplateGenerator.assertDictEqual", "flow.core.params.NetParams", "flow.networks.Network", "test_scenario_base_class.TestNetworkTemplateGenerator.assertDictEqual", "os.path.realpath", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "test_network_template", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test generate data from network templates.\n\n        This methods tests that routes, vehicle types, and network parameters\n        generated from sumo network templates match the expected values. This\n        is done on a variant of the figure eight network.\n        \"\"\"", "\n", "# generate the network parameters for the figure eight net.xml,", "\n", "# rou.xml, and add.xml files", "\n", "dir_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "net_params", "=", "NetParams", "(", "\n", "template", "=", "{", "\n", "# network geometry features", "\n", "\"net\"", ":", "os", ".", "path", ".", "join", "(", "dir_path", ",", "\"test_files/fig8_test.net.xml\"", ")", ",", "\n", "# features associated with the routes vehicles take", "\n", "\"rou\"", ":", "os", ".", "path", ".", "join", "(", "dir_path", ",", "\"test_files/fig8_test.rou.xml\"", ")", ",", "\n", "# features associated with the properties of drivers", "\n", "\"vtype\"", ":", "os", ".", "path", ".", "join", "(", "dir_path", ",", "\"test_files/fig8_test.add.xml\"", ")", "\n", "}", ",", "\n", ")", "\n", "\n", "# create the network object from the network template files", "\n", "network", "=", "Network", "(", "\n", "name", "=", "\"template\"", ",", "\n", "net_params", "=", "net_params", ",", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", ")", "\n", "\n", "expected_routes", "=", "{", "\n", "'routetop'", ":", "\n", "[", "'top'", ",", "'upper_ring'", ",", "'right'", ",", "'left'", ",", "'lower_ring'", ",", "'bottom'", "]", ",", "\n", "'routeupper_ring'", ":", "\n", "[", "'upper_ring'", ",", "'right'", ",", "'left'", ",", "'lower_ring'", ",", "'bottom'", ",", "'top'", "]", ",", "\n", "'routeleft'", ":", "\n", "[", "'left'", ",", "'lower_ring'", ",", "'bottom'", ",", "'top'", ",", "'upper_ring'", ",", "'right'", "]", ",", "\n", "'routebottom'", ":", "\n", "[", "'bottom'", ",", "'top'", ",", "'upper_ring'", ",", "'right'", ",", "'left'", ",", "'lower_ring'", "]", ",", "\n", "'routeright'", ":", "\n", "[", "'right'", ",", "'left'", ",", "'lower_ring'", ",", "'bottom'", ",", "'top'", ",", "'upper_ring'", "]", ",", "\n", "'routelower_ring'", ":", "\n", "[", "'lower_ring'", ",", "'bottom'", ",", "'top'", ",", "'upper_ring'", ",", "'right'", ",", "'left'", "]", "\n", "}", "\n", "\n", "expected_cf_params", "=", "{", "\n", "'controller_params'", ":", "{", "\n", "'speedFactor'", ":", "1.0", ",", "\n", "'speedDev'", ":", "0.1", ",", "\n", "'carFollowModel'", ":", "'IDM'", ",", "\n", "'decel'", ":", "1.5", ",", "\n", "'impatience'", ":", "0.5", ",", "\n", "'maxSpeed'", ":", "30.0", ",", "\n", "'accel'", ":", "1.0", ",", "\n", "'sigma'", ":", "0.5", ",", "\n", "'tau'", ":", "1.0", ",", "\n", "'minGap'", ":", "0.0", "\n", "}", ",", "\n", "'speed_mode'", ":", "31", "\n", "}", "\n", "\n", "expected_lc_params", "=", "{", "\n", "'controller_params'", ":", "{", "\n", "'lcCooperative'", ":", "'1.0'", ",", "\n", "'lcKeepRight'", ":", "'1.0'", ",", "\n", "'laneChangeModel'", ":", "'LC2013'", ",", "\n", "'lcStrategic'", ":", "'1.0'", ",", "\n", "'lcSpeedGain'", ":", "'1.0'", "\n", "}", ",", "\n", "'lane_change_mode'", ":", "1621", "\n", "}", "\n", "\n", "# test the validity of the outputted results", "\n", "self", ".", "assertDictEqual", "(", "network", ".", "routes", ",", "expected_routes", ")", "\n", "self", ".", "assertDictEqual", "(", "network", ".", "vehicles", ".", "type_parameters", "[", "'idm'", "]", "\n", "[", "'car_following_params'", "]", ".", "__dict__", ",", "\n", "expected_cf_params", ")", "\n", "self", ".", "assertDictEqual", "(", "network", ".", "vehicles", ".", "type_parameters", "[", "'idm'", "]", "\n", "[", "'lane_change_params'", "]", ".", "__dict__", ",", "\n", "expected_lc_params", ")", "\n", "\n", "# test for the case of vehicles in rou.xml", "\n", "net_params", "=", "NetParams", "(", "\n", "template", "=", "{", "\n", "# network geometry features", "\n", "\"net\"", ":", "os", ".", "path", ".", "join", "(", "dir_path", ",", "\"test_files/fig8_test.net.xml\"", ")", ",", "\n", "# features associated with the routes vehicles take", "\n", "\"rou\"", ":", "os", ".", "path", ".", "join", "(", "dir_path", ",", "\"test_files/lust_test.rou.xml\"", ")", ",", "\n", "# features associated with the properties of drivers", "\n", "\"vtype\"", ":", "os", ".", "path", ".", "join", "(", "dir_path", ",", "\"test_files/fig8_test.add.xml\"", ")", "\n", "}", ",", "\n", ")", "\n", "\n", "network", "=", "Network", "(", "\n", "name", "=", "\"template\"", ",", "\n", "net_params", "=", "net_params", ",", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", ")", "\n", "\n", "expected_routes", "=", "{", "\n", "'h21652c2:1'", ":", "[", "\n", "'--31878#3'", ",", "'--31878#2'", ",", "'--31878#1'", ",", "'--31878#0'", ",", "'-30872#0'", ",", "\n", "'-30872#1'", ",", "'-30872#2'", ",", "'-30872#3'", ",", "'-32750#2'", ",", "'-32750#3'", ",", "\n", "'-32750#4'", ",", "'-32750#5'", ",", "'-32750#6'", ",", "'-32750#7'", ",", "'-32750#8'", ",", "\n", "'-32750#9'", ",", "'-32750#10'", ",", "'-32750#11'", ",", "'-32750#12'", ",", "\n", "'--30528#4'", ",", "'--30528#3'", ",", "'--30528#2'", ",", "'--30528#1'", ",", "\n", "'--30528#0'", ",", "'-31492#2'", ",", "'--32674#9'", ",", "'--32674#8'", ",", "\n", "'--32674#7'", ",", "'--32674#6'", ",", "'--32674#5'", ",", "'--32674#4'", "\n", "]", "\n", "}", "\n", "\n", "self", ".", "assertDictEqual", "(", "network", ".", "routes", ",", "expected_routes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestFailRLActionsEnv.action_space": [[32, 36], ["gym.spaces.box.Box"], "methods", ["None"], ["@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "return", "Box", "(", "low", "=", "0", ",", "high", "=", "0", ",", "shape", "=", "(", "0", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# pragma: no cover", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestFailRLActionsEnv.observation_space": [[37, 41], ["gym.spaces.box.Box"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "return", "Box", "(", "low", "=", "0", ",", "high", "=", "0", ",", "shape", "=", "(", "0", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# pragma: no cover", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestFailRLActionsEnv.get_state": [[42, 45], ["numpy.array"], "methods", ["None"], ["", "def", "get_state", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"See class definition.\"\"\"", "\n", "return", "np", ".", "array", "(", "[", "]", ")", "# pragma: no cover", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestFailGetStateEnv.action_space": [[50, 54], ["gym.spaces.box.Box"], "methods", ["None"], ["@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "return", "Box", "(", "low", "=", "0", ",", "high", "=", "0", ",", "shape", "=", "(", "0", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# pragma: no cover", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestFailGetStateEnv.observation_space": [[55, 59], ["gym.spaces.box.Box"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"See parent class.\"\"\"", "\n", "return", "Box", "(", "low", "=", "0", ",", "high", "=", "0", ",", "shape", "=", "(", "0", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# pragma: no cover", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestFailGetStateEnv._apply_rl_actions": [[60, 62], ["None"], "methods", ["None"], ["", "def", "_apply_rl_actions", "(", "self", ",", "rl_actions", ")", ":", "\n", "        ", "return", "# pragma: no cover", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestShuffle.setUp": [[70, 90], ["flow.core.params.EnvParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.InitialConfig", "tests.setup_scripts.ring_road_exp_setup"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# turn on vehicle arrangement shuffle", "\n", "        ", "env_params", "=", "EnvParams", "(", "\n", "additional_params", "=", "ADDITIONAL_ENV_PARAMS", ")", "\n", "\n", "# place 5 vehicles in the network (we need at least more than 1)", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "5", ")", "\n", "\n", "initial_config", "=", "InitialConfig", "(", "x0", "=", "5", ",", "shuffle", "=", "True", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "\n", "env_params", "=", "env_params", ",", "\n", "initial_config", "=", "initial_config", ",", "\n", "vehicles", "=", "vehicles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestShuffle.tearDown": [[91, 97], ["test_environment_base_class.TestShuffle.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestShuffle.test_shuffle": [[98, 113], ["test_environment_base_class.TestShuffle.env.k.vehicle.get_ids", "test_environment_base_class.TestShuffle.env.reset", "test_environment_base_class.TestShuffle.assertCountEqual", "test_environment_base_class.TestShuffle.env.k.vehicle.get_x_by_id", "test_environment_base_class.TestShuffle.env.k.vehicle.get_x_by_id"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_x_by_id"], ["", "def", "test_shuffle", "(", "self", ")", ":", "\n", "        ", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "\n", "# position of vehicles before reset", "\n", "before_reset", "=", "[", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_x_by_id", "(", "veh_id", ")", "\n", "for", "veh_id", "in", "ids", "]", "\n", "\n", "# reset the environment", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "# position of vehicles after reset", "\n", "after_reset", "=", "[", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_x_by_id", "(", "veh_id", ")", "\n", "for", "veh_id", "in", "ids", "]", "\n", "\n", "self", ".", "assertCountEqual", "(", "before_reset", ",", "after_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestEmissionPath.setUp": [[121, 127], ["flow.core.params.SumoParams", "tests.setup_scripts.ring_road_exp_setup"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# set sim_params to default", "\n", "        ", "sim_params", "=", "SumoParams", "(", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "sim_params", "=", "sim_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestEmissionPath.tearDown": [[128, 134], ["test_environment_base_class.TestEmissionPath.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestEmissionPath.test_emission": [[135, 137], ["test_environment_base_class.TestEmissionPath.assertIsNone"], "methods", ["None"], ["", "def", "test_emission", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertIsNone", "(", "self", ".", "env", ".", "sim_params", ".", "emission_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestApplyingActionsWithSumo.setUp": [[145, 174], ["flow.core.params.NetParams", "flow.core.params.EnvParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "flow.core.params.SumoCarFollowingParams", "flow.core.params.SumoLaneChangeParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# create a 2-lane ring road network", "\n", "        ", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "230", ",", "\n", "\"lanes\"", ":", "3", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "# turn on starting position shuffle", "\n", "env_params", "=", "EnvParams", "(", "\n", "additional_params", "=", "ADDITIONAL_ENV_PARAMS", ")", "\n", "\n", "# place 5 vehicles in the network (we need at least more than 1)", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "accel", "=", "1000", ",", "decel", "=", "1000", ")", ",", "\n", "lane_change_params", "=", "SumoLaneChangeParams", "(", "\n", "lane_change_mode", "=", "0", ")", ",", "\n", "num_vehicles", "=", "5", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "\n", "net_params", "=", "net_params", ",", "env_params", "=", "env_params", ",", "vehicles", "=", "vehicles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestApplyingActionsWithSumo.tearDown": [[175, 181], ["test_environment_base_class.TestApplyingActionsWithSumo.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestApplyingActionsWithSumo.test_apply_acceleration": [[182, 225], ["test_environment_base_class.TestApplyingActionsWithSumo.env.k.vehicle.get_ids", "numpy.array", "numpy.array", "test_environment_base_class.TestApplyingActionsWithSumo.env.k.vehicle.apply_acceleration", "test_environment_base_class.TestApplyingActionsWithSumo.env.k.simulation.simulation_step", "test_environment_base_class.TestApplyingActionsWithSumo.env.k.vehicle.update", "numpy.array", "numpy.testing.assert_array_almost_equal", "numpy.array", "test_environment_base_class.TestApplyingActionsWithSumo.env.k.vehicle.apply_acceleration", "test_environment_base_class.TestApplyingActionsWithSumo.env.k.simulation.simulation_step", "test_environment_base_class.TestApplyingActionsWithSumo.env.k.vehicle.update", "numpy.array", "numpy.testing.assert_array_almost_equal", "test_environment_base_class.TestApplyingActionsWithSumo.env.k.vehicle.get_speed", "test_environment_base_class.TestApplyingActionsWithSumo.env.k.vehicle.get_speed", "test_environment_base_class.TestApplyingActionsWithSumo.env.k.vehicle.get_speed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_acceleration", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.simulation_step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_acceleration", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.simulation_step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], ["", "def", "test_apply_acceleration", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that, in the absence of all failsafes, the acceleration requested\n        from sumo is equal to the acceleration witnessed in between steps. Also\n        ensures that vehicles can never have velocities below zero given any\n        acceleration.\n        \"\"\"", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "\n", "vel0", "=", "np", ".", "array", "(", "\n", "[", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "veh_id", ")", "for", "veh_id", "in", "ids", "]", ")", "\n", "\n", "# apply a certain set of accelerations to the vehicles in the network", "\n", "accel_step0", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "4", ",", "9", ",", "16", "]", ")", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "apply_acceleration", "(", "veh_ids", "=", "ids", ",", "acc", "=", "accel_step0", ")", "\n", "self", ".", "env", ".", "k", ".", "simulation", ".", "simulation_step", "(", ")", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "update", "(", "False", ")", "\n", "\n", "# compare the new velocity of the vehicles to the expected velocity", "\n", "# given the accelerations", "\n", "vel1", "=", "np", ".", "array", "(", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "veh_id", ")", "\n", "for", "veh_id", "in", "ids", "\n", "]", ")", "\n", "expected_vel1", "=", "(", "vel0", "+", "accel_step0", "*", "0.1", ")", ".", "clip", "(", "min", "=", "0", ")", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "vel1", ",", "expected_vel1", ",", "1", ")", "\n", "\n", "# apply a set of decelerations", "\n", "accel_step1", "=", "np", ".", "array", "(", "[", "-", "16", ",", "-", "9", ",", "-", "4", ",", "-", "1", ",", "0", "]", ")", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "apply_acceleration", "(", "veh_ids", "=", "ids", ",", "acc", "=", "accel_step1", ")", "\n", "self", ".", "env", ".", "k", ".", "simulation", ".", "simulation_step", "(", ")", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "update", "(", "False", ")", "\n", "\n", "# this time, some vehicles should be at 0 velocity (NOT less), and sum", "\n", "# are a result of the accelerations that took place", "\n", "vel2", "=", "np", ".", "array", "(", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "veh_id", ")", "\n", "for", "veh_id", "in", "ids", "\n", "]", ")", "\n", "expected_vel2", "=", "(", "vel1", "+", "accel_step1", "*", "0.1", ")", ".", "clip", "(", "min", "=", "0", ")", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "vel2", ",", "expected_vel2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestApplyingActionsWithSumo.test_apply_lane_change_errors": [[226, 242], ["test_environment_base_class.TestApplyingActionsWithSumo.env.reset", "test_environment_base_class.TestApplyingActionsWithSumo.env.k.vehicle.get_ids", "numpy.array", "test_environment_base_class.TestApplyingActionsWithSumo.assertRaises"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids"], ["", "def", "test_apply_lane_change_errors", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Ensures that apply_lane_change raises ValueErrors when it should\n        \"\"\"", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "\n", "# make sure that running apply lane change with a invalid direction", "\n", "# values leads to a ValueError", "\n", "bad_directions", "=", "np", ".", "array", "(", "[", "-", "1", ",", "0", ",", "1", ",", "2", ",", "3", "]", ")", "\n", "\n", "self", ".", "assertRaises", "(", "\n", "ValueError", ",", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "apply_lane_change", ",", "\n", "veh_ids", "=", "ids", ",", "\n", "direction", "=", "bad_directions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestApplyingActionsWithSumo.test_apply_lane_change_direction": [[243, 290], ["test_environment_base_class.TestApplyingActionsWithSumo.env.reset", "test_environment_base_class.TestApplyingActionsWithSumo.env.k.vehicle.get_ids", "numpy.array", "numpy.array", "test_environment_base_class.TestApplyingActionsWithSumo.env.k.vehicle.apply_lane_change", "test_environment_base_class.TestApplyingActionsWithSumo.env.k.simulation.simulation_step", "test_environment_base_class.TestApplyingActionsWithSumo.env.k.vehicle.update", "numpy.array", "numpy.testing.assert_array_almost_equal", "numpy.array", "test_environment_base_class.TestApplyingActionsWithSumo.env.k.vehicle.apply_lane_change", "test_environment_base_class.TestApplyingActionsWithSumo.env.k.simulation.simulation_step", "test_environment_base_class.TestApplyingActionsWithSumo.env.k.vehicle.update", "numpy.array", "numpy.testing.assert_array_almost_equal", "test_environment_base_class.TestApplyingActionsWithSumo.env.k.vehicle.get_lane", "test_environment_base_class.TestApplyingActionsWithSumo.env.k.vehicle.get_lane", "test_environment_base_class.TestApplyingActionsWithSumo.env.k.vehicle.get_lane", "numpy.sign", "numpy.sign"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_lane_change", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.simulation_step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.apply_lane_change", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.simulation.aimsun.AimsunKernelSimulation.simulation_step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane"], ["", "def", "test_apply_lane_change_direction", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests the direction method for apply_lane_change. Ensures that the lane\n        change action requested from sumo is the same as the lane change that\n        occurs, and that vehicles attempting do not issue lane changes in there\n        is no lane in te requested direction.\n        \"\"\"", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "lane0", "=", "np", ".", "array", "(", "\n", "[", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_lane", "(", "veh_id", ")", "for", "veh_id", "in", "ids", "]", ")", "\n", "max_lanes", "=", "self", ".", "env", ".", "net_params", ".", "additional_params", "[", "'lanes'", "]", "\n", "\n", "# perform lane-changing actions using the direction method", "\n", "direction0", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", ",", "1", ",", "-", "1", "]", ")", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "apply_lane_change", "(", "ids", ",", "direction", "=", "direction0", ")", "\n", "self", ".", "env", ".", "k", ".", "simulation", ".", "simulation_step", "(", ")", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "update", "(", "False", ")", "\n", "\n", "# check that the lane vehicle lane changes to the correct direction", "\n", "# without skipping lanes", "\n", "lane1", "=", "np", ".", "array", "(", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_lane", "(", "veh_id", ")", "\n", "for", "veh_id", "in", "ids", "\n", "]", ")", "\n", "expected_lane1", "=", "(", "lane0", "+", "np", ".", "sign", "(", "direction0", ")", ")", ".", "clip", "(", "\n", "min", "=", "0", ",", "max", "=", "max_lanes", "-", "1", ")", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "lane1", ",", "expected_lane1", ",", "1", ")", "\n", "\n", "# perform lane-changing actions using the direction method one more", "\n", "# time to test lane changes to the right", "\n", "direction1", "=", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "apply_lane_change", "(", "ids", ",", "direction", "=", "direction1", ")", "\n", "self", ".", "env", ".", "k", ".", "simulation", ".", "simulation_step", "(", ")", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "update", "(", "False", ")", "\n", "\n", "# check that the lane vehicle lane changes to the correct direction", "\n", "# without skipping lanes", "\n", "lane2", "=", "np", ".", "array", "(", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_lane", "(", "veh_id", ")", "\n", "for", "veh_id", "in", "ids", "\n", "]", ")", "\n", "expected_lane2", "=", "(", "lane1", "+", "np", ".", "sign", "(", "direction1", ")", ")", ".", "clip", "(", "\n", "min", "=", "0", ",", "max", "=", "max_lanes", "-", "1", ")", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "lane2", ",", "expected_lane2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestWarmUpSteps.test_it_works": [[296, 314], ["flow.core.params.EnvParams", "tests.setup_scripts.ring_road_exp_setup", "env.reset", "test_environment_base_class.TestWarmUpSteps.assertEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], ["def", "test_it_works", "(", "self", ")", ":", "\n", "        ", "warmup_step", "=", "5", "# some value", "\n", "\n", "# start an environment with a number of simulations per step greater", "\n", "# than one", "\n", "env_params", "=", "EnvParams", "(", "\n", "warmup_steps", "=", "warmup_step", ",", "additional_params", "=", "ADDITIONAL_ENV_PARAMS", ")", "\n", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "env_params", "=", "env_params", ")", "\n", "\n", "# time before running a reset", "\n", "t1", "=", "0", "\n", "# perform a reset", "\n", "env", ".", "reset", "(", ")", "\n", "# time after a reset", "\n", "t2", "=", "env", ".", "time_counter", "\n", "\n", "# ensure that the difference in time is equal to sims_per_step", "\n", "self", ".", "assertEqual", "(", "t2", "-", "t1", ",", "warmup_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestSimsPerStep.test_it_works": [[320, 340], ["flow.core.params.EnvParams", "tests.setup_scripts.ring_road_exp_setup", "env.reset", "env.step", "test_environment_base_class.TestSimsPerStep.assertEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step"], ["def", "test_it_works", "(", "self", ")", ":", "\n", "        ", "sims_per_step", "=", "5", "# some value", "\n", "\n", "# start an environment with a number of simulations per step greater", "\n", "# than one", "\n", "env_params", "=", "EnvParams", "(", "\n", "sims_per_step", "=", "sims_per_step", ",", "\n", "additional_params", "=", "ADDITIONAL_ENV_PARAMS", ")", "\n", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "env_params", "=", "env_params", ")", "\n", "\n", "env", ".", "reset", "(", ")", "\n", "# time before running a step", "\n", "t1", "=", "env", ".", "time_counter", "\n", "# perform a step", "\n", "env", ".", "step", "(", "rl_actions", "=", "[", "]", ")", "\n", "# time after a step", "\n", "t2", "=", "env", ".", "time_counter", "\n", "\n", "# ensure that the difference in time is equal to sims_per_step", "\n", "self", ".", "assertEqual", "(", "t2", "-", "t1", ",", "sims_per_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestAbstractMethods.setUp": [[349, 353], ["tests.setup_scripts.ring_road_exp_setup", "flow.core.params.SumoParams", "flow.core.params.EnvParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ",", "self", ".", "network", ",", "_", "=", "ring_road_exp_setup", "(", ")", "\n", "self", ".", "sim_params", "=", "SumoParams", "(", ")", "# FIXME: make ambiguous", "\n", "self", ".", "env_params", "=", "EnvParams", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestAbstractMethods.test_abstract_base_class": [[354, 360], ["test_environment_base_class.TestAbstractMethods.assertRaises", "flow.envs.Env"], "methods", ["None"], ["", "def", "test_abstract_base_class", "(", "self", ")", ":", "\n", "        ", "\"\"\"Checks that instantiating abstract base class raises an error.\"\"\"", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "Env", "(", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "env_params", "=", "self", ".", "env_params", ",", "\n", "network", "=", "self", ".", "network", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestAbstractMethods.test_get_state": [[361, 369], ["test_environment_base_class.TestAbstractMethods.assertRaises", "test_environment_base_class.TestFailGetStateEnv"], "methods", ["None"], ["", "", "def", "test_get_state", "(", "self", ")", ":", "\n", "        ", "\"\"\"Checks that instantiating without get_state implemented\n        raises an error.\n        \"\"\"", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "TestFailGetStateEnv", "(", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "env_params", "=", "self", ".", "env_params", ",", "\n", "network", "=", "self", ".", "network", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestAbstractMethods.test__apply_rl_actions": [[370, 378], ["test_environment_base_class.TestAbstractMethods.assertRaises", "test_environment_base_class.TestFailRLActionsEnv"], "methods", ["None"], ["", "", "def", "test__apply_rl_actions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Checks that instantiating without _apply_rl_actions\n        implemented raises an error.\n        \"\"\"", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "TestFailRLActionsEnv", "(", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "env_params", "=", "self", ".", "env_params", ",", "\n", "network", "=", "self", ".", "network", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestVehicleColoring.test_all": [[382, 420], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "flow.envs.TestEnv", "flow.envs.TestEnv.reset", "flow.envs.TestEnv.k.vehicle.set_observed", "flow.envs.TestEnv.step", "flow.envs.TestEnv.k.vehicle.get_ids", "flow.envs.TestEnv.k.vehicle.set_observed", "flow.envs.TestEnv.step", "flow.envs.TestEnv.k.vehicle.get_ids", "flow.core.params.EnvParams", "flow.core.params.SumoParams", "test_environment_base_class.TestVehicleColoring.assertEqual", "flow.envs.TestEnv.k.vehicle.get_color", "test_environment_base_class.TestVehicleColoring.assertEqual", "flow.envs.TestEnv.k.vehicle.get_color", "test_environment_base_class.TestVehicleColoring.assertEqual", "test_environment_base_class.TestVehicleColoring.assertEqual", "flow.envs.TestEnv.k.vehicle.get_color", "flow.envs.TestEnv.k.vehicle.get_color"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_color", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_color", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_color", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_color"], ["    ", "def", "test_all", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\"human\"", ",", "num_vehicles", "=", "10", ")", "\n", "# add an RL vehicle to ensure that its color will be distinct", "\n", "vehicles", ".", "add", "(", "\"rl\"", ",", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "_", ",", "network", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "env", "=", "TestEnv", "(", "EnvParams", "(", ")", ",", "SumoParams", "(", ")", ",", "network", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "# set one vehicle as observed", "\n", "env", ".", "k", ".", "vehicle", ".", "set_observed", "(", "\"human_0\"", ")", "\n", "\n", "# update the colors of all vehicles", "\n", "env", ".", "step", "(", "rl_actions", "=", "None", ")", "\n", "\n", "# check that, when rendering is off, the colors don't change (this", "\n", "# avoids unnecessary API calls)", "\n", "for", "veh_id", "in", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "vehicle", ".", "get_color", "(", "veh_id", ")", ",", "YELLOW", ")", "\n", "\n", "# a little hack to ensure the colors change", "\n", "", "env", ".", "sim_params", ".", "render", "=", "True", "\n", "\n", "# set one vehicle as observed", "\n", "env", ".", "k", ".", "vehicle", ".", "set_observed", "(", "\"human_0\"", ")", "\n", "\n", "# update the colors of all vehicles", "\n", "env", ".", "step", "(", "rl_actions", "=", "None", ")", "\n", "\n", "# check the colors of all vehicles", "\n", "for", "veh_id", "in", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ":", "\n", "            ", "if", "veh_id", "in", "[", "\"human_0\"", "]", ":", "\n", "                ", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "vehicle", ".", "get_color", "(", "veh_id", ")", ",", "CYAN", ")", "\n", "", "elif", "veh_id", "==", "\"rl_0\"", ":", "\n", "                ", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "vehicle", ".", "get_color", "(", "veh_id", ")", ",", "RED", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "vehicle", ".", "get_color", "(", "veh_id", ")", ",", "WHITE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestNotEnoughVehicles.test_num_spawned": [[425, 439], ["flow.core.params.InitialConfig", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "test_environment_base_class.TestNotEnoughVehicles.assertRaises"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["def", "test_num_spawned", "(", "self", ")", ":", "\n", "        ", "initial_config", "=", "InitialConfig", "(", "\n", "spacing", "=", "\"custom\"", ",", "\n", "additional_params", "=", "{", "\n", "'start_positions'", ":", "[", "(", "'highway_0'", ",", "0", ")", ",", "(", "'highway_0'", ",", "0", ")", "]", ",", "\n", "'start_lanes'", ":", "[", "0", ",", "0", "]", "}", "\n", ")", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "'test'", ",", "num_vehicles", "=", "2", ")", "\n", "\n", "self", ".", "assertRaises", "(", "FatalFlowError", ",", "\n", "highway_exp_setup", ",", "\n", "initial_config", "=", "initial_config", ",", "\n", "vehicles", "=", "vehicles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.BoxEnv.get_state": [[444, 446], ["None"], "methods", ["None"], ["def", "get_state", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.BoxEnv.action_space": [[447, 450], ["gym.Box"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "3", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.BoxEnv.observation_space": [[451, 454], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.BoxEnv._apply_rl_actions": [[455, 457], ["None"], "methods", ["None"], ["", "def", "_apply_rl_actions", "(", "self", ",", "rl_actions", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestClipBoxActions.setUp": [[465, 473], ["tests.setup_scripts.ring_road_exp_setup", "flow.core.params.SumoParams", "flow.core.params.EnvParams", "test_environment_base_class.BoxEnv"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "env", ",", "network", ",", "_", "=", "ring_road_exp_setup", "(", ")", "\n", "sim_params", "=", "SumoParams", "(", ")", "\n", "env_params", "=", "EnvParams", "(", ")", "\n", "self", ".", "env", "=", "BoxEnv", "(", "\n", "sim_params", "=", "sim_params", ",", "\n", "env_params", "=", "env_params", ",", "\n", "scenario", "=", "network", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestClipBoxActions.tearDown": [[474, 477], ["test_environment_base_class.TestClipBoxActions.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestClipBoxActions.test_clip_box_actions": [[478, 484], ["test_environment_base_class.TestClipBoxActions.env.clip_actions", "test_environment_base_class.TestClipBoxActions.assertTrue"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.clip_actions"], ["", "def", "test_clip_box_actions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test whether box actions get properly clipped.\"\"\"", "\n", "actions", "=", "[", "0.5", ",", "-", "1", ",", "2", "]", "\n", "clipped_actions", "=", "[", "0.5", ",", "0", ",", "1", "]", "\n", "_actions", "=", "self", ".", "env", ".", "clip_actions", "(", "actions", ")", "\n", "self", ".", "assertTrue", "(", "(", "_actions", "==", "clipped_actions", ")", ".", "all", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TupleEnv.get_state": [[489, 491], ["None"], "methods", ["None"], ["def", "get_state", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TupleEnv.action_space": [[492, 498], ["gym.Tuple", "gym.Box", "gym.Box", "gym.Discrete"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "spaces", ".", "Tuple", "(", "[", "\n", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "1", ",", ")", ")", ",", "\n", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "3", ",", ")", ")", ",", "\n", "spaces", ".", "Discrete", "(", "3", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TupleEnv.observation_space": [[499, 502], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TupleEnv._apply_rl_actions": [[503, 505], ["None"], "methods", ["None"], ["", "def", "_apply_rl_actions", "(", "self", ",", "rl_actions", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestClipTupleActions.setUp": [[513, 521], ["tests.setup_scripts.ring_road_exp_setup", "flow.core.params.SumoParams", "flow.core.params.EnvParams", "test_environment_base_class.TupleEnv"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "env", ",", "network", ",", "_", "=", "ring_road_exp_setup", "(", ")", "\n", "sim_params", "=", "SumoParams", "(", ")", "\n", "env_params", "=", "EnvParams", "(", ")", "\n", "self", ".", "env", "=", "TupleEnv", "(", "\n", "sim_params", "=", "sim_params", ",", "\n", "env_params", "=", "env_params", ",", "\n", "network", "=", "network", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestClipTupleActions.tearDown": [[522, 525], ["test_environment_base_class.TestClipTupleActions.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environment_base_class.TestClipTupleActions.test_clip_tuple_actions": [[526, 542], ["test_environment_base_class.TestClipTupleActions.env.clip_actions", "test_environment_base_class.TestClipTupleActions.assertEquals", "test_environment_base_class.TestClipTupleActions.assertTrue", "test_environment_base_class.TestClipTupleActions.assertEquals"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.clip_actions"], ["", "def", "test_clip_tuple_actions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test whether tuple actions get properly clipped.\"\"\"", "\n", "actions", "=", "[", "\n", "[", "-", "1", "]", ",", "\n", "[", "0.5", ",", "-", "1", ",", "2", "]", ",", "\n", "2", "\n", "]", "\n", "clipped_actions", "=", "[", "\n", "[", "0", "]", ",", "\n", "[", "0.5", ",", "0", ",", "1", "]", ",", "\n", "2", "\n", "]", "\n", "_actions", "=", "self", ".", "env", ".", "clip_actions", "(", "actions", ")", "\n", "self", ".", "assertEquals", "(", "_actions", "[", "0", "]", ",", "clipped_actions", "[", "0", "]", ")", "\n", "self", ".", "assertTrue", "(", "(", "_actions", "[", "1", "]", "==", "clipped_actions", "[", "1", "]", ")", ".", "all", "(", ")", ")", "\n", "self", ".", "assertEquals", "(", "_actions", "[", "2", "]", ",", "clipped_actions", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_visualizers.TestVisualizerRLlib.test_visualizer_single": [[20, 36], ["flow.visualize.visualizer_rllib.create_parser", "flow.visualize.visualizer_rllib.create_parser", "flow.visualize.visualizer_rllib.create_parser", "flow.visualize.visualizer_rllib.create_parser.parse_args", "flow.visualize.visualizer_rllib", "flow.visualize.visualizer_rllib", "flow.visualize.visualizer_rllib", "ray.init", "os.path.realpath().rsplit", "os.path.realpath"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.capacity_diagram_generator.create_parser", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.capacity_diagram_generator.create_parser", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.capacity_diagram_generator.create_parser", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.visualizer_rllib.visualizer_rllib", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.visualizer_rllib.visualizer_rllib", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.visualizer_rllib.visualizer_rllib"], ["def", "test_visualizer_single", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test for single agent\"\"\"", "\n", "try", ":", "\n", "            ", "ray", ".", "init", "(", "num_cpus", "=", "1", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "pass", "\n", "# current path", "\n", "", "current_path", "=", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ".", "rsplit", "(", "'/'", ",", "1", ")", "[", "0", "]", "\n", "\n", "# run the experiment and check it doesn't crash", "\n", "arg_str", "=", "'{}/../data/rllib_data/single_agent 1 --num_rollouts 1 '", "'--render_mode no_render '", "'--horizon 10'", ".", "format", "(", "current_path", ")", ".", "split", "(", ")", "\n", "parser", "=", "vs_rllib", ".", "create_parser", "(", ")", "\n", "pass_args", "=", "parser", ".", "parse_args", "(", "arg_str", ")", "\n", "visualizer_rllib", "(", "pass_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_visualizers.TestVisualizerRLlib.test_visualizer_multi": [[38, 54], ["flow.visualize.visualizer_rllib.create_parser", "flow.visualize.visualizer_rllib.create_parser", "flow.visualize.visualizer_rllib.create_parser", "flow.visualize.visualizer_rllib.create_parser.parse_args", "flow.visualize.visualizer_rllib", "flow.visualize.visualizer_rllib", "flow.visualize.visualizer_rllib", "ray.init", "os.path.realpath().rsplit", "os.path.realpath"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.capacity_diagram_generator.create_parser", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.capacity_diagram_generator.create_parser", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.capacity_diagram_generator.create_parser", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.visualizer_rllib.visualizer_rllib", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.visualizer_rllib.visualizer_rllib", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.visualizer_rllib.visualizer_rllib"], ["", "def", "test_visualizer_multi", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test for multi-agent visualization\"\"\"", "\n", "try", ":", "\n", "            ", "ray", ".", "init", "(", "num_cpus", "=", "1", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "pass", "\n", "# current path", "\n", "", "current_path", "=", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ".", "rsplit", "(", "'/'", ",", "1", ")", "[", "0", "]", "\n", "\n", "# run the experiment and check it doesn't crash", "\n", "arg_str", "=", "'{}/../data/rllib_data/multi_agent 1 --num_rollouts 1 '", "'--render_mode no_render '", "'--horizon 10'", ".", "format", "(", "current_path", ")", ".", "split", "(", ")", "\n", "parser", "=", "vs_rllib", ".", "create_parser", "(", ")", "\n", "pass_args", "=", "parser", ".", "parse_args", "(", "arg_str", ")", "\n", "visualizer_rllib", "(", "pass_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_visualizers.TestPlotters.test_capacity_diagram_generator": [[58, 92], ["os.path.dirname", "flow.import_data_from_csv", "flow.import_data_from_csv", "flow.import_data_from_csv", "flow.get_capacity_data", "flow.get_capacity_data", "flow.get_capacity_data", "numpy.array", "numpy.array", "numpy.array", "numpy.testing.assert_array_almost_equal", "numpy.testing.assert_array_almost_equal", "numpy.testing.assert_array_almost_equal", "os.path.realpath", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.capacity_diagram_generator.import_data_from_csv", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.capacity_diagram_generator.import_data_from_csv", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.capacity_diagram_generator.import_data_from_csv", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.capacity_diagram_generator.get_capacity_data", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.capacity_diagram_generator.get_capacity_data", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.capacity_diagram_generator.get_capacity_data"], ["    ", "def", "test_capacity_diagram_generator", "(", "self", ")", ":", "\n", "# import the csv file", "\n", "        ", "dir_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "data", "=", "cdg", ".", "import_data_from_csv", "(", "\n", "os", ".", "path", ".", "join", "(", "dir_path", ",", "'test_files/inflows_outflows.csv'", ")", ")", "\n", "\n", "# compute the mean and std of the outflows for all unique inflows", "\n", "unique_inflows", ",", "mean_outflows", ",", "std_outflows", "=", "cdg", ".", "get_capacity_data", "(", "\n", "data", ")", "\n", "\n", "# test that the values match the expected from the", "\n", "expected_unique_inflows", "=", "np", ".", "array", "(", "[", "\n", "400", ",", "500", ",", "600", ",", "700", ",", "800", ",", "900", ",", "1000", ",", "1100", ",", "1200", ",", "1300", ",", "1400", ",", "1500", ",", "\n", "1600", ",", "1700", ",", "1800", ",", "1900", ",", "2000", ",", "2100", ",", "2200", ",", "2300", ",", "2400", ",", "2500", ",", "2600", ",", "\n", "2700", ",", "2800", ",", "2900", "]", ")", "\n", "expected_means", "=", "np", ".", "array", "(", "[", "\n", "385.2", ",", "479.52", ",", "575.28", ",", "668.16", ",", "763.2", ",", "856.8", ",", "900.95668831", ",", "\n", "1029.6705856", ",", "1111.62035833", ",", "1187.87297462", ",", "1258.81962238", ",", "\n", "1257.30378783", ",", "1161.28280975", ",", "1101.85671862", ",", "1261.26596639", ",", "\n", "936.91255623", ",", "1039.90127834", ",", "1032.13903881", ",", "937.70410361", ",", "\n", "934.85669105", ",", "837.58808324", ",", "889.17167643", ",", "892.78528048", ",", "\n", "937.85757297", ",", "934.86027655", ",", "804.14440138", "]", ")", "\n", "expected_stds", "=", "np", ".", "array", "(", "[", "\n", "1.60996894", ",", "1.44", ",", "1.44", ",", "2.38796985", ",", "2.78854801", ",", "3.6", ",", "149.57165793", ",", "\n", "37.82554569", ",", "67.35786443", ",", "135.35337939", ",", "124.41794128", ",", "221.64466355", ",", "\n", "280.88707947", ",", "199.2875712", ",", "258.72510896", ",", "194.0785382", ",", "239.71034056", ",", "\n", "182.75627664", ",", "331.37899239", ",", "325.82943015", ",", "467.54641633", ",", "\n", "282.15049541", ",", "310.36329236", ",", "92.61828854", ",", "229.6155371", ",", "\n", "201.29461492", "]", ")", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "unique_inflows", ",", "\n", "expected_unique_inflows", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "mean_outflows", ",", "expected_means", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "std_outflows", ",", "expected_stds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_visualizers.TestPlotters.test_time_space_diagram_figure_eight": [[93, 148], ["os.path.dirname", "flow.get_flow_params", "flow.get_flow_params", "flow.get_flow_params", "flow.import_data_from_trajectory", "flow.import_data_from_trajectory", "flow.import_data_from_trajectory", "flow.get_time_space_data", "flow.get_time_space_data", "flow.get_time_space_data", "numpy.array", "numpy.testing.assert_array_almost_equal", "os.path.realpath", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.get_flow_params", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.get_flow_params", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.get_flow_params", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.import_data_from_trajectory", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.import_data_from_trajectory", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.import_data_from_trajectory", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.get_time_space_data", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.get_time_space_data", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.get_time_space_data"], ["", "def", "test_time_space_diagram_figure_eight", "(", "self", ")", ":", "\n", "        ", "dir_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "flow_params", "=", "tsd", ".", "get_flow_params", "(", "\n", "os", ".", "path", ".", "join", "(", "dir_path", ",", "'test_files/fig8.json'", ")", ")", "\n", "emission_data", "=", "tsd", ".", "import_data_from_trajectory", "(", "\n", "os", ".", "path", ".", "join", "(", "dir_path", ",", "'test_files/fig8_emission.csv'", ")", ",", "flow_params", ")", "\n", "\n", "segs", ",", "_", "=", "tsd", ".", "get_time_space_data", "(", "emission_data", ",", "flow_params", ")", "\n", "\n", "expected_segs", "=", "np", ".", "array", "(", "[", "\n", "[", "[", "1.", ",", "60.", "]", ",", "[", "2.", ",", "59.", "]", "]", ",", "\n", "[", "[", "2.", ",", "59.", "]", ",", "[", "3.", ",", "57.02", "]", "]", ",", "\n", "[", "[", "3.", ",", "57.02", "]", ",", "[", "4.", ",", "54.05", "]", "]", ",", "\n", "[", "[", "1.", ",", "23.8", "]", ",", "[", "2.", ",", "22.81", "]", "]", ",", "\n", "[", "[", "2.", ",", "22.81", "]", ",", "[", "3.", ",", "20.83", "]", "]", ",", "\n", "[", "[", "3.", ",", "20.83", "]", ",", "[", "4.", ",", "17.89", "]", "]", ",", "\n", "[", "[", "1.", ",", "182.84166941", "]", ",", "[", "2.", ",", "181.85166941", "]", "]", ",", "\n", "[", "[", "2.", ",", "181.85166941", "]", ",", "[", "3.", ",", "179.87166941", "]", "]", ",", "\n", "[", "[", "3.", ",", "179.87166941", "]", ",", "[", "4.", ",", "176.92166941", "]", "]", ",", "\n", "[", "[", "1.", ",", "154.07166941", "]", ",", "[", "2.", ",", "153.08166941", "]", "]", ",", "\n", "[", "[", "2.", ",", "153.08166941", "]", ",", "[", "3.", ",", "151.10166941", "]", "]", ",", "\n", "[", "[", "3.", ",", "151.10166941", "]", ",", "[", "4.", ",", "148.16166941", "]", "]", ",", "\n", "[", "[", "1.", ",", "125.30166941", "]", ",", "[", "2.", ",", "124.31166941", "]", "]", ",", "\n", "[", "[", "2.", ",", "124.31166941", "]", ",", "[", "3.", ",", "122.34166941", "]", "]", ",", "\n", "[", "[", "3.", ",", "122.34166941", "]", ",", "[", "4.", ",", "119.39166941", "]", "]", ",", "\n", "[", "[", "1.", ",", "96.54166941", "]", ",", "[", "2.", ",", "95.54166941", "]", "]", ",", "\n", "[", "[", "2.", ",", "95.54166941", "]", ",", "[", "3.", ",", "93.56166941", "]", "]", ",", "\n", "[", "[", "3.", ",", "93.56166941", "]", ",", "[", "4.", ",", "90.59166941", "]", "]", ",", "\n", "[", "[", "1.", ",", "-", "203.16166941", "]", ",", "[", "2.", ",", "-", "202.17166941", "]", "]", ",", "\n", "[", "[", "2.", ",", "-", "202.17166941", "]", ",", "[", "3.", ",", "-", "200.02166941", "]", "]", ",", "\n", "[", "[", "3.", ",", "-", "200.02166941", "]", ",", "[", "4.", ",", "-", "197.07166941", "]", "]", ",", "\n", "[", "[", "1.", ",", "-", "174.40166941", "]", ",", "[", "2.", ",", "-", "173.40166941", "]", "]", ",", "\n", "[", "[", "2.", ",", "-", "173.40166941", "]", ",", "[", "3.", ",", "-", "171.43166941", "]", "]", ",", "\n", "[", "[", "3.", ",", "-", "171.43166941", "]", ",", "[", "4.", ",", "-", "168.48166941", "]", "]", ",", "\n", "[", "[", "1.", ",", "-", "145.63166941", "]", ",", "[", "2.", ",", "-", "144.64166941", "]", "]", ",", "\n", "[", "[", "2.", ",", "-", "144.64166941", "]", ",", "[", "3.", ",", "-", "142.66166941", "]", "]", ",", "\n", "[", "[", "3.", ",", "-", "142.66166941", "]", ",", "[", "4.", ",", "-", "139.72166941", "]", "]", ",", "\n", "[", "[", "1.", ",", "-", "116.86166941", "]", ",", "[", "2.", ",", "-", "115.87166941", "]", "]", ",", "\n", "[", "[", "2.", ",", "-", "115.87166941", "]", ",", "[", "3.", ",", "-", "113.89166941", "]", "]", ",", "\n", "[", "[", "3.", ",", "-", "113.89166941", "]", ",", "[", "4.", ",", "-", "110.95166941", "]", "]", ",", "\n", "[", "[", "1.", ",", "-", "88.09166941", "]", ",", "[", "2.", ",", "-", "87.10166941", "]", "]", ",", "\n", "[", "[", "2.", ",", "-", "87.10166941", "]", ",", "[", "3.", ",", "-", "85.13166941", "]", "]", ",", "\n", "[", "[", "3.", ",", "-", "85.13166941", "]", ",", "[", "4.", ",", "-", "82.18166941", "]", "]", ",", "\n", "[", "[", "1.", ",", "-", "59.33", "]", ",", "[", "2.", ",", "-", "58.34", "]", "]", ",", "\n", "[", "[", "2.", ",", "-", "58.34", "]", ",", "[", "3.", ",", "-", "56.36", "]", "]", ",", "\n", "[", "[", "3.", ",", "-", "56.36", "]", ",", "[", "4.", ",", "-", "53.42", "]", "]", ",", "\n", "[", "[", "1.", ",", "-", "30.56", "]", ",", "[", "2.", ",", "-", "29.72", "]", "]", ",", "\n", "[", "[", "2.", ",", "-", "29.72", "]", ",", "[", "3.", ",", "-", "27.97", "]", "]", ",", "\n", "[", "[", "3.", ",", "-", "27.97", "]", ",", "[", "4.", ",", "-", "25.22", "]", "]", ",", "\n", "[", "[", "1.", ",", "-", "1.79", "]", ",", "[", "2.", ",", "-", "0.8", "]", "]", ",", "\n", "[", "[", "2.", ",", "-", "0.8", "]", ",", "[", "3.", ",", "208.64166941", "]", "]", ",", "\n", "[", "[", "3.", ",", "208.64166941", "]", ",", "[", "4.", ",", "205.69166941", "]", "]", "]", "\n", ")", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "segs", ",", "expected_segs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_visualizers.TestPlotters.test_time_space_diagram_merge": [[149, 166], ["os.path.dirname", "flow.get_flow_params", "flow.get_flow_params", "flow.get_flow_params", "flow.import_data_from_trajectory", "flow.import_data_from_trajectory", "flow.import_data_from_trajectory", "flow.get_time_space_data", "flow.get_time_space_data", "flow.get_time_space_data", "numpy.array", "numpy.testing.assert_array_almost_equal", "os.path.realpath", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.get_flow_params", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.get_flow_params", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.get_flow_params", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.import_data_from_trajectory", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.import_data_from_trajectory", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.import_data_from_trajectory", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.get_time_space_data", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.get_time_space_data", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.get_time_space_data"], ["", "def", "test_time_space_diagram_merge", "(", "self", ")", ":", "\n", "        ", "dir_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "flow_params", "=", "tsd", ".", "get_flow_params", "(", "\n", "os", ".", "path", ".", "join", "(", "dir_path", ",", "'test_files/merge.json'", ")", ")", "\n", "emission_data", "=", "tsd", ".", "import_data_from_trajectory", "(", "\n", "os", ".", "path", ".", "join", "(", "dir_path", ",", "'test_files/merge_emission.csv'", ")", ",", "flow_params", ")", "\n", "\n", "segs", ",", "_", "=", "tsd", ".", "get_time_space_data", "(", "emission_data", ",", "flow_params", ")", "\n", "\n", "expected_segs", "=", "np", ".", "array", "(", "[", "\n", "[", "[", "2.0000e-01", ",", "7.2949e+02", "]", ",", "[", "4.0000e-01", ",", "7.2953e+02", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "7.2953e+02", "]", ",", "[", "6.0000e-01", ",", "7.2961e+02", "]", "]", ",", "\n", "[", "[", "6.0000e-01", ",", "7.2961e+02", "]", ",", "[", "8.0000e-01", ",", "7.2973e+02", "]", "]", ",", "\n", "[", "[", "8.0000e-01", ",", "7.2973e+02", "]", ",", "[", "1.0000e+00", ",", "7.2988e+02", "]", "]", "]", "\n", ")", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "segs", ",", "expected_segs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_visualizers.TestPlotters.test_time_space_diagram_I210": [[167, 206], ["os.path.dirname", "__import__", "flow.import_data_from_trajectory", "flow.import_data_from_trajectory", "flow.import_data_from_trajectory", "flow.get_time_space_data", "flow.get_time_space_data", "flow.get_time_space_data", "expected_segs.items", "os.path.realpath", "getattr", "os.path.join", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.import_data_from_trajectory", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.import_data_from_trajectory", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.import_data_from_trajectory", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.get_time_space_data", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.get_time_space_data", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.get_time_space_data"], ["", "def", "test_time_space_diagram_I210", "(", "self", ")", ":", "\n", "        ", "dir_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "module", "=", "__import__", "(", "\"examples.exp_configs.non_rl\"", ",", "fromlist", "=", "[", "\"i210_subnetwork\"", "]", ")", "\n", "flow_params", "=", "getattr", "(", "module", ",", "\"i210_subnetwork\"", ")", ".", "flow_params", "\n", "emission_data", "=", "tsd", ".", "import_data_from_trajectory", "(", "\n", "os", ".", "path", ".", "join", "(", "dir_path", ",", "'test_files/i210_emission.csv'", ")", ",", "flow_params", ")", "\n", "\n", "segs", ",", "_", "=", "tsd", ".", "get_time_space_data", "(", "emission_data", ",", "flow_params", ")", "\n", "\n", "expected_segs", "=", "{", "\n", "1", ":", "np", ".", "array", "(", "[", "\n", "[", "[", "0.8", ",", "5.1", "]", ",", "[", "1.6", ",", "23.37", "]", "]", ",", "\n", "[", "[", "1.6", ",", "23.37", "]", ",", "[", "2.4", ",", "42.02", "]", "]", ",", "\n", "[", "[", "2.4", ",", "42.02", "]", ",", "[", "3.2", ",", "61.21", "]", "]", ",", "\n", "[", "[", "3.2", ",", "61.21", "]", ",", "[", "4.", ",", "18.87", "]", "]", ",", "\n", "[", "[", "4.", ",", "18.87", "]", ",", "[", "4.8", ",", "39.93", "]", "]", ",", "\n", "[", "[", "2.4", ",", "5.1", "]", ",", "[", "3.2", ",", "22.97", "]", "]", ",", "\n", "[", "[", "3.2", ",", "22.97", "]", ",", "[", "4.", ",", "40.73", "]", "]", "]", "\n", ")", ",", "\n", "2", ":", "np", ".", "array", "(", "[", "\n", "[", "[", "2.4", ",", "5.1", "]", ",", "[", "3.2", ",", "23.98", "]", "]", ",", "\n", "[", "[", "3.2", ",", "23.98", "]", ",", "[", "4.", ",", "43.18", "]", "]", "]", "\n", ")", ",", "\n", "3", ":", "np", ".", "array", "(", "[", "\n", "[", "[", "0.8", ",", "5.1", "]", ",", "[", "1.6", ",", "23.72", "]", "]", ",", "\n", "[", "[", "1.6", ",", "23.72", "]", ",", "[", "2.4", ",", "43.06", "]", "]", ",", "\n", "[", "[", "2.4", ",", "43.06", "]", ",", "[", "3.2", ",", "1.33", "]", "]", ",", "\n", "[", "[", "3.2", ",", "1.33", "]", ",", "[", "4.", ",", "21.65", "]", "]", ",", "\n", "[", "[", "4.", ",", "21.65", "]", ",", "[", "4.8", ",", "43.46", "]", "]", ",", "\n", "[", "[", "2.4", ",", "5.1", "]", ",", "[", "3.2", ",", "23.74", "]", "]", ",", "\n", "[", "[", "3.2", ",", "23.74", "]", ",", "[", "4.", ",", "42.38", "]", "]", "]", "\n", ")", ",", "\n", "4", ":", "np", ".", "array", "(", "[", "\n", "[", "[", "2.4", ",", "5.1", "]", ",", "[", "3.2", ",", "23.6", "]", "]", ",", "\n", "[", "[", "3.2", ",", "23.6", "]", ",", "[", "4.", ",", "42.46", "]", "]", "]", "\n", ")", "}", "\n", "\n", "for", "lane", ",", "expected_seg", "in", "expected_segs", ".", "items", "(", ")", ":", "\n", "            ", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "segs", "[", "lane", "]", ",", "expected_seg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_visualizers.TestPlotters.test_time_space_diagram_ring_road": [[207, 314], ["os.path.dirname", "flow.get_flow_params", "flow.get_flow_params", "flow.get_flow_params", "flow.import_data_from_trajectory", "flow.import_data_from_trajectory", "flow.import_data_from_trajectory", "flow.get_time_space_data", "flow.get_time_space_data", "flow.get_time_space_data", "numpy.array", "numpy.testing.assert_array_almost_equal", "os.path.realpath", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.get_flow_params", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.get_flow_params", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.get_flow_params", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.import_data_from_trajectory", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.import_data_from_trajectory", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.import_data_from_trajectory", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.get_time_space_data", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.get_time_space_data", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.time_space_diagram.get_time_space_data"], ["", "", "def", "test_time_space_diagram_ring_road", "(", "self", ")", ":", "\n", "        ", "dir_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "flow_params", "=", "tsd", ".", "get_flow_params", "(", "\n", "os", ".", "path", ".", "join", "(", "dir_path", ",", "'test_files/ring_230.json'", ")", ")", "\n", "emission_data", "=", "tsd", ".", "import_data_from_trajectory", "(", "\n", "os", ".", "path", ".", "join", "(", "dir_path", ",", "'test_files/ring_230_emission.csv'", ")", ",", "flow_params", ")", "\n", "\n", "segs", ",", "_", "=", "tsd", ".", "get_time_space_data", "(", "emission_data", ",", "flow_params", ")", "\n", "\n", "expected_segs", "=", "np", ".", "array", "(", "[", "\n", "[", "[", "1.0000e-01", ",", "0.0000e+00", "]", ",", "[", "2.0000e-01", ",", "1.0000e-02", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "1.0000e-02", "]", ",", "[", "3.0000e-01", ",", "2.0000e-02", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "2.0000e-02", "]", ",", "[", "4.0000e-01", ",", "5.0000e-02", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "5.0000e-02", "]", ",", "[", "5.0000e-01", ",", "8.0000e-02", "]", "]", ",", "\n", "[", "[", "5.0000e-01", ",", "8.0000e-02", "]", ",", "[", "6.0000e-01", ",", "1.2000e-01", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "9.5500e+00", "]", ",", "[", "2.0000e-01", ",", "9.5500e+00", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "9.5500e+00", "]", ",", "[", "3.0000e-01", ",", "9.5700e+00", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "9.5700e+00", "]", ",", "[", "4.0000e-01", ",", "9.5900e+00", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "9.5900e+00", "]", ",", "[", "5.0000e-01", ",", "9.6200e+00", "]", "]", ",", "\n", "[", "[", "5.0000e-01", ",", "9.6200e+00", "]", ",", "[", "6.0000e-01", ",", "9.6600e+00", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "9.5550e+01", "]", ",", "[", "2.0000e-01", ",", "9.5560e+01", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "9.5560e+01", "]", ",", "[", "3.0000e-01", ",", "9.5580e+01", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "9.5580e+01", "]", ",", "[", "4.0000e-01", ",", "9.5600e+01", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "9.5600e+01", "]", ",", "[", "5.0000e-01", ",", "9.5630e+01", "]", "]", ",", "\n", "[", "[", "5.0000e-01", ",", "9.5630e+01", "]", ",", "[", "6.0000e-01", ",", "9.5670e+01", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "1.0510e+02", "]", ",", "[", "2.0000e-01", ",", "1.0511e+02", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "1.0511e+02", "]", ",", "[", "3.0000e-01", ",", "1.0512e+02", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "1.0512e+02", "]", ",", "[", "4.0000e-01", ",", "1.0515e+02", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "1.0515e+02", "]", ",", "[", "5.0000e-01", ",", "1.0518e+02", "]", "]", ",", "\n", "[", "[", "5.0000e-01", ",", "1.0518e+02", "]", ",", "[", "6.0000e-01", ",", "1.0522e+02", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "1.1465e+02", "]", ",", "[", "2.0000e-01", ",", "1.1465e+02", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "1.1465e+02", "]", ",", "[", "3.0000e-01", ",", "1.1467e+02", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "1.1467e+02", "]", ",", "[", "4.0000e-01", ",", "1.1469e+02", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "1.1469e+02", "]", ",", "[", "5.0000e-01", ",", "1.1472e+02", "]", "]", ",", "\n", "[", "[", "5.0000e-01", ",", "1.1472e+02", "]", ",", "[", "6.0000e-01", ",", "1.1476e+02", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "1.2429e+02", "]", ",", "[", "2.0000e-01", ",", "1.2430e+02", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "1.2430e+02", "]", ",", "[", "3.0000e-01", ",", "1.2431e+02", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "1.2431e+02", "]", ",", "[", "4.0000e-01", ",", "1.2434e+02", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "1.2434e+02", "]", ",", "[", "5.0000e-01", ",", "1.2437e+02", "]", "]", ",", "\n", "[", "[", "5.0000e-01", ",", "1.2437e+02", "]", ",", "[", "6.0000e-01", ",", "1.2441e+02", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "1.3384e+02", "]", ",", "[", "2.0000e-01", ",", "1.3384e+02", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "1.3384e+02", "]", ",", "[", "3.0000e-01", ",", "1.3386e+02", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "1.3386e+02", "]", ",", "[", "4.0000e-01", ",", "1.3388e+02", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "1.3388e+02", "]", ",", "[", "5.0000e-01", ",", "1.3391e+02", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "1.4338e+02", "]", ",", "[", "2.0000e-01", ",", "1.4339e+02", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "1.4339e+02", "]", ",", "[", "3.0000e-01", ",", "1.4341e+02", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "1.4341e+02", "]", ",", "[", "4.0000e-01", ",", "1.4343e+02", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "1.4343e+02", "]", ",", "[", "5.0000e-01", ",", "1.4346e+02", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "1.5293e+02", "]", ",", "[", "2.0000e-01", ",", "1.5294e+02", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "1.5294e+02", "]", ",", "[", "3.0000e-01", ",", "1.5295e+02", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "1.5295e+02", "]", ",", "[", "4.0000e-01", ",", "1.5297e+02", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "1.5297e+02", "]", ",", "[", "5.0000e-01", ",", "1.5301e+02", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "1.6247e+02", "]", ",", "[", "2.0000e-01", ",", "1.6248e+02", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "1.6248e+02", "]", ",", "[", "3.0000e-01", ",", "1.6250e+02", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "1.6250e+02", "]", ",", "[", "4.0000e-01", ",", "1.6252e+02", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "1.6252e+02", "]", ",", "[", "5.0000e-01", ",", "1.6255e+02", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "1.7202e+02", "]", ",", "[", "2.0000e-01", ",", "1.7203e+02", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "1.7203e+02", "]", ",", "[", "3.0000e-01", ",", "1.7204e+02", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "1.7204e+02", "]", ",", "[", "4.0000e-01", ",", "1.7207e+02", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "1.7207e+02", "]", ",", "[", "5.0000e-01", ",", "1.7210e+02", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "1.8166e+02", "]", ",", "[", "2.0000e-01", ",", "1.8167e+02", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "1.8167e+02", "]", ",", "[", "3.0000e-01", ",", "1.8169e+02", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "1.8169e+02", "]", ",", "[", "4.0000e-01", ",", "1.8171e+02", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "1.8171e+02", "]", ",", "[", "5.0000e-01", ",", "1.8174e+02", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "1.9090e+01", "]", ",", "[", "2.0000e-01", ",", "1.9100e+01", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "1.9100e+01", "]", ",", "[", "3.0000e-01", ",", "1.9110e+01", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "1.9110e+01", "]", ",", "[", "4.0000e-01", ",", "1.9140e+01", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "1.9140e+01", "]", ",", "[", "5.0000e-01", ",", "1.9170e+01", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "1.9121e+02", "]", ",", "[", "2.0000e-01", ",", "1.9122e+02", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "1.9122e+02", "]", ",", "[", "3.0000e-01", ",", "1.9123e+02", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "1.9123e+02", "]", ",", "[", "4.0000e-01", ",", "1.9126e+02", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "1.9126e+02", "]", ",", "[", "5.0000e-01", ",", "1.9129e+02", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "2.0075e+02", "]", ",", "[", "2.0000e-01", ",", "2.0076e+02", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "2.0076e+02", "]", ",", "[", "3.0000e-01", ",", "2.0078e+02", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "2.0078e+02", "]", ",", "[", "4.0000e-01", ",", "2.0081e+02", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "2.0081e+02", "]", ",", "[", "5.0000e-01", ",", "2.0085e+02", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "2.8640e+01", "]", ",", "[", "2.0000e-01", ",", "2.8640e+01", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "2.8640e+01", "]", ",", "[", "3.0000e-01", ",", "2.8660e+01", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "2.8660e+01", "]", ",", "[", "4.0000e-01", ",", "2.8680e+01", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "2.8680e+01", "]", ",", "[", "5.0000e-01", ",", "2.8710e+01", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "3.8180e+01", "]", ",", "[", "2.0000e-01", ",", "3.8190e+01", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "3.8190e+01", "]", ",", "[", "3.0000e-01", ",", "3.8210e+01", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "3.8210e+01", "]", ",", "[", "4.0000e-01", ",", "3.8230e+01", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "3.8230e+01", "]", ",", "[", "5.0000e-01", ",", "3.8260e+01", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "4.7730e+01", "]", ",", "[", "2.0000e-01", ",", "4.7740e+01", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "4.7740e+01", "]", ",", "[", "3.0000e-01", ",", "4.7750e+01", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "4.7750e+01", "]", ",", "[", "4.0000e-01", ",", "4.7770e+01", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "4.7770e+01", "]", ",", "[", "5.0000e-01", ",", "4.7810e+01", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "5.7270e+01", "]", ",", "[", "2.0000e-01", ",", "5.7280e+01", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "5.7280e+01", "]", ",", "[", "3.0000e-01", ",", "5.7300e+01", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "5.7300e+01", "]", ",", "[", "4.0000e-01", ",", "5.7320e+01", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "5.7320e+01", "]", ",", "[", "5.0000e-01", ",", "5.7350e+01", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "6.6920e+01", "]", ",", "[", "2.0000e-01", ",", "6.6930e+01", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "6.6930e+01", "]", ",", "[", "3.0000e-01", ",", "6.6940e+01", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "6.6940e+01", "]", ",", "[", "4.0000e-01", ",", "6.6970e+01", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "6.6970e+01", "]", ",", "[", "5.0000e-01", ",", "6.7000e+01", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "7.6460e+01", "]", ",", "[", "2.0000e-01", ",", "7.6470e+01", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "7.6470e+01", "]", ",", "[", "3.0000e-01", ",", "7.6490e+01", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "7.6490e+01", "]", ",", "[", "4.0000e-01", ",", "7.6510e+01", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "7.6510e+01", "]", ",", "[", "5.0000e-01", ",", "7.6540e+01", "]", "]", ",", "\n", "[", "[", "1.0000e-01", ",", "8.6010e+01", "]", ",", "[", "2.0000e-01", ",", "8.6020e+01", "]", "]", ",", "\n", "[", "[", "2.0000e-01", ",", "8.6020e+01", "]", ",", "[", "3.0000e-01", ",", "8.6030e+01", "]", "]", ",", "\n", "[", "[", "3.0000e-01", ",", "8.6030e+01", "]", ",", "[", "4.0000e-01", ",", "8.6060e+01", "]", "]", ",", "\n", "[", "[", "4.0000e-01", ",", "8.6060e+01", "]", ",", "[", "5.0000e-01", ",", "8.6090e+01", "]", "]", "]", "\n", ")", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "segs", ",", "expected_segs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_visualizers.TestPlotters.test_plot_ray_results": [[315, 380], ["os.path.dirname", "os.path.join", "flow.create_parser", "flow.create_parser", "flow.create_parser", "flow.create_parser.parse_args", "flow.plot_progress", "flow.plot_progress", "flow.plot_progress", "flow.create_parser.parse_args", "flow.plot_progress", "flow.plot_progress", "flow.plot_progress", "io.StringIO", "io.StringIO.getvalue", "os.path.realpath", "test_visualizers.TestPlotters.assertRaises", "flow.create_parser.parse_args", "flow.plot_progress", "flow.plot_progress", "flow.plot_progress", "test_visualizers.TestPlotters.assertRaises", "flow.create_parser.parse_args", "flow.plot_progress", "flow.plot_progress", "flow.plot_progress", "contextlib.redirect_stdout", "flow.create_parser.parse_args", "flow.plot_progress", "flow.plot_progress", "flow.plot_progress", "test_visualizers.TestPlotters.assertTrue"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.capacity_diagram_generator.create_parser", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.capacity_diagram_generator.create_parser", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.capacity_diagram_generator.create_parser", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.plot_ray_results.plot_progress", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.plot_ray_results.plot_progress", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.plot_ray_results.plot_progress", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.plot_ray_results.plot_progress", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.plot_ray_results.plot_progress", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.plot_ray_results.plot_progress", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.plot_ray_results.plot_progress", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.plot_ray_results.plot_progress", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.plot_ray_results.plot_progress", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.plot_ray_results.plot_progress", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.plot_ray_results.plot_progress", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.plot_ray_results.plot_progress", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.plot_ray_results.plot_progress", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.plot_ray_results.plot_progress", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.visualize.plot_ray_results.plot_progress"], ["", "def", "test_plot_ray_results", "(", "self", ")", ":", "\n", "        ", "dir_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "'test_files/progress.csv'", ")", "\n", "\n", "parser", "=", "prr", ".", "create_parser", "(", ")", "\n", "\n", "# test with one column", "\n", "args", "=", "parser", ".", "parse_args", "(", "[", "file_path", ",", "'episode_reward_mean'", "]", ")", "\n", "prr", ".", "plot_progress", "(", "args", ".", "file", ",", "args", ".", "columns", ")", "\n", "\n", "# test with several columns", "\n", "args", "=", "parser", ".", "parse_args", "(", "[", "file_path", ",", "'episode_reward_mean'", ",", "\n", "'episode_reward_min'", ",", "'episode_reward_max'", "]", ")", "\n", "prr", ".", "plot_progress", "(", "args", ".", "file", ",", "args", ".", "columns", ")", "\n", "\n", "# test with non-existing column name", "\n", "with", "self", ".", "assertRaises", "(", "KeyError", ")", ":", "\n", "            ", "args", "=", "parser", ".", "parse_args", "(", "[", "file_path", ",", "'episode_reward'", "]", ")", "\n", "prr", ".", "plot_progress", "(", "args", ".", "file", ",", "args", ".", "columns", ")", "\n", "\n", "# test with column containing non-float values", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "args", "=", "parser", ".", "parse_args", "(", "[", "file_path", ",", "'info'", "]", ")", "\n", "prr", ".", "plot_progress", "(", "args", ".", "file", ",", "args", ".", "columns", ")", "\n", "\n", "# test that script outputs available column names if none is given", "\n", "", "column_names", "=", "[", "\n", "'episode_reward_max'", ",", "\n", "'episode_reward_min'", ",", "\n", "'episode_reward_mean'", ",", "\n", "'episode_len_mean'", ",", "\n", "'episodes_this_iter'", ",", "\n", "'policy_reward_mean'", ",", "\n", "'custom_metrics'", ",", "\n", "'sampler_perf'", ",", "\n", "'off_policy_estimator'", ",", "\n", "'num_metric_batches_dropped'", ",", "\n", "'info'", ",", "\n", "'timesteps_this_iter'", ",", "\n", "'done'", ",", "\n", "'timesteps_total'", ",", "\n", "'episodes_total'", ",", "\n", "'training_iteration'", ",", "\n", "'experiment_id'", ",", "\n", "'date'", ",", "\n", "'timestamp'", ",", "\n", "'time_this_iter_s'", ",", "\n", "'time_total_s'", ",", "\n", "'pid'", ",", "\n", "'hostname'", ",", "\n", "'node_ip'", ",", "\n", "'config'", ",", "\n", "'time_since_restore'", ",", "\n", "'timesteps_since_restore'", ",", "\n", "'iterations_since_restore'", "\n", "]", "\n", "\n", "temp_stdout", "=", "StringIO", "(", ")", "\n", "with", "contextlib", ".", "redirect_stdout", "(", "temp_stdout", ")", ":", "\n", "            ", "args", "=", "parser", ".", "parse_args", "(", "[", "file_path", "]", ")", "\n", "prr", ".", "plot_progress", "(", "args", ".", "file", ",", "args", ".", "columns", ")", "\n", "", "output", "=", "temp_stdout", ".", "getvalue", "(", ")", "\n", "\n", "for", "column", "in", "column_names", ":", "\n", "            ", "self", ".", "assertTrue", "(", "column", "in", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_collisions.TestCollisions.test_collide": [[17, 69], ["flow.core.params.SumoParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.NetParams", "tests.setup_scripts.traffic_light_grid_mxn_exp_setup", "flow.core.experiment.Experiment", "range", "flow.core.experiment.Experiment.run", "int", "int", "int", "int", "env.k.traffic_light.set_state", "flow.core.params.SumoCarFollowingParams", "str"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.traffic_light_grid_mxn_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.set_state"], ["def", "test_collide", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests collisions in the absence of inflows.\"\"\"", "\n", "# create the environment and network classes for a ring road", "\n", "sim_params", "=", "SumoParams", "(", "sim_step", "=", "1", ",", "render", "=", "False", ")", "\n", "total_vehicles", "=", "20", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"idm\"", ",", "\n", "acceleration_controller", "=", "(", "SimCarFollowingController", ",", "{", "}", ")", ",", "\n", "routing_controller", "=", "(", "GridRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "tau", "=", "0.1", ",", "carFollowModel", "=", "\"Krauss\"", ",", "minGap", "=", "2.5", ",", "\n", "speed_mode", "=", "0b00000", ",", "\n", ")", ",", "\n", "num_vehicles", "=", "total_vehicles", ")", "\n", "grid_array", "=", "{", "\n", "\"short_length\"", ":", "100", ",", "\n", "\"inner_length\"", ":", "100", ",", "\n", "\"long_length\"", ":", "100", ",", "\n", "\"row_num\"", ":", "1", ",", "\n", "\"col_num\"", ":", "1", ",", "\n", "\"cars_left\"", ":", "int", "(", "total_vehicles", "/", "4", ")", ",", "\n", "\"cars_right\"", ":", "int", "(", "total_vehicles", "/", "4", ")", ",", "\n", "\"cars_top\"", ":", "int", "(", "total_vehicles", "/", "4", ")", ",", "\n", "\"cars_bot\"", ":", "int", "(", "total_vehicles", "/", "4", ")", "\n", "}", "\n", "\n", "additional_net_params", "=", "{", "\n", "\"speed_limit\"", ":", "35", ",", "\n", "\"grid_array\"", ":", "grid_array", ",", "\n", "\"horizontal_lanes\"", ":", "1", ",", "\n", "\"vertical_lanes\"", ":", "1", "\n", "}", "\n", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "env", ",", "_", ",", "flow_params", "=", "traffic_light_grid_mxn_exp_setup", "(", "\n", "row_num", "=", "1", ",", "\n", "col_num", "=", "1", ",", "\n", "sim_params", "=", "sim_params", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "net_params", ")", "\n", "\n", "# create an experiment object", "\n", "exp", "=", "Experiment", "(", "flow_params", ")", "\n", "env", "=", "exp", ".", "env", "\n", "# go through the env and set all the lights to green", "\n", "for", "i", "in", "range", "(", "env", ".", "rows", "*", "env", ".", "cols", ")", ":", "\n", "            ", "env", ".", "k", ".", "traffic_light", ".", "set_state", "(", "\n", "node_id", "=", "'center'", "+", "str", "(", "i", ")", ",", "state", "=", "\"gggggggggggg\"", ")", "\n", "\n", "", "exp", ".", "run", "(", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_collisions.TestCollisions.test_collide_inflows": [[70, 131], ["flow.core.params.SumoParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.InFlows", "flow.core.params.InFlows.add", "flow.core.params.InFlows.add", "flow.core.params.InFlows.add", "flow.core.params.InFlows.add", "flow.core.params.NetParams", "tests.setup_scripts.traffic_light_grid_mxn_exp_setup", "flow.core.experiment.Experiment", "range", "flow.core.experiment.Experiment.run", "env.k.traffic_light.set_state", "flow.core.params.SumoCarFollowingParams", "str"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.traffic_light_grid_mxn_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.set_state"], ["", "def", "test_collide_inflows", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests collisions in the presence of inflows.\"\"\"", "\n", "# create the environment and network classes for a ring road", "\n", "sim_params", "=", "SumoParams", "(", "sim_step", "=", "1", ",", "render", "=", "False", ",", "seed", "=", "40", ")", "\n", "total_vehicles", "=", "0", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"idm\"", ",", "\n", "acceleration_controller", "=", "(", "SimCarFollowingController", ",", "{", "}", ")", ",", "\n", "routing_controller", "=", "(", "GridRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "tau", "=", "0.1", ",", "carFollowModel", "=", "\"Krauss\"", ",", "minGap", "=", "2.5", ",", "\n", "speed_mode", "=", "0b00000", ",", "\n", ")", ",", "\n", "num_vehicles", "=", "total_vehicles", ")", "\n", "grid_array", "=", "{", "\n", "\"short_length\"", ":", "100", ",", "\n", "\"inner_length\"", ":", "100", ",", "\n", "\"long_length\"", ":", "100", ",", "\n", "\"row_num\"", ":", "1", ",", "\n", "\"col_num\"", ":", "1", ",", "\n", "\"cars_left\"", ":", "0", ",", "\n", "\"cars_right\"", ":", "0", ",", "\n", "\"cars_top\"", ":", "0", ",", "\n", "\"cars_bot\"", ":", "0", "\n", "}", "\n", "\n", "additional_net_params", "=", "{", "\n", "\"speed_limit\"", ":", "35", ",", "\n", "\"grid_array\"", ":", "grid_array", ",", "\n", "\"horizontal_lanes\"", ":", "1", ",", "\n", "\"vertical_lanes\"", ":", "1", "\n", "}", "\n", "\n", "inflows", "=", "InFlows", "(", ")", "\n", "inflows", ".", "add", "(", "veh_type", "=", "\"idm\"", ",", "edge", "=", "\"bot0_0\"", ",", "vehs_per_hour", "=", "1000", ")", "\n", "inflows", ".", "add", "(", "veh_type", "=", "\"idm\"", ",", "edge", "=", "\"top0_1\"", ",", "vehs_per_hour", "=", "1000", ")", "\n", "inflows", ".", "add", "(", "veh_type", "=", "\"idm\"", ",", "edge", "=", "\"left1_0\"", ",", "vehs_per_hour", "=", "1000", ")", "\n", "inflows", ".", "add", "(", "veh_type", "=", "\"idm\"", ",", "edge", "=", "\"right0_0\"", ",", "vehs_per_hour", "=", "1000", ")", "\n", "\n", "net_params", "=", "NetParams", "(", "\n", "inflows", "=", "inflows", ",", "\n", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "_", ",", "_", ",", "flow_params", "=", "traffic_light_grid_mxn_exp_setup", "(", "\n", "row_num", "=", "1", ",", "\n", "col_num", "=", "1", ",", "\n", "sim_params", "=", "sim_params", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "net_params", ")", "\n", "\n", "# instantiate an experiment class", "\n", "exp", "=", "Experiment", "(", "flow_params", ")", "\n", "env", "=", "exp", ".", "env", "\n", "\n", "# go through the env and set all the lights to green", "\n", "for", "i", "in", "range", "(", "env", ".", "rows", "*", "env", ".", "cols", ")", ":", "\n", "            ", "env", ".", "k", ".", "traffic_light", ".", "set_state", "(", "\n", "node_id", "=", "'center'", "+", "str", "(", "i", ")", ",", "state", "=", "\"gggggggggggg\"", ")", "\n", "\n", "", "exp", ".", "run", "(", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_util.TestEmissionToCSV.test_emission_to_csv": [[30, 60], ["flow.core.util.emission_to_csv", "test_util.TestEmissionToCSV.assertCountEqual", "test_util.TestEmissionToCSV.assertEqual", "os.path.realpath().rsplit", "open", "csv.reader", "next", "len", "dict1.append", "enumerate", "os.path.realpath", "dict"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.emission_to_csv", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["def", "test_emission_to_csv", "(", "self", ")", ":", "\n", "# current path", "\n", "        ", "current_path", "=", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ".", "rsplit", "(", "\"/\"", ",", "1", ")", "[", "0", "]", "\n", "\n", "# run the emission_to_csv function on a small emission file", "\n", "emission_to_csv", "(", "current_path", "+", "\"/test_files/test-emission.xml\"", ")", "\n", "\n", "# import the generated csv file and its headers", "\n", "dict1", "=", "[", "]", "\n", "filename", "=", "current_path", "+", "\"/test_files/test-emission.csv\"", "\n", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "infile", ":", "\n", "            ", "reader", "=", "csv", ".", "reader", "(", "infile", ")", "\n", "headers", "=", "next", "(", "reader", ")", "\n", "for", "row", "in", "reader", ":", "\n", "                ", "dict1", ".", "append", "(", "dict", "(", ")", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "headers", ")", ":", "\n", "                    ", "dict1", "[", "-", "1", "]", "[", "key", "]", "=", "row", "[", "i", "]", "\n", "\n", "# check the names of the headers", "\n", "", "", "", "expected_headers", "=", "[", "'time'", ",", "'CO'", ",", "'y'", ",", "'CO2'", ",", "'electricity'", ",", "'type'", ",", "'id'", ",", "'eclass'", ",", "\n", "'waiting'", ",", "'NOx'", ",", "'fuel'", ",", "'HC'", ",", "'x'", ",", "'route'", ",", "'relative_position'", ",", "\n", "'noise'", ",", "'angle'", ",", "'PMx'", ",", "'speed'", ",", "'edge_id'", ",", "'lane_number'", "]", "\n", "\n", "self", ".", "assertCountEqual", "(", "headers", ",", "expected_headers", ")", "\n", "\n", "# check the number of rows of the generated csv file", "\n", "# Note that, rl vehicles are missing their final (reset) values, which", "\n", "# I don't think is a problem", "\n", "self", ".", "assertEqual", "(", "len", "(", "dict1", ")", ",", "104", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_util.TestRegistry.test_make_create_env": [[65, 152], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.VehicleParams.add", "dict", "flow.utils.registry.make_create_env", "test_util.TestRegistry.assertEqual", "create_env", "test_util.TestRegistry.assertEqual", "test_util.TestRegistry.assertEqual", "test_util.TestRegistry.assertEqual", "test_util.TestRegistry.assertEqual", "test_util.TestRegistry.assertEqual", "test_util.TestRegistry.assertEqual", "test_util.TestRegistry.assertEqual", "flow.core.params.SumoCarFollowingParams", "flow.core.params.SumoCarFollowingParams", "flow.core.params.SumoParams", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env"], ["def", "test_make_create_env", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests that the make_create_env methods generates an environment with\n        the expected flow parameters.\"\"\"", "\n", "# use a flow_params dict derived from flow/benchmarks/figureeight0.py", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"human\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "\n", "\"noise\"", ":", "0.2", "\n", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "\"obey_safe_speed\"", ",", "\n", ")", ",", "\n", "num_vehicles", "=", "13", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"rl\"", ",", "\n", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "\"obey_safe_speed\"", ",", "\n", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "\n", "flow_params", "=", "dict", "(", "\n", "exp_tag", "=", "\"figure_eight_0\"", ",", "\n", "env_name", "=", "AccelEnv", ",", "\n", "network", "=", "FigureEightNetwork", ",", "\n", "simulator", "=", "'traci'", ",", "\n", "sim", "=", "SumoParams", "(", "\n", "sim_step", "=", "0.1", ",", "\n", "render", "=", "False", ",", "\n", ")", ",", "\n", "env", "=", "EnvParams", "(", "\n", "horizon", "=", "1500", ",", "\n", "additional_params", "=", "{", "\n", "\"target_velocity\"", ":", "20", ",", "\n", "\"max_accel\"", ":", "3", ",", "\n", "\"max_decel\"", ":", "3", ",", "\n", "\"sort_vehicles\"", ":", "False", "\n", "}", ",", "\n", ")", ",", "\n", "net", "=", "NetParams", "(", "\n", "additional_params", "=", "{", "\n", "\"radius_ring\"", ":", "30", ",", "\n", "\"lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", ",", "\n", "}", ",", "\n", ")", ",", "\n", "veh", "=", "vehicles", ",", "\n", "initial", "=", "InitialConfig", "(", ")", ",", "\n", "tls", "=", "TrafficLightParams", "(", ")", ",", "\n", ")", "\n", "\n", "# some random version number for testing", "\n", "v", "=", "23434", "\n", "\n", "# call make_create_env", "\n", "create_env", ",", "env_name", "=", "make_create_env", "(", "params", "=", "flow_params", ",", "version", "=", "v", ")", "\n", "\n", "# check that the name is correct", "\n", "self", ".", "assertEqual", "(", "env_name", ",", "\n", "'{}-v{}'", ".", "format", "(", "flow_params", "[", "\"env_name\"", "]", ".", "__name__", ",", "v", ")", ")", "\n", "\n", "# create the gym environment", "\n", "env", "=", "create_env", "(", ")", "\n", "\n", "# Note that we expect the port number in sim_params to change, and", "\n", "# that this feature is in fact needed to avoid race conditions", "\n", "flow_params", "[", "\"sim\"", "]", ".", "port", "=", "env", ".", "sim_params", ".", "port", "\n", "\n", "# check that each of the parameter match", "\n", "self", ".", "assertEqual", "(", "env", ".", "env_params", ".", "__dict__", ",", "\n", "flow_params", "[", "\"env\"", "]", ".", "__dict__", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "sim_params", ".", "__dict__", ",", "\n", "flow_params", "[", "\"sim\"", "]", ".", "__dict__", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "network", ".", "traffic_lights", ".", "__dict__", ",", "\n", "flow_params", "[", "\"tls\"", "]", ".", "__dict__", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "net_params", ".", "__dict__", ",", "\n", "flow_params", "[", "\"net\"", "]", ".", "__dict__", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "initial_config", ".", "__dict__", ",", "\n", "flow_params", "[", "\"initial\"", "]", ".", "__dict__", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "__class__", ".", "__name__", ",", "\n", "flow_params", "[", "\"env_name\"", "]", ".", "__name__", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "network", ".", "__class__", ".", "__name__", ",", "\n", "flow_params", "[", "\"network\"", "]", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_util.TestRllib.test_encoder_and_get_flow_params": [[157, 324], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.VehicleParams.add", "flow.core.params.InFlows", "flow.core.params.InFlows.add", "flow.core.params.InFlows.add", "flow.core.params.InFlows.add", "dict", "json.dumps", "flow.utils.rllib.get_flow_params", "os.remove", "test_util.TestRllib.assertTrue", "test_util.TestRllib.assertTrue", "test_util.TestRllib.assertTrue", "test_util.TestRllib.assertTrue", "test_util.TestRllib.assertTrue", "test_util.TestRllib.assertTrue", "test_util.TestRllib.assertTrue", "test_util.TestRllib.assertTrue", "test_util.TestRllib.assertTrue", "test_util.TestRllib.assertTrue", "open", "json.dump", "os.path.expanduser", "obj1.keys", "test_util.TestRllib.test_encoder_and_get_flow_params.search_dicts"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.rllib.get_flow_params", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove"], ["def", "test_encoder_and_get_flow_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests both FlowParamsEncoder and get_flow_params.\n\n        FlowParamsEncoder is used to serialize the data from a flow_params dict\n        for replay by the visualizer later. Then, the get_flow_params method is\n        used to try and read the parameters from the config file, and is\n        checked to match expected results.\n        \"\"\"", "\n", "# use a flow_params dict derived from flow/benchmarks/merge0.py", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"human\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "\"obey_safe_speed\"", ",", "\n", ")", ",", "\n", "# for testing coverage purposes, we add a routing controller", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "5", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"rl\"", ",", "\n", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "\"obey_safe_speed\"", ",", "\n", ")", ",", "\n", "num_vehicles", "=", "0", ")", "\n", "\n", "inflow", "=", "InFlows", "(", ")", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"inflow_highway\"", ",", "\n", "vehs_per_hour", "=", "1800", ",", "\n", "departLane", "=", "\"free\"", ",", "\n", "departSpeed", "=", "10", ")", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"rl\"", ",", "\n", "edge", "=", "\"inflow_highway\"", ",", "\n", "vehs_per_hour", "=", "200", ",", "\n", "departLane", "=", "\"free\"", ",", "\n", "departSpeed", "=", "10", ")", "\n", "inflow", ".", "add", "(", "\n", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"inflow_merge\"", ",", "\n", "vehs_per_hour", "=", "100", ",", "\n", "departLane", "=", "\"free\"", ",", "\n", "departSpeed", "=", "7.5", ")", "\n", "\n", "flow_params", "=", "dict", "(", "\n", "exp_tag", "=", "\"merge_0\"", ",", "\n", "env_name", "=", "MergePOEnv", ",", "\n", "network", "=", "MergeNetwork", ",", "\n", "sim", "=", "SumoParams", "(", "\n", "restart_instance", "=", "True", ",", "\n", "sim_step", "=", "0.5", ",", "\n", "render", "=", "False", ",", "\n", ")", ",", "\n", "env", "=", "EnvParams", "(", "\n", "horizon", "=", "750", ",", "\n", "sims_per_step", "=", "2", ",", "\n", "warmup_steps", "=", "0", ",", "\n", "additional_params", "=", "{", "\n", "\"max_accel\"", ":", "1.5", ",", "\n", "\"max_decel\"", ":", "1.5", ",", "\n", "\"target_velocity\"", ":", "20", ",", "\n", "\"num_rl\"", ":", "5", ",", "\n", "}", ",", "\n", ")", ",", "\n", "net", "=", "NetParams", "(", "\n", "inflows", "=", "inflow", ",", "\n", "additional_params", "=", "{", "\n", "\"merge_length\"", ":", "100", ",", "\n", "\"pre_merge_length\"", ":", "500", ",", "\n", "\"post_merge_length\"", ":", "100", ",", "\n", "\"merge_lanes\"", ":", "1", ",", "\n", "\"highway_lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "}", ",", "\n", ")", ",", "\n", "veh", "=", "vehicles", ",", "\n", "initial", "=", "InitialConfig", "(", ")", ",", "\n", "tls", "=", "TrafficLightParams", "(", ")", ",", "\n", ")", "\n", "\n", "# create an config dict with space for the flow_params dict", "\n", "config", "=", "{", "\"env_config\"", ":", "{", "}", "}", "\n", "\n", "# save the flow params for replay", "\n", "flow_json", "=", "json", ".", "dumps", "(", "\n", "flow_params", ",", "cls", "=", "FlowParamsEncoder", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "config", "[", "'env_config'", "]", "[", "'flow_params'", "]", "=", "flow_json", "\n", "\n", "# dump the config so we can fetch it", "\n", "json_out_file", "=", "'params.json'", "\n", "with", "open", "(", "os", ".", "path", ".", "expanduser", "(", "json_out_file", ")", ",", "'w+'", ")", "as", "outfile", ":", "\n", "            ", "json", ".", "dump", "(", "\n", "config", ",", "\n", "outfile", ",", "\n", "cls", "=", "FlowParamsEncoder", ",", "\n", "sort_keys", "=", "True", ",", "\n", "indent", "=", "4", ")", "\n", "\n", "# fetch values using utility function `get_flow_params`", "\n", "", "imported_flow_params", "=", "get_flow_params", "(", "config", ")", "\n", "\n", "# delete the created file", "\n", "os", ".", "remove", "(", "os", ".", "path", ".", "expanduser", "(", "'params.json'", ")", ")", "\n", "\n", "# test that this inflows are correct", "\n", "self", ".", "assertTrue", "(", "imported_flow_params", "[", "\"net\"", "]", ".", "inflows", ".", "__dict__", "==", "\n", "flow_params", "[", "\"net\"", "]", ".", "inflows", ".", "__dict__", ")", "\n", "\n", "imported_flow_params", "[", "\"net\"", "]", ".", "inflows", "=", "None", "\n", "flow_params", "[", "\"net\"", "]", ".", "inflows", "=", "None", "\n", "\n", "# make sure the rest of the imported flow_params match the originals", "\n", "self", ".", "assertTrue", "(", "imported_flow_params", "[", "\"env\"", "]", ".", "__dict__", "==", "flow_params", "[", "\n", "\"env\"", "]", ".", "__dict__", ")", "\n", "self", ".", "assertTrue", "(", "imported_flow_params", "[", "\"initial\"", "]", ".", "__dict__", "==", "\n", "flow_params", "[", "\"initial\"", "]", ".", "__dict__", ")", "\n", "self", ".", "assertTrue", "(", "imported_flow_params", "[", "\"tls\"", "]", ".", "__dict__", "==", "flow_params", "[", "\n", "\"tls\"", "]", ".", "__dict__", ")", "\n", "self", ".", "assertTrue", "(", "imported_flow_params", "[", "\"sim\"", "]", ".", "__dict__", "==", "flow_params", "[", "\n", "\"sim\"", "]", ".", "__dict__", ")", "\n", "self", ".", "assertTrue", "(", "imported_flow_params", "[", "\"net\"", "]", ".", "__dict__", "==", "flow_params", "[", "\n", "\"net\"", "]", ".", "__dict__", ")", "\n", "\n", "self", ".", "assertTrue", "(", "\n", "imported_flow_params", "[", "\"exp_tag\"", "]", "==", "flow_params", "[", "\"exp_tag\"", "]", ")", "\n", "self", ".", "assertTrue", "(", "\n", "imported_flow_params", "[", "\"env_name\"", "]", "==", "flow_params", "[", "\"env_name\"", "]", ")", "\n", "self", ".", "assertTrue", "(", "\n", "imported_flow_params", "[", "\"network\"", "]", "==", "flow_params", "[", "\"network\"", "]", ")", "\n", "\n", "def", "search_dicts", "(", "obj1", ",", "obj2", ")", ":", "\n", "            ", "\"\"\"Searches through dictionaries as well as lists of dictionaries\n            recursively to determine if any two components are mismatched.\"\"\"", "\n", "for", "key", "in", "obj1", ".", "keys", "(", ")", ":", "\n", "# if an next element is a list, either compare the two lists,", "\n", "# or if the lists contain dictionaries themselves, look at each", "\n", "# dictionary component recursively to check for mismatches", "\n", "                ", "if", "isinstance", "(", "obj1", "[", "key", "]", ",", "list", ")", ":", "\n", "                    ", "if", "len", "(", "obj1", "[", "key", "]", ")", ">", "0", ":", "\n", "                        ", "if", "isinstance", "(", "obj1", "[", "key", "]", "[", "0", "]", ",", "dict", ")", ":", "\n", "                            ", "for", "i", "in", "range", "(", "len", "(", "obj1", "[", "key", "]", ")", ")", ":", "\n", "                                ", "if", "not", "search_dicts", "(", "obj1", "[", "key", "]", "[", "i", "]", ",", "\n", "obj2", "[", "key", "]", "[", "i", "]", ")", ":", "\n", "                                    ", "return", "False", "\n", "", "", "", "elif", "obj1", "[", "key", "]", "!=", "obj2", "[", "key", "]", ":", "\n", "                            ", "return", "False", "\n", "# if the next element is a dict, run through it recursively to", "\n", "# determine if the separate elements of the dict match", "\n", "", "", "", "if", "isinstance", "(", "obj1", "[", "key", "]", ",", "(", "dict", ",", "collections", ".", "OrderedDict", ")", ")", ":", "\n", "                    ", "if", "not", "search_dicts", "(", "obj1", "[", "key", "]", ",", "obj2", "[", "key", "]", ")", ":", "\n", "                        ", "return", "False", "\n", "# if it is neither a list or a dictionary, compare to determine", "\n", "# if the two elements match", "\n", "", "", "elif", "obj1", "[", "key", "]", "!=", "obj2", "[", "key", "]", ":", "\n", "# if the two elements that are being compared are objects,", "\n", "# make sure that they are the same type", "\n", "                    ", "if", "not", "isinstance", "(", "obj1", "[", "key", "]", ",", "type", "(", "obj2", "[", "key", "]", ")", ")", ":", "\n", "                        ", "return", "False", "\n", "", "", "", "return", "True", "\n", "\n", "# make sure that the Vehicles class that was imported matches the", "\n", "# original one", "\n", "", "self", ".", "assertTrue", "(", "search_dicts", "(", "imported_flow_params", "[", "\"veh\"", "]", ".", "__dict__", ",", "\n", "flow_params", "[", "\"veh\"", "]", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestCFMController.setUp": [[25, 49], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "flow.core.params.SumoCarFollowingParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# add a few vehicles to the network using the requested model", "\n", "# also make sure that the input params are what is expected", "\n", "        ", "contr_params", "=", "{", "\n", "\"time_delay\"", ":", "0", ",", "\n", "\"k_d\"", ":", "1", ",", "\n", "\"k_v\"", ":", "1", ",", "\n", "\"k_c\"", ":", "1", ",", "\n", "\"d_des\"", ":", "1", ",", "\n", "\"v_des\"", ":", "8", ",", "\n", "\"noise\"", ":", "0", "\n", "}", "\n", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test_0\"", ",", "\n", "acceleration_controller", "=", "(", "CFMController", ",", "contr_params", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "accel", "=", "20", ",", "decel", "=", "5", ")", ",", "\n", "num_vehicles", "=", "5", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestCFMController.tearDown": [[50, 56], ["test_controllers.TestCFMController.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestCFMController.test_get_action": [[57, 73], ["test_controllers.TestCFMController.env.reset", "test_controllers.TestCFMController.env.k.vehicle.get_ids", "enumerate", "numpy.testing.assert_array_almost_equal", "test_controllers.TestCFMController.env.k.vehicle.set_headway", "test_controllers.TestCFMController.env.k.vehicle.get_acc_controller().get_action", "test_controllers.TestCFMController.env.k.vehicle.get_acc_controller"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller"], ["", "def", "test_get_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "\n", "test_headways", "=", "[", "5", ",", "10", ",", "15", ",", "20", ",", "25", "]", "\n", "for", "i", ",", "veh_id", "in", "enumerate", "(", "ids", ")", ":", "\n", "            ", "self", ".", "env", ".", "k", ".", "vehicle", ".", "set_headway", "(", "veh_id", ",", "test_headways", "[", "i", "]", ")", "\n", "\n", "", "requested_accel", "=", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_acc_controller", "(", "veh_id", ")", ".", "get_action", "(", "self", ".", "env", ")", "\n", "for", "veh_id", "in", "ids", "\n", "]", "\n", "\n", "expected_accel", "=", "[", "12.", ",", "17.", ",", "22.", ",", "27.", ",", "32.", "]", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "requested_accel", ",", "expected_accel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestBCMController.setUp": [[80, 98], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "flow.core.params.SumoCarFollowingParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# add a few vehicles to the network using the requested model", "\n", "# also make sure that the input params are what is expected", "\n", "        ", "contr_params", "=", "{", "\"time_delay\"", ":", "0", ",", "\"k_d\"", ":", "1", ",", "\"k_v\"", ":", "1", ",", "\"k_c\"", ":", "1", ",", "\"d_des\"", ":", "1", ",", "\n", "\"v_des\"", ":", "8", ",", "\"noise\"", ":", "0", "}", "\n", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "BCMController", ",", "contr_params", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "accel", "=", "15", ",", "decel", "=", "5", ")", ",", "\n", "num_vehicles", "=", "5", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestBCMController.tearDown": [[99, 105], ["test_controllers.TestBCMController.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestBCMController.test_get_action": [[106, 122], ["test_controllers.TestBCMController.env.reset", "test_controllers.TestBCMController.env.k.vehicle.get_ids", "enumerate", "numpy.testing.assert_array_almost_equal", "test_controllers.TestBCMController.env.k.vehicle.set_headway", "test_controllers.TestBCMController.env.k.vehicle.get_acc_controller().get_action", "test_controllers.TestBCMController.env.k.vehicle.get_acc_controller"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller"], ["", "def", "test_get_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "\n", "test_headways", "=", "[", "5", ",", "10", ",", "15", ",", "20", ",", "25", "]", "\n", "for", "i", ",", "veh_id", "in", "enumerate", "(", "ids", ")", ":", "\n", "            ", "self", ".", "env", ".", "k", ".", "vehicle", ".", "set_headway", "(", "veh_id", ",", "test_headways", "[", "i", "]", ")", "\n", "\n", "", "requested_accel", "=", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_acc_controller", "(", "veh_id", ")", ".", "get_action", "(", "self", ".", "env", ")", "\n", "for", "veh_id", "in", "ids", "\n", "]", "\n", "\n", "expected_accel", "=", "[", "-", "12.", ",", "13.", ",", "13.", ",", "13.", ",", "13.", "]", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "requested_accel", ",", "expected_accel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestOVMController.setUp": [[129, 153], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "flow.core.params.SumoCarFollowingParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# add a few vehicles to the network using the requested model", "\n", "# also make sure that the input params are what is expected", "\n", "        ", "contr_params", "=", "{", "\n", "\"time_delay\"", ":", "0", ",", "\n", "\"alpha\"", ":", "1", ",", "\n", "\"beta\"", ":", "1", ",", "\n", "\"h_st\"", ":", "2", ",", "\n", "\"h_go\"", ":", "15", ",", "\n", "\"v_max\"", ":", "30", ",", "\n", "\"noise\"", ":", "0", "\n", "}", "\n", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "OVMController", ",", "contr_params", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "accel", "=", "15", ",", "decel", "=", "5", ")", ",", "\n", "num_vehicles", "=", "5", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestOVMController.tearDown": [[154, 160], ["test_controllers.TestOVMController.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestOVMController.test_get_action": [[161, 177], ["test_controllers.TestOVMController.env.reset", "test_controllers.TestOVMController.env.k.vehicle.get_ids", "enumerate", "numpy.testing.assert_array_almost_equal", "test_controllers.TestOVMController.env.k.vehicle.set_headway", "test_controllers.TestOVMController.env.k.vehicle.get_acc_controller().get_action", "test_controllers.TestOVMController.env.k.vehicle.get_acc_controller"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller"], ["", "def", "test_get_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "\n", "test_headways", "=", "[", "0", ",", "10", ",", "5", ",", "5", ",", "5", "]", "\n", "for", "i", ",", "veh_id", "in", "enumerate", "(", "ids", ")", ":", "\n", "            ", "self", ".", "env", ".", "k", ".", "vehicle", ".", "set_headway", "(", "veh_id", ",", "test_headways", "[", "i", "]", ")", "\n", "\n", "", "requested_accel", "=", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_acc_controller", "(", "veh_id", ")", ".", "get_action", "(", "self", ".", "env", ")", "\n", "for", "veh_id", "in", "ids", "\n", "]", "\n", "\n", "expected_accel", "=", "[", "0.", ",", "20.319073", ",", "3.772339", ",", "3.772339", ",", "3.772339", "]", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "requested_accel", ",", "expected_accel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestLinearOVM.setUp": [[185, 203], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "flow.core.params.SumoCarFollowingParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# add a few vehicles to the network using the requested model", "\n", "# also make sure that the input params are what is expected", "\n", "        ", "contr_params", "=", "{", "\"time_delay\"", ":", "0", ",", "\"v_max\"", ":", "30", ",", "\"adaptation\"", ":", "0.65", ",", "\n", "\"h_st\"", ":", "5", ",", "\"noise\"", ":", "0", "}", "\n", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "LinearOVM", ",", "contr_params", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "accel", "=", "15", ",", "decel", "=", "5", ")", ",", "\n", "num_vehicles", "=", "5", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestLinearOVM.tearDown": [[204, 210], ["test_controllers.TestLinearOVM.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestLinearOVM.test_get_action": [[211, 227], ["test_controllers.TestLinearOVM.env.reset", "test_controllers.TestLinearOVM.env.k.vehicle.get_ids", "enumerate", "numpy.testing.assert_array_almost_equal", "test_controllers.TestLinearOVM.env.k.vehicle.set_headway", "test_controllers.TestLinearOVM.env.k.vehicle.get_acc_controller().get_action", "test_controllers.TestLinearOVM.env.k.vehicle.get_acc_controller"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller"], ["", "def", "test_get_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "\n", "test_headways", "=", "[", "5", ",", "10", ",", "10", ",", "15", ",", "0", "]", "\n", "for", "i", ",", "veh_id", "in", "enumerate", "(", "ids", ")", ":", "\n", "            ", "self", ".", "env", ".", "k", ".", "vehicle", ".", "set_headway", "(", "veh_id", ",", "test_headways", "[", "i", "]", ")", "\n", "\n", "", "requested_accel", "=", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_acc_controller", "(", "veh_id", ")", ".", "get_action", "(", "self", ".", "env", ")", "\n", "for", "veh_id", "in", "ids", "\n", "]", "\n", "\n", "expected_accel", "=", "[", "0.", ",", "12.992308", ",", "12.992308", ",", "25.984615", ",", "0.", "]", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "requested_accel", ",", "expected_accel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestIDMController.setUp": [[234, 250], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "flow.core.params.SumoCarFollowingParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# add a few vehicles to the network using the requested model", "\n", "# also make sure that the input params are what is expected", "\n", "        ", "contr_params", "=", "{", "\"v0\"", ":", "30", ",", "\"b\"", ":", "1.5", ",", "\"delta\"", ":", "4", ",", "\"s0\"", ":", "2", ",", "\"noise\"", ":", "0", "}", "\n", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "contr_params", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "tau", "=", "1", ",", "accel", "=", "1", ",", "decel", "=", "5", ")", ",", "\n", "num_vehicles", "=", "5", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestIDMController.tearDown": [[251, 257], ["test_controllers.TestIDMController.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestIDMController.test_get_action": [[258, 285], ["test_controllers.TestIDMController.env.reset", "test_controllers.TestIDMController.env.k.vehicle.get_ids", "enumerate", "numpy.testing.assert_array_almost_equal", "enumerate", "test_controllers.TestIDMController.env.k.vehicle.set_headway", "test_controllers.TestIDMController.env.k.vehicle.get_acc_controller().get_action", "test_controllers.TestIDMController.env.k.vehicle.set_headway", "test_controllers.TestIDMController.env.k.vehicle.get_acc_controller().get_action", "test_controllers.TestIDMController.env.k.vehicle.get_acc_controller", "test_controllers.TestIDMController.env.k.vehicle.get_acc_controller"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller"], ["", "def", "test_get_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "\n", "test_headways", "=", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", "]", "\n", "for", "i", ",", "veh_id", "in", "enumerate", "(", "ids", ")", ":", "\n", "            ", "self", ".", "env", ".", "k", ".", "vehicle", ".", "set_headway", "(", "veh_id", ",", "test_headways", "[", "i", "]", ")", "\n", "\n", "", "requested_accel", "=", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_acc_controller", "(", "veh_id", ")", ".", "get_action", "(", "self", ".", "env", ")", "\n", "for", "veh_id", "in", "ids", "\n", "]", "\n", "\n", "expected_accel", "=", "[", "0.96", ",", "0.99", ",", "0.995556", ",", "0.9975", ",", "0.9984", "]", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "requested_accel", ",", "expected_accel", ")", "\n", "\n", "# set the perceived headway to zero", "\n", "test_headways", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "for", "i", ",", "veh_id", "in", "enumerate", "(", "ids", ")", ":", "\n", "            ", "self", ".", "env", ".", "k", ".", "vehicle", ".", "set_headway", "(", "veh_id", ",", "test_headways", "[", "i", "]", ")", "\n", "\n", "# make sure the controller doesn't return a ZeroDivisionError when the", "\n", "# headway is zero", "\n", "", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_acc_controller", "(", "veh_id", ")", ".", "get_action", "(", "self", ".", "env", ")", "\n", "for", "veh_id", "in", "ids", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.setUp_failsafe": [[295, 324], ["flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.core.params.InitialConfig", "tests.setup_scripts.ring_road_exp_setup", "flow.core.experiment.Experiment"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp_failsafe", "(", "self", ",", "vehicles", ")", ":", "\n", "        ", "additional_env_params", "=", "{", "\n", "\"target_velocity\"", ":", "8", ",", "\n", "\"max_accel\"", ":", "3", ",", "\n", "\"max_decel\"", ":", "3", ",", "\n", "\"sort_vehicles\"", ":", "False", "\n", "}", "\n", "env_params", "=", "EnvParams", "(", "additional_params", "=", "additional_env_params", ")", "\n", "\n", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "100", ",", "\n", "\"lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "initial_config", "=", "InitialConfig", "(", "bunching", "=", "10", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "_", ",", "_", ",", "flow_params", "=", "ring_road_exp_setup", "(", "\n", "vehicles", "=", "vehicles", ",", "\n", "env_params", "=", "env_params", ",", "\n", "net_params", "=", "net_params", ",", "\n", "initial_config", "=", "initial_config", ")", "\n", "\n", "flow_params", "[", "'env'", "]", ".", "horizon", "=", "200", "\n", "# instantiate an experiment class", "\n", "self", ".", "exp", "=", "Experiment", "(", "flow_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.tearDown_failsafe": [[325, 328], ["None"], "methods", ["None"], ["", "def", "tearDown_failsafe", "(", "self", ")", ":", "\n", "# free data used by the class", "\n", "        ", "self", ".", "exp", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.test_no_crash_OVM": [[329, 346], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "test_controllers.TestInstantaneousFailsafe.setUp_failsafe", "test_controllers.TestInstantaneousFailsafe.exp.run", "test_controllers.TestInstantaneousFailsafe.tearDown_failsafe"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.setUp_failsafe", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.tearDown_failsafe"], ["", "def", "test_no_crash_OVM", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "OVMController", ",", "{", "\n", "\"fail_safe\"", ":", "\"instantaneous\"", "\n", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "10", ",", "\n", ")", "\n", "\n", "self", ".", "setUp_failsafe", "(", "vehicles", "=", "vehicles", ")", "\n", "\n", "# run the experiment, see if it fails", "\n", "self", ".", "exp", ".", "run", "(", "1", ")", "\n", "\n", "self", ".", "tearDown_failsafe", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.test_no_crash_LinearOVM": [[347, 363], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "test_controllers.TestInstantaneousFailsafe.setUp_failsafe", "test_controllers.TestInstantaneousFailsafe.exp.run", "test_controllers.TestInstantaneousFailsafe.tearDown_failsafe"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.setUp_failsafe", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.tearDown_failsafe"], ["", "def", "test_no_crash_LinearOVM", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "LinearOVM", ",", "{", "\n", "\"fail_safe\"", ":", "\"instantaneous\"", "\n", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "10", ")", "\n", "\n", "self", ".", "setUp_failsafe", "(", "vehicles", "=", "vehicles", ")", "\n", "\n", "# run the experiment, see if it fails", "\n", "self", ".", "exp", ".", "run", "(", "1", ")", "\n", "\n", "self", ".", "tearDown_failsafe", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestSafeVelocityFailsafe.test_no_crash_OVM": [[371, 388], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "test_controllers.TestSafeVelocityFailsafe.setUp_failsafe", "test_controllers.TestSafeVelocityFailsafe.exp.run", "test_controllers.TestSafeVelocityFailsafe.tearDown_failsafe"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.setUp_failsafe", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.tearDown_failsafe"], ["def", "test_no_crash_OVM", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "OVMController", ",", "{", "\n", "\"fail_safe\"", ":", "\"safe_velocity\"", "\n", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "10", ",", "\n", ")", "\n", "\n", "self", ".", "setUp_failsafe", "(", "vehicles", "=", "vehicles", ")", "\n", "\n", "# run the experiment, see if it fails", "\n", "self", ".", "exp", ".", "run", "(", "1", ")", "\n", "\n", "self", ".", "tearDown_failsafe", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestSafeVelocityFailsafe.test_no_crash_LinearOVM": [[389, 406], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "test_controllers.TestSafeVelocityFailsafe.setUp_failsafe", "test_controllers.TestSafeVelocityFailsafe.exp.run", "test_controllers.TestSafeVelocityFailsafe.tearDown_failsafe"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.setUp_failsafe", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.tearDown_failsafe"], ["", "def", "test_no_crash_LinearOVM", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "LinearOVM", ",", "{", "\n", "\"fail_safe\"", ":", "\"safe_velocity\"", "\n", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "10", ",", "\n", ")", "\n", "\n", "self", ".", "setUp_failsafe", "(", "vehicles", "=", "vehicles", ")", "\n", "\n", "# run the experiment, see if it fails", "\n", "self", ".", "exp", ".", "run", "(", "1", ")", "\n", "\n", "self", ".", "tearDown_failsafe", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestFeasibleAccelFailsafe.test_no_crash_OVM": [[414, 431], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "test_controllers.TestFeasibleAccelFailsafe.setUp_failsafe", "test_controllers.TestFeasibleAccelFailsafe.exp.run", "test_controllers.TestFeasibleAccelFailsafe.tearDown_failsafe"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.setUp_failsafe", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.tearDown_failsafe"], ["def", "test_no_crash_OVM", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "OVMController", ",", "{", "\n", "\"fail_safe\"", ":", "\"feasible_accel\"", "\n", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "10", ",", "\n", ")", "\n", "\n", "self", ".", "setUp_failsafe", "(", "vehicles", "=", "vehicles", ")", "\n", "\n", "# run the experiment, see if it fails", "\n", "self", ".", "exp", ".", "run", "(", "1", ")", "\n", "\n", "self", ".", "tearDown_failsafe", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestFeasibleAccelFailsafe.test_no_crash_LinearOVM": [[432, 449], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "test_controllers.TestFeasibleAccelFailsafe.setUp_failsafe", "test_controllers.TestFeasibleAccelFailsafe.exp.run", "test_controllers.TestFeasibleAccelFailsafe.tearDown_failsafe"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.setUp_failsafe", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.tearDown_failsafe"], ["", "def", "test_no_crash_LinearOVM", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "LinearOVM", ",", "{", "\n", "\"fail_safe\"", ":", "\"feasible_accel\"", "\n", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "10", ",", "\n", ")", "\n", "\n", "self", ".", "setUp_failsafe", "(", "vehicles", "=", "vehicles", ")", "\n", "\n", "# run the experiment, see if it fails", "\n", "self", ".", "exp", ".", "run", "(", "1", ")", "\n", "\n", "self", ".", "tearDown_failsafe", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestObeySpeedLimitFailsafe.test_no_crash_OVM": [[457, 474], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "test_controllers.TestObeySpeedLimitFailsafe.setUp_failsafe", "test_controllers.TestObeySpeedLimitFailsafe.exp.run", "test_controllers.TestObeySpeedLimitFailsafe.tearDown_failsafe"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.setUp_failsafe", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.tearDown_failsafe"], ["def", "test_no_crash_OVM", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "OVMController", ",", "{", "\n", "\"fail_safe\"", ":", "\"obey_speed_limit\"", "\n", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "10", ",", "\n", ")", "\n", "\n", "self", ".", "setUp_failsafe", "(", "vehicles", "=", "vehicles", ")", "\n", "\n", "# run the experiment, see if it fails", "\n", "self", ".", "exp", ".", "run", "(", "1", ")", "\n", "\n", "self", ".", "tearDown_failsafe", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestObeySpeedLimitFailsafe.test_no_crash_LinearOVM": [[475, 492], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "test_controllers.TestObeySpeedLimitFailsafe.setUp_failsafe", "test_controllers.TestObeySpeedLimitFailsafe.exp.run", "test_controllers.TestObeySpeedLimitFailsafe.tearDown_failsafe"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.setUp_failsafe", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.tearDown_failsafe"], ["", "def", "test_no_crash_LinearOVM", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "LinearOVM", ",", "{", "\n", "\"fail_safe\"", ":", "\"obey_speed_limit\"", "\n", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "10", ",", "\n", ")", "\n", "\n", "self", ".", "setUp_failsafe", "(", "vehicles", "=", "vehicles", ")", "\n", "\n", "# run the experiment, see if it fails", "\n", "self", ".", "exp", ".", "run", "(", "1", ")", "\n", "\n", "self", ".", "tearDown_failsafe", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestBrokenFailsafe.test_invalid_failsafe_string": [[500, 537], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.core.params.InitialConfig", "test_controllers.TestBrokenFailsafe.tearDown_failsafe", "test_controllers.TestBrokenFailsafe.assertRaises", "tests.setup_scripts.ring_road_exp_setup"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.tearDown_failsafe", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "test_invalid_failsafe_string", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "OVMController", ",", "{", "\n", "\"fail_safe\"", ":", "\"default\"", "\n", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "10", ",", "\n", ")", "\n", "\n", "additional_env_params", "=", "{", "\n", "\"target_velocity\"", ":", "8", ",", "\n", "\"max_accel\"", ":", "3", ",", "\n", "\"max_decel\"", ":", "3", ",", "\n", "\"sort_vehicles\"", ":", "False", "\n", "}", "\n", "env_params", "=", "EnvParams", "(", "additional_params", "=", "additional_env_params", ")", "\n", "\n", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "100", ",", "\n", "\"lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "initial_config", "=", "InitialConfig", "(", "bunching", "=", "10", ")", "\n", "\n", "# create the environment and network classes, see that it raises ValueError", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ",", "\n", "env_params", "=", "env_params", ",", "\n", "net_params", "=", "net_params", ",", "\n", "initial_config", "=", "initial_config", ")", "\n", "\n", "", "self", ".", "tearDown_failsafe", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestBrokenFailsafe.test_invalid_failsafe_type": [[538, 575], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.core.params.InitialConfig", "test_controllers.TestBrokenFailsafe.tearDown_failsafe", "test_controllers.TestBrokenFailsafe.assertRaises", "tests.setup_scripts.ring_road_exp_setup"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestInstantaneousFailsafe.tearDown_failsafe", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["", "def", "test_invalid_failsafe_type", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "LinearOVM", ",", "{", "\n", "\"fail_safe\"", ":", "True", "\n", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "10", ",", "\n", ")", "\n", "\n", "additional_env_params", "=", "{", "\n", "\"target_velocity\"", ":", "8", ",", "\n", "\"max_accel\"", ":", "3", ",", "\n", "\"max_decel\"", ":", "3", ",", "\n", "\"sort_vehicles\"", ":", "False", "\n", "}", "\n", "env_params", "=", "EnvParams", "(", "additional_params", "=", "additional_env_params", ")", "\n", "\n", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "100", ",", "\n", "\"lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "initial_config", "=", "InitialConfig", "(", "bunching", "=", "10", ")", "\n", "\n", "# create the environment and network classes, see that it raises ValueError", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ",", "\n", "env_params", "=", "env_params", ",", "\n", "net_params", "=", "net_params", ",", "\n", "initial_config", "=", "initial_config", ")", "\n", "\n", "", "self", ".", "tearDown_failsafe", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestStaticLaneChanger.setUp": [[583, 595], ["flow.core.params.NetParams", "tests.setup_scripts.ring_road_exp_setup"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# add an extra lane to the ring road network", "\n", "        ", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "230", ",", "\n", "\"lanes\"", ":", "2", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "net_params", "=", "net_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestStaticLaneChanger.tearDown": [[596, 602], ["test_controllers.TestStaticLaneChanger.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestStaticLaneChanger.test_static_lane_changer": [[603, 628], ["test_controllers.TestStaticLaneChanger.env.reset", "test_controllers.TestStaticLaneChanger.env.k.vehicle.get_ids", "range", "test_controllers.TestStaticLaneChanger.env.reset", "range", "test_controllers.TestStaticLaneChanger.assertEqual", "test_controllers.TestStaticLaneChanger.env.k.vehicle.get_lane", "test_controllers.TestStaticLaneChanger.env.step", "test_controllers.TestStaticLaneChanger.env.k.vehicle.get_lane", "test_controllers.TestStaticLaneChanger.env.step", "sum", "test_controllers.TestStaticLaneChanger.env.k.vehicle.get_lane", "test_controllers.TestStaticLaneChanger.env.k.vehicle.get_lane", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane"], ["", "def", "test_static_lane_changer", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "\n", "# run the experiment for a few iterations and collect the lane index", "\n", "# for vehicles", "\n", "lanes", "=", "[", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_lane", "(", "veh_id", ")", "for", "veh_id", "in", "ids", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "self", ".", "env", ".", "step", "(", "rl_actions", "=", "[", "]", ")", "\n", "lanes", "+=", "[", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_lane", "(", "veh_id", ")", "for", "veh_id", "in", "ids", "]", "\n", "\n", "# set the timer as very high and reset (the timer used to cause bugs at", "\n", "# the beginning of a new run for this controller)", "\n", "", "self", ".", "env", ".", "timer", "=", "10000", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "# run the experiment for a few more iterations and collect the lane", "\n", "# index for vehicles", "\n", "lanes", "=", "[", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_lane", "(", "veh_id", ")", "for", "veh_id", "in", "ids", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "self", ".", "env", ".", "step", "(", "rl_actions", "=", "[", "]", ")", "\n", "lanes", "+=", "[", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_lane", "(", "veh_id", ")", "for", "veh_id", "in", "ids", "]", "\n", "\n", "# assert that all lane indices are zero", "\n", "", "self", ".", "assertEqual", "(", "sum", "(", "np", ".", "array", "(", "lanes", ")", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestFollowerStopper.setUp": [[637, 653], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "flow.core.params.SumoCarFollowingParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# add a few vehicles to the network using the requested model", "\n", "# also make sure that the input params are what is expected", "\n", "        ", "contr_params", "=", "{", "\"v_des\"", ":", "7.5", "}", "\n", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test_0\"", ",", "\n", "acceleration_controller", "=", "(", "FollowerStopper", ",", "contr_params", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "accel", "=", "20", ",", "decel", "=", "5", ")", ",", "\n", "num_vehicles", "=", "5", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestFollowerStopper.tearDown": [[654, 660], ["test_controllers.TestFollowerStopper.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestFollowerStopper.test_get_action": [[661, 679], ["test_controllers.TestFollowerStopper.env.reset", "test_controllers.TestFollowerStopper.env.k.vehicle.get_ids", "enumerate", "numpy.testing.assert_array_almost_equal", "test_controllers.TestFollowerStopper.env.k.vehicle.set_headway", "test_controllers.TestFollowerStopper.env.k.vehicle.test_set_speed", "test_controllers.TestFollowerStopper.env.k.vehicle.get_acc_controller().get_action", "test_controllers.TestFollowerStopper.env.k.vehicle.get_acc_controller"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller"], ["", "def", "test_get_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "\n", "test_headways", "=", "[", "5", ",", "10", ",", "15", ",", "20", ",", "25", "]", "\n", "test_speeds", "=", "[", "5", ",", "7.5", ",", "7.5", ",", "8", ",", "7", "]", "\n", "for", "i", ",", "veh_id", "in", "enumerate", "(", "ids", ")", ":", "\n", "            ", "self", ".", "env", ".", "k", ".", "vehicle", ".", "set_headway", "(", "veh_id", ",", "test_headways", "[", "i", "]", ")", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "veh_id", ",", "test_speeds", "[", "i", "]", ")", "\n", "\n", "", "requested_accel", "=", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_acc_controller", "(", "veh_id", ")", ".", "get_action", "(", "self", ".", "env", ")", "\n", "for", "veh_id", "in", "ids", "\n", "]", "\n", "\n", "expected_accel", "=", "[", "0", ",", "0", ",", "0", ",", "-", "5", ",", "5", "]", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "requested_accel", ",", "expected_accel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestFollowerStopper.test_find_intersection_dist": [[680, 703], ["test_controllers.TestFollowerStopper.env.reset", "test_controllers.TestFollowerStopper.env.k.vehicle.get_ids", "enumerate", "numpy.testing.assert_array_almost_equal", "test_controllers.TestFollowerStopper.assertIsNone", "test_controllers.TestFollowerStopper.env.k.vehicle.get_acc_controller().find_intersection_dist", "test_controllers.TestFollowerStopper.env.k.vehicle.get_acc_controller().get_action", "test_controllers.TestFollowerStopper.env.k.vehicle.test_set_edge", "test_controllers.TestFollowerStopper.env.k.vehicle.get_acc_controller", "test_controllers.TestFollowerStopper.env.k.vehicle.get_acc_controller"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.find_intersection_dist", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller"], ["", "def", "test_find_intersection_dist", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "\n", "test_edges", "=", "[", "\"\"", ",", "\"center\"", "]", "\n", "for", "i", ",", "veh_id", "in", "enumerate", "(", "ids", ")", ":", "\n", "            ", "if", "i", "<", "2", ":", "\n", "                ", "self", ".", "env", ".", "k", ".", "vehicle", ".", "test_set_edge", "(", "veh_id", ",", "test_edges", "[", "i", "]", ")", "\n", "\n", "", "", "requested", "=", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_acc_controller", "(", "\n", "veh_id", ")", ".", "find_intersection_dist", "(", "self", ".", "env", ")", "\n", "for", "veh_id", "in", "ids", "\n", "]", "\n", "\n", "expected", "=", "[", "-", "10", ",", "0", ",", "23.1", ",", "34.7", ",", "46.3", "]", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "requested", ",", "expected", ")", "\n", "\n", "# we also check that the accel value is None when this value is", "\n", "# negative", "\n", "self", ".", "assertIsNone", "(", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_acc_controller", "(", "\n", "ids", "[", "0", "]", ")", ".", "get_action", "(", "self", ".", "env", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestNonLocalFollowerStopper.setUp": [[709, 725], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "flow.core.params.SumoCarFollowingParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# add a few vehicles to the network using the requested model", "\n", "# also make sure that the input params are what is expected", "\n", "        ", "contr_params", "=", "{", "\"v_des\"", ":", "7.5", "}", "\n", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test_0\"", ",", "\n", "acceleration_controller", "=", "(", "NonLocalFollowerStopper", ",", "contr_params", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "accel", "=", "20", ",", "decel", "=", "5", ")", ",", "\n", "num_vehicles", "=", "5", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestNonLocalFollowerStopper.tearDown": [[726, 732], ["test_controllers.TestNonLocalFollowerStopper.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestNonLocalFollowerStopper.test_get_action": [[733, 751], ["test_controllers.TestNonLocalFollowerStopper.env.reset", "test_controllers.TestNonLocalFollowerStopper.env.k.vehicle.get_ids", "enumerate", "numpy.testing.assert_array_almost_equal", "test_controllers.TestNonLocalFollowerStopper.env.k.vehicle.set_headway", "test_controllers.TestNonLocalFollowerStopper.env.k.vehicle.test_set_speed", "test_controllers.TestNonLocalFollowerStopper.env.k.vehicle.get_acc_controller().get_action", "test_controllers.TestNonLocalFollowerStopper.env.k.vehicle.get_acc_controller"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller"], ["", "def", "test_get_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "\n", "test_headways", "=", "[", "5", ",", "10", ",", "15", ",", "20", ",", "25", "]", "\n", "test_speeds", "=", "[", "5", ",", "7.5", ",", "7.5", ",", "8", ",", "7", "]", "\n", "for", "i", ",", "veh_id", "in", "enumerate", "(", "ids", ")", ":", "\n", "            ", "self", ".", "env", ".", "k", ".", "vehicle", ".", "set_headway", "(", "veh_id", ",", "test_headways", "[", "i", "]", ")", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "veh_id", ",", "test_speeds", "[", "i", "]", ")", "\n", "\n", "", "requested_accel", "=", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_acc_controller", "(", "veh_id", ")", ".", "get_action", "(", "self", ".", "env", ")", "\n", "for", "veh_id", "in", "ids", "\n", "]", "\n", "\n", "expected_accel", "=", "[", "-", "3.33333333333333", ",", "-", "5.0", ",", "-", "5.0", ",", "-", "10.0", ",", "0.0", "]", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "requested_accel", ",", "expected_accel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestNonLocalFollowerStopper.test_find_intersection_dist": [[752, 775], ["test_controllers.TestNonLocalFollowerStopper.env.reset", "test_controllers.TestNonLocalFollowerStopper.env.k.vehicle.get_ids", "enumerate", "numpy.testing.assert_array_almost_equal", "test_controllers.TestNonLocalFollowerStopper.assertIsNone", "test_controllers.TestNonLocalFollowerStopper.env.k.vehicle.get_acc_controller().find_intersection_dist", "test_controllers.TestNonLocalFollowerStopper.env.k.vehicle.get_acc_controller().get_action", "test_controllers.TestNonLocalFollowerStopper.env.k.vehicle.test_set_edge", "test_controllers.TestNonLocalFollowerStopper.env.k.vehicle.get_acc_controller", "test_controllers.TestNonLocalFollowerStopper.env.k.vehicle.get_acc_controller"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.find_intersection_dist", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller"], ["", "def", "test_find_intersection_dist", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "\n", "test_edges", "=", "[", "\"\"", ",", "\"center\"", "]", "\n", "for", "i", ",", "veh_id", "in", "enumerate", "(", "ids", ")", ":", "\n", "            ", "if", "i", "<", "2", ":", "\n", "                ", "self", ".", "env", ".", "k", ".", "vehicle", ".", "test_set_edge", "(", "veh_id", ",", "test_edges", "[", "i", "]", ")", "\n", "\n", "", "", "requested", "=", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_acc_controller", "(", "\n", "veh_id", ")", ".", "find_intersection_dist", "(", "self", ".", "env", ")", "\n", "for", "veh_id", "in", "ids", "\n", "]", "\n", "\n", "expected", "=", "[", "-", "10", ",", "0", ",", "23.1", ",", "34.7", ",", "46.3", "]", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "requested", ",", "expected", ")", "\n", "\n", "# we also check that the accel value is None when this value is", "\n", "# negative", "\n", "self", ".", "assertIsNone", "(", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_acc_controller", "(", "\n", "ids", "[", "0", "]", ")", ".", "get_action", "(", "self", ".", "env", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestPISaturation.setUp": [[784, 800], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "flow.core.params.SumoCarFollowingParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# add a few vehicles to the network using the requested model", "\n", "# also make sure that the input params are what is expected", "\n", "        ", "contr_params", "=", "{", "}", "\n", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test_0\"", ",", "\n", "acceleration_controller", "=", "(", "PISaturation", ",", "contr_params", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "accel", "=", "20", ",", "decel", "=", "5", ")", ",", "\n", "num_vehicles", "=", "5", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestPISaturation.tearDown": [[801, 807], ["test_controllers.TestPISaturation.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestPISaturation.test_get_action": [[808, 826], ["test_controllers.TestPISaturation.env.reset", "test_controllers.TestPISaturation.env.k.vehicle.get_ids", "enumerate", "numpy.testing.assert_array_almost_equal", "test_controllers.TestPISaturation.env.k.vehicle.set_headway", "test_controllers.TestPISaturation.env.k.vehicle.test_set_speed", "test_controllers.TestPISaturation.env.k.vehicle.get_acc_controller().get_action", "test_controllers.TestPISaturation.env.k.vehicle.get_acc_controller"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller"], ["", "def", "test_get_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "\n", "test_headways", "=", "[", "5", ",", "10", ",", "15", ",", "20", ",", "25", "]", "\n", "test_speeds", "=", "[", "5", ",", "7.5", ",", "7.5", ",", "8", ",", "7", "]", "\n", "for", "i", ",", "veh_id", "in", "enumerate", "(", "ids", ")", ":", "\n", "            ", "self", ".", "env", ".", "k", ".", "vehicle", ".", "set_headway", "(", "veh_id", ",", "test_headways", "[", "i", "]", ")", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "veh_id", ",", "test_speeds", "[", "i", "]", ")", "\n", "\n", "", "requested_accel", "=", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_acc_controller", "(", "veh_id", ")", ".", "get_action", "(", "self", ".", "env", ")", "\n", "for", "veh_id", "in", "ids", "\n", "]", "\n", "\n", "expected_accel", "=", "[", "20.", ",", "-", "36.847826", ",", "-", "35.76087", ",", "-", "37.173913", ",", "-", "31.086957", "]", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "requested_accel", ",", "expected_accel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestLACController.setUp": [[833, 855], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "flow.core.params.SumoCarFollowingParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# add a few vehicles to the network using the requested model", "\n", "# also make sure that the input params are what is expected", "\n", "        ", "contr_params", "=", "{", "\n", "\"k_1\"", ":", "0.3", ",", "\n", "\"k_2\"", ":", "0.4", ",", "\n", "\"h\"", ":", "1", ",", "\n", "\"tau\"", ":", "0.1", ",", "\n", "\"noise\"", ":", "0", "\n", "}", "\n", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "LACController", ",", "contr_params", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "accel", "=", "15", ",", "decel", "=", "5", ")", ",", "\n", "num_vehicles", "=", "5", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestLACController.tearDown": [[856, 862], ["test_controllers.TestLACController.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestLACController.test_get_action": [[863, 879], ["test_controllers.TestLACController.env.reset", "test_controllers.TestLACController.env.k.vehicle.get_ids", "enumerate", "numpy.testing.assert_array_almost_equal", "test_controllers.TestLACController.env.k.vehicle.set_headway", "test_controllers.TestLACController.env.k.vehicle.get_acc_controller().get_action", "test_controllers.TestLACController.env.k.vehicle.get_acc_controller"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller"], ["", "def", "test_get_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "\n", "test_headways", "=", "[", "5", ",", "10", ",", "15", ",", "20", ",", "25", "]", "\n", "for", "i", ",", "veh_id", "in", "enumerate", "(", "ids", ")", ":", "\n", "            ", "self", ".", "env", ".", "k", ".", "vehicle", ".", "set_headway", "(", "veh_id", ",", "test_headways", "[", "i", "]", ")", "\n", "\n", "", "requested_accel", "=", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_acc_controller", "(", "veh_id", ")", ".", "get_action", "(", "self", ".", "env", ")", "\n", "for", "veh_id", "in", "ids", "\n", "]", "\n", "\n", "expected_accel", "=", "[", "0.", ",", "1.5", ",", "3.", ",", "4.5", ",", "6.", "]", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "requested_accel", ",", "expected_accel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestGippsController.setUp": [[886, 911], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "flow.core.params.SumoCarFollowingParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# add a few vehicles to the network using the requested model", "\n", "# also make sure that the input params are what is expected", "\n", "        ", "contr_params", "=", "{", "\n", "\"v0\"", ":", "30", ",", "\n", "\"acc\"", ":", "1.5", ",", "\n", "\"b\"", ":", "-", "1", ",", "\n", "\"b_l\"", ":", "-", "1", ",", "\n", "\"s0\"", ":", "2", ",", "\n", "\"tau\"", ":", "1", ",", "\n", "\"delay\"", ":", "0", ",", "\n", "\"noise\"", ":", "0", ",", "\n", "}", "\n", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "GippsController", ",", "contr_params", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "accel", "=", "15", ",", "decel", "=", "5", ")", ",", "\n", "num_vehicles", "=", "5", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestGippsController.tearDown": [[912, 918], ["test_controllers.TestGippsController.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestGippsController.test_get_action": [[919, 935], ["test_controllers.TestGippsController.env.reset", "test_controllers.TestGippsController.env.k.vehicle.get_ids", "enumerate", "numpy.testing.assert_array_almost_equal", "test_controllers.TestGippsController.env.k.vehicle.set_headway", "test_controllers.TestGippsController.env.k.vehicle.get_acc_controller().get_action", "test_controllers.TestGippsController.env.k.vehicle.get_acc_controller"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller"], ["", "def", "test_get_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "\n", "test_headways", "=", "[", "2", ",", "4", ",", "6", ",", "8", ",", "10", "]", "\n", "for", "i", ",", "veh_id", "in", "enumerate", "(", "ids", ")", ":", "\n", "            ", "self", ".", "env", ".", "k", ".", "vehicle", ".", "set_headway", "(", "veh_id", ",", "test_headways", "[", "i", "]", ")", "\n", "\n", "", "requested_accel", "=", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_acc_controller", "(", "veh_id", ")", ".", "get_action", "(", "self", ".", "env", ")", "\n", "for", "veh_id", "in", "ids", "\n", "]", "\n", "\n", "expected_accel", "=", "[", "0.", ",", "5.929271", ",", "5.929271", ",", "5.929271", ",", "5.929271", "]", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "requested_accel", ",", "expected_accel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestBandoFTLController.setUp": [[942, 965], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "flow.core.params.SumoCarFollowingParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# add a few vehicles to the network using the requested model", "\n", "# also make sure that the input params are what is expected", "\n", "        ", "contr_params", "=", "{", "\n", "\"alpha\"", ":", ".5", ",", "\n", "\"beta\"", ":", "20", ",", "\n", "\"h_st\"", ":", "2", ",", "\n", "\"h_go\"", ":", "10", ",", "\n", "\"v_max\"", ":", "32", ",", "\n", "\"want_max_accel\"", ":", "False", ",", "\n", "}", "\n", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "BandoFTLController", ",", "contr_params", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "accel", "=", "15", ",", "decel", "=", "5", ")", ",", "\n", "num_vehicles", "=", "5", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestBandoFTLController.tearDown": [[966, 972], ["test_controllers.TestBandoFTLController.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_controllers.TestBandoFTLController.test_get_action": [[973, 989], ["test_controllers.TestBandoFTLController.env.reset", "test_controllers.TestBandoFTLController.env.k.vehicle.get_ids", "enumerate", "numpy.testing.assert_array_almost_equal", "test_controllers.TestBandoFTLController.env.k.vehicle.set_headway", "test_controllers.TestBandoFTLController.env.k.vehicle.get_acc_controller().get_action", "test_controllers.TestBandoFTLController.env.k.vehicle.get_acc_controller"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.set_headway", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.controllers.base_lane_changing_controller.BaseLaneChangeController.get_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_acc_controller"], ["", "def", "test_get_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "\n", "test_headways", "=", "[", "2", ",", "4", ",", "6", ",", "8", ",", "10", "]", "\n", "for", "i", ",", "veh_id", "in", "enumerate", "(", "ids", ")", ":", "\n", "            ", "self", ".", "env", ".", "k", ".", "vehicle", ".", "set_headway", "(", "veh_id", ",", "test_headways", "[", "i", "]", ")", "\n", "\n", "", "requested_accel", "=", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_acc_controller", "(", "veh_id", ")", ".", "get_action", "(", "self", ".", "env", ")", "\n", "for", "veh_id", "in", "ids", "\n", "]", "\n", "\n", "expected_accel", "=", "[", "1.649129", ",", "7.853475", ",", "14.057821", ",", "15.70695", ",", "15.959713", "]", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "requested_accel", ",", "expected_accel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestLaneChangeAccelEnv.setUp": [[30, 50], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.VehicleParams.add", "flow.core.params.SumoParams", "flow.networks.RingNetwork", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.networks.ring.ADDITIONAL_NET_PARAMS.copy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\"rl\"", ",", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "vehicles", ".", "add", "(", "\"human\"", ",", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "\n", "self", ".", "sim_params", "=", "SumoParams", "(", ")", "\n", "self", ".", "network", "=", "RingNetwork", "(", "\n", "name", "=", "\"test_merge\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "RING_PARAMS", ".", "copy", "(", ")", ")", ",", "\n", ")", "\n", "self", ".", "env_params", "=", "EnvParams", "(", "\n", "additional_params", "=", "{", "\n", "\"max_accel\"", ":", "3", ",", "\n", "\"max_decel\"", ":", "3", ",", "\n", "\"target_velocity\"", ":", "10", ",", "\n", "\"lane_change_duration\"", ":", "5", ",", "\n", "\"sort_vehicles\"", ":", "False", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestLaneChangeAccelEnv.tearDown": [[53, 57], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "self", ".", "sim_params", "=", "None", "\n", "self", ".", "network", "=", "None", "\n", "self", ".", "env_params", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestLaneChangeAccelEnv.test_additional_env_params": [[58, 71], ["test_environments.TestLaneChangeAccelEnv.assertTrue", "test_environments.test_additional_params"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params"], ["", "def", "test_additional_env_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that not returning the correct params leads to an error.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_additional_params", "(", "\n", "env_class", "=", "LaneChangeAccelEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "additional_params", "=", "{", "\n", "\"max_accel\"", ":", "1", ",", "\n", "\"max_decel\"", ":", "1", ",", "\n", "\"lane_change_duration\"", ":", "5", ",", "\n", "\"target_velocity\"", ":", "10", ",", "\n", "\"sort_vehicles\"", ":", "False", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestLaneChangeAccelEnv.test_observation_action_space": [[75, 103], ["flow.envs.LaneChangeAccelEnv", "test_environments.TestLaneChangeAccelEnv.assertTrue", "test_environments.TestLaneChangeAccelEnv.assertTrue", "flow.envs.LaneChangeAccelEnv.terminate", "test_environments.test_space", "test_environments.test_space", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space"], ["", "def", "test_observation_action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests the observation and action spaces upon initialization.\"\"\"", "\n", "# create the environment", "\n", "env", "=", "LaneChangeAccelEnv", "(", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", "\n", ")", "\n", "\n", "# check the observation space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "env", ".", "observation_space", ",", "\n", "expected_size", "=", "3", "*", "env", ".", "initial_vehicles", ".", "num_vehicles", ",", "\n", "expected_min", "=", "0", ",", "\n", "expected_max", "=", "1", ")", "\n", ")", "\n", "\n", "# check the action space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "env", ".", "action_space", ",", "\n", "expected_size", "=", "2", "*", "env", ".", "initial_vehicles", ".", "num_rl_vehicles", ",", "\n", "expected_min", "=", "np", ".", "array", "(", "[", "\n", "-", "env", ".", "env_params", ".", "additional_params", "[", "\"max_decel\"", "]", ",", "-", "1", "]", ")", ",", "\n", "expected_max", "=", "np", ".", "array", "(", "[", "\n", "env", ".", "env_params", ".", "additional_params", "[", "\"max_accel\"", "]", ",", "1", "]", ")", ")", "\n", ")", "\n", "\n", "env", ".", "terminate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestLaneChangeAccelEnv.test_observed": [[104, 113], ["test_environments.TestLaneChangeAccelEnv.assertTrue", "test_environments.TestLaneChangeAccelEnv.test_observed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_observed"], ["", "def", "test_observed", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that the observed ids are returning the correct vehicles.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_observed", "(", "\n", "env_class", "=", "LaneChangeAccelEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", ",", "\n", "expected_observed", "=", "[", "\"human_0\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestLaneChangeAccelPOEnv.setUp": [[119, 139], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.VehicleParams.add", "flow.core.params.SumoParams", "flow.networks.RingNetwork", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.networks.ring.ADDITIONAL_NET_PARAMS.copy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\"rl\"", ",", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "vehicles", ".", "add", "(", "\"human\"", ",", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "\n", "self", ".", "sim_params", "=", "SumoParams", "(", ")", "\n", "self", ".", "network", "=", "RingNetwork", "(", "\n", "name", "=", "\"test_merge\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "RING_PARAMS", ".", "copy", "(", ")", ")", ",", "\n", ")", "\n", "self", ".", "env_params", "=", "EnvParams", "(", "\n", "additional_params", "=", "{", "\n", "\"max_accel\"", ":", "3", ",", "\n", "\"max_decel\"", ":", "3", ",", "\n", "\"target_velocity\"", ":", "10", ",", "\n", "\"lane_change_duration\"", ":", "5", ",", "\n", "\"sort_vehicles\"", ":", "False", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestLaneChangeAccelPOEnv.tearDown": [[142, 146], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "self", ".", "sim_params", "=", "None", "\n", "self", ".", "network", "=", "None", "\n", "self", ".", "env_params", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestLaneChangeAccelPOEnv.test_additional_env_params": [[147, 160], ["test_environments.TestLaneChangeAccelPOEnv.assertTrue", "test_environments.test_additional_params"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params"], ["", "def", "test_additional_env_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that not returning the correct params leads to an error.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_additional_params", "(", "\n", "env_class", "=", "LaneChangeAccelPOEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "additional_params", "=", "{", "\n", "\"max_accel\"", ":", "1", ",", "\n", "\"max_decel\"", ":", "1", ",", "\n", "\"lane_change_duration\"", ":", "5", ",", "\n", "\"target_velocity\"", ":", "10", ",", "\n", "\"sort_vehicles\"", ":", "False", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestLaneChangeAccelPOEnv.test_observation_action_space": [[164, 187], ["flow.envs.LaneChangeAccelPOEnv", "test_environments.TestLaneChangeAccelPOEnv.assertTrue", "test_environments.TestLaneChangeAccelPOEnv.assertTrue", "flow.envs.LaneChangeAccelPOEnv.terminate", "test_environments.test_space", "test_environments.test_space", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space"], ["", "def", "test_observation_action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests the observation and action spaces upon initialization.\"\"\"", "\n", "# create the environment", "\n", "env", "=", "LaneChangeAccelPOEnv", "(", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", "\n", ")", "\n", "\n", "# check the observation space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "env", ".", "observation_space", ",", "expected_size", "=", "5", ",", "expected_min", "=", "0", ",", "\n", "expected_max", "=", "1", ")", ")", "\n", "\n", "# check the action space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "env", ".", "action_space", ",", "\n", "expected_size", "=", "2", ",", "\n", "expected_min", "=", "np", ".", "array", "(", "[", "-", "3", ",", "-", "1", "]", ")", ",", "\n", "expected_max", "=", "np", ".", "array", "(", "[", "3", ",", "1", "]", ")", ")", "\n", ")", "\n", "\n", "env", ".", "terminate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestLaneChangeAccelPOEnv.test_observed": [[188, 197], ["test_environments.TestLaneChangeAccelPOEnv.assertTrue", "test_environments.TestLaneChangeAccelPOEnv.test_observed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_observed"], ["", "def", "test_observed", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that the observed ids are returning the correct vehicles.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_observed", "(", "\n", "env_class", "=", "LaneChangeAccelPOEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", ",", "\n", "expected_observed", "=", "[", "\"human_0\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestAccelEnv.setUp": [[203, 222], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.VehicleParams.add", "flow.core.params.SumoParams", "flow.networks.RingNetwork", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.networks.ring.ADDITIONAL_NET_PARAMS.copy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\"rl\"", ",", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "vehicles", ".", "add", "(", "\"human\"", ",", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "\n", "self", ".", "sim_params", "=", "SumoParams", "(", ")", "\n", "self", ".", "network", "=", "RingNetwork", "(", "\n", "name", "=", "\"test_merge\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "RING_PARAMS", ".", "copy", "(", ")", ")", ",", "\n", ")", "\n", "self", ".", "env_params", "=", "EnvParams", "(", "\n", "additional_params", "=", "{", "\n", "\"max_accel\"", ":", "3", ",", "\n", "\"max_decel\"", ":", "3", ",", "\n", "\"target_velocity\"", ":", "10", ",", "\n", "\"sort_vehicles\"", ":", "False", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestAccelEnv.tearDown": [[225, 229], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "self", ".", "sim_params", "=", "None", "\n", "self", ".", "network", "=", "None", "\n", "self", ".", "env_params", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestAccelEnv.test_additional_env_params": [[230, 242], ["test_environments.TestAccelEnv.assertTrue", "test_environments.test_additional_params"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params"], ["", "def", "test_additional_env_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that not returning the correct params leads to an error.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_additional_params", "(", "\n", "env_class", "=", "AccelEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "additional_params", "=", "{", "\n", "\"max_accel\"", ":", "1", ",", "\n", "\"max_decel\"", ":", "1", ",", "\n", "\"target_velocity\"", ":", "10", ",", "\n", "\"sort_vehicles\"", ":", "False", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestAccelEnv.test_observation_action_space": [[246, 269], ["flow.envs.AccelEnv", "test_environments.TestAccelEnv.assertTrue", "test_environments.TestAccelEnv.assertTrue", "flow.envs.AccelEnv.terminate", "test_environments.test_space", "test_environments.test_space", "abs"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space"], ["", "def", "test_observation_action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests the observation and action spaces upon initialization.\"\"\"", "\n", "env", "=", "AccelEnv", "(", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", "\n", ")", "\n", "\n", "# check the observation space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "env", ".", "observation_space", ",", "\n", "expected_size", "=", "2", "*", "env", ".", "initial_vehicles", ".", "num_vehicles", ",", "\n", "expected_min", "=", "0", ",", "expected_max", "=", "1", ")", ")", "\n", "\n", "# check the action space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "env", ".", "action_space", ",", "\n", "expected_size", "=", "env", ".", "initial_vehicles", ".", "num_rl_vehicles", ",", "\n", "expected_min", "=", "-", "abs", "(", "env", ".", "env_params", ".", "additional_params", "[", "\"max_decel\"", "]", ")", ",", "\n", "expected_max", "=", "env", ".", "env_params", ".", "additional_params", "[", "\"max_accel\"", "]", ")", "\n", ")", "\n", "\n", "env", ".", "terminate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestAccelEnv.test_observed": [[270, 279], ["test_environments.TestAccelEnv.assertTrue", "test_environments.TestAccelEnv.test_observed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_observed"], ["", "def", "test_observed", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that the observed ids are returning the correct vehicles.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_observed", "(", "\n", "env_class", "=", "AccelEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", ",", "\n", "expected_observed", "=", "[", "\"human_0\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestAccelEnv.test_sorting": [[282, 308], ["flow.envs.AccelEnv", "flow.envs.AccelEnv.reset", "flow.envs.AccelEnv.additional_command", "test_environments.TestAccelEnv.assertTrue", "all", "range", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.WaveAttenuationPOEnv.additional_command"], ["", "def", "test_sorting", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that the sorting method returns a list of ids sorted by the\n        absolute_position variable when sorting is requested, and does\n        nothing if it is not requested.\n        \"\"\"", "\n", "env_params", "=", "self", ".", "env_params", "\n", "env_params", ".", "additional_params", "[", "'sort_vehicles'", "]", "=", "True", "\n", "self", ".", "network", ".", "initial_config", ".", "shuffle", "=", "True", "\n", "\n", "env", "=", "AccelEnv", "(", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "env_params", "\n", ")", "\n", "\n", "env", ".", "reset", "(", ")", "\n", "env", ".", "additional_command", "(", ")", "\n", "\n", "sorted_ids", "=", "env", ".", "sorted_ids", "\n", "positions", "=", "[", "env", ".", "absolute_position", "[", "veh_id", "]", "for", "veh_id", "in", "sorted_ids", "]", "\n", "\n", "# ensure vehicles ids are in sorted order by positions", "\n", "self", ".", "assertTrue", "(", "\n", "all", "(", "positions", "[", "i", "]", "<=", "positions", "[", "i", "+", "1", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "positions", ")", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestAccelEnv.test_no_sorting": [[309, 330], ["flow.envs.AccelEnv", "flow.envs.AccelEnv.reset", "flow.envs.AccelEnv.additional_command", "list", "flow.envs.AccelEnv.k.vehicle.get_ids", "test_environments.TestAccelEnv.assertListEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.WaveAttenuationPOEnv.additional_command", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids"], ["", "def", "test_no_sorting", "(", "self", ")", ":", "\n", "# setup a environment with the \"sort_vehicles\" attribute set to False,", "\n", "# and shuffling so that the vehicles are not sorted by their ids", "\n", "        ", "env_params", "=", "self", ".", "env_params", "\n", "env_params", ".", "additional_params", "[", "'sort_vehicles'", "]", "=", "False", "\n", "self", ".", "network", ".", "initial_config", ".", "shuffle", "=", "True", "\n", "\n", "env", "=", "AccelEnv", "(", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "env_params", "\n", ")", "\n", "\n", "env", ".", "reset", "(", ")", "\n", "env", ".", "additional_command", "(", ")", "\n", "\n", "sorted_ids", "=", "list", "(", "env", ".", "sorted_ids", ")", "\n", "ids", "=", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", "\n", "\n", "# ensure that the list of ids did not change", "\n", "self", ".", "assertListEqual", "(", "sorted_ids", ",", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestWaveAttenuationEnv.setUp": [[334, 355], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.VehicleParams.add", "flow.core.params.SumoParams", "flow.networks.RingNetwork", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.networks.ring.ADDITIONAL_NET_PARAMS.copy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\"rl\"", ",", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "vehicles", ".", "add", "(", "\"human\"", ",", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "\n", "self", ".", "sim_params", "=", "SumoParams", "(", "\n", "restart_instance", "=", "True", "\n", ")", "\n", "self", ".", "network", "=", "RingNetwork", "(", "\n", "name", "=", "\"test_merge\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "RING_PARAMS", ".", "copy", "(", ")", ")", ",", "\n", ")", "\n", "params", "=", "{", "\n", "\"max_accel\"", ":", "1", ",", "\n", "\"max_decel\"", ":", "1", ",", "\n", "\"ring_length\"", ":", "[", "220", ",", "270", "]", "\n", "}", "\n", "self", ".", "env_params", "=", "EnvParams", "(", "additional_params", "=", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestWaveAttenuationEnv.tearDown": [[356, 360], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "self", ".", "sim_params", "=", "None", "\n", "self", ".", "network", "=", "None", "\n", "self", ".", "env_params", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestWaveAttenuationEnv.test_additional_env_params": [[361, 372], ["test_environments.TestWaveAttenuationEnv.assertTrue", "test_environments.test_additional_params"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params"], ["", "def", "test_additional_env_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that not returning the correct params leads to an error.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_additional_params", "(", "\n", "env_class", "=", "WaveAttenuationEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "additional_params", "=", "{", "\n", "\"max_accel\"", ":", "1", ",", "\n", "\"max_decel\"", ":", "1", ",", "\n", "\"ring_length\"", ":", "[", "220", ",", "270", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestWaveAttenuationEnv.test_observation_action_space": [[376, 399], ["flow.envs.WaveAttenuationEnv", "test_environments.TestWaveAttenuationEnv.assertTrue", "test_environments.TestWaveAttenuationEnv.assertTrue", "flow.envs.WaveAttenuationEnv.terminate", "test_environments.test_space", "test_environments.test_space", "abs"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space"], ["", "def", "test_observation_action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests the observation and action spaces upon initialization.\"\"\"", "\n", "env", "=", "WaveAttenuationEnv", "(", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", "\n", ")", "\n", "\n", "# check the observation space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "env", ".", "observation_space", ",", "\n", "expected_size", "=", "2", "*", "env", ".", "initial_vehicles", ".", "num_vehicles", ",", "\n", "expected_min", "=", "0", ",", "expected_max", "=", "1", ")", ")", "\n", "\n", "# check the action space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "env", ".", "action_space", ",", "\n", "expected_size", "=", "env", ".", "initial_vehicles", ".", "num_rl_vehicles", ",", "\n", "expected_min", "=", "-", "abs", "(", "env", ".", "env_params", ".", "additional_params", "[", "\"max_decel\"", "]", ")", ",", "\n", "expected_max", "=", "env", ".", "env_params", ".", "additional_params", "[", "\"max_accel\"", "]", ")", "\n", ")", "\n", "\n", "env", ".", "terminate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestWaveAttenuationEnv.test_observed": [[400, 409], ["test_environments.TestWaveAttenuationEnv.assertTrue", "test_environments.TestWaveAttenuationEnv.test_observed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_observed"], ["", "def", "test_observed", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that the observed ids are returning the correct vehicles.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_observed", "(", "\n", "env_class", "=", "WaveAttenuationEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", ",", "\n", "expected_observed", "=", "[", "\"human_0\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestWaveAttenuationEnv.test_reset": [[412, 434], ["random.seed", "flow.envs.WaveAttenuationEnv", "test_environments.TestWaveAttenuationEnv.assertEqual", "flow.envs.WaveAttenuationEnv.reset", "test_environments.TestWaveAttenuationEnv.assertEqual", "flow.envs.WaveAttenuationEnv.reset", "test_environments.TestWaveAttenuationEnv.assertEqual", "flow.envs.WaveAttenuationEnv.k.network.non_internal_length", "flow.envs.WaveAttenuationEnv.k.network.non_internal_length", "flow.envs.WaveAttenuationEnv.k.network.non_internal_length"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.non_internal_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.non_internal_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.non_internal_length"], ["", "def", "test_reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that the reset method creating new ring lengths within the\n        requested range.\n        \"\"\"", "\n", "# set a random seed to ensure the network lengths are always the same", "\n", "# during testing", "\n", "random", ".", "seed", "(", "9001", ")", "\n", "\n", "# create the environment", "\n", "env", "=", "WaveAttenuationEnv", "(", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", "\n", ")", "\n", "\n", "# reset the network several times and check its length", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "non_internal_length", "(", ")", ",", "230", ")", "\n", "env", ".", "reset", "(", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "non_internal_length", "(", ")", ",", "239", ")", "\n", "env", ".", "reset", "(", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "non_internal_length", "(", ")", ",", "256", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestWaveAttenuationEnv.test_v_eq_max_function": [[435, 448], ["test_environments.TestWaveAttenuationEnv.assertAlmostEqual", "test_environments.TestWaveAttenuationEnv.assertAlmostEqual", "float", "float", "scipy.optimize.fsolve", "scipy.optimize.fsolve", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "test_v_eq_max_function", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that the v_eq_max_function returns appropriate values.\n        \"\"\"", "\n", "# for 230 m ring roads", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "float", "(", "fsolve", "(", "v_eq_max_function", ",", "np", ".", "array", "(", "[", "4", "]", ")", ",", "args", "=", "(", "22", ",", "230", ")", ")", "[", "0", "]", ")", ",", "\n", "3.7136148111012934", ")", "\n", "\n", "# for 270 m ring roads", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "float", "(", "fsolve", "(", "v_eq_max_function", ",", "np", ".", "array", "(", "[", "4", "]", ")", ",", "args", "=", "(", "22", ",", "270", ")", ")", "[", "0", "]", ")", ",", "\n", "5.6143732387852054", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestWaveAttenuationEnv.test_reset_no_same_length": [[449, 471], ["copy.deepcopy", "flow.envs.WaveAttenuationEnv", "test_environments.TestWaveAttenuationEnv.assertEqual", "flow.envs.WaveAttenuationEnv.reset", "test_environments.TestWaveAttenuationEnv.assertEqual", "flow.envs.WaveAttenuationEnv.reset", "test_environments.TestWaveAttenuationEnv.assertEqual", "flow.envs.WaveAttenuationEnv.k.network.non_internal_length", "flow.envs.WaveAttenuationEnv.k.network.non_internal_length", "flow.envs.WaveAttenuationEnv.k.network.non_internal_length"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.non_internal_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.non_internal_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.non_internal_length"], ["", "def", "test_reset_no_same_length", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that the reset method uses the original ring length when the\n        range is set to None.\n        \"\"\"", "\n", "# setup env_params with not range", "\n", "env_params", "=", "deepcopy", "(", "self", ".", "env_params", ")", "\n", "env_params", ".", "additional_params", "[", "\"ring_length\"", "]", "=", "None", "\n", "\n", "# create the environment", "\n", "env", "=", "WaveAttenuationEnv", "(", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "env_params", "\n", ")", "\n", "\n", "# reset the network several times and check its length", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "non_internal_length", "(", ")", ",", "RING_PARAMS", "[", "\"length\"", "]", ")", "\n", "env", ".", "reset", "(", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "non_internal_length", "(", ")", ",", "RING_PARAMS", "[", "\"length\"", "]", ")", "\n", "env", ".", "reset", "(", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "non_internal_length", "(", ")", ",", "RING_PARAMS", "[", "\"length\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestWaveAttenuationPOEnv.setUp": [[475, 493], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.VehicleParams.add", "flow.core.params.SumoParams", "flow.networks.RingNetwork", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.networks.ring.ADDITIONAL_NET_PARAMS.copy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\"rl\"", ",", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "vehicles", ".", "add", "(", "\"human\"", ",", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "\n", "self", ".", "sim_params", "=", "SumoParams", "(", ")", "\n", "self", ".", "network", "=", "RingNetwork", "(", "\n", "name", "=", "\"test_merge\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "RING_PARAMS", ".", "copy", "(", ")", ")", ",", "\n", ")", "\n", "self", ".", "env_params", "=", "EnvParams", "(", "\n", "additional_params", "=", "{", "\n", "\"max_accel\"", ":", "1", ",", "\n", "\"max_decel\"", ":", "1", ",", "\n", "\"ring_length\"", ":", "[", "220", ",", "270", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestWaveAttenuationPOEnv.tearDown": [[496, 500], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "self", ".", "sim_params", "=", "None", "\n", "self", ".", "network", "=", "None", "\n", "self", ".", "env_params", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestWaveAttenuationPOEnv.test_additional_env_params": [[501, 512], ["test_environments.TestWaveAttenuationPOEnv.assertTrue", "test_environments.test_additional_params"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params"], ["", "def", "test_additional_env_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that not returning the correct params leads to an error.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_additional_params", "(", "\n", "env_class", "=", "WaveAttenuationPOEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "additional_params", "=", "{", "\n", "\"max_accel\"", ":", "1", ",", "\n", "\"max_decel\"", ":", "1", ",", "\n", "\"ring_length\"", ":", "[", "220", ",", "270", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestWaveAttenuationPOEnv.test_observation_action_space": [[516, 539], ["flow.envs.WaveAttenuationPOEnv", "test_environments.TestWaveAttenuationPOEnv.assertTrue", "test_environments.TestWaveAttenuationPOEnv.assertTrue", "flow.envs.WaveAttenuationPOEnv.terminate", "test_environments.test_space", "test_environments.test_space", "float", "float"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space"], ["", "def", "test_observation_action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests the observation and action spaces upon initialization.\"\"\"", "\n", "# create the environment", "\n", "env", "=", "WaveAttenuationPOEnv", "(", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", "\n", ")", "\n", "\n", "# check the observation space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "env", ".", "observation_space", ",", "\n", "expected_size", "=", "3", ",", "\n", "expected_min", "=", "-", "float", "(", "'inf'", ")", ",", "\n", "expected_max", "=", "float", "(", "'inf'", ")", "\n", ")", ")", "\n", "\n", "# check the action space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "env", ".", "action_space", ",", "\n", "expected_size", "=", "1", ",", "expected_min", "=", "-", "1", ",", "expected_max", "=", "1", ")", ")", "\n", "\n", "env", ".", "terminate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestWaveAttenuationPOEnv.test_observed": [[540, 549], ["test_environments.TestWaveAttenuationPOEnv.assertTrue", "test_environments.TestWaveAttenuationPOEnv.test_observed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_observed"], ["", "def", "test_observed", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that the observed ids are returning the correct vehicles.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_observed", "(", "\n", "env_class", "=", "WaveAttenuationPOEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", ",", "\n", "expected_observed", "=", "[", "\"human_0\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestWaveAttenuationPOEnv.test_reward": [[552, 613], ["flow.envs.WaveAttenuationPOEnv", "flow.envs.WaveAttenuationPOEnv.reset", "flow.envs.WaveAttenuationPOEnv.k.vehicle.test_set_speed", "flow.envs.WaveAttenuationPOEnv.k.vehicle.test_set_speed", "test_environments.TestWaveAttenuationPOEnv.assertAlmostEqual", "flow.envs.WaveAttenuationPOEnv.k.vehicle.test_set_speed", "flow.envs.WaveAttenuationPOEnv.k.vehicle.test_set_speed", "test_environments.TestWaveAttenuationPOEnv.assertAlmostEqual", "flow.envs.WaveAttenuationPOEnv.k.vehicle.test_set_speed", "flow.envs.WaveAttenuationPOEnv.k.vehicle.test_set_speed", "test_environments.TestWaveAttenuationPOEnv.assertAlmostEqual", "flow.envs.WaveAttenuationPOEnv.k.vehicle.test_set_speed", "flow.envs.WaveAttenuationPOEnv.k.vehicle.test_set_speed", "test_environments.TestWaveAttenuationPOEnv.assertAlmostEqual", "flow.envs.WaveAttenuationPOEnv.k.vehicle.test_set_speed", "flow.envs.WaveAttenuationPOEnv.k.vehicle.test_set_speed", "test_environments.TestWaveAttenuationPOEnv.assertAlmostEqual", "flow.envs.WaveAttenuationPOEnv.k.vehicle.test_set_speed", "flow.envs.WaveAttenuationPOEnv.k.vehicle.test_set_speed", "test_environments.TestWaveAttenuationPOEnv.assertAlmostEqual", "flow.envs.WaveAttenuationPOEnv.compute_reward", "flow.envs.WaveAttenuationPOEnv.compute_reward", "flow.envs.WaveAttenuationPOEnv.compute_reward", "flow.envs.WaveAttenuationPOEnv.compute_reward", "flow.envs.WaveAttenuationPOEnv.compute_reward", "flow.envs.WaveAttenuationPOEnv.compute_reward"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.compute_reward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.compute_reward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.compute_reward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.compute_reward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.compute_reward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.compute_reward"], ["", "def", "test_reward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check the reward function for different values.\n\n        The reward function should be a linear combination of the average speed\n        of all vehicles and a penalty on the requested accelerations by the\n        AVs.\n        \"\"\"", "\n", "# create the environment", "\n", "env", "=", "WaveAttenuationPOEnv", "(", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", "\n", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "# check the reward for no acceleration", "\n", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "'human_0'", ",", "0", ")", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "'rl_0'", ",", "0", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "env", ".", "compute_reward", "(", "rl_actions", "=", "[", "0", "]", ",", "fail", "=", "False", ")", ",", "\n", "0", "\n", ")", "\n", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "'human_0'", ",", "0", ")", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "'rl_0'", ",", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "env", ".", "compute_reward", "(", "rl_actions", "=", "[", "0", "]", ",", "fail", "=", "False", ")", ",", "\n", "0.1", "\n", ")", "\n", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "'human_0'", ",", "1", ")", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "'rl_0'", ",", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "env", ".", "compute_reward", "(", "rl_actions", "=", "[", "0", "]", ",", "fail", "=", "False", ")", ",", "\n", "0.2", "\n", ")", "\n", "\n", "# check the fail option", "\n", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "'human_0'", ",", "1", ")", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "'rl_0'", ",", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "env", ".", "compute_reward", "(", "rl_actions", "=", "[", "0", "]", ",", "fail", "=", "True", ")", ",", "\n", "0", "\n", ")", "\n", "\n", "# check the effect of RL actions", "\n", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "'human_0'", ",", "1", ")", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "'rl_0'", ",", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "env", ".", "compute_reward", "(", "rl_actions", "=", "None", ",", "fail", "=", "False", ")", ",", "\n", "0", "\n", ")", "\n", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "'human_0'", ",", "1", ")", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "'rl_0'", ",", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "env", ".", "compute_reward", "(", "rl_actions", "=", "[", "1", "]", ",", "fail", "=", "False", ")", ",", "\n", "-", "3.8", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMergePOEnv.setUp": [[618, 637], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.VehicleParams.add", "flow.core.params.SumoParams", "flow.networks.MergeNetwork", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.networks.merge.ADDITIONAL_NET_PARAMS.copy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\"rl\"", ",", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "vehicles", ".", "add", "(", "\"human\"", ",", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "\n", "self", ".", "sim_params", "=", "SumoParams", "(", ")", "\n", "self", ".", "network", "=", "MergeNetwork", "(", "\n", "name", "=", "\"test_merge\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "MERGE_PARAMS", ".", "copy", "(", ")", ")", ",", "\n", ")", "\n", "self", ".", "env_params", "=", "EnvParams", "(", "\n", "additional_params", "=", "{", "\n", "\"max_accel\"", ":", "3", ",", "\n", "\"max_decel\"", ":", "3", ",", "\n", "\"target_velocity\"", ":", "25", ",", "\n", "\"num_rl\"", ":", "5", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMergePOEnv.tearDown": [[640, 644], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "self", ".", "sim_params", "=", "None", "\n", "self", ".", "network", "=", "None", "\n", "self", ".", "env_params", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMergePOEnv.test_additional_env_params": [[645, 657], ["test_environments.TestMergePOEnv.assertTrue", "test_environments.test_additional_params"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params"], ["", "def", "test_additional_env_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that not returning the correct params leads to an error.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_additional_params", "(", "\n", "env_class", "=", "MergePOEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "additional_params", "=", "{", "\n", "\"max_accel\"", ":", "1", ",", "\n", "\"max_decel\"", ":", "1", ",", "\n", "\"target_velocity\"", ":", "25", ",", "\n", "\"num_rl\"", ":", "5", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMergePOEnv.test_observation_action_space": [[661, 681], ["flow.envs.MergePOEnv", "test_environments.TestMergePOEnv.assertTrue", "test_environments.TestMergePOEnv.assertTrue", "flow.envs.MergePOEnv.terminate", "test_environments.test_space", "test_environments.test_space"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space"], ["", "def", "test_observation_action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests the observation and action spaces upon initialization.\"\"\"", "\n", "# create the environment", "\n", "env", "=", "MergePOEnv", "(", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", "\n", ")", "\n", "\n", "# check the observation space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "env", ".", "observation_space", ",", "\n", "expected_size", "=", "25", ",", "expected_min", "=", "0", ",", "expected_max", "=", "1", ")", ")", "\n", "\n", "# check the action space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "env", ".", "action_space", ",", "\n", "expected_size", "=", "5", ",", "expected_min", "=", "-", "3", ",", "expected_max", "=", "3", ")", ")", "\n", "\n", "env", ".", "terminate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMergePOEnv.test_observed": [[682, 691], ["test_environments.TestMergePOEnv.assertTrue", "test_environments.TestMergePOEnv.test_observed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_observed"], ["", "def", "test_observed", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that the observed ids are returning the correct vehicles.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_observed", "(", "\n", "env_class", "=", "MergePOEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", ",", "\n", "expected_observed", "=", "[", "\"human_0\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestTestEnv.setUp": [[699, 709], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.NetParams", "flow.core.params.EnvParams", "flow.core.params.SumoParams", "flow.networks.RingNetwork", "flow.envs.TestEnv"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\"test\"", ",", "num_vehicles", "=", "1", ")", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "RING_PARAMS", ")", "\n", "env_params", "=", "EnvParams", "(", ")", "\n", "sim_params", "=", "SumoParams", "(", ")", "\n", "network", "=", "RingNetwork", "(", "\"test_ring\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "net_params", ")", "\n", "self", ".", "env", "=", "TestEnv", "(", "env_params", ",", "sim_params", ",", "network", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestTestEnv.tearDown": [[710, 713], ["test_environments.TestTestEnv.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestTestEnv.test_obs_space": [[714, 718], ["test_environments.TestTestEnv.assertEqual", "test_environments.TestTestEnv.assertEqual", "test_environments.TestTestEnv.assertEqual", "len", "len"], "methods", ["None"], ["", "def", "test_obs_space", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "self", ".", "env", ".", "observation_space", ".", "shape", "[", "0", "]", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "env", ".", "observation_space", ".", "high", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "env", ".", "observation_space", ".", "low", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestTestEnv.test_action_space": [[719, 723], ["test_environments.TestTestEnv.assertEqual", "test_environments.TestTestEnv.assertEqual", "test_environments.TestTestEnv.assertEqual", "len", "len"], "methods", ["None"], ["", "def", "test_action_space", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "self", ".", "env", ".", "action_space", ".", "shape", "[", "0", "]", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "env", ".", "action_space", ".", "high", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "env", ".", "action_space", ".", "low", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestTestEnv.test_get_state": [[724, 726], ["test_environments.TestTestEnv.assertEqual", "len", "test_environments.TestTestEnv.env.get_state"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.get_state"], ["", "def", "test_get_state", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "env", ".", "get_state", "(", ")", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestTestEnv.test_compute_reward": [[727, 737], ["test_environments.TestTestEnv.assertEqual", "test_environments.TestTestEnv.assertEqual", "test_environments.TestTestEnv.env.compute_reward", "test_environments.TestTestEnv.env.compute_reward"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.compute_reward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.compute_reward"], ["", "def", "test_compute_reward", "(", "self", ")", ":", "\n", "# test the default", "\n", "        ", "self", ".", "assertEqual", "(", "self", ".", "env", ".", "compute_reward", "(", "[", "]", ")", ",", "0", ")", "\n", "\n", "# test if the \"reward_fn\" parameter is defined", "\n", "def", "reward_fn", "(", "*", "_", ")", ":", "\n", "            ", "return", "1", "\n", "\n", "", "self", ".", "env", ".", "env_params", ".", "additional_params", "[", "\"reward_fn\"", "]", "=", "reward_fn", "\n", "self", ".", "assertEqual", "(", "self", ".", "env", ".", "compute_reward", "(", "[", "]", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestBottleneckEnv.setUp": [[743, 769], ["flow.core.params.SumoParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.networks.BottleneckNetwork", "flow.envs.BottleneckEnv", "test_environments.TestBottleneckEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "sim_params", "=", "SumoParams", "(", "sim_step", "=", "0.5", ",", "restart_instance", "=", "True", ")", "\n", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "veh_id", "=", "\"human\"", ",", "num_vehicles", "=", "10", ")", "\n", "\n", "env_params", "=", "EnvParams", "(", "\n", "additional_params", "=", "{", "\n", "\"max_accel\"", ":", "3", ",", "\n", "\"max_decel\"", ":", "3", ",", "\n", "\"lane_change_duration\"", ":", "5", ",", "\n", "\"disable_tb\"", ":", "True", ",", "\n", "\"disable_ramp_metering\"", ":", "True", ",", "\n", "}", "\n", ")", "\n", "\n", "net_params", "=", "NetParams", "(", "\n", "additional_params", "=", "{", "\"scaling\"", ":", "1", ",", "\"speed_limit\"", ":", "23", "}", ")", "\n", "\n", "self", ".", "network", "=", "BottleneckNetwork", "(", "\n", "name", "=", "\"bay_bridge_toll\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "net_params", ")", "\n", "\n", "self", ".", "env", "=", "BottleneckEnv", "(", "env_params", ",", "self", ".", "sim_params", ",", "self", ".", "network", ")", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestBottleneckEnv.tearDown": [[770, 773], ["test_environments.TestBottleneckEnv.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "del", "self", ".", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestBottleneckEnv.test_additional_env_params": [[774, 787], ["test_environments.TestBottleneckEnv.assertTrue", "test_environments.test_additional_params"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params"], ["", "def", "test_additional_env_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that not returning the correct params leads to an error.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_additional_params", "(", "\n", "env_class", "=", "BottleneckEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "additional_params", "=", "{", "\n", "\"max_accel\"", ":", "3", ",", "\n", "\"max_decel\"", ":", "3", ",", "\n", "\"lane_change_duration\"", ":", "5", ",", "\n", "\"disable_tb\"", ":", "True", ",", "\n", "\"disable_ramp_metering\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestBottleneckEnv.test_get_bottleneck_density": [[791, 793], ["test_environments.TestBottleneckEnv.assertEqual", "test_environments.TestBottleneckEnv.env.get_bottleneck_density"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.bottleneck.BottleneckEnv.get_bottleneck_density"], ["", "def", "test_get_bottleneck_density", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "self", ".", "env", ".", "get_bottleneck_density", "(", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestBottleneckEnv.test_observation_action_space": [[794, 810], ["test_environments.TestBottleneckEnv.assertTrue", "test_environments.TestBottleneckEnv.assertTrue", "test_environments.test_space", "test_environments.test_space", "float", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space"], ["", "def", "test_observation_action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests the observation and action spaces upon initialization.\"\"\"", "\n", "# check the observation space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "self", ".", "env", ".", "observation_space", ",", "\n", "expected_size", "=", "1", ",", "\n", "expected_min", "=", "-", "float", "(", "'inf'", ")", ",", "\n", "expected_max", "=", "float", "(", "'inf'", ")", ")", "\n", ")", "\n", "\n", "# check the action space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "self", ".", "env", ".", "action_space", ",", "\n", "expected_size", "=", "1", ",", "\n", "expected_min", "=", "-", "float", "(", "'inf'", ")", ",", "\n", "expected_max", "=", "float", "(", "'inf'", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestBottleneckAccelEnv.setUp": [[817, 846], ["flow.core.params.SumoParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.networks.BottleneckNetwork", "flow.envs.BottleneckAccelEnv", "test_environments.TestBottleneckAccelEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "sim_params", "=", "SumoParams", "(", "sim_step", "=", "0.5", ",", "restart_instance", "=", "True", ")", "\n", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "veh_id", "=", "\"human\"", ",", "num_vehicles", "=", "10", ")", "\n", "\n", "env_params", "=", "EnvParams", "(", "\n", "additional_params", "=", "{", "\n", "\"max_accel\"", ":", "3", ",", "\n", "\"max_decel\"", ":", "3", ",", "\n", "\"lane_change_duration\"", ":", "5", ",", "\n", "\"disable_tb\"", ":", "True", ",", "\n", "\"disable_ramp_metering\"", ":", "True", ",", "\n", "\"target_velocity\"", ":", "30", ",", "\n", "\"add_rl_if_exit\"", ":", "True", ",", "\n", "}", "\n", ")", "\n", "\n", "net_params", "=", "NetParams", "(", "\n", "additional_params", "=", "{", "\"scaling\"", ":", "1", ",", "\"speed_limit\"", ":", "23", "}", ")", "\n", "\n", "self", ".", "network", "=", "BottleneckNetwork", "(", "\n", "name", "=", "\"bay_bridge_toll\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "net_params", ")", "\n", "\n", "self", ".", "env", "=", "BottleneckAccelEnv", "(", "\n", "env_params", ",", "self", ".", "sim_params", ",", "self", ".", "network", ")", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestBottleneckAccelEnv.tearDown": [[847, 850], ["test_environments.TestBottleneckAccelEnv.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "del", "self", ".", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestBottleneckAccelEnv.test_additional_env_params": [[851, 866], ["test_environments.TestBottleneckAccelEnv.assertTrue", "test_environments.test_additional_params"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params"], ["", "def", "test_additional_env_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that not returning the correct params leads to an error.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_additional_params", "(", "\n", "env_class", "=", "BottleneckAccelEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "additional_params", "=", "{", "\n", "\"max_accel\"", ":", "3", ",", "\n", "\"max_decel\"", ":", "3", ",", "\n", "\"lane_change_duration\"", ":", "5", ",", "\n", "\"disable_tb\"", ":", "True", ",", "\n", "\"disable_ramp_metering\"", ":", "True", ",", "\n", "\"target_velocity\"", ":", "30", ",", "\n", "\"add_rl_if_exit\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestBottleneckAccelEnv.test_observation_action_space": [[870, 878], ["test_environments.TestBottleneckAccelEnv.assertTrue", "test_environments.test_space"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space"], ["", "def", "test_observation_action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests the observation and action spaces upon initialization.\"\"\"", "\n", "# check the observation space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "self", ".", "env", ".", "observation_space", ",", "\n", "expected_size", "=", "12", ",", "\n", "expected_min", "=", "0", ",", "\n", "expected_max", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestBottleneckDesiredVelocityEnv.test_reset_inflows": [[886, 948], ["numpy.random.seed", "flow.core.params.SumoParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.VehicleParams.add", "flow.core.params.EnvParams", "flow.core.params.InFlows", "flow.core.params.InFlows.add", "flow.core.params.NetParams", "flow.networks.BottleneckNetwork", "flow.envs.BottleneckDesiredVelocityEnv", "flow.envs.BottleneckDesiredVelocityEnv.reset", "range", "test_environments.TestBottleneckDesiredVelocityEnv.assertAlmostEqual", "flow.envs.BottleneckDesiredVelocityEnv.step", "flow.envs.BottleneckDesiredVelocityEnv.k.vehicle.get_inflow_rate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_inflow_rate"], ["def", "test_reset_inflows", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests that the inflow  change within the expected range when calling\n        reset.\"\"\"", "\n", "# set a random seed for inflows to be the same every time", "\n", "np", ".", "random", ".", "seed", "(", "seed", "=", "123", ")", "\n", "\n", "sim_params", "=", "SumoParams", "(", "sim_step", "=", "0.5", ",", "restart_instance", "=", "True", ")", "\n", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "veh_id", "=", "\"human\"", ")", "\n", "vehicles", ".", "add", "(", "veh_id", "=", "\"followerstopper\"", ")", "\n", "\n", "# edge name, how many segments to observe/control, whether the segment", "\n", "# is controlled", "\n", "controlled_segments", "=", "[", "(", "\"1\"", ",", "1", ",", "False", ")", ",", "(", "\"2\"", ",", "2", ",", "True", ")", ",", "(", "\"3\"", ",", "2", ",", "True", ")", ",", "\n", "(", "\"4\"", ",", "2", ",", "True", ")", ",", "(", "\"5\"", ",", "1", ",", "False", ")", "]", "\n", "num_observed_segments", "=", "[", "(", "\"1\"", ",", "1", ")", ",", "(", "\"2\"", ",", "3", ")", ",", "(", "\"3\"", ",", "3", ")", ",", "(", "\"4\"", ",", "3", ")", ",", "\n", "(", "\"5\"", ",", "1", ")", "]", "\n", "env_params", "=", "EnvParams", "(", "\n", "additional_params", "=", "{", "\n", "\"target_velocity\"", ":", "40", ",", "\n", "\"disable_tb\"", ":", "True", ",", "\n", "\"disable_ramp_metering\"", ":", "True", ",", "\n", "\"controlled_segments\"", ":", "controlled_segments", ",", "\n", "\"symmetric\"", ":", "False", ",", "\n", "\"observed_segments\"", ":", "num_observed_segments", ",", "\n", "\"reset_inflow\"", ":", "True", ",", "# this must be set to True for the test", "\n", "\"lane_change_duration\"", ":", "5", ",", "\n", "\"max_accel\"", ":", "3", ",", "\n", "\"max_decel\"", ":", "3", ",", "\n", "\"inflow_range\"", ":", "[", "1000", ",", "2000", "]", "# this is what we're testing", "\n", "}", "\n", ")", "\n", "\n", "inflow", "=", "InFlows", "(", ")", "\n", "inflow", ".", "add", "(", "veh_type", "=", "\"human\"", ",", "\n", "edge", "=", "\"1\"", ",", "\n", "vehs_per_hour", "=", "1500", ",", "# the initial inflow we're checking for", "\n", "departLane", "=", "\"random\"", ",", "\n", "departSpeed", "=", "10", ")", "\n", "\n", "net_params", "=", "NetParams", "(", "\n", "inflows", "=", "inflow", ",", "\n", "additional_params", "=", "{", "\"scaling\"", ":", "1", ",", "\"speed_limit\"", ":", "23", "}", ")", "\n", "\n", "network", "=", "BottleneckNetwork", "(", "\n", "name", "=", "\"bay_bridge_toll\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "net_params", ")", "\n", "\n", "env", "=", "BottleneckDesiredVelocityEnv", "(", "env_params", ",", "sim_params", ",", "network", ")", "\n", "\n", "# reset the environment and get a new inflow rate", "\n", "env", ".", "reset", "(", ")", "\n", "expected_inflow", "=", "1353.6", "# just from checking the new inflow", "\n", "\n", "# check that the first inflow rate is approximately what the seeded", "\n", "# value expects it to be", "\n", "for", "_", "in", "range", "(", "500", ")", ":", "\n", "            ", "env", ".", "step", "(", "rl_actions", "=", "None", ")", "\n", "", "self", ".", "assertAlmostEqual", "(", "\n", "env", ".", "k", ".", "vehicle", ".", "get_inflow_rate", "(", "250", ")", "/", "expected_inflow", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentAccelPOEnv.setUp": [[954, 972], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.VehicleParams.add", "flow.core.params.SumoParams", "flow.networks.RingNetwork", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.networks.ring.ADDITIONAL_NET_PARAMS.copy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\"rl\"", ",", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "vehicles", ".", "add", "(", "\"human\"", ",", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "\n", "self", ".", "sim_params", "=", "SumoParams", "(", ")", "\n", "self", ".", "network", "=", "RingNetwork", "(", "\n", "name", "=", "\"test_ring\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "RING_PARAMS", ".", "copy", "(", ")", ")", ",", "\n", ")", "\n", "self", ".", "env_params", "=", "EnvParams", "(", "\n", "additional_params", "=", "{", "\n", "'max_accel'", ":", "1", ",", "\n", "'max_decel'", ":", "1", ",", "\n", "\"target_velocity\"", ":", "25", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentAccelPOEnv.tearDown": [[975, 979], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "self", ".", "sim_params", "=", "None", "\n", "self", ".", "network", "=", "None", "\n", "self", ".", "env_params", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentAccelPOEnv.test_additional_env_params": [[980, 991], ["test_environments.TestMultiAgentAccelPOEnv.assertTrue", "test_environments.test_additional_params"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params"], ["", "def", "test_additional_env_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that not returning the correct params leads to an error.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_additional_params", "(", "\n", "env_class", "=", "MultiAgentAccelPOEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "additional_params", "=", "{", "\n", "\"max_accel\"", ":", "1", ",", "\n", "\"max_decel\"", ":", "1", ",", "\n", "\"target_velocity\"", ":", "10", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentAccelPOEnv.test_observation_action_space": [[995, 1018], ["flow.envs.multiagent.MultiAgentAccelPOEnv", "test_environments.TestMultiAgentAccelPOEnv.assertTrue", "test_environments.TestMultiAgentAccelPOEnv.assertTrue", "flow.envs.multiagent.MultiAgentAccelPOEnv.terminate", "test_environments.test_space", "test_environments.test_space"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space"], ["", "def", "test_observation_action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests the observation and action spaces upon initialization.\"\"\"", "\n", "# create the environment", "\n", "env", "=", "MultiAgentAccelPOEnv", "(", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", "\n", ")", "\n", "\n", "# check the observation space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "env", ".", "observation_space", ",", "\n", "expected_size", "=", "6", ",", "\n", "expected_min", "=", "-", "5", ",", "\n", "expected_max", "=", "5", "\n", ")", ")", "\n", "\n", "# check the action space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "env", ".", "action_space", ",", "\n", "expected_size", "=", "1", ",", "expected_min", "=", "-", "1", ",", "expected_max", "=", "1", ")", ")", "\n", "\n", "env", ".", "terminate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentAccelPOEnv.test_observed": [[1019, 1028], ["test_environments.TestMultiAgentAccelPOEnv.assertTrue", "test_environments.TestMultiAgentAccelPOEnv.test_observed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_observed"], ["", "def", "test_observed", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that the observed ids are returning the correct vehicles.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_observed", "(", "\n", "env_class", "=", "MultiAgentMergePOEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", ",", "\n", "expected_observed", "=", "[", "\"human_0\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentWaveAttenuationPOEnv.setUp": [[1036, 1054], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.VehicleParams.add", "flow.core.params.SumoParams", "flow.networks.RingNetwork", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.networks.ring.ADDITIONAL_NET_PARAMS.copy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\"rl\"", ",", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "vehicles", ".", "add", "(", "\"human\"", ",", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "\n", "self", ".", "sim_params", "=", "SumoParams", "(", ")", "\n", "self", ".", "network", "=", "RingNetwork", "(", "\n", "name", "=", "\"test_ring\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "RING_PARAMS", ".", "copy", "(", ")", ")", ",", "\n", ")", "\n", "self", ".", "env_params", "=", "EnvParams", "(", "\n", "additional_params", "=", "{", "\n", "'max_accel'", ":", "1", ",", "\n", "'max_decel'", ":", "1", ",", "\n", "\"ring_length\"", ":", "[", "220", ",", "270", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentWaveAttenuationPOEnv.tearDown": [[1057, 1061], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "self", ".", "sim_params", "=", "None", "\n", "self", ".", "network", "=", "None", "\n", "self", ".", "env_params", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentWaveAttenuationPOEnv.test_additional_env_params": [[1062, 1073], ["test_environments.TestMultiAgentWaveAttenuationPOEnv.assertTrue", "test_environments.test_additional_params"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params"], ["", "def", "test_additional_env_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that not returning the correct params leads to an error.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_additional_params", "(", "\n", "env_class", "=", "MultiAgentWaveAttenuationPOEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "additional_params", "=", "{", "\n", "\"max_accel\"", ":", "1", ",", "\n", "\"max_decel\"", ":", "1", ",", "\n", "\"ring_length\"", ":", "[", "220", ",", "270", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentWaveAttenuationPOEnv.test_observation_action_space": [[1077, 1103], ["flow.envs.multiagent.MultiAgentWaveAttenuationPOEnv", "test_environments.TestMultiAgentWaveAttenuationPOEnv.assertTrue", "test_environments.TestMultiAgentWaveAttenuationPOEnv.assertTrue", "flow.envs.multiagent.MultiAgentWaveAttenuationPOEnv.terminate", "test_environments.test_space", "test_environments.test_space"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space"], ["", "def", "test_observation_action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests the observation and action spaces upon initialization.\"\"\"", "\n", "# create the environment", "\n", "env", "=", "MultiAgentWaveAttenuationPOEnv", "(", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", "\n", ")", "\n", "\n", "# check the observation space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "env", ".", "observation_space", ",", "\n", "expected_size", "=", "3", ",", "\n", "expected_min", "=", "-", "5", ",", "\n", "expected_max", "=", "5", "\n", ")", ")", "\n", "\n", "# check the action space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "env", ".", "action_space", ",", "\n", "expected_size", "=", "1", ",", "\n", "expected_min", "=", "-", "1", ",", "\n", "expected_max", "=", "1", "\n", ")", ")", "\n", "\n", "env", ".", "terminate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentWaveAttenuationPOEnv.test_observed": [[1104, 1113], ["test_environments.TestMultiAgentWaveAttenuationPOEnv.assertTrue", "test_environments.TestMultiAgentWaveAttenuationPOEnv.test_observed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_observed"], ["", "def", "test_observed", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that the observed ids are returning the correct vehicles.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_observed", "(", "\n", "env_class", "=", "MultiAgentWaveAttenuationPOEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", ",", "\n", "expected_observed", "=", "[", "\"human_0\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentWaveAttenuationPOEnv.test_reset": [[1116, 1138], ["random.seed", "flow.envs.multiagent.MultiAgentWaveAttenuationPOEnv", "test_environments.TestMultiAgentWaveAttenuationPOEnv.assertEqual", "flow.envs.multiagent.MultiAgentWaveAttenuationPOEnv.reset", "test_environments.TestMultiAgentWaveAttenuationPOEnv.assertEqual", "flow.envs.multiagent.MultiAgentWaveAttenuationPOEnv.reset", "test_environments.TestMultiAgentWaveAttenuationPOEnv.assertEqual", "flow.envs.multiagent.MultiAgentWaveAttenuationPOEnv.k.network.non_internal_length", "flow.envs.multiagent.MultiAgentWaveAttenuationPOEnv.k.network.non_internal_length", "flow.envs.multiagent.MultiAgentWaveAttenuationPOEnv.k.network.non_internal_length"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.non_internal_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.non_internal_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.non_internal_length"], ["", "def", "test_reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests that the reset method creating new ring lengths within the\n        requested range.\n        \"\"\"", "\n", "# set a random seed to ensure the network lengths are always the same", "\n", "# during testing", "\n", "random", ".", "seed", "(", "9001", ")", "\n", "\n", "# create the environment", "\n", "env", "=", "MultiAgentWaveAttenuationPOEnv", "(", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", "\n", ")", "\n", "\n", "# reset the network several times and check its length", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "non_internal_length", "(", ")", ",", "230", ")", "\n", "env", ".", "reset", "(", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "non_internal_length", "(", ")", ",", "239", ")", "\n", "env", ".", "reset", "(", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "non_internal_length", "(", ")", ",", "256", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentMergePOEnv.setUp": [[1144, 1162], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.VehicleParams.add", "flow.core.params.SumoParams", "flow.networks.MergeNetwork", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.networks.merge.ADDITIONAL_NET_PARAMS.copy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\"rl\"", ",", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "vehicles", ".", "add", "(", "\"human\"", ",", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "\n", "self", ".", "sim_params", "=", "SumoParams", "(", ")", "\n", "self", ".", "network", "=", "MergeNetwork", "(", "\n", "name", "=", "\"test_merge\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "MERGE_PARAMS", ".", "copy", "(", ")", ")", ",", "\n", ")", "\n", "self", ".", "env_params", "=", "EnvParams", "(", "\n", "additional_params", "=", "{", "\n", "'max_accel'", ":", "1", ",", "\n", "'max_decel'", ":", "1", ",", "\n", "\"target_velocity\"", ":", "25", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentMergePOEnv.tearDown": [[1165, 1169], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "self", ".", "sim_params", "=", "None", "\n", "self", ".", "network", "=", "None", "\n", "self", ".", "env_params", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentMergePOEnv.test_additional_env_params": [[1170, 1181], ["test_environments.TestMultiAgentMergePOEnv.assertTrue", "test_environments.test_additional_params"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params"], ["", "def", "test_additional_env_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that not returning the correct params leads to an error.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_additional_params", "(", "\n", "env_class", "=", "MultiAgentMergePOEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "additional_params", "=", "{", "\n", "\"max_accel\"", ":", "1", ",", "\n", "\"max_decel\"", ":", "1", ",", "\n", "\"target_velocity\"", ":", "10", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentMergePOEnv.test_observation_action_space": [[1185, 1208], ["flow.envs.multiagent.MultiAgentMergePOEnv", "test_environments.TestMultiAgentMergePOEnv.assertTrue", "test_environments.TestMultiAgentMergePOEnv.assertTrue", "flow.envs.multiagent.MultiAgentMergePOEnv.terminate", "test_environments.test_space", "test_environments.test_space"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space"], ["", "def", "test_observation_action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests the observation and action spaces upon initialization.\"\"\"", "\n", "# create the environment", "\n", "env", "=", "MultiAgentMergePOEnv", "(", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", "\n", ")", "\n", "\n", "# check the observation space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "env", ".", "observation_space", ",", "\n", "expected_size", "=", "5", ",", "\n", "expected_min", "=", "-", "5", ",", "\n", "expected_max", "=", "5", "\n", ")", ")", "\n", "\n", "# check the action space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "env", ".", "action_space", ",", "\n", "expected_size", "=", "1", ",", "expected_min", "=", "-", "1", ",", "expected_max", "=", "1", ")", ")", "\n", "\n", "env", ".", "terminate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentMergePOEnv.test_observed": [[1209, 1218], ["test_environments.TestMultiAgentMergePOEnv.assertTrue", "test_environments.TestMultiAgentMergePOEnv.test_observed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_observed"], ["", "def", "test_observed", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that the observed ids are returning the correct vehicles.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_observed", "(", "\n", "env_class", "=", "MultiAgentMergePOEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", ",", "\n", "expected_observed", "=", "[", "\"human_0\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentHighwayPOEnv.setUp": [[1224, 1242], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.VehicleParams.add", "flow.core.params.SumoParams", "flow.networks.HighwayRampsNetwork", "flow.core.params.EnvParams", "flow.core.params.NetParams", "flow.networks.highway_ramps.ADDITIONAL_NET_PARAMS.copy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\"rl\"", ",", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "vehicles", ".", "add", "(", "\"human\"", ",", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "\n", "self", ".", "sim_params", "=", "SumoParams", "(", ")", "\n", "self", ".", "network", "=", "HighwayRampsNetwork", "(", "\n", "name", "=", "\"test_merge\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "HIGHWAY_PARAMS", ".", "copy", "(", ")", ")", ",", "\n", ")", "\n", "self", ".", "env_params", "=", "EnvParams", "(", "\n", "additional_params", "=", "{", "\n", "'max_accel'", ":", "1", ",", "\n", "'max_decel'", ":", "1", ",", "\n", "\"target_velocity\"", ":", "25", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentHighwayPOEnv.tearDown": [[1245, 1249], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "self", ".", "sim_params", "=", "None", "\n", "self", ".", "network", "=", "None", "\n", "self", ".", "env_params", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentHighwayPOEnv.test_additional_env_params": [[1250, 1261], ["test_environments.TestMultiAgentHighwayPOEnv.assertTrue", "test_environments.test_additional_params"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params"], ["", "def", "test_additional_env_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that not returning the correct params leads to an error.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_additional_params", "(", "\n", "env_class", "=", "MultiAgentHighwayPOEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "additional_params", "=", "{", "\n", "\"max_accel\"", ":", "1", ",", "\n", "\"max_decel\"", ":", "1", ",", "\n", "\"target_velocity\"", ":", "10", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentHighwayPOEnv.test_observation_action_space": [[1265, 1288], ["flow.envs.multiagent.MultiAgentHighwayPOEnv", "test_environments.TestMultiAgentHighwayPOEnv.assertTrue", "test_environments.TestMultiAgentHighwayPOEnv.assertTrue", "flow.envs.multiagent.MultiAgentHighwayPOEnv.terminate", "test_environments.test_space", "test_environments.test_space", "float", "float"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space"], ["", "def", "test_observation_action_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests the observation and action spaces upon initialization.\"\"\"", "\n", "# create the environment", "\n", "env", "=", "MultiAgentHighwayPOEnv", "(", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", "\n", ")", "\n", "\n", "# check the observation space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "env", ".", "observation_space", ",", "\n", "expected_size", "=", "5", ",", "\n", "expected_min", "=", "-", "float", "(", "'inf'", ")", ",", "\n", "expected_max", "=", "float", "(", "'inf'", ")", "\n", ")", ")", "\n", "\n", "# check the action space", "\n", "self", ".", "assertTrue", "(", "test_space", "(", "\n", "env", ".", "action_space", ",", "\n", "expected_size", "=", "1", ",", "expected_min", "=", "-", "1", ",", "expected_max", "=", "1", ")", ")", "\n", "\n", "env", ".", "terminate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentHighwayPOEnv.test_compute_reward": [[1289, 1315], ["flow.envs.multiagent.MultiAgentHighwayPOEnv", "flow.envs.multiagent.MultiAgentHighwayPOEnv.reset", "test_environments.TestMultiAgentHighwayPOEnv.assertDictEqual", "test_environments.TestMultiAgentHighwayPOEnv.assertDictEqual", "flow.envs.multiagent.MultiAgentHighwayPOEnv.k.vehicle.test_set_speed", "test_environments.TestMultiAgentHighwayPOEnv.assertDictEqual", "flow.envs.multiagent.MultiAgentHighwayPOEnv.k.vehicle.test_set_speed", "test_environments.TestMultiAgentHighwayPOEnv.assertDictEqual", "flow.envs.multiagent.MultiAgentHighwayPOEnv.compute_reward", "flow.envs.multiagent.MultiAgentHighwayPOEnv.compute_reward", "flow.envs.multiagent.MultiAgentHighwayPOEnv.compute_reward", "flow.envs.multiagent.MultiAgentHighwayPOEnv.compute_reward"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.compute_reward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.compute_reward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.compute_reward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.compute_reward"], ["", "def", "test_compute_reward", "(", "self", ")", ":", "\n", "# create the environment", "\n", "        ", "env", "=", "MultiAgentHighwayPOEnv", "(", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", "\n", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "# test the no actions case", "\n", "self", ".", "assertDictEqual", "(", "env", ".", "compute_reward", "(", "None", ")", ",", "{", "}", ")", "\n", "\n", "# test the failure case", "\n", "self", ".", "assertDictEqual", "(", "env", ".", "compute_reward", "(", "{", "\"rl_0\"", ":", "0", "}", ",", "fail", "=", "True", ")", ",", "\n", "{", "\"rl_0\"", ":", "0", "}", ")", "\n", "\n", "# test the generic case", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "\"rl_0\"", ",", "5", ")", "\n", "self", ".", "assertDictEqual", "(", "env", ".", "compute_reward", "(", "{", "\"rl_0\"", ":", "0", "}", ",", "fail", "=", "False", ")", ",", "\n", "{", "\"rl_0\"", ":", "0.09446148586775807", "}", ")", "\n", "\n", "# test the evaluate case", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "\"rl_0\"", ",", "5", ")", "\n", "env", ".", "env_params", ".", "evaluate", "=", "True", "\n", "self", ".", "assertDictEqual", "(", "env", ".", "compute_reward", "(", "{", "\"rl_0\"", ":", "0", "}", ",", "fail", "=", "False", ")", ",", "\n", "{", "\"rl_0\"", ":", "5", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.TestMultiAgentHighwayPOEnv.test_observed": [[1316, 1325], ["test_environments.TestMultiAgentHighwayPOEnv.assertTrue", "test_environments.TestMultiAgentHighwayPOEnv.test_observed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_observed"], ["", "def", "test_observed", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that the observed ids are returning the correct vehicles.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_observed", "(", "\n", "env_class", "=", "MultiAgentHighwayPOEnv", ",", "\n", "sim_params", "=", "self", ".", "sim_params", ",", "\n", "network", "=", "self", ".", "network", ",", "\n", "env_params", "=", "self", ".", "env_params", ",", "\n", "expected_observed", "=", "[", "\"human_0\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_additional_params": [[1333, 1376], ["additional_params.keys", "additional_params.copy", "env_class", "flow.core.params.EnvParams"], "function", ["None"], ["", "", "def", "test_additional_params", "(", "env_class", ",", "\n", "sim_params", ",", "\n", "network", ",", "\n", "additional_params", ")", ":", "\n", "    ", "\"\"\"Test that the environment raises an Error in any param is missing.\n\n    Parameters\n    ----------\n    env_class : flow.envs.Env type\n        blank\n    sim_params : flow.core.params.SumoParams\n        sumo-specific parameters\n    network : flow.networks.Network\n        network that works for the environment\n    additional_params : dict\n        the valid and required additional parameters for the environment in\n        EnvParams\n\n    Returns\n    -------\n    bool\n        True if the test passed, False otherwise\n    \"\"\"", "\n", "for", "key", "in", "additional_params", ".", "keys", "(", ")", ":", "\n", "# remove one param from the additional_params dict", "\n", "        ", "new_add", "=", "additional_params", ".", "copy", "(", ")", "\n", "del", "new_add", "[", "key", "]", "\n", "\n", "try", ":", "\n", "            ", "env_class", "(", "\n", "sim_params", "=", "sim_params", ",", "\n", "network", "=", "network", ",", "\n", "env_params", "=", "EnvParams", "(", "additional_params", "=", "new_add", ")", "\n", ")", "\n", "# if no KeyError is raised, the test has failed, so return False", "\n", "return", "False", "\n", "", "except", "KeyError", ":", "\n", "# if a KeyError is raised, test the next param", "\n", "            ", "pass", "\n", "\n", "# if removing all additional params led to KeyErrors, the test has passed,", "\n", "# so return True", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_space": [[1378, 1400], ["all", "all"], "function", ["None"], ["", "def", "test_space", "(", "gym_space", ",", "expected_size", ",", "expected_min", ",", "expected_max", ")", ":", "\n", "    ", "\"\"\"Test that an action or observation space is the correct size and bounds.\n\n    Parameters\n    ----------\n    gym_space : gym.spaces.Box\n        gym space object to be tested\n    expected_size : int\n        expected size\n    expected_min : float or array_like\n        expected minimum value(s)\n    expected_max : float or array_like\n        expected maximum value(s)\n\n    Returns\n    -------\n    bool\n        True if the test passed, False otherwise\n    \"\"\"", "\n", "return", "gym_space", ".", "shape", "[", "0", "]", "==", "expected_size", "and", "all", "(", "gym_space", ".", "high", "==", "expected_max", ")", "and", "all", "(", "gym_space", ".", "low", "==", "expected_min", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_environments.test_observed": [[1402, 1440], ["env_class", "env_class.reset", "env_class.step", "env_class.additional_command", "numpy.all", "env_class.terminate", "numpy.array", "numpy.array", "env_class.k.vehicle.get_observed_ids"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ring.wave_attenuation.WaveAttenuationPOEnv.additional_command", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_observed_ids"], ["", "def", "test_observed", "(", "env_class", ",", "\n", "sim_params", ",", "\n", "network", ",", "\n", "env_params", ",", "\n", "expected_observed", ")", ":", "\n", "    ", "\"\"\"Test that the observed vehicles in the environment are as expected.\n\n    Parameters\n    ----------\n    env_class : flow.envs.Env class\n        blank\n    sim_params : flow.core.params.SumoParams\n        sumo-specific parameters\n    network : flow.networks.Network\n        network that works for the environment\n    env_params : flow.core.params.EnvParams\n        environment-specific parameters\n    expected_observed : array_like\n        expected list of observed vehicles\n\n    Returns\n    -------\n    bool\n        True if the test passed, False otherwise\n    \"\"\"", "\n", "env", "=", "env_class", "(", "sim_params", "=", "sim_params", ",", "\n", "network", "=", "network", ",", "\n", "env_params", "=", "env_params", ")", "\n", "env", ".", "reset", "(", ")", "\n", "env", ".", "step", "(", "None", ")", "\n", "env", ".", "additional_command", "(", ")", "\n", "test_mask", "=", "np", ".", "all", "(", "\n", "np", ".", "array", "(", "env", ".", "k", ".", "vehicle", ".", "get_observed_ids", "(", ")", ")", "==", "\n", "np", ".", "array", "(", "expected_observed", ")", "\n", ")", "\n", "env", ".", "terminate", "(", ")", "\n", "\n", "return", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.TestBottleneckNetwork.test_additional_net_params": [[24, 32], ["test_scenarios.TestBottleneckNetwork.assertTrue", "test_scenarios.test_additional_params"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params"], ["def", "test_additional_net_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that not returning the correct params leads to an error.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_additional_params", "(", "\n", "network_class", "=", "BottleneckNetwork", ",", "\n", "additional_params", "=", "{", "\n", "\"scaling\"", ":", "1", ",", "\n", "'speed_limit'", ":", "23", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.TestFigureEightNetwork.test_additional_net_params": [[41, 51], ["test_scenarios.TestFigureEightNetwork.assertTrue", "test_scenarios.test_additional_params"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params"], ["def", "test_additional_net_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that not returning the correct params leads to an error.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_additional_params", "(", "\n", "network_class", "=", "FigureEightNetwork", ",", "\n", "additional_params", "=", "{", "\n", "\"radius_ring\"", ":", "30", ",", "\n", "\"lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.TestTrafficLightGridNetwork.test_additional_net_params": [[60, 82], ["test_scenarios.TestTrafficLightGridNetwork.assertTrue", "test_scenarios.test_additional_params"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params"], ["def", "test_additional_net_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that not returning the correct params leads to an error.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_additional_params", "(", "\n", "network_class", "=", "TrafficLightGridNetwork", ",", "\n", "additional_params", "=", "{", "\n", "\"grid_array\"", ":", "{", "\n", "\"row_num\"", ":", "3", ",", "\n", "\"col_num\"", ":", "2", ",", "\n", "\"inner_length\"", ":", "None", ",", "\n", "\"short_length\"", ":", "None", ",", "\n", "\"long_length\"", ":", "None", ",", "\n", "\"cars_top\"", ":", "20", ",", "\n", "\"cars_bot\"", ":", "20", ",", "\n", "\"cars_left\"", ":", "20", ",", "\n", "\"cars_right\"", ":", "20", ",", "\n", "}", ",", "\n", "\"horizontal_lanes\"", ":", "1", ",", "\n", "\"vertical_lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "{", "\n", "\"vertical\"", ":", "35", ",", "\n", "\"horizontal\"", ":", "35", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.TestHighwayNetwork.test_additional_net_params": [[92, 105], ["test_scenarios.TestHighwayNetwork.assertTrue", "test_scenarios.test_additional_params"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params"], ["def", "test_additional_net_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that not returning the correct params leads to an error.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_additional_params", "(", "\n", "network_class", "=", "HighwayNetwork", ",", "\n", "additional_params", "=", "{", "\n", "\"length\"", ":", "1000", ",", "\n", "\"lanes\"", ":", "4", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"num_edges\"", ":", "1", ",", "\n", "\"use_ghost_edge\"", ":", "False", ",", "\n", "\"ghost_speed_limit\"", ":", "25", ",", "\n", "\"boundary_cell_length\"", ":", "300", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.TestHighwayNetwork.test_ghost_edge": [[109, 195], ["tests.setup_scripts.highway_exp_setup", "env.reset", "test_scenarios.TestHighwayNetwork.assertEqual", "test_scenarios.TestHighwayNetwork.assertEqual", "test_scenarios.TestHighwayNetwork.assertEqual", "tests.setup_scripts.highway_exp_setup", "env.reset", "test_scenarios.TestHighwayNetwork.assertEqual", "test_scenarios.TestHighwayNetwork.assertEqual", "test_scenarios.TestHighwayNetwork.assertEqual", "test_scenarios.TestHighwayNetwork.assertEqual", "tests.setup_scripts.highway_exp_setup", "env.reset", "test_scenarios.TestHighwayNetwork.assertEqual", "test_scenarios.TestHighwayNetwork.assertEqual", "test_scenarios.TestHighwayNetwork.assertEqual", "test_scenarios.TestHighwayNetwork.assertEqual", "env.k.network.length", "env.k.network.get_edge_list", "env.k.network.speed_limit", "env.k.network.length", "env.k.network.get_edge_list", "env.k.network.speed_limit", "env.k.network.speed_limit", "env.k.network.length", "env.k.network.get_edge_list", "env.k.network.speed_limit", "env.k.network.speed_limit", "flow.core.params.NetParams", "flow.core.params.NetParams", "flow.core.params.NetParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.highway_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.highway_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.highway_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.speed_limit", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.speed_limit", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.speed_limit", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.get_edge_list", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.speed_limit", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.network.aimsun.AimsunKernelNetwork.speed_limit"], ["", "def", "test_ghost_edge", "(", "self", ")", ":", "\n", "        ", "\"\"\"Validate the functionality of the ghost edge feature.\"\"\"", "\n", "# =================================================================== #", "\n", "#                         Without a ghost edge                        #", "\n", "# =================================================================== #", "\n", "\n", "# create the network", "\n", "env", ",", "_", ",", "_", "=", "highway_exp_setup", "(", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "{", "\n", "\"length\"", ":", "1000", ",", "\n", "\"lanes\"", ":", "4", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"num_edges\"", ":", "1", ",", "\n", "\"use_ghost_edge\"", ":", "False", ",", "\n", "\"ghost_speed_limit\"", ":", "25", ",", "\n", "\"boundary_cell_length\"", ":", "300", ",", "\n", "}", ")", "\n", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "# check the network length", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "length", "(", ")", ",", "1000", ")", "\n", "\n", "# check the edge list", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "get_edge_list", "(", ")", ",", "[", "\"highway_0\"", "]", ")", "\n", "\n", "# check the speed limits of the edges", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "speed_limit", "(", "\"highway_0\"", ")", ",", "30", ")", "\n", "\n", "# =================================================================== #", "\n", "#                   With a ghost edge (300m, 25m/s)                   #", "\n", "# =================================================================== #", "\n", "\n", "# create the network", "\n", "env", ",", "_", ",", "_", "=", "highway_exp_setup", "(", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "{", "\n", "\"length\"", ":", "1000", ",", "\n", "\"lanes\"", ":", "4", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"num_edges\"", ":", "1", ",", "\n", "\"use_ghost_edge\"", ":", "True", ",", "\n", "\"ghost_speed_limit\"", ":", "25", ",", "\n", "\"boundary_cell_length\"", ":", "300", ",", "\n", "}", ")", "\n", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "# check the network length", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "length", "(", ")", ",", "1300.1", ")", "\n", "\n", "# check the edge list", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "get_edge_list", "(", ")", ",", "\n", "[", "\"highway_0\"", ",", "\"highway_end\"", "]", ")", "\n", "\n", "# check the speed limits of the edges", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "speed_limit", "(", "\"highway_0\"", ")", ",", "30", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "speed_limit", "(", "\"highway_end\"", ")", ",", "25", ")", "\n", "\n", "# =================================================================== #", "\n", "#                   With a ghost edge (500m, 10m/s)                   #", "\n", "# =================================================================== #", "\n", "\n", "# create the network", "\n", "env", ",", "_", ",", "_", "=", "highway_exp_setup", "(", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "{", "\n", "\"length\"", ":", "1000", ",", "\n", "\"lanes\"", ":", "4", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"num_edges\"", ":", "1", ",", "\n", "\"use_ghost_edge\"", ":", "True", ",", "\n", "\"ghost_speed_limit\"", ":", "10", ",", "\n", "\"boundary_cell_length\"", ":", "500", ",", "\n", "}", ")", "\n", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "# check the network length", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "length", "(", ")", ",", "1500.1", ")", "\n", "\n", "# check the edge list", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "get_edge_list", "(", ")", ",", "\n", "[", "\"highway_0\"", ",", "\"highway_end\"", "]", ")", "\n", "\n", "# check the speed limits of the edges", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "speed_limit", "(", "\"highway_0\"", ")", ",", "30", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "network", ".", "speed_limit", "(", "\"highway_end\"", ")", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.TestRingNetwork.test_additional_net_params": [[201, 211], ["test_scenarios.TestRingNetwork.assertTrue", "test_scenarios.test_additional_params"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params"], ["def", "test_additional_net_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that not returning the correct params leads to an error.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_additional_params", "(", "\n", "network_class", "=", "RingNetwork", ",", "\n", "additional_params", "=", "{", "\n", "\"length\"", ":", "230", ",", "\n", "\"lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.TestMergeNetwork.test_additional_net_params": [[220, 232], ["test_scenarios.TestMergeNetwork.assertTrue", "test_scenarios.test_additional_params"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params"], ["def", "test_additional_net_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that not returning the correct params leads to an error.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_additional_params", "(", "\n", "network_class", "=", "MergeNetwork", ",", "\n", "additional_params", "=", "{", "\n", "\"merge_length\"", ":", "100", ",", "\n", "\"pre_merge_length\"", ":", "200", ",", "\n", "\"post_merge_length\"", ":", "100", ",", "\n", "\"merge_lanes\"", ":", "1", ",", "\n", "\"highway_lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "30", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.TestMultiRingNetwork.test_additional_net_params": [[241, 252], ["test_scenarios.TestMultiRingNetwork.assertTrue", "test_scenarios.test_additional_params"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params"], ["def", "test_additional_net_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that not returning the correct params leads to an error.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_additional_params", "(", "\n", "network_class", "=", "MultiRingNetwork", ",", "\n", "additional_params", "=", "{", "\n", "\"length\"", ":", "230", ",", "\n", "\"lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", ",", "\n", "\"num_rings\"", ":", "7", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.TestI210SubNetwork.test_additional_net_params": [[261, 269], ["test_scenarios.TestI210SubNetwork.assertTrue", "test_scenarios.test_additional_params"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params"], ["def", "test_additional_net_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that not returning the correct params leads to an error.\"\"\"", "\n", "self", ".", "assertTrue", "(", "\n", "test_additional_params", "(", "\n", "network_class", "=", "I210SubNetwork", ",", "\n", "additional_params", "=", "{", "\n", "\"on_ramp\"", ":", "False", ",", "\n", "\"ghost_edge\"", ":", "False", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.TestI210SubNetwork.test_specify_routes": [[273, 399], ["flow.networks.I210SubNetwork", "test_scenarios.TestI210SubNetwork.assertEqual", "flow.networks.I210SubNetwork", "test_scenarios.TestI210SubNetwork.assertEqual", "flow.networks.I210SubNetwork", "test_scenarios.TestI210SubNetwork.assertEqual", "flow.networks.I210SubNetwork", "test_scenarios.TestI210SubNetwork.assertEqual", "sorted", "sorted", "sorted", "sorted", "flow.core.params.VehicleParams", "flow.core.params.NetParams", "list", "flow.core.params.VehicleParams", "flow.core.params.NetParams", "list", "flow.core.params.VehicleParams", "flow.core.params.NetParams", "list", "flow.core.params.VehicleParams", "flow.core.params.NetParams", "list", "flow.networks.I210SubNetwork.specify_routes().keys", "flow.networks.I210SubNetwork.specify_routes().keys", "flow.networks.I210SubNetwork.specify_routes().keys", "flow.networks.I210SubNetwork.specify_routes().keys", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "flow.networks.I210SubNetwork.specify_routes", "flow.networks.I210SubNetwork.specify_routes", "flow.networks.I210SubNetwork.specify_routes", "flow.networks.I210SubNetwork.specify_routes"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.NoRouteNetwork.specify_routes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.NoRouteNetwork.specify_routes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.NoRouteNetwork.specify_routes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenario_base_class.NoRouteNetwork.specify_routes"], ["", "def", "test_specify_routes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Validates that the routes are properly specified for the network.\n\n        This is done simply by checking the initial edges routes are specified\n        from, which alternates based on choice of network configuration.\n\n        This method tests the routes for the following cases:\n\n        1. on_ramp = False, ghost_edge = False\n        2. on_ramp = True,  ghost_edge = False\n        3. on_ramp = False, ghost_edge = True\n        4. on_ramp = True,  ghost_edge = True\n        \"\"\"", "\n", "# test case 1", "\n", "network", "=", "I210SubNetwork", "(", "\n", "name", "=", "'test-3'", ",", "\n", "vehicles", "=", "VehicleParams", "(", ")", ",", "\n", "net_params", "=", "NetParams", "(", "\n", "template", "=", "os", ".", "path", ".", "join", "(", "\n", "config", ".", "PROJECT_PATH", ",", "\n", "\"examples/exp_configs/templates/sumo/test2.net.xml\"", "\n", ")", ",", "\n", "additional_params", "=", "{", "\n", "\"on_ramp\"", ":", "False", ",", "\n", "\"ghost_edge\"", ":", "False", ",", "\n", "}", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "[", "'119257914'", "]", ",", "\n", "sorted", "(", "list", "(", "network", ".", "specify_routes", "(", "network", ".", "net_params", ")", ".", "keys", "(", ")", ")", ")", "\n", ")", "\n", "\n", "del", "network", "\n", "\n", "# test case 2", "\n", "network", "=", "I210SubNetwork", "(", "\n", "name", "=", "'test-3'", ",", "\n", "vehicles", "=", "VehicleParams", "(", ")", ",", "\n", "net_params", "=", "NetParams", "(", "\n", "template", "=", "os", ".", "path", ".", "join", "(", "\n", "config", ".", "PROJECT_PATH", ",", "\n", "\"examples/exp_configs/templates/sumo/test2.net.xml\"", "\n", ")", ",", "\n", "additional_params", "=", "{", "\n", "\"on_ramp\"", ":", "True", ",", "\n", "\"ghost_edge\"", ":", "True", ",", "\n", "}", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "[", "'119257908#0'", ",", "\n", "'119257908#1'", ",", "\n", "'119257908#1-AddedOffRampEdge'", ",", "\n", "'119257908#1-AddedOnRampEdge'", ",", "\n", "'119257908#2'", ",", "\n", "'119257908#3'", ",", "\n", "'119257914'", ",", "\n", "'173381935'", ",", "\n", "'27414342#0'", ",", "\n", "'27414342#1-AddedOnRampEdge'", ",", "\n", "'27414345'", ",", "\n", "'ghost0'", "]", ",", "\n", "sorted", "(", "list", "(", "network", ".", "specify_routes", "(", "network", ".", "net_params", ")", ".", "keys", "(", ")", ")", ")", "\n", ")", "\n", "\n", "del", "network", "\n", "\n", "# test case 3", "\n", "network", "=", "I210SubNetwork", "(", "\n", "name", "=", "'test-3'", ",", "\n", "vehicles", "=", "VehicleParams", "(", ")", ",", "\n", "net_params", "=", "NetParams", "(", "\n", "template", "=", "os", ".", "path", ".", "join", "(", "\n", "config", ".", "PROJECT_PATH", ",", "\n", "\"examples/exp_configs/templates/sumo/test2.net.xml\"", "\n", ")", ",", "\n", "additional_params", "=", "{", "\n", "\"on_ramp\"", ":", "False", ",", "\n", "\"ghost_edge\"", ":", "True", ",", "\n", "}", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "[", "'119257914'", ",", "'ghost0'", "]", ",", "\n", "sorted", "(", "list", "(", "network", ".", "specify_routes", "(", "network", ".", "net_params", ")", ".", "keys", "(", ")", ")", ")", "\n", ")", "\n", "\n", "del", "network", "\n", "\n", "# test case 4", "\n", "network", "=", "I210SubNetwork", "(", "\n", "name", "=", "'test-3'", ",", "\n", "vehicles", "=", "VehicleParams", "(", ")", ",", "\n", "net_params", "=", "NetParams", "(", "\n", "template", "=", "os", ".", "path", ".", "join", "(", "\n", "config", ".", "PROJECT_PATH", ",", "\n", "\"examples/exp_configs/templates/sumo/test2.net.xml\"", "\n", ")", ",", "\n", "additional_params", "=", "{", "\n", "\"on_ramp\"", ":", "True", ",", "\n", "\"ghost_edge\"", ":", "True", ",", "\n", "}", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "[", "'119257908#0'", ",", "\n", "'119257908#1'", ",", "\n", "'119257908#1-AddedOffRampEdge'", ",", "\n", "'119257908#1-AddedOnRampEdge'", ",", "\n", "'119257908#2'", ",", "\n", "'119257908#3'", ",", "\n", "'119257914'", ",", "\n", "'173381935'", ",", "\n", "'27414342#0'", ",", "\n", "'27414342#1-AddedOnRampEdge'", ",", "\n", "'27414345'", ",", "\n", "'ghost0'", "]", ",", "\n", "sorted", "(", "list", "(", "network", ".", "specify_routes", "(", "network", ".", "net_params", ")", ".", "keys", "(", ")", ")", ")", "\n", ")", "\n", "\n", "del", "network", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_scenarios.test_additional_params": [[406, 443], ["additional_params.keys", "additional_params.copy", "network_class", "flow.core.params.VehicleParams", "flow.core.params.NetParams"], "function", ["None"], ["", "", "def", "test_additional_params", "(", "network_class", ",", "\n", "additional_params", ")", ":", "\n", "    ", "\"\"\"Test that the environment raises an Error in any param is missing.\n\n    Parameters\n    ----------\n    network_class : flow.networks.*\n        the network class that this method will try to instantiate\n    additional_params : dict\n        the valid and required additional parameters for the environment in\n        NetParams\n\n    Returns\n    -------\n    bool\n        True if the test passed, False otherwise\n    \"\"\"", "\n", "for", "key", "in", "additional_params", ".", "keys", "(", ")", ":", "\n", "# remove one param from the additional_params dict", "\n", "        ", "new_add", "=", "additional_params", ".", "copy", "(", ")", "\n", "del", "new_add", "[", "key", "]", "\n", "\n", "try", ":", "\n", "            ", "network_class", "(", "\n", "name", "=", "'test'", ",", "\n", "vehicles", "=", "VehicleParams", "(", ")", ",", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "new_add", ")", "\n", ")", "\n", "# if no KeyError is raised, the test has failed, so return False", "\n", "return", "False", "\n", "", "except", "KeyError", ":", "\n", "# if a KeyError is raised, test the next param", "\n", "            ", "pass", "\n", "\n", "# if removing all additional params led to KeyErrors, the test has passed,", "\n", "# so return True", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.test_parse_args": [[63, 91], ["examples.simulate.parse_args", "test_examples.TestNonRLExamples.assertDictEqual", "examples.simulate.parse_args", "test_examples.TestNonRLExamples.assertDictEqual", "vars", "vars"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args"], ["def", "test_parse_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Validate the functionality of the parse_args method in simulate.py.\"\"\"", "\n", "# test the default case", "\n", "args", "=", "parse_simulate_args", "(", "[", "\"exp_config\"", "]", ")", "\n", "\n", "self", ".", "assertDictEqual", "(", "vars", "(", "args", ")", ",", "{", "\n", "'aimsun'", ":", "False", ",", "\n", "'exp_config'", ":", "'exp_config'", ",", "\n", "'gen_emission'", ":", "False", ",", "\n", "'no_render'", ":", "False", ",", "\n", "'num_runs'", ":", "1", "\n", "}", ")", "\n", "\n", "# test the case when optional args are specified", "\n", "args", "=", "parse_simulate_args", "(", "[", "\n", "\"exp_config\"", ",", "\n", "'--aimsun'", ",", "\n", "'--gen_emission'", ",", "\n", "'--no_render'", ",", "\n", "'--num_runs'", ",", "'2'", "\n", "]", ")", "\n", "\n", "self", ".", "assertDictEqual", "(", "vars", "(", "args", ")", ",", "{", "\n", "'aimsun'", ":", "True", ",", "\n", "'exp_config'", ":", "'exp_config'", ",", "\n", "'gen_emission'", ":", "True", ",", "\n", "'no_render'", ":", "True", ",", "\n", "'num_runs'", ":", "2", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.test_bottleneck": [[93, 96], ["test_examples.TestNonRLExamples.run_simulation"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.run_simulation"], ["", "def", "test_bottleneck", "(", "self", ")", ":", "\n", "        ", "\"\"\"Verify that examples/exp_configs/non_rl/bottleneck.py is working.\"\"\"", "\n", "self", ".", "run_simulation", "(", "non_rl_bottleneck", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.test_figure_eight": [[97, 100], ["test_examples.TestNonRLExamples.run_simulation"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.run_simulation"], ["", "def", "test_figure_eight", "(", "self", ")", ":", "\n", "        ", "\"\"\"Verify that examples/exp_configs/non_rl/figure_eight.py is working.\"\"\"", "\n", "self", ".", "run_simulation", "(", "non_rl_figure_eight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.test_traffic_light_grid": [[101, 104], ["test_examples.TestNonRLExamples.run_simulation"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.run_simulation"], ["", "def", "test_traffic_light_grid", "(", "self", ")", ":", "\n", "        ", "\"\"\"Verify that examples/exp_configs/non_rl/traffic_light_grid.py is working.\"\"\"", "\n", "self", ".", "run_simulation", "(", "non_rl_traffic_light_grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.test_highway": [[105, 109], ["test_examples.TestNonRLExamples.run_simulation"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.run_simulation"], ["", "def", "test_highway", "(", "self", ")", ":", "\n", "        ", "\"\"\"Verify that examples/exp_configs/non_rl/highway.py is working.\"\"\"", "\n", "# import the experiment variable from the example", "\n", "self", ".", "run_simulation", "(", "non_rl_highway", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.test_highway_ramps": [[110, 113], ["test_examples.TestNonRLExamples.run_simulation"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.run_simulation"], ["", "def", "test_highway_ramps", "(", "self", ")", ":", "\n", "        ", "\"\"\"Verify that examples/exp_configs/non_rl/highway_ramps.py is working.\"\"\"", "\n", "self", ".", "run_simulation", "(", "non_rl_highway_ramps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.test_merge": [[114, 117], ["test_examples.TestNonRLExamples.run_simulation"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.run_simulation"], ["", "def", "test_merge", "(", "self", ")", ":", "\n", "        ", "\"\"\"Verify that examples/exp_configs/non_rl/merge.py is working.\"\"\"", "\n", "self", ".", "run_simulation", "(", "non_rl_merge", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.test_ring": [[118, 121], ["test_examples.TestNonRLExamples.run_simulation"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.run_simulation"], ["", "def", "test_ring", "(", "self", ")", ":", "\n", "        ", "\"\"\"Verify that examples/exp_configs/non_rl/ring.py is working.\"\"\"", "\n", "self", ".", "run_simulation", "(", "non_rl_ring", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.test_bay_bridge": [[122, 126], ["test_examples.TestNonRLExamples.run_simulation"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.run_simulation"], ["", "def", "test_bay_bridge", "(", "self", ")", ":", "\n", "        ", "\"\"\"Verify that examples/exp_configs/non_rl/bay_bridge.py is working.\"\"\"", "\n", "# test without inflows and traffic lights", "\n", "self", ".", "run_simulation", "(", "non_rl_bay_bridge", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.test_bay_bridge_toll": [[133, 136], ["test_examples.TestNonRLExamples.run_simulation"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.run_simulation"], ["", "def", "test_bay_bridge_toll", "(", "self", ")", ":", "\n", "        ", "\"\"\"Verify that examples/exp_configs/non_rl/bay_bridge_toll.py is working.\"\"\"", "\n", "self", ".", "run_simulation", "(", "non_rl_bay_bridge_toll", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.test_minicity": [[137, 140], ["test_examples.TestNonRLExamples.run_simulation"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.run_simulation"], ["", "def", "test_minicity", "(", "self", ")", ":", "\n", "        ", "\"\"\"Verify that examples/exp_configs/non_rl/minicity.py is working.\"\"\"", "\n", "self", ".", "run_simulation", "(", "non_rl_minicity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.test_i210": [[141, 144], ["test_examples.TestNonRLExamples.run_simulation"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.run_simulation"], ["", "def", "test_i210", "(", "self", ")", ":", "\n", "        ", "\"\"\"Verify that examples/exp_configs/non_rl/i210_subnetwork.py is working.\"\"\"", "\n", "self", ".", "run_simulation", "(", "non_rl_i210", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.test_highway_single": [[145, 148], ["test_examples.TestNonRLExamples.run_simulation"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.run_simulation"], ["", "def", "test_highway_single", "(", "self", ")", ":", "\n", "        ", "\"\"\"Verify that examples/exp_configs/non_rl/highway_single.py is working.\"\"\"", "\n", "self", ".", "run_simulation", "(", "non_rl_highway_single", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestNonRLExamples.run_simulation": [[149, 160], ["flow.core.experiment.Experiment", "flow.core.experiment.Experiment.run"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run"], ["", "@", "staticmethod", "\n", "def", "run_simulation", "(", "flow_params", ")", ":", "\n", "# make the horizon small and set render to False", "\n", "        ", "flow_params", "[", "'sim'", "]", ".", "render", "=", "False", "\n", "flow_params", "[", "'env'", "]", ".", "horizon", "=", "5", "\n", "\n", "# create an experiment object", "\n", "exp", "=", "Experiment", "(", "flow_params", ")", "\n", "\n", "# run the experiment for one run", "\n", "exp", ".", "run", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestTrain.test_parse_args": [[164, 195], ["examples.train.parse_args", "test_examples.TestTrain.assertDictEqual", "examples.train.parse_args", "test_examples.TestTrain.assertDictEqual", "vars", "vars"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args"], ["    ", "def", "test_parse_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests the parse_args method in train.py.\"\"\"", "\n", "# test the default case", "\n", "args", "=", "parse_train_args", "(", "[", "\"exp_config\"", "]", ")", "\n", "\n", "self", ".", "assertDictEqual", "(", "vars", "(", "args", ")", ",", "{", "\n", "'exp_config'", ":", "'exp_config'", ",", "\n", "'rl_trainer'", ":", "'rllib'", ",", "\n", "'num_cpus'", ":", "1", ",", "\n", "'num_steps'", ":", "5000", ",", "\n", "'rollout_size'", ":", "1000", ",", "\n", "'checkpoint_path'", ":", "None", "\n", "}", ")", "\n", "\n", "# test the case when optional args are specified", "\n", "args", "=", "parse_train_args", "(", "[", "\n", "\"exp_config\"", ",", "\n", "\"--rl_trainer\"", ",", "\"h-baselines\"", ",", "\n", "\"--num_cpus\"", "\"2\"", ",", "\n", "\"--num_steps\"", ",", "\"3\"", ",", "\n", "\"--rollout_size\"", ",", "\"4\"", ",", "\n", "\"--checkpoint_path\"", ",", "\"5\"", ",", "\n", "]", ")", "\n", "\n", "self", ".", "assertDictEqual", "(", "vars", "(", "args", ")", ",", "{", "\n", "'checkpoint_path'", ":", "'5'", ",", "\n", "'exp_config'", ":", "'exp_config'", ",", "\n", "'num_cpus'", ":", "1", ",", "\n", "'num_steps'", ":", "3", ",", "\n", "'rl_trainer'", ":", "'h-baselines'", ",", "\n", "'rollout_size'", ":", "4", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestStableBaselineExamples.run_exp": [[204, 208], ["examples.train.run_model_stablebaseline", "examples.train.run_model_stablebaseline.env.close"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.examples.train.run_model_stablebaseline", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close"], ["@", "staticmethod", "\n", "def", "run_exp", "(", "flow_params", ")", ":", "\n", "        ", "train_model", "=", "run_stable_baselines_model", "(", "flow_params", ",", "1", ",", "4", ",", "4", ")", "\n", "train_model", ".", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestStableBaselineExamples.test_singleagent_figure_eight": [[209, 211], ["test_examples.TestStableBaselineExamples.run_exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp"], ["", "def", "test_singleagent_figure_eight", "(", "self", ")", ":", "\n", "        ", "self", ".", "run_exp", "(", "singleagent_figure_eight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestStableBaselineExamples.test_singleagent_traffic_light_grid": [[212, 214], ["test_examples.TestStableBaselineExamples.run_exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp"], ["", "def", "test_singleagent_traffic_light_grid", "(", "self", ")", ":", "\n", "        ", "self", ".", "run_exp", "(", "singleagent_traffic_light_grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestStableBaselineExamples.test_singleagent_merge": [[215, 217], ["test_examples.TestStableBaselineExamples.run_exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp"], ["", "def", "test_singleagent_merge", "(", "self", ")", ":", "\n", "        ", "self", ".", "run_exp", "(", "singleagent_merge", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestStableBaselineExamples.test_singleagent_ring": [[218, 220], ["test_examples.TestStableBaselineExamples.run_exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp"], ["", "def", "test_singleagent_ring", "(", "self", ")", ":", "\n", "        ", "self", ".", "run_exp", "(", "singleagent_ring", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestStableBaselineExamples.test_singleagent_bottleneck": [[221, 223], ["test_examples.TestStableBaselineExamples.run_exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp"], ["", "def", "test_singleagent_bottleneck", "(", "self", ")", ":", "\n", "        ", "self", ".", "run_exp", "(", "singleagent_bottleneck", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestHBaselineExamples.run_exp": [[231, 241], ["examples.train.train_h_baselines"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.examples.train.train_h_baselines"], ["@", "staticmethod", "\n", "def", "run_exp", "(", "env_name", ",", "multiagent", ")", ":", "\n", "        ", "train_h_baselines", "(", "\n", "env_name", "=", "env_name", ",", "\n", "args", "=", "[", "\n", "env_name", ",", "\n", "\"--initial_exploration_steps\"", ",", "\"1\"", ",", "\n", "\"--total_steps\"", ",", "\"10\"", "\n", "]", ",", "\n", "multiagent", "=", "multiagent", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestHBaselineExamples.test_singleagent_ring": [[243, 245], ["test_examples.TestHBaselineExamples.run_exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp"], ["", "def", "test_singleagent_ring", "(", "self", ")", ":", "\n", "        ", "self", ".", "run_exp", "(", "\"singleagent_ring\"", ",", "multiagent", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestHBaselineExamples.test_multiagent_ring": [[246, 248], ["test_examples.TestHBaselineExamples.run_exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp"], ["", "def", "test_multiagent_ring", "(", "self", ")", ":", "\n", "        ", "self", ".", "run_exp", "(", "\"multiagent_ring\"", ",", "multiagent", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.setUp": [[258, 261], ["ray.is_initialized", "ray.init"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "if", "not", "ray", ".", "is_initialized", "(", ")", ":", "\n", "            ", "ray", ".", "init", "(", "num_cpus", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.test_singleagent_figure_eight": [[262, 264], ["test_examples.TestRllibExamples.run_exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp"], ["", "", "def", "test_singleagent_figure_eight", "(", "self", ")", ":", "\n", "        ", "self", ".", "run_exp", "(", "singleagent_figure_eight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.test_singleagent_traffic_light_grid": [[265, 267], ["test_examples.TestRllibExamples.run_exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp"], ["", "def", "test_singleagent_traffic_light_grid", "(", "self", ")", ":", "\n", "        ", "self", ".", "run_exp", "(", "singleagent_traffic_light_grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.test_singleagent_traffic_light_grid_inflows": [[268, 270], ["None"], "methods", ["None"], ["", "def", "test_singleagent_traffic_light_grid_inflows", "(", "self", ")", ":", "\n", "        ", "pass", "# FIXME", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.test_singleagent_merge": [[271, 273], ["test_examples.TestRllibExamples.run_exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp"], ["", "def", "test_singleagent_merge", "(", "self", ")", ":", "\n", "        ", "self", ".", "run_exp", "(", "singleagent_merge", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.test_singleagent_ring": [[274, 276], ["test_examples.TestRllibExamples.run_exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp"], ["", "def", "test_singleagent_ring", "(", "self", ")", ":", "\n", "        ", "self", ".", "run_exp", "(", "singleagent_ring", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.test_singleagent_bottleneck": [[277, 279], ["test_examples.TestRllibExamples.run_exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp"], ["", "def", "test_singleagent_bottleneck", "(", "self", ")", ":", "\n", "        ", "self", ".", "run_exp", "(", "singleagent_bottleneck", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.test_adversarial_figure_eight": [[280, 289], ["test_examples.TestRllibExamples.run_exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp"], ["", "def", "test_adversarial_figure_eight", "(", "self", ")", ":", "\n", "        ", "from", "examples", ".", "exp_configs", ".", "rl", ".", "multiagent", ".", "adversarial_figure_eight", "import", "POLICY_GRAPHS", "as", "af8pg", "\n", "from", "examples", ".", "exp_configs", ".", "rl", ".", "multiagent", ".", "adversarial_figure_eight", "import", "policy_mapping_fn", "as", "af8pmf", "\n", "\n", "kwargs", "=", "{", "\n", "\"policy_graphs\"", ":", "af8pg", ",", "\n", "\"policy_mapping_fn\"", ":", "af8pmf", "\n", "}", "\n", "self", ".", "run_exp", "(", "adversarial_figure_eight", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.test_multiagent_figure_eight": [[290, 299], ["test_examples.TestRllibExamples.run_exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp"], ["", "def", "test_multiagent_figure_eight", "(", "self", ")", ":", "\n", "        ", "from", "examples", ".", "exp_configs", ".", "rl", ".", "multiagent", ".", "multiagent_figure_eight", "import", "POLICY_GRAPHS", "as", "mf8pg", "\n", "from", "examples", ".", "exp_configs", ".", "rl", ".", "multiagent", ".", "multiagent_figure_eight", "import", "policy_mapping_fn", "as", "mf8pmf", "\n", "\n", "kwargs", "=", "{", "\n", "\"policy_graphs\"", ":", "mf8pg", ",", "\n", "\"policy_mapping_fn\"", ":", "mf8pmf", "\n", "}", "\n", "self", ".", "run_exp", "(", "multiagent_figure_eight", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.test_lord_of_the_rings": [[300, 311], ["test_examples.TestRllibExamples.run_exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp"], ["", "def", "test_lord_of_the_rings", "(", "self", ")", ":", "\n", "        ", "from", "examples", ".", "exp_configs", ".", "rl", ".", "multiagent", ".", "lord_of_the_rings", "import", "POLICY_GRAPHS", "as", "ltrpg", "\n", "from", "examples", ".", "exp_configs", ".", "rl", ".", "multiagent", ".", "lord_of_the_rings", "import", "POLICIES_TO_TRAIN", "as", "ltrpt", "\n", "from", "examples", ".", "exp_configs", ".", "rl", ".", "multiagent", ".", "lord_of_the_rings", "import", "policy_mapping_fn", "as", "ltrpmf", "\n", "\n", "kwargs", "=", "{", "\n", "\"policy_graphs\"", ":", "ltrpg", ",", "\n", "\"policies_to_train\"", ":", "ltrpt", ",", "\n", "\"policy_mapping_fn\"", ":", "ltrpmf", "\n", "}", "\n", "self", ".", "run_exp", "(", "lord_of_the_rings", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.test_multiagent_ring": [[312, 321], ["test_examples.TestRllibExamples.run_exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp"], ["", "def", "test_multiagent_ring", "(", "self", ")", ":", "\n", "        ", "from", "examples", ".", "exp_configs", ".", "rl", ".", "multiagent", ".", "multiagent_ring", "import", "POLICY_GRAPHS", "as", "mrpg", "\n", "from", "examples", ".", "exp_configs", ".", "rl", ".", "multiagent", ".", "multiagent_ring", "import", "policy_mapping_fn", "as", "mrpmf", "\n", "\n", "kwargs", "=", "{", "\n", "\"policy_graphs\"", ":", "mrpg", ",", "\n", "\"policy_mapping_fn\"", ":", "mrpmf", "\n", "}", "\n", "self", ".", "run_exp", "(", "multiagent_ring", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.test_multiagent_merge": [[322, 331], ["test_examples.TestRllibExamples.run_exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp"], ["", "def", "test_multiagent_merge", "(", "self", ")", ":", "\n", "        ", "from", "examples", ".", "exp_configs", ".", "rl", ".", "multiagent", ".", "multiagent_merge", "import", "POLICY_GRAPHS", "as", "mmpg", "\n", "from", "examples", ".", "exp_configs", ".", "rl", ".", "multiagent", ".", "multiagent_merge", "import", "policy_mapping_fn", "as", "mmpmf", "\n", "\n", "kwargs", "=", "{", "\n", "\"policy_graphs\"", ":", "mmpg", ",", "\n", "\"policy_mapping_fn\"", ":", "mmpmf", "\n", "}", "\n", "self", ".", "run_exp", "(", "multiagent_merge", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.test_multi_traffic_light_grid": [[332, 343], ["test_examples.TestRllibExamples.run_exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp"], ["", "def", "test_multi_traffic_light_grid", "(", "self", ")", ":", "\n", "        ", "from", "examples", ".", "exp_configs", ".", "rl", ".", "multiagent", ".", "multiagent_traffic_light_grid", "import", "POLICY_GRAPHS", "as", "mtlpg", "\n", "from", "examples", ".", "exp_configs", ".", "rl", ".", "multiagent", ".", "multiagent_traffic_light_grid", "import", "POLICIES_TO_TRAIN", "as", "mtlpt", "\n", "from", "examples", ".", "exp_configs", ".", "rl", ".", "multiagent", ".", "multiagent_traffic_light_grid", "import", "policy_mapping_fn", "as", "mtlpmf", "\n", "\n", "kwargs", "=", "{", "\n", "\"policy_graphs\"", ":", "mtlpg", ",", "\n", "\"policies_to_train\"", ":", "mtlpt", ",", "\n", "\"policy_mapping_fn\"", ":", "mtlpmf", "\n", "}", "\n", "self", ".", "run_exp", "(", "multiagent_traffic_light_grid", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.test_multi_highway": [[344, 355], ["test_examples.TestRllibExamples.run_exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp"], ["", "def", "test_multi_highway", "(", "self", ")", ":", "\n", "        ", "from", "examples", ".", "exp_configs", ".", "rl", ".", "multiagent", ".", "multiagent_highway", "import", "POLICY_GRAPHS", "as", "mhpg", "\n", "from", "examples", ".", "exp_configs", ".", "rl", ".", "multiagent", ".", "multiagent_highway", "import", "POLICIES_TO_TRAIN", "as", "mhpt", "\n", "from", "examples", ".", "exp_configs", ".", "rl", ".", "multiagent", ".", "multiagent_highway", "import", "policy_mapping_fn", "as", "mhpmf", "\n", "\n", "kwargs", "=", "{", "\n", "\"policy_graphs\"", ":", "mhpg", ",", "\n", "\"policies_to_train\"", ":", "mhpt", ",", "\n", "\"policy_mapping_fn\"", ":", "mhpmf", "\n", "}", "\n", "self", ".", "run_exp", "(", "multiagent_highway", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.test_multiagent_i210": [[356, 406], ["copy.deepcopy", "make_create_env", "register_env", "create_env", "test_examples.TestRllibExamples.run_exp", "copy.deepcopy", "make_create_env", "register_env", "create_env", "test_examples.TestRllibExamples.run_exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp"], ["", "def", "test_multiagent_i210", "(", "self", ")", ":", "\n", "        ", "from", "examples", ".", "exp_configs", ".", "rl", ".", "multiagent", ".", "multiagent_i210", "import", "POLICIES_TO_TRAIN", "as", "mi210pr", "\n", "from", "examples", ".", "exp_configs", ".", "rl", ".", "multiagent", ".", "multiagent_i210", "import", "policy_mapping_fn", "as", "mi210mf", "\n", "\n", "from", "ray", ".", "rllib", ".", "agents", ".", "ppo", ".", "ppo_policy", "import", "PPOTFPolicy", "\n", "from", "ray", ".", "tune", ".", "registry", "import", "register_env", "\n", "from", "flow", ".", "utils", ".", "registry", "import", "make_create_env", "\n", "# test observation space 1", "\n", "flow_params", "=", "deepcopy", "(", "multiagent_i210", ")", "\n", "flow_params", "[", "'env'", "]", ".", "additional_params", "[", "'lead_obs'", "]", "=", "True", "\n", "create_env", ",", "env_name", "=", "make_create_env", "(", "params", "=", "flow_params", ",", "version", "=", "0", ")", "\n", "\n", "# register as rllib env", "\n", "register_env", "(", "env_name", ",", "create_env", ")", "\n", "\n", "# multiagent configuration", "\n", "test_env", "=", "create_env", "(", ")", "\n", "obs_space", "=", "test_env", ".", "observation_space", "\n", "act_space", "=", "test_env", ".", "action_space", "\n", "\n", "POLICY_GRAPHS", "=", "{", "'av'", ":", "(", "PPOTFPolicy", ",", "obs_space", ",", "act_space", ",", "{", "}", ")", "}", "\n", "\n", "kwargs", "=", "{", "\n", "\"policy_graphs\"", ":", "POLICY_GRAPHS", ",", "\n", "\"policies_to_train\"", ":", "mi210pr", ",", "\n", "\"policy_mapping_fn\"", ":", "mi210mf", "\n", "}", "\n", "self", ".", "run_exp", "(", "flow_params", ",", "**", "kwargs", ")", "\n", "\n", "# test observation space 2", "\n", "flow_params", "=", "deepcopy", "(", "multiagent_i210", ")", "\n", "flow_params", "[", "'env'", "]", ".", "additional_params", "[", "'lead_obs'", "]", "=", "False", "\n", "create_env", ",", "env_name", "=", "make_create_env", "(", "params", "=", "flow_params", ",", "version", "=", "0", ")", "\n", "\n", "# register as rllib env", "\n", "register_env", "(", "env_name", ",", "create_env", ")", "\n", "\n", "# multiagent configuration", "\n", "test_env", "=", "create_env", "(", ")", "\n", "obs_space", "=", "test_env", ".", "observation_space", "\n", "act_space", "=", "test_env", ".", "action_space", "\n", "\n", "POLICY_GRAPHS", "=", "{", "'av'", ":", "(", "PPOTFPolicy", ",", "obs_space", ",", "act_space", ",", "{", "}", ")", "}", "\n", "\n", "kwargs", "=", "{", "\n", "\"policy_graphs\"", ":", "POLICY_GRAPHS", ",", "\n", "\"policies_to_train\"", ":", "mi210pr", ",", "\n", "\"policy_mapping_fn\"", ":", "mi210mf", "\n", "}", "\n", "self", ".", "run_exp", "(", "flow_params", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_examples.TestRllibExamples.run_exp": [[407, 432], ["examples.train.setup_exps_rllib", "ray.tune.run_experiments", "ray.init", "print"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.examples.train.setup_exps_rllib"], ["", "@", "staticmethod", "\n", "def", "run_exp", "(", "flow_params", ",", "**", "kwargs", ")", ":", "\n", "        ", "alg_run", ",", "env_name", ",", "config", "=", "setup_rllib_exps", "(", "flow_params", ",", "1", ",", "1", ",", "**", "kwargs", ")", "\n", "\n", "try", ":", "\n", "            ", "ray", ".", "init", "(", "num_cpus", "=", "1", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"ERROR\"", ",", "e", ")", "\n", "", "config", "[", "'train_batch_size'", "]", "=", "50", "\n", "config", "[", "'horizon'", "]", "=", "50", "\n", "config", "[", "'sample_batch_size'", "]", "=", "50", "\n", "config", "[", "'num_workers'", "]", "=", "0", "\n", "config", "[", "'sgd_minibatch_size'", "]", "=", "32", "\n", "\n", "run_experiments", "(", "{", "\n", "'test'", ":", "{", "\n", "'run'", ":", "alg_run", ",", "\n", "'env'", ":", "env_name", ",", "\n", "'config'", ":", "{", "\n", "**", "config", "\n", "}", ",", "\n", "\n", "'checkpoint_freq'", ":", "1", ",", "\n", "'stop'", ":", "{", "\n", "'training_iteration'", ":", "1", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_rewards.TestRewards.test_desired_velocity": [[18, 59], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.EnvParams", "tests.setup_scripts.ring_road_exp_setup", "test_rewards.TestRewards.assertEqual", "test_rewards.TestRewards.assertEqual", "test_rewards.TestRewards.assertEqual", "env.k.vehicle.test_set_speed", "test_rewards.TestRewards.assertAlmostEqual", "test_rewards.TestRewards.assertAlmostEqual", "env.k.vehicle.test_set_speed", "test_rewards.TestRewards.assertAlmostEqual", "flow.core.rewards.desired_velocity", "flow.core.rewards.desired_velocity", "flow.core.rewards.desired_velocity", "numpy.sqrt", "flow.core.rewards.desired_velocity", "flow.core.rewards.desired_velocity", "flow.core.rewards.desired_velocity", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.desired_velocity", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.desired_velocity", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.desired_velocity", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.desired_velocity", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.desired_velocity", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.desired_velocity"], ["def", "test_desired_velocity", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test the desired_velocity method.\"\"\"", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\"test\"", ",", "num_vehicles", "=", "10", ")", "\n", "\n", "env_params", "=", "EnvParams", "(", "additional_params", "=", "{", "\n", "\"target_velocity\"", ":", "np", ".", "sqrt", "(", "10", ")", ",", "\"max_accel\"", ":", "1", ",", "\"max_decel\"", ":", "1", ",", "\n", "\"sort_vehicles\"", ":", "False", "}", ")", "\n", "\n", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ",", "\n", "env_params", "=", "env_params", ")", "\n", "\n", "# check that the fail attribute leads to a zero return", "\n", "self", ".", "assertEqual", "(", "desired_velocity", "(", "env", ",", "fail", "=", "True", ")", ",", "0", ")", "\n", "\n", "# check the average speed upon reset", "\n", "self", ".", "assertEqual", "(", "desired_velocity", "(", "env", ",", "fail", "=", "False", ")", ",", "0", ")", "\n", "\n", "# check the average speed upon reset with a subset of edges", "\n", "self", ".", "assertEqual", "(", "desired_velocity", "(", "env", ",", "edge_list", "=", "[", "\"bottom\"", "]", ",", "\n", "fail", "=", "False", ")", ",", "0", ")", "\n", "\n", "# change the speed of one vehicle", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "\"test_0\"", ",", "np", ".", "sqrt", "(", "10", ")", ")", "\n", "\n", "# check the new average speed", "\n", "self", ".", "assertAlmostEqual", "(", "desired_velocity", "(", "env", ",", "fail", "=", "False", ")", ",", "\n", "1", "-", "np", ".", "sqrt", "(", "90", ")", "/", "10", ")", "\n", "\n", "# check the new average speed for a subset of edges", "\n", "self", ".", "assertAlmostEqual", "(", "desired_velocity", "(", "env", ",", "edge_list", "=", "[", "\"bottom\"", "]", ",", "\n", "fail", "=", "False", ")", ",", "\n", "1", "-", "np", ".", "sqrt", "(", "20", ")", "/", "np", ".", "sqrt", "(", "30", ")", ")", "\n", "\n", "# change the speed of one of the vehicles outside the edge list", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "\"test_8\"", ",", "10", ")", "\n", "\n", "# check that the new average speed is the same as before", "\n", "self", ".", "assertAlmostEqual", "(", "desired_velocity", "(", "env", ",", "edge_list", "=", "[", "\"bottom\"", "]", ",", "\n", "fail", "=", "False", ")", ",", "\n", "1", "-", "np", ".", "sqrt", "(", "20", ")", "/", "np", ".", "sqrt", "(", "30", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_rewards.TestRewards.test_average_velocity": [[60, 85], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "test_rewards.TestRewards.assertEqual", "test_rewards.TestRewards.assertEqual", "env.k.vehicle.test_set_speed", "test_rewards.TestRewards.assertEqual", "flow.core.params.VehicleParams", "tests.setup_scripts.ring_road_exp_setup", "test_rewards.TestRewards.assertEqual", "flow.core.rewards.average_velocity", "flow.core.rewards.average_velocity", "flow.core.rewards.average_velocity", "flow.core.rewards.average_velocity"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.average_velocity", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.average_velocity", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.average_velocity", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.average_velocity"], ["", "def", "test_average_velocity", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test the average_velocity method.\"\"\"", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\"test\"", ",", "num_vehicles", "=", "10", ")", "\n", "\n", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "\n", "# check that the fail attribute leads to a zero return", "\n", "self", ".", "assertEqual", "(", "average_velocity", "(", "env", ",", "fail", "=", "True", ")", ",", "0", ")", "\n", "\n", "# check the average speed upon reset", "\n", "self", ".", "assertEqual", "(", "average_velocity", "(", "env", ",", "fail", "=", "False", ")", ",", "0", ")", "\n", "\n", "# change the speed of one vehicle", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "\"test_0\"", ",", "10", ")", "\n", "\n", "# check the new average speed", "\n", "self", ".", "assertEqual", "(", "average_velocity", "(", "env", ",", "fail", "=", "False", ")", ",", "1", ")", "\n", "\n", "# recreate the environment with no vehicles", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "\n", "# check that the reward function return 0 in the case of no vehicles", "\n", "self", ".", "assertEqual", "(", "average_velocity", "(", "env", ",", "fail", "=", "False", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_rewards.TestRewards.test_min_delay": [[86, 108], ["flow.core.params.VehicleParams", "tests.setup_scripts.ring_road_exp_setup", "test_rewards.TestRewards.assertEqual", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "test_rewards.TestRewards.assertAlmostEqual", "env.k.vehicle.test_set_speed", "test_rewards.TestRewards.assertAlmostEqual", "flow.core.rewards.min_delay", "flow.core.rewards.min_delay", "flow.core.rewards.min_delay"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.min_delay", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.min_delay", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.min_delay"], ["", "def", "test_min_delay", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test the min_delay method.\"\"\"", "\n", "# try the case of an environment with no vehicles", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "\n", "# check that the reward function return 0 in the case of no vehicles", "\n", "self", ".", "assertEqual", "(", "min_delay", "(", "env", ")", ",", "0", ")", "\n", "\n", "# try the case of multiple vehicles", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\"test\"", ",", "num_vehicles", "=", "10", ")", "\n", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "\n", "# check the min_delay upon reset", "\n", "self", ".", "assertAlmostEqual", "(", "min_delay", "(", "env", ")", ",", "0", ")", "\n", "\n", "# change the speed of one vehicle", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "\"test_0\"", ",", "10", ")", "\n", "\n", "# check the min_delay with the new speed", "\n", "self", ".", "assertAlmostEqual", "(", "min_delay", "(", "env", ")", ",", "0.0333333333333", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_rewards.TestRewards.test_penalize_standstill": [[109, 131], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.EnvParams", "tests.setup_scripts.ring_road_exp_setup", "test_rewards.TestRewards.assertEqual", "test_rewards.TestRewards.assertEqual", "env.k.vehicle.test_set_speed", "test_rewards.TestRewards.assertEqual", "test_rewards.TestRewards.assertEqual", "flow.core.rewards.penalize_standstill", "flow.core.rewards.penalize_standstill", "flow.core.rewards.penalize_standstill", "flow.core.rewards.penalize_standstill"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.penalize_standstill", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.penalize_standstill", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.penalize_standstill", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.penalize_standstill"], ["", "def", "test_penalize_standstill", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test the penalize_standstill method.\"\"\"", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\"test\"", ",", "num_vehicles", "=", "10", ")", "\n", "\n", "env_params", "=", "EnvParams", "(", "additional_params", "=", "{", "\n", "\"target_velocity\"", ":", "10", ",", "\"max_accel\"", ":", "1", ",", "\"max_decel\"", ":", "1", ",", "\n", "\"sort_vehicles\"", ":", "False", "}", ")", "\n", "\n", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ",", "\n", "env_params", "=", "env_params", ")", "\n", "\n", "# check the penalty is acknowledging all vehicles", "\n", "self", ".", "assertEqual", "(", "penalize_standstill", "(", "env", ",", "gain", "=", "1", ")", ",", "-", "10", ")", "\n", "self", ".", "assertEqual", "(", "penalize_standstill", "(", "env", ",", "gain", "=", "2", ")", ",", "-", "20", ")", "\n", "\n", "# change the speed of one vehicle", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "\"test_0\"", ",", "10", ")", "\n", "\n", "# check the penalty is acknowledging all vehicles but one", "\n", "self", ".", "assertEqual", "(", "penalize_standstill", "(", "env", ",", "gain", "=", "1", ")", ",", "-", "9", ")", "\n", "self", ".", "assertEqual", "(", "penalize_standstill", "(", "env", ",", "gain", "=", "2", ")", ",", "-", "18", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_rewards.TestRewards.test_penalize_near_standstill": [[132, 154], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.EnvParams", "tests.setup_scripts.ring_road_exp_setup", "test_rewards.TestRewards.assertEqual", "test_rewards.TestRewards.assertEqual", "env.k.vehicle.test_set_speed", "test_rewards.TestRewards.assertEqual", "test_rewards.TestRewards.assertEqual", "flow.core.rewards.penalize_near_standstill", "flow.core.rewards.penalize_near_standstill", "flow.core.rewards.penalize_near_standstill", "flow.core.rewards.penalize_near_standstill"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.penalize_near_standstill", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.penalize_near_standstill", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.penalize_near_standstill", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.penalize_near_standstill"], ["", "def", "test_penalize_near_standstill", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test the penalize_near_standstill method.\"\"\"", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\"test\"", ",", "num_vehicles", "=", "10", ")", "\n", "\n", "env_params", "=", "EnvParams", "(", "additional_params", "=", "{", "\n", "\"target_velocity\"", ":", "10", ",", "\"max_accel\"", ":", "1", ",", "\"max_decel\"", ":", "1", ",", "\n", "\"sort_vehicles\"", ":", "False", "}", ")", "\n", "\n", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ",", "\n", "env_params", "=", "env_params", ")", "\n", "\n", "# check the penalty is acknowledging all vehicles", "\n", "self", ".", "assertEqual", "(", "penalize_near_standstill", "(", "env", ",", "gain", "=", "1", ")", ",", "-", "10", ")", "\n", "self", ".", "assertEqual", "(", "penalize_near_standstill", "(", "env", ",", "gain", "=", "2", ")", ",", "-", "20", ")", "\n", "\n", "# change the speed of one vehicle", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "\"test_0\"", ",", "1", ")", "\n", "\n", "# check the penalty with good and bad thresholds", "\n", "self", ".", "assertEqual", "(", "penalize_near_standstill", "(", "env", ",", "thresh", "=", "2", ")", ",", "-", "10", ")", "\n", "self", ".", "assertEqual", "(", "penalize_near_standstill", "(", "env", ",", "thresh", "=", "0.5", ")", ",", "-", "9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_rewards.TestRewards.test_energy_consumption": [[155, 179], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.EnvParams", "tests.setup_scripts.ring_road_exp_setup", "test_rewards.TestRewards.assertEqual", "env.k.vehicle.test_set_speed", "test_rewards.TestRewards.assertEqual", "env.step", "env.step", "test_rewards.TestRewards.assertGreater", "test_rewards.TestRewards.assertLess", "flow.core.rewards.energy_consumption", "flow.core.rewards.energy_consumption", "env.k.vehicle.get_previous_speed", "flow.core.rewards.energy_consumption"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.test_set_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.energy_consumption", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.energy_consumption", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.traci.TraCIVehicle.get_previous_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.energy_consumption"], ["", "def", "test_energy_consumption", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test the energy consumption method.\"\"\"", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\"test\"", ",", "num_vehicles", "=", "10", ")", "\n", "\n", "env_params", "=", "EnvParams", "(", "additional_params", "=", "{", "\n", "\"target_velocity\"", ":", "10", ",", "\"max_accel\"", ":", "1", ",", "\"max_decel\"", ":", "1", ",", "\n", "\"sort_vehicles\"", ":", "False", "}", ")", "\n", "\n", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ",", "\n", "env_params", "=", "env_params", ")", "\n", "\n", "# check the penalty is zero at speed zero", "\n", "self", ".", "assertEqual", "(", "energy_consumption", "(", "env", ",", "gain", "=", "1", ")", ",", "0", ")", "\n", "\n", "# change the speed of one vehicle", "\n", "env", ".", "k", ".", "vehicle", ".", "test_set_speed", "(", "\"test_0\"", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "energy_consumption", "(", "env", ")", ",", "-", "12.059337750000001", ")", "\n", "\n", "# check that stepping change the previous speeds and increases the energy consumption", "\n", "env", ".", "step", "(", "rl_actions", "=", "None", ")", "\n", "env", ".", "step", "(", "rl_actions", "=", "None", ")", "\n", "self", ".", "assertGreater", "(", "env", ".", "k", ".", "vehicle", ".", "get_previous_speed", "(", "\"test_0\"", ")", ",", "0.0", ")", "\n", "self", ".", "assertLess", "(", "energy_consumption", "(", "env", ")", ",", "-", "12.059337750000001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_rewards.TestRewards.test_boolean_action_penalty": [[180, 193], ["test_rewards.TestRewards.assertEqual", "test_rewards.TestRewards.assertEqual", "test_rewards.TestRewards.assertEqual", "test_rewards.TestRewards.assertEqual", "test_rewards.TestRewards.assertEqual", "test_rewards.TestRewards.assertEqual", "flow.core.rewards.boolean_action_penalty", "flow.core.rewards.boolean_action_penalty", "flow.core.rewards.boolean_action_penalty", "flow.core.rewards.boolean_action_penalty", "flow.core.rewards.boolean_action_penalty", "flow.core.rewards.boolean_action_penalty"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.boolean_action_penalty", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.boolean_action_penalty", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.boolean_action_penalty", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.boolean_action_penalty", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.boolean_action_penalty", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.rewards.boolean_action_penalty"], ["", "def", "test_boolean_action_penalty", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test the boolean_action_penalty method.\"\"\"", "\n", "actions", "=", "[", "False", ",", "False", ",", "False", ",", "False", ",", "False", "]", "\n", "self", ".", "assertEqual", "(", "boolean_action_penalty", "(", "actions", ",", "gain", "=", "1", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "boolean_action_penalty", "(", "actions", ",", "gain", "=", "2", ")", ",", "0", ")", "\n", "\n", "actions", "=", "[", "True", ",", "False", ",", "False", ",", "False", ",", "False", "]", "\n", "self", ".", "assertEqual", "(", "boolean_action_penalty", "(", "actions", ",", "gain", "=", "1", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "boolean_action_penalty", "(", "actions", ",", "gain", "=", "2", ")", ",", "2", ")", "\n", "\n", "actions", "=", "[", "True", ",", "False", ",", "False", ",", "True", ",", "False", "]", "\n", "self", ".", "assertEqual", "(", "boolean_action_penalty", "(", "actions", ",", "gain", "=", "1", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "boolean_action_penalty", "(", "actions", ",", "gain", "=", "2", ")", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_vehicles.TestVehiclesClass.test_speed_lane_change_modes": [[23, 76], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "test_vehicles.TestVehiclesClass.assertEqual", "test_vehicles.TestVehiclesClass.assertEqual", "flow.core.params.VehicleParams.add", "test_vehicles.TestVehiclesClass.assertEqual", "test_vehicles.TestVehiclesClass.assertEqual", "flow.core.params.VehicleParams.add", "test_vehicles.TestVehiclesClass.assertEqual", "test_vehicles.TestVehiclesClass.assertEqual", "flow.core.params.SumoCarFollowingParams", "flow.core.params.SumoLaneChangeParams", "flow.core.params.SumoCarFollowingParams", "flow.core.params.SumoLaneChangeParams", "flow.core.params.SumoCarFollowingParams", "flow.core.params.SumoLaneChangeParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["def", "test_speed_lane_change_modes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Check to make sure vehicle class correctly specifies lane change and\n        speed modes\n        \"\"\"", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "\"typeA\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "'obey_safe_speed'", ",", "\n", ")", ",", "\n", "lane_change_params", "=", "SumoLaneChangeParams", "(", "\n", "lane_change_mode", "=", "\"no_lc_safe\"", ",", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "vehicles", ".", "type_parameters", "[", "\"typeA\"", "]", "[", "\n", "\"car_following_params\"", "]", ".", "speed_mode", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "vehicles", ".", "type_parameters", "[", "\"typeA\"", "]", "[", "\n", "\"lane_change_params\"", "]", ".", "lane_change_mode", ",", "512", ")", "\n", "\n", "vehicles", ".", "add", "(", "\n", "\"typeB\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "'aggressive'", ",", "\n", ")", ",", "\n", "lane_change_params", "=", "SumoLaneChangeParams", "(", "\n", "lane_change_mode", "=", "\"strategic\"", ",", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "vehicles", ".", "type_parameters", "[", "\"typeB\"", "]", "[", "\n", "\"car_following_params\"", "]", ".", "speed_mode", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "vehicles", ".", "type_parameters", "[", "\"typeB\"", "]", "[", "\n", "\"lane_change_params\"", "]", ".", "lane_change_mode", ",", "512", ")", "\n", "\n", "vehicles", ".", "add", "(", "\n", "\"typeC\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "31", ",", "\n", ")", ",", "\n", "lane_change_params", "=", "SumoLaneChangeParams", "(", "\n", "lane_change_mode", "=", "277", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "vehicles", ".", "type_parameters", "[", "\"typeC\"", "]", "[", "\n", "\"car_following_params\"", "]", ".", "speed_mode", ",", "31", ")", "\n", "self", ".", "assertEqual", "(", "vehicles", ".", "type_parameters", "[", "\"typeC\"", "]", "[", "\n", "\"lane_change_params\"", "]", ".", "lane_change_mode", ",", "277", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_vehicles.TestVehiclesClass.test_controlled_id_params": [[77, 97], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "test_vehicles.TestVehiclesClass.assertEqual", "flow.core.params.SumoCarFollowingParams", "flow.core.params.SumoLaneChangeParams", "flow.core.params.SumoCarFollowingParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["", "def", "test_controlled_id_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Ensure that, if a vehicle is not a sumo vehicle, then minGap is set to\n        zero so that all headway values are correct.\n        \"\"\"", "\n", "# check that, if the vehicle is a SimCarFollowingController vehicle,", "\n", "# then its minGap, accel, and decel are set to default", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "\"typeA\"", ",", "\n", "acceleration_controller", "=", "(", "SimCarFollowingController", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "\"obey_safe_speed\"", ",", "\n", ")", ",", "\n", "lane_change_params", "=", "SumoLaneChangeParams", "(", "\n", "lane_change_mode", "=", "\"no_lc_safe\"", ",", "\n", ")", ")", "\n", "default_mingap", "=", "SumoCarFollowingParams", "(", ")", ".", "controller_params", "[", "\"minGap\"", "]", "\n", "self", ".", "assertEqual", "(", "vehicles", ".", "types", "[", "0", "]", "[", "\"type_params\"", "]", "[", "\"minGap\"", "]", ",", "\n", "default_mingap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_vehicles.TestVehiclesClass.test_add_vehicles_human": [[98, 129], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.VehicleParams.add", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "test_vehicles.TestVehiclesClass.assertEqual", "test_vehicles.TestVehiclesClass.assertEqual", "test_vehicles.TestVehiclesClass.assertEqual", "test_vehicles.TestVehiclesClass.assertEqual", "test_vehicles.TestVehiclesClass.assertEqual", "test_vehicles.TestVehiclesClass.assertEqual", "len", "len", "len", "len", "len", "env.k.vehicle.get_ids", "env.k.vehicle.get_rl_ids", "env.k.vehicle.get_human_ids", "env.k.vehicle.get_controlled_ids", "env.k.vehicle.get_controlled_lc_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_human_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_lc_ids"], ["", "def", "test_add_vehicles_human", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Ensure that added human vehicles are placed in the current vehicle\n        IDs, and that the number of vehicles is correct.\n        \"\"\"", "\n", "# generate a vehicles class", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "\n", "# vehicles whose acceleration and LC are controlled by sumo", "\n", "vehicles", ".", "add", "(", "\"test_1\"", ",", "num_vehicles", "=", "1", ")", "\n", "\n", "# vehicles whose acceleration are controlled by sumo", "\n", "vehicles", ".", "add", "(", "\n", "\"test_2\"", ",", "\n", "num_vehicles", "=", "2", ",", "\n", "lane_change_controller", "=", "(", "StaticLaneChanger", ",", "{", "}", ")", ")", "\n", "\n", "# vehicles whose LC are controlled by sumo", "\n", "vehicles", ".", "add", "(", "\n", "\"test_3\"", ",", "\n", "num_vehicles", "=", "4", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ")", "\n", "\n", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "vehicle", ".", "num_vehicles", ",", "7", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ")", ",", "7", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "env", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "env", ".", "k", ".", "vehicle", ".", "get_human_ids", "(", ")", ")", ",", "7", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "env", ".", "k", ".", "vehicle", ".", "get_controlled_ids", "(", ")", ")", ",", "4", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "env", ".", "k", ".", "vehicle", ".", "get_controlled_lc_ids", "(", ")", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_vehicles.TestVehiclesClass.test_add_vehicles_rl": [[130, 149], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "test_vehicles.TestVehiclesClass.assertEqual", "test_vehicles.TestVehiclesClass.assertEqual", "test_vehicles.TestVehiclesClass.assertEqual", "test_vehicles.TestVehiclesClass.assertEqual", "test_vehicles.TestVehiclesClass.assertEqual", "test_vehicles.TestVehiclesClass.assertEqual", "len", "len", "len", "len", "len", "env.k.vehicle.get_ids", "env.k.vehicle.get_rl_ids", "env.k.vehicle.get_human_ids", "env.k.vehicle.get_controlled_ids", "env.k.vehicle.get_controlled_lc_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_human_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_lc_ids"], ["", "def", "test_add_vehicles_rl", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Ensure that added rl vehicles are placed in the current vehicle IDs,\n        and that the number of vehicles is correct.\n        \"\"\"", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "\"test_rl\"", ",", "\n", "num_vehicles", "=", "10", ",", "\n", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ")", "\n", "\n", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "vehicle", ".", "num_vehicles", ",", "10", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ")", ",", "10", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "env", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", ")", ",", "10", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "env", ".", "k", ".", "vehicle", ".", "get_human_ids", "(", ")", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "env", ".", "k", ".", "vehicle", ".", "get_controlled_ids", "(", ")", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "env", ".", "k", ".", "vehicle", ".", "get_controlled_lc_ids", "(", ")", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_vehicles.TestVehiclesClass.test_remove": [[150, 197], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "env.k.vehicle.remove", "env.k.vehicle.remove", "test_vehicles.TestVehiclesClass.assertTrue", "test_vehicles.TestVehiclesClass.assertTrue", "test_vehicles.TestVehiclesClass.assertTrue", "test_vehicles.TestVehiclesClass.assertTrue", "test_vehicles.TestVehiclesClass.assertTrue", "test_vehicles.TestVehiclesClass.assertTrue", "env.k.vehicle.get_speed", "test_vehicles.TestVehiclesClass.assertIsNone", "env.k.vehicle.get_speed", "test_vehicles.TestVehiclesClass.assertIsNone", "test_vehicles.TestVehiclesClass.assertEqual", "test_vehicles.TestVehiclesClass.assertEqual", "len", "len", "env.k.vehicle.get_ids", "env.k.vehicle.get_human_ids", "env.k.vehicle.get_controlled_lc_ids", "env.k.vehicle.get_controlled_ids", "env.k.vehicle.get_ids", "env.k.vehicle.get_rl_ids", "env.k.vehicle.get_ids", "env.k.vehicle.get_rl_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_human_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_lc_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_controlled_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_rl_ids"], ["", "def", "test_remove", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Check that there is no trace of the vehicle ID of the vehicle meant to\n        be removed in the vehicles class.\n        \"\"\"", "\n", "# generate a vehicles class", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\"test\"", ",", "num_vehicles", "=", "10", ")", "\n", "vehicles", ".", "add", "(", "\n", "\"test_rl\"", ",", "\n", "num_vehicles", "=", "10", ",", "\n", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ")", "\n", "\n", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "\n", "# remove one human-driven vehicle and on rl vehicle", "\n", "env", ".", "k", ".", "vehicle", ".", "remove", "(", "\"test_0\"", ")", "\n", "env", ".", "k", ".", "vehicle", ".", "remove", "(", "\"test_rl_0\"", ")", "\n", "\n", "# ensure that the removed vehicle's ID is not in any lists of vehicles", "\n", "self", ".", "assertTrue", "(", "\"test_0\"", "not", "in", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ",", "\n", "msg", "=", "\"vehicle still in get_ids()\"", ")", "\n", "self", ".", "assertTrue", "(", "\"test_0\"", "not", "in", "env", ".", "k", ".", "vehicle", ".", "get_human_ids", "(", ")", ",", "\n", "msg", "=", "\"vehicle still in get_controlled_lc_ids()\"", ")", "\n", "self", ".", "assertTrue", "(", "\"test_0\"", "not", "in", "env", ".", "k", ".", "vehicle", ".", "get_controlled_lc_ids", "(", ")", ",", "\n", "msg", "=", "\"vehicle still in get_controlled_lc_ids()\"", ")", "\n", "self", ".", "assertTrue", "(", "\"test_0\"", "not", "in", "env", ".", "k", ".", "vehicle", ".", "get_controlled_ids", "(", ")", ",", "\n", "msg", "=", "\"vehicle still in get_controlled_ids()\"", ")", "\n", "self", ".", "assertTrue", "(", "\"test_rl_0\"", "not", "in", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ",", "\n", "msg", "=", "\"RL vehicle still in get_ids()\"", ")", "\n", "self", ".", "assertTrue", "(", "\"test_rl_0\"", "not", "in", "env", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", ",", "\n", "msg", "=", "\"RL vehicle still in get_rl_ids()\"", ")", "\n", "\n", "# ensure that the vehicles are not storing extra information in the", "\n", "# vehicles.__vehicles dict", "\n", "error_state", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "'test_0'", ",", "error", "=", "None", ")", "\n", "self", ".", "assertIsNone", "(", "error_state", ")", "\n", "error_state_rl", "=", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "'rl_test_0'", ",", "error", "=", "None", ")", "\n", "self", ".", "assertIsNone", "(", "error_state_rl", ")", "\n", "\n", "# ensure that the num_vehicles matches the actual number of vehicles", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "vehicle", ".", "num_vehicles", ",", "\n", "len", "(", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ")", ")", "\n", "\n", "# ensures that then num_rl_vehicles matches the actual number of rl veh", "\n", "self", ".", "assertEqual", "(", "env", ".", "k", ".", "vehicle", ".", "num_rl_vehicles", ",", "\n", "len", "(", "env", ".", "k", ".", "vehicle", ".", "get_rl_ids", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_vehicles.TestMultiLaneData.test_no_junctions_ring": [[205, 254], ["flow.core.params.NetParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.InitialConfig", "tests.setup_scripts.ring_road_exp_setup", "env.reset", "env.k.vehicle.get_lane_leaders", "test_vehicles.TestMultiLaneData.assertCountEqual", "env.k.vehicle.get_lane_headways", "test_vehicles.TestMultiLaneData.assertCountEqual", "env.k.vehicle.get_lane_followers", "test_vehicles.TestMultiLaneData.assertCountEqual", "env.k.vehicle.get_lane_tailways", "numpy.testing.assert_array_almost_equal", "float"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_leaders", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_headways", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_followers", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_tailways"], ["def", "test_no_junctions_ring", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Test the above mentioned methods in the absence of junctions.\n        \"\"\"", "\n", "# setup a network with no junctions and several vehicles", "\n", "# also, setup with a deterministic starting position to ensure that the", "\n", "# headways/lane leaders are what is expected", "\n", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "230", ",", "\n", "\"lanes\"", ":", "3", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "21", ")", "\n", "\n", "initial_config", "=", "InitialConfig", "(", "lanes_distribution", "=", "float", "(", "\"inf\"", ")", ")", "\n", "\n", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "\n", "net_params", "=", "net_params", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "initial_config", "=", "initial_config", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "# check the lane leaders method is outputting the right values", "\n", "actual_lane_leaders", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_leaders", "(", "\"test_0\"", ")", "\n", "expected_lane_leaders", "=", "[", "\"test_3\"", ",", "\"test_1\"", ",", "\"test_2\"", "]", "\n", "self", ".", "assertCountEqual", "(", "actual_lane_leaders", ",", "expected_lane_leaders", ")", "\n", "\n", "# check the lane headways is outputting the right values", "\n", "actual_lane_head", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_headways", "(", "\"test_0\"", ")", "\n", "expected_lane_head", "=", "[", "27.85714285714286", ",", "-", "5", ",", "-", "5", "]", "\n", "self", ".", "assertCountEqual", "(", "actual_lane_head", ",", "expected_lane_head", ")", "\n", "\n", "# check the lane followers method is outputting the right values", "\n", "actual_lane_followers", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_followers", "(", "\"test_0\"", ")", "\n", "expected_lane_followers", "=", "[", "\"test_18\"", ",", "\"test_19\"", ",", "\"test_20\"", "]", "\n", "self", ".", "assertCountEqual", "(", "actual_lane_followers", ",", "expected_lane_followers", ")", "\n", "\n", "# check the lane tailways is outputting the right values", "\n", "actual_lane_tail", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_tailways", "(", "\"test_0\"", ")", "\n", "expected_lane_tail", "=", "[", "28.577143", "]", "*", "3", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "actual_lane_tail", ",", "\n", "expected_lane_tail", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_vehicles.TestMultiLaneData.test_no_junctions_highway": [[255, 538], ["flow.core.params.NetParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.InitialConfig", "tests.setup_scripts.highway_exp_setup", "env.reset", "env.k.vehicle.get_lane_leaders", "test_vehicles.TestMultiLaneData.assertTrue", "env.k.vehicle.get_lane_headways", "numpy.testing.assert_array_almost_equal", "env.k.vehicle.get_lane_followers", "test_vehicles.TestMultiLaneData.assertTrue", "env.k.vehicle.get_lane_tailways", "numpy.testing.assert_array_almost_equal", "env.k.vehicle.get_lane_leaders_speed", "numpy.testing.assert_array_almost_equal", "env.k.vehicle.get_lane_followers_speed", "numpy.testing.assert_array_almost_equal", "flow.core.params.NetParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.InitialConfig", "tests.setup_scripts.highway_exp_setup", "env.reset", "env.k.vehicle.get_lane_leaders", "test_vehicles.TestMultiLaneData.assertTrue", "env.k.vehicle.get_lane_headways", "numpy.testing.assert_array_almost_equal", "env.k.vehicle.get_lane_followers", "test_vehicles.TestMultiLaneData.assertTrue", "env.k.vehicle.get_lane_tailways", "numpy.testing.assert_array_almost_equal", "env.k.vehicle.get_lane_leaders_speed", "numpy.testing.assert_array_almost_equal", "env.k.vehicle.get_lane_followers_speed", "numpy.testing.assert_array_almost_equal", "flow.core.params.NetParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.InitialConfig", "tests.setup_scripts.highway_exp_setup", "env.reset", "env.k.vehicle.get_lane_leaders", "test_vehicles.TestMultiLaneData.assertTrue", "env.k.vehicle.get_lane_headways", "numpy.testing.assert_array_almost_equal", "env.k.vehicle.get_lane_followers", "test_vehicles.TestMultiLaneData.assertTrue", "env.k.vehicle.get_lane_tailways", "numpy.testing.assert_array_almost_equal", "env.k.vehicle.get_lane_leaders_speed", "numpy.testing.assert_array_almost_equal", "env.k.vehicle.get_lane_followers_speed", "numpy.testing.assert_array_almost_equal", "flow.core.params.NetParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.InitialConfig", "tests.setup_scripts.highway_exp_setup", "env.reset", "env.k.vehicle.get_lane_leaders", "test_vehicles.TestMultiLaneData.assertTrue", "env.k.vehicle.get_lane_headways", "numpy.testing.assert_array_almost_equal", "env.k.vehicle.get_lane_followers", "test_vehicles.TestMultiLaneData.assertTrue", "env.k.vehicle.get_lane_tailways", "numpy.testing.assert_array_almost_equal", "env.k.vehicle.get_lane_leaders_speed", "numpy.testing.assert_array_almost_equal", "env.k.vehicle.get_lane_followers_speed", "numpy.testing.assert_array_almost_equal", "float", "flow.core.params.SumoParams", "float", "flow.core.params.SumoParams", "float", "flow.core.params.SumoParams", "float", "flow.core.params.SumoParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.highway_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_leaders", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_headways", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_followers", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_tailways", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_leaders_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_followers_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.highway_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_leaders", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_headways", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_followers", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_tailways", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_leaders_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_followers_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.highway_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_leaders", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_headways", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_followers", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_tailways", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_leaders_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_followers_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.highway_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_leaders", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_headways", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_followers", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_tailways", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_leaders_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_lane_followers_speed"], ["", "def", "test_no_junctions_highway", "(", "self", ")", ":", "\n", "        ", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "100", ",", "\n", "\"lanes\"", ":", "3", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", ",", "\n", "\"num_edges\"", ":", "1", ",", "\n", "\"use_ghost_edge\"", ":", "False", ",", "\n", "\"ghost_speed_limit\"", ":", "25", ",", "\n", "\"boundary_cell_length\"", ":", "300", ",", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "3", ",", "\n", "initial_speed", "=", "1.0", ")", "\n", "\n", "# Test Cases", "\n", "# 1. If there's only one vehicle in each lane, we should still", "\n", "# find one leader and one follower for the central vehicle", "\n", "initial_config", "=", "InitialConfig", "(", "lanes_distribution", "=", "float", "(", "\"inf\"", ")", ")", "\n", "initial_config", ".", "spacing", "=", "\"custom\"", "\n", "initial_pos", "=", "{", "\"start_positions\"", ":", "[", "(", "'highway_0'", ",", "20", ")", ",", "\n", "(", "'highway_0'", ",", "30", ")", ",", "\n", "(", "'highway_0'", ",", "10", ")", "]", ",", "\n", "\"start_lanes\"", ":", "[", "1", ",", "2", ",", "0", "]", "}", "\n", "initial_config", ".", "additional_params", "=", "initial_pos", "\n", "\n", "env", ",", "_", ",", "_", "=", "highway_exp_setup", "(", "\n", "sim_params", "=", "SumoParams", "(", "sim_step", "=", "0.1", ",", "render", "=", "False", ")", ",", "\n", "net_params", "=", "net_params", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "initial_config", "=", "initial_config", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "# test the central car", "\n", "# test_0 is car to test in central lane", "\n", "# test_1 should be leading car in lane 2", "\n", "# test_2 should be trailing car in lane 0", "\n", "actual_lane_leaders", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_leaders", "(", "\"test_0\"", ")", "\n", "expected_lane_leaders", "=", "[", "\"\"", ",", "\"\"", ",", "\"test_1\"", "]", "\n", "self", ".", "assertTrue", "(", "actual_lane_leaders", "==", "expected_lane_leaders", ")", "\n", "actual_lane_headways", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_headways", "(", "\"test_0\"", ")", "\n", "expected_lane_headways", "=", "[", "1000", ",", "1000", ",", "5.0", "]", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "actual_lane_headways", ",", "\n", "expected_lane_headways", ")", "\n", "\n", "actual_lane_followers", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_followers", "(", "\"test_0\"", ")", "\n", "expected_lane_followers", "=", "[", "\"test_2\"", ",", "\"\"", ",", "\"\"", "]", "\n", "self", ".", "assertTrue", "(", "actual_lane_followers", "==", "expected_lane_followers", ")", "\n", "actual_lane_tailways", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_tailways", "(", "\"test_0\"", ")", "\n", "expected_lane_tailways", "=", "[", "5.0", ",", "1000", ",", "1000", "]", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "actual_lane_tailways", ",", "\n", "expected_lane_tailways", ")", "\n", "\n", "# test the leader/follower speed methods", "\n", "expected_leader_speed", "=", "[", "0.0", ",", "0.0", ",", "1.0", "]", "\n", "actual_leader_speed", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_leaders_speed", "(", "\"test_0\"", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "actual_leader_speed", ",", "\n", "expected_leader_speed", ")", "\n", "\n", "expected_follower_speed", "=", "[", "1.0", ",", "0.0", ",", "0.0", "]", "\n", "actual_follower_speed", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_followers_speed", "(", "\n", "\"test_0\"", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "actual_follower_speed", ",", "\n", "expected_follower_speed", ")", "\n", "\n", "# Next, test the case where all vehicles are on the same", "\n", "# edge and there's two vehicles in each lane", "\n", "# Cases to test", "\n", "# 1. For lane 0, should find a leader and follower for tested car", "\n", "# 2. For lane 1, both vehicles are behind the test car", "\n", "# 3. For lane 2, both vehicles are in front of the tested car", "\n", "# 4. For lane 3, one vehicle in front and one behind the tested car", "\n", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "100", ",", "\n", "\"lanes\"", ":", "4", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", ",", "\n", "\"num_edges\"", ":", "1", ",", "\n", "\"use_ghost_edge\"", ":", "False", ",", "\n", "\"ghost_speed_limit\"", ":", "25", ",", "\n", "\"boundary_cell_length\"", ":", "300", ",", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "9", ",", "\n", "initial_speed", "=", "1.0", ")", "\n", "\n", "initial_config", "=", "InitialConfig", "(", "lanes_distribution", "=", "float", "(", "\"inf\"", ")", ")", "\n", "initial_config", ".", "spacing", "=", "\"custom\"", "\n", "initial_pos", "=", "{", "\"start_positions\"", ":", "[", "(", "'highway_0'", ",", "50", ")", ",", "\n", "(", "'highway_0'", ",", "60", ")", ",", "\n", "(", "'highway_0'", ",", "40", ")", ",", "\n", "(", "'highway_0'", ",", "40", ")", ",", "\n", "(", "'highway_0'", ",", "30", ")", ",", "\n", "(", "'highway_0'", ",", "60", ")", ",", "\n", "(", "'highway_0'", ",", "70", ")", ",", "\n", "(", "'highway_0'", ",", "60", ")", ",", "\n", "(", "'highway_0'", ",", "40", ")", ",", "\n", "]", ",", "\n", "\"start_lanes\"", ":", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "2", ",", "2", ",", "3", ",", "3", "]", "}", "\n", "initial_config", ".", "additional_params", "=", "initial_pos", "\n", "\n", "env", ",", "_", ",", "_", "=", "highway_exp_setup", "(", "\n", "sim_params", "=", "SumoParams", "(", "sim_step", "=", "0.1", ",", "render", "=", "False", ")", ",", "\n", "net_params", "=", "net_params", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "initial_config", "=", "initial_config", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "actual_lane_leaders", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_leaders", "(", "\"test_0\"", ")", "\n", "expected_lane_leaders", "=", "[", "\"test_1\"", ",", "\"\"", ",", "\"test_5\"", ",", "\"test_7\"", "]", "\n", "self", ".", "assertTrue", "(", "actual_lane_leaders", "==", "expected_lane_leaders", ")", "\n", "\n", "actual_lane_headways", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_headways", "(", "\"test_0\"", ")", "\n", "expected_lane_headways", "=", "[", "5.0", ",", "1000", ",", "5.0", ",", "5.0", "]", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "actual_lane_headways", ",", "\n", "expected_lane_headways", ")", "\n", "\n", "actual_lane_followers", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_followers", "(", "\"test_0\"", ")", "\n", "expected_lane_followers", "=", "[", "\"test_2\"", ",", "\"test_3\"", ",", "\"\"", ",", "\"test_8\"", "]", "\n", "self", ".", "assertTrue", "(", "actual_lane_followers", "==", "expected_lane_followers", ")", "\n", "\n", "actual_lane_tailways", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_tailways", "(", "\"test_0\"", ")", "\n", "expected_lane_tailways", "=", "[", "5.0", ",", "5.0", ",", "1000", ",", "5.0", "]", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "actual_lane_tailways", ",", "\n", "expected_lane_tailways", ")", "\n", "\n", "# test the leader/follower speed methods", "\n", "expected_leader_speed", "=", "[", "1.0", ",", "0.0", ",", "1.0", ",", "1.0", "]", "\n", "actual_leader_speed", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_leaders_speed", "(", "\"test_0\"", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "actual_leader_speed", ",", "\n", "expected_leader_speed", ")", "\n", "expected_follower_speed", "=", "[", "1.0", ",", "1.0", ",", "0.0", ",", "1.0", "]", "\n", "actual_follower_speed", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_followers_speed", "(", "\n", "\"test_0\"", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "actual_follower_speed", ",", "\n", "expected_follower_speed", ")", "\n", "\n", "# Now test if all the vehicles are on different edges and", "\n", "# different lanes", "\n", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "100", ",", "\n", "\"lanes\"", ":", "3", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", ",", "\n", "\"num_edges\"", ":", "3", ",", "\n", "\"use_ghost_edge\"", ":", "False", ",", "\n", "\"ghost_speed_limit\"", ":", "25", ",", "\n", "\"boundary_cell_length\"", ":", "300", ",", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "3", ",", "\n", "initial_speed", "=", "1.0", ")", "\n", "\n", "# Test Cases", "\n", "# 1. If there's only one vehicle in each lane, we should still", "\n", "# find one leader and one follower for the central vehicle", "\n", "initial_config", "=", "InitialConfig", "(", "lanes_distribution", "=", "float", "(", "\"inf\"", ")", ")", "\n", "initial_config", ".", "spacing", "=", "\"custom\"", "\n", "initial_pos", "=", "{", "\"start_positions\"", ":", "[", "(", "'highway_1'", ",", "50", "-", "(", "100", "/", "3.0", ")", ")", ",", "\n", "(", "'highway_2'", ",", "75", "-", "(", "2", "*", "100", "/", "3.0", ")", ")", ",", "\n", "(", "'highway_0'", ",", "25", ")", "]", ",", "\n", "\"start_lanes\"", ":", "[", "1", ",", "2", ",", "0", "]", "}", "\n", "initial_config", ".", "additional_params", "=", "initial_pos", "\n", "\n", "env", ",", "_", ",", "_", "=", "highway_exp_setup", "(", "\n", "sim_params", "=", "SumoParams", "(", "sim_step", "=", "0.1", ",", "render", "=", "False", ")", ",", "\n", "net_params", "=", "net_params", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "initial_config", "=", "initial_config", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "# test the central car", "\n", "# test_0 is car to test in central lane", "\n", "# test_1 should be leading car in lane 2", "\n", "# test_2 should be trailing car in lane 0", "\n", "\n", "actual_lane_leaders", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_leaders", "(", "\"test_0\"", ")", "\n", "expected_lane_leaders", "=", "[", "\"\"", ",", "\"\"", ",", "\"test_1\"", "]", "\n", "self", ".", "assertTrue", "(", "actual_lane_leaders", "==", "expected_lane_leaders", ")", "\n", "actual_lane_headways", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_headways", "(", "\"test_0\"", ")", "\n", "expected_lane_headways", "=", "[", "1000", ",", "1000", ",", "22.996667", "]", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "actual_lane_headways", ",", "\n", "expected_lane_headways", ")", "\n", "\n", "actual_lane_followers", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_followers", "(", "\"test_0\"", ")", "\n", "expected_lane_followers", "=", "[", "\"test_2\"", ",", "\"\"", ",", "\"\"", "]", "\n", "self", ".", "assertTrue", "(", "actual_lane_followers", "==", "expected_lane_followers", ")", "\n", "actual_lane_tailways", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_tailways", "(", "\"test_0\"", ")", "\n", "expected_lane_tailways", "=", "[", "20.096667", ",", "1000", ",", "1000", "]", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "actual_lane_tailways", ",", "\n", "expected_lane_tailways", ")", "\n", "\n", "# test the leader/follower speed methods", "\n", "expected_leader_speed", "=", "[", "0.0", ",", "0.0", ",", "1.0", "]", "\n", "actual_leader_speed", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_leaders_speed", "(", "\"test_0\"", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "actual_leader_speed", ",", "\n", "expected_leader_speed", ")", "\n", "expected_follower_speed", "=", "[", "1.0", ",", "0.0", ",", "0.0", "]", "\n", "actual_follower_speed", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_followers_speed", "(", "\n", "\"test_0\"", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "actual_follower_speed", ",", "\n", "expected_follower_speed", ")", "\n", "\n", "# Now test if all the vehicles are on different edges and same", "\n", "# lanes", "\n", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "100", ",", "\n", "\"lanes\"", ":", "3", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", ",", "\n", "\"num_edges\"", ":", "3", ",", "\n", "\"use_ghost_edge\"", ":", "False", ",", "\n", "\"ghost_speed_limit\"", ":", "25", ",", "\n", "\"boundary_cell_length\"", ":", "300", ",", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"test\"", ",", "\n", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "num_vehicles", "=", "3", ",", "\n", "initial_speed", "=", "1.0", ")", "\n", "\n", "# Test Cases", "\n", "# 1. If there's only one vehicle in each lane, we should still", "\n", "# find one leader and one follower for the central vehicle", "\n", "initial_config", "=", "InitialConfig", "(", "lanes_distribution", "=", "float", "(", "\"inf\"", ")", ")", "\n", "initial_config", ".", "spacing", "=", "\"custom\"", "\n", "initial_pos", "=", "{", "\"start_positions\"", ":", "[", "(", "'highway_1'", ",", "50", "-", "(", "100", "/", "3.0", ")", ")", ",", "\n", "(", "'highway_2'", ",", "75", "-", "(", "2", "*", "100", "/", "3.0", ")", ")", ",", "\n", "(", "'highway_0'", ",", "25", ")", "]", ",", "\n", "\"start_lanes\"", ":", "[", "0", ",", "0", ",", "0", "]", "}", "\n", "initial_config", ".", "additional_params", "=", "initial_pos", "\n", "\n", "env", ",", "_", ",", "_", "=", "highway_exp_setup", "(", "\n", "sim_params", "=", "SumoParams", "(", "sim_step", "=", "0.1", ",", "render", "=", "False", ")", ",", "\n", "net_params", "=", "net_params", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "initial_config", "=", "initial_config", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "# test the central car", "\n", "# test_0 is car to test in lane 0", "\n", "# test_1 should be leading car in lane 0", "\n", "# test_2 should be trailing car in lane 0", "\n", "actual_lane_leaders", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_leaders", "(", "\"test_0\"", ")", "\n", "expected_lane_leaders", "=", "[", "\"test_1\"", ",", "\"\"", ",", "\"\"", "]", "\n", "self", ".", "assertTrue", "(", "actual_lane_leaders", "==", "expected_lane_leaders", ")", "\n", "actual_lane_headways", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_headways", "(", "\"test_0\"", ")", "\n", "expected_lane_headways", "=", "[", "22.996667", ",", "1000", ",", "1000", "]", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "actual_lane_headways", ",", "\n", "expected_lane_headways", ")", "\n", "\n", "actual_lane_followers", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_followers", "(", "\"test_0\"", ")", "\n", "expected_lane_followers", "=", "[", "\"test_2\"", ",", "\"\"", ",", "\"\"", "]", "\n", "self", ".", "assertTrue", "(", "actual_lane_followers", "==", "expected_lane_followers", ")", "\n", "actual_lane_tailways", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_tailways", "(", "\"test_0\"", ")", "\n", "expected_lane_tailways", "=", "[", "20.096667", ",", "1000", ",", "1000", "]", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "actual_lane_tailways", ",", "\n", "expected_lane_tailways", ")", "\n", "\n", "# test the leader/follower speed methods", "\n", "expected_leader_speed", "=", "[", "1.0", ",", "0.0", ",", "0.0", "]", "\n", "actual_leader_speed", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_leaders_speed", "(", "\"test_0\"", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "actual_leader_speed", ",", "\n", "expected_leader_speed", ")", "\n", "expected_follower_speed", "=", "[", "1.0", ",", "0.0", ",", "0.0", "]", "\n", "actual_follower_speed", "=", "env", ".", "k", ".", "vehicle", ".", "get_lane_followers_speed", "(", "\n", "\"test_0\"", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "actual_follower_speed", ",", "\n", "expected_follower_speed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_vehicles.TestMultiLaneData.test_junctions": [[539, 545], ["None"], "methods", ["None"], ["", "def", "test_junctions", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Test the above mentioned methods in the presence of junctions.\n        \"\"\"", "\n", "# TODO(ak): add test", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_vehicles.TestIdsByEdge.setUp": [[552, 558], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# create the environment and network classes for a figure eight", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "veh_id", "=", "\"test\"", ",", "num_vehicles", "=", "20", ")", "\n", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_vehicles.TestIdsByEdge.tearDown": [[559, 563], ["test_vehicles.TestIdsByEdge.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# free data used by the class", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_vehicles.TestIdsByEdge.test_ids_by_edge": [[564, 569], ["test_vehicles.TestIdsByEdge.env.reset", "test_vehicles.TestIdsByEdge.env.k.vehicle.get_ids_by_edge", "test_vehicles.TestIdsByEdge.assertCountEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids_by_edge"], ["", "def", "test_ids_by_edge", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "ids", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids_by_edge", "(", "\"bottom\"", ")", "\n", "expected_ids", "=", "[", "\"test_0\"", ",", "\"test_1\"", ",", "\"test_2\"", ",", "\"test_3\"", ",", "\"test_4\"", "]", "\n", "self", ".", "assertCountEqual", "(", "ids", ",", "expected_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_vehicles.TestObservedIDs.test_obs_ids": [[574, 601], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "env.k.vehicle.set_observed", "test_vehicles.TestObservedIDs.assertCountEqual", "env.k.vehicle.set_observed", "test_vehicles.TestObservedIDs.assertCountEqual", "env.k.vehicle.set_observed", "test_vehicles.TestObservedIDs.assertListEqual", "env.k.vehicle.remove_observed", "test_vehicles.TestObservedIDs.assertCountEqual", "env.k.vehicle.remove_observed", "test_vehicles.TestObservedIDs.assertCountEqual", "env.k.vehicle.get_observed_ids", "env.k.vehicle.get_observed_ids", "env.k.vehicle.get_observed_ids", "env.k.vehicle.get_observed_ids", "env.k.vehicle.get_observed_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.set_observed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove_observed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove_observed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_observed_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_observed_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_observed_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_observed_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_observed_ids"], ["def", "test_obs_ids", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "veh_id", "=", "\"test\"", ",", "num_vehicles", "=", "10", ")", "\n", "\n", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "\n", "# test setting new observed values", "\n", "env", ".", "k", ".", "vehicle", ".", "set_observed", "(", "\"test_0\"", ")", "\n", "self", ".", "assertCountEqual", "(", "env", ".", "k", ".", "vehicle", ".", "get_observed_ids", "(", ")", ",", "[", "\"test_0\"", "]", ")", "\n", "\n", "env", ".", "k", ".", "vehicle", ".", "set_observed", "(", "\"test_1\"", ")", "\n", "self", ".", "assertCountEqual", "(", "env", ".", "k", ".", "vehicle", ".", "get_observed_ids", "(", ")", ",", "\n", "[", "\"test_0\"", ",", "\"test_1\"", "]", ")", "\n", "\n", "# ensures that setting vehicles twice doesn't add an element", "\n", "env", ".", "k", ".", "vehicle", ".", "set_observed", "(", "\"test_0\"", ")", "\n", "self", ".", "assertListEqual", "(", "env", ".", "k", ".", "vehicle", ".", "get_observed_ids", "(", ")", ",", "\n", "[", "\"test_0\"", ",", "\"test_1\"", "]", ")", "\n", "\n", "# test removing observed values", "\n", "env", ".", "k", ".", "vehicle", ".", "remove_observed", "(", "\"test_0\"", ")", "\n", "self", ".", "assertCountEqual", "(", "env", ".", "k", ".", "vehicle", ".", "get_observed_ids", "(", ")", ",", "[", "\"test_1\"", "]", ")", "\n", "\n", "# ensures that removing a value that does not exist does not lead to", "\n", "# an error", "\n", "env", ".", "k", ".", "vehicle", ".", "remove_observed", "(", "\"test_0\"", ")", "\n", "self", ".", "assertCountEqual", "(", "env", ".", "k", ".", "vehicle", ".", "get_observed_ids", "(", ")", ",", "[", "\"test_1\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestGUISystemBase.getGUISystem": [[11, 13], ["None"], "methods", ["None"], ["def", "getGUISystem", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestGUISystemBase.getActiveGui": [[14, 16], ["None"], "methods", ["None"], ["", "def", "getActiveGui", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestGUISystemBase.getActiveModel": [[17, 19], ["None"], "methods", ["None"], ["", "def", "getActiveModel", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestObject.__init__": [[23, 26], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "typename", ")", ":", "\n", "        ", "self", ".", "var_name", "=", "name", "\n", "self", ".", "var_typename", "=", "typename", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestObject.getName": [[27, 29], ["None"], "methods", ["None"], ["", "def", "getName", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "var_name", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestObject.getTypeName": [[30, 32], ["None"], "methods", ["None"], ["", "def", "getTypeName", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "var_typename", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestAimsunScriptingAPI.test_new_and_load": [[37, 99], ["TestGUISystem", "flow.utils.aimsun.scripting_api.AimsunTemplate", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertIsNotNone", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_gui.reset", "flow.utils.aimsun.scripting_api.AimsunTemplate.load", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_gui.reset", "flow.utils.aimsun.scripting_api.AimsunTemplate.new_duplicate", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_gui.reset", "flow.utils.aimsun.scripting_api.AimsunTemplate.new_empty", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_gui.reset", "flow.utils.aimsun.scripting_api.AimsunTemplate.save", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "TestGUI"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.new_duplicate", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.new_empty", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save"], ["def", "test_new_and_load", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests that the new/load/save functions call the correct Aimsun\n        methods and in the right order\n        \"\"\"", "\n", "class", "TestGUI", "(", "object", ")", ":", "\n", "            ", "\"\"\"Substitution for Aimsun's GGui class\"\"\"", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "                ", "self", ".", "called", "=", "[", "]", "\n", "\n", "", "def", "getActiveModel", "(", "self", ")", ":", "\n", "                ", "self", ".", "called", "+=", "[", "'getActiveModel'", "]", "\n", "\n", "", "def", "loadNetwork", "(", "self", ",", "path", ")", ":", "\n", "                ", "self", ".", "called", "+=", "[", "'loadNetwork'", "]", "\n", "\n", "", "def", "newDoc", "(", "self", ",", "path", ")", ":", "\n", "                ", "self", ".", "called", "+=", "[", "'newDoc'", "]", "\n", "\n", "", "def", "newSimpleDoc", "(", "self", ")", ":", "\n", "                ", "self", ".", "called", "+=", "[", "'newSimpleDoc'", "]", "\n", "\n", "", "def", "saveAs", "(", "self", ",", "path", ")", ":", "\n", "                ", "self", ".", "called", "+=", "[", "'saveAs'", "]", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "                ", "self", ".", "called", "=", "[", "]", "\n", "\n", "", "", "class", "TestGUISystem", "(", "object", ")", ":", "\n", "            ", "\"\"\"Substitution for Aimsun's GKGUISystem class\"\"\"", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "                ", "self", ".", "active_gui", "=", "None", "\n", "\n", "", "def", "getActiveGui", "(", "self", ")", ":", "\n", "                ", "if", "self", ".", "active_gui", "is", "None", ":", "\n", "                    ", "self", ".", "active_gui", "=", "TestGUI", "(", ")", "\n", "", "return", "self", ".", "active_gui", "\n", "\n", "", "def", "getGUISystem", "(", "self", ")", ":", "\n", "                ", "return", "self", "\n", "\n", "", "", "test_gui_system", "=", "TestGUISystem", "(", ")", "\n", "model", "=", "AimsunTemplate", "(", "GKSystem", "=", "None", ",", "GKGUISystem", "=", "test_gui_system", ")", "\n", "test_gui", "=", "test_gui_system", ".", "active_gui", "\n", "\n", "self", ".", "assertIsNotNone", "(", "test_gui", ")", "\n", "self", ".", "assertEqual", "(", "test_gui", ".", "called", ",", "[", "'getActiveModel'", "]", ")", "\n", "\n", "test_gui", ".", "reset", "(", ")", "\n", "model", ".", "load", "(", "'path'", ")", "\n", "self", ".", "assertEqual", "(", "test_gui", ".", "called", ",", "[", "'loadNetwork'", ",", "'getActiveModel'", "]", ")", "\n", "\n", "test_gui", ".", "reset", "(", ")", "\n", "model", ".", "new_duplicate", "(", "'path'", ")", "\n", "self", ".", "assertEqual", "(", "test_gui", ".", "called", ",", "[", "'newDoc'", ",", "'getActiveModel'", "]", ")", "\n", "\n", "test_gui", ".", "reset", "(", ")", "\n", "model", ".", "new_empty", "(", ")", "\n", "self", ".", "assertEqual", "(", "test_gui", ".", "called", ",", "[", "'newSimpleDoc'", ",", "'getActiveModel'", "]", ")", "\n", "\n", "test_gui", ".", "reset", "(", ")", "\n", "model", ".", "save", "(", "'path'", ")", "\n", "self", ".", "assertEqual", "(", "test_gui", ".", "called", ",", "[", "'saveAs'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestAimsunScriptingAPI.test_run_replication": [[100, 128], ["TestSystem", "TestGUISystem", "flow.utils.aimsun.scripting_api.AimsunTemplate", "flow.utils.aimsun.scripting_api.AimsunTemplate.run_replication", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "flow.utils.aimsun.scripting_api.AimsunTemplate.run_replication", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.run_replication", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.run_replication"], ["", "def", "test_run_replication", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests that the run_replication function calls the correct\n        Aimsun function and with the right arguments w.r.t rendering\n        \"\"\"", "\n", "class", "TestSystem", "(", "object", ")", ":", "\n", "            ", "\"\"\"Substitution for Aimsun's GKSystem class\"\"\"", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "                ", "self", ".", "mode", "=", "None", "\n", "\n", "", "def", "getSystem", "(", "self", ")", ":", "\n", "                ", "return", "self", "\n", "\n", "", "def", "executeAction", "(", "self", ",", "mode", ",", "*", "args", ")", ":", "\n", "                ", "self", ".", "mode", "=", "mode", "\n", "\n", "", "", "class", "TestGUISystem", "(", "TestGUISystemBase", ")", ":", "\n", "            ", "pass", "\n", "\n", "", "test_system", "=", "TestSystem", "(", ")", "\n", "test_gui_system", "=", "TestGUISystem", "(", ")", "\n", "model", "=", "AimsunTemplate", "(", "GKSystem", "=", "test_system", ",", "\n", "GKGUISystem", "=", "test_gui_system", ")", "\n", "\n", "model", ".", "run_replication", "(", "replication", "=", "'replication'", ",", "render", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "test_system", ".", "mode", ",", "'play'", ")", "\n", "\n", "model", ".", "run_replication", "(", "replication", "=", "'replication'", ",", "render", "=", "False", ")", "\n", "self", ".", "assertEqual", "(", "test_system", ".", "mode", ",", "'execute'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestAimsunScriptingAPI.test_getattr_setattr": [[129, 216], ["TestGUISystem", "flow.utils.aimsun.scripting_api.AimsunTemplate", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "TestTurning", "TestExperiment", "flow.utils.aimsun.scripting_api.AimsunTemplate._AimsunTemplate__wrap_object", "flow.utils.aimsun.scripting_api.AimsunTemplate._AimsunTemplate__wrap_object", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "TestExperiment.set_column", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "TestWrappedObject", "flow.utils.aimsun.scripting_api.AimsunTemplate._AimsunTemplate__wrap_object", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "TestTurning.polygon.length2D", "TestExperiment.getName", "TestExperiment.get_column", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertRaises", "TestExperiment.setHeight", "Model", "Destination", "Polygon", "Polygon", "Polygon"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestObject.getName"], ["", "def", "test_getattr_setattr", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test the custom __getattr__ and __setattr__ methods\"\"\"", "\n", "class", "TestGUISystem", "(", "TestGUISystemBase", ")", ":", "\n", "            ", "\"\"\"Substitution for Aimsun's GKGUISystem class\"\"\"", "\n", "def", "getActiveModel", "(", "self", ")", ":", "\n", "                ", "class", "Model", "(", "object", ")", ":", "\n", "                    ", "def", "__init__", "(", "self", ")", ":", "\n", "                        ", "self", ".", "var", "=", "42", "\n", "", "", "return", "Model", "(", ")", "\n", "\n", "", "", "class", "TestTurning", "(", "object", ")", ":", "\n", "            ", "\"\"\"Substitution for Aimsun's GKTurning class\"\"\"", "\n", "def", "getSpeed", "(", "self", ")", ":", "\n", "                ", "return", "13", "\n", "\n", "", "def", "getDestination", "(", "self", ")", ":", "\n", "                ", "class", "Destination", "(", "object", ")", ":", "\n", "                    ", "def", "getName", "(", "self", ")", ":", "\n", "                        ", "return", "'road66'", "\n", "", "", "return", "Destination", "(", ")", "\n", "\n", "", "def", "getPolygon", "(", "self", ")", ":", "\n", "                ", "class", "Polygon", "(", "object", ")", ":", "\n", "                    ", "def", "length2D", "(", "self", ")", ":", "\n", "                        ", "return", "99", "\n", "", "", "return", "Polygon", "(", ")", "\n", "\n", "", "", "class", "TestExperiment", "(", "object", ")", ":", "\n", "            ", "\"\"\"Substitution for Aimsun's GKExperiment class\"\"\"", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "                ", "self", ".", "exp_name", "=", "'experiment'", "\n", "self", ".", "columns", "=", "{", "'A'", ":", "66", "}", "\n", "\n", "", "def", "getName", "(", "self", ")", ":", "\n", "                ", "return", "self", ".", "exp_name", "\n", "\n", "", "def", "setName", "(", "self", ",", "name", ")", ":", "\n", "                ", "self", ".", "exp_name", "=", "name", "\n", "\n", "", "def", "getColumn", "(", "self", ",", "col", ")", ":", "\n", "                ", "return", "self", ".", "columns", "[", "col", "]", "\n", "\n", "", "def", "setColumn", "(", "self", ",", "col", ",", "val", ")", ":", "\n", "                ", "self", ".", "columns", "[", "col", "]", "=", "val", "\n", "\n", "", "", "test_gui_system", "=", "TestGUISystem", "(", ")", "\n", "model", "=", "AimsunTemplate", "(", "GKSystem", "=", "None", ",", "GKGUISystem", "=", "test_gui_system", ")", "\n", "\n", "self", ".", "assertEqual", "(", "model", ".", "var", ",", "42", ")", "\n", "\n", "turning", "=", "TestTurning", "(", ")", "\n", "exp", "=", "TestExperiment", "(", ")", "\n", "\n", "model", ".", "_AimsunTemplate__wrap_object", "(", "turning", ")", "\n", "model", ".", "_AimsunTemplate__wrap_object", "(", "exp", ")", "\n", "\n", "self", ".", "assertEqual", "(", "turning", ".", "speed", ",", "13", ")", "\n", "self", ".", "assertEqual", "(", "turning", ".", "destination", ".", "name", ",", "'road66'", ")", "\n", "self", ".", "assertEqual", "(", "turning", ".", "polygon", ".", "length2D", "(", ")", ",", "99", ")", "\n", "\n", "self", ".", "assertEqual", "(", "exp", ".", "name", ",", "'experiment'", ")", "\n", "exp", ".", "name", "=", "'experiment2'", "\n", "self", ".", "assertEqual", "(", "exp", ".", "name", ",", "'experiment2'", ")", "\n", "self", ".", "assertEqual", "(", "exp", ".", "getName", "(", ")", ",", "'experiment2'", ")", "\n", "exp", ".", "set_column", "(", "'A'", ",", "67", ")", "\n", "self", ".", "assertEqual", "(", "exp", ".", "get_column", "(", "'A'", ")", ",", "67", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "AttributeError", ")", ":", "\n", "            ", "exp", ".", "setHeight", "(", "12", ")", "\n", "\n", "", "class", "Polygon", "(", "object", ")", ":", "\n", "            ", "def", "__init__", "(", "self", ",", "perim", ")", ":", "\n", "                ", "self", ".", "perim", "=", "perim", "\n", "\n", "", "def", "getPerimeter", "(", "self", ")", ":", "\n", "                ", "return", "self", ".", "perim", "\n", "\n", "", "", "class", "TestWrappedObject", "(", "object", ")", ":", "\n", "            ", "def", "getPolygons", "(", "self", ")", ":", "\n", "                ", "return", "[", "\n", "Polygon", "(", "12", ")", ",", "\n", "Polygon", "(", "42", ")", "\n", "]", "\n", "\n", "", "", "wrapper_object", "=", "TestWrappedObject", "(", ")", "\n", "model", ".", "_AimsunTemplate__wrap_object", "(", "wrapper_object", ")", "\n", "self", ".", "assertEqual", "(", "wrapper_object", ".", "polygons", "[", "1", "]", ".", "perim", ",", "42", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestAimsunScriptingAPI.test_find": [[217, 240], ["TestGUISystem", "flow.utils.aimsun.scripting_api.AimsunTemplate", "flow.utils.aimsun.scripting_api.AimsunTemplate.find_by_name", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "flow.utils.aimsun.scripting_api.AimsunTemplate.find_all_by_type", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestObject", "test_aimsun_scripting_api.TestObject", "test_aimsun_scripting_api.TestObject", "test_aimsun_scripting_api.TestObject", "test_aimsun_scripting_api.TestObject", "set"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.find_by_name", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.scripting_api.AimsunTemplate.find_all_by_type"], ["", "def", "test_find", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests the find_by_name and find_all_by_type functions\"\"\"", "\n", "class", "TestGUISystem", "(", "TestGUISystemBase", ")", ":", "\n", "            ", "pass", "\n", "\n", "", "test_gui_system", "=", "TestGUISystem", "(", ")", "\n", "model", "=", "AimsunTemplate", "(", "GKSystem", "=", "None", ",", "GKGUISystem", "=", "test_gui_system", ")", "\n", "\n", "objects", "=", "[", "\n", "TestObject", "(", "'Cat'", ",", "'Animal'", ")", ",", "\n", "TestObject", "(", "'Squirrel'", ",", "'Animal'", ")", ",", "\n", "TestObject", "(", "'Bach'", ",", "'Musician'", ")", ",", "\n", "TestObject", "(", "'Husky'", ",", "'Animal'", ")", ",", "\n", "TestObject", "(", "'Mozart'", ",", "'Musician'", ")", "\n", "]", "\n", "\n", "search1", "=", "model", ".", "find_by_name", "(", "objects", ",", "'Husky'", ")", "\n", "self", ".", "assertEqual", "(", "search1", ".", "name", ",", "'Husky'", ")", "\n", "self", ".", "assertEqual", "(", "search1", ".", "type_name", ",", "'Animal'", ")", "\n", "\n", "search2", "=", "model", ".", "find_all_by_type", "(", "objects", ",", "'Musician'", ")", "\n", "self", ".", "assertEqual", "(", "[", "x", ".", "name", "for", "x", "in", "search2", "]", ",", "[", "'Bach'", ",", "'Mozart'", "]", ")", "\n", "self", ".", "assertEqual", "(", "set", "(", "[", "x", ".", "type_name", "for", "x", "in", "search2", "]", ")", ",", "{", "'Musician'", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestAimsunScriptingAPI.test_get_objects_by_type": [[241, 310], ["TestGUISystem", "flow.utils.aimsun.scripting_api.AimsunTemplate", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "test_aimsun_scripting_api.TestAimsunScriptingAPI.assertEqual", "sorted", "set", "sorted", "set", "sorted", "set", "sorted", "set", "sorted", "set", "sorted", "set", "sorted", "set", "enumerate", "test_aimsun_scripting_api.TestObject", "test_aimsun_scripting_api.TestObject", "test_aimsun_scripting_api.TestObject", "test_aimsun_scripting_api.TestObject", "test_aimsun_scripting_api.TestObject", "test_aimsun_scripting_api.TestObject", "test_aimsun_scripting_api.TestObject", "test_aimsun_scripting_api.TestObject", "test_aimsun_scripting_api.TestObject", "test_aimsun_scripting_api.TestObject", "test_aimsun_scripting_api.TestObject", "obj.getTypeName"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_scripting_api.TestObject.getTypeName"], ["", "def", "test_get_objects_by_type", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests the property methods\"\"\"", "\n", "class", "TestGUISystem", "(", "TestGUISystemBase", ")", ":", "\n", "            ", "\"\"\"Substitution for Aimsun's GKGUISystem class\"\"\"", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "                ", "self", ".", "objects", "=", "[", "\n", "TestObject", "(", "'s1'", ",", "'_GKSection'", ")", ",", "\n", "TestObject", "(", "'s2'", ",", "'_GKSection'", ")", ",", "\n", "TestObject", "(", "'s3'", ",", "'_GKSection'", ")", ",", "\n", "TestObject", "(", "'n1'", ",", "'_GKNode'", ")", ",", "\n", "TestObject", "(", "'n2'", ",", "'_GKNode'", ")", ",", "\n", "TestObject", "(", "'t1'", ",", "'_GKTurning'", ")", ",", "\n", "TestObject", "(", "'t2'", ",", "'_GKTurning'", ")", ",", "\n", "TestObject", "(", "'c1'", ",", "'_GKCenConnection'", ")", ",", "\n", "TestObject", "(", "'r1'", ",", "'_GKReplication'", ")", ",", "\n", "TestObject", "(", "'c1'", ",", "'_GKCentroidConfiguration'", ")", ",", "\n", "TestObject", "(", "'p1'", ",", "'_GKProblemNet'", ")", "\n", "]", "\n", "\n", "", "def", "getType", "(", "self", ",", "name", ")", ":", "\n", "                ", "return", "'_'", "+", "name", "\n", "\n", "", "def", "getCatalog", "(", "self", ")", ":", "\n", "                ", "return", "self", "\n", "\n", "", "def", "getObjectsByType", "(", "self", ",", "typename", ")", ":", "\n", "                ", "res", "=", "{", "}", "\n", "for", "i", ",", "obj", "in", "enumerate", "(", "self", ".", "objects", ")", ":", "\n", "                    ", "if", "obj", ".", "getTypeName", "(", ")", "==", "typename", ":", "\n", "                        ", "res", "[", "i", "]", "=", "obj", "\n", "", "", "return", "res", "\n", "\n", "", "", "test_gui_system", "=", "TestGUISystem", "(", ")", "\n", "model", "=", "AimsunTemplate", "(", "GKSystem", "=", "None", ",", "GKGUISystem", "=", "test_gui_system", ")", "\n", "\n", "section_names", "=", "[", "x", ".", "name", "for", "x", "in", "model", ".", "sections", "]", "\n", "section_types", "=", "[", "x", ".", "type_name", "for", "x", "in", "model", ".", "sections", "]", "\n", "self", ".", "assertEqual", "(", "sorted", "(", "section_names", ")", ",", "[", "'s1'", ",", "'s2'", ",", "'s3'", "]", ")", "\n", "self", ".", "assertEqual", "(", "set", "(", "section_types", ")", ",", "{", "'_GKSection'", "}", ")", "\n", "\n", "node_names", "=", "[", "x", ".", "name", "for", "x", "in", "model", ".", "nodes", "]", "\n", "node_types", "=", "[", "x", ".", "type_name", "for", "x", "in", "model", ".", "nodes", "]", "\n", "self", ".", "assertEqual", "(", "sorted", "(", "node_names", ")", ",", "[", "'n1'", ",", "'n2'", "]", ")", "\n", "self", ".", "assertEqual", "(", "set", "(", "node_types", ")", ",", "{", "'_GKNode'", "}", ")", "\n", "\n", "turning_names", "=", "[", "x", ".", "name", "for", "x", "in", "model", ".", "turnings", "]", "\n", "turning_types", "=", "[", "x", ".", "type_name", "for", "x", "in", "model", ".", "turnings", "]", "\n", "self", ".", "assertEqual", "(", "sorted", "(", "turning_names", ")", ",", "[", "'t1'", ",", "'t2'", "]", ")", "\n", "self", ".", "assertEqual", "(", "set", "(", "turning_types", ")", ",", "{", "'_GKTurning'", "}", ")", "\n", "\n", "cen_connection_names", "=", "[", "x", ".", "name", "for", "x", "in", "model", ".", "cen_connections", "]", "\n", "cen_connection_types", "=", "[", "x", ".", "type_name", "for", "x", "in", "model", ".", "cen_connections", "]", "\n", "self", ".", "assertEqual", "(", "sorted", "(", "cen_connection_names", ")", ",", "[", "'c1'", "]", ")", "\n", "self", ".", "assertEqual", "(", "set", "(", "cen_connection_types", ")", ",", "{", "'_GKCenConnection'", "}", ")", "\n", "\n", "replication_names", "=", "[", "x", ".", "name", "for", "x", "in", "model", ".", "replications", "]", "\n", "replication_types", "=", "[", "x", ".", "type_name", "for", "x", "in", "model", ".", "replications", "]", "\n", "self", ".", "assertEqual", "(", "sorted", "(", "replication_names", ")", ",", "[", "'r1'", "]", ")", "\n", "self", ".", "assertEqual", "(", "set", "(", "replication_types", ")", ",", "{", "'_GKReplication'", "}", ")", "\n", "\n", "cen_config_names", "=", "[", "x", ".", "name", "for", "x", "in", "model", ".", "centroid_configurations", "]", "\n", "cen_config_types", "=", "[", "x", ".", "type_name", "for", "x", "in", "model", ".", "centroid_configurations", "]", "\n", "self", ".", "assertEqual", "(", "sorted", "(", "cen_config_names", ")", ",", "[", "'c1'", "]", ")", "\n", "self", ".", "assertEqual", "(", "set", "(", "cen_config_types", ")", ",", "{", "'_GKCentroidConfiguration'", "}", ")", "\n", "\n", "problem_net_names", "=", "[", "x", ".", "name", "for", "x", "in", "model", ".", "problem_nets", "]", "\n", "problem_net_types", "=", "[", "x", ".", "type_name", "for", "x", "in", "model", ".", "problem_nets", "]", "\n", "self", ".", "assertEqual", "(", "sorted", "(", "problem_net_names", ")", ",", "[", "'p1'", "]", ")", "\n", "self", ".", "assertEqual", "(", "set", "(", "problem_net_types", ")", ",", "{", "'_GKProblemNet'", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv._apply_rl_actions": [[16, 18], ["None"], "methods", ["None"], ["def", "_apply_rl_actions", "(", "self", ",", "rl_actions", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.get_state": [[19, 21], ["None"], "methods", ["None"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "return", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.action_space": [[22, 25], ["gym.spaces.Box"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "1", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.observation_space": [[26, 29], ["gym.spaces.Box"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "return", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "1", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.compute_reward": [[30, 33], ["None"], "methods", ["None"], ["", "def", "compute_reward", "(", "self", ",", "rl_actions", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Returns what rl_actions is perceived as.\"\"\"", "\n", "return", "rl_actions", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.TestEnvParams.test_clip_actions": [[38, 76], ["flow.core.params.SumoParams", "flow.core.params.VehicleParams", "flow.core.params.NetParams", "flow.networks.RingNetwork", "flow.core.params.EnvParams", "test_params.RLActionsEnv", "RLActionsEnv.reset", "RLActionsEnv.step", "test_params.TestEnvParams.assertEqual", "flow.core.params.EnvParams", "test_params.RLActionsEnv", "RLActionsEnv.reset", "RLActionsEnv.step", "test_params.TestEnvParams.assertEqual", "RLActionsEnv.step", "test_params.TestEnvParams.assertEqual", "RLActionsEnv.step", "test_params.TestEnvParams.assertEqual", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["def", "test_clip_actions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test that the actions are clipped in the reward function.\"\"\"", "\n", "sim_params", "=", "SumoParams", "(", ")", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "230", ",", "\n", "\"lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "network", "=", "RingNetwork", "(", "\n", "name", "=", "\"RingRoadTest\"", ",", "\n", "vehicles", "=", "vehicles", ",", "\n", "net_params", "=", "net_params", ")", "\n", "\n", "# when set to False", "\n", "env_params", "=", "EnvParams", "(", "clip_actions", "=", "False", ")", "\n", "env", "=", "RLActionsEnv", "(", "\n", "env_params", "=", "env_params", ",", "sim_params", "=", "sim_params", ",", "network", "=", "network", ")", "\n", "env", ".", "reset", "(", ")", "\n", "_", ",", "ret", ",", "_", ",", "_", "=", "env", ".", "step", "(", "rl_actions", "=", "[", "5", "]", ")", "\n", "self", ".", "assertEqual", "(", "np", ".", "mean", "(", "ret", ")", ",", "5", ")", "\n", "\n", "# when set to True", "\n", "env_params", "=", "EnvParams", "(", "clip_actions", "=", "True", ")", "\n", "env", "=", "RLActionsEnv", "(", "\n", "env_params", "=", "env_params", ",", "sim_params", "=", "sim_params", ",", "network", "=", "network", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "_", ",", "ret", ",", "_", ",", "_", "=", "env", ".", "step", "(", "rl_actions", "=", "[", "0.5", "]", ")", "\n", "self", ".", "assertEqual", "(", "ret", ",", "0.5", ")", "\n", "\n", "_", ",", "ret", ",", "_", ",", "_", "=", "env", ".", "step", "(", "rl_actions", "=", "[", "5", "]", ")", "\n", "self", ".", "assertEqual", "(", "ret", ",", "1", ")", "\n", "\n", "_", ",", "ret", ",", "_", ",", "_", "=", "env", ".", "step", "(", "rl_actions", "=", "[", "-", "5", "]", ")", "\n", "self", ".", "assertEqual", "(", "ret", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.TestSumoParams.test_params": [[81, 118], ["flow.core.params.SumoParams", "test_params.TestSumoParams.assertEqual", "test_params.TestSumoParams.assertEqual", "test_params.TestSumoParams.assertEqual", "test_params.TestSumoParams.assertEqual", "test_params.TestSumoParams.assertEqual", "test_params.TestSumoParams.assertEqual", "test_params.TestSumoParams.assertEqual", "test_params.TestSumoParams.assertEqual", "test_params.TestSumoParams.assertEqual", "test_params.TestSumoParams.assertEqual", "test_params.TestSumoParams.assertEqual", "test_params.TestSumoParams.assertEqual", "test_params.TestSumoParams.assertEqual", "test_params.TestSumoParams.assertEqual", "test_params.TestSumoParams.assertEqual"], "methods", ["None"], ["def", "test_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests that the various parameters lead to correct assignments in the\n        attribute of the class.\"\"\"", "\n", "# start a SumoParams with some attributes", "\n", "params", "=", "SumoParams", "(", "\n", "port", "=", "None", ",", "\n", "sim_step", "=", "0.125", ",", "\n", "emission_path", "=", "None", ",", "\n", "lateral_resolution", "=", "None", ",", "\n", "no_step_log", "=", "False", ",", "\n", "render", "=", "True", ",", "\n", "save_render", "=", "True", ",", "\n", "sight_radius", "=", "50", ",", "\n", "show_radius", "=", "True", ",", "\n", "pxpm", "=", "10", ",", "\n", "overtake_right", "=", "True", ",", "\n", "seed", "=", "204", ",", "\n", "restart_instance", "=", "True", ",", "\n", "print_warnings", "=", "False", ",", "\n", "teleport_time", "=", "-", "1", ")", "\n", "\n", "# ensure that the attributes match their correct values", "\n", "self", ".", "assertEqual", "(", "params", ".", "port", ",", "None", ")", "\n", "self", ".", "assertEqual", "(", "params", ".", "sim_step", ",", "0.125", ")", "\n", "self", ".", "assertEqual", "(", "params", ".", "emission_path", ",", "None", ")", "\n", "self", ".", "assertEqual", "(", "params", ".", "lateral_resolution", ",", "None", ")", "\n", "self", ".", "assertEqual", "(", "params", ".", "no_step_log", ",", "False", ")", "\n", "self", ".", "assertEqual", "(", "params", ".", "render", ",", "True", ")", "\n", "self", ".", "assertEqual", "(", "params", ".", "save_render", ",", "True", ")", "\n", "self", ".", "assertEqual", "(", "params", ".", "sight_radius", ",", "50", ")", "\n", "self", ".", "assertEqual", "(", "params", ".", "show_radius", ",", "True", ")", "\n", "self", ".", "assertEqual", "(", "params", ".", "pxpm", ",", "10", ")", "\n", "self", ".", "assertEqual", "(", "params", ".", "overtake_right", ",", "True", ")", "\n", "self", ".", "assertEqual", "(", "params", ".", "seed", ",", "204", ")", "\n", "self", ".", "assertEqual", "(", "params", ".", "restart_instance", ",", "True", ")", "\n", "self", ".", "assertEqual", "(", "params", ".", "print_warnings", ",", "False", ")", "\n", "self", ".", "assertEqual", "(", "params", ".", "teleport_time", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.TestSumoCarFollowingParams.test_params": [[123, 151], ["flow.core.params.SumoCarFollowingParams", "test_params.TestSumoCarFollowingParams.assertEqual", "test_params.TestSumoCarFollowingParams.assertEqual", "test_params.TestSumoCarFollowingParams.assertEqual", "test_params.TestSumoCarFollowingParams.assertEqual", "test_params.TestSumoCarFollowingParams.assertEqual", "test_params.TestSumoCarFollowingParams.assertEqual", "test_params.TestSumoCarFollowingParams.assertEqual", "test_params.TestSumoCarFollowingParams.assertEqual", "test_params.TestSumoCarFollowingParams.assertEqual", "test_params.TestSumoCarFollowingParams.assertEqual"], "methods", ["None"], ["def", "test_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests that the various parameters lead to correct assignments in the\n        controller_params attribute of the class.\"\"\"", "\n", "# start a SumoCarFollowingParams with some attributes", "\n", "cfm_params", "=", "SumoCarFollowingParams", "(", "\n", "accel", "=", "1.0", ",", "\n", "decel", "=", "1.5", ",", "\n", "sigma", "=", "0.5", ",", "\n", "tau", "=", "0.5", ",", "\n", "min_gap", "=", "1.0", ",", "\n", "max_speed", "=", "30", ",", "\n", "speed_factor", "=", "1.0", ",", "\n", "speed_dev", "=", "0.1", ",", "\n", "impatience", "=", "0.5", ",", "\n", "car_follow_model", "=", "\"IDM\"", ")", "\n", "\n", "# ensure that the attributes match their correct element in the", "\n", "# \"controller_params\" dict", "\n", "self", ".", "assertEqual", "(", "cfm_params", ".", "controller_params", "[", "\"accel\"", "]", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "cfm_params", ".", "controller_params", "[", "\"decel\"", "]", ",", "1.5", ")", "\n", "self", ".", "assertEqual", "(", "cfm_params", ".", "controller_params", "[", "\"sigma\"", "]", ",", "0.5", ")", "\n", "self", ".", "assertEqual", "(", "cfm_params", ".", "controller_params", "[", "\"tau\"", "]", ",", "0.5", ")", "\n", "self", ".", "assertEqual", "(", "cfm_params", ".", "controller_params", "[", "\"minGap\"", "]", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "cfm_params", ".", "controller_params", "[", "\"maxSpeed\"", "]", ",", "30", ")", "\n", "self", ".", "assertEqual", "(", "cfm_params", ".", "controller_params", "[", "\"speedFactor\"", "]", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "cfm_params", ".", "controller_params", "[", "\"speedDev\"", "]", ",", "0.1", ")", "\n", "self", ".", "assertEqual", "(", "cfm_params", ".", "controller_params", "[", "\"impatience\"", "]", ",", "0.5", ")", "\n", "self", ".", "assertEqual", "(", "cfm_params", ".", "controller_params", "[", "\"carFollowModel\"", "]", ",", "\"IDM\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.TestSumoCarFollowingParams.test_deprecated": [[152, 181], ["flow.core.params.SumoCarFollowingParams", "test_params.TestSumoCarFollowingParams.assertEqual", "test_params.TestSumoCarFollowingParams.assertEqual", "test_params.TestSumoCarFollowingParams.assertEqual", "test_params.TestSumoCarFollowingParams.assertEqual", "test_params.TestSumoCarFollowingParams.assertEqual", "test_params.TestSumoCarFollowingParams.assertEqual", "test_params.TestSumoCarFollowingParams.assertEqual", "test_params.TestSumoCarFollowingParams.assertEqual", "test_params.TestSumoCarFollowingParams.assertEqual", "test_params.TestSumoCarFollowingParams.assertEqual"], "methods", ["None"], ["", "def", "test_deprecated", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that deprecated forms of the attribute still return proper\n        values to the correct attributes\"\"\"", "\n", "# start a SumoCarFollowingParams with some attributes, using the", "\n", "# deprecated attributes", "\n", "cfm_params", "=", "SumoCarFollowingParams", "(", "\n", "accel", "=", "1.0", ",", "\n", "decel", "=", "1.5", ",", "\n", "sigma", "=", "0.5", ",", "\n", "tau", "=", "0.5", ",", "\n", "minGap", "=", "1.0", ",", "\n", "maxSpeed", "=", "30", ",", "\n", "speedFactor", "=", "1.0", ",", "\n", "speedDev", "=", "0.1", ",", "\n", "impatience", "=", "0.5", ",", "\n", "carFollowModel", "=", "\"IDM\"", ")", "\n", "\n", "# ensure that the attributes match their correct element in the", "\n", "# \"controller_params\" dict", "\n", "self", ".", "assertEqual", "(", "cfm_params", ".", "controller_params", "[", "\"accel\"", "]", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "cfm_params", ".", "controller_params", "[", "\"decel\"", "]", ",", "1.5", ")", "\n", "self", ".", "assertEqual", "(", "cfm_params", ".", "controller_params", "[", "\"sigma\"", "]", ",", "0.5", ")", "\n", "self", ".", "assertEqual", "(", "cfm_params", ".", "controller_params", "[", "\"tau\"", "]", ",", "0.5", ")", "\n", "self", ".", "assertEqual", "(", "cfm_params", ".", "controller_params", "[", "\"minGap\"", "]", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "cfm_params", ".", "controller_params", "[", "\"maxSpeed\"", "]", ",", "30", ")", "\n", "self", ".", "assertEqual", "(", "cfm_params", ".", "controller_params", "[", "\"speedFactor\"", "]", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "cfm_params", ".", "controller_params", "[", "\"speedDev\"", "]", ",", "0.1", ")", "\n", "self", ".", "assertEqual", "(", "cfm_params", ".", "controller_params", "[", "\"impatience\"", "]", ",", "0.5", ")", "\n", "self", ".", "assertEqual", "(", "cfm_params", ".", "controller_params", "[", "\"carFollowModel\"", "]", ",", "\"IDM\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.TestSumoLaneChangeParams.test_lc_params": [[186, 208], ["flow.core.params.SumoLaneChangeParams", "list", "test_params.TestSumoLaneChangeParams.assertCountEqual", "flow.core.params.SumoLaneChangeParams", "list", "test_params.TestSumoLaneChangeParams.assertCountEqual", "flow.core.params.SumoLaneChangeParams.controller_params.keys", "flow.core.params.SumoLaneChangeParams.controller_params.keys"], "methods", ["None"], ["def", "test_lc_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test basic usage of the SumoLaneChangeParams object. Ensures that\n        the controller_params attribute contains different elements depending\n        on whether LC2103 or SL2015 is being used as the model.\"\"\"", "\n", "# test for LC2013", "\n", "lc_params_1", "=", "SumoLaneChangeParams", "(", "model", "=", "\"LC2013\"", ")", "\n", "attributes_1", "=", "list", "(", "lc_params_1", ".", "controller_params", ".", "keys", "(", ")", ")", "\n", "# TODO: modify with all elements once the fix is added to sumo", "\n", "expected_attributes_1", "=", "[", "\n", "\"laneChangeModel\"", ",", "\"lcStrategic\"", ",", "\"lcCooperative\"", ",", "\"lcSpeedGain\"", ",", "\n", "\"lcKeepRight\"", "\n", "]", "\n", "self", ".", "assertCountEqual", "(", "attributes_1", ",", "expected_attributes_1", ")", "\n", "\n", "# test for SL2015", "\n", "lc_params_2", "=", "SumoLaneChangeParams", "(", "model", "=", "\"SL2015\"", ")", "\n", "attributes_2", "=", "list", "(", "lc_params_2", ".", "controller_params", ".", "keys", "(", ")", ")", "\n", "expected_attributes_2", "=", "[", "\"laneChangeModel\"", ",", "\"lcStrategic\"", ",", "\"lcCooperative\"", ",", "\"lcSpeedGain\"", ",", "\n", "\"lcKeepRight\"", ",", "\"lcLookaheadLeft\"", ",", "\"lcSpeedGainRight\"", ",", "\"lcSublane\"", ",", "\n", "\"lcPushy\"", ",", "\"lcPushyGap\"", ",", "\"lcAssertive\"", ",", "\"lcAccelLat\"", "]", "\n", "self", ".", "assertCountEqual", "(", "attributes_2", ",", "expected_attributes_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.TestSumoLaneChangeParams.test_wrong_model": [[209, 226], ["flow.core.params.SumoLaneChangeParams", "test_params.TestSumoLaneChangeParams.assertEqual", "list", "test_params.TestSumoLaneChangeParams.assertCountEqual", "flow.core.params.SumoLaneChangeParams.controller_params.keys"], "methods", ["None"], ["", "def", "test_wrong_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"Tests that a wrongly specified model defaults the sumo lane change\n        model to LC2013.\"\"\"", "\n", "# input a wrong lane change model", "\n", "lc_params", "=", "SumoLaneChangeParams", "(", "model", "=", "\"foo\"", ")", "\n", "\n", "# ensure that the model is set to \"LC2013\"", "\n", "self", ".", "assertEqual", "(", "lc_params", ".", "controller_params", "[", "\"laneChangeModel\"", "]", ",", "\n", "\"LC2013\"", ")", "\n", "\n", "# ensure that the correct parameters are currently present", "\n", "attributes", "=", "list", "(", "lc_params", ".", "controller_params", ".", "keys", "(", ")", ")", "\n", "expected_attributes", "=", "[", "\n", "\"laneChangeModel\"", ",", "\"lcStrategic\"", ",", "\"lcCooperative\"", ",", "\"lcSpeedGain\"", ",", "\n", "\"lcKeepRight\"", "\n", "]", "\n", "self", ".", "assertCountEqual", "(", "attributes", ",", "expected_attributes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.TestSumoLaneChangeParams.test_deprecated": [[227, 262], ["flow.core.params.SumoLaneChangeParams", "test_params.TestSumoLaneChangeParams.assertAlmostEqual", "test_params.TestSumoLaneChangeParams.assertAlmostEqual", "test_params.TestSumoLaneChangeParams.assertAlmostEqual", "test_params.TestSumoLaneChangeParams.assertAlmostEqual", "test_params.TestSumoLaneChangeParams.assertAlmostEqual", "test_params.TestSumoLaneChangeParams.assertAlmostEqual", "test_params.TestSumoLaneChangeParams.assertAlmostEqual", "test_params.TestSumoLaneChangeParams.assertAlmostEqual", "float", "float", "float", "float", "float", "float", "float", "float"], "methods", ["None"], ["", "def", "test_deprecated", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensures that deprecated forms of the attribute still return proper\n        values to the correct attributes\"\"\"", "\n", "# start a SumoLaneChangeParams with some attributes", "\n", "lc_params", "=", "SumoLaneChangeParams", "(", "\n", "model", "=", "\"SL2015\"", ",", "\n", "lcStrategic", "=", "1.0", ",", "\n", "lcCooperative", "=", "1.0", ",", "\n", "lcSpeedGain", "=", "1.0", ",", "\n", "lcKeepRight", "=", "1.0", ",", "\n", "lcLookaheadLeft", "=", "2.0", ",", "\n", "lcSpeedGainRight", "=", "1.0", ",", "\n", "lcSublane", "=", "1.0", ",", "\n", "lcPushy", "=", "0", ",", "\n", "lcPushyGap", "=", "0.6", ",", "\n", "lcAssertive", "=", "1", ")", "\n", "\n", "# ensure that the attributes match their correct element in the", "\n", "# \"controller_params\" dict", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "float", "(", "lc_params", ".", "controller_params", "[", "\"lcStrategic\"", "]", ")", ",", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "float", "(", "lc_params", ".", "controller_params", "[", "\"lcCooperative\"", "]", ")", ",", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "float", "(", "lc_params", ".", "controller_params", "[", "\"lcSpeedGain\"", "]", ")", ",", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "float", "(", "lc_params", ".", "controller_params", "[", "\"lcKeepRight\"", "]", ")", ",", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "float", "(", "lc_params", ".", "controller_params", "[", "\"lcSublane\"", "]", ")", ",", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "float", "(", "lc_params", ".", "controller_params", "[", "\"lcPushy\"", "]", ")", ",", "0", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "float", "(", "lc_params", ".", "controller_params", "[", "\"lcPushyGap\"", "]", ")", ",", "0.6", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "float", "(", "lc_params", ".", "controller_params", "[", "\"lcAssertive\"", "]", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestUpdateGetState.tearDown": [[21, 27], ["test_traffic_lights.TestUpdateGetState.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestUpdateGetState.test_single_lane": [[28, 52], ["flow.core.params.TrafficLightParams", "flow.core.params.TrafficLightParams.add", "flow.core.params.NetParams", "tests.setup_scripts.ring_road_exp_setup", "test_traffic_lights.TestUpdateGetState.env.reset", "test_traffic_lights.TestUpdateGetState.env.step", "test_traffic_lights.TestUpdateGetState.env.k.traffic_light.get_state", "test_traffic_lights.TestUpdateGetState.assertEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.get_state"], ["", "def", "test_single_lane", "(", "self", ")", ":", "\n", "# add a traffic light to the top node", "\n", "        ", "traffic_lights", "=", "TrafficLightParams", "(", ")", "\n", "traffic_lights", ".", "add", "(", "\"top\"", ")", "\n", "\n", "# create a ring road with one lane", "\n", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "230", ",", "\n", "\"lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "\n", "net_params", "=", "net_params", ",", "traffic_lights", "=", "traffic_lights", ")", "\n", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "env", ".", "step", "(", "[", "]", ")", "\n", "\n", "state", "=", "self", ".", "env", ".", "k", ".", "traffic_light", ".", "get_state", "(", "\"top\"", ")", "\n", "\n", "self", ".", "assertEqual", "(", "state", ",", "\"G\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestUpdateGetState.test_multi_lane": [[53, 77], ["flow.core.params.TrafficLightParams", "flow.core.params.TrafficLightParams.add", "flow.core.params.NetParams", "tests.setup_scripts.ring_road_exp_setup", "test_traffic_lights.TestUpdateGetState.env.reset", "test_traffic_lights.TestUpdateGetState.env.step", "test_traffic_lights.TestUpdateGetState.env.k.traffic_light.get_state", "test_traffic_lights.TestUpdateGetState.assertEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.get_state"], ["", "def", "test_multi_lane", "(", "self", ")", ":", "\n", "# add a traffic light to the top node", "\n", "        ", "traffic_lights", "=", "TrafficLightParams", "(", ")", "\n", "traffic_lights", ".", "add", "(", "\"top\"", ")", "\n", "\n", "# create a ring road with two lanes", "\n", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "230", ",", "\n", "\"lanes\"", ":", "2", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "\n", "net_params", "=", "net_params", ",", "traffic_lights", "=", "traffic_lights", ")", "\n", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "env", ".", "step", "(", "[", "]", ")", "\n", "\n", "state", "=", "self", ".", "env", ".", "k", ".", "traffic_light", ".", "get_state", "(", "\"top\"", ")", "\n", "\n", "self", ".", "assertEqual", "(", "state", ",", "\"GG\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestSetState.setUp": [[84, 101], ["flow.core.params.TrafficLightParams", "flow.core.params.TrafficLightParams.add", "flow.core.params.NetParams", "tests.setup_scripts.ring_road_exp_setup"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# add a traffic light to the top node", "\n", "        ", "traffic_lights", "=", "TrafficLightParams", "(", ")", "\n", "traffic_lights", ".", "add", "(", "\"top\"", ")", "\n", "\n", "# create a ring road with two lanes", "\n", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "230", ",", "\n", "\"lanes\"", ":", "2", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "\n", "net_params", "=", "net_params", ",", "traffic_lights", "=", "traffic_lights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestSetState.tearDown": [[102, 108], ["test_traffic_lights.TestSetState.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestSetState.test_all_lanes": [[109, 123], ["test_traffic_lights.TestSetState.env.reset", "test_traffic_lights.TestSetState.env.k.traffic_light.set_state", "test_traffic_lights.TestSetState.env.step", "test_traffic_lights.TestSetState.env.k.traffic_light.get_state", "test_traffic_lights.TestSetState.assertEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.set_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.get_state"], ["", "def", "test_all_lanes", "(", "self", ")", ":", "\n", "# reset the environment", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "# set all states to something", "\n", "self", ".", "env", ".", "k", ".", "traffic_light", ".", "set_state", "(", "node_id", "=", "\"top\"", ",", "state", "=", "\"rY\"", ")", "\n", "\n", "# run a new step", "\n", "self", ".", "env", ".", "step", "(", "[", "]", ")", "\n", "\n", "# check the new values", "\n", "state", "=", "self", ".", "env", ".", "k", ".", "traffic_light", ".", "get_state", "(", "\"top\"", ")", "\n", "\n", "self", ".", "assertEqual", "(", "state", ",", "\"rY\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestSetState.test_single_lane": [[124, 139], ["test_traffic_lights.TestSetState.env.reset", "test_traffic_lights.TestSetState.env.k.traffic_light.set_state", "test_traffic_lights.TestSetState.env.step", "test_traffic_lights.TestSetState.env.k.traffic_light.get_state", "test_traffic_lights.TestSetState.assertEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.traffic_light.aimsun.AimsunKernelTrafficLight.set_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.get_state"], ["", "def", "test_single_lane", "(", "self", ")", ":", "\n", "# reset the environment", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "# set all state of lane 1 to something", "\n", "self", ".", "env", ".", "k", ".", "traffic_light", ".", "set_state", "(", "\n", "node_id", "=", "\"top\"", ",", "state", "=", "\"R\"", ",", "link_index", "=", "1", ")", "\n", "\n", "# run a new step", "\n", "self", ".", "env", ".", "step", "(", "[", "]", ")", "\n", "\n", "# check the new values", "\n", "state", "=", "self", ".", "env", ".", "k", ".", "traffic_light", ".", "get_state", "(", "\"top\"", ")", "\n", "\n", "self", ".", "assertEqual", "(", "state", "[", "1", "]", ",", "\"R\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestPOEnv.setUp": [[146, 158], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.traffic_light_grid_mxn_exp_setup", "flow.core.params.SumoCarFollowingParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.traffic_light_grid_mxn_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"idm\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "routing_controller", "=", "(", "GridRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "min_gap", "=", "2.5", ",", "tau", "=", "1.1", ")", ",", "\n", "num_vehicles", "=", "16", ")", "\n", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "traffic_light_grid_mxn_exp_setup", "(", "\n", "row_num", "=", "1", ",", "col_num", "=", "3", ",", "vehicles", "=", "vehicles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestPOEnv.tearDown": [[159, 165], ["test_traffic_lights.TestPOEnv.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestPOEnv.compare_ordering": [[166, 176], ["x[].startswith", "x[].startswith", "x[].startswith", "x[].startswith"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compare_ordering", "(", "ordering", ")", ":", "\n", "# take in a list like [[bot0_0, right0_0, top0_1, left1_0], [bot....]", "\n", "# print(ordering)", "\n", "        ", "for", "x", "in", "ordering", ":", "\n", "# print(x)", "\n", "            ", "if", "not", "(", "x", "[", "0", "]", ".", "startswith", "(", "\"bot\"", ")", "and", "x", "[", "1", "]", ".", "startswith", "(", "\"right\"", ")", "and", "\n", "x", "[", "2", "]", ".", "startswith", "(", "\"top\"", ")", "and", "x", "[", "3", "]", ".", "startswith", "(", "\"left\"", ")", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestPOEnv.test_node_mapping": [[177, 187], ["test_traffic_lights.TestPOEnv.env.reset", "test_traffic_lights.TestPOEnv.assertEqual", "test_traffic_lights.TestPOEnv.assertTrue", "sorted", "test_traffic_lights.TestPOEnv.compare_ordering"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestPOEnv.compare_ordering"], ["", "def", "test_node_mapping", "(", "self", ")", ":", "\n", "# reset the environment", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "node_mapping", "=", "self", ".", "env", ".", "network", ".", "node_mapping", "\n", "nodes", "=", "[", "elem", "[", "0", "]", "for", "elem", "in", "node_mapping", "]", "\n", "ordering", "=", "[", "elem", "[", "1", "]", "for", "elem", "in", "node_mapping", "]", "\n", "\n", "self", ".", "assertEqual", "(", "nodes", ",", "sorted", "(", "nodes", ")", ")", "\n", "self", ".", "assertTrue", "(", "self", ".", "compare_ordering", "(", "ordering", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestPOEnv.test_k_closest": [[188, 214], ["test_traffic_lights.TestPOEnv.env.step", "test_traffic_lights.TestPOEnv.env.get_closest_to_intersection", "test_traffic_lights.TestPOEnv.assertEqual", "test_traffic_lights.TestPOEnv.assertEqual", "test_traffic_lights.TestPOEnv.assertEqual", "test_traffic_lights.TestPOEnv.assertEqual", "test_traffic_lights.TestPOEnv.env.get_closest_to_intersection", "test_traffic_lights.TestPOEnv.env.get_closest_to_intersection", "len", "test_traffic_lights.TestPOEnv.env.get_closest_to_intersection", "test_traffic_lights.TestPOEnv.assertTrue", "test_traffic_lights.TestPOEnv.assertRaises", "test_traffic_lights.TestPOEnv.env.get_closest_to_intersection", "test_traffic_lights.TestPOEnv.env.get_closest_to_intersection", "test_traffic_lights.TestPOEnv.env.k.vehicle.get_edge"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.get_closest_to_intersection", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.get_closest_to_intersection", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.get_closest_to_intersection", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.get_closest_to_intersection", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.get_closest_to_intersection", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.get_closest_to_intersection", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge"], ["", "def", "test_k_closest", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "step", "(", "None", ")", "\n", "node_mapping", "=", "self", ".", "env", ".", "network", ".", "node_mapping", "\n", "\n", "# get the node mapping for node center0", "\n", "c0_edges", "=", "node_mapping", "[", "0", "]", "[", "1", "]", "\n", "k_closest", "=", "self", ".", "env", ".", "get_closest_to_intersection", "(", "c0_edges", ",", "3", ")", "\n", "\n", "# check bot, right, top, left in that order", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "env", ".", "get_closest_to_intersection", "(", "c0_edges", "[", "0", "]", ",", "3", ")", ",", "\n", "k_closest", "[", "0", ":", "2", "]", ")", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "env", ".", "get_closest_to_intersection", "(", "c0_edges", "[", "1", "]", ",", "3", ")", ",", "\n", "k_closest", "[", "2", ":", "4", "]", ")", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "self", ".", "env", ".", "get_closest_to_intersection", "(", "c0_edges", "[", "2", "]", ",", "3", ")", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "env", ".", "get_closest_to_intersection", "(", "c0_edges", "[", "3", "]", ",", "3", ")", ",", "\n", "k_closest", "[", "4", ":", "6", "]", ")", "\n", "\n", "for", "veh_id", "in", "k_closest", ":", "\n", "            ", "self", ".", "assertTrue", "(", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "veh_id", ")", "in", "c0_edges", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "env", ".", "get_closest_to_intersection", "(", "c0_edges", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestItRuns.setUp": [[221, 236], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.traffic_light_grid_mxn_exp_setup", "flow.core.experiment.Experiment", "flow.core.params.SumoCarFollowingParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.traffic_light_grid_mxn_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"idm\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "routing_controller", "=", "(", "GridRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "min_gap", "=", "2.5", ",", "tau", "=", "1.1", ")", ",", "\n", "num_vehicles", "=", "16", ")", "\n", "\n", "_", ",", "_", ",", "flow_params", "=", "traffic_light_grid_mxn_exp_setup", "(", "\n", "row_num", "=", "1", ",", "col_num", "=", "3", ",", "vehicles", "=", "vehicles", ")", "\n", "\n", "flow_params", "[", "'env'", "]", ".", "horizon", "=", "50", "\n", "self", ".", "exp", "=", "Experiment", "(", "flow_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestItRuns.tearDown": [[237, 240], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# free data used by the class", "\n", "        ", "self", ".", "exp", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestItRuns.test_it_runs": [[241, 243], ["test_traffic_lights.TestItRuns.exp.run"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run"], ["", "def", "test_it_runs", "(", "self", ")", ":", "\n", "        ", "self", ".", "exp", ".", "run", "(", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestIndividualLights.setUp": [[251, 294], ["flow.core.params.TrafficLightParams", "flow.core.params.TrafficLightParams.add", "flow.core.params.TrafficLightParams.add", "flow.core.params.TrafficLightParams.add", "flow.core.params.TrafficLightParams.add", "tests.setup_scripts.traffic_light_grid_mxn_exp_setup", "flow.core.experiment.Experiment"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.traffic_light_grid_mxn_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "tl_logic", "=", "TrafficLightParams", "(", "baseline", "=", "False", ")", "\n", "phases", "=", "[", "{", "\n", "\"duration\"", ":", "\"31\"", ",", "\n", "\"minDur\"", ":", "\"8\"", ",", "\n", "\"maxDur\"", ":", "\"45\"", ",", "\n", "\"state\"", ":", "\"GrGr\"", "\n", "}", ",", "{", "\n", "\"duration\"", ":", "\"6\"", ",", "\n", "\"minDur\"", ":", "\"3\"", ",", "\n", "\"maxDur\"", ":", "\"6\"", ",", "\n", "\"state\"", ":", "\"yryr\"", "\n", "}", ",", "{", "\n", "\"duration\"", ":", "\"31\"", ",", "\n", "\"minDur\"", ":", "\"8\"", ",", "\n", "\"maxDur\"", ":", "\"45\"", ",", "\n", "\"state\"", ":", "\"rGrG\"", "\n", "}", ",", "{", "\n", "\"duration\"", ":", "\"6\"", ",", "\n", "\"minDur\"", ":", "\"3\"", ",", "\n", "\"maxDur\"", ":", "\"6\"", ",", "\n", "\"state\"", ":", "\"ryry\"", "\n", "}", "]", "\n", "tl_logic", ".", "add", "(", "\"center0\"", ",", "phases", "=", "phases", ",", "programID", "=", "1", ")", "\n", "tl_logic", ".", "add", "(", "\"center1\"", ",", "phases", "=", "phases", ",", "programID", "=", "1", ",", "offset", "=", "1", ")", "\n", "tl_logic", ".", "add", "(", "\n", "\"center2\"", ",", "tls_type", "=", "\"actuated\"", ",", "phases", "=", "phases", ",", "programID", "=", "1", ")", "\n", "tl_logic", ".", "add", "(", "\n", "\"center3\"", ",", "\n", "tls_type", "=", "\"actuated\"", ",", "\n", "phases", "=", "phases", ",", "\n", "programID", "=", "1", ",", "\n", "maxGap", "=", "3.0", ",", "\n", "detectorGap", "=", "0.8", ",", "\n", "showDetectors", "=", "True", ",", "\n", "file", "=", "\"testindividuallights.xml\"", ",", "\n", "freq", "=", "100", ")", "\n", "\n", "_", ",", "_", ",", "flow_params", "=", "traffic_light_grid_mxn_exp_setup", "(", "\n", "row_num", "=", "1", ",", "col_num", "=", "4", ",", "tl_logic", "=", "tl_logic", ")", "\n", "\n", "flow_params", "[", "'env'", "]", ".", "horizon", "=", "50", "\n", "self", ".", "exp", "=", "Experiment", "(", "flow_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestIndividualLights.tearDown": [[295, 298], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# free data used by the class", "\n", "        ", "self", ".", "exp", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestIndividualLights.test_it_runs": [[299, 301], ["test_traffic_lights.TestIndividualLights.exp.run"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run"], ["", "def", "test_it_runs", "(", "self", ")", ":", "\n", "        ", "self", ".", "exp", ".", "run", "(", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestCustomization.setUp": [[304, 337], ["flow.core.params.TrafficLightParams", "flow.core.params.TrafficLightParams.add", "flow.core.params.NetParams", "tests.setup_scripts.ring_road_exp_setup", "repr", "repr", "repr"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "# add a traffic light to the top node", "\n", "        ", "traffic_lights", "=", "TrafficLightParams", "(", ")", "\n", "\n", "# Phase durations in seconds", "\n", "self", ".", "green", "=", "4", "\n", "self", ".", "yellow", "=", "1", "\n", "self", ".", "red", "=", "4", "\n", "phases", "=", "[", "{", "\n", "\"duration\"", ":", "repr", "(", "self", ".", "green", ")", ",", "\n", "\"state\"", ":", "\"G\"", "\n", "}", ",", "{", "\n", "\"duration\"", ":", "repr", "(", "self", ".", "yellow", ")", ",", "\n", "\"state\"", ":", "\"y\"", "\n", "}", ",", "{", "\n", "\"duration\"", ":", "repr", "(", "self", ".", "red", ")", ",", "\n", "\"state\"", ":", "\"r\"", "\n", "}", "]", "\n", "\n", "traffic_lights", ".", "add", "(", "\"top\"", ",", "phases", "=", "phases", ")", "\n", "\n", "# create a ring road with two lanes", "\n", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "230", ",", "\n", "\"lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "# create the environment and network classes for a ring road", "\n", "self", ".", "env", ",", "_", ",", "_", "=", "ring_road_exp_setup", "(", "\n", "net_params", "=", "net_params", ",", "traffic_lights", "=", "traffic_lights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestCustomization.tearDown": [[338, 344], ["test_traffic_lights.TestCustomization.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free data used by the class", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_lights.TestCustomization.test_static_phases": [[345, 376], ["test_traffic_lights.TestCustomization.env.reset", "int", "range", "range", "range", "range", "test_traffic_lights.TestCustomization.assertEqual", "test_traffic_lights.TestCustomization.env.step", "test_traffic_lights.TestCustomization.assertEqual", "test_traffic_lights.TestCustomization.env.step", "test_traffic_lights.TestCustomization.assertEqual", "test_traffic_lights.TestCustomization.env.step", "range", "range", "range", "test_traffic_lights.TestCustomization.env.k.traffic_light.get_state", "test_traffic_lights.TestCustomization.env.k.traffic_light.get_state", "test_traffic_lights.TestCustomization.env.k.traffic_light.get_state", "test_traffic_lights.TestCustomization.assertEqual", "test_traffic_lights.TestCustomization.env.step", "test_traffic_lights.TestCustomization.assertEqual", "test_traffic_lights.TestCustomization.env.step", "test_traffic_lights.TestCustomization.assertEqual", "test_traffic_lights.TestCustomization.env.step", "test_traffic_lights.TestCustomization.env.k.traffic_light.get_state", "test_traffic_lights.TestCustomization.env.k.traffic_light.get_state", "test_traffic_lights.TestCustomization.env.k.traffic_light.get_state"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.get_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.get_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.get_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.get_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.get_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_params.RLActionsEnv.get_state"], ["", "def", "test_static_phases", "(", "self", ")", ":", "\n", "# Reset the environment", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "# Calculate multiplier, because phases are in seconds", "\n", "sim_multiplier", "=", "int", "(", "1", "/", "self", ".", "env", ".", "sim_params", ".", "sim_step", ")", "\n", "\n", "# Check that the phases occur for the correct amount of time", "\n", "for", "i", "in", "range", "(", "self", ".", "green", "*", "sim_multiplier", "-", "2", ")", ":", "\n", "# This is because env.reset() takes 1 step", "\n", "            ", "self", ".", "assertEqual", "(", "self", ".", "env", ".", "k", ".", "traffic_light", ".", "get_state", "(", "\"top\"", ")", ",", "\"G\"", ")", "\n", "self", ".", "env", ".", "step", "(", "[", "]", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "yellow", "*", "sim_multiplier", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "self", ".", "env", ".", "k", ".", "traffic_light", ".", "get_state", "(", "\"top\"", ")", ",", "\"y\"", ")", "\n", "self", ".", "env", ".", "step", "(", "[", "]", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "red", "*", "sim_multiplier", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "self", ".", "env", ".", "k", ".", "traffic_light", ".", "get_state", "(", "\"top\"", ")", ",", "\"r\"", ")", "\n", "self", ".", "env", ".", "step", "(", "[", "]", ")", "\n", "", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "green", "*", "sim_multiplier", ")", ":", "\n", "                ", "self", ".", "assertEqual", "(", "\n", "self", ".", "env", ".", "k", ".", "traffic_light", ".", "get_state", "(", "\"top\"", ")", ",", "\"G\"", ")", "\n", "self", ".", "env", ".", "step", "(", "[", "]", ")", "\n", "", "for", "_", "in", "range", "(", "self", ".", "yellow", "*", "sim_multiplier", ")", ":", "\n", "                ", "self", ".", "assertEqual", "(", "\n", "self", ".", "env", ".", "k", ".", "traffic_light", ".", "get_state", "(", "\"top\"", ")", ",", "\"y\"", ")", "\n", "self", ".", "env", ".", "step", "(", "[", "]", ")", "\n", "", "for", "_", "in", "range", "(", "self", ".", "red", "*", "sim_multiplier", ")", ":", "\n", "                ", "self", ".", "assertEqual", "(", "\n", "self", ".", "env", ".", "k", ".", "traffic_light", ".", "get_state", "(", "\"top\"", ")", ",", "\"r\"", ")", "\n", "self", ".", "env", ".", "step", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_experiment_base_class.TestNumSteps.setUp": [[28, 36], ["tests.setup_scripts.ring_road_exp_setup", "flow.core.experiment.Experiment"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup"], ["def", "setUp", "(", "self", ")", ":", "\n", "# create the environment and network classes for a ring road", "\n", "        ", "env", ",", "_", ",", "flow_params", "=", "ring_road_exp_setup", "(", ")", "\n", "flow_params", "[", "'sim'", "]", ".", "render", "=", "False", "\n", "flow_params", "[", "'env'", "]", ".", "horizon", "=", "10", "\n", "# instantiate an experiment class", "\n", "self", ".", "exp", "=", "Experiment", "(", "flow_params", ")", "\n", "self", ".", "exp", ".", "env", "=", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_experiment_base_class.TestNumSteps.tearDown": [[37, 40], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# free up used memory", "\n", "        ", "self", ".", "exp", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_experiment_base_class.TestNumSteps.test_steps": [[41, 45], ["test_experiment_base_class.TestNumSteps.exp.run", "test_experiment_base_class.TestNumSteps.assertEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run"], ["", "def", "test_steps", "(", "self", ")", ":", "\n", "        ", "self", ".", "exp", ".", "run", "(", "num_runs", "=", "1", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "exp", ".", "env", ".", "time_counter", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_experiment_base_class.TestNumRuns.test_num_runs": [[53, 79], ["tests.setup_scripts.ring_road_exp_setup", "flow.core.experiment.Experiment", "flow.core.experiment.Experiment.run", "tests.setup_scripts.ring_road_exp_setup", "flow.core.experiment.Experiment", "flow.core.experiment.Experiment.run", "numpy.testing.assert_array_almost_equal", "flow.core.experiment.Experiment.env.k.vehicle.get_speed", "flow.core.experiment.Experiment.env.k.vehicle.get_speed", "flow.core.experiment.Experiment.env.k.vehicle.get_ids", "flow.core.experiment.Experiment.env.k.vehicle.get_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids"], ["def", "test_num_runs", "(", "self", ")", ":", "\n", "# run the experiment for 1 run and collect the last position of all", "\n", "# vehicles", "\n", "        ", "env", ",", "_", ",", "flow_params", "=", "ring_road_exp_setup", "(", ")", "\n", "flow_params", "[", "'sim'", "]", ".", "render", "=", "False", "\n", "flow_params", "[", "'env'", "]", ".", "horizon", "=", "10", "\n", "exp", "=", "Experiment", "(", "flow_params", ")", "\n", "exp", ".", "env", "=", "env", "\n", "exp", ".", "run", "(", "num_runs", "=", "1", ")", "\n", "\n", "vel1", "=", "[", "exp", ".", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "exp", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ")", "]", "\n", "\n", "# run the experiment for 2 runs and collect the last position of all", "\n", "# vehicles", "\n", "env", ",", "_", ",", "flow_params", "=", "ring_road_exp_setup", "(", ")", "\n", "flow_params", "[", "'sim'", "]", ".", "render", "=", "False", "\n", "flow_params", "[", "'env'", "]", ".", "horizon", "=", "10", "\n", "\n", "exp", "=", "Experiment", "(", "flow_params", ")", "\n", "exp", ".", "env", "=", "env", "\n", "exp", ".", "run", "(", "num_runs", "=", "2", ")", "\n", "\n", "vel2", "=", "[", "exp", ".", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "exp", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ")", "]", "\n", "\n", "# check that the final position is the same in both instances", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "vel1", ",", "vel2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_experiment_base_class.TestRLActions.test_rl_actions": [[87, 113], ["flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "tests.setup_scripts.ring_road_exp_setup", "flow.core.experiment.Experiment", "flow.core.experiment.Experiment.run", "test_experiment_base_class.TestRLActions.assertAlmostEqual", "flow.core.experiment.Experiment.env.k.vehicle.get_speed", "flow.core.params.SumoCarFollowingParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.ring_road_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_speed"], ["def", "test_rl_actions", "(", "self", ")", ":", "\n", "        ", "def", "rl_actions", "(", "*", "_", ")", ":", "\n", "            ", "return", "[", "1", "]", "# actions are always an acceleration of 1 for one veh", "\n", "\n", "# create an environment using AccelEnv with 1 RL vehicle", "\n", "", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"rl\"", ",", "\n", "acceleration_controller", "=", "(", "RLController", ",", "{", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "\"aggressive\"", ",", "\n", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "\n", "env", ",", "_", ",", "flow_params", "=", "ring_road_exp_setup", "(", "vehicles", "=", "vehicles", ")", "\n", "flow_params", "[", "'sim'", "]", ".", "render", "=", "False", "\n", "flow_params", "[", "'env'", "]", ".", "horizon", "=", "10", "\n", "exp", "=", "Experiment", "(", "flow_params", ")", "\n", "exp", ".", "env", "=", "env", "\n", "exp", ".", "run", "(", "1", ",", "rl_actions", "=", "rl_actions", ")", "\n", "\n", "# check that the acceleration of the RL vehicle was that specified by", "\n", "# the rl_actions method", "\n", "self", ".", "assertAlmostEqual", "(", "exp", ".", "env", ".", "k", ".", "vehicle", ".", "get_speed", "(", "\"rl_0\"", ")", ",", "1", ",", "\n", "places", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_experiment_base_class.TestConvertToCSV.test_convert_to_csv": [[121, 211], ["os.path.dirname", "flow.core.params.SumoParams", "flow.core.params.VehicleParams", "flow.core.params.VehicleParams.add", "flow.core.params.EnvParams", "flow.core.params.NetParams", "dict", "flow.core.experiment.Experiment", "flow.core.experiment.Experiment.run", "time.sleep", "test_experiment_base_class.TestConvertToCSV.assertFalse", "test_experiment_base_class.TestConvertToCSV.assertTrue", "test_experiment_base_class.TestConvertToCSV.assertListEqual", "time.sleep", "os.remove", "os.path.realpath", "os.path.isfile", "os.path.isfile", "open", "csv.reader", "next", "os.path.expanduser", "flow.core.params.SumoCarFollowingParams", "flow.core.params.InitialConfig", "flow.core.params.TrafficLightParams"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.remove"], ["def", "test_convert_to_csv", "(", "self", ")", ":", "\n", "        ", "dir_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "sim_params", "=", "SumoParams", "(", "emission_path", "=", "\"{}/\"", ".", "format", "(", "dir_path", ")", ")", "\n", "\n", "vehicles", "=", "VehicleParams", "(", ")", "\n", "vehicles", ".", "add", "(", "\n", "veh_id", "=", "\"idm\"", ",", "\n", "acceleration_controller", "=", "(", "IDMController", ",", "{", "}", ")", ",", "\n", "routing_controller", "=", "(", "ContinuousRouter", ",", "{", "}", ")", ",", "\n", "car_following_params", "=", "SumoCarFollowingParams", "(", "\n", "speed_mode", "=", "\"aggressive\"", ",", "\n", ")", ",", "\n", "num_vehicles", "=", "1", ")", "\n", "\n", "additional_env_params", "=", "{", "\n", "\"target_velocity\"", ":", "8", ",", "\n", "\"max_accel\"", ":", "1", ",", "\n", "\"max_decel\"", ":", "1", ",", "\n", "\"sort_vehicles\"", ":", "False", ",", "\n", "}", "\n", "env_params", "=", "EnvParams", "(", "\n", "horizon", "=", "10", ",", "\n", "additional_params", "=", "additional_env_params", ")", "\n", "\n", "additional_net_params", "=", "{", "\n", "\"length\"", ":", "230", ",", "\n", "\"lanes\"", ":", "1", ",", "\n", "\"speed_limit\"", ":", "30", ",", "\n", "\"resolution\"", ":", "40", "\n", "}", "\n", "net_params", "=", "NetParams", "(", "additional_params", "=", "additional_net_params", ")", "\n", "\n", "flow_params", "=", "dict", "(", "\n", "exp_tag", "=", "\"RingRoadTest\"", ",", "\n", "env_name", "=", "AccelEnv", ",", "\n", "network", "=", "RingNetwork", ",", "\n", "simulator", "=", "'traci'", ",", "\n", "sim", "=", "sim_params", ",", "\n", "env", "=", "env_params", ",", "\n", "net", "=", "net_params", ",", "\n", "veh", "=", "vehicles", ",", "\n", "initial", "=", "InitialConfig", "(", "lanes_distribution", "=", "1", ")", ",", "\n", "tls", "=", "TrafficLightParams", "(", ")", ",", "\n", ")", "\n", "\n", "exp", "=", "Experiment", "(", "flow_params", ")", "\n", "exp", ".", "run", "(", "num_runs", "=", "1", ",", "convert_to_csv", "=", "True", ")", "\n", "\n", "time", ".", "sleep", "(", "1.0", ")", "\n", "\n", "# check that both the csv file exists and the xml file doesn't.", "\n", "self", ".", "assertFalse", "(", "os", ".", "path", ".", "isfile", "(", "dir_path", "+", "\"/{}-0_emission.xml\"", ".", "format", "(", "\n", "exp", ".", "env", ".", "network", ".", "name", ")", ")", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isfile", "(", "dir_path", "+", "\"/{}-0_emission.csv\"", ".", "format", "(", "\n", "exp", ".", "env", ".", "network", ".", "name", ")", ")", ")", "\n", "\n", "# check that the keys within the emission file matches its expected", "\n", "# values", "\n", "with", "open", "(", "dir_path", "+", "\"/{}-0_emission.csv\"", ".", "format", "(", "\n", "exp", ".", "env", ".", "network", ".", "name", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "header", "=", "next", "(", "reader", ")", "\n", "\n", "", "self", ".", "assertListEqual", "(", "header", ",", "[", "\n", "\"time\"", ",", "\n", "\"id\"", ",", "\n", "\"x\"", ",", "\n", "\"y\"", ",", "\n", "\"speed\"", ",", "\n", "\"headway\"", ",", "\n", "\"leader_id\"", ",", "\n", "\"target_accel_with_noise_with_failsafe\"", ",", "\n", "\"target_accel_no_noise_no_failsafe\"", ",", "\n", "\"target_accel_with_noise_no_failsafe\"", ",", "\n", "\"target_accel_no_noise_with_failsafe\"", ",", "\n", "\"realized_accel\"", ",", "\n", "\"road_grade\"", ",", "\n", "\"edge_id\"", ",", "\n", "\"lane_number\"", ",", "\n", "\"distance\"", ",", "\n", "\"relative_position\"", ",", "\n", "\"follower_id\"", ",", "\n", "\"leader_rel_speed\"", ",", "\n", "]", ")", "\n", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "\n", "# delete the files", "\n", "os", ".", "remove", "(", "os", ".", "path", ".", "expanduser", "(", "dir_path", "+", "\"/{}-0_emission.csv\"", ".", "format", "(", "\n", "exp", ".", "env", ".", "network", ".", "name", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_api.TestConstants.test_none_equal": [[16, 30], ["__import__", "test_aimsun_api.TestConstants.assertEqual", "variables.append", "len", "dir", "getattr", "item.startswith", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["def", "test_none_equal", "(", "self", ")", ":", "\n", "        ", "\"\"\"Verify that no two constants share the same value.\"\"\"", "\n", "# get the names of all variables in the constants file", "\n", "var", "=", "[", "item", "for", "item", "in", "dir", "(", "flow", ".", "utils", ".", "aimsun", ".", "constants", ")", "\n", "if", "not", "item", ".", "startswith", "(", "\"__\"", ")", "]", "\n", "\n", "# get the variable values from the names", "\n", "variables", "=", "[", "]", "\n", "module", "=", "__import__", "(", "\"flow.utils.aimsun.constants\"", ",", "fromlist", "=", "var", ")", "\n", "for", "v", "in", "var", ":", "\n", "            ", "variables", ".", "append", "(", "getattr", "(", "module", ",", "v", ")", ")", "\n", "\n", "# makes sure than no two numbers are the same", "\n", "", "self", ".", "assertEqual", "(", "len", "(", "var", ")", ",", "np", ".", "unique", "(", "variables", ")", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_api.TestStruct.test_inf_veh": [[35, 65], ["flow.utils.aimsun.struct.InfVeh", "flow.utils.aimsun.struct.InfVeh", "test_aimsun_api.TestStruct.assertIn", "flow.utils.aimsun.struct.InfVeh.__dict__.keys", "flow.utils.aimsun.struct.InfVeh.__dict__.keys"], "methods", ["None"], ["def", "test_inf_veh", "(", "self", ")", ":", "\n", "        ", "\"\"\"Verify that the InfVeh object contains the expected attributes.\"\"\"", "\n", "expected_variables", "=", "[", "\n", "'CurrentPos'", ",", "\n", "'distance2End'", ",", "\n", "'xCurrentPos'", ",", "\n", "'yCurrentPos'", ",", "\n", "'zCurrentPos'", ",", "\n", "'xCurrentPosBack'", ",", "\n", "'yCurrentPosBack'", ",", "\n", "'zCurrentPosBack'", ",", "\n", "'CurrentSpeed'", ",", "\n", "'TotalDistance'", ",", "\n", "'SectionEntranceT'", ",", "\n", "'CurrentStopTime'", ",", "\n", "'stopped'", ",", "\n", "'idSection'", ",", "\n", "'segment'", ",", "\n", "'numberLane'", ",", "\n", "'idJunction'", ",", "\n", "'idSectionFrom'", ",", "\n", "'idLaneFrom'", ",", "\n", "'idSectionTo'", ",", "\n", "'idLaneTo'", "\n", "]", "\n", "\n", "obj", "=", "InfVeh", "(", ")", "\n", "\n", "for", "val", "in", "expected_variables", ":", "\n", "            ", "self", ".", "assertIn", "(", "val", ",", "obj", ".", "__dict__", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_api.TestDummyAPI.setUp": [[77, 85], ["subprocess.Popen", "flow.utils.aimsun.api.FlowAimsunAPI", "flow.utils.aimsun.api.FlowAimsunAPI", "os.path.join", "os.path.join"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "# start the server's process", "\n", "        ", "self", ".", "proc", "=", "subprocess", ".", "Popen", "(", "[", "\n", "os", ".", "path", ".", "join", "(", "config", ".", "AIMSUN_SITEPACKAGES", ",", "\"bin/python\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "config", ".", "PROJECT_PATH", ",", "'tests/dummy_server.py'", ")", "]", ")", "\n", "\n", "# create the FlowAimsunKernel object", "\n", "self", ".", "kernel_api", "=", "FlowAimsunAPI", "(", "port", "=", "9999", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_api.TestDummyAPI.tearDown": [[86, 89], ["test_aimsun_api.TestDummyAPI.proc.kill"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# kill the process", "\n", "        ", "self", ".", "proc", ".", "kill", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_aimsun_api.TestDummyAPI.test_getter_methods": [[90, 167], ["test_aimsun_api.TestDummyAPI.kernel_api.get_entered_ids", "test_aimsun_api.TestDummyAPI.assertListEqual", "test_aimsun_api.TestDummyAPI.kernel_api.get_entered_ids", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.kernel_api.get_exited_ids", "test_aimsun_api.TestDummyAPI.assertListEqual", "test_aimsun_api.TestDummyAPI.kernel_api.get_exited_ids", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.kernel_api.get_vehicle_static_info", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertFalse", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.kernel_api.get_vehicle_tracking_info", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.assertEqual", "test_aimsun_api.TestDummyAPI.kernel_api.get_traffic_light_ids", "test_aimsun_api.TestDummyAPI.assertListEqual", "test_aimsun_api.TestDummyAPI.kernel_api.get_traffic_light_ids", "test_aimsun_api.TestDummyAPI.assertEqual", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_entered_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_entered_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_exited_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_exited_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_vehicle_static_info", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_vehicle_tracking_info", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_traffic_light_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.aimsun.api.FlowAimsunAPI.get_traffic_light_ids"], ["", "def", "test_getter_methods", "(", "self", ")", ":", "\n", "# test the get entered IDs method when the list is not empty", "\n", "        ", "entered_ids", "=", "self", ".", "kernel_api", ".", "get_entered_ids", "(", ")", "\n", "self", ".", "assertListEqual", "(", "entered_ids", ",", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "\n", "# test the get entered IDs method when the list is empty", "\n", "entered_ids", "=", "self", ".", "kernel_api", ".", "get_entered_ids", "(", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "entered_ids", ")", ",", "0", ")", "\n", "\n", "# test the get exited IDs method when the list is not empty", "\n", "exited_ids", "=", "self", ".", "kernel_api", ".", "get_exited_ids", "(", ")", "\n", "self", ".", "assertListEqual", "(", "exited_ids", ",", "[", "6", ",", "7", ",", "8", ",", "9", ",", "10", "]", ")", "\n", "\n", "# test the get exited IDs method when the list is empty", "\n", "exited_ids", "=", "self", ".", "kernel_api", ".", "get_exited_ids", "(", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "exited_ids", ")", ",", "0", ")", "\n", "\n", "# test the get_vehicle_static_info method", "\n", "static_info", "=", "self", ".", "kernel_api", ".", "get_vehicle_static_info", "(", "veh_id", "=", "1", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "report", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "idVeh", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "type", ",", "3", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "length", ",", "4", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "width", ",", "5", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "maxDesiredSpeed", ",", "6", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "maxAcceleration", ",", "7", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "normalDeceleration", ",", "8", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "maxDeceleration", ",", "9", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "speedAcceptance", ",", "10", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "minDistanceVeh", ",", "11", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "giveWayTime", ",", "12", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "guidanceAcceptance", ",", "13", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "enrouted", ",", "14", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "equipped", ",", "15", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "tracked", ",", "16", ")", "\n", "self", ".", "assertFalse", "(", "static_info", ".", "keepfastLane", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "headwayMin", ",", "18", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "sensitivityFactor", ",", "19", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "reactionTime", ",", "20", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "reactionTimeAtStop", ",", "21", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "reactionTimeAtTrafficLight", ",", "22", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "centroidOrigin", ",", "23", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "centroidDest", ",", "24", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "idsectionExit", ",", "25", ")", "\n", "self", ".", "assertEqual", "(", "static_info", ".", "idLine", ",", "26", ")", "\n", "\n", "tracking_inf", "=", "self", ".", "kernel_api", ".", "get_vehicle_tracking_info", "(", "\n", "veh_id", "=", "1", ",", "info_bitmap", "=", "'1'", "*", "21", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "CurrentPos", ",", "4", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "distance2End", ",", "5", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "xCurrentPos", ",", "6", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "yCurrentPos", ",", "7", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "zCurrentPos", ",", "8", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "xCurrentPosBack", ",", "9", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "yCurrentPosBack", ",", "10", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "zCurrentPosBack", ",", "11", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "CurrentSpeed", ",", "12", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "TotalDistance", ",", "14", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "SectionEntranceT", ",", "17", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "CurrentStopTime", ",", "18", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "stopped", ",", "19", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "idSection", ",", "20", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "segment", ",", "21", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "numberLane", ",", "22", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "idJunction", ",", "23", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "idSectionFrom", ",", "24", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "idLaneFrom", ",", "25", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "idSectionTo", ",", "26", ")", "\n", "self", ".", "assertEqual", "(", "tracking_inf", ".", "idLaneTo", ",", "27", ")", "\n", "\n", "# test the get traffic light IDs method when the list is not empty", "\n", "tl_ids", "=", "self", ".", "kernel_api", ".", "get_traffic_light_ids", "(", ")", "\n", "self", ".", "assertListEqual", "(", "tl_ids", ",", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "\n", "# test the get traffic light IDs method when the list is empty", "\n", "tl_ids", "=", "self", ".", "kernel_api", ".", "get_traffic_light_ids", "(", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "tl_ids", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_light_grid.Test1x1Environment.setUp": [[9, 17], ["tests.setup_scripts.traffic_light_grid_mxn_exp_setup", "test_traffic_light_grid.Test1x1Environment.env.reset", "flow.core.experiment.Experiment"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.traffic_light_grid_mxn_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "# create the environment and network classes for a traffic light grid network", "\n", "\n", "        ", "self", ".", "env", ",", "_", ",", "flow_params", "=", "traffic_light_grid_mxn_exp_setup", "(", ")", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "# instantiate an experiment class", "\n", "self", ".", "exp", "=", "Experiment", "(", "flow_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_light_grid.Test1x1Environment.tearDown": [[18, 25], ["test_traffic_light_grid.Test1x1Environment.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free up used memory", "\n", "self", ".", "env", "=", "None", "\n", "self", ".", "exp", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_light_grid.Test1x1Environment.test_split_edge": [[26, 39], ["range", "len", "test_traffic_light_grid.Test1x1Environment.assertEqual", "test_traffic_light_grid.Test1x1Environment.env._split_edge"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._split_edge"], ["", "def", "test_split_edge", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        In a 1x1 grid, edges are:\n        [left0_0, right0_0, bot0_0, top0_0, bot0_1, top0_1,\n        left1_0, right1_0, :center0] and should be indexed as such\n        \"\"\"", "\n", "edges", "=", "[", "\n", "\"left0_0\"", ",", "\"right0_0\"", ",", "\"bot0_0\"", ",", "\"top0_0\"", ",", "\"bot0_1\"", ",", "\"top0_1\"", ",", "\n", "\"left1_0\"", ",", "\"right1_0\"", ",", "\":center0\"", "\n", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "edges", ")", ")", ":", "\n", "            ", "edge", "=", "edges", "[", "i", "]", "\n", "self", ".", "assertEqual", "(", "self", ".", "env", ".", "_split_edge", "(", "edge", ")", ",", "i", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_light_grid.Test1x1Environment.test_convert_edge": [[40, 48], ["test_traffic_light_grid.Test1x1Environment.assertEqual", "sorted", "test_traffic_light_grid.Test1x1Environment.env._convert_edge", "range", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._convert_edge"], ["", "", "def", "test_convert_edge", "(", "self", ")", ":", "\n", "        ", "edges", "=", "[", "\n", "\"left0_0\"", ",", "\"right0_0\"", ",", "\"bot0_0\"", ",", "\"top0_0\"", ",", "\"bot0_1\"", ",", "\"top0_1\"", ",", "\n", "\"left1_0\"", ",", "\"right1_0\"", ",", "\":center0\"", "\n", "]", "\n", "self", ".", "assertEqual", "(", "\n", "sorted", "(", "self", ".", "env", ".", "_convert_edge", "(", "edges", ")", ")", ",", "\n", "[", "i", "+", "1", "for", "i", "in", "range", "(", "len", "(", "edges", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_light_grid.Test1x1Environment.gen_edges": [[49, 62], ["range", "range", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "gen_edges", "(", "col_num", ",", "row_num", ")", ":", "\n", "        ", "edges", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "col_num", ")", ":", "\n", "            ", "edges", "+=", "[", "\"left\"", "+", "str", "(", "row_num", ")", "+", "'_'", "+", "str", "(", "i", ")", "]", "\n", "edges", "+=", "[", "\"right\"", "+", "'0'", "+", "'_'", "+", "str", "(", "i", ")", "]", "\n", "\n", "# build the left and then the right edges", "\n", "", "for", "i", "in", "range", "(", "row_num", ")", ":", "\n", "            ", "edges", "+=", "[", "\"bot\"", "+", "str", "(", "i", ")", "+", "'_'", "+", "'0'", "]", "\n", "edges", "+=", "[", "\"top\"", "+", "str", "(", "i", ")", "+", "'_'", "+", "str", "(", "col_num", ")", "]", "\n", "\n", "", "return", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_light_grid.Test1x1Environment.test_get_distance_to_intersection": [[63, 93], ["test_traffic_light_grid.Test1x1Environment.env.k.vehicle.get_edge", "list", "test_traffic_light_grid.Test1x1Environment.env.k.vehicle.get_ids_by_edge", "test_traffic_light_grid.Test1x1Environment.env.get_distance_to_intersection", "test_traffic_light_grid.Test1x1Environment.assertListEqual", "test_traffic_light_grid.Test1x1Environment.env.k.vehicle.get_ids", "print", "test_traffic_light_grid.Test1x1Environment.env.step", "filter", "test_traffic_light_grid.Test1x1Environment.assertEqual", "test_traffic_light_grid.Test1x1Environment.gen_edges", "test_traffic_light_grid.Test1x1Environment.assertLessEqual", "test_traffic_light_grid.Test1x1Environment.assertGreaterEqual", "test_traffic_light_grid.Test1x1Environment.env.k.vehicle.get_edge", "test_traffic_light_grid.Test1x1Environment.env.k.vehicle.get_ids", "test_traffic_light_grid.Test1x1Environment.env.get_distance_to_intersection", "test_traffic_light_grid.Test1x1Environment.env.k.vehicle.get_ids"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids_by_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.get_distance_to_intersection", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_light_grid.Test1x1Environment.gen_edges", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_edge", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv.get_distance_to_intersection", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.get_ids"], ["", "def", "test_get_distance_to_intersection", "(", "self", ")", ":", "\n", "# Obtain list of lists of vehicles on entrance", "\n", "# edges, then the distances.", "\n", "        ", "veh_ids", "=", "[", "\n", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids_by_edge", "(", "e", ")", "for", "e", "in", "self", ".", "gen_edges", "(", "1", ",", "1", ")", "\n", "]", "\n", "dists", "=", "[", "self", ".", "env", ".", "get_distance_to_intersection", "(", "v", ")", "for", "v", "in", "veh_ids", "]", "\n", "grid", "=", "self", ".", "env", ".", "net_params", ".", "additional_params", "[", "'grid_array'", "]", "\n", "short_length", "=", "grid", "[", "'short_length'", "]", "\n", "\n", "# The first check asserts all the lists are equal. With the default", "\n", "# initial config (sans noise) it should be. The second check asserts", "\n", "# that all the vehicles are in the confines of [0, short_length] away", "\n", "# from the intersection.", "\n", "for", "d_list", "in", "dists", ":", "\n", "            ", "self", ".", "assertListEqual", "(", "d_list", ",", "dists", "[", "0", "]", ")", "\n", "for", "d", "in", "d_list", ":", "\n", "                ", "self", ".", "assertLessEqual", "(", "d", ",", "short_length", ")", "\n", "self", ".", "assertGreaterEqual", "(", "d", ",", "0", ")", "\n", "\n", "# Asserts that when a vehicles is in a junction,", "\n", "# get_distance_to_intersection returns 0.", "\n", "", "", "veh_edges", "=", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ")", "\n", "while", "not", "[", "'center'", "in", "edge", "for", "edge", "in", "veh_edges", "]", ":", "\n", "            ", "print", "(", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_edge", "(", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ")", ")", "\n", "self", ".", "env", ".", "step", "(", "rl_actions", "=", "[", "]", ")", "\n", "", "junction_veh", "=", "list", "(", "\n", "filter", "(", "lambda", "x", ":", "'center'", "in", "x", ",", "self", ".", "env", ".", "k", ".", "vehicle", ".", "get_ids", "(", ")", ")", ")", "\n", "for", "veh_id", "in", "junction_veh", ":", "\n", "            ", "self", ".", "assertEqual", "(", "0", ",", "self", ".", "env", ".", "get_distance_to_intersection", "(", "veh_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_light_grid.Test2x2Environment.setUp": [[96, 104], ["tests.setup_scripts.traffic_light_grid_mxn_exp_setup", "test_traffic_light_grid.Test2x2Environment.env.reset", "flow.core.experiment.Experiment"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.tests.setup_scripts.traffic_light_grid_mxn_exp_setup", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "# create the environment and network classes for a traffic light grid network", "\n", "\n", "        ", "self", ".", "env", ",", "_", ",", "flow_params", "=", "traffic_light_grid_mxn_exp_setup", "(", "row_num", "=", "2", ",", "col_num", "=", "2", ")", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "# instantiate an experiment class", "\n", "self", ".", "exp", "=", "Experiment", "(", "flow_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_light_grid.Test2x2Environment.tearDown": [[105, 112], ["test_traffic_light_grid.Test2x2Environment.env.terminate"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.base.Env.terminate"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "# terminate the traci instance", "\n", "        ", "self", ".", "env", ".", "terminate", "(", ")", "\n", "\n", "# free up used memory", "\n", "self", ".", "env", "=", "None", "\n", "self", ".", "exp", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.fast_tests.test_traffic_light_grid.Test2x2Environment.test_get_relative_node": [[113, 137], ["test_traffic_light_grid.Test2x2Environment.env._get_relative_node", "test_traffic_light_grid.Test2x2Environment.assertEqual", "test_traffic_light_grid.Test2x2Environment.env._get_relative_node", "test_traffic_light_grid.Test2x2Environment.assertEqual", "test_traffic_light_grid.Test2x2Environment.env._get_relative_node", "test_traffic_light_grid.Test2x2Environment.assertEqual", "test_traffic_light_grid.Test2x2Environment.env._get_relative_node", "test_traffic_light_grid.Test2x2Environment.assertEqual", "test_traffic_light_grid.Test2x2Environment.env._get_relative_node", "test_traffic_light_grid.Test2x2Environment.assertEqual", "test_traffic_light_grid.Test2x2Environment.env._get_relative_node", "test_traffic_light_grid.Test2x2Environment.assertEqual", "test_traffic_light_grid.Test2x2Environment.assertRaises", "test_traffic_light_grid.Test2x2Environment.env._get_relative_node", "test_traffic_light_grid.Test2x2Environment.assertRaises", "test_traffic_light_grid.Test2x2Environment.env._get_relative_node"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._get_relative_node", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._get_relative_node", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._get_relative_node", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._get_relative_node", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._get_relative_node", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._get_relative_node", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._get_relative_node", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs.traffic_light_grid.TrafficLightGridEnv._get_relative_node"], ["", "def", "test_get_relative_node", "(", "self", ")", ":", "\n", "        ", "node", "=", "self", ".", "env", ".", "_get_relative_node", "(", "'center0'", ",", "'top'", ")", "\n", "self", ".", "assertEqual", "(", "2", ",", "node", ")", "\n", "\n", "node", "=", "self", ".", "env", ".", "_get_relative_node", "(", "'center0'", ",", "'right'", ")", "\n", "self", ".", "assertEqual", "(", "1", ",", "node", ")", "\n", "\n", "node", "=", "self", ".", "env", ".", "_get_relative_node", "(", "'center0'", ",", "'bottom'", ")", "\n", "self", ".", "assertEqual", "(", "-", "1", ",", "node", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "NotImplementedError", ")", ":", "\n", "            ", "self", ".", "env", ".", "_get_relative_node", "(", "'center0'", ",", "'blah'", ")", "\n", "\n", "", "node", "=", "self", ".", "env", ".", "_get_relative_node", "(", "'center2'", ",", "'bottom'", ")", "\n", "self", ".", "assertEqual", "(", "0", ",", "node", ")", "\n", "\n", "node", "=", "self", ".", "env", ".", "_get_relative_node", "(", "'center2'", ",", "'right'", ")", "\n", "self", ".", "assertEqual", "(", "3", ",", "node", ")", "\n", "\n", "node", "=", "self", ".", "env", ".", "_get_relative_node", "(", "'center2'", ",", "'left'", ")", "\n", "self", ".", "assertEqual", "(", "-", "1", ",", "node", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "NotImplementedError", ")", ":", "\n", "            ", "self", ".", "env", ".", "_get_relative_node", "(", "'center1'", ",", "'blah'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_baselines.TestBaselines.test_bottleneck0": [[22, 28], ["flow.benchmarks.baselines.bottleneck0.bottleneck0_baseline"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.baselines.bottleneck0.bottleneck0_baseline"], ["def", "test_bottleneck0", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests flow/benchmark/baselines/bottleneck0.py\n        \"\"\"", "\n", "# run the bottleneck to make sure it runs", "\n", "bottleneck0_baseline", "(", "num_runs", "=", "1", ",", "render", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_baselines.TestBaselines.test_bottleneck1": [[31, 37], ["flow.benchmarks.baselines.bottleneck1.bottleneck1_baseline"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.baselines.bottleneck1.bottleneck1_baseline"], ["", "def", "test_bottleneck1", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests flow/benchmark/baselines/bottleneck1.py\n        \"\"\"", "\n", "# run the bottleneck to make sure it runs", "\n", "bottleneck1_baseline", "(", "num_runs", "=", "1", ",", "render", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_baselines.TestBaselines.test_bottleneck2": [[40, 46], ["flow.benchmarks.baselines.bottleneck2.bottleneck2_baseline"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.baselines.bottleneck2.bottleneck2_baseline"], ["", "def", "test_bottleneck2", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests flow/benchmark/baselines/bottleneck2.py\n        \"\"\"", "\n", "# run the bottleneck to make sure it runs", "\n", "bottleneck2_baseline", "(", "num_runs", "=", "1", ",", "render", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_baselines.TestBaselines.test_figure_eight": [[49, 55], ["flow.benchmarks.baselines.figureeight012.figure_eight_baseline"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.baselines.figureeight012.figure_eight_baseline"], ["", "def", "test_figure_eight", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests flow/benchmark/baselines/figureeight{0,1,2}.py\n        \"\"\"", "\n", "# run the bottleneck to make sure it runs", "\n", "figure_eight_baseline", "(", "num_runs", "=", "1", ",", "render", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_baselines.TestBaselines.test_grid0": [[58, 64], ["flow.benchmarks.baselines.grid0.grid0_baseline"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.baselines.grid0.grid0_baseline"], ["", "def", "test_grid0", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests flow/benchmark/baselines/grid0.py\n        \"\"\"", "\n", "# run the bottleneck to make sure it runs", "\n", "grid0_baseline", "(", "num_runs", "=", "1", ",", "render", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_baselines.TestBaselines.test_grid1": [[67, 73], ["flow.benchmarks.baselines.grid1.grid1_baseline"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.baselines.grid1.grid1_baseline"], ["", "def", "test_grid1", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests flow/benchmark/baselines/grid1.py\n        \"\"\"", "\n", "# run the bottleneck to make sure it runs", "\n", "grid1_baseline", "(", "num_runs", "=", "1", ",", "render", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_baselines.TestBaselines.test_merge": [[76, 82], ["flow.benchmarks.baselines.merge012.merge_baseline"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.baselines.merge012.merge_baseline"], ["", "def", "test_merge", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests flow/benchmark/baselines/merge{0,1,2}.py\n        \"\"\"", "\n", "# run the bottleneck to make sure it runs", "\n", "merge_baseline", "(", "num_runs", "=", "1", ",", "render", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.setUp": [[56, 59], ["os.path.exists", "os.mkdir"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "'./benchmark_tmp'", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "'benchmark_tmp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.tearDown": [[60, 62], ["shutil.rmtree"], "methods", ["None"], ["", "", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "'benchmark_tmp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.ray_runner": [[63, 95], ["get_agent_class", "get_agent_class._default_config.copy", "json.dumps", "flow.utils.registry.make_create_env", "flow.utils.registry.make_create_env", "flow.utils.registry.make_create_env", "flow.utils.registry.make_create_env", "flow.utils.registry.make_create_env", "flow.utils.registry.make_create_env", "flow.utils.registry.make_create_env", "flow.utils.registry.make_create_env", "flow.utils.registry.make_create_env", "flow.utils.registry.make_create_env", "flow.utils.registry.make_create_env", "ray.tune.registry.register_env", "ray.tune.registry.register_env", "ray.PPOAgent", "ray.PPOAgent", "range", "ray.PPOAgent.train", "ray.PPOAgent.save", "test_benchmarks.TestBenchmarks.assertTrue", "os.path.exists"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.registry.make_create_env", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save"], ["", "def", "ray_runner", "(", "self", ",", "num_runs", ",", "flow_params", ",", "version", ")", ":", "\n", "        ", "alg_run", "=", "'PPO'", "\n", "HORIZON", "=", "10", "\n", "\n", "agent_cls", "=", "get_agent_class", "(", "alg_run", ")", "\n", "config", "=", "agent_cls", ".", "_default_config", ".", "copy", "(", ")", "\n", "config", "[", "'num_workers'", "]", "=", "1", "\n", "config", "[", "'sample_batch_size'", "]", "=", "50", "# arbitrary", "\n", "config", "[", "'train_batch_size'", "]", "=", "50", "# arbitrary", "\n", "config", "[", "'sgd_minibatch_size'", "]", "=", "10", "\n", "config", "[", "'num_sgd_iter'", "]", "=", "1", "\n", "config", "[", "'horizon'", "]", "=", "HORIZON", "\n", "\n", "# save the flow params for replay", "\n", "flow_json", "=", "json", ".", "dumps", "(", "\n", "flow_params", ",", "cls", "=", "FlowParamsEncoder", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "config", "[", "'env_config'", "]", "[", "'flow_params'", "]", "=", "flow_json", "\n", "config", "[", "'env_config'", "]", "[", "'run'", "]", "=", "alg_run", "\n", "\n", "create_env", ",", "env_name", "=", "make_create_env", "(", "params", "=", "flow_params", ",", "\n", "version", "=", "version", ")", "\n", "\n", "# Register as rllib env", "\n", "register_env", "(", "env_name", ",", "create_env", ")", "\n", "\n", "alg", "=", "ppo", ".", "PPOAgent", "(", "\n", "env", "=", "env_name", ",", "config", "=", "config", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_runs", ")", ":", "\n", "            ", "alg", ".", "train", "(", ")", "\n", "checkpoint_path", "=", "alg", ".", "save", "(", "'benchmark_tmp'", ")", "\n", "self", ".", "assertTrue", "(", "'%s.index'", "%", "os", ".", "path", ".", "exists", "(", "checkpoint_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.test_bottleneck0": [[96, 103], ["test_benchmarks.TestBenchmarks.ray_runner"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.ray_runner"], ["", "", "def", "test_bottleneck0", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests flow/benchmark/baselines/bottleneck0.py\n        env_name='BottleneckDesiredVelocityEnv',\n        \"\"\"", "\n", "# run the bottleneck to make sure it runs", "\n", "self", ".", "ray_runner", "(", "1", ",", "bottleneck0", ".", "flow_params", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.test_bottleneck1": [[106, 112], ["test_benchmarks.TestBenchmarks.ray_runner"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.ray_runner"], ["", "def", "test_bottleneck1", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests flow/benchmark/baselines/bottleneck1.py\n        \"\"\"", "\n", "# run the bottleneck to make sure it runs", "\n", "self", ".", "ray_runner", "(", "1", ",", "bottleneck1", ".", "flow_params", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.test_bottleneck2": [[115, 121], ["test_benchmarks.TestBenchmarks.ray_runner"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.ray_runner"], ["", "def", "test_bottleneck2", "(", "self", ")", ":", "\n", "        ", "\"\"\"s\n        Tests flow/benchmark/baselines/bottleneck2.py\n        \"\"\"", "\n", "# run the bottleneck to make sure it runs", "\n", "self", ".", "ray_runner", "(", "1", ",", "bottleneck2", ".", "flow_params", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.test_figure_eight0": [[124, 131], ["test_benchmarks.TestBenchmarks.ray_runner"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.ray_runner"], ["", "def", "test_figure_eight0", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests flow/benchmark/baselines/figureeight{0,1,2}.py\n        env_name='AccelEnv',\n        \"\"\"", "\n", "# run the bottleneck to make sure it runs", "\n", "self", ".", "ray_runner", "(", "1", ",", "figureeight0", ".", "flow_params", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.test_figure_eight1": [[134, 140], ["test_benchmarks.TestBenchmarks.ray_runner"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.ray_runner"], ["", "def", "test_figure_eight1", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests flow/benchmark/baselines/figureeight{0,1,2}.py\n        \"\"\"", "\n", "# run the bottleneck to make sure it runs", "\n", "self", ".", "ray_runner", "(", "1", ",", "figureeight1", ".", "flow_params", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.test_figure_eight2": [[143, 149], ["test_benchmarks.TestBenchmarks.ray_runner"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.ray_runner"], ["", "def", "test_figure_eight2", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests flow/benchmark/baselines/figureeight{0,1,2}.py\n        \"\"\"", "\n", "# run the bottleneck to make sure it runs", "\n", "self", ".", "ray_runner", "(", "1", ",", "figureeight2", ".", "flow_params", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.test_grid0": [[152, 159], ["test_benchmarks.TestBenchmarks.ray_runner"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.ray_runner"], ["", "def", "test_grid0", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests flow/benchmark/baselines/grid0.py\n        env_name='TrafficLightGridPOEnv',\n        \"\"\"", "\n", "# run the bottleneck to make sure it runs", "\n", "self", ".", "ray_runner", "(", "1", ",", "grid0", ".", "flow_params", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.test_grid1": [[162, 168], ["test_benchmarks.TestBenchmarks.ray_runner"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.ray_runner"], ["", "def", "test_grid1", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests flow/benchmark/baselines/grid1.py\n        \"\"\"", "\n", "# run the bottleneck to make sure it runs", "\n", "self", ".", "ray_runner", "(", "1", ",", "grid1", ".", "flow_params", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.test_merge0": [[171, 178], ["test_benchmarks.TestBenchmarks.ray_runner"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.ray_runner"], ["", "def", "test_merge0", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests flow/benchmark/baselines/merge{0,1,2}.py\n        env_name='MergePOEnv',\n        \"\"\"", "\n", "# run the bottleneck to make sure it runs", "\n", "self", ".", "ray_runner", "(", "1", ",", "merge0", ".", "flow_params", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.test_merge1": [[181, 187], ["test_benchmarks.TestBenchmarks.ray_runner"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.ray_runner"], ["", "def", "test_merge1", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests flow/benchmark/baselines/merge{0,1,2}.py\n        \"\"\"", "\n", "# run the bottleneck to make sure it runs", "\n", "self", ".", "ray_runner", "(", "1", ",", "merge1", ".", "flow_params", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.test_merge2": [[190, 196], ["test_benchmarks.TestBenchmarks.ray_runner"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestBenchmarks.ray_runner"], ["", "def", "test_merge2", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests flow/benchmark/baselines/merge{0,1,2}.py\n        \"\"\"", "\n", "# run the bottleneck to make sure it runs", "\n", "self", ".", "ray_runner", "(", "1", ",", "merge2", ".", "flow_params", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestTRPORunner.test_parse_args": [[200, 219], ["flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "test_benchmarks.TestTRPORunner.assertEqual", "test_benchmarks.TestTRPORunner.assertEqual", "test_benchmarks.TestTRPORunner.assertEqual", "test_benchmarks.TestTRPORunner.assertEqual", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "test_benchmarks.TestTRPORunner.assertEqual", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "test_benchmarks.TestTRPORunner.assertEqual", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "flow.benchmarks.stable_baselines.trpo_runner.parse_args", "test_benchmarks.TestTRPORunner.assertEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args"], ["    ", "def", "test_parse_args", "(", "self", ")", ":", "\n", "# test the base case", "\n", "        ", "flags", "=", "parse_args", "(", "[", "'figureeight0'", "]", ")", "\n", "self", ".", "assertEqual", "(", "flags", ".", "benchmark_name", ",", "'figureeight0'", ")", "\n", "self", ".", "assertEqual", "(", "flags", ".", "num_steps", ",", "9e6", ")", "\n", "self", ".", "assertEqual", "(", "flags", ".", "rollout_size", ",", "3e4", ")", "\n", "self", ".", "assertEqual", "(", "flags", ".", "num_cpus", ",", "1", ")", "\n", "\n", "# test num_cpus", "\n", "flags", "=", "parse_args", "(", "[", "'figureeight0'", ",", "'--num_cpus'", ",", "'3'", "]", ")", "\n", "self", ".", "assertEqual", "(", "flags", ".", "num_cpus", ",", "3", ")", "\n", "\n", "# test rollout_size", "\n", "flags", "=", "parse_args", "(", "[", "'figureeight0'", ",", "'--rollout_size'", ",", "'2'", "]", ")", "\n", "self", ".", "assertEqual", "(", "flags", ".", "rollout_size", ",", "2", ")", "\n", "\n", "# test num_steps", "\n", "flags", "=", "parse_args", "(", "[", "'figureeight0'", ",", "'--num_steps'", ",", "'1'", "]", ")", "\n", "self", ".", "assertEqual", "(", "flags", ".", "num_steps", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slow_tests.test_benchmarks.TestTRPORunner.test_trpo_runner": [[220, 233], ["flow.benchmarks.stable_baselines.trpo_runner.run_model", "flow.benchmarks.stable_baselines.trpo_runner.run_model", "flow.benchmarks.stable_baselines.trpo_runner.run_model", "flow.benchmarks.stable_baselines.trpo_runner.run_model", "flow.benchmarks.stable_baselines.trpo_runner.run_model", "flow.benchmarks.stable_baselines.trpo_runner.run_model", "flow.benchmarks.stable_baselines.trpo_runner.run_model", "flow.benchmarks.stable_baselines.trpo_runner.run_model", "flow.benchmarks.stable_baselines.trpo_runner.run_model", "flow.benchmarks.stable_baselines.trpo_runner.run_model", "flow.benchmarks.stable_baselines.trpo_runner.run_model", "flow.core.util.ensure_dir", "flow.core.util.ensure_dir", "flow.core.util.ensure_dir", "flow.core.util.ensure_dir", "flow.core.util.ensure_dir", "flow.core.util.ensure_dir", "flow.core.util.ensure_dir", "flow.core.util.ensure_dir", "flow.core.util.ensure_dir", "flow.core.util.ensure_dir", "flow.core.util.ensure_dir", "flow.benchmarks.stable_baselines.trpo_runner.save_model", "flow.benchmarks.stable_baselines.trpo_runner.save_model", "flow.benchmarks.stable_baselines.trpo_runner.save_model", "flow.benchmarks.stable_baselines.trpo_runner.save_model", "flow.benchmarks.stable_baselines.trpo_runner.save_model", "flow.benchmarks.stable_baselines.trpo_runner.save_model", "flow.benchmarks.stable_baselines.trpo_runner.save_model", "flow.benchmarks.stable_baselines.trpo_runner.save_model", "flow.benchmarks.stable_baselines.trpo_runner.save_model", "flow.benchmarks.stable_baselines.trpo_runner.save_model", "flow.benchmarks.stable_baselines.trpo_runner.save_model", "sorted", "test_benchmarks.TestTRPORunner.assertListEqual", "shutil.rmtree", "os.listdir", "os.path.isfile", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.run_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.run_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.run_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.run_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.run_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.run_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.run_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.run_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.run_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.run_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.run_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.ensure_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.ensure_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.ensure_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.ensure_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.ensure_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.ensure_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.ensure_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.ensure_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.ensure_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.ensure_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.util.ensure_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.save_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.save_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.save_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.save_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.save_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.save_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.save_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.save_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.save_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.save_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.save_model"], ["", "def", "test_trpo_runner", "(", "self", ")", ":", "\n", "# test run_model on figure eight 0", "\n", "        ", "model", "=", "run_model", "(", "figureeight0", ".", "flow_params", ",", "5", ",", "5", ")", "\n", "\n", "# test save model", "\n", "ensure_dir", "(", "\"./baseline_results\"", ")", "\n", "save_model", "(", "model", ",", "figureeight0", ".", "flow_params", ",", "\"./baseline_results\"", ")", "\n", "files", "=", "sorted", "(", "[", "f", "for", "f", "in", "listdir", "(", "\"./baseline_results\"", ")", "\n", "if", "isfile", "(", "join", "(", "\"./baseline_results\"", ",", "f", ")", ")", "]", ")", "\n", "self", ".", "assertListEqual", "(", "files", ",", "[", "'flow_params.json'", ",", "'model.pkl'", "]", ")", "\n", "\n", "# delete the generated files", "\n", "shutil", ".", "rmtree", "(", "'./baseline_results'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.ActionValue.greedy_actions": [[15, 19], ["NotImplementedError"], "methods", ["None"], ["@", "abstractproperty", "\n", "def", "greedy_actions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get argmax_a Q(s,a).\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.ActionValue.max": [[20, 24], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractproperty", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "\"\"\"Evaluate max Q(s,a).\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.ActionValue.evaluate_actions": [[25, 29], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "evaluate_actions", "(", "self", ",", "actions", ")", ":", "\n", "        ", "\"\"\"Evaluate Q(s,a) with a = given actions.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.ActionValue.params": [[30, 38], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractproperty", "\n", "def", "params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Learnable parameters of this action value.\n\n        Returns:\n            tuple of torch.Tensor\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.ActionValue.__getitem__": [[39, 42], ["NotImplementedError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", "->", "\"ActionValue\"", ":", "\n", "        ", "\"\"\"ActionValue is expected to be indexable.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DiscreteActionValue.__init__": [[52, 58], ["isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "q_values", ",", "q_values_formatter", "=", "lambda", "x", ":", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "q_values", ",", "torch", ".", "Tensor", ")", "\n", "self", ".", "device", "=", "q_values", ".", "device", "\n", "self", ".", "q_values", "=", "q_values", "\n", "self", ".", "n_actions", "=", "q_values", ".", "shape", "[", "1", "]", "\n", "self", ".", "q_values_formatter", "=", "q_values_formatter", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DiscreteActionValue.greedy_actions": [[59, 62], ["action_value.DiscreteActionValue.q_values.detach().argmax().int", "action_value.DiscreteActionValue.q_values.detach().argmax", "action_value.DiscreteActionValue.q_values.detach"], "methods", ["None"], ["", "@", "lazy_property", "\n", "def", "greedy_actions", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "q_values", ".", "detach", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ".", "int", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DiscreteActionValue.max": [[63, 67], ["action_value.DiscreteActionValue.greedy_actions.long().unsqueeze", "action_value.DiscreteActionValue.q_values.gather().flatten", "action_value.DiscreteActionValue.greedy_actions.long", "action_value.DiscreteActionValue.q_values.gather"], "methods", ["None"], ["", "@", "lazy_property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "index", "=", "self", ".", "greedy_actions", ".", "long", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "return", "self", ".", "q_values", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "index", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DiscreteActionValue.evaluate_actions": [[68, 72], ["actions.long().unsqueeze", "action_value.DiscreteActionValue.q_values.gather().flatten", "actions.long", "action_value.DiscreteActionValue.q_values.gather"], "methods", ["None"], ["", "def", "evaluate_actions", "(", "self", ",", "actions", ")", ":", "# \u8fd9\u4e2a\u51fd\u6570\u6709\u95ee\u9898", "\n", "        ", "index", "=", "actions", ".", "long", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# print(\"index:\", index)", "\n", "return", "self", ".", "q_values", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "index", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DiscreteActionValue.compute_advantage": [[73, 75], ["action_value.DiscreteActionValue.evaluate_actions"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions"], ["", "def", "compute_advantage", "(", "self", ",", "actions", ")", ":", "\n", "        ", "return", "self", ".", "evaluate_actions", "(", "actions", ")", "-", "self", ".", "max", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DiscreteActionValue.compute_double_advantage": [[76, 78], ["action_value.DiscreteActionValue.evaluate_actions", "action_value.DiscreteActionValue.evaluate_actions"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions"], ["", "def", "compute_double_advantage", "(", "self", ",", "actions", ",", "argmax_actions", ")", ":", "\n", "        ", "return", "self", ".", "evaluate_actions", "(", "actions", ")", "-", "self", ".", "evaluate_actions", "(", "argmax_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DiscreteActionValue.compute_expectation": [[79, 81], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "def", "compute_expectation", "(", "self", ",", "beta", ")", ":", "\n", "        ", "return", "torch", ".", "sum", "(", "F", ".", "softmax", "(", "beta", "*", "self", ".", "q_values", ")", "*", "self", ".", "q_values", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DiscreteActionValue.__repr__": [[82, 86], ["action_value.DiscreteActionValue.greedy_actions.detach().cpu().numpy", "action_value.DiscreteActionValue.q_values_formatter", "action_value.DiscreteActionValue.q_values.detach().cpu().numpy", "action_value.DiscreteActionValue.greedy_actions.detach().cpu", "action_value.DiscreteActionValue.q_values.detach().cpu", "action_value.DiscreteActionValue.greedy_actions.detach", "action_value.DiscreteActionValue.q_values.detach"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"DiscreteActionValue greedy_actions:{} q_values:{}\"", ".", "format", "(", "\n", "self", ".", "greedy_actions", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "self", ".", "q_values_formatter", "(", "self", ".", "q_values", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DiscreteActionValue.params": [[88, 91], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "params", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "q_values", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DiscreteActionValue.__getitem__": [[92, 95], ["action_value.DiscreteActionValue"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "DiscreteActionValue", "(", "\n", "self", ".", "q_values", "[", "i", "]", ",", "q_values_formatter", "=", "self", ".", "q_values_formatter", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DistributionalDiscreteActionValue.__init__": [[108, 120], ["isinstance", "isinstance", "q_scaled.sum"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["def", "__init__", "(", "self", ",", "q_dist", ",", "z_values", ",", "q_values_formatter", "=", "lambda", "x", ":", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "q_dist", ",", "torch", ".", "Tensor", ")", "\n", "assert", "isinstance", "(", "z_values", ",", "torch", ".", "Tensor", ")", "\n", "assert", "q_dist", ".", "ndim", "==", "3", "\n", "assert", "z_values", ".", "ndim", "==", "1", "\n", "assert", "q_dist", ".", "shape", "[", "2", "]", "==", "z_values", ".", "shape", "[", "0", "]", "\n", "self", ".", "z_values", "=", "z_values", "\n", "q_scaled", "=", "q_dist", "*", "self", ".", "z_values", "[", "None", ",", "None", ",", "...", "]", "\n", "self", ".", "q_values", "=", "q_scaled", ".", "sum", "(", "dim", "=", "2", ")", "\n", "self", ".", "q_dist", "=", "q_dist", "\n", "self", ".", "n_actions", "=", "q_dist", ".", "shape", "[", "1", "]", "\n", "self", ".", "q_values_formatter", "=", "q_values_formatter", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DistributionalDiscreteActionValue.greedy_actions": [[121, 124], ["action_value.DistributionalDiscreteActionValue.q_values.argmax().detach", "action_value.DistributionalDiscreteActionValue.q_values.argmax"], "methods", ["None"], ["", "@", "lazy_property", "\n", "def", "greedy_actions", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "q_values", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DistributionalDiscreteActionValue.max": [[125, 128], ["torch.gather", "torch.gather", "torch.gather", "torch.gather"], "methods", ["None"], ["", "@", "lazy_property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "gather", "(", "self", ".", "q_values", ",", "1", ",", "self", ".", "greedy_actions", "[", ":", ",", "None", "]", ")", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DistributionalDiscreteActionValue.max_as_distribution": [[129, 139], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "action_value.DistributionalDiscreteActionValue.greedy_actions.detach"], "methods", ["None"], ["", "@", "lazy_property", "\n", "def", "max_as_distribution", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the return distributions of the greedy actions.\n\n        Returns:\n            torch.Tensor: Return distributions. Its shape will be\n                (batch_size, n_atoms).\n        \"\"\"", "\n", "return", "self", ".", "q_dist", "[", "\n", "torch", ".", "arange", "(", "self", ".", "q_values", ".", "shape", "[", "0", "]", ")", ",", "self", ".", "greedy_actions", ".", "detach", "(", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DistributionalDiscreteActionValue.evaluate_actions": [[141, 143], ["torch.gather", "torch.gather", "torch.gather", "torch.gather", "actions[].long"], "methods", ["None"], ["", "def", "evaluate_actions", "(", "self", ",", "actions", ")", ":", "\n", "        ", "return", "torch", ".", "gather", "(", "self", ".", "q_values", ",", "1", ",", "actions", "[", ":", ",", "None", "]", ".", "long", "(", ")", ")", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DistributionalDiscreteActionValue.evaluate_actions_as_distribution": [[144, 166], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "actions.long"], "methods", ["None"], ["", "def", "evaluate_actions_as_distribution", "(", "self", ",", "actions", ")", ":", "\n", "        ", "\"\"\"Return the return distributions of given actions.\n\n        Args:\n            actions (torch.Tensor): Array of action indices.\n                Its shape must be (batch_size,).\n\n        Returns:\n            torch.Tensor: Return distributions. Its shape will be\n                (batch_size, n_atoms).\n        \"\"\"", "\n", "# \u4ee5\u4e0b\u4e00\u7cfb\u5217print\u5747\u7528\u4e8e\u8c03\u8bd5", "\n", "# print(\"q_values:\", self.q_values)", "\n", "# print(\"q_values_shape:\", self.q_values.shape[0])", "\n", "# print(\"actions:\", actions)", "\n", "# print(\"q_dist:\", self.q_dist.shape)", "\n", "# q_values_indices = torch.arange(self.q_values.shape[0])", "\n", "# print(\"q_values_indices:\", q_values_indices.dtype)", "\n", "# q_values_indices = q_values_indices.long()", "\n", "# print(\"q_values_indices:\", q_values_indices.dtype)", "\n", "\n", "return", "self", ".", "q_dist", "[", "torch", ".", "arange", "(", "self", ".", "q_values", ".", "shape", "[", "0", "]", ")", ",", "actions", ".", "long", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DistributionalDiscreteActionValue.compute_advantage": [[167, 169], ["action_value.DistributionalDiscreteActionValue.evaluate_actions"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions"], ["", "def", "compute_advantage", "(", "self", ",", "actions", ")", ":", "\n", "        ", "return", "self", ".", "evaluate_actions", "(", "actions", ")", "-", "self", ".", "max", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DistributionalDiscreteActionValue.compute_double_advantage": [[170, 172], ["action_value.DistributionalDiscreteActionValue.evaluate_actions", "action_value.DistributionalDiscreteActionValue.evaluate_actions"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions"], ["", "def", "compute_double_advantage", "(", "self", ",", "actions", ",", "argmax_actions", ")", ":", "\n", "        ", "return", "self", ".", "evaluate_actions", "(", "actions", ")", "-", "self", ".", "evaluate_actions", "(", "argmax_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DistributionalDiscreteActionValue.compute_expectation": [[173, 175], ["torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "compute_expectation", "(", "self", ",", "beta", ")", ":", "\n", "        ", "return", "(", "F", ".", "softmax", "(", "beta", "*", "self", ".", "q_values", ")", "*", "self", ".", "q_values", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DistributionalDiscreteActionValue.__repr__": [[176, 180], ["action_value.DistributionalDiscreteActionValue.greedy_actions.detach", "action_value.DistributionalDiscreteActionValue.q_values_formatter", "action_value.DistributionalDiscreteActionValue.q_values.detach"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"DistributionalDiscreteActionValue greedy_actions:{} q_values:{}\"", ".", "format", "(", "# NOQA", "\n", "self", ".", "greedy_actions", ".", "detach", "(", ")", ",", "\n", "self", ".", "q_values_formatter", "(", "self", ".", "q_values", ".", "detach", "(", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DistributionalDiscreteActionValue.params": [[182, 185], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "params", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "q_dist", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DistributionalDiscreteActionValue.__getitem__": [[186, 191], ["action_value.DistributionalDiscreteActionValue"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "DistributionalDiscreteActionValue", "(", "\n", "self", ".", "q_dist", "[", "i", "]", ",", "\n", "self", ".", "z_values", ",", "\n", "q_values_formatter", "=", "self", ".", "q_values_formatter", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.QuantileDiscreteActionValue.__init__": [[201, 206], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "quantiles", ",", "q_values_formatter", "=", "lambda", "x", ":", "x", ")", ":", "\n", "        ", "assert", "quantiles", ".", "ndim", "==", "3", "\n", "self", ".", "quantiles", "=", "quantiles", "\n", "self", ".", "n_actions", "=", "quantiles", ".", "shape", "[", "2", "]", "\n", "self", ".", "q_values_formatter", "=", "q_values_formatter", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.QuantileDiscreteActionValue.q_values": [[207, 210], ["action_value.QuantileDiscreteActionValue.quantiles.mean"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["", "@", "lazy_property", "\n", "def", "q_values", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "quantiles", ".", "mean", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.QuantileDiscreteActionValue.evaluate_actions_as_quantiles": [[211, 222], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "actions.long"], "methods", ["None"], ["", "def", "evaluate_actions_as_quantiles", "(", "self", ",", "actions", ")", ":", "\n", "        ", "\"\"\"Return the return quantiles of given actions.\n        Args:\n            actions (torch.Tensor or ndarray): Array of action indices.\n                Its shape must be (batch_size,).\n        Returns:\n            torch.Tensor: Return quantiles. Its shape will be\n                (batch_size, n_taus).\n        \"\"\"", "\n", "return", "self", ".", "quantiles", "[", "\n", "torch", ".", "arange", "(", "self", ".", "quantiles", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ",", ":", ",", "actions", ".", "long", "(", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.QuantileDiscreteActionValue.__repr__": [[224, 229], ["action_value.QuantileDiscreteActionValue.greedy_actions.detach().cpu().numpy", "action_value.QuantileDiscreteActionValue.q_values_formatter", "action_value.QuantileDiscreteActionValue.q_values.detach().cpu().numpy", "action_value.QuantileDiscreteActionValue.greedy_actions.detach().cpu", "action_value.QuantileDiscreteActionValue.q_values.detach().cpu", "action_value.QuantileDiscreteActionValue.greedy_actions.detach", "action_value.QuantileDiscreteActionValue.q_values.detach"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "\"QuantileDiscreteActionValue greedy_actions:{} q_values:{}\"", ".", "format", "(", "# NOQA", "\n", "self", ".", "greedy_actions", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "self", ".", "q_values_formatter", "(", "self", ".", "q_values", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.QuantileDiscreteActionValue.params": [[232, 235], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "params", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "quantiles", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.QuantileDiscreteActionValue.__getitem__": [[236, 240], ["action_value.QuantileDiscreteActionValue"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "QuantileDiscreteActionValue", "(", "\n", "quantiles", "=", "self", ".", "quantiles", "[", "i", "]", ",", "\n", "q_values_formatter", "=", "self", ".", "q_values_formatter", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.QuadraticActionValue.__init__": [[262, 282], ["isinstance", "isinstance", "torch.as_tensor().to().float", "torch.as_tensor().to().float", "torch.as_tensor().to().float", "torch.as_tensor().to().float", "torch.as_tensor().to().float", "torch.as_tensor().to().float", "torch.as_tensor().to().float", "torch.as_tensor().to().float", "torch.as_tensor().to", "torch.as_tensor().to", "torch.as_tensor().to", "torch.as_tensor().to", "torch.as_tensor().to", "torch.as_tensor().to", "torch.as_tensor().to", "torch.as_tensor().to", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mu", ",", "mat", ",", "v", ",", "min_action", "=", "None", ",", "max_action", "=", "None", ")", ":", "\n", "        ", "self", ".", "mu", "=", "mu", "\n", "self", ".", "mat", "=", "mat", "\n", "self", ".", "v", "=", "v", "\n", "self", ".", "device", "=", "mu", ".", "device", "\n", "\n", "if", "isinstance", "(", "min_action", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "            ", "min_action", "=", "[", "min_action", "]", "\n", "\n", "", "if", "min_action", "is", "None", ":", "\n", "            ", "self", ".", "min_action", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "min_action", "=", "torch", ".", "as_tensor", "(", "min_action", ")", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "", "if", "isinstance", "(", "max_action", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "            ", "max_action", "=", "[", "max_action", "]", "\n", "", "if", "max_action", "is", "None", ":", "\n", "            ", "self", ".", "max_action", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_action", "=", "torch", ".", "as_tensor", "(", "max_action", ")", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "", "self", ".", "batch_size", "=", "self", ".", "mu", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.QuadraticActionValue.greedy_actions": [[283, 291], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "action_value.QuadraticActionValue.min_action.unsqueeze().expand_as", "action_value.QuadraticActionValue.max_action.unsqueeze().expand_as", "action_value.QuadraticActionValue.min_action.unsqueeze", "action_value.QuadraticActionValue.max_action.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min"], ["", "@", "lazy_property", "\n", "def", "greedy_actions", "(", "self", ")", ":", "\n", "        ", "a", "=", "self", ".", "mu", "\n", "if", "self", ".", "min_action", "is", "not", "None", ":", "\n", "            ", "a", "=", "torch", ".", "max", "(", "self", ".", "min_action", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "a", ")", ",", "a", ")", "\n", "", "if", "self", ".", "max_action", "is", "not", "None", ":", "\n", "            ", "a", "=", "torch", ".", "min", "(", "self", ".", "max_action", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "a", ")", ",", "a", ")", "\n", "", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.QuadraticActionValue.max": [[292, 300], ["action_value.QuadraticActionValue.v.reshape", "action_value.QuadraticActionValue.evaluate_actions"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions"], ["", "@", "lazy_property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "min_action", "is", "None", "and", "self", ".", "max_action", "is", "None", ":", "\n", "            ", "return", "self", ".", "v", ".", "reshape", "(", "\n", "self", ".", "batch_size", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "evaluate_actions", "(", "self", ".", "greedy_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.QuadraticActionValue.evaluate_actions": [[301, 311], ["action_value.QuadraticActionValue.v.reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "def", "evaluate_actions", "(", "self", ",", "actions", ")", ":", "\n", "        ", "u_minus_mu", "=", "actions", "-", "self", ".", "mu", "\n", "a", "=", "(", "\n", "-", "0.5", "\n", "*", "torch", ".", "matmul", "(", "\n", "torch", ".", "matmul", "(", "u_minus_mu", "[", ":", ",", "None", ",", ":", "]", ",", "self", ".", "mat", ")", ",", "u_minus_mu", "[", ":", ",", ":", ",", "None", "]", "\n", ")", "[", ":", ",", "0", ",", "0", "]", "\n", ")", "\n", "return", "a", "+", "self", ".", "v", ".", "reshape", "(", "\n", "self", ".", "batch_size", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.QuadraticActionValue.compute_advantage": [[313, 315], ["action_value.QuadraticActionValue.evaluate_actions"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions"], ["", "def", "compute_advantage", "(", "self", ",", "actions", ")", ":", "\n", "        ", "return", "self", ".", "evaluate_actions", "(", "actions", ")", "-", "self", ".", "max", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.QuadraticActionValue.compute_double_advantage": [[316, 318], ["action_value.QuadraticActionValue.evaluate_actions", "action_value.QuadraticActionValue.evaluate_actions"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions"], ["", "def", "compute_double_advantage", "(", "self", ",", "actions", ",", "argmax_actions", ")", ":", "\n", "        ", "return", "self", ".", "evaluate_actions", "(", "actions", ")", "-", "self", ".", "evaluate_actions", "(", "argmax_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.QuadraticActionValue.__repr__": [[319, 322], ["action_value.QuadraticActionValue.greedy_actions.detach().cpu().numpy", "action_value.QuadraticActionValue.v.detach().cpu().numpy", "action_value.QuadraticActionValue.greedy_actions.detach().cpu", "action_value.QuadraticActionValue.v.detach().cpu", "action_value.QuadraticActionValue.greedy_actions.detach", "action_value.QuadraticActionValue.v.detach"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"QuadraticActionValue greedy_actions:{} v:{}\"", ".", "format", "(", "\n", "self", ".", "greedy_actions", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "self", ".", "v", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.QuadraticActionValue.params": [[324, 327], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "params", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "mu", ",", "self", ".", "mat", ",", "self", ".", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.QuadraticActionValue.__getitem__": [[328, 335], ["action_value.QuadraticActionValue"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "QuadraticActionValue", "(", "\n", "self", ".", "mu", "[", "i", "]", ",", "\n", "self", ".", "mat", "[", "i", "]", ",", "\n", "self", ".", "v", "[", "i", "]", ",", "\n", "min_action", "=", "self", ".", "min_action", ",", "\n", "max_action", "=", "self", ".", "max_action", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.__init__": [[341, 344], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "evaluator", ",", "maximizer", "=", "None", ")", ":", "\n", "        ", "self", ".", "evaluator", "=", "evaluator", "\n", "self", ".", "maximizer", "=", "maximizer", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.greedy_actions": [[345, 348], ["action_value.SingleActionValue.maximizer"], "methods", ["None"], ["", "@", "lazy_property", "\n", "def", "greedy_actions", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "maximizer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max": [[349, 352], ["action_value.SingleActionValue.evaluator"], "methods", ["None"], ["", "@", "lazy_property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "evaluator", "(", "self", ".", "greedy_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions": [[353, 355], ["action_value.SingleActionValue.evaluator"], "methods", ["None"], ["", "def", "evaluate_actions", "(", "self", ",", "actions", ")", ":", "\n", "        ", "return", "self", ".", "evaluator", "(", "actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.compute_advantage": [[356, 358], ["action_value.SingleActionValue.evaluator"], "methods", ["None"], ["", "def", "compute_advantage", "(", "self", ",", "actions", ")", ":", "\n", "        ", "return", "self", ".", "evaluator", "(", "actions", ")", "-", "self", ".", "max", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.compute_double_advantage": [[359, 361], ["action_value.SingleActionValue.evaluate_actions", "action_value.SingleActionValue.evaluate_actions"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions"], ["", "def", "compute_double_advantage", "(", "self", ",", "actions", ",", "argmax_actions", ")", ":", "\n", "        ", "return", "self", ".", "evaluate_actions", "(", "actions", ")", "-", "self", ".", "evaluate_actions", "(", "argmax_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.__repr__": [[362, 364], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"SingleActionValue\"", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.params": [[365, 374], ["warnings.warn"], "methods", ["None"], ["", "@", "property", "\n", "def", "params", "(", "self", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "\"SingleActionValue has no learnable parameters until it\"", "\n", "\" is evaluated on some action. If you want to draw a computation\"", "\n", "\" graph that outputs SingleActionValue, use the variable returned\"", "\n", "\" by its method such as evaluate_actions instead.\"", "\n", ")", "\n", "return", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.__getitem__": [[375, 377], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.policy.Policy.__call__": [[10, 18], ["NotImplementedError"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "__call__", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\"Evaluate a policy.\n\n        Returns:\n            Distribution of actions\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.Agent.act": [[14, 22], ["NotImplementedError"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "act", "(", "self", ",", "obs", ":", "Any", ")", "->", "Any", ":", "\n", "        ", "\"\"\"Select an action.\n\n        Returns:\n            ~object: action\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.Agent.observe": [[23, 31], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "observe", "(", "self", ",", "obs", ":", "Any", ",", "reward", ":", "float", ",", "done", ":", "bool", ",", "reset", ":", "bool", ")", "->", "None", ":", "\n", "        ", "\"\"\"Observe consequences of the last action.\n\n        Returns:\n            None\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.Agent.save": [[32, 40], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "save", "(", "self", ",", "dirname", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"Save internal states.\n\n        Returns:\n            None\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.Agent.load": [[41, 49], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "load", "(", "self", ",", "dirname", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"Load internal states.\n\n        Returns:\n            None\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.Agent.get_statistics": [[50, 62], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_statistics", "(", "self", ")", "->", "List", "[", "Tuple", "[", "str", ",", "Any", "]", "]", ":", "\n", "        ", "\"\"\"Get statistics of the agent.\n\n        Returns:\n            List of two-item tuples. The first item in a tuple is a str that\n            represents the name of item, while the second item is a value to be\n            recorded.\n\n            Example: [('average_loss', 0), ('average_value', 1), ...]\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.Agent.eval_mode": [[63, 71], ["None"], "methods", ["None"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "eval_mode", "(", "self", ")", ":", "\n", "        ", "orig_mode", "=", "self", ".", "training", "\n", "try", ":", "\n", "            ", "self", ".", "training", "=", "False", "\n", "yield", "\n", "", "finally", ":", "\n", "            ", "self", ".", "training", "=", "orig_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.AttributeSavingMixin.saved_attributes": [[76, 80], ["None"], "methods", ["None"], ["@", "abstractproperty", "\n", "def", "saved_attributes", "(", "self", ")", "->", "Tuple", "[", "str", ",", "...", "]", ":", "\n", "        ", "\"\"\"Specify attribute names to save or load as a tuple of str.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.AttributeSavingMixin.save": [[81, 84], ["agent.AttributeSavingMixin.__save"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.AttributeSavingMixin.__save"], ["", "def", "save", "(", "self", ",", "dirname", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"Save internal states.\"\"\"", "\n", "self", ".", "__save", "(", "dirname", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.AttributeSavingMixin.__save": [[85, 108], ["os.makedirs", "ancestors.append", "ancestors.pop", "hasattr", "getattr", "isinstance", "getattr.__save", "isinstance", "torch.save", "any", "os.path.join", "getattr.state_dict", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.AttributeSavingMixin.__save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save"], ["", "def", "__save", "(", "self", ",", "dirname", ":", "str", ",", "ancestors", ":", "List", "[", "Any", "]", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirname", ",", "exist_ok", "=", "True", ")", "\n", "ancestors", ".", "append", "(", "self", ")", "\n", "for", "attr", "in", "self", ".", "saved_attributes", ":", "\n", "            ", "assert", "hasattr", "(", "self", ",", "attr", ")", "\n", "attr_value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "attr_value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "if", "isinstance", "(", "attr_value", ",", "AttributeSavingMixin", ")", ":", "\n", "                ", "assert", "not", "any", "(", "\n", "attr_value", "is", "ancestor", "for", "ancestor", "in", "ancestors", "\n", ")", ",", "\"Avoid an infinite loop\"", "\n", "attr_value", ".", "__save", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "attr", ")", ",", "ancestors", ")", "\n", "", "else", ":", "\n", "                ", "if", "isinstance", "(", "\n", "attr_value", ",", "\n", "(", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", ",", "torch", ".", "nn", ".", "DataParallel", ")", ",", "\n", ")", ":", "\n", "                    ", "attr_value", "=", "attr_value", ".", "module", "\n", "", "torch", ".", "save", "(", "\n", "attr_value", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "dirname", ",", "\"{}.pt\"", ".", "format", "(", "attr", ")", ")", "\n", ")", "\n", "", "", "ancestors", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.AttributeSavingMixin.load": [[109, 112], ["agent.AttributeSavingMixin.__load"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.AttributeSavingMixin.__load"], ["", "def", "load", "(", "self", ",", "dirname", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"Load internal states.\"\"\"", "\n", "self", ".", "__load", "(", "dirname", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.AttributeSavingMixin.__load": [[113, 138], ["ancestors.append", "ancestors.pop", "torch.device", "hasattr", "getattr", "isinstance", "torch.cuda.is_available", "getattr.load", "isinstance", "getattr.load_state_dict", "any", "os.path.join", "torch.load", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load"], ["", "def", "__load", "(", "self", ",", "dirname", ":", "str", ",", "ancestors", ":", "List", "[", "Any", "]", ")", "->", "None", ":", "\n", "        ", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "None", "\n", "ancestors", ".", "append", "(", "self", ")", "\n", "for", "attr", "in", "self", ".", "saved_attributes", ":", "\n", "            ", "assert", "hasattr", "(", "self", ",", "attr", ")", "\n", "attr_value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "attr_value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "if", "isinstance", "(", "attr_value", ",", "AttributeSavingMixin", ")", ":", "\n", "                ", "assert", "not", "any", "(", "\n", "attr_value", "is", "ancestor", "for", "ancestor", "in", "ancestors", "\n", ")", ",", "\"Avoid an infinite loop\"", "\n", "attr_value", ".", "load", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "attr", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "isinstance", "(", "\n", "attr_value", ",", "\n", "(", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", ",", "torch", ".", "nn", ".", "DataParallel", ")", ",", "\n", ")", ":", "\n", "                    ", "attr_value", "=", "attr_value", ".", "module", "\n", "", "attr_value", ".", "load_state_dict", "(", "\n", "torch", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "dirname", ",", "\"{}.pt\"", ".", "format", "(", "attr", ")", ")", ",", "map_location", "\n", ")", "\n", ")", "\n", "", "", "ancestors", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.AsyncAgent.process_idx": [[143, 150], ["None"], "methods", ["None"], ["@", "abstractproperty", "\n", "def", "process_idx", "(", "self", ")", "->", "Optional", "[", "int", "]", ":", "\n", "        ", "\"\"\"Index of process as integer, 0 for the representative process.\n\n        The returned value can be None if it is not assgined yet.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.AsyncAgent.shared_attributes": [[151, 155], ["None"], "methods", ["None"], ["", "@", "abstractproperty", "\n", "def", "shared_attributes", "(", "self", ")", "->", "Tuple", "[", "str", ",", "...", "]", ":", "\n", "        ", "\"\"\"Tuple of names of shared attributes.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.BatchAgent.act": [[160, 162], ["agent.BatchAgent.batch_act"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.batch_act"], ["def", "act", "(", "self", ",", "obs", ":", "Any", ")", "->", "Any", ":", "\n", "        ", "return", "self", ".", "batch_act", "(", "[", "obs", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.BatchAgent.observe": [[164, 166], ["agent.BatchAgent.batch_observe"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.batch_observe"], ["", "def", "observe", "(", "self", ",", "obs", ":", "Any", ",", "reward", ":", "float", ",", "done", ":", "bool", ",", "reset", ":", "bool", ")", "->", "None", ":", "\n", "        ", "self", ".", "batch_observe", "(", "[", "obs", "]", ",", "[", "reward", "]", ",", "[", "done", "]", ",", "[", "reset", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.BatchAgent.batch_act": [[167, 178], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "batch_act", "(", "self", ",", "batch_obs", ":", "Sequence", "[", "Any", "]", ")", "->", "Sequence", "[", "Any", "]", ":", "\n", "        ", "\"\"\"Select a batch of actions.\n\n        Args:\n            batch_obs (Sequence of ~object): Observations.\n\n        Returns:\n            Sequence of ~object: Actions.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.BatchAgent.batch_observe": [[179, 202], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "batch_observe", "(", "\n", "self", ",", "\n", "batch_obs", ":", "Sequence", "[", "Any", "]", ",", "\n", "batch_reward", ":", "Sequence", "[", "float", "]", ",", "\n", "batch_done", ":", "Sequence", "[", "bool", "]", ",", "\n", "batch_reset", ":", "Sequence", "[", "bool", "]", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"Observe a batch of action consequences.\n\n        Args:\n            batch_obs (Sequence of ~object): Observations.\n            batch_reward (Sequence of float): Rewards.\n            batch_done (Sequence of boolean): Boolean values where True\n                indicates the current state is terminal.\n            batch_reset (Sequence of boolean): Boolean values where True\n                indicates the current episode will be reset, even if the\n                current state is not terminal.\n\n        Returns:\n            None\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.AbstractReplayBuffer.append": [[22, 48], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "append", "(", "\n", "self", ",", "\n", "state", ",", "\n", "action", ",", "\n", "reward", ",", "\n", "next_state", "=", "None", ",", "\n", "next_action", "=", "None", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", "env_id", "=", "0", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Append a transition to this replay buffer.\n\n        Args:\n            state: s_t\n            action: a_t\n            reward: r_t\n            next_state: s_{t+1} (can be None if terminal)\n            next_action: a_{t+1} (can be None for off-policy algorithms)\n            is_state_terminal (bool)\n            env_id (object): Object that is unique to each env. It indicates\n                which env a given transition came from in multi-env training.\n            **kwargs: Any other information to store.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.AbstractReplayBuffer.sample": [[49, 59], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "sample", "(", "self", ",", "n", ")", ":", "\n", "        ", "\"\"\"Sample n unique transitions from this replay buffer.\n\n        Args:\n            n (int): Number of transitions to sample.\n        Returns:\n            Sequence of n sampled transitions.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.AbstractReplayBuffer.__len__": [[60, 68], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the number of transitions in the buffer.\n\n        Returns:\n            Number of transitions in the buffer.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.AbstractReplayBuffer.save": [[69, 77], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "\"\"\"Save the content of the buffer to a file.\n\n        Args:\n            filename (str): Path to a file.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.AbstractReplayBuffer.load": [[78, 86], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "        ", "\"\"\"Load the content of the buffer from a file.\n\n        Args:\n            filename (str): Path to a file.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.AbstractReplayBuffer.capacity": [[87, 95], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abstractmethod", "\n", "def", "capacity", "(", "self", ")", "->", "Optional", "[", "int", "]", ":", "\n", "        ", "\"\"\"Returns the capacity of the buffer in number of transitions.\n\n        If unbounded, returns None instead.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.AbstractReplayBuffer.stop_current_episode": [[96, 115], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "stop_current_episode", "(", "self", ",", "env_id", "=", "0", ")", ":", "\n", "        ", "\"\"\"Notify the buffer that the current episode is interrupted.\n\n        You may want to interrupt the current episode and start a new one\n        before observing a terminal state. This is typical in continuing envs.\n        In such cases, you need to call this method before appending a new\n        transition so that the buffer will treat it as an initial transition of\n        a new episode.\n\n        This method should not be called after an episode whose termination is\n        already notified by appending a transition with is_state_terminal=True.\n\n        Args:\n            env_id (object): Object that is unique to each env. It indicates\n                which env's current episode is interrupted in multi-env\n                training.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.AbstractEpisodicReplayBuffer.sample_episodes": [[123, 138], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "sample_episodes", "(", "self", ",", "n_episodes", ",", "max_len", "=", "None", ")", ":", "\n", "        ", "\"\"\"Sample n unique (sub)episodes from this replay buffer.\n\n        Args:\n            n (int): Number of episodes to sample.\n            max_len (int or None): Maximum length of sampled episodes. If it is\n                smaller than the length of some episode, the subsequence of the\n                episode is sampled instead. If None, full episodes are always\n                returned.\n        Returns:\n            Sequence of n sampled episodes, each of which is a sequence of\n            transitions.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.AbstractEpisodicReplayBuffer.n_episodes": [[139, 147], ["None"], "methods", ["None"], ["", "@", "abstractproperty", "\n", "def", "n_episodes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the number of episodes in the buffer.\n\n        Returns:\n            Number of episodes in the buffer.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.ReplayUpdater.__init__": [[314, 335], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "replay_buffer", ",", "\n", "update_func", ",", "\n", "batchsize", ",", "\n", "episodic_update", ",", "\n", "n_times_update", ",", "\n", "replay_start_size", ",", "\n", "update_interval", ",", "\n", "episodic_update_len", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "assert", "batchsize", "<=", "replay_start_size", "\n", "self", ".", "replay_buffer", "=", "replay_buffer", "\n", "self", ".", "update_func", "=", "update_func", "\n", "self", ".", "batchsize", "=", "batchsize", "\n", "self", ".", "episodic_update", "=", "episodic_update", "\n", "self", ".", "episodic_update_len", "=", "episodic_update_len", "\n", "self", ".", "n_times_update", "=", "n_times_update", "\n", "self", ".", "replay_start_size", "=", "replay_start_size", "\n", "self", ".", "update_interval", "=", "update_interval", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.ReplayUpdater.update_if_necessary": [[336, 369], ["range", "len", "replay_buffer.ReplayUpdater.replay_buffer.sample_episodes", "replay_buffer.ReplayUpdater.update_func", "replay_buffer.ReplayUpdater.replay_buffer.sample", "replay_buffer.ReplayUpdater.update_func"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized_episodic.PrioritizedEpisodicReplayBuffer.sample_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "def", "update_if_necessary", "(", "self", ",", "iteration", ")", ":", "\n", "        ", "\"\"\"Update the model if the condition is met.\n\n        Args:\n            iteration (int): Timestep.\n\n        Returns:\n            bool: True iff the condition was updated this time.\n        \"\"\"", "\n", "# \u5224\u65ad\u662f\u5426\u5f00\u59cb\u901a\u8fc7replay_buffer\u8fdb\u884c\u8bad\u7ec3,\u5176\u4e2dlen(self.replay_buffer)\u4e3a\u5f53\u524d\u6b65\u957f", "\n", "if", "len", "(", "self", ".", "replay_buffer", ")", "<", "self", ".", "replay_start_size", ":", "\n", "            ", "return", "False", "\n", "\n", "# \u53ef\u4ee5\u5ffd\u89c6\u8be5\u6761\u4ef6", "\n", "", "if", "self", ".", "episodic_update", "and", "self", ".", "replay_buffer", ".", "n_episodes", "<", "self", ".", "batchsize", ":", "\n", "            ", "return", "False", "\n", "\n", "# \u53ef\u4ee5\u5ffd\u89c6\u8be5\u6761\u4ef6", "\n", "", "if", "iteration", "%", "self", ".", "update_interval", "!=", "0", ":", "\n", "            ", "return", "False", "\n", "\n", "", "for", "_", "in", "range", "(", "self", ".", "n_times_update", ")", ":", "\n", "            ", "if", "self", ".", "episodic_update", ":", "\n", "                ", "episodes", "=", "self", ".", "replay_buffer", ".", "sample_episodes", "(", "\n", "self", ".", "batchsize", ",", "self", ".", "episodic_update_len", "\n", ")", "\n", "self", ".", "update_func", "(", "episodes", ")", "\n", "", "else", ":", "\n", "# transitions\u4e3a\u57fa\u4e8ebatch_experiences\u91c7\u6837", "\n", "                ", "transitions", "=", "self", ".", "replay_buffer", ".", "sample", "(", "self", ".", "batchsize", ")", "\n", "# print(\"transitions:\", len(transitions))", "\n", "self", ".", "update_func", "(", "transitions", ")", "\n", "", "", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.random_subseq": [[149, 155], ["len", "numpy.random.randint", "len"], "function", ["None"], ["", "", "def", "random_subseq", "(", "seq", ",", "subseq_len", ")", ":", "\n", "    ", "if", "len", "(", "seq", ")", "<=", "subseq_len", ":", "\n", "        ", "return", "seq", "\n", "", "else", ":", "\n", "        ", "i", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "seq", ")", "-", "subseq_len", "+", "1", ")", "\n", "return", "seq", "[", "i", ":", "i", "+", "subseq_len", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.batch_experiences": [[157, 219], ["torch.stack", "all", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "pfrl.utils.batch_states.batch_states", "pfrl.utils.batch_states.batch_states", "sum", "any", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "", "def", "batch_experiences", "(", "experiences", ",", "device", ",", "phi", ",", "gamma", ",", "batch_states", "=", "batch_states", ")", ":", "\n", "    ", "\"\"\"Takes a batch of k experiences each of which contains j\n\n    consecutive transitions and vectorizes them, where j is between 1 and n.\n\n    Args:\n        experiences: list of experiences. Each experience is a list\n            containing between 1 and n dicts containing\n              - state (object): State\n              - action (object): Action\n              - reward (float): Reward\n              - is_state_terminal (bool): True iff next state is terminal\n              - next_state (object): Next state\n        device : GPU or CPU the tensor should be placed on\n        phi : Preprocessing function\n        gamma: discount factor\n        batch_states: function that converts a list to a batch\n    Returns:\n        dict of batched transitions\n    \"\"\"", "\n", "\n", "# \u5728batch_exp\u5916\u90e8\u5bf9action\u8fdb\u884c\u5904\u7406", "\n", "action", "=", "[", "torch", ".", "as_tensor", "(", "elem", "[", "0", "]", "[", "'action'", "]", ",", "device", "=", "device", ")", "for", "elem", "in", "experiences", "]", "\n", "action", "=", "torch", ".", "stack", "(", "action", ")", "# \u5c06\u4e0a\u8ff0\u8bed\u53e5\u751f\u6210\u7684\u5217\u8868\u4e2d\u7684\u5143\u7d20\u62fc\u63a5\u6210\u4e00\u4e2atensor", "\n", "\n", "batch_exp", "=", "{", "\n", "# \"state\": batch_states([elem[0]['state'] for elem in experiences], device, phi),", "\n", "\"state\"", ":", "(", "[", "batch_states", "(", "elem", "[", "0", "]", "[", "'state'", "]", ",", "device", ",", "phi", ")", "for", "elem", "in", "experiences", "]", ")", ",", "\n", "\"action\"", ":", "action", ",", "\n", "# \"action\": ([torch.as_tensor(elem[0]['action'], device=device) for elem in experiences]),", "\n", "# \"action\": torch.as_tensor(", "\n", "#    [(elem[0]['action']) for elem in experiences], device=device", "\n", "# ),", "\n", "\"reward\"", ":", "torch", ".", "as_tensor", "(", "\n", "[", "\n", "sum", "(", "(", "gamma", "**", "i", ")", "*", "exp", "[", "i", "]", "[", "'reward'", "]", "for", "i", "in", "range", "(", "len", "(", "exp", ")", ")", ")", "\n", "for", "exp", "in", "experiences", "\n", "]", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "device", ",", "\n", ")", ",", "\n", "# \"next_state\": batch_states([elem[-1]['next_state'] for elem in experiences], device, phi),", "\n", "\"next_state\"", ":", "(", "[", "batch_states", "(", "elem", "[", "0", "]", "[", "'next_state'", "]", ",", "device", ",", "phi", ")", "for", "elem", "in", "experiences", "]", ")", ",", "\n", "\"is_state_terminal\"", ":", "torch", ".", "as_tensor", "(", "\n", "[", "\n", "any", "(", "transition", "[", "'is_state_terminal'", "]", "for", "transition", "in", "exp", ")", "\n", "for", "exp", "in", "experiences", "\n", "]", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "device", ",", "\n", ")", ",", "\n", "\"discount\"", ":", "torch", ".", "as_tensor", "(", "\n", "[", "(", "gamma", "**", "len", "(", "elem", ")", ")", "for", "elem", "in", "experiences", "]", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "device", ",", "\n", ")", ",", "\n", "}", "\n", "if", "all", "(", "elem", "[", "-", "1", "]", "[", "'next_action'", "]", "is", "not", "None", "for", "elem", "in", "experiences", ")", ":", "\n", "        ", "batch_exp", "[", "'next_action'", "]", "=", "torch", ".", "as_tensor", "(", "\n", "[", "elem", "[", "-", "1", "]", "[", "'next_action'", "]", "for", "elem", "in", "experiences", "]", ",", "device", "=", "device", "\n", ")", "\n", "", "return", "batch_exp", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer._is_sorted_desc_by_lengths": [[221, 223], ["all", "len", "len", "zip"], "function", ["None"], ["", "def", "_is_sorted_desc_by_lengths", "(", "lst", ")", ":", "\n", "    ", "return", "all", "(", "len", "(", "a", ")", ">=", "len", "(", "b", ")", "for", "a", ",", "b", "in", "zip", "(", "lst", ",", "lst", "[", "1", ":", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.batch_recurrent_experiences": [[225, 294], ["replay_buffer._is_sorted_desc_by_lengths", "pfrl.utils.recurrent.flatten_sequences_time_first", "all", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.full", "pfrl.utils.recurrent.recurrent_state_from_numpy", "pfrl.utils.recurrent.recurrent_state_from_numpy", "torch.as_tensor", "pfrl.utils.batch_states.batch_states", "pfrl.utils.batch_states.batch_states", "pfrl.utils.recurrent.concatenate_recurrent_states", "pfrl.utils.recurrent.concatenate_recurrent_states", "len"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer._is_sorted_desc_by_lengths", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.flatten_sequences_time_first", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.recurrent_state_from_numpy", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.recurrent_state_from_numpy", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.concatenate_recurrent_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.concatenate_recurrent_states"], ["", "def", "batch_recurrent_experiences", "(", "\n", "experiences", ",", "device", ",", "phi", ",", "gamma", ",", "batch_states", "=", "batch_states", "\n", ")", ":", "\n", "    ", "\"\"\"Batch experiences for recurrent model updates.\n\n    Args:\n        experiences: list of episodes. Each episode is a list\n            containing between 1 and n dicts, each containing:\n              - state (object): State\n              - action (object): Action\n              - reward (float): Reward\n              - is_state_terminal (bool): True iff next state is terminal\n              - next_state (object): Next state\n            The list must be sorted desc by lengths to be packed by\n            `torch.nn.rnn.pack_sequence` later.\n        device : GPU or CPU the tensor should be placed on\n        phi : Preprocessing function\n        gamma: discount factor\n        batch_states: function that converts a list to a batch\n    Returns:\n        dict of batched transitions\n    \"\"\"", "\n", "assert", "_is_sorted_desc_by_lengths", "(", "experiences", ")", "\n", "flat_transitions", "=", "flatten_sequences_time_first", "(", "experiences", ")", "\n", "batch_exp", "=", "{", "\n", "\"state\"", ":", "[", "\n", "batch_states", "(", "[", "transition", "[", "\"state\"", "]", "for", "transition", "in", "ep", "]", ",", "device", ",", "phi", ")", "\n", "for", "ep", "in", "experiences", "\n", "]", ",", "\n", "\"action\"", ":", "torch", ".", "as_tensor", "(", "\n", "[", "transition", "[", "\"action\"", "]", "for", "transition", "in", "flat_transitions", "]", ",", "device", "=", "device", "\n", ")", ",", "\n", "\"reward\"", ":", "torch", ".", "as_tensor", "(", "\n", "[", "transition", "[", "\"reward\"", "]", "for", "transition", "in", "flat_transitions", "]", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", "device", "=", "device", ",", "\n", ")", ",", "\n", "\"next_state\"", ":", "[", "\n", "batch_states", "(", "[", "transition", "[", "\"next_state\"", "]", "for", "transition", "in", "ep", "]", ",", "device", ",", "phi", ")", "\n", "for", "ep", "in", "experiences", "\n", "]", ",", "\n", "\"is_state_terminal\"", ":", "torch", ".", "as_tensor", "(", "\n", "[", "transition", "[", "\"is_state_terminal\"", "]", "for", "transition", "in", "flat_transitions", "]", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", "device", "=", "device", ",", "\n", ")", ",", "\n", "\"discount\"", ":", "torch", ".", "full", "(", "\n", "(", "len", "(", "flat_transitions", ")", ",", ")", ",", "gamma", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", "\n", ")", ",", "\n", "\"recurrent_state\"", ":", "recurrent_state_from_numpy", "(", "\n", "concatenate_recurrent_states", "(", "\n", "[", "ep", "[", "0", "]", "[", "\"recurrent_state\"", "]", "for", "ep", "in", "experiences", "]", "\n", ")", ",", "\n", "device", ",", "\n", ")", ",", "\n", "\"next_recurrent_state\"", ":", "recurrent_state_from_numpy", "(", "\n", "concatenate_recurrent_states", "(", "\n", "[", "ep", "[", "0", "]", "[", "\"next_recurrent_state\"", "]", "for", "ep", "in", "experiences", "]", "\n", ")", ",", "\n", "device", ",", "\n", ")", ",", "\n", "}", "\n", "# Batch next actions only when all the transitions have them", "\n", "if", "all", "(", "transition", "[", "\"next_action\"", "]", "is", "not", "None", "for", "transition", "in", "flat_transitions", ")", ":", "\n", "        ", "batch_exp", "[", "\"next_action\"", "]", "=", "torch", ".", "as_tensor", "(", "\n", "[", "transition", "[", "\"next_action\"", "]", "for", "transition", "in", "flat_transitions", "]", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "", "return", "batch_exp", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.explorer.Explorer.select_action": [[7, 17], ["NotImplementedError"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "select_action", "(", "self", ",", "t", ",", "greedy_action_func", ",", "action_value", "=", "None", ")", ":", "\n", "        ", "\"\"\"Select an action.\n\n        Args:\n          t: current time step\n          greedy_action_func: function with no argument that returns an action\n          action_value (ActionValue): ActionValue object\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing._as_numpy_recursive": [[5, 11], ["isinstance", "x.detach().cpu().numpy", "isinstance", "isinstance", "numpy.asarray", "x.detach().cpu", "testing._as_numpy_recursive", "x.detach"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing._as_numpy_recursive"], ["def", "_as_numpy_recursive", "(", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "isinstance", "(", "x", ",", "list", ")", "or", "isinstance", "(", "x", ",", "tuple", ")", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "[", "_as_numpy_recursive", "(", "y", ")", "for", "y", "in", "x", "]", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose": [[13, 24], ["testing._as_numpy_recursive", "testing._as_numpy_recursive", "numpy.testing.assert_allclose"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing._as_numpy_recursive", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing._as_numpy_recursive"], ["", "def", "torch_assert_allclose", "(", "actual", ",", "desired", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Assert two objects are equal up to desired tolerance.\n\n    This function can be used as a replacement of\n    `numpy.testing.assert_allclose` except that lists, tuples, and\n    `torch.Tensor`s are converted to `numpy.ndarray`s automatically before\n    comparison.\n    \"\"\"", "\n", "actual", "=", "_as_numpy_recursive", "(", "actual", ")", "\n", "desired", "=", "_as_numpy_recursive", "(", "desired", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "actual", ",", "desired", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.q_function.StateQFunction.__call__": [[7, 19], ["NotImplementedError"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Evaluates Q-function\n\n        Args:\n            x (ndarray): state input\n\n        Returns:\n            An instance of ActionValue that allows to calculate the Q-values\n            for state x and every possible action\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.q_function.StateActionQFunction.__call__": [[24, 36], ["NotImplementedError"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "__call__", "(", "self", ",", "x", ",", "a", ")", ":", "\n", "        ", "\"\"\"Evaluates Q-function\n\n        Args:\n            x (ndarray): state input\n            a (ndarray): action input\n\n        Returns:\n            Q-value for state x and action a\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.env.Env.step": [[10, 13], ["NotImplementedError"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.env.Env.reset": [[14, 17], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.env.Env.close": [[18, 21], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "close", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.env.VectorEnv.step": [[26, 29], ["NotImplementedError"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.env.VectorEnv.reset": [[30, 39], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "reset", "(", "self", ",", "mask", ")", ":", "\n", "        ", "\"\"\"Reset envs.\n\n        Args:\n            mask (Sequence of bool): Mask array that specifies which env to\n                skip. If omitted, all the envs are reset.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.env.VectorEnv.seed": [[40, 43], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "seed", "(", "self", ",", "seeds", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.env.VectorEnv.close": [[44, 47], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "close", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.env.VectorEnv.unwrapped": [[48, 56], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "unwrapped", "(", "self", ")", ":", "\n", "        ", "\"\"\"Completely unwrap this env.\n\n        Returns:\n            VectorEnv: The base non-wrapped VectorEnv instance\n        \"\"\"", "\n", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.tools.plot_scores.main": [[10, 40], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "zip", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.savefig", "print", "len", "len", "len", "os.path.isdir", "os.path.exists", "pandas.read_csv", "matplotlib.plot", "matplotlib.title", "os.path.join"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--title'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--file'", ",", "action", "=", "'append'", ",", "dest", "=", "'files'", ",", "\n", "default", "=", "[", "]", ",", "type", "=", "str", ",", "\n", "help", "=", "'specify paths of scores.txt'", ")", "\n", "parser", ".", "add_argument", "(", "'--label'", ",", "action", "=", "'append'", ",", "dest", "=", "'labels'", ",", "\n", "default", "=", "[", "]", ",", "type", "=", "str", ",", "\n", "help", "=", "'specify labels for scores.txt files'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "assert", "len", "(", "args", ".", "files", ")", ">", "0", "\n", "assert", "len", "(", "args", ".", "labels", ")", "==", "len", "(", "args", ".", "files", ")", "\n", "\n", "for", "fpath", ",", "label", "in", "zip", "(", "args", ".", "files", ",", "args", ".", "labels", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "fpath", ")", ":", "\n", "            ", "fpath", "=", "os", ".", "path", ".", "join", "(", "fpath", ",", "'scores.txt'", ")", "\n", "", "assert", "os", ".", "path", ".", "exists", "(", "fpath", ")", "\n", "scores", "=", "pd", ".", "read_csv", "(", "fpath", ",", "delimiter", "=", "'\\t'", ")", "\n", "plt", ".", "plot", "(", "scores", "[", "'steps'", "]", ",", "scores", "[", "'mean'", "]", ",", "label", "=", "label", ")", "\n", "\n", "", "plt", ".", "xlabel", "(", "'steps'", ")", "\n", "plt", ".", "ylabel", "(", "'score'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'best'", ")", "\n", "if", "args", ".", "title", ":", "\n", "        ", "plt", ".", "title", "(", "args", ".", "title", ")", "\n", "\n", "", "fig_fname", "=", "args", ".", "files", "[", "0", "]", "+", "args", ".", "title", "+", "'.png'", "\n", "plt", ".", "savefig", "(", "fig_fname", ")", "\n", "print", "(", "'Saved a figure as {}'", ".", "format", "(", "fig_fname", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slimevolley.train_rainbow.MultiBinaryAsDiscreteAction.__init__": [[26, 31], ["gym.ActionWrapper.__init__", "gym.ActionWrapper.__init__", "isinstance", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "assert", "isinstance", "(", "env", ".", "action_space", ",", "gym", ".", "spaces", ".", "MultiBinary", ")", "\n", "self", ".", "orig_action_space", "=", "env", ".", "action_space", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "2", "**", "env", ".", "action_space", ".", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slimevolley.train_rainbow.MultiBinaryAsDiscreteAction.action": [[32, 34], ["range"], "methods", ["None"], ["", "def", "action", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "[", "(", "action", ">>", "i", ")", "%", "2", "for", "i", "in", "range", "(", "self", ".", "orig_action_space", ".", "n", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slimevolley.train_rainbow.DistributionalDuelingHead.__init__": [[50, 60], ["torch.nn.Module.__init__", "train_rainbow.DistributionalDuelingHead.register_buffer", "torch.nn.Linear", "torch.nn.Linear", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "in_size", ",", "n_actions", ",", "n_atoms", ",", "v_min", ",", "v_max", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "in_size", "%", "2", "==", "0", "\n", "self", ".", "n_actions", "=", "n_actions", "\n", "self", ".", "n_atoms", "=", "n_atoms", "\n", "self", ".", "register_buffer", "(", "\n", "\"z_values\"", ",", "torch", ".", "linspace", "(", "v_min", ",", "v_max", ",", "n_atoms", ",", "dtype", "=", "torch", ".", "float", ")", "\n", ")", "\n", "self", ".", "a_stream", "=", "nn", ".", "Linear", "(", "in_size", "//", "2", ",", "n_actions", "*", "n_atoms", ")", "\n", "self", ".", "v_stream", "=", "nn", ".", "Linear", "(", "in_size", "//", "2", ",", "n_atoms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slimevolley.train_rainbow.DistributionalDuelingHead.forward": [[61, 68], ["torch.chunk", "train_rainbow.DistributionalDuelingHead.a_stream().reshape", "train_rainbow.DistributionalDuelingHead.v_stream().reshape", "torch.nn.functional.softmax", "pfrl.action_value.DistributionalDiscreteActionValue", "train_rainbow.DistributionalDuelingHead.mean", "train_rainbow.DistributionalDuelingHead.a_stream", "train_rainbow.DistributionalDuelingHead.v_stream"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["", "def", "forward", "(", "self", ",", "h", ")", ":", "\n", "        ", "h_a", ",", "h_v", "=", "torch", ".", "chunk", "(", "h", ",", "2", ",", "dim", "=", "1", ")", "\n", "a_logits", "=", "self", ".", "a_stream", "(", "h_a", ")", ".", "reshape", "(", "(", "-", "1", ",", "self", ".", "n_actions", ",", "self", ".", "n_atoms", ")", ")", "\n", "a_logits", "=", "a_logits", "-", "a_logits", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "v_logits", "=", "self", ".", "v_stream", "(", "h_v", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "self", ".", "n_atoms", ")", ")", "\n", "probs", "=", "nn", ".", "functional", ".", "softmax", "(", "a_logits", "+", "v_logits", ",", "dim", "=", "2", ")", "\n", "return", "pfrl", ".", "action_value", ".", "DistributionalDiscreteActionValue", "(", "probs", ",", "self", ".", "z_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.slimevolley.train_rainbow.main": [[70, 238], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "pfrl.utils.set_random_seed", "pfrl.experiments.prepare_output_dir", "print", "train_rainbow.main.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--env\"", ",", "type", "=", "str", ",", "default", "=", "\"SlimeVolley-v0\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 32)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--demo\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--noisy-net-sigma\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "\"--steps\"", ",", "type", "=", "int", ",", "default", "=", "2", "*", "10", "**", "6", ")", "\n", "parser", ".", "add_argument", "(", "\"--replay-start-size\"", ",", "type", "=", "int", ",", "default", "=", "1600", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-n-episodes\"", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-interval\"", ",", "type", "=", "int", ",", "default", "=", "250000", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "20", ",", "\n", "help", "=", "\"Logging level. 10:DEBUG, 20:INFO etc.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--render\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Render env states in a GUI window.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--monitor\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "(", "\n", "\"Monitor env. Videos and additional information are saved as output files.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--gamma\"", ",", "type", "=", "float", ",", "default", "=", "0.98", ")", "\n", "parser", ".", "add_argument", "(", "\"--v-max\"", ",", "type", "=", "float", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--n-step-return\"", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "import", "logging", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "args", ".", "log_level", ")", "\n", "\n", "# Set a random seed used in PFRL.", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Set different random seeds for train and test envs.", "\n", "train_seed", "=", "args", ".", "seed", "\n", "test_seed", "=", "2", "**", "31", "-", "1", "-", "args", ".", "seed", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ")", "\n", "print", "(", "\"Output files are saved in {}\"", ".", "format", "(", "args", ".", "outdir", ")", ")", "\n", "\n", "def", "make_env", "(", "test", ")", ":", "\n", "        ", "if", "\"SlimeVolley\"", "in", "args", ".", "env", ":", "\n", "# You need to install slimevolleygym", "\n", "            ", "import", "slimevolleygym", "# NOQA", "\n", "\n", "", "env", "=", "gym", ".", "make", "(", "args", ".", "env", ")", "\n", "# Use different random seeds for train and test envs", "\n", "env_seed", "=", "test_seed", "if", "test", "else", "train_seed", "\n", "env", ".", "seed", "(", "int", "(", "env_seed", ")", ")", "\n", "if", "args", ".", "monitor", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Monitor", "(", "\n", "env", ",", "args", ".", "outdir", ",", "mode", "=", "\"evaluation\"", "if", "test", "else", "\"training\"", "\n", ")", "\n", "", "if", "args", ".", "render", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ")", "\n", "", "if", "isinstance", "(", "env", ".", "action_space", ",", "gym", ".", "spaces", ".", "MultiBinary", ")", ":", "\n", "            ", "env", "=", "MultiBinaryAsDiscreteAction", "(", "env", ")", "\n", "", "return", "env", "\n", "\n", "", "env", "=", "make_env", "(", "test", "=", "False", ")", "\n", "eval_env", "=", "make_env", "(", "test", "=", "True", ")", "\n", "\n", "obs_size", "=", "env", ".", "observation_space", ".", "low", ".", "size", "\n", "n_actions", "=", "env", ".", "action_space", ".", "n", "\n", "\n", "n_atoms", "=", "51", "\n", "v_max", "=", "args", ".", "v_max", "\n", "v_min", "=", "-", "args", ".", "v_max", "\n", "hidden_size", "=", "512", "\n", "q_func", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "DistributionalDuelingHead", "(", "hidden_size", ",", "n_actions", ",", "n_atoms", ",", "v_min", ",", "v_max", ")", ",", "\n", ")", "\n", "\n", "def", "phi", "(", "x", ")", ":", "\n", "# Feature extractor", "\n", "        ", "return", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Noisy nets", "\n", "", "pnn", ".", "to_factorized_noisy", "(", "q_func", ",", "sigma_scale", "=", "args", ".", "noisy_net_sigma", ")", "\n", "# Turn off explorer", "\n", "explorer", "=", "explorers", ".", "Greedy", "(", ")", "\n", "\n", "# Use the same eps as https://arxiv.org/abs/1710.02298", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "q_func", ".", "parameters", "(", ")", ",", "1e-4", ",", "eps", "=", "1.5e-4", ")", "\n", "\n", "# Prioritized Replay", "\n", "# Anneal beta from beta0 to 1 throughout training", "\n", "update_interval", "=", "1", "\n", "betasteps", "=", "args", ".", "steps", "/", "update_interval", "\n", "rbuf", "=", "replay_buffers", ".", "PrioritizedReplayBuffer", "(", "\n", "10", "**", "6", ",", "\n", "alpha", "=", "0.5", ",", "\n", "beta0", "=", "0.4", ",", "\n", "betasteps", "=", "betasteps", ",", "\n", "num_steps", "=", "args", ".", "n_step_return", ",", "\n", "normalize_by_max", "=", "\"memory\"", ",", "\n", ")", "\n", "\n", "agent", "=", "agents", ".", "CategoricalDoubleDQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "gamma", "=", "args", ".", "gamma", ",", "\n", "explorer", "=", "explorer", ",", "\n", "minibatch_size", "=", "32", ",", "\n", "replay_start_size", "=", "args", ".", "replay_start_size", ",", "\n", "target_update_interval", "=", "2000", ",", "\n", "update_interval", "=", "update_interval", ",", "\n", "batch_accumulator", "=", "\"mean\"", ",", "\n", "phi", "=", "phi", ",", "\n", "max_grad_norm", "=", "10", ",", "\n", ")", "\n", "\n", "if", "args", ".", "load", ":", "\n", "        ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "\n", "", "if", "args", ".", "demo", ":", "\n", "        ", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "eval_env", ",", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "args", ".", "eval_n_episodes", ",", "\n", ")", "\n", "print", "(", "\n", "\"n_episodes: {} mean: {} median: {} stdev {}\"", ".", "format", "(", "\n", "eval_stats", "[", "\"episodes\"", "]", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "experiments", ".", "train_agent_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "args", ".", "eval_n_episodes", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "save_best_so_far_agent", "=", "True", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.trpo.train_trpo.main": [[18, 229], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "pfrl.utils.set_random_seed", "pfrl.experiments.prepare_output_dir", "train_trpo.main.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"GPU device ID. Set to -1 to use CPUs only.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--env\"", ",", "type", "=", "str", ",", "default", "=", "\"Hopper-v2\"", ",", "help", "=", "\"Gym Env ID\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 32)\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--steps\"", ",", "type", "=", "int", ",", "default", "=", "2", "*", "10", "**", "6", ",", "help", "=", "\"Total time steps for training.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100000", ",", "\n", "help", "=", "\"Interval between evaluation phases in steps.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-n-runs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "\"Number of episodes ran in an evaluation phase\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--render\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"Render the env\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--demo\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Run demo episodes, not training\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--load-pretrained\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pretrained-type\"", ",", "type", "=", "str", ",", "default", "=", "\"best\"", ",", "choices", "=", "[", "\"best\"", ",", "\"final\"", "]", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--load\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to load a saved agent data from\"", "\n", "\" if it is a non-empty string.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--trpo-update-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5000", ",", "\n", "help", "=", "\"Interval steps of TRPO iterations.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "type", "=", "int", ",", "default", "=", "logging", ".", "INFO", ",", "help", "=", "\"Level of the root logger.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--monitor\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "(", "\n", "\"Monitor the env by gym.wrappers.Monitor.\"", "\n", "\" Videos and additional log will be saved.\"", "\n", ")", ",", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "args", ".", "log_level", ")", "\n", "\n", "# Set random seed", "\n", "pfrl", ".", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "args", ".", "outdir", "=", "pfrl", ".", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ")", "\n", "\n", "def", "make_env", "(", "test", ")", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "args", ".", "env", ")", "\n", "# Use different random seeds for train and test envs", "\n", "env_seed", "=", "2", "**", "32", "-", "1", "-", "args", ".", "seed", "if", "test", "else", "args", ".", "seed", "\n", "env", ".", "seed", "(", "env_seed", ")", "\n", "# Cast observations to float32 because our model uses float32", "\n", "env", "=", "pfrl", ".", "wrappers", ".", "CastObservationToFloat32", "(", "env", ")", "\n", "if", "args", ".", "monitor", ":", "\n", "            ", "env", "=", "gym", ".", "wrappers", ".", "Monitor", "(", "env", ",", "args", ".", "outdir", ")", "\n", "", "if", "args", ".", "render", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ")", "\n", "", "return", "env", "\n", "\n", "", "env", "=", "make_env", "(", "test", "=", "False", ")", "\n", "timestep_limit", "=", "env", ".", "spec", ".", "max_episode_steps", "\n", "obs_space", "=", "env", ".", "observation_space", "\n", "action_space", "=", "env", ".", "action_space", "\n", "print", "(", "\"Observation space:\"", ",", "obs_space", ")", "\n", "print", "(", "\"Action space:\"", ",", "action_space", ")", "\n", "\n", "assert", "isinstance", "(", "obs_space", ",", "gym", ".", "spaces", ".", "Box", ")", "\n", "\n", "# Normalize observations based on their empirical mean and variance", "\n", "obs_normalizer", "=", "pfrl", ".", "nn", ".", "EmpiricalNormalization", "(", "\n", "obs_space", ".", "low", ".", "size", ",", "clip_threshold", "=", "5", "\n", ")", "\n", "\n", "obs_size", "=", "obs_space", ".", "low", ".", "size", "\n", "action_size", "=", "action_space", ".", "low", ".", "size", "\n", "policy", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "action_size", ")", ",", "\n", "pfrl", ".", "policies", ".", "GaussianHeadWithStateIndependentCovariance", "(", "\n", "action_size", "=", "action_size", ",", "\n", "var_type", "=", "\"diagonal\"", ",", "\n", "var_func", "=", "lambda", "x", ":", "torch", ".", "exp", "(", "2", "*", "x", ")", ",", "# Parameterize log std", "\n", "var_param_init", "=", "0", ",", "# log std = 0 => std = 1", "\n", ")", ",", "\n", ")", "\n", "\n", "vf", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "1", ")", ",", "\n", ")", "\n", "\n", "# While the original paper initialized weights by normal distribution,", "\n", "# we use orthogonal initialization as the latest openai/baselines does.", "\n", "def", "ortho_init", "(", "layer", ",", "gain", ")", ":", "\n", "        ", "nn", ".", "init", ".", "orthogonal_", "(", "layer", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "bias", ")", "\n", "\n", "", "ortho_init", "(", "policy", "[", "0", "]", ",", "gain", "=", "1", ")", "\n", "ortho_init", "(", "policy", "[", "2", "]", ",", "gain", "=", "1", ")", "\n", "ortho_init", "(", "policy", "[", "4", "]", ",", "gain", "=", "1e-2", ")", "\n", "ortho_init", "(", "vf", "[", "0", "]", ",", "gain", "=", "1", ")", "\n", "ortho_init", "(", "vf", "[", "2", "]", ",", "gain", "=", "1", ")", "\n", "ortho_init", "(", "vf", "[", "4", "]", ",", "gain", "=", "1e-2", ")", "\n", "\n", "# TRPO's policy is optimized via CG and line search, so it doesn't require", "\n", "# an Optimizer. Only the value function needs it.", "\n", "vf_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "vf", ".", "parameters", "(", ")", ")", "\n", "\n", "# Hyperparameters in http://arxiv.org/abs/1709.06560", "\n", "agent", "=", "pfrl", ".", "agents", ".", "TRPO", "(", "\n", "policy", "=", "policy", ",", "\n", "vf", "=", "vf", ",", "\n", "vf_optimizer", "=", "vf_opt", ",", "\n", "obs_normalizer", "=", "obs_normalizer", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "update_interval", "=", "args", ".", "trpo_update_interval", ",", "\n", "max_kl", "=", "0.01", ",", "\n", "conjugate_gradient_max_iter", "=", "20", ",", "\n", "conjugate_gradient_damping", "=", "1e-1", ",", "\n", "gamma", "=", "0.995", ",", "\n", "lambd", "=", "0.97", ",", "\n", "vf_epochs", "=", "5", ",", "\n", "entropy_coef", "=", "0", ",", "\n", ")", "\n", "\n", "if", "args", ".", "load", "or", "args", ".", "load_pretrained", ":", "\n", "# either load or load_pretrained must be false", "\n", "        ", "assert", "not", "args", ".", "load", "or", "not", "args", ".", "load_pretrained", "\n", "if", "args", ".", "load", ":", "\n", "            ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "", "else", ":", "\n", "            ", "agent", ".", "load", "(", "\n", "pfrl", ".", "utils", ".", "download_model", "(", "\n", "\"TRPO\"", ",", "args", ".", "env", ",", "model_type", "=", "args", ".", "pretrained_type", "\n", ")", "[", "0", "]", "\n", ")", "\n", "\n", "", "", "if", "args", ".", "demo", ":", "\n", "        ", "env", "=", "make_env", "(", "test", "=", "True", ")", "\n", "eval_stats", "=", "pfrl", ".", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "env", ",", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "max_episode_len", "=", "timestep_limit", ",", "\n", ")", "\n", "print", "(", "\n", "\"n_runs: {} mean: {} median: {} stdev {}\"", ".", "format", "(", "\n", "args", ".", "eval_n_runs", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "import", "json", "\n", "import", "os", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "outdir", ",", "\"demo_scores.json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "eval_stats", ",", "f", ")", "\n", "", "", "else", ":", "\n", "\n", "        ", "pfrl", ".", "experiments", ".", "train_agent_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "eval_env", "=", "make_env", "(", "test", "=", "True", ")", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "train_max_episode_len", "=", "timestep_limit", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.td3.train_td3.main": [[21, 222], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "pfrl.experiments.prepare_output_dir", "print", "pfrl.utils.set_random_seed", "train_td3.main.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--env\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"Hopper-v2\"", ",", "\n", "help", "=", "\"OpenAI Gym MuJoCo env to perform algorithm on.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 32)\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"GPU to use, set to -1 if no GPU.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Directory to load agent from.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--steps\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", "**", "6", ",", "\n", "help", "=", "\"Total number of timesteps to train the agent.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-n-runs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "\"Number of episodes run for each evaluation.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5000", ",", "\n", "help", "=", "\"Interval in timesteps between evaluations.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--replay-start-size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10000", ",", "\n", "help", "=", "\"Minimum replay buffer size before \"", "+", "\"performing gradient updates.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "\"Minibatch size\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--render\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Render env states in a GUI window.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--demo\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Just run evaluation, not training.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--load-pretrained\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pretrained-type\"", ",", "type", "=", "str", ",", "default", "=", "\"best\"", ",", "choices", "=", "[", "\"best\"", ",", "\"final\"", "]", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--monitor\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Wrap env with gym.wrappers.Monitor.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "type", "=", "int", ",", "default", "=", "logging", ".", "INFO", ",", "help", "=", "\"Level of the root logger.\"", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "args", ".", "log_level", ")", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ",", "argv", "=", "sys", ".", "argv", ")", "\n", "print", "(", "\"Output files are saved in {}\"", ".", "format", "(", "args", ".", "outdir", ")", ")", "\n", "\n", "# Set a random seed used in PFRL", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "def", "make_env", "(", "test", ")", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "args", ".", "env", ")", "\n", "# Unwrap TimeLimit wrapper", "\n", "assert", "isinstance", "(", "env", ",", "gym", ".", "wrappers", ".", "TimeLimit", ")", "\n", "env", "=", "env", ".", "env", "\n", "# Use different random seeds for train and test envs", "\n", "env_seed", "=", "2", "**", "32", "-", "1", "-", "args", ".", "seed", "if", "test", "else", "args", ".", "seed", "\n", "env", ".", "seed", "(", "env_seed", ")", "\n", "# Cast observations to float32 because our model uses float32", "\n", "env", "=", "pfrl", ".", "wrappers", ".", "CastObservationToFloat32", "(", "env", ")", "\n", "if", "args", ".", "monitor", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Monitor", "(", "env", ",", "args", ".", "outdir", ")", "\n", "", "if", "args", ".", "render", "and", "not", "test", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ")", "\n", "", "return", "env", "\n", "\n", "", "env", "=", "make_env", "(", "test", "=", "False", ")", "\n", "timestep_limit", "=", "env", ".", "spec", ".", "max_episode_steps", "\n", "obs_space", "=", "env", ".", "observation_space", "\n", "action_space", "=", "env", ".", "action_space", "\n", "print", "(", "\"Observation space:\"", ",", "obs_space", ")", "\n", "print", "(", "\"Action space:\"", ",", "action_space", ")", "\n", "\n", "obs_size", "=", "obs_space", ".", "low", ".", "size", "\n", "action_size", "=", "action_space", ".", "low", ".", "size", "\n", "\n", "policy", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "400", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "400", ",", "300", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "300", ",", "action_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "pfrl", ".", "policies", ".", "DeterministicHead", "(", ")", ",", "\n", ")", "\n", "policy_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "policy", ".", "parameters", "(", ")", ")", "\n", "\n", "def", "make_q_func_with_optimizer", "(", ")", ":", "\n", "        ", "q_func", "=", "nn", ".", "Sequential", "(", "\n", "pfrl", ".", "nn", ".", "ConcatObsAndAction", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "obs_size", "+", "action_size", ",", "400", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "400", ",", "300", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "300", ",", "1", ")", ",", "\n", ")", "\n", "q_func_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "q_func", ".", "parameters", "(", ")", ")", "\n", "return", "q_func", ",", "q_func_optimizer", "\n", "\n", "", "q_func1", ",", "q_func1_optimizer", "=", "make_q_func_with_optimizer", "(", ")", "\n", "q_func2", ",", "q_func2_optimizer", "=", "make_q_func_with_optimizer", "(", ")", "\n", "\n", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "10", "**", "6", ")", "\n", "\n", "explorer", "=", "explorers", ".", "AdditiveGaussian", "(", "\n", "scale", "=", "0.1", ",", "low", "=", "action_space", ".", "low", ",", "high", "=", "action_space", ".", "high", "\n", ")", "\n", "\n", "def", "burnin_action_func", "(", ")", ":", "\n", "        ", "\"\"\"Select random actions until model is updated one or more times.\"\"\"", "\n", "return", "np", ".", "random", ".", "uniform", "(", "action_space", ".", "low", ",", "action_space", ".", "high", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Hyperparameters in http://arxiv.org/abs/1802.09477", "\n", "", "agent", "=", "pfrl", ".", "agents", ".", "TD3", "(", "\n", "policy", ",", "\n", "q_func1", ",", "\n", "q_func2", ",", "\n", "policy_optimizer", ",", "\n", "q_func1_optimizer", ",", "\n", "q_func2_optimizer", ",", "\n", "rbuf", ",", "\n", "gamma", "=", "0.99", ",", "\n", "soft_update_tau", "=", "5e-3", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "args", ".", "replay_start_size", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "minibatch_size", "=", "args", ".", "batch_size", ",", "\n", "burnin_action_func", "=", "burnin_action_func", ",", "\n", ")", "\n", "\n", "if", "len", "(", "args", ".", "load", ")", ">", "0", "or", "args", ".", "load_pretrained", ":", "\n", "# either load or load_pretrained must be false", "\n", "        ", "assert", "not", "len", "(", "args", ".", "load", ")", ">", "0", "or", "not", "args", ".", "load_pretrained", "\n", "if", "len", "(", "args", ".", "load", ")", ">", "0", ":", "\n", "            ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "", "else", ":", "\n", "            ", "agent", ".", "load", "(", "\n", "utils", ".", "download_model", "(", "\"TD3\"", ",", "args", ".", "env", ",", "model_type", "=", "args", ".", "pretrained_type", ")", "[", "\n", "0", "\n", "]", "\n", ")", "\n", "\n", "", "", "eval_env", "=", "make_env", "(", "test", "=", "True", ")", "\n", "if", "args", ".", "demo", ":", "\n", "        ", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "eval_env", ",", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "max_episode_len", "=", "timestep_limit", ",", "\n", ")", "\n", "print", "(", "\n", "\"n_runs: {} mean: {} median: {} stdev {}\"", ".", "format", "(", "\n", "args", ".", "eval_n_runs", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "import", "json", "\n", "import", "os", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "outdir", ",", "\"demo_scores.json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "eval_stats", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "experiments", ".", "train_agent_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "train_max_episode_len", "=", "timestep_limit", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ppo.train_ppo.main": [[20, 251], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "pfrl.utils.set_random_seed", "pfrl.experiments.prepare_output_dir", "gym.make", "gym.make", "print", "print", "isinstance", "pfrl.nn.EmpiricalNormalization", "torch.nn.Sequential", "torch.nn.Sequential", "train_ppo.main.ortho_init"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir"], ["def", "main", "(", ")", ":", "\n", "    ", "import", "logging", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"GPU to use, set to -1 if no GPU.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--env\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"Hopper-v2\"", ",", "\n", "help", "=", "\"OpenAI Gym MuJoCo env to perform algorithm on.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num-envs\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Number of envs run in parallel.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 32)\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--steps\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "2", "*", "10", "**", "6", ",", "\n", "help", "=", "\"Total number of timesteps to train the agent.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100000", ",", "\n", "help", "=", "\"Interval in timesteps between evaluations.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-n-runs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "\"Number of episodes run for each evaluation.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--render\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Render env states in a GUI window.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--demo\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Just run evaluation, not training.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--load-pretrained\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Directory to load agent from.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "type", "=", "int", ",", "default", "=", "logging", ".", "INFO", ",", "help", "=", "\"Level of the root logger.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--monitor\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Wrap env with gym.wrappers.Monitor.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1000", ",", "\n", "help", "=", "\"Interval in timesteps between outputting log messages during training\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--update-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "2048", ",", "\n", "help", "=", "\"Interval in timesteps between model updates.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--epochs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "\"Number of epochs to update model for per PPO iteration.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "\"Minibatch size\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "args", ".", "log_level", ")", "\n", "\n", "# Set a random seed used in PFRL", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Set different random seeds for different subprocesses.", "\n", "# If seed=0 and processes=4, subprocess seeds are [0, 1, 2, 3].", "\n", "# If seed=1 and processes=4, subprocess seeds are [4, 5, 6, 7].", "\n", "process_seeds", "=", "np", ".", "arange", "(", "args", ".", "num_envs", ")", "+", "args", ".", "seed", "*", "args", ".", "num_envs", "\n", "assert", "process_seeds", ".", "max", "(", ")", "<", "2", "**", "32", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ")", "\n", "\n", "def", "make_env", "(", "process_idx", ",", "test", ")", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "args", ".", "env", ")", "\n", "# Use different random seeds for train and test envs", "\n", "process_seed", "=", "int", "(", "process_seeds", "[", "process_idx", "]", ")", "\n", "env_seed", "=", "2", "**", "32", "-", "1", "-", "process_seed", "if", "test", "else", "process_seed", "\n", "env", ".", "seed", "(", "env_seed", ")", "\n", "# Cast observations to float32 because our model uses float32", "\n", "env", "=", "pfrl", ".", "wrappers", ".", "CastObservationToFloat32", "(", "env", ")", "\n", "if", "args", ".", "monitor", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Monitor", "(", "env", ",", "args", ".", "outdir", ")", "\n", "", "if", "args", ".", "render", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ")", "\n", "", "return", "env", "\n", "\n", "", "def", "make_batch_env", "(", "test", ")", ":", "\n", "        ", "return", "pfrl", ".", "envs", ".", "MultiprocessVectorEnv", "(", "\n", "[", "\n", "functools", ".", "partial", "(", "make_env", ",", "idx", ",", "test", ")", "\n", "for", "idx", ",", "env", "in", "enumerate", "(", "range", "(", "args", ".", "num_envs", ")", ")", "\n", "]", "\n", ")", "\n", "\n", "# Only for getting timesteps, and obs-action spaces", "\n", "", "sample_env", "=", "gym", ".", "make", "(", "args", ".", "env", ")", "\n", "timestep_limit", "=", "sample_env", ".", "spec", ".", "max_episode_steps", "\n", "obs_space", "=", "sample_env", ".", "observation_space", "\n", "action_space", "=", "sample_env", ".", "action_space", "\n", "print", "(", "\"Observation space:\"", ",", "obs_space", ")", "\n", "print", "(", "\"Action space:\"", ",", "action_space", ")", "\n", "\n", "assert", "isinstance", "(", "action_space", ",", "gym", ".", "spaces", ".", "Box", ")", "\n", "\n", "# Normalize observations based on their empirical mean and variance", "\n", "obs_normalizer", "=", "pfrl", ".", "nn", ".", "EmpiricalNormalization", "(", "\n", "obs_space", ".", "low", ".", "size", ",", "clip_threshold", "=", "5", "\n", ")", "\n", "\n", "obs_size", "=", "obs_space", ".", "low", ".", "size", "\n", "action_size", "=", "action_space", ".", "low", ".", "size", "\n", "policy", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "action_size", ")", ",", "\n", "pfrl", ".", "policies", ".", "GaussianHeadWithStateIndependentCovariance", "(", "\n", "action_size", "=", "action_size", ",", "\n", "var_type", "=", "\"diagonal\"", ",", "\n", "var_func", "=", "lambda", "x", ":", "torch", ".", "exp", "(", "2", "*", "x", ")", ",", "# Parameterize log std", "\n", "var_param_init", "=", "0", ",", "# log std = 0 => std = 1", "\n", ")", ",", "\n", ")", "\n", "\n", "vf", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "1", ")", ",", "\n", ")", "\n", "\n", "# While the original paper initialized weights by normal distribution,", "\n", "# we use orthogonal initialization as the latest openai/baselines does.", "\n", "def", "ortho_init", "(", "layer", ",", "gain", ")", ":", "\n", "        ", "nn", ".", "init", ".", "orthogonal_", "(", "layer", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "bias", ")", "\n", "\n", "", "ortho_init", "(", "policy", "[", "0", "]", ",", "gain", "=", "1", ")", "\n", "ortho_init", "(", "policy", "[", "2", "]", ",", "gain", "=", "1", ")", "\n", "ortho_init", "(", "policy", "[", "4", "]", ",", "gain", "=", "1e-2", ")", "\n", "ortho_init", "(", "vf", "[", "0", "]", ",", "gain", "=", "1", ")", "\n", "ortho_init", "(", "vf", "[", "2", "]", ",", "gain", "=", "1", ")", "\n", "ortho_init", "(", "vf", "[", "4", "]", ",", "gain", "=", "1", ")", "\n", "\n", "# Combine a policy and a value function into a single model", "\n", "model", "=", "pfrl", ".", "nn", ".", "Branched", "(", "policy", ",", "vf", ")", "\n", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "3e-4", ",", "eps", "=", "1e-5", ")", "\n", "\n", "agent", "=", "PPO", "(", "\n", "model", ",", "\n", "opt", ",", "\n", "obs_normalizer", "=", "obs_normalizer", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "update_interval", "=", "args", ".", "update_interval", ",", "\n", "minibatch_size", "=", "args", ".", "batch_size", ",", "\n", "epochs", "=", "args", ".", "epochs", ",", "\n", "clip_eps_vf", "=", "None", ",", "\n", "entropy_coef", "=", "0", ",", "\n", "standardize_advantages", "=", "True", ",", "\n", "gamma", "=", "0.995", ",", "\n", "lambd", "=", "0.97", ",", "\n", ")", "\n", "\n", "if", "args", ".", "load", "or", "args", ".", "load_pretrained", ":", "\n", "# either load or load_pretrained must be false", "\n", "        ", "assert", "not", "args", ".", "load", "or", "not", "args", ".", "load_pretrained", "\n", "if", "args", ".", "load", ":", "\n", "            ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "", "else", ":", "\n", "            ", "agent", ".", "load", "(", "utils", ".", "download_model", "(", "\"PPO\"", ",", "args", ".", "env", ",", "model_type", "=", "\"final\"", ")", "[", "0", "]", ")", "\n", "\n", "", "", "if", "args", ".", "demo", ":", "\n", "        ", "env", "=", "make_batch_env", "(", "True", ")", "\n", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "env", ",", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "max_episode_len", "=", "timestep_limit", ",", "\n", ")", "\n", "print", "(", "\n", "\"n_runs: {} mean: {} median: {} stdev {}\"", ".", "format", "(", "\n", "args", ".", "eval_n_runs", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "import", "json", "\n", "import", "os", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "outdir", ",", "\"demo_scores.json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "eval_stats", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "experiments", ".", "train_agent_batch_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "make_batch_env", "(", "False", ")", ",", "\n", "eval_env", "=", "make_batch_env", "(", "True", ")", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "log_interval", "=", "args", ".", "log_interval", ",", "\n", "max_episode_len", "=", "timestep_limit", ",", "\n", "save_best_so_far_agent", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.ddpg.train_ddpg.main": [[24, 222], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "pfrl.experiments.prepare_output_dir", "print", "pfrl.utils.set_random_seed", "train_ddpg.main.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--env\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"Hopper-v2\"", ",", "\n", "help", "=", "\"OpenAI Gym MuJoCo env to perform algorithm on.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 32)\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"GPU to use, set to -1 if no GPU.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Directory to load agent from.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--steps\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", "**", "6", ",", "\n", "help", "=", "\"Total number of timesteps to train the agent.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-n-runs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "\"Number of episodes run for each evaluation.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5000", ",", "\n", "help", "=", "\"Interval in timesteps between evaluations.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--replay-start-size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10000", ",", "\n", "help", "=", "\"Minimum replay buffer size before \"", "+", "\"performing gradient updates.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "\"Minibatch size\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--render\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Render env states in a GUI window.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--demo\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Just run evaluation, not training.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--load-pretrained\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pretrained-type\"", ",", "type", "=", "str", ",", "default", "=", "\"best\"", ",", "choices", "=", "[", "\"best\"", ",", "\"final\"", "]", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--monitor\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Wrap env with gym.wrappers.Monitor.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "type", "=", "int", ",", "default", "=", "logging", ".", "INFO", ",", "help", "=", "\"Level of the root logger.\"", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "args", ".", "log_level", ")", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ",", "argv", "=", "sys", ".", "argv", ")", "\n", "print", "(", "\"Output files are saved in {}\"", ".", "format", "(", "args", ".", "outdir", ")", ")", "\n", "\n", "# Set a random seed used in PFRL", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "def", "make_env", "(", "test", ")", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "args", ".", "env", ")", "\n", "# Unwrap TimeLimit wrapper", "\n", "assert", "isinstance", "(", "env", ",", "gym", ".", "wrappers", ".", "TimeLimit", ")", "\n", "env", "=", "env", ".", "env", "\n", "# Use different random seeds for train and test envs", "\n", "env_seed", "=", "2", "**", "32", "-", "1", "-", "args", ".", "seed", "if", "test", "else", "args", ".", "seed", "\n", "env", ".", "seed", "(", "env_seed", ")", "\n", "# Cast observations to float32 because our model uses float32", "\n", "env", "=", "pfrl", ".", "wrappers", ".", "CastObservationToFloat32", "(", "env", ")", "\n", "if", "args", ".", "monitor", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Monitor", "(", "env", ",", "args", ".", "outdir", ")", "\n", "", "if", "args", ".", "render", "and", "not", "test", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ")", "\n", "", "return", "env", "\n", "\n", "", "env", "=", "make_env", "(", "test", "=", "False", ")", "\n", "timestep_limit", "=", "env", ".", "spec", ".", "max_episode_steps", "\n", "obs_space", "=", "env", ".", "observation_space", "\n", "action_space", "=", "env", ".", "action_space", "\n", "print", "(", "\"Observation space:\"", ",", "obs_space", ")", "\n", "print", "(", "\"Action space:\"", ",", "action_space", ")", "\n", "\n", "obs_size", "=", "obs_space", ".", "low", ".", "size", "\n", "action_size", "=", "action_space", ".", "low", ".", "size", "\n", "\n", "q_func", "=", "nn", ".", "Sequential", "(", "\n", "ConcatObsAndAction", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "obs_size", "+", "action_size", ",", "400", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "400", ",", "300", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "300", ",", "1", ")", ",", "\n", ")", "\n", "policy", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "400", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "400", ",", "300", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "300", ",", "action_size", ")", ",", "\n", "BoundByTanh", "(", "low", "=", "action_space", ".", "low", ",", "high", "=", "action_space", ".", "high", ")", ",", "\n", "DeterministicHead", "(", ")", ",", "\n", ")", "\n", "\n", "opt_a", "=", "torch", ".", "optim", ".", "Adam", "(", "policy", ".", "parameters", "(", ")", ")", "\n", "opt_c", "=", "torch", ".", "optim", ".", "Adam", "(", "q_func", ".", "parameters", "(", ")", ")", "\n", "\n", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "10", "**", "6", ")", "\n", "\n", "explorer", "=", "explorers", ".", "AdditiveGaussian", "(", "\n", "scale", "=", "0.1", ",", "low", "=", "action_space", ".", "low", ",", "high", "=", "action_space", ".", "high", "\n", ")", "\n", "\n", "def", "burnin_action_func", "(", ")", ":", "\n", "        ", "\"\"\"Select random actions until model is updated one or more times.\"\"\"", "\n", "return", "np", ".", "random", ".", "uniform", "(", "action_space", ".", "low", ",", "action_space", ".", "high", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Hyperparameters in http://arxiv.org/abs/1802.09477", "\n", "", "agent", "=", "DDPG", "(", "\n", "policy", ",", "\n", "q_func", ",", "\n", "opt_a", ",", "\n", "opt_c", ",", "\n", "rbuf", ",", "\n", "gamma", "=", "0.99", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "args", ".", "replay_start_size", ",", "\n", "target_update_method", "=", "\"soft\"", ",", "\n", "target_update_interval", "=", "1", ",", "\n", "update_interval", "=", "1", ",", "\n", "soft_update_tau", "=", "5e-3", ",", "\n", "n_times_update", "=", "1", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "minibatch_size", "=", "args", ".", "batch_size", ",", "\n", "burnin_action_func", "=", "burnin_action_func", ",", "\n", ")", "\n", "\n", "if", "len", "(", "args", ".", "load", ")", ">", "0", "or", "args", ".", "load_pretrained", ":", "\n", "# either load or load_pretrained must be false", "\n", "        ", "assert", "not", "len", "(", "args", ".", "load", ")", ">", "0", "or", "not", "args", ".", "load_pretrained", "\n", "if", "len", "(", "args", ".", "load", ")", ">", "0", ":", "\n", "            ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "", "else", ":", "\n", "            ", "agent", ".", "load", "(", "\n", "utils", ".", "download_model", "(", "\"DDPG\"", ",", "args", ".", "env", ",", "model_type", "=", "args", ".", "pretrained_type", ")", "[", "\n", "0", "\n", "]", "\n", ")", "\n", "\n", "", "", "eval_env", "=", "make_env", "(", "test", "=", "True", ")", "\n", "if", "args", ".", "demo", ":", "\n", "        ", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "eval_env", ",", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "max_episode_len", "=", "timestep_limit", ",", "\n", ")", "\n", "print", "(", "\n", "\"n_runs: {} mean: {} median: {} stdev {}\"", ".", "format", "(", "\n", "args", ".", "eval_n_runs", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "import", "json", "\n", "import", "os", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "outdir", ",", "\"demo_scores.json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "eval_stats", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "experiments", ".", "train_agent_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "train_max_episode_len", "=", "timestep_limit", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.soft_actor_critic.train_soft_actor_critic.main": [[23, 273], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "pfrl.experiments.prepare_output_dir", "print", "pfrl.utils.set_random_seed", "train_soft_actor_critic.main.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--env\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"Hopper-v2\"", ",", "\n", "help", "=", "\"OpenAI Gym MuJoCo env to perform algorithm on.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num-envs\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Number of envs run in parallel.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 32)\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"GPU to use, set to -1 if no GPU.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Directory to load agent from.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--steps\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", "**", "6", ",", "\n", "help", "=", "\"Total number of timesteps to train the agent.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-n-runs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "\"Number of episodes run for each evaluation.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5000", ",", "\n", "help", "=", "\"Interval in timesteps between evaluations.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--replay-start-size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10000", ",", "\n", "help", "=", "\"Minimum replay buffer size before \"", "+", "\"performing gradient updates.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "\"Minibatch size\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--render\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Render env states in a GUI window.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--demo\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Just run evaluation, not training.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--load-pretrained\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pretrained-type\"", ",", "type", "=", "str", ",", "default", "=", "\"best\"", ",", "choices", "=", "[", "\"best\"", ",", "\"final\"", "]", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--monitor\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Wrap env with gym.wrappers.Monitor.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1000", ",", "\n", "help", "=", "\"Interval in timesteps between outputting log messages during training\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "type", "=", "int", ",", "default", "=", "logging", ".", "INFO", ",", "help", "=", "\"Level of the root logger.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--policy-output-scale\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "\"Weight initialization scale of policy output.\"", ",", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "args", ".", "log_level", ")", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ",", "argv", "=", "sys", ".", "argv", ")", "\n", "print", "(", "\"Output files are saved in {}\"", ".", "format", "(", "args", ".", "outdir", ")", ")", "\n", "\n", "# Set a random seed used in PFRL", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Set different random seeds for different subprocesses.", "\n", "# If seed=0 and processes=4, subprocess seeds are [0, 1, 2, 3].", "\n", "# If seed=1 and processes=4, subprocess seeds are [4, 5, 6, 7].", "\n", "process_seeds", "=", "np", ".", "arange", "(", "args", ".", "num_envs", ")", "+", "args", ".", "seed", "*", "args", ".", "num_envs", "\n", "assert", "process_seeds", ".", "max", "(", ")", "<", "2", "**", "32", "\n", "\n", "def", "make_env", "(", "process_idx", ",", "test", ")", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "args", ".", "env", ")", "\n", "# Unwrap TimiLimit wrapper", "\n", "assert", "isinstance", "(", "env", ",", "gym", ".", "wrappers", ".", "TimeLimit", ")", "\n", "env", "=", "env", ".", "env", "\n", "# Use different random seeds for train and test envs", "\n", "process_seed", "=", "int", "(", "process_seeds", "[", "process_idx", "]", ")", "\n", "env_seed", "=", "2", "**", "32", "-", "1", "-", "process_seed", "if", "test", "else", "process_seed", "\n", "env", ".", "seed", "(", "env_seed", ")", "\n", "# Cast observations to float32 because our model uses float32", "\n", "env", "=", "pfrl", ".", "wrappers", ".", "CastObservationToFloat32", "(", "env", ")", "\n", "# Normalize action space to [-1, 1]^n", "\n", "env", "=", "pfrl", ".", "wrappers", ".", "NormalizeActionSpace", "(", "env", ")", "\n", "if", "args", ".", "monitor", ":", "\n", "            ", "env", "=", "gym", ".", "wrappers", ".", "Monitor", "(", "env", ",", "args", ".", "outdir", ")", "\n", "", "if", "args", ".", "render", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ")", "\n", "", "return", "env", "\n", "\n", "", "def", "make_batch_env", "(", "test", ")", ":", "\n", "        ", "return", "pfrl", ".", "envs", ".", "MultiprocessVectorEnv", "(", "\n", "[", "\n", "functools", ".", "partial", "(", "make_env", ",", "idx", ",", "test", ")", "\n", "for", "idx", ",", "env", "in", "enumerate", "(", "range", "(", "args", ".", "num_envs", ")", ")", "\n", "]", "\n", ")", "\n", "\n", "", "sample_env", "=", "make_env", "(", "process_idx", "=", "0", ",", "test", "=", "False", ")", "\n", "timestep_limit", "=", "sample_env", ".", "spec", ".", "max_episode_steps", "\n", "obs_space", "=", "sample_env", ".", "observation_space", "\n", "action_space", "=", "sample_env", ".", "action_space", "\n", "print", "(", "\"Observation space:\"", ",", "obs_space", ")", "\n", "print", "(", "\"Action space:\"", ",", "action_space", ")", "\n", "\n", "obs_size", "=", "obs_space", ".", "low", ".", "size", "\n", "action_size", "=", "action_space", ".", "low", ".", "size", "\n", "\n", "if", "LooseVersion", "(", "torch", ".", "__version__", ")", "<", "LooseVersion", "(", "\"1.5.0\"", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"This script requires a PyTorch version >= 1.5.0\"", ")", "\n", "\n", "", "def", "squashed_diagonal_gaussian_head", "(", "x", ")", ":", "\n", "        ", "assert", "x", ".", "shape", "[", "-", "1", "]", "==", "action_size", "*", "2", "\n", "mean", ",", "log_scale", "=", "torch", ".", "chunk", "(", "x", ",", "2", ",", "dim", "=", "1", ")", "\n", "log_scale", "=", "torch", ".", "clamp", "(", "log_scale", ",", "-", "20.0", ",", "2.0", ")", "\n", "var", "=", "torch", ".", "exp", "(", "log_scale", "*", "2", ")", "\n", "base_distribution", "=", "distributions", ".", "Independent", "(", "\n", "distributions", ".", "Normal", "(", "loc", "=", "mean", ",", "scale", "=", "torch", ".", "sqrt", "(", "var", ")", ")", ",", "1", "\n", ")", "\n", "# cache_size=1 is required for numerical stability", "\n", "return", "distributions", ".", "transformed_distribution", ".", "TransformedDistribution", "(", "\n", "base_distribution", ",", "[", "distributions", ".", "transforms", ".", "TanhTransform", "(", "cache_size", "=", "1", ")", "]", "\n", ")", "\n", "\n", "", "policy", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "action_size", "*", "2", ")", ",", "\n", "Lambda", "(", "squashed_diagonal_gaussian_head", ")", ",", "\n", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "policy", "[", "0", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "policy", "[", "2", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "policy", "[", "4", "]", ".", "weight", ",", "gain", "=", "args", ".", "policy_output_scale", ")", "\n", "policy_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "policy", ".", "parameters", "(", ")", ",", "lr", "=", "3e-4", ")", "\n", "\n", "def", "make_q_func_with_optimizer", "(", ")", ":", "\n", "        ", "q_func", "=", "nn", ".", "Sequential", "(", "\n", "pfrl", ".", "nn", ".", "ConcatObsAndAction", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "obs_size", "+", "action_size", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "1", ")", ",", "\n", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "q_func", "[", "1", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "q_func", "[", "3", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "q_func", "[", "5", "]", ".", "weight", ")", "\n", "q_func_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "q_func", ".", "parameters", "(", ")", ",", "lr", "=", "3e-4", ")", "\n", "return", "q_func", ",", "q_func_optimizer", "\n", "\n", "", "q_func1", ",", "q_func1_optimizer", "=", "make_q_func_with_optimizer", "(", ")", "\n", "q_func2", ",", "q_func2_optimizer", "=", "make_q_func_with_optimizer", "(", ")", "\n", "\n", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "10", "**", "6", ")", "\n", "\n", "def", "burnin_action_func", "(", ")", ":", "\n", "        ", "\"\"\"Select random actions until model is updated one or more times.\"\"\"", "\n", "return", "np", ".", "random", ".", "uniform", "(", "action_space", ".", "low", ",", "action_space", ".", "high", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Hyperparameters in http://arxiv.org/abs/1802.09477", "\n", "", "agent", "=", "pfrl", ".", "agents", ".", "SoftActorCritic", "(", "\n", "policy", ",", "\n", "q_func1", ",", "\n", "q_func2", ",", "\n", "policy_optimizer", ",", "\n", "q_func1_optimizer", ",", "\n", "q_func2_optimizer", ",", "\n", "rbuf", ",", "\n", "gamma", "=", "0.99", ",", "\n", "replay_start_size", "=", "args", ".", "replay_start_size", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "minibatch_size", "=", "args", ".", "batch_size", ",", "\n", "burnin_action_func", "=", "burnin_action_func", ",", "\n", "entropy_target", "=", "-", "action_size", ",", "\n", "temperature_optimizer_lr", "=", "3e-4", ",", "\n", ")", "\n", "\n", "if", "len", "(", "args", ".", "load", ")", ">", "0", "or", "args", ".", "load_pretrained", ":", "\n", "# either load or load_pretrained must be false", "\n", "        ", "assert", "not", "len", "(", "args", ".", "load", ")", ">", "0", "or", "not", "args", ".", "load_pretrained", "\n", "if", "len", "(", "args", ".", "load", ")", ">", "0", ":", "\n", "            ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "", "else", ":", "\n", "            ", "agent", ".", "load", "(", "\n", "utils", ".", "download_model", "(", "\"SAC\"", ",", "args", ".", "env", ",", "model_type", "=", "args", ".", "pretrained_type", ")", "[", "\n", "0", "\n", "]", "\n", ")", "\n", "\n", "", "", "if", "args", ".", "demo", ":", "\n", "        ", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "make_batch_env", "(", "test", "=", "True", ")", ",", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "max_episode_len", "=", "timestep_limit", ",", "\n", ")", "\n", "print", "(", "\n", "\"n_runs: {} mean: {} median: {} stdev {}\"", ".", "format", "(", "\n", "args", ".", "eval_n_runs", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "import", "json", "\n", "import", "os", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "outdir", ",", "\"demo_scores.json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "eval_stats", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "experiments", ".", "train_agent_batch_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "make_batch_env", "(", "test", "=", "False", ")", ",", "\n", "eval_env", "=", "make_batch_env", "(", "test", "=", "True", ")", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "log_interval", "=", "args", ".", "log_interval", ",", "\n", "max_episode_len", "=", "timestep_limit", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.grasping.train_dqn_batch_grasping.CastAction.__init__": [[19, 22], ["gym.ActionWrapper.__init__", "gym.ActionWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "type_", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "type_", "=", "type_", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.grasping.train_dqn_batch_grasping.CastAction.action": [[23, 25], ["train_dqn_batch_grasping.CastAction.type_"], "methods", ["None"], ["", "def", "action", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "self", ".", "type_", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.grasping.train_dqn_batch_grasping.TransposeObservation.__init__": [[30, 38], ["gym.ObservationWrapper.__init__", "gym.ObservationWrapper.__init__", "isinstance", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "env.observation_space.low.transpose", "env.observation_space.high.transpose"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "axes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "_axes", "=", "axes", "\n", "assert", "isinstance", "(", "env", ".", "observation_space", ",", "gym", ".", "spaces", ".", "Box", ")", "\n", "self", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "env", ".", "observation_space", ".", "low", ".", "transpose", "(", "*", "self", ".", "_axes", ")", ",", "\n", "high", "=", "env", ".", "observation_space", ".", "high", ".", "transpose", "(", "*", "self", ".", "_axes", ")", ",", "\n", "dtype", "=", "env", ".", "observation_space", ".", "dtype", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.grasping.train_dqn_batch_grasping.TransposeObservation.observation": [[40, 42], ["observation.transpose"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "return", "observation", ".", "transpose", "(", "*", "self", ".", "_axes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.grasping.train_dqn_batch_grasping.ObserveElapsedSteps.__init__": [[51, 59], ["gym.Wrapper.__init__", "gym.Wrapper.__init__", "gym.spaces.Tuple", "gym.spaces.Tuple", "gym.spaces.Tuple", "gym.spaces.Tuple", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "max_steps", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "_max_steps", "=", "max_steps", "\n", "self", ".", "_elapsed_steps", "=", "0", "\n", "self", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Tuple", "(", "\n", "(", "\n", "env", ".", "observation_space", ",", "\n", "gym", ".", "spaces", ".", "Discrete", "(", "self", ".", "_max_steps", "+", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.grasping.train_dqn_batch_grasping.ObserveElapsedSteps.reset": [[62, 65], ["train_dqn_batch_grasping.ObserveElapsedSteps.env.reset"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_elapsed_steps", "=", "0", "\n", "return", "self", ".", "env", ".", "reset", "(", ")", ",", "self", ".", "_elapsed_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.grasping.train_dqn_batch_grasping.ObserveElapsedSteps.step": [[66, 71], ["train_dqn_batch_grasping.ObserveElapsedSteps.env.step"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "observation", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "_elapsed_steps", "+=", "1", "\n", "assert", "self", ".", "_elapsed_steps", "<=", "self", ".", "_max_steps", "\n", "return", "(", "observation", ",", "self", ".", "_elapsed_steps", ")", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.grasping.train_dqn_batch_grasping.RecordMovie.__init__": [[76, 80], ["gym.Wrapper.__init__", "gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "dirname", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "_episode_idx", "=", "-", "1", "\n", "self", ".", "_dirname", "=", "dirname", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.grasping.train_dqn_batch_grasping.RecordMovie.reset": [[81, 91], ["train_dqn_batch_grasping.RecordMovie.env.reset", "pybullet.startStateLogging", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "_episode_idx", "+=", "1", "\n", "import", "pybullet", "\n", "\n", "pybullet", ".", "startStateLogging", "(", "\n", "pybullet", ".", "STATE_LOGGING_VIDEO_MP4", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_dirname", ",", "\"{}.mp4\"", ".", "format", "(", "self", ".", "_episode_idx", ")", ")", ",", "\n", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.grasping.train_dqn_batch_grasping.GraspingQFunction.__init__": [[100, 116], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Flatten", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "pfrl.q_functions.DiscreteActionValueHead"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "n_actions", ",", "max_episode_steps", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "max_episode_steps", "+", "1", ",", "3136", ")", "\n", "self", ".", "image2hidden", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "8", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "4", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", ")", "\n", "self", ".", "hidden2out", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "3136", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "n_actions", ")", ",", "\n", "DiscreteActionValueHead", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.grasping.train_dqn_batch_grasping.GraspingQFunction.forward": [[118, 122], ["train_dqn_batch_grasping.GraspingQFunction.hidden2out", "train_dqn_batch_grasping.GraspingQFunction.image2hidden", "torch.sigmoid", "train_dqn_batch_grasping.GraspingQFunction.embed"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "image", ",", "steps", "=", "x", "\n", "h", "=", "self", ".", "image2hidden", "(", "image", ")", "*", "torch", ".", "sigmoid", "(", "self", ".", "embed", "(", "steps", ")", ")", "\n", "return", "self", ".", "hidden2out", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.grasping.train_dqn_batch_grasping.main": [[124, 364], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "pfrl.utils.set_random_seed", "pfrl.experiments.prepare_output_dir", "print", "train_dqn_batch_grasping.main.make_batch_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 31)\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"GPU to use, set to -1 if no GPU.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--demo\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Evaluate the agent without training.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--load\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Load a saved agent from a given directory.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--final-exploration-steps\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", "*", "10", "**", "5", ",", "\n", "help", "=", "\"Timesteps after which we stop annealing exploration rate\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--final-epsilon\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.2", ",", "\n", "help", "=", "\"Final value of epsilon during training.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--steps\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "2", "*", "10", "**", "6", ",", "\n", "help", "=", "\"Total number of timesteps to train the agent.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--replay-start-size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", "*", "10", "**", "4", ",", "\n", "help", "=", "\"Minimum replay buffer size before performing gradient updates.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--target-update-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", "*", "10", "**", "4", ",", "\n", "help", "=", "\"Frequency (in timesteps) at which the target network is updated.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", "**", "5", ",", "\n", "help", "=", "\"Frequency (in timesteps) of evaluation phase.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--update-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "\"Frequency (in timesteps) of network updates.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-n-runs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "\"Number of episodes used for evaluation.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "20", ",", "\n", "help", "=", "\"Logging level. 10:DEBUG, 20:INFO etc.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--render\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Render env states in a GUI window.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "6.25e-5", ",", "help", "=", "\"Learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num-envs\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Number of envs run in parallel.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "\"Batch size used for training.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--record\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Record videos of evaluation envs. --render should also be specified.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--gamma\"", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "\"Discount factor.\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "import", "logging", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "args", ".", "log_level", ")", "\n", "\n", "# Set a random seed used in PFRL.", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Set different random seeds for different subprocesses.", "\n", "# If seed=0 and processes=4, subprocess seeds are [0, 1, 2, 3].", "\n", "# If seed=1 and processes=4, subprocess seeds are [4, 5, 6, 7].", "\n", "process_seeds", "=", "np", ".", "arange", "(", "args", ".", "num_envs", ")", "+", "args", ".", "seed", "*", "args", ".", "num_envs", "\n", "assert", "process_seeds", ".", "max", "(", ")", "<", "2", "**", "32", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ")", "\n", "print", "(", "\"Output files are saved in {}\"", ".", "format", "(", "args", ".", "outdir", ")", ")", "\n", "\n", "max_episode_steps", "=", "8", "\n", "\n", "def", "make_env", "(", "idx", ",", "test", ")", ":", "\n", "        ", "from", "pybullet_envs", ".", "bullet", ".", "kuka_diverse_object_gym_env", "import", "(", "# NOQA", "\n", "KukaDiverseObjectEnv", ",", "\n", ")", "\n", "\n", "# Use different random seeds for train and test envs", "\n", "process_seed", "=", "int", "(", "process_seeds", "[", "idx", "]", ")", "\n", "env_seed", "=", "2", "**", "32", "-", "1", "-", "process_seed", "if", "test", "else", "process_seed", "\n", "# Set a random seed for this subprocess", "\n", "utils", ".", "set_random_seed", "(", "env_seed", ")", "\n", "env", "=", "KukaDiverseObjectEnv", "(", "\n", "isDiscrete", "=", "True", ",", "\n", "renders", "=", "args", ".", "render", "and", "(", "args", ".", "demo", "or", "not", "test", ")", ",", "\n", "height", "=", "84", ",", "\n", "width", "=", "84", ",", "\n", "maxSteps", "=", "max_episode_steps", ",", "\n", "isTest", "=", "test", ",", "\n", ")", "\n", "# Disable file caching to keep memory usage small", "\n", "env", ".", "_p", ".", "setPhysicsEngineParameter", "(", "enableFileCaching", "=", "False", ")", "\n", "assert", "env", ".", "observation_space", "is", "None", "\n", "env", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "84", ",", "84", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", "\n", ")", "\n", "# (84, 84, 3) -> (3, 84, 84)", "\n", "env", "=", "TransposeObservation", "(", "env", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "env", "=", "ObserveElapsedSteps", "(", "env", ",", "max_episode_steps", ")", "\n", "# KukaDiverseObjectEnv internally asserts int actions", "\n", "env", "=", "CastAction", "(", "env", ",", "int", ")", "\n", "env", ".", "seed", "(", "int", "(", "env_seed", ")", ")", "\n", "if", "test", "and", "args", ".", "record", ":", "\n", "            ", "assert", "args", ".", "render", ",", "\"To use --record, --render needs be specified.\"", "\n", "video_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outdir", ",", "\"video_{}\"", ".", "format", "(", "idx", ")", ")", "\n", "os", ".", "mkdir", "(", "video_dir", ")", "\n", "env", "=", "RecordMovie", "(", "env", ",", "video_dir", ")", "\n", "", "return", "env", "\n", "\n", "", "def", "make_batch_env", "(", "test", ")", ":", "\n", "        ", "return", "pfrl", ".", "envs", ".", "MultiprocessVectorEnv", "(", "\n", "[", "functools", ".", "partial", "(", "make_env", ",", "idx", ",", "test", ")", "for", "idx", "in", "range", "(", "args", ".", "num_envs", ")", "]", "\n", ")", "\n", "\n", "", "eval_env", "=", "make_batch_env", "(", "test", "=", "True", ")", "\n", "n_actions", "=", "eval_env", ".", "action_space", ".", "n", "\n", "\n", "q_func", "=", "GraspingQFunction", "(", "n_actions", ",", "max_episode_steps", ")", "\n", "\n", "# Use the hyper parameters of the Nature paper", "\n", "opt", "=", "pfrl", ".", "optimizers", ".", "RMSpropEpsInsideSqrt", "(", "\n", "q_func", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "alpha", "=", "0.95", ",", "\n", "momentum", "=", "0.0", ",", "\n", "eps", "=", "1e-2", ",", "\n", "centered", "=", "True", ",", "\n", ")", "\n", "\n", "# Anneal beta from beta0 to 1 throughout training", "\n", "betasteps", "=", "args", ".", "steps", "/", "args", ".", "update_interval", "\n", "rbuf", "=", "replay_buffers", ".", "PrioritizedReplayBuffer", "(", "\n", "10", "**", "6", ",", "alpha", "=", "0.6", ",", "beta0", "=", "0.4", ",", "betasteps", "=", "betasteps", "\n", ")", "\n", "\n", "explorer", "=", "explorers", ".", "LinearDecayEpsilonGreedy", "(", "\n", "1.0", ",", "\n", "args", ".", "final_epsilon", ",", "\n", "args", ".", "final_exploration_steps", ",", "\n", "lambda", ":", "np", ".", "random", ".", "randint", "(", "n_actions", ")", ",", "\n", ")", "\n", "\n", "def", "phi", "(", "x", ")", ":", "\n", "# Feature extractor", "\n", "        ", "image", ",", "elapsed_steps", "=", "x", "\n", "# Normalize RGB values: [0, 255] -> [0, 1]", "\n", "norm_image", "=", "np", ".", "asarray", "(", "image", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255", "\n", "return", "norm_image", ",", "elapsed_steps", "\n", "\n", "", "agent", "=", "pfrl", ".", "agents", ".", "DoubleDQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "gamma", "=", "args", ".", "gamma", ",", "\n", "explorer", "=", "explorer", ",", "\n", "minibatch_size", "=", "args", ".", "batch_size", ",", "\n", "replay_start_size", "=", "args", ".", "replay_start_size", ",", "\n", "target_update_interval", "=", "args", ".", "target_update_interval", ",", "\n", "update_interval", "=", "args", ".", "update_interval", ",", "\n", "batch_accumulator", "=", "\"sum\"", ",", "\n", "phi", "=", "phi", ",", "\n", ")", "\n", "\n", "if", "args", ".", "load", ":", "\n", "        ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "\n", "", "if", "args", ".", "demo", ":", "\n", "        ", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "eval_env", ",", "agent", "=", "agent", ",", "n_steps", "=", "None", ",", "n_episodes", "=", "args", ".", "eval_n_runs", "\n", ")", "\n", "print", "(", "\n", "\"n_runs: {} mean: {} median: {} stdev {}\"", ".", "format", "(", "\n", "args", ".", "eval_n_runs", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "experiments", ".", "train_agent_batch_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "make_batch_env", "(", "test", "=", "False", ")", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "save_best_so_far_agent", "=", "False", ",", "\n", "log_interval", "=", "1000", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atari.train_categorical_dqn_ale.main": [[11, 176], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "pfrl.utils.set_random_seed", "pfrl.experiments.prepare_output_dir", "print", "train_categorical_dqn_ale.main.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--env\"", ",", "type", "=", "str", ",", "default", "=", "\"BreakoutNoFrameskip-v4\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 31)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--demo\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--final-exploration-frames\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "6", ")", "\n", "parser", ".", "add_argument", "(", "\"--final-epsilon\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-epsilon\"", ",", "type", "=", "float", ",", "default", "=", "0.05", ")", "\n", "parser", ".", "add_argument", "(", "\"--steps\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "7", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max-frames\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "30", "*", "60", "*", "60", ",", "# 30 minutes with 60 fps", "\n", "help", "=", "\"Maximum number of frames for each episode.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--replay-start-size\"", ",", "type", "=", "int", ",", "default", "=", "5", "*", "10", "**", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--target-update-interval\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-interval\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "5", ")", "\n", "parser", ".", "add_argument", "(", "\"--update-interval\"", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-n-runs\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "20", ",", "\n", "help", "=", "\"Logging level. 10:DEBUG, 20:INFO etc.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--render\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Render env states in a GUI window.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--monitor\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "(", "\n", "\"Monitor env. Videos and additional information are saved as output files.\"", "\n", ")", ",", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "import", "logging", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "args", ".", "log_level", ")", "\n", "\n", "# Set a random seed used in PFRL.", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Set different random seeds for train and test envs.", "\n", "train_seed", "=", "args", ".", "seed", "\n", "test_seed", "=", "2", "**", "31", "-", "1", "-", "args", ".", "seed", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ")", "\n", "print", "(", "\"Output files are saved in {}\"", ".", "format", "(", "args", ".", "outdir", ")", ")", "\n", "\n", "def", "make_env", "(", "test", ")", ":", "\n", "# Use different random seeds for train and test envs", "\n", "        ", "env_seed", "=", "test_seed", "if", "test", "else", "train_seed", "\n", "env", "=", "atari_wrappers", ".", "wrap_deepmind", "(", "\n", "atari_wrappers", ".", "make_atari", "(", "args", ".", "env", ",", "max_frames", "=", "args", ".", "max_frames", ")", ",", "\n", "episode_life", "=", "not", "test", ",", "\n", "clip_rewards", "=", "not", "test", ",", "\n", ")", "\n", "env", ".", "seed", "(", "int", "(", "env_seed", ")", ")", "\n", "if", "test", ":", "\n", "# Randomize actions like epsilon-greedy in evaluation as well", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "RandomizeAction", "(", "env", ",", "args", ".", "eval_epsilon", ")", "\n", "", "if", "args", ".", "monitor", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Monitor", "(", "\n", "env", ",", "args", ".", "outdir", ",", "mode", "=", "\"evaluation\"", "if", "test", "else", "\"training\"", "\n", ")", "\n", "", "if", "args", ".", "render", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ")", "\n", "", "return", "env", "\n", "\n", "", "env", "=", "make_env", "(", "test", "=", "False", ")", "\n", "eval_env", "=", "make_env", "(", "test", "=", "True", ")", "\n", "\n", "n_actions", "=", "env", ".", "action_space", ".", "n", "\n", "\n", "n_atoms", "=", "51", "\n", "v_max", "=", "10", "\n", "v_min", "=", "-", "10", "\n", "q_func", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "pfrl", ".", "nn", ".", "LargeAtariCNN", "(", ")", ",", "\n", "pfrl", ".", "q_functions", ".", "DistributionalFCStateQFunctionWithDiscreteAction", "(", "\n", "512", ",", "\n", "n_actions", ",", "\n", "n_atoms", ",", "\n", "v_min", ",", "\n", "v_max", ",", "\n", "n_hidden_channels", "=", "0", ",", "\n", "n_hidden_layers", "=", "0", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "# Use the same hyper parameters as https://arxiv.org/abs/1707.06887", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "q_func", ".", "parameters", "(", ")", ",", "2.5e-4", ",", "eps", "=", "1e-2", "/", "args", ".", "batch_size", ")", "\n", "\n", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "10", "**", "6", ")", "\n", "\n", "explorer", "=", "explorers", ".", "LinearDecayEpsilonGreedy", "(", "\n", "1.0", ",", "\n", "args", ".", "final_epsilon", ",", "\n", "args", ".", "final_exploration_frames", ",", "\n", "lambda", ":", "np", ".", "random", ".", "randint", "(", "n_actions", ")", ",", "\n", ")", "\n", "\n", "def", "phi", "(", "x", ")", ":", "\n", "# Feature extractor", "\n", "        ", "return", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255", "\n", "\n", "", "agent", "=", "pfrl", ".", "agents", ".", "CategoricalDQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "gamma", "=", "0.99", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "args", ".", "replay_start_size", ",", "\n", "target_update_interval", "=", "args", ".", "target_update_interval", ",", "\n", "update_interval", "=", "args", ".", "update_interval", ",", "\n", "batch_accumulator", "=", "\"mean\"", ",", "\n", "phi", "=", "phi", ",", "\n", ")", "\n", "\n", "if", "args", ".", "load", ":", "\n", "        ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "\n", "", "if", "args", ".", "demo", ":", "\n", "        ", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "eval_env", ",", "agent", "=", "agent", ",", "n_steps", "=", "None", ",", "n_episodes", "=", "args", ".", "eval_n_runs", "\n", ")", "\n", "print", "(", "\n", "\"n_runs: {} mean: {} median: {} stdev {}\"", ".", "format", "(", "\n", "args", ".", "eval_n_runs", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "experiments", ".", "train_agent_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "save_best_so_far_agent", "=", "False", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atari.train_drqn_ale.main": [[26, 301], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "pfrl.utils.set_random_seed", "pfrl.experiments.prepare_output_dir", "print", "train_drqn_ale.main.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--env\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"BreakoutNoFrameskip-v4\"", ",", "\n", "help", "=", "\"OpenAI Atari domain to perform algorithm on.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 31)\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"GPU to use, set to -1 if no GPU.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--demo\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--final-exploration-frames\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", "**", "6", ",", "\n", "help", "=", "\"Timesteps after which we stop \"", "+", "\"annealing exploration rate\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--final-epsilon\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.01", ",", "\n", "help", "=", "\"Final value of epsilon during training.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-epsilon\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.001", ",", "\n", "help", "=", "\"Exploration epsilon used during eval episodes.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--steps\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", "*", "10", "**", "7", ",", "\n", "help", "=", "\"Total number of timesteps to train the agent.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max-frames\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "30", "*", "60", "*", "60", ",", "# 30 minutes with 60 fps", "\n", "help", "=", "\"Maximum number of frames for each episode.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--replay-start-size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", "*", "10", "**", "4", ",", "\n", "help", "=", "\"Minimum replay buffer size before \"", "+", "\"performing gradient updates.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--target-update-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "3", "*", "10", "**", "4", ",", "\n", "help", "=", "\"Frequency (in timesteps) at which \"", "+", "\"the target network is updated.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--demo-n-episodes\"", ",", "type", "=", "int", ",", "default", "=", "30", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-n-steps\"", ",", "type", "=", "int", ",", "default", "=", "125000", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "250000", ",", "\n", "help", "=", "\"Frequency (in timesteps) of evaluation phase.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--update-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "4", ",", "\n", "help", "=", "\"Frequency (in timesteps) of network updates.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "20", ",", "\n", "help", "=", "\"Logging level. 10:DEBUG, 20:INFO etc.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--render\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Render env states in a GUI window.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--monitor\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "(", "\n", "\"Monitor env. Videos and additional information are saved as output files.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "2.5e-4", ",", "help", "=", "\"Learning rate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--recurrent\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Use a recurrent model. See the code for the model definition.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--flicker\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "(", "\n", "\"Use so-called flickering Atari, where each\"", "\n", "\" screen is blacked out with probability 0.5.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--no-frame-stack\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "(", "\n", "\"Disable frame stacking so that the agent can only see the current screen.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--episodic-update-len\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "\"Maximum length of sequences for updating recurrent models\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--batch-size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "32", ",", "\n", "help", "=", "(", "\n", "\"Number of transitions (in a non-recurrent case)\"", "\n", "\" or sequences (in a recurrent case) used for an\"", "\n", "\" update.\"", "\n", ")", ",", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "import", "logging", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "args", ".", "log_level", ")", "\n", "\n", "# Set a random seed used in PFRL.", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Set different random seeds for train and test envs.", "\n", "train_seed", "=", "args", ".", "seed", "\n", "test_seed", "=", "2", "**", "31", "-", "1", "-", "args", ".", "seed", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ")", "\n", "print", "(", "\"Output files are saved in {}\"", ".", "format", "(", "args", ".", "outdir", ")", ")", "\n", "\n", "def", "make_env", "(", "test", ")", ":", "\n", "# Use different random seeds for train and test envs", "\n", "        ", "env_seed", "=", "test_seed", "if", "test", "else", "train_seed", "\n", "env", "=", "atari_wrappers", ".", "wrap_deepmind", "(", "\n", "atari_wrappers", ".", "make_atari", "(", "args", ".", "env", ",", "max_frames", "=", "args", ".", "max_frames", ")", ",", "\n", "episode_life", "=", "not", "test", ",", "\n", "clip_rewards", "=", "not", "test", ",", "\n", "flicker", "=", "args", ".", "flicker", ",", "\n", "frame_stack", "=", "not", "args", ".", "no_frame_stack", ",", "\n", ")", "\n", "env", ".", "seed", "(", "int", "(", "env_seed", ")", ")", "\n", "if", "test", ":", "\n", "# Randomize actions like epsilon-greedy in evaluation as well", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "RandomizeAction", "(", "env", ",", "args", ".", "eval_epsilon", ")", "\n", "", "if", "args", ".", "monitor", ":", "\n", "            ", "env", "=", "gym", ".", "wrappers", ".", "Monitor", "(", "\n", "env", ",", "args", ".", "outdir", ",", "mode", "=", "\"evaluation\"", "if", "test", "else", "\"training\"", "\n", ")", "\n", "", "if", "args", ".", "render", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ")", "\n", "", "return", "env", "\n", "\n", "", "env", "=", "make_env", "(", "test", "=", "False", ")", "\n", "eval_env", "=", "make_env", "(", "test", "=", "True", ")", "\n", "print", "(", "\"Observation space\"", ",", "env", ".", "observation_space", ")", "\n", "print", "(", "\"Action space\"", ",", "env", ".", "action_space", ")", "\n", "\n", "n_frames", "=", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "n_actions", "=", "env", ".", "action_space", ".", "n", "\n", "if", "args", ".", "recurrent", ":", "\n", "# Q-network with LSTM", "\n", "        ", "q_func", "=", "pfrl", ".", "nn", ".", "RecurrentSequential", "(", "\n", "nn", ".", "Conv2d", "(", "n_frames", ",", "32", ",", "8", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "4", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "LSTM", "(", "input_size", "=", "3136", ",", "hidden_size", "=", "512", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "n_actions", ")", ",", "\n", "DiscreteActionValueHead", "(", ")", ",", "\n", ")", "\n", "# Replay buffer that stores whole episodes", "\n", "rbuf", "=", "replay_buffers", ".", "EpisodicReplayBuffer", "(", "10", "**", "6", ")", "\n", "", "else", ":", "\n", "# Q-network without LSTM", "\n", "        ", "q_func", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "n_frames", ",", "32", ",", "8", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "4", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "3136", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "n_actions", ")", ",", "\n", "DiscreteActionValueHead", "(", ")", ",", "\n", ")", "\n", "# Replay buffer that stores transitions separately", "\n", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "10", "**", "6", ")", "\n", "\n", "", "explorer", "=", "explorers", ".", "LinearDecayEpsilonGreedy", "(", "\n", "1.0", ",", "\n", "args", ".", "final_epsilon", ",", "\n", "args", ".", "final_exploration_frames", ",", "\n", "lambda", ":", "np", ".", "random", ".", "randint", "(", "n_actions", ")", ",", "\n", ")", "\n", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "q_func", ".", "parameters", "(", ")", ",", "lr", "=", "1e-4", ",", "eps", "=", "1e-4", ")", "\n", "\n", "def", "phi", "(", "x", ")", ":", "\n", "# Feature extractor", "\n", "        ", "return", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255", "\n", "\n", "", "agent", "=", "pfrl", ".", "agents", ".", "DoubleDQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "gamma", "=", "0.99", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "args", ".", "replay_start_size", ",", "\n", "target_update_interval", "=", "args", ".", "target_update_interval", ",", "\n", "update_interval", "=", "args", ".", "update_interval", ",", "\n", "batch_accumulator", "=", "\"mean\"", ",", "\n", "phi", "=", "phi", ",", "\n", "minibatch_size", "=", "args", ".", "batch_size", ",", "\n", "episodic_update_len", "=", "args", ".", "episodic_update_len", ",", "\n", "recurrent", "=", "args", ".", "recurrent", ",", "\n", ")", "\n", "\n", "if", "args", ".", "load", ":", "\n", "        ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "\n", "", "if", "args", ".", "demo", ":", "\n", "        ", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "eval_env", ",", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "args", ".", "demo_n_episodes", ",", "\n", ")", "\n", "print", "(", "\n", "\"n_runs: {} mean: {} median: {} stdev {}\"", ".", "format", "(", "\n", "args", ".", "demo_n_episodes", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "experiments", ".", "train_agent_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_n_steps", "=", "args", ".", "eval_n_steps", ",", "\n", "eval_n_episodes", "=", "None", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atari.train_a2c_ale.phi": [[15, 18], ["numpy.asarray"], "function", ["None"], ["def", "phi", "(", "x", ")", ":", "\n", "# Feature extractor", "\n", "    ", "return", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atari.train_a2c_ale.main": [[20, 196], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "pfrl.utils.set_random_seed", "pfrl.experiments.prepare_output_dir", "print", "train_a2c_ale.main.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--env\"", ",", "type", "=", "str", ",", "default", "=", "\"BreakoutNoFrameskip-v4\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 31)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--outdir\"", ",", "type", "=", "str", ",", "default", "=", "\"results\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max-frames\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "30", "*", "60", "*", "60", ",", "# 30 minutes with 60 fps", "\n", "help", "=", "\"Maximum number of frames for each episode.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--steps\"", ",", "type", "=", "int", ",", "default", "=", "8", "*", "10", "**", "7", ")", "\n", "parser", ".", "add_argument", "(", "\"--update-steps\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "7e-4", ")", "\n", "parser", ".", "add_argument", "(", "\"--gamma\"", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "\"discount factor\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--rmsprop-epsilon\"", ",", "type", "=", "float", ",", "default", "=", "1e-5", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--use-gae\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"use generalized advantage estimation\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--tau\"", ",", "type", "=", "float", ",", "default", "=", "0.95", ",", "help", "=", "\"gae parameter\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--alpha\"", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "\"RMSprop optimizer alpha\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-interval\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "6", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-n-runs\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--demo\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max-grad-norm\"", ",", "type", "=", "float", ",", "default", "=", "40", ",", "help", "=", "\"value loss coefficient\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gpu\"", ",", "\n", "\"-g\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "-", "1", ",", "\n", "help", "=", "\"GPU ID (negative value indicates CPU)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-envs\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "20", ",", "\n", "help", "=", "\"Logging level. 10:DEBUG, 20:INFO etc.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--monitor\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "(", "\n", "\"Monitor env. Videos and additional information are saved as output files.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--render\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Render env states in a GUI window.\"", ",", "\n", ")", "\n", "parser", ".", "set_defaults", "(", "use_lstm", "=", "False", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "args", ".", "log_level", ")", "\n", "\n", "# Set a random seed used in PFRL.", "\n", "# If you use more than one processes, the results will be no longer", "\n", "# deterministic even with the same random seed.", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Set different random seeds for different subprocesses.", "\n", "# If seed=0 and processes=4, subprocess seeds are [0, 1, 2, 3].", "\n", "# If seed=1 and processes=4, subprocess seeds are [4, 5, 6, 7].", "\n", "process_seeds", "=", "np", ".", "arange", "(", "args", ".", "num_envs", ")", "+", "args", ".", "seed", "*", "args", ".", "num_envs", "\n", "assert", "process_seeds", ".", "max", "(", ")", "<", "2", "**", "31", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ")", "\n", "print", "(", "\"Output files are saved in {}\"", ".", "format", "(", "args", ".", "outdir", ")", ")", "\n", "\n", "def", "make_env", "(", "process_idx", ",", "test", ")", ":", "\n", "# Use different random seeds for train and test envs", "\n", "        ", "process_seed", "=", "process_seeds", "[", "process_idx", "]", "\n", "env_seed", "=", "2", "**", "31", "-", "1", "-", "process_seed", "if", "test", "else", "process_seed", "\n", "env", "=", "atari_wrappers", ".", "wrap_deepmind", "(", "\n", "atari_wrappers", ".", "make_atari", "(", "args", ".", "env", ",", "max_frames", "=", "args", ".", "max_frames", ")", ",", "\n", "episode_life", "=", "not", "test", ",", "\n", "clip_rewards", "=", "not", "test", ",", "\n", ")", "\n", "env", ".", "seed", "(", "int", "(", "env_seed", ")", ")", "\n", "if", "args", ".", "monitor", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Monitor", "(", "\n", "env", ",", "args", ".", "outdir", ",", "mode", "=", "\"evaluation\"", "if", "test", "else", "\"training\"", "\n", ")", "\n", "", "if", "args", ".", "render", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ")", "\n", "", "return", "env", "\n", "\n", "", "def", "make_batch_env", "(", "test", ")", ":", "\n", "        ", "return", "pfrl", ".", "envs", ".", "MultiprocessVectorEnv", "(", "\n", "[", "\n", "functools", ".", "partial", "(", "make_env", ",", "idx", ",", "test", ")", "\n", "for", "idx", ",", "env", "in", "enumerate", "(", "range", "(", "args", ".", "num_envs", ")", ")", "\n", "]", "\n", ")", "\n", "\n", "", "sample_env", "=", "make_env", "(", "0", ",", "test", "=", "False", ")", "\n", "obs_channel_size", "=", "sample_env", ".", "observation_space", ".", "low", ".", "shape", "[", "0", "]", "\n", "n_actions", "=", "sample_env", ".", "action_space", ".", "n", "\n", "\n", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "obs_channel_size", ",", "16", ",", "8", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "4", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "2592", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "pfrl", ".", "nn", ".", "Branched", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "256", ",", "n_actions", ")", ",", "\n", "SoftmaxCategoricalHead", "(", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "1", ")", ",", "\n", ")", ",", "\n", ")", "\n", "optimizer", "=", "pfrl", ".", "optimizers", ".", "RMSpropEpsInsideSqrt", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "eps", "=", "args", ".", "rmsprop_epsilon", ",", "\n", "alpha", "=", "args", ".", "alpha", ",", "\n", ")", "\n", "\n", "agent", "=", "a2c", ".", "A2C", "(", "\n", "model", ",", "\n", "optimizer", ",", "\n", "gamma", "=", "args", ".", "gamma", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "num_processes", "=", "args", ".", "num_envs", ",", "\n", "update_steps", "=", "args", ".", "update_steps", ",", "\n", "phi", "=", "phi", ",", "\n", "use_gae", "=", "args", ".", "use_gae", ",", "\n", "tau", "=", "args", ".", "tau", ",", "\n", "max_grad_norm", "=", "args", ".", "max_grad_norm", ",", "\n", ")", "\n", "\n", "if", "args", ".", "load", ":", "\n", "        ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "\n", "", "if", "args", ".", "demo", ":", "\n", "        ", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "make_batch_env", "(", "test", "=", "True", ")", ",", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", ")", "\n", "print", "(", "\n", "\"n_runs: {} mean: {} median: {} stdev: {}\"", ".", "format", "(", "\n", "args", ".", "eval_n_runs", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "experiments", ".", "train_agent_batch_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "make_batch_env", "(", "test", "=", "False", ")", ",", "\n", "eval_env", "=", "make_batch_env", "(", "test", "=", "True", ")", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "save_best_so_far_agent", "=", "False", ",", "\n", "log_interval", "=", "1000", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atari.train_dqn_batch_ale.SingleSharedBias.__init__": [[27, 30], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "1", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atari.train_dqn_batch_ale.SingleSharedBias.__call__": [[31, 33], ["train_dqn_batch_ale.SingleSharedBias.bias.expand_as"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "bias", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atari.train_dqn_batch_ale.parse_arch": [[35, 60], ["torch.Sequential", "pfrl.nn.LargeAtariCNN", "pfrl.initializers.init_chainer_default", "pfrl.q_functions.DiscreteActionValueHead", "torch.Sequential", "torch.Linear", "pfrl.nn.LargeAtariCNN", "pfrl.initializers.init_chainer_default", "train_dqn_batch_ale.SingleSharedBias", "pfrl.q_functions.DiscreteActionValueHead", "torch.Sequential", "torch.Linear", "pfrl.nn.SmallAtariCNN", "pfrl.initializers.init_chainer_default", "pfrl.q_functions.DiscreteActionValueHead", "pfrl.q_functions.DuelingDQN", "RuntimeError", "torch.Linear"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.chainer_default.init_chainer_default", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.chainer_default.init_chainer_default", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.chainer_default.init_chainer_default"], ["", "", "def", "parse_arch", "(", "arch", ",", "n_actions", ")", ":", "\n", "    ", "if", "arch", "==", "\"nature\"", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "pnn", ".", "LargeAtariCNN", "(", ")", ",", "\n", "init_chainer_default", "(", "nn", ".", "Linear", "(", "512", ",", "n_actions", ")", ")", ",", "\n", "DiscreteActionValueHead", "(", ")", ",", "\n", ")", "\n", "", "elif", "arch", "==", "\"doubledqn\"", ":", "\n", "# raise NotImplementedError(\"Single shared bias not implemented yet\")", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "pnn", ".", "LargeAtariCNN", "(", ")", ",", "\n", "init_chainer_default", "(", "nn", ".", "Linear", "(", "512", ",", "n_actions", ",", "bias", "=", "False", ")", ")", ",", "\n", "SingleSharedBias", "(", ")", ",", "\n", "DiscreteActionValueHead", "(", ")", ",", "\n", ")", "\n", "", "elif", "arch", "==", "\"nips\"", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "pnn", ".", "SmallAtariCNN", "(", ")", ",", "\n", "init_chainer_default", "(", "nn", ".", "Linear", "(", "256", ",", "n_actions", ")", ")", ",", "\n", "DiscreteActionValueHead", "(", ")", ",", "\n", ")", "\n", "", "elif", "arch", "==", "\"dueling\"", ":", "\n", "        ", "return", "DuelingDQN", "(", "n_actions", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Not supported architecture: {}\"", ".", "format", "(", "arch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atari.train_dqn_batch_ale.parse_agent": [[62, 64], ["None"], "function", ["None"], ["", "", "def", "parse_agent", "(", "agent", ")", ":", "\n", "    ", "return", "{", "\"DQN\"", ":", "agents", ".", "DQN", ",", "\"DoubleDQN\"", ":", "agents", ".", "DoubleDQN", ",", "\"PAL\"", ":", "agents", ".", "PAL", "}", "[", "agent", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atari.train_dqn_batch_ale.main": [[66, 279], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "pfrl.utils.set_random_seed", "pfrl.experiments.prepare_output_dir", "print", "train_dqn_batch_ale.main.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--env\"", ",", "type", "=", "str", ",", "default", "=", "\"BreakoutNoFrameskip-v4\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 31)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--demo\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--final-exploration-frames\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "6", ")", "\n", "parser", ".", "add_argument", "(", "\"--final-epsilon\"", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-epsilon\"", ",", "type", "=", "float", ",", "default", "=", "0.001", ")", "\n", "parser", ".", "add_argument", "(", "\"--noisy-net-sigma\"", ",", "type", "=", "float", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--arch\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"doubledqn\"", ",", "\n", "choices", "=", "[", "\"nature\"", ",", "\"nips\"", ",", "\"dueling\"", ",", "\"doubledqn\"", "]", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--steps\"", ",", "type", "=", "int", ",", "default", "=", "5", "*", "10", "**", "7", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max-frames\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "30", "*", "60", "*", "60", ",", "# 30 minutes with 60 fps", "\n", "help", "=", "\"Maximum number of frames for each episode.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--replay-start-size\"", ",", "type", "=", "int", ",", "default", "=", "5", "*", "10", "**", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--target-update-interval\"", ",", "type", "=", "int", ",", "default", "=", "3", "*", "10", "**", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-interval\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "5", ")", "\n", "parser", ".", "add_argument", "(", "\"--update-interval\"", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-n-runs\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--no-clip-delta\"", ",", "dest", "=", "\"clip_delta\"", ",", "action", "=", "\"store_false\"", ")", "\n", "parser", ".", "set_defaults", "(", "clip_delta", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--agent\"", ",", "type", "=", "str", ",", "default", "=", "\"DoubleDQN\"", ",", "choices", "=", "[", "\"DQN\"", ",", "\"DoubleDQN\"", ",", "\"PAL\"", "]", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "20", ",", "\n", "help", "=", "\"Logging level. 10:DEBUG, 20:INFO etc.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--render\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Render env states in a GUI window.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--monitor\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "(", "\n", "\"Monitor env. Videos and additional information are saved as output files.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "2.5e-4", ",", "help", "=", "\"Learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--prioritized\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Use prioritized experience replay.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-envs\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--n-step-return\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "import", "logging", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "args", ".", "log_level", ")", "\n", "\n", "# Set a random seed used in PFRL.", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Set different random seeds for different subprocesses.", "\n", "# If seed=0 and processes=4, subprocess seeds are [0, 1, 2, 3].", "\n", "# If seed=1 and processes=4, subprocess seeds are [4, 5, 6, 7].", "\n", "process_seeds", "=", "np", ".", "arange", "(", "args", ".", "num_envs", ")", "+", "args", ".", "seed", "*", "args", ".", "num_envs", "\n", "assert", "process_seeds", ".", "max", "(", ")", "<", "2", "**", "32", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ")", "\n", "print", "(", "\"Output files are saved in {}\"", ".", "format", "(", "args", ".", "outdir", ")", ")", "\n", "\n", "def", "make_env", "(", "idx", ",", "test", ")", ":", "\n", "# Use different random seeds for train and test envs", "\n", "        ", "process_seed", "=", "int", "(", "process_seeds", "[", "idx", "]", ")", "\n", "env_seed", "=", "2", "**", "32", "-", "1", "-", "process_seed", "if", "test", "else", "process_seed", "\n", "env", "=", "atari_wrappers", ".", "wrap_deepmind", "(", "\n", "atari_wrappers", ".", "make_atari", "(", "args", ".", "env", ",", "max_frames", "=", "args", ".", "max_frames", ")", ",", "\n", "episode_life", "=", "not", "test", ",", "\n", "clip_rewards", "=", "not", "test", ",", "\n", "frame_stack", "=", "False", ",", "\n", ")", "\n", "if", "test", ":", "\n", "# Randomize actions like epsilon-greedy in evaluation as well", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "RandomizeAction", "(", "env", ",", "args", ".", "eval_epsilon", ")", "\n", "", "env", ".", "seed", "(", "env_seed", ")", "\n", "if", "args", ".", "monitor", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Monitor", "(", "\n", "env", ",", "args", ".", "outdir", ",", "mode", "=", "\"evaluation\"", "if", "test", "else", "\"training\"", "\n", ")", "\n", "", "if", "args", ".", "render", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ")", "\n", "", "return", "env", "\n", "\n", "", "def", "make_batch_env", "(", "test", ")", ":", "\n", "        ", "vec_env", "=", "pfrl", ".", "envs", ".", "MultiprocessVectorEnv", "(", "\n", "[", "\n", "functools", ".", "partial", "(", "make_env", ",", "idx", ",", "test", ")", "\n", "for", "idx", ",", "env", "in", "enumerate", "(", "range", "(", "args", ".", "num_envs", ")", ")", "\n", "]", "\n", ")", "\n", "vec_env", "=", "pfrl", ".", "wrappers", ".", "VectorFrameStack", "(", "vec_env", ",", "4", ")", "\n", "return", "vec_env", "\n", "\n", "", "sample_env", "=", "make_env", "(", "0", ",", "test", "=", "False", ")", "\n", "\n", "n_actions", "=", "sample_env", ".", "action_space", ".", "n", "\n", "q_func", "=", "parse_arch", "(", "args", ".", "arch", ",", "n_actions", ")", "\n", "\n", "if", "args", ".", "noisy_net_sigma", "is", "not", "None", ":", "\n", "        ", "pnn", ".", "to_factorized_noisy", "(", "q_func", ",", "sigma_scale", "=", "args", ".", "noisy_net_sigma", ")", "\n", "# Turn off explorer", "\n", "explorer", "=", "explorers", ".", "Greedy", "(", ")", "\n", "\n", "# Use the same hyper parameters as the Nature paper's", "\n", "", "opt", "=", "optim", ".", "RMSprop", "(", "\n", "q_func", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "alpha", "=", "0.95", ",", "\n", "momentum", "=", "0.0", ",", "\n", "eps", "=", "1e-2", ",", "\n", "centered", "=", "True", ",", "\n", ")", "\n", "\n", "# Select a replay buffer to use", "\n", "if", "args", ".", "prioritized", ":", "\n", "# Anneal beta from beta0 to 1 throughout training", "\n", "        ", "betasteps", "=", "args", ".", "steps", "/", "args", ".", "update_interval", "\n", "rbuf", "=", "replay_buffers", ".", "PrioritizedReplayBuffer", "(", "\n", "10", "**", "6", ",", "\n", "alpha", "=", "0.6", ",", "\n", "beta0", "=", "0.4", ",", "\n", "betasteps", "=", "betasteps", ",", "\n", "num_steps", "=", "args", ".", "n_step_return", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "10", "**", "6", ",", "num_steps", "=", "args", ".", "n_step_return", ")", "\n", "\n", "", "explorer", "=", "explorers", ".", "LinearDecayEpsilonGreedy", "(", "\n", "1.0", ",", "\n", "args", ".", "final_epsilon", ",", "\n", "args", ".", "final_exploration_frames", ",", "\n", "lambda", ":", "np", ".", "random", ".", "randint", "(", "n_actions", ")", ",", "\n", ")", "\n", "\n", "def", "phi", "(", "x", ")", ":", "\n", "# Feature extractor", "\n", "        ", "return", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255", "\n", "\n", "", "Agent", "=", "parse_agent", "(", "args", ".", "agent", ")", "\n", "agent", "=", "Agent", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "gamma", "=", "0.99", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "args", ".", "replay_start_size", ",", "\n", "target_update_interval", "=", "args", ".", "target_update_interval", ",", "\n", "clip_delta", "=", "args", ".", "clip_delta", ",", "\n", "update_interval", "=", "args", ".", "update_interval", ",", "\n", "batch_accumulator", "=", "\"sum\"", ",", "\n", "phi", "=", "phi", ",", "\n", ")", "\n", "\n", "if", "args", ".", "load", ":", "\n", "        ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "\n", "", "if", "args", ".", "demo", ":", "\n", "        ", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "make_batch_env", "(", "test", "=", "True", ")", ",", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", ")", "\n", "print", "(", "\n", "\"n_runs: {} mean: {} median: {} stdev {}\"", ".", "format", "(", "\n", "args", ".", "eval_n_runs", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "experiments", ".", "train_agent_batch_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "make_batch_env", "(", "test", "=", "False", ")", ",", "\n", "eval_env", "=", "make_batch_env", "(", "test", "=", "True", ")", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "save_best_so_far_agent", "=", "False", ",", "\n", "log_interval", "=", "1000", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atari.train_acer_ale.main": [[21, 211], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "pfrl.utils.set_random_seed", "pfrl.experiments.prepare_output_dir", "print", "torch.nn.Sequential", "pfrl.agents.acer.ACERDiscreteActionHead", "nn.Sequential.apply", "pfrl.optimizers.SharedRMSpropEpsInsideSqrt", "pfrl.replay_buffers.EpisodicReplayBuffer", "pfrl.agents.acer.ACER", "numpy.arange", "process_seeds.max", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Flatten", "torch.nn.Linear", "torch.nn.ReLU", "pfrl.nn.RecurrentSequential", "torch.nn.Sequential", "nn.Sequential.parameters", "acer.ACER.load", "pfrl.wrappers.atari_wrappers.wrap_deepmind", "pfrl.wrappers.Render.seed", "train_acer_ale.main.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.wrap_deepmind", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"processes\"", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--env\"", ",", "type", "=", "str", ",", "default", "=", "\"BreakoutNoFrameskip-v4\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 31)\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--t-max\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "\"--replay-start-size\"", ",", "type", "=", "int", ",", "default", "=", "10000", ")", "\n", "parser", ".", "add_argument", "(", "\"--n-times-replay\"", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--beta\"", ",", "type", "=", "float", ",", "default", "=", "1e-2", ")", "\n", "parser", ".", "add_argument", "(", "\"--profile\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--steps\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "7", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max-frames\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "30", "*", "60", "*", "60", ",", "# 30 minutes with 60 fps", "\n", "help", "=", "\"Maximum number of frames for each episode.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "7e-4", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-interval\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "5", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-n-runs\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--use-lstm\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--demo\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "20", ",", "\n", "help", "=", "\"Logging level. 10:DEBUG, 20:INFO etc.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--render\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Render env states in a GUI window.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--monitor\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "(", "\n", "\"Monitor env. Videos and additional information are saved as output files.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "set_defaults", "(", "use_lstm", "=", "False", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "import", "logging", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "args", ".", "log_level", ")", "\n", "\n", "# Set a random seed used in PFRL.", "\n", "# If you use more than one processes, the results will be no longer", "\n", "# deterministic even with the same random seed.", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Set different random seeds for different subprocesses.", "\n", "# If seed=0 and processes=4, subprocess seeds are [0, 1, 2, 3].", "\n", "# If seed=1 and processes=4, subprocess seeds are [4, 5, 6, 7].", "\n", "process_seeds", "=", "np", ".", "arange", "(", "args", ".", "processes", ")", "+", "args", ".", "seed", "*", "args", ".", "processes", "\n", "assert", "process_seeds", ".", "max", "(", ")", "<", "2", "**", "31", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ")", "\n", "print", "(", "\"Output files are saved in {}\"", ".", "format", "(", "args", ".", "outdir", ")", ")", "\n", "\n", "n_actions", "=", "gym", ".", "make", "(", "args", ".", "env", ")", ".", "action_space", ".", "n", "\n", "\n", "input_to_hidden", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "4", ",", "16", ",", "8", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "4", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "2592", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "head", "=", "acer", ".", "ACERDiscreteActionHead", "(", "\n", "pi", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "256", ",", "n_actions", ")", ",", "\n", "SoftmaxCategoricalHead", "(", ")", ",", "\n", ")", ",", "\n", "q", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "256", ",", "n_actions", ")", ",", "\n", "DiscreteActionValueHead", "(", ")", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "if", "args", ".", "use_lstm", ":", "\n", "        ", "model", "=", "pfrl", ".", "nn", ".", "RecurrentSequential", "(", "\n", "input_to_hidden", ",", "\n", "nn", ".", "LSTM", "(", "num_layers", "=", "1", ",", "input_size", "=", "256", ",", "hidden_size", "=", "256", ")", ",", "\n", "head", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "nn", ".", "Sequential", "(", "input_to_hidden", ",", "head", ")", "\n", "\n", "", "model", ".", "apply", "(", "pfrl", ".", "initializers", ".", "init_chainer_default", ")", "\n", "\n", "opt", "=", "pfrl", ".", "optimizers", ".", "SharedRMSpropEpsInsideSqrt", "(", "\n", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "eps", "=", "4e-3", ",", "alpha", "=", "0.99", "\n", ")", "\n", "\n", "replay_buffer", "=", "EpisodicReplayBuffer", "(", "10", "**", "6", "//", "args", ".", "processes", ")", "\n", "\n", "def", "phi", "(", "x", ")", ":", "\n", "# Feature extractor", "\n", "        ", "return", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255", "\n", "\n", "", "agent", "=", "acer", ".", "ACER", "(", "\n", "model", ",", "\n", "opt", ",", "\n", "t_max", "=", "args", ".", "t_max", ",", "\n", "gamma", "=", "0.99", ",", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", "n_times_replay", "=", "args", ".", "n_times_replay", ",", "\n", "replay_start_size", "=", "args", ".", "replay_start_size", ",", "\n", "beta", "=", "args", ".", "beta", ",", "\n", "phi", "=", "phi", ",", "\n", "max_grad_norm", "=", "40", ",", "\n", "recurrent", "=", "args", ".", "use_lstm", ",", "\n", ")", "\n", "\n", "if", "args", ".", "load", ":", "\n", "        ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "\n", "", "def", "make_env", "(", "process_idx", ",", "test", ")", ":", "\n", "# Use different random seeds for train and test envs", "\n", "        ", "process_seed", "=", "process_seeds", "[", "process_idx", "]", "\n", "env_seed", "=", "2", "**", "31", "-", "1", "-", "process_seed", "if", "test", "else", "process_seed", "\n", "env", "=", "atari_wrappers", ".", "wrap_deepmind", "(", "\n", "atari_wrappers", ".", "make_atari", "(", "args", ".", "env", ",", "max_frames", "=", "args", ".", "max_frames", ")", ",", "\n", "episode_life", "=", "not", "test", ",", "\n", "clip_rewards", "=", "not", "test", ",", "\n", ")", "\n", "env", ".", "seed", "(", "int", "(", "env_seed", ")", ")", "\n", "if", "args", ".", "monitor", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Monitor", "(", "\n", "env", ",", "args", ".", "outdir", ",", "mode", "=", "\"evaluation\"", "if", "test", "else", "\"training\"", "\n", ")", "\n", "", "if", "args", ".", "render", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ")", "\n", "", "return", "env", "\n", "\n", "", "if", "args", ".", "demo", ":", "\n", "        ", "env", "=", "make_env", "(", "0", ",", "True", ")", "\n", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "env", ",", "agent", "=", "agent", ",", "n_steps", "=", "None", ",", "n_episodes", "=", "args", ".", "eval_n_runs", "\n", ")", "\n", "print", "(", "\n", "\"n_runs: {} mean: {} median: {} stdev {}\"", ".", "format", "(", "\n", "args", ".", "eval_n_runs", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "\n", "# Linearly decay the learning rate to zero", "\n", "        ", "def", "lr_setter", "(", "env", ",", "agent", ",", "value", ")", ":", "\n", "            ", "for", "pg", "in", "agent", ".", "optimizer", ".", "param_groups", ":", "\n", "                ", "assert", "\"lr\"", "in", "pg", "\n", "pg", "[", "\"lr\"", "]", "=", "value", "\n", "\n", "", "", "lr_decay_hook", "=", "experiments", ".", "LinearInterpolationHook", "(", "\n", "args", ".", "steps", ",", "args", ".", "lr", ",", "0", ",", "lr_setter", "\n", ")", "\n", "\n", "experiments", ".", "train_agent_async", "(", "\n", "agent", "=", "agent", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "processes", "=", "args", ".", "processes", ",", "\n", "make_env", "=", "make_env", ",", "\n", "profile", "=", "args", ".", "profile", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "global_step_hooks", "=", "[", "lr_decay_hook", "]", ",", "\n", "save_best_so_far_agent", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atari.train_ppo_ale.main": [[25, 330], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "pfrl.utils.set_random_seed", "pfrl.experiments.prepare_output_dir", "print", "train_ppo_ale.main.make_batch_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--env\"", ",", "type", "=", "str", ",", "default", "=", "\"BreakoutNoFrameskip-v4\"", ",", "help", "=", "\"Gym Env ID.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"GPU device ID. Set to -1 to use CPUs only.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num-envs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "8", ",", "\n", "help", "=", "\"Number of env instances run in parallel.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 32)\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--steps\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "7", ",", "help", "=", "\"Total time steps for training.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max-frames\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "30", "*", "60", "*", "60", ",", "# 30 minutes with 60 fps", "\n", "help", "=", "\"Maximum number of frames for each episode.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "2.5e-4", ",", "help", "=", "\"Learning rate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100000", ",", "\n", "help", "=", "\"Interval (in timesteps) between evaluation phases.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-n-runs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "\"Number of episodes ran in an evaluation phase.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--demo\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Run demo episodes, not training.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--load\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to load a saved agent data from\"", "\n", "\" if it is a non-empty string.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "20", ",", "\n", "help", "=", "\"Logging level. 10:DEBUG, 20:INFO etc.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--render\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Render env states in a GUI window.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--monitor\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "(", "\n", "\"Monitor env. Videos and additional information are saved as output files.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--update-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "128", "*", "8", ",", "\n", "help", "=", "\"Interval (in timesteps) between PPO iterations.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--batchsize\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "32", "*", "8", ",", "\n", "help", "=", "\"Size of minibatch (in timesteps).\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--epochs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "4", ",", "\n", "help", "=", "\"Number of epochs used for each PPO iteration.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10000", ",", "\n", "help", "=", "\"Interval (in timesteps) of printing logs.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--recurrent\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Use a recurrent model. See the code for the model definition.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--flicker\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "(", "\n", "\"Use so-called flickering Atari, where each\"", "\n", "\" screen is blacked out with probability 0.5.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--no-frame-stack\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "(", "\n", "\"Disable frame stacking so that the agent can only see the current screen.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checkpoint-frequency\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Frequency at which agents are stored.\"", ",", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "import", "logging", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "args", ".", "log_level", ")", "\n", "\n", "# Set a random seed used in PFRL.", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Set different random seeds for different subprocesses.", "\n", "# If seed=0 and processes=4, subprocess seeds are [0, 1, 2, 3].", "\n", "# If seed=1 and processes=4, subprocess seeds are [4, 5, 6, 7].", "\n", "process_seeds", "=", "np", ".", "arange", "(", "args", ".", "num_envs", ")", "+", "args", ".", "seed", "*", "args", ".", "num_envs", "\n", "assert", "process_seeds", ".", "max", "(", ")", "<", "2", "**", "32", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ")", "\n", "print", "(", "\"Output files are saved in {}\"", ".", "format", "(", "args", ".", "outdir", ")", ")", "\n", "\n", "def", "make_env", "(", "idx", ",", "test", ")", ":", "\n", "# Use different random seeds for train and test envs", "\n", "        ", "process_seed", "=", "int", "(", "process_seeds", "[", "idx", "]", ")", "\n", "env_seed", "=", "2", "**", "32", "-", "1", "-", "process_seed", "if", "test", "else", "process_seed", "\n", "env", "=", "atari_wrappers", ".", "wrap_deepmind", "(", "\n", "atari_wrappers", ".", "make_atari", "(", "args", ".", "env", ",", "max_frames", "=", "args", ".", "max_frames", ")", ",", "\n", "episode_life", "=", "not", "test", ",", "\n", "clip_rewards", "=", "not", "test", ",", "\n", "flicker", "=", "args", ".", "flicker", ",", "\n", "frame_stack", "=", "False", ",", "\n", ")", "\n", "env", ".", "seed", "(", "env_seed", ")", "\n", "if", "args", ".", "monitor", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Monitor", "(", "\n", "env", ",", "args", ".", "outdir", ",", "mode", "=", "\"evaluation\"", "if", "test", "else", "\"training\"", "\n", ")", "\n", "", "if", "args", ".", "render", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ")", "\n", "", "return", "env", "\n", "\n", "", "def", "make_batch_env", "(", "test", ")", ":", "\n", "        ", "vec_env", "=", "pfrl", ".", "envs", ".", "MultiprocessVectorEnv", "(", "\n", "[", "\n", "functools", ".", "partial", "(", "make_env", ",", "idx", ",", "test", ")", "\n", "for", "idx", ",", "env", "in", "enumerate", "(", "range", "(", "args", ".", "num_envs", ")", ")", "\n", "]", "\n", ")", "\n", "if", "not", "args", ".", "no_frame_stack", ":", "\n", "            ", "vec_env", "=", "pfrl", ".", "wrappers", ".", "VectorFrameStack", "(", "vec_env", ",", "4", ")", "\n", "", "return", "vec_env", "\n", "\n", "", "sample_env", "=", "make_batch_env", "(", "test", "=", "False", ")", "\n", "print", "(", "\"Observation space\"", ",", "sample_env", ".", "observation_space", ")", "\n", "print", "(", "\"Action space\"", ",", "sample_env", ".", "action_space", ")", "\n", "n_actions", "=", "sample_env", ".", "action_space", ".", "n", "\n", "obs_n_channels", "=", "sample_env", ".", "observation_space", ".", "low", ".", "shape", "[", "0", "]", "\n", "del", "sample_env", "\n", "\n", "def", "lecun_init", "(", "layer", ",", "gain", "=", "1", ")", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "            ", "pfrl", ".", "initializers", ".", "init_lecun_normal", "(", "layer", ".", "weight", ",", "gain", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "pfrl", ".", "initializers", ".", "init_lecun_normal", "(", "layer", ".", "weight_ih_l0", ",", "gain", ")", "\n", "pfrl", ".", "initializers", ".", "init_lecun_normal", "(", "layer", ".", "weight_hh_l0", ",", "gain", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "bias_ih_l0", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "bias_hh_l0", ")", "\n", "", "return", "layer", "\n", "\n", "", "if", "args", ".", "recurrent", ":", "\n", "        ", "model", "=", "pfrl", ".", "nn", ".", "RecurrentSequential", "(", "\n", "lecun_init", "(", "nn", ".", "Conv2d", "(", "obs_n_channels", ",", "32", ",", "8", ",", "stride", "=", "4", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "lecun_init", "(", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "4", ",", "stride", "=", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "lecun_init", "(", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "lecun_init", "(", "nn", ".", "Linear", "(", "3136", ",", "512", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "lecun_init", "(", "nn", ".", "GRU", "(", "num_layers", "=", "1", ",", "input_size", "=", "512", ",", "hidden_size", "=", "512", ")", ")", ",", "\n", "pfrl", ".", "nn", ".", "Branched", "(", "\n", "nn", ".", "Sequential", "(", "\n", "lecun_init", "(", "nn", ".", "Linear", "(", "512", ",", "n_actions", ")", ",", "1e-2", ")", ",", "\n", "SoftmaxCategoricalHead", "(", ")", ",", "\n", ")", ",", "\n", "lecun_init", "(", "nn", ".", "Linear", "(", "512", ",", "1", ")", ")", ",", "\n", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "nn", ".", "Sequential", "(", "\n", "lecun_init", "(", "nn", ".", "Conv2d", "(", "obs_n_channels", ",", "32", ",", "8", ",", "stride", "=", "4", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "lecun_init", "(", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "4", ",", "stride", "=", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "lecun_init", "(", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "lecun_init", "(", "nn", ".", "Linear", "(", "3136", ",", "512", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "pfrl", ".", "nn", ".", "Branched", "(", "\n", "nn", ".", "Sequential", "(", "\n", "lecun_init", "(", "nn", ".", "Linear", "(", "512", ",", "n_actions", ")", ",", "1e-2", ")", ",", "\n", "SoftmaxCategoricalHead", "(", ")", ",", "\n", ")", ",", "\n", "lecun_init", "(", "nn", ".", "Linear", "(", "512", ",", "1", ")", ")", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "eps", "=", "1e-5", ")", "\n", "\n", "def", "phi", "(", "x", ")", ":", "\n", "# Feature extractor", "\n", "        ", "return", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255", "\n", "\n", "", "agent", "=", "PPO", "(", "\n", "model", ",", "\n", "opt", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "phi", "=", "phi", ",", "\n", "update_interval", "=", "args", ".", "update_interval", ",", "\n", "minibatch_size", "=", "args", ".", "batchsize", ",", "\n", "epochs", "=", "args", ".", "epochs", ",", "\n", "clip_eps", "=", "0.1", ",", "\n", "clip_eps_vf", "=", "None", ",", "\n", "standardize_advantages", "=", "True", ",", "\n", "entropy_coef", "=", "1e-2", ",", "\n", "recurrent", "=", "args", ".", "recurrent", ",", "\n", "max_grad_norm", "=", "0.5", ",", "\n", ")", "\n", "if", "args", ".", "load", ":", "\n", "        ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "\n", "", "if", "args", ".", "demo", ":", "\n", "        ", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "make_batch_env", "(", "test", "=", "True", ")", ",", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", ")", "\n", "print", "(", "\n", "\"n_runs: {} mean: {} median: {} stdev: {}\"", ".", "format", "(", "\n", "args", ".", "eval_n_runs", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "step_hooks", "=", "[", "]", "\n", "\n", "# Linearly decay the learning rate to zero", "\n", "def", "lr_setter", "(", "env", ",", "agent", ",", "value", ")", ":", "\n", "            ", "for", "param_group", "in", "agent", ".", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "value", "\n", "\n", "", "", "step_hooks", ".", "append", "(", "\n", "experiments", ".", "LinearInterpolationHook", "(", "args", ".", "steps", ",", "args", ".", "lr", ",", "0", ",", "lr_setter", ")", "\n", ")", "\n", "\n", "experiments", ".", "train_agent_batch_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "make_batch_env", "(", "False", ")", ",", "\n", "eval_env", "=", "make_batch_env", "(", "True", ")", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "checkpoint_freq", "=", "args", ".", "checkpoint_frequency", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "log_interval", "=", "args", ".", "log_interval", ",", "\n", "save_best_so_far_agent", "=", "False", ",", "\n", "step_hooks", "=", "step_hooks", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atari.train_dqn_ale.SingleSharedBias.__init__": [[25, 28], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "1", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atari.train_dqn_ale.SingleSharedBias.__call__": [[29, 31], ["train_dqn_ale.SingleSharedBias.bias.expand_as"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "bias", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atari.train_dqn_ale.parse_arch": [[33, 57], ["torch.Sequential", "pfrl.nn.LargeAtariCNN", "pfrl.initializers.init_chainer_default", "pfrl.q_functions.DiscreteActionValueHead", "torch.Sequential", "torch.Linear", "pfrl.nn.LargeAtariCNN", "pfrl.initializers.init_chainer_default", "train_dqn_ale.SingleSharedBias", "pfrl.q_functions.DiscreteActionValueHead", "torch.Sequential", "torch.Linear", "pfrl.nn.SmallAtariCNN", "pfrl.initializers.init_chainer_default", "pfrl.q_functions.DiscreteActionValueHead", "pfrl.q_functions.DuelingDQN", "RuntimeError", "torch.Linear"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.chainer_default.init_chainer_default", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.chainer_default.init_chainer_default", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.chainer_default.init_chainer_default"], ["", "", "def", "parse_arch", "(", "arch", ",", "n_actions", ")", ":", "\n", "    ", "if", "arch", "==", "\"nature\"", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "pnn", ".", "LargeAtariCNN", "(", ")", ",", "\n", "init_chainer_default", "(", "nn", ".", "Linear", "(", "512", ",", "n_actions", ")", ")", ",", "\n", "DiscreteActionValueHead", "(", ")", ",", "\n", ")", "\n", "", "elif", "arch", "==", "\"doubledqn\"", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "pnn", ".", "LargeAtariCNN", "(", ")", ",", "\n", "init_chainer_default", "(", "nn", ".", "Linear", "(", "512", ",", "n_actions", ",", "bias", "=", "False", ")", ")", ",", "\n", "SingleSharedBias", "(", ")", ",", "\n", "DiscreteActionValueHead", "(", ")", ",", "\n", ")", "\n", "", "elif", "arch", "==", "\"nips\"", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "pnn", ".", "SmallAtariCNN", "(", ")", ",", "\n", "init_chainer_default", "(", "nn", ".", "Linear", "(", "256", ",", "n_actions", ")", ")", ",", "\n", "DiscreteActionValueHead", "(", ")", ",", "\n", ")", "\n", "", "elif", "arch", "==", "\"dueling\"", ":", "\n", "        ", "return", "DuelingDQN", "(", "n_actions", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Not supported architecture: {}\"", ".", "format", "(", "arch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atari.train_dqn_ale.parse_agent": [[59, 61], ["None"], "function", ["None"], ["", "", "def", "parse_agent", "(", "agent", ")", ":", "\n", "    ", "return", "{", "\"DQN\"", ":", "agents", ".", "DQN", ",", "\"DoubleDQN\"", ":", "agents", ".", "DoubleDQN", ",", "\"PAL\"", ":", "agents", ".", "PAL", "}", "[", "agent", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atari.train_dqn_ale.main": [[63, 313], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "pfrl.utils.set_random_seed", "pfrl.experiments.prepare_output_dir", "print", "train_dqn_ale.main.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--env\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"BreakoutNoFrameskip-v4\"", ",", "\n", "help", "=", "\"OpenAI Atari domain to perform algorithm on.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 31)\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"GPU to use, set to -1 if no GPU.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--demo\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--final-exploration-frames\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", "**", "6", ",", "\n", "help", "=", "\"Timesteps after which we stop \"", "+", "\"annealing exploration rate\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--final-epsilon\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.01", ",", "\n", "help", "=", "\"Final value of epsilon during training.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-epsilon\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.001", ",", "\n", "help", "=", "\"Exploration epsilon used during eval episodes.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--noisy-net-sigma\"", ",", "type", "=", "float", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--arch\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"doubledqn\"", ",", "\n", "choices", "=", "[", "\"nature\"", ",", "\"nips\"", ",", "\"dueling\"", ",", "\"doubledqn\"", "]", ",", "\n", "help", "=", "\"Network architecture to use.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--steps\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", "*", "10", "**", "7", ",", "\n", "help", "=", "\"Total number of timesteps to train the agent.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max-frames\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "30", "*", "60", "*", "60", ",", "# 30 minutes with 60 fps", "\n", "help", "=", "\"Maximum number of frames for each episode.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--replay-start-size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", "*", "10", "**", "4", ",", "\n", "help", "=", "\"Minimum replay buffer size before \"", "+", "\"performing gradient updates.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--target-update-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "3", "*", "10", "**", "4", ",", "\n", "help", "=", "\"Frequency (in timesteps) at which \"", "+", "\"the target network is updated.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", "**", "5", ",", "\n", "help", "=", "\"Frequency (in timesteps) of evaluation phase.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--update-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "4", ",", "\n", "help", "=", "\"Frequency (in timesteps) of network updates.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-n-runs\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--no-clip-delta\"", ",", "dest", "=", "\"clip_delta\"", ",", "action", "=", "\"store_false\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-step-return\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "set_defaults", "(", "clip_delta", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--agent\"", ",", "type", "=", "str", ",", "default", "=", "\"DoubleDQN\"", ",", "choices", "=", "[", "\"DQN\"", ",", "\"DoubleDQN\"", ",", "\"PAL\"", "]", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "20", ",", "\n", "help", "=", "\"Logging level. 10:DEBUG, 20:INFO etc.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--render\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Render env states in a GUI window.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--monitor\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "(", "\n", "\"Monitor env. Videos and additional information are saved as output files.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "2.5e-4", ",", "help", "=", "\"Learning rate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--prioritized\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Use prioritized experience replay.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checkpoint-frequency\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Frequency at which agents are stored.\"", ",", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "import", "logging", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "args", ".", "log_level", ")", "\n", "\n", "# Set a random seed used in PFRL.", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Set different random seeds for train and test envs.", "\n", "train_seed", "=", "args", ".", "seed", "\n", "test_seed", "=", "2", "**", "31", "-", "1", "-", "args", ".", "seed", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ")", "\n", "print", "(", "\"Output files are saved in {}\"", ".", "format", "(", "args", ".", "outdir", ")", ")", "\n", "\n", "def", "make_env", "(", "test", ")", ":", "\n", "# Use different random seeds for train and test envs", "\n", "        ", "env_seed", "=", "test_seed", "if", "test", "else", "train_seed", "\n", "env", "=", "atari_wrappers", ".", "wrap_deepmind", "(", "\n", "atari_wrappers", ".", "make_atari", "(", "args", ".", "env", ",", "max_frames", "=", "args", ".", "max_frames", ")", ",", "\n", "episode_life", "=", "not", "test", ",", "\n", "clip_rewards", "=", "not", "test", ",", "\n", ")", "\n", "env", ".", "seed", "(", "int", "(", "env_seed", ")", ")", "\n", "if", "test", ":", "\n", "# Randomize actions like epsilon-greedy in evaluation as well", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "RandomizeAction", "(", "env", ",", "args", ".", "eval_epsilon", ")", "\n", "", "if", "args", ".", "monitor", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Monitor", "(", "\n", "env", ",", "args", ".", "outdir", ",", "mode", "=", "\"evaluation\"", "if", "test", "else", "\"training\"", "\n", ")", "\n", "", "if", "args", ".", "render", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ")", "\n", "", "return", "env", "\n", "\n", "", "env", "=", "make_env", "(", "test", "=", "False", ")", "\n", "eval_env", "=", "make_env", "(", "test", "=", "True", ")", "\n", "\n", "n_actions", "=", "env", ".", "action_space", ".", "n", "\n", "q_func", "=", "parse_arch", "(", "args", ".", "arch", ",", "n_actions", ")", "\n", "\n", "if", "args", ".", "noisy_net_sigma", "is", "not", "None", ":", "\n", "        ", "pnn", ".", "to_factorized_noisy", "(", "q_func", ",", "sigma_scale", "=", "args", ".", "noisy_net_sigma", ")", "\n", "# Turn off explorer", "\n", "explorer", "=", "explorers", ".", "Greedy", "(", ")", "\n", "", "else", ":", "\n", "        ", "explorer", "=", "explorers", ".", "LinearDecayEpsilonGreedy", "(", "\n", "1.0", ",", "\n", "args", ".", "final_epsilon", ",", "\n", "args", ".", "final_exploration_frames", ",", "\n", "lambda", ":", "np", ".", "random", ".", "randint", "(", "n_actions", ")", ",", "\n", ")", "\n", "\n", "# Use the Nature paper's hyperparameters", "\n", "", "opt", "=", "pfrl", ".", "optimizers", ".", "RMSpropEpsInsideSqrt", "(", "\n", "q_func", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "alpha", "=", "0.95", ",", "\n", "momentum", "=", "0.0", ",", "\n", "eps", "=", "1e-2", ",", "\n", "centered", "=", "True", ",", "\n", ")", "\n", "\n", "# Select a replay buffer to use", "\n", "if", "args", ".", "prioritized", ":", "\n", "# Anneal beta from beta0 to 1 throughout training", "\n", "        ", "betasteps", "=", "args", ".", "steps", "/", "args", ".", "update_interval", "\n", "rbuf", "=", "replay_buffers", ".", "PrioritizedReplayBuffer", "(", "\n", "10", "**", "6", ",", "\n", "alpha", "=", "0.6", ",", "\n", "beta0", "=", "0.4", ",", "\n", "betasteps", "=", "betasteps", ",", "\n", "num_steps", "=", "args", ".", "num_step_return", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "10", "**", "6", ",", "args", ".", "num_step_return", ")", "\n", "\n", "", "def", "phi", "(", "x", ")", ":", "\n", "# Feature extractor", "\n", "        ", "return", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255", "\n", "\n", "", "Agent", "=", "parse_agent", "(", "args", ".", "agent", ")", "\n", "agent", "=", "Agent", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "gamma", "=", "0.99", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "args", ".", "replay_start_size", ",", "\n", "target_update_interval", "=", "args", ".", "target_update_interval", ",", "\n", "clip_delta", "=", "args", ".", "clip_delta", ",", "\n", "update_interval", "=", "args", ".", "update_interval", ",", "\n", "batch_accumulator", "=", "\"sum\"", ",", "\n", "phi", "=", "phi", ",", "\n", ")", "\n", "\n", "if", "args", ".", "load", ":", "\n", "        ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "\n", "", "if", "args", ".", "demo", ":", "\n", "        ", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "eval_env", ",", "agent", "=", "agent", ",", "n_steps", "=", "None", ",", "n_episodes", "=", "args", ".", "eval_n_runs", "\n", ")", "\n", "print", "(", "\n", "\"n_runs: {} mean: {} median: {} stdev {}\"", ".", "format", "(", "\n", "args", ".", "eval_n_runs", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "experiments", ".", "train_agent_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "checkpoint_freq", "=", "args", ".", "checkpoint_frequency", ",", "\n", "eval_n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "save_best_so_far_agent", "=", "False", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.iqn.train_iqn.main": [[14, 228], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "pfrl.utils.set_random_seed", "pfrl.experiments.prepare_output_dir", "print", "train_iqn.main.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--env\"", ",", "type", "=", "str", ",", "default", "=", "\"BreakoutNoFrameskip-v4\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 31)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--demo\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--load-pretrained\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pretrained-type\"", ",", "type", "=", "str", ",", "default", "=", "\"best\"", ",", "choices", "=", "[", "\"best\"", ",", "\"final\"", "]", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--final-exploration-frames\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "6", ")", "\n", "parser", ".", "add_argument", "(", "\"--final-epsilon\"", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-epsilon\"", ",", "type", "=", "float", ",", "default", "=", "0.001", ")", "\n", "parser", ".", "add_argument", "(", "\"--steps\"", ",", "type", "=", "int", ",", "default", "=", "5", "*", "10", "**", "7", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max-frames\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "30", "*", "60", "*", "60", ",", "# 30 minutes with 60 fps", "\n", "help", "=", "\"Maximum number of frames for each episode.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--replay-start-size\"", ",", "type", "=", "int", ",", "default", "=", "5", "*", "10", "**", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--target-update-interval\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-interval\"", ",", "type", "=", "int", ",", "default", "=", "250000", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-n-steps\"", ",", "type", "=", "int", ",", "default", "=", "125000", ")", "\n", "parser", ".", "add_argument", "(", "\"--update-interval\"", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "20", ",", "\n", "help", "=", "\"Logging level. 10:DEBUG, 20:INFO etc.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--render\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Render env states in a GUI window.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--monitor\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "(", "\n", "\"Monitor env. Videos and additional information are saved as output files.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--batch-accumulator\"", ",", "type", "=", "str", ",", "default", "=", "\"mean\"", ",", "choices", "=", "[", "\"mean\"", ",", "\"sum\"", "]", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--quantile-thresholds-N\"", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "\"--quantile-thresholds-N-prime\"", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "\"--quantile-thresholds-K\"", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "\"--n-best-episodes\"", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "import", "logging", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "args", ".", "log_level", ")", "\n", "\n", "# Set a random seed used in PFRL.", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Set different random seeds for train and test envs.", "\n", "train_seed", "=", "args", ".", "seed", "\n", "test_seed", "=", "2", "**", "31", "-", "1", "-", "args", ".", "seed", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ")", "\n", "print", "(", "\"Output files are saved in {}\"", ".", "format", "(", "args", ".", "outdir", ")", ")", "\n", "\n", "def", "make_env", "(", "test", ")", ":", "\n", "# Use different random seeds for train and test envs", "\n", "        ", "env_seed", "=", "test_seed", "if", "test", "else", "train_seed", "\n", "env", "=", "atari_wrappers", ".", "wrap_deepmind", "(", "\n", "atari_wrappers", ".", "make_atari", "(", "args", ".", "env", ",", "max_frames", "=", "args", ".", "max_frames", ")", ",", "\n", "episode_life", "=", "not", "test", ",", "\n", "clip_rewards", "=", "not", "test", ",", "\n", ")", "\n", "env", ".", "seed", "(", "int", "(", "env_seed", ")", ")", "\n", "if", "test", ":", "\n", "# Randomize actions like epsilon-greedy in evaluation as well", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "RandomizeAction", "(", "env", ",", "args", ".", "eval_epsilon", ")", "\n", "", "if", "args", ".", "monitor", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Monitor", "(", "\n", "env", ",", "args", ".", "outdir", ",", "mode", "=", "\"evaluation\"", "if", "test", "else", "\"training\"", "\n", ")", "\n", "", "if", "args", ".", "render", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ")", "\n", "", "return", "env", "\n", "\n", "", "env", "=", "make_env", "(", "test", "=", "False", ")", "\n", "eval_env", "=", "make_env", "(", "test", "=", "True", ")", "\n", "n_actions", "=", "env", ".", "action_space", ".", "n", "\n", "\n", "q_func", "=", "pfrl", ".", "agents", ".", "iqn", ".", "ImplicitQuantileQFunction", "(", "\n", "psi", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "4", ",", "32", ",", "8", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "4", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", ")", ",", "\n", "phi", "=", "nn", ".", "Sequential", "(", "\n", "pfrl", ".", "agents", ".", "iqn", ".", "CosineBasisLinear", "(", "64", ",", "3136", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", ",", "\n", "f", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "3136", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "n_actions", ")", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "# Use the same hyper parameters as https://arxiv.org/abs/1710.10044", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "q_func", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ",", "eps", "=", "1e-2", "/", "args", ".", "batch_size", ")", "\n", "\n", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "10", "**", "6", ")", "\n", "\n", "explorer", "=", "explorers", ".", "LinearDecayEpsilonGreedy", "(", "\n", "1.0", ",", "\n", "args", ".", "final_epsilon", ",", "\n", "args", ".", "final_exploration_frames", ",", "\n", "lambda", ":", "np", ".", "random", ".", "randint", "(", "n_actions", ")", ",", "\n", ")", "\n", "\n", "def", "phi", "(", "x", ")", ":", "\n", "# Feature extractor", "\n", "        ", "return", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255", "\n", "\n", "", "agent", "=", "pfrl", ".", "agents", ".", "IQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "gamma", "=", "0.99", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "args", ".", "replay_start_size", ",", "\n", "target_update_interval", "=", "args", ".", "target_update_interval", ",", "\n", "update_interval", "=", "args", ".", "update_interval", ",", "\n", "batch_accumulator", "=", "args", ".", "batch_accumulator", ",", "\n", "phi", "=", "phi", ",", "\n", "quantile_thresholds_N", "=", "args", ".", "quantile_thresholds_N", ",", "\n", "quantile_thresholds_N_prime", "=", "args", ".", "quantile_thresholds_N_prime", ",", "\n", "quantile_thresholds_K", "=", "args", ".", "quantile_thresholds_K", ",", "\n", ")", "\n", "\n", "if", "args", ".", "load", "or", "args", ".", "load_pretrained", ":", "\n", "# either load or load_pretrained must be false", "\n", "        ", "assert", "not", "args", ".", "load", "or", "not", "args", ".", "load_pretrained", "\n", "if", "args", ".", "load", ":", "\n", "            ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "", "else", ":", "\n", "            ", "agent", ".", "load", "(", "\n", "utils", ".", "download_model", "(", "\"IQN\"", ",", "args", ".", "env", ",", "model_type", "=", "args", ".", "pretrained_type", ")", "[", "\n", "0", "\n", "]", "\n", ")", "\n", "\n", "", "", "if", "args", ".", "demo", ":", "\n", "        ", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "eval_env", ",", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "args", ".", "eval_n_steps", ",", "\n", "n_episodes", "=", "None", ",", "\n", ")", "\n", "print", "(", "\n", "\"n_steps: {} mean: {} median: {} stdev {}\"", ".", "format", "(", "\n", "args", ".", "eval_n_steps", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "experiments", ".", "train_agent_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_n_steps", "=", "args", ".", "eval_n_steps", ",", "\n", "eval_n_episodes", "=", "None", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "save_best_so_far_agent", "=", "True", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", ")", "\n", "\n", "dir_of_best_network", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outdir", ",", "\"best\"", ")", "\n", "agent", ".", "load", "(", "dir_of_best_network", ")", "\n", "\n", "# run 200 evaluation episodes, each capped at 30 mins of play", "\n", "stats", "=", "experiments", ".", "evaluator", ".", "eval_performance", "(", "\n", "env", "=", "eval_env", ",", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "args", ".", "n_best_episodes", ",", "\n", "max_episode_len", "=", "args", ".", "max_frames", "/", "4", ",", "\n", "logger", "=", "None", ",", "\n", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "outdir", ",", "\"bestscores.json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "stats", ",", "f", ")", "\n", "", "print", "(", "\"The results of the best scoring network:\"", ")", "\n", "for", "stat", "in", "stats", ":", "\n", "            ", "print", "(", "str", "(", "stat", ")", "+", "\":\"", "+", "str", "(", "stats", "[", "stat", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.rainbow.train_rainbow.main": [[16, 216], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "pfrl.utils.set_random_seed", "pfrl.experiments.prepare_output_dir", "print", "train_rainbow.main.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["    ", "\"\"\"Transforms MultiBinary action space to Discrete.\n\n    If the action space of a given env is `gym.spaces.MultiBinary(n)`, then\n    the action space of the wrapped env will be `gym.spaces.Discrete(2**n)`,\n    which covers all the combinations of the original action space.\n\n    Args:\n        env (gym.Env): Gym env whose action space is `gym.spaces.MultiBinary`.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "assert", "isinstance", "(", "env", ".", "action_space", ",", "gym", ".", "spaces", ".", "MultiBinary", ")", "\n", "self", ".", "orig_action_space", "=", "env", ".", "action_space", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "2", "**", "env", ".", "action_space", ".", "n", ")", "\n", "\n", "", "def", "action", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "[", "(", "action", ">>", "i", ")", "%", "2", "for", "i", "in", "range", "(", "self", ".", "orig_action_space", ".", "n", ")", "]", "\n", "\n", "\n", "", "", "class", "DistributionalDuelingHead", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Head module for defining a distributional dueling network.\n\n    This module expects a (batch_size, in_size)-shaped `torch.Tensor` as input\n    and returns `pfrl.action_value.DistributionalDiscreteActionValue`.\n\n    Args:\n        in_size (int): Input size.\n        n_actions (int): Number of actions.\n        n_atoms (int): Number of atoms.\n        v_min (float): Minimum value represented by atoms.\n        v_max (float): Maximum value represented by atoms.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "in_size", ",", "n_actions", ",", "n_atoms", ",", "v_min", ",", "v_max", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "in_size", "%", "2", "==", "0", "\n", "self", ".", "n_actions", "=", "n_actions", "\n", "self", ".", "n_atoms", "=", "n_atoms", "\n", "self", ".", "register_buffer", "(", "\n", "\"z_values\"", ",", "torch", ".", "linspace", "(", "v_min", ",", "v_max", ",", "n_atoms", ",", "dtype", "=", "torch", ".", "float", ")", "\n", ")", "\n", "self", ".", "a_stream", "=", "nn", ".", "Linear", "(", "in_size", "//", "2", ",", "n_actions", "*", "n_atoms", ")", "\n", "self", ".", "v_stream", "=", "nn", ".", "Linear", "(", "in_size", "//", "2", ",", "n_atoms", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "h", ")", ":", "\n", "        ", "h_a", ",", "h_v", "=", "torch", ".", "chunk", "(", "h", ",", "2", ",", "dim", "=", "1", ")", "\n", "a_logits", "=", "self", ".", "a_stream", "(", "h_a", ")", ".", "reshape", "(", "(", "-", "1", ",", "self", ".", "n_actions", ",", "self", ".", "n_atoms", ")", ")", "\n", "a_logits", "=", "a_logits", "-", "a_logits", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "v_logits", "=", "self", ".", "v_stream", "(", "h_v", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "self", ".", "n_atoms", ")", ")", "\n", "probs", "=", "nn", ".", "functional", ".", "softmax", "(", "a_logits", "+", "v_logits", ",", "dim", "=", "2", ")", "\n", "return", "pfrl", ".", "action_value", ".", "DistributionalDiscreteActionValue", "(", "probs", ",", "self", ".", "z_values", ")", "\n", "\n", "\n", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--env\"", ",", "type", "=", "str", ",", "default", "=", "\"SlimeVolley-v0\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 32)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--demo\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--noisy-net-sigma\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "\"--steps\"", ",", "type", "=", "int", ",", "default", "=", "2", "*", "10", "**", "6", ")", "\n", "parser", ".", "add_argument", "(", "\"--replay-start-size\"", ",", "type", "=", "int", ",", "default", "=", "1600", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-n-episodes\"", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-interval\"", ",", "type", "=", "int", ",", "default", "=", "250000", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "20", ",", "\n", "help", "=", "\"Logging level. 10:DEBUG, 20:INFO etc.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--render\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Render env states in a GUI window.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--monitor\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "(", "\n", "\"Monitor env. Videos and additional information are saved as output files.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--gamma\"", ",", "type", "=", "float", ",", "default", "=", "0.98", ")", "\n", "parser", ".", "add_argument", "(", "\"--v-max\"", ",", "type", "=", "float", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--n-step-return\"", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "import", "logging", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "args", ".", "log_level", ")", "\n", "\n", "# Set a random seed used in PFRL.", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Set different random seeds for train and test envs.", "\n", "train_seed", "=", "args", ".", "seed", "\n", "test_seed", "=", "2", "**", "31", "-", "1", "-", "args", ".", "seed", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ")", "\n", "print", "(", "\"Output files are saved in {}\"", ".", "format", "(", "args", ".", "outdir", ")", ")", "\n", "\n", "def", "make_env", "(", "test", ")", ":", "\n", "        ", "if", "\"SlimeVolley\"", "in", "args", ".", "env", ":", "\n", "# You need to install slimevolleygym", "\n", "            ", "import", "slimevolleygym", "# NOQA", "\n", "\n", "", "env", "=", "gym", ".", "make", "(", "args", ".", "env", ")", "\n", "# Use different random seeds for train and test envs", "\n", "env_seed", "=", "test_seed", "if", "test", "else", "train_seed", "\n", "env", ".", "seed", "(", "int", "(", "env_seed", ")", ")", "\n", "if", "args", ".", "monitor", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Monitor", "(", "\n", "env", ",", "args", ".", "outdir", ",", "mode", "=", "\"evaluation\"", "if", "test", "else", "\"training\"", "\n", ")", "\n", "", "if", "args", ".", "render", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ")", "\n", "", "if", "isinstance", "(", "env", ".", "action_space", ",", "gym", ".", "spaces", ".", "MultiBinary", ")", ":", "\n", "            ", "env", "=", "MultiBinaryAsDiscreteAction", "(", "env", ")", "\n", "", "return", "env", "\n", "\n", "", "env", "=", "make_env", "(", "test", "=", "False", ")", "\n", "eval_env", "=", "make_env", "(", "test", "=", "True", ")", "\n", "\n", "obs_size", "=", "env", ".", "observation_space", ".", "low", ".", "size", "\n", "n_actions", "=", "env", ".", "action_space", ".", "n", "\n", "\n", "n_atoms", "=", "51", "\n", "v_max", "=", "args", ".", "v_max", "\n", "v_min", "=", "-", "args", ".", "v_max", "\n", "hidden_size", "=", "512", "\n", "q_func", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "DistributionalDuelingHead", "(", "hidden_size", ",", "n_actions", ",", "n_atoms", ",", "v_min", ",", "v_max", ")", ",", "\n", ")", "\n", "\n", "def", "phi", "(", "x", ")", ":", "\n", "# Feature extractor", "\n", "        ", "return", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Noisy nets", "\n", "", "pnn", ".", "to_factorized_noisy", "(", "q_func", ",", "sigma_scale", "=", "args", ".", "noisy_net_sigma", ")", "\n", "# Turn off explorer", "\n", "explorer", "=", "explorers", ".", "Greedy", "(", ")", "\n", "\n", "# Use the same eps as https://arxiv.org/abs/1710.02298", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "q_func", ".", "parameters", "(", ")", ",", "1e-4", ",", "eps", "=", "1.5e-4", ")", "\n", "\n", "# Prioritized Replay", "\n", "# Anneal beta from beta0 to 1 throughout training", "\n", "update_interval", "=", "1", "\n", "betasteps", "=", "args", ".", "steps", "/", "update_interval", "\n", "rbuf", "=", "replay_buffers", ".", "PrioritizedReplayBuffer", "(", "\n", "10", "**", "6", ",", "\n", "alpha", "=", "0.5", ",", "\n", "beta0", "=", "0.4", ",", "\n", "betasteps", "=", "betasteps", ",", "\n", "num_steps", "=", "args", ".", "n_step_return", ",", "\n", "normalize_by_max", "=", "\"memory\"", ",", "\n", ")", "\n", "\n", "agent", "=", "agents", ".", "CategoricalDoubleDQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "gamma", "=", "args", ".", "gamma", ",", "\n", "explorer", "=", "explorer", ",", "\n", "minibatch_size", "=", "32", ",", "\n", "replay_start_size", "=", "args", ".", "replay_start_size", ",", "\n", "target_update_interval", "=", "2000", ",", "\n", "update_interval", "=", "update_interval", ",", "\n", "batch_accumulator", "=", "\"mean\"", ",", "\n", "phi", "=", "phi", ",", "\n", "max_grad_norm", "=", "10", ",", "\n", ")", "\n", "\n", "if", "args", ".", "load", ":", "\n", "        ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "\n", "", "if", "args", ".", "demo", ":", "\n", "        ", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "eval_env", ",", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "args", ".", "eval_n_episodes", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.a3c.train_a3c.main": [[18, 202], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "pfrl.utils.set_random_seed", "pfrl.experiments.prepare_output_dir", "print", "train_a3c.main.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--processes\"", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "\"--env\"", ",", "type", "=", "str", ",", "default", "=", "\"BreakoutNoFrameskip-v4\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 31)\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--t-max\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "\"--beta\"", ",", "type", "=", "float", ",", "default", "=", "1e-2", ")", "\n", "parser", ".", "add_argument", "(", "\"--profile\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--steps\"", ",", "type", "=", "int", ",", "default", "=", "8", "*", "10", "**", "7", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max-frames\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "30", "*", "60", "*", "60", ",", "# 30 minutes with 60 fps", "\n", "help", "=", "\"Maximum number of frames for each episode.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "7e-4", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-interval\"", ",", "type", "=", "int", ",", "default", "=", "250000", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-n-steps\"", ",", "type", "=", "int", ",", "default", "=", "125000", ")", "\n", "parser", ".", "add_argument", "(", "\"--demo\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--load-pretrained\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pretrained-type\"", ",", "type", "=", "str", ",", "default", "=", "\"best\"", ",", "choices", "=", "[", "\"best\"", ",", "\"final\"", "]", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "20", ",", "\n", "help", "=", "\"Logging level. 10:DEBUG, 20:INFO etc.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--render\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Render env states in a GUI window.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--monitor\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "(", "\n", "\"Monitor env. Videos and additional information are saved as output files.\"", "\n", ")", ",", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "import", "logging", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "args", ".", "log_level", ")", "\n", "\n", "# Set a random seed used in PFRL.", "\n", "# If you use more than one processes, the results will be no longer", "\n", "# deterministic even with the same random seed.", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Set different random seeds for different subprocesses.", "\n", "# If seed=0 and processes=4, subprocess seeds are [0, 1, 2, 3].", "\n", "# If seed=1 and processes=4, subprocess seeds are [4, 5, 6, 7].", "\n", "process_seeds", "=", "np", ".", "arange", "(", "args", ".", "processes", ")", "+", "args", ".", "seed", "*", "args", ".", "processes", "\n", "assert", "process_seeds", ".", "max", "(", ")", "<", "2", "**", "31", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ")", "\n", "print", "(", "\"Output files are saved in {}\"", ".", "format", "(", "args", ".", "outdir", ")", ")", "\n", "\n", "def", "make_env", "(", "process_idx", ",", "test", ")", ":", "\n", "# Use different random seeds for train and test envs", "\n", "        ", "process_seed", "=", "process_seeds", "[", "process_idx", "]", "\n", "env_seed", "=", "2", "**", "31", "-", "1", "-", "process_seed", "if", "test", "else", "process_seed", "\n", "env", "=", "atari_wrappers", ".", "wrap_deepmind", "(", "\n", "atari_wrappers", ".", "make_atari", "(", "args", ".", "env", ",", "max_frames", "=", "args", ".", "max_frames", ")", ",", "\n", "episode_life", "=", "not", "test", ",", "\n", "clip_rewards", "=", "not", "test", ",", "\n", ")", "\n", "env", ".", "seed", "(", "int", "(", "env_seed", ")", ")", "\n", "if", "args", ".", "monitor", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Monitor", "(", "\n", "env", ",", "args", ".", "outdir", ",", "mode", "=", "\"evaluation\"", "if", "test", "else", "\"training\"", "\n", ")", "\n", "", "if", "args", ".", "render", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ")", "\n", "", "return", "env", "\n", "\n", "", "sample_env", "=", "make_env", "(", "0", ",", "False", ")", "\n", "obs_size", "=", "sample_env", ".", "observation_space", ".", "low", ".", "shape", "[", "0", "]", "\n", "n_actions", "=", "sample_env", ".", "action_space", ".", "n", "\n", "\n", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "obs_size", ",", "16", ",", "8", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "4", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "2592", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "pfrl", ".", "nn", ".", "Branched", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "256", ",", "n_actions", ")", ",", "\n", "SoftmaxCategoricalHead", "(", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "1", ")", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "# SharedRMSprop is same as torch.optim.RMSprop except that it initializes", "\n", "# its state in __init__, allowing it to be moved to shared memory.", "\n", "opt", "=", "SharedRMSpropEpsInsideSqrt", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "7e-4", ",", "eps", "=", "1e-1", ",", "alpha", "=", "0.99", ")", "\n", "assert", "opt", ".", "state_dict", "(", ")", "[", "\"state\"", "]", ",", "(", "\n", "\"To share optimizer state across processes, the state must be\"", "\n", "\" initialized before training.\"", "\n", ")", "\n", "\n", "def", "phi", "(", "x", ")", ":", "\n", "# Feature extractor", "\n", "        ", "return", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255", "\n", "\n", "", "agent", "=", "a3c", ".", "A3C", "(", "\n", "model", ",", "\n", "opt", ",", "\n", "t_max", "=", "args", ".", "t_max", ",", "\n", "gamma", "=", "0.99", ",", "\n", "beta", "=", "args", ".", "beta", ",", "\n", "phi", "=", "phi", ",", "\n", "max_grad_norm", "=", "40.0", ",", "\n", ")", "\n", "\n", "if", "args", ".", "load", "or", "args", ".", "load_pretrained", ":", "\n", "# either load or load_pretrained must be false", "\n", "        ", "assert", "not", "args", ".", "load", "or", "not", "args", ".", "load_pretrained", "\n", "if", "args", ".", "load", ":", "\n", "            ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "", "else", ":", "\n", "            ", "agent", ".", "load", "(", "\n", "utils", ".", "download_model", "(", "\"A3C\"", ",", "args", ".", "env", ",", "model_type", "=", "args", ".", "pretrained_type", ")", "[", "\n", "0", "\n", "]", "\n", ")", "\n", "\n", "", "", "if", "args", ".", "demo", ":", "\n", "        ", "env", "=", "make_env", "(", "0", ",", "True", ")", "\n", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "env", ",", "agent", "=", "agent", ",", "n_steps", "=", "args", ".", "eval_n_steps", ",", "n_episodes", "=", "None", "\n", ")", "\n", "print", "(", "\n", "\"n_steps: {} mean: {} median: {} stdev: {}\"", ".", "format", "(", "\n", "args", ".", "eval_n_steps", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "\n", "# Linearly decay the learning rate to zero", "\n", "        ", "def", "lr_setter", "(", "env", ",", "agent", ",", "value", ")", ":", "\n", "            ", "for", "pg", "in", "agent", ".", "optimizer", ".", "param_groups", ":", "\n", "                ", "assert", "\"lr\"", "in", "pg", "\n", "pg", "[", "\"lr\"", "]", "=", "value", "\n", "\n", "", "", "lr_decay_hook", "=", "experiments", ".", "LinearInterpolationHook", "(", "\n", "args", ".", "steps", ",", "args", ".", "lr", ",", "0", ",", "lr_setter", "\n", ")", "\n", "\n", "experiments", ".", "train_agent_async", "(", "\n", "agent", "=", "agent", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "processes", "=", "args", ".", "processes", ",", "\n", "make_env", "=", "make_env", ",", "\n", "profile", "=", "args", ".", "profile", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_n_steps", "=", "args", ".", "eval_n_steps", ",", "\n", "eval_n_episodes", "=", "None", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "global_step_hooks", "=", "[", "lr_decay_hook", "]", ",", "\n", "save_best_so_far_agent", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.dqn.train_dqn.main": [[17, 219], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "pfrl.utils.set_random_seed", "pfrl.experiments.prepare_output_dir", "print", "train_dqn.main.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--env\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"BreakoutNoFrameskip-v4\"", ",", "\n", "help", "=", "\"OpenAI Atari domain to perform algorithm on.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 31)\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"GPU to use, set to -1 if no GPU.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--demo\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--load-pretrained\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pretrained-type\"", ",", "type", "=", "str", ",", "default", "=", "\"best\"", ",", "choices", "=", "[", "\"best\"", ",", "\"final\"", "]", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "20", ",", "\n", "help", "=", "\"Logging level. 10:DEBUG, 20:INFO etc.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--render\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Render env states in a GUI window.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--monitor\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "(", "\n", "\"Monitor env. Videos and additional information are saved as output files.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--steps\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", "*", "10", "**", "7", ",", "\n", "help", "=", "\"Total number of timesteps to train the agent.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--replay-start-size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", "*", "10", "**", "4", ",", "\n", "help", "=", "\"Minimum replay buffer size before \"", "+", "\"performing gradient updates.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-n-steps\"", ",", "type", "=", "int", ",", "default", "=", "125000", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-interval\"", ",", "type", "=", "int", ",", "default", "=", "250000", ")", "\n", "parser", ".", "add_argument", "(", "\"--n-best-episodes\"", ",", "type", "=", "int", ",", "default", "=", "30", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "import", "logging", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "args", ".", "log_level", ")", "\n", "\n", "# Set a random seed used in PFRL.", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Set different random seeds for train and test envs.", "\n", "train_seed", "=", "args", ".", "seed", "\n", "test_seed", "=", "2", "**", "31", "-", "1", "-", "args", ".", "seed", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ")", "\n", "print", "(", "\"Output files are saved in {}\"", ".", "format", "(", "args", ".", "outdir", ")", ")", "\n", "\n", "def", "make_env", "(", "test", ")", ":", "\n", "# Use different random seeds for train and test envs", "\n", "        ", "env_seed", "=", "test_seed", "if", "test", "else", "train_seed", "\n", "env", "=", "atari_wrappers", ".", "wrap_deepmind", "(", "\n", "atari_wrappers", ".", "make_atari", "(", "args", ".", "env", ",", "max_frames", "=", "None", ")", ",", "\n", "episode_life", "=", "not", "test", ",", "\n", "clip_rewards", "=", "not", "test", ",", "\n", ")", "\n", "env", ".", "seed", "(", "int", "(", "env_seed", ")", ")", "\n", "if", "test", ":", "\n", "# Randomize actions like epsilon-greedy in evaluation as well", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "RandomizeAction", "(", "env", ",", "0.05", ")", "\n", "", "if", "args", ".", "monitor", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Monitor", "(", "\n", "env", ",", "args", ".", "outdir", ",", "mode", "=", "\"evaluation\"", "if", "test", "else", "\"training\"", "\n", ")", "\n", "", "if", "args", ".", "render", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ")", "\n", "", "return", "env", "\n", "\n", "", "env", "=", "make_env", "(", "test", "=", "False", ")", "\n", "eval_env", "=", "make_env", "(", "test", "=", "True", ")", "\n", "\n", "n_actions", "=", "env", ".", "action_space", ".", "n", "\n", "q_func", "=", "nn", ".", "Sequential", "(", "\n", "pnn", ".", "LargeAtariCNN", "(", ")", ",", "\n", "init_chainer_default", "(", "nn", ".", "Linear", "(", "512", ",", "n_actions", ")", ")", ",", "\n", "DiscreteActionValueHead", "(", ")", ",", "\n", ")", "\n", "\n", "# Use the same hyperparameters as the Nature paper", "\n", "\n", "opt", "=", "pfrl", ".", "optimizers", ".", "RMSpropEpsInsideSqrt", "(", "\n", "q_func", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "2.5e-4", ",", "\n", "alpha", "=", "0.95", ",", "\n", "momentum", "=", "0.0", ",", "\n", "eps", "=", "1e-2", ",", "\n", "centered", "=", "True", ",", "\n", ")", "\n", "\n", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "10", "**", "6", ")", "\n", "\n", "explorer", "=", "explorers", ".", "LinearDecayEpsilonGreedy", "(", "\n", "start_epsilon", "=", "1.0", ",", "\n", "end_epsilon", "=", "0.1", ",", "\n", "decay_steps", "=", "10", "**", "6", ",", "\n", "random_action_func", "=", "lambda", ":", "np", ".", "random", ".", "randint", "(", "n_actions", ")", ",", "\n", ")", "\n", "\n", "def", "phi", "(", "x", ")", ":", "\n", "# Feature extractor", "\n", "        ", "return", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255", "\n", "\n", "", "Agent", "=", "agents", ".", "DQN", "\n", "agent", "=", "Agent", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "gamma", "=", "0.99", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "args", ".", "replay_start_size", ",", "\n", "target_update_interval", "=", "10", "**", "4", ",", "\n", "clip_delta", "=", "True", ",", "\n", "update_interval", "=", "4", ",", "\n", "batch_accumulator", "=", "\"sum\"", ",", "\n", "phi", "=", "phi", ",", "\n", ")", "\n", "\n", "if", "args", ".", "load", "or", "args", ".", "load_pretrained", ":", "\n", "# either load or load_pretrained must be false", "\n", "        ", "assert", "not", "args", ".", "load", "or", "not", "args", ".", "load_pretrained", "\n", "if", "args", ".", "load", ":", "\n", "            ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "", "else", ":", "\n", "            ", "agent", ".", "load", "(", "\n", "utils", ".", "download_model", "(", "\"DQN\"", ",", "args", ".", "env", ",", "model_type", "=", "args", ".", "pretrained_type", ")", "[", "\n", "0", "\n", "]", "\n", ")", "\n", "\n", "", "", "if", "args", ".", "demo", ":", "\n", "        ", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "eval_env", ",", "agent", "=", "agent", ",", "n_steps", "=", "args", ".", "eval_n_steps", ",", "n_episodes", "=", "None", "\n", ")", "\n", "print", "(", "\n", "\"n_episodes: {} mean: {} median: {} stdev {}\"", ".", "format", "(", "\n", "eval_stats", "[", "\"episodes\"", "]", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "experiments", ".", "train_agent_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_n_steps", "=", "args", ".", "eval_n_steps", ",", "\n", "eval_n_episodes", "=", "None", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "save_best_so_far_agent", "=", "True", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", ")", "\n", "\n", "dir_of_best_network", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outdir", ",", "\"best\"", ")", "\n", "agent", ".", "load", "(", "dir_of_best_network", ")", "\n", "\n", "# run 30 evaluation episodes, each capped at 5 mins of play", "\n", "stats", "=", "experiments", ".", "evaluator", ".", "eval_performance", "(", "\n", "env", "=", "eval_env", ",", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "args", ".", "n_best_episodes", ",", "\n", "max_episode_len", "=", "4500", ",", "\n", "logger", "=", "None", ",", "\n", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "outdir", ",", "\"bestscores.json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "stats", ",", "f", ")", "\n", "", "print", "(", "\"The results of the best scoring network:\"", ")", "\n", "for", "stat", "in", "stats", ":", "\n", "            ", "print", "(", "str", "(", "stat", ")", "+", "\":\"", "+", "str", "(", "stats", "[", "stat", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.gym.train_categorical_dqn_gym.main": [[20, 171], ["logging.basicConfig", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "pfrl.utils.set_random_seed", "pfrl.experiments.prepare_output_dir", "print", "train_categorical_dqn_gym.main.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["def", "main", "(", ")", ":", "\n", "    ", "import", "logging", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--env\"", ",", "type", "=", "str", ",", "default", "=", "\"CartPole-v1\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--final-exploration-steps\"", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "\"--start-epsilon\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--end-epsilon\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "\"--demo\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--steps\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "8", ")", "\n", "parser", ".", "add_argument", "(", "\"--prioritized-replay\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--replay-start-size\"", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "\"--target-update-interval\"", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "\"--target-update-method\"", ",", "type", "=", "str", ",", "default", "=", "\"hard\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--soft-update-tau\"", ",", "type", "=", "float", ",", "default", "=", "1e-2", ")", "\n", "parser", ".", "add_argument", "(", "\"--update-interval\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-n-runs\"", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-interval\"", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "\"--n-hidden-channels\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--n-hidden-layers\"", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "parser", ".", "add_argument", "(", "\"--gamma\"", ",", "type", "=", "float", ",", "default", "=", "0.95", ")", "\n", "parser", ".", "add_argument", "(", "\"--minibatch-size\"", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--render-train\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--render-eval\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--monitor\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--reward-scale-factor\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Set a random seed used in PFRL", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ",", "argv", "=", "sys", ".", "argv", ")", "\n", "print", "(", "\"Output files are saved in {}\"", ".", "format", "(", "args", ".", "outdir", ")", ")", "\n", "\n", "def", "make_env", "(", "test", ")", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "args", ".", "env", ")", "\n", "env_seed", "=", "2", "**", "32", "-", "1", "-", "args", ".", "seed", "if", "test", "else", "args", ".", "seed", "\n", "env", ".", "seed", "(", "env_seed", ")", "\n", "# Cast observations to float32 because our model uses float32", "\n", "env", "=", "pfrl", ".", "wrappers", ".", "CastObservationToFloat32", "(", "env", ")", "\n", "if", "args", ".", "monitor", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Monitor", "(", "env", ",", "args", ".", "outdir", ")", "\n", "", "if", "not", "test", ":", "\n", "# Scale rewards (and thus returns) to a reasonable range so that", "\n", "# training is easier", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "ScaleReward", "(", "env", ",", "args", ".", "reward_scale_factor", ")", "\n", "", "if", "(", "args", ".", "render_eval", "and", "test", ")", "or", "(", "args", ".", "render_train", "and", "not", "test", ")", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ")", "\n", "", "return", "env", "\n", "\n", "", "env", "=", "make_env", "(", "test", "=", "False", ")", "\n", "timestep_limit", "=", "env", ".", "spec", ".", "max_episode_steps", "\n", "obs_size", "=", "env", ".", "observation_space", ".", "low", ".", "size", "\n", "action_space", "=", "env", ".", "action_space", "\n", "\n", "n_atoms", "=", "51", "\n", "v_max", "=", "500", "\n", "v_min", "=", "0", "\n", "\n", "n_actions", "=", "action_space", ".", "n", "\n", "q_func", "=", "q_functions", ".", "DistributionalFCStateQFunctionWithDiscreteAction", "(", "\n", "obs_size", ",", "\n", "n_actions", ",", "\n", "n_atoms", ",", "\n", "v_min", ",", "\n", "v_max", ",", "\n", "n_hidden_channels", "=", "args", ".", "n_hidden_channels", ",", "\n", "n_hidden_layers", "=", "args", ".", "n_hidden_layers", ",", "\n", ")", "\n", "# Use epsilon-greedy for exploration", "\n", "explorer", "=", "explorers", ".", "LinearDecayEpsilonGreedy", "(", "\n", "args", ".", "start_epsilon", ",", "\n", "args", ".", "end_epsilon", ",", "\n", "args", ".", "final_exploration_steps", ",", "\n", "action_space", ".", "sample", ",", "\n", ")", "\n", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "q_func", ".", "parameters", "(", ")", ",", "1e-3", ")", "\n", "\n", "rbuf_capacity", "=", "50000", "# 5 * 10 ** 5", "\n", "if", "args", ".", "minibatch_size", "is", "None", ":", "\n", "        ", "args", ".", "minibatch_size", "=", "32", "\n", "", "if", "args", ".", "prioritized_replay", ":", "\n", "        ", "betasteps", "=", "(", "args", ".", "steps", "-", "args", ".", "replay_start_size", ")", "//", "args", ".", "update_interval", "\n", "rbuf", "=", "replay_buffers", ".", "PrioritizedReplayBuffer", "(", "\n", "rbuf_capacity", ",", "betasteps", "=", "betasteps", "\n", ")", "\n", "", "else", ":", "\n", "        ", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "rbuf_capacity", ")", "\n", "\n", "", "agent", "=", "pfrl", ".", "agents", ".", "CategoricalDQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "gamma", "=", "args", ".", "gamma", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "args", ".", "replay_start_size", ",", "\n", "target_update_interval", "=", "args", ".", "target_update_interval", ",", "\n", "update_interval", "=", "args", ".", "update_interval", ",", "\n", "minibatch_size", "=", "args", ".", "minibatch_size", ",", "\n", "target_update_method", "=", "args", ".", "target_update_method", ",", "\n", "soft_update_tau", "=", "args", ".", "soft_update_tau", ",", "\n", ")", "\n", "\n", "if", "args", ".", "load", ":", "\n", "        ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "\n", "", "eval_env", "=", "make_env", "(", "test", "=", "True", ")", "\n", "\n", "if", "args", ".", "demo", ":", "\n", "        ", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "eval_env", ",", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "max_episode_len", "=", "timestep_limit", ",", "\n", ")", "\n", "print", "(", "\n", "\"n_runs: {} mean: {} median: {} stdev {}\"", ".", "format", "(", "\n", "args", ".", "eval_n_runs", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "experiments", ".", "train_agent_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", "train_max_episode_len", "=", "timestep_limit", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.gym.train_reinforce_gym.main": [[24, 147], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "pfrl.utils.set_random_seed", "pfrl.experiments.prepare_output_dir", "train_reinforce_gym.main.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["def", "main", "(", ")", ":", "\n", "    ", "import", "logging", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--env\"", ",", "type", "=", "str", ",", "default", "=", "\"CartPole-v0\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 32)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--beta\"", ",", "type", "=", "float", ",", "default", "=", "1e-4", ")", "\n", "parser", ".", "add_argument", "(", "\"--batchsize\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--steps\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "5", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-interval\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-n-runs\"", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "\"--reward-scale-factor\"", ",", "type", "=", "float", ",", "default", "=", "1e-2", ")", "\n", "parser", ".", "add_argument", "(", "\"--render\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-3", ")", "\n", "parser", ".", "add_argument", "(", "\"--demo\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--log-level\"", ",", "type", "=", "int", ",", "default", "=", "logging", ".", "INFO", ")", "\n", "parser", ".", "add_argument", "(", "\"--monitor\"", ",", "action", "=", "\"store_true\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "args", ".", "log_level", ")", "\n", "\n", "# Set a random seed used in PFRL.", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ")", "\n", "\n", "def", "make_env", "(", "test", ")", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "args", ".", "env", ")", "\n", "# Use different random seeds for train and test envs", "\n", "env_seed", "=", "2", "**", "32", "-", "1", "-", "args", ".", "seed", "if", "test", "else", "args", ".", "seed", "\n", "env", ".", "seed", "(", "env_seed", ")", "\n", "# Cast observations to float32 because our model uses float32", "\n", "env", "=", "pfrl", ".", "wrappers", ".", "CastObservationToFloat32", "(", "env", ")", "\n", "if", "args", ".", "monitor", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Monitor", "(", "env", ",", "args", ".", "outdir", ")", "\n", "", "if", "not", "test", ":", "\n", "# Scale rewards (and thus returns) to a reasonable range so that", "\n", "# training is easier", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "ScaleReward", "(", "env", ",", "args", ".", "reward_scale_factor", ")", "\n", "", "if", "args", ".", "render", "and", "not", "test", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ")", "\n", "", "return", "env", "\n", "\n", "", "train_env", "=", "make_env", "(", "test", "=", "False", ")", "\n", "timestep_limit", "=", "train_env", ".", "spec", ".", "max_episode_steps", "\n", "obs_space", "=", "train_env", ".", "observation_space", "\n", "action_space", "=", "train_env", ".", "action_space", "\n", "\n", "obs_size", "=", "obs_space", ".", "low", ".", "size", "\n", "hidden_size", "=", "200", "\n", "# Switch policy types accordingly to action space types", "\n", "if", "isinstance", "(", "action_space", ",", "gym", ".", "spaces", ".", "Box", ")", ":", "\n", "        ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "action_space", ".", "low", ".", "size", ")", ",", "\n", "GaussianHeadWithFixedCovariance", "(", "0.3", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "action_space", ".", "n", ")", ",", "\n", "SoftmaxCategoricalHead", "(", ")", ",", "\n", ")", "\n", "\n", "", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "agent", "=", "pfrl", ".", "agents", ".", "REINFORCE", "(", "\n", "model", ",", "\n", "opt", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "beta", "=", "args", ".", "beta", ",", "\n", "batchsize", "=", "args", ".", "batchsize", ",", "\n", "max_grad_norm", "=", "1.0", ",", "\n", ")", "\n", "if", "args", ".", "load", ":", "\n", "        ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "\n", "", "eval_env", "=", "make_env", "(", "test", "=", "True", ")", "\n", "\n", "if", "args", ".", "demo", ":", "\n", "        ", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "eval_env", ",", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "max_episode_len", "=", "timestep_limit", ",", "\n", ")", "\n", "print", "(", "\n", "\"n_runs: {} mean: {} median: {} stdev {}\"", ".", "format", "(", "\n", "args", ".", "eval_n_runs", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "experiments", ".", "train_agent_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "train_env", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "train_max_episode_len", "=", "timestep_limit", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.gym.train_dqn_gym.main": [[30, 269], ["logging.basicConfig", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "pfrl.utils.set_random_seed", "pfrl.experiments.prepare_output_dir", "print", "train_dqn_gym.main.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["def", "main", "(", ")", ":", "\n", "    ", "import", "logging", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--env\"", ",", "type", "=", "str", ",", "default", "=", "\"Pendulum-v0\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 32)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--final-exploration-steps\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--start-epsilon\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--end-epsilon\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "\"--noisy-net-sigma\"", ",", "type", "=", "float", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--demo\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--steps\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "5", ")", "\n", "parser", ".", "add_argument", "(", "\"--prioritized-replay\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--replay-start-size\"", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "\"--target-update-interval\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "2", ")", "\n", "parser", ".", "add_argument", "(", "\"--target-update-method\"", ",", "type", "=", "str", ",", "default", "=", "\"hard\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--soft-update-tau\"", ",", "type", "=", "float", ",", "default", "=", "1e-2", ")", "\n", "parser", ".", "add_argument", "(", "\"--update-interval\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-n-runs\"", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-interval\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--n-hidden-channels\"", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "\"--n-hidden-layers\"", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "\"--gamma\"", ",", "type", "=", "float", ",", "default", "=", "0.99", ")", "\n", "parser", ".", "add_argument", "(", "\"--minibatch-size\"", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--render-train\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--render-eval\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--monitor\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--reward-scale-factor\"", ",", "type", "=", "float", ",", "default", "=", "1e-3", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--actor-learner\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Enable asynchronous sampling with asynchronous actor(s)\"", ",", "\n", ")", "# NOQA", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num-envs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "(", "\n", "\"The number of environments for sampling (only effective with\"", "\n", "\" --actor-learner enabled)\"", "\n", ")", ",", "\n", ")", "# NOQA", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Set a random seed used in PFRL", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ",", "argv", "=", "sys", ".", "argv", ")", "\n", "print", "(", "\"Output files are saved in {}\"", ".", "format", "(", "args", ".", "outdir", ")", ")", "\n", "\n", "# Set different random seeds for different subprocesses.", "\n", "# If seed=0 and processes=4, subprocess seeds are [0, 1, 2, 3].", "\n", "# If seed=1 and processes=4, subprocess seeds are [4, 5, 6, 7].", "\n", "process_seeds", "=", "np", ".", "arange", "(", "args", ".", "num_envs", ")", "+", "args", ".", "seed", "*", "args", ".", "num_envs", "\n", "assert", "process_seeds", ".", "max", "(", ")", "<", "2", "**", "32", "\n", "\n", "def", "clip_action_filter", "(", "a", ")", ":", "\n", "        ", "return", "np", ".", "clip", "(", "a", ",", "action_space", ".", "low", ",", "action_space", ".", "high", ")", "\n", "\n", "", "def", "make_env", "(", "idx", "=", "0", ",", "test", "=", "False", ")", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "args", ".", "env", ")", "\n", "# Use different random seeds for train and test envs", "\n", "process_seed", "=", "int", "(", "process_seeds", "[", "idx", "]", ")", "\n", "env_seed", "=", "2", "**", "32", "-", "1", "-", "process_seed", "if", "test", "else", "process_seed", "\n", "utils", ".", "set_random_seed", "(", "env_seed", ")", "\n", "# Cast observations to float32 because our model uses float32", "\n", "env", "=", "pfrl", ".", "wrappers", ".", "CastObservationToFloat32", "(", "env", ")", "\n", "if", "args", ".", "monitor", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Monitor", "(", "env", ",", "args", ".", "outdir", ")", "\n", "", "if", "isinstance", "(", "env", ".", "action_space", ",", "spaces", ".", "Box", ")", ":", "\n", "            ", "utils", ".", "env_modifiers", ".", "make_action_filtered", "(", "env", ",", "clip_action_filter", ")", "\n", "", "if", "not", "test", ":", "\n", "# Scale rewards (and thus returns) to a reasonable range so that", "\n", "# training is easier", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "ScaleReward", "(", "env", ",", "args", ".", "reward_scale_factor", ")", "\n", "", "if", "(", "args", ".", "render_eval", "and", "test", ")", "or", "(", "args", ".", "render_train", "and", "not", "test", ")", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ")", "\n", "", "return", "env", "\n", "\n", "", "env", "=", "make_env", "(", "test", "=", "False", ")", "\n", "timestep_limit", "=", "env", ".", "spec", ".", "max_episode_steps", "\n", "obs_space", "=", "env", ".", "observation_space", "\n", "obs_size", "=", "obs_space", ".", "low", ".", "size", "\n", "action_space", "=", "env", ".", "action_space", "\n", "\n", "if", "isinstance", "(", "action_space", ",", "spaces", ".", "Box", ")", ":", "\n", "        ", "action_size", "=", "action_space", ".", "low", ".", "size", "\n", "# Use NAF to apply DQN to continuous action spaces", "\n", "q_func", "=", "q_functions", ".", "FCQuadraticStateQFunction", "(", "\n", "obs_size", ",", "\n", "action_size", ",", "\n", "n_hidden_channels", "=", "args", ".", "n_hidden_channels", ",", "\n", "n_hidden_layers", "=", "args", ".", "n_hidden_layers", ",", "\n", "action_space", "=", "action_space", ",", "\n", ")", "\n", "# Use the Ornstein-Uhlenbeck process for exploration", "\n", "ou_sigma", "=", "(", "action_space", ".", "high", "-", "action_space", ".", "low", ")", "*", "0.2", "\n", "explorer", "=", "explorers", ".", "AdditiveOU", "(", "sigma", "=", "ou_sigma", ")", "\n", "", "else", ":", "\n", "        ", "n_actions", "=", "action_space", ".", "n", "\n", "q_func", "=", "q_functions", ".", "FCStateQFunctionWithDiscreteAction", "(", "\n", "obs_size", ",", "\n", "n_actions", ",", "\n", "n_hidden_channels", "=", "args", ".", "n_hidden_channels", ",", "\n", "n_hidden_layers", "=", "args", ".", "n_hidden_layers", ",", "\n", ")", "\n", "# Use epsilon-greedy for exploration", "\n", "explorer", "=", "explorers", ".", "LinearDecayEpsilonGreedy", "(", "\n", "args", ".", "start_epsilon", ",", "\n", "args", ".", "end_epsilon", ",", "\n", "args", ".", "final_exploration_steps", ",", "\n", "action_space", ".", "sample", ",", "\n", ")", "\n", "\n", "", "if", "args", ".", "noisy_net_sigma", "is", "not", "None", ":", "\n", "        ", "pnn", ".", "to_factorized_noisy", "(", "q_func", ",", "sigma_scale", "=", "args", ".", "noisy_net_sigma", ")", "\n", "# Turn off explorer", "\n", "explorer", "=", "explorers", ".", "Greedy", "(", ")", "\n", "\n", "", "opt", "=", "optim", ".", "Adam", "(", "q_func", ".", "parameters", "(", ")", ")", "\n", "\n", "rbuf_capacity", "=", "5", "*", "10", "**", "5", "\n", "if", "args", ".", "minibatch_size", "is", "None", ":", "\n", "        ", "args", ".", "minibatch_size", "=", "32", "\n", "", "if", "args", ".", "prioritized_replay", ":", "\n", "        ", "betasteps", "=", "(", "args", ".", "steps", "-", "args", ".", "replay_start_size", ")", "//", "args", ".", "update_interval", "\n", "rbuf", "=", "replay_buffers", ".", "PrioritizedReplayBuffer", "(", "\n", "rbuf_capacity", ",", "betasteps", "=", "betasteps", "\n", ")", "\n", "", "else", ":", "\n", "        ", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "rbuf_capacity", ")", "\n", "\n", "", "agent", "=", "DQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "gamma", "=", "args", ".", "gamma", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "args", ".", "replay_start_size", ",", "\n", "target_update_interval", "=", "args", ".", "target_update_interval", ",", "\n", "update_interval", "=", "args", ".", "update_interval", ",", "\n", "minibatch_size", "=", "args", ".", "minibatch_size", ",", "\n", "target_update_method", "=", "args", ".", "target_update_method", ",", "\n", "soft_update_tau", "=", "args", ".", "soft_update_tau", ",", "\n", ")", "\n", "\n", "if", "args", ".", "load", ":", "\n", "        ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "\n", "", "eval_env", "=", "make_env", "(", "test", "=", "True", ")", "\n", "\n", "if", "args", ".", "demo", ":", "\n", "        ", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "eval_env", ",", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "max_episode_len", "=", "timestep_limit", ",", "\n", ")", "\n", "print", "(", "\n", "\"n_runs: {} mean: {} median: {} stdev {}\"", ".", "format", "(", "\n", "args", ".", "eval_n_runs", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "\n", "", "elif", "not", "args", ".", "actor_learner", ":", "\n", "\n", "        ", "print", "(", "\n", "\"WARNING: Since https://github.com/pfnet/pfrl/pull/112 we have started\"", "\n", "\" setting `eval_during_episode=True` in this script, which affects the\"", "\n", "\" timings of evaluation phases.\"", "\n", ")", "\n", "\n", "experiments", ".", "train_agent_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", "train_max_episode_len", "=", "timestep_limit", ",", "\n", "eval_during_episode", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "# using impala mode when given num of envs", "\n", "\n", "# When we use multiple envs, it is critical to ensure each env", "\n", "# can occupy a CPU core to get the best performance.", "\n", "# Therefore, we need to prevent potential CPU over-provision caused by", "\n", "# multi-threading in Openmp and Numpy.", "\n", "# Disable the multi-threading on Openmp and Numpy.", "\n", "        ", "os", ".", "environ", "[", "\"OMP_NUM_THREADS\"", "]", "=", "\"1\"", "# NOQA", "\n", "\n", "(", "\n", "make_actor", ",", "\n", "learner", ",", "\n", "poller", ",", "\n", "exception_event", ",", "\n", ")", "=", "agent", ".", "setup_actor_learner_training", "(", "args", ".", "num_envs", ")", "\n", "\n", "poller", ".", "start", "(", ")", "\n", "learner", ".", "start", "(", ")", "\n", "\n", "experiments", ".", "train_agent_async", "(", "\n", "processes", "=", "args", ".", "num_envs", ",", "\n", "make_agent", "=", "make_actor", ",", "\n", "make_env", "=", "make_env", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "stop_event", "=", "learner", ".", "stop_event", ",", "\n", "exception_event", "=", "exception_event", ",", "\n", ")", "\n", "\n", "poller", ".", "stop", "(", ")", "\n", "learner", ".", "stop", "(", ")", "\n", "poller", ".", "join", "(", ")", "\n", "learner", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.optuna.optuna_dqn_obs1d._objective_core": [[32, 150], ["pfrl.utils.set_random_seed", "optuna_dqn_obs1d._objective_core.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["def", "_objective_core", "(", "\n", "# optuna parameters", "\n", "trial", ",", "\n", "# training parameters", "\n", "env_id", ",", "\n", "outdir", ",", "\n", "seed", ",", "\n", "monitor", ",", "\n", "gpu", ",", "\n", "steps", ",", "\n", "train_max_episode_len", ",", "\n", "eval_n_episodes", ",", "\n", "eval_interval", ",", "\n", "batch_size", ",", "\n", "# hyperparameters", "\n", "hyperparams", ",", "\n", ")", ":", "\n", "# Set a random seed used in PFRL", "\n", "    ", "utils", ".", "set_random_seed", "(", "seed", ")", "\n", "\n", "# Set different random seeds for train and test envs.", "\n", "train_seed", "=", "seed", "\n", "test_seed", "=", "2", "**", "31", "-", "1", "-", "seed", "\n", "\n", "def", "make_env", "(", "test", "=", "False", ")", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "\n", "if", "not", "isinstance", "(", "env", ".", "observation_space", ",", "gym", ".", "spaces", ".", "Box", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Supported only Box observation environments, but given: {}\"", ".", "format", "(", "\n", "env", ".", "observation_space", "\n", ")", "\n", ")", "\n", "", "if", "len", "(", "env", ".", "observation_space", ".", "shape", ")", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Supported only observation spaces with ndim==1, but given: {}\"", ".", "format", "(", "\n", "env", ".", "observation_space", ".", "shape", "\n", ")", "\n", ")", "\n", "", "if", "not", "isinstance", "(", "env", ".", "action_space", ",", "gym", ".", "spaces", ".", "Discrete", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Supported only discrete action environments, but given: {}\"", ".", "format", "(", "\n", "env", ".", "action_space", "\n", ")", "\n", ")", "\n", "\n", "", "env_seed", "=", "test_seed", "if", "test", "else", "train_seed", "\n", "env", ".", "seed", "(", "env_seed", ")", "\n", "# Cast observations to float32 because our model uses float32", "\n", "env", "=", "pfrl", ".", "wrappers", ".", "CastObservationToFloat32", "(", "env", ")", "\n", "if", "monitor", ":", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "Monitor", "(", "env", ",", "outdir", ")", "\n", "", "if", "not", "test", ":", "\n", "# Scale rewards (and thus returns) to a reasonable range so that", "\n", "# training is easier", "\n", "            ", "env", "=", "pfrl", ".", "wrappers", ".", "ScaleReward", "(", "env", ",", "hyperparams", "[", "\"reward_scale_factor\"", "]", ")", "\n", "", "return", "env", "\n", "\n", "", "env", "=", "make_env", "(", "test", "=", "False", ")", "\n", "obs_space", "=", "env", ".", "observation_space", "\n", "obs_size", "=", "obs_space", ".", "low", ".", "size", "\n", "action_space", "=", "env", ".", "action_space", "\n", "n_actions", "=", "action_space", ".", "n", "\n", "\n", "# create model & q_function", "\n", "model", "=", "MLP", "(", "\n", "in_size", "=", "obs_size", ",", "out_size", "=", "n_actions", ",", "hidden_sizes", "=", "hyperparams", "[", "\"hidden_sizes\"", "]", "\n", ")", "\n", "q_func", "=", "q_functions", ".", "SingleModelStateQFunctionWithDiscreteAction", "(", "model", "=", "model", ")", "\n", "\n", "# Use epsilon-greedy for exploration", "\n", "start_epsilon", "=", "1", "\n", "explorer", "=", "explorers", ".", "LinearDecayEpsilonGreedy", "(", "\n", "start_epsilon", "=", "start_epsilon", ",", "\n", "end_epsilon", "=", "hyperparams", "[", "\"end_epsilon\"", "]", ",", "\n", "decay_steps", "=", "hyperparams", "[", "\"decay_steps\"", "]", ",", "\n", "random_action_func", "=", "action_space", ".", "sample", ",", "\n", ")", "\n", "\n", "opt", "=", "optim", ".", "Adam", "(", "\n", "q_func", ".", "parameters", "(", ")", ",", "lr", "=", "hyperparams", "[", "\"lr\"", "]", ",", "eps", "=", "hyperparams", "[", "\"adam_eps\"", "]", "\n", ")", "\n", "\n", "rbuf_capacity", "=", "steps", "\n", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "rbuf_capacity", ")", "\n", "\n", "agent", "=", "DQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "hyperparams", "[", "\"gamma\"", "]", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "hyperparams", "[", "\"replay_start_size\"", "]", ",", "\n", "target_update_interval", "=", "hyperparams", "[", "\"target_update_interval\"", "]", ",", "\n", "update_interval", "=", "hyperparams", "[", "\"update_interval\"", "]", ",", "\n", "minibatch_size", "=", "batch_size", ",", "\n", ")", "\n", "\n", "eval_env", "=", "make_env", "(", "test", "=", "True", ")", "\n", "\n", "evaluation_hooks", "=", "[", "OptunaPrunerHook", "(", "trial", "=", "trial", ")", "]", "\n", "_", ",", "eval_stats_history", "=", "experiments", ".", "train_agent_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "steps", "=", "steps", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "eval_n_episodes", ",", "\n", "eval_interval", "=", "eval_interval", ",", "\n", "outdir", "=", "outdir", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", "train_max_episode_len", "=", "train_max_episode_len", ",", "\n", "evaluation_hooks", "=", "evaluation_hooks", ",", "\n", ")", "\n", "\n", "score", "=", "_get_score_from_eval_stats_history", "(", "eval_stats_history", ")", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.optuna.optuna_dqn_obs1d._get_score_from_eval_stats_history": [[152, 184], ["reversed", "float", "sum", "len", "max", "ValueError", "scores.append", "scores.append"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "_get_score_from_eval_stats_history", "(", "\n", "eval_stats_history", ",", "agg", "=", "\"last\"", ",", "target", "=", "\"eval_score\"", "\n", ")", ":", "\n", "    ", "\"\"\"Get a scalar score from a list of evaluation statistics dicts.\"\"\"", "\n", "final_score", "=", "None", "\n", "if", "agg", "==", "\"last\"", ":", "\n", "        ", "for", "stats", "in", "reversed", "(", "eval_stats_history", ")", ":", "\n", "            ", "if", "target", "in", "stats", ":", "\n", "                ", "final_score", "=", "stats", "[", "target", "]", "\n", "break", "\n", "", "", "", "elif", "agg", "==", "\"mean\"", ":", "\n", "        ", "scores", "=", "[", "]", "\n", "for", "stats", "in", "eval_stats_history", ":", "\n", "            ", "if", "target", "in", "stats", ":", "\n", "                ", "score", "=", "stats", "[", "target", "]", "\n", "if", "score", "is", "not", "None", ":", "\n", "                    ", "scores", ".", "append", "(", "score", ")", "\n", "", "", "", "final_score", "=", "sum", "(", "scores", ")", "/", "len", "(", "scores", ")", "\n", "", "elif", "agg", "==", "\"best\"", ":", "\n", "        ", "scores", "=", "[", "]", "\n", "for", "stats", "in", "eval_stats_history", ":", "\n", "            ", "if", "target", "in", "stats", ":", "\n", "                ", "score", "=", "stats", "[", "target", "]", "\n", "if", "score", "is", "not", "None", ":", "\n", "                    ", "scores", ".", "append", "(", "score", ")", "\n", "", "", "", "final_score", "=", "max", "(", "scores", ")", "# Assuming larger is better", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown agg method: {}\"", ".", "format", "(", "agg", ")", ")", "\n", "\n", "", "if", "final_score", "is", "None", ":", "\n", "        ", "final_score", "=", "float", "(", "\"NaN\"", ")", "\n", "", "return", "final_score", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.optuna.optuna_dqn_obs1d.suggest": [[186, 237], ["trial.suggest_float", "trial.suggest_int", "range", "trial.suggest_float", "min", "trial.suggest_int", "trial.suggest_float", "trial.suggest_float", "trial.suggest_float", "min", "min", "trial.suggest_int", "trial.suggest_int", "trial.suggest_int", "trial.suggest_int", "hyperparams[].append", "max"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max"], ["", "def", "suggest", "(", "trial", ",", "steps", ")", ":", "\n", "    ", "hyperparams", "=", "{", "}", "\n", "\n", "hyperparams", "[", "\"reward_scale_factor\"", "]", "=", "trial", ".", "suggest_float", "(", "\n", "\"reward_scale_factor\"", ",", "1e-5", ",", "10", ",", "log", "=", "True", "\n", ")", "\n", "n_hidden_layers", "=", "trial", ".", "suggest_int", "(", "\"n_hidden_layers\"", ",", "1", ",", "3", ")", "# hyper-hyper-param", "\n", "hyperparams", "[", "\"hidden_sizes\"", "]", "=", "[", "]", "\n", "for", "n_channel", "in", "range", "(", "n_hidden_layers", ")", ":", "\n", "# If n_channels is a large value, the precise number doesn't matter.", "\n", "# In other words, we should search over the smaller values more precisely.", "\n", "        ", "c", "=", "trial", ".", "suggest_int", "(", "\n", "\"n_hidden_layers_{}_n_channels_{}\"", ".", "format", "(", "n_hidden_layers", ",", "n_channel", ")", ",", "\n", "10", ",", "\n", "200", ",", "\n", "log", "=", "True", ",", "\n", ")", "\n", "hyperparams", "[", "\"hidden_sizes\"", "]", ".", "append", "(", "c", ")", "\n", "", "hyperparams", "[", "\"end_epsilon\"", "]", "=", "trial", ".", "suggest_float", "(", "\"end_epsilon\"", ",", "0.0", ",", "0.3", ")", "\n", "max_decay_steps", "=", "steps", "//", "2", "\n", "min_decay_steps", "=", "min", "(", "1e3", ",", "max_decay_steps", ")", "\n", "hyperparams", "[", "\"decay_steps\"", "]", "=", "trial", ".", "suggest_int", "(", "\n", "\"decay_steps\"", ",", "min_decay_steps", ",", "max_decay_steps", "\n", ")", "\n", "hyperparams", "[", "\"lr\"", "]", "=", "trial", ".", "suggest_float", "(", "\"lr\"", ",", "1e-4", ",", "1e-2", ",", "log", "=", "True", ")", "\n", "# Adam's default eps==1e-8 but larger eps oftens helps.", "\n", "# (Rainbow: eps==1.5e-4, IQN: eps==1e-2/batch_size=3.125e-4)", "\n", "hyperparams", "[", "\"adam_eps\"", "]", "=", "trial", ".", "suggest_float", "(", "\"adam_eps\"", ",", "1e-8", ",", "1e-3", ",", "log", "=", "True", ")", "\n", "inv_gamma", "=", "trial", ".", "suggest_float", "(", "\"inv_gamma\"", ",", "1e-3", ",", "1e-1", ",", "log", "=", "True", ")", "\n", "hyperparams", "[", "\"gamma\"", "]", "=", "1", "-", "inv_gamma", "\n", "\n", "rbuf_capacity", "=", "steps", "\n", "min_replay_start_size", "=", "min", "(", "1e3", ",", "rbuf_capacity", ")", "\n", "# min: Replay start size cannot exceed replay buffer capacity.", "\n", "# max: decaying epsilon without training does not make much sense.", "\n", "max_replay_start_size", "=", "min", "(", "\n", "max", "(", "1e3", ",", "hyperparams", "[", "\"decay_steps\"", "]", "//", "2", ")", ",", "rbuf_capacity", "\n", ")", "\n", "hyperparams", "[", "\"replay_start_size\"", "]", "=", "trial", ".", "suggest_int", "(", "\n", "\"replay_start_size\"", ",", "\n", "min_replay_start_size", ",", "\n", "max_replay_start_size", ",", "\n", ")", "\n", "# target_update_interval should be a multiple of update_interval", "\n", "hyperparams", "[", "\"update_interval\"", "]", "=", "trial", ".", "suggest_int", "(", "\"update_interval\"", ",", "1", ",", "8", ")", "\n", "target_update_interval_coef", "=", "trial", ".", "suggest_int", "(", "\"target_update_interval_coef\"", ",", "1", ",", "4", ")", "\n", "hyperparams", "[", "\"target_update_interval\"", "]", "=", "(", "\n", "hyperparams", "[", "\"update_interval\"", "]", "*", "target_update_interval_coef", "\n", ")", "\n", "\n", "return", "hyperparams", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.optuna.optuna_dqn_obs1d.main": [[239, 477], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "argparse.ArgumentParser.parse_args", "pfrl.experiments.prepare_output_dir", "logging.FileHandler", "logging.StreamHandler", "logging.basicConfig", "random.Random", "optuna.samplers.TPESampler", "optuna.load_study", "optuna.load_study.optimize", "optuna_dqn_obs1d.suggest", "random.Random.randint", "dict", "pfrl.experiments.prepare_output_dir", "print", "optuna_dqn_obs1d._objective_core", "optuna.pruners.NopPruner", "OptunaTrainingStepsBudgetCallback", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "os.path.join", "optuna.pruners.ThresholdPruner", "sum", "optuna_dqn_obs1d..logger.info", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "optuna.pruners.PercentilePruner", "logging.getLogger", "optuna.load_study.stop", "optuna.pruners.HyperbandPruner", "optuna.load_study.get_trials"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.optuna.optuna_dqn_obs1d.suggest", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.optuna.optuna_dqn_obs1d._objective_core", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.stoppable_thread.StoppableThread.stop"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# training parameters", "\n", "parser", ".", "add_argument", "(", "\n", "\"--env\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"LunarLander-v2\"", ",", "\n", "help", "=", "\"OpenAI Gym Environment ID.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "\"Random seed for randomizer.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--monitor\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "(", "\n", "\"Monitor env. Videos and additional information are saved as output files.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"GPU to use, set to -1 if no GPU.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--steps\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "4", "*", "10", "**", "5", ",", "\n", "help", "=", "\"Total number of timesteps to train the agent for each trial\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--train-max-episode-len\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1000", ",", "\n", "help", "=", "\"Maximum episode length during training.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-n-episodes\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "\"Number of episodes at each evaluation phase.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", "**", "4", ",", "\n", "help", "=", "\"Frequency (in timesteps) of evaluation phase.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--batch-size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "64", ",", "\n", "help", "=", "\"Training batch size.\"", ",", "\n", ")", "\n", "\n", "# Optuna related args", "\n", "parser", ".", "add_argument", "(", "\n", "\"--optuna-study-name\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"optuna-pfrl-quickstart\"", ",", "\n", "help", "=", "\"Name for Optuna Study.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--optuna-storage\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"sqlite:///example.db\"", ",", "\n", "help", "=", "(", "\n", "\"DB URL for Optuna Study. Be sure to create one beforehand: \"", "\n", "\"optuna create-study --study-name <name> --storage <storage> --direction maximize\"", "# noqa", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--optuna-training-steps-budget\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "4", "*", "10", "**", "7", ",", "\n", "help", "=", "(", "\n", "\"Total training steps thoughout the optimization. If the pruner works \"", "\n", "\"well, this limited training steps can be allocated to promissing trials \"", "\n", "\"efficiently, and thus the tuned hyperparameter should get better.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--optuna-pruner\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"NopPruner\"", ",", "\n", "choices", "=", "[", "\"NopPruner\"", ",", "\"ThresholdPruner\"", ",", "\"PercentilePruner\"", ",", "\"HyperbandPruner\"", "]", ",", "\n", "help", "=", "(", "\n", "\"Optuna pruner. For more details see: \"", "\n", "\"https://optuna.readthedocs.io/en/stable/reference/pruners.html\"", "\n", ")", ",", "\n", ")", "\n", "# add pruner specific arguments...", "\n", "_tmp_args", ",", "_unknown", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "n_warmup_steps_help_msg", "=", "(", "\n", "\"Don't prune for first `n_warmup_steps` steps for each trial (pruning check \"", "\n", "\"will be invoked every `eval_interval` step). Note that `step` for the pruner \"", "\n", "\"is the training step, not the number of evaluations so far.\"", "\n", ")", "\n", "if", "_tmp_args", ".", "optuna_pruner", "==", "\"NopPruner\"", ":", "\n", "        ", "pass", "\n", "", "elif", "_tmp_args", ".", "optuna_pruner", "==", "\"ThresholdPruner\"", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\n", "\"--lower\"", ",", "\n", "type", "=", "float", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "(", "\n", "\"Lower side threshold score for pruning trials. \"", "\n", "\"Please set the appropriate value for your specified env.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n-warmup-steps\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", "*", "_tmp_args", ".", "eval_interval", ",", "\n", "help", "=", "n_warmup_steps_help_msg", ",", "\n", ")", "\n", "", "elif", "_tmp_args", ".", "optuna_pruner", "==", "\"PercentilePruner\"", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\n", "\"--percentile\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "50.0", ",", "\n", "help", "=", "\"Setting percentile == 50.0 is equivalent to the MedianPruner.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n-startup-trials\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n-warmup-steps\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", "*", "_tmp_args", ".", "eval_interval", ",", "\n", "help", "=", "n_warmup_steps_help_msg", ",", "\n", ")", "\n", "", "elif", "_tmp_args", ".", "optuna_pruner", "==", "\"HyperbandPruner\"", ":", "\n", "        ", "pass", "\n", "\n", "", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "rootdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", "=", "args", ",", "basedir", "=", "args", ".", "outdir", ")", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "filename", "=", "os", ".", "path", ".", "join", "(", "rootdir", ",", "\"console.log\"", ")", ")", "\n", "console_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ",", "handlers", "=", "[", "file_handler", ",", "console_handler", "]", ")", "\n", "\n", "randomizer", "=", "random", ".", "Random", "(", "args", ".", "seed", ")", "\n", "\n", "def", "objective", "(", "trial", ")", ":", "\n", "# suggest parameters from Optuna", "\n", "        ", "hyperparams", "=", "suggest", "(", "trial", ",", "args", ".", "steps", ")", "\n", "\n", "# seed is generated for each objective", "\n", "seed", "=", "randomizer", ".", "randint", "(", "0", ",", "2", "**", "31", "-", "1", ")", "\n", "additional_args", "=", "dict", "(", "seed", "=", "seed", ",", "**", "hyperparams", ")", "\n", "\n", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", "=", "additional_args", ",", "basedir", "=", "rootdir", ")", "\n", "print", "(", "\"Output files are saved in {}\"", ".", "format", "(", "outdir", ")", ")", "\n", "\n", "return", "_objective_core", "(", "\n", "# optuna parameters", "\n", "trial", "=", "trial", ",", "\n", "# training parameters", "\n", "env_id", "=", "args", ".", "env", ",", "\n", "outdir", "=", "outdir", ",", "\n", "seed", "=", "seed", ",", "\n", "monitor", "=", "args", ".", "monitor", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "train_max_episode_len", "=", "args", ".", "train_max_episode_len", ",", "\n", "eval_n_episodes", "=", "args", ".", "eval_n_episodes", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "# hyperparameters", "\n", "hyperparams", "=", "hyperparams", ",", "\n", ")", "\n", "\n", "", "sampler", "=", "optuna", ".", "samplers", ".", "TPESampler", "(", "seed", "=", "args", ".", "seed", ")", "\n", "\n", "# pruner", "\n", "if", "args", ".", "optuna_pruner", "==", "\"NopPruner\"", ":", "\n", "        ", "pruner", "=", "optuna", ".", "pruners", ".", "NopPruner", "(", ")", "\n", "", "elif", "args", ".", "optuna_pruner", "==", "\"ThresholdPruner\"", ":", "\n", "        ", "pruner", "=", "optuna", ".", "pruners", ".", "ThresholdPruner", "(", "\n", "lower", "=", "args", ".", "lower", ",", "\n", "n_warmup_steps", "=", "args", ".", "n_warmup_steps", ",", "\n", ")", "\n", "", "elif", "args", ".", "optuna_pruner", "==", "\"PercentilePruner\"", ":", "\n", "        ", "pruner", "=", "optuna", ".", "pruners", ".", "PercentilePruner", "(", "\n", "percentile", "=", "args", ".", "percentile", ",", "\n", "n_startup_trials", "=", "args", ".", "n_startup_trials", ",", "\n", "n_warmup_steps", "=", "args", ".", "n_warmup_steps", ",", "\n", ")", "\n", "", "elif", "args", ".", "optuna_pruner", "==", "\"HyperbandPruner\"", ":", "\n", "        ", "pruner", "=", "optuna", ".", "pruners", ".", "HyperbandPruner", "(", "min_resource", "=", "args", ".", "eval_interval", ")", "\n", "\n", "", "study", "=", "optuna", ".", "load_study", "(", "\n", "study_name", "=", "args", ".", "optuna_study_name", ",", "\n", "storage", "=", "args", ".", "optuna_storage", ",", "\n", "sampler", "=", "sampler", ",", "\n", "pruner", "=", "pruner", ",", "\n", ")", "\n", "\n", "class", "OptunaTrainingStepsBudgetCallback", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "training_steps_budget", ",", "logger", "=", "None", ")", ":", "\n", "            ", "self", ".", "training_steps_budget", "=", "training_steps_budget", "\n", "self", ".", "logger", "=", "logger", "or", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "", "def", "__call__", "(", "self", ",", "study", ",", "trial", ")", ":", "\n", "            ", "training_steps", "=", "sum", "(", "\n", "trial", ".", "last_step", "\n", "for", "trial", "in", "study", ".", "get_trials", "(", ")", "\n", "if", "trial", ".", "last_step", "is", "not", "None", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "\"{} / {} (sum of training steps / budget)\"", ".", "format", "(", "\n", "training_steps", ",", "self", ".", "training_steps_budget", "\n", ")", "\n", ")", "\n", "if", "training_steps", ">=", "self", ".", "training_steps_budget", ":", "\n", "                ", "study", ".", "stop", "(", ")", "\n", "\n", "", "", "", "callbacks", "=", "[", "\n", "OptunaTrainingStepsBudgetCallback", "(", "\n", "training_steps_budget", "=", "args", ".", "optuna_training_steps_budget", ",", "\n", ")", ",", "\n", "]", "\n", "study", ".", "optimize", "(", "objective", ",", "callbacks", "=", "callbacks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env": [[18, 45], ["args.env.startswith", "gym.make", "gym.make", "isinstance", "pfrl.wrappers.Render.seed", "pfrl.wrappers.CastObservationToFloat32", "pfrl.wrappers.NormalizeActionSpace", "StrictVersion", "int", "pfrl.wrappers.Monitor", "pfrl.wrappers.Render", "StrictVersion", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.seed"], ["def", "make_env", "(", "args", ",", "seed", ",", "test", ")", ":", "\n", "    ", "if", "args", ".", "env", ".", "startswith", "(", "\"Roboschool\"", ")", ":", "\n", "# Check gym version because roboschool does not work with gym>=0.15.6", "\n", "        ", "from", "distutils", ".", "version", "import", "StrictVersion", "\n", "\n", "gym_version", "=", "StrictVersion", "(", "gym", ".", "__version__", ")", "\n", "if", "gym_version", ">=", "StrictVersion", "(", "\"0.15.6\"", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"roboschool does not work with gym>=0.15.6\"", ")", "\n", "", "import", "roboschool", "# NOQA", "\n", "", "env", "=", "gym", ".", "make", "(", "args", ".", "env", ")", "\n", "# Unwrap TimiLimit wrapper", "\n", "assert", "isinstance", "(", "env", ",", "gym", ".", "wrappers", ".", "TimeLimit", ")", "\n", "env", "=", "env", ".", "env", "\n", "# Use different random seeds for train and test envs", "\n", "env_seed", "=", "2", "**", "32", "-", "1", "-", "seed", "if", "test", "else", "seed", "\n", "env", ".", "seed", "(", "int", "(", "env_seed", ")", ")", "\n", "# Cast observations to float32 because our model uses float32", "\n", "env", "=", "pfrl", ".", "wrappers", ".", "CastObservationToFloat32", "(", "env", ")", "\n", "# Normalize action space to [-1, 1]^n", "\n", "env", "=", "pfrl", ".", "wrappers", ".", "NormalizeActionSpace", "(", "env", ")", "\n", "if", "args", ".", "monitor", ":", "\n", "        ", "env", "=", "pfrl", ".", "wrappers", ".", "Monitor", "(", "\n", "env", ",", "args", ".", "outdir", ",", "force", "=", "True", ",", "video_callable", "=", "lambda", "_", ":", "True", "\n", ")", "\n", "", "if", "args", ".", "render", ":", "\n", "        ", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "env", ",", "mode", "=", "\"human\"", ")", "\n", "", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.main": [[47, 273], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "pfrl.experiments.prepare_output_dir", "print", "pfrl.utils.set_random_seed", "train_soft_actor_critic_atlas.make_env", "print", "print", "torch.nn.Sequential", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.optim.Adam", "train_soft_actor_critic_atlas.main.make_q_func_with_optimizer"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.parse_args", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "(", "\n", "\"Directory path to save output files.\"", "\n", "\" If it does not exist, it will be created.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--env\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"RoboschoolAtlasForwardWalk-v1\"", ",", "\n", "help", "=", "\"OpenAI Gym env to perform algorithm on.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num-envs\"", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "\"Number of envs run in parallel.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random seed [0, 2 ** 32)\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"GPU to use, set to -1 if no GPU.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Directory to load agent from.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--steps\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", "**", "7", ",", "\n", "help", "=", "\"Total number of timesteps to train the agent.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-n-runs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "20", ",", "\n", "help", "=", "\"Number of episodes run for each evaluation.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100000", ",", "\n", "help", "=", "\"Interval in timesteps between evaluations.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--replay-start-size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10000", ",", "\n", "help", "=", "\"Minimum replay buffer size before \"", "+", "\"performing gradient updates.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--update-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "\"Interval in timesteps between model updates.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "\"Minibatch size\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--render\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Render env states in a GUI window.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--demo\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Just run evaluation, not training.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--monitor\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Wrap env with Monitor to write videos.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1000", ",", "\n", "help", "=", "\"Interval in timesteps between outputting log messages during training\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "type", "=", "int", ",", "default", "=", "logging", ".", "INFO", ",", "help", "=", "\"Level of the root logger.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n-hidden-channels\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1024", ",", "\n", "help", "=", "\"Number of hidden channels of NN models.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--discount\"", ",", "type", "=", "float", ",", "default", "=", "0.98", ",", "help", "=", "\"Discount factor.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--n-step-return\"", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "\"N-step return.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "3e-4", ",", "help", "=", "\"Learning rate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--adam-eps\"", ",", "type", "=", "float", ",", "default", "=", "1e-1", ",", "help", "=", "\"Adam eps.\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "args", ".", "log_level", ")", "\n", "\n", "args", ".", "outdir", "=", "experiments", ".", "prepare_output_dir", "(", "args", ",", "args", ".", "outdir", ",", "argv", "=", "sys", ".", "argv", ")", "\n", "print", "(", "\"Output files are saved in {}\"", ".", "format", "(", "args", ".", "outdir", ")", ")", "\n", "\n", "# Set a random seed used in PFRL", "\n", "utils", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Set different random seeds for different subprocesses.", "\n", "# If seed=0 and processes=4, subprocess seeds are [0, 1, 2, 3].", "\n", "# If seed=1 and processes=4, subprocess seeds are [4, 5, 6, 7].", "\n", "process_seeds", "=", "np", ".", "arange", "(", "args", ".", "num_envs", ")", "+", "args", ".", "seed", "*", "args", ".", "num_envs", "\n", "assert", "process_seeds", ".", "max", "(", ")", "<", "2", "**", "32", "\n", "\n", "def", "make_batch_env", "(", "test", ")", ":", "\n", "        ", "return", "pfrl", ".", "envs", ".", "MultiprocessVectorEnv", "(", "\n", "[", "\n", "functools", ".", "partial", "(", "make_env", ",", "args", ",", "process_seeds", "[", "idx", "]", ",", "test", ")", "\n", "for", "idx", ",", "env", "in", "enumerate", "(", "range", "(", "args", ".", "num_envs", ")", ")", "\n", "]", "\n", ")", "\n", "\n", "", "sample_env", "=", "make_env", "(", "args", ",", "process_seeds", "[", "0", "]", ",", "test", "=", "False", ")", "\n", "timestep_limit", "=", "sample_env", ".", "spec", ".", "max_episode_steps", "\n", "obs_space", "=", "sample_env", ".", "observation_space", "\n", "action_space", "=", "sample_env", ".", "action_space", "\n", "print", "(", "\"Observation space:\"", ",", "obs_space", ")", "\n", "print", "(", "\"Action space:\"", ",", "action_space", ")", "\n", "del", "sample_env", "\n", "\n", "action_size", "=", "action_space", ".", "low", ".", "size", "\n", "\n", "def", "squashed_diagonal_gaussian_head", "(", "x", ")", ":", "\n", "        ", "assert", "x", ".", "shape", "[", "-", "1", "]", "==", "action_size", "*", "2", "\n", "mean", ",", "log_scale", "=", "torch", ".", "chunk", "(", "x", ",", "2", ",", "dim", "=", "1", ")", "\n", "log_scale", "=", "torch", ".", "clamp", "(", "log_scale", ",", "-", "20.0", ",", "2.0", ")", "\n", "var", "=", "torch", ".", "exp", "(", "log_scale", "*", "2", ")", "\n", "base_distribution", "=", "distributions", ".", "Independent", "(", "\n", "distributions", ".", "Normal", "(", "loc", "=", "mean", ",", "scale", "=", "torch", ".", "sqrt", "(", "var", ")", ")", ",", "1", "\n", ")", "\n", "# cache_size=1 is required for numerical stability", "\n", "return", "distributions", ".", "transformed_distribution", ".", "TransformedDistribution", "(", "\n", "base_distribution", ",", "[", "distributions", ".", "transforms", ".", "TanhTransform", "(", "cache_size", "=", "1", ")", "]", "\n", ")", "\n", "\n", "", "policy", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_space", ".", "low", ".", "size", ",", "args", ".", "n_hidden_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "args", ".", "n_hidden_channels", ",", "args", ".", "n_hidden_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "args", ".", "n_hidden_channels", ",", "action_size", "*", "2", ")", ",", "\n", "Lambda", "(", "squashed_diagonal_gaussian_head", ")", ",", "\n", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "policy", "[", "0", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "policy", "[", "2", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "policy", "[", "4", "]", ".", "weight", ")", "\n", "policy_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "policy", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "eps", "=", "args", ".", "adam_eps", "\n", ")", "\n", "\n", "def", "make_q_func_with_optimizer", "(", ")", ":", "\n", "        ", "q_func", "=", "nn", ".", "Sequential", "(", "\n", "pfrl", ".", "nn", ".", "ConcatObsAndAction", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "obs_space", ".", "low", ".", "size", "+", "action_size", ",", "args", ".", "n_hidden_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "args", ".", "n_hidden_channels", ",", "args", ".", "n_hidden_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "args", ".", "n_hidden_channels", ",", "1", ")", ",", "\n", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "q_func", "[", "1", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "q_func", "[", "3", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "q_func", "[", "5", "]", ".", "weight", ")", "\n", "q_func_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "q_func", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "eps", "=", "args", ".", "adam_eps", "\n", ")", "\n", "return", "q_func", ",", "q_func_optimizer", "\n", "\n", "", "q_func1", ",", "q_func1_optimizer", "=", "make_q_func_with_optimizer", "(", ")", "\n", "q_func2", ",", "q_func2_optimizer", "=", "make_q_func_with_optimizer", "(", ")", "\n", "\n", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "10", "**", "6", ",", "num_steps", "=", "args", ".", "n_step_return", ")", "\n", "\n", "def", "burnin_action_func", "(", ")", ":", "\n", "        ", "\"\"\"Select random actions until model is updated one or more times.\"\"\"", "\n", "return", "np", ".", "random", ".", "uniform", "(", "action_space", ".", "low", ",", "action_space", ".", "high", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Hyperparameters in http://arxiv.org/abs/1802.09477", "\n", "", "agent", "=", "pfrl", ".", "agents", ".", "SoftActorCritic", "(", "\n", "policy", ",", "\n", "q_func1", ",", "\n", "q_func2", ",", "\n", "policy_optimizer", ",", "\n", "q_func1_optimizer", ",", "\n", "q_func2_optimizer", ",", "\n", "rbuf", ",", "\n", "gamma", "=", "args", ".", "discount", ",", "\n", "update_interval", "=", "args", ".", "update_interval", ",", "\n", "replay_start_size", "=", "args", ".", "replay_start_size", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "minibatch_size", "=", "args", ".", "batch_size", ",", "\n", "burnin_action_func", "=", "burnin_action_func", ",", "\n", "entropy_target", "=", "-", "action_size", ",", "\n", "temperature_optimizer_lr", "=", "args", ".", "lr", ",", "\n", ")", "\n", "\n", "if", "len", "(", "args", ".", "load", ")", ">", "0", ":", "\n", "        ", "agent", ".", "load", "(", "args", ".", "load", ")", "\n", "\n", "", "if", "args", ".", "demo", ":", "\n", "        ", "eval_env", "=", "make_env", "(", "args", ",", "seed", "=", "0", ",", "test", "=", "True", ")", "\n", "eval_stats", "=", "experiments", ".", "eval_performance", "(", "\n", "env", "=", "eval_env", ",", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "max_episode_len", "=", "timestep_limit", ",", "\n", ")", "\n", "print", "(", "\n", "\"n_runs: {} mean: {} median: {} stdev {}\"", ".", "format", "(", "\n", "args", ".", "eval_n_runs", ",", "\n", "eval_stats", "[", "\"mean\"", "]", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "experiments", ".", "train_agent_batch_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "make_batch_env", "(", "test", "=", "False", ")", ",", "\n", "eval_env", "=", "make_batch_env", "(", "test", "=", "True", ")", ",", "\n", "outdir", "=", "args", ".", "outdir", ",", "\n", "steps", "=", "args", ".", "steps", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "args", ".", "eval_n_runs", ",", "\n", "eval_interval", "=", "args", ".", "eval_interval", ",", "\n", "log_interval", "=", "args", ".", "log_interval", ",", "\n", "max_episode_len", "=", "timestep_limit", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_persistent_replay_buffer.TestEpisodicReplayBuffer.setup_method": [[11, 13], ["tempfile.TemporaryDirectory"], "methods", ["None"], ["    ", "def", "setup_method", "(", "self", ",", "method", ")", ":", "\n", "        ", "self", ".", "tempdir", "=", "tempfile", ".", "TemporaryDirectory", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_persistent_replay_buffer.TestEpisodicReplayBuffer.teardown_method": [[14, 16], ["test_persistent_replay_buffer.TestEpisodicReplayBuffer.tempdir.cleanup"], "methods", ["None"], ["", "def", "teardown_method", "(", "self", ",", "method", ")", ":", "\n", "        ", "self", ".", "tempdir", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_persistent_replay_buffer.TestEpisodicReplayBuffer.test_append_and_sample": [[17, 53], ["pfrl.replay_buffers.PersistentEpisodicReplayBuffer", "len", "len", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer.sample", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer.sample_episodes", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer.sample_episodes", "dict", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer.append", "len", "len", "zip", "range", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized_episodic.PrioritizedEpisodicReplayBuffer.sample_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized_episodic.PrioritizedEpisodicReplayBuffer.sample_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "test_append_and_sample", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "rbuf", "=", "PersistentEpisodicReplayBuffer", "(", "self", ".", "tempdir", ".", "name", ",", "capacity", ")", "\n", "assert", "len", "(", "rbuf", ")", "==", "0", "\n", "\n", "for", "n", "in", "[", "10", ",", "15", ",", "5", "]", "*", "3", ":", "\n", "            ", "transs", "=", "[", "\n", "dict", "(", "\n", "state", "=", "i", ",", "\n", "action", "=", "100", "+", "i", ",", "\n", "reward", "=", "200", "+", "i", ",", "\n", "next_state", "=", "i", "+", "1", ",", "\n", "next_action", "=", "101", "+", "i", ",", "\n", "is_state_terminal", "=", "(", "i", "==", "n", "-", "1", ")", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "n", ")", "\n", "]", "\n", "for", "trans", "in", "transs", ":", "\n", "                ", "rbuf", ".", "append", "(", "**", "trans", ")", "\n", "\n", "", "", "assert", "len", "(", "rbuf", ")", "==", "90", "\n", "assert", "rbuf", ".", "n_episodes", "==", "9", "\n", "\n", "for", "k", "in", "[", "10", ",", "30", ",", "90", "]", ":", "\n", "            ", "s", "=", "rbuf", ".", "sample", "(", "k", ")", "\n", "assert", "len", "(", "s", ")", "==", "k", "\n", "\n", "", "for", "k", "in", "[", "1", ",", "3", ",", "9", "]", ":", "\n", "            ", "s", "=", "rbuf", ".", "sample_episodes", "(", "k", ")", "\n", "assert", "len", "(", "s", ")", "==", "k", "\n", "\n", "s", "=", "rbuf", ".", "sample_episodes", "(", "k", ",", "max_len", "=", "10", ")", "\n", "for", "ep", "in", "s", ":", "\n", "                ", "assert", "len", "(", "ep", ")", "<=", "10", "\n", "for", "t0", ",", "t1", "in", "zip", "(", "ep", ",", "ep", "[", "1", ":", "]", ")", ":", "\n", "                    ", "assert", "t0", "[", "\"next_state\"", "]", "==", "t1", "[", "\"state\"", "]", "\n", "assert", "t0", "[", "\"next_action\"", "]", "==", "t1", "[", "\"action\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_persistent_replay_buffer.TestEpisodicReplayBuffer.test_save_and_load": [[54, 115], ["tempfile.mkdtemp", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer.append", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer.append", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer.stop_current_episode", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer.append", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer.append", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer.append", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer.stop_current_episode", "os.path.join", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer.save", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer.sample", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer.sample_episodes", "dict", "len", "len", "len", "len", "range", "len", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.stop_current_episode", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.stop_current_episode", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized_episodic.PrioritizedEpisodicReplayBuffer.sample_episodes"], ["", "", "", "", "def", "test_save_and_load", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "tempdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "rbuf", "=", "PersistentEpisodicReplayBuffer", "(", "self", ".", "tempdir", ".", "name", ",", "capacity", ")", "\n", "\n", "transs", "=", "[", "\n", "dict", "(", "\n", "state", "=", "n", ",", "\n", "action", "=", "n", "+", "10", ",", "\n", "reward", "=", "n", "+", "20", ",", "\n", "next_state", "=", "n", "+", "1", ",", "\n", "next_action", "=", "n", "+", "11", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", ")", "\n", "for", "n", "in", "range", "(", "5", ")", "\n", "]", "\n", "\n", "# Add two episodes", "\n", "rbuf", ".", "append", "(", "**", "transs", "[", "0", "]", ")", "\n", "rbuf", ".", "append", "(", "**", "transs", "[", "1", "]", ")", "\n", "rbuf", ".", "stop_current_episode", "(", ")", "\n", "\n", "rbuf", ".", "append", "(", "**", "transs", "[", "2", "]", ")", "\n", "rbuf", ".", "append", "(", "**", "transs", "[", "3", "]", ")", "\n", "rbuf", ".", "append", "(", "**", "transs", "[", "4", "]", ")", "\n", "rbuf", ".", "stop_current_episode", "(", ")", "\n", "\n", "assert", "len", "(", "rbuf", ")", "==", "5", "\n", "assert", "rbuf", ".", "n_episodes", "==", "2", "\n", "\n", "# Save", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "tempdir", ",", "\"rbuf.pkl\"", ")", "\n", "# Actually does nothing", "\n", "rbuf", ".", "save", "(", "filename", ")", "\n", "del", "rbuf", "\n", "\n", "# Re-initialize rbuf", "\n", "rbuf", "=", "PersistentEpisodicReplayBuffer", "(", "self", ".", "tempdir", ".", "name", ",", "capacity", ")", "\n", "\n", "# Sampled transitions are exactly what I added!", "\n", "s5", "=", "rbuf", ".", "sample", "(", "5", ")", "\n", "assert", "len", "(", "s5", ")", "==", "5", "\n", "for", "t", "in", "s5", ":", "\n", "            ", "assert", "len", "(", "t", ")", "==", "1", "\n", "n", "=", "t", "[", "0", "]", "[", "\"state\"", "]", "\n", "assert", "n", "in", "range", "(", "5", ")", "\n", "assert", "t", "[", "0", "]", "==", "transs", "[", "n", "]", "\n", "\n", "# And sampled episodes are exactly what I added!", "\n", "", "s2e", "=", "rbuf", ".", "sample_episodes", "(", "2", ")", "\n", "assert", "len", "(", "s2e", ")", "==", "2", "\n", "if", "s2e", "[", "0", "]", "[", "0", "]", "[", "\"state\"", "]", "==", "0", ":", "\n", "            ", "assert", "s2e", "[", "0", "]", "==", "[", "transs", "[", "0", "]", ",", "transs", "[", "1", "]", "]", "\n", "assert", "s2e", "[", "1", "]", "==", "[", "transs", "[", "2", "]", ",", "transs", "[", "3", "]", ",", "transs", "[", "4", "]", "]", "\n", "", "else", ":", "\n", "            ", "assert", "s2e", "[", "0", "]", "==", "[", "transs", "[", "2", "]", ",", "transs", "[", "3", "]", ",", "transs", "[", "4", "]", "]", "\n", "assert", "s2e", "[", "1", "]", "==", "[", "transs", "[", "0", "]", ",", "transs", "[", "1", "]", "]", "\n", "\n", "# Sizes are correct!", "\n", "", "assert", "len", "(", "rbuf", ")", "==", "5", "\n", "assert", "rbuf", ".", "n_episodes", "==", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_persistent_replay_buffer.TestEpisodicReplayBufferWithEnvID.setup_method": [[118, 120], ["tempfile.TemporaryDirectory"], "methods", ["None"], ["    ", "def", "setup_method", "(", "self", ")", ":", "\n", "        ", "self", ".", "tempdir", "=", "tempfile", ".", "TemporaryDirectory", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_persistent_replay_buffer.TestEpisodicReplayBufferWithEnvID.teardown_method": [[121, 123], ["test_persistent_replay_buffer.TestEpisodicReplayBufferWithEnvID.tempdir.cleanup"], "methods", ["None"], ["", "def", "teardown_method", "(", "self", ")", ":", "\n", "        ", "self", ".", "tempdir", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_persistent_replay_buffer.TestEpisodicReplayBufferWithEnvID.test": [[124, 175], ["pfrl.replay_buffers.PersistentEpisodicReplayBuffer", "range", "range", "range", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer.stop_current_episode", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer.stop_current_episode", "dict", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer.append", "dict", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer.append", "dict", "pfrl.replay_buffers.PersistentEpisodicReplayBuffer.append", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.stop_current_episode", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.stop_current_episode", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "rbuf", "=", "PersistentEpisodicReplayBuffer", "(", "self", ".", "tempdir", ".", "name", ",", "capacity", "=", "None", ")", "\n", "\n", "# 2 transitions for env_id=0", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "trans1", "=", "dict", "(", "\n", "state", "=", "0", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", ")", "\n", "rbuf", ".", "append", "(", "env_id", "=", "0", ",", "**", "trans1", ")", "\n", "# 4 transitions for env_id=1 with a terminal state", "\n", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "trans1", "=", "dict", "(", "\n", "state", "=", "0", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "(", "i", "==", "3", ")", ",", "\n", ")", "\n", "rbuf", ".", "append", "(", "env_id", "=", "1", ",", "**", "trans1", ")", "\n", "# 9 transitions for env_id=2", "\n", "", "for", "i", "in", "range", "(", "9", ")", ":", "\n", "            ", "trans1", "=", "dict", "(", "\n", "state", "=", "0", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", ")", "\n", "rbuf", ".", "append", "(", "env_id", "=", "2", ",", "**", "trans1", ")", "\n", "\n", "# It should have 4 transitions from env_id=1", "\n", "", "assert", "len", "(", "rbuf", ")", "==", "4", "\n", "\n", "# env_id=0 episode ends", "\n", "rbuf", ".", "stop_current_episode", "(", "env_id", "=", "0", ")", "\n", "\n", "# Now it should have 4 + 2 = 6 transitions", "\n", "assert", "len", "(", "rbuf", ")", "==", "6", "\n", "\n", "# env_id=2 episode ends", "\n", "rbuf", ".", "stop_current_episode", "(", "env_id", "=", "2", ")", "\n", "\n", "# Finally it should have 4 + 2 + 9 = 15 transitions", "\n", "assert", "len", "(", "rbuf", ")", "==", "15", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestReplayBuffer.setUp": [[17, 21], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "capacity", ",", "num_steps", ")", ":", "\n", "        ", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "num_steps", "=", "num_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestReplayBuffer.test_append_and_sample": [[22, 68], ["pfrl.replay_buffers.ReplayBuffer", "collections.deque", "range", "pfrl.replay_buffers.ReplayBuffer.sample", "copy.deepcopy", "dict", "copy.deepcopy.append", "pfrl.replay_buffers.ReplayBuffer.append", "pfrl.replay_buffers.ReplayBuffer.sample", "len", "dict", "collections.deque.append", "pfrl.replay_buffers.ReplayBuffer.append", "len", "len", "list", "len", "len", "list", "list", "list", "list"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "test_append_and_sample", "(", "self", ")", ":", "\n", "        ", "capacity", "=", "self", ".", "capacity", "\n", "num_steps", "=", "self", ".", "num_steps", "\n", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "capacity", ",", "num_steps", ")", "\n", "\n", "assert", "len", "(", "rbuf", ")", "==", "0", "\n", "\n", "# Add one and sample one", "\n", "correct_item", "=", "collections", ".", "deque", "(", "[", "]", ",", "maxlen", "=", "num_steps", ")", "\n", "for", "_", "in", "range", "(", "num_steps", ")", ":", "\n", "            ", "trans1", "=", "dict", "(", "\n", "state", "=", "0", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", ")", "\n", "correct_item", ".", "append", "(", "trans1", ")", "\n", "rbuf", ".", "append", "(", "**", "trans1", ")", "\n", "", "assert", "len", "(", "rbuf", ")", "==", "1", "\n", "s1", "=", "rbuf", ".", "sample", "(", "1", ")", "\n", "assert", "len", "(", "s1", ")", "==", "1", "\n", "assert", "s1", "[", "0", "]", "==", "list", "(", "correct_item", ")", "\n", "\n", "# Add two and sample two, which must be unique", "\n", "correct_item2", "=", "copy", ".", "deepcopy", "(", "correct_item", ")", "\n", "trans2", "=", "dict", "(", "\n", "state", "=", "1", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", ")", "\n", "correct_item2", ".", "append", "(", "trans2", ")", "\n", "rbuf", ".", "append", "(", "**", "trans2", ")", "\n", "assert", "len", "(", "rbuf", ")", "==", "2", "\n", "s2", "=", "rbuf", ".", "sample", "(", "2", ")", "\n", "assert", "len", "(", "s2", ")", "==", "2", "\n", "if", "s2", "[", "0", "]", "[", "num_steps", "-", "1", "]", "[", "\"state\"", "]", "==", "0", ":", "\n", "            ", "assert", "s2", "[", "0", "]", "==", "list", "(", "correct_item", ")", "\n", "assert", "s2", "[", "1", "]", "==", "list", "(", "correct_item2", ")", "\n", "", "else", ":", "\n", "            ", "assert", "s2", "[", "1", "]", "==", "list", "(", "correct_item", ")", "\n", "assert", "s2", "[", "0", "]", "==", "list", "(", "correct_item2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestReplayBuffer.test_append_and_terminate": [[69, 120], ["pfrl.replay_buffers.ReplayBuffer", "range", "pfrl.replay_buffers.ReplayBuffer.sample", "dict", "pfrl.replay_buffers.ReplayBuffer.append", "pfrl.replay_buffers.ReplayBuffer.sample", "len", "dict", "pfrl.replay_buffers.ReplayBuffer.append", "len", "len", "len", "len", "len", "range", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "", "def", "test_append_and_terminate", "(", "self", ")", ":", "\n", "        ", "capacity", "=", "self", ".", "capacity", "\n", "num_steps", "=", "self", ".", "num_steps", "\n", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "capacity", ",", "num_steps", ")", "\n", "\n", "assert", "len", "(", "rbuf", ")", "==", "0", "\n", "\n", "# Add one and sample one", "\n", "for", "_", "in", "range", "(", "num_steps", ")", ":", "\n", "            ", "trans1", "=", "dict", "(", "\n", "state", "=", "0", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", ")", "\n", "rbuf", ".", "append", "(", "**", "trans1", ")", "\n", "", "assert", "len", "(", "rbuf", ")", "==", "1", "\n", "s1", "=", "rbuf", ".", "sample", "(", "1", ")", "\n", "assert", "len", "(", "s1", ")", "==", "1", "\n", "\n", "# Add two and sample two, which must be unique", "\n", "trans2", "=", "dict", "(", "\n", "state", "=", "1", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "True", ",", "\n", ")", "\n", "rbuf", ".", "append", "(", "**", "trans2", ")", "\n", "assert", "len", "(", "rbuf", ")", "==", "self", ".", "num_steps", "+", "1", "\n", "s2", "=", "rbuf", ".", "sample", "(", "self", ".", "num_steps", "+", "1", ")", "\n", "assert", "len", "(", "s2", ")", "==", "self", ".", "num_steps", "+", "1", "\n", "if", "self", ".", "num_steps", "==", "1", ":", "\n", "            ", "if", "s2", "[", "0", "]", "[", "0", "]", "[", "\"state\"", "]", "==", "0", ":", "\n", "                ", "assert", "s2", "[", "1", "]", "[", "0", "]", "[", "\"state\"", "]", "==", "1", "\n", "", "else", ":", "\n", "                ", "assert", "s2", "[", "1", "]", "[", "0", "]", "[", "\"state\"", "]", "==", "0", "\n", "", "", "else", ":", "\n", "            ", "for", "item", "in", "s2", ":", "\n", "# e.g. if states are 0,0,0,1 then buffer looks like:", "\n", "# [[0,0,0], [0, 0, 1], [0, 1], [1]]", "\n", "                ", "if", "len", "(", "item", ")", "<", "self", ".", "num_steps", ":", "\n", "                    ", "assert", "item", "[", "len", "(", "item", ")", "-", "1", "]", "[", "\"state\"", "]", "==", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "item", ")", "-", "1", ")", ":", "\n", "                        ", "assert", "item", "[", "i", "]", "[", "\"state\"", "]", "==", "0", "\n", "", "", "else", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "item", ")", "-", "1", ")", ":", "\n", "                        ", "assert", "item", "[", "i", "]", "[", "\"state\"", "]", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestReplayBuffer.test_stop_current_episode": [[121, 145], ["pfrl.replay_buffers.ReplayBuffer", "range", "pfrl.replay_buffers.ReplayBuffer.stop_current_episode", "len", "dict", "pfrl.replay_buffers.ReplayBuffer.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.stop_current_episode", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "", "", "", "", "def", "test_stop_current_episode", "(", "self", ")", ":", "\n", "        ", "capacity", "=", "self", ".", "capacity", "\n", "num_steps", "=", "self", ".", "num_steps", "\n", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "capacity", ",", "num_steps", ")", "\n", "\n", "assert", "len", "(", "rbuf", ")", "==", "0", "\n", "\n", "# Add one and sample one", "\n", "for", "_", "in", "range", "(", "num_steps", "-", "1", ")", ":", "\n", "            ", "trans1", "=", "dict", "(", "\n", "state", "=", "0", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", ")", "\n", "rbuf", ".", "append", "(", "**", "trans1", ")", "\n", "# we haven't experienced n transitions yet", "\n", "", "assert", "len", "(", "rbuf", ")", "==", "0", "\n", "# episode ends", "\n", "rbuf", ".", "stop_current_episode", "(", ")", "\n", "# episode ends, so we should add n-1 transitions", "\n", "assert", "len", "(", "rbuf", ")", "==", "self", ".", "num_steps", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestReplayBuffer.test_save_and_load": [[146, 206], ["tempfile.mkdtemp", "pfrl.replay_buffers.ReplayBuffer", "collections.deque", "range", "copy.deepcopy", "dict", "copy.deepcopy.append", "pfrl.replay_buffers.ReplayBuffer.append", "os.path.join", "pfrl.replay_buffers.ReplayBuffer.save", "pfrl.replay_buffers.ReplayBuffer", "pfrl.replay_buffers.ReplayBuffer.load", "pfrl.replay_buffers.ReplayBuffer.sample", "dict", "collections.deque.append", "pfrl.replay_buffers.ReplayBuffer.append", "len", "len", "len", "list", "list", "list", "list"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "test_save_and_load", "(", "self", ")", ":", "\n", "        ", "capacity", "=", "self", ".", "capacity", "\n", "num_steps", "=", "self", ".", "num_steps", "\n", "\n", "tempdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "capacity", ",", "num_steps", ")", "\n", "\n", "correct_item", "=", "collections", ".", "deque", "(", "[", "]", ",", "maxlen", "=", "num_steps", ")", "\n", "# Add two transitions", "\n", "for", "_", "in", "range", "(", "num_steps", ")", ":", "\n", "            ", "trans1", "=", "dict", "(", "\n", "state", "=", "0", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", ")", "\n", "correct_item", ".", "append", "(", "trans1", ")", "\n", "rbuf", ".", "append", "(", "**", "trans1", ")", "\n", "", "correct_item2", "=", "copy", ".", "deepcopy", "(", "correct_item", ")", "\n", "trans2", "=", "dict", "(", "\n", "state", "=", "1", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", ")", "\n", "correct_item2", ".", "append", "(", "trans2", ")", "\n", "rbuf", ".", "append", "(", "**", "trans2", ")", "\n", "\n", "# Now it has two transitions", "\n", "assert", "len", "(", "rbuf", ")", "==", "2", "\n", "\n", "# Save", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "tempdir", ",", "\"rbuf.pkl\"", ")", "\n", "rbuf", ".", "save", "(", "filename", ")", "\n", "\n", "# Initialize rbuf", "\n", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "capacity", ")", "\n", "\n", "# Of course it has no transition yet", "\n", "assert", "len", "(", "rbuf", ")", "==", "0", "\n", "\n", "# Load the previously saved buffer", "\n", "rbuf", ".", "load", "(", "filename", ")", "\n", "\n", "# Now it has two transitions again", "\n", "assert", "len", "(", "rbuf", ")", "==", "2", "\n", "\n", "# And sampled transitions are exactly what I added!", "\n", "s2", "=", "rbuf", ".", "sample", "(", "2", ")", "\n", "if", "s2", "[", "0", "]", "[", "num_steps", "-", "1", "]", "[", "\"state\"", "]", "==", "0", ":", "\n", "            ", "assert", "s2", "[", "0", "]", "==", "list", "(", "correct_item", ")", "\n", "assert", "s2", "[", "1", "]", "==", "list", "(", "correct_item2", ")", "\n", "", "else", ":", "\n", "            ", "assert", "s2", "[", "0", "]", "==", "list", "(", "correct_item2", ")", "\n", "assert", "s2", "[", "1", "]", "==", "list", "(", "correct_item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestEpisodicReplayBuffer.setUp": [[210, 213], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "self", ".", "capacity", "=", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestEpisodicReplayBuffer.test_append_and_sample": [[214, 250], ["pfrl.replay_buffers.EpisodicReplayBuffer", "len", "pfrl.replay_buffers.EpisodicReplayBuffer.sample", "pfrl.replay_buffers.EpisodicReplayBuffer.sample_episodes", "pfrl.replay_buffers.EpisodicReplayBuffer.sample_episodes", "dict", "pfrl.replay_buffers.EpisodicReplayBuffer.append", "len", "len", "zip", "range", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized_episodic.PrioritizedEpisodicReplayBuffer.sample_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized_episodic.PrioritizedEpisodicReplayBuffer.sample_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "test_append_and_sample", "(", "self", ")", ":", "\n", "        ", "capacity", "=", "self", ".", "capacity", "\n", "rbuf", "=", "replay_buffers", ".", "EpisodicReplayBuffer", "(", "capacity", ")", "\n", "\n", "for", "n", "in", "[", "10", ",", "15", ",", "5", "]", "*", "3", ":", "\n", "            ", "transs", "=", "[", "\n", "dict", "(", "\n", "state", "=", "i", ",", "\n", "action", "=", "100", "+", "i", ",", "\n", "reward", "=", "200", "+", "i", ",", "\n", "next_state", "=", "i", "+", "1", ",", "\n", "next_action", "=", "101", "+", "i", ",", "\n", "is_state_terminal", "=", "(", "i", "==", "n", "-", "1", ")", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "n", ")", "\n", "]", "\n", "for", "trans", "in", "transs", ":", "\n", "                ", "rbuf", ".", "append", "(", "**", "trans", ")", "\n", "\n", "", "", "assert", "len", "(", "rbuf", ")", "==", "90", "\n", "assert", "rbuf", ".", "n_episodes", "==", "9", "\n", "\n", "for", "k", "in", "[", "10", ",", "30", ",", "90", "]", ":", "\n", "            ", "s", "=", "rbuf", ".", "sample", "(", "k", ")", "\n", "assert", "len", "(", "s", ")", "==", "k", "\n", "\n", "", "for", "k", "in", "[", "1", ",", "3", ",", "9", "]", ":", "\n", "            ", "s", "=", "rbuf", ".", "sample_episodes", "(", "k", ")", "\n", "assert", "len", "(", "s", ")", "==", "k", "\n", "\n", "s", "=", "rbuf", ".", "sample_episodes", "(", "k", ",", "max_len", "=", "10", ")", "\n", "for", "ep", "in", "s", ":", "\n", "                ", "assert", "len", "(", "ep", ")", "<=", "10", "\n", "for", "t0", ",", "t1", "in", "zip", "(", "ep", ",", "ep", "[", "1", ":", "]", ")", ":", "\n", "                    ", "assert", "t0", "[", "\"next_state\"", "]", "==", "t1", "[", "\"state\"", "]", "\n", "assert", "t0", "[", "\"next_action\"", "]", "==", "t1", "[", "\"action\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestEpisodicReplayBuffer.test_save_and_load": [[251, 318], ["tempfile.mkdtemp", "pfrl.replay_buffers.EpisodicReplayBuffer", "pfrl.replay_buffers.EpisodicReplayBuffer.append", "pfrl.replay_buffers.EpisodicReplayBuffer.append", "pfrl.replay_buffers.EpisodicReplayBuffer.stop_current_episode", "pfrl.replay_buffers.EpisodicReplayBuffer.append", "pfrl.replay_buffers.EpisodicReplayBuffer.append", "pfrl.replay_buffers.EpisodicReplayBuffer.append", "pfrl.replay_buffers.EpisodicReplayBuffer.stop_current_episode", "os.path.join", "pfrl.replay_buffers.EpisodicReplayBuffer.save", "pfrl.replay_buffers.EpisodicReplayBuffer", "pfrl.replay_buffers.EpisodicReplayBuffer.load", "pfrl.replay_buffers.EpisodicReplayBuffer.sample", "pfrl.replay_buffers.EpisodicReplayBuffer.sample_episodes", "dict", "len", "len", "len", "len", "len", "range", "len", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.stop_current_episode", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.stop_current_episode", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized_episodic.PrioritizedEpisodicReplayBuffer.sample_episodes"], ["", "", "", "", "def", "test_save_and_load", "(", "self", ")", ":", "\n", "        ", "capacity", "=", "self", ".", "capacity", "\n", "\n", "tempdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "rbuf", "=", "replay_buffers", ".", "EpisodicReplayBuffer", "(", "capacity", ")", "\n", "\n", "transs", "=", "[", "\n", "dict", "(", "\n", "state", "=", "n", ",", "\n", "action", "=", "n", "+", "10", ",", "\n", "reward", "=", "n", "+", "20", ",", "\n", "next_state", "=", "n", "+", "1", ",", "\n", "next_action", "=", "n", "+", "11", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", ")", "\n", "for", "n", "in", "range", "(", "5", ")", "\n", "]", "\n", "\n", "# Add two episodes", "\n", "rbuf", ".", "append", "(", "**", "transs", "[", "0", "]", ")", "\n", "rbuf", ".", "append", "(", "**", "transs", "[", "1", "]", ")", "\n", "rbuf", ".", "stop_current_episode", "(", ")", "\n", "\n", "rbuf", ".", "append", "(", "**", "transs", "[", "2", "]", ")", "\n", "rbuf", ".", "append", "(", "**", "transs", "[", "3", "]", ")", "\n", "rbuf", ".", "append", "(", "**", "transs", "[", "4", "]", ")", "\n", "rbuf", ".", "stop_current_episode", "(", ")", "\n", "\n", "assert", "len", "(", "rbuf", ")", "==", "5", "\n", "assert", "rbuf", ".", "n_episodes", "==", "2", "\n", "\n", "# Save", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "tempdir", ",", "\"rbuf.pkl\"", ")", "\n", "rbuf", ".", "save", "(", "filename", ")", "\n", "\n", "# Initialize rbuf", "\n", "rbuf", "=", "replay_buffers", ".", "EpisodicReplayBuffer", "(", "capacity", ")", "\n", "\n", "# Of course it has no transition yet", "\n", "assert", "len", "(", "rbuf", ")", "==", "0", "\n", "\n", "# Load the previously saved buffer", "\n", "rbuf", ".", "load", "(", "filename", ")", "\n", "\n", "# Sampled transitions are exactly what I added!", "\n", "s5", "=", "rbuf", ".", "sample", "(", "5", ")", "\n", "assert", "len", "(", "s5", ")", "==", "5", "\n", "for", "t", "in", "s5", ":", "\n", "            ", "assert", "len", "(", "t", ")", "==", "1", "\n", "n", "=", "t", "[", "0", "]", "[", "\"state\"", "]", "\n", "assert", "n", "in", "range", "(", "5", ")", "\n", "assert", "t", "[", "0", "]", "==", "transs", "[", "n", "]", "\n", "\n", "# And sampled episodes are exactly what I added!", "\n", "", "s2e", "=", "rbuf", ".", "sample_episodes", "(", "2", ")", "\n", "assert", "len", "(", "s2e", ")", "==", "2", "\n", "if", "s2e", "[", "0", "]", "[", "0", "]", "[", "\"state\"", "]", "==", "0", ":", "\n", "            ", "assert", "s2e", "[", "0", "]", "==", "[", "transs", "[", "0", "]", ",", "transs", "[", "1", "]", "]", "\n", "assert", "s2e", "[", "1", "]", "==", "[", "transs", "[", "2", "]", ",", "transs", "[", "3", "]", ",", "transs", "[", "4", "]", "]", "\n", "", "else", ":", "\n", "            ", "assert", "s2e", "[", "0", "]", "==", "[", "transs", "[", "2", "]", ",", "transs", "[", "3", "]", ",", "transs", "[", "4", "]", "]", "\n", "assert", "s2e", "[", "1", "]", "==", "[", "transs", "[", "0", "]", ",", "transs", "[", "1", "]", "]", "\n", "\n", "# Sizes are correct!", "\n", "", "assert", "len", "(", "rbuf", ")", "==", "5", "\n", "assert", "rbuf", ".", "n_episodes", "==", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestPrioritizedReplayBuffer.setUp": [[323, 328], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "capacity", ",", "normalize_by_max", ")", ":", "\n", "        ", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "normalize_by_max", "=", "normalize_by_max", "\n", "self", ".", "num_steps", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestPrioritizedReplayBuffer.test_append_and_sample": [[329, 400], ["pfrl.replay_buffers.PrioritizedReplayBuffer", "collections.deque", "range", "pfrl.replay_buffers.PrioritizedReplayBuffer.sample", "pfrl.replay_buffers.PrioritizedReplayBuffer.update_errors", "numpy.testing.assert_allclose", "copy.deepcopy", "dict", "copy.deepcopy.append", "pfrl.replay_buffers.PrioritizedReplayBuffer.append", "pfrl.replay_buffers.PrioritizedReplayBuffer.sample", "pfrl.replay_buffers.PrioritizedReplayBuffer.update_errors", "pfrl.replay_buffers.PrioritizedReplayBuffer.sample", "pfrl.replay_buffers.PrioritizedReplayBuffer.update_errors", "pfrl.replay_buffers.PrioritizedReplayBuffer.sample", "numpy.testing.assert_allclose", "pfrl.replay_buffers.PrioritizedReplayBuffer.update_errors", "pfrl.replay_buffers.PrioritizedReplayBuffer.sample", "numpy.testing.assert_allclose", "len", "dict", "collections.deque.append", "pfrl.replay_buffers.PrioritizedReplayBuffer.append", "len", "len", "list", "len", "len", "numpy.allclose", "list", "list", "list", "list"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized.PrioritizedReplayBuffer.update_errors", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized.PrioritizedReplayBuffer.update_errors", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized.PrioritizedReplayBuffer.update_errors", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized.PrioritizedReplayBuffer.update_errors", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "test_append_and_sample", "(", "self", ")", ":", "\n", "        ", "capacity", "=", "self", ".", "capacity", "\n", "num_steps", "=", "self", ".", "num_steps", "\n", "rbuf", "=", "replay_buffers", ".", "PrioritizedReplayBuffer", "(", "\n", "capacity", ",", "\n", "normalize_by_max", "=", "self", ".", "normalize_by_max", ",", "\n", "error_max", "=", "5", ",", "\n", "num_steps", "=", "num_steps", ",", "\n", ")", "\n", "\n", "assert", "len", "(", "rbuf", ")", "==", "0", "\n", "\n", "# Add one and sample one", "\n", "correct_item", "=", "collections", ".", "deque", "(", "[", "]", ",", "maxlen", "=", "num_steps", ")", "\n", "for", "_", "in", "range", "(", "num_steps", ")", ":", "\n", "            ", "trans1", "=", "dict", "(", "\n", "state", "=", "0", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", ")", "\n", "correct_item", ".", "append", "(", "trans1", ")", "\n", "rbuf", ".", "append", "(", "**", "trans1", ")", "\n", "", "assert", "len", "(", "rbuf", ")", "==", "1", "\n", "s1", "=", "rbuf", ".", "sample", "(", "1", ")", "\n", "rbuf", ".", "update_errors", "(", "[", "3.14", "]", ")", "\n", "assert", "len", "(", "s1", ")", "==", "1", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "s1", "[", "0", "]", "[", "0", "]", "[", "\"weight\"", "]", ",", "1.0", ")", "\n", "del", "s1", "[", "0", "]", "[", "0", "]", "[", "\"weight\"", "]", "\n", "assert", "s1", "[", "0", "]", "==", "list", "(", "correct_item", ")", "\n", "\n", "# Add two and sample two, which must be unique", "\n", "correct_item2", "=", "copy", ".", "deepcopy", "(", "correct_item", ")", "\n", "trans2", "=", "dict", "(", "\n", "state", "=", "1", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "True", ",", "\n", ")", "\n", "correct_item2", ".", "append", "(", "trans2", ")", "\n", "rbuf", ".", "append", "(", "**", "trans2", ")", "\n", "assert", "len", "(", "rbuf", ")", "==", "2", "\n", "s2", "=", "rbuf", ".", "sample", "(", "2", ")", "\n", "rbuf", ".", "update_errors", "(", "[", "3.14", ",", "2.71", "]", ")", "\n", "assert", "len", "(", "s2", ")", "==", "2", "\n", "del", "s2", "[", "0", "]", "[", "0", "]", "[", "\"weight\"", "]", "\n", "del", "s2", "[", "1", "]", "[", "0", "]", "[", "\"weight\"", "]", "\n", "if", "s2", "[", "0", "]", "[", "num_steps", "-", "1", "]", "[", "\"state\"", "]", "==", "1", ":", "\n", "            ", "assert", "s2", "[", "0", "]", "==", "list", "(", "correct_item2", ")", "\n", "assert", "s2", "[", "1", "]", "==", "list", "(", "correct_item", ")", "\n", "", "else", ":", "\n", "            ", "assert", "s2", "[", "0", "]", "==", "list", "(", "correct_item", ")", "\n", "assert", "s2", "[", "1", "]", "==", "list", "(", "correct_item2", ")", "\n", "\n", "# Weights should be different for different TD-errors", "\n", "", "s3", "=", "rbuf", ".", "sample", "(", "2", ")", "\n", "assert", "not", "np", ".", "allclose", "(", "s3", "[", "0", "]", "[", "0", "]", "[", "\"weight\"", "]", ",", "s3", "[", "1", "]", "[", "0", "]", "[", "\"weight\"", "]", ")", "\n", "\n", "# Weights should be equal for different but clipped TD-errors", "\n", "rbuf", ".", "update_errors", "(", "[", "5", ",", "10", "]", ")", "\n", "s3", "=", "rbuf", ".", "sample", "(", "2", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "s3", "[", "0", "]", "[", "0", "]", "[", "\"weight\"", "]", ",", "s3", "[", "1", "]", "[", "0", "]", "[", "\"weight\"", "]", ")", "\n", "\n", "# Weights should be equal for the same TD-errors", "\n", "rbuf", ".", "update_errors", "(", "[", "3.14", ",", "3.14", "]", ")", "\n", "s4", "=", "rbuf", ".", "sample", "(", "2", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "s4", "[", "0", "]", "[", "0", "]", "[", "\"weight\"", "]", ",", "s4", "[", "1", "]", "[", "0", "]", "[", "\"weight\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestPrioritizedReplayBuffer.test_normalize_by_max": [[401, 451], ["pfrl.replay_buffers.PrioritizedReplayBuffer", "range", "pfrl.replay_buffers.PrioritizedReplayBuffer.sample", "test_replay_buffer.TestPrioritizedReplayBuffer.test_normalize_by_max.set_errors_based_on_state"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "def", "test_normalize_by_max", "(", "self", ")", ":", "\n", "\n", "        ", "rbuf", "=", "replay_buffers", ".", "PrioritizedReplayBuffer", "(", "\n", "self", ".", "capacity", ",", "\n", "normalize_by_max", "=", "self", ".", "normalize_by_max", ",", "\n", "error_max", "=", "1000", ",", "\n", "num_steps", "=", "self", ".", "num_steps", ",", "\n", ")", "\n", "\n", "# Add 100 transitions", "\n", "for", "i", "in", "range", "(", "100", ")", ":", "\n", "            ", "trans", "=", "dict", "(", "\n", "state", "=", "i", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "i", "+", "1", ",", "\n", "next_action", "=", "1", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", ")", "\n", "rbuf", ".", "append", "(", "**", "trans", ")", "\n", "", "assert", "len", "(", "rbuf", ")", "==", "100", "\n", "\n", "def", "set_errors_based_on_state", "(", "rbuf", ",", "samples", ")", ":", "\n", "# Use the value of 'state' as an error, so that state 0 will have", "\n", "# the smallest error, thus the largest weight", "\n", "            ", "errors", "=", "[", "s", "[", "0", "]", "[", "\"state\"", "]", "for", "s", "in", "samples", "]", "\n", "rbuf", ".", "update_errors", "(", "errors", ")", "\n", "\n", "# Assign different errors to all the transitions first", "\n", "", "samples", "=", "rbuf", ".", "sample", "(", "100", ")", "\n", "set_errors_based_on_state", "(", "rbuf", ",", "samples", ")", "\n", "\n", "# Repeatedly check how weights are normalized", "\n", "for", "i", "in", "range", "(", "100", ")", ":", "\n", "            ", "samples", "=", "rbuf", ".", "sample", "(", "i", "+", "1", ")", "\n", "# All the weights must be unique", "\n", "assert", "len", "(", "set", "(", "s", "[", "0", "]", "[", "\"weight\"", "]", "for", "s", "in", "samples", ")", ")", "==", "len", "(", "samples", ")", "\n", "# Now check the maximum weight in a minibatch", "\n", "max_w", "=", "max", "(", "[", "s", "[", "0", "]", "[", "\"weight\"", "]", "for", "s", "in", "samples", "]", ")", "\n", "if", "self", ".", "normalize_by_max", "==", "\"batch\"", ":", "\n", "# Maximum weight in a minibatch must be 1", "\n", "                ", "np", ".", "testing", ".", "assert_allclose", "(", "max_w", ",", "1", ")", "\n", "", "elif", "self", ".", "normalize_by_max", "==", "\"memory\"", ":", "\n", "# Maximum weight in a minibatch must be less than 1 unless", "\n", "# the minibatch contains the transition of least error.", "\n", "                ", "if", "any", "(", "s", "[", "0", "]", "[", "\"state\"", "]", "==", "0", "for", "s", "in", "samples", ")", ":", "\n", "                    ", "np", ".", "testing", ".", "assert_allclose", "(", "max_w", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "max_w", "<", "1", "\n", "", "", "set_errors_based_on_state", "(", "rbuf", ",", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestPrioritizedReplayBuffer.test_capacity": [[452, 483], ["pfrl.replay_buffers.PrioritizedReplayBuffer", "range", "dict", "pfrl.replay_buffers.PrioritizedReplayBuffer.append", "dict", "pfrl.replay_buffers.PrioritizedReplayBuffer.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "", "def", "test_capacity", "(", "self", ")", ":", "\n", "        ", "capacity", "=", "self", ".", "capacity", "\n", "if", "capacity", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "rbuf", "=", "replay_buffers", ".", "PrioritizedReplayBuffer", "(", "capacity", ")", "\n", "# Fill the buffer", "\n", "for", "_", "in", "range", "(", "capacity", ")", ":", "\n", "            ", "trans1", "=", "dict", "(", "\n", "state", "=", "0", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "True", ",", "\n", ")", "\n", "rbuf", ".", "append", "(", "**", "trans1", ")", "\n", "", "assert", "len", "(", "rbuf", ")", "==", "capacity", "\n", "\n", "# Add a new transition", "\n", "trans2", "=", "dict", "(", "\n", "state", "=", "1", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "True", ",", "\n", ")", "\n", "rbuf", ".", "append", "(", "**", "trans2", ")", "\n", "# The size should not change", "\n", "assert", "len", "(", "rbuf", ")", "==", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestPrioritizedReplayBuffer.test_save_and_load": [[484, 546], ["tempfile.mkdtemp", "pfrl.replay_buffers.PrioritizedReplayBuffer", "collections.deque", "range", "copy.deepcopy", "dict", "copy.deepcopy.append", "pfrl.replay_buffers.PrioritizedReplayBuffer.append", "os.path.join", "pfrl.replay_buffers.PrioritizedReplayBuffer.save", "pfrl.replay_buffers.PrioritizedReplayBuffer", "pfrl.replay_buffers.PrioritizedReplayBuffer.load", "pfrl.replay_buffers.PrioritizedReplayBuffer.sample", "dict", "collections.deque.append", "pfrl.replay_buffers.PrioritizedReplayBuffer.append", "len", "len", "len", "list", "list", "list", "list"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "test_save_and_load", "(", "self", ")", ":", "\n", "        ", "capacity", "=", "self", ".", "capacity", "\n", "num_steps", "=", "self", ".", "num_steps", "\n", "\n", "tempdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "rbuf", "=", "replay_buffers", ".", "PrioritizedReplayBuffer", "(", "capacity", ",", "num_steps", "=", "num_steps", ")", "\n", "\n", "# Add two transitions", "\n", "correct_item", "=", "collections", ".", "deque", "(", "[", "]", ",", "maxlen", "=", "num_steps", ")", "\n", "for", "_", "in", "range", "(", "num_steps", ")", ":", "\n", "            ", "trans1", "=", "dict", "(", "\n", "state", "=", "0", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", ")", "\n", "correct_item", ".", "append", "(", "trans1", ")", "\n", "rbuf", ".", "append", "(", "**", "trans1", ")", "\n", "", "correct_item2", "=", "copy", ".", "deepcopy", "(", "correct_item", ")", "\n", "trans2", "=", "dict", "(", "\n", "state", "=", "1", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "True", ",", "\n", ")", "\n", "correct_item2", ".", "append", "(", "trans2", ")", "\n", "rbuf", ".", "append", "(", "**", "trans2", ")", "\n", "\n", "# Now it has two transitions", "\n", "assert", "len", "(", "rbuf", ")", "==", "2", "\n", "\n", "# Save", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "tempdir", ",", "\"rbuf.pkl\"", ")", "\n", "rbuf", ".", "save", "(", "filename", ")", "\n", "\n", "# Initialize rbuf", "\n", "rbuf", "=", "replay_buffers", ".", "PrioritizedReplayBuffer", "(", "capacity", ",", "num_steps", "=", "num_steps", ")", "\n", "\n", "# Of course it has no transition yet", "\n", "assert", "len", "(", "rbuf", ")", "==", "0", "\n", "\n", "# Load the previously saved buffer", "\n", "rbuf", ".", "load", "(", "filename", ")", "\n", "\n", "# Now it has two transitions again", "\n", "assert", "len", "(", "rbuf", ")", "==", "2", "\n", "\n", "# And sampled transitions are exactly what I added!", "\n", "s2", "=", "rbuf", ".", "sample", "(", "2", ")", "\n", "del", "s2", "[", "0", "]", "[", "0", "]", "[", "\"weight\"", "]", "\n", "del", "s2", "[", "1", "]", "[", "0", "]", "[", "\"weight\"", "]", "\n", "if", "s2", "[", "0", "]", "[", "num_steps", "-", "1", "]", "[", "\"state\"", "]", "==", "0", ":", "\n", "            ", "assert", "s2", "[", "0", "]", "==", "list", "(", "correct_item", ")", "\n", "assert", "s2", "[", "1", "]", "==", "list", "(", "correct_item2", ")", "\n", "", "else", ":", "\n", "            ", "assert", "s2", "[", "0", "]", "==", "list", "(", "correct_item2", ")", "\n", "assert", "s2", "[", "1", "]", "==", "list", "(", "correct_item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestPrioritizedEpisodicReplayBuffer.setUp": [[560, 575], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "\n", "self", ",", "\n", "normalize_by_max", ",", "\n", "wait_priority_after_sampling", ",", "\n", "default_priority_func", ",", "\n", "uniform_ratio", ",", "\n", "return_sample_weights", ",", "\n", ")", ":", "\n", "        ", "self", ".", "capacity", "=", "100", "\n", "self", ".", "normalize_by_max", "=", "normalize_by_max", "\n", "self", ".", "wait_priority_after_sampling", "=", "wait_priority_after_sampling", "\n", "self", ".", "default_priority_func", "=", "default_priority_func", "\n", "self", ".", "uniform_ratio", "=", "uniform_ratio", "\n", "self", ".", "return_sample_weights", "=", "return_sample_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestPrioritizedEpisodicReplayBuffer.test_append_and_sample": [[576, 635], ["pfrl.replay_buffers.PrioritizedEpisodicReplayBuffer", "len", "pfrl.replay_buffers.PrioritizedEpisodicReplayBuffer.sample", "pfrl.replay_buffers.PrioritizedEpisodicReplayBuffer.sample_episodes", "pfrl.replay_buffers.PrioritizedEpisodicReplayBuffer.sample_episodes", "dict", "pfrl.replay_buffers.PrioritizedEpisodicReplayBuffer.append", "len", "pfrl.replay_buffers.PrioritizedEpisodicReplayBuffer.update_errors", "pfrl.replay_buffers.PrioritizedEpisodicReplayBuffer.update_errors", "zip", "range", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized_episodic.PrioritizedEpisodicReplayBuffer.sample_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized_episodic.PrioritizedEpisodicReplayBuffer.sample_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized.PrioritizedReplayBuffer.update_errors", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized.PrioritizedReplayBuffer.update_errors"], ["", "def", "test_append_and_sample", "(", "self", ")", ":", "\n", "        ", "rbuf", "=", "replay_buffers", ".", "PrioritizedEpisodicReplayBuffer", "(", "\n", "capacity", "=", "self", ".", "capacity", ",", "\n", "normalize_by_max", "=", "self", ".", "normalize_by_max", ",", "\n", "default_priority_func", "=", "self", ".", "default_priority_func", ",", "\n", "uniform_ratio", "=", "self", ".", "uniform_ratio", ",", "\n", "wait_priority_after_sampling", "=", "self", ".", "wait_priority_after_sampling", ",", "\n", "return_sample_weights", "=", "self", ".", "return_sample_weights", ",", "\n", ")", "\n", "\n", "for", "n", "in", "[", "10", ",", "15", ",", "5", "]", "*", "3", ":", "\n", "            ", "transs", "=", "[", "\n", "dict", "(", "\n", "state", "=", "i", ",", "\n", "action", "=", "100", "+", "i", ",", "\n", "reward", "=", "200", "+", "i", ",", "\n", "next_state", "=", "i", "+", "1", ",", "\n", "next_action", "=", "101", "+", "i", ",", "\n", "is_state_terminal", "=", "(", "i", "==", "n", "-", "1", ")", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "n", ")", "\n", "]", "\n", "for", "trans", "in", "transs", ":", "\n", "                ", "rbuf", ".", "append", "(", "**", "trans", ")", "\n", "\n", "", "", "assert", "len", "(", "rbuf", ")", "==", "90", "\n", "assert", "rbuf", ".", "n_episodes", "==", "9", "\n", "\n", "for", "k", "in", "[", "10", ",", "30", ",", "90", "]", ":", "\n", "            ", "s", "=", "rbuf", ".", "sample", "(", "k", ")", "\n", "assert", "len", "(", "s", ")", "==", "k", "\n", "\n", "", "for", "k", "in", "[", "1", ",", "3", ",", "9", "]", ":", "\n", "            ", "ret", "=", "rbuf", ".", "sample_episodes", "(", "k", ")", "\n", "if", "self", ".", "return_sample_weights", ":", "\n", "                ", "s", ",", "wt", "=", "ret", "\n", "assert", "len", "(", "s", ")", "==", "k", "\n", "assert", "len", "(", "wt", ")", "==", "k", "\n", "", "else", ":", "\n", "                ", "s", "=", "ret", "\n", "assert", "len", "(", "s", ")", "==", "k", "\n", "", "if", "self", ".", "wait_priority_after_sampling", ":", "\n", "                ", "rbuf", ".", "update_errors", "(", "[", "1.0", "]", "*", "k", ")", "\n", "\n", "", "ret", "=", "rbuf", ".", "sample_episodes", "(", "k", ",", "max_len", "=", "10", ")", "\n", "if", "self", ".", "return_sample_weights", ":", "\n", "                ", "s", ",", "wt", "=", "ret", "\n", "assert", "len", "(", "s", ")", "==", "k", "\n", "assert", "len", "(", "wt", ")", "==", "k", "\n", "", "else", ":", "\n", "                ", "s", "=", "ret", "\n", "", "if", "self", ".", "wait_priority_after_sampling", ":", "\n", "                ", "rbuf", ".", "update_errors", "(", "[", "1.0", "]", "*", "k", ")", "\n", "\n", "", "for", "ep", "in", "s", ":", "\n", "                ", "assert", "len", "(", "ep", ")", "<=", "10", "\n", "for", "t0", ",", "t1", "in", "zip", "(", "ep", ",", "ep", "[", "1", ":", "]", ")", ":", "\n", "                    ", "assert", "t0", "[", "\"next_state\"", "]", "==", "t1", "[", "\"state\"", "]", "\n", "assert", "t0", "[", "\"next_action\"", "]", "==", "t1", "[", "\"action\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestReplayBufferWithEnvID.setUp": [[641, 644], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "replay_buffer_type", ")", ":", "\n", "        ", "self", ".", "replay_buffer_type", "=", "replay_buffer_type", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestReplayBufferWithEnvID.test": [[645, 704], ["range", "range", "range", "pfrl.replay_buffers.PrioritizedReplayBuffer.stop_current_episode", "pfrl.replay_buffers.PrioritizedReplayBuffer.stop_current_episode", "pfrl.replay_buffers.ReplayBuffer", "dict", "pfrl.replay_buffers.PrioritizedReplayBuffer.append", "dict", "pfrl.replay_buffers.PrioritizedReplayBuffer.append", "dict", "pfrl.replay_buffers.PrioritizedReplayBuffer.append", "len", "len", "len", "pfrl.replay_buffers.PrioritizedReplayBuffer"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.stop_current_episode", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.stop_current_episode", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "n", "=", "5", "\n", "if", "self", ".", "replay_buffer_type", "==", "\"ReplayBuffer\"", ":", "\n", "            ", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "capacity", "=", "None", ",", "num_steps", "=", "n", ")", "\n", "", "elif", "self", ".", "replay_buffer_type", "==", "\"PrioritizedReplayBuffer\"", ":", "\n", "            ", "rbuf", "=", "replay_buffers", ".", "PrioritizedReplayBuffer", "(", "capacity", "=", "None", ",", "num_steps", "=", "n", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "\n", "# 2 transitions for env_id=0", "\n", "", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "            ", "trans1", "=", "dict", "(", "\n", "state", "=", "0", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", ")", "\n", "rbuf", ".", "append", "(", "env_id", "=", "0", ",", "**", "trans1", ")", "\n", "# 4 transitions for env_id=1 with a terminal state", "\n", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "trans1", "=", "dict", "(", "\n", "state", "=", "0", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "(", "i", "==", "3", ")", ",", "\n", ")", "\n", "rbuf", ".", "append", "(", "env_id", "=", "1", ",", "**", "trans1", ")", "\n", "# 9 transitions for env_id=2", "\n", "", "for", "_", "in", "range", "(", "9", ")", ":", "\n", "            ", "trans1", "=", "dict", "(", "\n", "state", "=", "0", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", ")", "\n", "rbuf", ".", "append", "(", "env_id", "=", "2", ",", "**", "trans1", ")", "\n", "\n", "# It should have:", "\n", "#   - 4 transitions from env_id=1", "\n", "#   - 5 transitions from env_id=2", "\n", "", "assert", "len", "(", "rbuf", ")", "==", "9", "\n", "\n", "# env_id=0 episode ends", "\n", "rbuf", ".", "stop_current_episode", "(", "env_id", "=", "0", ")", "\n", "\n", "# Now it should have 9 + 2 = 11 transitions", "\n", "assert", "len", "(", "rbuf", ")", "==", "11", "\n", "\n", "# env_id=2 episode ends", "\n", "rbuf", ".", "stop_current_episode", "(", "env_id", "=", "2", ")", "\n", "\n", "# Finally it should have 9 + 2 + 4 = 15 transitions", "\n", "assert", "len", "(", "rbuf", ")", "==", "15", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestEpisodicReplayBufferWithEnvID.setUp": [[710, 713], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "replay_buffer_type", ")", ":", "\n", "        ", "self", ".", "replay_buffer_type", "=", "replay_buffer_type", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestEpisodicReplayBufferWithEnvID.test": [[714, 770], ["range", "range", "range", "pfrl.replay_buffers.PrioritizedEpisodicReplayBuffer.stop_current_episode", "pfrl.replay_buffers.PrioritizedEpisodicReplayBuffer.stop_current_episode", "pfrl.replay_buffers.EpisodicReplayBuffer", "dict", "pfrl.replay_buffers.PrioritizedEpisodicReplayBuffer.append", "dict", "pfrl.replay_buffers.PrioritizedEpisodicReplayBuffer.append", "dict", "pfrl.replay_buffers.PrioritizedEpisodicReplayBuffer.append", "len", "len", "len", "pfrl.replay_buffers.PrioritizedEpisodicReplayBuffer"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.stop_current_episode", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.stop_current_episode", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "replay_buffer_type", "==", "\"EpisodicReplayBuffer\"", ":", "\n", "            ", "rbuf", "=", "replay_buffers", ".", "EpisodicReplayBuffer", "(", "capacity", "=", "None", ")", "\n", "", "elif", "self", ".", "replay_buffer_type", "==", "\"PrioritizedEpisodicReplayBuffer\"", ":", "\n", "            ", "rbuf", "=", "replay_buffers", ".", "PrioritizedEpisodicReplayBuffer", "(", "capacity", "=", "None", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "\n", "# 2 transitions for env_id=0", "\n", "", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "            ", "trans1", "=", "dict", "(", "\n", "state", "=", "0", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", ")", "\n", "rbuf", ".", "append", "(", "env_id", "=", "0", ",", "**", "trans1", ")", "\n", "# 4 transitions for env_id=1 with a terminal state", "\n", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "trans1", "=", "dict", "(", "\n", "state", "=", "0", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "(", "i", "==", "3", ")", ",", "\n", ")", "\n", "rbuf", ".", "append", "(", "env_id", "=", "1", ",", "**", "trans1", ")", "\n", "# 9 transitions for env_id=2", "\n", "", "for", "_", "in", "range", "(", "9", ")", ":", "\n", "            ", "trans1", "=", "dict", "(", "\n", "state", "=", "0", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", ")", "\n", "rbuf", ".", "append", "(", "env_id", "=", "2", ",", "**", "trans1", ")", "\n", "\n", "# It should have 4 transitions from env_id=1", "\n", "", "assert", "len", "(", "rbuf", ")", "==", "4", "\n", "\n", "# env_id=0 episode ends", "\n", "rbuf", ".", "stop_current_episode", "(", "env_id", "=", "0", ")", "\n", "\n", "# Now it should have 4 + 2 = 6 transitions", "\n", "assert", "len", "(", "rbuf", ")", "==", "6", "\n", "\n", "# env_id=2 episode ends", "\n", "rbuf", ".", "stop_current_episode", "(", "env_id", "=", "2", ")", "\n", "\n", "# Finally it should have 4 + 2 + 9 = 15 transitions", "\n", "assert", "len", "(", "rbuf", ")", "==", "15", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestReplayBufferFail.setUp": [[773, 784], ["pfrl.replay_buffers.PrioritizedReplayBuffer", "dict", "test_replay_buffer.TestReplayBufferFail.rbuf.append"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "rbuf", "=", "replay_buffers", ".", "PrioritizedReplayBuffer", "(", "100", ")", "\n", "self", ".", "trans1", "=", "dict", "(", "\n", "state", "=", "0", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "2", ",", "\n", "next_state", "=", "3", ",", "\n", "next_action", "=", "4", ",", "\n", "is_state_terminal", "=", "True", ",", "\n", ")", "\n", "self", ".", "rbuf", ".", "append", "(", "**", "self", ".", "trans1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestReplayBufferFail._sample1": [[785, 787], ["test_replay_buffer.TestReplayBufferFail.rbuf.sample"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "def", "_sample1", "(", "self", ")", ":", "\n", "        ", "self", ".", "rbuf", ".", "sample", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestReplayBufferFail._set1": [[788, 790], ["test_replay_buffer.TestReplayBufferFail.rbuf.update_errors"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized.PrioritizedReplayBuffer.update_errors"], ["", "def", "_set1", "(", "self", ")", ":", "\n", "        ", "self", ".", "rbuf", ".", "update_errors", "(", "[", "1.0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestReplayBufferFail.test_fail_noupdate": [[791, 794], ["test_replay_buffer.TestReplayBufferFail._sample1", "test_replay_buffer.TestReplayBufferFail.assertRaises"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestReplayBufferFail._sample1"], ["", "def", "test_fail_noupdate", "(", "self", ")", ":", "\n", "        ", "self", ".", "_sample1", "(", ")", "\n", "self", ".", "assertRaises", "(", "AssertionError", ",", "self", ".", "_sample1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestReplayBufferFail.test_fail_update_first": [[795, 797], ["test_replay_buffer.TestReplayBufferFail.assertRaises"], "methods", ["None"], ["", "def", "test_fail_update_first", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertRaises", "(", "AssertionError", ",", "self", ".", "_set1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestReplayBufferFail.test_fail_doubleupdate": [[798, 802], ["test_replay_buffer.TestReplayBufferFail._sample1", "test_replay_buffer.TestReplayBufferFail._set1", "test_replay_buffer.TestReplayBufferFail.assertRaises"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestReplayBufferFail._sample1", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestReplayBufferFail._set1"], ["", "def", "test_fail_doubleupdate", "(", "self", ")", ":", "\n", "        ", "self", ".", "_sample1", "(", ")", "\n", "self", ".", "_set1", "(", ")", "\n", "self", ".", "assertRaises", "(", "AssertionError", ",", "self", ".", "_set1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.TestBatchExperiences.test_batch_experiences": [[805, 866], ["experiences.append", "experiences.append", "four_step_transition.append", "experiences.append", "pfrl.replay_buffer.batch_experiences", "test_replay_buffer.TestBatchExperiences.assertEqual", "test_replay_buffer.TestBatchExperiences.assertSequenceEqual", "test_replay_buffer.TestBatchExperiences.assertSequenceEqual", "test_replay_buffer.TestBatchExperiences.assertSequenceEqual", "dict", "torch.device", "list", "list", "list", "list", "list", "list", "dict", "dict", "dict", "numpy.asarray", "numpy.asarray", "numpy.asarray", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.batch_experiences", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["    ", "def", "test_batch_experiences", "(", "self", ")", ":", "\n", "        ", "experiences", "=", "[", "]", "\n", "experiences", ".", "append", "(", "\n", "[", "\n", "dict", "(", "\n", "state", "=", "1", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "1", ",", "\n", "next_state", "=", "i", ",", "\n", "next_action", "=", "1", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "3", ")", "\n", "]", "\n", ")", "\n", "experiences", ".", "append", "(", "\n", "[", "\n", "dict", "(", "\n", "state", "=", "1", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "1", ",", "\n", "next_state", "=", "1", ",", "\n", "next_action", "=", "1", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", ")", "\n", "]", "\n", ")", "\n", "four_step_transition", "=", "[", "\n", "dict", "(", "\n", "state", "=", "1", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "1", ",", "\n", "next_state", "=", "1", ",", "\n", "next_action", "=", "1", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", ")", "\n", "]", "*", "3", "\n", "four_step_transition", ".", "append", "(", "\n", "dict", "(", "\n", "state", "=", "1", ",", "\n", "action", "=", "1", ",", "\n", "reward", "=", "1", ",", "\n", "next_state", "=", "5", ",", "\n", "next_action", "=", "1", ",", "\n", "is_state_terminal", "=", "True", ",", "\n", ")", "\n", ")", "\n", "experiences", ".", "append", "(", "four_step_transition", ")", "\n", "batch", "=", "replay_buffer", ".", "batch_experiences", "(", "\n", "experiences", ",", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "lambda", "x", ":", "x", ",", "0.99", "\n", ")", "\n", "self", ".", "assertEqual", "(", "batch", "[", "\"state\"", "]", "[", "0", "]", ",", "1", ")", "\n", "self", ".", "assertSequenceEqual", "(", "\n", "list", "(", "batch", "[", "\"is_state_terminal\"", "]", ")", ",", "\n", "list", "(", "np", ".", "asarray", "(", "[", "0.0", ",", "0.0", ",", "1.0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ",", "\n", ")", "\n", "self", ".", "assertSequenceEqual", "(", "\n", "list", "(", "batch", "[", "\"discount\"", "]", ")", ",", "\n", "list", "(", "np", ".", "asarray", "(", "[", "0.99", "**", "3", ",", "0.99", "**", "1", ",", "0.99", "**", "4", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ",", "\n", ")", "\n", "self", ".", "assertSequenceEqual", "(", "list", "(", "batch", "[", "\"next_state\"", "]", ")", ",", "list", "(", "np", ".", "asarray", "(", "[", "2", ",", "1", ",", "5", "]", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers_test.test_replay_buffer.exp_return_of_episode": [[548, 550], ["sum", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "", "", "def", "exp_return_of_episode", "(", "episode", ")", ":", "\n", "    ", "return", "sum", "(", "np", ".", "exp", "(", "x", "[", "\"reward\"", "]", ")", "for", "x", "in", "episode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.functions_tests.test_lower_triangular_matrix.TestLowerTriangularMatrix.setUp": [[10, 23], ["pytest.fixture", "numpy.random.uniform().astype", "numpy.random.uniform().astype", "numpy.random.uniform().astype", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "n", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "\n", "self", ".", "batch_size", "=", "5", "\n", "self", ".", "diag", "=", "np", ".", "random", ".", "uniform", "(", "0.1", ",", "1", ",", "(", "self", ".", "batch_size", ",", "self", ".", "n", ")", ")", ".", "astype", "(", "\n", "np", ".", "float32", "\n", ")", "\n", "non_diag_size", "=", "self", ".", "n", "*", "(", "self", ".", "n", "-", "1", ")", "//", "2", "\n", "self", ".", "non_diag", "=", "np", ".", "random", ".", "uniform", "(", "\n", "-", "1", ",", "1", ",", "(", "self", ".", "batch_size", ",", "non_diag_size", ")", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "gy", "=", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "(", "self", ".", "batch_size", ",", "self", ".", "n", ",", "self", ".", "n", ")", ")", ".", "astype", "(", "\n", "np", ".", "float32", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.functions_tests.test_lower_triangular_matrix.TestLowerTriangularMatrix.check_forward": [[25, 44], ["torch.tensor", "torch.tensor", "pfrl.functions.lower_triangular_matrix.lower_triangular_matrix", "numpy.zeros", "numpy.tril_indices", "numpy.diag_indices", "numpy.testing.assert_allclose", "diag.to.to.to", "non_diag.to.to.to", "pfrl.functions.lower_triangular_matrix.lower_triangular_matrix.cpu", "pfrl.functions.lower_triangular_matrix.lower_triangular_matrix.detach().numpy", "torch.device", "torch.device", "pfrl.functions.lower_triangular_matrix.lower_triangular_matrix.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.functions.lower_triangular_matrix.lower_triangular_matrix", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["", "def", "check_forward", "(", "self", ",", "diag_data", ",", "non_diag_data", ",", "gpu", ")", ":", "\n", "        ", "diag", "=", "torch", ".", "tensor", "(", "diag_data", ",", "requires_grad", "=", "True", ")", "\n", "non_diag", "=", "torch", ".", "tensor", "(", "non_diag_data", ",", "requires_grad", "=", "True", ")", "\n", "if", "gpu", ">=", "0", ":", "\n", "            ", "diag", "=", "diag", ".", "to", "(", "torch", ".", "device", "(", "\"cuda\"", ",", "gpu", ")", ")", "\n", "non_diag", "=", "non_diag", ".", "to", "(", "torch", ".", "device", "(", "\"cuda\"", ",", "gpu", ")", ")", "\n", "\n", "", "y", "=", "lower_triangular_matrix", "(", "diag", ",", "non_diag", ")", "\n", "\n", "correct_y", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "n", ",", "self", ".", "n", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "tril_rows", ",", "tril_cols", "=", "np", ".", "tril_indices", "(", "self", ".", "n", ",", "-", "1", ")", "\n", "correct_y", "[", ":", ",", "tril_rows", ",", "tril_cols", "]", "=", "non_diag_data", "\n", "\n", "diag_rows", ",", "diag_cols", "=", "np", ".", "diag_indices", "(", "self", ".", "n", ")", "\n", "correct_y", "[", ":", ",", "diag_rows", ",", "diag_cols", "]", "=", "diag_data", "\n", "\n", "y", "=", "y", ".", "cpu", "(", ")", "if", "gpu", ">=", "0", "else", "y", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "correct_y", ",", "y", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.functions_tests.test_lower_triangular_matrix.TestLowerTriangularMatrix.test_forward_cpu": [[45, 47], ["test_lower_triangular_matrix.TestLowerTriangularMatrix.check_forward"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.functions_tests.test_lower_triangular_matrix.TestLowerTriangularMatrix.check_forward"], ["", "def", "test_forward_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "check_forward", "(", "self", ".", "diag", ",", "self", ".", "non_diag", ",", "gpu", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.functions_tests.test_lower_triangular_matrix.TestLowerTriangularMatrix.test_forward_gpu": [[48, 51], ["test_lower_triangular_matrix.TestLowerTriangularMatrix.check_forward"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.functions_tests.test_lower_triangular_matrix.TestLowerTriangularMatrix.check_forward"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_forward_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "check_forward", "(", "self", ".", "diag", ",", "self", ".", "non_diag", ",", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.functions_tests.test_lower_triangular_matrix.TestLowerTriangularMatrix.check_backward": [[52, 60], ["torch.tensor", "torch.tensor", "torch.autograd.gradcheck", "diag.to.to.to", "non_diag.to.to.to", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["", "def", "check_backward", "(", "self", ",", "diag_data", ",", "non_diag_data", ",", "gpu", ")", ":", "\n", "        ", "diag", "=", "torch", ".", "tensor", "(", "diag_data", ",", "requires_grad", "=", "True", ")", "\n", "non_diag", "=", "torch", ".", "tensor", "(", "non_diag_data", ",", "requires_grad", "=", "True", ")", "\n", "if", "gpu", ">=", "0", ":", "\n", "            ", "diag", "=", "diag", ".", "to", "(", "torch", ".", "device", "(", "\"cuda\"", ",", "gpu", ")", ")", "\n", "non_diag", "=", "non_diag", ".", "to", "(", "torch", ".", "device", "(", "\"cuda\"", ",", "gpu", ")", ")", "\n", "", "torch", ".", "autograd", ".", "gradcheck", "(", "\n", "lower_triangular_matrix", ",", "(", "diag", ",", "non_diag", ")", ",", "eps", "=", "1e-02", ",", "rtol", "=", "1e-2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.functions_tests.test_lower_triangular_matrix.TestLowerTriangularMatrix.test_backward_cpu": [[62, 64], ["test_lower_triangular_matrix.TestLowerTriangularMatrix.check_backward"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.functions_tests.test_lower_triangular_matrix.TestLowerTriangularMatrix.check_backward"], ["", "def", "test_backward_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "check_backward", "(", "self", ".", "diag", ",", "self", ".", "non_diag", ",", "gpu", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.functions_tests.test_lower_triangular_matrix.TestLowerTriangularMatrix.test_backward_gpu": [[65, 68], ["test_lower_triangular_matrix.TestLowerTriangularMatrix.check_backward"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.functions_tests.test_lower_triangular_matrix.TestLowerTriangularMatrix.check_backward"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_backward_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "check_backward", "(", "self", ".", "diag", ",", "self", ".", "non_diag", ",", "gpu", "=", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.setUp": [[11, 21], ["pytest.fixture", "pfrl.collections.random_access_queue.RandomAccessQueue", "collections.deque", "pfrl.collections.random_access_queue.RandomAccessQueue", "collections.deque"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "maxlen", ",", "init_seq", ")", ":", "\n", "        ", "self", ".", "maxlen", "=", "maxlen", "\n", "self", ".", "init_seq", "=", "init_seq", "\n", "if", "self", ".", "init_seq", ":", "\n", "            ", "self", ".", "y_queue", "=", "RandomAccessQueue", "(", "self", ".", "init_seq", ",", "maxlen", "=", "self", ".", "maxlen", ")", "\n", "self", ".", "t_queue", "=", "collections", ".", "deque", "(", "self", ".", "init_seq", ",", "maxlen", "=", "self", ".", "maxlen", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "y_queue", "=", "RandomAccessQueue", "(", "maxlen", "=", "self", ".", "maxlen", ")", "\n", "self", ".", "t_queue", "=", "collections", ".", "deque", "(", "maxlen", "=", "self", ".", "maxlen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.test1": [[22, 56], ["test_random_access_queue.TestRandomAccessQueue.check_all", "test_random_access_queue.TestRandomAccessQueue.check_popleft", "test_random_access_queue.TestRandomAccessQueue.do_append", "test_random_access_queue.TestRandomAccessQueue.check_all", "test_random_access_queue.TestRandomAccessQueue.check_popleft", "test_random_access_queue.TestRandomAccessQueue.check_popleft", "test_random_access_queue.TestRandomAccessQueue.do_append", "test_random_access_queue.TestRandomAccessQueue.check_all", "len", "range", "range", "range", "range", "range", "test_random_access_queue.TestRandomAccessQueue.check_getitem", "test_random_access_queue.TestRandomAccessQueue.do_extend", "test_random_access_queue.TestRandomAccessQueue.check_all", "test_random_access_queue.TestRandomAccessQueue.check_popleft", "test_random_access_queue.TestRandomAccessQueue.do_extend", "test_random_access_queue.TestRandomAccessQueue.check_all", "test_random_access_queue.TestRandomAccessQueue.do_append", "test_random_access_queue.TestRandomAccessQueue.check_popleft", "test_random_access_queue.TestRandomAccessQueue.check_popleft", "test_random_access_queue.TestRandomAccessQueue.check_all", "test_random_access_queue.TestRandomAccessQueue.check_popleft", "range", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.check_all", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.check_popleft", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.do_append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.check_all", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.check_popleft", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.check_popleft", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.do_append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.check_all", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.check_getitem", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.do_extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.check_all", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.check_popleft", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.do_extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.check_all", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.do_append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.check_popleft", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.check_popleft", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.check_all", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.check_popleft"], ["", "", "def", "test1", "(", "self", ")", ":", "\n", "        ", "self", ".", "check_all", "(", ")", "\n", "\n", "self", ".", "check_popleft", "(", ")", "\n", "self", ".", "do_append", "(", "10", ")", "\n", "self", ".", "check_all", "(", ")", "\n", "\n", "self", ".", "check_popleft", "(", ")", "\n", "self", ".", "check_popleft", "(", ")", "\n", "self", ".", "do_append", "(", "11", ")", "\n", "self", ".", "check_all", "(", ")", "\n", "\n", "# test negative indices", "\n", "n", "=", "len", "(", "self", ".", "t_queue", ")", "\n", "for", "i", "in", "range", "(", "-", "n", ",", "0", ")", ":", "\n", "            ", "self", ".", "check_getitem", "(", "i", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "do_extend", "(", "range", "(", "k", ")", ")", "\n", "self", ".", "check_all", "(", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "check_popleft", "(", ")", "\n", "self", ".", "do_extend", "(", "range", "(", "k", ")", ")", "\n", "self", ".", "check_all", "(", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "10", ")", ":", "\n", "            ", "self", ".", "do_append", "(", "20", "+", "k", ")", "\n", "self", ".", "check_popleft", "(", ")", "\n", "self", ".", "check_popleft", "(", ")", "\n", "self", ".", "check_all", "(", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "            ", "self", ".", "check_popleft", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.check_all": [[57, 62], ["test_random_access_queue.TestRandomAccessQueue.check_len", "len", "range", "test_random_access_queue.TestRandomAccessQueue.check_getitem"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.check_len", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.check_getitem"], ["", "", "def", "check_all", "(", "self", ")", ":", "\n", "        ", "self", ".", "check_len", "(", ")", "\n", "n", "=", "len", "(", "self", ".", "t_queue", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "self", ".", "check_getitem", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.check_len": [[63, 65], ["len", "len"], "methods", ["None"], ["", "", "def", "check_len", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "y_queue", ")", "==", "len", "(", "self", ".", "t_queue", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.check_getitem": [[66, 68], ["None"], "methods", ["None"], ["", "def", "check_getitem", "(", "self", ",", "i", ")", ":", "\n", "        ", "assert", "self", ".", "y_queue", "[", "i", "]", "==", "self", ".", "t_queue", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.do_setitem": [[69, 72], ["None"], "methods", ["None"], ["", "def", "do_setitem", "(", "self", ",", "i", ",", "x", ")", ":", "\n", "        ", "self", ".", "y_queue", "[", "i", "]", "=", "x", "\n", "self", ".", "t_queue", "[", "i", "]", "=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.do_append": [[73, 76], ["test_random_access_queue.TestRandomAccessQueue.y_queue.append", "test_random_access_queue.TestRandomAccessQueue.t_queue.append"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "do_append", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "y_queue", ".", "append", "(", "x", ")", "\n", "self", ".", "t_queue", ".", "append", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.do_extend": [[77, 80], ["test_random_access_queue.TestRandomAccessQueue.y_queue.extend", "test_random_access_queue.TestRandomAccessQueue.t_queue.extend"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend"], ["", "def", "do_extend", "(", "self", ",", "xs", ")", ":", "\n", "        ", "self", ".", "y_queue", ".", "extend", "(", "xs", ")", "\n", "self", ".", "t_queue", ".", "extend", "(", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_random_access_queue.TestRandomAccessQueue.check_popleft": [[81, 89], ["test_random_access_queue.TestRandomAccessQueue.t_queue.popleft", "test_random_access_queue.TestRandomAccessQueue.y_queue.popleft", "pytest.raises", "test_random_access_queue.TestRandomAccessQueue.y_queue.popleft"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.popleft", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.popleft", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.popleft"], ["", "def", "check_popleft", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "t", "=", "self", ".", "t_queue", ".", "popleft", "(", ")", "\n", "", "except", "IndexError", ":", "\n", "            ", "with", "pytest", ".", "raises", "(", "IndexError", ")", ":", "\n", "                ", "self", ".", "y_queue", ".", "popleft", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "assert", "self", ".", "y_queue", ".", "popleft", "(", ")", "==", "t", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_prioritized.test_prioritized_buffer_convergence": [[9, 52], ["pytest.mark.parametrize", "pfrl.collections.prioritized.PrioritizedBuffer", "range", "list", "random.shuffle", "range", "prioritized.PrioritizedBuffer.append", "prioritized.PrioritizedBuffer.sample", "prioritized.PrioritizedBuffer.set_last_priority", "numpy.corrcoef", "test_prioritized.test_prioritized_buffer_convergence.priority"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.PrioritizedBuffer.set_last_priority"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"uniform_ratio\"", ",", "[", "0", ",", "0.7", ",", "1", "]", ")", "\n", "def", "test_prioritized_buffer_convergence", "(", "uniform_ratio", ")", ":", "\n", "    ", "expected_corr_range", "=", "{", "0", ":", "(", "0.9", ",", "1", ")", ",", "0.7", ":", "(", "0.5", ",", "0.85", ")", ",", "1", ":", "(", "-", "0.3", ",", "0.3", ")", "}", "[", "uniform_ratio", "]", "\n", "size", "=", "100", "\n", "\n", "buf", "=", "prioritized", ".", "PrioritizedBuffer", "(", "capacity", "=", "size", ")", "\n", "for", "x", "in", "range", "(", "size", ")", ":", "\n", "        ", "buf", ".", "append", "(", "x", ")", "\n", "\n", "", "priority_init", "=", "list", "(", "[", "(", "i", "+", "1", ")", "/", "size", "for", "i", "in", "range", "(", "size", ")", "]", ")", "\n", "random", ".", "shuffle", "(", "priority_init", ")", "\n", "count_sampled", "=", "[", "0", "]", "*", "size", "\n", "\n", "def", "priority", "(", "x", ",", "n", ")", ":", "\n", "        ", "if", "n", "==", "0", ":", "\n", "            ", "return", "1.0", "\n", "", "else", ":", "\n", "            ", "return", "priority_init", "[", "x", "]", "/", "count_sampled", "[", "x", "]", "\n", "\n", "", "", "for", "_", "in", "range", "(", "200", ")", ":", "\n", "        ", "sampled", ",", "probabilities", ",", "_", "=", "buf", ".", "sample", "(", "16", ",", "uniform_ratio", "=", "uniform_ratio", ")", "\n", "priority_old", "=", "[", "priority", "(", "x", ",", "count_sampled", "[", "x", "]", ")", "for", "x", "in", "sampled", "]", "\n", "if", "uniform_ratio", "==", "0", ":", "\n", "# assert: probabilities \\propto priority_old", "\n", "            ", "qs", "=", "[", "x", "/", "y", "for", "x", ",", "y", "in", "zip", "(", "probabilities", ",", "priority_old", ")", "]", "\n", "for", "q", "in", "qs", ":", "\n", "                ", "np", ".", "testing", ".", "assert_allclose", "(", "q", ",", "qs", "[", "0", "]", ")", "\n", "", "", "elif", "uniform_ratio", "==", "1", ":", "\n", "# assert: uniform", "\n", "            ", "for", "p", "in", "probabilities", ":", "\n", "                ", "np", ".", "testing", ".", "assert_allclose", "(", "p", ",", "probabilities", "[", "0", "]", ")", "\n", "", "", "for", "x", "in", "sampled", ":", "\n", "            ", "count_sampled", "[", "x", "]", "+=", "1", "\n", "", "priority_new", "=", "[", "priority", "(", "x", ",", "count_sampled", "[", "x", "]", ")", "for", "x", "in", "sampled", "]", "\n", "buf", ".", "set_last_priority", "(", "priority_new", ")", "\n", "\n", "", "for", "cnt", "in", "count_sampled", ":", "\n", "        ", "assert", "cnt", ">=", "1", "\n", "\n", "", "corr", "=", "np", ".", "corrcoef", "(", "np", ".", "array", "(", "[", "priority_init", ",", "count_sampled", "]", ")", ")", "[", "0", ",", "1", "]", "\n", "corr_lb", ",", "corr_ub", "=", "expected_corr_range", "\n", "assert", "corr", ">", "corr_lb", "\n", "assert", "corr", "<", "corr_ub", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_prioritized.test_prioritized_buffer_flood": [[54, 76], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pfrl.collections.prioritized.PrioritizedBuffer", "range", "range", "range", "random.randrange", "prioritized.PrioritizedBuffer.sample", "prioritized.PrioritizedBuffer.append", "prioritized.PrioritizedBuffer.append", "prioritized.PrioritizedBuffer.set_last_priority"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.PrioritizedBuffer.set_last_priority"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"capacity\"", ",", "[", "1", ",", "10", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"wait_priority_after_sampling\"", ",", "[", "True", ",", "False", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"initial_priority\"", ",", "[", "0.1", ",", "1", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"uniform_ratio\"", ",", "[", "0", ",", "0.1", ",", "1", "]", ")", "\n", "def", "test_prioritized_buffer_flood", "(", "\n", "capacity", ",", "wait_priority_after_sampling", ",", "initial_priority", ",", "uniform_ratio", "\n", ")", ":", "\n", "    ", "buf", "=", "prioritized", ".", "PrioritizedBuffer", "(", "\n", "capacity", "=", "capacity", ",", "\n", "wait_priority_after_sampling", "=", "wait_priority_after_sampling", ",", "\n", ")", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "capacity", "+", "1", ")", ":", "\n", "            ", "if", "wait_priority_after_sampling", ":", "\n", "                ", "buf", ".", "append", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "buf", ".", "append", "(", "x", ",", "priority", "=", "initial_priority", ")", "\n", "", "", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "            ", "n", "=", "random", ".", "randrange", "(", "1", ",", "capacity", "+", "1", ")", "\n", "buf", ".", "sample", "(", "n", ",", "uniform_ratio", "=", "uniform_ratio", ")", "\n", "if", "wait_priority_after_sampling", ":", "\n", "                ", "buf", ".", "set_last_priority", "(", "[", "1.0", "]", "*", "n", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_persistent_collections.check_basic": [[8, 44], ["pfrl.collections.persistent_collections.PersistentRandomAccessQueue", "pfrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "pfrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "pfrl.collections.persistent_collections.PersistentRandomAccessQueue.popleft", "range", "pfrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "range", "pfrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "len", "len", "pfrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "deadbeefs.append", "len", "sorted", "sorted", "pfrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "deadbeefs.append", "len", "sorted", "sorted", "len"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.popleft", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["def", "check_basic", "(", "tmpd", ")", ":", "\n", "    ", "rb", "=", "PersistentRandomAccessQueue", "(", "tmpd", ",", "16", ")", "\n", "assert", "16", "==", "rb", ".", "maxlen", "\n", "\n", "data", "=", "{", "0x42", ":", "\"pocketburger\"", "}", "\n", "rb", ".", "append", "(", "data", ")", "\n", "x", "=", "rb", ".", "sample", "(", "1", ")", "\n", "assert", "[", "data", "]", "==", "x", "\n", "assert", "data", "==", "x", "[", "0", "]", "\n", "assert", "1", "==", "len", "(", "rb", ")", "\n", "del", "x", "\n", "\n", "rb", ".", "popleft", "(", ")", "\n", "assert", "0", "==", "len", "(", "rb", ")", "\n", "\n", "deadbeefs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "assert", "i", "==", "len", "(", "rb", ")", "\n", "data", "=", "(", "0x42", "+", "i", ",", "\"deadbeef\"", ")", "\n", "rb", ".", "append", "(", "data", ")", "\n", "deadbeefs", ".", "append", "(", "data", ")", "\n", "\n", "", "assert", "10", "==", "len", "(", "rb", ")", "\n", "samples", "=", "rb", ".", "sample", "(", "10", ")", "\n", "assert", "sorted", "(", "deadbeefs", ")", "==", "sorted", "(", "samples", ")", "\n", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "data", "=", "(", "0x52", "+", "i", ",", "\"deadbeef\"", ")", "\n", "rb", ".", "append", "(", "data", ")", "\n", "deadbeefs", ".", "append", "(", "data", ")", "\n", "\n", "", "assert", "16", "==", "len", "(", "rb", ")", "\n", "deadbeefs", "=", "deadbeefs", "[", "-", "16", ":", "]", "\n", "samples", "=", "rb", ".", "sample", "(", "16", ")", "\n", "assert", "samples", "!=", "sorted", "(", "samples", ")", "\n", "assert", "deadbeefs", "==", "sorted", "(", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_persistent_collections.test_basic_single_node": [[46, 49], ["tempfile.TemporaryDirectory", "test_persistent_collections.check_basic"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_persistent_collections.check_basic"], ["", "def", "test_basic_single_node", "(", ")", ":", "\n", "    ", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmpd", ":", "\n", "        ", "check_basic", "(", "tmpd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_persistent_collections.test_recovery": [[51, 72], ["tempfile.TemporaryDirectory", "range", "pfrl.collections.persistent_collections.PersistentRandomAccessQueue", "pfrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "range", "pfrl.collections.persistent_collections.PersistentRandomAccessQueue.close", "len", "len", "len", "pfrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "deadbeefs.append", "sorted", "sorted"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "", "def", "test_recovery", "(", ")", ":", "\n", "    ", "deadbeefs", "=", "[", "]", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmpd", ":", "\n", "        ", "for", "x", "in", "range", "(", "42", ")", ":", "\n", "            ", "rb", "=", "PersistentRandomAccessQueue", "(", "tmpd", ",", "16", ")", "\n", "assert", "16", "==", "rb", ".", "maxlen", "\n", "\n", "deadbeefs", "=", "deadbeefs", "[", "-", "16", ":", "]", "\n", "assert", "len", "(", "deadbeefs", ")", "==", "len", "(", "rb", ")", "\n", "\n", "samples", "=", "rb", ".", "sample", "(", "len", "(", "deadbeefs", ")", ")", "\n", "if", "deadbeefs", ":", "\n", "                ", "assert", "samples", "!=", "sorted", "(", "samples", ")", "\n", "assert", "deadbeefs", "==", "sorted", "(", "samples", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "121", ")", ":", "\n", "                ", "data", "=", "(", "0x42", "+", "i", "+", "x", ",", "\"deadbeef\"", ")", "\n", "rb", ".", "append", "(", "data", ")", "\n", "deadbeefs", ".", "append", "(", "data", ")", "\n", "\n", "", "rb", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections_tests.test_persistent_collections.test_ancestor": [[74, 121], ["pytest.mark.parametrize", "range", "len", "tempfile.TemporaryDirectory", "tmpdirs.append", "pfrl.collections.persistent_collections.PersistentRandomAccessQueue", "buffers.append", "range", "pfrl.collections.persistent_collections.PersistentRandomAccessQueue.close", "d.cleanup", "pfrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "c0bebeefs.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"maxlen,ancestors_level,datasizes\"", ",", "\n", "[", "\n", "(", "16", ",", "2", ",", "(", "18", ",", "0", ")", ")", ",", "\n", "(", "7", ",", "2", ",", "(", "13", ",", "0", ")", ")", ",", "\n", "(", "1", ",", "2", ",", "(", "1", ",", "0", ")", ")", ",", "\n", "(", "1024", ",", "2", ",", "(", "1024", ",", "0", ")", ")", ",", "\n", "(", "1024", ",", "2", ",", "(", "18", ",", "0", ")", ")", ",", "\n", "(", "1024", ",", "3", ",", "(", "18", ",", "10", ",", "0", ")", ")", ",", "\n", "(", "1024", ",", "3", ",", "(", "18", ",", "0", ",", "0", ")", ")", ",", "\n", "(", "17", ",", "3", ",", "(", "5", ",", "7", ",", "20", ")", ")", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_ancestor", "(", "maxlen", ",", "ancestors_level", ",", "datasizes", ")", ":", "\n", "# Test multiple depth of ancestors", "\n", "# maxlen: max length of the buffer(s)", "\n", "# ancestors_level: The number of ancestors to use", "\n", "# datasizes: data sizes to append() to each buffer", "\n", "    ", "assert", "len", "(", "datasizes", ")", "==", "ancestors_level", "\n", "c0bebeefs", "=", "[", "]", "\n", "buffers", "=", "[", "]", "\n", "tmpdirs", "=", "[", "]", "\n", "\n", "for", "level", "in", "range", "(", "ancestors_level", ")", ":", "\n", "        ", "datasize", "=", "datasizes", "[", "level", "]", "\n", "tmp_dir", "=", "tempfile", ".", "TemporaryDirectory", "(", ")", "\n", "tmpdirs", ".", "append", "(", "tmp_dir", ")", "\n", "\n", "if", "level", "==", "0", ":", "\n", "            ", "anc", "=", "None", "\n", "", "else", ":", "\n", "            ", "anc", "=", "tmpdirs", "[", "level", "-", "1", "]", ".", "name", "\n", "", "buf", "=", "PersistentRandomAccessQueue", "(", "tmp_dir", ".", "name", ",", "maxlen", ",", "ancestor", "=", "anc", ")", "\n", "buffers", ".", "append", "(", "buf", ")", "\n", "\n", "for", "i", "in", "range", "(", "datasize", ")", ":", "\n", "            ", "data", "=", "(", "0x42", "+", "i", ",", "\"c0bebeef\"", ")", "\n", "buf", ".", "append", "(", "data", ")", "\n", "c0bebeefs", ".", "append", "(", "data", ")", "\n", "\n", "", "c0bebeefs", "=", "c0bebeefs", "[", "-", "maxlen", ":", "]", "\n", "assert", "len", "(", "c0bebeefs", ")", "==", "len", "(", "buf", ")", "\n", "\n", "buf", ".", "close", "(", ")", "\n", "\n", "", "for", "d", "in", "tmpdirs", ":", "\n", "        ", "d", ".", "cleanup", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers_tests.test_additive_gaussian.test_additive_gaussian": [[7, 39], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pfrl.explorers.additive_gaussian.AdditiveGaussian", "range", "numpy.full", "pfrl.explorers.additive_gaussian.AdditiveGaussian.select_action", "actions.append", "numpy.testing.assert_allclose", "numpy.mean", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.boltzmann.Boltzmann.select_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"action_size\"", ",", "[", "1", ",", "3", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"scale\"", ",", "[", "0", ",", "0.1", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"low\"", ",", "[", "None", ",", "-", "0.4", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"high\"", ",", "[", "None", ",", "0.4", "]", ")", "\n", "def", "test_additive_gaussian", "(", "action_size", ",", "scale", ",", "low", ",", "high", ")", ":", "\n", "    ", "def", "greedy_action_func", "(", ")", ":", "\n", "        ", "return", "np", ".", "full", "(", "action_size", ",", "0.3", ")", "\n", "\n", "", "explorer", "=", "AdditiveGaussian", "(", "scale", ",", "low", "=", "low", ",", "high", "=", "high", ")", "\n", "\n", "actions", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "100", ")", ":", "\n", "        ", "a", "=", "explorer", ".", "select_action", "(", "t", ",", "greedy_action_func", ")", "\n", "\n", "if", "low", "is", "not", "None", ":", "\n", "# Clipped at lower edge", "\n", "            ", "assert", "(", "a", ">=", "low", ")", ".", "all", "(", ")", "\n", "\n", "", "if", "high", "is", "not", "None", ":", "\n", "# Clipped at upper edge", "\n", "            ", "assert", "(", "a", "<=", "high", ")", ".", "all", "(", ")", "\n", "\n", "", "if", "scale", "==", "0", ":", "\n", "# Without noise", "\n", "            ", "assert", "(", "a", "==", "0.3", ")", ".", "all", "(", ")", "\n", "", "else", ":", "\n", "# With noise", "\n", "            ", "assert", "not", "(", "a", "==", "0.3", ")", ".", "all", "(", ")", "\n", "", "actions", ".", "append", "(", "a", ")", "\n", "\n", "", "if", "low", "is", "None", "and", "high", "is", "None", ":", "\n", "        ", "np", ".", "testing", ".", "assert_allclose", "(", "np", ".", "mean", "(", "np", ".", "asarray", "(", "actions", ")", ",", "axis", "=", "0", ")", ",", "0.3", ",", "atol", "=", "0.1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers_tests.test_epsilon_greedy.TestExponentialDecayEpsilonGreedy.setUp": [[13, 19], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "steps", ",", "decay", ",", "end_epsilon", ",", "start_epsilon", ")", ":", "\n", "        ", "self", ".", "steps", "=", "steps", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "end_epsilon", "=", "end_epsilon", "\n", "self", ".", "start_epsilon", "=", "start_epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers_tests.test_epsilon_greedy.TestExponentialDecayEpsilonGreedy.test": [[20, 50], ["pfrl.explorers.epsilon_greedy.ExponentialDecayEpsilonGreedy", "pfrl.explorers.epsilon_greedy.ExponentialDecayEpsilonGreedy.logger.addHandler", "pfrl.explorers.epsilon_greedy.ExponentialDecayEpsilonGreedy.logger.setLevel", "range", "max", "logging.StreamHandler", "pytest.approx", "pfrl.explorers.epsilon_greedy.ExponentialDecayEpsilonGreedy.select_action", "pytest.approx"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.boltzmann.Boltzmann.select_action"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "random_action_func_count", "=", "[", "0", "]", "\n", "greedy_action_func_count", "=", "[", "0", "]", "\n", "\n", "def", "random_action_func", "(", ")", ":", "\n", "            ", "random_action_func_count", "[", "0", "]", "+=", "1", "\n", "return", "0", "\n", "\n", "", "def", "greedy_action_func", "(", ")", ":", "\n", "            ", "greedy_action_func_count", "[", "0", "]", "+=", "1", "\n", "return", "0", "\n", "\n", "", "explorer", "=", "epsilon_greedy", ".", "ExponentialDecayEpsilonGreedy", "(", "\n", "self", ".", "start_epsilon", ",", "self", ".", "end_epsilon", ",", "self", ".", "decay", ",", "random_action_func", "\n", ")", "\n", "\n", "explorer", ".", "logger", ".", "addHandler", "(", "logging", ".", "StreamHandler", "(", ")", ")", "\n", "explorer", ".", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "\n", "assert", "pytest", ".", "approx", "(", "explorer", ".", "epsilon", ")", "==", "self", ".", "start_epsilon", "\n", "\n", "for", "t", "in", "range", "(", "self", ".", "steps", ")", ":", "\n", "            ", "explorer", ".", "select_action", "(", "t", ",", "greedy_action_func", ")", "\n", "\n", "", "assert", "random_action_func_count", "[", "0", "]", "+", "greedy_action_func_count", "[", "0", "]", "==", "self", ".", "steps", "\n", "\n", "expected", "=", "max", "(", "\n", "self", ".", "start_epsilon", "*", "(", "self", ".", "decay", "**", "(", "self", ".", "steps", "-", "1", ")", ")", ",", "self", ".", "end_epsilon", "\n", ")", "\n", "assert", "pytest", ".", "approx", "(", "explorer", ".", "epsilon", ")", "==", "expected", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers_tests.test_epsilon_greedy.TestEpsilonGreedy.test_linear_decay_epsilon_greedy": [[53, 81], ["pfrl.explorers.epsilon_greedy.LinearDecayEpsilonGreedy", "pfrl.explorers.epsilon_greedy.LinearDecayEpsilonGreedy.logger.addHandler", "pfrl.explorers.epsilon_greedy.LinearDecayEpsilonGreedy.logger.setLevel", "range", "logging.StreamHandler", "pytest.approx", "pfrl.explorers.epsilon_greedy.LinearDecayEpsilonGreedy.select_action", "pytest.approx"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.boltzmann.Boltzmann.select_action"], ["    ", "def", "test_linear_decay_epsilon_greedy", "(", "self", ")", ":", "\n", "\n", "        ", "random_action_func_count", "=", "[", "0", "]", "\n", "greedy_action_func_count", "=", "[", "0", "]", "\n", "\n", "def", "random_action_func", "(", ")", ":", "\n", "            ", "random_action_func_count", "[", "0", "]", "+=", "1", "\n", "return", "0", "\n", "\n", "", "def", "greedy_action_func", "(", ")", ":", "\n", "            ", "greedy_action_func_count", "[", "0", "]", "+=", "1", "\n", "return", "0", "\n", "\n", "", "explorer", "=", "epsilon_greedy", ".", "LinearDecayEpsilonGreedy", "(", "\n", "1.0", ",", "0.1", ",", "50", ",", "random_action_func", "\n", ")", "\n", "\n", "explorer", ".", "logger", ".", "addHandler", "(", "logging", ".", "StreamHandler", "(", ")", ")", "\n", "explorer", ".", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "\n", "assert", "pytest", ".", "approx", "(", "explorer", ".", "epsilon", ")", "==", "1.0", "\n", "\n", "for", "t", "in", "range", "(", "100", ")", ":", "\n", "            ", "explorer", ".", "select_action", "(", "t", ",", "greedy_action_func", ")", "\n", "\n", "", "assert", "random_action_func_count", "[", "0", "]", "+", "greedy_action_func_count", "[", "0", "]", "==", "100", "\n", "\n", "assert", "pytest", ".", "approx", "(", "explorer", ".", "epsilon", ")", "==", "0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers_tests.test_epsilon_greedy.TestEpsilonGreedy.test_constant_epsilon_greedy": [[82, 108], ["pfrl.explorers.epsilon_greedy.ConstantEpsilonGreedy", "pfrl.explorers.epsilon_greedy.ConstantEpsilonGreedy.logger.addHandler", "pfrl.explorers.epsilon_greedy.ConstantEpsilonGreedy.logger.setLevel", "range", "logging.StreamHandler", "pytest.approx", "pfrl.explorers.epsilon_greedy.ConstantEpsilonGreedy.select_action", "pytest.approx"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.boltzmann.Boltzmann.select_action"], ["", "def", "test_constant_epsilon_greedy", "(", "self", ")", ":", "\n", "\n", "        ", "random_action_func_count", "=", "[", "0", "]", "\n", "greedy_action_func_count", "=", "[", "0", "]", "\n", "\n", "def", "random_action_func", "(", ")", ":", "\n", "            ", "random_action_func_count", "[", "0", "]", "+=", "1", "\n", "return", "0", "\n", "\n", "", "def", "greedy_action_func", "(", ")", ":", "\n", "            ", "greedy_action_func_count", "[", "0", "]", "+=", "1", "\n", "return", "0", "\n", "\n", "", "explorer", "=", "epsilon_greedy", ".", "ConstantEpsilonGreedy", "(", "0.1", ",", "random_action_func", ")", "\n", "\n", "explorer", ".", "logger", ".", "addHandler", "(", "logging", ".", "StreamHandler", "(", ")", ")", "\n", "explorer", ".", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "\n", "assert", "pytest", ".", "approx", "(", "explorer", ".", "epsilon", ")", "==", "0.1", "\n", "\n", "for", "t", "in", "range", "(", "100", ")", ":", "\n", "            ", "explorer", ".", "select_action", "(", "t", ",", "greedy_action_func", ")", "\n", "\n", "", "assert", "random_action_func_count", "[", "0", "]", "+", "greedy_action_func_count", "[", "0", "]", "==", "100", "\n", "\n", "assert", "pytest", ".", "approx", "(", "explorer", ".", "epsilon", ")", "==", "0.1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers_tests.test_boltzmann.TestBoltzmann.test_boltzmann": [[26, 45], ["torch.from_numpy", "test_boltzmann.count_actions_selected_by_boltzmann", "print", "test_boltzmann.TestBoltzmann.assertGreater", "test_boltzmann.TestBoltzmann.assertGreater", "test_boltzmann.count_actions_selected_by_boltzmann", "print", "test_boltzmann.TestBoltzmann.assertGreater", "test_boltzmann.TestBoltzmann.assertGreater", "test_boltzmann.TestBoltzmann.assertGreater", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers_tests.test_boltzmann.count_actions_selected_by_boltzmann", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers_tests.test_boltzmann.count_actions_selected_by_boltzmann"], ["    ", "def", "test_boltzmann", "(", "self", ")", ":", "\n", "\n", "# T=1", "\n", "        ", "q_values", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "[", "[", "-", "1", ",", "1", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "action_count", "=", "count_actions_selected_by_boltzmann", "(", "1", ",", "q_values", ")", "\n", "print", "(", "\"T=1\"", ",", "action_count", ")", "\n", "# Actions with larger values must be selected more often", "\n", "self", ".", "assertGreater", "(", "action_count", "[", "1", "]", ",", "action_count", "[", "2", "]", ")", "\n", "self", ".", "assertGreater", "(", "action_count", "[", "2", "]", ",", "action_count", "[", "0", "]", ")", "\n", "\n", "# T=0.5", "\n", "action_count_t05", "=", "count_actions_selected_by_boltzmann", "(", "0.5", ",", "q_values", ")", "\n", "print", "(", "\"T=0.5\"", ",", "action_count_t05", ")", "\n", "# Actions with larger values must be selected more often", "\n", "self", ".", "assertGreater", "(", "action_count_t05", "[", "1", "]", ",", "action_count_t05", "[", "2", "]", ")", "\n", "self", ".", "assertGreater", "(", "action_count_t05", "[", "2", "]", ",", "action_count_t05", "[", "0", "]", ")", "\n", "\n", "# T=0.5 must be more greedy than T=1", "\n", "self", ".", "assertGreater", "(", "action_count_t05", "[", "1", "]", ",", "action_count", "[", "1", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers_tests.test_boltzmann.count_actions_selected_by_boltzmann": [[9, 23], ["pfrl.explorers.Boltzmann", "pfrl.action_value.DiscreteActionValue", "range", "RuntimeError", "pfrl.explorers.Boltzmann.select_action"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.boltzmann.Boltzmann.select_action"], ["def", "count_actions_selected_by_boltzmann", "(", "T", ",", "q_values", ")", ":", "\n", "    ", "def", "greedy_action_func", "(", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Must not be called\"", ")", "\n", "\n", "", "explorer", "=", "pfrl", ".", "explorers", ".", "Boltzmann", "(", "T", "=", "T", ")", "\n", "action_value", "=", "pfrl", ".", "action_value", ".", "DiscreteActionValue", "(", "q_values", ")", "\n", "\n", "action_count", "=", "[", "0", "]", "*", "3", "\n", "\n", "for", "t", "in", "range", "(", "10000", ")", ":", "\n", "        ", "a", "=", "explorer", ".", "select_action", "(", "t", ",", "greedy_action_func", ",", "action_value", ")", "\n", "action_count", "[", "a", "]", "+=", "1", "\n", "\n", "", "return", "action_count", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers_tests.test_additive_ou.test_additive_ou": [[7, 25], ["pytest.mark.parametrize", "pytest.mark.parametrize", "numpy.random.rand", "pfrl.explorers.additive_ou.AdditiveOU", "print", "range", "numpy.asarray", "numpy.random.rand", "pfrl.explorers.additive_ou.AdditiveOU.select_action", "print", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.boltzmann.Boltzmann.select_action"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"action_size\"", ",", "[", "1", ",", "3", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"sigma_type\"", ",", "[", "\"scalar\"", ",", "\"ndarray\"", "]", ")", "\n", "def", "test_additive_ou", "(", "action_size", ",", "sigma_type", ")", ":", "\n", "    ", "def", "greedy_action_func", "(", ")", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "[", "0", "]", "*", "action_size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "if", "sigma_type", "==", "\"scalar\"", ":", "\n", "        ", "sigma", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "", "elif", "sigma_type", "==", "\"ndarray\"", ":", "\n", "        ", "sigma", "=", "np", ".", "random", ".", "rand", "(", "action_size", ")", "\n", "", "theta", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "\n", "explorer", "=", "AdditiveOU", "(", "theta", "=", "theta", ",", "sigma", "=", "sigma", ")", "\n", "\n", "print", "(", "\"theta:\"", ",", "theta", ",", "\"sigma\"", ",", "sigma", ")", "\n", "for", "t", "in", "range", "(", "100", ")", ":", "\n", "        ", "a", "=", "explorer", ".", "select_action", "(", "t", ",", "greedy_action_func", ")", "\n", "print", "(", "t", ",", "a", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.basetest_state_action_q_function._TestSAQFunction._test_call_given_model": [[10, 25], ["numpy.random.rand", "numpy.random.rand", "model", "assertions.assertTrue", "assertions.assertEqual", "assertions.assertEqual", "torch.from_numpy().float", "torch.from_numpy().float", "model.to", "obs.to.to.to", "action.to.to.to", "isinstance", "model.get_device", "obs.to.to.get_device", "torch.device", "torch.device", "torch.device", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["    ", "def", "_test_call_given_model", "(", "self", ",", "model", ",", "gpu", ")", ":", "\n", "# This method only check if a given model can receive random input", "\n", "# data and return output data with the correct interface.", "\n", "        ", "batch_size", "=", "7", "\n", "obs", "=", "np", ".", "random", ".", "rand", "(", "batch_size", ",", "self", ".", "n_dim_obs", ")", "\n", "action", "=", "np", ".", "random", ".", "rand", "(", "batch_size", ",", "self", ".", "n_dim_action", ")", "\n", "obs", ",", "action", "=", "torch", ".", "from_numpy", "(", "obs", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "action", ")", ".", "float", "(", ")", "\n", "if", "gpu", ">=", "0", ":", "\n", "            ", "model", ".", "to", "(", "torch", ".", "device", "(", "\"cuda\"", ",", "gpu", ")", ")", "\n", "obs", "=", "obs", ".", "to", "(", "torch", ".", "device", "(", "\"cuda\"", ",", "gpu", ")", ")", "\n", "action", "=", "action", ".", "to", "(", "torch", ".", "device", "(", "\"cuda\"", ",", "gpu", ")", ")", "\n", "", "y", "=", "model", "(", "obs", ",", "action", ")", "\n", "assertions", ".", "assertTrue", "(", "isinstance", "(", "y", ",", "torch", ".", "Tensor", ")", ")", "\n", "assertions", ".", "assertEqual", "(", "y", ".", "shape", ",", "(", "batch_size", ",", "1", ")", ")", "\n", "assertions", ".", "assertEqual", "(", "y", ".", "get_device", "(", ")", ",", "obs", ".", "get_device", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.test_state_action_q_function.TestFCSAQFunction.setUp": [[19, 35], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "\n", "self", ",", "\n", "n_dim_obs", ",", "\n", "n_dim_action", ",", "\n", "n_hidden_layers", ",", "\n", "n_hidden_channels", ",", "\n", "nonlinearity", ",", "\n", "last_wscale", ",", "\n", ")", ":", "\n", "        ", "self", ".", "n_dim_obs", "=", "n_dim_obs", "\n", "self", ".", "n_dim_action", "=", "n_dim_action", "\n", "self", ".", "n_hidden_layers", "=", "n_hidden_layers", "\n", "self", ".", "n_hidden_channels", "=", "n_hidden_channels", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "self", ".", "last_wscale", "=", "last_wscale", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.test_state_action_q_function.TestFCSAQFunction._test_call": [[36, 47], ["getattr", "pfrl.q_functions.FCSAQFunction", "test_state_action_q_function.TestFCSAQFunction._test_call_given_model"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.basetest_state_action_q_function._TestSAQFunction._test_call_given_model"], ["", "def", "_test_call", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "nonlinearity", "=", "getattr", "(", "F", ",", "self", ".", "nonlinearity", ")", "\n", "model", "=", "pfrl", ".", "q_functions", ".", "FCSAQFunction", "(", "\n", "n_dim_obs", "=", "self", ".", "n_dim_obs", ",", "\n", "n_dim_action", "=", "self", ".", "n_dim_action", ",", "\n", "n_hidden_layers", "=", "self", ".", "n_hidden_layers", ",", "\n", "n_hidden_channels", "=", "self", ".", "n_hidden_channels", ",", "\n", "nonlinearity", "=", "nonlinearity", ",", "\n", "last_wscale", "=", "self", ".", "last_wscale", ",", "\n", ")", "\n", "self", ".", "_test_call_given_model", "(", "model", ",", "gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.test_state_action_q_function.TestFCSAQFunction.test_call_cpu": [[48, 50], ["test_state_action_q_function.TestFCSAQFunction._test_call"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_mlp_bn.TestMLPBN._test_call"], ["", "def", "test_call_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_call", "(", "gpu", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.test_state_action_q_function.TestFCSAQFunction.test_call_gpu": [[51, 54], ["test_state_action_q_function.TestFCSAQFunction._test_call"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_mlp_bn.TestMLPBN._test_call"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_call_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_call", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.test_state_action_q_function.TestFCLSTMSAQFunction.setUp": [[64, 80], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "\n", "self", ",", "\n", "n_dim_obs", ",", "\n", "n_dim_action", ",", "\n", "n_hidden_layers", ",", "\n", "n_hidden_channels", ",", "\n", "nonlinearity", ",", "\n", "last_wscale", ",", "\n", ")", ":", "\n", "        ", "self", ".", "n_dim_obs", "=", "n_dim_obs", "\n", "self", ".", "n_dim_action", "=", "n_dim_action", "\n", "self", ".", "n_hidden_layers", "=", "n_hidden_layers", "\n", "self", ".", "n_hidden_channels", "=", "n_hidden_channels", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "self", ".", "last_wscale", "=", "last_wscale", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.test_state_action_q_function.TestFCLSTMSAQFunction._test_call": [[81, 92], ["getattr", "pfrl.q_functions.FCLSTMSAQFunction", "test_state_action_q_function.TestFCLSTMSAQFunction._test_call_given_model"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.basetest_state_action_q_function._TestSAQFunction._test_call_given_model"], ["", "def", "_test_call", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "nonlinearity", "=", "getattr", "(", "F", ",", "self", ".", "nonlinearity", ")", "\n", "model", "=", "pfrl", ".", "q_functions", ".", "FCLSTMSAQFunction", "(", "\n", "n_dim_obs", "=", "self", ".", "n_dim_obs", ",", "\n", "n_dim_action", "=", "self", ".", "n_dim_action", ",", "\n", "n_hidden_layers", "=", "self", ".", "n_hidden_layers", ",", "\n", "n_hidden_channels", "=", "self", ".", "n_hidden_channels", ",", "\n", "nonlinearity", "=", "nonlinearity", ",", "\n", "last_wscale", "=", "self", ".", "last_wscale", ",", "\n", ")", "\n", "self", ".", "_test_call_given_model", "(", "model", ",", "gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.test_state_action_q_function.TestFCLSTMSAQFunction.test_call_cpu": [[93, 95], ["test_state_action_q_function.TestFCLSTMSAQFunction._test_call"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_mlp_bn.TestMLPBN._test_call"], ["", "def", "test_call_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_call", "(", "gpu", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.test_state_action_q_function.TestFCLSTMSAQFunction.test_call_gpu": [[96, 99], ["test_state_action_q_function.TestFCLSTMSAQFunction._test_call"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_mlp_bn.TestMLPBN._test_call"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_call_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_call", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.test_state_action_q_function.TestFCBNSAQFunction.setUp": [[109, 127], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "\n", "self", ",", "\n", "n_dim_obs", ",", "\n", "n_dim_action", ",", "\n", "n_hidden_layers", ",", "\n", "n_hidden_channels", ",", "\n", "normalize_input", ",", "\n", "nonlinearity", ",", "\n", "last_wscale", ",", "\n", ")", ":", "\n", "        ", "self", ".", "n_dim_obs", "=", "n_dim_obs", "\n", "self", ".", "n_dim_action", "=", "n_dim_action", "\n", "self", ".", "n_hidden_layers", "=", "n_hidden_layers", "\n", "self", ".", "n_hidden_channels", "=", "n_hidden_channels", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "self", ".", "last_wscale", "=", "last_wscale", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.test_state_action_q_function.TestFCBNSAQFunction._test_call": [[128, 140], ["getattr", "pfrl.q_functions.FCBNSAQFunction", "test_state_action_q_function.TestFCBNSAQFunction._test_call_given_model"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.basetest_state_action_q_function._TestSAQFunction._test_call_given_model"], ["", "def", "_test_call", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "nonlinearity", "=", "getattr", "(", "F", ",", "self", ".", "nonlinearity", ")", "\n", "model", "=", "pfrl", ".", "q_functions", ".", "FCBNSAQFunction", "(", "\n", "n_dim_obs", "=", "self", ".", "n_dim_obs", ",", "\n", "n_dim_action", "=", "self", ".", "n_dim_action", ",", "\n", "n_hidden_layers", "=", "self", ".", "n_hidden_layers", ",", "\n", "n_hidden_channels", "=", "self", ".", "n_hidden_channels", ",", "\n", "normalize_input", "=", "self", ".", "normalize_input", ",", "\n", "nonlinearity", "=", "nonlinearity", ",", "\n", "last_wscale", "=", "self", ".", "last_wscale", ",", "\n", ")", "\n", "self", ".", "_test_call_given_model", "(", "model", ",", "gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.test_state_action_q_function.TestFCBNSAQFunction.test_call_cpu": [[141, 143], ["test_state_action_q_function.TestFCBNSAQFunction._test_call"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_mlp_bn.TestMLPBN._test_call"], ["", "def", "test_call_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_call", "(", "gpu", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.test_state_action_q_function.TestFCBNSAQFunction.test_call_gpu": [[144, 147], ["test_state_action_q_function.TestFCBNSAQFunction._test_call"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_mlp_bn.TestMLPBN._test_call"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_call_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_call", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.test_state_action_q_function.TestFCBNLateActionSAQFunction.setUp": [[158, 176], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "\n", "self", ",", "\n", "n_dim_obs", ",", "\n", "n_dim_action", ",", "\n", "n_hidden_layers", ",", "\n", "n_hidden_channels", ",", "\n", "normalize_input", ",", "\n", "nonlinearity", ",", "\n", "last_wscale", ",", "\n", ")", ":", "\n", "        ", "self", ".", "n_dim_obs", "=", "n_dim_obs", "\n", "self", ".", "n_dim_action", "=", "n_dim_action", "\n", "self", ".", "n_hidden_layers", "=", "n_hidden_layers", "\n", "self", ".", "n_hidden_channels", "=", "n_hidden_channels", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "self", ".", "last_wscale", "=", "last_wscale", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.test_state_action_q_function.TestFCBNLateActionSAQFunction._test_call": [[177, 189], ["getattr", "pfrl.q_functions.FCBNLateActionSAQFunction", "test_state_action_q_function.TestFCBNLateActionSAQFunction._test_call_given_model"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.basetest_state_action_q_function._TestSAQFunction._test_call_given_model"], ["", "def", "_test_call", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "nonlinearity", "=", "getattr", "(", "F", ",", "self", ".", "nonlinearity", ")", "\n", "model", "=", "pfrl", ".", "q_functions", ".", "FCBNLateActionSAQFunction", "(", "\n", "n_dim_obs", "=", "self", ".", "n_dim_obs", ",", "\n", "n_dim_action", "=", "self", ".", "n_dim_action", ",", "\n", "n_hidden_layers", "=", "self", ".", "n_hidden_layers", ",", "\n", "n_hidden_channels", "=", "self", ".", "n_hidden_channels", ",", "\n", "normalize_input", "=", "self", ".", "normalize_input", ",", "\n", "nonlinearity", "=", "nonlinearity", ",", "\n", "last_wscale", "=", "self", ".", "last_wscale", ",", "\n", ")", "\n", "self", ".", "_test_call_given_model", "(", "model", ",", "gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.test_state_action_q_function.TestFCBNLateActionSAQFunction.test_call_cpu": [[190, 192], ["test_state_action_q_function.TestFCBNLateActionSAQFunction._test_call"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_mlp_bn.TestMLPBN._test_call"], ["", "def", "test_call_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_call", "(", "gpu", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.test_state_action_q_function.TestFCBNLateActionSAQFunction.test_call_gpu": [[193, 196], ["test_state_action_q_function.TestFCBNLateActionSAQFunction._test_call"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_mlp_bn.TestMLPBN._test_call"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_call_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_call", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.test_state_action_q_function.TestFCLateActionSAQFunction.setUp": [[206, 222], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "\n", "self", ",", "\n", "n_dim_obs", ",", "\n", "n_dim_action", ",", "\n", "n_hidden_layers", ",", "\n", "n_hidden_channels", ",", "\n", "nonlinearity", ",", "\n", "last_wscale", ",", "\n", ")", ":", "\n", "        ", "self", ".", "n_dim_obs", "=", "n_dim_obs", "\n", "self", ".", "n_dim_action", "=", "n_dim_action", "\n", "self", ".", "n_hidden_layers", "=", "n_hidden_layers", "\n", "self", ".", "n_hidden_channels", "=", "n_hidden_channels", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "self", ".", "last_wscale", "=", "last_wscale", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.test_state_action_q_function.TestFCLateActionSAQFunction._test_call": [[223, 234], ["getattr", "pfrl.q_functions.FCLateActionSAQFunction", "test_state_action_q_function.TestFCLateActionSAQFunction._test_call_given_model"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.basetest_state_action_q_function._TestSAQFunction._test_call_given_model"], ["", "def", "_test_call", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "nonlinearity", "=", "getattr", "(", "F", ",", "self", ".", "nonlinearity", ")", "\n", "model", "=", "pfrl", ".", "q_functions", ".", "FCLateActionSAQFunction", "(", "\n", "n_dim_obs", "=", "self", ".", "n_dim_obs", ",", "\n", "n_dim_action", "=", "self", ".", "n_dim_action", ",", "\n", "n_hidden_layers", "=", "self", ".", "n_hidden_layers", ",", "\n", "n_hidden_channels", "=", "self", ".", "n_hidden_channels", ",", "\n", "nonlinearity", "=", "nonlinearity", ",", "\n", "last_wscale", "=", "self", ".", "last_wscale", ",", "\n", ")", "\n", "self", ".", "_test_call_given_model", "(", "model", ",", "gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.test_state_action_q_function.TestFCLateActionSAQFunction.test_call_cpu": [[235, 237], ["test_state_action_q_function.TestFCLateActionSAQFunction._test_call"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_mlp_bn.TestMLPBN._test_call"], ["", "def", "test_call_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_call", "(", "gpu", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions_tests.test_state_action_q_function.TestFCLateActionSAQFunction.test_call_gpu": [[238, 241], ["test_state_action_q_function.TestFCLateActionSAQFunction._test_call"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_mlp_bn.TestMLPBN._test_call"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_call_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_call", "(", "gpu", "=", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_copy_param.TestCopyParam.test_copy_param": [[12, 28], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "list", "list", "test_copy_param.TestCopyParam.assertNotEqual", "pfrl.utils.copy_param.copy_param", "list", "list", "test_copy_param.TestCopyParam.assertEqual", "test_copy_param.TestCopyParam.assertEqual", "numpy.random.rand().astype", "torch.Linear.detach().numpy().ravel", "torch.Linear.detach().numpy().ravel", "torch.Linear.detach().numpy().ravel", "torch.Linear.detach().numpy().ravel", "numpy.random.rand", "torch.Linear.detach().numpy", "torch.Linear.detach().numpy", "torch.Linear.detach().numpy", "torch.Linear.detach().numpy", "torch.Linear.detach", "torch.Linear.detach", "torch.Linear.detach", "torch.Linear.detach", "torch.Linear.", "torch.Linear.", "torch.Linear.", "torch.Linear."], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.copy_param"], ["    ", "def", "test_copy_param", "(", "self", ")", ":", "\n", "        ", "a", "=", "nn", ".", "Linear", "(", "1", ",", "5", ")", "\n", "b", "=", "nn", ".", "Linear", "(", "1", ",", "5", ")", "\n", "\n", "s", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "rand", "(", "1", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "a_out", "=", "list", "(", "a", "(", "s", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "ravel", "(", ")", ")", "\n", "b_out", "=", "list", "(", "b", "(", "s", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "ravel", "(", ")", ")", "\n", "self", ".", "assertNotEqual", "(", "a_out", ",", "b_out", ")", "\n", "\n", "# Copy b's parameters to a", "\n", "copy_param", ".", "copy_param", "(", "a", ",", "b", ")", "\n", "\n", "a_out_new", "=", "list", "(", "a", "(", "s", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "ravel", "(", ")", ")", "\n", "b_out_new", "=", "list", "(", "b", "(", "s", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "ravel", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "a_out_new", ",", "b_out", ")", "\n", "self", ".", "assertEqual", "(", "b_out_new", ",", "b_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_copy_param.TestCopyParam.test_copy_param_scalar": [[29, 41], ["torch.Module", "torch.Module", "torch.Parameter", "torch.Parameter", "torch.Module", "torch.Module", "torch.Parameter", "torch.Parameter", "test_copy_param.TestCopyParam.assertNotEqual", "pfrl.utils.copy_param.copy_param", "test_copy_param.TestCopyParam.assertEqual", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Module.p.detach().numpy", "torch.Module.p.detach().numpy", "torch.Module.p.detach().numpy", "torch.Module.p.detach().numpy", "torch.Module.p.detach", "torch.Module.p.detach", "torch.Module.p.detach", "torch.Module.p.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.copy_param"], ["", "def", "test_copy_param_scalar", "(", "self", ")", ":", "\n", "        ", "a", "=", "nn", ".", "Module", "(", ")", "\n", "a", ".", "p", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ")", "\n", "b", "=", "nn", ".", "Module", "(", ")", "\n", "b", ".", "p", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "2", "]", ")", ")", "\n", "\n", "self", ".", "assertNotEqual", "(", "a", ".", "p", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "b", ".", "p", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# Copy b's parameters to a", "\n", "copy_param", ".", "copy_param", "(", "a", ",", "b", ")", "\n", "\n", "self", ".", "assertEqual", "(", "a", ".", "p", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "b", ".", "p", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_copy_param.TestCopyParam.test_copy_param_shape_check": [[42, 53], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "test_copy_param.TestCopyParam.assertRaises", "pfrl.utils.copy_param.copy_param", "test_copy_param.TestCopyParam.assertRaises", "pfrl.utils.copy_param.copy_param"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.copy_param", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.copy_param"], ["", "def", "test_copy_param_shape_check", "(", "self", ")", ":", "\n", "        ", "a", "=", "nn", ".", "Linear", "(", "2", ",", "5", ")", "\n", "b", "=", "nn", ".", "Linear", "(", "1", ",", "5", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", ":", "\n", "# Different shape", "\n", "            ", "copy_param", ".", "copy_param", "(", "a", ",", "b", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", ":", "\n", "# Different shape", "\n", "            ", "copy_param", ".", "copy_param", "(", "b", ",", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_copy_param.TestCopyParam.test_soft_copy_param": [[54, 72], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "pfrl.utils.copy_param.soft_copy_param", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.utils.copy_param.soft_copy_param", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.Linear.weight.fill_", "torch.Linear.weight.fill_", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.soft_copy_param", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.soft_copy_param", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose"], ["", "", "def", "test_soft_copy_param", "(", "self", ")", ":", "\n", "        ", "a", "=", "nn", ".", "Linear", "(", "1", ",", "5", ")", "\n", "b", "=", "nn", ".", "Linear", "(", "1", ",", "5", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "a", ".", "weight", ".", "fill_", "(", "0.5", ")", "\n", "b", ".", "weight", ".", "fill_", "(", "1", ")", "\n", "\n", "# a = (1 - tau) * a + tau * b", "\n", "", "copy_param", ".", "soft_copy_param", "(", "target_link", "=", "a", ",", "source_link", "=", "b", ",", "tau", "=", "0.1", ")", "\n", "\n", "torch_assert_allclose", "(", "a", ".", "weight", ",", "torch", ".", "full_like", "(", "a", ".", "weight", ",", "0.55", ")", ")", "\n", "torch_assert_allclose", "(", "b", ".", "weight", ",", "torch", ".", "full_like", "(", "b", ".", "weight", ",", "1.0", ")", ")", "\n", "\n", "copy_param", ".", "soft_copy_param", "(", "target_link", "=", "a", ",", "source_link", "=", "b", ",", "tau", "=", "0.1", ")", "\n", "\n", "torch_assert_allclose", "(", "a", ".", "weight", ",", "torch", ".", "full_like", "(", "a", ".", "weight", ",", "0.595", ")", ")", "\n", "torch_assert_allclose", "(", "b", ".", "weight", ",", "torch", ".", "full_like", "(", "b", ".", "weight", ",", "1.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_copy_param.TestCopyParam.test_soft_copy_param_scalar": [[73, 89], ["torch.Module", "torch.Module", "torch.Parameter", "torch.Parameter", "torch.Module", "torch.Module", "torch.Parameter", "torch.Parameter", "pfrl.utils.copy_param.soft_copy_param", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.utils.copy_param.soft_copy_param", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.soft_copy_param", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.soft_copy_param", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose"], ["", "def", "test_soft_copy_param_scalar", "(", "self", ")", ":", "\n", "        ", "a", "=", "nn", ".", "Module", "(", ")", "\n", "a", ".", "p", "=", "nn", ".", "Parameter", "(", "torch", ".", "as_tensor", "(", "0.5", ")", ")", "\n", "b", "=", "nn", ".", "Module", "(", ")", "\n", "b", ".", "p", "=", "nn", ".", "Parameter", "(", "torch", ".", "as_tensor", "(", "1.0", ")", ")", "\n", "\n", "# a = (1 - tau) * a + tau * b", "\n", "copy_param", ".", "soft_copy_param", "(", "target_link", "=", "a", ",", "source_link", "=", "b", ",", "tau", "=", "0.1", ")", "\n", "\n", "torch_assert_allclose", "(", "a", ".", "p", ",", "torch", ".", "full_like", "(", "a", ".", "p", ",", "0.55", ")", ")", "\n", "torch_assert_allclose", "(", "b", ".", "p", ",", "torch", ".", "full_like", "(", "b", ".", "p", ",", "1.0", ")", ")", "\n", "\n", "copy_param", ".", "soft_copy_param", "(", "target_link", "=", "a", ",", "source_link", "=", "b", ",", "tau", "=", "0.1", ")", "\n", "\n", "torch_assert_allclose", "(", "a", ".", "p", ",", "torch", ".", "full_like", "(", "a", ".", "p", ",", "0.595", ")", ")", "\n", "torch_assert_allclose", "(", "b", ".", "p", ",", "torch", ".", "full_like", "(", "b", ".", "p", ",", "1.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_copy_param.TestCopyParam.test_soft_copy_param_shape_check": [[90, 100], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "test_copy_param.TestCopyParam.assertRaises", "pfrl.utils.copy_param.soft_copy_param", "test_copy_param.TestCopyParam.assertRaises", "pfrl.utils.copy_param.soft_copy_param"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.soft_copy_param", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.soft_copy_param"], ["", "def", "test_soft_copy_param_shape_check", "(", "self", ")", ":", "\n", "        ", "a", "=", "nn", ".", "Linear", "(", "2", ",", "5", ")", "\n", "b", "=", "nn", ".", "Linear", "(", "1", ",", "5", ")", "\n", "\n", "# Different shape", "\n", "with", "self", ".", "assertRaises", "(", "AssertionError", ")", ":", "\n", "            ", "copy_param", ".", "soft_copy_param", "(", "a", ",", "b", ",", "0.1", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "AssertionError", ")", ":", "\n", "            ", "copy_param", ".", "soft_copy_param", "(", "b", ",", "a", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_copy_param.TestCopyParam.test_copy_grad": [[101, 167], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "test_copy_param.TestCopyParam.test_copy_grad.set_random_grad"], "methods", ["None"], ["", "", "def", "test_copy_grad", "(", "self", ")", ":", "\n", "        ", "def", "set_random_grad", "(", "link", ")", ":", "\n", "            ", "link", ".", "zero_grad", "(", ")", "\n", "x", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "1", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "y", "=", "link", "(", "torch", ".", "from_numpy", "(", "x", ")", ")", "*", "np", ".", "random", ".", "normal", "(", ")", "\n", "torch", ".", "sum", "(", "y", ")", ".", "backward", "(", ")", "\n", "\n", "# When source is not None and target is None", "\n", "", "a", "=", "nn", ".", "Linear", "(", "1", ",", "5", ")", "\n", "b", "=", "nn", ".", "Linear", "(", "1", ",", "5", ")", "\n", "set_random_grad", "(", "a", ")", "\n", "b", ".", "zero_grad", "(", ")", "\n", "assert", "a", ".", "weight", ".", "grad", "is", "not", "None", "\n", "assert", "a", ".", "bias", ".", "grad", "is", "not", "None", "\n", "assert", "b", ".", "weight", ".", "grad", "is", "None", "\n", "assert", "b", ".", "bias", ".", "grad", "is", "None", "\n", "copy_param", ".", "copy_grad", "(", "target_link", "=", "b", ",", "source_link", "=", "a", ")", "\n", "torch_assert_allclose", "(", "a", ".", "weight", ".", "grad", ",", "b", ".", "weight", ".", "grad", ")", "\n", "torch_assert_allclose", "(", "a", ".", "bias", ".", "grad", ",", "b", ".", "bias", ".", "grad", ")", "\n", "assert", "a", ".", "weight", ".", "grad", "is", "not", "b", ".", "weight", ".", "grad", "\n", "assert", "a", ".", "bias", ".", "grad", "is", "not", "b", ".", "bias", ".", "grad", "\n", "\n", "# When both are not None", "\n", "a", "=", "nn", ".", "Linear", "(", "1", ",", "5", ")", "\n", "b", "=", "nn", ".", "Linear", "(", "1", ",", "5", ")", "\n", "set_random_grad", "(", "a", ")", "\n", "set_random_grad", "(", "b", ")", "\n", "assert", "a", ".", "weight", ".", "grad", "is", "not", "None", "\n", "assert", "a", ".", "bias", ".", "grad", "is", "not", "None", "\n", "assert", "b", ".", "weight", ".", "grad", "is", "not", "None", "\n", "assert", "b", ".", "bias", ".", "grad", "is", "not", "None", "\n", "copy_param", ".", "copy_grad", "(", "target_link", "=", "b", ",", "source_link", "=", "a", ")", "\n", "torch_assert_allclose", "(", "a", ".", "weight", ".", "grad", ",", "b", ".", "weight", ".", "grad", ")", "\n", "torch_assert_allclose", "(", "a", ".", "bias", ".", "grad", ",", "b", ".", "bias", ".", "grad", ")", "\n", "assert", "a", ".", "weight", ".", "grad", "is", "not", "b", ".", "weight", ".", "grad", "\n", "assert", "a", ".", "bias", ".", "grad", "is", "not", "b", ".", "bias", ".", "grad", "\n", "\n", "# When source is None and target is not None", "\n", "a", "=", "nn", ".", "Linear", "(", "1", ",", "5", ")", "\n", "b", "=", "nn", ".", "Linear", "(", "1", ",", "5", ")", "\n", "a", ".", "zero_grad", "(", ")", "\n", "set_random_grad", "(", "b", ")", "\n", "assert", "a", ".", "weight", ".", "grad", "is", "None", "\n", "assert", "a", ".", "bias", ".", "grad", "is", "None", "\n", "assert", "b", ".", "weight", ".", "grad", "is", "not", "None", "\n", "assert", "b", ".", "bias", ".", "grad", "is", "not", "None", "\n", "copy_param", ".", "copy_grad", "(", "target_link", "=", "b", ",", "source_link", "=", "a", ")", "\n", "assert", "a", ".", "weight", ".", "grad", "is", "None", "\n", "assert", "a", ".", "bias", ".", "grad", "is", "None", "\n", "assert", "b", ".", "weight", ".", "grad", "is", "None", "\n", "assert", "b", ".", "bias", ".", "grad", "is", "None", "\n", "\n", "# When both are None", "\n", "a", "=", "nn", ".", "Linear", "(", "1", ",", "5", ")", "\n", "b", "=", "nn", ".", "Linear", "(", "1", ",", "5", ")", "\n", "a", ".", "zero_grad", "(", ")", "\n", "b", ".", "zero_grad", "(", ")", "\n", "assert", "a", ".", "weight", ".", "grad", "is", "None", "\n", "assert", "a", ".", "bias", ".", "grad", "is", "None", "\n", "assert", "b", ".", "weight", ".", "grad", "is", "None", "\n", "assert", "b", ".", "bias", ".", "grad", "is", "None", "\n", "copy_param", ".", "copy_grad", "(", "target_link", "=", "b", ",", "source_link", "=", "a", ")", "\n", "assert", "a", ".", "weight", ".", "grad", "is", "None", "\n", "assert", "a", ".", "bias", ".", "grad", "is", "None", "\n", "assert", "b", ".", "weight", ".", "grad", "is", "None", "\n", "assert", "b", ".", "bias", ".", "grad", "is", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_clip_l2_grad_norm._get_grad_vector": [[12, 15], ["numpy.concatenate", "p.grad.cpu().numpy().ravel().copy", "model.parameters", "p.grad.cpu().numpy().ravel", "p.grad.cpu().numpy", "p.grad.cpu"], "function", ["None"], ["def", "_get_grad_vector", "(", "model", ")", ":", "\n", "    ", "return", "np", ".", "concatenate", "(", "\n", "[", "p", ".", "grad", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "ravel", "(", ")", ".", "copy", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_clip_l2_grad_norm._test_clip_l2_grad_norm_": [[18, 68], ["torch.nn.Sequential().to", "torch.rand().to", "test_clip_l2_grad_norm._test_clip_l2_grad_norm_.backward"], "function", ["None"], ["", "def", "_test_clip_l2_grad_norm_", "(", "gpu", ")", ":", "\n", "    ", "if", "gpu", ">=", "0", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2", ",", "10", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "10", ",", "3", ")", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "x", "=", "torch", ".", "rand", "(", "7", ",", "2", ")", ".", "to", "(", "device", ")", "\n", "\n", "def", "backward", "(", ")", ":", "\n", "        ", "model", ".", "zero_grad", "(", ")", "\n", "loss", "=", "model", "(", "x", ")", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "", "backward", "(", ")", "\n", "raw_grads", "=", "_get_grad_vector", "(", "model", ")", "\n", "\n", "# Threshold large enough not to affect grads", "\n", "th", "=", "10000", "\n", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "th", ")", "\n", "clipped_grads", "=", "_get_grad_vector", "(", "model", ")", "\n", "\n", "backward", "(", ")", "\n", "clip_l2_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "th", ")", "\n", "our_clipped_grads", "=", "_get_grad_vector", "(", "model", ")", "\n", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "raw_grads", ",", "clipped_grads", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "raw_grads", ",", "our_clipped_grads", ")", "\n", "\n", "# Threshold small enough to affect grads", "\n", "th", "=", "1e-2", "\n", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "th", ")", "\n", "clipped_grads", "=", "_get_grad_vector", "(", "model", ")", "\n", "\n", "backward", "(", ")", "\n", "clip_l2_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "th", ")", "\n", "our_clipped_grads", "=", "_get_grad_vector", "(", "model", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "np", ".", "testing", ".", "assert_allclose", "(", "raw_grads", ",", "clipped_grads", ",", "rtol", "=", "1e-5", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "np", ".", "testing", ".", "assert_allclose", "(", "raw_grads", ",", "our_clipped_grads", ",", "rtol", "=", "1e-5", ")", "\n", "\n", "", "np", ".", "testing", ".", "assert_allclose", "(", "clipped_grads", ",", "our_clipped_grads", ",", "rtol", "=", "1e-5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_clip_l2_grad_norm.test_clip_l2_grad_norm_cpu": [[70, 72], ["test_clip_l2_grad_norm._test_clip_l2_grad_norm_"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_clip_l2_grad_norm._test_clip_l2_grad_norm_"], ["", "def", "test_clip_l2_grad_norm_cpu", "(", ")", ":", "\n", "    ", "_test_clip_l2_grad_norm_", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_clip_l2_grad_norm.test_clip_l2_grad_norm_gpu": [[74, 77], ["test_clip_l2_grad_norm._test_clip_l2_grad_norm_"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_clip_l2_grad_norm._test_clip_l2_grad_norm_"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_clip_l2_grad_norm_gpu", "(", ")", ":", "\n", "    ", "_test_clip_l2_grad_norm_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_clip_l2_grad_norm.test_clip_l2_grad_norm_speed": [[79, 115], ["logging.getLogger", "torch.nn.Sequential", "torch.rand", "test_clip_l2_grad_norm._test_clip_l2_grad_norm_.backward"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_clip_l2_grad_norm_speed", "(", ")", ":", "\n", "    ", "logger", "=", "getLogger", "(", "__name__", ")", "\n", "\n", "# Speed difference is large when model is large", "\n", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2", ",", "1000", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1000", ",", "1000", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1000", ",", "3", ")", ",", "\n", ")", "\n", "x", "=", "torch", ".", "rand", "(", "7", ",", "2", ")", "\n", "\n", "def", "backward", "(", ")", ":", "\n", "        ", "model", ".", "zero_grad", "(", ")", "\n", "loss", "=", "model", "(", "x", ")", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# Threshold large enough not to affect grads", "\n", "", "th", "=", "10000", "\n", "backward", "(", ")", "\n", "\n", "def", "torch_clip", "(", ")", ":", "\n", "        ", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "th", ")", "\n", "\n", "", "torch_time", "=", "timeit", ".", "timeit", "(", "torch_clip", ",", "number", "=", "100", ")", "\n", "logger", ".", "debug", "(", "\"torch.nn.utils.clip_grad_norm_ took %s\"", ",", "torch_time", ")", "\n", "\n", "def", "our_clip", "(", ")", ":", "\n", "        ", "clip_l2_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "th", ")", "\n", "\n", "", "our_time", "=", "timeit", ".", "timeit", "(", "our_clip", ",", "number", "=", "100", ")", "\n", "logger", ".", "debug", "(", "\"pfrl.misc.clip_l2_grad_norm_ took %s\"", ",", "our_time", ")", "\n", "\n", "assert", "our_time", "<", "torch_time", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_stoppable_thread.TestStoppableThread.test_stoppable_thread": [[8, 15], ["threading.Event", "pfrl.utils.StoppableThread", "test_stoppable_thread.TestStoppableThread.assertFalse", "pfrl.utils.StoppableThread.stop", "test_stoppable_thread.TestStoppableThread.assertTrue", "test_stoppable_thread.TestStoppableThread.assertTrue", "pfrl.utils.StoppableThread.is_stopped", "threading.Event.is_set", "pfrl.utils.StoppableThread.is_stopped"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.stoppable_thread.StoppableThread.stop", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.stoppable_thread.StoppableThread.is_stopped", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.stoppable_thread.StoppableThread.is_stopped"], ["    ", "def", "test_stoppable_thread", "(", "self", ")", ":", "\n", "        ", "stop_event", "=", "threading", ".", "Event", "(", ")", "\n", "thread", "=", "StoppableThread", "(", "stop_event", "=", "stop_event", ")", "\n", "self", ".", "assertFalse", "(", "thread", ".", "is_stopped", "(", ")", ")", "\n", "thread", ".", "stop", "(", ")", "\n", "self", ".", "assertTrue", "(", "stop_event", ".", "is_set", "(", ")", ")", "\n", "self", ".", "assertTrue", "(", "thread", ".", "is_stopped", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadDQN.setup": [[17, 20], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setup", "(", "self", ",", "pretrained_type", ")", ":", "\n", "        ", "self", ".", "pretrained_type", "=", "pretrained_type", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadDQN._test_load_dqn": [[21, 72], ["torch.nn.Sequential", "pfrl.optimizers.RMSpropEpsInsideSqrt", "pfrl.optimizers.RMSpropEpsInsideSqrt", "pfrl.optimizers.RMSpropEpsInsideSqrt", "pfrl.optimizers.RMSpropEpsInsideSqrt", "pfrl.replay_buffers.ReplayBuffer", "pfrl.replay_buffers.ReplayBuffer", "pfrl.explorers.LinearDecayEpsilonGreedy", "pfrl.explorers.LinearDecayEpsilonGreedy", "pfrl.agents.DQN", "pfrl.agents.DQN", "pfrl.utils.download_model", "pfrl.utils.download_model", "pfrl.agents.DQN.load", "os.environ.get", "pfrl.LargeAtariCNN", "pfrl.LargeAtariCNN", "pfrl.initializers.init_chainer_default", "pfrl.initializers.init_chainer_default", "DiscreteActionValueHead", "torch.nn.Sequential.parameters", "torch.nn.Linear", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models.download_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models.download_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.chainer_default.init_chainer_default", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.chainer_default.init_chainer_default"], ["", "def", "_test_load_dqn", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "from", "pfrl", ".", "q_functions", "import", "DiscreteActionValueHead", "\n", "\n", "n_actions", "=", "4", "\n", "q_func", "=", "nn", ".", "Sequential", "(", "\n", "pnn", ".", "LargeAtariCNN", "(", ")", ",", "\n", "init_chainer_default", "(", "nn", ".", "Linear", "(", "512", ",", "n_actions", ")", ")", ",", "\n", "DiscreteActionValueHead", "(", ")", ",", "\n", ")", "\n", "\n", "# Use the same hyperparameters as the Nature paper", "\n", "\n", "opt", "=", "pfrl", ".", "optimizers", ".", "RMSpropEpsInsideSqrt", "(", "\n", "q_func", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "2.5e-4", ",", "\n", "alpha", "=", "0.95", ",", "\n", "momentum", "=", "0.0", ",", "\n", "eps", "=", "1e-2", ",", "\n", "centered", "=", "True", ",", "\n", ")", "\n", "\n", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "100", ")", "\n", "\n", "explorer", "=", "explorers", ".", "LinearDecayEpsilonGreedy", "(", "\n", "start_epsilon", "=", "1.0", ",", "\n", "end_epsilon", "=", "0.1", ",", "\n", "decay_steps", "=", "10", "**", "6", ",", "\n", "random_action_func", "=", "lambda", ":", "np", ".", "random", ".", "randint", "(", "4", ")", ",", "\n", ")", "\n", "\n", "agent", "=", "agents", ".", "DQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.99", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "50", ",", "\n", "target_update_interval", "=", "10", "**", "4", ",", "\n", "clip_delta", "=", "True", ",", "\n", "update_interval", "=", "4", ",", "\n", "batch_accumulator", "=", "\"sum\"", ",", "\n", "phi", "=", "lambda", "x", ":", "x", ",", "\n", ")", "\n", "\n", "downloaded_model", ",", "exists", "=", "download_model", "(", "\n", "\"DQN\"", ",", "\"BreakoutNoFrameskip-v4\"", ",", "model_type", "=", "self", ".", "pretrained_type", "\n", ")", "\n", "agent", ".", "load", "(", "downloaded_model", ")", "\n", "if", "os", ".", "environ", ".", "get", "(", "\"PFRL_ASSERT_DOWNLOADED_MODEL_IS_CACHED\"", ")", ":", "\n", "            ", "assert", "exists", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadDQN.test_cpu": [[73, 75], ["test_pretrained_models.TestLoadDQN._test_load_dqn"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadDQN._test_load_dqn"], ["", "", "def", "test_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_load_dqn", "(", "gpu", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadDQN.test_gpu": [[76, 79], ["test_pretrained_models.TestLoadDQN._test_load_dqn"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadDQN._test_load_dqn"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_load_dqn", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadIQN.setup": [[83, 86], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setup", "(", "self", ",", "pretrained_type", ")", ":", "\n", "        ", "self", ".", "pretrained_type", "=", "pretrained_type", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadIQN._test_load_iqn": [[87, 145], ["pfrl.agents.iqn.ImplicitQuantileQFunction", "pfrl.agents.iqn.ImplicitQuantileQFunction", "pfrl.agents.iqn.ImplicitQuantileQFunction", "pfrl.agents.iqn.ImplicitQuantileQFunction", "torch.optim.Adam", "pfrl.replay_buffers.ReplayBuffer", "pfrl.replay_buffers.ReplayBuffer", "pfrl.explorers.LinearDecayEpsilonGreedy", "pfrl.explorers.LinearDecayEpsilonGreedy", "pfrl.agents.IQN", "pfrl.agents.IQN", "pfrl.utils.download_model", "pfrl.utils.download_model", "pfrl.agents.IQN.load", "os.environ.get", "pfrl.agents.iqn.ImplicitQuantileQFunction.parameters", "pfrl.agents.iqn.ImplicitQuantileQFunction.parameters", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Flatten", "pfrl.agents.iqn.CosineBasisLinear", "pfrl.agents.iqn.CosineBasisLinear", "pfrl.agents.iqn.CosineBasisLinear", "pfrl.agents.iqn.CosineBasisLinear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models.download_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models.download_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], ["", "def", "_test_load_iqn", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "n_actions", "=", "4", "\n", "q_func", "=", "pfrl", ".", "agents", ".", "iqn", ".", "ImplicitQuantileQFunction", "(", "\n", "psi", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "4", ",", "32", ",", "8", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "4", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", ")", ",", "\n", "phi", "=", "nn", ".", "Sequential", "(", "\n", "pfrl", ".", "agents", ".", "iqn", ".", "CosineBasisLinear", "(", "64", ",", "3136", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", ",", "\n", "f", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "3136", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "n_actions", ")", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "# Use the same hyper parameters as https://arxiv.org/abs/1710.10044", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "q_func", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ",", "eps", "=", "1e-2", "/", "32", ")", "\n", "\n", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "100", ")", "\n", "\n", "explorer", "=", "explorers", ".", "LinearDecayEpsilonGreedy", "(", "\n", "start_epsilon", "=", "1.0", ",", "\n", "end_epsilon", "=", "0.1", ",", "\n", "decay_steps", "=", "10", "**", "6", ",", "\n", "random_action_func", "=", "lambda", ":", "np", ".", "random", ".", "randint", "(", "4", ")", ",", "\n", ")", "\n", "\n", "agent", "=", "agents", ".", "IQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.99", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "50", ",", "\n", "target_update_interval", "=", "10", "**", "4", ",", "\n", "update_interval", "=", "4", ",", "\n", "batch_accumulator", "=", "\"mean\"", ",", "\n", "phi", "=", "lambda", "x", ":", "x", ",", "\n", "quantile_thresholds_N", "=", "64", ",", "\n", "quantile_thresholds_N_prime", "=", "64", ",", "\n", "quantile_thresholds_K", "=", "32", ",", "\n", ")", "\n", "\n", "downloaded_model", ",", "exists", "=", "download_model", "(", "\n", "\"IQN\"", ",", "\"BreakoutNoFrameskip-v4\"", ",", "model_type", "=", "self", ".", "pretrained_type", "\n", ")", "\n", "agent", ".", "load", "(", "downloaded_model", ")", "\n", "if", "os", ".", "environ", ".", "get", "(", "\"PFRL_ASSERT_DOWNLOADED_MODEL_IS_CACHED\"", ")", ":", "\n", "            ", "assert", "exists", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadIQN.test_cpu": [[146, 148], ["test_pretrained_models.TestLoadIQN._test_load_iqn"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadIQN._test_load_iqn"], ["", "", "def", "test_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_load_iqn", "(", "gpu", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadIQN.test_gpu": [[149, 152], ["test_pretrained_models.TestLoadIQN._test_load_iqn"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadIQN._test_load_iqn"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_load_iqn", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadRainbow.setup": [[156, 159], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setup", "(", "self", ",", "pretrained_type", ")", ":", "\n", "        ", "self", ".", "pretrained_type", "=", "pretrained_type", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadRainbow._test_load_rainbow": [[160, 189], ["DistributionalDuelingDQN", "pfrl.to_factorized_noisy", "pfrl.to_factorized_noisy", "pfrl.explorers.Greedy", "pfrl.explorers.Greedy", "torch.optim.Adam", "pfrl.replay_buffers.ReplayBuffer", "pfrl.replay_buffers.ReplayBuffer", "pfrl.agents.CategoricalDoubleDQN", "pfrl.agents.CategoricalDoubleDQN", "pfrl.utils.download_model", "pfrl.utils.download_model", "pfrl.agents.CategoricalDoubleDQN.load", "os.environ.get", "DistributionalDuelingDQN.parameters"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.noisy_chain.to_factorized_noisy", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.noisy_chain.to_factorized_noisy", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models.download_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models.download_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], ["", "def", "_test_load_rainbow", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "from", "pfrl", ".", "q_functions", "import", "DistributionalDuelingDQN", "\n", "\n", "q_func", "=", "DistributionalDuelingDQN", "(", "4", ",", "51", ",", "-", "10", ",", "10", ")", "\n", "pnn", ".", "to_factorized_noisy", "(", "q_func", ",", "sigma_scale", "=", "0.5", ")", "\n", "explorer", "=", "explorers", ".", "Greedy", "(", ")", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "q_func", ".", "parameters", "(", ")", ",", "6.25e-5", ",", "eps", "=", "1.5", "*", "10", "**", "-", "4", ")", "\n", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "100", ")", "\n", "agent", "=", "agents", ".", "CategoricalDoubleDQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.99", ",", "\n", "explorer", "=", "explorer", ",", "\n", "minibatch_size", "=", "32", ",", "\n", "replay_start_size", "=", "50", ",", "\n", "target_update_interval", "=", "32000", ",", "\n", "update_interval", "=", "4", ",", "\n", "batch_accumulator", "=", "\"mean\"", ",", "\n", "phi", "=", "lambda", "x", ":", "x", ",", "\n", ")", "\n", "\n", "downloaded_model", ",", "exists", "=", "download_model", "(", "\n", "\"Rainbow\"", ",", "\"BreakoutNoFrameskip-v4\"", ",", "model_type", "=", "self", ".", "pretrained_type", "\n", ")", "\n", "agent", ".", "load", "(", "downloaded_model", ")", "\n", "if", "os", ".", "environ", ".", "get", "(", "\"PFRL_ASSERT_DOWNLOADED_MODEL_IS_CACHED\"", ")", ":", "\n", "            ", "assert", "exists", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadRainbow.test_cpu": [[190, 192], ["test_pretrained_models.TestLoadRainbow._test_load_rainbow"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadRainbow._test_load_rainbow"], ["", "", "def", "test_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_load_rainbow", "(", "gpu", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadRainbow.test_gpu": [[193, 196], ["test_pretrained_models.TestLoadRainbow._test_load_rainbow"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadRainbow._test_load_rainbow"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_load_rainbow", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadA3C.setup": [[200, 203], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setup", "(", "self", ",", "pretrained_type", ")", ":", "\n", "        ", "self", ".", "pretrained_type", "=", "pretrained_type", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadA3C.test_load_a3c": [[204, 239], ["torch.nn.Sequential", "SharedRMSpropEpsInsideSqrt", "pfrl.agents.A3C", "pfrl.agents.A3C", "pfrl.utils.download_model", "pfrl.utils.download_model", "pfrl.agents.A3C.load", "os.environ.get", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Flatten", "torch.nn.Linear", "torch.nn.ReLU", "pfrl.nn.Branched", "pfrl.nn.Branched", "pfrl.nn.Branched", "pfrl.nn.Branched", "torch.nn.Sequential.parameters", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "SoftmaxCategoricalHead"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models.download_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models.download_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], ["", "def", "test_load_a3c", "(", "self", ")", ":", "\n", "        ", "from", "pfrl", ".", "policies", "import", "SoftmaxCategoricalHead", "\n", "\n", "obs_size", "=", "4", "\n", "n_actions", "=", "4", "\n", "a3c_model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "obs_size", ",", "16", ",", "8", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "4", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "2592", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "pfrl", ".", "nn", ".", "Branched", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "256", ",", "n_actions", ")", ",", "\n", "SoftmaxCategoricalHead", "(", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "1", ")", ",", "\n", ")", ",", "\n", ")", "\n", "from", "pfrl", ".", "optimizers", "import", "SharedRMSpropEpsInsideSqrt", "\n", "\n", "opt", "=", "SharedRMSpropEpsInsideSqrt", "(", "\n", "a3c_model", ".", "parameters", "(", ")", ",", "lr", "=", "7e-4", ",", "eps", "=", "1e-1", ",", "alpha", "=", "0.99", "\n", ")", "\n", "agent", "=", "agents", ".", "A3C", "(", "\n", "a3c_model", ",", "opt", ",", "t_max", "=", "5", ",", "gamma", "=", "0.99", ",", "beta", "=", "1e-2", ",", "phi", "=", "lambda", "x", ":", "x", "\n", ")", "\n", "downloaded_model", ",", "exists", "=", "download_model", "(", "\n", "\"A3C\"", ",", "\"BreakoutNoFrameskip-v4\"", ",", "model_type", "=", "self", ".", "pretrained_type", "\n", ")", "\n", "agent", ".", "load", "(", "downloaded_model", ")", "\n", "if", "os", ".", "environ", ".", "get", "(", "\"PFRL_ASSERT_DOWNLOADED_MODEL_IS_CACHED\"", ")", ":", "\n", "            ", "assert", "exists", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadDDPG.setup": [[243, 246], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setup", "(", "self", ",", "pretrained_type", ")", ":", "\n", "        ", "self", ".", "pretrained_type", "=", "pretrained_type", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadDDPG._test_load_ddpg": [[247, 306], ["torch.nn.Sequential", "torch.nn.Sequential", "torch.optim.Adam", "torch.optim.Adam", "pfrl.explorers.AdditiveGaussian", "pfrl.explorers.AdditiveGaussian", "pfrl.agents.DDPG", "pfrl.agents.DDPG", "pfrl.utils.download_model", "pfrl.utils.download_model", "pfrl.agents.DDPG.load", "os.environ.get", "ConcatObsAndAction", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "BoundByTanh", "DeterministicHead", "torch.nn.Sequential.parameters", "torch.nn.Sequential.parameters", "pfrl.replay_buffers.ReplayBuffer", "pfrl.replay_buffers.ReplayBuffer"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models.download_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models.download_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], ["", "def", "_test_load_ddpg", "(", "self", ",", "gpu", ")", ":", "\n", "\n", "        ", "obs_size", "=", "11", "\n", "action_size", "=", "3", "\n", "from", "pfrl", ".", "nn", "import", "ConcatObsAndAction", "\n", "\n", "q_func", "=", "nn", ".", "Sequential", "(", "\n", "ConcatObsAndAction", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "obs_size", "+", "action_size", ",", "400", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "400", ",", "300", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "300", ",", "1", ")", ",", "\n", ")", "\n", "from", "pfrl", ".", "nn", "import", "BoundByTanh", "\n", "from", "pfrl", ".", "policies", "import", "DeterministicHead", "\n", "\n", "policy", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "400", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "400", ",", "300", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "300", ",", "action_size", ")", ",", "\n", "BoundByTanh", "(", "low", "=", "[", "-", "1.0", ",", "-", "1.0", ",", "-", "1.0", "]", ",", "high", "=", "[", "1.0", ",", "1.0", ",", "1.0", "]", ")", ",", "\n", "DeterministicHead", "(", ")", ",", "\n", ")", "\n", "\n", "opt_a", "=", "torch", ".", "optim", ".", "Adam", "(", "policy", ".", "parameters", "(", ")", ")", "\n", "opt_c", "=", "torch", ".", "optim", ".", "Adam", "(", "q_func", ".", "parameters", "(", ")", ")", "\n", "\n", "explorer", "=", "explorers", ".", "AdditiveGaussian", "(", "\n", "scale", "=", "0.1", ",", "low", "=", "[", "-", "1.0", ",", "-", "1.0", ",", "-", "1.0", "]", ",", "high", "=", "[", "1.0", ",", "1.0", ",", "1.0", "]", "\n", ")", "\n", "\n", "agent", "=", "agents", ".", "DDPG", "(", "\n", "policy", ",", "\n", "q_func", ",", "\n", "opt_a", ",", "\n", "opt_c", ",", "\n", "replay_buffers", ".", "ReplayBuffer", "(", "100", ")", ",", "\n", "gamma", "=", "0.99", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "1000", ",", "\n", "target_update_method", "=", "\"soft\"", ",", "\n", "target_update_interval", "=", "1", ",", "\n", "update_interval", "=", "1", ",", "\n", "soft_update_tau", "=", "5e-3", ",", "\n", "n_times_update", "=", "1", ",", "\n", "gpu", "=", "gpu", ",", "\n", "minibatch_size", "=", "100", ",", "\n", "burnin_action_func", "=", "None", ",", "\n", ")", "\n", "\n", "downloaded_model", ",", "exists", "=", "download_model", "(", "\n", "\"DDPG\"", ",", "\"Hopper-v2\"", ",", "model_type", "=", "self", ".", "pretrained_type", "\n", ")", "\n", "agent", ".", "load", "(", "downloaded_model", ")", "\n", "if", "os", ".", "environ", ".", "get", "(", "\"PFRL_ASSERT_DOWNLOADED_MODEL_IS_CACHED\"", ")", ":", "\n", "            ", "assert", "exists", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadDDPG.test_cpu": [[307, 309], ["test_pretrained_models.TestLoadDDPG._test_load_ddpg"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadDDPG._test_load_ddpg"], ["", "", "def", "test_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_load_ddpg", "(", "gpu", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadDDPG.test_gpu": [[310, 313], ["test_pretrained_models.TestLoadDDPG._test_load_ddpg"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadDDPG._test_load_ddpg"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_load_ddpg", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadTRPO.setup": [[317, 320], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setup", "(", "self", ",", "pretrained_type", ")", ":", "\n", "        ", "self", ".", "pretrained_type", "=", "pretrained_type", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadTRPO._test_load_trpo": [[321, 369], ["torch.nn.Sequential", "torch.nn.Sequential", "torch.optim.Adam", "pfrl.agents.TRPO", "pfrl.agents.TRPO", "pfrl.utils.download_model", "pfrl.utils.download_model", "pfrl.agents.TRPO.load", "os.environ.get", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear", "pfrl.policies.GaussianHeadWithStateIndependentCovariance", "pfrl.policies.GaussianHeadWithStateIndependentCovariance", "pfrl.policies.GaussianHeadWithStateIndependentCovariance", "pfrl.policies.GaussianHeadWithStateIndependentCovariance", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Sequential.parameters", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models.download_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models.download_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], ["", "def", "_test_load_trpo", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "obs_size", "=", "11", "\n", "action_size", "=", "3", "\n", "\n", "policy", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "action_size", ")", ",", "\n", "pfrl", ".", "policies", ".", "GaussianHeadWithStateIndependentCovariance", "(", "\n", "action_size", "=", "action_size", ",", "\n", "var_type", "=", "\"diagonal\"", ",", "\n", "var_func", "=", "lambda", "x", ":", "torch", ".", "exp", "(", "2", "*", "x", ")", ",", "# Parameterize log std", "\n", "var_param_init", "=", "0", ",", "# log std = 0 => std = 1", "\n", ")", ",", "\n", ")", "\n", "\n", "vf", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "1", ")", ",", "\n", ")", "\n", "vf_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "vf", ".", "parameters", "(", ")", ")", "\n", "\n", "agent", "=", "agents", ".", "TRPO", "(", "\n", "policy", "=", "policy", ",", "\n", "vf", "=", "vf", ",", "\n", "vf_optimizer", "=", "vf_opt", ",", "\n", "gpu", "=", "gpu", ",", "\n", "update_interval", "=", "5000", ",", "\n", "max_kl", "=", "0.01", ",", "\n", "conjugate_gradient_max_iter", "=", "20", ",", "\n", "conjugate_gradient_damping", "=", "1e-1", ",", "\n", "gamma", "=", "0.995", ",", "\n", "lambd", "=", "0.97", ",", "\n", "vf_epochs", "=", "5", ",", "\n", "entropy_coef", "=", "0", ",", "\n", ")", "\n", "\n", "downloaded_model", ",", "exists", "=", "download_model", "(", "\n", "\"TRPO\"", ",", "\"Hopper-v2\"", ",", "model_type", "=", "self", ".", "pretrained_type", "\n", ")", "\n", "agent", ".", "load", "(", "downloaded_model", ")", "\n", "if", "os", ".", "environ", ".", "get", "(", "\"PFRL_ASSERT_DOWNLOADED_MODEL_IS_CACHED\"", ")", ":", "\n", "            ", "assert", "exists", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadTRPO.test_cpu": [[370, 372], ["test_pretrained_models.TestLoadTRPO._test_load_trpo"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadTRPO._test_load_trpo"], ["", "", "def", "test_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_load_trpo", "(", "gpu", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadTRPO.test_gpu": [[373, 376], ["test_pretrained_models.TestLoadTRPO._test_load_trpo"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadTRPO._test_load_trpo"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_load_trpo", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadPPO._test_load_ppo": [[379, 430], ["torch.nn.Sequential", "torch.nn.Sequential", "pfrl.Branched", "pfrl.Branched", "torch.optim.Adam", "pfrl.agents.PPO", "pfrl.agents.PPO", "pfrl.utils.download_model", "pfrl.utils.download_model", "pfrl.agents.PPO.load", "os.environ.get", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear", "GaussianHeadWithStateIndependentCovariance", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear", "pfrl.Branched.parameters", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models.download_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.pretrained_models.download_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], ["    ", "def", "_test_load_ppo", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "obs_size", "=", "11", "\n", "action_size", "=", "3", "\n", "from", "pfrl", ".", "policies", "import", "GaussianHeadWithStateIndependentCovariance", "\n", "\n", "policy", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "action_size", ")", ",", "\n", "GaussianHeadWithStateIndependentCovariance", "(", "\n", "action_size", "=", "action_size", ",", "\n", "var_type", "=", "\"diagonal\"", ",", "\n", "var_func", "=", "lambda", "x", ":", "torch", ".", "exp", "(", "2", "*", "x", ")", ",", "# Parameterize log std", "\n", "var_param_init", "=", "0", ",", "# log std = 0 => std = 1", "\n", ")", ",", "\n", ")", "\n", "\n", "vf", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "1", ")", ",", "\n", ")", "\n", "\n", "model", "=", "pnn", ".", "Branched", "(", "policy", ",", "vf", ")", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "3e-4", ",", "eps", "=", "1e-5", ")", "\n", "\n", "agent", "=", "agents", ".", "PPO", "(", "\n", "model", ",", "\n", "opt", ",", "\n", "obs_normalizer", "=", "None", ",", "\n", "gpu", "=", "gpu", ",", "\n", "update_interval", "=", "2048", ",", "\n", "minibatch_size", "=", "64", ",", "\n", "epochs", "=", "10", ",", "\n", "clip_eps_vf", "=", "None", ",", "\n", "entropy_coef", "=", "0", ",", "\n", "standardize_advantages", "=", "True", ",", "\n", "gamma", "=", "0.995", ",", "\n", "lambd", "=", "0.97", ",", "\n", ")", "\n", "\n", "downloaded_model", ",", "exists", "=", "download_model", "(", "\n", "\"PPO\"", ",", "\"Hopper-v2\"", ",", "model_type", "=", "\"final\"", "\n", ")", "\n", "agent", ".", "load", "(", "downloaded_model", ")", "\n", "if", "os", ".", "environ", ".", "get", "(", "\"PFRL_ASSERT_DOWNLOADED_MODEL_IS_CACHED\"", ")", ":", "\n", "            ", "assert", "exists", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadPPO.test_cpu": [[431, 433], ["test_pretrained_models.TestLoadPPO._test_load_ppo"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadPPO._test_load_ppo"], ["", "", "def", "test_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_load_ppo", "(", "gpu", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadPPO.test_gpu": [[434, 437], ["test_pretrained_models.TestLoadPPO._test_load_ppo"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadPPO._test_load_ppo"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_load_ppo", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadTD3.setup": [[441, 444], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setup", "(", "self", ",", "pretrained_type", ")", ":", "\n", "        ", "self", ".", "pretrained_type", "=", "pretrained_type", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadTD3._test_load_td3": [[445, 504], ["test_pretrained_models.TestLoadTD3._test_load_td3.make_q_func_with_optimizer"], "methods", ["None"], ["", "def", "_test_load_td3", "(", "self", ",", "gpu", ")", ":", "\n", "\n", "        ", "obs_size", "=", "11", "\n", "action_size", "=", "3", "\n", "\n", "def", "make_q_func_with_optimizer", "(", ")", ":", "\n", "            ", "q_func", "=", "nn", ".", "Sequential", "(", "\n", "pnn", ".", "ConcatObsAndAction", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "obs_size", "+", "action_size", ",", "400", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "400", ",", "300", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "300", ",", "1", ")", ",", "\n", ")", "\n", "q_func_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "q_func", ".", "parameters", "(", ")", ")", "\n", "return", "q_func", ",", "q_func_optimizer", "\n", "\n", "", "q_func1", ",", "q_func1_optimizer", "=", "make_q_func_with_optimizer", "(", ")", "\n", "q_func2", ",", "q_func2_optimizer", "=", "make_q_func_with_optimizer", "(", ")", "\n", "\n", "policy", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "400", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "400", ",", "300", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "300", ",", "action_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "pfrl", ".", "policies", ".", "DeterministicHead", "(", ")", ",", "\n", ")", "\n", "policy_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "policy", ".", "parameters", "(", ")", ")", "\n", "\n", "rbuf", "=", "replay_buffers", ".", "ReplayBuffer", "(", "100", ")", "\n", "explorer", "=", "explorers", ".", "AdditiveGaussian", "(", "\n", "scale", "=", "0.1", ",", "low", "=", "[", "-", "1.0", ",", "-", "1.0", ",", "-", "1.0", "]", ",", "high", "=", "[", "1.0", ",", "1.0", ",", "1.0", "]", "\n", ")", "\n", "\n", "agent", "=", "agents", ".", "TD3", "(", "\n", "policy", ",", "\n", "q_func1", ",", "\n", "q_func2", ",", "\n", "policy_optimizer", ",", "\n", "q_func1_optimizer", ",", "\n", "q_func2_optimizer", ",", "\n", "rbuf", ",", "\n", "gamma", "=", "0.99", ",", "\n", "soft_update_tau", "=", "5e-3", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "1000", ",", "\n", "gpu", "=", "gpu", ",", "\n", "minibatch_size", "=", "100", ",", "\n", "burnin_action_func", "=", "None", ",", "\n", ")", "\n", "\n", "downloaded_model", ",", "exists", "=", "download_model", "(", "\n", "\"TD3\"", ",", "\"Hopper-v2\"", ",", "model_type", "=", "self", ".", "pretrained_type", "\n", ")", "\n", "agent", ".", "load", "(", "downloaded_model", ")", "\n", "if", "os", ".", "environ", ".", "get", "(", "\"PFRL_ASSERT_DOWNLOADED_MODEL_IS_CACHED\"", ")", ":", "\n", "            ", "assert", "exists", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadTD3.test_cpu": [[505, 507], ["test_pretrained_models.TestLoadTD3._test_load_td3"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadTD3._test_load_td3"], ["", "", "def", "test_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_load_td3", "(", "gpu", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadTD3.test_gpu": [[508, 511], ["test_pretrained_models.TestLoadTD3._test_load_td3"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadTD3._test_load_td3"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_load_td3", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadSAC.setup": [[515, 518], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setup", "(", "self", ",", "pretrained_type", ")", ":", "\n", "        ", "self", ".", "pretrained_type", "=", "pretrained_type", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadSAC._test_load_sac": [[519, 592], ["torch.nn.Sequential", "torch.optim.Adam", "test_pretrained_models.TestLoadSAC._test_load_sac.make_q_func_with_optimizer"], "methods", ["None"], ["", "def", "_test_load_sac", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "obs_size", "=", "11", "\n", "action_size", "=", "3", "\n", "\n", "def", "squashed_diagonal_gaussian_head", "(", "x", ")", ":", "\n", "            ", "assert", "x", ".", "shape", "[", "-", "1", "]", "==", "action_size", "*", "2", "\n", "mean", ",", "log_scale", "=", "torch", ".", "chunk", "(", "x", ",", "2", ",", "dim", "=", "1", ")", "\n", "log_scale", "=", "torch", ".", "clamp", "(", "log_scale", ",", "-", "20.0", ",", "2.0", ")", "\n", "var", "=", "torch", ".", "exp", "(", "log_scale", "*", "2", ")", "\n", "from", "torch", "import", "distributions", "\n", "\n", "base_distribution", "=", "distributions", ".", "Independent", "(", "\n", "distributions", ".", "Normal", "(", "loc", "=", "mean", ",", "scale", "=", "torch", ".", "sqrt", "(", "var", ")", ")", ",", "1", "\n", ")", "\n", "# cache_size=1 is required for numerical stability", "\n", "return", "distributions", ".", "transformed_distribution", ".", "TransformedDistribution", "(", "\n", "base_distribution", ",", "\n", "[", "distributions", ".", "transforms", ".", "TanhTransform", "(", "cache_size", "=", "1", ")", "]", ",", "\n", ")", "\n", "\n", "", "from", "pfrl", ".", "nn", ".", "lmbda", "import", "Lambda", "\n", "\n", "policy", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "action_size", "*", "2", ")", ",", "\n", "Lambda", "(", "squashed_diagonal_gaussian_head", ")", ",", "\n", ")", "\n", "policy_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "policy", ".", "parameters", "(", ")", ",", "lr", "=", "3e-4", ")", "\n", "\n", "def", "make_q_func_with_optimizer", "(", ")", ":", "\n", "            ", "q_func", "=", "nn", ".", "Sequential", "(", "\n", "pfrl", ".", "nn", ".", "ConcatObsAndAction", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "obs_size", "+", "action_size", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "1", ")", ",", "\n", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "q_func", "[", "1", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "q_func", "[", "3", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "q_func", "[", "5", "]", ".", "weight", ")", "\n", "q_func_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "q_func", ".", "parameters", "(", ")", ",", "lr", "=", "3e-4", ")", "\n", "return", "q_func", ",", "q_func_optimizer", "\n", "\n", "", "q_func1", ",", "q_func1_optimizer", "=", "make_q_func_with_optimizer", "(", ")", "\n", "q_func2", ",", "q_func2_optimizer", "=", "make_q_func_with_optimizer", "(", ")", "\n", "\n", "agent", "=", "agents", ".", "SoftActorCritic", "(", "\n", "policy", ",", "\n", "q_func1", ",", "\n", "q_func2", ",", "\n", "policy_optimizer", ",", "\n", "q_func1_optimizer", ",", "\n", "q_func2_optimizer", ",", "\n", "replay_buffers", ".", "ReplayBuffer", "(", "100", ")", ",", "\n", "gamma", "=", "0.99", ",", "\n", "replay_start_size", "=", "1000", ",", "\n", "gpu", "=", "gpu", ",", "\n", "minibatch_size", "=", "256", ",", "\n", "burnin_action_func", "=", "None", ",", "\n", "entropy_target", "=", "-", "3", ",", "\n", "temperature_optimizer_lr", "=", "3e-4", ",", "\n", ")", "\n", "\n", "downloaded_model", ",", "exists", "=", "download_model", "(", "\n", "\"SAC\"", ",", "\"Hopper-v2\"", ",", "model_type", "=", "self", ".", "pretrained_type", "\n", ")", "\n", "agent", ".", "load", "(", "downloaded_model", ")", "\n", "if", "os", ".", "environ", ".", "get", "(", "\"PFRL_ASSERT_DOWNLOADED_MODEL_IS_CACHED\"", ")", ":", "\n", "            ", "assert", "exists", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadSAC.test_cpu": [[593, 595], ["test_pretrained_models.TestLoadSAC._test_load_sac"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadSAC._test_load_sac"], ["", "", "def", "test_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_load_sac", "(", "gpu", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadSAC.test_gpu": [[596, 599], ["test_pretrained_models.TestLoadSAC._test_load_sac"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_pretrained_models.TestLoadSAC._test_load_sac"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_load_sac", "(", "gpu", "=", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_async.TestAsync.test_run_async": [[12, 22], ["multiprocessing.Value", "pfrl.utils.async_.run_async", "test_async.TestAsync.assertEqual", "range", "multiprocessing.Value.get_lock"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.async_.run_async"], ["    ", "def", "test_run_async", "(", "self", ")", ":", "\n", "        ", "counter", "=", "mp", ".", "Value", "(", "\"l\"", ",", "0", ")", "\n", "\n", "def", "run_func", "(", "process_idx", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "1000", ")", ":", "\n", "                ", "with", "counter", ".", "get_lock", "(", ")", ":", "\n", "                    ", "counter", ".", "value", "+=", "1", "\n", "\n", "", "", "", "async_", ".", "run_async", "(", "4", ",", "run_func", ")", "\n", "self", ".", "assertEqual", "(", "counter", ".", "value", ",", "4000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_async.TestAsync.test_run_async_exit_code": [[23, 50], ["sys.exit", "os.kill", "warnings.catch_warnings", "pfrl.utils.async_.run_async", "test_async.TestAsync.assertEqual", "warnings.catch_warnings", "pfrl.utils.async_.run_async", "test_async.TestAsync.assertEqual", "os.getpid", "sum", "sum", "issubclass", "issubclass"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.async_.run_async", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.async_.run_async", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "def", "test_run_async_exit_code", "(", "self", ")", ":", "\n", "        ", "def", "run_with_exit_code_0", "(", "process_idx", ")", ":", "\n", "            ", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "def", "run_with_exit_code_11", "(", "process_idx", ")", ":", "\n", "            ", "os", ".", "kill", "(", "os", ".", "getpid", "(", ")", ",", "signal", ".", "SIGSEGV", ")", "\n", "\n", "", "with", "warnings", ".", "catch_warnings", "(", "record", "=", "True", ")", "as", "ws", ":", "\n", "            ", "async_", ".", "run_async", "(", "4", ",", "run_with_exit_code_0", ")", "\n", "# There should be no AbnormalExitWarning", "\n", "self", ".", "assertEqual", "(", "\n", "sum", "(", "\n", "1", "if", "issubclass", "(", "w", ".", "category", ",", "async_", ".", "AbnormalExitWarning", ")", "else", "0", "\n", "for", "w", "in", "ws", "\n", ")", ",", "\n", "0", ",", "\n", ")", "\n", "\n", "", "with", "warnings", ".", "catch_warnings", "(", "record", "=", "True", ")", "as", "ws", ":", "\n", "            ", "async_", ".", "run_async", "(", "4", ",", "run_with_exit_code_11", ")", "\n", "# There should be 4 AbnormalExitWarning", "\n", "self", ".", "assertEqual", "(", "\n", "sum", "(", "\n", "1", "if", "issubclass", "(", "w", ".", "category", ",", "async_", ".", "AbnormalExitWarning", ")", "else", "0", "\n", "for", "w", "in", "ws", "\n", ")", ",", "\n", "4", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_is_return_code_zero.TestIsReturnCodeZero.test": [[7, 12], ["test_is_return_code_zero.TestIsReturnCodeZero.assertTrue", "test_is_return_code_zero.TestIsReturnCodeZero.assertFalse", "test_is_return_code_zero.TestIsReturnCodeZero.assertFalse", "pfrl.utils.is_return_code_zero", "pfrl.utils.is_return_code_zero", "pfrl.utils.is_return_code_zero"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.is_return_code_zero.is_return_code_zero", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.is_return_code_zero.is_return_code_zero", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.is_return_code_zero.is_return_code_zero"], ["    ", "def", "test", "(", "self", ")", ":", "\n", "# Assume ls command exists", "\n", "        ", "self", ".", "assertTrue", "(", "pfrl", ".", "utils", ".", "is_return_code_zero", "(", "[", "\"ls\"", "]", ")", ")", "\n", "self", ".", "assertFalse", "(", "pfrl", ".", "utils", ".", "is_return_code_zero", "(", "[", "\"ls --nonexistentoption\"", "]", ")", ")", "\n", "self", ".", "assertFalse", "(", "pfrl", ".", "utils", ".", "is_return_code_zero", "(", "[", "\"nonexistentcommand\"", "]", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_conjugate_gradient.TestConjugateGradient.setUp": [[10, 13], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "n", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_conjugate_gradient.TestConjugateGradient._test": [[14, 29], ["torch.normal", "torch.normal.to", "torch.matmul", "torch.normal", "torch.normal.to", "torch.matmul", "pfrl.utils.conjugate_gradient", "pfrl.testing.torch_assert_allclose", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.conjugate_gradient.conjugate_gradient", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose"], ["", "def", "_test", "(", "self", ",", "device", ")", ":", "\n", "# A must be symmetric and positive-definite", "\n", "        ", "random_mat", "=", "torch", ".", "normal", "(", "0", ",", "1", ",", "size", "=", "(", "self", ".", "n", ",", "self", ".", "n", ")", ")", "\n", "random_mat", ".", "to", "(", "device", ")", "\n", "A", "=", "torch", ".", "matmul", "(", "random_mat", ",", "random_mat", ".", "T", ")", "\n", "x_ans", "=", "torch", ".", "normal", "(", "0", ",", "1", ",", "size", "=", "(", "self", ".", "n", ",", ")", ")", "\n", "x_ans", ".", "to", "(", "device", ")", "\n", "b", "=", "torch", ".", "matmul", "(", "A", ",", "x_ans", ")", "\n", "\n", "def", "A_product_func", "(", "vec", ")", ":", "\n", "            ", "assert", "vec", ".", "shape", "==", "b", ".", "shape", "\n", "return", "torch", ".", "matmul", "(", "A", ",", "vec", ")", "\n", "\n", "", "x", "=", "pfrl", ".", "utils", ".", "conjugate_gradient", "(", "A_product_func", ",", "b", ")", "\n", "torch_assert_allclose", "(", "x", ",", "x_ans", ",", "rtol", "=", "1e-1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_conjugate_gradient.TestConjugateGradient.test_cpu": [[30, 32], ["test_conjugate_gradient.TestConjugateGradient._test", "torch.device"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestApplyCategoricalProjectionToManualCases._test", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["", "def", "test_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test", "(", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_conjugate_gradient.TestConjugateGradient.test_gpu": [[33, 36], ["test_conjugate_gradient.TestConjugateGradient._test", "torch.device"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestApplyCategoricalProjectionToManualCases._test", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test", "(", "torch", ".", "device", "(", "\"cuda:0\"", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_mode_of_distribution.test_transform": [[9, 16], ["torch.distributions.Normal", "torch.distributions.TransformedDistribution", "pfrl.utils.mode_of_distribution.mode_of_distribution", "pfrl.testing.torch_assert_allclose", "pfrl.utils.mode_of_distribution.mode_of_distribution.tolist", "math.tanh", "torch.distributions.transforms.TanhTransform"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.mode_of_distribution.mode_of_distribution", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose"], ["def", "test_transform", "(", ")", ":", "\n", "    ", "base_dist", "=", "torch", ".", "distributions", ".", "Normal", "(", "loc", "=", "2", ",", "scale", "=", "1", ")", "\n", "dist", "=", "torch", ".", "distributions", ".", "TransformedDistribution", "(", "\n", "base_dist", ",", "[", "torch", ".", "distributions", ".", "transforms", ".", "TanhTransform", "(", ")", "]", "\n", ")", "\n", "mode", "=", "mode_of_distribution", "(", "dist", ")", "\n", "torch_assert_allclose", "(", "mode", ".", "tolist", "(", ")", ",", "math", ".", "tanh", "(", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_mode_of_distribution.test_categorical": [[18, 33], ["torch.as_tensor", "torch.distributions.Categorical", "pfrl.utils.mode_of_distribution.mode_of_distribution", "torch.as_tensor", "torch.distributions.Categorical", "pfrl.utils.mode_of_distribution.mode_of_distribution", "torch.as_tensor", "torch.distributions.Categorical", "pfrl.utils.mode_of_distribution.mode_of_distribution", "pfrl.utils.mode_of_distribution.mode_of_distribution.tolist", "pfrl.utils.mode_of_distribution.mode_of_distribution.tolist", "pfrl.utils.mode_of_distribution.mode_of_distribution.tolist"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.mode_of_distribution.mode_of_distribution", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.mode_of_distribution.mode_of_distribution", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.mode_of_distribution.mode_of_distribution"], ["", "def", "test_categorical", "(", ")", ":", "\n", "    ", "probs", "=", "torch", ".", "as_tensor", "(", "[", "0.2", ",", "0.6", ",", "0.2", "]", ")", "\n", "dist", "=", "torch", ".", "distributions", ".", "Categorical", "(", "probs", "=", "probs", ")", "\n", "mode", "=", "mode_of_distribution", "(", "dist", ")", "\n", "assert", "mode", ".", "tolist", "(", ")", "==", "1", "\n", "\n", "probs", "=", "torch", ".", "as_tensor", "(", "[", "0.6", ",", "0.2", ",", "0.2", "]", ")", "\n", "dist", "=", "torch", ".", "distributions", ".", "Categorical", "(", "probs", "=", "probs", ")", "\n", "mode", "=", "mode_of_distribution", "(", "dist", ")", "\n", "assert", "mode", ".", "tolist", "(", ")", "==", "0", "\n", "\n", "probs", "=", "torch", ".", "as_tensor", "(", "[", "[", "0.6", ",", "0.2", ",", "0.2", "]", ",", "[", "0.2", ",", "0.2", ",", "0.6", "]", "]", ")", "\n", "dist", "=", "torch", ".", "distributions", ".", "Categorical", "(", "probs", ")", "\n", "mode", "=", "mode_of_distribution", "(", "dist", ")", "\n", "assert", "mode", ".", "tolist", "(", ")", "==", "[", "0", ",", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_mode_of_distribution.test_normal": [[35, 41], ["torch.as_tensor", "torch.as_tensor", "torch.distributions.Normal", "pfrl.utils.mode_of_distribution.mode_of_distribution", "pfrl.testing.torch_assert_allclose"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.mode_of_distribution.mode_of_distribution", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose"], ["", "def", "test_normal", "(", ")", ":", "\n", "    ", "loc", "=", "torch", ".", "as_tensor", "(", "[", "0.3", ",", "0.5", "]", ")", "\n", "scale", "=", "torch", ".", "as_tensor", "(", "[", "0.1", ",", "0.9", "]", ")", "\n", "dist", "=", "torch", ".", "distributions", ".", "Normal", "(", "loc", ",", "scale", ")", "\n", "mode", "=", "mode_of_distribution", "(", "dist", ")", "\n", "torch_assert_allclose", "(", "mode", ",", "loc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_mode_of_distribution.test_multivariate_normal": [[43, 49], ["torch.as_tensor", "torch.as_tensor", "torch.distributions.MultivariateNormal", "pfrl.utils.mode_of_distribution.mode_of_distribution", "pfrl.testing.torch_assert_allclose"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.mode_of_distribution.mode_of_distribution", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose"], ["", "def", "test_multivariate_normal", "(", ")", ":", "\n", "    ", "loc", "=", "torch", ".", "as_tensor", "(", "[", "0.3", ",", "0.7", "]", ")", "\n", "cov", "=", "torch", ".", "as_tensor", "(", "[", "[", "0.1", ",", "0.0", "]", ",", "[", "0.0", ",", "0.9", "]", "]", ")", "\n", "dist", "=", "torch", ".", "distributions", ".", "MultivariateNormal", "(", "loc", ",", "cov", ")", "\n", "mode", "=", "mode_of_distribution", "(", "dist", ")", "\n", "torch_assert_allclose", "(", "mode", ",", "loc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_mode_of_distribution.test_independent_normal": [[51, 57], ["torch.as_tensor", "torch.as_tensor", "torch.distributions.Independent", "pfrl.utils.mode_of_distribution.mode_of_distribution", "pfrl.testing.torch_assert_allclose", "torch.distributions.Normal"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.mode_of_distribution.mode_of_distribution", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose"], ["", "def", "test_independent_normal", "(", ")", ":", "\n", "    ", "loc", "=", "torch", ".", "as_tensor", "(", "[", "[", "0.3", ",", "0.7", "]", ",", "[", "0.2", ",", "0.4", "]", "]", ")", "\n", "scale", "=", "torch", ".", "as_tensor", "(", "[", "[", "0.1", ",", "0.2", "]", ",", "[", "0.3", ",", "0.8", "]", "]", ")", "\n", "dist", "=", "torch", ".", "distributions", ".", "Independent", "(", "torch", ".", "distributions", ".", "Normal", "(", "loc", ",", "scale", ")", ",", "1", ")", "\n", "mode", "=", "mode_of_distribution", "(", "dist", ")", "\n", "torch_assert_allclose", "(", "mode", ",", "loc", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random_seed.TestSetRandomSeed.test_random": [[11, 23], ["pfrl.utils.set_random_seed", "random.random", "pfrl.utils.set_random_seed", "random.random", "pfrl.utils.set_random_seed", "random.random", "pfrl.utils.set_random_seed", "random.random", "test_random_seed.TestSetRandomSeed.assertEqual", "test_random_seed.TestSetRandomSeed.assertEqual", "test_random_seed.TestSetRandomSeed.assertNotEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed"], ["    ", "def", "test_random", "(", "self", ")", ":", "\n", "        ", "pfrl", ".", "utils", ".", "set_random_seed", "(", "0", ")", "\n", "seed0_0", "=", "random", ".", "random", "(", ")", "\n", "pfrl", ".", "utils", ".", "set_random_seed", "(", "1", ")", "\n", "seed1_0", "=", "random", ".", "random", "(", ")", "\n", "pfrl", ".", "utils", ".", "set_random_seed", "(", "0", ")", "\n", "seed0_1", "=", "random", ".", "random", "(", ")", "\n", "pfrl", ".", "utils", ".", "set_random_seed", "(", "1", ")", "\n", "seed1_1", "=", "random", ".", "random", "(", ")", "\n", "self", ".", "assertEqual", "(", "seed0_0", ",", "seed0_1", ")", "\n", "self", ".", "assertEqual", "(", "seed1_0", ",", "seed1_1", ")", "\n", "self", ".", "assertNotEqual", "(", "seed0_0", ",", "seed1_0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random_seed.TestSetRandomSeed._test_random_device": [[24, 36], ["pfrl.utils.set_random_seed", "torch.rand", "pfrl.utils.set_random_seed", "torch.rand", "pfrl.utils.set_random_seed", "torch.rand", "pfrl.utils.set_random_seed", "torch.rand", "test_random_seed.TestSetRandomSeed.assertEqual", "test_random_seed.TestSetRandomSeed.assertEqual", "test_random_seed.TestSetRandomSeed.assertNotEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed"], ["", "def", "_test_random_device", "(", "self", ",", "device", ")", ":", "\n", "        ", "pfrl", ".", "utils", ".", "set_random_seed", "(", "0", ")", "\n", "seed0_0", "=", "torch", ".", "rand", "(", "1", ",", "device", "=", "device", ")", "\n", "pfrl", ".", "utils", ".", "set_random_seed", "(", "1", ")", "\n", "seed1_0", "=", "torch", ".", "rand", "(", "1", ",", "device", "=", "device", ")", "\n", "pfrl", ".", "utils", ".", "set_random_seed", "(", "0", ")", "\n", "seed0_1", "=", "torch", ".", "rand", "(", "1", ",", "device", "=", "device", ")", "\n", "pfrl", ".", "utils", ".", "set_random_seed", "(", "1", ")", "\n", "seed1_1", "=", "torch", ".", "rand", "(", "1", ",", "device", "=", "device", ")", "\n", "self", ".", "assertEqual", "(", "seed0_0", ",", "seed0_1", ")", "\n", "self", ".", "assertEqual", "(", "seed1_0", ",", "seed1_1", ")", "\n", "self", ".", "assertNotEqual", "(", "seed0_0", ",", "seed1_0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random_seed.TestSetRandomSeed.test_random_cpu": [[37, 40], ["torch.device", "test_random_seed.TestSetRandomSeed._test_random_device"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random_seed.TestSetRandomSeed._test_random_device"], ["", "def", "test_random_cpu", "(", "self", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "self", ".", "_test_random_device", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random_seed.TestSetRandomSeed.test_random_gpu": [[41, 46], ["torch.device", "test_random_seed.TestSetRandomSeed.assertTrue", "test_random_seed.TestSetRandomSeed._test_random_device", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random_seed.TestSetRandomSeed._test_random_device"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_random_gpu", "(", "self", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "self", ".", "_test_random_device", "(", "device", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_contexts.test_evaluating": [[6, 21], ["torch.nn.Linear", "torch.nn.Linear", "pfrl.utils.evaluating", "pfrl.utils.evaluating"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating"], ["def", "test_evaluating", "(", ")", ":", "\n", "    ", "a", "=", "nn", ".", "Linear", "(", "1", ",", "1", ")", "\n", "b", "=", "nn", ".", "Linear", "(", "1", ",", "1", ")", "\n", "assert", "a", ".", "training", "\n", "assert", "b", ".", "training", "\n", "with", "pfrl", ".", "utils", ".", "evaluating", "(", "a", ")", ":", "\n", "        ", "assert", "not", "a", ".", "training", "\n", "assert", "b", ".", "training", "\n", "with", "pfrl", ".", "utils", ".", "evaluating", "(", "b", ")", ":", "\n", "            ", "assert", "not", "a", ".", "training", "\n", "assert", "not", "b", ".", "training", "\n", "", "assert", "not", "a", ".", "training", "\n", "assert", "b", ".", "training", "\n", "", "assert", "a", ".", "training", "\n", "assert", "b", ".", "training", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random.TestSampleNK.setUp": [[15, 19], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "n", ",", "k", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "\n", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random.TestSampleNK.test_fast": [[20, 23], ["test_random.TestSampleNK.subtest_constraints", "pfrl.utils.random.sample_n_k", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random.TestSampleNK.subtest_constraints", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random.sample_n_k"], ["", "def", "test_fast", "(", "self", ")", ":", "\n", "        ", "self", ".", "samples", "=", "[", "sample_n_k", "(", "self", ".", "n", ",", "self", ".", "k", ")", "for", "_", "in", "range", "(", "200", ")", "]", "\n", "self", ".", "subtest_constraints", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random.TestSampleNK.subtest_constraints": [[24, 33], ["all", "numpy.unique", "len", "len"], "methods", ["None"], ["", "def", "subtest_constraints", "(", "self", ")", ":", "\n", "        ", "for", "s", "in", "self", ".", "samples", ":", "\n", "            ", "assert", "len", "(", "s", ")", "==", "self", ".", "k", "\n", "\n", "all", "(", "0", "<=", "x", "<", "self", ".", "n", "for", "x", "in", "s", ")", "\n", "\n", "# distinct", "\n", "t", "=", "np", ".", "unique", "(", "s", ")", "\n", "assert", "len", "(", "t", ")", "==", "self", ".", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random.TestSampleNK.test_slow": [[34, 39], ["test_random.TestSampleNK.subtest_total_counts", "test_random.TestSampleNK.subtest_order_counts", "pfrl.utils.random.sample_n_k", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random.TestSampleNK.subtest_total_counts", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random.TestSampleNK.subtest_order_counts", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random.sample_n_k"], ["", "", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_slow", "(", "self", ")", ":", "\n", "        ", "self", ".", "samples", "=", "[", "sample_n_k", "(", "self", ".", "n", ",", "self", ".", "k", ")", "for", "_", "in", "range", "(", "10000", ")", "]", "\n", "self", ".", "subtest_total_counts", "(", ")", "\n", "self", ".", "subtest_order_counts", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random.TestSampleNK.subtest_total_counts": [[40, 56], ["numpy.zeros", "len", "numpy.sqrt", "test_random.TestSampleNK.subtest_normal_distrib"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random.TestSampleNK.subtest_normal_distrib"], ["", "def", "subtest_total_counts", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "k", "in", "[", "0", ",", "self", ".", "n", "]", ":", "\n", "            ", "return", "\n", "\n", "", "cnt", "=", "np", ".", "zeros", "(", "self", ".", "n", ")", "\n", "for", "s", "in", "self", ".", "samples", ":", "\n", "            ", "for", "x", "in", "s", ":", "\n", "                ", "cnt", "[", "x", "]", "+=", "1", "\n", "\n", "", "", "m", "=", "len", "(", "self", ".", "samples", ")", "\n", "\n", "p", "=", "self", ".", "k", "/", "self", ".", "n", "\n", "mean", "=", "m", "*", "p", "\n", "std", "=", "np", ".", "sqrt", "(", "m", "*", "p", "*", "(", "1", "-", "p", ")", ")", "\n", "\n", "self", ".", "subtest_normal_distrib", "(", "cnt", ",", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random.TestSampleNK.subtest_order_counts": [[57, 75], ["numpy.zeros", "len", "numpy.sqrt", "test_random.TestSampleNK.subtest_normal_distrib", "len", "enumerate", "range", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random.TestSampleNK.subtest_normal_distrib"], ["", "def", "subtest_order_counts", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "k", "<", "2", ":", "\n", "            ", "return", "\n", "\n", "", "ordered_pairs", "=", "[", "(", "i", ",", "j", ")", "for", "j", "in", "range", "(", "self", ".", "k", ")", "for", "i", "in", "range", "(", "j", ")", "]", "\n", "cnt", "=", "np", ".", "zeros", "(", "len", "(", "ordered_pairs", ")", ")", "\n", "\n", "for", "s", "in", "self", ".", "samples", ":", "\n", "            ", "for", "t", ",", "(", "i", ",", "j", ")", "in", "enumerate", "(", "ordered_pairs", ")", ":", "\n", "                ", "if", "s", "[", "i", "]", "<", "s", "[", "j", "]", ":", "\n", "                    ", "cnt", "[", "t", "]", "+=", "1", "\n", "\n", "", "", "", "m", "=", "len", "(", "self", ".", "samples", ")", "\n", "\n", "mean", "=", "m", "/", "2", "\n", "std", "=", "np", ".", "sqrt", "(", "m", "/", "4", ")", "\n", "\n", "self", ".", "subtest_normal_distrib", "(", "cnt", ",", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random.TestSampleNK.subtest_normal_distrib": [[76, 79], ["scipy.stats.kstest"], "methods", ["None"], ["", "def", "subtest_normal_distrib", "(", "self", ",", "xs", ",", "mean", ",", "std", ")", ":", "\n", "        ", "_", ",", "pvalue", "=", "stats", ".", "kstest", "(", "xs", ",", "\"norm\"", ",", "(", "mean", ",", "std", ")", ")", "\n", "assert", "pvalue", ">", "1e-5", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random.TestSampleNKSpeed.get_timeit": [[82, 87], ["min", "timeit.Timer().repeat", "timeit.Timer"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min"], ["    ", "def", "get_timeit", "(", "self", ",", "setup", ")", ":", "\n", "        ", "return", "min", "(", "\n", "timeit", ".", "Timer", "(", "\n", "\"for n in range(64, 10000): sample_n_k(n, 64)\"", ",", "setup", "=", "setup", "\n", ")", ".", "repeat", "(", "repeat", "=", "10", ",", "number", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random.TestSampleNKSpeed._test": [[89, 112], ["test_random.TestSampleNKSpeed.get_timeit", "test_random.TestSampleNKSpeed.get_timeit", "test_random.TestSampleNKSpeed.assertLess", "test_random.TestSampleNKSpeed.get_timeit", "test_random.TestSampleNKSpeed.assertLess"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random.TestSampleNKSpeed.get_timeit", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random.TestSampleNKSpeed.get_timeit", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_random.TestSampleNKSpeed.get_timeit"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "_test", "(", "self", ")", ":", "\n", "        ", "t", "=", "self", ".", "get_timeit", "(", "\"from pfrl.utils.random import sample_n_k\"", ")", "\n", "\n", "# faster than random.sample", "\n", "t1", "=", "self", ".", "get_timeit", "(", "\n", "\"\"\"\nimport random\ndef sample_n_k(n, k):\n    return random.sample(range(n), k)\n\"\"\"", "\n", ")", "\n", "self", ".", "assertLess", "(", "t", ",", "t1", ")", "\n", "\n", "# faster than np.random.choice(..., replace=False)", "\n", "t2", "=", "self", ".", "get_timeit", "(", "\n", "\"\"\"\nimport numpy as np\ndef sample_n_k(n, k):\n    return np.random.choice(n, k, replace=False)\n\"\"\"", "\n", ")", "\n", "self", ".", "assertLess", "(", "t", ",", "t2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_batch_states.TestBatchStates._test": [[11, 45], ["pfrl.utils.batch_states", "test_batch_states.TestBatchStates.assertIsInstance", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "torch.device", "torch.device", "batch_a.cpu", "numpy.asarray", "batch_b.cpu", "numpy.asarray", "batch_c.cpu", "numpy.asarray", "numpy.arange().reshape", "numpy.zeros", "numpy.arange().reshape", "numpy.zeros", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["    ", "def", "_test", "(", "self", ",", "gpu", ")", ":", "\n", "\n", "# state: ((2,2)-shaped array, integer, (1,)-shaped array)", "\n", "        ", "states", "=", "[", "\n", "(", "np", ".", "arange", "(", "4", ")", ".", "reshape", "(", "(", "2", ",", "2", ")", ")", ",", "0", ",", "np", ".", "zeros", "(", "1", ")", ")", ",", "\n", "(", "np", ".", "arange", "(", "4", ")", ".", "reshape", "(", "(", "2", ",", "2", ")", ")", "+", "1", ",", "1", ",", "np", ".", "zeros", "(", "1", ")", "+", "1", ")", ",", "\n", "]", "\n", "if", "gpu", ">=", "0", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "", "def", "phi", "(", "state", ")", ":", "\n", "            ", "return", "state", "[", "0", "]", "*", "2", ",", "state", "[", "1", "]", ",", "state", "[", "2", "]", "*", "3", "\n", "\n", "", "batch", "=", "pfrl", ".", "utils", ".", "batch_states", "(", "states", ",", "device", "=", "device", ",", "phi", "=", "phi", ")", "\n", "self", ".", "assertIsInstance", "(", "batch", ",", "tuple", ")", "\n", "batch_a", ",", "batch_b", ",", "batch_c", "=", "batch", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "batch_a", ".", "cpu", "(", ")", ",", "\n", "np", ".", "asarray", "(", "\n", "[", "\n", "[", "[", "0", ",", "2", "]", ",", "[", "4", ",", "6", "]", "]", ",", "\n", "[", "[", "2", ",", "4", "]", ",", "[", "6", ",", "8", "]", "]", ",", "\n", "]", "\n", ")", ",", "\n", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "batch_b", ".", "cpu", "(", ")", ",", "np", ".", "asarray", "(", "[", "0", ",", "1", "]", ")", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "batch_c", ".", "cpu", "(", ")", ",", "\n", "np", ".", "asarray", "(", "\n", "[", "\n", "[", "0", "]", ",", "\n", "[", "3", "]", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_batch_states.TestBatchStates.test_cpu": [[49, 51], ["test_batch_states.TestBatchStates._test"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestApplyCategoricalProjectionToManualCases._test"], ["", "def", "test_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test", "(", "gpu", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_batch_states.TestBatchStates.test_gpu": [[52, 55], ["test_batch_states.TestBatchStates._test"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestApplyCategoricalProjectionToManualCases._test"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test", "(", "gpu", "=", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_recurrent.TestRecurrentStateFunctions._test_lstm": [[16, 87], ["torch.nn.utils.rnn.pack_sequence", "torch.nn.LSTM", "torch.nn.LSTM.to", "torch.nn.LSTM.", "torch.nn.LSTM.", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "test_recurrent.TestRecurrentStateFunctions.assertEqual", "test_recurrent.TestRecurrentStateFunctions.assertEqual", "test_recurrent.TestRecurrentStateFunctions.assertEqual", "test_recurrent.TestRecurrentStateFunctions.assertEqual", "test_recurrent.TestRecurrentStateFunctions.assertEqual", "test_recurrent.TestRecurrentStateFunctions.assertEqual", "test_recurrent.TestRecurrentStateFunctions.assertEqual", "pfrl.utils.recurrent.mask_recurrent_state_at", "torch.nn.LSTM.", "torch.nn.utils.rnn.pad_packed_sequence", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.utils.recurrent.mask_recurrent_state_at", "torch.nn.LSTM.", "torch.nn.utils.rnn.pad_packed_sequence", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.utils.recurrent.mask_recurrent_state_at", "torch.nn.LSTM.", "torch.nn.utils.rnn.pad_packed_sequence", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.utils.recurrent.get_recurrent_state_at", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.utils.recurrent.concatenate_recurrent_states", "torch.nn.LSTM.", "torch.nn.utils.rnn.pad_packed_sequence", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.utils.recurrent.get_recurrent_state_at", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.mask_recurrent_state_at", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.mask_recurrent_state_at", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.mask_recurrent_state_at", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.get_recurrent_state_at", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.concatenate_recurrent_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.get_recurrent_state_at", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose"], ["    ", "def", "_test_lstm", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "in_size", "=", "2", "\n", "out_size", "=", "3", "\n", "device", "=", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", "if", "gpu", ">=", "0", "else", "\"cpu\"", "\n", "seqs_x", "=", "[", "\n", "torch", ".", "rand", "(", "4", ",", "in_size", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "rand", "(", "1", ",", "in_size", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "rand", "(", "3", ",", "in_size", ",", "device", "=", "device", ")", ",", "\n", "]", "\n", "seqs_x", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_sequence", "(", "seqs_x", ",", "enforce_sorted", "=", "False", ")", "\n", "link", "=", "nn", ".", "LSTM", "(", "num_layers", "=", "1", ",", "input_size", "=", "in_size", ",", "hidden_size", "=", "out_size", ")", "\n", "link", ".", "to", "(", "device", ")", "\n", "\n", "# Forward twice: with None and non-None random states", "\n", "y0", ",", "rs0", "=", "link", "(", "seqs_x", ",", "None", ")", "\n", "y1", ",", "rs1", "=", "link", "(", "seqs_x", ",", "rs0", ")", "\n", "y0", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "y0", ",", "batch_first", "=", "True", ")", "\n", "y1", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "y1", ",", "batch_first", "=", "True", ")", "\n", "h0", ",", "c0", "=", "rs0", "\n", "h1", ",", "c1", "=", "rs1", "\n", "self", ".", "assertEqual", "(", "y0", ".", "shape", ",", "(", "3", ",", "4", ",", "out_size", ")", ")", "\n", "self", ".", "assertEqual", "(", "y1", ".", "shape", ",", "(", "3", ",", "4", ",", "out_size", ")", ")", "\n", "self", ".", "assertEqual", "(", "c0", ".", "shape", ",", "(", "1", ",", "3", ",", "out_size", ")", ")", "\n", "self", ".", "assertEqual", "(", "h0", ".", "shape", ",", "(", "1", ",", "3", ",", "out_size", ")", ")", "\n", "self", ".", "assertEqual", "(", "c0", ".", "shape", ",", "(", "1", ",", "3", ",", "out_size", ")", ")", "\n", "self", ".", "assertEqual", "(", "h1", ".", "shape", ",", "(", "1", ",", "3", ",", "out_size", ")", ")", "\n", "self", ".", "assertEqual", "(", "c1", ".", "shape", ",", "(", "1", ",", "3", ",", "out_size", ")", ")", "\n", "\n", "# Masked at 0", "\n", "rs0_mask0", "=", "mask_recurrent_state_at", "(", "rs0", ",", "0", ")", "\n", "y1m0", ",", "_", "=", "link", "(", "seqs_x", ",", "rs0_mask0", ")", "\n", "y1m0", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "y1m0", ",", "batch_first", "=", "True", ")", "\n", "torch_assert_allclose", "(", "y1m0", "[", "0", "]", ",", "y0", "[", "0", "]", ")", "\n", "torch_assert_allclose", "(", "y1m0", "[", "1", "]", ",", "y1", "[", "1", "]", ")", "\n", "torch_assert_allclose", "(", "y1m0", "[", "2", "]", ",", "y1", "[", "2", "]", ")", "\n", "\n", "# Masked at 1", "\n", "rs0_mask1", "=", "mask_recurrent_state_at", "(", "rs0", ",", "1", ")", "\n", "y1m1", ",", "_", "=", "link", "(", "seqs_x", ",", "rs0_mask1", ")", "\n", "y1m1", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "y1m1", ",", "batch_first", "=", "True", ")", "\n", "torch_assert_allclose", "(", "y1m1", "[", "0", "]", ",", "y1", "[", "0", "]", ")", "\n", "torch_assert_allclose", "(", "y1m1", "[", "1", "]", ",", "y0", "[", "1", "]", ")", "\n", "torch_assert_allclose", "(", "y1m1", "[", "2", "]", ",", "y1", "[", "2", "]", ")", "\n", "\n", "# Masked at (1, 2)", "\n", "rs0_mask12", "=", "mask_recurrent_state_at", "(", "rs0", ",", "(", "1", ",", "2", ")", ")", "\n", "y1m12", ",", "_", "=", "link", "(", "seqs_x", ",", "rs0_mask12", ")", "\n", "y1m12", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "y1m12", ",", "batch_first", "=", "True", ")", "\n", "torch_assert_allclose", "(", "y1m12", "[", "0", "]", ",", "y1", "[", "0", "]", ")", "\n", "torch_assert_allclose", "(", "y1m12", "[", "1", "]", ",", "y0", "[", "1", "]", ")", "\n", "torch_assert_allclose", "(", "y1m12", "[", "2", "]", ",", "y0", "[", "2", "]", ")", "\n", "\n", "# Get at 1 and concat with None", "\n", "rs0_get1", "=", "get_recurrent_state_at", "(", "rs0", ",", "1", ",", "detach", "=", "False", ")", "\n", "assert", "rs0_get1", "[", "0", "]", ".", "requires_grad", "\n", "assert", "rs0_get1", "[", "1", "]", ".", "requires_grad", "\n", "torch_assert_allclose", "(", "rs0_get1", "[", "0", "]", ",", "h0", "[", ":", ",", "1", "]", ")", "\n", "torch_assert_allclose", "(", "rs0_get1", "[", "1", "]", ",", "c0", "[", ":", ",", "1", "]", ")", "\n", "concat_rs_get1", "=", "concatenate_recurrent_states", "(", "[", "None", ",", "rs0_get1", ",", "None", "]", ")", "\n", "y1g1", ",", "_", "=", "link", "(", "seqs_x", ",", "concat_rs_get1", ")", "\n", "y1g1", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "y1g1", ",", "batch_first", "=", "True", ")", "\n", "torch_assert_allclose", "(", "y1g1", "[", "0", "]", ",", "y0", "[", "0", "]", ")", "\n", "torch_assert_allclose", "(", "y1g1", "[", "1", "]", ",", "y1", "[", "1", "]", ")", "\n", "torch_assert_allclose", "(", "y1g1", "[", "2", "]", ",", "y0", "[", "2", "]", ")", "\n", "\n", "# Get at 1 with detach=True", "\n", "rs0_get1_detach", "=", "get_recurrent_state_at", "(", "rs0", ",", "1", ",", "detach", "=", "True", ")", "\n", "assert", "not", "rs0_get1_detach", "[", "0", "]", ".", "requires_grad", "\n", "assert", "not", "rs0_get1_detach", "[", "1", "]", ".", "requires_grad", "\n", "torch_assert_allclose", "(", "rs0_get1_detach", "[", "0", "]", ",", "h0", "[", ":", ",", "1", "]", ")", "\n", "torch_assert_allclose", "(", "rs0_get1_detach", "[", "1", "]", ",", "c0", "[", ":", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_recurrent.TestRecurrentStateFunctions.test_lstm_gpu": [[88, 91], ["test_recurrent.TestRecurrentStateFunctions._test_lstm"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_recurrent.TestRecurrentStateFunctions._test_lstm"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_lstm_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_lstm", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_recurrent.TestRecurrentStateFunctions.test_lstm_cpu": [[92, 94], ["test_recurrent.TestRecurrentStateFunctions._test_lstm"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_recurrent.TestRecurrentStateFunctions._test_lstm"], ["", "def", "test_lstm_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_lstm", "(", "gpu", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_recurrent.TestRecurrentStateFunctions._test_non_lstm": [[95, 151], ["torch.nn.utils.rnn.pack_sequence", "test_recurrent.TestRecurrentStateFunctions.assertTrue", "getattr", "getattr.", "getattr.to", "getattr.", "getattr.", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "test_recurrent.TestRecurrentStateFunctions.assertEqual", "test_recurrent.TestRecurrentStateFunctions.assertEqual", "test_recurrent.TestRecurrentStateFunctions.assertEqual", "test_recurrent.TestRecurrentStateFunctions.assertEqual", "pfrl.utils.recurrent.mask_recurrent_state_at", "getattr.", "torch.nn.utils.rnn.pad_packed_sequence", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.utils.recurrent.mask_recurrent_state_at", "getattr.", "torch.nn.utils.rnn.pad_packed_sequence", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.utils.recurrent.get_recurrent_state_at", "pfrl.testing.torch_assert_allclose", "pfrl.utils.recurrent.concatenate_recurrent_states", "getattr.", "torch.nn.utils.rnn.pad_packed_sequence", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.utils.recurrent.get_recurrent_state_at", "pfrl.testing.torch_assert_allclose", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.mask_recurrent_state_at", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.mask_recurrent_state_at", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.get_recurrent_state_at", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.concatenate_recurrent_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.get_recurrent_state_at", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose"], ["", "def", "_test_non_lstm", "(", "self", ",", "gpu", ",", "name", ")", ":", "\n", "        ", "in_size", "=", "2", "\n", "out_size", "=", "3", "\n", "device", "=", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", "if", "gpu", ">=", "0", "else", "\"cpu\"", "\n", "seqs_x", "=", "[", "\n", "torch", ".", "rand", "(", "4", ",", "in_size", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "rand", "(", "1", ",", "in_size", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "rand", "(", "3", ",", "in_size", ",", "device", "=", "device", ")", ",", "\n", "]", "\n", "seqs_x", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_sequence", "(", "seqs_x", ",", "enforce_sorted", "=", "False", ")", "\n", "self", ".", "assertTrue", "(", "name", "in", "(", "\"GRU\"", ",", "\"RNN\"", ")", ")", "\n", "cls", "=", "getattr", "(", "nn", ",", "name", ")", "\n", "link", "=", "cls", "(", "num_layers", "=", "1", ",", "input_size", "=", "in_size", ",", "hidden_size", "=", "out_size", ")", "\n", "link", ".", "to", "(", "device", ")", "\n", "\n", "# Forward twice: with None and non-None random states", "\n", "y0", ",", "h0", "=", "link", "(", "seqs_x", ",", "None", ")", "\n", "y1", ",", "h1", "=", "link", "(", "seqs_x", ",", "h0", ")", "\n", "y0", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "y0", ",", "batch_first", "=", "True", ")", "\n", "y1", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "y1", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "h0", ".", "shape", ",", "(", "1", ",", "3", ",", "out_size", ")", ")", "\n", "self", ".", "assertEqual", "(", "h1", ".", "shape", ",", "(", "1", ",", "3", ",", "out_size", ")", ")", "\n", "self", ".", "assertEqual", "(", "y0", ".", "shape", ",", "(", "3", ",", "4", ",", "out_size", ")", ")", "\n", "self", ".", "assertEqual", "(", "y1", ".", "shape", ",", "(", "3", ",", "4", ",", "out_size", ")", ")", "\n", "\n", "# Masked at 0", "\n", "rs0_mask0", "=", "mask_recurrent_state_at", "(", "h0", ",", "0", ")", "\n", "y1m0", ",", "_", "=", "link", "(", "seqs_x", ",", "rs0_mask0", ")", "\n", "y1m0", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "y1m0", ",", "batch_first", "=", "True", ")", "\n", "torch_assert_allclose", "(", "y1m0", "[", "0", "]", ",", "y0", "[", "0", "]", ")", "\n", "torch_assert_allclose", "(", "y1m0", "[", "1", "]", ",", "y1", "[", "1", "]", ")", "\n", "torch_assert_allclose", "(", "y1m0", "[", "2", "]", ",", "y1", "[", "2", "]", ")", "\n", "\n", "# Masked at (1, 2)", "\n", "rs0_mask12", "=", "mask_recurrent_state_at", "(", "h0", ",", "(", "1", ",", "2", ")", ")", "\n", "y1m12", ",", "_", "=", "link", "(", "seqs_x", ",", "rs0_mask12", ")", "\n", "y1m12", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "y1m12", ",", "batch_first", "=", "True", ")", "\n", "torch_assert_allclose", "(", "y1m12", "[", "0", "]", ",", "y1", "[", "0", "]", ")", "\n", "torch_assert_allclose", "(", "y1m12", "[", "1", "]", ",", "y0", "[", "1", "]", ")", "\n", "torch_assert_allclose", "(", "y1m12", "[", "2", "]", ",", "y0", "[", "2", "]", ")", "\n", "\n", "# Get at 1 and concat with None", "\n", "rs0_get1", "=", "get_recurrent_state_at", "(", "h0", ",", "1", ",", "detach", "=", "False", ")", "\n", "assert", "rs0_get1", ".", "requires_grad", "\n", "torch_assert_allclose", "(", "rs0_get1", ",", "h0", "[", ":", ",", "1", "]", ")", "\n", "concat_rs_get1", "=", "concatenate_recurrent_states", "(", "[", "None", ",", "rs0_get1", ",", "None", "]", ")", "\n", "y1g1", ",", "_", "=", "link", "(", "seqs_x", ",", "concat_rs_get1", ")", "\n", "y1g1", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "y1g1", ",", "batch_first", "=", "True", ")", "\n", "torch_assert_allclose", "(", "y1g1", "[", "0", "]", ",", "y0", "[", "0", "]", ")", "\n", "torch_assert_allclose", "(", "y1g1", "[", "1", "]", ",", "y1", "[", "1", "]", ")", "\n", "torch_assert_allclose", "(", "y1g1", "[", "2", "]", ",", "y0", "[", "2", "]", ")", "\n", "\n", "# Get at 1 with detach=True", "\n", "rs0_get1_detach", "=", "get_recurrent_state_at", "(", "h0", ",", "1", ",", "detach", "=", "True", ")", "\n", "assert", "not", "rs0_get1_detach", ".", "requires_grad", "\n", "torch_assert_allclose", "(", "rs0_get1_detach", ",", "h0", "[", ":", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_recurrent.TestRecurrentStateFunctions.test_gru_gpu": [[152, 155], ["test_recurrent.TestRecurrentStateFunctions._test_non_lstm"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_recurrent.TestRecurrentStateFunctions._test_non_lstm"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_gru_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_non_lstm", "(", "gpu", "=", "0", ",", "name", "=", "\"GRU\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_recurrent.TestRecurrentStateFunctions.test_gru_cpu": [[156, 158], ["test_recurrent.TestRecurrentStateFunctions._test_non_lstm"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_recurrent.TestRecurrentStateFunctions._test_non_lstm"], ["", "def", "test_gru_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_non_lstm", "(", "gpu", "=", "-", "1", ",", "name", "=", "\"GRU\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_recurrent.TestRecurrentStateFunctions.test_rnn_gpu": [[159, 162], ["test_recurrent.TestRecurrentStateFunctions._test_non_lstm"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_recurrent.TestRecurrentStateFunctions._test_non_lstm"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_rnn_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_non_lstm", "(", "gpu", "=", "0", ",", "name", "=", "\"RNN\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_recurrent.TestRecurrentStateFunctions.test_rnn_cpu": [[163, 165], ["test_recurrent.TestRecurrentStateFunctions._test_non_lstm"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils_tests.test_recurrent.TestRecurrentStateFunctions._test_non_lstm"], ["", "def", "test_rnn_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_non_lstm", "(", "gpu", "=", "-", "1", ",", "name", "=", "\"RNN\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers_tests.test_continuing_time_limit.test_continuing_time_limit": [[8, 32], ["pytest.mark.parametrize", "unittest.mock.Mock", "pfrl.wrappers.ContinuingTimeLimit", "pfrl.wrappers.ContinuingTimeLimit.reset", "range", "pfrl.wrappers.ContinuingTimeLimit.reset", "range", "pfrl.wrappers.ContinuingTimeLimit.step", "pfrl.wrappers.ContinuingTimeLimit.step", "range", "info.get", "info.get"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"max_episode_steps\"", ",", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "def", "test_continuing_time_limit", "(", "max_episode_steps", ")", ":", "\n", "    ", "env", "=", "mock", ".", "Mock", "(", ")", "\n", "env", ".", "reset", ".", "side_effect", "=", "[", "\"state\"", "]", "*", "2", "\n", "# Since info dicts are modified by the wapper, each step call needs to", "\n", "# return a new info dict.", "\n", "env", ".", "step", ".", "side_effect", "=", "[", "(", "\"state\"", ",", "0", ",", "False", ",", "{", "}", ")", "for", "_", "in", "range", "(", "6", ")", "]", "\n", "env", "=", "pfrl", ".", "wrappers", ".", "ContinuingTimeLimit", "(", "env", ",", "max_episode_steps", "=", "max_episode_steps", ")", "\n", "\n", "env", ".", "reset", "(", ")", "\n", "for", "t", "in", "range", "(", "2", ")", ":", "\n", "        ", "_", ",", "_", ",", "done", ",", "info", "=", "env", ".", "step", "(", "0", ")", "\n", "if", "t", "+", "1", ">=", "max_episode_steps", ":", "\n", "            ", "assert", "info", "[", "\"needs_reset\"", "]", "\n", "", "else", ":", "\n", "            ", "assert", "not", "info", ".", "get", "(", "\"needs_reset\"", ",", "False", ")", "\n", "\n", "", "", "env", ".", "reset", "(", ")", "\n", "for", "t", "in", "range", "(", "4", ")", ":", "\n", "        ", "_", ",", "_", ",", "done", ",", "info", "=", "env", ".", "step", "(", "0", ")", "\n", "if", "t", "+", "1", ">=", "max_episode_steps", ":", "\n", "            ", "assert", "info", "[", "\"needs_reset\"", "]", "\n", "", "else", ":", "\n", "            ", "assert", "not", "info", ".", "get", "(", "\"needs_reset\"", ",", "False", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers_tests.test_render.test_render": [[8, 67], ["pytest.mark.parametrize", "unittest.mock.Mock", "pfrl.wrappers.Render", "pfrl.wrappers.Render.reset", "pfrl.wrappers.Render.step", "pfrl.wrappers.Render.step", "pfrl.wrappers.Render.reset", "len"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"render_kwargs\"", ",", "\n", "[", "\n", "{", "}", ",", "\n", "{", "\"mode\"", ":", "\"human\"", "}", ",", "\n", "{", "\"mode\"", ":", "\"rgb_array\"", "}", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_render", "(", "render_kwargs", ")", ":", "\n", "    ", "orig_env", "=", "mock", ".", "Mock", "(", ")", "\n", "# Reaches the terminal state after five actions", "\n", "orig_env", ".", "reset", ".", "side_effect", "=", "[", "\n", "(", "\"state\"", ",", "0", ")", ",", "\n", "(", "\"state\"", ",", "3", ")", ",", "\n", "]", "\n", "orig_env", ".", "step", ".", "side_effect", "=", "[", "\n", "(", "(", "\"state\"", ",", "1", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "2", ")", ",", "1", ",", "True", ",", "{", "}", ")", ",", "\n", "]", "\n", "env", "=", "pfrl", ".", "wrappers", ".", "Render", "(", "orig_env", ",", "**", "render_kwargs", ")", "\n", "\n", "# Not called env.render yet", "\n", "assert", "orig_env", ".", "render", ".", "call_count", "==", "0", "\n", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "assert", "obs", "==", "(", "\"state\"", ",", "0", ")", "\n", "\n", "# Called once", "\n", "assert", "orig_env", ".", "render", ".", "call_count", "==", "1", "\n", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "0", ")", "\n", "assert", "obs", "==", "(", "\"state\"", ",", "1", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "assert", "info", "==", "{", "}", "\n", "\n", "# Called twice", "\n", "assert", "orig_env", ".", "render", ".", "call_count", "==", "2", "\n", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "0", ")", "\n", "assert", "obs", "==", "(", "\"state\"", ",", "2", ")", "\n", "assert", "reward", "==", "1", "\n", "assert", "done", "\n", "assert", "info", "==", "{", "}", "\n", "\n", "# Called thrice", "\n", "assert", "orig_env", ".", "render", ".", "call_count", "==", "3", "\n", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "assert", "obs", "==", "(", "\"state\"", ",", "3", ")", "\n", "\n", "# Called four times", "\n", "assert", "orig_env", ".", "render", ".", "call_count", "==", "4", "\n", "\n", "# All the calls should receive correct kwargs", "\n", "for", "call", "in", "orig_env", ".", "render", ".", "call_args_list", ":", "\n", "        ", "args", ",", "kwargs", "=", "call", "\n", "assert", "len", "(", "args", ")", "==", "0", "\n", "assert", "kwargs", "==", "render_kwargs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers_tests.test_atari_wrappers.test_frame_stack": [[15, 86], ["pytest.mark.parametrize", "pytest.mark.parametrize", "test_atari_wrappers.test_frame_stack.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"dtype\"", ",", "[", "np", ".", "uint8", ",", "np", ".", "float32", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"k\"", ",", "[", "2", ",", "3", "]", ")", "\n", "def", "test_frame_stack", "(", "dtype", ",", "k", ")", ":", "\n", "\n", "    ", "steps", "=", "10", "\n", "\n", "# Mock env that returns atari-like frames", "\n", "def", "make_env", "(", "idx", ")", ":", "\n", "        ", "env", "=", "mock", ".", "Mock", "(", ")", "\n", "np_random", "=", "np", ".", "random", ".", "RandomState", "(", "idx", ")", "\n", "if", "dtype", "is", "np", ".", "uint8", ":", "\n", "\n", "            ", "def", "dtyped_rand", "(", ")", ":", "\n", "                ", "return", "np_random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "255", ",", "size", "=", "(", "1", ",", "84", ",", "84", ")", ",", "dtype", "=", "dtype", ")", "\n", "\n", "", "low", ",", "high", "=", "0", ",", "255", "\n", "", "elif", "dtype", "is", "np", ".", "float32", ":", "\n", "\n", "            ", "def", "dtyped_rand", "(", ")", ":", "\n", "                ", "return", "np_random", ".", "rand", "(", "1", ",", "84", ",", "84", ")", ".", "astype", "(", "dtype", ")", "\n", "\n", "", "low", ",", "high", "=", "-", "1.0", ",", "3.14", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "", "env", ".", "reset", ".", "side_effect", "=", "[", "dtyped_rand", "(", ")", "for", "_", "in", "range", "(", "steps", ")", "]", "\n", "env", ".", "step", ".", "side_effect", "=", "[", "\n", "(", "\n", "dtyped_rand", "(", ")", ",", "\n", "np_random", ".", "rand", "(", ")", ",", "\n", "bool", "(", "np_random", ".", "randint", "(", "2", ")", ")", ",", "\n", "{", "}", ",", "\n", ")", "\n", "for", "_", "in", "range", "(", "steps", ")", "\n", "]", "\n", "env", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "2", ")", "\n", "env", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "low", ",", "high", "=", "high", ",", "shape", "=", "(", "1", ",", "84", ",", "84", ")", ",", "dtype", "=", "dtype", "\n", ")", "\n", "return", "env", "\n", "\n", "", "env", "=", "make_env", "(", "42", ")", "\n", "fs_env", "=", "FrameStack", "(", "make_env", "(", "42", ")", ",", "k", "=", "k", ",", "channel_order", "=", "\"chw\"", ")", "\n", "\n", "# check action/observation space", "\n", "assert", "env", ".", "action_space", "==", "fs_env", ".", "action_space", "\n", "assert", "env", ".", "observation_space", ".", "dtype", "is", "fs_env", ".", "observation_space", ".", "dtype", "\n", "assert", "env", ".", "observation_space", ".", "low", ".", "item", "(", "0", ")", "==", "fs_env", ".", "observation_space", ".", "low", ".", "item", "(", "0", ")", "\n", "assert", "env", ".", "observation_space", ".", "high", ".", "item", "(", "0", ")", "==", "fs_env", ".", "observation_space", ".", "high", ".", "item", "(", "0", ")", "\n", "\n", "# check reset", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "fs_obs", "=", "fs_env", ".", "reset", "(", ")", "\n", "assert", "isinstance", "(", "fs_obs", ",", "LazyFrames", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "obs", ".", "take", "(", "indices", "=", "0", ",", "axis", "=", "fs_env", ".", "stack_axis", ")", ",", "\n", "np", ".", "asarray", "(", "fs_obs", ")", ".", "take", "(", "indices", "=", "0", ",", "axis", "=", "fs_env", ".", "stack_axis", ")", ",", "\n", ")", "\n", "\n", "# check step", "\n", "for", "_", "in", "range", "(", "steps", "-", "1", ")", ":", "\n", "        ", "action", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "fs_action", "=", "fs_env", ".", "action_space", ".", "sample", "(", ")", "\n", "obs", ",", "r", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "fs_obs", ",", "fs_r", ",", "fs_done", ",", "fs_info", "=", "fs_env", ".", "step", "(", "fs_action", ")", "\n", "assert", "isinstance", "(", "fs_obs", ",", "LazyFrames", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "obs", ".", "take", "(", "indices", "=", "0", ",", "axis", "=", "fs_env", ".", "stack_axis", ")", ",", "\n", "np", ".", "asarray", "(", "fs_obs", ")", ".", "take", "(", "indices", "=", "-", "1", ",", "axis", "=", "fs_env", ".", "stack_axis", ")", ",", "\n", ")", "\n", "assert", "r", "==", "fs_r", "\n", "assert", "done", "==", "fs_done", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers_tests.test_atari_wrappers.test_scaled_float_frame": [[88, 150], ["pytest.mark.parametrize", "test_atari_wrappers.test_frame_stack.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"dtype\"", ",", "[", "np", ".", "uint8", ",", "np", ".", "float32", "]", ")", "\n", "def", "test_scaled_float_frame", "(", "dtype", ")", ":", "\n", "\n", "    ", "steps", "=", "10", "\n", "\n", "# Mock env that returns atari-like frames", "\n", "def", "make_env", "(", "idx", ")", ":", "\n", "        ", "env", "=", "mock", ".", "Mock", "(", ")", "\n", "np_random", "=", "np", ".", "random", ".", "RandomState", "(", "idx", ")", "\n", "if", "dtype", "is", "np", ".", "uint8", ":", "\n", "\n", "            ", "def", "dtyped_rand", "(", ")", ":", "\n", "                ", "return", "np_random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "255", ",", "size", "=", "(", "1", ",", "84", ",", "84", ")", ",", "dtype", "=", "dtype", ")", "\n", "\n", "", "low", ",", "high", "=", "0", ",", "255", "\n", "", "elif", "dtype", "is", "np", ".", "float32", ":", "\n", "\n", "            ", "def", "dtyped_rand", "(", ")", ":", "\n", "                ", "return", "np_random", ".", "rand", "(", "1", ",", "84", ",", "84", ")", ".", "astype", "(", "dtype", ")", "\n", "\n", "", "low", ",", "high", "=", "-", "1.0", ",", "3.14", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "", "env", ".", "reset", ".", "side_effect", "=", "[", "dtyped_rand", "(", ")", "for", "_", "in", "range", "(", "steps", ")", "]", "\n", "env", ".", "step", ".", "side_effect", "=", "[", "\n", "(", "\n", "dtyped_rand", "(", ")", ",", "\n", "np_random", ".", "rand", "(", ")", ",", "\n", "bool", "(", "np_random", ".", "randint", "(", "2", ")", ")", ",", "\n", "{", "}", ",", "\n", ")", "\n", "for", "_", "in", "range", "(", "steps", ")", "\n", "]", "\n", "env", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "2", ")", "\n", "env", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "low", ",", "high", "=", "high", ",", "shape", "=", "(", "1", ",", "84", ",", "84", ")", ",", "dtype", "=", "dtype", "\n", ")", "\n", "return", "env", "\n", "\n", "", "env", "=", "make_env", "(", "42", ")", "\n", "s_env", "=", "ScaledFloatFrame", "(", "make_env", "(", "42", ")", ")", "\n", "\n", "# check observation space", "\n", "assert", "type", "(", "env", ".", "observation_space", ")", "is", "type", "(", "s_env", ".", "observation_space", ")", "# NOQA", "\n", "assert", "s_env", ".", "observation_space", ".", "dtype", "is", "np", ".", "dtype", "(", "np", ".", "float32", ")", "\n", "assert", "s_env", ".", "observation_space", ".", "contains", "(", "s_env", ".", "observation_space", ".", "low", ")", "\n", "assert", "s_env", ".", "observation_space", ".", "contains", "(", "s_env", ".", "observation_space", ".", "high", ")", "\n", "\n", "# check reset", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "s_obs", "=", "s_env", ".", "reset", "(", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "np", ".", "array", "(", "obs", ")", "/", "s_env", ".", "scale", ",", "s_obs", ")", "\n", "\n", "# check step", "\n", "for", "_", "in", "range", "(", "steps", "-", "1", ")", ":", "\n", "        ", "action", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "s_action", "=", "s_env", ".", "action_space", ".", "sample", "(", ")", "\n", "obs", ",", "r", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "s_obs", ",", "s_r", ",", "s_done", ",", "s_info", "=", "s_env", ".", "step", "(", "s_action", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "np", ".", "array", "(", "obs", ")", "/", "s_env", ".", "scale", ",", "s_obs", ")", "\n", "assert", "r", "==", "s_r", "\n", "assert", "done", "==", "s_done", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers_tests.test_monitor.test_monitor": [[12, 60], ["pytest.mark.parametrize", "gym.make", "isinstance", "gym.wrappers.TimeLimit", "tempfile.mkdtemp", "pfrl.wrappers.Monitor", "pfrl.wrappers.Monitor.reset", "os.listdir", "shutil.rmtree", "pfrl.wrappers.Monitor.step", "len", "len", "len", "len", "pfrl.wrappers.Monitor.action_space.sample", "info.get", "pfrl.wrappers.Monitor.reset", "f.endswith", "f.endswith", "f.endswith", "f.endswith"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"n_episodes\"", ",", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", "\n", "def", "test_monitor", "(", "n_episodes", ")", ":", "\n", "    ", "steps", "=", "15", "\n", "\n", "env", "=", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", "\n", "# unwrap default TimeLimit and wrap with new one to simulate done=True", "\n", "# at step 5", "\n", "assert", "isinstance", "(", "env", ",", "TimeLimit", ")", "\n", "env", "=", "env", ".", "env", "# unwrap", "\n", "env", "=", "TimeLimit", "(", "env", ",", "max_episode_steps", "=", "5", ")", "# wrap", "\n", "\n", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "try", ":", "\n", "        ", "env", "=", "pfrl", ".", "wrappers", ".", "Monitor", "(", "\n", "env", ",", "directory", "=", "tmpdir", ",", "video_callable", "=", "lambda", "episode_id", ":", "True", "\n", ")", "\n", "episode_idx", "=", "0", "\n", "episode_len", "=", "0", "\n", "t", "=", "0", "\n", "_", "=", "env", ".", "reset", "(", ")", "\n", "while", "True", ":", "\n", "            ", "_", ",", "_", ",", "done", ",", "info", "=", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "episode_len", "+=", "1", "\n", "t", "+=", "1", "\n", "if", "episode_idx", "==", "1", "and", "episode_len", ">=", "3", ":", "\n", "                ", "info", "[", "\"needs_reset\"", "]", "=", "True", "# simulate ContinuingTimeLimit", "\n", "", "if", "done", "or", "info", ".", "get", "(", "\"needs_reset\"", ",", "False", ")", "or", "t", "==", "steps", ":", "\n", "                ", "if", "episode_idx", "+", "1", "==", "n_episodes", "or", "t", "==", "steps", ":", "\n", "                    ", "break", "\n", "", "env", ".", "reset", "(", ")", "\n", "episode_idx", "+=", "1", "\n", "episode_len", "=", "0", "\n", "# `env.close()` is called when `env` is gabage-collected", "\n", "# (or explicitly deleted/closed).", "\n", "", "", "del", "env", "\n", "# check if videos & meta files were generated", "\n", "files", "=", "os", ".", "listdir", "(", "tmpdir", ")", "\n", "mp4s", "=", "[", "f", "for", "f", "in", "files", "if", "f", ".", "endswith", "(", "\".mp4\"", ")", "]", "\n", "metas", "=", "[", "f", "for", "f", "in", "files", "if", "f", ".", "endswith", "(", "\".meta.json\"", ")", "]", "\n", "stats", "=", "[", "f", "for", "f", "in", "files", "if", "f", ".", "endswith", "(", "\".stats.json\"", ")", "]", "\n", "manifests", "=", "[", "f", "for", "f", "in", "files", "if", "f", ".", "endswith", "(", "\".manifest.json\"", ")", "]", "\n", "assert", "len", "(", "mp4s", ")", "==", "n_episodes", "\n", "assert", "len", "(", "metas", ")", "==", "n_episodes", "\n", "assert", "len", "(", "stats", ")", "==", "1", "\n", "assert", "len", "(", "manifests", ")", "==", "1", "\n", "\n", "", "finally", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers_tests.test_cast_observation.test_cast_observation": [[8, 24], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pfrl.wrappers.CastObservation", "pfrl.wrappers.CastObservation.reset", "numpy.testing.assert_allclose", "pfrl.wrappers.CastObservation.step", "numpy.testing.assert_allclose", "gym.make", "pfrl.wrappers.CastObservation.action_space.sample"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"env_id\"", ",", "[", "\"CartPole-v1\"", ",", "\"Pendulum-v0\"", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"dtype\"", ",", "[", "np", ".", "float16", ",", "np", ".", "float32", ",", "np", ".", "float64", "]", ")", "\n", "def", "test_cast_observation", "(", "env_id", ",", "dtype", ")", ":", "\n", "    ", "env", "=", "pfrl", ".", "wrappers", ".", "CastObservation", "(", "gym", ".", "make", "(", "env_id", ")", ",", "dtype", "=", "dtype", ")", "\n", "rtol", "=", "1e-3", "if", "dtype", "==", "np", ".", "float16", "else", "1e-7", "\n", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "assert", "env", ".", "original_observation", ".", "dtype", "==", "np", ".", "float64", "\n", "assert", "obs", ".", "dtype", "==", "dtype", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "env", ".", "original_observation", ",", "obs", ",", "rtol", "=", "rtol", ")", "\n", "\n", "obs", ",", "r", ",", "done", ",", "info", "=", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "\n", "assert", "env", ".", "original_observation", ".", "dtype", "==", "np", ".", "float64", "\n", "assert", "obs", ".", "dtype", "==", "dtype", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "env", ".", "original_observation", ",", "obs", ",", "rtol", "=", "rtol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers_tests.test_cast_observation.test_cast_observation_to_float32": [[26, 39], ["pytest.mark.parametrize", "pfrl.wrappers.CastObservationToFloat32", "pfrl.wrappers.CastObservationToFloat32.reset", "numpy.testing.assert_allclose", "pfrl.wrappers.CastObservationToFloat32.step", "numpy.testing.assert_allclose", "gym.make", "pfrl.wrappers.CastObservationToFloat32.action_space.sample"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"env_id\"", ",", "[", "\"CartPole-v1\"", ",", "\"Pendulum-v0\"", "]", ")", "\n", "def", "test_cast_observation_to_float32", "(", "env_id", ")", ":", "\n", "    ", "env", "=", "pfrl", ".", "wrappers", ".", "CastObservationToFloat32", "(", "gym", ".", "make", "(", "env_id", ")", ")", "\n", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "assert", "env", ".", "original_observation", ".", "dtype", "==", "np", ".", "float64", "\n", "assert", "obs", ".", "dtype", "==", "np", ".", "float32", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "env", ".", "original_observation", ",", "obs", ")", "\n", "\n", "obs", ",", "r", ",", "done", ",", "info", "=", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "assert", "env", ".", "original_observation", ".", "dtype", "==", "np", ".", "float64", "\n", "assert", "obs", ".", "dtype", "==", "np", ".", "float32", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "env", ".", "original_observation", ",", "obs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers_tests.test_vector_frame_stack.TestVectorEnvWrapper.test": [[16, 26], ["pfrl.envs.SerialVectorEnv", "pfrl.wrappers.vector_frame_stack.VectorEnvWrapper", "test_vector_frame_stack.TestVectorEnvWrapper.assertIs", "test_vector_frame_stack.TestVectorEnvWrapper.assertIs", "test_vector_frame_stack.TestVectorEnvWrapper.assertIs", "test_vector_frame_stack.TestVectorEnvWrapper.assertIs", "unittest.mock.Mock", "range"], "methods", ["None"], ["    ", "def", "test", "(", "self", ")", ":", "\n", "\n", "        ", "vec_env", "=", "pfrl", ".", "envs", ".", "SerialVectorEnv", "(", "[", "mock", ".", "Mock", "(", ")", "for", "_", "in", "range", "(", "3", ")", "]", ")", "\n", "\n", "wrapped_vec_env", "=", "VectorEnvWrapper", "(", "vec_env", ")", "\n", "\n", "self", ".", "assertIs", "(", "wrapped_vec_env", ".", "env", ",", "vec_env", ")", "\n", "self", ".", "assertIs", "(", "wrapped_vec_env", ".", "unwrapped", ",", "vec_env", ".", "unwrapped", ")", "\n", "self", ".", "assertIs", "(", "wrapped_vec_env", ".", "action_space", ",", "vec_env", ".", "action_space", ")", "\n", "self", ".", "assertIs", "(", "wrapped_vec_env", ".", "observation_space", ",", "vec_env", ".", "observation_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers_tests.test_vector_frame_stack.test_vector_frame_stack": [[28, 120], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pfrl.envs.MultiprocessVectorEnv", "pfrl.wrappers.vector_frame_stack.VectorFrameStack", "pfrl.envs.MultiprocessVectorEnv.reset", "pfrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "range", "pfrl.envs.MultiprocessVectorEnv.step", "pfrl.wrappers.vector_frame_stack.VectorFrameStack.step", "range", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "range", "unittest.mock.Mock", "numpy.random.RandomState", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Box", "gym.spaces.Box", "pfrl.envs.MultiprocessVectorEnv", "isinstance", "isinstance", "numpy.testing.assert_allclose", "isinstance", "isinstance", "numpy.testing.assert_allclose", "pfrl.envs.MultiprocessVectorEnv.reset", "pfrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "pfrl.envs.MultiprocessVectorEnv.step", "pfrl.wrappers.vector_frame_stack.VectorFrameStack.step", "range", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "np.random.RandomState.rand", "functools.partial", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "isinstance", "isinstance", "numpy.testing.assert_allclose", "range", "np.random.RandomState.rand", "np.random.RandomState.rand", "bool", "range", "test_vector_frame_stack.test_vector_frame_stack.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"num_envs\"", ",", "[", "1", ",", "3", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"k\"", ",", "[", "2", ",", "3", "]", ")", "\n", "def", "test_vector_frame_stack", "(", "num_envs", ",", "k", ")", ":", "\n", "\n", "    ", "steps", "=", "10", "\n", "\n", "# Mock env that returns atari-like frames", "\n", "def", "make_env", "(", "idx", ")", ":", "\n", "        ", "env", "=", "mock", ".", "Mock", "(", ")", "\n", "np_random", "=", "np", ".", "random", ".", "RandomState", "(", "idx", ")", "\n", "env", ".", "reset", ".", "side_effect", "=", "[", "np_random", ".", "rand", "(", "1", ",", "84", ",", "84", ")", "for", "_", "in", "range", "(", "steps", ")", "]", "\n", "env", ".", "step", ".", "side_effect", "=", "[", "\n", "(", "\n", "np_random", ".", "rand", "(", "1", ",", "84", ",", "84", ")", ",", "\n", "np_random", ".", "rand", "(", ")", ",", "\n", "bool", "(", "np_random", ".", "randint", "(", "2", ")", ")", ",", "\n", "{", "}", ",", "\n", ")", "\n", "for", "_", "in", "range", "(", "steps", ")", "\n", "]", "\n", "env", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "2", ")", "\n", "env", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "1", ",", "84", ",", "84", ")", ",", "dtype", "=", "np", ".", "uint8", "\n", ")", "\n", "return", "env", "\n", "\n", "# Wrap by FrameStack and MultiprocessVectorEnv", "\n", "", "fs_env", "=", "pfrl", ".", "envs", ".", "MultiprocessVectorEnv", "(", "\n", "[", "\n", "functools", ".", "partial", "(", "FrameStack", ",", "make_env", "(", "idx", ")", ",", "k", "=", "k", ",", "channel_order", "=", "\"chw\"", ")", "\n", "for", "idx", ",", "env", "in", "enumerate", "(", "range", "(", "num_envs", ")", ")", "\n", "]", "\n", ")", "\n", "\n", "# Wrap by MultiprocessVectorEnv and VectorFrameStack", "\n", "vfs_env", "=", "VectorFrameStack", "(", "\n", "pfrl", ".", "envs", ".", "MultiprocessVectorEnv", "(", "\n", "[", "\n", "functools", ".", "partial", "(", "make_env", ",", "idx", ")", "\n", "for", "idx", ",", "env", "in", "enumerate", "(", "range", "(", "num_envs", ")", ")", "\n", "]", "\n", ")", ",", "\n", "k", "=", "k", ",", "\n", "stack_axis", "=", "0", ",", "\n", ")", "\n", "\n", "assert", "fs_env", ".", "action_space", "==", "vfs_env", ".", "action_space", "\n", "assert", "fs_env", ".", "observation_space", "==", "vfs_env", ".", "observation_space", "\n", "\n", "fs_obs", "=", "fs_env", ".", "reset", "(", ")", "\n", "vfs_obs", "=", "vfs_env", ".", "reset", "(", ")", "\n", "\n", "# Same LazyFrames observations", "\n", "for", "env_idx", "in", "range", "(", "num_envs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "fs_obs", "[", "env_idx", "]", ",", "LazyFrames", ")", "\n", "assert", "isinstance", "(", "vfs_obs", "[", "env_idx", "]", ",", "LazyFrames", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "np", ".", "asarray", "(", "fs_obs", "[", "env_idx", "]", ")", ",", "np", ".", "asarray", "(", "vfs_obs", "[", "env_idx", "]", ")", "\n", ")", "\n", "\n", "", "batch_action", "=", "[", "0", "]", "*", "num_envs", "\n", "fs_new_obs", ",", "fs_r", ",", "fs_done", ",", "_", "=", "fs_env", ".", "step", "(", "batch_action", ")", "\n", "vfs_new_obs", ",", "vfs_r", ",", "vfs_done", ",", "_", "=", "vfs_env", ".", "step", "(", "batch_action", ")", "\n", "\n", "# Same LazyFrames observations, but those from fs_env are copies", "\n", "# while those from vfs_env are references.", "\n", "for", "env_idx", "in", "range", "(", "num_envs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "fs_new_obs", "[", "env_idx", "]", ",", "LazyFrames", ")", "\n", "assert", "isinstance", "(", "vfs_new_obs", "[", "env_idx", "]", ",", "LazyFrames", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "np", ".", "asarray", "(", "fs_new_obs", "[", "env_idx", "]", ")", ",", "np", ".", "asarray", "(", "vfs_new_obs", "[", "env_idx", "]", ")", "\n", ")", "\n", "assert", "fs_new_obs", "[", "env_idx", "]", ".", "_frames", "[", "-", "2", "]", "is", "not", "fs_obs", "[", "env_idx", "]", ".", "_frames", "[", "-", "1", "]", "\n", "assert", "vfs_new_obs", "[", "env_idx", "]", ".", "_frames", "[", "-", "2", "]", "is", "vfs_obs", "[", "env_idx", "]", ".", "_frames", "[", "-", "1", "]", "\n", "\n", "", "np", ".", "testing", ".", "assert_allclose", "(", "fs_r", ",", "vfs_r", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "fs_done", ",", "vfs_done", ")", "\n", "\n", "# Check equivalence", "\n", "for", "_", "in", "range", "(", "steps", "-", "1", ")", ":", "\n", "        ", "fs_env", ".", "reset", "(", "mask", "=", "np", ".", "logical_not", "(", "fs_done", ")", ")", "\n", "vfs_env", ".", "reset", "(", "mask", "=", "np", ".", "logical_not", "(", "vfs_done", ")", ")", "\n", "fs_obs", ",", "fs_r", ",", "fs_done", ",", "_", "=", "fs_env", ".", "step", "(", "batch_action", ")", "\n", "vfs_obs", ",", "vfs_r", ",", "vfs_done", ",", "_", "=", "vfs_env", ".", "step", "(", "batch_action", ")", "\n", "for", "env_idx", "in", "range", "(", "num_envs", ")", ":", "\n", "            ", "assert", "isinstance", "(", "fs_new_obs", "[", "env_idx", "]", ",", "LazyFrames", ")", "\n", "assert", "isinstance", "(", "vfs_new_obs", "[", "env_idx", "]", ",", "LazyFrames", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "np", ".", "asarray", "(", "fs_new_obs", "[", "env_idx", "]", ")", ",", "np", ".", "asarray", "(", "vfs_new_obs", "[", "env_idx", "]", ")", "\n", ")", "\n", "", "np", ".", "testing", ".", "assert_allclose", "(", "fs_r", ",", "vfs_r", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "fs_done", ",", "vfs_done", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers_tests.test_scale_reward.test_scale_reward": [[8, 28], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pfrl.wrappers.ScaleReward", "numpy.testing.assert_allclose", "pfrl.wrappers.ScaleReward.reset", "pfrl.wrappers.ScaleReward.step", "gym.make", "pfrl.wrappers.ScaleReward.action_space.sample", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"env_id\"", ",", "[", "\"CartPole-v1\"", ",", "\"MountainCar-v0\"", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"scale\"", ",", "[", "1.0", ",", "0.1", "]", ")", "\n", "def", "test_scale_reward", "(", "env_id", ",", "scale", ")", ":", "\n", "    ", "env", "=", "pfrl", ".", "wrappers", ".", "ScaleReward", "(", "gym", ".", "make", "(", "env_id", ")", ",", "scale", "=", "scale", ")", "\n", "assert", "env", ".", "original_reward", "is", "None", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "env", ".", "scale", ",", "scale", ")", "\n", "\n", "_", "=", "env", ".", "reset", "(", ")", "\n", "_", ",", "r", ",", "_", ",", "_", "=", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "\n", "if", "env_id", "==", "\"CartPole-v1\"", ":", "\n", "# Original reward must be 1", "\n", "        ", "np", ".", "testing", ".", "assert_allclose", "(", "env", ".", "original_reward", ",", "1", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "r", ",", "scale", ")", "\n", "", "elif", "env_id", "==", "\"MountainCar-v0\"", ":", "\n", "# Original reward must be -1", "\n", "        ", "np", ".", "testing", ".", "assert_allclose", "(", "env", ".", "original_reward", ",", "-", "1", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "r", ",", "-", "scale", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers_tests.test_randomize_action.ActionRecordingEnv.__init__": [[14, 16], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "past_actions", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers_tests.test_randomize_action.ActionRecordingEnv.reset": [[17, 19], ["test_randomize_action.ActionRecordingEnv.observation_space.sample"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "observation_space", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers_tests.test_randomize_action.ActionRecordingEnv.step": [[20, 23], ["test_randomize_action.ActionRecordingEnv.past_actions.append", "test_randomize_action.ActionRecordingEnv.observation_space.sample"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "past_actions", ".", "append", "(", "action", ")", "\n", "return", "self", ".", "observation_space", ".", "sample", "(", ")", ",", "0", ",", "False", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers_tests.test_randomize_action.test_action_ratio": [[25, 49], ["pytest.mark.parametrize", "test_randomize_action.ActionRecordingEnv", "pfrl.wrappers.RandomizeAction", "pfrl.wrappers.RandomizeAction.reset", "range", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "pfrl.wrappers.RandomizeAction.step", "pfrl.wrappers.RandomizeAction.env.past_actions.count", "pfrl.wrappers.RandomizeAction.env.past_actions.count", "pfrl.wrappers.RandomizeAction.env.past_actions.count"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"random_fraction\"", ",", "[", "0", ",", "0.3", ",", "0.6", ",", "1", "]", ")", "\n", "def", "test_action_ratio", "(", "random_fraction", ")", ":", "\n", "    ", "env", "=", "ActionRecordingEnv", "(", ")", "\n", "env", "=", "pfrl", ".", "wrappers", ".", "RandomizeAction", "(", "env", ",", "random_fraction", "=", "random_fraction", ")", "\n", "env", ".", "reset", "(", ")", "\n", "n", "=", "1000", "\n", "delta", "=", "0.05", "\n", "for", "_", "in", "range", "(", "n", ")", ":", "\n", "# Always send action 0", "\n", "        ", "env", ".", "step", "(", "0", ")", "\n", "# Ratio of selected actions should be:", "\n", "#   0: (1 - random_fraction) + random_fraction/3", "\n", "#   1: random_fraction/3", "\n", "#   2: random_fraction/3", "\n", "", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "env", ".", "env", ".", "past_actions", ".", "count", "(", "0", ")", "/", "n", ",", "\n", "(", "1", "-", "random_fraction", ")", "+", "random_fraction", "/", "3", ",", "\n", "atol", "=", "delta", ",", "\n", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "env", ".", "env", ".", "past_actions", ".", "count", "(", "1", ")", "/", "n", ",", "random_fraction", "/", "3", ",", "atol", "=", "delta", "\n", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "env", ".", "env", ".", "past_actions", ".", "count", "(", "2", ")", "/", "n", ",", "random_fraction", "/", "3", ",", "atol", "=", "delta", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers_tests.test_randomize_action.test_seed": [[52, 72], ["pytest.mark.parametrize", "test_randomize_action.test_seed.get_actions"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.leaderboard.solution.get_actions"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"random_fraction\"", ",", "[", "0", ",", "0.3", ",", "0.6", ",", "1", "]", ")", "\n", "def", "test_seed", "(", "random_fraction", ")", ":", "\n", "    ", "def", "get_actions", "(", "seed", ")", ":", "\n", "        ", "env", "=", "ActionRecordingEnv", "(", ")", "\n", "env", "=", "pfrl", ".", "wrappers", ".", "RandomizeAction", "(", "env", ",", "random_fraction", "=", "random_fraction", ")", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "for", "_", "in", "range", "(", "1000", ")", ":", "\n", "# Always send action 0", "\n", "            ", "env", ".", "step", "(", "0", ")", "\n", "", "return", "env", ".", "env", ".", "past_actions", "\n", "\n", "", "a_seed0", "=", "get_actions", "(", "0", ")", "\n", "a_seed1", "=", "get_actions", "(", "1", ")", "\n", "b_seed0", "=", "get_actions", "(", "0", ")", "\n", "b_seed1", "=", "get_actions", "(", "1", ")", "\n", "\n", "assert", "a_seed0", "==", "b_seed0", "\n", "assert", "a_seed1", "==", "b_seed1", "\n", "if", "random_fraction", ">", "0", ":", "\n", "        ", "assert", "a_seed0", "!=", "a_seed1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_train_agent_async.TestTrainLoop.test_needs_reset": [[149, 192], ["tempfile.mkdtemp", "unittest.mock.Mock", "unittest.mock.Mock", "torch.Value", "torch.Value", "torch.Event", "torch.Event", "pfrl.experiments.train_agent_async.train_loop", "test_train_agent_async.TestTrainLoop.assertEqual", "test_train_agent_async.TestTrainLoop.assertEqual", "test_train_agent_async.TestTrainLoop.assertEqual", "test_train_agent_async.TestTrainLoop.assertFalse", "test_train_agent_async.TestTrainLoop.assertTrue", "test_train_agent_async.TestTrainLoop.assertEqual", "test_train_agent_async.TestTrainLoop.assertEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent_async.train_loop"], ["    ", "def", "test_needs_reset", "(", "self", ")", ":", "\n", "\n", "        ", "outdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "agent", "=", "mock", ".", "Mock", "(", ")", "\n", "env", "=", "mock", ".", "Mock", "(", ")", "\n", "# First episode: 0 -> 1 -> 2 -> 3 (reset)", "\n", "# Second episode: 4 -> 5 -> 6 -> 7 (done)", "\n", "env", ".", "reset", ".", "side_effect", "=", "[", "(", "\"state\"", ",", "0", ")", ",", "(", "\"state\"", ",", "4", ")", "]", "\n", "env", ".", "step", ".", "side_effect", "=", "[", "\n", "(", "(", "\"state\"", ",", "1", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "2", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "3", ")", ",", "0", ",", "False", ",", "{", "\"needs_reset\"", ":", "True", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "5", ")", ",", "-", "0.5", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "6", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "7", ")", ",", "1", ",", "True", ",", "{", "}", ")", ",", "\n", "]", "\n", "\n", "counter", "=", "mp", ".", "Value", "(", "\"i\"", ",", "0", ")", "\n", "episodes_counter", "=", "mp", ".", "Value", "(", "\"i\"", ",", "0", ")", "\n", "stop_event", "=", "mp", ".", "Event", "(", ")", "\n", "exception_event", "=", "mp", ".", "Event", "(", ")", "\n", "train_loop", "(", "\n", "process_idx", "=", "0", ",", "\n", "env", "=", "env", ",", "\n", "agent", "=", "agent", ",", "\n", "steps", "=", "5", ",", "\n", "outdir", "=", "outdir", ",", "\n", "counter", "=", "counter", ",", "\n", "episodes_counter", "=", "episodes_counter", ",", "\n", "stop_event", "=", "stop_event", ",", "\n", "exception_event", "=", "exception_event", ",", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "agent", ".", "act", ".", "call_count", ",", "5", ")", "\n", "self", ".", "assertEqual", "(", "agent", ".", "observe", ".", "call_count", ",", "5", ")", "\n", "self", ".", "assertEqual", "(", "agent", ".", "observe", ".", "call_count", ",", "5", ")", "\n", "# done=False and reset=True at state 3", "\n", "self", ".", "assertFalse", "(", "agent", ".", "observe", ".", "call_args_list", "[", "2", "]", "[", "0", "]", "[", "2", "]", ")", "\n", "self", ".", "assertTrue", "(", "agent", ".", "observe", ".", "call_args_list", "[", "2", "]", "[", "0", "]", "[", "3", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "reset", ".", "call_count", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "step", ".", "call_count", ",", "5", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_train_agent_async.test_train_agent_async": [[13, 113], ["pytest.mark.parametrize", "pytest.mark.parametrize", "tempfile.mkdtemp", "unittest.mock.Mock", "threading.Lock", "unittest.mock.Mock", "enumerate", "mock.Mock.save.assert_called_once_with", "unittest.mock.Mock", "test_train_agent_async.test_train_agent_async._make_env"], "function", ["None"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"num_envs\"", ",", "[", "1", ",", "2", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"max_episode_len\"", ",", "[", "None", ",", "2", "]", ")", "\n", "def", "test_train_agent_async", "(", "num_envs", ",", "max_episode_len", ")", ":", "\n", "\n", "    ", "steps", "=", "50", "\n", "\n", "outdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "agent", "=", "mock", ".", "Mock", "(", ")", "\n", "agent", ".", "shared_attributes", "=", "[", "]", "\n", "\n", "def", "_make_env", "(", "process_idx", ",", "test", ")", ":", "\n", "        ", "env", "=", "mock", ".", "Mock", "(", ")", "\n", "env", ".", "reset", ".", "side_effect", "=", "[", "(", "\"state\"", ",", "0", ")", "]", "*", "1000", "\n", "if", "max_episode_len", "is", "None", ":", "\n", "# Episodic env that terminates after 5 actions", "\n", "            ", "env", ".", "step", ".", "side_effect", "=", "[", "\n", "(", "(", "\"state\"", ",", "1", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "2", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "3", ")", ",", "-", "0.5", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "4", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "5", ")", ",", "1", ",", "True", ",", "{", "}", ")", ",", "\n", "]", "*", "1000", "\n", "", "else", ":", "\n", "# Continuing env", "\n", "            ", "env", ".", "step", ".", "side_effect", "=", "[", "\n", "(", "(", "\"state\"", ",", "1", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "]", "*", "1000", "\n", "", "return", "env", "\n", "\n", "# Keep references to mock envs to check their states later", "\n", "", "envs", "=", "[", "_make_env", "(", "i", ",", "test", "=", "False", ")", "for", "i", "in", "range", "(", "num_envs", ")", "]", "\n", "eval_envs", "=", "[", "_make_env", "(", "i", ",", "test", "=", "True", ")", "for", "i", "in", "range", "(", "num_envs", ")", "]", "\n", "\n", "def", "make_env", "(", "process_idx", ",", "test", ")", ":", "\n", "        ", "if", "test", ":", "\n", "            ", "return", "eval_envs", "[", "process_idx", "]", "\n", "", "else", ":", "\n", "            ", "return", "envs", "[", "process_idx", "]", "\n", "\n", "# Mock states cannot be shared among processes. To check states of mock", "\n", "# objects, threading is used instead of multiprocessing.", "\n", "# Because threading.Thread does not have .exitcode attribute, we", "\n", "# add the attribute manually to avoid an exception.", "\n", "", "", "import", "threading", "\n", "\n", "# Mock.call_args_list does not seem thread-safe", "\n", "hook_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "hook", "=", "mock", ".", "Mock", "(", ")", "\n", "\n", "def", "hook_locked", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "hook_lock", ":", "\n", "            ", "return", "hook", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "with", "mock", ".", "patch", "(", "\n", "\"torch.multiprocessing.Process\"", ",", "threading", ".", "Thread", "\n", ")", ",", "mock", ".", "patch", ".", "object", "(", "threading", ".", "Thread", ",", "\"exitcode\"", ",", "create", "=", "True", ",", "new", "=", "0", ")", ":", "\n", "        ", "pfrl", ".", "experiments", ".", "train_agent_async", "(", "\n", "processes", "=", "num_envs", ",", "\n", "agent", "=", "agent", ",", "\n", "make_env", "=", "make_env", ",", "\n", "steps", "=", "steps", ",", "\n", "outdir", "=", "outdir", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", "global_step_hooks", "=", "[", "hook_locked", "]", ",", "\n", ")", "\n", "\n", "", "if", "num_envs", "==", "1", ":", "\n", "        ", "assert", "agent", ".", "act", ".", "call_count", "==", "steps", "\n", "assert", "agent", ".", "observe", ".", "call_count", "==", "steps", "\n", "", "elif", "num_envs", ">", "1", ":", "\n", "        ", "assert", "agent", ".", "act", ".", "call_count", ">", "steps", "\n", "assert", "agent", ".", "observe", ".", "call_count", "==", "agent", ".", "act", ".", "call_count", "\n", "\n", "# All the envs (including eval envs) should to be closed", "\n", "", "for", "env", "in", "envs", "+", "eval_envs", ":", "\n", "        ", "assert", "env", ".", "close", ".", "call_count", "==", "1", "\n", "\n", "", "if", "num_envs", "==", "1", ":", "\n", "        ", "assert", "hook", ".", "call_count", "==", "steps", "\n", "", "elif", "num_envs", ">", "1", ":", "\n", "        ", "assert", "hook", ".", "call_count", ">", "steps", "\n", "\n", "# A hook receives (env, agent, step)", "\n", "", "for", "i", ",", "call", "in", "enumerate", "(", "hook", ".", "call_args_list", ")", ":", "\n", "        ", "args", ",", "kwargs", "=", "call", "\n", "assert", "any", "(", "args", "[", "0", "]", "==", "env", "for", "env", "in", "envs", ")", "\n", "assert", "args", "[", "1", "]", "==", "agent", "\n", "if", "num_envs", "==", "1", ":", "\n", "# If num_envs == 1, a hook should be called sequentially.", "\n", "# step starts with 1", "\n", "            ", "assert", "args", "[", "2", "]", "==", "i", "+", "1", "\n", "", "", "if", "num_envs", ">", "1", ":", "\n", "# If num_envs > 1, a hook may not be called sequentially.", "\n", "# Thus, we only check if they are called for each step.", "\n", "        ", "hook_steps", "=", "[", "call", "[", "0", "]", "[", "2", "]", "for", "call", "in", "hook", ".", "call_args_list", "]", "\n", "assert", "list", "(", "range", "(", "1", ",", "len", "(", "hook", ".", "call_args_list", ")", "+", "1", ")", ")", "==", "sorted", "(", "hook_steps", ")", "\n", "\n", "# Agent should be saved", "\n", "", "agent", ".", "save", ".", "assert_called_once_with", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"{}_finish\"", ".", "format", "(", "steps", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_train_agent_async.test_unsupported_evaluation_hook": [[115, 145], ["UnsupportedEvaluationHook", "pytest.raises", "pfrl.experiments.train_agent_async", "str", "unittest.mock.Mock", "unittest.mock.Mock", "unittest.mock.Mock"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent_async.train_agent_async"], ["", "def", "test_unsupported_evaluation_hook", "(", ")", ":", "\n", "    ", "class", "UnsupportedEvaluationHook", "(", "pfrl", ".", "experiments", ".", "evaluation_hooks", ".", "EvaluationHook", ")", ":", "\n", "        ", "support_train_agent", "=", "True", "\n", "support_train_agent_batch", "=", "True", "\n", "support_train_agent_async", "=", "False", "\n", "\n", "def", "__call__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "agent", ",", "\n", "evaluator", ",", "\n", "step", ",", "\n", "eval_stats", ",", "\n", "agent_stats", ",", "\n", "env_stats", ",", "\n", ")", ":", "\n", "            ", "pass", "\n", "\n", "", "", "unsupported_evaluation_hook", "=", "UnsupportedEvaluationHook", "(", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", "as", "exception", ":", "\n", "        ", "pfrl", ".", "experiments", ".", "train_agent_async", "(", "\n", "outdir", "=", "mock", ".", "Mock", "(", ")", ",", "\n", "processes", "=", "mock", ".", "Mock", "(", ")", ",", "\n", "make_env", "=", "mock", ".", "Mock", "(", ")", ",", "\n", "evaluation_hooks", "=", "[", "unsupported_evaluation_hook", "]", ",", "\n", ")", "\n", "\n", "", "assert", "str", "(", "exception", ".", "value", ")", "==", "\"{} does not support train_agent_async().\"", ".", "format", "(", "\n", "unsupported_evaluation_hook", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_train_agent.TestTrainAgent.test": [[11, 51], ["tempfile.mkdtemp", "unittest.mock.Mock", "unittest.mock.Mock", "unittest.mock.Mock", "pfrl.experiments.train_agent", "test_train_agent.TestTrainAgent.assertListEqual", "test_train_agent.TestTrainAgent.assertEqual", "test_train_agent.TestTrainAgent.assertEqual", "test_train_agent.TestTrainAgent.assertTrue", "test_train_agent.TestTrainAgent.assertEqual", "test_train_agent.TestTrainAgent.assertEqual", "test_train_agent.TestTrainAgent.assertEqual", "enumerate", "test_train_agent.TestTrainAgent.assertEqual", "test_train_agent.TestTrainAgent.assertEqual", "test_train_agent.TestTrainAgent.assertEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent.train_agent"], ["    ", "def", "test", "(", "self", ")", ":", "\n", "\n", "        ", "outdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "agent", "=", "mock", ".", "Mock", "(", ")", "\n", "env", "=", "mock", ".", "Mock", "(", ")", "\n", "# Reaches the terminal state after five actions", "\n", "env", ".", "reset", ".", "side_effect", "=", "[", "(", "\"state\"", ",", "0", ")", "]", "\n", "env", ".", "step", ".", "side_effect", "=", "[", "\n", "(", "(", "\"state\"", ",", "1", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "2", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "3", ")", ",", "-", "0.5", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "4", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "5", ")", ",", "1", ",", "True", ",", "{", "}", ")", ",", "\n", "]", "\n", "hook", "=", "mock", ".", "Mock", "(", ")", "\n", "\n", "eval_stats_history", "=", "pfrl", ".", "experiments", ".", "train_agent", "(", "\n", "agent", "=", "agent", ",", "env", "=", "env", ",", "steps", "=", "5", ",", "outdir", "=", "outdir", ",", "step_hooks", "=", "[", "hook", "]", "\n", ")", "\n", "\n", "# No evaluation invoked when evaluator=None (default) is passed to train_agent.", "\n", "self", ".", "assertListEqual", "(", "eval_stats_history", ",", "[", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "agent", ".", "act", ".", "call_count", ",", "5", ")", "\n", "self", ".", "assertEqual", "(", "agent", ".", "observe", ".", "call_count", ",", "5", ")", "\n", "# done=True at state 5", "\n", "self", ".", "assertTrue", "(", "agent", ".", "observe", ".", "call_args_list", "[", "4", "]", "[", "0", "]", "[", "2", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "reset", ".", "call_count", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "step", ".", "call_count", ",", "5", ")", "\n", "\n", "self", ".", "assertEqual", "(", "hook", ".", "call_count", ",", "5", ")", "\n", "# A hook receives (env, agent, step)", "\n", "for", "i", ",", "call", "in", "enumerate", "(", "hook", ".", "call_args_list", ")", ":", "\n", "            ", "args", ",", "kwargs", "=", "call", "\n", "self", ".", "assertEqual", "(", "args", "[", "0", "]", ",", "env", ")", "\n", "self", ".", "assertEqual", "(", "args", "[", "1", "]", ",", "agent", ")", "\n", "# step starts with 1", "\n", "self", ".", "assertEqual", "(", "args", "[", "2", "]", ",", "i", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_train_agent.TestTrainAgent.test_needs_reset": [[52, 95], ["tempfile.mkdtemp", "unittest.mock.Mock", "unittest.mock.Mock", "unittest.mock.Mock", "pfrl.experiments.train_agent", "test_train_agent.TestTrainAgent.assertListEqual", "test_train_agent.TestTrainAgent.assertEqual", "test_train_agent.TestTrainAgent.assertEqual", "test_train_agent.TestTrainAgent.assertFalse", "test_train_agent.TestTrainAgent.assertTrue", "test_train_agent.TestTrainAgent.assertEqual", "test_train_agent.TestTrainAgent.assertEqual", "test_train_agent.TestTrainAgent.assertEqual", "enumerate", "test_train_agent.TestTrainAgent.assertEqual", "test_train_agent.TestTrainAgent.assertEqual", "test_train_agent.TestTrainAgent.assertEqual"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent.train_agent"], ["", "", "def", "test_needs_reset", "(", "self", ")", ":", "\n", "\n", "        ", "outdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "agent", "=", "mock", ".", "Mock", "(", ")", "\n", "env", "=", "mock", ".", "Mock", "(", ")", "\n", "# First episode: 0 -> 1 -> 2 -> 3 (reset)", "\n", "# Second episode: 4 -> 5 -> 6 -> 7 (done)", "\n", "env", ".", "reset", ".", "side_effect", "=", "[", "(", "\"state\"", ",", "0", ")", ",", "(", "\"state\"", ",", "4", ")", "]", "\n", "env", ".", "step", ".", "side_effect", "=", "[", "\n", "(", "(", "\"state\"", ",", "1", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "2", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "3", ")", ",", "0", ",", "False", ",", "{", "\"needs_reset\"", ":", "True", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "5", ")", ",", "-", "0.5", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "6", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "7", ")", ",", "1", ",", "True", ",", "{", "}", ")", ",", "\n", "]", "\n", "hook", "=", "mock", ".", "Mock", "(", ")", "\n", "\n", "eval_stats_history", "=", "pfrl", ".", "experiments", ".", "train_agent", "(", "\n", "agent", "=", "agent", ",", "env", "=", "env", ",", "steps", "=", "5", ",", "outdir", "=", "outdir", ",", "step_hooks", "=", "[", "hook", "]", "\n", ")", "\n", "\n", "# No evaluation invoked when evaluator=None (default) is passed to train_agent.", "\n", "self", ".", "assertListEqual", "(", "eval_stats_history", ",", "[", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "agent", ".", "act", ".", "call_count", ",", "5", ")", "\n", "self", ".", "assertEqual", "(", "agent", ".", "observe", ".", "call_count", ",", "5", ")", "\n", "# done=False and reset=True at state 3", "\n", "self", ".", "assertFalse", "(", "agent", ".", "observe", ".", "call_args_list", "[", "2", "]", "[", "0", "]", "[", "2", "]", ")", "\n", "self", ".", "assertTrue", "(", "agent", ".", "observe", ".", "call_args_list", "[", "2", "]", "[", "0", "]", "[", "3", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "reset", ".", "call_count", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "step", ".", "call_count", ",", "5", ")", "\n", "\n", "self", ".", "assertEqual", "(", "hook", ".", "call_count", ",", "5", ")", "\n", "# A hook receives (env, agent, step)", "\n", "for", "i", ",", "call", "in", "enumerate", "(", "hook", ".", "call_args_list", ")", ":", "\n", "            ", "args", ",", "kwargs", "=", "call", "\n", "self", ".", "assertEqual", "(", "args", "[", "0", "]", ",", "env", ")", "\n", "self", ".", "assertEqual", "(", "args", "[", "1", "]", ",", "agent", ")", "\n", "# step starts with 1", "\n", "self", ".", "assertEqual", "(", "args", "[", "2", "]", ",", "i", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_train_agent.TestTrainAgent.test_unsupported_evaluation_hook": [[96, 134], ["UnsupportedEvaluationHook", "pytest.raises", "pfrl.experiments.train_agent_with_evaluation", "str", "unittest.mock.Mock", "unittest.mock.Mock", "unittest.mock.Mock"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent.train_agent_with_evaluation"], ["", "", "def", "test_unsupported_evaluation_hook", "(", "self", ")", ":", "\n", "        ", "class", "UnsupportedEvaluationHook", "(", "\n", "pfrl", ".", "experiments", ".", "evaluation_hooks", ".", "EvaluationHook", "\n", ")", ":", "\n", "            ", "support_train_agent", "=", "False", "\n", "support_train_agent_batch", "=", "True", "\n", "support_train_agent_async", "=", "True", "\n", "\n", "def", "__call__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "agent", ",", "\n", "evaluator", ",", "\n", "step", ",", "\n", "eval_stats", ",", "\n", "agent_stats", ",", "\n", "env_stats", ",", "\n", ")", ":", "\n", "                ", "pass", "\n", "\n", "", "", "unsupported_evaluation_hook", "=", "UnsupportedEvaluationHook", "(", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", "as", "exception", ":", "\n", "            ", "pfrl", ".", "experiments", ".", "train_agent_with_evaluation", "(", "\n", "agent", "=", "mock", ".", "Mock", "(", ")", ",", "\n", "env", "=", "mock", ".", "Mock", "(", ")", ",", "\n", "steps", "=", "1", ",", "\n", "eval_n_steps", "=", "1", ",", "\n", "eval_n_episodes", "=", "None", ",", "\n", "eval_interval", "=", "1", ",", "\n", "outdir", "=", "mock", ".", "Mock", "(", ")", ",", "\n", "evaluation_hooks", "=", "[", "unsupported_evaluation_hook", "]", ",", "\n", ")", "\n", "\n", "", "assert", "str", "(", "\n", "exception", ".", "value", "\n", ")", "==", "\"{} does not support train_agent_with_evaluation().\"", ".", "format", "(", "\n", "unsupported_evaluation_hook", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_train_agent.test_eval_during_episode": [[137, 180], ["pytest.mark.parametrize", "tempfile.mkdtemp", "unittest.mock.MagicMock", "unittest.mock.Mock", "unittest.mock.Mock", "pfrl.experiments.train_agent", "enumerate", "int", "int"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent.train_agent"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"eval_during_episode\"", ",", "[", "False", ",", "True", "]", ")", "\n", "def", "test_eval_during_episode", "(", "eval_during_episode", ")", ":", "\n", "\n", "    ", "outdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "agent", "=", "mock", ".", "MagicMock", "(", ")", "\n", "env", "=", "mock", ".", "Mock", "(", ")", "\n", "# Two episodes", "\n", "env", ".", "reset", ".", "side_effect", "=", "[", "(", "\"state\"", ",", "0", ")", "]", "*", "2", "\n", "env", ".", "step", ".", "side_effect", "=", "[", "\n", "(", "(", "\"state\"", ",", "1", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "2", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "3", ")", ",", "-", "0.5", ",", "True", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "4", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "5", ")", ",", "1", ",", "True", ",", "{", "}", ")", ",", "\n", "]", "\n", "\n", "evaluator", "=", "mock", ".", "Mock", "(", ")", "\n", "pfrl", ".", "experiments", ".", "train_agent", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "steps", "=", "5", ",", "\n", "outdir", "=", "outdir", ",", "\n", "evaluator", "=", "evaluator", ",", "\n", "eval_during_episode", "=", "eval_during_episode", ",", "\n", ")", "\n", "\n", "if", "eval_during_episode", ":", "\n", "# Must be called every timestep", "\n", "        ", "assert", "evaluator", ".", "evaluate_if_necessary", ".", "call_count", "==", "5", "\n", "for", "i", ",", "call", "in", "enumerate", "(", "evaluator", ".", "evaluate_if_necessary", ".", "call_args_list", ")", ":", "\n", "            ", "kwargs", "=", "call", "[", "1", "]", "\n", "assert", "i", "+", "1", "==", "kwargs", "[", "\"t\"", "]", "\n", "assert", "kwargs", "[", "\"episodes\"", "]", "==", "int", "(", "i", ">=", "2", ")", "+", "int", "(", "i", ">=", "4", ")", "\n", "", "", "else", ":", "\n", "# Must be called after every episode", "\n", "        ", "assert", "evaluator", ".", "evaluate_if_necessary", ".", "call_count", "==", "2", "\n", "first_kwargs", "=", "evaluator", ".", "evaluate_if_necessary", ".", "call_args_list", "[", "0", "]", "[", "1", "]", "\n", "second_kwargs", "=", "evaluator", ".", "evaluate_if_necessary", ".", "call_args_list", "[", "1", "]", "[", "1", "]", "\n", "assert", "first_kwargs", "[", "\"t\"", "]", "==", "3", "\n", "assert", "first_kwargs", "[", "\"episodes\"", "]", "==", "1", "\n", "assert", "second_kwargs", "[", "\"t\"", "]", "==", "5", "\n", "assert", "second_kwargs", "[", "\"episodes\"", "]", "==", "2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_hooks.TestLinearInterpolationHook.test_call": [[9, 24], ["pfrl.experiments.LinearInterpolationHook", "range", "numpy.testing.assert_allclose", "buf.append", "pfrl.experiments.LinearInterpolationHook.", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["    ", "def", "test_call", "(", "self", ")", ":", "\n", "\n", "        ", "buf", "=", "[", "]", "\n", "\n", "def", "setter", "(", "env", ",", "agent", ",", "value", ")", ":", "\n", "            ", "buf", ".", "append", "(", "value", ")", "\n", "\n", "", "hook", "=", "pfrl", ".", "experiments", ".", "LinearInterpolationHook", "(", "\n", "total_steps", "=", "10", ",", "start_value", "=", "0.1", ",", "stop_value", "=", "1.0", ",", "setter", "=", "setter", "\n", ")", "\n", "\n", "for", "step", "in", "range", "(", "1", ",", "10", "+", "1", ")", ":", "\n", "            ", "hook", "(", "env", "=", "None", ",", "agent", "=", "None", ",", "step", "=", "step", ")", "\n", "\n", "", "np", ".", "testing", ".", "assert_allclose", "(", "buf", ",", "np", ".", "arange", "(", "1", ",", "10", "+", "1", ",", "dtype", "=", "np", ".", "float32", ")", "/", "10", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_evaluator.TestRunEvaluationEpisode.test_needs_reset": [[222, 249], ["unittest.mock.MagicMock", "unittest.mock.Mock", "pfrl.experiments.evaluator.run_evaluation_episodes", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.run_evaluation_episodes"], ["    ", "def", "test_needs_reset", "(", "self", ")", ":", "\n", "# MagicMock can mock eval_mode while Mock cannot", "\n", "        ", "agent", "=", "mock", ".", "MagicMock", "(", ")", "\n", "env", "=", "mock", ".", "Mock", "(", ")", "\n", "# First episode: 0 -> 1 -> 2 -> 3 (reset)", "\n", "# Second episode: 4 -> 5 -> 6 -> 7 (done)", "\n", "env", ".", "reset", ".", "side_effect", "=", "[", "(", "\"state\"", ",", "0", ")", ",", "(", "\"state\"", ",", "4", ")", "]", "\n", "env", ".", "step", ".", "side_effect", "=", "[", "\n", "(", "(", "\"state\"", ",", "1", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "2", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "3", ")", ",", "0", ",", "False", ",", "{", "\"needs_reset\"", ":", "True", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "5", ")", ",", "-", "0.5", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "6", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "7", ")", ",", "1", ",", "True", ",", "{", "}", ")", ",", "\n", "]", "\n", "scores", ",", "lengths", "=", "evaluator", ".", "run_evaluation_episodes", "(", "\n", "env", ",", "agent", ",", "n_steps", "=", "None", ",", "n_episodes", "=", "2", "\n", ")", "\n", "assert", "len", "(", "scores", ")", "==", "2", "\n", "assert", "len", "(", "lengths", ")", "==", "2", "\n", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "scores", "[", "0", "]", ",", "0", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "scores", "[", "1", "]", ",", "0.5", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "lengths", "[", "0", "]", ",", "3", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "lengths", "[", "1", "]", ",", "3", ")", "\n", "assert", "agent", ".", "act", ".", "call_count", "==", "6", "\n", "assert", "agent", ".", "observe", ".", "call_count", "==", "6", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_evaluator.TestBatchRunEvaluationEpisode.test_needs_reset": [[318, 371], ["unittest.mock.MagicMock", "pfrl.envs.SerialVectorEnv", "pfrl.experiments.evaluator.batch_run_evaluation_episodes", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "all", "unittest.mock.Mock", "len", "len", "test_evaluator.TestBatchRunEvaluationEpisode.test_needs_reset.make_env"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.batch_run_evaluation_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["    ", "def", "test_needs_reset", "(", "self", ")", ":", "\n", "# MagicMock can mock eval_mode while Mock cannot", "\n", "        ", "agent", "=", "mock", ".", "MagicMock", "(", ")", "\n", "agent", ".", "batch_act", ".", "side_effect", "=", "[", "[", "1", ",", "1", "]", "]", "*", "5", "\n", "\n", "def", "make_env", "(", "idx", ")", ":", "\n", "            ", "env", "=", "mock", ".", "Mock", "(", ")", "\n", "if", "idx", "==", "0", ":", "\n", "# First episode: 0 -> 1 -> 2 -> 3 (reset)", "\n", "# Second episode: 4 -> 5 -> 6 -> 7 (done)", "\n", "                ", "env", ".", "reset", ".", "side_effect", "=", "[", "(", "\"state\"", ",", "0", ")", ",", "(", "\"state\"", ",", "4", ")", "]", "\n", "env", ".", "step", ".", "side_effect", "=", "[", "\n", "(", "(", "\"state\"", ",", "1", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "2", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "3", ")", ",", "0", ",", "False", ",", "{", "\"needs_reset\"", ":", "True", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "5", ")", ",", "-", "0.5", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "6", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "7", ")", ",", "1", ",", "True", ",", "{", "}", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "# First episode: 0 -> 1 (reset)", "\n", "# Second episode: 2 -> 3 (reset)", "\n", "# Third episode: 4 -> 5 -> 6 -> 7 (done)", "\n", "                ", "env", ".", "reset", ".", "side_effect", "=", "[", "(", "\"state\"", ",", "0", ")", ",", "(", "\"state\"", ",", "2", ")", ",", "(", "\"state\"", ",", "4", ")", "]", "\n", "env", ".", "step", ".", "side_effect", "=", "[", "\n", "(", "(", "\"state\"", ",", "1", ")", ",", "2", ",", "False", ",", "{", "\"needs_reset\"", ":", "True", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "3", ")", ",", "3", ",", "False", ",", "{", "\"needs_reset\"", ":", "True", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "5", ")", ",", "-", "0.6", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "6", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "7", ")", ",", "1", ",", "True", ",", "{", "}", ")", ",", "\n", "]", "\n", "", "return", "env", "\n", "\n", "", "vec_env", "=", "pfrl", ".", "envs", ".", "SerialVectorEnv", "(", "[", "make_env", "(", "i", ")", "for", "i", "in", "range", "(", "2", ")", "]", ")", "\n", "\n", "# First Env: [1 2 (3_a) 5 6 (7_a)]", "\n", "# Second Env: [(1) (3_b) 5 6 (7_b)]", "\n", "# Results: (1), (3a), (3b), (7b)", "\n", "scores", ",", "lengths", "=", "evaluator", ".", "batch_run_evaluation_episodes", "(", "\n", "vec_env", ",", "agent", ",", "n_steps", "=", "None", ",", "n_episodes", "=", "4", "\n", ")", "\n", "assert", "len", "(", "scores", ")", "==", "4", "\n", "assert", "len", "(", "lengths", ")", "==", "4", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "scores", "[", "0", "]", ",", "0", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "scores", "[", "1", "]", ",", "2", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "scores", "[", "2", "]", ",", "3", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "scores", "[", "3", "]", ",", "0.4", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "lengths", "[", "0", "]", ",", "3", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "lengths", "[", "1", "]", ",", "1", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "lengths", "[", "2", "]", ",", "1", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "lengths", "[", "3", "]", ",", "3", ")", "\n", "# batch_reset should be all True", "\n", "assert", "all", "(", "agent", ".", "batch_observe", ".", "call_args", "[", "0", "]", "[", "3", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_evaluator.test_evaluator_evaluate_if_necessary": [[12, 101], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "tempfile.mkdtemp", "unittest.mock.MagicMock", "unittest.mock.Mock", "unittest.mock.create_autospec", "pfrl.experiments.evaluator.Evaluator", "evaluator.Evaluator.evaluate_if_necessary", "evaluator.Evaluator.evaluate_if_necessary", "evaluator.Evaluator.evaluate_if_necessary", "evaluator.Evaluator.evaluate_if_necessary", "evaluator.Evaluator.evaluate_if_necessary", "pytest.raises", "pfrl.experiments.evaluator.Evaluator"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.evaluate_if_necessary", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.evaluate_if_necessary", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.evaluate_if_necessary", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.evaluate_if_necessary", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.evaluate_if_necessary"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"save_best_so_far_agent\"", ",", "[", "True", ",", "False", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"n_steps\"", ",", "[", "None", ",", "1", ",", "2", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"n_episodes\"", ",", "[", "None", ",", "1", ",", "2", "]", ")", "\n", "def", "test_evaluator_evaluate_if_necessary", "(", "save_best_so_far_agent", ",", "n_steps", ",", "n_episodes", ")", ":", "\n", "\n", "    ", "outdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "# MagicMock can mock eval_mode while Mock cannot", "\n", "agent", "=", "mock", ".", "MagicMock", "(", ")", "\n", "agent", ".", "act", ".", "return_value", "=", "\"action\"", "\n", "agent", ".", "get_statistics", ".", "return_value", "=", "[", "]", "\n", "\n", "env", "=", "mock", ".", "Mock", "(", ")", "\n", "env", ".", "reset", ".", "return_value", "=", "\"obs\"", "\n", "env", ".", "step", ".", "return_value", "=", "(", "\"obs\"", ",", "0", ",", "True", ",", "{", "}", ")", "\n", "env", ".", "get_statistics", ".", "return_value", "=", "[", "]", "\n", "\n", "evaluation_hook", "=", "mock", ".", "create_autospec", "(", "\n", "spec", "=", "pfrl", ".", "experiments", ".", "evaluation_hooks", ".", "EvaluationHook", "\n", ")", "\n", "\n", "either_none", "=", "(", "n_steps", "is", "None", ")", "!=", "(", "n_episodes", "is", "None", ")", "\n", "if", "not", "either_none", ":", "\n", "        ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "            ", "agent_evaluator", "=", "evaluator", ".", "Evaluator", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "n_steps", "=", "n_steps", ",", "\n", "n_episodes", "=", "n_episodes", ",", "\n", "eval_interval", "=", "3", ",", "\n", "outdir", "=", "outdir", ",", "\n", "max_episode_len", "=", "None", ",", "\n", "step_offset", "=", "0", ",", "\n", "evaluation_hooks", "=", "[", "evaluation_hook", "]", ",", "\n", "save_best_so_far_agent", "=", "save_best_so_far_agent", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "value", "=", "n_steps", "or", "n_episodes", "\n", "agent_evaluator", "=", "evaluator", ".", "Evaluator", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "n_steps", "=", "n_steps", ",", "\n", "n_episodes", "=", "n_episodes", ",", "\n", "eval_interval", "=", "3", ",", "\n", "outdir", "=", "outdir", ",", "\n", "max_episode_len", "=", "None", ",", "\n", "step_offset", "=", "0", ",", "\n", "evaluation_hooks", "=", "[", "evaluation_hook", "]", ",", "\n", "save_best_so_far_agent", "=", "save_best_so_far_agent", ",", "\n", ")", "\n", "\n", "agent_evaluator", ".", "evaluate_if_necessary", "(", "t", "=", "1", ",", "episodes", "=", "1", ")", "\n", "assert", "agent", ".", "act", ".", "call_count", "==", "0", "\n", "assert", "evaluation_hook", ".", "call_count", "==", "0", "\n", "\n", "agent_evaluator", ".", "evaluate_if_necessary", "(", "t", "=", "2", ",", "episodes", "=", "2", ")", "\n", "assert", "agent", ".", "act", ".", "call_count", "==", "0", "\n", "assert", "evaluation_hook", ".", "call_count", "==", "0", "\n", "\n", "# First evaluation", "\n", "agent_evaluator", ".", "evaluate_if_necessary", "(", "t", "=", "3", ",", "episodes", "=", "3", ")", "\n", "assert", "agent", ".", "act", ".", "call_count", "==", "value", "\n", "assert", "agent", ".", "observe", ".", "call_count", "==", "value", "\n", "assert", "evaluation_hook", ".", "call_count", "==", "1", "\n", "if", "save_best_so_far_agent", ":", "\n", "            ", "assert", "agent", ".", "save", ".", "call_count", "==", "1", "\n", "", "else", ":", "\n", "            ", "assert", "agent", ".", "save", ".", "call_count", "==", "0", "\n", "\n", "# Second evaluation with the same score", "\n", "", "agent_evaluator", ".", "evaluate_if_necessary", "(", "t", "=", "6", ",", "episodes", "=", "6", ")", "\n", "assert", "agent", ".", "act", ".", "call_count", "==", "2", "*", "value", "\n", "assert", "agent", ".", "observe", ".", "call_count", "==", "2", "*", "value", "\n", "assert", "evaluation_hook", ".", "call_count", "==", "2", "\n", "if", "save_best_so_far_agent", ":", "\n", "            ", "assert", "agent", ".", "save", ".", "call_count", "==", "1", "\n", "", "else", ":", "\n", "            ", "assert", "agent", ".", "save", ".", "call_count", "==", "0", "\n", "\n", "# Third evaluation with a better score", "\n", "", "env", ".", "step", ".", "return_value", "=", "(", "\"obs\"", ",", "1", ",", "True", ",", "{", "}", ")", "\n", "agent_evaluator", ".", "evaluate_if_necessary", "(", "t", "=", "9", ",", "episodes", "=", "9", ")", "\n", "assert", "agent", ".", "act", ".", "call_count", "==", "3", "*", "value", "\n", "assert", "agent", ".", "observe", ".", "call_count", "==", "3", "*", "value", "\n", "assert", "evaluation_hook", ".", "call_count", "==", "3", "\n", "if", "save_best_so_far_agent", ":", "\n", "            ", "assert", "agent", ".", "save", ".", "call_count", "==", "2", "\n", "", "else", ":", "\n", "            ", "assert", "agent", ".", "save", ".", "call_count", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_evaluator.test_async_evaluator_evaluate_if_necessary": [[103, 171], ["pytest.mark.parametrize", "pytest.mark.parametrize", "tempfile.mkdtemp", "unittest.mock.MagicMock", "unittest.mock.Mock", "unittest.mock.create_autospec", "pfrl.experiments.evaluator.AsyncEvaluator", "evaluator.AsyncEvaluator.evaluate_if_necessary", "evaluator.AsyncEvaluator.evaluate_if_necessary", "evaluator.AsyncEvaluator.evaluate_if_necessary", "evaluator.AsyncEvaluator.evaluate_if_necessary", "evaluator.AsyncEvaluator.evaluate_if_necessary"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.evaluate_if_necessary", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.evaluate_if_necessary", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.evaluate_if_necessary", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.evaluate_if_necessary", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.evaluate_if_necessary"], ["", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"save_best_so_far_agent\"", ",", "[", "True", ",", "False", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"n_episodes\"", ",", "[", "1", ",", "2", "]", ")", "\n", "def", "test_async_evaluator_evaluate_if_necessary", "(", "save_best_so_far_agent", ",", "n_episodes", ")", ":", "\n", "    ", "outdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "# MagicMock can mock eval_mode while Mock cannot", "\n", "agent", "=", "mock", ".", "MagicMock", "(", ")", "\n", "agent", ".", "act", ".", "return_value", "=", "\"action\"", "\n", "agent", ".", "get_statistics", ".", "return_value", "=", "[", "]", "\n", "\n", "env", "=", "mock", ".", "Mock", "(", ")", "\n", "env", ".", "reset", ".", "return_value", "=", "\"obs\"", "\n", "env", ".", "step", ".", "return_value", "=", "(", "\"obs\"", ",", "0", ",", "True", ",", "{", "}", ")", "\n", "env", ".", "get_statistics", ".", "return_value", "=", "[", "]", "\n", "\n", "evaluation_hook", "=", "mock", ".", "create_autospec", "(", "\n", "spec", "=", "pfrl", ".", "experiments", ".", "evaluation_hooks", ".", "EvaluationHook", "\n", ")", "\n", "\n", "agent_evaluator", "=", "evaluator", ".", "AsyncEvaluator", "(", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "n_episodes", ",", "\n", "eval_interval", "=", "3", ",", "\n", "outdir", "=", "outdir", ",", "\n", "max_episode_len", "=", "None", ",", "\n", "step_offset", "=", "0", ",", "\n", "evaluation_hooks", "=", "[", "evaluation_hook", "]", ",", "\n", "save_best_so_far_agent", "=", "save_best_so_far_agent", ",", "\n", ")", "\n", "\n", "agent_evaluator", ".", "evaluate_if_necessary", "(", "t", "=", "1", ",", "episodes", "=", "1", ",", "env", "=", "env", ",", "agent", "=", "agent", ")", "\n", "assert", "agent", ".", "act", ".", "call_count", "==", "0", "\n", "assert", "evaluation_hook", ".", "call_count", "==", "0", "\n", "\n", "agent_evaluator", ".", "evaluate_if_necessary", "(", "t", "=", "2", ",", "episodes", "=", "2", ",", "env", "=", "env", ",", "agent", "=", "agent", ")", "\n", "assert", "agent", ".", "act", ".", "call_count", "==", "0", "\n", "assert", "evaluation_hook", ".", "call_count", "==", "0", "\n", "\n", "# First evaluation", "\n", "agent_evaluator", ".", "evaluate_if_necessary", "(", "t", "=", "3", ",", "episodes", "=", "3", ",", "env", "=", "env", ",", "agent", "=", "agent", ")", "\n", "assert", "agent", ".", "act", ".", "call_count", "==", "n_episodes", "\n", "assert", "agent", ".", "observe", ".", "call_count", "==", "n_episodes", "\n", "assert", "evaluation_hook", ".", "call_count", "==", "1", "\n", "if", "save_best_so_far_agent", ":", "\n", "        ", "assert", "agent", ".", "save", ".", "call_count", "==", "1", "\n", "", "else", ":", "\n", "        ", "assert", "agent", ".", "save", ".", "call_count", "==", "0", "\n", "\n", "# Second evaluation with the same score", "\n", "", "agent_evaluator", ".", "evaluate_if_necessary", "(", "t", "=", "6", ",", "episodes", "=", "6", ",", "env", "=", "env", ",", "agent", "=", "agent", ")", "\n", "assert", "agent", ".", "act", ".", "call_count", "==", "2", "*", "n_episodes", "\n", "assert", "agent", ".", "observe", ".", "call_count", "==", "2", "*", "n_episodes", "\n", "assert", "evaluation_hook", ".", "call_count", "==", "2", "\n", "if", "save_best_so_far_agent", ":", "\n", "        ", "assert", "agent", ".", "save", ".", "call_count", "==", "1", "\n", "", "else", ":", "\n", "        ", "assert", "agent", ".", "save", ".", "call_count", "==", "0", "\n", "\n", "# Third evaluation with a better score", "\n", "", "env", ".", "step", ".", "return_value", "=", "(", "\"obs\"", ",", "1", ",", "True", ",", "{", "}", ")", "\n", "agent_evaluator", ".", "evaluate_if_necessary", "(", "t", "=", "9", ",", "episodes", "=", "9", ",", "env", "=", "env", ",", "agent", "=", "agent", ")", "\n", "assert", "agent", ".", "act", ".", "call_count", "==", "3", "*", "n_episodes", "\n", "assert", "agent", ".", "observe", ".", "call_count", "==", "3", "*", "n_episodes", "\n", "assert", "evaluation_hook", ".", "call_count", "==", "3", "\n", "if", "save_best_so_far_agent", ":", "\n", "        ", "assert", "agent", ".", "save", ".", "call_count", "==", "2", "\n", "", "else", ":", "\n", "        ", "assert", "agent", ".", "save", ".", "call_count", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_evaluator.test_run_evaluation_episodes_with_n_steps": [[173, 219], ["pytest.mark.parametrize", "pytest.mark.parametrize", "unittest.mock.MagicMock", "unittest.mock.Mock", "pfrl.experiments.evaluator.run_evaluation_episodes", "pytest.raises", "pfrl.experiments.evaluator.run_evaluation_episodes", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "len", "len", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.run_evaluation_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.run_evaluation_episodes"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"n_episodes\"", ",", "[", "None", ",", "1", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"n_steps\"", ",", "[", "2", ",", "5", ",", "6", "]", ")", "\n", "def", "test_run_evaluation_episodes_with_n_steps", "(", "n_episodes", ",", "n_steps", ")", ":", "\n", "# MagicMock can mock eval_mode while Mock cannot", "\n", "    ", "agent", "=", "mock", ".", "MagicMock", "(", ")", "\n", "env", "=", "mock", ".", "Mock", "(", ")", "\n", "# First episode: 0 -> 1 -> 2 -> 3 (reset)", "\n", "# Second episode: 4 -> 5 -> 6 -> 7 (done)", "\n", "env", ".", "reset", ".", "side_effect", "=", "[", "(", "\"state\"", ",", "0", ")", ",", "(", "\"state\"", ",", "4", ")", "]", "\n", "env", ".", "step", ".", "side_effect", "=", "[", "\n", "(", "(", "\"state\"", ",", "1", ")", ",", "0.1", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "2", ")", ",", "0.2", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "3", ")", ",", "0.3", ",", "False", ",", "{", "\"needs_reset\"", ":", "True", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "5", ")", ",", "-", "0.5", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "6", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "7", ")", ",", "1", ",", "True", ",", "{", "}", ")", ",", "\n", "]", "\n", "\n", "if", "n_episodes", ":", "\n", "        ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "            ", "scores", ",", "lengths", "=", "evaluator", ".", "run_evaluation_episodes", "(", "\n", "env", ",", "agent", ",", "n_steps", "=", "n_steps", ",", "n_episodes", "=", "n_episodes", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "scores", ",", "lengths", "=", "evaluator", ".", "run_evaluation_episodes", "(", "\n", "env", ",", "agent", ",", "n_steps", "=", "n_steps", ",", "n_episodes", "=", "n_episodes", "\n", ")", "\n", "assert", "agent", ".", "act", ".", "call_count", "==", "n_steps", "\n", "assert", "agent", ".", "observe", ".", "call_count", "==", "n_steps", "\n", "if", "n_steps", "==", "2", ":", "\n", "            ", "assert", "len", "(", "scores", ")", "==", "1", "\n", "assert", "len", "(", "lengths", ")", "==", "1", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "scores", "[", "0", "]", ",", "0.3", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "lengths", "[", "0", "]", ",", "2", ")", "\n", "", "elif", "n_steps", "==", "5", ":", "\n", "            ", "assert", "len", "(", "scores", ")", "==", "1", "\n", "assert", "len", "(", "lengths", ")", "==", "1", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "scores", "[", "0", "]", ",", "0.6", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "lengths", "[", "0", "]", ",", "3", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "scores", ")", "==", "2", "\n", "assert", "len", "(", "lengths", ")", "==", "2", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "scores", "[", "0", "]", ",", "0.6", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "scores", "[", "1", "]", ",", "0.5", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "lengths", "[", "0", "]", ",", "3", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "lengths", "[", "1", "]", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_evaluator.test_batch_run_evaluation_episodes_with_n_steps": [[251, 315], ["pytest.mark.parametrize", "pytest.mark.parametrize", "unittest.mock.MagicMock", "pfrl.envs.SerialVectorEnv", "unittest.mock.Mock", "pfrl.experiments.evaluator.batch_run_evaluation_episodes", "all", "test_evaluator.test_batch_run_evaluation_episodes_with_n_steps.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.batch_run_evaluation_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"n_episodes\"", ",", "[", "None", ",", "1", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"n_steps\"", ",", "[", "2", ",", "5", ",", "6", "]", ")", "\n", "def", "test_batch_run_evaluation_episodes_with_n_steps", "(", "n_episodes", ",", "n_steps", ")", ":", "\n", "# MagicMock can mock eval_mode while Mock cannot", "\n", "    ", "agent", "=", "mock", ".", "MagicMock", "(", ")", "\n", "agent", ".", "batch_act", ".", "side_effect", "=", "[", "[", "1", ",", "1", "]", "]", "*", "5", "\n", "\n", "def", "make_env", "(", "idx", ")", ":", "\n", "        ", "env", "=", "mock", ".", "Mock", "(", ")", "\n", "if", "idx", "==", "0", ":", "\n", "# First episode: 0 -> 1 -> 2 -> 3 (reset)", "\n", "# Second episode: 4 -> 5 -> 6 -> 7 (done)", "\n", "            ", "env", ".", "reset", ".", "side_effect", "=", "[", "(", "\"state\"", ",", "0", ")", ",", "(", "\"state\"", ",", "4", ")", "]", "\n", "env", ".", "step", ".", "side_effect", "=", "[", "\n", "(", "(", "\"state\"", ",", "1", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "2", ")", ",", "0.1", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "3", ")", ",", "0.2", ",", "False", ",", "{", "\"needs_reset\"", ":", "True", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "5", ")", ",", "-", "0.5", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "6", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "7", ")", ",", "1", ",", "True", ",", "{", "}", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "# First episode: 0 -> 1 (reset)", "\n", "# Second episode: 2 -> 3 (reset)", "\n", "# Third episode: 4 -> 5 -> 6 -> 7 (done)", "\n", "            ", "env", ".", "reset", ".", "side_effect", "=", "[", "(", "\"state\"", ",", "0", ")", ",", "(", "\"state\"", ",", "2", ")", ",", "(", "\"state\"", ",", "4", ")", "]", "\n", "env", ".", "step", ".", "side_effect", "=", "[", "\n", "(", "(", "\"state\"", ",", "1", ")", ",", "2", ",", "False", ",", "{", "\"needs_reset\"", ":", "True", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "3", ")", ",", "3", ",", "False", ",", "{", "\"needs_reset\"", ":", "True", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "5", ")", ",", "-", "0.6", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "6", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "7", ")", ",", "1", ",", "True", ",", "{", "}", ")", ",", "\n", "]", "\n", "", "return", "env", "\n", "\n", "", "vec_env", "=", "pfrl", ".", "envs", ".", "SerialVectorEnv", "(", "[", "make_env", "(", "i", ")", "for", "i", "in", "range", "(", "2", ")", "]", ")", "\n", "if", "n_episodes", ":", "\n", "        ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "            ", "scores", ",", "lengths", "=", "evaluator", ".", "batch_run_evaluation_episodes", "(", "\n", "vec_env", ",", "agent", ",", "n_steps", "=", "n_steps", ",", "n_episodes", "=", "n_episodes", "\n", ")", "\n", "", "", "else", ":", "\n", "# First Env:  [1   2   (3_a)  5  6   (7_a)]", "\n", "# Second Env: [(1)(3_b) 5     6 (7_b)]", "\n", "        ", "scores", ",", "lengths", "=", "evaluator", ".", "batch_run_evaluation_episodes", "(", "\n", "vec_env", ",", "agent", ",", "n_steps", "=", "n_steps", ",", "n_episodes", "=", "n_episodes", "\n", ")", "\n", "if", "n_steps", "==", "2", ":", "\n", "            ", "assert", "len", "(", "scores", ")", "==", "1", "\n", "assert", "len", "(", "lengths", ")", "==", "1", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "scores", "[", "0", "]", ",", "0.1", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "lengths", "[", "0", "]", ",", "2", ")", "\n", "assert", "agent", ".", "batch_observe", ".", "call_count", "==", "2", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "scores", ")", "==", "3", "\n", "assert", "len", "(", "lengths", ")", "==", "3", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "scores", "[", "0", "]", ",", "0.3", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "scores", "[", "1", "]", ",", "2.0", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "scores", "[", "2", "]", ",", "3.0", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "lengths", "[", "0", "]", ",", "3", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "lengths", "[", "1", "]", ",", "1", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "lengths", "[", "2", "]", ",", "1", ")", "\n", "# batch_reset should be all True", "\n", "", "assert", "all", "(", "agent", ".", "batch_observe", ".", "call_args", "[", "0", "]", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_train_agent_batch.TestTrainAgentBatchNeedsReset.test_needs_reset": [[182, 235], ["tempfile.mkdtemp", "unittest.mock.Mock", "pfrl.envs.SerialVectorEnv", "pfrl.experiments.train_agent_batch", "test_train_agent_batch.TestTrainAgentBatchNeedsReset.assertListEqual", "test_train_agent_batch.TestTrainAgentBatchNeedsReset.assertEqual", "test_train_agent_batch.TestTrainAgentBatchNeedsReset.assertEqual", "test_train_agent_batch.TestTrainAgentBatchNeedsReset.assertEqual", "test_train_agent_batch.TestTrainAgentBatchNeedsReset.assertEqual", "unittest.mock.Mock", "test_train_agent_batch.TestTrainAgentBatchNeedsReset.test_needs_reset.make_env"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent_batch.train_agent_batch", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["    ", "def", "test_needs_reset", "(", "self", ")", ":", "\n", "        ", "steps", "=", "10", "\n", "\n", "outdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "agent", "=", "mock", ".", "Mock", "(", ")", "\n", "agent", ".", "batch_act", ".", "side_effect", "=", "[", "[", "1", ",", "1", "]", "]", "*", "5", "\n", "\n", "def", "make_env", "(", "idx", ")", ":", "\n", "            ", "env", "=", "mock", ".", "Mock", "(", ")", "\n", "if", "idx", "==", "0", ":", "\n", "# First episode: 0 -> 1 -> 2 -> 3 (reset)", "\n", "# Second episode: 4 -> 5 -> 6 -> 7 (done)", "\n", "                ", "env", ".", "reset", ".", "side_effect", "=", "[", "(", "\"state\"", ",", "0", ")", ",", "(", "\"state\"", ",", "4", ")", "]", "\n", "env", ".", "step", ".", "side_effect", "=", "[", "\n", "(", "(", "\"state\"", ",", "1", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "2", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "3", ")", ",", "0", ",", "False", ",", "{", "\"needs_reset\"", ":", "True", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "5", ")", ",", "-", "0.5", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "6", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "7", ")", ",", "1", ",", "True", ",", "{", "}", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "# First episode: 0 -> 1 (reset)", "\n", "# Second episode: 2 -> 3 (reset)", "\n", "# Third episode: 4 -> 5 -> 6 -> 7 (done)", "\n", "                ", "env", ".", "reset", ".", "side_effect", "=", "[", "(", "\"state\"", ",", "0", ")", ",", "(", "\"state\"", ",", "2", ")", ",", "(", "\"state\"", ",", "4", ")", "]", "\n", "env", ".", "step", ".", "side_effect", "=", "[", "\n", "(", "(", "\"state\"", ",", "1", ")", ",", "0", ",", "False", ",", "{", "\"needs_reset\"", ":", "True", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "3", ")", ",", "0", ",", "False", ",", "{", "\"needs_reset\"", ":", "True", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "5", ")", ",", "-", "0.5", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "6", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "7", ")", ",", "1", ",", "True", ",", "{", "}", ")", ",", "\n", "]", "\n", "", "return", "env", "\n", "\n", "", "vec_env", "=", "pfrl", ".", "envs", ".", "SerialVectorEnv", "(", "[", "make_env", "(", "i", ")", "for", "i", "in", "range", "(", "2", ")", "]", ")", "\n", "\n", "eval_stats_history", "=", "pfrl", ".", "experiments", ".", "train_agent_batch", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "vec_env", ",", "\n", "steps", "=", "steps", ",", "\n", "outdir", "=", "outdir", ",", "\n", ")", "\n", "\n", "# No evaluation invoked when evaluator=None (default) is passed to", "\n", "# train_agent_batch.", "\n", "self", ".", "assertListEqual", "(", "eval_stats_history", ",", "[", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "vec_env", ".", "envs", "[", "0", "]", ".", "reset", ".", "call_count", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "vec_env", ".", "envs", "[", "0", "]", ".", "step", ".", "call_count", ",", "5", ")", "\n", "self", ".", "assertEqual", "(", "vec_env", ".", "envs", "[", "1", "]", ".", "reset", ".", "call_count", ",", "3", ")", "\n", "self", ".", "assertEqual", "(", "vec_env", ".", "envs", "[", "1", "]", ".", "step", ".", "call_count", ",", "5", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_train_agent_batch.test_train_agent_batch": [[11, 139], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "tempfile.mkdtemp", "unittest.mock.Mock", "pfrl.envs.SerialVectorEnv", "unittest.mock.Mock", "pfrl.experiments.train_agent_batch", "math.ceil", "enumerate", "unittest.mock.Mock", "unittest.mock.Mock", "math.ceil", "test_train_agent_batch.test_train_agent_batch.make_env"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent_batch.train_agent_batch", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"num_envs\"", ",", "[", "1", ",", "2", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"max_episode_len\"", ",", "[", "None", ",", "2", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"steps\"", ",", "[", "5", ",", "6", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"enable_evaluation\"", ",", "[", "True", ",", "False", "]", ")", "\n", "def", "test_train_agent_batch", "(", "num_envs", ",", "max_episode_len", ",", "steps", ",", "enable_evaluation", ")", ":", "\n", "\n", "    ", "outdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "agent", "=", "mock", ".", "Mock", "(", ")", "\n", "agent", ".", "batch_act", ".", "side_effect", "=", "[", "[", "1", "]", "*", "num_envs", "]", "*", "1000", "\n", "\n", "def", "make_env", "(", ")", ":", "\n", "        ", "env", "=", "mock", ".", "Mock", "(", ")", "\n", "env", ".", "reset", ".", "side_effect", "=", "[", "(", "\"state\"", ",", "0", ")", "]", "*", "1000", "\n", "if", "max_episode_len", "is", "None", ":", "\n", "# Episodic env that terminates after 5 actions", "\n", "            ", "env", ".", "step", ".", "side_effect", "=", "[", "\n", "(", "(", "\"state\"", ",", "1", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "2", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "3", ")", ",", "-", "0.5", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "4", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "(", "(", "\"state\"", ",", "5", ")", ",", "1", ",", "True", ",", "{", "}", ")", ",", "\n", "]", "*", "1000", "\n", "", "else", ":", "\n", "# Continuing env", "\n", "            ", "env", ".", "step", ".", "side_effect", "=", "[", "\n", "(", "(", "\"state\"", ",", "1", ")", ",", "0", ",", "False", ",", "{", "}", ")", ",", "\n", "]", "*", "1000", "\n", "", "return", "env", "\n", "\n", "", "vec_env", "=", "pfrl", ".", "envs", ".", "SerialVectorEnv", "(", "[", "make_env", "(", ")", "for", "_", "in", "range", "(", "num_envs", ")", "]", ")", "\n", "\n", "hook", "=", "mock", ".", "Mock", "(", ")", "\n", "\n", "if", "enable_evaluation", ":", "\n", "# evaluator.evaluate_if_necessary will be called `ceil(steps / num_envs)` times", "\n", "# during training. Here we simulate that eval_interval==steps,", "\n", "# i.e., return a float value (= 42 in this case) for the last call only and", "\n", "# otherwise return None (= evaluation is not necessary).", "\n", "        ", "evaluator", "=", "mock", ".", "Mock", "(", ")", "\n", "n_evaluate_if_necessary_calls", "=", "math", ".", "ceil", "(", "steps", "/", "num_envs", ")", "\n", "dummy_eval_score", "=", "42", "\n", "side_effect", "=", "[", "None", "]", "*", "(", "n_evaluate_if_necessary_calls", "-", "1", ")", "+", "[", "dummy_eval_score", "]", "\n", "evaluator", ".", "evaluate_if_necessary", ".", "side_effect", "=", "side_effect", "\n", "\n", "n_logging", "=", "1", "# Since all envs will reach to done==True simultaneously.", "\n", "n_valid_eval_score_returned", "=", "1", "# Since we simulated eval_interval==steps.", "\n", "# agent.get_statistics will be called for logging & eval_stats_history", "\n", "n_get_statistics_calls", "=", "n_logging", "+", "n_valid_eval_score_returned", "\n", "dummy_stats", "=", "[", "\n", "(", "\"average_q\"", ",", "3.14", ")", ",", "\n", "(", "\"average_loss\"", ",", "2.7", ")", ",", "\n", "(", "\"cumulative_steps\"", ",", "42", ")", ",", "\n", "(", "\"n_updates\"", ",", "8", ")", ",", "\n", "(", "\"rlen\"", ",", "1", ")", ",", "\n", "]", "\n", "agent", ".", "get_statistics", ".", "side_effect", "=", "[", "dummy_stats", "]", "*", "n_get_statistics_calls", "\n", "", "else", ":", "\n", "        ", "evaluator", "=", "None", "\n", "\n", "", "eval_stats_history", "=", "pfrl", ".", "experiments", ".", "train_agent_batch", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "vec_env", ",", "\n", "steps", "=", "steps", ",", "\n", "outdir", "=", "outdir", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", "step_hooks", "=", "[", "hook", "]", ",", "\n", "evaluator", "=", "evaluator", ",", "\n", ")", "\n", "\n", "if", "enable_evaluation", ":", "\n", "        ", "expected", "=", "[", "\n", "dict", "(", "**", "dict", "(", "dummy_stats", ")", ",", "eval_score", "=", "dummy_eval_score", ")", "\n", "for", "_", "in", "range", "(", "n_valid_eval_score_returned", ")", "\n", "]", "\n", "", "else", ":", "\n", "# No evaluation invoked when evaluator=None is passed to train_agent_batch.", "\n", "        ", "expected", "=", "[", "]", "\n", "", "assert", "eval_stats_history", "==", "expected", "\n", "\n", "iters", "=", "math", ".", "ceil", "(", "steps", "/", "num_envs", ")", "\n", "assert", "agent", ".", "batch_act", ".", "call_count", "==", "iters", "\n", "assert", "agent", ".", "batch_observe", ".", "call_count", "==", "iters", "\n", "\n", "for", "env", "in", "vec_env", ".", "envs", ":", "\n", "        ", "if", "max_episode_len", "is", "None", ":", "\n", "            ", "if", "num_envs", "==", "1", ":", "\n", "                ", "if", "steps", "==", "6", ":", "\n", "# In the beginning and after 5 iterations", "\n", "                    ", "assert", "env", ".", "reset", ".", "call_count", "==", "2", "\n", "", "else", ":", "\n", "                    ", "assert", "steps", "==", "5", "\n", "# Only in the beginning. While the last state is", "\n", "# terminal, env.reset should not be called because", "\n", "# training is complete.", "\n", "assert", "env", ".", "reset", ".", "call_count", "==", "1", "\n", "", "", "elif", "num_envs", "==", "2", ":", "\n", "# Only in the beginning", "\n", "                ", "assert", "env", ".", "reset", ".", "call_count", "==", "1", "\n", "", "else", ":", "\n", "                ", "assert", "False", "\n", "", "", "elif", "max_episode_len", "==", "2", ":", "\n", "            ", "if", "num_envs", "==", "1", ":", "\n", "# In the beginning, after 2 and 4 iterations", "\n", "                ", "assert", "env", ".", "reset", ".", "call_count", "==", "3", "\n", "", "elif", "num_envs", "==", "2", ":", "\n", "# In the beginning, after 2 iterations", "\n", "                ", "assert", "env", ".", "reset", ".", "call_count", "==", "2", "\n", "", "else", ":", "\n", "                ", "assert", "False", "\n", "", "", "assert", "env", ".", "step", ".", "call_count", "==", "iters", "\n", "\n", "", "if", "steps", "%", "num_envs", "==", "0", ":", "\n", "        ", "assert", "hook", ".", "call_count", "==", "steps", "\n", "", "else", ":", "\n", "        ", "assert", "hook", ".", "call_count", "==", "num_envs", "*", "iters", "\n", "\n", "# A hook receives (env, agent, step)", "\n", "", "for", "i", ",", "call", "in", "enumerate", "(", "hook", ".", "call_args_list", ")", ":", "\n", "        ", "args", ",", "kwargs", "=", "call", "\n", "assert", "args", "[", "0", "]", "==", "vec_env", "\n", "assert", "args", "[", "1", "]", "==", "agent", "\n", "# step starts with 1", "\n", "assert", "args", "[", "2", "]", "==", "i", "+", "1", "\n", "\n", "", "if", "enable_evaluation", ":", "\n", "        ", "assert", "(", "\n", "evaluator", ".", "evaluate_if_necessary", ".", "call_count", "==", "n_evaluate_if_necessary_calls", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_train_agent_batch.test_unsupported_evaluation_hook": [[142, 178], ["UnsupportedEvaluationHook", "pytest.raises", "pfrl.experiments.train_agent_batch_with_evaluation", "str", "unittest.mock.Mock", "unittest.mock.Mock", "unittest.mock.Mock"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent_batch.train_agent_batch_with_evaluation"], ["", "", "def", "test_unsupported_evaluation_hook", "(", ")", ":", "\n", "    ", "class", "UnsupportedEvaluationHook", "(", "pfrl", ".", "experiments", ".", "evaluation_hooks", ".", "EvaluationHook", ")", ":", "\n", "        ", "support_train_agent", "=", "True", "\n", "support_train_agent_batch", "=", "False", "\n", "support_train_agent_async", "=", "True", "\n", "\n", "def", "__call__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "agent", ",", "\n", "evaluator", ",", "\n", "step", ",", "\n", "eval_stats", ",", "\n", "agent_stats", ",", "\n", "env_stats", ",", "\n", ")", ":", "\n", "            ", "pass", "\n", "\n", "", "", "unsupported_evaluation_hook", "=", "UnsupportedEvaluationHook", "(", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", "as", "exception", ":", "\n", "        ", "pfrl", ".", "experiments", ".", "train_agent_batch_with_evaluation", "(", "\n", "agent", "=", "mock", ".", "Mock", "(", ")", ",", "\n", "env", "=", "mock", ".", "Mock", "(", ")", ",", "\n", "steps", "=", "1", ",", "\n", "eval_n_steps", "=", "1", ",", "\n", "eval_n_episodes", "=", "None", ",", "\n", "eval_interval", "=", "1", ",", "\n", "outdir", "=", "mock", ".", "Mock", "(", ")", ",", "\n", "evaluation_hooks", "=", "[", "unsupported_evaluation_hook", "]", ",", "\n", ")", "\n", "\n", "", "assert", "str", "(", "\n", "exception", ".", "value", "\n", ")", "==", "\"{} does not support train_agent_batch_with_evaluation().\"", ".", "format", "(", "\n", "unsupported_evaluation_hook", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_prepare_output_dir.work_dir": [[14, 20], ["os.getcwd", "os.chdir", "os.chdir"], "function", ["None"], ["@", "contextlib", ".", "contextmanager", "\n", "def", "work_dir", "(", "dirname", ")", ":", "\n", "    ", "orig_dir", "=", "os", ".", "getcwd", "(", ")", "\n", "os", ".", "chdir", "(", "dirname", ")", "\n", "yield", "\n", "os", ".", "chdir", "(", "orig_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_prepare_output_dir.test_is_under_git_control": [[22, 37], ["tempfile.TemporaryDirectory", "test_prepare_output_dir.work_dir", "test_prepare_output_dir.work_dir", "subprocess.call", "test_prepare_output_dir.work_dir", "pfrl.experiments.is_under_git_control", "pfrl.experiments.is_under_git_control"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_prepare_output_dir.work_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_prepare_output_dir.work_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_prepare_output_dir.work_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.is_under_git_control", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.is_under_git_control"], ["", "def", "test_is_under_git_control", "(", ")", ":", "\n", "\n", "    ", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmp", ":", "\n", "\n", "# Not under git control", "\n", "        ", "with", "work_dir", "(", "tmp", ")", ":", "\n", "            ", "assert", "not", "pfrl", ".", "experiments", ".", "is_under_git_control", "(", ")", "\n", "\n", "# Run: git init", "\n", "", "with", "work_dir", "(", "tmp", ")", ":", "\n", "            ", "subprocess", ".", "call", "(", "[", "\"git\"", ",", "\"init\"", "]", ")", "\n", "\n", "# Under git control", "\n", "", "with", "work_dir", "(", "tmp", ")", ":", "\n", "            ", "assert", "pfrl", ".", "experiments", ".", "is_under_git_control", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_prepare_output_dir.test_generate_exp_id": [[39, 62], ["tempfile.TemporaryDirectory", "tempfile.TemporaryDirectory", "test_prepare_output_dir.work_dir", "subprocess.check_output", "subprocess.check_output", "subprocess.check_output", "subprocess.check_output", "pfrl.experiments.generate_exp_id", "test_prepare_output_dir.work_dir", "subprocess.check_output", "subprocess.check_output", "subprocess.check_output", "subprocess.check_output", "pfrl.experiments.generate_exp_id", "pfrl.experiments.generate_exp_id", "pfrl.experiments.generate_exp_id"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_prepare_output_dir.work_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.generate_exp_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_prepare_output_dir.work_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.generate_exp_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.generate_exp_id", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.generate_exp_id"], ["", "", "", "def", "test_generate_exp_id", "(", ")", ":", "\n", "\n", "    ", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmp", ":", "\n", "        ", "with", "work_dir", "(", "tmp", ")", ":", "\n", "            ", "subprocess", ".", "check_output", "(", "[", "\"git\"", ",", "\"init\"", "]", ")", "\n", "subprocess", ".", "check_output", "(", "[", "\"touch\"", ",", "\"a\"", "]", ")", "\n", "subprocess", ".", "check_output", "(", "[", "\"git\"", ",", "\"add\"", ",", "\"a\"", "]", ")", "\n", "subprocess", ".", "check_output", "(", "[", "\"git\"", ",", "\"commit\"", ",", "\"-m\"", ",", "\"a\"", "]", ")", "\n", "\n", "id_a", "=", "pfrl", ".", "experiments", ".", "generate_exp_id", "(", ")", "\n", "assert", "id_a", "==", "pfrl", ".", "experiments", ".", "generate_exp_id", "(", ")", "\n", "\n", "assert", "id_a", "!=", "pfrl", ".", "experiments", ".", "generate_exp_id", "(", "\"prefix\"", ")", "\n", "\n", "", "", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmp2", ":", "\n", "        ", "with", "work_dir", "(", "tmp2", ")", ":", "\n", "            ", "subprocess", ".", "check_output", "(", "[", "\"git\"", ",", "\"init\"", "]", ")", "\n", "subprocess", ".", "check_output", "(", "[", "\"touch\"", ",", "\"b\"", "]", ")", "\n", "subprocess", ".", "check_output", "(", "[", "\"git\"", ",", "\"add\"", ",", "\"b\"", "]", ")", "\n", "subprocess", ".", "check_output", "(", "[", "\"git\"", ",", "\"commit\"", ",", "\"-m\"", ",", "\"b\"", "]", ")", "\n", "\n", "id_b", "=", "pfrl", ".", "experiments", ".", "generate_exp_id", "(", ")", "\n", "assert", "id_a", "!=", "id_b", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_prepare_output_dir.test_prepare_output_dir": [[64, 130], ["pytest.mark.parametrize", "itertools.product", "tempfile.TemporaryDirectory", "dict", "pytest.skip", "test_prepare_output_dir.work_dir", "pfrl.experiments.prepare_output_dir", "os.path.isdir", "os.path.join", "os.path.join", "os.path.join", "subprocess.call", "subprocess.call", "subprocess.call", "pfrl.experiments.prepare_output_dir.startswith", "open", "json.load", "open", "json.load", "open", "open", "f.write", "open", "f.write", "os.path.exists", "f.read", "f.read", "os.path.join", "os.path.exists", "os.path.join"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_prepare_output_dir.work_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load"], ["", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"exp_id,git,basedir,argv\"", ",", "\n", "itertools", ".", "product", "(", "\n", "(", "\"my_exp_1\"", ",", "None", ")", ",", "\n", "(", "True", ",", "False", ")", ",", "\n", "(", "\"temp\"", ",", "None", ")", ",", "\n", "(", "[", "\"command\"", ",", "\"--option\"", "]", ",", "None", ")", ",", "\n", ")", ",", "\n", ")", "\n", "def", "test_prepare_output_dir", "(", "exp_id", ",", "git", ",", "basedir", ",", "argv", ")", ":", "\n", "\n", "    ", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmp", ":", "\n", "        ", "if", "not", "exp_id", "and", "not", "git", ":", "\n", "            ", "pytest", ".", "skip", "(", "\"Without git it cannot generate experiment id\"", ")", "\n", "\n", "", "args", "=", "dict", "(", "a", "=", "1", ",", "b", "=", "\"2\"", ")", "\n", "os", ".", "environ", "[", "\"PFRL_TEST_PREPARE_OUTPUT_DIR\"", "]", "=", "\"T\"", "\n", "\n", "with", "work_dir", "(", "tmp", ")", ":", "\n", "\n", "            ", "if", "git", ":", "\n", "                ", "subprocess", ".", "call", "(", "[", "\"git\"", ",", "\"init\"", "]", ")", "\n", "with", "open", "(", "\"not_utf-8.txt\"", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                    ", "f", ".", "write", "(", "b\"\\x80\"", ")", "\n", "", "subprocess", ".", "call", "(", "[", "\"git\"", ",", "\"add\"", ",", "\"not_utf-8.txt\"", "]", ")", "\n", "subprocess", ".", "call", "(", "[", "\"git\"", ",", "\"commit\"", ",", "\"-mcommit1\"", "]", ")", "\n", "with", "open", "(", "\"not_utf-8.txt\"", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                    ", "f", ".", "write", "(", "b\"\\x81\"", ")", "\n", "\n", "", "", "dirname", "=", "pfrl", ".", "experiments", ".", "prepare_output_dir", "(", "args", ",", "basedir", ",", "exp_id", ",", "argv", ")", "\n", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dirname", ")", "\n", "\n", "if", "basedir", ":", "\n", "                ", "dirname", ".", "startswith", "(", "basedir", ")", "\n", "\n", "# args.txt", "\n", "", "args_path", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "\"args.txt\"", ")", "\n", "with", "open", "(", "args_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "assert", "obj", "==", "args", "\n", "\n", "# environ.txt", "\n", "", "environ_path", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "\"environ.txt\"", ")", "\n", "with", "open", "(", "environ_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "assert", "\"T\"", "==", "obj", "[", "\"PFRL_TEST_PREPARE_OUTPUT_DIR\"", "]", "\n", "\n", "# command.txt", "\n", "", "command_path", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "\"command.txt\"", ")", "\n", "with", "open", "(", "command_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "if", "argv", ":", "\n", "                    ", "assert", "\" \"", ".", "join", "(", "argv", ")", "==", "f", ".", "read", "(", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", "==", "f", ".", "read", "(", ")", "\n", "\n", "", "", "for", "gitfile", "in", "[", "\n", "\"git-head.txt\"", ",", "\n", "\"git-status.txt\"", ",", "\n", "\"git-log.txt\"", ",", "\n", "\"git-diff.txt\"", ",", "\n", "]", ":", "\n", "                ", "if", "git", ":", "\n", "                    ", "assert", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "gitfile", ")", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "gitfile", ")", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_evaluation_hooks.TestOptunaPrunerHook.test_dont_prune": [[10, 28], ["unittest.mock.Mock", "pfrl.experiments.OptunaPrunerHook", "unittest.mock.Mock", "unittest.mock.Mock", "unittest.mock.Mock", "pfrl.experiments.OptunaPrunerHook.", "unittest.mock.Mock.report.assert_called_once_with"], "methods", ["None"], ["    ", "def", "test_dont_prune", "(", "self", ")", ":", "\n", "        ", "trial", "=", "Mock", "(", ")", "\n", "trial", ".", "should_prune", ".", "return_value", "=", "False", "\n", "optuna_pruner_hook", "=", "pfrl", ".", "experiments", ".", "OptunaPrunerHook", "(", "trial", "=", "trial", ")", "\n", "\n", "env", "=", "Mock", "(", ")", "\n", "agent", "=", "Mock", "(", ")", "\n", "evaluator", "=", "Mock", "(", ")", "\n", "step", "=", "42", "\n", "eval_stats", "=", "{", "\"mean\"", ":", "3.14", "}", "\n", "agent_stats", "=", "[", "(", "\"dummy\"", ",", "2.7", ")", "]", "\n", "env_stats", "=", "[", "]", "\n", "\n", "optuna_pruner_hook", "(", "\n", "env", ",", "agent", ",", "evaluator", ",", "step", ",", "eval_stats", ",", "agent_stats", ",", "env_stats", "\n", ")", "\n", "\n", "trial", ".", "report", ".", "assert_called_once_with", "(", "eval_stats", "[", "\"mean\"", "]", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments_tests.test_evaluation_hooks.TestOptunaPrunerHook.test_should_prune": [[29, 48], ["unittest.mock.Mock", "pfrl.experiments.OptunaPrunerHook", "unittest.mock.Mock", "unittest.mock.Mock", "unittest.mock.Mock", "unittest.mock.Mock.report.assert_called_once_with", "test_evaluation_hooks.TestOptunaPrunerHook.assertRaises", "pfrl.experiments.OptunaPrunerHook."], "methods", ["None"], ["", "def", "test_should_prune", "(", "self", ")", ":", "\n", "        ", "trial", "=", "Mock", "(", ")", "\n", "trial", ".", "should_prune", ".", "return_value", "=", "True", "\n", "optuna_pruner_hook", "=", "pfrl", ".", "experiments", ".", "OptunaPrunerHook", "(", "trial", "=", "trial", ")", "\n", "\n", "env", "=", "Mock", "(", ")", "\n", "agent", "=", "Mock", "(", ")", "\n", "evaluator", "=", "Mock", "(", ")", "\n", "step", "=", "42", "\n", "eval_stats", "=", "{", "\"mean\"", ":", "3.14", "}", "\n", "agent_stats", "=", "[", "(", "\"dummy\"", ",", "2.7", ")", "]", "\n", "env_stats", "=", "[", "]", "\n", "\n", "with", "self", ".", "assertRaises", "(", "optuna", ".", "TrialPruned", ")", ":", "\n", "            ", "optuna_pruner_hook", "(", "\n", "env", ",", "agent", ",", "evaluator", ",", "step", ",", "eval_stats", ",", "agent_stats", ",", "env_stats", "\n", ")", "\n", "\n", "", "trial", ".", "report", ".", "assert_called_once_with", "(", "eval_stats", "[", "\"mean\"", "]", ",", "step", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_lmbda.test_lambda": [[8, 18], ["torch.nn.Sequential", "torch.rand", "nn.Sequential.", "pfrl.testing.torch_assert_allclose", "torch.nn.ReLU", "pfrl.nn.lmbda.Lambda", "torch.nn.ReLU"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose"], ["def", "test_lambda", "(", ")", ":", "\n", "    ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "Lambda", "(", "lambda", "x", ":", "x", "+", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "x", "=", "torch", ".", "rand", "(", "3", ",", "2", ")", "\n", "# Since x is all positive, ReLU will not have any effects", "\n", "y", "=", "model", "(", "x", ")", "\n", "torch_assert_allclose", "(", "y", ",", "x", "+", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_empirical_normalization.TestEmpiricalNormalization.test_small_cpu": [[11, 13], ["test_empirical_normalization.TestEmpiricalNormalization._test_small"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_empirical_normalization.TestEmpiricalNormalization._test_small"], ["    ", "def", "test_small_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_small", "(", "gpu", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_empirical_normalization.TestEmpiricalNormalization.test_small_gpu": [[14, 17], ["test_empirical_normalization.TestEmpiricalNormalization._test_small"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_empirical_normalization.TestEmpiricalNormalization._test_small"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_small_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_small", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_empirical_normalization.TestEmpiricalNormalization._test_small": [[18, 36], ["pfrl.nn.empirical_normalization.EmpiricalNormalization", "range", "numpy.stack", "numpy.mean", "numpy.std", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "pfrl.nn.empirical_normalization.EmpiricalNormalization.to", "numpy.random.normal", "pfrl.nn.empirical_normalization.EmpiricalNormalization.", "numpy.stack.extend", "pfrl.nn.empirical_normalization.EmpiricalNormalization.mean.cpu().numpy", "pfrl.nn.empirical_normalization.EmpiricalNormalization.std.cpu().numpy", "torch.tensor", "list", "pfrl.nn.empirical_normalization.EmpiricalNormalization.mean.cpu", "pfrl.nn.empirical_normalization.EmpiricalNormalization.std.cpu"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.std", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend"], ["", "def", "_test_small", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "en", "=", "empirical_normalization", ".", "EmpiricalNormalization", "(", "10", ")", "\n", "if", "gpu", ">=", "0", ":", "\n", "            ", "device", "=", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", "\n", "en", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "\"cpu\"", "\n", "\n", "", "xs", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "10", ")", ":", "\n", "            ", "x", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "4", ",", "scale", "=", "2", ",", "size", "=", "(", "t", "+", "3", ",", "10", ")", ")", "\n", "en", "(", "torch", ".", "tensor", "(", "x", ",", "device", "=", "device", ")", ")", "\n", "xs", ".", "extend", "(", "list", "(", "x", ")", ")", "\n", "", "xs", "=", "np", ".", "stack", "(", "xs", ")", "\n", "true_mean", "=", "np", ".", "mean", "(", "xs", ",", "axis", "=", "0", ")", "\n", "true_std", "=", "np", ".", "std", "(", "xs", ",", "axis", "=", "0", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "en", ".", "mean", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "true_mean", ",", "rtol", "=", "1e-4", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "en", ".", "std", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "true_std", ",", "rtol", "=", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_empirical_normalization.TestEmpiricalNormalization.test_large": [[37, 54], ["pfrl.nn.empirical_normalization.EmpiricalNormalization", "range", "pfrl.nn.empirical_normalization.EmpiricalNormalization.", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.random.normal", "pfrl.nn.empirical_normalization.EmpiricalNormalization.", "numpy.random.normal", "torch.tensor", "pfrl.nn.empirical_normalization.EmpiricalNormalization.mean.cpu().numpy", "pfrl.nn.empirical_normalization.EmpiricalNormalization.std.cpu().numpy", "pfrl.nn.empirical_normalization.EmpiricalNormalization.inverse", "torch.tensor", "torch.tensor", "pfrl.nn.empirical_normalization.EmpiricalNormalization.mean.cpu", "pfrl.nn.empirical_normalization.EmpiricalNormalization.std.cpu"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.inverse"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_large", "(", "self", ")", ":", "\n", "        ", "en", "=", "empirical_normalization", ".", "EmpiricalNormalization", "(", "10", ")", "\n", "for", "_", "in", "range", "(", "10000", ")", ":", "\n", "            ", "x", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "4", ",", "scale", "=", "2", ",", "size", "=", "(", "7", ",", "10", ")", ")", "\n", "en", "(", "torch", ".", "tensor", "(", "x", ")", ")", "\n", "", "x", "=", "2", "*", "np", ".", "random", ".", "normal", "(", "loc", "=", "4", ",", "scale", "=", "2", ",", "size", "=", "(", "1", ",", "10", ")", ")", "\n", "enx", "=", "en", "(", "torch", ".", "tensor", "(", "x", ")", ",", "update", "=", "False", ")", "\n", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "en", ".", "mean", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "4", ",", "rtol", "=", "1e-1", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "en", ".", "std", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "2", ",", "rtol", "=", "1e-1", ")", "\n", "\n", "# Compare with the ground-truth normalization", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "(", "x", "-", "4", ")", "/", "2", ",", "enx", ",", "rtol", "=", "1e-1", ")", "\n", "\n", "# Test inverse", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "x", ",", "en", ".", "inverse", "(", "torch", ".", "tensor", "(", "enx", ")", ")", ",", "rtol", "=", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_empirical_normalization.TestEmpiricalNormalization.test_batch_axis": [[55, 65], ["range", "pfrl.nn.empirical_normalization.EmpiricalNormalization", "range", "numpy.random.rand", "pfrl.nn.empirical_normalization.EmpiricalNormalization.", "torch.tensor"], "methods", ["None"], ["", "def", "test_batch_axis", "(", "self", ")", ":", "\n", "        ", "shape", "=", "(", "2", ",", "3", ",", "4", ")", "\n", "for", "batch_axis", "in", "range", "(", "3", ")", ":", "\n", "            ", "en", "=", "empirical_normalization", ".", "EmpiricalNormalization", "(", "\n", "shape", "=", "shape", "[", ":", "batch_axis", "]", "+", "shape", "[", "batch_axis", "+", "1", ":", "]", ",", "\n", "batch_axis", "=", "batch_axis", ",", "\n", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "                ", "x", "=", "np", ".", "random", ".", "rand", "(", "*", "shape", ")", "\n", "en", "(", "torch", ".", "tensor", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_empirical_normalization.TestEmpiricalNormalization.test_until": [[66, 84], ["pfrl.nn.empirical_normalization.EmpiricalNormalization", "range", "pfrl.nn.empirical_normalization.EmpiricalNormalization.", "torch.tensor", "test_empirical_normalization.TestEmpiricalNormalization.assertFalse", "test_empirical_normalization.TestEmpiricalNormalization.assertFalse", "numpy.allclose", "numpy.allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.random.rand", "pfrl.nn.empirical_normalization.EmpiricalNormalization.mean.cpu().numpy", "pfrl.nn.empirical_normalization.EmpiricalNormalization.std.cpu().numpy", "pfrl.nn.empirical_normalization.EmpiricalNormalization.mean.cpu().numpy", "pfrl.nn.empirical_normalization.EmpiricalNormalization.std.cpu().numpy", "pfrl.nn.empirical_normalization.EmpiricalNormalization.mean.cpu", "pfrl.nn.empirical_normalization.EmpiricalNormalization.std.cpu", "pfrl.nn.empirical_normalization.EmpiricalNormalization.mean.cpu", "pfrl.nn.empirical_normalization.EmpiricalNormalization.std.cpu"], "methods", ["None"], ["", "", "", "def", "test_until", "(", "self", ")", ":", "\n", "        ", "en", "=", "empirical_normalization", ".", "EmpiricalNormalization", "(", "7", ",", "until", "=", "20", ")", "\n", "last_mean", "=", "None", "\n", "last_std", "=", "None", "\n", "for", "t", "in", "range", "(", "15", ")", ":", "\n", "            ", "en", "(", "torch", ".", "tensor", "(", "np", ".", "random", ".", "rand", "(", "2", ",", "7", ")", "+", "t", ")", ")", "\n", "\n", "if", "1", "<=", "t", "<", "10", ":", "\n", "                ", "self", ".", "assertFalse", "(", "\n", "np", ".", "allclose", "(", "en", ".", "mean", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "last_mean", ",", "rtol", "=", "1e-4", ")", "\n", ")", "\n", "self", ".", "assertFalse", "(", "np", ".", "allclose", "(", "en", ".", "std", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "last_std", ",", "rtol", "=", "1e-4", ")", ")", "\n", "", "elif", "t", ">=", "10", ":", "\n", "                ", "np", ".", "testing", ".", "assert_allclose", "(", "en", ".", "mean", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "last_mean", ",", "rtol", "=", "1e-4", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "en", ".", "std", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "last_std", ",", "rtol", "=", "1e-4", ")", "\n", "\n", "", "last_mean", "=", "en", ".", "mean", "\n", "last_std", "=", "en", ".", "std", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_branched.TestRecurrentBranched._test_forward": [[18, 72], ["pfrl.nn.RecurrentBranched", "torch.nn.utils.rnn.pack_sequence", "pfrl.nn.RecurrentBranched.", "test_recurrent_branched.TestRecurrentBranched.assertIsInstance", "test_recurrent_branched.TestRecurrentBranched.assertEqual", "test_recurrent_branched.TestRecurrentBranched.assertEqual", "test_recurrent_branched.TestRecurrentBranched.assertEqual", "test_recurrent_branched.TestRecurrentBranched.assertEqual", "test_recurrent_branched.TestRecurrentBranched.assertIsInstance", "test_recurrent_branched.TestRecurrentBranched.assertEqual", "test_recurrent_branched.TestRecurrentBranched.assertIsInstance", "test_recurrent_branched.TestRecurrentBranched.assertEqual", "test_recurrent_branched.TestRecurrentBranched.assertEqual", "test_recurrent_branched.TestRecurrentBranched.assertEqual", "test_recurrent_branched.TestRecurrentBranched.assertIsInstance", "test_recurrent_branched.TestRecurrentBranched.assertEqual", "test_recurrent_branched.TestRecurrentBranched.assertEqual", "test_recurrent_branched.TestRecurrentBranched.assertIsInstance", "test_recurrent_branched.TestRecurrentBranched.assertEqual", "torch.nn.LSTM", "pfrl.nn.RecurrentSequential", "pfrl.nn.RecurrentSequential", "torch.device", "pfrl.nn.RecurrentBranched.to", "torch.device", "torch.rand", "torch.rand", "len", "len", "len", "len", "len", "len", "len", "torch.nn.RNN", "torch.nn.Linear", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["    ", "def", "_test_forward", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "in_size", "=", "2", "\n", "out0_size", "=", "3", "\n", "out1_size", "=", "4", "\n", "out2_size", "=", "1", "\n", "\n", "par", "=", "RecurrentBranched", "(", "\n", "nn", ".", "LSTM", "(", "num_layers", "=", "1", ",", "input_size", "=", "in_size", ",", "hidden_size", "=", "out0_size", ")", ",", "\n", "RecurrentSequential", "(", "\n", "nn", ".", "RNN", "(", "num_layers", "=", "1", ",", "input_size", "=", "in_size", ",", "hidden_size", "=", "out1_size", ")", ",", "\n", ")", ",", "\n", "RecurrentSequential", "(", "\n", "nn", ".", "Linear", "(", "in_size", ",", "out2_size", ")", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "if", "gpu", ">=", "0", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", ")", "\n", "par", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "", "seqs_x", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "in_size", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "rand", "(", "3", ",", "in_size", ",", "device", "=", "device", ")", ",", "\n", "]", "\n", "\n", "packed_x", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_sequence", "(", "seqs_x", ",", "enforce_sorted", "=", "False", ")", "\n", "\n", "# Concatenated output should be a tuple of three variables.", "\n", "out", ",", "rs", "=", "par", "(", "packed_x", ",", "None", ")", "\n", "self", ".", "assertIsInstance", "(", "out", ",", "tuple", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "out", ")", ",", "len", "(", "par", ")", ")", "\n", "self", ".", "assertEqual", "(", "out", "[", "0", "]", ".", "data", ".", "shape", ",", "(", "4", ",", "out0_size", ")", ")", "\n", "self", ".", "assertEqual", "(", "out", "[", "1", "]", ".", "data", ".", "shape", ",", "(", "4", ",", "out1_size", ")", ")", "\n", "self", ".", "assertEqual", "(", "out", "[", "2", "]", ".", "data", ".", "shape", ",", "(", "4", ",", "out2_size", ")", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "rs", ",", "tuple", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "rs", ")", ",", "len", "(", "par", ")", ")", "\n", "\n", "# LSTM", "\n", "self", ".", "assertIsInstance", "(", "rs", "[", "0", "]", ",", "tuple", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "rs", "[", "0", "]", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "rs", "[", "0", "]", "[", "0", "]", ".", "shape", ",", "(", "1", ",", "len", "(", "seqs_x", ")", ",", "out0_size", ")", ")", "\n", "self", ".", "assertEqual", "(", "rs", "[", "0", "]", "[", "1", "]", ".", "shape", ",", "(", "1", ",", "len", "(", "seqs_x", ")", ",", "out0_size", ")", ")", "\n", "\n", "# RecurrentSequential(RNN)", "\n", "self", ".", "assertIsInstance", "(", "rs", "[", "1", "]", ",", "tuple", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "rs", "[", "1", "]", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "rs", "[", "1", "]", "[", "0", "]", ".", "shape", ",", "(", "1", ",", "len", "(", "seqs_x", ")", ",", "out1_size", ")", ")", "\n", "\n", "# RecurrentSequential(Linear)", "\n", "self", ".", "assertIsInstance", "(", "rs", "[", "2", "]", ",", "tuple", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "rs", "[", "2", "]", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_branched.TestRecurrentBranched.test_forward_gpu": [[73, 76], ["test_recurrent_branched.TestRecurrentBranched._test_forward"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_sequential.TestRecurrentSequential._test_forward"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_forward_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_forward", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_branched.TestRecurrentBranched.test_forward_cpu": [[77, 79], ["test_recurrent_branched.TestRecurrentBranched._test_forward"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_sequential.TestRecurrentSequential._test_forward"], ["", "def", "test_forward_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_forward", "(", "gpu", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_branched.TestRecurrentBranched._test_forward_with_modified_recurrent_state": [[80, 209], ["pfrl.nn.RecurrentBranched", "torch.nn.utils.rnn.pack_sequence", "torch.stack", "torch.stack", "pfrl.nn.RecurrentBranched.", "test_recurrent_branched.TestRecurrentBranched._test_forward_with_modified_recurrent_state.no_mask_forward_twice"], "methods", ["None"], ["", "def", "_test_forward_with_modified_recurrent_state", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "in_size", "=", "2", "\n", "out0_size", "=", "2", "\n", "out1_size", "=", "3", "\n", "par", "=", "RecurrentBranched", "(", "\n", "nn", ".", "GRU", "(", "num_layers", "=", "1", ",", "input_size", "=", "in_size", ",", "hidden_size", "=", "out0_size", ")", ",", "\n", "RecurrentSequential", "(", "\n", "nn", ".", "LSTM", "(", "num_layers", "=", "1", ",", "input_size", "=", "in_size", ",", "hidden_size", "=", "out1_size", ")", ",", "\n", ")", ",", "\n", ")", "\n", "if", "gpu", ">=", "0", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", ")", "\n", "par", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "seqs_x", "=", "[", "\n", "torch", ".", "rand", "(", "2", ",", "in_size", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "rand", "(", "2", ",", "in_size", ",", "device", "=", "device", ")", ",", "\n", "]", "\n", "packed_x", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_sequence", "(", "seqs_x", ",", "enforce_sorted", "=", "False", ")", "\n", "x_t0", "=", "torch", ".", "stack", "(", "(", "seqs_x", "[", "0", "]", "[", "0", "]", ",", "seqs_x", "[", "1", "]", "[", "0", "]", ")", ")", "\n", "x_t1", "=", "torch", ".", "stack", "(", "(", "seqs_x", "[", "0", "]", "[", "1", "]", ",", "seqs_x", "[", "1", "]", "[", "1", "]", ")", ")", "\n", "\n", "(", "gru_out", ",", "lstm_out", ")", ",", "(", "gru_rs", ",", "(", "lstm_rs", ",", ")", ")", "=", "par", "(", "packed_x", ",", "None", ")", "\n", "\n", "# Check if n_step_forward and forward twice results are same", "\n", "def", "no_mask_forward_twice", "(", ")", ":", "\n", "            ", "_", ",", "rs", "=", "one_step_forward", "(", "par", ",", "x_t0", ",", "None", ")", "\n", "return", "one_step_forward", "(", "par", ",", "x_t1", ",", "rs", ")", "\n", "\n", "", "(", "\n", "(", "nomask_gru_out", ",", "nomask_lstm_out", ")", ",", "\n", "(", "nomask_gru_rs", ",", "(", "nomask_lstm_rs", ",", ")", ")", ",", "\n", ")", "=", "no_mask_forward_twice", "(", ")", "\n", "\n", "# GRU", "\n", "torch_assert_allclose", "(", "gru_out", ".", "data", "[", "2", ":", "]", ",", "nomask_gru_out", ",", "atol", "=", "1e-5", ")", "\n", "torch_assert_allclose", "(", "gru_rs", ",", "nomask_gru_rs", ")", "\n", "\n", "# LSTM", "\n", "torch_assert_allclose", "(", "lstm_out", ".", "data", "[", "2", ":", "]", ",", "nomask_lstm_out", ",", "atol", "=", "1e-5", ")", "\n", "torch_assert_allclose", "(", "lstm_rs", "[", "0", "]", ",", "nomask_lstm_rs", "[", "0", "]", ",", "atol", "=", "1e-5", ")", "\n", "torch_assert_allclose", "(", "lstm_rs", "[", "1", "]", ",", "nomask_lstm_rs", "[", "1", "]", ",", "atol", "=", "1e-5", ")", "\n", "\n", "# 1st-only mask forward twice: only 2nd should be the same", "\n", "def", "mask0_forward_twice", "(", ")", ":", "\n", "            ", "_", ",", "rs", "=", "one_step_forward", "(", "par", ",", "x_t0", ",", "None", ")", "\n", "rs", "=", "mask_recurrent_state_at", "(", "rs", ",", "0", ")", "\n", "return", "one_step_forward", "(", "par", ",", "x_t1", ",", "rs", ")", "\n", "\n", "", "(", "\n", "(", "mask0_gru_out", ",", "mask0_lstm_out", ")", ",", "\n", "(", "mask0_gru_rs", ",", "(", "mask0_lstm_rs", ",", ")", ")", ",", "\n", ")", "=", "mask0_forward_twice", "(", ")", "\n", "\n", "# GRU", "\n", "with", "self", ".", "assertRaises", "(", "AssertionError", ")", ":", "\n", "            ", "torch_assert_allclose", "(", "gru_out", ".", "data", "[", "2", "]", ",", "mask0_gru_out", "[", "0", "]", ",", "atol", "=", "1e-5", ")", "\n", "", "torch_assert_allclose", "(", "gru_out", ".", "data", "[", "3", "]", ",", "mask0_gru_out", "[", "1", "]", ",", "atol", "=", "1e-5", ")", "\n", "\n", "# LSTM", "\n", "with", "self", ".", "assertRaises", "(", "AssertionError", ")", ":", "\n", "            ", "torch_assert_allclose", "(", "lstm_out", ".", "data", "[", "2", "]", ",", "mask0_lstm_out", "[", "0", "]", ",", "atol", "=", "1e-5", ")", "\n", "", "torch_assert_allclose", "(", "lstm_out", ".", "data", "[", "3", "]", ",", "mask0_lstm_out", "[", "1", "]", ",", "atol", "=", "1e-5", ")", "\n", "\n", "# 2nd-only mask forward twice: only 1st should be the same", "\n", "def", "mask1_forward_twice", "(", ")", ":", "\n", "            ", "_", ",", "rs", "=", "one_step_forward", "(", "par", ",", "x_t0", ",", "None", ")", "\n", "rs", "=", "mask_recurrent_state_at", "(", "rs", ",", "1", ")", "\n", "return", "one_step_forward", "(", "par", ",", "x_t1", ",", "rs", ")", "\n", "\n", "", "(", "\n", "(", "mask1_gru_out", ",", "mask1_lstm_out", ")", ",", "\n", "(", "mask1_gru_rs", ",", "(", "mask1_lstm_rs", ",", ")", ")", ",", "\n", ")", "=", "mask1_forward_twice", "(", ")", "\n", "\n", "# GRU", "\n", "torch_assert_allclose", "(", "gru_out", ".", "data", "[", "2", "]", ",", "mask1_gru_out", "[", "0", "]", ",", "atol", "=", "1e-5", ")", "\n", "with", "self", ".", "assertRaises", "(", "AssertionError", ")", ":", "\n", "            ", "torch_assert_allclose", "(", "gru_out", ".", "data", "[", "3", "]", ",", "mask1_gru_out", "[", "1", "]", ",", "atol", "=", "1e-5", ")", "\n", "\n", "# LSTM", "\n", "", "torch_assert_allclose", "(", "lstm_out", ".", "data", "[", "2", "]", ",", "mask1_lstm_out", "[", "0", "]", ",", "atol", "=", "1e-5", ")", "\n", "with", "self", ".", "assertRaises", "(", "AssertionError", ")", ":", "\n", "            ", "torch_assert_allclose", "(", "lstm_out", ".", "data", "[", "3", "]", ",", "mask1_lstm_out", "[", "1", "]", ",", "atol", "=", "1e-5", ")", "\n", "\n", "# both 1st and 2nd mask forward twice: both should be different", "\n", "", "def", "mask01_forward_twice", "(", ")", ":", "\n", "            ", "_", ",", "rs", "=", "one_step_forward", "(", "par", ",", "x_t0", ",", "None", ")", "\n", "rs", "=", "mask_recurrent_state_at", "(", "rs", ",", "[", "0", ",", "1", "]", ")", "\n", "return", "one_step_forward", "(", "par", ",", "x_t1", ",", "rs", ")", "\n", "\n", "", "(", "\n", "(", "mask01_gru_out", ",", "mask01_lstm_out", ")", ",", "\n", "(", "mask01_gru_rs", ",", "(", "mask01_lstm_rs", ",", ")", ")", ",", "\n", ")", "=", "mask01_forward_twice", "(", ")", "\n", "\n", "# GRU", "\n", "with", "self", ".", "assertRaises", "(", "AssertionError", ")", ":", "\n", "            ", "torch_assert_allclose", "(", "gru_out", ".", "data", "[", "2", "]", ",", "mask01_gru_out", "[", "0", "]", ",", "atol", "=", "1e-5", ")", "\n", "", "with", "self", ".", "assertRaises", "(", "AssertionError", ")", ":", "\n", "            ", "torch_assert_allclose", "(", "gru_out", ".", "data", "[", "3", "]", ",", "mask01_gru_out", "[", "1", "]", ",", "atol", "=", "1e-5", ")", "\n", "\n", "# LSTM", "\n", "", "with", "self", ".", "assertRaises", "(", "AssertionError", ")", ":", "\n", "            ", "torch_assert_allclose", "(", "lstm_out", ".", "data", "[", "2", "]", ",", "mask01_lstm_out", "[", "0", "]", ",", "atol", "=", "1e-5", ")", "\n", "", "with", "self", ".", "assertRaises", "(", "AssertionError", ")", ":", "\n", "            ", "torch_assert_allclose", "(", "lstm_out", ".", "data", "[", "3", "]", ",", "mask01_lstm_out", "[", "1", "]", ",", "atol", "=", "1e-5", ")", "\n", "\n", "# get and concat recurrent states and resume forward", "\n", "", "def", "get_and_concat_rs_forward", "(", ")", ":", "\n", "            ", "_", ",", "rs", "=", "one_step_forward", "(", "par", ",", "x_t0", ",", "None", ")", "\n", "rs0", "=", "get_recurrent_state_at", "(", "rs", ",", "0", ",", "detach", "=", "True", ")", "\n", "rs1", "=", "get_recurrent_state_at", "(", "rs", ",", "1", ",", "detach", "=", "True", ")", "\n", "concat_rs", "=", "concatenate_recurrent_states", "(", "[", "rs0", ",", "rs1", "]", ")", "\n", "return", "one_step_forward", "(", "par", ",", "x_t1", ",", "concat_rs", ")", "\n", "\n", "", "(", "\n", "(", "getcon_gru_out", ",", "getcon_lstm_out", ")", ",", "\n", "(", "getcon_gru_rs", ",", "(", "getcon_lstm_rs", ",", ")", ")", ",", "\n", ")", "=", "get_and_concat_rs_forward", "(", ")", "\n", "\n", "# GRU", "\n", "torch_assert_allclose", "(", "gru_out", ".", "data", "[", "2", "]", ",", "getcon_gru_out", "[", "0", "]", ",", "atol", "=", "1e-5", ")", "\n", "torch_assert_allclose", "(", "gru_out", ".", "data", "[", "3", "]", ",", "getcon_gru_out", "[", "1", "]", ",", "atol", "=", "1e-5", ")", "\n", "\n", "# LSTM", "\n", "torch_assert_allclose", "(", "lstm_out", ".", "data", "[", "2", "]", ",", "getcon_lstm_out", "[", "0", "]", ",", "atol", "=", "1e-5", ")", "\n", "torch_assert_allclose", "(", "lstm_out", ".", "data", "[", "3", "]", ",", "getcon_lstm_out", "[", "1", "]", ",", "atol", "=", "1e-5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_branched.TestRecurrentBranched.test_forward_with_modified_recurrent_state_gpu": [[210, 213], ["test_recurrent_branched.TestRecurrentBranched._test_forward_with_modified_recurrent_state"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_branched.TestRecurrentBranched._test_forward_with_modified_recurrent_state"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_forward_with_modified_recurrent_state_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_forward_with_modified_recurrent_state", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_branched.TestRecurrentBranched.test_forward_with_modified_recurrent_state_cpu": [[214, 216], ["test_recurrent_branched.TestRecurrentBranched._test_forward_with_modified_recurrent_state"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_branched.TestRecurrentBranched._test_forward_with_modified_recurrent_state"], ["", "def", "test_forward_with_modified_recurrent_state_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_forward_with_modified_recurrent_state", "(", "gpu", "=", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_linear.TestFactorizedNoisyLinear.setUp": [[10, 15], ["pytest.fixture", "torch.nn.Linear", "pfrl.nn.noisy_linear.FactorizedNoisyLinear"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "bias", ")", ":", "\n", "        ", "self", ".", "bias", "=", "bias", "\n", "mu", "=", "torch", ".", "nn", ".", "Linear", "(", "6", ",", "5", ",", "bias", "=", "self", ".", "bias", ")", "\n", "self", ".", "linear", "=", "noisy_linear", ".", "FactorizedNoisyLinear", "(", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_linear.TestFactorizedNoisyLinear._test_calls": [[16, 21], ["torch.arange().reshape", "torch.as_tensor", "test_noisy_linear.TestFactorizedNoisyLinear.linear", "test_noisy_linear.TestFactorizedNoisyLinear.linear", "torch.arange"], "methods", ["None"], ["", "def", "_test_calls", "(", "self", ",", "device", ")", ":", "\n", "        ", "x_data", "=", "torch", ".", "arange", "(", "12", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "reshape", "(", "(", "2", ",", "6", ")", ")", "\n", "x", "=", "torch", ".", "as_tensor", "(", "x_data", ",", "device", "=", "device", ")", "\n", "self", ".", "linear", "(", "x", ")", "\n", "self", ".", "linear", "(", "x_data", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_linear.TestFactorizedNoisyLinear.test_calls_cpu": [[22, 24], ["test_noisy_linear.TestFactorizedNoisyLinear._test_calls", "torch.device"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_linear.TestFactorizedNoisyLinear._test_calls", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["", "def", "test_calls_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_calls", "(", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_linear.TestFactorizedNoisyLinear.test_calls_gpu": [[25, 30], ["torch.device", "test_noisy_linear.TestFactorizedNoisyLinear.linear.to", "test_noisy_linear.TestFactorizedNoisyLinear._test_calls"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_linear.TestFactorizedNoisyLinear._test_calls"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_calls_gpu", "(", "self", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "self", ".", "linear", ".", "to", "(", "device", ")", "\n", "self", ".", "_test_calls", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_linear.TestFactorizedNoisyLinear.test_calls_gpu_after_to_gpu": [[31, 38], ["torch.device", "mu.to", "pfrl.nn.noisy_linear.FactorizedNoisyLinear", "test_noisy_linear.TestFactorizedNoisyLinear._test_calls"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_linear.TestFactorizedNoisyLinear._test_calls"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_calls_gpu_after_to_gpu", "(", "self", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "mu", "=", "self", ".", "linear", ".", "mu", "\n", "mu", ".", "to", "(", "device", ")", "\n", "self", ".", "linear", "=", "noisy_linear", ".", "FactorizedNoisyLinear", "(", "mu", ")", "\n", "self", ".", "_test_calls", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_linear.TestFactorizedNoisyLinear._test_randomness": [[39, 58], ["torch.normal().float", "test_noisy_linear.TestFactorizedNoisyLinear.linear().detach().cpu().numpy", "test_noisy_linear.TestFactorizedNoisyLinear.linear().detach().cpu().numpy", "float", "numpy.mean", "torch.normal", "test_noisy_linear.TestFactorizedNoisyLinear.linear().detach().cpu", "test_noisy_linear.TestFactorizedNoisyLinear.linear().detach().cpu", "numpy.square", "numpy.sqrt", "test_noisy_linear.TestFactorizedNoisyLinear.linear().detach", "test_noisy_linear.TestFactorizedNoisyLinear.linear().detach", "test_noisy_linear.TestFactorizedNoisyLinear.linear", "test_noisy_linear.TestFactorizedNoisyLinear.linear"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["", "def", "_test_randomness", "(", "self", ",", "device", ")", ":", "\n", "        ", "x", "=", "torch", ".", "normal", "(", "0", ",", "1", ",", "size", "=", "(", "10", ",", "6", ")", ",", "device", "=", "device", ")", ".", "float", "(", ")", "\n", "y1", "=", "self", ".", "linear", "(", "x", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "y2", "=", "self", ".", "linear", "(", "x", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "d", "=", "float", "(", "numpy", ".", "mean", "(", "numpy", ".", "square", "(", "y1", "-", "y2", ")", ")", ")", "\n", "\n", "# The parameter name suggests that", "\n", "# torch.sqrt(d / 2) is approx to sigma_scale = 0.4", "\n", "# In fact, (for each element _[i, j],) it holds:", "\n", "# \\E[(y2 - y1) ** 2] = 2 * \\Var(y) = (4 / pi) * sigma_scale ** 2", "\n", "\n", "target", "=", "(", "0.4", "**", "2", ")", "*", "2", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "target", "*=", "2", "/", "numpy", ".", "pi", "+", "numpy", ".", "sqrt", "(", "2", "/", "numpy", ".", "pi", ")", "/", "y1", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "target", "*=", "2", "/", "numpy", ".", "pi", "\n", "\n", "", "assert", "d", ">", "target", "/", "3.0", "\n", "assert", "d", "<", "target", "*", "3.0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_linear.TestFactorizedNoisyLinear.test_randomness_cpu": [[59, 62], ["torch.device", "test_noisy_linear.TestFactorizedNoisyLinear._test_randomness"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_linear.TestFactorizedNoisyLinear._test_randomness"], ["", "def", "test_randomness_cpu", "(", "self", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "self", ".", "_test_randomness", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_linear.TestFactorizedNoisyLinear.test_randomness_gpu": [[63, 68], ["torch.device", "test_noisy_linear.TestFactorizedNoisyLinear.linear.to", "test_noisy_linear.TestFactorizedNoisyLinear._test_randomness"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_linear.TestFactorizedNoisyLinear._test_randomness"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_randomness_gpu", "(", "self", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "self", ".", "linear", ".", "to", "(", "device", ")", "\n", "self", ".", "_test_randomness", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_linear.TestFactorizedNoisyLinear._test_non_randomness": [[69, 75], ["torch.normal", "torch.normal.repeat", "test_noisy_linear.TestFactorizedNoisyLinear.linear", "torch.testing.assert_allclose"], "methods", ["None"], ["", "def", "_test_non_randomness", "(", "self", ",", "device", ")", ":", "\n", "# Noises should be the same in a batch", "\n", "        ", "x0", "=", "torch", ".", "normal", "(", "0", ",", "1", ",", "size", "=", "(", "1", ",", "6", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "x", "=", "x0", ".", "repeat", "(", "2", ",", "1", ")", "\n", "y", "=", "self", ".", "linear", "(", "x", ")", "\n", "torch", ".", "testing", ".", "assert_allclose", "(", "y", "[", "0", "]", ",", "y", "[", "1", "]", ",", "rtol", "=", "1e-4", ",", "atol", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_linear.TestFactorizedNoisyLinear.test_non_randomness_cpu": [[76, 78], ["test_noisy_linear.TestFactorizedNoisyLinear._test_non_randomness", "torch.device"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_linear.TestFactorizedNoisyLinear._test_non_randomness", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["", "def", "test_non_randomness_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_non_randomness", "(", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_linear.TestFactorizedNoisyLinear.test_non_randomness_gpu": [[79, 84], ["torch.device", "test_noisy_linear.TestFactorizedNoisyLinear.linear.to", "test_noisy_linear.TestFactorizedNoisyLinear._test_non_randomness"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_linear.TestFactorizedNoisyLinear._test_non_randomness"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_non_randomness_gpu", "(", "self", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "self", ".", "linear", ".", "to", "(", "device", ")", "\n", "self", ".", "_test_non_randomness", "(", "device", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_sequential.TestRecurrentSequential._test_forward": [[36, 103], ["pfrl.nn.RecurrentSequential", "torch.nn.utils.rnn.pack_sequence", "torch.nn.utils.rnn.pack_sequence", "pfrl.nn.RecurrentSequential.", "test_recurrent_sequential.TestRecurrentSequential.assertEqual", "test_recurrent_sequential.TestRecurrentSequential._test_forward.manual_forward"], "methods", ["None"], ["    ", "def", "_test_forward", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "in_size", "=", "2", "\n", "out_size", "=", "6", "\n", "\n", "rseq", "=", "RecurrentSequential", "(", "\n", "nn", ".", "Linear", "(", "in_size", ",", "3", ")", ",", "\n", "nn", ".", "ELU", "(", ")", ",", "\n", "nn", ".", "LSTM", "(", "num_layers", "=", "1", ",", "input_size", "=", "3", ",", "hidden_size", "=", "4", ")", ",", "\n", "nn", ".", "Linear", "(", "4", ",", "5", ")", ",", "\n", "nn", ".", "RNN", "(", "num_layers", "=", "1", ",", "input_size", "=", "5", ",", "hidden_size", "=", "out_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "\n", "if", "gpu", ">=", "0", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", ")", "\n", "rseq", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "", "assert", "len", "(", "rseq", ".", "recurrent_children", ")", "==", "2", "\n", "assert", "rseq", ".", "recurrent_children", "[", "0", "]", "is", "rseq", "[", "2", "]", "\n", "assert", "rseq", ".", "recurrent_children", "[", "1", "]", "is", "rseq", "[", "4", "]", "\n", "\n", "linear1", "=", "rseq", "[", "0", "]", "\n", "lstm", "=", "rseq", "[", "2", "]", "\n", "linear2", "=", "rseq", "[", "3", "]", "\n", "rnn", "=", "rseq", "[", "4", "]", "\n", "\n", "seqs_x", "=", "[", "\n", "torch", ".", "rand", "(", "4", ",", "in_size", ",", "requires_grad", "=", "True", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "rand", "(", "1", ",", "in_size", ",", "requires_grad", "=", "True", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "rand", "(", "3", ",", "in_size", ",", "requires_grad", "=", "True", ",", "device", "=", "device", ")", ",", "\n", "]", "\n", "\n", "packed_x", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_sequence", "(", "seqs_x", ",", "enforce_sorted", "=", "False", ")", "\n", "\n", "out", ",", "_", "=", "rseq", "(", "packed_x", ",", "None", ")", "\n", "self", ".", "assertEqual", "(", "out", ".", "data", ".", "shape", ",", "(", "8", ",", "out_size", ")", ")", "\n", "\n", "# Check if the output matches that of step-by-step execution", "\n", "def", "manual_forward", "(", "seqs_x", ")", ":", "\n", "            ", "seqs_y", "=", "[", "]", "\n", "for", "seq_x", "in", "seqs_x", ":", "\n", "                ", "lstm_st", "=", "None", "\n", "rnn_st", "=", "None", "\n", "seq_y", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "seq_x", ")", ")", ":", "\n", "                    ", "h", "=", "seq_x", "[", "i", ":", "i", "+", "1", "]", "\n", "h", "=", "linear1", "(", "h", ")", "\n", "h", "=", "F", ".", "elu", "(", "h", ")", "\n", "h", ",", "lstm_st", "=", "_step_lstm", "(", "lstm", ",", "h", ",", "lstm_st", ")", "\n", "h", "=", "linear2", "(", "h", ")", "\n", "h", ",", "rnn_st", "=", "_step_rnn_tanh", "(", "rnn", ",", "h", ",", "rnn_st", ")", "\n", "y", "=", "F", ".", "tanh", "(", "h", ")", "\n", "seq_y", ".", "append", "(", "y", "[", "0", "]", ")", "\n", "", "seqs_y", ".", "append", "(", "torch", ".", "stack", "(", "seq_y", ")", ")", "\n", "", "return", "nn", ".", "utils", ".", "rnn", ".", "pack_sequence", "(", "seqs_y", ",", "enforce_sorted", "=", "False", ")", "\n", "\n", "", "manual_out", "=", "manual_forward", "(", "seqs_x", ")", "\n", "torch_assert_allclose", "(", "out", ".", "data", ",", "manual_out", ".", "data", ",", "atol", "=", "1e-4", ")", "\n", "\n", "# Finally, check the gradient (wrt input)", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "[", "torch", ".", "sum", "(", "out", ".", "data", ")", "]", ",", "seqs_x", ")", "\n", "manual_grads", "=", "torch", ".", "autograd", ".", "grad", "(", "[", "torch", ".", "sum", "(", "manual_out", ".", "data", ")", "]", ",", "seqs_x", ")", "\n", "assert", "len", "(", "grads", ")", "==", "len", "(", "manual_grads", ")", "==", "3", "\n", "for", "grad", ",", "manual_grad", "in", "zip", "(", "grads", ",", "manual_grads", ")", ":", "\n", "            ", "torch_assert_allclose", "(", "grad", ",", "manual_grad", ",", "atol", "=", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_sequential.TestRecurrentSequential.test_forward_gpu": [[104, 107], ["test_recurrent_sequential.TestRecurrentSequential._test_forward"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_sequential.TestRecurrentSequential._test_forward"], ["", "", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_forward_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_forward", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_sequential.TestRecurrentSequential.test_forward_cpu": [[108, 110], ["test_recurrent_sequential.TestRecurrentSequential._test_forward"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_sequential.TestRecurrentSequential._test_forward"], ["", "def", "test_forward_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_forward", "(", "gpu", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_sequential.TestRecurrentSequential._test_forward_with_tuple_input": [[111, 142], ["pfrl.nn.RecurrentSequential", "pfrl.nn.RecurrentSequential.", "test_recurrent_sequential.TestRecurrentSequential.assertEqual", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pfrl.nn.Lambda", "torch.nn.RNN", "torch.nn.RNN", "torch.device", "torch.device", "torch.device", "torch.device", "pfrl.nn.RecurrentSequential.to", "torch.device", "torch.device", "torch.device", "torch.device", "torch.nn.utils.rnn.pack_sequence", "torch.nn.utils.rnn.pack_sequence", "torch.nn.utils.rnn.pack_sequence", "torch.nn.utils.rnn.pack_sequence", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["", "def", "_test_forward_with_tuple_input", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "in_size", "=", "5", "\n", "out_size", "=", "3", "\n", "\n", "def", "concat_input", "(", "tensors", ")", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "tensors", ",", "dim", "=", "1", ")", "\n", "\n", "", "rseq", "=", "RecurrentSequential", "(", "\n", "Lambda", "(", "concat_input", ")", ",", "\n", "nn", ".", "RNN", "(", "num_layers", "=", "1", ",", "input_size", "=", "in_size", ",", "hidden_size", "=", "out_size", ")", ",", "\n", ")", "\n", "\n", "if", "gpu", ">=", "0", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", ")", "\n", "rseq", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "# Input is list of tuples. Each tuple has two variables.", "\n", "", "seqs_x", "=", "[", "\n", "(", "torch", ".", "rand", "(", "3", ",", "2", ",", "device", "=", "device", ")", ",", "torch", ".", "rand", "(", "3", ",", "3", ",", "device", "=", "device", ")", ")", ",", "\n", "(", "torch", ".", "rand", "(", "1", ",", "2", ",", "device", "=", "device", ")", ",", "torch", ".", "rand", "(", "1", ",", "3", ",", "device", "=", "device", ")", ")", ",", "\n", "]", "\n", "packed_x", "=", "(", "\n", "nn", ".", "utils", ".", "rnn", ".", "pack_sequence", "(", "[", "seqs_x", "[", "0", "]", "[", "0", "]", ",", "seqs_x", "[", "1", "]", "[", "0", "]", "]", ")", ",", "\n", "nn", ".", "utils", ".", "rnn", ".", "pack_sequence", "(", "[", "seqs_x", "[", "0", "]", "[", "1", "]", ",", "seqs_x", "[", "1", "]", "[", "1", "]", "]", ")", ",", "\n", ")", "\n", "\n", "# Concatenated output should be a variable.", "\n", "out", ",", "_", "=", "rseq", "(", "packed_x", ",", "None", ")", "\n", "self", ".", "assertEqual", "(", "out", ".", "data", ".", "shape", ",", "(", "4", ",", "out_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_sequential.TestRecurrentSequential.test_forward_with_tuple_input_gpu": [[143, 146], ["test_recurrent_sequential.TestRecurrentSequential._test_forward_with_tuple_input"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_sequential.TestRecurrentSequential._test_forward_with_tuple_input"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_forward_with_tuple_input_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_forward_with_tuple_input", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_sequential.TestRecurrentSequential.test_forward_with_tuple_input_cpu": [[147, 149], ["test_recurrent_sequential.TestRecurrentSequential._test_forward_with_tuple_input"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_sequential.TestRecurrentSequential._test_forward_with_tuple_input"], ["", "def", "test_forward_with_tuple_input_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_forward_with_tuple_input", "(", "gpu", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_sequential.TestRecurrentSequential._test_forward_with_tuple_output": [[150, 184], ["pfrl.nn.RecurrentSequential", "torch.nn.utils.rnn.pack_sequence", "torch.nn.utils.rnn.pack_sequence", "pfrl.nn.RecurrentSequential.", "test_recurrent_sequential.TestRecurrentSequential.assertIsInstance", "test_recurrent_sequential.TestRecurrentSequential.assertEqual", "test_recurrent_sequential.TestRecurrentSequential.assertEqual", "test_recurrent_sequential.TestRecurrentSequential.assertEqual", "test_recurrent_sequential.TestRecurrentSequential.assertEqual", "tuple", "torch.nn.RNN", "torch.nn.RNN", "pfrl.nn.Lambda", "torch.device", "torch.device", "torch.device", "torch.device", "pfrl.nn.RecurrentSequential.to", "torch.device", "torch.device", "torch.device", "torch.device", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "len", "torch.split", "torch.split", "torch.split", "torch.split"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["", "def", "_test_forward_with_tuple_output", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "in_size", "=", "5", "\n", "out_size", "=", "6", "\n", "\n", "def", "split_output", "(", "x", ")", ":", "\n", "            ", "return", "tuple", "(", "torch", ".", "split", "(", "x", ",", "[", "2", ",", "1", ",", "3", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "", "rseq", "=", "RecurrentSequential", "(", "\n", "nn", ".", "RNN", "(", "num_layers", "=", "1", ",", "input_size", "=", "in_size", ",", "hidden_size", "=", "out_size", ")", ",", "\n", "Lambda", "(", "split_output", ")", ",", "\n", ")", "\n", "\n", "if", "gpu", ">=", "0", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", ")", "\n", "rseq", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "# Input is a list of two variables.", "\n", "", "seqs_x", "=", "[", "\n", "torch", ".", "rand", "(", "3", ",", "in_size", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "rand", "(", "2", ",", "in_size", ",", "device", "=", "device", ")", ",", "\n", "]", "\n", "\n", "packed_x", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_sequence", "(", "seqs_x", ",", "enforce_sorted", "=", "False", ")", "\n", "\n", "# Concatenated output should be a tuple of three variables.", "\n", "out", ",", "_", "=", "rseq", "(", "packed_x", ",", "None", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "out", ",", "tuple", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "out", ")", ",", "3", ")", "\n", "self", ".", "assertEqual", "(", "out", "[", "0", "]", ".", "data", ".", "shape", ",", "(", "5", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "out", "[", "1", "]", ".", "data", ".", "shape", ",", "(", "5", ",", "1", ")", ")", "\n", "self", ".", "assertEqual", "(", "out", "[", "2", "]", ".", "data", ".", "shape", ",", "(", "5", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_sequential.TestRecurrentSequential.test_forward_with_tuple_output_gpu": [[185, 188], ["test_recurrent_sequential.TestRecurrentSequential._test_forward_with_tuple_output"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_sequential.TestRecurrentSequential._test_forward_with_tuple_output"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_forward_with_tuple_output_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_forward_with_tuple_output", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_sequential.TestRecurrentSequential.test_forward_with_tuple_output_cpu": [[189, 191], ["test_recurrent_sequential.TestRecurrentSequential._test_forward_with_tuple_output"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_sequential.TestRecurrentSequential._test_forward_with_tuple_output"], ["", "def", "test_forward_with_tuple_output_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_forward_with_tuple_output", "(", "gpu", "=", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_sequential._step_lstm": [[12, 22], ["isinstance", "torch.nn.LSTMCell", "nn.LSTMCell."], "function", ["None"], ["def", "_step_lstm", "(", "lstm", ",", "x", ",", "state", ")", ":", "\n", "    ", "assert", "isinstance", "(", "lstm", ",", "nn", ".", "LSTM", ")", "\n", "lstm_cell", "=", "nn", ".", "LSTMCell", "(", "input_size", "=", "lstm", ".", "input_size", ",", "hidden_size", "=", "lstm", ".", "hidden_size", ")", "\n", "assert", "lstm", ".", "num_layers", "==", "1", "\n", "lstm_cell", ".", "weight_ih", "=", "lstm", ".", "weight_ih_l0", "\n", "lstm_cell", ".", "weight_hh", "=", "lstm", ".", "weight_hh_l0", "\n", "lstm_cell", ".", "bias_ih", "=", "lstm", ".", "bias_ih_l0", "\n", "lstm_cell", ".", "bias_hh", "=", "lstm", ".", "bias_hh_l0", "\n", "h", ",", "c", "=", "lstm_cell", "(", "x", ",", "state", ")", "\n", "return", "h", ",", "(", "h", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_recurrent_sequential._step_rnn_tanh": [[24, 33], ["isinstance", "torch.nn.RNNCell", "nn.RNNCell."], "function", ["None"], ["", "def", "_step_rnn_tanh", "(", "rnn", ",", "x", ",", "state", ")", ":", "\n", "    ", "assert", "isinstance", "(", "rnn", ",", "nn", ".", "RNN", ")", "\n", "rnn_cell", "=", "nn", ".", "RNNCell", "(", "input_size", "=", "rnn", ".", "input_size", ",", "hidden_size", "=", "rnn", ".", "hidden_size", ")", "\n", "rnn_cell", ".", "weight_ih", "=", "rnn", ".", "weight_ih_l0", "\n", "rnn_cell", ".", "weight_hh", "=", "rnn", ".", "weight_hh_l0", "\n", "rnn_cell", ".", "bias_ih", "=", "rnn", ".", "bias_ih_l0", "\n", "rnn_cell", ".", "bias_hh", "=", "rnn", ".", "bias_hh_l0", "\n", "h", "=", "rnn_cell", "(", "x", ",", "state", ")", "\n", "return", "h", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_mlp_bn.TestMLPBN.setUp": [[20, 38], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "\n", "self", ",", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "hidden_sizes", ",", "\n", "normalize_input", ",", "\n", "normalize_output", ",", "\n", "nonlinearity", ",", "\n", "last_wscale", ",", "\n", ")", ":", "\n", "        ", "self", ".", "in_size", "=", "in_size", "\n", "self", ".", "out_size", "=", "out_size", "\n", "self", ".", "hidden_sizes", "=", "hidden_sizes", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "normalize_output", "=", "normalize_output", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "self", ".", "last_wscale", "=", "last_wscale", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_mlp_bn.TestMLPBN._test_call": [[39, 61], ["getattr", "pfrl.nn.MLPBN", "numpy.random.rand().astype", "torch.from_numpy", "mlp.to.to.", "assertions.assertEqual", "assertions.assertEqual", "assertions.assertTrue", "torch.device", "mlp.to.to.to", "x.cuda.cuda.cuda", "numpy.random.rand", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["", "def", "_test_call", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "nonlinearity", "=", "getattr", "(", "torch", ".", "nn", ".", "functional", ",", "self", ".", "nonlinearity", ")", "\n", "mlp", "=", "pfrl", ".", "nn", ".", "MLPBN", "(", "\n", "in_size", "=", "self", ".", "in_size", ",", "\n", "out_size", "=", "self", ".", "out_size", ",", "\n", "hidden_sizes", "=", "self", ".", "hidden_sizes", ",", "\n", "normalize_input", "=", "self", ".", "normalize_input", ",", "\n", "normalize_output", "=", "self", ".", "normalize_output", ",", "\n", "nonlinearity", "=", "nonlinearity", ",", "\n", "last_wscale", "=", "self", ".", "last_wscale", ",", "\n", ")", "\n", "batch_size", "=", "7", "\n", "x", "=", "np", ".", "random", ".", "rand", "(", "batch_size", ",", "self", ".", "in_size", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", "\n", "if", "gpu", ">=", "0", ":", "\n", "            ", "assertions", ".", "assertTrue", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", ")", "\n", "mlp", "=", "mlp", ".", "to", "(", "device", ")", "\n", "x", "=", "x", ".", "cuda", "(", ")", "\n", "", "y", "=", "mlp", "(", "x", ")", "\n", "assertions", ".", "assertEqual", "(", "y", ".", "shape", ",", "(", "batch_size", ",", "self", ".", "out_size", ")", ")", "\n", "assertions", ".", "assertEqual", "(", "y", ".", "device", ",", "x", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_mlp_bn.TestMLPBN.test_call_cpu": [[62, 64], ["test_mlp_bn.TestMLPBN._test_call"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_mlp_bn.TestMLPBN._test_call"], ["", "def", "test_call_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_call", "(", "gpu", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_mlp_bn.TestMLPBN.test_call_gpu": [[65, 68], ["test_mlp_bn.TestMLPBN._test_call"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_mlp_bn.TestMLPBN._test_call"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_call_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_call", "(", "gpu", "=", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_chain.TestToFactorizedNoisy.test_modulelist": [[14, 40], ["torch.nn.ModuleList", "test_noisy_chain.TestToFactorizedNoisy.assertEqual", "pfrl.nn.to_factorized_noisy", "test_noisy_chain.TestToFactorizedNoisy.assertEqual", "torch.as_tensor", "layer.sum().backward", "torch.nn.ModuleList.parameters", "test_noisy_chain.names_of_parameters", "test_noisy_chain.names_of_parameters", "numpy.ones", "layer", "test_noisy_chain.TestToFactorizedNoisy.assertIsNotNone", "torch.nn.Linear", "torch.nn.Linear", "layer.sum"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.noisy_chain.to_factorized_noisy", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_chain.names_of_parameters", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_chain.names_of_parameters", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["    ", "def", "test_modulelist", "(", "self", ")", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "torch", ".", "nn", ".", "Linear", "(", "1", ",", "3", ")", ",", "torch", ".", "nn", ".", "Linear", "(", "3", ",", "4", ")", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "names_of_parameters", "(", "model", ")", ",", "{", "\"0.weight\"", ",", "\"0.bias\"", ",", "\"1.weight\"", ",", "\"1.bias\"", "}", "\n", ")", "\n", "to_factorized_noisy", "(", "model", ")", "\n", "self", ".", "assertEqual", "(", "\n", "names_of_parameters", "(", "model", ")", ",", "\n", "{", "\n", "\"0.mu.bias\"", ",", "\n", "\"0.mu.weight\"", ",", "\n", "\"0.sigma.bias\"", ",", "\n", "\"0.sigma.weight\"", ",", "\n", "\"1.mu.bias\"", ",", "\n", "\"1.mu.weight\"", ",", "\n", "\"1.sigma.bias\"", ",", "\n", "\"1.sigma.weight\"", ",", "\n", "}", ",", "\n", ")", "\n", "x", "=", "torch", ".", "as_tensor", "(", "numpy", ".", "ones", "(", "(", "2", ",", "1", ")", ",", "numpy", ".", "float32", ")", ")", "\n", "for", "layer", "in", "model", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "x", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "self", ".", "assertIsNotNone", "(", "p", ".", "grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_chain.TestToFactorizedNoisy.test_sequential": [[41, 65], ["torch.nn.Sequential", "test_noisy_chain.TestToFactorizedNoisy.assertEqual", "pfrl.nn.to_factorized_noisy", "test_noisy_chain.TestToFactorizedNoisy.assertEqual", "torch.nn.Sequential.", "torch.nn.Sequential.sum().backward", "torch.nn.Sequential.parameters", "torch.nn.Linear", "torch.nn.Linear", "test_noisy_chain.names_of_parameters", "test_noisy_chain.names_of_parameters", "torch.as_tensor", "test_noisy_chain.TestToFactorizedNoisy.assertIsNotNone", "numpy.ones", "torch.nn.Sequential.sum"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.noisy_chain.to_factorized_noisy", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_chain.names_of_parameters", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_chain.names_of_parameters", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "", "def", "test_sequential", "(", "self", ")", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "1", ",", "3", ")", ",", "torch", ".", "nn", ".", "Linear", "(", "3", ",", "4", ")", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "names_of_parameters", "(", "model", ")", ",", "{", "\"0.weight\"", ",", "\"0.bias\"", ",", "\"1.weight\"", ",", "\"1.bias\"", "}", "\n", ")", "\n", "to_factorized_noisy", "(", "model", ")", "\n", "self", ".", "assertEqual", "(", "\n", "names_of_parameters", "(", "model", ")", ",", "\n", "{", "\n", "\"0.mu.bias\"", ",", "\n", "\"0.mu.weight\"", ",", "\n", "\"0.sigma.bias\"", ",", "\n", "\"0.sigma.weight\"", ",", "\n", "\"1.mu.bias\"", ",", "\n", "\"1.mu.weight\"", ",", "\n", "\"1.sigma.bias\"", ",", "\n", "\"1.sigma.weight\"", ",", "\n", "}", ",", "\n", ")", "\n", "y", "=", "model", "(", "torch", ".", "as_tensor", "(", "numpy", ".", "ones", "(", "(", "2", ",", "1", ")", ",", "numpy", ".", "float32", ")", ")", ")", "\n", "y", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "self", ".", "assertIsNotNone", "(", "p", ".", "grad", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_noisy_chain.names_of_parameters": [[9, 11], ["set", "module.named_parameters"], "function", ["None"], ["def", "names_of_parameters", "(", "module", ")", ":", "\n", "    ", "return", "set", "(", "[", "name", "for", "name", ",", "tensor", "in", "module", ".", "named_parameters", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn_tests.test_branched.test_branched": [[9, 28], ["pytest.mark.parametrize", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sequential", "pfrl.nn.Branched", "torch.zeros", "pfrl.nn.Branched.", "isinstance", "nn.Linear.", "nn.Linear.", "nn.Sequential.", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "torch.nn.Linear", "torch.nn.Tanh", "len"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"batch_size\"", ",", "[", "1", ",", "2", "]", ")", "\n", "def", "test_branched", "(", "batch_size", ")", ":", "\n", "    ", "link1", "=", "nn", ".", "Linear", "(", "2", ",", "3", ")", "\n", "link2", "=", "nn", ".", "Linear", "(", "2", ",", "5", ")", "\n", "link3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2", ",", "7", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "plink", "=", "Branched", "(", "link1", ",", "link2", ",", "link3", ")", "\n", "x", "=", "torch", ".", "zeros", "(", "batch_size", ",", "2", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "pout", "=", "plink", "(", "x", ")", "\n", "assert", "isinstance", "(", "pout", ",", "tuple", ")", "\n", "assert", "len", "(", "pout", ")", "==", "3", "\n", "out1", "=", "link1", "(", "x", ")", "\n", "out2", "=", "link2", "(", "x", ")", "\n", "out3", "=", "link3", "(", "x", ")", "\n", "torch_assert_allclose", "(", "pout", "[", "0", "]", ",", "out1", ")", "\n", "torch_assert_allclose", "(", "pout", "[", "1", "]", ",", "out2", ")", "\n", "torch_assert_allclose", "(", "pout", "[", "2", "]", ",", "out3", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs_tests.test_vector_envs.TestSerialVectorEnv.setUp": [[15, 34], ["pytest.fixture", "pfrl.envs.SerialVectorEnv", "gym.make", "pfrl.envs.MultiprocessVectorEnv", "range", "gym.make", "range", "gym.make", "range"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "num_envs", ",", "env_id", ",", "random_seed_offset", ",", "vector_env_to_test", ")", ":", "\n", "        ", "self", ".", "num_envs", "=", "num_envs", "\n", "self", ".", "env_id", "=", "env_id", "\n", "self", ".", "random_seed_offset", "=", "random_seed_offset", "\n", "self", ".", "vector_env_to_test", "=", "vector_env_to_test", "\n", "# Init VectorEnv to test", "\n", "if", "self", ".", "vector_env_to_test", "==", "\"SerialVectorEnv\"", ":", "\n", "            ", "self", ".", "vec_env", "=", "pfrl", ".", "envs", ".", "SerialVectorEnv", "(", "\n", "[", "gym", ".", "make", "(", "self", ".", "env_id", ")", "for", "_", "in", "range", "(", "self", ".", "num_envs", ")", "]", "\n", ")", "\n", "", "elif", "self", ".", "vector_env_to_test", "==", "\"MultiprocessVectorEnv\"", ":", "\n", "            ", "self", ".", "vec_env", "=", "pfrl", ".", "envs", ".", "MultiprocessVectorEnv", "(", "\n", "[", "(", "lambda", ":", "gym", ".", "make", "(", "self", ".", "env_id", ")", ")", "for", "_", "in", "range", "(", "self", ".", "num_envs", ")", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "# Init envs to compare against", "\n", "", "self", ".", "envs", "=", "[", "gym", ".", "make", "(", "self", ".", "env_id", ")", "for", "_", "in", "range", "(", "self", ".", "num_envs", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs_tests.test_vector_envs.TestSerialVectorEnv.teardown_method": [[35, 38], ["None"], "methods", ["None"], ["", "def", "teardown_method", "(", "self", ")", ":", "\n", "# Delete so that all the subprocesses are joined", "\n", "        ", "del", "self", ".", "vec_env", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs_tests.test_vector_envs.TestSerialVectorEnv.test_num_envs": [[39, 41], ["None"], "methods", ["None"], ["", "def", "test_num_envs", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "vec_env", ".", "num_envs", "==", "self", ".", "num_envs", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs_tests.test_vector_envs.TestSerialVectorEnv.test_action_space": [[42, 44], ["None"], "methods", ["None"], ["", "def", "test_action_space", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "vec_env", ".", "action_space", "==", "self", ".", "envs", "[", "0", "]", ".", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs_tests.test_vector_envs.TestSerialVectorEnv.test_observation_space": [[45, 47], ["None"], "methods", ["None"], ["", "def", "test_observation_space", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "vec_env", ".", "observation_space", "==", "self", ".", "envs", "[", "0", "]", ".", "observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.envs_tests.test_vector_envs.TestSerialVectorEnv.test_seed_reset_and_step": [[48, 85], ["test_vector_envs.TestSerialVectorEnv.vec_env.seed", "zip", "test_vector_envs.TestSerialVectorEnv.vec_env.reset", "numpy.testing.assert_allclose", "zip", "test_vector_envs.TestSerialVectorEnv.vec_env.step", "numpy.testing.assert_allclose", "numpy.ones", "test_vector_envs.TestSerialVectorEnv.vec_env.reset", "numpy.testing.assert_allclose", "numpy.zeros", "test_vector_envs.TestSerialVectorEnv.vec_env.reset", "list", "range", "numpy.testing.assert_allclose", "env.seed", "env.reset", "env.action_space.sample", "range", "test_vector_envs.TestSerialVectorEnv.envs[].reset", "env.step", "zip"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step"], ["", "def", "test_seed_reset_and_step", "(", "self", ")", ":", "\n", "# seed", "\n", "        ", "seeds", "=", "[", "self", ".", "random_seed_offset", "+", "i", "for", "i", "in", "range", "(", "self", ".", "num_envs", ")", "]", "\n", "self", ".", "vec_env", ".", "seed", "(", "seeds", ")", "\n", "for", "env", ",", "seed", "in", "zip", "(", "self", ".", "envs", ",", "seeds", ")", ":", "\n", "            ", "env", ".", "seed", "(", "seed", ")", "\n", "\n", "# reset", "\n", "", "obss", "=", "self", ".", "vec_env", ".", "reset", "(", ")", "\n", "real_obss", "=", "[", "env", ".", "reset", "(", ")", "for", "env", "in", "self", ".", "envs", "]", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "obss", ",", "real_obss", ")", "\n", "\n", "# step", "\n", "actions", "=", "[", "env", ".", "action_space", ".", "sample", "(", ")", "for", "env", "in", "self", ".", "envs", "]", "\n", "real_obss", ",", "real_rewards", ",", "real_dones", ",", "real_infos", "=", "zip", "(", "\n", "*", "[", "env", ".", "step", "(", "action", ")", "for", "env", ",", "action", "in", "zip", "(", "self", ".", "envs", ",", "actions", ")", "]", "\n", ")", "\n", "obss", ",", "rewards", ",", "dones", ",", "infos", "=", "self", ".", "vec_env", ".", "step", "(", "actions", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "obss", ",", "real_obss", ")", "\n", "assert", "rewards", "==", "real_rewards", "\n", "assert", "dones", "==", "real_dones", "\n", "assert", "infos", "==", "real_infos", "\n", "\n", "# reset with full mask should have no effect", "\n", "mask", "=", "np", ".", "ones", "(", "self", ".", "num_envs", ")", "\n", "obss", "=", "self", ".", "vec_env", ".", "reset", "(", "mask", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "obss", ",", "real_obss", ")", "\n", "\n", "# reset with partial mask", "\n", "mask", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ")", "\n", "mask", "[", "-", "1", "]", "=", "1", "\n", "obss", "=", "self", ".", "vec_env", ".", "reset", "(", "mask", ")", "\n", "real_obss", "=", "list", "(", "real_obss", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_envs", ")", ":", "\n", "            ", "if", "not", "mask", "[", "i", "]", ":", "\n", "                ", "real_obss", "[", "i", "]", "=", "self", ".", "envs", "[", "i", "]", ".", "reset", "(", ")", "\n", "", "", "np", ".", "testing", ".", "assert_allclose", "(", "obss", ",", "real_obss", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dpp.TestDPPOnDiscreteABC.setUp": [[14, 17], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "dpp_type", ")", ":", "\n", "        ", "self", ".", "dpp_type", "=", "dpp_type", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dpp.TestDPPOnDiscreteABC.make_dqn_agent": [[18, 29], ["test_dpp.parse_dpp_agent", "parse_dpp_agent."], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dpp.parse_dpp_agent"], ["", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "agent_class", "=", "parse_dpp_agent", "(", "self", ".", "dpp_type", ")", "\n", "return", "agent_class", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dpp.TestDPPOnContinuousABC.setUp": [[35, 38], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "dpp_type", ")", ":", "\n", "        ", "self", ".", "dpp_type", "=", "dpp_type", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dpp.TestDPPOnContinuousABC.make_dqn_agent": [[39, 50], ["test_dpp.parse_dpp_agent", "parse_dpp_agent."], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dpp.parse_dpp_agent"], ["", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "agent_class", "=", "parse_dpp_agent", "(", "self", ".", "dpp_type", ")", "\n", "return", "agent_class", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dpp.TestDPPOnDiscretePOABC.setUp": [[55, 58], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "dpp_type", ")", ":", "\n", "        ", "self", ".", "dpp_type", "=", "dpp_type", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dpp.TestDPPOnDiscretePOABC.make_dqn_agent": [[59, 71], ["test_dpp.parse_dpp_agent", "parse_dpp_agent."], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dpp.parse_dpp_agent"], ["", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "agent_class", "=", "parse_dpp_agent", "(", "self", ".", "dpp_type", ")", "\n", "return", "agent_class", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", "recurrent", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dpp.parse_dpp_agent": [[8, 10], ["None"], "function", ["None"], ["def", "parse_dpp_agent", "(", "dpp_type", ")", ":", "\n", "    ", "return", "{", "\"DPP\"", ":", "DPP", ",", "\"DPPL\"", ":", "DPPL", ",", "\"DPPGreedy\"", ":", "DPPGreedy", "}", "[", "dpp_type", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_ddpg._TestDDPGOnABC.make_agent": [[14, 31], ["basetest_ddpg._TestDDPGOnABC.make_model", "torch.optim.Adam", "torch.optim.Adam", "basetest_ddpg._TestDDPGOnABC.make_explorer", "basetest_ddpg._TestDDPGOnABC.make_replay_buffer", "basetest_ddpg._TestDDPGOnABC.make_ddpg_agent", "policy.parameters", "q_func.parameters"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C.make_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNOnABC.make_explorer", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestNStepDQNOnABC.make_replay_buffer", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ddpg.TestDDPGOnContinuousABC.make_ddpg_agent"], ["    ", "def", "make_agent", "(", "self", ",", "env", ",", "gpu", ")", ":", "\n", "        ", "policy", ",", "q_func", "=", "self", ".", "make_model", "(", "env", ")", "\n", "\n", "actor_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "policy", ".", "parameters", "(", ")", ",", "lr", "=", "1e-4", ")", "\n", "critic_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "q_func", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ")", "\n", "\n", "explorer", "=", "self", ".", "make_explorer", "(", "env", ")", "\n", "rbuf", "=", "self", ".", "make_replay_buffer", "(", "env", ")", "\n", "return", "self", ".", "make_ddpg_agent", "(", "\n", "env", "=", "env", ",", "\n", "policy", "=", "policy", ",", "\n", "q_func", "=", "q_func", ",", "\n", "actor_opt", "=", "actor_opt", ",", "\n", "critic_opt", "=", "critic_opt", ",", "\n", "explorer", "=", "explorer", ",", "\n", "rbuf", "=", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_ddpg._TestDDPGOnABC.make_ddpg_agent": [[33, 45], ["NotImplementedError"], "methods", ["None"], ["", "def", "make_ddpg_agent", "(", "\n", "self", ",", "\n", "env", ",", "\n", "policy", ",", "\n", "q_func", ",", "\n", "actor_opt", ",", "\n", "critic_opt", ",", "\n", "explorer", ",", "\n", "rbuf", ",", "\n", "gpu", ",", "\n", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_ddpg._TestDDPGOnABC.make_explorer": [[46, 55], ["pfrl.explorers.epsilon_greedy.LinearDecayEpsilonGreedy", "env.action_space.sample", "isinstance", "env.action_space.sample.astype"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "def", "make_explorer", "(", "self", ",", "env", ")", ":", "\n", "        ", "def", "random_action_func", "(", ")", ":", "\n", "            ", "a", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "if", "isinstance", "(", "a", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "return", "a", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                ", "return", "a", "\n", "\n", "", "", "return", "LinearDecayEpsilonGreedy", "(", "1.0", ",", "0.2", ",", "1000", ",", "random_action_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_ddpg._TestDDPGOnABC.make_replay_buffer": [[56, 58], ["pfrl.replay_buffers.ReplayBuffer"], "methods", ["None"], ["", "def", "make_replay_buffer", "(", "self", ",", "env", ")", ":", "\n", "        ", "return", "replay_buffers", ".", "ReplayBuffer", "(", "10", "**", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_ddpg._TestDDPGOnContinuousPOABC.make_model": [[61, 82], ["pfrl.nn.RecurrentSequential", "pfrl.nn.RecurrentSequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.LSTM", "torch.nn.Linear", "pfrl.nn.BoundByTanh", "pfrl.policies.DeterministicHead", "pfrl.nn.ConcatObsAndAction", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.LSTM", "torch.nn.Linear"], "methods", ["None"], ["    ", "def", "make_model", "(", "self", ",", "env", ")", ":", "\n", "        ", "obs_size", "=", "env", ".", "observation_space", ".", "low", ".", "size", "\n", "action_size", "=", "env", ".", "action_space", ".", "low", ".", "size", "\n", "hidden_size", "=", "50", "\n", "# Model must be recurrent", "\n", "policy", "=", "RecurrentSequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "LSTM", "(", "input_size", "=", "hidden_size", ",", "hidden_size", "=", "hidden_size", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "action_size", ")", ",", "\n", "BoundByTanh", "(", "low", "=", "env", ".", "action_space", ".", "low", ",", "high", "=", "env", ".", "action_space", ".", "high", ")", ",", "\n", "DeterministicHead", "(", ")", ",", "\n", ")", "\n", "q_func", "=", "RecurrentSequential", "(", "\n", "ConcatObsAndAction", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "obs_size", "+", "action_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "LSTM", "(", "input_size", "=", "hidden_size", ",", "hidden_size", "=", "hidden_size", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ",", "\n", ")", "\n", "return", "policy", ",", "q_func", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_ddpg._TestDDPGOnContinuousPOABC.make_env_and_successful_return": [[83, 85], ["pfrl.envs.abc.ABC"], "methods", ["None"], ["", "def", "make_env_and_successful_return", "(", "self", ",", "test", ")", ":", "\n", "        ", "return", "ABC", "(", "discrete", "=", "False", ",", "partially_observable", "=", "True", ",", "deterministic", "=", "test", ")", ",", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_ddpg._TestDDPGOnContinuousPOABC.make_replay_buffer": [[86, 88], ["pfrl.replay_buffers.EpisodicReplayBuffer"], "methods", ["None"], ["", "def", "make_replay_buffer", "(", "self", ",", "env", ")", ":", "\n", "        ", "return", "replay_buffers", ".", "EpisodicReplayBuffer", "(", "10", "**", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_ddpg._TestDDPGOnContinuousABC.make_model": [[91, 109], ["torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "pfrl.nn.BoundByTanh", "pfrl.policies.DeterministicHead", "pfrl.nn.ConcatObsAndAction", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["None"], ["    ", "def", "make_model", "(", "self", ",", "env", ")", ":", "\n", "        ", "obs_size", "=", "env", ".", "observation_space", ".", "low", ".", "size", "\n", "action_size", "=", "env", ".", "action_space", ".", "low", ".", "size", "\n", "hidden_size", "=", "50", "\n", "policy", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "action_size", ")", ",", "\n", "BoundByTanh", "(", "low", "=", "env", ".", "action_space", ".", "low", ",", "high", "=", "env", ".", "action_space", ".", "high", ")", ",", "\n", "DeterministicHead", "(", ")", ",", "\n", ")", "\n", "q_func", "=", "nn", ".", "Sequential", "(", "\n", "ConcatObsAndAction", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "obs_size", "+", "action_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ",", "\n", ")", "\n", "return", "policy", ",", "q_func", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_ddpg._TestDDPGOnContinuousABC.make_env_and_successful_return": [[110, 112], ["pfrl.envs.abc.ABC"], "methods", ["None"], ["", "def", "make_env_and_successful_return", "(", "self", ",", "test", ")", ":", "\n", "        ", "return", "ABC", "(", "discrete", "=", "False", ",", "deterministic", "=", "test", ")", ",", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer.TestDegenerateDistribution.setUp": [[32, 67], ["pytest.fixture", "torch.rand", "pfrl.action_value.SingleActionValue", "torch.distributions.Independent", "torch.distributions.Independent", "torch.distributions.Normal", "torch.distributions.Normal", "torch.as_tensor", "pfrl.action_value.DiscreteActionValue", "torch.as_tensor", "torch.distributions.Categorical", "torch.as_tensor", "torch.distributions.Categorical", "torch.nn.functional.linear", "torch.rand", "torch.full", "torch.rand", "torch.full"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "distrib_type", ",", "pi_deg", ",", "mu_deg", ",", "truncation_threshold", ")", ":", "\n", "        ", "self", ".", "distrib_type", "=", "distrib_type", "\n", "self", ".", "pi_deg", "=", "pi_deg", "\n", "self", ".", "mu_deg", "=", "mu_deg", "\n", "self", ".", "truncation_threshold", "=", "truncation_threshold", "\n", "if", "self", ".", "distrib_type", "==", "\"Gaussian\"", ":", "\n", "            ", "action_size", "=", "2", "\n", "W", "=", "torch", ".", "rand", "(", "1", ",", "action_size", ")", "\n", "self", ".", "action_value", "=", "pfrl", ".", "action_value", ".", "SingleActionValue", "(", "\n", "evaluator", "=", "lambda", "x", ":", "torch", ".", "nn", ".", "functional", ".", "linear", "(", "x", ",", "W", ")", "\n", ")", "\n", "nondeg_distrib", "=", "torch", ".", "distributions", ".", "Independent", "(", "\n", "torch", ".", "distributions", ".", "Normal", "(", "\n", "loc", "=", "torch", ".", "rand", "(", "1", ",", "action_size", ")", ",", "\n", "scale", "=", "torch", ".", "full", "(", "(", "1", ",", "action_size", ")", ",", "1", ")", ",", "\n", ")", ",", "\n", "1", ",", "\n", ")", "\n", "deg_distrib", "=", "torch", ".", "distributions", ".", "Independent", "(", "\n", "torch", ".", "distributions", ".", "Normal", "(", "\n", "loc", "=", "torch", ".", "rand", "(", "1", ",", "action_size", ")", ",", "\n", "scale", "=", "torch", ".", "full", "(", "(", "1", ",", "action_size", ")", ",", "1e-10", ")", ",", "\n", ")", ",", "\n", "1", ",", "\n", ")", "\n", "", "elif", "self", ".", "distrib_type", "==", "\"Softmax\"", ":", "\n", "            ", "q_values", "=", "torch", ".", "as_tensor", "(", "[", "[", "1", ",", "3", "]", "]", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "self", ".", "action_value", "=", "pfrl", ".", "action_value", ".", "DiscreteActionValue", "(", "q_values", ")", "\n", "nondeg_logits", "=", "torch", ".", "as_tensor", "(", "[", "[", "0", ",", "0", "]", "]", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "nondeg_distrib", "=", "torch", ".", "distributions", ".", "Categorical", "(", "logits", "=", "nondeg_logits", ")", "\n", "deg_logits", "=", "torch", ".", "as_tensor", "(", "[", "[", "1e10", ",", "1e-10", "]", "]", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "deg_distrib", "=", "torch", ".", "distributions", ".", "Categorical", "(", "deg_logits", ")", "\n", "", "self", ".", "pi", "=", "deg_distrib", "if", "self", ".", "pi_deg", "else", "nondeg_distrib", "\n", "self", ".", "mu", "=", "deg_distrib", "if", "self", ".", "mu_deg", "else", "nondeg_distrib", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer.TestDegenerateDistribution.test_importance": [[68, 74], ["test_acer.TestDegenerateDistribution.mu.sample", "pfrl.agents.acer.compute_importance", "print", "numpy.isscalar", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.compute_importance"], ["", "def", "test_importance", "(", "self", ")", ":", "\n", "        ", "action", "=", "self", ".", "mu", ".", "sample", "(", ")", "\n", "pimu", "=", "acer", ".", "compute_importance", "(", "self", ".", "pi", ",", "self", ".", "mu", ",", "action", ")", "\n", "print", "(", "\"pi/mu\"", ",", "pimu", ")", "\n", "assert", "np", ".", "isscalar", "(", "pimu", ")", "\n", "assert", "not", "np", ".", "isnan", "(", "pimu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer.TestDegenerateDistribution.test_full_importance": [[75, 82], ["pfrl.agents.acer.compute_full_importance", "print", "isinstance", "pytest.skip", "numpy.isnan().any", "numpy.isnan", "pfrl.agents.acer.compute_full_importance.numpy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.compute_full_importance"], ["", "def", "test_full_importance", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "distrib_type", "==", "\"Gaussian\"", ":", "\n", "            ", "pytest", ".", "skip", "(", ")", "\n", "", "pimu", "=", "acer", ".", "compute_full_importance", "(", "self", ".", "pi", ",", "self", ".", "mu", ")", "\n", "print", "(", "\"pi/mu\"", ",", "pimu", ")", "\n", "assert", "isinstance", "(", "pimu", ",", "torch", ".", "Tensor", ")", "\n", "assert", "not", "np", ".", "isnan", "(", "pimu", ".", "numpy", "(", ")", ")", ".", "any", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer.TestDegenerateDistribution.test_full_correction_term": [[83, 95], ["pfrl.agents.acer.compute_policy_gradient_full_correction", "print", "isinstance", "pytest.skip", "pytest.skip", "pfrl.agents.acer.compute_policy_gradient_full_correction.numel", "numpy.isnan", "float"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.compute_policy_gradient_full_correction"], ["", "def", "test_full_correction_term", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "distrib_type", "==", "\"Gaussian\"", ":", "\n", "            ", "pytest", ".", "skip", "(", ")", "\n", "", "if", "self", ".", "truncation_threshold", "is", "None", ":", "\n", "            ", "pytest", ".", "skip", "(", ")", "\n", "", "correction_term", "=", "acer", ".", "compute_policy_gradient_full_correction", "(", "\n", "self", ".", "pi", ",", "self", ".", "mu", ",", "self", ".", "action_value", ",", "0", ",", "self", ".", "truncation_threshold", "\n", ")", "\n", "print", "(", "\"correction_term\"", ",", "correction_term", ")", "\n", "assert", "isinstance", "(", "correction_term", ",", "torch", ".", "Tensor", ")", "\n", "assert", "correction_term", ".", "numel", "(", ")", "==", "1", "\n", "assert", "not", "np", ".", "isnan", "(", "float", "(", "correction_term", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer.TestDegenerateDistribution.test_sample_correction_term": [[96, 106], ["pfrl.agents.acer.compute_policy_gradient_sample_correction", "print", "isinstance", "pfrl.agents.acer.compute_policy_gradient_sample_correction.numel", "numpy.isnan", "float"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.compute_policy_gradient_sample_correction"], ["", "def", "test_sample_correction_term", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "truncation_threshold", "is", "None", ":", "\n", "            ", "return", "\n", "", "correction_term", "=", "acer", ".", "compute_policy_gradient_sample_correction", "(", "\n", "self", ".", "pi", ",", "self", ".", "mu", ",", "self", ".", "action_value", ",", "0", ",", "self", ".", "truncation_threshold", "\n", ")", "\n", "print", "(", "\"correction_term\"", ",", "correction_term", ")", "\n", "assert", "isinstance", "(", "correction_term", ",", "torch", ".", "Tensor", ")", "\n", "assert", "correction_term", ".", "numel", "(", ")", "==", "1", "\n", "assert", "not", "np", ".", "isnan", "(", "float", "(", "correction_term", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer.TestDegenerateDistribution.test_policy_gradient": [[107, 115], ["test_acer.TestDegenerateDistribution.mu.sample", "pfrl.agents.acer.compute_policy_gradient_loss", "isinstance", "print", "numpy.isnan().any", "numpy.isnan", "pfrl.agents.acer.compute_policy_gradient_loss.numpy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.compute_policy_gradient_loss"], ["", "def", "test_policy_gradient", "(", "self", ")", ":", "\n", "        ", "action", "=", "self", ".", "mu", ".", "sample", "(", ")", "\n", "pg", "=", "acer", ".", "compute_policy_gradient_loss", "(", "\n", "action", ",", "1", ",", "self", ".", "pi", ",", "self", ".", "mu", ",", "self", ".", "action_value", ",", "0", ",", "self", ".", "truncation_threshold", "\n", ")", "\n", "assert", "isinstance", "(", "pg", ",", "torch", ".", "Tensor", ")", "\n", "print", "(", "\"pg\"", ",", "pg", ")", "\n", "assert", "not", "np", ".", "isnan", "(", "pg", ".", "numpy", "(", ")", ")", ".", "any", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer._TestACER.setUp": [[322, 326], ["pytest.fixture", "tempfile.mkdtemp", "logging.basicConfig"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "outdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "DEBUG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer._TestACER.test_abc": [[327, 332], ["test_acer._TestACER._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "async_", "\n", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_abc", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "\n", "self", ".", "t_max", ",", "self", ".", "use_lstm", ",", "discrete", "=", "self", ".", "discrete", ",", "episodic", "=", "self", ".", "episodic", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer._TestACER.test_abc_fast": [[334, 343], ["test_acer._TestACER._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "async_", "\n", "def", "test_abc_fast", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "\n", "self", ".", "t_max", ",", "\n", "self", ".", "use_lstm", ",", "\n", "discrete", "=", "self", ".", "discrete", ",", "\n", "episodic", "=", "self", ".", "episodic", ",", "\n", "steps", "=", "10", ",", "\n", "require_success", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer._TestACER._test_abc": [[345, 475], ["test_acer._TestACER._test_abc.make_env"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["", "def", "_test_abc", "(", "\n", "self", ",", "\n", "t_max", ",", "\n", "use_lstm", ",", "\n", "discrete", "=", "True", ",", "\n", "episodic", "=", "True", ",", "\n", "steps", "=", "100000", ",", "\n", "require_success", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "nproc", "=", "8", "\n", "\n", "def", "make_env", "(", "process_idx", ",", "test", ")", ":", "\n", "            ", "size", "=", "2", "\n", "return", "ABC", "(", "\n", "size", "=", "size", ",", "\n", "discrete", "=", "discrete", ",", "\n", "episodic", "=", "episodic", "or", "test", ",", "\n", "partially_observable", "=", "self", ".", "use_lstm", ",", "\n", "deterministic", "=", "test", ",", "\n", ")", "\n", "\n", "", "sample_env", "=", "make_env", "(", "0", ",", "False", ")", "\n", "action_space", "=", "sample_env", ".", "action_space", "\n", "obs_space", "=", "sample_env", ".", "observation_space", "\n", "\n", "replay_buffer", "=", "EpisodicReplayBuffer", "(", "10", "**", "4", ")", "\n", "obs_size", "=", "obs_space", ".", "low", ".", "size", "\n", "hidden_size", "=", "20", "\n", "if", "discrete", ":", "\n", "            ", "n_actions", "=", "action_space", ".", "n", "\n", "head", "=", "acer", ".", "ACERDiscreteActionHead", "(", "\n", "pi", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "n_actions", ")", ",", "\n", "SoftmaxCategoricalHead", "(", ")", ",", "\n", ")", ",", "\n", "q", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "n_actions", ")", ",", "\n", "DiscreteActionValueHead", "(", ")", ",", "\n", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "action_size", "=", "action_space", ".", "low", ".", "size", "\n", "head", "=", "acer", ".", "ACERContinuousActionHead", "(", "\n", "pi", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "action_size", "*", "2", ")", ",", "\n", "GaussianHeadWithDiagonalCovariance", "(", ")", ",", "\n", ")", ",", "\n", "v", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ",", "\n", ")", ",", "\n", "adv", "=", "nn", ".", "Sequential", "(", "\n", "ConcatObsAndAction", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", "+", "action_size", ",", "1", ")", ",", "\n", ")", ",", "\n", ")", "\n", "", "if", "use_lstm", ":", "\n", "            ", "model", "=", "pfrl", ".", "nn", ".", "RecurrentSequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "LSTM", "(", "num_layers", "=", "1", ",", "input_size", "=", "hidden_size", ",", "hidden_size", "=", "hidden_size", ")", ",", "\n", "head", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "head", ",", "\n", ")", "\n", "", "eps", "=", "1e-8", "\n", "opt", "=", "pfrl", ".", "optimizers", ".", "SharedRMSpropEpsInsideSqrt", "(", "\n", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ",", "eps", "=", "eps", ",", "alpha", "=", "0.99", "\n", ")", "\n", "gamma", "=", "0.5", "\n", "beta", "=", "1e-5", "\n", "if", "self", ".", "n_times_replay", "==", "0", "and", "self", ".", "disable_online_update", ":", "\n", "# At least one of them must be enabled", "\n", "            ", "pytest", ".", "skip", "(", ")", "\n", "", "agent", "=", "acer", ".", "ACER", "(", "\n", "model", ",", "\n", "opt", ",", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", "t_max", "=", "t_max", ",", "\n", "gamma", "=", "gamma", ",", "\n", "beta", "=", "beta", ",", "\n", "n_times_replay", "=", "self", ".", "n_times_replay", ",", "\n", "act_deterministically", "=", "True", ",", "\n", "disable_online_update", "=", "self", ".", "disable_online_update", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "use_trust_region", "=", "self", ".", "use_trust_region", ",", "\n", "recurrent", "=", "use_lstm", ",", "\n", ")", "\n", "\n", "max_episode_len", "=", "None", "if", "episodic", "else", "2", "\n", "\n", "with", "warnings", ".", "catch_warnings", "(", "record", "=", "True", ")", "as", "warns", ":", "\n", "            ", "train_agent_async", "(", "\n", "outdir", "=", "self", ".", "outdir", ",", "\n", "processes", "=", "nproc", ",", "\n", "make_env", "=", "make_env", ",", "\n", "agent", "=", "agent", ",", "\n", "steps", "=", "steps", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", "eval_interval", "=", "500", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "5", ",", "\n", "successful_score", "=", "1", ",", "\n", ")", "\n", "assert", "len", "(", "warns", ")", "==", "0", ",", "warns", "[", "0", "]", "\n", "\n", "# The agent returned by train_agent_async is not guaranteed to be", "\n", "# successful because parameters could be modified by other processes", "\n", "# after success. Thus here the successful model is loaded explicitly.", "\n", "", "if", "require_success", ":", "\n", "            ", "agent", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "outdir", ",", "\"successful\"", ")", ")", "\n", "\n", "# Test", "\n", "", "env", "=", "make_env", "(", "0", ",", "True", ")", "\n", "n_test_runs", "=", "5", "\n", "eval_returns", ",", "_", "=", "run_evaluation_episodes", "(", "\n", "env", ",", "\n", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "n_test_runs", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", ")", "\n", "successful_return", "=", "1", "\n", "if", "require_success", ":", "\n", "            ", "n_succeeded", "=", "np", ".", "sum", "(", "np", ".", "asarray", "(", "eval_returns", ")", ">=", "successful_return", ")", "\n", "assert", "n_succeeded", "==", "n_test_runs", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer.TestACERNonRecurrent.set_params": [[484, 501], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "set_params", "(", "\n", "self", ",", "\n", "discrete", ",", "\n", "t_max", ",", "\n", "episodic", ",", "\n", "n_times_replay", ",", "\n", "disable_online_update", ",", "\n", "use_trust_region", ",", "\n", ")", ":", "\n", "        ", "self", ".", "use_lstm", "=", "False", "\n", "self", ".", "discrete", "=", "discrete", "\n", "self", ".", "t_max", "=", "t_max", "\n", "self", ".", "episodic", "=", "episodic", "\n", "self", ".", "n_times_replay", "=", "n_times_replay", "\n", "self", ".", "disable_online_update", "=", "disable_online_update", "\n", "self", ".", "use_trust_region", "=", "use_trust_region", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer.TestACERRecurrent.set_params": [[510, 527], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "set_params", "(", "\n", "self", ",", "\n", "discrete", ",", "\n", "t_max", ",", "\n", "episodic", ",", "\n", "n_times_replay", ",", "\n", "disable_online_update", ",", "\n", "use_trust_region", ",", "\n", ")", ":", "\n", "        ", "self", ".", "use_lstm", "=", "True", "\n", "self", ".", "discrete", "=", "discrete", "\n", "self", ".", "t_max", "=", "t_max", "\n", "self", ".", "episodic", "=", "episodic", "\n", "self", ".", "n_times_replay", "=", "n_times_replay", "\n", "self", ".", "disable_online_update", "=", "disable_online_update", "\n", "self", ".", "use_trust_region", "=", "use_trust_region", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer.extract_gradients_as_single_vector": [[23, 25], ["torch.cat().numpy", "torch.cat", "p.grad.flatten", "mod.parameters"], "function", ["None"], ["def", "extract_gradients_as_single_vector", "(", "mod", ")", ":", "\n", "    ", "return", "torch", ".", "cat", "(", "[", "p", ".", "grad", ".", "flatten", "(", ")", "for", "p", "in", "mod", ".", "parameters", "(", ")", "]", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer.test_bias_correction_gaussian": [[117, 132], ["pytest.mark.parametrize", "torch.nn.Sequential", "torch.nn.Sequential", "torch.rand", "pfrl.action_value.SingleActionValue", "test_acer._test_bias_correction", "torch.nn.Linear", "pfrl.policies.GaussianHeadWithDiagonalCovariance", "torch.nn.Linear", "pfrl.policies.GaussianHeadWithDiagonalCovariance", "torch.nn.functional.linear"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer._test_bias_correction"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"action_size\"", ",", "[", "1", ",", "2", "]", ")", "\n", "def", "test_bias_correction_gaussian", "(", "action_size", ")", ":", "\n", "    ", "base_policy", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "1", ",", "action_size", "*", "2", ")", ",", "\n", "GaussianHeadWithDiagonalCovariance", "(", ")", ",", "\n", ")", "\n", "another_policy", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "1", ",", "action_size", "*", "2", ")", ",", "\n", "GaussianHeadWithDiagonalCovariance", "(", ")", ",", "\n", ")", "\n", "W", "=", "torch", ".", "rand", "(", "1", ",", "action_size", ")", "\n", "action_value", "=", "pfrl", ".", "action_value", ".", "SingleActionValue", "(", "\n", "evaluator", "=", "lambda", "x", ":", "torch", ".", "nn", ".", "functional", ".", "linear", "(", "x", ",", "W", ")", "\n", ")", "\n", "_test_bias_correction", "(", "base_policy", ",", "another_policy", ",", "action_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer.test_bias_correction_softmax": [[134, 147], ["pytest.mark.parametrize", "torch.nn.Sequential", "torch.nn.Sequential", "torch.rand", "pfrl.action_value.DiscreteActionValue", "test_acer._test_bias_correction", "torch.nn.Linear", "pfrl.policies.SoftmaxCategoricalHead", "torch.nn.Linear", "pfrl.policies.SoftmaxCategoricalHead"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer._test_bias_correction"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"n_actions\"", ",", "[", "2", ",", "3", "]", ")", "\n", "def", "test_bias_correction_softmax", "(", "n_actions", ")", ":", "\n", "    ", "base_policy", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "1", ",", "n_actions", ")", ",", "\n", "SoftmaxCategoricalHead", "(", ")", ",", "\n", ")", "\n", "another_policy", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "1", ",", "n_actions", ")", ",", "\n", "SoftmaxCategoricalHead", "(", ")", ",", "\n", ")", "\n", "q_values", "=", "torch", ".", "rand", "(", "1", ",", "n_actions", ")", "\n", "action_value", "=", "pfrl", ".", "action_value", ".", "DiscreteActionValue", "(", "q_values", ")", "\n", "_test_bias_correction", "(", "base_policy", ",", "another_policy", ",", "action_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer._test_bias_correction": [[149, 255], ["torch.full", "base_policy", "another_policy", "numpy.mean", "numpy.var", "print", "print", "print", "numpy.mean", "numpy.var", "print", "print", "print", "numpy.mean", "numpy.var", "print", "print", "print", "print", "test_acer._test_bias_correction.bias_correction_policy_gradients"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["", "def", "_test_bias_correction", "(", "base_policy", ",", "another_policy", ",", "action_value", ")", ":", "\n", "    ", "x", "=", "torch", ".", "full", "(", "(", "1", ",", "1", ")", ",", "1", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "pi", "=", "base_policy", "(", "x", ")", "\n", "mu", "=", "another_policy", "(", "x", ")", "\n", "\n", "def", "evaluate_action", "(", "action", ")", ":", "\n", "        ", "return", "float", "(", "action_value", ".", "evaluate_actions", "(", "action", ")", ")", "\n", "\n", "", "n", "=", "1000", "\n", "\n", "pi_samples", "=", "[", "pi", ".", "sample", "(", ")", "for", "_", "in", "range", "(", "n", ")", "]", "\n", "mu_samples", "=", "[", "mu", ".", "sample", "(", ")", "for", "_", "in", "range", "(", "n", ")", "]", "\n", "\n", "onpolicy_gs", "=", "[", "]", "\n", "for", "sample", "in", "pi_samples", ":", "\n", "        ", "base_policy", ".", "zero_grad", "(", ")", "\n", "loss", "=", "-", "evaluate_action", "(", "sample", ")", "*", "pi", ".", "log_prob", "(", "sample", ")", "\n", "loss", ".", "squeeze", "(", ")", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "onpolicy_gs", ".", "append", "(", "extract_gradients_as_single_vector", "(", "base_policy", ")", ")", "\n", "# on-policy", "\n", "", "onpolicy_gs_mean", "=", "np", ".", "mean", "(", "onpolicy_gs", ",", "axis", "=", "0", ")", "\n", "onpolicy_gs_var", "=", "np", ".", "var", "(", "onpolicy_gs", ",", "axis", "=", "0", ")", "\n", "print", "(", "\"on-policy\"", ")", "\n", "print", "(", "\"g mean\"", ",", "onpolicy_gs_mean", ")", "\n", "print", "(", "\"g var\"", ",", "onpolicy_gs_var", ")", "\n", "\n", "# off-policy without importance sampling", "\n", "offpolicy_gs", "=", "[", "]", "\n", "for", "sample", "in", "mu_samples", ":", "\n", "        ", "base_policy", ".", "zero_grad", "(", ")", "\n", "loss", "=", "-", "evaluate_action", "(", "sample", ")", "*", "pi", ".", "log_prob", "(", "sample", ")", "\n", "loss", ".", "squeeze", "(", ")", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "offpolicy_gs", ".", "append", "(", "extract_gradients_as_single_vector", "(", "base_policy", ")", ")", "\n", "", "offpolicy_gs_mean", "=", "np", ".", "mean", "(", "offpolicy_gs", ",", "axis", "=", "0", ")", "\n", "offpolicy_gs_var", "=", "np", ".", "var", "(", "offpolicy_gs", ",", "axis", "=", "0", ")", "\n", "print", "(", "\"off-policy\"", ")", "\n", "print", "(", "\"g mean\"", ",", "offpolicy_gs_mean", ")", "\n", "print", "(", "\"g var\"", ",", "offpolicy_gs_var", ")", "\n", "\n", "# off-policy with importance sampling", "\n", "is_gs", "=", "[", "]", "\n", "for", "sample", "in", "mu_samples", ":", "\n", "        ", "base_policy", ".", "zero_grad", "(", ")", "\n", "rho", "=", "float", "(", "(", "pi", ".", "log_prob", "(", "sample", ")", "-", "mu", ".", "log_prob", "(", "sample", ")", ")", ".", "exp", "(", ")", ")", "\n", "loss", "=", "-", "rho", "*", "evaluate_action", "(", "sample", ")", "*", "pi", ".", "log_prob", "(", "sample", ")", "\n", "loss", ".", "squeeze", "(", ")", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "is_gs", ".", "append", "(", "extract_gradients_as_single_vector", "(", "base_policy", ")", ")", "\n", "", "is_gs_mean", "=", "np", ".", "mean", "(", "is_gs", ",", "axis", "=", "0", ")", "\n", "is_gs_var", "=", "np", ".", "var", "(", "is_gs", ",", "axis", "=", "0", ")", "\n", "print", "(", "\"importance sampling\"", ")", "\n", "print", "(", "\"g mean\"", ",", "is_gs_mean", ")", "\n", "print", "(", "\"g var\"", ",", "is_gs_var", ")", "\n", "\n", "# off-policy with truncated importance sampling + bias correction", "\n", "def", "bias_correction_policy_gradients", "(", "truncation_threshold", ")", ":", "\n", "        ", "gs", "=", "[", "]", "\n", "for", "sample", "in", "mu_samples", ":", "\n", "            ", "base_policy", ".", "zero_grad", "(", ")", "\n", "loss", "=", "acer", ".", "compute_policy_gradient_loss", "(", "\n", "action", "=", "sample", ",", "\n", "advantage", "=", "evaluate_action", "(", "sample", ")", ",", "\n", "action_distrib", "=", "pi", ",", "\n", "action_distrib_mu", "=", "mu", ",", "\n", "action_value", "=", "action_value", ",", "\n", "v", "=", "0", ",", "\n", "truncation_threshold", "=", "truncation_threshold", ",", "\n", ")", "\n", "loss", ".", "squeeze", "(", ")", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "gs", ".", "append", "(", "extract_gradients_as_single_vector", "(", "base_policy", ")", ")", "\n", "", "return", "gs", "\n", "\n", "# c=0 means on-policy sampling", "\n", "", "print", "(", "\"truncated importance sampling + bias correction c=0\"", ")", "\n", "tis_c0_gs", "=", "bias_correction_policy_gradients", "(", "0", ")", "\n", "tis_c0_gs_mean", "=", "np", ".", "mean", "(", "tis_c0_gs", ",", "axis", "=", "0", ")", "\n", "tis_c0_gs_var", "=", "np", ".", "var", "(", "tis_c0_gs", ",", "axis", "=", "0", ")", "\n", "print", "(", "\"g mean\"", ",", "tis_c0_gs_mean", ")", "\n", "print", "(", "\"g var\"", ",", "tis_c0_gs_var", ")", "\n", "# c=0 must be low-bias compared to naive off-policy sampling", "\n", "assert", "np", ".", "linalg", ".", "norm", "(", "onpolicy_gs_mean", "-", "tis_c0_gs_mean", ")", "<=", "np", ".", "linalg", ".", "norm", "(", "\n", "onpolicy_gs_mean", "-", "offpolicy_gs_mean", "\n", ")", "\n", "\n", "# c=1 means truncated importance sampling with bias correction", "\n", "print", "(", "\"truncated importance sampling + bias correction c=1\"", ")", "\n", "tis_c1_gs", "=", "bias_correction_policy_gradients", "(", "1", ")", "\n", "tis_c1_gs_mean", "=", "np", ".", "mean", "(", "tis_c1_gs", ",", "axis", "=", "0", ")", "\n", "tis_c1_gs_var", "=", "np", ".", "var", "(", "tis_c1_gs", ",", "axis", "=", "0", ")", "\n", "print", "(", "\"g mean\"", ",", "tis_c1_gs_mean", ")", "\n", "print", "(", "\"g var\"", ",", "tis_c1_gs_var", ")", "\n", "# c=1 must be low-variance compared to naive importance sampling", "\n", "assert", "tis_c1_gs_var", ".", "sum", "(", ")", "<=", "is_gs_var", ".", "sum", "(", ")", "\n", "# c=1 must be low-bias compared to naive off-policy sampling", "\n", "assert", "np", ".", "linalg", ".", "norm", "(", "onpolicy_gs_mean", "-", "tis_c1_gs_mean", ")", "<", "np", ".", "linalg", ".", "norm", "(", "\n", "onpolicy_gs_mean", "-", "offpolicy_gs_mean", "\n", ")", "\n", "\n", "# c=inf means importance sampling no truncation", "\n", "print", "(", "\"truncated importance sampling + bias correction c=inf\"", ")", "\n", "tis_cinf_gs", "=", "bias_correction_policy_gradients", "(", "np", ".", "inf", ")", "\n", "tis_cinf_gs_mean", "=", "np", ".", "mean", "(", "tis_cinf_gs", ",", "axis", "=", "0", ")", "\n", "tis_cinf_gs_var", "=", "np", ".", "var", "(", "tis_cinf_gs", ",", "axis", "=", "0", ")", "\n", "print", "(", "\"g mean\"", ",", "tis_cinf_gs_mean", ")", "\n", "print", "(", "\"g var\"", ",", "tis_cinf_gs_var", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "tis_cinf_gs_mean", ",", "is_gs_mean", ",", "rtol", "=", "1e-3", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "tis_cinf_gs_var", ",", "is_gs_var", ",", "rtol", "=", "1e-3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer.test_compute_loss_with_kl_constraint_gaussian": [[257, 264], ["torch.nn.Sequential", "test_acer._test_compute_loss_with_kl_constraint", "torch.nn.Linear", "pfrl.policies.GaussianHeadWithDiagonalCovariance"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer._test_compute_loss_with_kl_constraint"], ["", "def", "test_compute_loss_with_kl_constraint_gaussian", "(", ")", ":", "\n", "    ", "action_size", "=", "3", "\n", "policy", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "1", ",", "action_size", "*", "2", ")", ",", "\n", "GaussianHeadWithDiagonalCovariance", "(", ")", ",", "\n", ")", "\n", "_test_compute_loss_with_kl_constraint", "(", "policy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer.test_compute_loss_with_kl_constraint_softmax": [[266, 273], ["torch.nn.Sequential", "test_acer._test_compute_loss_with_kl_constraint", "torch.nn.Linear", "pfrl.policies.SoftmaxCategoricalHead"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer._test_compute_loss_with_kl_constraint"], ["", "def", "test_compute_loss_with_kl_constraint_softmax", "(", ")", ":", "\n", "    ", "n_actions", "=", "3", "\n", "policy", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "1", ",", "n_actions", ")", ",", "\n", "SoftmaxCategoricalHead", "(", ")", ",", "\n", ")", "\n", "_test_compute_loss_with_kl_constraint", "(", "policy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_acer._test_compute_loss_with_kl_constraint": [[275, 319], ["torch.rand", "test_acer._test_compute_loss_with_kl_constraint.compute_kl_after_update"], "function", ["None"], ["", "def", "_test_compute_loss_with_kl_constraint", "(", "base_policy", ")", ":", "\n", "\n", "# Train a policy with and without KL constraint against the original", "\n", "# distribution to confirm KL constraint works.", "\n", "\n", "    ", "x", "=", "torch", ".", "rand", "(", "1", ",", "1", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Compute KL divergence against the original distribution", "\n", "        ", "base_distrib", "=", "base_policy", "(", "x", ")", "\n", "\n", "", "def", "base_loss_func", "(", "distrib", ")", ":", "\n", "# Any loss that tends to increase KL divergence should be ok", "\n", "        ", "kl", "=", "torch", ".", "distributions", ".", "kl_divergence", "(", "base_distrib", ",", "distrib", ")", "\n", "return", "-", "(", "kl", "+", "distrib", ".", "entropy", "(", ")", ")", "\n", "\n", "", "def", "compute_kl_after_update", "(", "loss_func", ",", "n", "=", "100", ")", ":", "\n", "        ", "policy", "=", "copy", ".", "deepcopy", "(", "base_policy", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "policy", ".", "parameters", "(", ")", ",", "1e-2", ")", "\n", "for", "_", "in", "range", "(", "n", ")", ":", "\n", "            ", "distrib", "=", "policy", "(", "x", ")", "\n", "policy", ".", "zero_grad", "(", ")", "\n", "loss_func", "(", "distrib", ")", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "distrib_after", "=", "policy", "(", "x", ")", "\n", "return", "float", "(", "torch", ".", "distributions", ".", "kl_divergence", "(", "base_distrib", ",", "distrib_after", ")", ")", "\n", "\n", "# Without kl constraint", "\n", "", "", "kl_after_without_constraint", "=", "compute_kl_after_update", "(", "base_loss_func", ")", "\n", "print", "(", "\"kl_after_without_constraint\"", ",", "kl_after_without_constraint", ")", "\n", "\n", "# With kl constraint", "\n", "def", "loss_func_with_constraint", "(", "distrib", ")", ":", "\n", "        ", "loss", ",", "kl", "=", "acer", ".", "compute_loss_with_kl_constraint", "(", "\n", "distrib", ",", "base_distrib", ",", "base_loss_func", "(", "distrib", ")", ",", "delta", "=", "0", "\n", ")", "\n", "return", "loss", "\n", "\n", "", "kl_after_with_constraint", "=", "compute_kl_after_update", "(", "loss_func_with_constraint", ")", "\n", "print", "(", "\"kl_after_with_constraint\"", ",", "kl_after_with_constraint", ")", "\n", "\n", "# KL constraint should make KL divergence small after updates", "\n", "assert", "kl_after_with_constraint", "<", "kl_after_without_constraint", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_pal.TestPALOnDiscreteABC.make_dqn_agent": [[8, 18], ["pfrl.agents.pal.PAL"], "methods", ["None"], ["    ", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "PAL", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_pal.TestPALOnContinuousABC.make_dqn_agent": [[22, 32], ["pfrl.agents.pal.PAL"], "methods", ["None"], ["    ", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "PAL", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_pal.TestPALOnDiscretePOABC.make_dqn_agent": [[36, 47], ["pfrl.agents.pal.PAL"], "methods", ["None"], ["    ", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "PAL", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", "recurrent", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo.TestYieldSubsetOfSequencesWithFixedNumberOfItems.test_manual": [[62, 102], ["test_ppo.TestYieldSubsetOfSequencesWithFixedNumberOfItems.assertEqual", "test_ppo.TestYieldSubsetOfSequencesWithFixedNumberOfItems.assertEqual", "test_ppo.TestYieldSubsetOfSequencesWithFixedNumberOfItems.assertEqual", "list", "list", "list", "pfrl.agents.ppo._yield_subset_of_sequences_with_fixed_number_of_items", "pfrl.agents.ppo._yield_subset_of_sequences_with_fixed_number_of_items", "pfrl.agents.ppo._yield_subset_of_sequences_with_fixed_number_of_items"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._yield_subset_of_sequences_with_fixed_number_of_items", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._yield_subset_of_sequences_with_fixed_number_of_items", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._yield_subset_of_sequences_with_fixed_number_of_items"], ["    ", "def", "test_manual", "(", "self", ")", ":", "\n", "        ", "episodes", "=", "[", "\n", "[", "1", ",", "2", ",", "3", "]", ",", "\n", "[", "4", ",", "5", "]", ",", "\n", "[", "6", ",", "7", ",", "8", "]", ",", "\n", "[", "9", "]", ",", "\n", "[", "10", ",", "11", ",", "12", "]", ",", "\n", "]", "\n", "self", ".", "assertEqual", "(", "\n", "list", "(", "\n", "ppo", ".", "_yield_subset_of_sequences_with_fixed_number_of_items", "(", "episodes", ",", "4", ")", "\n", ")", ",", "\n", "[", "\n", "[", "[", "1", ",", "2", ",", "3", "]", ",", "[", "4", "]", "]", ",", "\n", "[", "[", "5", "]", ",", "[", "6", ",", "7", ",", "8", "]", "]", ",", "\n", "[", "[", "9", "]", ",", "[", "10", ",", "11", ",", "12", "]", "]", ",", "\n", "]", ",", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "list", "(", "\n", "ppo", ".", "_yield_subset_of_sequences_with_fixed_number_of_items", "(", "episodes", ",", "3", ")", "\n", ")", ",", "\n", "[", "\n", "[", "[", "1", ",", "2", ",", "3", "]", "]", ",", "\n", "[", "[", "4", ",", "5", "]", ",", "[", "6", "]", "]", ",", "\n", "[", "[", "7", ",", "8", "]", ",", "[", "9", "]", "]", ",", "\n", "[", "[", "10", ",", "11", ",", "12", "]", "]", ",", "\n", "]", ",", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "list", "(", "\n", "ppo", ".", "_yield_subset_of_sequences_with_fixed_number_of_items", "(", "episodes", ",", "2", ")", "\n", ")", ",", "\n", "[", "\n", "[", "[", "1", ",", "2", "]", "]", ",", "\n", "[", "[", "3", "]", ",", "[", "4", "]", "]", ",", "\n", "[", "[", "5", "]", ",", "[", "6", "]", "]", ",", "\n", "[", "[", "7", ",", "8", "]", "]", ",", "\n", "[", "[", "9", "]", ",", "[", "10", "]", "]", ",", "\n", "[", "[", "11", ",", "12", "]", "]", ",", "\n", "]", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo.TestLimitSequenceLength.test_manual": [[107, 136], ["test_ppo.TestLimitSequenceLength.assertEqual", "test_ppo.TestLimitSequenceLength.assertEqual", "test_ppo.TestLimitSequenceLength.assertEqual", "test_ppo.TestLimitSequenceLength.assertEqual", "pfrl.agents.ppo._limit_sequence_length", "pfrl.agents.ppo._limit_sequence_length", "pfrl.agents.ppo._limit_sequence_length", "pfrl.agents.ppo._limit_sequence_length"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._limit_sequence_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._limit_sequence_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._limit_sequence_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._limit_sequence_length"], ["    ", "def", "test_manual", "(", "self", ")", ":", "\n", "        ", "episodes", "=", "[", "\n", "[", "1", ",", "2", ",", "3", "]", ",", "\n", "[", "4", ",", "5", "]", ",", "\n", "[", "6", ",", "7", ",", "8", "]", ",", "\n", "[", "9", "]", ",", "\n", "]", "\n", "self", ".", "assertEqual", "(", "\n", "ppo", ".", "_limit_sequence_length", "(", "episodes", ",", "1", ")", ",", "\n", "[", "[", "1", "]", ",", "[", "2", "]", ",", "[", "3", "]", ",", "[", "4", "]", ",", "[", "5", "]", ",", "[", "6", "]", ",", "[", "7", "]", ",", "[", "8", "]", ",", "[", "9", "]", "]", ",", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "ppo", ".", "_limit_sequence_length", "(", "episodes", ",", "2", ")", ",", "\n", "[", "\n", "[", "1", ",", "2", "]", ",", "\n", "[", "3", "]", ",", "\n", "[", "4", ",", "5", "]", ",", "\n", "[", "6", ",", "7", "]", ",", "\n", "[", "8", "]", ",", "\n", "[", "9", "]", ",", "\n", "]", ",", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "ppo", ".", "_limit_sequence_length", "(", "episodes", ",", "3", ")", ",", "\n", "episodes", ",", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "ppo", ".", "_limit_sequence_length", "(", "episodes", ",", "4", ")", ",", "\n", "episodes", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo.TestLimitSequenceLength.test_random": [[138, 147], ["test_ppo.make_random_episodes", "pfrl.agents.ppo._limit_sequence_length", "test_ppo.TestLimitSequenceLength.assertEqual", "test_ppo.TestLimitSequenceLength.assertLessEqual", "sum", "sum", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo.make_random_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._limit_sequence_length", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "def", "test_random", "(", "self", ")", ":", "\n", "        ", "episodes", "=", "make_random_episodes", "(", ")", "\n", "limit", "=", "5", "\n", "new_episodes", "=", "pfrl", ".", "agents", ".", "ppo", ".", "_limit_sequence_length", "(", "episodes", ",", "limit", ")", "\n", "for", "ep", "in", "new_episodes", ":", "\n", "            ", "self", ".", "assertLessEqual", "(", "len", "(", "ep", ")", ",", "limit", ")", "\n", "# They should have the same number of transitions", "\n", "", "self", ".", "assertEqual", "(", "\n", "sum", "(", "len", "(", "ep", ")", "for", "ep", "in", "episodes", ")", ",", "sum", "(", "len", "(", "ep", ")", "for", "ep", "in", "new_episodes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo._TestPPO.setUp": [[274, 278], ["pytest.fixture", "tempfile.mkdtemp", "os.path.join"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "self", ".", "agent_dirname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdir", ",", "\"agent_final\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo._TestPPO.test_abc_cpu": [[279, 283], ["test_ppo._TestPPO._test_abc", "test_ppo._TestPPO._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_abc_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", ")", "\n", "self", ".", "_test_abc", "(", "steps", "=", "0", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo._TestPPO.test_abc_gpu": [[284, 288], ["test_ppo._TestPPO._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_abc_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo._TestPPO.test_abc_fast_cpu": [[289, 292], ["test_ppo._TestPPO._test_abc", "test_ppo._TestPPO._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "def", "test_abc_fast_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "steps", "=", "100", ",", "require_success", "=", "False", ")", "\n", "self", ".", "_test_abc", "(", "steps", "=", "0", ",", "require_success", "=", "False", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo._TestPPO.test_abc_fast_gpu": [[293, 296], ["test_ppo._TestPPO._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_abc_fast_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "steps", "=", "100", ",", "require_success", "=", "False", ",", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo._TestPPO.test_abc_batch_cpu": [[297, 301], ["test_ppo._TestPPO._test_abc_batch", "test_ppo._TestPPO._test_abc_batch"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_abc_batch_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc_batch", "(", ")", "\n", "self", ".", "_test_abc_batch", "(", "steps", "=", "0", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo._TestPPO.test_abc_batch_gpu": [[302, 306], ["test_ppo._TestPPO._test_abc_batch"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_abc_batch_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc_batch", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo._TestPPO.test_abc_batch_fast_cpu": [[307, 310], ["test_ppo._TestPPO._test_abc_batch", "test_ppo._TestPPO._test_abc_batch"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch"], ["", "def", "test_abc_batch_fast_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc_batch", "(", "steps", "=", "100", ",", "require_success", "=", "False", ")", "\n", "self", ".", "_test_abc_batch", "(", "steps", "=", "0", ",", "require_success", "=", "False", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo._TestPPO.test_abc_batch_fast_gpu": [[311, 314], ["test_ppo._TestPPO._test_abc_batch"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_abc_batch_fast_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc_batch", "(", "steps", "=", "100", ",", "require_success", "=", "False", ",", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo._TestPPO._test_abc": [[315, 355], ["test_ppo._TestPPO.make_env_and_successful_return", "test_ppo._TestPPO.make_env_and_successful_return", "test_ppo._TestPPO.make_agent", "pfrl.experiments.train_agent_with_evaluation", "pfrl.experiments.evaluator.run_evaluation_episodes", "test_ppo._TestPPO.save", "print", "test_ppo._TestPPO.load", "numpy.sum", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_agent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent.train_agent_with_evaluation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.run_evaluation_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "def", "_test_abc", "(", "self", ",", "steps", "=", "100000", ",", "require_success", "=", "True", ",", "gpu", "=", "-", "1", ",", "load_model", "=", "False", ")", ":", "\n", "\n", "        ", "env", ",", "_", "=", "self", ".", "make_env_and_successful_return", "(", "test", "=", "False", ")", "\n", "test_env", ",", "successful_return", "=", "self", ".", "make_env_and_successful_return", "(", "test", "=", "True", ")", "\n", "agent", "=", "self", ".", "make_agent", "(", "env", ",", "gpu", ")", "\n", "max_episode_len", "=", "None", "if", "self", ".", "episodic", "else", "2", "\n", "\n", "if", "load_model", ":", "\n", "            ", "print", "(", "\"Load agent from\"", ",", "self", ".", "agent_dirname", ")", "\n", "agent", ".", "load", "(", "self", ".", "agent_dirname", ")", "\n", "\n", "# Train", "\n", "", "train_agent_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "steps", "=", "steps", ",", "\n", "outdir", "=", "self", ".", "tmpdir", ",", "\n", "eval_interval", "=", "200", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "50", ",", "\n", "successful_score", "=", "successful_return", ",", "\n", "eval_env", "=", "test_env", ",", "\n", "train_max_episode_len", "=", "max_episode_len", ",", "\n", ")", "\n", "\n", "# Test", "\n", "n_test_runs", "=", "10", "\n", "eval_returns", ",", "_", "=", "run_evaluation_episodes", "(", "\n", "test_env", ",", "\n", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "n_test_runs", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", ")", "\n", "if", "require_success", ":", "\n", "            ", "n_succeeded", "=", "np", ".", "sum", "(", "np", ".", "asarray", "(", "eval_returns", ")", ">=", "successful_return", ")", "\n", "assert", "n_succeeded", "==", "n_test_runs", "\n", "\n", "# Save", "\n", "", "agent", ".", "save", "(", "self", ".", "agent_dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo._TestPPO._test_abc_batch": [[356, 403], ["test_ppo._TestPPO.make_vec_env_and_successful_return", "test_ppo._TestPPO.make_vec_env_and_successful_return", "test_ppo._TestPPO.make_agent", "pfrl.experiments.train_agent_batch_with_evaluation", "env.close", "pfrl.experiments.evaluator.batch_run_evaluation_episodes", "test_env.close", "test_ppo._TestPPO.save", "print", "test_ppo._TestPPO.load", "numpy.sum", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_vec_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_vec_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_agent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent_batch.train_agent_batch_with_evaluation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.batch_run_evaluation_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "def", "_test_abc_batch", "(", "\n", "self", ",", "steps", "=", "100000", ",", "require_success", "=", "True", ",", "gpu", "=", "-", "1", ",", "load_model", "=", "False", ",", "num_envs", "=", "4", "\n", ")", ":", "\n", "\n", "        ", "env", ",", "_", "=", "self", ".", "make_vec_env_and_successful_return", "(", "test", "=", "False", ",", "num_envs", "=", "num_envs", ")", "\n", "test_env", ",", "successful_return", "=", "self", ".", "make_vec_env_and_successful_return", "(", "\n", "test", "=", "True", ",", "num_envs", "=", "num_envs", "\n", ")", "\n", "agent", "=", "self", ".", "make_agent", "(", "env", ",", "gpu", ")", "\n", "max_episode_len", "=", "None", "if", "self", ".", "episodic", "else", "2", "\n", "\n", "if", "load_model", ":", "\n", "            ", "print", "(", "\"Load agent from\"", ",", "self", ".", "agent_dirname", ")", "\n", "agent", ".", "load", "(", "self", ".", "agent_dirname", ")", "\n", "\n", "# Train", "\n", "", "train_agent_batch_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "steps", "=", "steps", ",", "\n", "outdir", "=", "self", ".", "tmpdir", ",", "\n", "eval_interval", "=", "200", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "40", ",", "\n", "successful_score", "=", "successful_return", ",", "\n", "eval_env", "=", "test_env", ",", "\n", "log_interval", "=", "100", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n", "# Test", "\n", "n_test_runs", "=", "10", "\n", "eval_returns", ",", "_", "=", "batch_run_evaluation_episodes", "(", "\n", "test_env", ",", "\n", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "n_test_runs", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", ")", "\n", "test_env", ".", "close", "(", ")", "\n", "if", "require_success", ":", "\n", "            ", "n_succeeded", "=", "np", ".", "sum", "(", "np", ".", "asarray", "(", "eval_returns", ")", ">=", "successful_return", ")", "\n", "assert", "n_succeeded", "==", "n_test_runs", "\n", "\n", "# Save", "\n", "", "agent", ".", "save", "(", "self", ".", "agent_dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo._TestPPO.make_agent": [[404, 408], ["test_ppo._TestPPO.make_model", "torch.optim.Adam", "test_ppo._TestPPO.make_ppo_agent", "test_ppo._TestPPO.parameters"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C.make_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo._TestPPO.make_ppo_agent"], ["", "def", "make_agent", "(", "self", ",", "env", ",", "gpu", ")", ":", "\n", "        ", "model", "=", "self", ".", "make_model", "(", "env", ")", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-2", ")", "\n", "return", "self", ".", "make_ppo_agent", "(", "env", "=", "env", ",", "model", "=", "model", ",", "opt", "=", "opt", ",", "gpu", "=", "gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo._TestPPO.make_ppo_agent": [[409, 425], ["pfrl.agents.ppo.PPO"], "methods", ["None"], ["", "def", "make_ppo_agent", "(", "self", ",", "env", ",", "model", ",", "opt", ",", "gpu", ")", ":", "\n", "        ", "return", "PPO", "(", "\n", "model", ",", "\n", "opt", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.8", ",", "\n", "lambd", "=", "self", ".", "lambd", ",", "\n", "update_interval", "=", "64", ",", "\n", "minibatch_size", "=", "16", ",", "\n", "epochs", "=", "3", ",", "\n", "clip_eps_vf", "=", "self", ".", "clip_eps_vf", ",", "\n", "standardize_advantages", "=", "self", ".", "standardize_advantages", ",", "\n", "recurrent", "=", "self", ".", "recurrent", ",", "\n", "entropy_coef", "=", "1e-5", ",", "\n", "act_deterministically", "=", "True", ",", "\n", "max_grad_norm", "=", "1.0", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo._TestPPO.make_model": [[427, 489], ["pfrl.nn.RecurrentSequential", "pfrl.nn.RecurrentBranched", "torch.nn.Sequential", "pfrl.nn.Branched", "torch.no_grad", "layer.weight.mul_", "torch.nn.LSTM", "test_ppo._TestPPO.make_model.weight_scale"], "methods", ["None"], ["", "def", "make_model", "(", "self", ",", "env", ")", ":", "\n", "        ", "hidden_size", "=", "20", "\n", "obs_size", "=", "env", ".", "observation_space", ".", "low", ".", "size", "\n", "\n", "def", "weight_scale", "(", "layer", ",", "scale", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "layer", ".", "weight", ".", "mul_", "(", "scale", ")", "\n", "", "return", "layer", "\n", "\n", "", "if", "self", ".", "recurrent", ":", "\n", "            ", "v", "=", "RecurrentSequential", "(", "\n", "nn", ".", "LSTM", "(", "num_layers", "=", "1", ",", "input_size", "=", "obs_size", ",", "hidden_size", "=", "hidden_size", ")", ",", "\n", "weight_scale", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ",", "1e-1", ")", ",", "\n", ")", "\n", "if", "self", ".", "discrete", ":", "\n", "                ", "n_actions", "=", "env", ".", "action_space", ".", "n", "\n", "pi", "=", "RecurrentSequential", "(", "\n", "nn", ".", "LSTM", "(", "num_layers", "=", "1", ",", "input_size", "=", "obs_size", ",", "hidden_size", "=", "hidden_size", ")", ",", "\n", "weight_scale", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "n_actions", ")", ",", "1e-1", ")", ",", "\n", "SoftmaxCategoricalHead", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "action_size", "=", "env", ".", "action_space", ".", "low", ".", "size", "\n", "pi", "=", "RecurrentSequential", "(", "\n", "nn", ".", "LSTM", "(", "num_layers", "=", "1", ",", "input_size", "=", "obs_size", ",", "hidden_size", "=", "hidden_size", ")", ",", "\n", "weight_scale", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "action_size", ")", ",", "1e-1", ")", ",", "\n", "GaussianHeadWithStateIndependentCovariance", "(", "\n", "action_size", "=", "action_size", ",", "\n", "var_type", "=", "\"diagonal\"", ",", "\n", "var_func", "=", "lambda", "x", ":", "torch", ".", "exp", "(", "2", "*", "x", ")", ",", "\n", "var_param_init", "=", "0", ",", "\n", ")", ",", "\n", ")", "\n", "", "return", "RecurrentBranched", "(", "pi", ",", "v", ")", "\n", "", "else", ":", "\n", "            ", "v", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "weight_scale", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ",", "1e-1", ")", ",", "\n", ")", "\n", "if", "self", ".", "discrete", ":", "\n", "                ", "n_actions", "=", "env", ".", "action_space", ".", "n", "\n", "pi", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "weight_scale", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "n_actions", ")", ",", "1e-1", ")", ",", "\n", "SoftmaxCategoricalHead", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "action_size", "=", "env", ".", "action_space", ".", "low", ".", "size", "\n", "pi", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "weight_scale", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "action_size", ")", ",", "1e-1", ")", ",", "\n", "GaussianHeadWithStateIndependentCovariance", "(", "\n", "action_size", "=", "action_size", ",", "\n", "var_type", "=", "\"diagonal\"", ",", "\n", "var_func", "=", "lambda", "x", ":", "torch", ".", "exp", "(", "2", "*", "x", ")", ",", "\n", "var_param_init", "=", "0", ",", "\n", ")", ",", "\n", ")", "\n", "", "return", "pfrl", ".", "nn", ".", "Branched", "(", "pi", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo._TestPPO.make_env_and_successful_return": [[490, 498], ["pfrl.envs.abc.ABC"], "methods", ["None"], ["", "", "def", "make_env_and_successful_return", "(", "self", ",", "test", ")", ":", "\n", "        ", "env", "=", "ABC", "(", "\n", "discrete", "=", "self", ".", "discrete", ",", "\n", "deterministic", "=", "test", ",", "\n", "episodic", "=", "self", ".", "episodic", ",", "\n", "partially_observable", "=", "self", ".", "recurrent", ",", "\n", ")", "\n", "return", "env", ",", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo._TestPPO.make_vec_env_and_successful_return": [[499, 505], ["pfrl.envs.MultiprocessVectorEnv", "test_ppo._TestPPO.make_env_and_successful_return", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return"], ["", "def", "make_vec_env_and_successful_return", "(", "self", ",", "test", ",", "num_envs", "=", "3", ")", ":", "\n", "        ", "def", "make_env", "(", ")", ":", "\n", "            ", "return", "self", ".", "make_env_and_successful_return", "(", "test", ")", "[", "0", "]", "\n", "\n", "", "vec_env", "=", "pfrl", ".", "envs", ".", "MultiprocessVectorEnv", "(", "[", "make_env", "for", "_", "in", "range", "(", "num_envs", ")", "]", ")", "\n", "return", "vec_env", ",", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo.TestPPONonRecurrent.set_params": [[513, 528], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "set_params", "(", "\n", "self", ",", "\n", "clip_eps_vf", ",", "\n", "lambd", ",", "\n", "discrete", ",", "\n", "standardize_advantages", ",", "\n", "episodic", ",", "\n", ")", ":", "\n", "        ", "self", ".", "clip_eps_vf", "=", "clip_eps_vf", "\n", "self", ".", "lambd", "=", "lambd", "\n", "self", ".", "discrete", "=", "discrete", "\n", "self", ".", "standardize_advantages", "=", "standardize_advantages", "\n", "self", ".", "episodic", "=", "episodic", "\n", "self", ".", "recurrent", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo.TestPPORecurrent.set_params": [[536, 551], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "set_params", "(", "\n", "self", ",", "\n", "clip_eps_vf", ",", "\n", "lambd", ",", "\n", "discrete", ",", "\n", "standardize_advantages", ",", "\n", "episodic", ",", "\n", ")", ":", "\n", "        ", "self", ".", "clip_eps_vf", "=", "clip_eps_vf", "\n", "self", ".", "lambd", "=", "lambd", "\n", "self", ".", "discrete", "=", "discrete", "\n", "self", ".", "standardize_advantages", "=", "standardize_advantages", "\n", "self", ".", "episodic", "=", "episodic", "\n", "self", ".", "recurrent", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo.make_random_episodes": [[33, 59], ["range", "numpy.random.randint", "numpy.random.uniform", "range", "episodes.append", "len", "numpy.random.uniform", "episode.append", "numpy.random.randint", "numpy.random.uniform", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["def", "make_random_episodes", "(", "n_episodes", "=", "10", ",", "obs_size", "=", "2", ",", "n_actions", "=", "3", ")", ":", "\n", "    ", "episodes", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_episodes", ")", ":", "\n", "        ", "episode_length", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "100", ")", "\n", "episode", "=", "[", "]", "\n", "last_state", "=", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "size", "=", "obs_size", ")", "\n", "for", "t", "in", "range", "(", "episode_length", ")", ":", "\n", "            ", "state", "=", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "size", "=", "obs_size", ")", "\n", "episode", ".", "append", "(", "\n", "{", "\n", "\"state\"", ":", "last_state", ",", "\n", "\"action\"", ":", "np", ".", "random", ".", "randint", "(", "n_actions", ")", ",", "\n", "\"reward\"", ":", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ")", ",", "\n", "\"nonterminal\"", ":", "(", "\n", "np", ".", "random", ".", "randint", "(", "2", ")", "if", "t", "==", "episode_length", "-", "1", "else", "1", "\n", ")", ",", "\n", "\"next_state\"", ":", "state", ",", "\n", "\"recurrent_state\"", ":", "None", ",", "\n", "\"next_recurrent_state\"", ":", "None", ",", "\n", "}", "\n", ")", "\n", "last_state", "=", "state", "\n", "", "episodes", ".", "append", "(", "episode", ")", "\n", "\n", "", "assert", "len", "(", "episodes", ")", "==", "n_episodes", "\n", "return", "episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo.test_ppo_dataset_recurrent_and_non_recurrent_equivalence": [[150, 271], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "test_ppo.make_random_episodes", "torch.device", "pfrl.nn.Branched", "pfrl.nn.RecurrentSequential", "pfrl.agents.ppo._make_dataset", "pfrl.agents.ppo._make_dataset_recurrent", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "pfrl.nn.EmpiricalNormalization", "pfrl.nn.EmpiricalNormalization.experience", "torch.nn.Sequential", "torch.nn.Linear", "torch.rand", "torch.nn.Linear", "pfrl.policies.SoftmaxCategoricalHead", "copy.deepcopy", "copy.deepcopy", "itertools.chain.from_iterable", "itertools.chain.from_iterable", "itertools.chain.from_iterable", "itertools.chain.from_iterable", "itertools.chain.from_iterable", "itertools.chain.from_iterable", "itertools.chain.from_iterable", "itertools.chain.from_iterable", "itertools.chain.from_iterable"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo.make_random_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._make_dataset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._make_dataset_recurrent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.experience"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"use_obs_normalizer\"", ",", "[", "True", ",", "False", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"gamma\"", ",", "[", "1", ",", "0.8", ",", "0", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"lambd\"", ",", "[", "1", ",", "0.8", ",", "0", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"max_recurrent_sequence_len\"", ",", "[", "None", ",", "7", "]", ")", "\n", "def", "test_ppo_dataset_recurrent_and_non_recurrent_equivalence", "(", "\n", "use_obs_normalizer", ",", "gamma", ",", "lambd", ",", "max_recurrent_sequence_len", "\n", ")", ":", "\n", "    ", "\"\"\"Test equivalence between recurrent and non-recurrent datasets.\n\n    When the same feed-forward model is used, the values of\n    log_prob, v_pred, next_v_pred obtained by both recurrent and\n    non-recurrent dataset creation functions should be the same.\n    \"\"\"", "\n", "episodes", "=", "make_random_episodes", "(", ")", "\n", "if", "use_obs_normalizer", ":", "\n", "        ", "obs_normalizer", "=", "pfrl", ".", "nn", ".", "EmpiricalNormalization", "(", "2", ",", "clip_threshold", "=", "5", ")", "\n", "obs_normalizer", ".", "experience", "(", "torch", ".", "rand", "(", "10", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "        ", "obs_normalizer", "=", "None", "\n", "\n", "", "def", "phi", "(", "obs", ")", ":", "\n", "        ", "return", "(", "obs", "*", "0.5", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "obs_size", "=", "2", "\n", "n_actions", "=", "3", "\n", "\n", "non_recurrent_model", "=", "pfrl", ".", "nn", ".", "Branched", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "n_actions", ")", ",", "\n", "SoftmaxCategoricalHead", "(", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "1", ")", ",", "\n", ")", "\n", "recurrent_model", "=", "RecurrentSequential", "(", "\n", "non_recurrent_model", ",", "\n", ")", "\n", "\n", "dataset", "=", "pfrl", ".", "agents", ".", "ppo", ".", "_make_dataset", "(", "\n", "episodes", "=", "copy", ".", "deepcopy", "(", "episodes", ")", ",", "\n", "model", "=", "non_recurrent_model", ",", "\n", "phi", "=", "phi", ",", "\n", "batch_states", "=", "batch_states", ",", "\n", "obs_normalizer", "=", "obs_normalizer", ",", "\n", "gamma", "=", "gamma", ",", "\n", "lambd", "=", "lambd", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "\n", "dataset_recurrent", "=", "pfrl", ".", "agents", ".", "ppo", ".", "_make_dataset_recurrent", "(", "\n", "episodes", "=", "copy", ".", "deepcopy", "(", "episodes", ")", ",", "\n", "model", "=", "recurrent_model", ",", "\n", "phi", "=", "phi", ",", "\n", "batch_states", "=", "batch_states", ",", "\n", "obs_normalizer", "=", "obs_normalizer", ",", "\n", "gamma", "=", "gamma", ",", "\n", "lambd", "=", "lambd", ",", "\n", "max_recurrent_sequence_len", "=", "max_recurrent_sequence_len", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "\n", "assert", "\"log_prob\"", "not", "in", "episodes", "[", "0", "]", "[", "0", "]", "\n", "assert", "\"log_prob\"", "in", "dataset", "[", "0", "]", "\n", "assert", "\"log_prob\"", "in", "dataset_recurrent", "[", "0", "]", "[", "0", "]", "\n", "# They are not just shallow copies", "\n", "assert", "dataset", "[", "0", "]", "[", "\"log_prob\"", "]", "is", "not", "dataset_recurrent", "[", "0", "]", "[", "0", "]", "[", "\"log_prob\"", "]", "\n", "\n", "states", "=", "[", "tr", "[", "\"state\"", "]", "for", "tr", "in", "dataset", "]", "\n", "recurrent_states", "=", "[", "\n", "tr", "[", "\"state\"", "]", "for", "tr", "in", "itertools", ".", "chain", ".", "from_iterable", "(", "dataset_recurrent", ")", "\n", "]", "\n", "torch_assert_allclose", "(", "states", ",", "recurrent_states", ")", "\n", "\n", "actions", "=", "[", "tr", "[", "\"action\"", "]", "for", "tr", "in", "dataset", "]", "\n", "recurrent_actions", "=", "[", "\n", "tr", "[", "\"action\"", "]", "for", "tr", "in", "itertools", ".", "chain", ".", "from_iterable", "(", "dataset_recurrent", ")", "\n", "]", "\n", "torch_assert_allclose", "(", "actions", ",", "recurrent_actions", ")", "\n", "\n", "rewards", "=", "[", "tr", "[", "\"reward\"", "]", "for", "tr", "in", "dataset", "]", "\n", "recurrent_rewards", "=", "[", "\n", "tr", "[", "\"reward\"", "]", "for", "tr", "in", "itertools", ".", "chain", ".", "from_iterable", "(", "dataset_recurrent", ")", "\n", "]", "\n", "torch_assert_allclose", "(", "rewards", ",", "recurrent_rewards", ")", "\n", "\n", "nonterminals", "=", "[", "tr", "[", "\"nonterminal\"", "]", "for", "tr", "in", "dataset", "]", "\n", "recurrent_nonterminals", "=", "[", "\n", "tr", "[", "\"nonterminal\"", "]", "for", "tr", "in", "itertools", ".", "chain", ".", "from_iterable", "(", "dataset_recurrent", ")", "\n", "]", "\n", "torch_assert_allclose", "(", "nonterminals", ",", "recurrent_nonterminals", ")", "\n", "\n", "log_probs", "=", "[", "tr", "[", "\"log_prob\"", "]", "for", "tr", "in", "dataset", "]", "\n", "recurrent_log_probs", "=", "[", "\n", "tr", "[", "\"log_prob\"", "]", "for", "tr", "in", "itertools", ".", "chain", ".", "from_iterable", "(", "dataset_recurrent", ")", "\n", "]", "\n", "torch_assert_allclose", "(", "log_probs", ",", "recurrent_log_probs", ")", "\n", "\n", "vs_pred", "=", "[", "tr", "[", "\"v_pred\"", "]", "for", "tr", "in", "dataset", "]", "\n", "recurrent_vs_pred", "=", "[", "\n", "tr", "[", "\"v_pred\"", "]", "for", "tr", "in", "itertools", ".", "chain", ".", "from_iterable", "(", "dataset_recurrent", ")", "\n", "]", "\n", "torch_assert_allclose", "(", "vs_pred", ",", "recurrent_vs_pred", ")", "\n", "\n", "next_vs_pred", "=", "[", "tr", "[", "\"next_v_pred\"", "]", "for", "tr", "in", "dataset", "]", "\n", "recurrent_next_vs_pred", "=", "[", "\n", "tr", "[", "\"next_v_pred\"", "]", "for", "tr", "in", "itertools", ".", "chain", ".", "from_iterable", "(", "dataset_recurrent", ")", "\n", "]", "\n", "torch_assert_allclose", "(", "next_vs_pred", ",", "recurrent_next_vs_pred", ")", "\n", "\n", "advs", "=", "[", "tr", "[", "\"adv\"", "]", "for", "tr", "in", "dataset", "]", "\n", "recurrent_advs", "=", "[", "\n", "tr", "[", "\"adv\"", "]", "for", "tr", "in", "itertools", ".", "chain", ".", "from_iterable", "(", "dataset_recurrent", ")", "\n", "]", "\n", "torch_assert_allclose", "(", "advs", ",", "recurrent_advs", ")", "\n", "\n", "vs_teacher", "=", "[", "tr", "[", "\"v_teacher\"", "]", "for", "tr", "in", "dataset", "]", "\n", "recurrent_vs_teacher", "=", "[", "\n", "tr", "[", "\"v_teacher\"", "]", "for", "tr", "in", "itertools", ".", "chain", ".", "from_iterable", "(", "dataset_recurrent", ")", "\n", "]", "\n", "torch_assert_allclose", "(", "vs_teacher", ",", "recurrent_vs_teacher", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo.test_yield_minibatches_divisible": [[553, 562], ["list", "sum", "pfrl.agents.ppo._yield_minibatches", "len", "len", "set", "set", "set"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._yield_minibatches"], ["", "", "def", "test_yield_minibatches_divisible", "(", ")", ":", "\n", "    ", "dataset", "=", "[", "1", ",", "2", ",", "3", ",", "4", "]", "\n", "minibatches", "=", "list", "(", "ppo", ".", "_yield_minibatches", "(", "dataset", ",", "minibatch_size", "=", "2", ",", "num_epochs", "=", "3", ")", ")", "\n", "assert", "len", "(", "minibatches", ")", "==", "6", "\n", "samples", "=", "sum", "(", "minibatches", ",", "[", "]", ")", "\n", "assert", "len", "(", "samples", ")", "==", "12", "\n", "assert", "{", "1", ",", "2", ",", "3", ",", "4", "}", "==", "set", "(", "samples", "[", ":", "4", "]", ")", "\n", "assert", "{", "1", ",", "2", ",", "3", ",", "4", "}", "==", "set", "(", "samples", "[", "4", ":", "8", "]", ")", "\n", "assert", "{", "1", ",", "2", ",", "3", ",", "4", "}", "==", "set", "(", "samples", "[", "8", ":", "12", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo.test_yield_minibatches_indivisible": [[564, 578], ["list", "sum", "pfrl.agents.ppo._yield_minibatches", "len", "len", "samples[].count", "samples[].count", "samples[].count", "samples[].count", "samples[].count", "samples[].count"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._yield_minibatches"], ["", "def", "test_yield_minibatches_indivisible", "(", ")", ":", "\n", "    ", "dataset", "=", "[", "1", ",", "2", ",", "3", "]", "\n", "minibatches", "=", "list", "(", "ppo", ".", "_yield_minibatches", "(", "dataset", ",", "minibatch_size", "=", "2", ",", "num_epochs", "=", "3", ")", ")", "\n", "assert", "len", "(", "minibatches", ")", "==", "5", "\n", "samples", "=", "sum", "(", "minibatches", ",", "[", "]", ")", "\n", "assert", "len", "(", "samples", ")", "==", "10", "\n", "# samples[:6] is from the first two epochs", "\n", "assert", "samples", "[", ":", "6", "]", ".", "count", "(", "1", ")", "==", "2", "\n", "assert", "samples", "[", ":", "6", "]", ".", "count", "(", "2", ")", "==", "2", "\n", "assert", "samples", "[", ":", "6", "]", ".", "count", "(", "3", ")", "==", "2", "\n", "# samples[6:] is from the final epoch", "\n", "assert", "1", "<=", "samples", "[", "6", ":", "]", ".", "count", "(", "1", ")", "<=", "2", "\n", "assert", "1", "<=", "samples", "[", "6", ":", "]", ".", "count", "(", "2", ")", "<=", "2", "\n", "assert", "1", "<=", "samples", "[", "6", ":", "]", ".", "count", "(", "3", ")", "<=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ppo.test_yield_minibatches_smaller_dataset": [[580, 589], ["list", "sum", "pfrl.agents.ppo._yield_minibatches", "len", "len", "sum.count", "sum.count"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._yield_minibatches"], ["", "def", "test_yield_minibatches_smaller_dataset", "(", ")", ":", "\n", "# dataset smaller than minibatch", "\n", "    ", "dataset", "=", "[", "1", ",", "2", "]", "\n", "minibatches", "=", "list", "(", "ppo", ".", "_yield_minibatches", "(", "dataset", ",", "minibatch_size", "=", "4", ",", "num_epochs", "=", "3", ")", ")", "\n", "assert", "len", "(", "minibatches", ")", "==", "2", "\n", "samples", "=", "sum", "(", "minibatches", ",", "[", "]", ")", "\n", "assert", "len", "(", "samples", ")", "==", "8", "\n", "assert", "samples", ".", "count", "(", "1", ")", "==", "4", "\n", "assert", "samples", ".", "count", "(", "2", ")", "==", "4", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestTraining.set_tmp_paths": [[23, 28], ["pytest.fixture", "tempfile.mkdtemp", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "set_tmp_paths", "(", "self", ")", ":", "\n", "        ", "self", ".", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "self", ".", "agent_dirname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdir", ",", "\"agent_final\"", ")", "\n", "self", ".", "rbuf_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdir", ",", "\"rbuf.pkl\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestTraining.make_agent": [[29, 31], ["NotImplementedError"], "methods", ["None"], ["", "def", "make_agent", "(", "self", ",", "env", ",", "gpu", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestTraining.make_env_and_successful_return": [[32, 34], ["NotImplementedError"], "methods", ["None"], ["", "def", "make_env_and_successful_return", "(", "self", ",", "test", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestTraining._test_training": [[35, 77], ["pfrl.utils.random_seed.set_random_seed", "logging.basicConfig", "basetest_training._TestTraining.make_env_and_successful_return", "basetest_training._TestTraining.make_agent", "pfrl.experiments.train_agent_with_evaluation", "pfrl.experiments.evaluator.run_evaluation_episodes", "numpy.sum", "basetest_training._TestTraining.save", "basetest_training._TestTraining.replay_buffer.save", "basetest_training._TestTraining.make_env_and_successful_return", "print", "basetest_training._TestTraining.load", "basetest_training._TestTraining.replay_buffer.load", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_agent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent.train_agent_with_evaluation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.run_evaluation_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load"], ["", "def", "_test_training", "(", "self", ",", "gpu", ",", "steps", "=", "5000", ",", "load_model", "=", "False", ",", "require_success", "=", "True", ")", ":", "\n", "\n", "        ", "random_seed", ".", "set_random_seed", "(", "1", ")", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "DEBUG", ")", "\n", "\n", "env", "=", "self", ".", "make_env_and_successful_return", "(", "test", "=", "False", ")", "[", "0", "]", "\n", "test_env", ",", "successful_return", "=", "self", ".", "make_env_and_successful_return", "(", "test", "=", "True", ")", "\n", "agent", "=", "self", ".", "make_agent", "(", "env", ",", "gpu", ")", "\n", "\n", "if", "load_model", ":", "\n", "            ", "print", "(", "\"Load agent from\"", ",", "self", ".", "agent_dirname", ")", "\n", "agent", ".", "load", "(", "self", ".", "agent_dirname", ")", "\n", "agent", ".", "replay_buffer", ".", "load", "(", "self", ".", "rbuf_filename", ")", "\n", "\n", "# Train", "\n", "", "train_agent_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "steps", "=", "steps", ",", "\n", "outdir", "=", "self", ".", "tmpdir", ",", "\n", "eval_interval", "=", "200", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "5", ",", "\n", "successful_score", "=", "1", ",", "\n", "eval_env", "=", "test_env", ",", "\n", ")", "\n", "\n", "# Test", "\n", "n_test_runs", "=", "5", "\n", "eval_returns", ",", "_", "=", "run_evaluation_episodes", "(", "\n", "test_env", ",", "\n", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "n_test_runs", ",", "\n", ")", "\n", "n_succeeded", "=", "np", ".", "sum", "(", "np", ".", "asarray", "(", "eval_returns", ")", ">=", "successful_return", ")", "\n", "if", "require_success", ":", "\n", "            ", "assert", "n_succeeded", "==", "n_test_runs", "\n", "\n", "# Save", "\n", "", "agent", ".", "save", "(", "self", ".", "agent_dirname", ")", "\n", "agent", ".", "replay_buffer", ".", "save", "(", "self", ".", "rbuf_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestTraining.test_training_gpu": [[78, 83], ["basetest_training._TestTraining._test_training", "basetest_training._TestTraining._test_training"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestTraining._test_training", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestTraining._test_training"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_training_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_training", "(", "0", ",", "steps", "=", "100000", ")", "\n", "self", ".", "_test_training", "(", "0", ",", "steps", "=", "0", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestTraining.test_training_cpu": [[84, 88], ["basetest_training._TestTraining._test_training", "basetest_training._TestTraining._test_training"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestTraining._test_training", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestTraining._test_training"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_training_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_training", "(", "-", "1", ",", "steps", "=", "100000", ")", "\n", "self", ".", "_test_training", "(", "-", "1", ",", "steps", "=", "0", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestTraining.test_training_gpu_fast": [[89, 93], ["basetest_training._TestTraining._test_training", "basetest_training._TestTraining._test_training"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestTraining._test_training", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestTraining._test_training"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_training_gpu_fast", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_training", "(", "0", ",", "steps", "=", "10", ",", "require_success", "=", "False", ")", "\n", "self", ".", "_test_training", "(", "0", ",", "steps", "=", "0", ",", "load_model", "=", "True", ",", "require_success", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestTraining.test_training_cpu_fast": [[94, 97], ["basetest_training._TestTraining._test_training", "basetest_training._TestTraining._test_training"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestTraining._test_training", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestTraining._test_training"], ["", "def", "test_training_cpu_fast", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_training", "(", "-", "1", ",", "steps", "=", "10", ",", "require_success", "=", "False", ")", "\n", "self", ".", "_test_training", "(", "-", "1", ",", "steps", "=", "0", ",", "load_model", "=", "True", ",", "require_success", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestBatchTrainingMixin.make_vec_env_and_successful_return": [[105, 111], ["pfrl.envs.SerialVectorEnv", "basetest_training._TestBatchTrainingMixin.make_env_and_successful_return", "basetest_training._TestBatchTrainingMixin.make_env_and_successful_return", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return"], ["def", "make_vec_env_and_successful_return", "(", "self", ",", "test", ",", "num_envs", "=", "2", ")", ":", "\n", "        ", "successful_return", "=", "self", ".", "make_env_and_successful_return", "(", "test", "=", "test", ")", "[", "1", "]", "\n", "vec_env", "=", "pfrl", ".", "envs", ".", "SerialVectorEnv", "(", "\n", "[", "self", ".", "make_env_and_successful_return", "(", "test", "=", "test", ")", "[", "0", "]", "for", "_", "in", "range", "(", "num_envs", ")", "]", "\n", ")", "\n", "return", "vec_env", ",", "successful_return", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestBatchTrainingMixin._test_batch_training": [[112, 158], ["pfrl.utils.random_seed.set_random_seed", "logging.basicConfig", "basetest_training._TestBatchTrainingMixin.make_vec_env_and_successful_return", "basetest_training._TestBatchTrainingMixin.make_vec_env_and_successful_return", "basetest_training._TestBatchTrainingMixin.make_agent", "pfrl.experiments.train_agent_batch_with_evaluation", "env.close", "pfrl.experiments.evaluator.batch_run_evaluation_episodes", "test_env.close", "numpy.sum", "basetest_training._TestBatchTrainingMixin.save", "basetest_training._TestBatchTrainingMixin.replay_buffer.save", "print", "basetest_training._TestBatchTrainingMixin.load", "basetest_training._TestBatchTrainingMixin.replay_buffer.load", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_vec_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_vec_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_agent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent_batch.train_agent_batch_with_evaluation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.batch_run_evaluation_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load"], ["", "def", "_test_batch_training", "(", "\n", "self", ",", "gpu", ",", "steps", "=", "5000", ",", "load_model", "=", "False", ",", "require_success", "=", "True", "\n", ")", ":", "\n", "\n", "        ", "random_seed", ".", "set_random_seed", "(", "1", ")", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "DEBUG", ")", "\n", "\n", "env", ",", "_", "=", "self", ".", "make_vec_env_and_successful_return", "(", "test", "=", "False", ")", "\n", "test_env", ",", "successful_return", "=", "self", ".", "make_vec_env_and_successful_return", "(", "test", "=", "True", ")", "\n", "agent", "=", "self", ".", "make_agent", "(", "env", ",", "gpu", ")", "\n", "\n", "if", "load_model", ":", "\n", "            ", "print", "(", "\"Load agent from\"", ",", "self", ".", "agent_dirname", ")", "\n", "agent", ".", "load", "(", "self", ".", "agent_dirname", ")", "\n", "agent", ".", "replay_buffer", ".", "load", "(", "self", ".", "rbuf_filename", ")", "\n", "\n", "# Train", "\n", "", "train_agent_batch_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "steps", "=", "steps", ",", "\n", "outdir", "=", "self", ".", "tmpdir", ",", "\n", "eval_interval", "=", "200", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "5", ",", "\n", "successful_score", "=", "1", ",", "\n", "eval_env", "=", "test_env", ",", "\n", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n", "# Test", "\n", "n_test_runs", "=", "5", "\n", "eval_returns", ",", "_", "=", "batch_run_evaluation_episodes", "(", "\n", "test_env", ",", "\n", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "n_test_runs", ",", "\n", ")", "\n", "test_env", ".", "close", "(", ")", "\n", "n_succeeded", "=", "np", ".", "sum", "(", "np", ".", "asarray", "(", "eval_returns", ")", ">=", "successful_return", ")", "\n", "if", "require_success", ":", "\n", "            ", "assert", "n_succeeded", "==", "n_test_runs", "\n", "\n", "# Save", "\n", "", "agent", ".", "save", "(", "self", ".", "agent_dirname", ")", "\n", "agent", ".", "replay_buffer", ".", "save", "(", "self", ".", "rbuf_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestBatchTrainingMixin.test_batch_training_gpu": [[159, 164], ["basetest_training._TestBatchTrainingMixin._test_batch_training", "basetest_training._TestBatchTrainingMixin._test_batch_training"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestBatchTrainingMixin._test_batch_training", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestBatchTrainingMixin._test_batch_training"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_batch_training_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_batch_training", "(", "0", ",", "steps", "=", "100000", ")", "\n", "self", ".", "_test_batch_training", "(", "0", ",", "steps", "=", "0", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestBatchTrainingMixin.test_batch_training_cpu": [[165, 169], ["basetest_training._TestBatchTrainingMixin._test_batch_training", "basetest_training._TestBatchTrainingMixin._test_batch_training"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestBatchTrainingMixin._test_batch_training", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestBatchTrainingMixin._test_batch_training"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_batch_training_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_batch_training", "(", "-", "1", ",", "steps", "=", "100000", ")", "\n", "self", ".", "_test_batch_training", "(", "-", "1", ",", "steps", "=", "0", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestBatchTrainingMixin.test_batch_training_gpu_fast": [[170, 174], ["basetest_training._TestBatchTrainingMixin._test_batch_training", "basetest_training._TestBatchTrainingMixin._test_batch_training"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestBatchTrainingMixin._test_batch_training", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestBatchTrainingMixin._test_batch_training"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_batch_training_gpu_fast", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_batch_training", "(", "0", ",", "steps", "=", "10", ",", "require_success", "=", "False", ")", "\n", "self", ".", "_test_batch_training", "(", "0", ",", "steps", "=", "0", ",", "load_model", "=", "True", ",", "require_success", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestBatchTrainingMixin.test_batch_training_cpu_fast": [[175, 178], ["basetest_training._TestBatchTrainingMixin._test_batch_training", "basetest_training._TestBatchTrainingMixin._test_batch_training"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestBatchTrainingMixin._test_batch_training", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestBatchTrainingMixin._test_batch_training"], ["", "def", "test_batch_training_cpu_fast", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_batch_training", "(", "-", "1", ",", "steps", "=", "10", ",", "require_success", "=", "False", ")", "\n", "self", ".", "_test_batch_training", "(", "-", "1", ",", "steps", "=", "0", ",", "load_model", "=", "True", ",", "require_success", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestActorLearnerTrainingMixin._test_actor_learner_training": [[185, 273], ["logging.basicConfig", "basetest_training._TestActorLearnerTrainingMixin.make_env_and_successful_return", "basetest_training._TestActorLearnerTrainingMixin.make_agent", "unittest.mock.Mock", "unittest.mock.Mock", "enumerate", "enumerate", "os.path.join", "os.path.join", "basetest_training._TestActorLearnerTrainingMixin.make_env_and_successful_return", "basetest_training._TestActorLearnerTrainingMixin.setup_actor_learner_training", "poller.start", "learner.start", "pfrl.experiments.train_agent_async", "learner.stop", "learner.join", "poller.stop", "poller.join", "os.path.exists", "os.path.exists", "os.path.exists"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_agent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN.setup_actor_learner_training", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stress_tests.stress_test_start.start", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stress_tests.stress_test_start.start", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent_async.train_agent_async", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.stoppable_thread.StoppableThread.stop", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.stoppable_thread.StoppableThread.stop"], ["def", "_test_actor_learner_training", "(", "self", ",", "gpu", ",", "steps", "=", "100000", ",", "require_success", "=", "True", ")", ":", "\n", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "DEBUG", ")", "\n", "\n", "test_env", ",", "successful_return", "=", "self", ".", "make_env_and_successful_return", "(", "test", "=", "True", ")", "\n", "agent", "=", "self", ".", "make_agent", "(", "test_env", ",", "gpu", ")", "\n", "\n", "# cumulative_steps init to 0", "\n", "assert", "agent", ".", "cumulative_steps", "==", "0", "\n", "\n", "def", "make_env", "(", "process_idx", ",", "test", ")", ":", "\n", "            ", "env", ",", "_", "=", "self", ".", "make_env_and_successful_return", "(", "test", "=", "test", ")", "\n", "return", "env", "\n", "\n", "", "step_hook", "=", "mock", ".", "Mock", "(", ")", "\n", "optimizer_step_hook", "=", "mock", ".", "Mock", "(", ")", "\n", "\n", "# Train", "\n", "if", "steps", ">", "0", ":", "\n", "            ", "(", "\n", "make_actor", ",", "\n", "learner", ",", "\n", "poller", ",", "\n", "exception_event", ",", "\n", ")", "=", "agent", ".", "setup_actor_learner_training", "(", "\n", "n_actors", "=", "2", ",", "\n", "step_hooks", "=", "[", "step_hook", "]", ",", "\n", "optimizer_step_hooks", "=", "[", "optimizer_step_hook", "]", ",", "\n", ")", "\n", "\n", "poller", ".", "start", "(", ")", "\n", "learner", ".", "start", "(", ")", "\n", "train_agent_async", "(", "\n", "processes", "=", "2", ",", "\n", "steps", "=", "steps", ",", "\n", "outdir", "=", "self", ".", "tmpdir", ",", "\n", "eval_interval", "=", "200", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "5", ",", "\n", "successful_score", "=", "successful_return", ",", "\n", "make_env", "=", "make_env", ",", "\n", "make_agent", "=", "make_actor", ",", "\n", "stop_event", "=", "learner", ".", "stop_event", ",", "\n", "exception_event", "=", "exception_event", ",", "\n", ")", "\n", "learner", ".", "stop", "(", ")", "\n", "learner", ".", "join", "(", ")", "\n", "poller", ".", "stop", "(", ")", "\n", "poller", ".", "join", "(", ")", "\n", "\n", "# Test", "\n", "\n", "# Because in actor-learner traininig the model can be updated between", "\n", "# evaluation and saving, it is difficult to guarantee the learned", "\n", "# model successfully passes the test.", "\n", "# Thus we only check if the training was successful.", "\n", "\n", "# As the test can finish before running all the steps,", "\n", "# we can only test the range", "\n", "", "assert", "agent", ".", "cumulative_steps", ">", "0", "\n", "assert", "agent", ".", "cumulative_steps", "<=", "steps", "+", "1", "\n", "\n", "# Unlike the non-actor-learner cases, the step_hooks and", "\n", "# optimizer_step_hooks are only called when the update happens", "\n", "# when we do a fast test, the update may not be triggered due to", "\n", "# limited amount of experience, the call_count can be 0 in such case", "\n", "assert", "step_hook", ".", "call_count", ">=", "0", "\n", "assert", "step_hook", ".", "call_count", "<=", "steps", "/", "agent", ".", "update_interval", "\n", "assert", "optimizer_step_hook", ".", "call_count", "==", "step_hook", ".", "call_count", "\n", "\n", "for", "i", ",", "call", "in", "enumerate", "(", "step_hook", ".", "call_args_list", ")", ":", "\n", "            ", "args", ",", "kwargs", "=", "call", "\n", "assert", "args", "[", "0", "]", "is", "None", "\n", "assert", "args", "[", "1", "]", "is", "agent", "\n", "assert", "args", "[", "2", "]", "==", "(", "i", "+", "1", ")", "*", "agent", ".", "update_interval", "\n", "\n", "", "for", "i", ",", "call", "in", "enumerate", "(", "optimizer_step_hook", ".", "call_args_list", ")", ":", "\n", "            ", "args", ",", "kwargs", "=", "call", "\n", "assert", "args", "[", "0", "]", "is", "None", "\n", "assert", "args", "[", "1", "]", "is", "agent", "\n", "assert", "args", "[", "2", "]", "==", "i", "+", "1", "\n", "\n", "", "successful_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdir", ",", "\"successful\"", ")", "\n", "finished_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdir", ",", "\"{}_finish\"", ".", "format", "(", "steps", ")", ")", "\n", "if", "require_success", ":", "\n", "            ", "assert", "os", ".", "path", ".", "exists", "(", "successful_path", ")", "\n", "", "else", ":", "\n", "            ", "assert", "os", ".", "path", ".", "exists", "(", "successful_path", ")", "or", "os", ".", "path", ".", "exists", "(", "finished_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestActorLearnerTrainingMixin.test_actor_learner_training_gpu": [[274, 279], ["basetest_training._TestActorLearnerTrainingMixin._test_actor_learner_training"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestActorLearnerTrainingMixin._test_actor_learner_training"], ["", "", "@", "pytest", ".", "mark", ".", "async_", "\n", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_actor_learner_training_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_actor_learner_training", "(", "0", ",", "steps", "=", "100000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestActorLearnerTrainingMixin.test_actor_learner_training_cpu": [[280, 284], ["basetest_training._TestActorLearnerTrainingMixin._test_actor_learner_training"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestActorLearnerTrainingMixin._test_actor_learner_training"], ["", "@", "pytest", ".", "mark", ".", "async_", "\n", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_actor_learner_training_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_actor_learner_training", "(", "-", "1", ",", "steps", "=", "100000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestActorLearnerTrainingMixin.test_actor_learner_training_gpu_fast": [[285, 289], ["basetest_training._TestActorLearnerTrainingMixin._test_actor_learner_training"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestActorLearnerTrainingMixin._test_actor_learner_training"], ["", "@", "pytest", ".", "mark", ".", "async_", "\n", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_actor_learner_training_gpu_fast", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_actor_learner_training", "(", "0", ",", "steps", "=", "10", ",", "require_success", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestActorLearnerTrainingMixin.test_actor_learner_training_cpu_fast": [[290, 293], ["basetest_training._TestActorLearnerTrainingMixin._test_actor_learner_training"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_training._TestActorLearnerTrainingMixin._test_actor_learner_training"], ["", "@", "pytest", ".", "mark", ".", "async_", "\n", "def", "test_actor_learner_training_cpu_fast", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_actor_learner_training", "(", "-", "1", ",", "steps", "=", "10", ",", "require_success", "=", "False", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_double_pal.TestDoublePALOnDiscreteABC.make_dqn_agent": [[10, 20], ["pfrl.agents.double_pal.DoublePAL"], "methods", ["None"], ["    ", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "DoublePAL", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_double_pal.TestDoublePALOnContinuousABC.make_dqn_agent": [[26, 36], ["pfrl.agents.double_pal.DoublePAL"], "methods", ["None"], ["    ", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "DoublePAL", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_double_pal.TestDoublePALOnDiscretePOABC.make_dqn_agent": [[42, 53], ["pfrl.agents.double_pal.DoublePAL"], "methods", ["None"], ["    ", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "DoublePAL", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", "recurrent", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_double_categorical_dqn.TestCategoricalDoubleDQNOnDiscreteABC.make_q_func": [[45, 47], ["test_double_categorical_dqn.make_distrib_ff_q_func"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.make_distrib_ff_q_func"], ["    ", "def", "make_q_func", "(", "self", ",", "env", ")", ":", "\n", "        ", "return", "make_distrib_ff_q_func", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_double_categorical_dqn.TestCategoricalDoubleDQNOnDiscreteABC.make_dqn_agent": [[48, 58], ["pfrl.agents.CategoricalDoubleDQN"], "methods", ["None"], ["", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "CategoricalDoubleDQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_double_categorical_dqn.TestCategoricalDoubleDQNOnDiscretePOABC.make_q_func": [[63, 65], ["test_double_categorical_dqn.make_distrib_recurrent_q_func"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.make_distrib_recurrent_q_func"], ["    ", "def", "make_q_func", "(", "self", ",", "env", ")", ":", "\n", "        ", "return", "make_distrib_recurrent_q_func", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_double_categorical_dqn.TestCategoricalDoubleDQNOnDiscretePOABC.make_dqn_agent": [[66, 77], ["pfrl.agents.CategoricalDoubleDQN"], "methods", ["None"], ["", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "CategoricalDoubleDQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", "recurrent", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_double_categorical_dqn.make_distrib_ff_q_func": [[9, 21], ["pfrl.q_functions.DistributionalFCStateQFunctionWithDiscreteAction"], "function", ["None"], ["def", "make_distrib_ff_q_func", "(", "env", ")", ":", "\n", "    ", "n_atoms", "=", "51", "\n", "v_max", "=", "10", "\n", "v_min", "=", "-", "10", "\n", "return", "pfrl", ".", "q_functions", ".", "DistributionalFCStateQFunctionWithDiscreteAction", "(", "# NOQA", "\n", "env", ".", "observation_space", ".", "low", ".", "size", ",", "\n", "env", ".", "action_space", ".", "n", ",", "\n", "n_atoms", "=", "n_atoms", ",", "\n", "v_min", "=", "v_min", ",", "\n", "v_max", "=", "v_max", ",", "\n", "n_hidden_channels", "=", "20", ",", "\n", "n_hidden_layers", "=", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_double_categorical_dqn.make_distrib_recurrent_q_func": [[24, 38], ["pfrl.nn.RecurrentSequential", "torch.LSTM", "pfrl.q_functions.DistributionalFCStateQFunctionWithDiscreteAction"], "function", ["None"], ["", "def", "make_distrib_recurrent_q_func", "(", "env", ")", ":", "\n", "    ", "n_atoms", "=", "51", "\n", "v_max", "=", "10", "\n", "v_min", "=", "-", "10", "\n", "return", "pfrl", ".", "nn", ".", "RecurrentSequential", "(", "\n", "nn", ".", "LSTM", "(", "input_size", "=", "env", ".", "observation_space", ".", "low", ".", "size", ",", "hidden_size", "=", "20", ")", ",", "\n", "pfrl", ".", "q_functions", ".", "DistributionalFCStateQFunctionWithDiscreteAction", "(", "# NOQA", "\n", "20", ",", "\n", "env", ".", "action_space", ".", "n", ",", "\n", "n_atoms", "=", "n_atoms", ",", "\n", "v_min", "=", "v_min", ",", "\n", "v_max", "=", "v_max", ",", "\n", "n_hidden_channels", "=", "None", ",", "\n", "n_hidden_layers", "=", "0", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_soft_actor_critic.TestSoftActorCritic.setUp": [[24, 29], ["pytest.fixture", "tempfile.mkdtemp", "os.path.join"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "episodic", ")", ":", "\n", "        ", "self", ".", "episodic", "=", "episodic", "\n", "self", ".", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "self", ".", "agent_dirname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdir", ",", "\"agent_final\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_soft_actor_critic.TestSoftActorCritic.test_abc_cpu": [[30, 35], ["print", "test_soft_actor_critic.TestSoftActorCritic._test_abc", "test_soft_actor_critic.TestSoftActorCritic._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_abc_cpu", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"thing\"", ")", "\n", "self", ".", "_test_abc", "(", ")", "\n", "self", ".", "_test_abc", "(", "steps", "=", "0", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_soft_actor_critic.TestSoftActorCritic.test_abc_gpu": [[36, 40], ["test_soft_actor_critic.TestSoftActorCritic._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_abc_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_soft_actor_critic.TestSoftActorCritic.test_abc_fast_cpu": [[41, 44], ["test_soft_actor_critic.TestSoftActorCritic._test_abc", "test_soft_actor_critic.TestSoftActorCritic._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "def", "test_abc_fast_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "steps", "=", "100", ",", "require_success", "=", "False", ")", "\n", "self", ".", "_test_abc", "(", "steps", "=", "0", ",", "require_success", "=", "False", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_soft_actor_critic.TestSoftActorCritic.test_abc_fast_gpu": [[45, 48], ["test_soft_actor_critic.TestSoftActorCritic._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_abc_fast_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "steps", "=", "100", ",", "require_success", "=", "False", ",", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_soft_actor_critic.TestSoftActorCritic.test_abc_batch_cpu": [[49, 53], ["test_soft_actor_critic.TestSoftActorCritic._test_abc_batch", "test_soft_actor_critic.TestSoftActorCritic._test_abc_batch"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_abc_batch_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc_batch", "(", ")", "\n", "self", ".", "_test_abc_batch", "(", "steps", "=", "0", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_soft_actor_critic.TestSoftActorCritic.test_abc_batch_gpu": [[54, 58], ["test_soft_actor_critic.TestSoftActorCritic._test_abc_batch"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_abc_batch_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc_batch", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_soft_actor_critic.TestSoftActorCritic.test_abc_batch_fast_cpu": [[59, 62], ["test_soft_actor_critic.TestSoftActorCritic._test_abc_batch", "test_soft_actor_critic.TestSoftActorCritic._test_abc_batch"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch"], ["", "def", "test_abc_batch_fast_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc_batch", "(", "steps", "=", "100", ",", "require_success", "=", "False", ")", "\n", "self", ".", "_test_abc_batch", "(", "steps", "=", "0", ",", "require_success", "=", "False", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_soft_actor_critic.TestSoftActorCritic.test_abc_batch_fast_gpu": [[63, 66], ["test_soft_actor_critic.TestSoftActorCritic._test_abc_batch"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_abc_batch_fast_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc_batch", "(", "steps", "=", "100", ",", "require_success", "=", "False", ",", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_soft_actor_critic.TestSoftActorCritic._test_abc": [[67, 109], ["test_soft_actor_critic.TestSoftActorCritic.make_env_and_successful_return", "test_soft_actor_critic.TestSoftActorCritic.make_env_and_successful_return", "test_soft_actor_critic.TestSoftActorCritic.make_agent", "pfrl.experiments.train_agent_with_evaluation", "pfrl.experiments.evaluator.run_evaluation_episodes", "test_soft_actor_critic.TestSoftActorCritic.save", "print", "test_soft_actor_critic.TestSoftActorCritic.load", "numpy.sum", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_agent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent.train_agent_with_evaluation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.run_evaluation_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "def", "_test_abc", "(", "self", ",", "steps", "=", "100000", ",", "require_success", "=", "True", ",", "gpu", "=", "-", "1", ",", "load_model", "=", "False", ")", ":", "\n", "\n", "        ", "env", ",", "_", "=", "self", ".", "make_env_and_successful_return", "(", "test", "=", "False", ")", "\n", "test_env", ",", "successful_return", "=", "self", ".", "make_env_and_successful_return", "(", "test", "=", "True", ")", "\n", "\n", "agent", "=", "self", ".", "make_agent", "(", "env", ",", "gpu", ")", "\n", "\n", "if", "load_model", ":", "\n", "            ", "print", "(", "\"Load agent from\"", ",", "self", ".", "agent_dirname", ")", "\n", "agent", ".", "load", "(", "self", ".", "agent_dirname", ")", "\n", "\n", "", "max_episode_len", "=", "None", "if", "self", ".", "episodic", "else", "2", "\n", "\n", "# Train", "\n", "train_agent_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "eval_env", "=", "test_env", ",", "\n", "steps", "=", "steps", ",", "\n", "outdir", "=", "self", ".", "tmpdir", ",", "\n", "eval_interval", "=", "200", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "5", ",", "\n", "successful_score", "=", "successful_return", ",", "\n", "train_max_episode_len", "=", "max_episode_len", ",", "\n", ")", "\n", "\n", "# Test", "\n", "n_test_runs", "=", "5", "\n", "eval_returns", ",", "_", "=", "run_evaluation_episodes", "(", "\n", "test_env", ",", "\n", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "n_test_runs", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", ")", "\n", "if", "require_success", ":", "\n", "            ", "n_succeeded", "=", "np", ".", "sum", "(", "np", ".", "asarray", "(", "eval_returns", ")", ">=", "successful_return", ")", "\n", "assert", "n_succeeded", "==", "n_test_runs", "\n", "\n", "# Save", "\n", "", "agent", ".", "save", "(", "self", ".", "agent_dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_soft_actor_critic.TestSoftActorCritic._test_abc_batch": [[110, 156], ["test_soft_actor_critic.TestSoftActorCritic.make_vec_env_and_successful_return", "test_soft_actor_critic.TestSoftActorCritic.make_vec_env_and_successful_return", "test_soft_actor_critic.TestSoftActorCritic.make_agent", "pfrl.experiments.train_agent_batch_with_evaluation", "env.close", "pfrl.experiments.evaluator.batch_run_evaluation_episodes", "test_env.close", "test_soft_actor_critic.TestSoftActorCritic.save", "print", "test_soft_actor_critic.TestSoftActorCritic.load", "numpy.sum", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_vec_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_vec_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_agent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent_batch.train_agent_batch_with_evaluation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.batch_run_evaluation_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "def", "_test_abc_batch", "(", "\n", "self", ",", "steps", "=", "100000", ",", "require_success", "=", "True", ",", "gpu", "=", "-", "1", ",", "load_model", "=", "False", "\n", ")", ":", "\n", "\n", "        ", "env", ",", "_", "=", "self", ".", "make_vec_env_and_successful_return", "(", "test", "=", "False", ")", "\n", "test_env", ",", "successful_return", "=", "self", ".", "make_vec_env_and_successful_return", "(", "test", "=", "True", ")", "\n", "\n", "agent", "=", "self", ".", "make_agent", "(", "env", ",", "gpu", ")", "\n", "\n", "if", "load_model", ":", "\n", "            ", "print", "(", "\"Load agent from\"", ",", "self", ".", "agent_dirname", ")", "\n", "agent", ".", "load", "(", "self", ".", "agent_dirname", ")", "\n", "\n", "", "max_episode_len", "=", "None", "if", "self", ".", "episodic", "else", "2", "\n", "\n", "# Train", "\n", "train_agent_batch_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "eval_env", "=", "test_env", ",", "\n", "steps", "=", "steps", ",", "\n", "outdir", "=", "self", ".", "tmpdir", ",", "\n", "eval_interval", "=", "200", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "5", ",", "\n", "successful_score", "=", "successful_return", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n", "# Test", "\n", "n_test_runs", "=", "5", "\n", "eval_returns", ",", "_", "=", "batch_run_evaluation_episodes", "(", "\n", "test_env", ",", "\n", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "n_test_runs", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", ")", "\n", "test_env", ".", "close", "(", ")", "\n", "if", "require_success", ":", "\n", "            ", "n_succeeded", "=", "np", ".", "sum", "(", "np", ".", "asarray", "(", "eval_returns", ")", ">=", "successful_return", ")", "\n", "assert", "n_succeeded", "==", "n_test_runs", "\n", "\n", "# Save", "\n", "", "agent", ".", "save", "(", "self", ".", "agent_dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_soft_actor_critic.TestSoftActorCritic.make_agent": [[157, 227], ["torch.nn.Sequential", "policy[].weight.detach().mul_", "torch.optim.Adam", "test_soft_actor_critic.TestSoftActorCritic.make_agent.make_q_func_with_optimizer"], "methods", ["None"], ["", "def", "make_agent", "(", "self", ",", "env", ",", "gpu", ")", ":", "\n", "        ", "obs_size", "=", "env", ".", "observation_space", ".", "low", ".", "size", "\n", "action_size", "=", "env", ".", "action_space", ".", "low", ".", "size", "\n", "hidden_size", "=", "20", "\n", "\n", "def", "squashed_diagonal_gaussian_head", "(", "x", ")", ":", "\n", "            ", "assert", "x", ".", "shape", "[", "-", "1", "]", "==", "action_size", "*", "2", "\n", "mean", ",", "log_scale", "=", "torch", ".", "split", "(", "x", ",", "int", "(", "list", "(", "x", ".", "size", "(", ")", ")", "[", "-", "1", "]", "/", "2", ")", ",", "dim", "=", "1", ")", "\n", "log_scale", "=", "torch", ".", "clamp", "(", "log_scale", ",", "-", "20.0", ",", "2.0", ")", "\n", "var", "=", "torch", ".", "exp", "(", "log_scale", "*", "2", ")", "\n", "base_distribution", "=", "distributions", ".", "Independent", "(", "\n", "distributions", ".", "Normal", "(", "loc", "=", "mean", ",", "scale", "=", "torch", ".", "sqrt", "(", "var", ")", ")", ",", "1", "\n", ")", "\n", "# cache_size=1 is required for numerical stability", "\n", "return", "distributions", ".", "transformed_distribution", ".", "TransformedDistribution", "(", "\n", "base_distribution", ",", "\n", "[", "distributions", ".", "transforms", ".", "TanhTransform", "(", "cache_size", "=", "1", ")", "]", ",", "\n", ")", "\n", "\n", "", "policy", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "\n", "hidden_size", ",", "\n", "action_size", "*", "2", ",", "\n", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "Lambda", "(", "squashed_diagonal_gaussian_head", ")", ",", "\n", ")", "\n", "policy", "[", "2", "]", ".", "weight", ".", "detach", "(", ")", ".", "mul_", "(", "1e-1", ")", "\n", "policy_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "policy", ".", "parameters", "(", ")", ")", "\n", "\n", "def", "make_q_func_with_optimizer", "(", ")", ":", "\n", "            ", "q_func", "=", "nn", ".", "Sequential", "(", "\n", "pfrl", ".", "nn", ".", "ConcatObsAndAction", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "obs_size", "+", "action_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ",", "\n", ")", "\n", "q_func", "[", "3", "]", ".", "weight", ".", "detach", "(", ")", ".", "mul_", "(", "1e-1", ")", "\n", "q_func_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "q_func", ".", "parameters", "(", ")", ",", "lr", "=", "1e-2", ")", "\n", "return", "q_func", ",", "q_func_optimizer", "\n", "\n", "", "q_func1", ",", "q_func1_optimizer", "=", "make_q_func_with_optimizer", "(", ")", "\n", "q_func2", ",", "q_func2_optimizer", "=", "make_q_func_with_optimizer", "(", ")", "\n", "\n", "rbuf", "=", "pfrl", ".", "replay_buffers", ".", "ReplayBuffer", "(", "10", "**", "6", ")", "\n", "\n", "def", "burnin_action_func", "(", ")", ":", "\n", "            ", "return", "np", ".", "random", ".", "uniform", "(", "\n", "env", ".", "action_space", ".", "low", ",", "env", ".", "action_space", ".", "high", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "agent", "=", "pfrl", ".", "agents", ".", "SoftActorCritic", "(", "\n", "policy", "=", "policy", ",", "\n", "q_func1", "=", "q_func1", ",", "\n", "q_func2", "=", "q_func2", ",", "\n", "policy_optimizer", "=", "policy_optimizer", ",", "\n", "q_func1_optimizer", "=", "q_func1_optimizer", ",", "\n", "q_func2_optimizer", "=", "q_func2_optimizer", ",", "\n", "replay_buffer", "=", "rbuf", ",", "\n", "gamma", "=", "0.5", ",", "\n", "minibatch_size", "=", "100", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "burnin_action_func", "=", "burnin_action_func", ",", "\n", "entropy_target", "=", "-", "action_size", ",", "\n", "max_grad_norm", "=", "1.0", ",", "\n", ")", "\n", "\n", "return", "agent", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_soft_actor_critic.TestSoftActorCritic.make_env_and_successful_return": [[228, 235], ["pfrl.envs.abc.ABC"], "methods", ["None"], ["", "def", "make_env_and_successful_return", "(", "self", ",", "test", ")", ":", "\n", "        ", "env", "=", "ABC", "(", "\n", "discrete", "=", "False", ",", "\n", "episodic", "=", "self", ".", "episodic", "or", "test", ",", "\n", "deterministic", "=", "test", ",", "\n", ")", "\n", "return", "env", ",", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_soft_actor_critic.TestSoftActorCritic.make_vec_env_and_successful_return": [[236, 242], ["pfrl.envs.MultiprocessVectorEnv", "test_soft_actor_critic.TestSoftActorCritic.make_env_and_successful_return", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return"], ["", "def", "make_vec_env_and_successful_return", "(", "self", ",", "test", ",", "num_envs", "=", "3", ")", ":", "\n", "        ", "def", "make_env", "(", ")", ":", "\n", "            ", "return", "self", ".", "make_env_and_successful_return", "(", "test", ")", "[", "0", "]", "\n", "\n", "", "vec_env", "=", "pfrl", ".", "envs", ".", "MultiprocessVectorEnv", "(", "[", "make_env", "for", "_", "in", "range", "(", "num_envs", ")", "]", ")", "\n", "return", "vec_env", ",", "1.0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_reinforce.TestREINFORCE.setUp": [[23, 31], ["pytest.fixture", "tempfile.mkdtemp", "logging.basicConfig"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "discrete", ",", "use_lstm", ",", "batchsize", ",", "backward_separately", ")", ":", "\n", "        ", "self", ".", "discrete", "=", "discrete", "\n", "self", ".", "use_lstm", "=", "use_lstm", "\n", "self", ".", "batchsize", "=", "batchsize", "\n", "self", ".", "backward_separately", "=", "backward_separately", "\n", "self", ".", "outdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "DEBUG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_reinforce.TestREINFORCE.test_abc_cpu": [[32, 35], ["test_reinforce.TestREINFORCE._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_abc_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "self", ".", "use_lstm", ",", "discrete", "=", "self", ".", "discrete", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_reinforce.TestREINFORCE.test_abc_gpu": [[36, 40], ["test_reinforce.TestREINFORCE._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_abc_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "self", ".", "use_lstm", ",", "discrete", "=", "self", ".", "discrete", ",", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_reinforce.TestREINFORCE.test_abc_fast_cpu": [[41, 44], ["test_reinforce.TestREINFORCE._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "def", "test_abc_fast_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "\n", "self", ".", "use_lstm", ",", "discrete", "=", "self", ".", "discrete", ",", "steps", "=", "10", ",", "require_success", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_reinforce.TestREINFORCE.test_abc_fast_gpu": [[46, 54], ["test_reinforce.TestREINFORCE._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_abc_fast_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "\n", "self", ".", "use_lstm", ",", "\n", "discrete", "=", "self", ".", "discrete", ",", "\n", "steps", "=", "10", ",", "\n", "require_success", "=", "False", ",", "\n", "gpu", "=", "0", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_reinforce.TestREINFORCE._test_abc": [[56, 141], ["test_reinforce.TestREINFORCE._test_abc.make_env"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["", "def", "_test_abc", "(", "\n", "self", ",", "use_lstm", ",", "discrete", "=", "True", ",", "steps", "=", "1000000", ",", "require_success", "=", "True", ",", "gpu", "=", "-", "1", "\n", ")", ":", "\n", "        ", "def", "make_env", "(", "process_idx", ",", "test", ")", ":", "\n", "            ", "size", "=", "2", "\n", "return", "ABC", "(", "\n", "size", "=", "size", ",", "\n", "discrete", "=", "discrete", ",", "\n", "episodic", "=", "True", ",", "\n", "partially_observable", "=", "self", ".", "use_lstm", ",", "\n", "deterministic", "=", "test", ",", "\n", ")", "\n", "\n", "", "sample_env", "=", "make_env", "(", "0", ",", "False", ")", "\n", "action_space", "=", "sample_env", ".", "action_space", "\n", "obs_space", "=", "sample_env", ".", "observation_space", "\n", "\n", "hidden_size", "=", "20", "\n", "obs_size", "=", "obs_space", ".", "low", ".", "size", "\n", "if", "discrete", ":", "\n", "            ", "output_size", "=", "action_space", ".", "n", "\n", "head", "=", "SoftmaxCategoricalHead", "(", ")", "\n", "", "else", ":", "\n", "            ", "output_size", "=", "action_space", ".", "low", ".", "size", "\n", "head", "=", "GaussianHeadWithStateIndependentCovariance", "(", "\n", "output_size", ",", "var_type", "=", "\"diagonal\"", "\n", ")", "\n", "", "if", "use_lstm", ":", "\n", "            ", "model", "=", "pfrl", ".", "nn", ".", "RecurrentSequential", "(", "\n", "nn", ".", "LSTM", "(", "\n", "num_layers", "=", "1", ",", "\n", "input_size", "=", "obs_size", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", ",", "\n", "head", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", ",", "\n", "head", ",", "\n", ")", "\n", "", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ")", "\n", "beta", "=", "1e-2", "\n", "agent", "=", "pfrl", ".", "agents", ".", "REINFORCE", "(", "\n", "model", ",", "\n", "opt", ",", "\n", "gpu", "=", "gpu", ",", "\n", "beta", "=", "beta", ",", "\n", "batchsize", "=", "self", ".", "batchsize", ",", "\n", "backward_separately", "=", "self", ".", "backward_separately", ",", "\n", "act_deterministically", "=", "True", ",", "\n", "recurrent", "=", "use_lstm", ",", "\n", ")", "\n", "\n", "pfrl", ".", "experiments", ".", "train_agent_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "make_env", "(", "0", ",", "False", ")", ",", "\n", "eval_env", "=", "make_env", "(", "0", ",", "True", ")", ",", "\n", "outdir", "=", "self", ".", "outdir", ",", "\n", "steps", "=", "steps", ",", "\n", "train_max_episode_len", "=", "2", ",", "\n", "eval_interval", "=", "500", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "5", ",", "\n", "successful_score", "=", "1", ",", "\n", ")", "\n", "\n", "# Test", "\n", "env", "=", "make_env", "(", "0", ",", "True", ")", "\n", "n_test_runs", "=", "5", "\n", "eval_returns", ",", "_", "=", "run_evaluation_episodes", "(", "\n", "env", ",", "\n", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "n_test_runs", ",", "\n", ")", "\n", "if", "require_success", ":", "\n", "            ", "successful_return", "=", "1", "\n", "n_succeeded", "=", "np", ".", "sum", "(", "np", ".", "asarray", "(", "eval_returns", ")", ">=", "successful_return", ")", "\n", "assert", "n_succeeded", "==", "n_test_runs", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases.setup": [[60, 65], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setup", "(", "self", ",", "batch_size", ",", "n_atoms", ",", "v_range", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_atoms", "=", "n_atoms", "\n", "self", ".", "v_range", "=", "v_range", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases._test": [[66, 101], ["numpy.linspace", "numpy.random.normal().astype", "numpy.asarray", "test_categorical_dqn._apply_categorical_projection_naive", "numpy.testing.assert_allclose", "pfrl.agents.categorical_dqn._apply_categorical_projection().detach().cpu().numpy", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.random.dirichlet().astype", "_apply_categorical_projection_naive.sum", "numpy.ones", "pfrl.agents.categorical_dqn._apply_categorical_projection().detach().cpu().numpy.sum", "numpy.ones", "numpy.random.normal", "pfrl.agents.categorical_dqn._apply_categorical_projection().detach().cpu", "numpy.random.dirichlet", "pfrl.agents.categorical_dqn._apply_categorical_projection().detach", "numpy.ones", "pfrl.agents.categorical_dqn._apply_categorical_projection", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn._apply_categorical_projection_naive", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.categorical_dqn._apply_categorical_projection"], ["", "def", "_test", "(", "self", ",", "device", ")", ":", "\n", "        ", "v_min", ",", "v_max", "=", "self", ".", "v_range", "\n", "z", "=", "np", ".", "linspace", "(", "v_min", ",", "v_max", ",", "num", "=", "self", ".", "n_atoms", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "self", ".", "batch_size", ",", "self", ".", "n_atoms", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "y_probs", "=", "np", ".", "asarray", "(", "\n", "np", ".", "random", ".", "dirichlet", "(", "\n", "alpha", "=", "np", ".", "ones", "(", "self", ".", "n_atoms", ")", ",", "size", "=", "self", ".", "batch_size", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "\n", "\n", "# Naive implementation as ground truths", "\n", "proj_gt", "=", "_apply_categorical_projection_naive", "(", "y", ",", "y_probs", ",", "z", ")", "\n", "# Projected probabilities should sum to one", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "proj_gt", ".", "sum", "(", "axis", "=", "1", ")", ",", "np", ".", "ones", "(", "self", ".", "batch_size", ",", "dtype", "=", "np", ".", "float32", ")", ",", "atol", "=", "1e-5", "\n", ")", "\n", "\n", "# Batch implementation to test", "\n", "proj", "=", "(", "\n", "categorical_dqn", ".", "_apply_categorical_projection", "(", "\n", "torch", ".", "as_tensor", "(", "y", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "as_tensor", "(", "y_probs", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "as_tensor", "(", "z", ",", "device", "=", "device", ")", ",", "\n", ")", "\n", ".", "detach", "(", ")", "\n", ".", "cpu", "(", ")", "\n", ".", "numpy", "(", ")", "\n", ")", "\n", "# Projected probabilities should sum to one", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "proj", ".", "sum", "(", "axis", "=", "1", ")", ",", "np", ".", "ones", "(", "self", ".", "batch_size", ",", "dtype", "=", "np", ".", "float32", ")", ",", "atol", "=", "1e-5", "\n", ")", "\n", "\n", "# Both should be equal", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "proj", ",", "proj_gt", ",", "atol", "=", "1e-5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases.test_cpu": [[102, 104], ["test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases._test", "torch.device"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestApplyCategoricalProjectionToManualCases._test", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["", "def", "test_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test", "(", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases.test_gpu": [[105, 108], ["test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases._test", "torch.device"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestApplyCategoricalProjectionToManualCases._test", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test", "(", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestApplyCategoricalProjectionToManualCases._test": [[111, 164], ["numpy.linspace", "numpy.asarray", "numpy.asarray", "numpy.asarray", "pfrl.agents.categorical_dqn._apply_categorical_projection().detach().cpu().numpy", "numpy.testing.assert_allclose", "pfrl.agents.categorical_dqn._apply_categorical_projection().detach().cpu", "pfrl.agents.categorical_dqn._apply_categorical_projection().detach", "pfrl.agents.categorical_dqn._apply_categorical_projection", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.categorical_dqn._apply_categorical_projection"], ["    ", "def", "_test", "(", "self", ",", "device", ")", ":", "\n", "        ", "v_min", ",", "v_max", "=", "(", "-", "1", ",", "1", ")", "\n", "n_atoms", "=", "3", "\n", "z", "=", "np", ".", "linspace", "(", "v_min", ",", "v_max", ",", "num", "=", "n_atoms", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "asarray", "(", "\n", "[", "\n", "[", "-", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "-", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "-", "0.5", ",", "0", ",", "1", "]", ",", "\n", "[", "-", "0.5", ",", "0", ",", "0.5", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "y_probs", "=", "np", ".", "asarray", "(", "\n", "[", "\n", "[", "0.5", ",", "0.2", ",", "0.3", "]", ",", "\n", "[", "0.5", ",", "0.2", ",", "0.3", "]", ",", "\n", "[", "0.5", ",", "0.2", ",", "0.3", "]", ",", "\n", "[", "0.5", ",", "0.2", ",", "0.3", "]", ",", "\n", "[", "0.5", ",", "0.2", ",", "0.3", "]", ",", "\n", "[", "0.5", ",", "0.2", ",", "0.3", "]", ",", "\n", "[", "0.5", ",", "0.2", ",", "0.3", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "\n", "proj_gt", "=", "np", ".", "asarray", "(", "\n", "[", "\n", "[", "0.5", ",", "0.2", ",", "0.3", "]", ",", "\n", "[", "0.2", ",", "0.3", ",", "0.5", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "1.0", "]", ",", "\n", "[", "1.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "1.0", ",", "0.0", "]", ",", "\n", "[", "0.25", ",", "0.45", ",", "0.3", "]", ",", "\n", "[", "0.25", ",", "0.6", ",", "0.15", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "\n", "proj", "=", "(", "\n", "categorical_dqn", ".", "_apply_categorical_projection", "(", "\n", "torch", ".", "as_tensor", "(", "y", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "as_tensor", "(", "y_probs", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "as_tensor", "(", "z", ",", "device", "=", "device", ")", ",", "\n", ")", "\n", ".", "detach", "(", ")", "\n", ".", "cpu", "(", ")", "\n", ".", "numpy", "(", ")", "\n", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "proj", ",", "proj_gt", ",", "atol", "=", "1e-5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestApplyCategoricalProjectionToManualCases._test_inexact_delta_z": [[165, 203], ["numpy.linspace", "numpy.asarray", "numpy.asarray", "numpy.asarray", "pfrl.agents.categorical_dqn._apply_categorical_projection().detach().cpu().numpy", "numpy.testing.assert_allclose", "pfrl.agents.categorical_dqn._apply_categorical_projection().detach().cpu", "pfrl.agents.categorical_dqn._apply_categorical_projection().detach", "pfrl.agents.categorical_dqn._apply_categorical_projection", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.categorical_dqn._apply_categorical_projection"], ["", "def", "_test_inexact_delta_z", "(", "self", ",", "device", ")", ":", "\n", "        ", "v_min", ",", "v_max", "=", "(", "-", "1", ",", "1", ")", "\n", "n_atoms", "=", "4", "\n", "# delta_z=2/3=0.66666... is not exact", "\n", "z", "=", "np", ".", "linspace", "(", "v_min", ",", "v_max", ",", "num", "=", "n_atoms", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "asarray", "(", "\n", "[", "\n", "[", "-", "1", ",", "-", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "-", "1", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "y_probs", "=", "np", ".", "asarray", "(", "\n", "[", "\n", "[", "0.5", ",", "0.1", ",", "0.1", ",", "0.3", "]", ",", "\n", "[", "0.5", ",", "0.2", ",", "0.0", ",", "0.3", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "proj_gt", "=", "np", ".", "asarray", "(", "\n", "[", "\n", "[", "0.6", ",", "0.0", ",", "0.0", ",", "0.4", "]", ",", "\n", "[", "0.5", ",", "0.1", ",", "0.1", ",", "0.3", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "\n", "proj", "=", "(", "\n", "categorical_dqn", ".", "_apply_categorical_projection", "(", "\n", "torch", ".", "as_tensor", "(", "y", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "as_tensor", "(", "y_probs", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "as_tensor", "(", "z", ",", "device", "=", "device", ")", ",", "\n", ")", "\n", ".", "detach", "(", ")", "\n", ".", "cpu", "(", ")", "\n", ".", "numpy", "(", ")", "\n", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "proj", ",", "proj_gt", ",", "atol", "=", "1e-5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestApplyCategoricalProjectionToManualCases.test_cpu": [[204, 206], ["test_categorical_dqn.TestApplyCategoricalProjectionToManualCases._test", "torch.device"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestApplyCategoricalProjectionToManualCases._test", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["", "def", "test_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test", "(", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestApplyCategoricalProjectionToManualCases.test_gpu": [[207, 210], ["test_categorical_dqn.TestApplyCategoricalProjectionToManualCases._test", "torch.device"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestApplyCategoricalProjectionToManualCases._test", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test", "(", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestApplyCategoricalProjectionToManualCases.test_inexact_delta_z_cpu": [[211, 213], ["test_categorical_dqn.TestApplyCategoricalProjectionToManualCases._test_inexact_delta_z", "torch.device"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestApplyCategoricalProjectionToManualCases._test_inexact_delta_z", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["", "def", "test_inexact_delta_z_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_inexact_delta_z", "(", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestApplyCategoricalProjectionToManualCases.test_inexact_delta_z_gpu": [[214, 217], ["test_categorical_dqn.TestApplyCategoricalProjectionToManualCases._test_inexact_delta_z", "torch.device"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestApplyCategoricalProjectionToManualCases._test_inexact_delta_z", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_inexact_delta_z_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_inexact_delta_z", "(", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestCategoricalDQNOnDiscreteABC.make_q_func": [[255, 257], ["test_categorical_dqn.make_distrib_ff_q_func"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.make_distrib_ff_q_func"], ["    ", "def", "make_q_func", "(", "self", ",", "env", ")", ":", "\n", "        ", "return", "make_distrib_ff_q_func", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestCategoricalDQNOnDiscreteABC.make_dqn_agent": [[258, 268], ["pfrl.agents.CategoricalDQN"], "methods", ["None"], ["", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "CategoricalDQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestCategoricalDQNOnDiscretePOABC.make_q_func": [[275, 277], ["test_categorical_dqn.make_distrib_recurrent_q_func"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.make_distrib_recurrent_q_func"], ["    ", "def", "make_q_func", "(", "self", ",", "env", ")", ":", "\n", "        ", "return", "make_distrib_recurrent_q_func", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestCategoricalDQNOnDiscretePOABC.make_dqn_agent": [[278, 289], ["pfrl.agents.CategoricalDQN"], "methods", ["None"], ["", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "CategoricalDQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", "recurrent", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestComputeValueLoss.setUp": [[298, 306], ["pytest.fixture", "numpy.asarray", "numpy.asarray", "numpy.asarray", "test_categorical_dqn.categorical_loss", "zip"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.categorical_loss"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "batch_accumulator", ")", ":", "\n", "        ", "self", ".", "batch_accumulator", "=", "batch_accumulator", "\n", "# y and t are (batchsize, n_atoms)", "\n", "self", ".", "y", "=", "np", ".", "asarray", "(", "[", "[", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", "]", ",", "[", "0.05", ",", "0.1", ",", "0.2", ",", "0.65", "]", "]", ",", "dtype", "=", "\"f\"", ")", "\n", "self", ".", "t", "=", "np", ".", "asarray", "(", "[", "[", "0.2", ",", "0.2", ",", "0.2", ",", "0.4", "]", ",", "[", "0.1", ",", "0.3", ",", "0.3", ",", "0.3", "]", "]", ",", "dtype", "=", "\"f\"", ")", "\n", "self", ".", "eltwise_losses", "=", "np", ".", "asarray", "(", "\n", "[", "categorical_loss", "(", "a", ",", "b", ")", "for", "a", ",", "b", "in", "zip", "(", "self", ".", "y", ",", "self", ".", "t", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestComputeValueLoss.test_not_weighted": [[308, 323], ["pfrl.agents.categorical_dqn.compute_value_loss().detach().cpu().numpy", "assertions.assertAlmostEqual", "test_categorical_dqn.TestComputeValueLoss.eltwise_losses.sum().mean", "test_categorical_dqn.TestComputeValueLoss.eltwise_losses.sum", "pfrl.agents.categorical_dqn.compute_value_loss().detach().cpu", "test_categorical_dqn.TestComputeValueLoss.eltwise_losses.sum", "pfrl.agents.categorical_dqn.compute_value_loss().detach", "pfrl.agents.categorical_dqn.compute_value_loss", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.compute_value_loss"], ["", "def", "test_not_weighted", "(", "self", ")", ":", "\n", "        ", "loss", "=", "(", "\n", "compute_value_loss", "(", "\n", "torch", ".", "as_tensor", "(", "self", ".", "eltwise_losses", ")", ",", "\n", "batch_accumulator", "=", "self", ".", "batch_accumulator", ",", "\n", ")", "\n", ".", "detach", "(", ")", "\n", ".", "cpu", "(", ")", "\n", ".", "numpy", "(", ")", "\n", ")", "\n", "if", "self", ".", "batch_accumulator", "==", "\"mean\"", ":", "\n", "            ", "eltwise_loss", "=", "self", ".", "eltwise_losses", ".", "sum", "(", "axis", "=", "1", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "eltwise_loss", "=", "self", ".", "eltwise_losses", ".", "sum", "(", ")", "\n", "", "assertions", ".", "assertAlmostEqual", "(", "loss", ",", "eltwise_loss", ",", "places", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestComputeValueLoss.test_uniformly_weighted": [[324, 345], ["numpy.ones", "pfrl.agents.categorical_dqn.compute_weighted_value_loss().detach().cpu().numpy", "assertions.assertAlmostEqual", "test_categorical_dqn.TestComputeValueLoss.eltwise_losses.sum().mean", "test_categorical_dqn.TestComputeValueLoss.eltwise_losses.sum", "pfrl.agents.categorical_dqn.compute_weighted_value_loss().detach().cpu", "test_categorical_dqn.TestComputeValueLoss.eltwise_losses.sum", "pfrl.agents.categorical_dqn.compute_weighted_value_loss().detach", "pfrl.agents.categorical_dqn.compute_weighted_value_loss", "torch.as_tensor", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.compute_weighted_value_loss"], ["", "def", "test_uniformly_weighted", "(", "self", ")", ":", "\n", "\n", "# Uniform weights of size batch size", "\n", "        ", "w1", "=", "np", ".", "ones", "(", "self", ".", "y", ".", "shape", "[", "0", "]", ",", "dtype", "=", "\"f\"", ")", "\n", "\n", "loss_w1", "=", "(", "\n", "compute_weighted_value_loss", "(", "\n", "torch", ".", "as_tensor", "(", "self", ".", "eltwise_losses", ")", ",", "\n", "self", ".", "y", ".", "shape", "[", "0", "]", ",", "\n", "torch", ".", "as_tensor", "(", "w1", ")", ",", "\n", "batch_accumulator", "=", "self", ".", "batch_accumulator", ",", "\n", ")", "\n", ".", "detach", "(", ")", "\n", ".", "cpu", "(", ")", "\n", ".", "numpy", "(", ")", "\n", ")", "\n", "if", "self", ".", "batch_accumulator", "==", "\"mean\"", ":", "\n", "            ", "eltwise_loss", "=", "self", ".", "eltwise_losses", ".", "sum", "(", "axis", "=", "1", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "eltwise_loss", "=", "self", ".", "eltwise_losses", ".", "sum", "(", ")", "\n", "", "assertions", ".", "assertAlmostEqual", "(", "loss_w1", ",", "eltwise_loss", ",", "places", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.TestComputeValueLoss.test_randomly_weighted": [[346, 367], ["numpy.random.uniform().astype", "pfrl.agents.categorical_dqn.compute_weighted_value_loss().detach().cpu().numpy", "assertions.assertAlmostEqual", "numpy.random.uniform", "pfrl.agents.categorical_dqn.compute_weighted_value_loss().detach().cpu", "pfrl.agents.categorical_dqn.compute_weighted_value_loss().detach", "test_categorical_dqn.TestComputeValueLoss.eltwise_losses.sum", "pfrl.agents.categorical_dqn.compute_weighted_value_loss", "torch.as_tensor", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.compute_weighted_value_loss"], ["", "def", "test_randomly_weighted", "(", "self", ")", ":", "\n", "\n", "# Random weights", "\n", "        ", "wu", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "0", ",", "high", "=", "2", ",", "size", "=", "self", ".", "y", ".", "shape", "[", "0", "]", ")", ".", "astype", "(", "\"f\"", ")", "\n", "\n", "loss_wu", "=", "(", "\n", "compute_weighted_value_loss", "(", "\n", "torch", ".", "as_tensor", "(", "self", ".", "eltwise_losses", ")", ",", "\n", "self", ".", "y", ".", "shape", "[", "0", "]", ",", "\n", "torch", ".", "as_tensor", "(", "wu", ")", ",", "\n", "batch_accumulator", "=", "self", ".", "batch_accumulator", ",", "\n", ")", "\n", ".", "detach", "(", ")", "\n", ".", "cpu", "(", ")", "\n", ".", "numpy", "(", ")", "\n", ")", "\n", "if", "self", ".", "batch_accumulator", "==", "\"mean\"", ":", "\n", "            ", "eltwise_loss", "=", "(", "self", ".", "eltwise_losses", ".", "sum", "(", "axis", "=", "1", ")", "*", "wu", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "eltwise_loss", "=", "(", "self", ".", "eltwise_losses", "*", "wu", "[", ":", ",", "None", "]", ")", ".", "sum", "(", ")", "\n", "", "assertions", ".", "assertAlmostEqual", "(", "loss_wu", ",", "eltwise_loss", ",", "places", "=", "5", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn._apply_categorical_projection_naive": [[16, 45], ["numpy.zeros", "range", "range", "range"], "function", ["None"], ["def", "_apply_categorical_projection_naive", "(", "y", ",", "y_probs", ",", "z", ")", ":", "\n", "    ", "\"\"\"Naively implemented categorical projection for checking results.\n\n    See (7) in https://arxiv.org/abs/1802.08163.\n    \"\"\"", "\n", "batch_size", ",", "n_atoms", "=", "y", ".", "shape", "\n", "assert", "z", ".", "shape", "==", "(", "n_atoms", ",", ")", "\n", "assert", "y_probs", ".", "shape", "==", "(", "batch_size", ",", "n_atoms", ")", "\n", "v_min", "=", "z", "[", "0", "]", "\n", "v_max", "=", "z", "[", "-", "1", "]", "\n", "proj_probs", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "n_atoms", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "n_atoms", ")", ":", "\n", "            ", "yi", "=", "y", "[", "b", ",", "i", "]", "\n", "p", "=", "y_probs", "[", "b", ",", "i", "]", "\n", "if", "yi", "<=", "v_min", ":", "\n", "                ", "proj_probs", "[", "b", ",", "0", "]", "+=", "p", "\n", "", "elif", "yi", ">", "v_max", ":", "\n", "                ", "proj_probs", "[", "b", ",", "-", "1", "]", "+=", "p", "\n", "", "else", ":", "\n", "                ", "for", "j", "in", "range", "(", "n_atoms", "-", "1", ")", ":", "\n", "                    ", "if", "z", "[", "j", "]", "<", "yi", "<=", "z", "[", "j", "+", "1", "]", ":", "\n", "                        ", "delta_z", "=", "z", "[", "j", "+", "1", "]", "-", "z", "[", "j", "]", "\n", "proj_probs", "[", "b", ",", "j", "]", "+=", "(", "z", "[", "j", "+", "1", "]", "-", "yi", ")", "/", "delta_z", "*", "p", "\n", "proj_probs", "[", "b", ",", "j", "+", "1", "]", "+=", "(", "yi", "-", "z", "[", "j", "]", ")", "/", "delta_z", "*", "p", "\n", "break", "\n", "", "", "else", ":", "\n", "                    ", "assert", "False", "\n", "", "", "", "", "return", "proj_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.make_distrib_ff_q_func": [[219, 231], ["pfrl.q_functions.DistributionalFCStateQFunctionWithDiscreteAction"], "function", ["None"], ["", "", "def", "make_distrib_ff_q_func", "(", "env", ")", ":", "\n", "    ", "n_atoms", "=", "51", "\n", "v_max", "=", "10", "\n", "v_min", "=", "-", "10", "\n", "return", "pfrl", ".", "q_functions", ".", "DistributionalFCStateQFunctionWithDiscreteAction", "(", "# NOQA", "\n", "env", ".", "observation_space", ".", "low", ".", "size", ",", "\n", "env", ".", "action_space", ".", "n", ",", "\n", "n_atoms", "=", "n_atoms", ",", "\n", "v_min", "=", "v_min", ",", "\n", "v_max", "=", "v_max", ",", "\n", "n_hidden_channels", "=", "20", ",", "\n", "n_hidden_layers", "=", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.make_distrib_recurrent_q_func": [[234, 248], ["pfrl.nn.RecurrentSequential", "torch.nn.RNN", "pfrl.q_functions.DistributionalFCStateQFunctionWithDiscreteAction"], "function", ["None"], ["", "def", "make_distrib_recurrent_q_func", "(", "env", ")", ":", "\n", "    ", "n_atoms", "=", "51", "\n", "v_max", "=", "10", "\n", "v_min", "=", "-", "10", "\n", "return", "pfrl", ".", "nn", ".", "RecurrentSequential", "(", "\n", "torch", ".", "nn", ".", "RNN", "(", "input_size", "=", "env", ".", "observation_space", ".", "low", ".", "size", ",", "hidden_size", "=", "20", ")", ",", "\n", "pfrl", ".", "q_functions", ".", "DistributionalFCStateQFunctionWithDiscreteAction", "(", "# NOQA", "\n", "20", ",", "\n", "env", ".", "action_space", ".", "n", ",", "\n", "n_atoms", "=", "n_atoms", ",", "\n", "v_min", "=", "v_min", ",", "\n", "v_max", "=", "v_max", ",", "\n", "n_hidden_channels", "=", "None", ",", "\n", "n_hidden_layers", "=", "0", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_categorical_dqn.categorical_loss": [[292, 294], ["numpy.log", "numpy.clip"], "function", ["None"], ["", "", "def", "categorical_loss", "(", "y", ",", "t", ")", ":", "\n", "    ", "return", "-", "t", "*", "np", ".", "log", "(", "np", ".", "clip", "(", "y", ",", "1e-10", ",", "1.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ddpg.TestDDPGOnContinuousPOABC.make_ddpg_agent": [[11, 36], ["pfrl.agents.ddpg.DDPG"], "methods", ["None"], ["    ", "def", "make_ddpg_agent", "(", "\n", "self", ",", "\n", "env", ",", "\n", "policy", ",", "\n", "q_func", ",", "\n", "actor_opt", ",", "\n", "critic_opt", ",", "\n", "explorer", ",", "\n", "rbuf", ",", "\n", "gpu", ",", "\n", ")", ":", "\n", "        ", "return", "DDPG", "(", "\n", "policy", ",", "\n", "q_func", ",", "\n", "actor_opt", ",", "\n", "critic_opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_method", "=", "\"soft\"", ",", "\n", "target_update_interval", "=", "1", ",", "\n", "recurrent", "=", "True", ",", "\n", "update_interval", "=", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_ddpg.TestDDPGOnContinuousABC.make_ddpg_agent": [[40, 64], ["pfrl.agents.ddpg.DDPG"], "methods", ["None"], ["    ", "def", "make_ddpg_agent", "(", "\n", "self", ",", "\n", "env", ",", "\n", "policy", ",", "\n", "q_func", ",", "\n", "actor_opt", ",", "\n", "critic_opt", ",", "\n", "explorer", ",", "\n", "rbuf", ",", "\n", "gpu", ",", "\n", ")", ":", "\n", "        ", "return", "DDPG", "(", "\n", "policy", ",", "\n", "q_func", ",", "\n", "actor_opt", ",", "\n", "critic_opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_method", "=", "\"soft\"", ",", "\n", "target_update_interval", "=", "1", ",", "\n", "recurrent", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_iqn.TestIQNOnDiscreteABC.set_iqn_params": [[23, 27], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "set_iqn_params", "(", "self", ",", "quantile_thresholds_N", ",", "quantile_thresholds_N_prime", ")", ":", "\n", "        ", "self", ".", "quantile_thresholds_N", "=", "quantile_thresholds_N", "\n", "self", ".", "quantile_thresholds_N_prime", "=", "quantile_thresholds_N_prime", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_iqn.TestIQNOnDiscreteABC.make_q_func": [[28, 41], ["pfrl.agents.iqn.ImplicitQuantileQFunction", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "pfrl.agents.iqn.CosineBasisLinear", "torch.nn.ReLU"], "methods", ["None"], ["", "def", "make_q_func", "(", "self", ",", "env", ")", ":", "\n", "        ", "obs_size", "=", "env", ".", "observation_space", ".", "low", ".", "size", "\n", "hidden_size", "=", "64", "\n", "return", "iqn", ".", "ImplicitQuantileQFunction", "(", "\n", "psi", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", ",", "\n", "phi", "=", "nn", ".", "Sequential", "(", "\n", "pfrl", ".", "agents", ".", "iqn", ".", "CosineBasisLinear", "(", "32", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", ",", "\n", "f", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "env", ".", "action_space", ".", "n", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_iqn.TestIQNOnDiscreteABC.make_dqn_agent": [[43, 56], ["pfrl.agents.iqn.IQN"], "methods", ["None"], ["", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "iqn", ".", "IQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", "quantile_thresholds_N", "=", "self", ".", "quantile_thresholds_N", ",", "\n", "quantile_thresholds_N_prime", "=", "self", ".", "quantile_thresholds_N_prime", ",", "\n", "act_deterministically", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_iqn.TestIQNOnDiscretePOABC.make_q_func": [[64, 82], ["pfrl.agents.iqn.RecurrentImplicitQuantileQFunction", "pfrl.nn.RecurrentSequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.RNN", "pfrl.agents.iqn.CosineBasisLinear", "torch.nn.ReLU"], "methods", ["None"], ["    ", "def", "make_q_func", "(", "self", ",", "env", ")", ":", "\n", "        ", "obs_size", "=", "env", ".", "observation_space", ".", "low", ".", "size", "\n", "hidden_size", "=", "64", "\n", "return", "iqn", ".", "RecurrentImplicitQuantileQFunction", "(", "\n", "psi", "=", "pfrl", ".", "nn", ".", "RecurrentSequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "RNN", "(", "\n", "num_layers", "=", "1", ",", "\n", "input_size", "=", "hidden_size", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", ")", ",", "\n", ")", ",", "\n", "phi", "=", "nn", ".", "Sequential", "(", "\n", "pfrl", ".", "agents", ".", "iqn", ".", "CosineBasisLinear", "(", "32", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", ",", "\n", "f", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "env", ".", "action_space", ".", "n", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_iqn.TestIQNOnDiscretePOABC.make_dqn_agent": [[84, 98], ["pfrl.agents.iqn.IQN"], "methods", ["None"], ["", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "iqn", ".", "IQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", "quantile_thresholds_N", "=", "32", ",", "\n", "quantile_thresholds_N_prime", "=", "32", ",", "\n", "recurrent", "=", "True", ",", "\n", "act_deterministically", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_iqn.test_compute_eltwise_huber_quantile_loss": [[101, 149], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "torch.randn", "torch.randn", "torch.rand", "pfrl.agents.iqn.compute_eltwise_huber_quantile_loss", "torch.broadcast_tensors", "torch.nn.functional.smooth_l1_loss", "range", "torch.randn.reshape", "torch.randn.reshape", "range", "range", "pfrl.testing.torch_assert_allclose", "pfrl.testing.torch_assert_allclose", "float", "torch.autograd.grad", "torch.autograd.grad"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.compute_eltwise_huber_quantile_loss", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"batch_size\"", ",", "[", "1", ",", "3", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"N\"", ",", "[", "1", ",", "5", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"N_prime\"", ",", "[", "1", ",", "7", "]", ")", "\n", "def", "test_compute_eltwise_huber_quantile_loss", "(", "batch_size", ",", "N", ",", "N_prime", ")", ":", "\n", "# Overestimation is penalized proportionally to 1-tau", "\n", "# Underestimation is penalized proportionally to tau", "\n", "    ", "y", "=", "torch", ".", "randn", "(", "batch_size", ",", "N", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "True", ")", "\n", "t", "=", "torch", ".", "randn", "(", "batch_size", ",", "N_prime", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "tau", "=", "torch", ".", "rand", "(", "batch_size", ",", "N", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "loss", "=", "iqn", ".", "compute_eltwise_huber_quantile_loss", "(", "y", ",", "t", ",", "tau", ")", "\n", "y_b", ",", "t_b", "=", "torch", ".", "broadcast_tensors", "(", "\n", "y", ".", "reshape", "(", "batch_size", ",", "N", ",", "1", ")", ",", "\n", "t", ".", "reshape", "(", "batch_size", ",", "1", ",", "N_prime", ")", ",", "\n", ")", "\n", "assert", "loss", ".", "shape", "==", "(", "batch_size", ",", "N", ",", "N_prime", ")", "\n", "huber_loss", "=", "nn", ".", "functional", ".", "smooth_l1_loss", "(", "y_b", ",", "t_b", ",", "reduction", "=", "\"none\"", ")", "\n", "assert", "huber_loss", ".", "shape", "==", "(", "batch_size", ",", "N", ",", "N_prime", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "N", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "N_prime", ")", ":", "\n", "# loss is always positive", "\n", "                ", "scalar_loss", "=", "loss", "[", "i", ",", "j", ",", "k", "]", "\n", "scalar_grad", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "[", "scalar_loss", "]", ",", "[", "y", "]", ",", "retain_graph", "=", "True", "\n", ")", "[", "0", "]", "[", "i", ",", "j", "]", "\n", "assert", "float", "(", "scalar_loss", ")", ">", "0", "\n", "if", "y", "[", "i", ",", "j", "]", ">", "t", "[", "i", ",", "k", "]", ":", "\n", "# y over-estimates t", "\n", "# loss equals huber loss scaled by (1-tau)", "\n", "                    ", "correct_scalar_loss", "=", "(", "1", "-", "tau", "[", "i", ",", "j", "]", ")", "*", "huber_loss", "[", "i", ",", "j", ",", "k", "]", "\n", "", "else", ":", "\n", "# y under-estimates t", "\n", "# loss equals huber loss scaled by tau", "\n", "                    ", "correct_scalar_loss", "=", "tau", "[", "i", ",", "j", "]", "*", "huber_loss", "[", "i", ",", "j", ",", "k", "]", "\n", "", "correct_scalar_grad", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "[", "correct_scalar_loss", "]", ",", "[", "y", "]", ",", "retain_graph", "=", "True", "\n", ")", "[", "0", "]", "[", "i", ",", "j", "]", "\n", "torch_assert_allclose", "(", "\n", "scalar_loss", ",", "\n", "correct_scalar_loss", ",", "\n", "atol", "=", "1e-5", ",", "\n", ")", "\n", "torch_assert_allclose", "(", "\n", "scalar_grad", ",", "\n", "correct_scalar_grad", ",", "\n", "atol", "=", "1e-5", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_iqn.test_cosine_basis_functions": [[152, 167], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "torch.rand", "pfrl.agents.iqn.cosine_basis_functions", "range", "range", "range", "pfrl.testing.torch_assert_allclose", "torch.cos"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.cosine_basis_functions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.testing.torch_assert_allclose"], ["", "", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"batch_size\"", ",", "[", "1", ",", "3", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"m\"", ",", "[", "1", ",", "5", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"n_basis_functions\"", ",", "[", "1", ",", "7", "]", ")", "\n", "def", "test_cosine_basis_functions", "(", "batch_size", ",", "m", ",", "n_basis_functions", ")", ":", "\n", "    ", "x", "=", "torch", ".", "rand", "(", "batch_size", ",", "m", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "y", "=", "iqn", ".", "cosine_basis_functions", "(", "x", ",", "n_basis_functions", "=", "n_basis_functions", ")", "\n", "assert", "y", ".", "shape", "==", "(", "batch_size", ",", "m", ",", "n_basis_functions", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "n_basis_functions", ")", ":", "\n", "                ", "torch_assert_allclose", "(", "\n", "y", "[", "i", ",", "j", ",", "k", "]", ",", "\n", "torch", ".", "cos", "(", "x", "[", "i", ",", "j", "]", "*", "(", "k", "+", "1", ")", "*", "np", ".", "pi", ")", ",", "\n", "atol", "=", "1e-5", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNLike.make_agent": [[13, 22], ["basetest_dqn_like._TestDQNLike.make_q_func", "basetest_dqn_like._TestDQNLike.make_optimizer", "basetest_dqn_like._TestDQNLike.make_explorer", "basetest_dqn_like._TestDQNLike.make_replay_buffer", "basetest_dqn_like._TestDQNLike.make_dqn_agent"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestNStepDQNOnContinuousABC.make_q_func", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNOnDiscretePOABC.make_optimizer", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNOnABC.make_explorer", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestNStepDQNOnABC.make_replay_buffer", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_double_dqn.TestDoubleDQNOnDiscretePOABC.make_dqn_agent"], ["    ", "def", "make_agent", "(", "self", ",", "env", ",", "gpu", ")", ":", "\n", "        ", "q_func", "=", "self", ".", "make_q_func", "(", "env", ")", "\n", "opt", "=", "self", ".", "make_optimizer", "(", "env", ",", "q_func", ")", "\n", "explorer", "=", "self", ".", "make_explorer", "(", "env", ")", "\n", "rbuf", "=", "self", ".", "make_replay_buffer", "(", "env", ")", "\n", "agent", "=", "self", ".", "make_dqn_agent", "(", "\n", "env", "=", "env", ",", "q_func", "=", "q_func", ",", "opt", "=", "opt", ",", "explorer", "=", "explorer", ",", "rbuf", "=", "rbuf", ",", "gpu", "=", "gpu", "\n", ")", "\n", "return", "agent", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNLike.make_dqn_agent": [[23, 25], ["NotImplementedError"], "methods", ["None"], ["", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNLike.make_env_and_successful_return": [[26, 28], ["NotImplementedError"], "methods", ["None"], ["", "def", "make_env_and_successful_return", "(", "self", ",", "test", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNLike.make_explorer": [[29, 31], ["NotImplementedError"], "methods", ["None"], ["", "def", "make_explorer", "(", "self", ",", "env", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNLike.make_optimizer": [[32, 34], ["NotImplementedError"], "methods", ["None"], ["", "def", "make_optimizer", "(", "self", ",", "env", ",", "q_func", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNLike.make_replay_buffer": [[35, 37], ["NotImplementedError"], "methods", ["None"], ["", "def", "make_replay_buffer", "(", "self", ",", "env", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNOnABC.make_agent": [[40, 47], ["basetest_dqn_like._TestDQNOnABC.make_q_func", "basetest_dqn_like._TestDQNOnABC.make_optimizer", "basetest_dqn_like._TestDQNOnABC.make_explorer", "basetest_dqn_like._TestDQNOnABC.make_replay_buffer", "basetest_dqn_like._TestDQNOnABC.make_dqn_agent"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestNStepDQNOnContinuousABC.make_q_func", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNOnDiscretePOABC.make_optimizer", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNOnABC.make_explorer", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestNStepDQNOnABC.make_replay_buffer", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_double_dqn.TestDoubleDQNOnDiscretePOABC.make_dqn_agent"], ["    ", "def", "make_agent", "(", "self", ",", "env", ",", "gpu", ")", ":", "\n", "        ", "q_func", "=", "self", ".", "make_q_func", "(", "env", ")", "\n", "opt", "=", "self", ".", "make_optimizer", "(", "env", ",", "q_func", ")", "\n", "explorer", "=", "self", ".", "make_explorer", "(", "env", ")", "\n", "rbuf", "=", "self", ".", "make_replay_buffer", "(", "env", ")", "\n", "return", "self", ".", "make_dqn_agent", "(", "\n", "env", "=", "env", ",", "q_func", "=", "q_func", ",", "opt", "=", "opt", ",", "explorer", "=", "explorer", ",", "rbuf", "=", "rbuf", ",", "gpu", "=", "gpu", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNOnABC.make_dqn_agent": [[49, 51], ["NotImplementedError"], "methods", ["None"], ["", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNOnABC.make_explorer": [[52, 61], ["pfrl.explorers.epsilon_greedy.LinearDecayEpsilonGreedy", "env.action_space.sample", "isinstance", "env.action_space.sample.astype"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "def", "make_explorer", "(", "self", ",", "env", ")", ":", "\n", "        ", "def", "random_action_func", "(", ")", ":", "\n", "            ", "a", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "if", "isinstance", "(", "a", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "return", "a", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                ", "return", "a", "\n", "\n", "", "", "return", "LinearDecayEpsilonGreedy", "(", "1.0", ",", "0.5", ",", "1000", ",", "random_action_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNOnABC.make_optimizer": [[62, 65], ["torch.Adam", "torch.Adam", "q_func.parameters"], "methods", ["None"], ["", "def", "make_optimizer", "(", "self", ",", "env", ",", "q_func", ")", ":", "\n", "        ", "opt", "=", "optim", ".", "Adam", "(", "q_func", ".", "parameters", "(", ")", ",", "1e-2", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNOnABC.make_replay_buffer": [[66, 68], ["pfrl.replay_buffers.ReplayBuffer"], "methods", ["None"], ["", "def", "make_replay_buffer", "(", "self", ",", "env", ")", ":", "\n", "        ", "return", "replay_buffers", ".", "ReplayBuffer", "(", "10", "**", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNOnDiscreteABC.make_q_func": [[71, 74], ["pfrl.q_functions.FCStateQFunctionWithDiscreteAction"], "methods", ["None"], ["    ", "def", "make_q_func", "(", "self", ",", "env", ")", ":", "\n", "        ", "return", "q_functions", ".", "FCStateQFunctionWithDiscreteAction", "(", "\n", "env", ".", "observation_space", ".", "low", ".", "size", ",", "env", ".", "action_space", ".", "n", ",", "10", ",", "10", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNOnDiscreteABC.make_env_and_successful_return": [[76, 78], ["pfrl.envs.abc.ABC"], "methods", ["None"], ["", "def", "make_env_and_successful_return", "(", "self", ",", "test", ")", ":", "\n", "        ", "return", "ABC", "(", "discrete", "=", "True", ",", "deterministic", "=", "test", ")", ",", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNOnDiscretePOABC.make_q_func": [[81, 89], ["pfrl.nn.RecurrentSequential", "torch.Linear", "torch.Linear", "torch.ELU", "torch.ELU", "torch.RNN", "torch.RNN", "torch.Linear", "torch.Linear", "pfrl.q_functions.DiscreteActionValueHead"], "methods", ["None"], ["    ", "def", "make_q_func", "(", "self", ",", "env", ")", ":", "\n", "        ", "n_hidden_channels", "=", "10", "\n", "return", "RecurrentSequential", "(", "\n", "nn", ".", "Linear", "(", "env", ".", "observation_space", ".", "low", ".", "size", ",", "n_hidden_channels", ")", ",", "\n", "nn", ".", "ELU", "(", ")", ",", "\n", "nn", ".", "RNN", "(", "input_size", "=", "n_hidden_channels", ",", "hidden_size", "=", "n_hidden_channels", ")", ",", "\n", "nn", ".", "Linear", "(", "n_hidden_channels", ",", "env", ".", "action_space", ".", "n", ")", ",", "\n", "q_functions", ".", "DiscreteActionValueHead", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNOnDiscretePOABC.make_replay_buffer": [[91, 93], ["pfrl.replay_buffers.EpisodicReplayBuffer"], "methods", ["None"], ["", "def", "make_replay_buffer", "(", "self", ",", "env", ")", ":", "\n", "        ", "return", "replay_buffers", ".", "EpisodicReplayBuffer", "(", "10", "**", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNOnDiscretePOABC.make_env_and_successful_return": [[94, 96], ["pfrl.envs.abc.ABC"], "methods", ["None"], ["", "def", "make_env_and_successful_return", "(", "self", ",", "test", ")", ":", "\n", "        ", "return", "ABC", "(", "discrete", "=", "True", ",", "partially_observable", "=", "True", ",", "deterministic", "=", "test", ")", ",", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNOnDiscretePOABC.make_optimizer": [[97, 101], ["torch.Adam", "torch.Adam", "q_func.parameters"], "methods", ["None"], ["", "def", "make_optimizer", "(", "self", ",", "env", ",", "q_func", ")", ":", "\n", "# Stabilize training by large eps", "\n", "        ", "opt", "=", "optim", ".", "Adam", "(", "q_func", ".", "parameters", "(", ")", ",", "1e-2", ",", "eps", "=", "1", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestNStepDQNOnABC.make_replay_buffer": [[104, 106], ["pfrl.replay_buffers.ReplayBuffer"], "methods", ["None"], ["    ", "def", "make_replay_buffer", "(", "self", ",", "env", ")", ":", "\n", "        ", "return", "replay_buffers", ".", "ReplayBuffer", "(", "10", "**", "5", ",", "num_steps", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestNStepDQNOnDiscreteABC.make_q_func": [[109, 112], ["pfrl.q_functions.FCStateQFunctionWithDiscreteAction"], "methods", ["None"], ["    ", "def", "make_q_func", "(", "self", ",", "env", ")", ":", "\n", "        ", "return", "q_functions", ".", "FCStateQFunctionWithDiscreteAction", "(", "\n", "env", ".", "observation_space", ".", "low", ".", "size", ",", "env", ".", "action_space", ".", "n", ",", "10", ",", "10", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestNStepDQNOnDiscreteABC.make_env_and_successful_return": [[114, 116], ["pfrl.envs.abc.ABC"], "methods", ["None"], ["", "def", "make_env_and_successful_return", "(", "self", ",", "test", ")", ":", "\n", "        ", "return", "ABC", "(", "discrete", "=", "True", ",", "deterministic", "=", "test", ")", ",", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNOnContinuousABC.make_q_func": [[119, 128], ["pfrl.q_functions.FCQuadraticStateQFunction"], "methods", ["None"], ["    ", "def", "make_q_func", "(", "self", ",", "env", ")", ":", "\n", "        ", "n_dim_action", "=", "env", ".", "action_space", ".", "low", ".", "size", "\n", "n_dim_obs", "=", "env", ".", "observation_space", ".", "low", ".", "size", "\n", "return", "q_functions", ".", "FCQuadraticStateQFunction", "(", "\n", "n_input_channels", "=", "n_dim_obs", ",", "\n", "n_dim_action", "=", "n_dim_action", ",", "\n", "n_hidden_channels", "=", "20", ",", "\n", "n_hidden_layers", "=", "2", ",", "\n", "action_space", "=", "env", ".", "action_space", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNOnContinuousABC.make_env_and_successful_return": [[130, 132], ["pfrl.envs.abc.ABC"], "methods", ["None"], ["", "def", "make_env_and_successful_return", "(", "self", ",", "test", ")", ":", "\n", "        ", "return", "ABC", "(", "discrete", "=", "False", ",", "deterministic", "=", "test", ")", ",", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestNStepDQNOnContinuousABC.make_q_func": [[135, 144], ["pfrl.q_functions.FCQuadraticStateQFunction"], "methods", ["None"], ["    ", "def", "make_q_func", "(", "self", ",", "env", ")", ":", "\n", "        ", "n_dim_action", "=", "env", ".", "action_space", ".", "low", ".", "size", "\n", "n_dim_obs", "=", "env", ".", "observation_space", ".", "low", ".", "size", "\n", "return", "q_functions", ".", "FCQuadraticStateQFunction", "(", "\n", "n_input_channels", "=", "n_dim_obs", ",", "\n", "n_dim_action", "=", "n_dim_action", ",", "\n", "n_hidden_channels", "=", "20", ",", "\n", "n_hidden_layers", "=", "2", ",", "\n", "action_space", "=", "env", ".", "action_space", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestNStepDQNOnContinuousABC.make_env_and_successful_return": [[146, 148], ["pfrl.envs.abc.ABC"], "methods", ["None"], ["", "def", "make_env_and_successful_return", "(", "self", ",", "test", ")", ":", "\n", "        ", "return", "ABC", "(", "discrete", "=", "False", ",", "deterministic", "=", "test", ")", ",", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dqn.TestDQNOnDiscreteABC.make_dqn_agent": [[17, 27], ["pfrl.agents.dqn.DQN"], "methods", ["None"], ["    ", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "DQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dqn.TestDQNOnDiscreteABC.test_replay_capacity_checked": [[29, 38], ["test_dqn.TestDQNOnDiscreteABC.make_env_and_successful_return", "test_dqn.TestDQNOnDiscreteABC.make_q_func", "test_dqn.TestDQNOnDiscreteABC.make_optimizer", "test_dqn.TestDQNOnDiscreteABC.make_explorer", "pfrl.replay_buffers.ReplayBuffer", "pytest.raises", "test_dqn.TestDQNOnDiscreteABC.make_dqn_agent"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestNStepDQNOnContinuousABC.make_q_func", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNOnDiscretePOABC.make_optimizer", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.basetest_dqn_like._TestDQNOnABC.make_explorer", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_double_dqn.TestDoubleDQNOnDiscretePOABC.make_dqn_agent"], ["", "def", "test_replay_capacity_checked", "(", "self", ")", ":", "\n", "        ", "env", ",", "_", "=", "self", ".", "make_env_and_successful_return", "(", "test", "=", "False", ")", "\n", "q_func", "=", "self", ".", "make_q_func", "(", "env", ")", "\n", "opt", "=", "self", ".", "make_optimizer", "(", "env", ",", "q_func", ")", "\n", "explorer", "=", "self", ".", "make_explorer", "(", "env", ")", "\n", "rbuf", "=", "pfrl", ".", "replay_buffers", ".", "ReplayBuffer", "(", "capacity", "=", "90", ")", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "make_dqn_agent", "(", "\n", "env", "=", "env", ",", "q_func", "=", "q_func", ",", "opt", "=", "opt", ",", "explorer", "=", "explorer", ",", "rbuf", "=", "rbuf", ",", "gpu", "=", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dqn.TestDQNOnDiscreteABCBoltzmann.make_dqn_agent": [[44, 55], ["pfrl.explorers.Boltzmann", "pfrl.agents.dqn.DQN"], "methods", ["None"], ["    ", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "explorer", "=", "pfrl", ".", "explorers", ".", "Boltzmann", "(", ")", "\n", "return", "DQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dqn.TestDQNOnContinuousABC.make_dqn_agent": [[63, 73], ["pfrl.agents.dqn.DQN"], "methods", ["None"], ["    ", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "DQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dqn.TestDQNOnDiscretePOABC.make_dqn_agent": [[81, 92], ["pfrl.agents.dqn.DQN"], "methods", ["None"], ["    ", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "DQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", "recurrent", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dqn.TestNStepDQNOnDiscreteABC.make_dqn_agent": [[96, 106], ["pfrl.agents.dqn.DQN"], "methods", ["None"], ["    ", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "DQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dqn.TestNStepDQNOnDiscreteABCBoltzmann.make_dqn_agent": [[110, 121], ["pfrl.explorers.Boltzmann", "pfrl.agents.dqn.DQN"], "methods", ["None"], ["    ", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "explorer", "=", "pfrl", ".", "explorers", ".", "Boltzmann", "(", ")", "\n", "return", "DQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dqn.TestNStepDQNOnContinuousABC.make_dqn_agent": [[125, 135], ["pfrl.agents.dqn.DQN"], "methods", ["None"], ["    ", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "DQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dqn.TestComputeValueLoss.setUp": [[148, 161], ["pytest.fixture", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "test_dqn._huber_loss_1"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dqn._huber_loss_1"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "clip_delta", ",", "batch_accumulator", ")", ":", "\n", "        ", "self", ".", "clip_delta", "=", "clip_delta", "\n", "self", ".", "batch_accumulator", "=", "batch_accumulator", "\n", "\n", "self", ".", "y", "=", "torch", ".", "FloatTensor", "(", "[", "1.0", ",", "2.0", ",", "3.0", ",", "4.0", "]", ")", "\n", "self", ".", "t", "=", "torch", ".", "FloatTensor", "(", "[", "2.1", ",", "2.2", ",", "2.3", ",", "2.4", "]", ")", "\n", "if", "self", ".", "clip_delta", ":", "\n", "            ", "self", ".", "gt_losses", "=", "torch", ".", "FloatTensor", "(", "\n", "[", "_huber_loss_1", "(", "a", ")", "for", "a", "in", "self", ".", "y", "-", "self", ".", "t", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gt_losses", "=", "torch", ".", "FloatTensor", "(", "[", "0.5", "*", "a", "**", "2", "for", "a", "in", "self", ".", "y", "-", "self", ".", "t", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dqn.TestComputeValueLoss.test_not_weighted": [[162, 174], ["pfrl.agents.dqn.compute_value_loss", "assertions.assertAlmostEqual", "test_dqn.TestComputeValueLoss.gt_losses.mean", "test_dqn.TestComputeValueLoss.gt_losses.sum", "pfrl.agents.dqn.compute_value_loss.numpy", "test_dqn.TestComputeValueLoss.numpy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.compute_value_loss", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "", "def", "test_not_weighted", "(", "self", ")", ":", "\n", "        ", "loss", "=", "compute_value_loss", "(", "\n", "self", ".", "y", ",", "\n", "self", ".", "t", ",", "\n", "clip_delta", "=", "self", ".", "clip_delta", ",", "\n", "batch_accumulator", "=", "self", ".", "batch_accumulator", ",", "\n", ")", "\n", "if", "self", ".", "batch_accumulator", "==", "\"mean\"", ":", "\n", "            ", "gt_loss", "=", "self", ".", "gt_losses", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "gt_loss", "=", "self", ".", "gt_losses", ".", "sum", "(", ")", "\n", "", "assertions", ".", "assertAlmostEqual", "(", "loss", ".", "numpy", "(", ")", ",", "gt_loss", ".", "numpy", "(", ")", ",", "places", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dqn.TestComputeValueLoss.test_uniformly_weighted": [[175, 191], ["torch.ones", "pfrl.agents.dqn.compute_weighted_value_loss", "assertions.assertAlmostEqual", "test_dqn.TestComputeValueLoss.y.size", "test_dqn.TestComputeValueLoss.gt_losses.mean", "test_dqn.TestComputeValueLoss.gt_losses.sum", "pfrl.agents.dqn.compute_weighted_value_loss.numpy", "test_dqn.TestComputeValueLoss.numpy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.compute_weighted_value_loss", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "def", "test_uniformly_weighted", "(", "self", ")", ":", "\n", "# Uniform weights", "\n", "        ", "w1", "=", "torch", ".", "ones", "(", "self", ".", "y", ".", "size", "(", ")", ")", "\n", "\n", "loss_w1", "=", "compute_weighted_value_loss", "(", "\n", "self", ".", "y", ",", "\n", "self", ".", "t", ",", "\n", "clip_delta", "=", "self", ".", "clip_delta", ",", "\n", "batch_accumulator", "=", "self", ".", "batch_accumulator", ",", "\n", "weights", "=", "w1", ",", "\n", ")", "\n", "if", "self", ".", "batch_accumulator", "==", "\"mean\"", ":", "\n", "            ", "gt_loss", "=", "self", ".", "gt_losses", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "gt_loss", "=", "self", ".", "gt_losses", ".", "sum", "(", ")", "\n", "", "assertions", ".", "assertAlmostEqual", "(", "loss_w1", ".", "numpy", "(", ")", ",", "gt_loss", ".", "numpy", "(", ")", ",", "places", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dqn.TestComputeValueLoss.test_randomly_weighted": [[192, 209], ["torch.empty", "torch.nn.init.uniform_", "pfrl.agents.dqn.compute_weighted_value_loss", "assertions.assertAlmostEqual", "test_dqn.TestComputeValueLoss.y.size", "pfrl.agents.dqn.compute_weighted_value_loss.numpy", "gt_loss.numpy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.compute_weighted_value_loss"], ["", "def", "test_randomly_weighted", "(", "self", ")", ":", "\n", "# Random weights", "\n", "        ", "wu", "=", "torch", ".", "empty", "(", "self", ".", "y", ".", "size", "(", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "uniform_", "(", "wu", ",", "a", "=", "0", ",", "b", "=", "2", ")", "\n", "\n", "loss_wu", "=", "compute_weighted_value_loss", "(", "\n", "self", ".", "y", ",", "\n", "self", ".", "t", ",", "\n", "clip_delta", "=", "self", ".", "clip_delta", ",", "\n", "batch_accumulator", "=", "self", ".", "batch_accumulator", ",", "\n", "weights", "=", "wu", ",", "\n", ")", "\n", "if", "self", ".", "batch_accumulator", "==", "\"mean\"", ":", "\n", "            ", "gt_loss", "=", "(", "self", ".", "gt_losses", "*", "wu", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "gt_loss", "=", "(", "self", ".", "gt_losses", "*", "wu", ")", ".", "sum", "(", ")", "\n", "", "assertions", ".", "assertAlmostEqual", "(", "loss_wu", ".", "numpy", "(", ")", ",", "gt_loss", ".", "numpy", "(", ")", ",", "places", "=", "5", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_dqn._huber_loss_1": [[138, 143], ["abs", "abs"], "function", ["None"], ["", "", "def", "_huber_loss_1", "(", "a", ")", ":", "\n", "    ", "if", "abs", "(", "a", ")", "<", "1", ":", "\n", "        ", "return", "0.5", "*", "a", "**", "2", "\n", "", "else", ":", "\n", "        ", "return", "abs", "(", "a", ")", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a2c.TestA2C.setUp": [[24, 31], ["pytest.fixture", "tempfile.mkdtemp", "os.path.join"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "num_processes", ",", "use_gae", ",", "discrete", ")", ":", "\n", "        ", "self", ".", "num_processes", "=", "num_processes", "\n", "self", ".", "use_gae", "=", "use_gae", "\n", "self", ".", "discrete", "=", "discrete", "\n", "self", ".", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "self", ".", "agent_dirname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdir", ",", "\"agent_final\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a2c.TestA2C.test_abc_cpu": [[32, 36], ["test_a2c.TestA2C._test_abc", "test_a2c.TestA2C._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_abc_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", ")", "\n", "self", ".", "_test_abc", "(", "steps", "=", "0", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a2c.TestA2C.test_abc_gpu": [[37, 41], ["test_a2c.TestA2C._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_abc_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a2c.TestA2C.test_abc_fast_cpu": [[42, 45], ["test_a2c.TestA2C._test_abc", "test_a2c.TestA2C._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "def", "test_abc_fast_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "steps", "=", "100", ",", "require_success", "=", "False", ")", "\n", "self", ".", "_test_abc", "(", "steps", "=", "0", ",", "require_success", "=", "False", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a2c.TestA2C.test_abc_fast_gpu": [[46, 49], ["test_a2c.TestA2C._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_abc_fast_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "steps", "=", "100", ",", "require_success", "=", "False", ",", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a2c.TestA2C._test_abc": [[50, 92], ["test_a2c.TestA2C.make_env_and_successful_return", "test_a2c.TestA2C.make_env_and_successful_return", "test_a2c.TestA2C.make_agent", "pfrl.experiments.train_agent_batch_with_evaluation", "env.close", "pfrl.experiments.evaluator.batch_run_evaluation_episodes", "test_env.close", "numpy.sum", "test_a2c.TestA2C.save", "print", "test_a2c.TestA2C.load", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_agent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent_batch.train_agent_batch_with_evaluation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.batch_run_evaluation_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load"], ["", "def", "_test_abc", "(", "self", ",", "steps", "=", "1000000", ",", "require_success", "=", "True", ",", "gpu", "=", "-", "1", ",", "load_model", "=", "False", ")", ":", "\n", "\n", "        ", "env", ",", "_", "=", "self", ".", "make_env_and_successful_return", "(", "test", "=", "False", ",", "n", "=", "self", ".", "num_processes", ")", "\n", "test_env", ",", "successful_return", "=", "self", ".", "make_env_and_successful_return", "(", "\n", "test", "=", "True", ",", "n", "=", "1", "\n", ")", "\n", "agent", "=", "self", ".", "make_agent", "(", "env", ",", "gpu", ")", "\n", "\n", "if", "load_model", ":", "\n", "            ", "print", "(", "\"Load agent from\"", ",", "self", ".", "agent_dirname", ")", "\n", "agent", ".", "load", "(", "self", ".", "agent_dirname", ")", "\n", "\n", "# Train", "\n", "", "pfrl", ".", "experiments", ".", "train_agent_batch_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "steps", "=", "steps", ",", "\n", "outdir", "=", "self", ".", "tmpdir", ",", "\n", "log_interval", "=", "10", ",", "\n", "eval_interval", "=", "200", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "50", ",", "\n", "successful_score", "=", "1", ",", "\n", "eval_env", "=", "test_env", ",", "\n", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n", "# Test", "\n", "n_test_runs", "=", "100", "\n", "eval_returns", ",", "_", "=", "batch_run_evaluation_episodes", "(", "\n", "test_env", ",", "\n", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "n_test_runs", ",", "\n", ")", "\n", "test_env", ".", "close", "(", ")", "\n", "n_succeeded", "=", "np", ".", "sum", "(", "np", ".", "asarray", "(", "eval_returns", ")", ">=", "successful_return", ")", "\n", "if", "require_success", ":", "\n", "            ", "assert", "n_succeeded", ">", "0.8", "*", "n_test_runs", "\n", "\n", "# Save", "\n", "", "agent", ".", "save", "(", "self", ".", "agent_dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a2c.TestA2C.make_agent": [[93, 98], ["test_a2c.TestA2C.make_model", "torch.optim.Adam", "test_a2c.TestA2C.make_a2c_agent", "test_a2c.TestA2C.parameters"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C.make_model", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a2c.TestA2C.make_a2c_agent"], ["", "def", "make_agent", "(", "self", ",", "env", ",", "gpu", ")", ":", "\n", "        ", "model", "=", "self", ".", "make_model", "(", "env", ")", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "3e-4", ")", "\n", "return", "self", ".", "make_a2c_agent", "(", "\n", "env", "=", "env", ",", "model", "=", "model", ",", "opt", "=", "opt", ",", "gpu", "=", "gpu", ",", "num_processes", "=", "self", ".", "num_processes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a2c.TestA2C.make_a2c_agent": [[100, 108], ["pfrl.agents.a2c.A2C"], "methods", ["None"], ["", "def", "make_a2c_agent", "(", "self", ",", "env", ",", "model", ",", "opt", ",", "gpu", ",", "num_processes", ")", ":", "\n", "        ", "return", "A2C", "(", "\n", "model", ",", "\n", "opt", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.99", ",", "\n", "num_processes", "=", "num_processes", ",", "\n", "use_gae", "=", "self", ".", "use_gae", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a2c.TestA2C.make_model": [[110, 143], ["torch.nn.Sequential", "pfrl.nn.Branched", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear", "pfrl.policies.SoftmaxCategoricalHead", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear", "pfrl.policies.GaussianHeadWithStateIndependentCovariance", "torch.exp"], "methods", ["None"], ["", "def", "make_model", "(", "self", ",", "env", ")", ":", "\n", "        ", "hidden_size", "=", "50", "\n", "\n", "obs_size", "=", "env", ".", "observation_space", ".", "low", ".", "size", "\n", "v", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ",", "\n", ")", "\n", "\n", "if", "self", ".", "discrete", ":", "\n", "            ", "n_actions", "=", "env", ".", "action_space", ".", "n", "\n", "pi", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "n_actions", ")", ",", "\n", "SoftmaxCategoricalHead", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "action_size", "=", "env", ".", "action_space", ".", "low", ".", "size", "\n", "pi", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "action_size", ")", ",", "\n", "GaussianHeadWithStateIndependentCovariance", "(", "\n", "action_size", "=", "action_size", ",", "\n", "var_type", "=", "\"diagonal\"", ",", "\n", "var_func", "=", "lambda", "x", ":", "torch", ".", "exp", "(", "2", "*", "x", ")", ",", "\n", "var_param_init", "=", "0", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "", "return", "Branched", "(", "pi", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a2c.TestA2C.make_env_and_successful_return": [[144, 150], ["pfrl.envs.MultiprocessVectorEnv", "pfrl.envs.abc.ABC", "range"], "methods", ["None"], ["", "def", "make_env_and_successful_return", "(", "self", ",", "test", ",", "n", ")", ":", "\n", "        ", "def", "make_env", "(", ")", ":", "\n", "            ", "return", "ABC", "(", "discrete", "=", "self", ".", "discrete", ",", "deterministic", "=", "test", ")", "\n", "\n", "", "vec_env", "=", "pfrl", ".", "envs", ".", "MultiprocessVectorEnv", "(", "[", "make_env", "for", "_", "in", "range", "(", "n", ")", "]", ")", "\n", "return", "vec_env", ",", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo.NonCudnnLSTM.forward": [[56, 59], ["torch.backends.cudnn.flags", "super().forward"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.forward"], ["def", "forward", "(", "self", ",", "x", ",", "recurrent_state", ")", ":", "\n", "        ", "with", "torch", ".", "backends", ".", "cudnn", ".", "flags", "(", "enabled", "=", "False", ")", ":", "\n", "            ", "return", "super", "(", ")", ".", "forward", "(", "x", ",", "recurrent_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo.TestHessianVectorProduct._generate_params_and_first_order_output": [[62, 68], ["torch.rand", "torch.rand", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["    ", "def", "_generate_params_and_first_order_output", "(", "self", ")", ":", "\n", "        ", "a", "=", "torch", ".", "rand", "(", "3", ",", "requires_grad", "=", "True", ")", "\n", "b", "=", "torch", ".", "rand", "(", "1", ",", "requires_grad", "=", "True", ")", "\n", "params", "=", "[", "a", ",", "b", "]", "\n", "y", "=", "torch", ".", "sum", "(", "a", ",", "dim", "=", "0", ",", "keepdims", "=", "True", ")", "*", "3", "+", "b", "\n", "return", "params", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo.TestHessianVectorProduct._generate_params_and_second_order_output": [[69, 75], ["torch.rand", "torch.rand", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "def", "_generate_params_and_second_order_output", "(", "self", ")", ":", "\n", "        ", "a", "=", "torch", ".", "rand", "(", "3", ",", "requires_grad", "=", "True", ")", "\n", "b", "=", "torch", ".", "rand", "(", "1", ",", "requires_grad", "=", "True", ")", "\n", "params", "=", "[", "a", ",", "b", "]", "\n", "y", "=", "torch", ".", "sum", "(", "a", ",", "dim", "=", "0", ",", "keepdims", "=", "True", ")", "*", "3", "*", "b", "\n", "return", "params", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo.TestHessianVectorProduct.test_first_order": [[76, 84], ["test_trpo.TestHessianVectorProduct._generate_params_and_first_order_output", "torch.rand", "test_trpo.TestHessianVectorProduct.assertRaises", "test_trpo.compute_hessian_vector_product"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo.TestHessianVectorProduct._generate_params_and_first_order_output", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo.compute_hessian_vector_product"], ["", "def", "test_first_order", "(", "self", ")", ":", "\n", "# First order, so its Hessian will contain None", "\n", "        ", "params", ",", "y", "=", "self", ".", "_generate_params_and_first_order_output", "(", ")", "\n", "\n", "vec", "=", "torch", ".", "rand", "(", "4", ")", "\n", "# Hessian-vector product computation should raise an error", "\n", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", ":", "\n", "            ", "compute_hessian_vector_product", "(", "y", ",", "params", ",", "vec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo.TestHessianVectorProduct.test_second_order": [[85, 99], ["test_trpo.TestHessianVectorProduct._generate_params_and_second_order_output", "test_trpo.TestHessianVectorProduct.test_second_order.test_hessian_vector_product_nonzero"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo.TestHessianVectorProduct._generate_params_and_second_order_output"], ["", "", "def", "test_second_order", "(", "self", ")", ":", "\n", "# Second order, so its Hessian will be non-zero", "\n", "        ", "params", ",", "y", "=", "self", ".", "_generate_params_and_second_order_output", "(", ")", "\n", "\n", "def", "test_hessian_vector_product_nonzero", "(", "vec", ")", ":", "\n", "            ", "hvp", "=", "compute_hessian_vector_product", "(", "y", ",", "params", ",", "vec", ")", "\n", "hessian", "=", "compute_hessian", "(", "y", ",", "params", ")", "\n", "self", ".", "assertGreater", "(", "np", ".", "count_nonzero", "(", "hvp", ".", "numpy", "(", ")", ")", ",", "0", ")", "\n", "self", ".", "assertGreater", "(", "np", ".", "count_nonzero", "(", "hessian", ".", "numpy", "(", ")", ")", ",", "0", ")", "\n", "torch_assert_allclose", "(", "hvp", ",", "torch", ".", "matmul", "(", "hessian", ",", "vec", ")", ",", "atol", "=", "1e-3", ")", "\n", "\n", "# Test with two different random vectors, reusing y", "\n", "", "test_hessian_vector_product_nonzero", "(", "torch", ".", "rand", "(", "4", ")", ")", "\n", "test_hessian_vector_product_nonzero", "(", "torch", ".", "rand", "(", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo._TestTRPO.setUp": [[102, 106], ["pytest.fixture", "tempfile.mkdtemp", "os.path.join"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "self", ".", "agent_dirname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdir", ",", "\"agent_final\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo._TestTRPO.test_abc_cpu": [[107, 111], ["test_trpo._TestTRPO._test_abc", "test_trpo._TestTRPO._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_abc_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", ")", "\n", "self", ".", "_test_abc", "(", "steps", "=", "0", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo._TestTRPO.test_abc_gpu": [[112, 116], ["test_trpo._TestTRPO._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_abc_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo._TestTRPO.test_abc_fast_cpu": [[117, 120], ["test_trpo._TestTRPO._test_abc", "test_trpo._TestTRPO._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "def", "test_abc_fast_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "steps", "=", "100", ",", "require_success", "=", "False", ")", "\n", "self", ".", "_test_abc", "(", "steps", "=", "0", ",", "require_success", "=", "False", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo._TestTRPO.test_abc_fast_gpu": [[121, 124], ["test_trpo._TestTRPO._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_abc_fast_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "steps", "=", "100", ",", "require_success", "=", "False", ",", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo._TestTRPO.test_abc_batch_cpu": [[125, 129], ["test_trpo._TestTRPO._test_abc_batch", "test_trpo._TestTRPO._test_abc_batch"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_abc_batch_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc_batch", "(", ")", "\n", "self", ".", "_test_abc_batch", "(", "steps", "=", "0", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo._TestTRPO.test_abc_batch_gpu": [[130, 134], ["test_trpo._TestTRPO._test_abc_batch"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_abc_batch_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc_batch", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo._TestTRPO.test_abc_batch_fast_cpu": [[135, 138], ["test_trpo._TestTRPO._test_abc_batch", "test_trpo._TestTRPO._test_abc_batch"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch"], ["", "def", "test_abc_batch_fast_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc_batch", "(", "steps", "=", "100", ",", "require_success", "=", "False", ")", "\n", "self", ".", "_test_abc_batch", "(", "steps", "=", "0", ",", "require_success", "=", "False", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo._TestTRPO.test_abc_batch_fast_gpu": [[139, 142], ["test_trpo._TestTRPO._test_abc_batch"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_abc_batch_fast_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc_batch", "(", "steps", "=", "100", ",", "require_success", "=", "False", ",", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo._TestTRPO._test_abc": [[143, 185], ["test_trpo._TestTRPO.make_env_and_successful_return", "test_trpo._TestTRPO.make_env_and_successful_return", "test_trpo._TestTRPO.make_agent", "pfrl.experiments.train_agent_with_evaluation", "pfrl.experiments.evaluator.run_evaluation_episodes", "test_trpo._TestTRPO.save", "print", "test_trpo._TestTRPO.load", "numpy.sum", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_agent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent.train_agent_with_evaluation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.run_evaluation_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "def", "_test_abc", "(", "self", ",", "steps", "=", "100000", ",", "require_success", "=", "True", ",", "gpu", "=", "-", "1", ",", "load_model", "=", "False", ")", ":", "\n", "\n", "        ", "env", ",", "_", "=", "self", ".", "make_env_and_successful_return", "(", "test", "=", "False", ")", "\n", "test_env", ",", "successful_return", "=", "self", ".", "make_env_and_successful_return", "(", "test", "=", "True", ")", "\n", "\n", "agent", "=", "self", ".", "make_agent", "(", "env", ",", "gpu", ")", "\n", "\n", "if", "load_model", ":", "\n", "            ", "print", "(", "\"Load agent from\"", ",", "self", ".", "agent_dirname", ")", "\n", "agent", ".", "load", "(", "self", ".", "agent_dirname", ")", "\n", "\n", "", "max_episode_len", "=", "None", "if", "self", ".", "episodic", "else", "2", "\n", "\n", "# Train", "\n", "train_agent_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "eval_env", "=", "test_env", ",", "\n", "steps", "=", "steps", ",", "\n", "outdir", "=", "self", ".", "tmpdir", ",", "\n", "eval_interval", "=", "200", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "5", ",", "\n", "successful_score", "=", "successful_return", ",", "\n", "train_max_episode_len", "=", "max_episode_len", ",", "\n", ")", "\n", "\n", "# Test", "\n", "n_test_runs", "=", "10", "\n", "eval_returns", ",", "_", "=", "run_evaluation_episodes", "(", "\n", "test_env", ",", "\n", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "n_test_runs", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", ")", "\n", "if", "require_success", ":", "\n", "            ", "n_succeeded", "=", "np", ".", "sum", "(", "np", ".", "asarray", "(", "eval_returns", ")", ">=", "successful_return", ")", "\n", "assert", "n_succeeded", "==", "n_test_runs", "\n", "\n", "# Save", "\n", "", "agent", ".", "save", "(", "self", ".", "agent_dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo._TestTRPO._test_abc_batch": [[186, 233], ["test_trpo._TestTRPO.make_vec_env_and_successful_return", "test_trpo._TestTRPO.make_vec_env_and_successful_return", "test_trpo._TestTRPO.make_agent", "pfrl.experiments.train_agent_batch_with_evaluation", "env.close", "pfrl.experiments.evaluator.batch_run_evaluation_episodes", "test_env.close", "test_trpo._TestTRPO.save", "print", "test_trpo._TestTRPO.load", "numpy.sum", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_vec_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_vec_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_agent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent_batch.train_agent_batch_with_evaluation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.batch_run_evaluation_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "def", "_test_abc_batch", "(", "\n", "self", ",", "steps", "=", "100000", ",", "require_success", "=", "True", ",", "gpu", "=", "-", "1", ",", "load_model", "=", "False", ",", "num_envs", "=", "4", "\n", ")", ":", "\n", "\n", "        ", "env", ",", "_", "=", "self", ".", "make_vec_env_and_successful_return", "(", "test", "=", "False", ",", "num_envs", "=", "num_envs", ")", "\n", "test_env", ",", "successful_return", "=", "self", ".", "make_vec_env_and_successful_return", "(", "\n", "test", "=", "True", ",", "num_envs", "=", "num_envs", "\n", ")", "\n", "agent", "=", "self", ".", "make_agent", "(", "env", ",", "gpu", ")", "\n", "max_episode_len", "=", "None", "if", "self", ".", "episodic", "else", "2", "\n", "\n", "if", "load_model", ":", "\n", "            ", "print", "(", "\"Load agent from\"", ",", "self", ".", "agent_dirname", ")", "\n", "agent", ".", "load", "(", "self", ".", "agent_dirname", ")", "\n", "\n", "# Train", "\n", "", "train_agent_batch_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "steps", "=", "steps", ",", "\n", "outdir", "=", "self", ".", "tmpdir", ",", "\n", "eval_interval", "=", "200", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "40", ",", "\n", "successful_score", "=", "successful_return", ",", "\n", "eval_env", "=", "test_env", ",", "\n", "log_interval", "=", "100", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n", "# Test", "\n", "n_test_runs", "=", "10", "\n", "eval_returns", ",", "_", "=", "batch_run_evaluation_episodes", "(", "\n", "test_env", ",", "\n", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "n_test_runs", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", ")", "\n", "test_env", ".", "close", "(", ")", "\n", "if", "require_success", ":", "\n", "            ", "n_succeeded", "=", "np", ".", "sum", "(", "np", ".", "asarray", "(", "eval_returns", ")", ">=", "successful_return", ")", "\n", "n_succeeded", "==", "n_test_runs", "\n", "\n", "# Save", "\n", "", "agent", ".", "save", "(", "self", ".", "agent_dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo._TestTRPO.make_agent": [[234, 263], ["test_trpo._TestTRPO.make_model", "torch.optim.Adam", "pfrl.agents.TRPO", "vf.parameters", "pfrl.nn.EmpiricalNormalization"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C.make_model"], ["", "def", "make_agent", "(", "self", ",", "env", ",", "gpu", ")", ":", "\n", "        ", "policy", ",", "vf", "=", "self", ".", "make_model", "(", "env", ")", "\n", "vf_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "vf", ".", "parameters", "(", ")", ",", "lr", "=", "1e-2", ")", "\n", "\n", "if", "self", ".", "standardize_obs", ":", "\n", "            ", "obs_normalizer", "=", "pfrl", ".", "nn", ".", "EmpiricalNormalization", "(", "\n", "env", ".", "observation_space", ".", "low", ".", "size", "\n", ")", "\n", "", "else", ":", "\n", "            ", "obs_normalizer", "=", "None", "\n", "\n", "", "agent", "=", "pfrl", ".", "agents", ".", "TRPO", "(", "\n", "policy", "=", "policy", ",", "\n", "vf", "=", "vf", ",", "\n", "vf_optimizer", "=", "vf_opt", ",", "\n", "obs_normalizer", "=", "obs_normalizer", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.5", ",", "\n", "lambd", "=", "self", ".", "lambd", ",", "\n", "entropy_coef", "=", "self", ".", "entropy_coef", ",", "\n", "standardize_advantages", "=", "self", ".", "standardize_advantages", ",", "\n", "update_interval", "=", "64", ",", "\n", "vf_batch_size", "=", "32", ",", "\n", "act_deterministically", "=", "True", ",", "\n", "recurrent", "=", "self", ".", "recurrent", ",", "\n", "max_grad_norm", "=", "1.0", ",", "\n", ")", "\n", "\n", "return", "agent", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo._TestTRPO.make_model": [[264, 330], ["pfrl.nn.RecurrentSequential", "torch.nn.Sequential", "torch.no_grad", "layer.weight.mul_", "torch.nn.LSTM", "test_trpo._TestTRPO.make_model.weight_scale"], "methods", ["None"], ["", "def", "make_model", "(", "self", ",", "env", ")", ":", "\n", "        ", "hidden_size", "=", "20", "\n", "\n", "obs_size", "=", "env", ".", "observation_space", ".", "low", ".", "size", "\n", "\n", "def", "weight_scale", "(", "layer", ",", "scale", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "layer", ".", "weight", ".", "mul_", "(", "scale", ")", "\n", "", "return", "layer", "\n", "\n", "", "if", "self", ".", "recurrent", ":", "\n", "            ", "v", "=", "RecurrentSequential", "(", "\n", "nn", ".", "LSTM", "(", "num_layers", "=", "1", ",", "input_size", "=", "obs_size", ",", "hidden_size", "=", "hidden_size", ")", ",", "\n", "weight_scale", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ",", "1e-1", ")", ",", "\n", ")", "\n", "if", "self", ".", "discrete", ":", "\n", "                ", "n_actions", "=", "env", ".", "action_space", ".", "n", "\n", "pi", "=", "RecurrentSequential", "(", "\n", "NonCudnnLSTM", "(", "\n", "num_layers", "=", "1", ",", "input_size", "=", "obs_size", ",", "hidden_size", "=", "hidden_size", "\n", ")", ",", "\n", "weight_scale", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "n_actions", ")", ",", "1e-1", ")", ",", "\n", "SoftmaxCategoricalHead", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "action_size", "=", "env", ".", "action_space", ".", "low", ".", "size", "\n", "pi", "=", "RecurrentSequential", "(", "\n", "NonCudnnLSTM", "(", "\n", "num_layers", "=", "1", ",", "input_size", "=", "obs_size", ",", "hidden_size", "=", "hidden_size", "\n", ")", ",", "\n", "weight_scale", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "action_size", ")", ",", "1e-1", ")", ",", "\n", "GaussianHeadWithStateIndependentCovariance", "(", "\n", "action_size", "=", "action_size", ",", "\n", "var_type", "=", "\"diagonal\"", ",", "\n", "var_func", "=", "lambda", "x", ":", "torch", ".", "exp", "(", "2", "*", "x", ")", ",", "\n", "var_param_init", "=", "0", ",", "\n", ")", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "v", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "weight_scale", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ",", "1e-1", ")", ",", "\n", ")", "\n", "if", "self", ".", "discrete", ":", "\n", "                ", "n_actions", "=", "env", ".", "action_space", ".", "n", "\n", "pi", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "weight_scale", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "n_actions", ")", ",", "1e-1", ")", ",", "\n", "SoftmaxCategoricalHead", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "action_size", "=", "env", ".", "action_space", ".", "low", ".", "size", "\n", "pi", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "weight_scale", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "action_size", ")", ",", "1e-1", ")", ",", "\n", "GaussianHeadWithStateIndependentCovariance", "(", "\n", "action_size", "=", "action_size", ",", "\n", "var_type", "=", "\"diagonal\"", ",", "\n", "var_func", "=", "lambda", "x", ":", "torch", ".", "exp", "(", "2", "*", "x", ")", ",", "\n", "var_param_init", "=", "0", ",", "\n", ")", ",", "\n", ")", "\n", "", "", "return", "pi", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo._TestTRPO.make_env_and_successful_return": [[331, 339], ["pfrl.envs.abc.ABC"], "methods", ["None"], ["", "def", "make_env_and_successful_return", "(", "self", ",", "test", ")", ":", "\n", "        ", "env", "=", "ABC", "(", "\n", "discrete", "=", "self", ".", "discrete", ",", "\n", "episodic", "=", "self", ".", "episodic", "or", "test", ",", "\n", "deterministic", "=", "test", ",", "\n", "partially_observable", "=", "self", ".", "recurrent", ",", "\n", ")", "\n", "return", "env", ",", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo._TestTRPO.make_vec_env_and_successful_return": [[340, 346], ["pfrl.envs.MultiprocessVectorEnv", "test_trpo._TestTRPO.make_env_and_successful_return", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return"], ["", "def", "make_vec_env_and_successful_return", "(", "self", ",", "test", ",", "num_envs", "=", "3", ")", ":", "\n", "        ", "def", "make_env", "(", ")", ":", "\n", "            ", "return", "self", ".", "make_env_and_successful_return", "(", "test", ")", "[", "0", "]", "\n", "\n", "", "vec_env", "=", "pfrl", ".", "envs", ".", "MultiprocessVectorEnv", "(", "[", "make_env", "for", "_", "in", "range", "(", "num_envs", ")", "]", ")", "\n", "return", "vec_env", ",", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo.TestTRPONonRecurrent.set_params": [[355, 372], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "set_params", "(", "\n", "self", ",", "\n", "discrete", ",", "\n", "episodic", ",", "\n", "lambd", ",", "\n", "entropy_coef", ",", "\n", "standardize_advantages", ",", "\n", "standardize_obs", ",", "\n", ")", ":", "\n", "        ", "self", ".", "discrete", "=", "discrete", "\n", "self", ".", "episodic", "=", "episodic", "\n", "self", ".", "lambd", "=", "lambd", "\n", "self", ".", "entropy_coef", "=", "entropy_coef", "\n", "self", ".", "standardize_advantages", "=", "standardize_advantages", "\n", "self", ".", "standardize_obs", "=", "standardize_obs", "\n", "self", ".", "recurrent", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo.TestTRPORecurrent.set_params": [[381, 398], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "set_params", "(", "\n", "self", ",", "\n", "discrete", ",", "\n", "episodic", ",", "\n", "lambd", ",", "\n", "entropy_coef", ",", "\n", "standardize_advantages", ",", "\n", "standardize_obs", ",", "\n", ")", ":", "\n", "        ", "self", ".", "discrete", "=", "discrete", "\n", "self", ".", "episodic", "=", "episodic", "\n", "self", ".", "lambd", "=", "lambd", "\n", "self", ".", "entropy_coef", "=", "entropy_coef", "\n", "self", ".", "standardize_advantages", "=", "standardize_advantages", "\n", "self", ".", "standardize_obs", "=", "standardize_obs", "\n", "self", ".", "recurrent", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo.compute_hessian_vector_product": [[29, 33], ["torch.autograd.grad", "pfrl.agents.trpo._flatten_and_concat_variables", "pfrl.agents.trpo._hessian_vector_product"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._flatten_and_concat_variables", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._hessian_vector_product"], ["def", "compute_hessian_vector_product", "(", "y", ",", "params", ",", "vec", ")", ":", "\n", "    ", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "[", "y", "]", ",", "params", ",", "create_graph", "=", "True", ")", "\n", "flat_grads", "=", "trpo", ".", "_flatten_and_concat_variables", "(", "grads", ")", "\n", "return", "trpo", ".", "_hessian_vector_product", "(", "flat_grads", ",", "params", ",", "vec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_trpo.compute_hessian": [[35, 45], ["torch.autograd.grad", "pfrl.agents.trpo._flatten_and_concat_variables", "range", "torch.stack", "len", "torch.autograd.grad", "all", "pfrl.agents.trpo._flatten_and_concat_variables().detach", "hessian_rows.append", "pfrl.agents.trpo._flatten_and_concat_variables"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._flatten_and_concat_variables", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._flatten_and_concat_variables"], ["", "def", "compute_hessian", "(", "y", ",", "params", ")", ":", "\n", "    ", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "[", "y", "]", ",", "params", ",", "create_graph", "=", "True", ")", "\n", "flat_grads", "=", "trpo", ".", "_flatten_and_concat_variables", "(", "grads", ")", "\n", "hessian_rows", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "flat_grads", ")", ")", ":", "\n", "        ", "ggrads", "=", "torch", ".", "autograd", ".", "grad", "(", "[", "flat_grads", "[", "i", "]", "]", ",", "params", ",", "retain_graph", "=", "True", ")", "\n", "assert", "all", "(", "ggrad", "is", "not", "None", "for", "ggrad", "in", "ggrads", ")", "\n", "flat_ggrads_data", "=", "trpo", ".", "_flatten_and_concat_variables", "(", "ggrads", ")", ".", "detach", "(", ")", "\n", "hessian_rows", ".", "append", "(", "flat_ggrads_data", ")", "\n", "", "return", "torch", ".", "stack", "(", "hessian_rows", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_al.TestALOnDiscreteABC.make_dqn_agent": [[8, 18], ["pfrl.agents.al.AL"], "methods", ["None"], ["    ", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "AL", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_al.TestALOnContinuousABC.make_dqn_agent": [[22, 32], ["pfrl.agents.al.AL"], "methods", ["None"], ["    ", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "AL", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_al.TestALOnDiscretePOABC.make_dqn_agent": [[36, 47], ["pfrl.agents.al.AL"], "methods", ["None"], ["    ", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "AL", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", "recurrent", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.setUp": [[23, 28], ["pytest.fixture", "tempfile.mkdtemp", "os.path.join"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ",", "episodic", ")", ":", "\n", "        ", "self", ".", "episodic", "=", "episodic", "\n", "self", ".", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "self", ".", "agent_dirname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdir", ",", "\"agent_final\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.test_abc_cpu": [[29, 33], ["test_td3.TestTD3._test_abc", "test_td3.TestTD3._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_abc_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", ")", "\n", "self", ".", "_test_abc", "(", "steps", "=", "0", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.test_abc_gpu": [[34, 38], ["test_td3.TestTD3._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_abc_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.test_abc_fast_cpu": [[39, 42], ["test_td3.TestTD3._test_abc", "test_td3.TestTD3._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "def", "test_abc_fast_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "steps", "=", "100", ",", "require_success", "=", "False", ")", "\n", "self", ".", "_test_abc", "(", "steps", "=", "0", ",", "require_success", "=", "False", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.test_abc_fast_gpu": [[43, 46], ["test_td3.TestTD3._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_abc_fast_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "steps", "=", "100", ",", "require_success", "=", "False", ",", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.test_abc_batch_cpu": [[47, 51], ["test_td3.TestTD3._test_abc_batch", "test_td3.TestTD3._test_abc_batch"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_abc_batch_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc_batch", "(", ")", "\n", "self", ".", "_test_abc_batch", "(", "steps", "=", "0", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.test_abc_batch_gpu": [[52, 56], ["test_td3.TestTD3._test_abc_batch"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_abc_batch_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc_batch", "(", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.test_abc_batch_fast_cpu": [[57, 60], ["test_td3.TestTD3._test_abc_batch", "test_td3.TestTD3._test_abc_batch"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch"], ["", "def", "test_abc_batch_fast_cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc_batch", "(", "steps", "=", "100", ",", "require_success", "=", "False", ")", "\n", "self", ".", "_test_abc_batch", "(", "steps", "=", "0", ",", "require_success", "=", "False", ",", "load_model", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.test_abc_batch_fast_gpu": [[61, 64], ["test_td3.TestTD3._test_abc_batch"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch"], ["", "@", "pytest", ".", "mark", ".", "gpu", "\n", "def", "test_abc_batch_fast_gpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc_batch", "(", "steps", "=", "100", ",", "require_success", "=", "False", ",", "gpu", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc": [[65, 107], ["test_td3.TestTD3.make_env_and_successful_return", "test_td3.TestTD3.make_env_and_successful_return", "test_td3.TestTD3.make_agent", "pfrl.experiments.train_agent_with_evaluation", "pfrl.experiments.evaluator.run_evaluation_episodes", "test_td3.TestTD3.save", "print", "test_td3.TestTD3.load", "numpy.sum", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_agent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent.train_agent_with_evaluation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.run_evaluation_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "def", "_test_abc", "(", "self", ",", "steps", "=", "100000", ",", "require_success", "=", "True", ",", "gpu", "=", "-", "1", ",", "load_model", "=", "False", ")", ":", "\n", "\n", "        ", "env", ",", "_", "=", "self", ".", "make_env_and_successful_return", "(", "test", "=", "False", ")", "\n", "test_env", ",", "successful_return", "=", "self", ".", "make_env_and_successful_return", "(", "test", "=", "True", ")", "\n", "\n", "agent", "=", "self", ".", "make_agent", "(", "env", ",", "gpu", ")", "\n", "\n", "if", "load_model", ":", "\n", "            ", "print", "(", "\"Load agent from\"", ",", "self", ".", "agent_dirname", ")", "\n", "agent", ".", "load", "(", "self", ".", "agent_dirname", ")", "\n", "\n", "", "max_episode_len", "=", "None", "if", "self", ".", "episodic", "else", "2", "\n", "\n", "# Train", "\n", "train_agent_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "eval_env", "=", "test_env", ",", "\n", "steps", "=", "steps", ",", "\n", "outdir", "=", "self", ".", "tmpdir", ",", "\n", "eval_interval", "=", "200", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "5", ",", "\n", "successful_score", "=", "successful_return", ",", "\n", "train_max_episode_len", "=", "max_episode_len", ",", "\n", ")", "\n", "\n", "# Test", "\n", "n_test_runs", "=", "5", "\n", "eval_returns", ",", "_", "=", "run_evaluation_episodes", "(", "\n", "test_env", ",", "\n", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "n_test_runs", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", ")", "\n", "if", "require_success", ":", "\n", "            ", "n_succeeded", "=", "np", ".", "sum", "(", "np", ".", "asarray", "(", "eval_returns", ")", ">=", "successful_return", ")", "\n", "assert", "n_succeeded", "==", "n_test_runs", "\n", "\n", "# Save", "\n", "", "agent", ".", "save", "(", "self", ".", "agent_dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3._test_abc_batch": [[108, 154], ["test_td3.TestTD3.make_vec_env_and_successful_return", "test_td3.TestTD3.make_vec_env_and_successful_return", "test_td3.TestTD3.make_agent", "pfrl.experiments.train_agent_batch_with_evaluation", "env.close", "pfrl.experiments.evaluator.batch_run_evaluation_episodes", "test_env.close", "test_td3.TestTD3.save", "print", "test_td3.TestTD3.load", "numpy.sum", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_vec_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_vec_env_and_successful_return", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_agent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent_batch.train_agent_batch_with_evaluation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.batch_run_evaluation_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "def", "_test_abc_batch", "(", "\n", "self", ",", "steps", "=", "100000", ",", "require_success", "=", "True", ",", "gpu", "=", "-", "1", ",", "load_model", "=", "False", "\n", ")", ":", "\n", "\n", "        ", "env", ",", "_", "=", "self", ".", "make_vec_env_and_successful_return", "(", "test", "=", "False", ")", "\n", "test_env", ",", "successful_return", "=", "self", ".", "make_vec_env_and_successful_return", "(", "test", "=", "True", ")", "\n", "\n", "agent", "=", "self", ".", "make_agent", "(", "env", ",", "gpu", ")", "\n", "\n", "if", "load_model", ":", "\n", "            ", "print", "(", "\"Load agent from\"", ",", "self", ".", "agent_dirname", ")", "\n", "agent", ".", "load", "(", "self", ".", "agent_dirname", ")", "\n", "\n", "", "max_episode_len", "=", "None", "if", "self", ".", "episodic", "else", "2", "\n", "\n", "# Train", "\n", "train_agent_batch_with_evaluation", "(", "\n", "agent", "=", "agent", ",", "\n", "env", "=", "env", ",", "\n", "eval_env", "=", "test_env", ",", "\n", "steps", "=", "steps", ",", "\n", "outdir", "=", "self", ".", "tmpdir", ",", "\n", "eval_interval", "=", "200", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "5", ",", "\n", "successful_score", "=", "successful_return", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n", "# Test", "\n", "n_test_runs", "=", "5", "\n", "eval_returns", ",", "_", "=", "batch_run_evaluation_episodes", "(", "\n", "test_env", ",", "\n", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "n_test_runs", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", ")", "\n", "test_env", ".", "close", "(", ")", "\n", "if", "require_success", ":", "\n", "            ", "n_succeeded", "=", "np", ".", "sum", "(", "np", ".", "asarray", "(", "eval_returns", ")", ">=", "successful_return", ")", "\n", "assert", "n_succeeded", "==", "n_test_runs", "\n", "\n", "# Save", "\n", "", "agent", ".", "save", "(", "self", ".", "agent_dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_agent": [[155, 211], ["torch.nn.Sequential", "policy[].weight.detach().mul_", "torch.optim.Adam", "test_td3.TestTD3.make_agent.make_q_func_with_optimizer"], "methods", ["None"], ["", "def", "make_agent", "(", "self", ",", "env", ",", "gpu", ")", ":", "\n", "        ", "obs_size", "=", "env", ".", "observation_space", ".", "low", ".", "size", "\n", "action_size", "=", "env", ".", "action_space", ".", "low", ".", "size", "\n", "hidden_size", "=", "20", "\n", "policy", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "action_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "pfrl", ".", "policies", ".", "DeterministicHead", "(", ")", ",", "\n", ")", "\n", "policy", "[", "2", "]", ".", "weight", ".", "detach", "(", ")", ".", "mul_", "(", "1e-1", ")", "\n", "policy_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "policy", ".", "parameters", "(", ")", ")", "\n", "\n", "def", "make_q_func_with_optimizer", "(", ")", ":", "\n", "            ", "q_func", "=", "nn", ".", "Sequential", "(", "\n", "pfrl", ".", "nn", ".", "ConcatObsAndAction", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "obs_size", "+", "action_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ",", "\n", ")", "\n", "q_func", "[", "3", "]", ".", "weight", ".", "detach", "(", ")", ".", "mul_", "(", "1e-1", ")", "\n", "q_func_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "q_func", ".", "parameters", "(", ")", ",", "lr", "=", "1e-2", ")", "\n", "return", "q_func", ",", "q_func_optimizer", "\n", "\n", "", "q_func1", ",", "q_func1_optimizer", "=", "make_q_func_with_optimizer", "(", ")", "\n", "q_func2", ",", "q_func2_optimizer", "=", "make_q_func_with_optimizer", "(", ")", "\n", "\n", "rbuf", "=", "pfrl", ".", "replay_buffers", ".", "ReplayBuffer", "(", "10", "**", "6", ")", "\n", "\n", "explorer", "=", "pfrl", ".", "explorers", ".", "AdditiveGaussian", "(", "\n", "scale", "=", "0.3", ",", "low", "=", "env", ".", "action_space", ".", "low", ",", "high", "=", "env", ".", "action_space", ".", "high", "\n", ")", "\n", "\n", "def", "burnin_action_func", "(", ")", ":", "\n", "            ", "return", "np", ".", "random", ".", "uniform", "(", "\n", "env", ".", "action_space", ".", "low", ",", "env", ".", "action_space", ".", "high", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "agent", "=", "pfrl", ".", "agents", ".", "TD3", "(", "\n", "policy", "=", "policy", ",", "\n", "q_func1", "=", "q_func1", ",", "\n", "q_func2", "=", "q_func2", ",", "\n", "policy_optimizer", "=", "policy_optimizer", ",", "\n", "q_func1_optimizer", "=", "q_func1_optimizer", ",", "\n", "q_func2_optimizer", "=", "q_func2_optimizer", ",", "\n", "replay_buffer", "=", "rbuf", ",", "\n", "explorer", "=", "explorer", ",", "\n", "gamma", "=", "0.5", ",", "\n", "minibatch_size", "=", "100", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "burnin_action_func", "=", "burnin_action_func", ",", "\n", "max_grad_norm", "=", "1.0", ",", "\n", ")", "\n", "\n", "return", "agent", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return": [[212, 219], ["pfrl.envs.abc.ABC"], "methods", ["None"], ["", "def", "make_env_and_successful_return", "(", "self", ",", "test", ")", ":", "\n", "        ", "env", "=", "ABC", "(", "\n", "discrete", "=", "False", ",", "\n", "episodic", "=", "self", ".", "episodic", "or", "test", ",", "\n", "deterministic", "=", "test", ",", "\n", ")", "\n", "return", "env", ",", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_vec_env_and_successful_return": [[220, 226], ["pfrl.envs.MultiprocessVectorEnv", "test_td3.TestTD3.make_env_and_successful_return", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_env_and_successful_return"], ["", "def", "make_vec_env_and_successful_return", "(", "self", ",", "test", ",", "num_envs", "=", "3", ")", ":", "\n", "        ", "def", "make_env", "(", ")", ":", "\n", "            ", "return", "self", ".", "make_env_and_successful_return", "(", "test", ")", "[", "0", "]", "\n", "\n", "", "vec_env", "=", "pfrl", ".", "envs", ".", "MultiprocessVectorEnv", "(", "[", "make_env", "for", "_", "in", "range", "(", "num_envs", ")", "]", ")", "\n", "return", "vec_env", ",", "1.0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C.setUp": [[24, 28], ["pytest.fixture", "tempfile.mkdtemp", "logging.basicConfig"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "outdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "DEBUG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C.test_abc": [[29, 37], ["test_a3c._TestA3C._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "async_", "\n", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_abc", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "\n", "self", ".", "t_max", ",", "\n", "recurrent", "=", "self", ".", "recurrent", ",", "\n", "episodic", "=", "self", ".", "episodic", ",", "\n", "discrete", "=", "self", ".", "discrete", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C.test_abc_fast": [[39, 48], ["test_a3c._TestA3C._test_abc"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc"], ["", "@", "pytest", ".", "mark", ".", "async_", "\n", "def", "test_abc_fast", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_abc", "(", "\n", "self", ".", "t_max", ",", "\n", "recurrent", "=", "self", ".", "recurrent", ",", "\n", "episodic", "=", "self", ".", "episodic", ",", "\n", "discrete", "=", "self", ".", "discrete", ",", "\n", "steps", "=", "10", ",", "\n", "require_success", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C.make_model": [[50, 112], ["pfrl.nn.RecurrentSequential", "pfrl.nn.RecurrentBranched", "torch.nn.Sequential", "pfrl.nn.Branched", "torch.no_grad", "layer.weight.mul_", "torch.nn.LSTM", "test_a3c._TestA3C.make_model.weight_scale"], "methods", ["None"], ["", "def", "make_model", "(", "self", ",", "env", ")", ":", "\n", "        ", "hidden_size", "=", "20", "\n", "obs_size", "=", "env", ".", "observation_space", ".", "low", ".", "size", "\n", "\n", "def", "weight_scale", "(", "layer", ",", "scale", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "layer", ".", "weight", ".", "mul_", "(", "scale", ")", "\n", "", "return", "layer", "\n", "\n", "", "if", "self", ".", "recurrent", ":", "\n", "            ", "v", "=", "RecurrentSequential", "(", "\n", "nn", ".", "LSTM", "(", "num_layers", "=", "1", ",", "input_size", "=", "obs_size", ",", "hidden_size", "=", "hidden_size", ")", ",", "\n", "weight_scale", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ",", "1e-1", ")", ",", "\n", ")", "\n", "if", "self", ".", "discrete", ":", "\n", "                ", "n_actions", "=", "env", ".", "action_space", ".", "n", "\n", "pi", "=", "RecurrentSequential", "(", "\n", "nn", ".", "LSTM", "(", "num_layers", "=", "1", ",", "input_size", "=", "obs_size", ",", "hidden_size", "=", "hidden_size", ")", ",", "\n", "weight_scale", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "n_actions", ")", ",", "1e-1", ")", ",", "\n", "SoftmaxCategoricalHead", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "action_size", "=", "env", ".", "action_space", ".", "low", ".", "size", "\n", "pi", "=", "RecurrentSequential", "(", "\n", "nn", ".", "LSTM", "(", "num_layers", "=", "1", ",", "input_size", "=", "obs_size", ",", "hidden_size", "=", "hidden_size", ")", ",", "\n", "weight_scale", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "action_size", ")", ",", "1e-1", ")", ",", "\n", "GaussianHeadWithStateIndependentCovariance", "(", "\n", "action_size", "=", "action_size", ",", "\n", "var_type", "=", "\"diagonal\"", ",", "\n", "var_func", "=", "lambda", "x", ":", "torch", ".", "exp", "(", "2", "*", "x", ")", ",", "\n", "var_param_init", "=", "0", ",", "\n", ")", ",", "\n", ")", "\n", "", "return", "RecurrentBranched", "(", "pi", ",", "v", ")", "\n", "", "else", ":", "\n", "            ", "v", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "weight_scale", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ",", "1e-1", ")", ",", "\n", ")", "\n", "if", "self", ".", "discrete", ":", "\n", "                ", "n_actions", "=", "env", ".", "action_space", ".", "n", "\n", "pi", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "weight_scale", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "n_actions", ")", ",", "1e-1", ")", ",", "\n", "SoftmaxCategoricalHead", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "action_size", "=", "env", ".", "action_space", ".", "low", ".", "size", "\n", "pi", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "obs_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "weight_scale", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "action_size", ")", ",", "1e-1", ")", ",", "\n", "GaussianHeadWithStateIndependentCovariance", "(", "\n", "action_size", "=", "action_size", ",", "\n", "var_type", "=", "\"diagonal\"", ",", "\n", "var_func", "=", "lambda", "x", ":", "torch", ".", "exp", "(", "2", "*", "x", ")", ",", "\n", "var_param_init", "=", "0", ",", "\n", ")", ",", "\n", ")", "\n", "", "return", "pfrl", ".", "nn", ".", "Branched", "(", "pi", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c._TestA3C._test_abc": [[113, 192], ["test_a3c._TestA3C._test_abc.make_env"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env"], ["", "", "def", "_test_abc", "(", "\n", "self", ",", "\n", "t_max", ",", "\n", "recurrent", ",", "\n", "discrete", "=", "True", ",", "\n", "episodic", "=", "True", ",", "\n", "steps", "=", "100000", ",", "\n", "require_success", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "nproc", "=", "8", "\n", "\n", "def", "make_env", "(", "process_idx", ",", "test", ")", ":", "\n", "            ", "size", "=", "2", "\n", "return", "ABC", "(", "\n", "size", "=", "size", ",", "\n", "discrete", "=", "discrete", ",", "\n", "episodic", "=", "episodic", "or", "test", ",", "\n", "partially_observable", "=", "self", ".", "recurrent", ",", "\n", "deterministic", "=", "test", ",", "\n", ")", "\n", "\n", "", "env", "=", "make_env", "(", "0", ",", "False", ")", "\n", "\n", "model", "=", "self", ".", "make_model", "(", "env", ")", "\n", "\n", "from", "pfrl", ".", "optimizers", "import", "SharedRMSpropEpsInsideSqrt", "\n", "\n", "opt", "=", "SharedRMSpropEpsInsideSqrt", "(", "model", ".", "parameters", "(", ")", ")", "\n", "gamma", "=", "0.8", "\n", "beta", "=", "1e-2", "\n", "agent", "=", "a3c", ".", "A3C", "(", "\n", "model", ",", "\n", "opt", ",", "\n", "t_max", "=", "t_max", ",", "\n", "gamma", "=", "gamma", ",", "\n", "beta", "=", "beta", ",", "\n", "act_deterministically", "=", "True", ",", "\n", "max_grad_norm", "=", "1.0", ",", "\n", "recurrent", "=", "recurrent", ",", "\n", ")", "\n", "\n", "max_episode_len", "=", "None", "if", "episodic", "else", "2", "\n", "\n", "with", "warnings", ".", "catch_warnings", "(", "record", "=", "True", ")", "as", "warns", ":", "\n", "            ", "train_agent_async", "(", "\n", "outdir", "=", "self", ".", "outdir", ",", "\n", "processes", "=", "nproc", ",", "\n", "make_env", "=", "make_env", ",", "\n", "agent", "=", "agent", ",", "\n", "steps", "=", "steps", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", "eval_interval", "=", "500", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "5", ",", "\n", "successful_score", "=", "1", ",", "\n", ")", "\n", "assert", "len", "(", "warns", ")", "==", "0", ",", "warns", "[", "0", "]", "\n", "\n", "# The agent returned by train_agent_async is not guaranteed to be", "\n", "# successful because parameters could be modified by other processes", "\n", "# after success. Thus here the successful model is loaded explicitly.", "\n", "", "if", "require_success", ":", "\n", "            ", "agent", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "outdir", ",", "\"successful\"", ")", ")", "\n", "\n", "# Test", "\n", "", "env", "=", "make_env", "(", "0", ",", "True", ")", "\n", "n_test_runs", "=", "5", "\n", "eval_returns", ",", "_", "=", "run_evaluation_episodes", "(", "\n", "env", ",", "\n", "agent", ",", "\n", "n_steps", "=", "None", ",", "\n", "n_episodes", "=", "n_test_runs", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", ")", "\n", "successful_return", "=", "1", "\n", "if", "require_success", ":", "\n", "            ", "n_succeeded", "=", "np", ".", "sum", "(", "np", ".", "asarray", "(", "eval_returns", ")", ">=", "successful_return", ")", "\n", "assert", "n_succeeded", "==", "n_test_runs", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c.TestA3CSmallTMax.set_params": [[199, 205], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "set_params", "(", "self", ",", "t_max", ",", "recurrent", ",", "discrete", ",", "episodic", ")", ":", "\n", "        ", "self", ".", "t_max", "=", "t_max", "\n", "self", ".", "recurrent", "=", "recurrent", "\n", "self", ".", "discrete", "=", "discrete", "\n", "self", ".", "episodic", "=", "episodic", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_a3c.TestA3CLargeTMax.set_params": [[212, 218], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "set_params", "(", "self", ",", "t_max", ",", "recurrent", ",", "discrete", ",", "episodic", ")", ":", "\n", "        ", "self", ".", "t_max", "=", "t_max", "\n", "self", ".", "recurrent", "=", "recurrent", "\n", "self", ".", "discrete", "=", "discrete", "\n", "self", ".", "episodic", "=", "episodic", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_double_dqn.TestDoubleDQNOnDiscreteABC.make_dqn_agent": [[10, 20], ["pfrl.agents.double_dqn.DoubleDQN"], "methods", ["None"], ["    ", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "DoubleDQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_double_dqn.TestDoubleDQNOnContinuousABC.make_dqn_agent": [[26, 36], ["pfrl.agents.double_dqn.DoubleDQN"], "methods", ["None"], ["    ", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "DoubleDQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_double_dqn.TestDoubleDQNOnDiscretePOABC.make_dqn_agent": [[42, 53], ["pfrl.agents.double_dqn.DoubleDQN"], "methods", ["None"], ["    ", "def", "make_dqn_agent", "(", "self", ",", "env", ",", "q_func", ",", "opt", ",", "explorer", ",", "rbuf", ",", "gpu", ")", ":", "\n", "        ", "return", "DoubleDQN", "(", "\n", "q_func", ",", "\n", "opt", ",", "\n", "rbuf", ",", "\n", "gpu", "=", "gpu", ",", "\n", "gamma", "=", "0.9", ",", "\n", "explorer", "=", "explorer", ",", "\n", "replay_start_size", "=", "100", ",", "\n", "target_update_interval", "=", "100", ",", "\n", "recurrent", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.concat_obs_and_action.ConcatObsAndAction.__init__": [[13, 15], ["pfrl.nn.lmbda.Lambda.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "__init__", "(", "concat_obs_and_action", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.concat_obs_and_action.concat_obs_and_action": [[6, 10], ["torch.cat", "len"], "function", ["None"], ["def", "concat_obs_and_action", "(", "obs_and_action", ")", ":", "\n", "    ", "\"\"\"Concat observation and action to feed the critic.\"\"\"", "\n", "assert", "len", "(", "obs_and_action", ")", "==", "2", "\n", "return", "torch", ".", "cat", "(", "obs_and_action", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.recurrent.Recurrent.forward": [[16, 31], ["None"], "methods", ["None"], ["\n", "# Import here to avoid circular import", "\n", "from", "pfrl", ".", "nn", "import", "Recurrent", "\n", "\n", "return", "isinstance", "(", "\n", "layer", ",", "\n", "(", "\n", "nn", ".", "LSTM", ",", "\n", "nn", ".", "RNN", ",", "\n", "nn", ".", "GRU", ",", "\n", "Recurrent", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "\n", "", "def", "mask_recurrent_state_at", "(", "recurrent_state", ",", "indices", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.mlp_bn.LinearBN.__init__": [[10, 14], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "in_size", ",", "out_size", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "out_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.mlp_bn.LinearBN.forward": [[15, 17], ["mlp_bn.LinearBN.bn", "mlp_bn.LinearBN.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "bn", "(", "self", ".", "linear", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.mlp_bn.MLPBN.__init__": [[37, 70], ["torch.Module.__init__", "pfrl.initializers.init_lecun_normal", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ModuleList", "torch.ModuleList", "mlp_bn.MLPBN.hidden_layers.append", "zip", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "mlp_bn.LinearBN", "mlp_bn.MLPBN.hidden_layers.append", "mlp_bn.LinearBN"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.lecun_normal.init_lecun_normal", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "hidden_sizes", ",", "\n", "normalize_input", "=", "True", ",", "\n", "normalize_output", "=", "False", ",", "\n", "nonlinearity", "=", "F", ".", "relu", ",", "\n", "last_wscale", "=", "1", ",", "\n", ")", ":", "\n", "        ", "self", ".", "in_size", "=", "in_size", "\n", "self", ".", "out_size", "=", "out_size", "\n", "self", ".", "hidden_sizes", "=", "hidden_sizes", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "normalize_output", "=", "normalize_output", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "normalize_input", ":", "\n", "            ", "self", ".", "input_bn", "=", "nn", ".", "BatchNorm1d", "(", "in_size", ")", "\n", "\n", "", "if", "hidden_sizes", ":", "\n", "            ", "self", ".", "hidden_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "hidden_layers", ".", "append", "(", "LinearBN", "(", "in_size", ",", "hidden_sizes", "[", "0", "]", ")", ")", "\n", "for", "hin", ",", "hout", "in", "zip", "(", "hidden_sizes", ",", "hidden_sizes", "[", "1", ":", "]", ")", ":", "\n", "                ", "self", ".", "hidden_layers", ".", "append", "(", "LinearBN", "(", "hin", ",", "hout", ")", ")", "\n", "", "self", ".", "output", "=", "nn", ".", "Linear", "(", "hidden_sizes", "[", "-", "1", "]", ",", "out_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "output", "=", "nn", ".", "Linear", "(", "in_size", ",", "out_size", ")", "\n", "", "init_lecun_normal", "(", "self", ".", "output", ".", "weight", ",", "scale", "=", "last_wscale", ")", "\n", "\n", "if", "normalize_output", ":", "\n", "            ", "self", ".", "output_bn", "=", "nn", ".", "BatchNorm1d", "(", "out_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.mlp_bn.MLPBN.forward": [[71, 82], ["mlp_bn.MLPBN.output", "mlp_bn.MLPBN.input_bn", "mlp_bn.MLPBN.output_bn", "mlp_bn.MLPBN.nonlinearity", "layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "x", "\n", "if", "self", ".", "normalize_input", ":", "\n", "            ", "h", "=", "self", ".", "input_bn", "(", "h", ")", "\n", "", "if", "self", ".", "hidden_sizes", ":", "\n", "            ", "for", "layer", "in", "self", ".", "hidden_layers", ":", "\n", "                ", "h", "=", "self", ".", "nonlinearity", "(", "layer", "(", "h", ")", ")", "\n", "", "", "h", "=", "self", ".", "output", "(", "h", ")", "\n", "if", "self", ".", "normalize_output", ":", "\n", "            ", "h", "=", "self", ".", "output_bn", "(", "h", ")", "\n", "", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.noisy_chain.to_factorized_noisy": [[11, 24], ["noisy_chain._map_modules", "isinstance", "pfrl.nn.noisy_linear.FactorizedNoisyLinear"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.noisy_chain._map_modules"], ["def", "to_factorized_noisy", "(", "module", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Add noisiness to components of given module\n\n    Currently this fn. only supports torch.nn.Linear (with and without bias)\n    \"\"\"", "\n", "\n", "def", "func_to_factorized_noisy", "(", "module", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "return", "FactorizedNoisyLinear", "(", "module", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "return", "module", "\n", "\n", "", "", "_map_modules", "(", "func_to_factorized_noisy", ",", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.noisy_chain._map_modules": [[26, 34], ["module.named_children", "func", "noisy_chain._map_modules"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.noisy_chain._map_modules"], ["", "def", "_map_modules", "(", "func", ",", "module", ")", ":", "\n", "    ", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "new_child", "=", "func", "(", "child", ")", "\n", "if", "new_child", "is", "child", ":", "\n", "# It's not nn.Linear, so recurse", "\n", "            ", "_map_modules", "(", "func", ",", "child", ")", "\n", "", "else", ":", "\n", "            ", "module", ".", "_modules", "[", "name", "]", "=", "new_child", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.bound_by_tanh.BoundByTanh.__init__": [[13, 15], ["pfrl.nn.lmbda.Lambda.__init__", "pfrl.functions.bound_by_tanh.bound_by_tanh"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.functions.bound_by_tanh.bound_by_tanh"], ["def", "__init__", "(", "self", ",", "low", ",", "high", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "lambda", "x", ":", "bound_by_tanh", "(", "x", ",", "low", ",", "high", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.noisy_linear.FactorizedNoisyLinear.__init__": [[35, 53], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "noisy_linear.init_lecun_uniform", "torch.Linear", "torch.Linear", "torch.Linear", "noisy_linear.init_variance_scaling_constant", "noisy_linear.FactorizedNoisyLinear.mu.to", "noisy_linear.FactorizedNoisyLinear.sigma.to", "noisy_linear.init_variance_scaling_constant", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.noisy_linear.init_lecun_uniform", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.noisy_linear.init_variance_scaling_constant", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.noisy_linear.init_variance_scaling_constant"], ["def", "__init__", "(", "self", ",", "mu_link", ",", "sigma_scale", "=", "0.4", ")", ":", "\n", "        ", "super", "(", "FactorizedNoisyLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_kernel", "=", "None", "\n", "self", ".", "out_size", "=", "mu_link", ".", "out_features", "\n", "self", ".", "hasbias", "=", "mu_link", ".", "bias", "is", "not", "None", "\n", "\n", "in_size", "=", "mu_link", ".", "weight", ".", "shape", "[", "1", "]", "\n", "device", "=", "mu_link", ".", "weight", ".", "device", "\n", "self", ".", "mu", "=", "nn", ".", "Linear", "(", "in_size", ",", "self", ".", "out_size", ",", "bias", "=", "self", ".", "hasbias", ")", "\n", "init_lecun_uniform", "(", "self", ".", "mu", ".", "weight", ",", "scale", "=", "1", "/", "np", ".", "sqrt", "(", "3", ")", ")", "\n", "\n", "self", ".", "sigma", "=", "nn", ".", "Linear", "(", "in_size", ",", "self", ".", "out_size", ",", "bias", "=", "self", ".", "hasbias", ")", "\n", "init_variance_scaling_constant", "(", "self", ".", "sigma", ".", "weight", ",", "scale", "=", "sigma_scale", ")", "\n", "if", "self", ".", "hasbias", ":", "\n", "            ", "init_variance_scaling_constant", "(", "self", ".", "sigma", ".", "bias", ",", "scale", "=", "sigma_scale", ")", "\n", "\n", "", "self", ".", "mu", ".", "to", "(", "device", ")", "\n", "self", ".", "sigma", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.noisy_linear.FactorizedNoisyLinear._eps": [[54, 57], ["torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "_eps", "(", "self", ",", "shape", ",", "dtype", ",", "device", ")", ":", "\n", "        ", "r", "=", "torch", ".", "normal", "(", "mean", "=", "0.0", ",", "std", "=", "1.0", ",", "size", "=", "(", "shape", ",", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "return", "torch", ".", "abs", "(", "torch", ".", "sqrt", "(", "torch", ".", "abs", "(", "r", ")", ")", ")", "*", "torch", ".", "sign", "(", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.noisy_linear.FactorizedNoisyLinear.forward": [[58, 72], ["noisy_linear.FactorizedNoisyLinear._eps", "torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.noisy_linear.FactorizedNoisyLinear._eps"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# use info of sigma.W to avoid strange error messages", "\n", "        ", "dtype", "=", "self", ".", "sigma", ".", "weight", ".", "dtype", "\n", "out_size", ",", "in_size", "=", "self", ".", "sigma", ".", "weight", ".", "shape", "\n", "\n", "eps", "=", "self", ".", "_eps", "(", "in_size", "+", "out_size", ",", "dtype", ",", "self", ".", "sigma", ".", "weight", ".", "device", ")", "\n", "eps_x", "=", "eps", "[", ":", "in_size", "]", "\n", "eps_y", "=", "eps", "[", "in_size", ":", "]", "\n", "W", "=", "torch", ".", "addcmul", "(", "self", ".", "mu", ".", "weight", ",", "self", ".", "sigma", ".", "weight", ",", "torch", ".", "ger", "(", "eps_y", ",", "eps_x", ")", ")", "\n", "if", "self", ".", "hasbias", ":", "\n", "            ", "b", "=", "torch", ".", "addcmul", "(", "self", ".", "mu", ".", "bias", ",", "self", ".", "sigma", ".", "bias", ",", "eps_y", ")", "\n", "return", "F", ".", "linear", "(", "x", ",", "W", ",", "b", ")", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "linear", "(", "x", ",", "W", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.noisy_linear.init_lecun_uniform": [[7, 13], ["torch.nn.init._calculate_correct_fan", "torch.nn.init._calculate_correct_fan", "torch.nn.init._calculate_correct_fan", "numpy.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tensor.uniform_"], "function", ["None"], ["def", "init_lecun_uniform", "(", "tensor", ",", "scale", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Initializes the tensor with LeCunUniform.\"\"\"", "\n", "fan_in", "=", "torch", ".", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "tensor", ",", "\"fan_in\"", ")", "\n", "s", "=", "scale", "*", "np", ".", "sqrt", "(", "3.0", "/", "fan_in", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "return", "tensor", ".", "uniform_", "(", "-", "s", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.noisy_linear.init_variance_scaling_constant": [[15, 24], ["torch.nn.init._calculate_correct_fan", "torch.nn.init._calculate_correct_fan", "torch.nn.init._calculate_correct_fan", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tensor.fill_", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "", "def", "init_variance_scaling_constant", "(", "tensor", ",", "scale", "=", "1.0", ")", ":", "\n", "\n", "    ", "if", "tensor", ".", "ndim", "==", "1", ":", "\n", "        ", "s", "=", "scale", "/", "np", ".", "sqrt", "(", "tensor", ".", "shape", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "fan_in", "=", "torch", ".", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "tensor", ",", "\"fan_in\"", ")", "\n", "s", "=", "scale", "/", "np", ".", "sqrt", "(", "fan_in", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "return", "tensor", ".", "fill_", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.branched.Branched.__init__": [[16, 19], ["super().__init__", "torch.nn.ModuleList"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "*", "modules", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "child_modules", "=", "torch", ".", "nn", ".", "ModuleList", "(", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.branched.Branched.forward": [[20, 31], ["tuple", "mod"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Forward the arguments to the child modules.\n\n        Args:\n            *args, **kwargs: Any arguments forwarded to child modules.  Each\n                child module should be able to accept the arguments.\n\n        Returns:\n            tuple: Tuple of the returned values from the child modules.\n        \"\"\"", "\n", "return", "tuple", "(", "mod", "(", "*", "args", ",", "**", "kwargs", ")", "for", "mod", "in", "self", ".", "child_modules", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.mlp.MLP.__init__": [[10, 30], ["torch.Module.__init__", "pfrl.initializers.init_lecun_normal", "torch.init.zeros_", "torch.init.zeros_", "torch.ModuleList", "torch.ModuleList", "mlp.MLP.hidden_layers.append", "zip", "mlp.MLP.hidden_layers.apply", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "mlp.MLP.hidden_layers.append", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.lecun_normal.init_lecun_normal", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["def", "__init__", "(", "\n", "self", ",", "in_size", ",", "out_size", ",", "hidden_sizes", ",", "nonlinearity", "=", "F", ".", "relu", ",", "last_wscale", "=", "1", "\n", ")", ":", "\n", "        ", "self", ".", "in_size", "=", "in_size", "\n", "self", ".", "out_size", "=", "out_size", "\n", "self", ".", "hidden_sizes", "=", "hidden_sizes", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "hidden_sizes", ":", "\n", "            ", "self", ".", "hidden_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "hidden_layers", ".", "append", "(", "nn", ".", "Linear", "(", "in_size", ",", "hidden_sizes", "[", "0", "]", ")", ")", "\n", "for", "hin", ",", "hout", "in", "zip", "(", "hidden_sizes", ",", "hidden_sizes", "[", "1", ":", "]", ")", ":", "\n", "                ", "self", ".", "hidden_layers", ".", "append", "(", "nn", ".", "Linear", "(", "hin", ",", "hout", ")", ")", "\n", "", "self", ".", "hidden_layers", ".", "apply", "(", "init_chainer_default", ")", "\n", "self", ".", "output", "=", "nn", ".", "Linear", "(", "hidden_sizes", "[", "-", "1", "]", ",", "out_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "output", "=", "nn", ".", "Linear", "(", "in_size", ",", "out_size", ")", "\n", "\n", "", "init_lecun_normal", "(", "self", ".", "output", ".", "weight", ",", "scale", "=", "last_wscale", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "output", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.mlp.MLP.forward": [[31, 37], ["mlp.MLP.output", "mlp.MLP.nonlinearity", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "x", "\n", "if", "self", ".", "hidden_sizes", ":", "\n", "            ", "for", "layer", "in", "self", ".", "hidden_layers", ":", "\n", "                ", "h", "=", "self", ".", "nonlinearity", "(", "layer", "(", "h", ")", ")", "\n", "", "", "return", "self", ".", "output", "(", "h", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.lmbda.Lambda.__init__": [[15, 18], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.lmbda.Lambda.forward": [[19, 21], ["lmbda.Lambda.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.atari_cnn.LargeAtariCNN.__init__": [[23, 41], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "atari_cnn.LargeAtariCNN.apply", "atari_cnn.LargeAtariCNN.apply", "atari_cnn.constant_bias_initializer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.dueling_dqn.constant_bias_initializer"], ["def", "__init__", "(", "\n", "self", ",", "n_input_channels", "=", "4", ",", "n_output_channels", "=", "512", ",", "activation", "=", "F", ".", "relu", ",", "bias", "=", "0.1", "\n", ")", ":", "\n", "        ", "self", ".", "n_input_channels", "=", "n_input_channels", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "n_output_channels", "=", "n_output_channels", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "nn", ".", "Conv2d", "(", "n_input_channels", ",", "32", ",", "8", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "4", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ")", ",", "\n", "]", "\n", ")", "\n", "self", ".", "output", "=", "nn", ".", "Linear", "(", "3136", ",", "n_output_channels", ")", "\n", "\n", "self", ".", "apply", "(", "init_chainer_default", ")", "\n", "self", ".", "apply", "(", "constant_bias_initializer", "(", "bias", "=", "bias", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.atari_cnn.LargeAtariCNN.forward": [[42, 48], ["atari_cnn.LargeAtariCNN.view", "atari_cnn.LargeAtariCNN.activation", "atari_cnn.LargeAtariCNN.activation", "atari_cnn.LargeAtariCNN.size", "atari_cnn.LargeAtariCNN.output", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ")", ":", "\n", "        ", "h", "=", "state", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "h", "=", "self", ".", "activation", "(", "layer", "(", "h", ")", ")", "\n", "", "h_flat", "=", "h", ".", "view", "(", "h", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "activation", "(", "self", ".", "output", "(", "h_flat", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.atari_cnn.SmallAtariCNN.__init__": [[56, 73], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "atari_cnn.SmallAtariCNN.apply", "atari_cnn.SmallAtariCNN.apply", "atari_cnn.constant_bias_initializer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.dueling_dqn.constant_bias_initializer"], ["def", "__init__", "(", "\n", "self", ",", "n_input_channels", "=", "4", ",", "n_output_channels", "=", "256", ",", "activation", "=", "F", ".", "relu", ",", "bias", "=", "0.1", "\n", ")", ":", "\n", "        ", "self", ".", "n_input_channels", "=", "n_input_channels", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "n_output_channels", "=", "n_output_channels", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "nn", ".", "Conv2d", "(", "n_input_channels", ",", "16", ",", "8", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "4", ",", "stride", "=", "2", ")", ",", "\n", "]", "\n", ")", "\n", "self", ".", "output", "=", "nn", ".", "Linear", "(", "2592", ",", "n_output_channels", ")", "\n", "\n", "self", ".", "apply", "(", "init_chainer_default", ")", "\n", "self", ".", "apply", "(", "constant_bias_initializer", "(", "bias", "=", "bias", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.atari_cnn.SmallAtariCNN.forward": [[74, 80], ["atari_cnn.SmallAtariCNN.view", "atari_cnn.SmallAtariCNN.activation", "atari_cnn.SmallAtariCNN.activation", "atari_cnn.SmallAtariCNN.size", "atari_cnn.SmallAtariCNN.output", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ")", ":", "\n", "        ", "h", "=", "state", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "h", "=", "self", ".", "activation", "(", "layer", "(", "h", ")", ")", "\n", "", "h_flat", "=", "h", ".", "view", "(", "h", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "activation", "(", "self", ".", "output", "(", "h_flat", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.atari_cnn.constant_bias_initializer": [[8, 15], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "isinstance", "m.bias.fill_"], "function", ["None"], ["def", "constant_bias_initializer", "(", "bias", "=", "0.0", ")", ":", "\n", "    ", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "init_bias", "(", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ")", ")", ":", "\n", "            ", "m", ".", "bias", ".", "fill_", "(", "bias", ")", "\n", "\n", "", "", "return", "init_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.__init__": [[18, 45], ["torch.nn.Module.__init__", "numpy.dtype", "numpy.dtype.type", "empirical_normalization.EmpiricalNormalization.register_buffer", "empirical_normalization.EmpiricalNormalization.register_buffer", "empirical_normalization.EmpiricalNormalization.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.expand_dims", "numpy.expand_dims", "numpy.zeros", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "shape", ",", "\n", "batch_axis", "=", "0", ",", "\n", "eps", "=", "1e-2", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", "until", "=", "None", ",", "\n", "clip_threshold", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "EmpiricalNormalization", ",", "self", ")", ".", "__init__", "(", ")", "\n", "dtype", "=", "np", ".", "dtype", "(", "dtype", ")", "\n", "self", ".", "batch_axis", "=", "batch_axis", "\n", "self", ".", "eps", "=", "dtype", ".", "type", "(", "eps", ")", "\n", "self", ".", "until", "=", "until", "\n", "self", ".", "clip_threshold", "=", "clip_threshold", "\n", "self", ".", "register_buffer", "(", "\n", "\"_mean\"", ",", "\n", "torch", ".", "tensor", "(", "np", ".", "expand_dims", "(", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "dtype", ")", ",", "batch_axis", ")", ")", ",", "\n", ")", "\n", "self", ".", "register_buffer", "(", "\n", "\"_var\"", ",", "\n", "torch", ".", "tensor", "(", "np", ".", "expand_dims", "(", "np", ".", "ones", "(", "shape", ",", "dtype", "=", "dtype", ")", ",", "batch_axis", ")", ")", ",", "\n", ")", "\n", "self", ".", "register_buffer", "(", "\"count\"", ",", "torch", ".", "tensor", "(", "0", ")", ")", "\n", "\n", "# cache", "\n", "self", ".", "_cached_std_inverse", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.mean": [[46, 49], ["torch.squeeze().clone", "torch.squeeze"], "methods", ["None"], ["", "@", "property", "\n", "def", "mean", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "squeeze", "(", "self", ".", "_mean", ",", "self", ".", "batch_axis", ")", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.std": [[50, 53], ["torch.sqrt().clone", "torch.sqrt", "torch.squeeze"], "methods", ["None"], ["", "@", "property", "\n", "def", "std", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "sqrt", "(", "torch", ".", "squeeze", "(", "self", ".", "_var", ",", "self", ".", "batch_axis", ")", ")", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization._std_inverse": [[54, 60], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_std_inverse", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_cached_std_inverse", "is", "None", ":", "\n", "            ", "self", ".", "_cached_std_inverse", "=", "(", "self", ".", "_var", "+", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "\n", "", "return", "self", ".", "_cached_std_inverse", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.experience": [[61, 85], ["torch.var_mean", "empirical_normalization.EmpiricalNormalization.count.float"], "methods", ["None"], ["", "def", "experience", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Learn input values without computing the output values of them\"\"\"", "\n", "\n", "if", "self", ".", "until", "is", "not", "None", "and", "self", ".", "count", ">=", "self", ".", "until", ":", "\n", "            ", "return", "\n", "\n", "", "count_x", "=", "x", ".", "shape", "[", "self", ".", "batch_axis", "]", "\n", "if", "count_x", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "count", "+=", "count_x", "\n", "rate", "=", "count_x", "/", "self", ".", "count", ".", "float", "(", ")", "\n", "assert", "rate", ">", "0", "\n", "assert", "rate", "<=", "1", "\n", "\n", "var_x", ",", "mean_x", "=", "torch", ".", "var_mean", "(", "\n", "x", ",", "axis", "=", "self", ".", "batch_axis", ",", "keepdims", "=", "True", ",", "unbiased", "=", "False", "\n", ")", "\n", "delta_mean", "=", "mean_x", "-", "self", ".", "_mean", "\n", "self", ".", "_mean", "+=", "rate", "*", "delta_mean", "\n", "self", ".", "_var", "+=", "rate", "*", "(", "var_x", "-", "self", ".", "_var", "+", "delta_mean", "*", "(", "mean_x", "-", "self", ".", "_mean", ")", ")", "\n", "\n", "# clear cache", "\n", "self", ".", "_cached_std_inverse", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.forward": [[86, 106], ["empirical_normalization.EmpiricalNormalization.experience", "torch.clamp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.experience"], ["", "def", "forward", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "\"\"\"Normalize mean and variance of values based on emprical values.\n\n        Args:\n            x (ndarray or Variable): Input values\n            update (bool): Flag to learn the input values\n\n        Returns:\n            ndarray or Variable: Normalized output values\n        \"\"\"", "\n", "\n", "if", "update", ":", "\n", "            ", "self", ".", "experience", "(", "x", ")", "\n", "\n", "", "normalized", "=", "(", "x", "-", "self", ".", "_mean", ")", "*", "self", ".", "_std_inverse", "\n", "if", "self", ".", "clip_threshold", "is", "not", "None", ":", "\n", "            ", "normalized", "=", "torch", ".", "clamp", "(", "\n", "normalized", ",", "-", "self", ".", "clip_threshold", ",", "self", ".", "clip_threshold", "\n", ")", "\n", "", "return", "normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.inverse": [[107, 110], ["torch.sqrt"], "methods", ["None"], ["", "def", "inverse", "(", "self", ",", "y", ")", ":", "\n", "        ", "std", "=", "torch", ".", "sqrt", "(", "self", ".", "_var", "+", "self", ".", "eps", ")", "\n", "return", "y", "*", "std", "+", "self", ".", "_mean", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.recurrent_sequential.RecurrentSequential.forward": [[26, 54], ["pfrl.utils.recurrent.get_packed_sequence_info", "list", "pfrl.utils.recurrent.is_recurrent", "pfrl.utils.recurrent.wrap_packed_sequences_recursive", "len", "len", "tuple", "len", "len", "len", "reversed", "list.pop", "layer", "new_recurrent_state.append", "layer", "pfrl.utils.recurrent.wrap_packed_sequences_recursive", "pfrl.utils.recurrent.unwrap_packed_sequences_recursive"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.get_packed_sequence_info", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.is_recurrent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.wrap_packed_sequences_recursive", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.wrap_packed_sequences_recursive", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.unwrap_packed_sequences_recursive"], ["def", "forward", "(", "self", ",", "sequences", ",", "recurrent_state", ")", ":", "\n", "        ", "if", "recurrent_state", "is", "None", ":", "\n", "            ", "recurrent_state_queue", "=", "[", "None", "]", "*", "len", "(", "self", ".", "recurrent_children", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "recurrent_state", ")", "==", "len", "(", "self", ".", "recurrent_children", ")", "\n", "recurrent_state_queue", "=", "list", "(", "reversed", "(", "recurrent_state", ")", ")", "\n", "", "new_recurrent_state", "=", "[", "]", "\n", "h", "=", "sequences", "\n", "batch_sizes", ",", "sorted_indices", "=", "get_packed_sequence_info", "(", "h", ")", "\n", "is_wrapped", "=", "True", "\n", "for", "layer", "in", "self", ":", "\n", "            ", "if", "is_recurrent", "(", "layer", ")", ":", "\n", "                ", "if", "not", "is_wrapped", ":", "\n", "                    ", "h", "=", "wrap_packed_sequences_recursive", "(", "h", ",", "batch_sizes", ",", "sorted_indices", ")", "\n", "is_wrapped", "=", "True", "\n", "", "rs", "=", "recurrent_state_queue", ".", "pop", "(", ")", "\n", "h", ",", "rs", "=", "layer", "(", "h", ",", "rs", ")", "\n", "new_recurrent_state", ".", "append", "(", "rs", ")", "\n", "", "else", ":", "\n", "                ", "if", "is_wrapped", ":", "\n", "                    ", "h", "=", "unwrap_packed_sequences_recursive", "(", "h", ")", "\n", "is_wrapped", "=", "False", "\n", "", "h", "=", "layer", "(", "h", ")", "\n", "", "", "if", "not", "is_wrapped", ":", "\n", "            ", "h", "=", "wrap_packed_sequences_recursive", "(", "h", ",", "batch_sizes", ",", "sorted_indices", ")", "\n", "", "assert", "not", "recurrent_state_queue", "\n", "assert", "len", "(", "new_recurrent_state", ")", "==", "len", "(", "self", ".", "recurrent_children", ")", "\n", "return", "h", ",", "tuple", "(", "new_recurrent_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.recurrent_sequential.RecurrentSequential.recurrent_children": [[55, 63], ["tuple", "pfrl.utils.recurrent.is_recurrent"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.is_recurrent"], ["", "@", "property", "\n", "def", "recurrent_children", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return recurrent child modules.\n\n        Returns:\n            tuple: Child modules that are recurrent.\n        \"\"\"", "\n", "return", "tuple", "(", "child", "for", "child", "in", "self", "if", "is_recurrent", "(", "child", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.recurrent_branched.RecurrentBranched.__init__": [[16, 18], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "*", "modules", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.recurrent_branched.RecurrentBranched.forward": [[19, 27], ["tuple", "len", "zip", "link", "zip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequences", ",", "recurrent_state", ")", ":", "\n", "        ", "if", "recurrent_state", "is", "None", ":", "\n", "            ", "n", "=", "len", "(", "self", ")", "\n", "recurrent_state", "=", "[", "None", "]", "*", "n", "\n", "", "child_ys", ",", "rs", "=", "tuple", "(", "\n", "zip", "(", "*", "[", "link", "(", "sequences", ",", "rs", ")", "for", "link", ",", "rs", "in", "zip", "(", "self", ",", "recurrent_state", ")", "]", ")", "\n", ")", "\n", "return", "child_ys", ",", "rs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.functions.bound_by_tanh.bound_by_tanh": [[4, 23], ["isinstance", "torch.as_tensor", "torch.as_tensor", "torch.tanh"], "function", ["None"], ["\n", "class", "BoundByTanh", "(", "Lambda", ")", ":", "\n", "    ", "\"\"\"Bound a given value into [low, high] by tanh.\n\n    Args:\n        low (numpy.ndarray): lower bound\n        high (numpy.ndarray): upper bound\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "low", ",", "high", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "lambda", "x", ":", "bound_by_tanh", "(", "x", ",", "low", ",", "high", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.functions.lower_triangular_matrix.set_batch_non_diagonal": [[5, 10], ["numpy.tril_indices"], "function", ["None"], ["def", "set_batch_non_diagonal", "(", "array", ",", "non_diag_val", ")", ":", "\n", "    ", "batch_size", ",", "m", ",", "n", "=", "array", ".", "shape", "\n", "assert", "m", "==", "n", "\n", "rows", ",", "cols", "=", "np", ".", "tril_indices", "(", "n", ",", "-", "1", ")", "\n", "array", "[", ":", ",", "rows", ",", "cols", "]", "=", "non_diag_val", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.functions.lower_triangular_matrix.set_batch_diagonal": [[12, 17], ["numpy.diag_indices"], "function", ["None"], ["", "def", "set_batch_diagonal", "(", "array", ",", "diag_val", ")", ":", "\n", "    ", "batch_size", ",", "m", ",", "n", "=", "array", ".", "shape", "\n", "assert", "m", "==", "n", "\n", "rows", ",", "cols", "=", "np", ".", "diag_indices", "(", "n", ")", "\n", "array", "[", ":", ",", "rows", ",", "cols", "]", "=", "diag_val", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.functions.lower_triangular_matrix.lower_triangular_matrix": [[19, 29], ["isinstance", "isinstance", "torch.zeros", "y.to.to", "lower_triangular_matrix.set_batch_non_diagonal", "lower_triangular_matrix.set_batch_diagonal"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.functions.lower_triangular_matrix.set_batch_non_diagonal", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.functions.lower_triangular_matrix.set_batch_diagonal"], ["", "def", "lower_triangular_matrix", "(", "diag", ",", "non_diag", ")", ":", "\n", "    ", "assert", "isinstance", "(", "diag", ",", "torch", ".", "Tensor", ")", "\n", "assert", "isinstance", "(", "non_diag", ",", "torch", ".", "Tensor", ")", "\n", "batch_size", "=", "diag", ".", "shape", "[", "0", "]", "\n", "n", "=", "diag", ".", "shape", "[", "1", "]", "\n", "y", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "n", ",", "n", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "y", "=", "y", ".", "to", "(", "diag", ".", "device", ")", "\n", "set_batch_non_diagonal", "(", "y", ",", "non_diag", ")", "\n", "set_batch_diagonal", "(", "y", ",", "diag", ")", "\n", "return", "y", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.policies.deterministic_policy.DeterministicHead.forward": [[10, 12], ["torch.distributions.Independent", "pfrl.distributions.Delta"], "methods", ["None"], ["def", "forward", "(", "self", ",", "loc", ")", ":", "\n", "        ", "return", "torch", ".", "distributions", ".", "Independent", "(", "Delta", "(", "loc", "=", "loc", ")", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.policies.softmax_policy.SoftmaxCategoricalHead.forward": [[6, 8], ["torch.distributions.Categorical"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "logits", ")", ":", "\n", "        ", "return", "torch", ".", "distributions", ".", "Categorical", "(", "logits", "=", "logits", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.policies.gaussian_policy.GaussianHeadWithStateIndependentCovariance.__init__": [[25, 41], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.tensor", "numpy.broadcast_to"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "action_size", ",", "\n", "var_type", "=", "\"spherical\"", ",", "\n", "var_func", "=", "nn", ".", "functional", ".", "softplus", ",", "\n", "var_param_init", "=", "0", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "var_func", "=", "var_func", "\n", "var_size", "=", "{", "\"spherical\"", ":", "1", ",", "\"diagonal\"", ":", "action_size", "}", "[", "var_type", "]", "\n", "\n", "self", ".", "var_param", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "tensor", "(", "\n", "np", ".", "broadcast_to", "(", "var_param_init", ",", "var_size", ")", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.policies.gaussian_policy.GaussianHeadWithStateIndependentCovariance.forward": [[44, 58], ["gaussian_policy.GaussianHeadWithStateIndependentCovariance.var_func", "torch.distributions.Independent", "torch.distributions.Normal", "torch.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mean", ")", ":", "\n", "        ", "\"\"\"Return a Gaussian with given mean.\n\n        Args:\n            mean (torch.Tensor or ndarray): Mean of Gaussian.\n\n        Returns:\n            torch.distributions.Distribution: Gaussian whose mean is the\n                mean argument and whose variance is computed from the parameter\n                of this link.\n        \"\"\"", "\n", "var", "=", "self", ".", "var_func", "(", "self", ".", "var_param", ")", "\n", "return", "torch", ".", "distributions", ".", "Independent", "(", "\n", "torch", ".", "distributions", ".", "Normal", "(", "loc", "=", "mean", ",", "scale", "=", "torch", ".", "sqrt", "(", "var", ")", ")", ",", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.policies.gaussian_policy.GaussianHeadWithDiagonalCovariance.__init__": [[73, 76], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "var_func", "=", "nn", ".", "functional", ".", "softplus", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "var_func", "=", "var_func", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.policies.gaussian_policy.GaussianHeadWithDiagonalCovariance.forward": [[77, 93], ["mean_and_var.chunk", "gaussian_policy.GaussianHeadWithDiagonalCovariance.var_func().sqrt", "torch.distributions.Independent", "torch.distributions.Normal", "gaussian_policy.GaussianHeadWithDiagonalCovariance.var_func"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mean_and_var", ")", ":", "\n", "        ", "\"\"\"Return a Gaussian with given mean and diagonal covariance.\n\n        Args:\n            mean_and_var (torch.Tensor): Vector that is twice the size of an\n                action vector.\n\n        Returns:\n            torch.distributions.Distribution: Gaussian distribution with given\n                mean and diagonal covariance.\n        \"\"\"", "\n", "assert", "mean_and_var", ".", "ndim", "==", "2", "\n", "mean", ",", "pre_var", "=", "mean_and_var", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", "\n", "scale", "=", "self", ".", "var_func", "(", "pre_var", ")", ".", "sqrt", "(", ")", "\n", "return", "torch", ".", "distributions", ".", "Independent", "(", "\n", "torch", ".", "distributions", ".", "Normal", "(", "loc", "=", "mean", ",", "scale", "=", "scale", ")", ",", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.policies.gaussian_policy.GaussianHeadWithFixedCovariance.__init__": [[107, 110], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "scale", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.policies.gaussian_policy.GaussianHeadWithFixedCovariance.forward": [[111, 123], ["torch.distributions.Independent", "torch.distributions.Normal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mean", ")", ":", "\n", "        ", "\"\"\"Return a Gaussian with given mean.\n\n        Args:\n            mean (torch.Tensor): Batch of mean vectors.\n\n        Returns:\n            torch.distributions.Distribution: Multivariate Gaussian whose mean\n                is the mean argument and whose scale is fixed.\n        \"\"\"", "\n", "return", "torch", ".", "distributions", ".", "Independent", "(", "\n", "torch", ".", "distributions", ".", "Normal", "(", "loc", "=", "mean", ",", "scale", "=", "self", ".", "scale", ")", ",", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.episodic.EpisodicReplayBuffer.__init__": [[14, 19], ["collections.defaultdict", "pfrl.collections.random_access_queue.RandomAccessQueue", "pfrl.collections.random_access_queue.RandomAccessQueue"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "capacity", "=", "None", ")", ":", "\n", "        ", "self", ".", "current_episode", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "self", ".", "episodic_memory", "=", "RandomAccessQueue", "(", ")", "\n", "self", ".", "memory", "=", "RandomAccessQueue", "(", ")", "\n", "self", ".", "capacity", "=", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.episodic.EpisodicReplayBuffer.append": [[20, 44], ["dict", "current_episode.append", "episodic.EpisodicReplayBuffer.stop_current_episode"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.stop_current_episode"], ["", "def", "append", "(", "\n", "self", ",", "\n", "state", ",", "\n", "action", ",", "\n", "reward", ",", "\n", "next_state", "=", "None", ",", "\n", "next_action", "=", "None", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", "env_id", "=", "0", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "current_episode", "=", "self", ".", "current_episode", "[", "env_id", "]", "\n", "experience", "=", "dict", "(", "\n", "state", "=", "state", ",", "\n", "action", "=", "action", ",", "\n", "reward", "=", "reward", ",", "\n", "next_state", "=", "next_state", ",", "\n", "next_action", "=", "next_action", ",", "\n", "is_state_terminal", "=", "is_state_terminal", ",", "\n", "**", "kwargs", "\n", ")", "\n", "current_episode", ".", "append", "(", "experience", ")", "\n", "if", "is_state_terminal", ":", "\n", "            ", "self", ".", "stop_current_episode", "(", "env_id", "=", "env_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.episodic.EpisodicReplayBuffer.sample": [[45, 48], ["episodic.EpisodicReplayBuffer.memory.sample", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "", "def", "sample", "(", "self", ",", "n", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "memory", ")", ">=", "n", "\n", "return", "self", ".", "memory", ".", "sample", "(", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.episodic.EpisodicReplayBuffer.sample_episodes": [[49, 56], ["episodic.EpisodicReplayBuffer.episodic_memory.sample", "len", "pfrl.replay_buffer.random_subseq"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.random_subseq"], ["", "def", "sample_episodes", "(", "self", ",", "n_episodes", ",", "max_len", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "episodic_memory", ")", ">=", "n_episodes", "\n", "episodes", "=", "self", ".", "episodic_memory", ".", "sample", "(", "n_episodes", ")", "\n", "if", "max_len", "is", "not", "None", ":", "\n", "            ", "return", "[", "random_subseq", "(", "ep", ",", "max_len", ")", "for", "ep", "in", "episodes", "]", "\n", "", "else", ":", "\n", "            ", "return", "episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.episodic.EpisodicReplayBuffer.__len__": [[57, 59], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.episodic.EpisodicReplayBuffer.n_episodes": [[60, 63], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_episodes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "episodic_memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.episodic.EpisodicReplayBuffer.save": [[64, 67], ["open", "pickle.dump"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "(", "self", ".", "memory", ",", "self", ".", "episodic_memory", ")", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.episodic.EpisodicReplayBuffer.load": [[68, 87], ["isinstance", "open", "pickle.load", "pfrl.collections.random_access_queue.RandomAccessQueue", "pfrl.collections.random_access_queue.RandomAccessQueue", "episode.append", "episodic.EpisodicReplayBuffer.episodic_memory.append"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "memory", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "if", "isinstance", "(", "memory", ",", "tuple", ")", ":", "\n", "            ", "self", ".", "memory", ",", "self", ".", "episodic_memory", "=", "memory", "\n", "", "else", ":", "\n", "# Load v0.2", "\n", "# FIXME: The code works with EpisodicReplayBuffer", "\n", "# but not with PrioritizedEpisodicReplayBuffer", "\n", "            ", "self", ".", "memory", "=", "RandomAccessQueue", "(", "memory", ")", "\n", "self", ".", "episodic_memory", "=", "RandomAccessQueue", "(", ")", "\n", "\n", "# Recover episodic_memory with best effort.", "\n", "episode", "=", "[", "]", "\n", "for", "item", "in", "self", ".", "memory", ":", "\n", "                ", "episode", ".", "append", "(", "item", ")", "\n", "if", "item", "[", "\"is_state_terminal\"", "]", ":", "\n", "                    ", "self", ".", "episodic_memory", ".", "append", "(", "episode", ")", "\n", "episode", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.episodic.EpisodicReplayBuffer.stop_current_episode": [[88, 100], ["episodic.EpisodicReplayBuffer.episodic_memory.append", "episodic.EpisodicReplayBuffer.memory.append", "episodic.EpisodicReplayBuffer.episodic_memory.popleft", "range", "len", "len", "episodic.EpisodicReplayBuffer.memory.popleft"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.popleft", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.popleft"], ["", "", "", "", "def", "stop_current_episode", "(", "self", ",", "env_id", "=", "0", ")", ":", "\n", "        ", "current_episode", "=", "self", ".", "current_episode", "[", "env_id", "]", "\n", "if", "current_episode", ":", "\n", "            ", "self", ".", "episodic_memory", ".", "append", "(", "current_episode", ")", "\n", "for", "transition", "in", "current_episode", ":", "\n", "                ", "self", ".", "memory", ".", "append", "(", "[", "transition", "]", ")", "\n", "", "self", ".", "current_episode", "[", "env_id", "]", "=", "[", "]", "\n", "while", "self", ".", "capacity", "is", "not", "None", "and", "len", "(", "self", ".", "memory", ")", ">", "self", ".", "capacity", ":", "\n", "                ", "discarded_episode", "=", "self", ".", "episodic_memory", ".", "popleft", "(", ")", "\n", "for", "_", "in", "range", "(", "len", "(", "discarded_episode", ")", ")", ":", "\n", "                    ", "self", ".", "memory", ".", "popleft", "(", ")", "\n", "", "", "", "assert", "not", "self", ".", "current_episode", "[", "env_id", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized_episodic.PrioritizedEpisodicReplayBuffer.__init__": [[10, 43], ["collections.defaultdict", "pfrl.collections.prioritized.PrioritizedBuffer", "pfrl.collections.random_access_queue.RandomAccessQueue", "pfrl.replay_buffers.PriorityWeightError.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "capacity", "=", "None", ",", "\n", "alpha", "=", "0.6", ",", "\n", "beta0", "=", "0.4", ",", "\n", "betasteps", "=", "2e5", ",", "\n", "eps", "=", "1e-8", ",", "\n", "normalize_by_max", "=", "True", ",", "\n", "default_priority_func", "=", "None", ",", "\n", "uniform_ratio", "=", "0", ",", "\n", "wait_priority_after_sampling", "=", "True", ",", "\n", "return_sample_weights", "=", "True", ",", "\n", "error_min", "=", "None", ",", "\n", "error_max", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "current_episode", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "self", ".", "episodic_memory", "=", "PrioritizedBuffer", "(", "\n", "capacity", "=", "None", ",", "wait_priority_after_sampling", "=", "wait_priority_after_sampling", "\n", ")", "\n", "self", ".", "memory", "=", "RandomAccessQueue", "(", "maxlen", "=", "capacity", ")", "\n", "self", ".", "capacity_left", "=", "capacity", "\n", "self", ".", "default_priority_func", "=", "default_priority_func", "\n", "self", ".", "uniform_ratio", "=", "uniform_ratio", "\n", "self", ".", "return_sample_weights", "=", "return_sample_weights", "\n", "PriorityWeightError", ".", "__init__", "(", "\n", "self", ",", "\n", "alpha", ",", "\n", "beta0", ",", "\n", "betasteps", ",", "\n", "eps", ",", "\n", "normalize_by_max", ",", "\n", "error_min", "=", "error_min", ",", "\n", "error_max", "=", "error_max", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized_episodic.PrioritizedEpisodicReplayBuffer.sample_episodes": [[45, 58], ["prioritized_episodic.PrioritizedEpisodicReplayBuffer.episodic_memory.sample", "len", "prioritized_episodic.PrioritizedEpisodicReplayBuffer.weights_from_probabilities", "pfrl.replay_buffer.random_subseq"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized.PriorityWeightError.weights_from_probabilities", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.random_subseq"], ["", "def", "sample_episodes", "(", "self", ",", "n_episodes", ",", "max_len", "=", "None", ")", ":", "\n", "        ", "\"\"\"Sample n unique samples from this replay buffer\"\"\"", "\n", "assert", "len", "(", "self", ".", "episodic_memory", ")", ">=", "n_episodes", "\n", "episodes", ",", "probabilities", ",", "min_prob", "=", "self", ".", "episodic_memory", ".", "sample", "(", "\n", "n_episodes", ",", "uniform_ratio", "=", "self", ".", "uniform_ratio", "\n", ")", "\n", "if", "max_len", "is", "not", "None", ":", "\n", "            ", "episodes", "=", "[", "random_subseq", "(", "ep", ",", "max_len", ")", "for", "ep", "in", "episodes", "]", "\n", "", "if", "self", ".", "return_sample_weights", ":", "\n", "            ", "weights", "=", "self", ".", "weights_from_probabilities", "(", "probabilities", ",", "min_prob", ")", "\n", "return", "episodes", ",", "weights", "\n", "", "else", ":", "\n", "            ", "return", "episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized_episodic.PrioritizedEpisodicReplayBuffer.update_errors": [[59, 61], ["prioritized_episodic.PrioritizedEpisodicReplayBuffer.episodic_memory.set_last_priority", "prioritized_episodic.PrioritizedEpisodicReplayBuffer.priority_from_errors"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.PrioritizedBuffer.set_last_priority", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized.PriorityWeightError.priority_from_errors"], ["", "", "def", "update_errors", "(", "self", ",", "errors", ")", ":", "\n", "        ", "self", ".", "episodic_memory", ".", "set_last_priority", "(", "self", ".", "priority_from_errors", "(", "errors", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized_episodic.PrioritizedEpisodicReplayBuffer.stop_current_episode": [[62, 78], ["prioritized_episodic.PrioritizedEpisodicReplayBuffer.memory.extend", "prioritized_episodic.PrioritizedEpisodicReplayBuffer.episodic_memory.append", "prioritized_episodic.PrioritizedEpisodicReplayBuffer.default_priority_func", "len", "prioritized_episodic.PrioritizedEpisodicReplayBuffer.episodic_memory.popleft", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.popleft"], ["", "def", "stop_current_episode", "(", "self", ",", "env_id", "=", "0", ")", ":", "\n", "        ", "current_episode", "=", "self", ".", "current_episode", "[", "env_id", "]", "\n", "if", "current_episode", ":", "\n", "            ", "if", "self", ".", "default_priority_func", "is", "not", "None", ":", "\n", "                ", "priority", "=", "self", ".", "default_priority_func", "(", "current_episode", ")", "\n", "", "else", ":", "\n", "                ", "priority", "=", "None", "\n", "", "self", ".", "memory", ".", "extend", "(", "current_episode", ")", "\n", "self", ".", "episodic_memory", ".", "append", "(", "current_episode", ",", "priority", "=", "priority", ")", "\n", "if", "self", ".", "capacity_left", "is", "not", "None", ":", "\n", "                ", "self", ".", "capacity_left", "-=", "len", "(", "current_episode", ")", "\n", "", "self", ".", "current_episode", "[", "env_id", "]", "=", "[", "]", "\n", "while", "self", ".", "capacity_left", "is", "not", "None", "and", "self", ".", "capacity_left", "<", "0", ":", "\n", "                ", "discarded_episode", "=", "self", ".", "episodic_memory", ".", "popleft", "(", ")", "\n", "self", ".", "capacity_left", "+=", "len", "(", "discarded_episode", ")", "\n", "", "", "assert", "not", "self", ".", "current_episode", "[", "env_id", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.__init__": [[24, 31], ["pfrl.collections.random_access_queue.RandomAccessQueue", "collections.defaultdict", "collections.deque"], "methods", ["None"], ["self", ",", "\n", "state", ",", "\n", "action", ",", "\n", "reward", ",", "\n", "next_state", "=", "None", ",", "\n", "next_action", "=", "None", ",", "\n", "is_state_terminal", "=", "False", ",", "\n", "env_id", "=", "0", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.append": [[33, 63], ["dict", "last_n_transitions.append", "pfrl.replay_buffer.ReplayBuffer.memory.append", "len", "len", "pfrl.replay_buffer.ReplayBuffer.memory.append", "list", "list"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], [")", ":", "\n", "        ", "\"\"\"Append a transition to this replay buffer.\n\n        Args:\n            state: s_t\n            action: a_t\n            reward: r_t\n            next_state: s_{t+1} (can be None if terminal)\n            next_action: a_{t+1} (can be None for off-policy algorithms)\n            is_state_terminal (bool)\n            env_id (object): Object that is unique to each env. It indicates\n                which env a given transition came from in multi-env training.\n            **kwargs: Any other information to store.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "", "@", "abstractmethod", "\n", "def", "sample", "(", "self", ",", "n", ")", ":", "\n", "        ", "\"\"\"Sample n unique transitions from this replay buffer.\n\n        Args:\n            n (int): Number of transitions to sample.\n        Returns:\n            Sequence of n sampled transitions.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "", "@", "abstractmethod", "\n", "def", "__len__", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.stop_current_episode": [[64, 77], ["len", "pfrl.replay_buffer.ReplayBuffer.memory.append", "len", "pfrl.replay_buffer.ReplayBuffer.memory.append", "len", "list", "list"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["\n", "raise", "NotImplementedError", "\n", "\n", "", "@", "abstractmethod", "\n", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "\"\"\"Save the content of the buffer to a file.\n\n        Args:\n            filename (str): Path to a file.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.sample": [[78, 81], ["pfrl.replay_buffer.ReplayBuffer.memory.sample", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "@", "abstractmethod", "\n", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.__len__": [[82, 84], ["len"], "methods", ["None"], ["\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.save": [[85, 88], ["open", "pickle.dump"], "methods", ["None"], ["raise", "NotImplementedError", "\n", "\n", "", "@", "property", "\n", "@", "abstractmethod", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.load": [[89, 95], ["isinstance", "open", "pickle.load", "pfrl.collections.random_access_queue.RandomAccessQueue"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load"], ["def", "capacity", "(", "self", ")", "->", "Optional", "[", "int", "]", ":", "\n", "        ", "\"\"\"Returns the capacity of the buffer in number of transitions.\n\n        If unbounded, returns None instead.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized.PriorityWeightError.__init__": [[28, 46], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "alpha", ",", "beta0", ",", "betasteps", ",", "eps", ",", "normalize_by_max", ",", "error_min", ",", "error_max", "\n", ")", ":", "\n", "        ", "assert", "0.0", "<=", "alpha", "\n", "assert", "0.0", "<=", "beta0", "<=", "1.0", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta0", "\n", "if", "betasteps", "is", "None", ":", "\n", "            ", "self", ".", "beta_add", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "beta_add", "=", "(", "1.0", "-", "beta0", ")", "/", "betasteps", "\n", "", "self", ".", "eps", "=", "eps", "\n", "if", "normalize_by_max", "is", "True", ":", "\n", "            ", "normalize_by_max", "=", "\"batch\"", "\n", "", "assert", "normalize_by_max", "in", "[", "False", ",", "\"batch\"", ",", "\"memory\"", "]", "\n", "self", ".", "normalize_by_max", "=", "normalize_by_max", "\n", "self", ".", "error_min", "=", "error_min", "\n", "self", ".", "error_max", "=", "error_max", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized.PriorityWeightError.priority_from_errors": [[47, 56], ["max", "min", "prioritized.PriorityWeightError.priority_from_errors._clip_error"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min"], ["", "def", "priority_from_errors", "(", "self", ",", "errors", ")", ":", "\n", "        ", "def", "_clip_error", "(", "error", ")", ":", "\n", "            ", "if", "self", ".", "error_min", "is", "not", "None", ":", "\n", "                ", "error", "=", "max", "(", "self", ".", "error_min", ",", "error", ")", "\n", "", "if", "self", ".", "error_max", "is", "not", "None", ":", "\n", "                ", "error", "=", "min", "(", "self", ".", "error_max", ",", "error", ")", "\n", "", "return", "error", "\n", "\n", "", "return", "[", "(", "_clip_error", "(", "d", ")", "+", "self", ".", "eps", ")", "**", "self", ".", "alpha", "for", "d", "in", "errors", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized.PriorityWeightError.weights_from_probabilities": [[57, 67], ["min", "numpy.min", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min"], ["", "def", "weights_from_probabilities", "(", "self", ",", "probabilities", ",", "min_probability", ")", ":", "\n", "        ", "if", "self", ".", "normalize_by_max", "==", "\"batch\"", ":", "\n", "# discard global min and compute batch min", "\n", "            ", "min_probability", "=", "np", ".", "min", "(", "probabilities", ")", "\n", "", "if", "self", ".", "normalize_by_max", ":", "\n", "            ", "weights", "=", "[", "(", "p", "/", "min_probability", ")", "**", "-", "self", ".", "beta", "for", "p", "in", "probabilities", "]", "\n", "", "else", ":", "\n", "            ", "weights", "=", "[", "(", "len", "(", "self", ".", "memory", ")", "*", "p", ")", "**", "-", "self", ".", "beta", "for", "p", "in", "probabilities", "]", "\n", "", "self", ".", "beta", "=", "min", "(", "1.0", ",", "self", ".", "beta", "+", "self", ".", "beta_add", ")", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized.PrioritizedReplayBuffer.__init__": [[87, 115], ["pfrl.collections.prioritized.PrioritizedBuffer", "collections.defaultdict", "prioritized.PriorityWeightError.__init__", "collections.deque"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "capacity", "=", "None", ",", "\n", "alpha", "=", "0.6", ",", "\n", "beta0", "=", "0.4", ",", "\n", "betasteps", "=", "2e5", ",", "\n", "eps", "=", "0.01", ",", "\n", "normalize_by_max", "=", "True", ",", "\n", "error_min", "=", "0", ",", "\n", "error_max", "=", "1", ",", "\n", "num_steps", "=", "1", ",", "\n", ")", ":", "\n", "        ", "self", ".", "capacity", "=", "capacity", "\n", "assert", "num_steps", ">", "0", "\n", "self", ".", "num_steps", "=", "num_steps", "\n", "self", ".", "memory", "=", "PrioritizedBuffer", "(", "capacity", "=", "capacity", ")", "\n", "self", ".", "last_n_transitions", "=", "collections", ".", "defaultdict", "(", "\n", "lambda", ":", "collections", ".", "deque", "(", "[", "]", ",", "maxlen", "=", "num_steps", ")", "\n", ")", "\n", "PriorityWeightError", ".", "__init__", "(", "\n", "self", ",", "\n", "alpha", ",", "\n", "beta0", ",", "\n", "betasteps", ",", "\n", "eps", ",", "\n", "normalize_by_max", ",", "\n", "error_min", "=", "error_min", ",", "\n", "error_max", "=", "error_max", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized.PrioritizedReplayBuffer.sample": [[117, 124], ["prioritized.PrioritizedReplayBuffer.memory.sample", "prioritized.PrioritizedReplayBuffer.weights_from_probabilities", "zip", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized.PriorityWeightError.weights_from_probabilities"], ["", "def", "sample", "(", "self", ",", "n", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "memory", ")", ">=", "n", "\n", "sampled", ",", "probabilities", ",", "min_prob", "=", "self", ".", "memory", ".", "sample", "(", "n", ")", "\n", "weights", "=", "self", ".", "weights_from_probabilities", "(", "probabilities", ",", "min_prob", ")", "\n", "for", "e", ",", "w", "in", "zip", "(", "sampled", ",", "weights", ")", ":", "\n", "            ", "e", "[", "0", "]", "[", "\"weight\"", "]", "=", "w", "\n", "", "return", "sampled", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized.PrioritizedReplayBuffer.update_errors": [[125, 127], ["prioritized.PrioritizedReplayBuffer.memory.set_last_priority", "prioritized.PrioritizedReplayBuffer.priority_from_errors"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.PrioritizedBuffer.set_last_priority", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized.PriorityWeightError.priority_from_errors"], ["", "def", "update_errors", "(", "self", ",", "errors", ")", ":", "\n", "        ", "self", ".", "memory", ".", "set_last_priority", "(", "self", ".", "priority_from_errors", "(", "errors", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.persistent.PersistentReplayBuffer.__init__": [[42, 71], ["replay_buffer.ReplayBuffer.__init__", "pfrl.collections.persistent_collections.PersistentRandomAccessQueue", "mn_coll.PersistentRandomAccessQueue", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dirname", ",", "\n", "capacity", ",", "\n", "*", ",", "\n", "ancestor", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "distributed", "=", "False", ",", "\n", "group", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "capacity", ")", "\n", "\n", "if", "not", "distributed", ":", "\n", "            ", "self", ".", "memory", "=", "PersistentRandomAccessQueue", "(", "\n", "dirname", ",", "capacity", ",", "ancestor", "=", "ancestor", ",", "logger", "=", "logger", "\n", ")", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "# Use distributed versions of PersistentRandomAccessQueue", "\n", "                ", "import", "pfrlmn", ".", "collections", ".", "persistent_collections", "as", "mn_coll", "\n", "\n", "self", ".", "memory", "=", "mn_coll", ".", "PersistentRandomAccessQueue", "(", "\n", "dirname", ",", "capacity", ",", "ancestor", "=", "ancestor", ",", "logger", "=", "logger", ",", "group", "=", "group", "\n", ")", "\n", "\n", "", "except", "ImportError", ":", "\n", "# \"pfrlmn\" package is not publicly available as of pfrl release.", "\n", "                ", "raise", "RuntimeError", "(", "\n", "\"`pfrlmn` private package is required \"", "\n", "\"to enable distributed execution support \"", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.persistent.PersistentReplayBuffer.save": [[75, 77], ["None"], "methods", ["None"], ["", "", "", "def", "save", "(", "self", ",", "_", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.persistent.PersistentReplayBuffer.load": [[78, 81], ["warnings.warn"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "_", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "\"{}.load() has been ignored, as it is persistent replay buffer\"", ".", "format", "(", "self", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.persistent.PersistentEpisodicReplayBuffer.__init__": [[109, 155], ["episodic.EpisodicReplayBuffer.__init__", "os.path.join", "os.path.join", "pfrl.collections.persistent_collections.PersistentRandomAccessQueue", "pfrl.collections.persistent_collections.PersistentRandomAccessQueue", "mn_coll.PersistentRandomAccessQueue", "mn_coll.PersistentRandomAccessQueue", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dirname", ",", "\n", "capacity", ",", "\n", "*", ",", "\n", "ancestor", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "distributed", "=", "False", ",", "\n", "group", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "capacity", ")", "\n", "\n", "self", ".", "memory_dir", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "\"memory\"", ")", "\n", "self", ".", "episodic_memory_dir", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "\"episodic_memory\"", ")", "\n", "\n", "if", "not", "distributed", ":", "\n", "            ", "self", ".", "memory", "=", "PersistentRandomAccessQueue", "(", "\n", "self", ".", "memory_dir", ",", "capacity", ",", "ancestor", "=", "ancestor", ",", "logger", "=", "logger", "\n", ")", "\n", "self", ".", "episodic_memory", "=", "PersistentRandomAccessQueue", "(", "\n", "self", ".", "episodic_memory_dir", ",", "capacity", ",", "ancestor", "=", "ancestor", ",", "logger", "=", "logger", "\n", ")", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "# Use distributed versions of PersistentRandomAccessQueue", "\n", "                ", "import", "pfrlmn", ".", "collections", ".", "persistent_collections", "as", "mn_coll", "\n", "\n", "self", ".", "memory", "=", "mn_coll", ".", "PersistentRandomAccessQueue", "(", "\n", "self", ".", "memory_dir", ",", "\n", "capacity", ",", "\n", "ancestor", "=", "ancestor", ",", "\n", "logger", "=", "logger", ",", "\n", "group", "=", "group", ",", "\n", ")", "\n", "self", ".", "episodic_memory", "=", "mn_coll", ".", "PersistentRandomAccessQueue", "(", "\n", "self", ".", "episodic_memory_dir", ",", "\n", "capacity", ",", "\n", "ancestor", "=", "ancestor", ",", "\n", "logger", "=", "logger", ",", "\n", "group", "=", "group", ",", "\n", ")", "\n", "\n", "", "except", "ImportError", ":", "\n", "# \"pfrlmn\" package is not publicly available as of pfrl release.", "\n", "                ", "raise", "RuntimeError", "(", "\n", "\"`pfrlmn` private package is required \"", "\n", "\"to enable distributed execution support \"", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.persistent.PersistentEpisodicReplayBuffer.save": [[159, 161], ["None"], "methods", ["None"], ["", "", "", "def", "save", "(", "self", ",", "_", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.persistent.PersistentEpisodicReplayBuffer.load": [[162, 165], ["warnings.warn"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "_", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "\"PersistentEpisodicReplayBuffer.load() is called but it has not effect.\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent_batch.train_agent_batch": [[10, 155], ["collections.deque", "numpy.zeros", "numpy.zeros", "numpy.zeros", "env.reset", "hasattr", "logging.getLogger", "pfrl.experiments.evaluator.save_agent", "agent.batch_act", "env.step", "numpy.logical_or", "agent.batch_observe", "numpy.logical_or", "numpy.logical_not", "collections.deque.extend", "range", "env.reset", "pfrl.experiments.evaluator.save_agent", "env.close", "numpy.zeros", "logger.info", "logger.info", "evaluator.evaluate_if_necessary", "evaluator.env.close", "info.get", "pfrl.experiments.evaluator.save_agent", "hook", "dict", "eval_stats_history.append", "numpy.sum", "agent.get_statistics", "numpy.sum", "agent.get_statistics", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.save_agent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.batch_act", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.batch_observe", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.save_agent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.evaluate_if_necessary", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.save_agent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.get_statistics", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.get_statistics", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["def", "train_agent_batch", "(", "\n", "agent", ",", "\n", "env", ",", "\n", "steps", ",", "\n", "outdir", ",", "\n", "checkpoint_freq", "=", "None", ",", "\n", "log_interval", "=", "None", ",", "\n", "max_episode_len", "=", "None", ",", "\n", "step_offset", "=", "0", ",", "\n", "evaluator", "=", "None", ",", "\n", "successful_score", "=", "None", ",", "\n", "step_hooks", "=", "(", ")", ",", "\n", "return_window_size", "=", "100", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Train an agent in a batch environment.\n\n    Args:\n        agent: Agent to train.\n        env: Environment to train the agent against.\n        steps (int): Number of total time steps for training.\n        outdir (str): Path to the directory to output things.\n        checkpoint_freq (int): frequency at which agents are stored.\n        log_interval (int): Interval of logging.\n        max_episode_len (int): Maximum episode length.\n        step_offset (int): Time step from which training starts.\n        return_window_size (int): Number of training episodes used to estimate\n            the average returns of the current agent.\n        successful_score (float): Finish training if the mean score is greater\n            or equal to thisvalue if not None\n        step_hooks (Sequence): Sequence of callable objects that accepts\n            (env, agent, step) as arguments. They are called every step.\n            See pfrl.experiments.hooks.\n        logger (logging.Logger): Logger used in this function.\n    Returns:\n        List of evaluation episode stats dict.\n    \"\"\"", "\n", "\n", "logger", "=", "logger", "or", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "recent_returns", "=", "deque", "(", "maxlen", "=", "return_window_size", ")", "\n", "\n", "num_envs", "=", "env", ".", "num_envs", "\n", "episode_r", "=", "np", ".", "zeros", "(", "num_envs", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "episode_idx", "=", "np", ".", "zeros", "(", "num_envs", ",", "dtype", "=", "\"i\"", ")", "\n", "episode_len", "=", "np", ".", "zeros", "(", "num_envs", ",", "dtype", "=", "\"i\"", ")", "\n", "\n", "# o_0, r_0", "\n", "obss", "=", "env", ".", "reset", "(", ")", "\n", "\n", "t", "=", "step_offset", "\n", "if", "hasattr", "(", "agent", ",", "\"t\"", ")", ":", "\n", "        ", "agent", ".", "t", "=", "step_offset", "\n", "\n", "", "eval_stats_history", "=", "[", "]", "# List of evaluation episode stats dict", "\n", "try", ":", "\n", "        ", "while", "True", ":", "\n", "# a_t", "\n", "            ", "actions", "=", "agent", ".", "batch_act", "(", "obss", ")", "\n", "# o_{t+1}, r_{t+1}", "\n", "obss", ",", "rs", ",", "dones", ",", "infos", "=", "env", ".", "step", "(", "actions", ")", "\n", "episode_r", "+=", "rs", "\n", "episode_len", "+=", "1", "\n", "\n", "# Compute mask for done and reset", "\n", "if", "max_episode_len", "is", "None", ":", "\n", "                ", "resets", "=", "np", ".", "zeros", "(", "num_envs", ",", "dtype", "=", "bool", ")", "\n", "", "else", ":", "\n", "                ", "resets", "=", "episode_len", "==", "max_episode_len", "\n", "", "resets", "=", "np", ".", "logical_or", "(", "\n", "resets", ",", "[", "info", ".", "get", "(", "\"needs_reset\"", ",", "False", ")", "for", "info", "in", "infos", "]", "\n", ")", "\n", "# Agent observes the consequences", "\n", "agent", ".", "batch_observe", "(", "obss", ",", "rs", ",", "dones", ",", "resets", ")", "\n", "\n", "# Make mask. 0 if done/reset, 1 if pass", "\n", "end", "=", "np", ".", "logical_or", "(", "resets", ",", "dones", ")", "\n", "not_end", "=", "np", ".", "logical_not", "(", "end", ")", "\n", "\n", "# For episodes that ends, do the following:", "\n", "#   1. increment the episode count", "\n", "#   2. record the return", "\n", "#   3. clear the record of rewards", "\n", "#   4. clear the record of the number of steps", "\n", "#   5. reset the env to start a new episode", "\n", "# 3-5 are skipped when training is already finished.", "\n", "episode_idx", "+=", "end", "\n", "recent_returns", ".", "extend", "(", "episode_r", "[", "end", "]", ")", "\n", "\n", "for", "_", "in", "range", "(", "num_envs", ")", ":", "\n", "                ", "t", "+=", "1", "\n", "if", "checkpoint_freq", "and", "t", "%", "checkpoint_freq", "==", "0", ":", "\n", "                    ", "save_agent", "(", "agent", ",", "t", ",", "outdir", ",", "logger", ",", "suffix", "=", "\"_checkpoint\"", ")", "\n", "\n", "", "for", "hook", "in", "step_hooks", ":", "\n", "                    ", "hook", "(", "env", ",", "agent", ",", "t", ")", "\n", "\n", "", "", "if", "(", "\n", "log_interval", "is", "not", "None", "\n", "and", "t", ">=", "log_interval", "\n", "and", "t", "%", "log_interval", "<", "num_envs", "\n", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "\"outdir:{} step:{} episode:{} last_R: {} average_R:{}\"", ".", "format", "(", "# NOQA", "\n", "outdir", ",", "\n", "t", ",", "\n", "np", ".", "sum", "(", "episode_idx", ")", ",", "\n", "recent_returns", "[", "-", "1", "]", "if", "recent_returns", "else", "np", ".", "nan", ",", "\n", "np", ".", "mean", "(", "recent_returns", ")", "if", "recent_returns", "else", "np", ".", "nan", ",", "\n", ")", "\n", ")", "\n", "logger", ".", "info", "(", "\"statistics: {}\"", ".", "format", "(", "agent", ".", "get_statistics", "(", ")", ")", ")", "\n", "", "if", "evaluator", ":", "\n", "                ", "eval_score", "=", "evaluator", ".", "evaluate_if_necessary", "(", "\n", "t", "=", "t", ",", "episodes", "=", "np", ".", "sum", "(", "episode_idx", ")", "\n", ")", "\n", "if", "eval_score", "is", "not", "None", ":", "\n", "                    ", "eval_stats", "=", "dict", "(", "agent", ".", "get_statistics", "(", ")", ")", "\n", "eval_stats", "[", "\"eval_score\"", "]", "=", "eval_score", "\n", "eval_stats_history", ".", "append", "(", "eval_stats", ")", "\n", "if", "(", "\n", "successful_score", "is", "not", "None", "\n", "and", "evaluator", ".", "max_score", ">=", "successful_score", "\n", ")", ":", "\n", "                        ", "break", "\n", "\n", "", "", "", "if", "t", ">=", "steps", ":", "\n", "                ", "break", "\n", "\n", "# Start new episodes if needed", "\n", "", "episode_r", "[", "end", "]", "=", "0", "\n", "episode_len", "[", "end", "]", "=", "0", "\n", "obss", "=", "env", ".", "reset", "(", "not_end", ")", "\n", "\n", "", "", "except", "(", "Exception", ",", "KeyboardInterrupt", ")", ":", "\n", "# Save the current model before being killed", "\n", "        ", "save_agent", "(", "agent", ",", "t", ",", "outdir", ",", "logger", ",", "suffix", "=", "\"_except\"", ")", "\n", "env", ".", "close", "(", ")", "\n", "if", "evaluator", ":", "\n", "            ", "evaluator", ".", "env", ".", "close", "(", ")", "\n", "", "raise", "\n", "", "else", ":", "\n", "# Save the final model", "\n", "        ", "save_agent", "(", "agent", ",", "t", ",", "outdir", ",", "logger", ",", "suffix", "=", "\"_finish\"", ")", "\n", "\n", "", "return", "eval_stats_history", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent_batch.train_agent_batch_with_evaluation": [[157, 264], ["os.makedirs", "pfrl.experiments.evaluator.Evaluator", "train_agent_batch.train_agent_batch", "logging.getLogger", "ValueError"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent_batch.train_agent_batch"], ["", "def", "train_agent_batch_with_evaluation", "(", "\n", "agent", ",", "\n", "env", ",", "\n", "steps", ",", "\n", "eval_n_steps", ",", "\n", "eval_n_episodes", ",", "\n", "eval_interval", ",", "\n", "outdir", ",", "\n", "checkpoint_freq", "=", "None", ",", "\n", "max_episode_len", "=", "None", ",", "\n", "step_offset", "=", "0", ",", "\n", "eval_max_episode_len", "=", "None", ",", "\n", "return_window_size", "=", "100", ",", "\n", "eval_env", "=", "None", ",", "\n", "log_interval", "=", "None", ",", "\n", "successful_score", "=", "None", ",", "\n", "step_hooks", "=", "(", ")", ",", "\n", "evaluation_hooks", "=", "(", ")", ",", "\n", "save_best_so_far_agent", "=", "True", ",", "\n", "use_tensorboard", "=", "False", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Train an agent while regularly evaluating it.\n\n    Args:\n        agent: Agent to train.\n        env: Environment train the againt against.\n        steps (int): Number of total time steps for training.\n        eval_n_steps (int): Number of timesteps at each evaluation phase.\n        eval_n_runs (int): Number of runs for each time of evaluation.\n        eval_interval (int): Interval of evaluation.\n        outdir (str): Path to the directory to output things.\n        log_interval (int): Interval of logging.\n        checkpoint_freq (int): frequency with which to store networks\n        max_episode_len (int): Maximum episode length.\n        step_offset (int): Time step from which training starts.\n        return_window_size (int): Number of training episodes used to estimate\n            the average returns of the current agent.\n        eval_max_episode_len (int or None): Maximum episode length of\n            evaluation runs. If set to None, max_episode_len is used instead.\n        eval_env: Environment used for evaluation.\n        successful_score (float): Finish training if the mean score is greater\n            or equal to thisvalue if not None\n        step_hooks (Sequence): Sequence of callable objects that accepts\n            (env, agent, step) as arguments. They are called every step.\n            See pfrl.experiments.hooks.\n        evaluation_hooks (Sequence): Sequence of\n            pfrl.experiments.evaluation_hooks.EvaluationHook objects. They are\n            called after each evaluation.\n        save_best_so_far_agent (bool): If set to True, after each evaluation,\n            if the score (= mean return of evaluation episodes) exceeds\n            the best-so-far score, the current agent is saved.\n        use_tensorboard (bool): Additionally log eval stats to tensorboard\n        logger (logging.Logger): Logger used in this function.\n    Returns:\n        agent: Trained agent.\n        eval_stats_history: List of evaluation episode stats dict.\n    \"\"\"", "\n", "\n", "logger", "=", "logger", "or", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "for", "hook", "in", "evaluation_hooks", ":", "\n", "        ", "if", "not", "hook", ".", "support_train_agent_batch", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"{} does not support train_agent_batch_with_evaluation().\"", ".", "format", "(", "hook", ")", "\n", ")", "\n", "\n", "", "", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "eval_env", "is", "None", ":", "\n", "        ", "eval_env", "=", "env", "\n", "\n", "", "if", "eval_max_episode_len", "is", "None", ":", "\n", "        ", "eval_max_episode_len", "=", "max_episode_len", "\n", "\n", "", "evaluator", "=", "Evaluator", "(", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "eval_n_steps", ",", "\n", "n_episodes", "=", "eval_n_episodes", ",", "\n", "eval_interval", "=", "eval_interval", ",", "\n", "outdir", "=", "outdir", ",", "\n", "max_episode_len", "=", "eval_max_episode_len", ",", "\n", "env", "=", "eval_env", ",", "\n", "step_offset", "=", "step_offset", ",", "\n", "evaluation_hooks", "=", "evaluation_hooks", ",", "\n", "save_best_so_far_agent", "=", "save_best_so_far_agent", ",", "\n", "use_tensorboard", "=", "use_tensorboard", ",", "\n", "logger", "=", "logger", ",", "\n", ")", "\n", "\n", "eval_stats_history", "=", "train_agent_batch", "(", "\n", "agent", ",", "\n", "env", ",", "\n", "steps", ",", "\n", "outdir", ",", "\n", "checkpoint_freq", "=", "checkpoint_freq", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", "step_offset", "=", "step_offset", ",", "\n", "evaluator", "=", "evaluator", ",", "\n", "successful_score", "=", "successful_score", ",", "\n", "return_window_size", "=", "return_window_size", ",", "\n", "log_interval", "=", "log_interval", ",", "\n", "step_hooks", "=", "step_hooks", ",", "\n", "logger", "=", "logger", ",", "\n", ")", "\n", "\n", "return", "agent", ",", "eval_stats_history", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.is_under_git_control": [[14, 17], ["pfrl.utils.is_return_code_zero"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.is_return_code_zero.is_return_code_zero"], ["def", "is_under_git_control", "(", ")", ":", "\n", "    ", "\"\"\"Return true iff the current directory is under git control.\"\"\"", "\n", "return", "pfrl", ".", "utils", ".", "is_return_code_zero", "(", "[", "\"git\"", ",", "\"rev-parse\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.generate_exp_id": [[19, 48], ["subprocess.check_output().strip", "names.append", "prepare_output_dir.is_under_git_control", "RuntimeError", "names.append", "subprocess.check_output().strip.decode", "subprocess.check_output", "pickle.dumps", "names.append", "subprocess.check_output", "binascii.crc32"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.is_under_git_control", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "generate_exp_id", "(", "prefix", "=", "None", ",", "argv", "=", "sys", ".", "argv", ")", "->", "str", ":", "\n", "    ", "\"\"\"Generate reproducible, unique and deterministic experiment id\n\n    The generated id will be string generated from prefix, Git\n    checksum, git diff from HEAD and command line arguments.\n\n    Returns:\n        A generated experiment id in string (str) which if avialable\n        for directory name\n\n    \"\"\"", "\n", "\n", "if", "not", "is_under_git_control", "(", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Cannot generate experiment id due to Git lacking.\"", ")", "\n", "\n", "", "names", "=", "[", "]", "\n", "if", "prefix", "is", "not", "None", ":", "\n", "        ", "names", ".", "append", "(", "prefix", ")", "\n", "\n", "", "head", "=", "subprocess", ".", "check_output", "(", "\"git rev-parse HEAD\"", ".", "split", "(", ")", ")", ".", "strip", "(", ")", "\n", "names", ".", "append", "(", "head", ".", "decode", "(", ")", ")", "\n", "\n", "# Caveat: does not work with new files that are not yet cached", "\n", "sources", "=", "[", "subprocess", ".", "check_output", "(", "\"git diff HEAD\"", ".", "split", "(", ")", ")", ",", "pickle", ".", "dumps", "(", "argv", ")", "]", "\n", "\n", "for", "source", "in", "sources", ":", "\n", "        ", "names", ".", "append", "(", "\"%08x\"", "%", "crc32", "(", "source", ")", ")", "\n", "\n", "", "return", "\"-\"", ".", "join", "(", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.save_git_information": [[50, 66], ["open", "f.write", "open", "f.write", "open", "f.write", "open", "f.write", "os.path.join", "subprocess.check_output", "os.path.join", "subprocess.check_output", "os.path.join", "subprocess.check_output", "os.path.join", "subprocess.check_output"], "function", ["None"], ["", "def", "save_git_information", "(", "outdir", ")", ":", "\n", "# Save `git rev-parse HEAD` (SHA of the current commit)", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"git-head.txt\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "subprocess", ".", "check_output", "(", "\"git rev-parse HEAD\"", ".", "split", "(", ")", ")", ")", "\n", "\n", "# Save `git status`", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"git-status.txt\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "subprocess", ".", "check_output", "(", "\"git status\"", ".", "split", "(", ")", ")", ")", "\n", "\n", "# Save `git log`", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"git-log.txt\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "subprocess", ".", "check_output", "(", "\"git log\"", ".", "split", "(", ")", ")", ")", "\n", "\n", "# Save `git diff`", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"git-diff.txt\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "subprocess", ".", "check_output", "(", "\"git diff HEAD\"", ".", "split", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.prepare_output_dir": [[68, 163], ["datetime.datetime.now().strftime", "os.path.join", "os.makedirs", "prepare_output_dir.is_under_git_control", "prepare_output_dir.is_under_git_control", "os.path.exists", "shutil.copytree", "open", "datetime.datetime.now().strftime", "f.write", "open", "isinstance", "f.write", "open", "f.write", "open", "f.write", "prepare_output_dir.save_git_information", "datetime.datetime.now", "prepare_output_dir.generate_exp_id", "os.path.join", "os.path.join", "vars", "json.dumps", "os.path.join", "json.dumps", "os.path.join", "datetime.datetime.now", "dict"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.is_under_git_control", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.is_under_git_control", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.save_git_information", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.prepare_output_dir.generate_exp_id"], ["", "", "def", "prepare_output_dir", "(", "\n", "args", ",", "\n", "basedir", "=", "None", ",", "\n", "exp_id", "=", "None", ",", "\n", "argv", "=", "None", ",", "\n", "time_format", "=", "\"%Y%m%dT%H%M%S.%f\"", ",", "\n", "make_backup", "=", "True", ",", "\n", ")", "->", "str", ":", "\n", "    ", "\"\"\"Prepare a directory for outputting training results.\n\n    An output directory, which ends with the current datetime string,\n    is created. Then the following infomation is saved into the directory:\n\n        args.txt: argument values and arbitrary parameters\n        command.txt: command itself\n        environ.txt: environmental variables\n        start.txt: timestamp when the experiment executed\n\n    Additionally, if the current directory is under git control, the following\n    information is saved:\n\n        git-head.txt: result of `git rev-parse HEAD`\n        git-status.txt: result of `git status`\n        git-log.txt: result of `git log`\n        git-diff.txt: result of `git diff HEAD`\n\n    Args:\n        exp_id (str or None): Experiment identifier. If ``None`` is given,\n            reproducible ID will be automatically generated from Git version\n            hash and command arguments. If the code is not under Git control,\n            it is generated from current timestamp under the format of\n            ``time_format``.\n        args (dict or argparse.Namespace): Arguments to save to see parameters\n        basedir (str or None): If a string is specified, the output\n            directory is created under that path. If not specified, it is\n            created in current directory.\n        argv (list or None): The list of command line arguments passed to a\n            script. If not specified, sys.argv is used instead.\n        time_format (str): Format used to represent the current datetime. The\n            default format is the basic format of ISO 8601.\n        make_backup (bool): If there exists old experiment with same name,\n            copy a backup with additional suffix with ``time_format``.\n    Returns:\n        Path of the output directory created by this function (str).\n    \"\"\"", "\n", "\n", "timestamp", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "time_format", ")", "\n", "\n", "if", "exp_id", "is", "None", ":", "\n", "        ", "if", "is_under_git_control", "(", ")", ":", "\n", "            ", "exp_id", "=", "generate_exp_id", "(", ")", "\n", "", "else", ":", "\n", "            ", "exp_id", "=", "timestamp", "\n", "\n", "", "", "outdir", "=", "os", ".", "path", ".", "join", "(", "basedir", "or", "\".\"", ",", "exp_id", ")", "\n", "\n", "# Make backup if there's existing output directory. It is", "\n", "# recommended for applications not to overwrite files, and try as", "\n", "# much as possible to resume or append to existing files. But to", "\n", "# prevent unintentional overwrite, the library also makes a backup", "\n", "# of the outfile.", "\n", "if", "os", ".", "path", ".", "exists", "(", "outdir", ")", "and", "make_backup", ":", "\n", "        ", "backup_dir", "=", "\"{}.{}.backup\"", ".", "format", "(", "outdir", ",", "timestamp", ")", "\n", "shutil", ".", "copytree", "(", "outdir", ",", "backup_dir", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Save timestamp when the experiment was (re)started", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"start.txt\"", ")", ",", "\"a\"", ")", "as", "f", ":", "\n", "# Timestamp created above is not to be reused, because (1)", "\n", "# recursive backup of existing outdir may take a long time,", "\n", "# and (2) the format of the timestamp must be unified.", "\n", "        ", "timestamp", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y%m%dT%H%M%S.%f\"", ")", "\n", "f", ".", "write", "(", "\"{}\\n\"", ".", "format", "(", "timestamp", ")", ")", "\n", "\n", "# Save all the arguments", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"args.txt\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "if", "isinstance", "(", "args", ",", "argparse", ".", "Namespace", ")", ":", "\n", "            ", "args", "=", "vars", "(", "args", ")", "\n", "", "f", ".", "write", "(", "json", ".", "dumps", "(", "args", ")", ")", "\n", "\n", "# Save all the environment variables", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"environ.txt\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "dict", "(", "os", ".", "environ", ")", ")", ")", "\n", "\n", "# Save the command", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"command.txt\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "if", "argv", "is", "None", ":", "\n", "            ", "argv", "=", "sys", ".", "argv", "\n", "", "f", ".", "write", "(", "\" \"", ".", "join", "(", "argv", ")", ")", "\n", "\n", "", "if", "is_under_git_control", "(", ")", ":", "\n", "        ", "save_git_information", "(", "outdir", ")", "\n", "\n", "", "return", "outdir", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent_async.kill_all": [[16, 25], ["subprocess.run", "os.getpgrp", "os.killpg", "sys.exit", "str", "os.getpid"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.experiment.Experiment.run"], ["def", "kill_all", "(", ")", ":", "\n", "    ", "if", "os", ".", "name", "==", "\"nt\"", ":", "\n", "# windows", "\n", "# taskkill with /T kill all the subprocess", "\n", "        ", "subprocess", ".", "run", "(", "[", "\"taskkill\"", ",", "\"/F\"", ",", "\"/T\"", ",", "\"/PID\"", ",", "str", "(", "os", ".", "getpid", "(", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "pgid", "=", "os", ".", "getpgrp", "(", ")", "\n", "os", ".", "killpg", "(", "pgid", ",", "signal", ".", "SIGTERM", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent_async.train_loop": [[27, 147], ["logging.getLogger", "env.reset", "os.path.join", "agent.save", "logger.info", "os.path.join", "agent.save", "logger.info", "os.path.join", "agent.save", "logger.info", "agent.act", "env.step", "agent.observe", "train_agent_async.train_loop.save_model"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.act", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.observe", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.stable_baselines.trpo_runner.save_model"], ["", "", "def", "train_loop", "(", "\n", "process_idx", ",", "\n", "env", ",", "\n", "agent", ",", "\n", "steps", ",", "\n", "outdir", ",", "\n", "counter", ",", "\n", "episodes_counter", ",", "\n", "stop_event", ",", "\n", "exception_event", ",", "\n", "max_episode_len", "=", "None", ",", "\n", "evaluator", "=", "None", ",", "\n", "eval_env", "=", "None", ",", "\n", "successful_score", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "global_step_hooks", "=", "[", "]", ",", "\n", ")", ":", "\n", "\n", "    ", "logger", "=", "logger", "or", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "if", "eval_env", "is", "None", ":", "\n", "        ", "eval_env", "=", "env", "\n", "\n", "", "def", "save_model", "(", ")", ":", "\n", "        ", "if", "process_idx", "==", "0", ":", "\n", "# Save the current model before being killed", "\n", "            ", "dirname", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"{}_except\"", ".", "format", "(", "global_t", ")", ")", "\n", "agent", ".", "save", "(", "dirname", ")", "\n", "logger", ".", "info", "(", "\"Saved the current model to %s\"", ",", "dirname", ")", "\n", "\n", "", "", "try", ":", "\n", "\n", "        ", "episode_r", "=", "0", "\n", "global_t", "=", "0", "\n", "local_t", "=", "0", "\n", "global_episodes", "=", "0", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "episode_len", "=", "0", "\n", "successful", "=", "False", "\n", "\n", "while", "True", ":", "\n", "\n", "# a_t", "\n", "            ", "a", "=", "agent", ".", "act", "(", "obs", ")", "\n", "# o_{t+1}, r_{t+1}", "\n", "obs", ",", "r", ",", "done", ",", "info", "=", "env", ".", "step", "(", "a", ")", "\n", "local_t", "+=", "1", "\n", "episode_r", "+=", "r", "\n", "episode_len", "+=", "1", "\n", "reset", "=", "episode_len", "==", "max_episode_len", "or", "info", ".", "get", "(", "\"needs_reset\"", ",", "False", ")", "\n", "agent", ".", "observe", "(", "obs", ",", "r", ",", "done", ",", "reset", ")", "\n", "\n", "# Get and increment the global counter", "\n", "with", "counter", ".", "get_lock", "(", ")", ":", "\n", "                ", "counter", ".", "value", "+=", "1", "\n", "global_t", "=", "counter", ".", "value", "\n", "\n", "", "for", "hook", "in", "global_step_hooks", ":", "\n", "                ", "hook", "(", "env", ",", "agent", ",", "global_t", ")", "\n", "\n", "", "if", "done", "or", "reset", "or", "global_t", ">=", "steps", "or", "stop_event", ".", "is_set", "(", ")", ":", "\n", "                ", "if", "process_idx", "==", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "\n", "\"outdir:%s global_step:%s local_step:%s R:%s\"", ",", "\n", "outdir", ",", "\n", "global_t", ",", "\n", "local_t", ",", "\n", "episode_r", ",", "\n", ")", "\n", "logger", ".", "info", "(", "\"statistics:%s\"", ",", "agent", ".", "get_statistics", "(", ")", ")", "\n", "\n", "# Evaluate the current agent", "\n", "", "if", "evaluator", "is", "not", "None", ":", "\n", "                    ", "eval_score", "=", "evaluator", ".", "evaluate_if_necessary", "(", "\n", "t", "=", "global_t", ",", "episodes", "=", "global_episodes", ",", "env", "=", "eval_env", ",", "agent", "=", "agent", "\n", ")", "\n", "\n", "if", "(", "\n", "eval_score", "is", "not", "None", "\n", "and", "successful_score", "is", "not", "None", "\n", "and", "eval_score", ">=", "successful_score", "\n", ")", ":", "\n", "                        ", "stop_event", ".", "set", "(", ")", "\n", "successful", "=", "True", "\n", "# Break immediately in order to avoid an additional", "\n", "# call of agent.act_and_train", "\n", "break", "\n", "\n", "", "", "with", "episodes_counter", ".", "get_lock", "(", ")", ":", "\n", "                    ", "episodes_counter", ".", "value", "+=", "1", "\n", "global_episodes", "=", "episodes_counter", ".", "value", "\n", "\n", "", "if", "global_t", ">=", "steps", "or", "stop_event", ".", "is_set", "(", ")", ":", "\n", "                    ", "break", "\n", "\n", "# Start a new episode", "\n", "", "episode_r", "=", "0", "\n", "episode_len", "=", "0", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "", "if", "process_idx", "==", "0", "and", "exception_event", ".", "is_set", "(", ")", ":", "\n", "                ", "logger", ".", "exception", "(", "\"An exception detected, exiting\"", ")", "\n", "save_model", "(", ")", "\n", "kill_all", "(", ")", "\n", "\n", "", "", "", "except", "(", "Exception", ",", "KeyboardInterrupt", ")", ":", "\n", "        ", "save_model", "(", ")", "\n", "raise", "\n", "\n", "", "if", "global_t", "==", "steps", ":", "\n", "# Save the final model", "\n", "        ", "dirname", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"{}_finish\"", ".", "format", "(", "steps", ")", ")", "\n", "agent", ".", "save", "(", "dirname", ")", "\n", "logger", ".", "info", "(", "\"Saved the final agent to %s\"", ",", "dirname", ")", "\n", "\n", "", "if", "successful", ":", "\n", "# Save the successful model", "\n", "        ", "dirname", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"successful\"", ")", "\n", "agent", ".", "save", "(", "dirname", ")", "\n", "logger", ".", "info", "(", "\"Saved the successful agent to %s\"", ",", "dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent_async.train_agent_async": [[149, 332], ["torch.Value", "torch.Value", "pfrl.utils.async_.run_async", "mp.Event.set", "logging.getLogger", "torch.Event", "torch.Event", "pfrl.experiments.evaluator.AsyncEvaluator", "numpy.arange", "pfrl.utils.random_seed.set_random_seed", "make_env", "make_env.close", "pfrl.experiments.evaluator.AsyncEvaluator.join_tensorboard_writer", "ValueError", "make_agent", "getattr", "isinstance", "pfrl.experiments.evaluator.AsyncEvaluator.start_tensorboard_writer", "make_env", "make_agent", "train_agent_async.train_loop", "cProfile.runctx", "f"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.async_.run_async", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random_seed.set_random_seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.join_tensorboard_writer", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_agent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.start_tensorboard_writer", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.atlas.train_soft_actor_critic_atlas.make_env", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents_tests.test_td3.TestTD3.make_agent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent_async.train_loop"], ["", "", "def", "train_agent_async", "(", "\n", "outdir", ",", "\n", "processes", ",", "\n", "make_env", ",", "\n", "profile", "=", "False", ",", "\n", "steps", "=", "8", "*", "10", "**", "7", ",", "\n", "eval_interval", "=", "10", "**", "6", ",", "\n", "eval_n_steps", "=", "None", ",", "\n", "eval_n_episodes", "=", "10", ",", "\n", "eval_success_threshold", "=", "0.0", ",", "\n", "max_episode_len", "=", "None", ",", "\n", "step_offset", "=", "0", ",", "\n", "successful_score", "=", "None", ",", "\n", "agent", "=", "None", ",", "\n", "make_agent", "=", "None", ",", "\n", "global_step_hooks", "=", "[", "]", ",", "\n", "evaluation_hooks", "=", "(", ")", ",", "\n", "save_best_so_far_agent", "=", "True", ",", "\n", "use_tensorboard", "=", "False", ",", "\n", "logger", "=", "None", ",", "\n", "random_seeds", "=", "None", ",", "\n", "stop_event", "=", "None", ",", "\n", "exception_event", "=", "None", ",", "\n", "use_shared_memory", "=", "True", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Train agent asynchronously using multiprocessing.\n\n    Either `agent` or `make_agent` must be specified.\n\n    Args:\n        outdir (str): Path to the directory to output things.\n        processes (int): Number of processes.\n        make_env (callable): (process_idx, test) -> Environment.\n        profile (bool): Profile if set True.\n        steps (int): Number of global time steps for training.\n        eval_interval (int): Interval of evaluation. If set to None, the agent\n            will not be evaluated at all.\n        eval_n_steps (int): Number of eval timesteps at each eval phase\n        eval_n_episodes (int): Number of eval episodes at each eval phase\n        eval_success_threshold (float): r-threshold above which grasp succeeds\n        max_episode_len (int): Maximum episode length.\n        step_offset (int): Time step from which training starts.\n        successful_score (float): Finish training if the mean score is greater\n            or equal to this value if not None\n        agent (Agent): Agent to train.\n        make_agent (callable): (process_idx) -> Agent\n        global_step_hooks (list): List of callable objects that accepts\n            (env, agent, step) as arguments. They are called every global\n            step. See pfrl.experiments.hooks.\n        evaluation_hooks (Sequence): Sequence of\n            pfrl.experiments.evaluation_hooks.EvaluationHook objects. They are\n            called after each evaluation.\n        save_best_so_far_agent (bool): If set to True, after each evaluation,\n            if the score (= mean return of evaluation episodes) exceeds\n            the best-so-far score, the current agent is saved.\n        use_tensorboard (bool): Additionally log eval stats to tensorboard\n        logger (logging.Logger): Logger used in this function.\n        random_seeds (array-like of ints or None): Random seeds for processes.\n            If set to None, [0, 1, ..., processes-1] are used.\n        stop_event (multiprocessing.Event or None): Event to stop training.\n            If set to None, a new Event object is created and used internally.\n        exception_event (multiprocessing.Event or None): Event that indicates\n            other thread raised an excpetion. The train will be terminated and\n            the current agent will be saved.\n            If set to None, a new Event object is created and used internally.\n        use_shared_memory (bool): Share memory amongst asynchronous agents.\n\n    Returns:\n        Trained agent.\n    \"\"\"", "\n", "logger", "=", "logger", "or", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "for", "hook", "in", "evaluation_hooks", ":", "\n", "        ", "if", "not", "hook", ".", "support_train_agent_async", ":", "\n", "            ", "raise", "ValueError", "(", "\"{} does not support train_agent_async().\"", ".", "format", "(", "hook", ")", ")", "\n", "\n", "# Prevent numpy from using multiple threads", "\n", "", "", "os", ".", "environ", "[", "\"OMP_NUM_THREADS\"", "]", "=", "\"1\"", "\n", "\n", "counter", "=", "mp", ".", "Value", "(", "\"l\"", ",", "0", ")", "\n", "episodes_counter", "=", "mp", ".", "Value", "(", "\"l\"", ",", "0", ")", "\n", "\n", "if", "stop_event", "is", "None", ":", "\n", "        ", "stop_event", "=", "mp", ".", "Event", "(", ")", "\n", "\n", "", "if", "exception_event", "is", "None", ":", "\n", "        ", "exception_event", "=", "mp", ".", "Event", "(", ")", "\n", "\n", "", "if", "use_shared_memory", ":", "\n", "        ", "if", "agent", "is", "None", ":", "\n", "            ", "assert", "make_agent", "is", "not", "None", "\n", "agent", "=", "make_agent", "(", "0", ")", "\n", "\n", "# Move model and optimizer states in shared memory", "\n", "", "for", "attr", "in", "agent", ".", "shared_attributes", ":", "\n", "            ", "attr_value", "=", "getattr", "(", "agent", ",", "attr", ")", "\n", "if", "isinstance", "(", "attr_value", ",", "nn", ".", "Module", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "attr_value", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "                    ", "v", ".", "share_memory_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "attr_value", ",", "torch", ".", "optim", ".", "Optimizer", ")", ":", "\n", "                ", "for", "param", ",", "state", "in", "attr_value", ".", "state_dict", "(", ")", "[", "\"state\"", "]", ".", "items", "(", ")", ":", "\n", "                    ", "assert", "isinstance", "(", "state", ",", "dict", ")", "\n", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "                        ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                            ", "v", ".", "share_memory_", "(", ")", "\n", "\n", "", "", "", "", "", "", "if", "eval_interval", "is", "None", ":", "\n", "        ", "evaluator", "=", "None", "\n", "", "else", ":", "\n", "        ", "evaluator", "=", "AsyncEvaluator", "(", "\n", "n_steps", "=", "eval_n_steps", ",", "\n", "n_episodes", "=", "eval_n_episodes", ",", "\n", "eval_interval", "=", "eval_interval", ",", "\n", "outdir", "=", "outdir", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", "step_offset", "=", "step_offset", ",", "\n", "evaluation_hooks", "=", "evaluation_hooks", ",", "\n", "save_best_so_far_agent", "=", "save_best_so_far_agent", ",", "\n", "logger", "=", "logger", ",", "\n", ")", "\n", "if", "use_tensorboard", ":", "\n", "            ", "evaluator", ".", "start_tensorboard_writer", "(", "outdir", ",", "stop_event", ")", "\n", "\n", "", "", "if", "random_seeds", "is", "None", ":", "\n", "        ", "random_seeds", "=", "np", ".", "arange", "(", "processes", ")", "\n", "\n", "", "def", "run_func", "(", "process_idx", ")", ":", "\n", "        ", "random_seed", ".", "set_random_seed", "(", "random_seeds", "[", "process_idx", "]", ")", "\n", "\n", "env", "=", "make_env", "(", "process_idx", ",", "test", "=", "False", ")", "\n", "if", "evaluator", "is", "None", ":", "\n", "            ", "eval_env", "=", "env", "\n", "", "else", ":", "\n", "            ", "eval_env", "=", "make_env", "(", "process_idx", ",", "test", "=", "True", ")", "\n", "", "if", "make_agent", "is", "not", "None", ":", "\n", "            ", "local_agent", "=", "make_agent", "(", "process_idx", ")", "\n", "if", "use_shared_memory", ":", "\n", "                ", "for", "attr", "in", "agent", ".", "shared_attributes", ":", "\n", "                    ", "setattr", "(", "local_agent", ",", "attr", ",", "getattr", "(", "agent", ",", "attr", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "local_agent", "=", "agent", "\n", "", "local_agent", ".", "process_idx", "=", "process_idx", "\n", "\n", "def", "f", "(", ")", ":", "\n", "            ", "train_loop", "(", "\n", "process_idx", "=", "process_idx", ",", "\n", "counter", "=", "counter", ",", "\n", "episodes_counter", "=", "episodes_counter", ",", "\n", "agent", "=", "local_agent", ",", "\n", "env", "=", "env", ",", "\n", "steps", "=", "steps", ",", "\n", "outdir", "=", "outdir", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", "evaluator", "=", "evaluator", ",", "\n", "successful_score", "=", "successful_score", ",", "\n", "stop_event", "=", "stop_event", ",", "\n", "exception_event", "=", "exception_event", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", "global_step_hooks", "=", "global_step_hooks", ",", "\n", "logger", "=", "logger", ",", "\n", ")", "\n", "\n", "", "if", "profile", ":", "\n", "            ", "import", "cProfile", "\n", "\n", "cProfile", ".", "runctx", "(", "\n", "\"f()\"", ",", "globals", "(", ")", ",", "locals", "(", ")", ",", "\"profile-{}.out\"", ".", "format", "(", "os", ".", "getpid", "(", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "f", "(", ")", "\n", "\n", "", "env", ".", "close", "(", ")", "\n", "if", "eval_env", "is", "not", "env", ":", "\n", "            ", "eval_env", ".", "close", "(", ")", "\n", "\n", "", "", "async_", ".", "run_async", "(", "processes", ",", "run_func", ")", "\n", "\n", "stop_event", ".", "set", "(", ")", "\n", "\n", "if", "evaluator", "is", "not", "None", "and", "use_tensorboard", ":", "\n", "        ", "evaluator", ".", "join_tensorboard_writer", "(", ")", "\n", "\n", "", "return", "agent", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.hooks.StepHook.__call__": [[14, 24], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "__call__", "(", "self", ",", "env", ",", "agent", ",", "step", ")", ":", "\n", "        ", "\"\"\"Call the hook.\n\n        Args:\n            env: Environment.\n            agent: Agent.\n            step: Current timestep.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.hooks.LinearInterpolationHook.__init__": [[47, 52], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "total_steps", ",", "start_value", ",", "stop_value", ",", "setter", ")", ":", "\n", "        ", "self", ".", "total_steps", "=", "total_steps", "\n", "self", ".", "start_value", "=", "start_value", "\n", "self", ".", "stop_value", "=", "stop_value", "\n", "self", ".", "setter", "=", "setter", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.hooks.LinearInterpolationHook.__call__": [[53, 58], ["numpy.interp", "hooks.LinearInterpolationHook.setter"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "env", ",", "agent", ",", "step", ")", ":", "\n", "        ", "value", "=", "np", ".", "interp", "(", "\n", "step", ",", "[", "1", ",", "self", ".", "total_steps", "]", ",", "[", "self", ".", "start_value", ",", "self", ".", "stop_value", "]", "\n", ")", "\n", "self", ".", "setter", "(", "env", ",", "agent", ",", "value", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent.save_agent_replay_buffer": [[8, 13], ["os.path.join", "agent.replay_buffer.save", "logger.info", "logging.getLogger"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save"], ["def", "save_agent_replay_buffer", "(", "agent", ",", "t", ",", "outdir", ",", "suffix", "=", "\"\"", ",", "logger", "=", "None", ")", ":", "\n", "    ", "logger", "=", "logger", "or", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"{}{}.replay.pkl\"", ".", "format", "(", "t", ",", "suffix", ")", ")", "\n", "agent", ".", "replay_buffer", ".", "save", "(", "filename", ")", "\n", "logger", ".", "info", "(", "\"Saved the current replay buffer to %s\"", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent.ask_and_save_agent_replay_buffer": [[15, 22], ["hasattr", "pfrl.utils.ask_yes_no.ask_yes_no", "train_agent.save_agent_replay_buffer", "len"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.ask_yes_no.ask_yes_no", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent.save_agent_replay_buffer"], ["", "def", "ask_and_save_agent_replay_buffer", "(", "agent", ",", "t", ",", "outdir", ",", "suffix", "=", "\"\"", ")", ":", "\n", "    ", "if", "hasattr", "(", "agent", ",", "\"replay_buffer\"", ")", "and", "ask_yes_no", "(", "\n", "\"Replay buffer has {} transitions. Do you save them to a file?\"", ".", "format", "(", "\n", "len", "(", "agent", ".", "replay_buffer", ")", "\n", ")", "\n", ")", ":", "# NOQA", "\n", "        ", "save_agent_replay_buffer", "(", "agent", ",", "t", ",", "outdir", ",", "suffix", "=", "suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent.train_agent": [[24, 115], ["env.reset", "hasattr", "pfrl.experiments.evaluator.save_agent", "logging.getLogger", "agent.act", "env.step", "agent.observe", "pfrl.experiments.evaluator.save_agent", "info.get", "hook", "logger.info", "agent.get_statistics", "logger.info", "evaluator.evaluate_if_necessary", "print", "env.reset", "pfrl.experiments.evaluator.save_agent", "dict", "eval_stats_history.append", "agent.get_statistics"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.save_agent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.act", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.observe", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.save_agent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.get_statistics", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.evaluate_if_necessary", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.save_agent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.get_statistics"], ["", "", "def", "train_agent", "(", "\n", "agent", ",", "\n", "env", ",", "\n", "steps", ",", "\n", "outdir", ",", "\n", "checkpoint_freq", "=", "None", ",", "\n", "max_episode_len", "=", "None", ",", "\n", "step_offset", "=", "0", ",", "\n", "evaluator", "=", "None", ",", "\n", "successful_score", "=", "None", ",", "\n", "step_hooks", "=", "(", ")", ",", "\n", "eval_during_episode", "=", "False", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "\n", "    ", "logger", "=", "logger", "or", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "episode_r", "=", "0", "\n", "episode_idx", "=", "0", "\n", "\n", "# o_0, r_0", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "t", "=", "step_offset", "\n", "if", "hasattr", "(", "agent", ",", "\"t\"", ")", ":", "\n", "        ", "agent", ".", "t", "=", "step_offset", "\n", "\n", "", "eval_stats_history", "=", "[", "]", "# List of evaluation episode stats dict", "\n", "episode_len", "=", "0", "\n", "try", ":", "\n", "        ", "while", "t", "<", "steps", ":", "\n", "\n", "# a_t", "\n", "            ", "action", "=", "agent", ".", "act", "(", "obs", ")", "\n", "# o_{t+1}, r_{t+1}", "\n", "obs", ",", "r", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "t", "+=", "1", "\n", "episode_r", "+=", "r", "\n", "episode_len", "+=", "1", "\n", "reset", "=", "episode_len", "==", "max_episode_len", "or", "info", ".", "get", "(", "\"needs_reset\"", ",", "False", ")", "\n", "agent", ".", "observe", "(", "obs", ",", "r", ",", "done", ",", "reset", ")", "\n", "\n", "for", "hook", "in", "step_hooks", ":", "\n", "                ", "hook", "(", "env", ",", "agent", ",", "t", ")", "\n", "\n", "", "episode_end", "=", "done", "or", "reset", "or", "t", "==", "steps", "\n", "\n", "if", "episode_end", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "\"outdir:%s step:%s episode:%s R:%s\"", ",", "\n", "outdir", ",", "\n", "t", ",", "\n", "episode_idx", ",", "\n", "episode_r", ",", "\n", ")", "\n", "stats", "=", "agent", ".", "get_statistics", "(", ")", "\n", "logger", ".", "info", "(", "\"statistics:%s\"", ",", "stats", ")", "\n", "episode_idx", "+=", "1", "\n", "\n", "", "if", "evaluator", "is", "not", "None", "and", "(", "episode_end", "or", "eval_during_episode", ")", ":", "\n", "                ", "eval_score", "=", "evaluator", ".", "evaluate_if_necessary", "(", "t", "=", "t", ",", "episodes", "=", "episode_idx", ")", "\n", "if", "eval_score", "is", "not", "None", ":", "\n", "                    ", "eval_stats", "=", "dict", "(", "agent", ".", "get_statistics", "(", ")", ")", "\n", "eval_stats", "[", "\"eval_score\"", "]", "=", "eval_score", "\n", "eval_stats_history", ".", "append", "(", "eval_stats", ")", "\n", "", "if", "(", "\n", "successful_score", "is", "not", "None", "\n", "and", "evaluator", ".", "max_score", ">=", "successful_score", "\n", ")", ":", "\n", "                    ", "break", "\n", "\n", "", "", "if", "episode_end", ":", "\n", "                ", "print", "(", "\"hh\"", ")", "\n", "if", "t", "==", "steps", ":", "\n", "                    ", "break", "\n", "# Start a new episode", "\n", "", "episode_r", "=", "0", "\n", "episode_len", "=", "0", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "", "if", "checkpoint_freq", "and", "t", "%", "checkpoint_freq", "==", "0", ":", "\n", "                ", "save_agent", "(", "agent", ",", "t", ",", "outdir", ",", "logger", ",", "suffix", "=", "\"_checkpoint\"", ")", "\n", "\n", "", "", "", "except", "(", "Exception", ",", "KeyboardInterrupt", ")", ":", "\n", "# Save the current model before being killed", "\n", "        ", "save_agent", "(", "agent", ",", "t", ",", "outdir", ",", "logger", ",", "suffix", "=", "\"_except\"", ")", "\n", "raise", "\n", "\n", "# Save the final model", "\n", "", "save_agent", "(", "agent", ",", "t", ",", "outdir", ",", "logger", ",", "suffix", "=", "\"_finish\"", ")", "\n", "\n", "return", "eval_stats_history", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent.train_agent_with_evaluation": [[117, 225], ["os.makedirs", "pfrl.experiments.evaluator.Evaluator", "train_agent.train_agent", "logging.getLogger", "ValueError"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.train_agent.train_agent"], ["", "def", "train_agent_with_evaluation", "(", "\n", "agent", ",", "\n", "env", ",", "\n", "steps", ",", "\n", "eval_n_steps", ",", "\n", "eval_n_episodes", ",", "\n", "eval_interval", ",", "\n", "outdir", ",", "\n", "checkpoint_freq", "=", "None", ",", "\n", "train_max_episode_len", "=", "None", ",", "\n", "step_offset", "=", "0", ",", "\n", "eval_max_episode_len", "=", "None", ",", "\n", "eval_env", "=", "None", ",", "\n", "successful_score", "=", "None", ",", "\n", "step_hooks", "=", "(", ")", ",", "\n", "evaluation_hooks", "=", "(", ")", ",", "\n", "save_best_so_far_agent", "=", "True", ",", "\n", "use_tensorboard", "=", "False", ",", "\n", "eval_during_episode", "=", "False", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Train an agent while periodically evaluating it.\n\n    Args:\n        agent: A pfrl.agent.Agent\n        env: Environment train the agent against.\n        steps (int): Total number of timesteps for training.\n        eval_n_steps (int): Number of timesteps at each evaluation phase.\n        eval_n_episodes (int): Number of episodes at each evaluation phase.\n        eval_interval (int): Interval of evaluation.\n        outdir (str): Path to the directory to output data.\n        checkpoint_freq (int): frequency at which agents are stored.\n        train_max_episode_len (int): Maximum episode length during training.\n        step_offset (int): Time step from which training starts.\n        eval_max_episode_len (int or None): Maximum episode length of\n            evaluation runs. If None, train_max_episode_len is used instead.\n        eval_env: Environment used for evaluation.\n        successful_score (float): Finish training if the mean score is greater\n            than or equal to this value if not None\n        step_hooks (Sequence): Sequence of callable objects that accepts\n            (env, agent, step) as arguments. They are called every step.\n            See pfrl.experiments.hooks.\n        evaluation_hooks (Sequence): Sequence of\n            pfrl.experiments.evaluation_hooks.EvaluationHook objects. They are\n            called after each evaluation.\n        save_best_so_far_agent (bool): If set to True, after each evaluation\n            phase, if the score (= mean return of evaluation episodes) exceeds\n            the best-so-far score, the current agent is saved.\n        use_tensorboard (bool): Additionally log eval stats to tensorboard\n        eval_during_episode (bool): Allow running evaluation during training episodes.\n            This should be enabled only when `env` and `eval_env` are independent.\n        logger (logging.Logger): Logger used in this function.\n    Returns:\n        agent: Trained agent.\n        eval_stats_history: List of evaluation episode stats dict.\n    \"\"\"", "\n", "\n", "logger", "=", "logger", "or", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "for", "hook", "in", "evaluation_hooks", ":", "\n", "        ", "if", "not", "hook", ".", "support_train_agent", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"{} does not support train_agent_with_evaluation().\"", ".", "format", "(", "hook", ")", "\n", ")", "\n", "\n", "", "", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "eval_env", "is", "None", ":", "\n", "        ", "assert", "not", "eval_during_episode", ",", "(", "\n", "\"To run evaluation during training episodes, you need to specify `eval_env`\"", "\n", "\" that is independent from `env`.\"", "\n", ")", "\n", "eval_env", "=", "env", "\n", "\n", "", "if", "eval_max_episode_len", "is", "None", ":", "\n", "        ", "eval_max_episode_len", "=", "train_max_episode_len", "\n", "\n", "", "evaluator", "=", "Evaluator", "(", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "eval_n_steps", ",", "\n", "n_episodes", "=", "eval_n_episodes", ",", "\n", "eval_interval", "=", "eval_interval", ",", "\n", "outdir", "=", "outdir", ",", "\n", "max_episode_len", "=", "eval_max_episode_len", ",", "\n", "env", "=", "eval_env", ",", "\n", "step_offset", "=", "step_offset", ",", "\n", "evaluation_hooks", "=", "evaluation_hooks", ",", "\n", "save_best_so_far_agent", "=", "save_best_so_far_agent", ",", "\n", "use_tensorboard", "=", "use_tensorboard", ",", "\n", "logger", "=", "logger", ",", "\n", ")", "\n", "\n", "eval_stats_history", "=", "train_agent", "(", "\n", "agent", ",", "\n", "env", ",", "\n", "steps", ",", "\n", "outdir", ",", "\n", "checkpoint_freq", "=", "checkpoint_freq", ",", "\n", "max_episode_len", "=", "train_max_episode_len", ",", "\n", "step_offset", "=", "step_offset", ",", "\n", "evaluator", "=", "evaluator", ",", "\n", "successful_score", "=", "successful_score", ",", "\n", "step_hooks", "=", "step_hooks", ",", "\n", "eval_during_episode", "=", "eval_during_episode", ",", "\n", "logger", "=", "logger", ",", "\n", ")", "\n", "\n", "return", "agent", ",", "eval_stats_history", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluation_hooks.EvaluationHook.__call__": [[33, 50], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "__call__", "(", "self", ",", "env", ",", "agent", ",", "evaluator", ",", "step", ",", "eval_stats", ",", "agent_stats", ",", "env_stats", ")", ":", "\n", "        ", "\"\"\"Call the hook.\n\n        Args:\n            env: Environment.\n            agent: Agent.\n            evaluator: Evaluator.\n            step: Current timestep. (Not the number of evaluations so far)\n            eval_stats (dict): Last evaluation stats from\n                pfrl.experiments.evaluator.eval_performance().\n            agent_stats (List of pairs): Last agent stats from\n                agent.get_statistics().\n            env_stats: Last environment stats from\n                env.get_statistics().\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluation_hooks.OptunaPrunerHook.__init__": [[71, 75], ["RuntimeError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "trial", ")", ":", "\n", "        ", "if", "not", "_optuna_available", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"OptunaPrunerHook requires optuna installed.\"", ")", "\n", "", "self", ".", "trial", "=", "trial", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluation_hooks.OptunaPrunerHook.__call__": [[76, 100], ["evaluation_hooks.OptunaPrunerHook.trial.report", "evaluation_hooks.OptunaPrunerHook.trial.should_prune", "optuna.TrialPruned"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "env", ",", "agent", ",", "evaluator", ",", "step", ",", "eval_stats", ",", "agent_stats", ",", "env_stats", ")", ":", "\n", "        ", "\"\"\"Call the hook.\n\n        Args:\n            env: Environment.\n            agent: Agent.\n            evaluator: Evaluator.\n            step: Current timestep. (Not the number of evaluations so far)\n            eval_stats (dict): Last evaluation stats from\n                pfrl.experiments.evaluator.eval_performance().\n            agent_stats (List of pairs): Last agent stats from\n                agent.get_statistics().\n            env_stats: Last environment stats from\n                env.get_statistics().\n\n        Raises:\n            optuna.TrialPruned: Raise when the trial should be pruned immediately.\n                Note that you don't need to care about this exception since Optuna will\n                catch `optuna.TrialPruned` and stop the trial properly.\n        \"\"\"", "\n", "score", "=", "eval_stats", "[", "\"mean\"", "]", "\n", "self", ".", "trial", ".", "report", "(", "score", ",", "step", ")", "\n", "if", "self", ".", "trial", ".", "should_prune", "(", ")", ":", "\n", "            ", "raise", "optuna", ".", "TrialPruned", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.Evaluator.__init__": [[417, 462], ["time.time", "getattr", "getattr", "callable", "callable", "evaluator.write_header", "numpy.finfo", "logging.getLogger", "evaluator.create_tb_writer"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.write_header", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.create_tb_writer"], ["def", "__init__", "(", "\n", "self", ",", "\n", "agent", ",", "\n", "env", ",", "\n", "n_steps", ",", "\n", "n_episodes", ",", "\n", "eval_interval", ",", "\n", "outdir", ",", "\n", "max_episode_len", "=", "None", ",", "\n", "step_offset", "=", "0", ",", "\n", "evaluation_hooks", "=", "(", ")", ",", "\n", "save_best_so_far_agent", "=", "True", ",", "\n", "logger", "=", "None", ",", "\n", "use_tensorboard", "=", "False", ",", "\n", ")", ":", "\n", "        ", "assert", "(", "n_steps", "is", "None", ")", "!=", "(", "n_episodes", "is", "None", ")", ",", "(", "\n", "\"One of n_steps or n_episodes must be None. \"", "\n", "+", "\"Either we evaluate for a specified number \"", "\n", "+", "\"of episodes or for a specified number of timesteps.\"", "\n", ")", "\n", "self", ".", "agent", "=", "agent", "\n", "self", ".", "env", "=", "env", "\n", "self", ".", "max_score", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "n_steps", "=", "n_steps", "\n", "self", ".", "n_episodes", "=", "n_episodes", "\n", "self", ".", "eval_interval", "=", "eval_interval", "\n", "self", ".", "outdir", "=", "outdir", "\n", "self", ".", "use_tensorboard", "=", "use_tensorboard", "\n", "self", ".", "max_episode_len", "=", "max_episode_len", "\n", "self", ".", "step_offset", "=", "step_offset", "\n", "self", ".", "prev_eval_t", "=", "self", ".", "step_offset", "-", "self", ".", "step_offset", "%", "self", ".", "eval_interval", "\n", "self", ".", "evaluation_hooks", "=", "evaluation_hooks", "\n", "self", ".", "save_best_so_far_agent", "=", "save_best_so_far_agent", "\n", "self", ".", "logger", "=", "logger", "or", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "self", ".", "env_get_stats", "=", "getattr", "(", "self", ".", "env", ",", "\"get_statistics\"", ",", "lambda", ":", "[", "]", ")", "\n", "self", ".", "env_clear_stats", "=", "getattr", "(", "self", ".", "env", ",", "\"clear_statistics\"", ",", "lambda", ":", "None", ")", "\n", "assert", "callable", "(", "self", ".", "env_get_stats", ")", "\n", "assert", "callable", "(", "self", ".", "env_clear_stats", ")", "\n", "\n", "# Write a header line first", "\n", "write_header", "(", "self", ".", "outdir", ",", "self", ".", "agent", ",", "self", ".", "env", ")", "\n", "\n", "if", "use_tensorboard", ":", "\n", "            ", "self", ".", "tb_writer", "=", "create_tb_writer", "(", "outdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.Evaluator.evaluate_and_update_max_score": [[463, 515], ["evaluator.Evaluator.env_clear_stats", "evaluator.eval_performance", "evaluator.Evaluator.agent.get_statistics", "tuple", "evaluator.Evaluator.env_get_stats", "tuple", "evaluator.record_stats", "time.time", "evaluator.record_tb_stats", "hook", "evaluator.Evaluator.logger.info", "evaluator.save_agent"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.eval_performance", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.get_statistics", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.record_stats", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.record_tb_stats", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.save_agent"], ["", "", "def", "evaluate_and_update_max_score", "(", "self", ",", "t", ",", "episodes", ")", ":", "\n", "        ", "self", ".", "env_clear_stats", "(", ")", "\n", "eval_stats", "=", "eval_performance", "(", "\n", "self", ".", "env", ",", "\n", "self", ".", "agent", ",", "\n", "self", ".", "n_steps", ",", "\n", "self", ".", "n_episodes", ",", "\n", "max_episode_len", "=", "self", ".", "max_episode_len", ",", "\n", "logger", "=", "self", ".", "logger", ",", "\n", ")", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "agent_stats", "=", "self", ".", "agent", ".", "get_statistics", "(", ")", "\n", "custom_values", "=", "tuple", "(", "tup", "[", "1", "]", "for", "tup", "in", "agent_stats", ")", "\n", "env_stats", "=", "self", ".", "env_get_stats", "(", ")", "\n", "custom_env_values", "=", "tuple", "(", "tup", "[", "1", "]", "for", "tup", "in", "env_stats", ")", "\n", "mean", "=", "eval_stats", "[", "\"mean\"", "]", "\n", "values", "=", "(", "\n", "(", "\n", "t", ",", "\n", "episodes", ",", "\n", "elapsed", ",", "\n", "mean", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", "eval_stats", "[", "\"max\"", "]", ",", "\n", "eval_stats", "[", "\"min\"", "]", ",", "\n", ")", "\n", "+", "custom_values", "\n", "+", "custom_env_values", "\n", ")", "\n", "record_stats", "(", "self", ".", "outdir", ",", "values", ")", "\n", "\n", "if", "self", ".", "use_tensorboard", ":", "\n", "            ", "record_tb_stats", "(", "self", ".", "tb_writer", ",", "agent_stats", ",", "eval_stats", ",", "env_stats", ",", "t", ")", "\n", "\n", "", "for", "hook", "in", "self", ".", "evaluation_hooks", ":", "\n", "            ", "hook", "(", "\n", "env", "=", "self", ".", "env", ",", "\n", "agent", "=", "self", ".", "agent", ",", "\n", "evaluator", "=", "self", ",", "\n", "step", "=", "t", ",", "\n", "eval_stats", "=", "eval_stats", ",", "\n", "agent_stats", "=", "agent_stats", ",", "\n", "env_stats", "=", "env_stats", ",", "\n", ")", "\n", "\n", "", "if", "mean", ">", "self", ".", "max_score", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"The best score is updated %s -> %s\"", ",", "self", ".", "max_score", ",", "mean", ")", "\n", "self", ".", "max_score", "=", "mean", "\n", "if", "self", ".", "save_best_so_far_agent", ":", "\n", "                ", "save_agent", "(", "self", ".", "agent", ",", "\"best\"", ",", "self", ".", "outdir", ",", "self", ".", "logger", ")", "\n", "", "", "return", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.Evaluator.evaluate_if_necessary": [[516, 522], ["evaluator.Evaluator.evaluate_and_update_max_score"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.evaluate_and_update_max_score"], ["", "def", "evaluate_if_necessary", "(", "self", ",", "t", ",", "episodes", ")", ":", "\n", "        ", "if", "t", ">=", "self", ".", "prev_eval_t", "+", "self", ".", "eval_interval", ":", "\n", "            ", "score", "=", "self", ".", "evaluate_and_update_max_score", "(", "t", ",", "episodes", ")", "\n", "self", ".", "prev_eval_t", "=", "t", "-", "t", "%", "self", ".", "eval_interval", "\n", "return", "score", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.__init__": [[542, 583], ["time.time", "multiprocessing.Value", "multiprocessing.Value", "multiprocessing.Value", "logging.getLogger", "open", "numpy.finfo", "os.path.join"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_steps", ",", "\n", "n_episodes", ",", "\n", "eval_interval", ",", "\n", "outdir", ",", "\n", "max_episode_len", "=", "None", ",", "\n", "step_offset", "=", "0", ",", "\n", "evaluation_hooks", "=", "(", ")", ",", "\n", "save_best_so_far_agent", "=", "True", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "        ", "assert", "(", "n_steps", "is", "None", ")", "!=", "(", "n_episodes", "is", "None", ")", ",", "(", "\n", "\"One of n_steps or n_episodes must be None. \"", "\n", "+", "\"Either we evaluate for a specified number \"", "\n", "+", "\"of episodes or for a specified number of timesteps.\"", "\n", ")", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "n_steps", "=", "n_steps", "\n", "self", ".", "n_episodes", "=", "n_episodes", "\n", "self", ".", "eval_interval", "=", "eval_interval", "\n", "self", ".", "outdir", "=", "outdir", "\n", "self", ".", "max_episode_len", "=", "max_episode_len", "\n", "self", ".", "step_offset", "=", "step_offset", "\n", "self", ".", "evaluation_hooks", "=", "evaluation_hooks", "\n", "self", ".", "save_best_so_far_agent", "=", "save_best_so_far_agent", "\n", "self", ".", "logger", "=", "logger", "or", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "# Values below are shared among processes", "\n", "self", ".", "prev_eval_t", "=", "mp", ".", "Value", "(", "\n", "\"l\"", ",", "self", ".", "step_offset", "-", "self", ".", "step_offset", "%", "self", ".", "eval_interval", "\n", ")", "\n", "self", ".", "_max_score", "=", "mp", ".", "Value", "(", "\"f\"", ",", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ")", "\n", "self", ".", "wrote_header", "=", "mp", ".", "Value", "(", "\"b\"", ",", "False", ")", "\n", "\n", "# Create scores.txt", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "outdir", ",", "\"scores.txt\"", ")", ",", "\"a\"", ")", ":", "\n", "            ", "pass", "\n", "\n", "", "self", ".", "record_tb_stats_queue", "=", "None", "\n", "self", ".", "record_tb_stats_thread", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.max_score": [[584, 589], ["evaluator.AsyncEvaluator._max_score.get_lock"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_score", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_max_score", ".", "get_lock", "(", ")", ":", "\n", "            ", "v", "=", "self", ".", "_max_score", ".", "value", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.evaluate_and_update_max_score": [[590, 649], ["getattr", "getattr", "callable", "callable", "getattr.", "evaluator.eval_performance", "agent.get_statistics", "tuple", "getattr.", "tuple", "evaluator.record_stats", "time.time", "evaluator.AsyncEvaluator.record_tb_stats_queue.put", "hook", "evaluator.AsyncEvaluator._max_score.get_lock", "evaluator.AsyncEvaluator.logger.info", "evaluator.save_agent"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.eval_performance", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.get_statistics", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.record_stats", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.save_agent"], ["", "def", "evaluate_and_update_max_score", "(", "self", ",", "t", ",", "episodes", ",", "env", ",", "agent", ")", ":", "\n", "        ", "env_get_stats", "=", "getattr", "(", "env", ",", "\"get_statistics\"", ",", "lambda", ":", "[", "]", ")", "\n", "env_clear_stats", "=", "getattr", "(", "env", ",", "\"clear_statistics\"", ",", "lambda", ":", "None", ")", "\n", "assert", "callable", "(", "env_get_stats", ")", "\n", "assert", "callable", "(", "env_clear_stats", ")", "\n", "env_clear_stats", "(", ")", "\n", "eval_stats", "=", "eval_performance", "(", "\n", "env", ",", "\n", "agent", ",", "\n", "self", ".", "n_steps", ",", "\n", "self", ".", "n_episodes", ",", "\n", "max_episode_len", "=", "self", ".", "max_episode_len", ",", "\n", "logger", "=", "self", ".", "logger", ",", "\n", ")", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "agent_stats", "=", "agent", ".", "get_statistics", "(", ")", "\n", "custom_values", "=", "tuple", "(", "tup", "[", "1", "]", "for", "tup", "in", "agent_stats", ")", "\n", "env_stats", "=", "env_get_stats", "(", ")", "\n", "custom_env_values", "=", "tuple", "(", "tup", "[", "1", "]", "for", "tup", "in", "env_stats", ")", "\n", "mean", "=", "eval_stats", "[", "\"mean\"", "]", "\n", "values", "=", "(", "\n", "(", "\n", "t", ",", "\n", "episodes", ",", "\n", "elapsed", ",", "\n", "mean", ",", "\n", "eval_stats", "[", "\"median\"", "]", ",", "\n", "eval_stats", "[", "\"stdev\"", "]", ",", "\n", "eval_stats", "[", "\"max\"", "]", ",", "\n", "eval_stats", "[", "\"min\"", "]", ",", "\n", ")", "\n", "+", "custom_values", "\n", "+", "custom_env_values", "\n", ")", "\n", "record_stats", "(", "self", ".", "outdir", ",", "values", ")", "\n", "\n", "if", "self", ".", "record_tb_stats_queue", "is", "not", "None", ":", "\n", "            ", "self", ".", "record_tb_stats_queue", ".", "put", "(", "[", "agent_stats", ",", "eval_stats", ",", "env_stats", ",", "t", "]", ")", "\n", "\n", "", "for", "hook", "in", "self", ".", "evaluation_hooks", ":", "\n", "            ", "hook", "(", "\n", "env", "=", "env", ",", "\n", "agent", "=", "agent", ",", "\n", "evaluator", "=", "self", ",", "\n", "step", "=", "t", ",", "\n", "eval_stats", "=", "eval_stats", ",", "\n", "agent_stats", "=", "agent_stats", ",", "\n", "env_stats", "=", "env_stats", ",", "\n", ")", "\n", "\n", "", "with", "self", ".", "_max_score", ".", "get_lock", "(", ")", ":", "\n", "            ", "if", "mean", ">", "self", ".", "_max_score", ".", "value", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\n", "\"The best score is updated %s -> %s\"", ",", "self", ".", "_max_score", ".", "value", ",", "mean", "\n", ")", "\n", "self", ".", "_max_score", ".", "value", "=", "mean", "\n", "if", "self", ".", "save_best_so_far_agent", ":", "\n", "                    ", "save_agent", "(", "agent", ",", "\"best\"", ",", "self", ".", "outdir", ",", "self", ".", "logger", ")", "\n", "", "", "", "return", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.evaluate_if_necessary": [[650, 663], ["evaluator.AsyncEvaluator.prev_eval_t.get_lock", "evaluator.AsyncEvaluator.evaluate_and_update_max_score", "evaluator.AsyncEvaluator.wrote_header.get_lock", "evaluator.write_header"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.evaluate_and_update_max_score", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.write_header"], ["", "def", "evaluate_if_necessary", "(", "self", ",", "t", ",", "episodes", ",", "env", ",", "agent", ")", ":", "\n", "        ", "necessary", "=", "False", "\n", "with", "self", ".", "prev_eval_t", ".", "get_lock", "(", ")", ":", "\n", "            ", "if", "t", ">=", "self", ".", "prev_eval_t", ".", "value", "+", "self", ".", "eval_interval", ":", "\n", "                ", "necessary", "=", "True", "\n", "self", ".", "prev_eval_t", ".", "value", "+=", "self", ".", "eval_interval", "\n", "", "", "if", "necessary", ":", "\n", "            ", "with", "self", ".", "wrote_header", ".", "get_lock", "(", ")", ":", "\n", "                ", "if", "not", "self", ".", "wrote_header", ".", "value", ":", "\n", "                    ", "write_header", "(", "self", ".", "outdir", ",", "agent", ",", "env", ")", "\n", "self", ".", "wrote_header", ".", "value", "=", "True", "\n", "", "", "return", "self", ".", "evaluate_and_update_max_score", "(", "t", ",", "episodes", ",", "env", ",", "agent", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.start_tensorboard_writer": [[664, 672], ["multiprocessing.Queue", "pfrl.utils.StoppableThread", "evaluator.AsyncEvaluator.record_tb_stats_thread.start"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.stress_tests.stress_test_start.start"], ["", "def", "start_tensorboard_writer", "(", "self", ",", "outdir", ",", "stop_event", ")", ":", "\n", "        ", "self", ".", "record_tb_stats_queue", "=", "mp", ".", "Queue", "(", ")", "\n", "self", ".", "record_tb_stats_thread", "=", "pfrl", ".", "utils", ".", "StoppableThread", "(", "\n", "target", "=", "record_tb_stats_loop", ",", "\n", "args", "=", "[", "outdir", ",", "self", ".", "record_tb_stats_queue", ",", "stop_event", "]", ",", "\n", "stop_event", "=", "stop_event", ",", "\n", ")", "\n", "self", ".", "record_tb_stats_thread", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.AsyncEvaluator.join_tensorboard_writer": [[673, 675], ["evaluator.AsyncEvaluator.record_tb_stats_thread.join"], "methods", ["None"], ["", "def", "join_tensorboard_writer", "(", "self", ")", ":", "\n", "        ", "self", ".", "record_tb_stats_thread", ".", "join", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator._run_episodes": [[12, 64], ["logging.getLogger", "agent.act", "env.step", "agent.observe", "len", "scores.append", "lengths.append", "logger.info", "env.reset", "info.get", "logger.info", "scores.append", "lengths.append", "float", "float", "len", "len", "float", "float", "len"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.act", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.observe", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["def", "_run_episodes", "(", "\n", "env", ",", "\n", "agent", ",", "\n", "n_steps", ",", "\n", "n_episodes", ",", "\n", "max_episode_len", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Run multiple episodes and return returns.\"\"\"", "\n", "assert", "(", "n_steps", "is", "None", ")", "!=", "(", "n_episodes", "is", "None", ")", "\n", "\n", "logger", "=", "logger", "or", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "scores", "=", "[", "]", "\n", "lengths", "=", "[", "]", "\n", "terminate", "=", "False", "\n", "timestep", "=", "0", "\n", "\n", "reset", "=", "True", "\n", "while", "not", "terminate", ":", "\n", "        ", "if", "reset", ":", "\n", "            ", "obs", "=", "env", ".", "reset", "(", ")", "\n", "done", "=", "False", "\n", "test_r", "=", "0", "\n", "episode_len", "=", "0", "\n", "info", "=", "{", "}", "\n", "", "a", "=", "agent", ".", "act", "(", "obs", ")", "\n", "obs", ",", "r", ",", "done", ",", "info", "=", "env", ".", "step", "(", "a", ")", "\n", "test_r", "+=", "r", "\n", "episode_len", "+=", "1", "\n", "timestep", "+=", "1", "\n", "reset", "=", "done", "or", "episode_len", "==", "max_episode_len", "or", "info", ".", "get", "(", "\"needs_reset\"", ",", "False", ")", "\n", "agent", ".", "observe", "(", "obs", ",", "r", ",", "done", ",", "reset", ")", "\n", "if", "reset", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "\"evaluation episode %s length:%s R:%s\"", ",", "len", "(", "scores", ")", ",", "episode_len", ",", "test_r", "\n", ")", "\n", "# As mixing float and numpy float causes errors in statistics", "\n", "# functions, here every score is cast to float.", "\n", "scores", ".", "append", "(", "float", "(", "test_r", ")", ")", "\n", "lengths", ".", "append", "(", "float", "(", "episode_len", ")", ")", "\n", "", "if", "n_steps", "is", "None", ":", "\n", "            ", "terminate", "=", "len", "(", "scores", ")", ">=", "n_episodes", "\n", "", "else", ":", "\n", "            ", "terminate", "=", "timestep", ">=", "n_steps", "\n", "# If all steps were used for a single unfinished episode", "\n", "", "", "if", "len", "(", "scores", ")", "==", "0", ":", "\n", "        ", "scores", ".", "append", "(", "float", "(", "test_r", ")", ")", "\n", "lengths", ".", "append", "(", "float", "(", "episode_len", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"evaluation episode %s length:%s R:%s\"", ",", "len", "(", "scores", ")", ",", "episode_len", ",", "test_r", "\n", ")", "\n", "", "return", "scores", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.run_evaluation_episodes": [[66, 97], ["agent.eval_mode", "evaluator._run_episodes"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.Agent.eval_mode", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator._run_episodes"], ["", "def", "run_evaluation_episodes", "(", "\n", "env", ",", "\n", "agent", ",", "\n", "n_steps", ",", "\n", "n_episodes", ",", "\n", "max_episode_len", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Run multiple evaluation episodes and return returns.\n\n    Args:\n        env (Environment): Environment used for evaluation\n        agent (Agent): Agent to evaluate.\n        n_steps (int): Number of timesteps to evaluate for.\n        n_episodes (int): Number of evaluation runs.\n        max_episode_len (int or None): If specified, episodes longer than this\n            value will be truncated.\n        logger (Logger or None): If specified, the given Logger object will be\n            used for logging results. If not specified, the default logger of\n            this module will be used.\n    Returns:\n        List of returns of evaluation runs.\n    \"\"\"", "\n", "with", "agent", ".", "eval_mode", "(", ")", ":", "\n", "        ", "return", "_run_episodes", "(", "\n", "env", "=", "env", ",", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "n_steps", ",", "\n", "n_episodes", "=", "n_episodes", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", "logger", "=", "logger", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator._batch_run_episodes": [[100, 216], ["dict", "dict", "numpy.zeros", "range", "numpy.zeros", "numpy.zeros", "env.reset", "numpy.zeros", "enumerate", "logging.getLogger", "agent.batch_act", "env.step", "numpy.logical_or", "numpy.logical_or", "numpy.logical_not", "range", "agent.batch_observe", "zip", "logger.info", "float", "float", "numpy.zeros", "len", "range", "np.zeros.fill", "env.reset", "info.get", "range", "eval_episode_returns.append", "eval_episode_lens.append", "numpy.where", "eval_episode_returns.append", "eval_episode_lens.append", "eval_episode_returns.append", "eval_episode_lens.append"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.batch_act", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.batch_observe", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "", "def", "_batch_run_episodes", "(", "\n", "env", ",", "\n", "agent", ",", "\n", "n_steps", ",", "\n", "n_episodes", ",", "\n", "max_episode_len", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Run multiple episodes and return returns in a batch manner.\"\"\"", "\n", "assert", "(", "n_steps", "is", "None", ")", "!=", "(", "n_episodes", "is", "None", ")", "\n", "\n", "logger", "=", "logger", "or", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "num_envs", "=", "env", ".", "num_envs", "\n", "episode_returns", "=", "dict", "(", ")", "\n", "episode_lengths", "=", "dict", "(", ")", "\n", "episode_indices", "=", "np", ".", "zeros", "(", "num_envs", ",", "dtype", "=", "\"i\"", ")", "\n", "episode_idx", "=", "0", "\n", "for", "i", "in", "range", "(", "num_envs", ")", ":", "\n", "        ", "episode_indices", "[", "i", "]", "=", "episode_idx", "\n", "episode_idx", "+=", "1", "\n", "", "episode_r", "=", "np", ".", "zeros", "(", "num_envs", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "episode_len", "=", "np", ".", "zeros", "(", "num_envs", ",", "dtype", "=", "\"i\"", ")", "\n", "\n", "obss", "=", "env", ".", "reset", "(", ")", "\n", "rs", "=", "np", ".", "zeros", "(", "num_envs", ",", "dtype", "=", "\"f\"", ")", "\n", "\n", "termination_conditions", "=", "False", "\n", "timestep", "=", "0", "\n", "while", "True", ":", "\n", "# a_t", "\n", "        ", "actions", "=", "agent", ".", "batch_act", "(", "obss", ")", "\n", "timestep", "+=", "1", "\n", "# o_{t+1}, r_{t+1}", "\n", "obss", ",", "rs", ",", "dones", ",", "infos", "=", "env", ".", "step", "(", "actions", ")", "\n", "episode_r", "+=", "rs", "\n", "episode_len", "+=", "1", "\n", "# Compute mask for done and reset", "\n", "if", "max_episode_len", "is", "None", ":", "\n", "            ", "resets", "=", "np", ".", "zeros", "(", "num_envs", ",", "dtype", "=", "bool", ")", "\n", "", "else", ":", "\n", "            ", "resets", "=", "episode_len", "==", "max_episode_len", "\n", "", "resets", "=", "np", ".", "logical_or", "(", "\n", "resets", ",", "[", "info", ".", "get", "(", "\"needs_reset\"", ",", "False", ")", "for", "info", "in", "infos", "]", "\n", ")", "\n", "\n", "# Make mask. 0 if done/reset, 1 if pass", "\n", "end", "=", "np", ".", "logical_or", "(", "resets", ",", "dones", ")", "\n", "not_end", "=", "np", ".", "logical_not", "(", "end", ")", "\n", "\n", "for", "index", "in", "range", "(", "len", "(", "end", ")", ")", ":", "\n", "            ", "if", "end", "[", "index", "]", ":", "\n", "                ", "episode_returns", "[", "episode_indices", "[", "index", "]", "]", "=", "episode_r", "[", "index", "]", "\n", "episode_lengths", "[", "episode_indices", "[", "index", "]", "]", "=", "episode_len", "[", "index", "]", "\n", "# Give the new episode an a new episode index", "\n", "episode_indices", "[", "index", "]", "=", "episode_idx", "\n", "episode_idx", "+=", "1", "\n", "\n", "", "", "episode_r", "[", "end", "]", "=", "0", "\n", "episode_len", "[", "end", "]", "=", "0", "\n", "\n", "# find first unfinished episode", "\n", "first_unfinished_episode", "=", "0", "\n", "while", "first_unfinished_episode", "in", "episode_returns", ":", "\n", "            ", "first_unfinished_episode", "+=", "1", "\n", "\n", "# Check for termination conditions", "\n", "", "eval_episode_returns", "=", "[", "]", "\n", "eval_episode_lens", "=", "[", "]", "\n", "if", "n_steps", "is", "not", "None", ":", "\n", "            ", "total_time", "=", "0", "\n", "for", "index", "in", "range", "(", "first_unfinished_episode", ")", ":", "\n", "                ", "total_time", "+=", "episode_lengths", "[", "index", "]", "\n", "# If you will run over allocated steps, quit", "\n", "if", "total_time", ">", "n_steps", ":", "\n", "                    ", "break", "\n", "", "else", ":", "\n", "                    ", "eval_episode_returns", ".", "append", "(", "episode_returns", "[", "index", "]", ")", "\n", "eval_episode_lens", ".", "append", "(", "episode_lengths", "[", "index", "]", ")", "\n", "", "", "termination_conditions", "=", "total_time", ">=", "n_steps", "\n", "if", "not", "termination_conditions", ":", "\n", "                ", "unfinished_index", "=", "np", ".", "where", "(", "\n", "episode_indices", "==", "first_unfinished_episode", "\n", ")", "[", "0", "]", "\n", "if", "total_time", "+", "episode_len", "[", "unfinished_index", "]", ">=", "n_steps", ":", "\n", "                    ", "termination_conditions", "=", "True", "\n", "if", "first_unfinished_episode", "==", "0", ":", "\n", "                        ", "eval_episode_returns", ".", "append", "(", "episode_r", "[", "unfinished_index", "]", ")", "\n", "eval_episode_lens", ".", "append", "(", "episode_len", "[", "unfinished_index", "]", ")", "\n", "\n", "", "", "", "", "else", ":", "\n", "            ", "termination_conditions", "=", "first_unfinished_episode", ">=", "n_episodes", "\n", "if", "termination_conditions", ":", "\n", "# Get the first n completed episodes", "\n", "                ", "for", "index", "in", "range", "(", "n_episodes", ")", ":", "\n", "                    ", "eval_episode_returns", ".", "append", "(", "episode_returns", "[", "index", "]", ")", "\n", "eval_episode_lens", ".", "append", "(", "episode_lengths", "[", "index", "]", ")", "\n", "\n", "", "", "", "if", "termination_conditions", ":", "\n", "# If this is the last step, make sure the agent observes reset=True", "\n", "            ", "resets", ".", "fill", "(", "True", ")", "\n", "\n", "# Agent observes the consequences.", "\n", "", "agent", ".", "batch_observe", "(", "obss", ",", "rs", ",", "dones", ",", "resets", ")", "\n", "\n", "if", "termination_conditions", ":", "\n", "            ", "break", "\n", "", "else", ":", "\n", "            ", "obss", "=", "env", ".", "reset", "(", "not_end", ")", "\n", "\n", "", "", "for", "i", ",", "(", "epi_len", ",", "epi_ret", ")", "in", "enumerate", "(", "\n", "zip", "(", "eval_episode_lens", ",", "eval_episode_returns", ")", "\n", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"evaluation episode %s length: %s R: %s\"", ",", "i", ",", "epi_len", ",", "epi_ret", ")", "\n", "", "scores", "=", "[", "float", "(", "r", ")", "for", "r", "in", "eval_episode_returns", "]", "\n", "lengths", "=", "[", "float", "(", "ln", ")", "for", "ln", "in", "eval_episode_lens", "]", "\n", "return", "scores", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.batch_run_evaluation_episodes": [[218, 251], ["agent.eval_mode", "evaluator._batch_run_episodes"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.agent.Agent.eval_mode", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator._batch_run_episodes"], ["", "def", "batch_run_evaluation_episodes", "(", "\n", "env", ",", "\n", "agent", ",", "\n", "n_steps", ",", "\n", "n_episodes", ",", "\n", "max_episode_len", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Run multiple evaluation episodes and return returns in a batch manner.\n\n    Args:\n        env (VectorEnv): Environment used for evaluation.\n        agent (Agent): Agent to evaluate.\n        n_steps (int): Number of total timesteps to evaluate the agent.\n        n_episodes (int): Number of evaluation runs.\n        max_episode_len (int or None): If specified, episodes\n            longer than this value will be truncated.\n        logger (Logger or None): If specified, the given Logger\n            object will be used for logging results. If not\n            specified, the default logger of this module will\n            be used.\n\n    Returns:\n        List of returns of evaluation runs.\n    \"\"\"", "\n", "with", "agent", ".", "eval_mode", "(", ")", ":", "\n", "        ", "return", "_batch_run_episodes", "(", "\n", "env", "=", "env", ",", "\n", "agent", "=", "agent", ",", "\n", "n_steps", "=", "n_steps", ",", "\n", "n_episodes", "=", "n_episodes", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", "logger", "=", "logger", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.eval_performance": [[254, 307], ["isinstance", "dict", "evaluator.batch_run_evaluation_episodes", "evaluator.run_evaluation_episodes", "len", "statistics.mean", "statistics.median", "numpy.max", "numpy.min", "statistics.mean", "statistics.median", "numpy.max", "numpy.min", "statistics.stdev", "statistics.stdev", "len", "len"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.batch_run_evaluation_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.run_evaluation_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min"], ["", "", "def", "eval_performance", "(", "\n", "env", ",", "agent", ",", "n_steps", ",", "n_episodes", ",", "max_episode_len", "=", "None", ",", "logger", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"Run multiple evaluation episodes and return statistics.\n\n    Args:\n        env (Environment): Environment used for evaluation\n        agent (Agent): Agent to evaluate.\n        n_steps (int): Number of timesteps to evaluate for.\n        n_episodes (int): Number of evaluation episodes.\n        max_episode_len (int or None): If specified, episodes longer than this\n            value will be truncated.\n        logger (Logger or None): If specified, the given Logger object will be\n            used for logging results. If not specified, the default logger of\n            this module will be used.\n    Returns:\n        Dict of statistics.\n    \"\"\"", "\n", "\n", "assert", "(", "n_steps", "is", "None", ")", "!=", "(", "n_episodes", "is", "None", ")", "\n", "\n", "if", "isinstance", "(", "env", ",", "pfrl", ".", "env", ".", "VectorEnv", ")", ":", "\n", "        ", "scores", ",", "lengths", "=", "batch_run_evaluation_episodes", "(", "\n", "env", ",", "\n", "agent", ",", "\n", "n_steps", ",", "\n", "n_episodes", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", "logger", "=", "logger", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "scores", ",", "lengths", "=", "run_evaluation_episodes", "(", "\n", "env", ",", "\n", "agent", ",", "\n", "n_steps", ",", "\n", "n_episodes", ",", "\n", "max_episode_len", "=", "max_episode_len", ",", "\n", "logger", "=", "logger", ",", "\n", ")", "\n", "", "stats", "=", "dict", "(", "\n", "episodes", "=", "len", "(", "scores", ")", ",", "\n", "mean", "=", "statistics", ".", "mean", "(", "scores", ")", ",", "\n", "median", "=", "statistics", ".", "median", "(", "scores", ")", ",", "\n", "stdev", "=", "statistics", ".", "stdev", "(", "scores", ")", "if", "len", "(", "scores", ")", ">=", "2", "else", "0.0", ",", "\n", "max", "=", "np", ".", "max", "(", "scores", ")", ",", "\n", "min", "=", "np", ".", "min", "(", "scores", ")", ",", "\n", "length_mean", "=", "statistics", ".", "mean", "(", "lengths", ")", ",", "\n", "length_median", "=", "statistics", ".", "median", "(", "lengths", ")", ",", "\n", "length_stdev", "=", "statistics", ".", "stdev", "(", "lengths", ")", "if", "len", "(", "lengths", ")", ">=", "2", "else", "0", ",", "\n", "length_max", "=", "np", ".", "max", "(", "lengths", ")", ",", "\n", "length_min", "=", "np", ".", "min", "(", "lengths", ")", ",", "\n", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.record_stats": [[309, 312], ["open", "print", "os.path.join", "str"], "function", ["None"], ["", "def", "record_stats", "(", "outdir", ",", "values", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"scores.txt\"", ")", ",", "\"a+\"", ")", "as", "f", ":", "\n", "        ", "print", "(", "\"\\t\"", ".", "join", "(", "str", "(", "x", ")", "for", "x", "in", "values", ")", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.create_tb_writer": [[314, 334], ["SummaryWriter", "SummaryWriter.add_custom_scalars"], "function", ["None"], ["", "", "def", "create_tb_writer", "(", "outdir", ")", ":", "\n", "    ", "\"\"\"Return a tensorboard summarywriter with a custom scalar.\"\"\"", "\n", "# This conditional import will raise an error if tensorboard<1.14", "\n", "from", "torch", ".", "utils", ".", "tensorboard", "import", "SummaryWriter", "\n", "\n", "tb_writer", "=", "SummaryWriter", "(", "log_dir", "=", "outdir", ")", "\n", "layout", "=", "{", "\n", "\"Aggregate Charts\"", ":", "{", "\n", "\"mean w/ min-max\"", ":", "[", "\n", "\"Margin\"", ",", "\n", "[", "\"eval/mean\"", ",", "\"eval/min\"", ",", "\"eval/max\"", "]", ",", "\n", "]", ",", "\n", "\"mean +/- std\"", ":", "[", "\n", "\"Margin\"", ",", "\n", "[", "\"eval/mean\"", ",", "\"extras/meanplusstdev\"", ",", "\"extras/meanminusstdev\"", "]", ",", "\n", "]", ",", "\n", "}", "\n", "}", "\n", "tb_writer", ".", "add_custom_scalars", "(", "layout", ")", "\n", "return", "tb_writer", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.record_tb_stats": [[336, 358], ["time.time", "summary_writer.add_scalar", "summary_writer.add_scalar", "summary_writer.flush", "summary_writer.add_scalar", "summary_writer.add_scalar", "summary_writer.add_scalar"], "function", ["None"], ["", "def", "record_tb_stats", "(", "summary_writer", ",", "agent_stats", ",", "eval_stats", ",", "env_stats", ",", "t", ")", ":", "\n", "    ", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "stat", ",", "value", "in", "agent_stats", ":", "\n", "        ", "summary_writer", ".", "add_scalar", "(", "\"agent/\"", "+", "stat", ",", "value", ",", "t", ",", "cur_time", ")", "\n", "\n", "", "for", "stat", ",", "value", "in", "env_stats", ":", "\n", "        ", "summary_writer", ".", "add_scalar", "(", "\"env/\"", "+", "stat", ",", "value", ",", "t", ",", "cur_time", ")", "\n", "\n", "", "for", "stat", "in", "(", "\"mean\"", ",", "\"median\"", ",", "\"max\"", ",", "\"min\"", ",", "\"stdev\"", ")", ":", "\n", "        ", "value", "=", "eval_stats", "[", "stat", "]", "\n", "summary_writer", ".", "add_scalar", "(", "\"eval/\"", "+", "stat", ",", "value", ",", "t", ",", "cur_time", ")", "\n", "\n", "", "summary_writer", ".", "add_scalar", "(", "\n", "\"extras/meanplusstdev\"", ",", "eval_stats", "[", "\"mean\"", "]", "+", "eval_stats", "[", "\"stdev\"", "]", ",", "t", ",", "cur_time", "\n", ")", "\n", "summary_writer", ".", "add_scalar", "(", "\n", "\"extras/meanminusstdev\"", ",", "eval_stats", "[", "\"mean\"", "]", "-", "eval_stats", "[", "\"stdev\"", "]", ",", "t", ",", "cur_time", "\n", ")", "\n", "\n", "# manually flush to avoid loosing events on termination", "\n", "summary_writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.record_tb_stats_loop": [[360, 367], ["evaluator.create_tb_writer", "stop_event.wait", "queue.empty", "queue.empty", "queue.get", "evaluator.record_tb_stats"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.create_tb_writer", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.record_tb_stats"], ["", "def", "record_tb_stats_loop", "(", "outdir", ",", "queue", ",", "stop_event", ")", ":", "\n", "    ", "tb_writer", "=", "create_tb_writer", "(", "outdir", ")", "\n", "\n", "while", "not", "(", "stop_event", ".", "wait", "(", "1e-6", ")", "and", "queue", ".", "empty", "(", ")", ")", ":", "\n", "        ", "if", "not", "queue", ".", "empty", "(", ")", ":", "\n", "            ", "agent_stats", ",", "eval_stats", ",", "env_stats", ",", "t", "=", "queue", ".", "get", "(", ")", "\n", "record_tb_stats", "(", "tb_writer", ",", "agent_stats", ",", "eval_stats", ",", "env_stats", ",", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.save_agent": [[369, 373], ["os.path.join", "agent.save", "logger.info"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save"], ["", "", "", "def", "save_agent", "(", "agent", ",", "t", ",", "outdir", ",", "logger", ",", "suffix", "=", "\"\"", ")", ":", "\n", "    ", "dirname", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"{}{}\"", ".", "format", "(", "t", ",", "suffix", ")", ")", "\n", "agent", ".", "save", "(", "dirname", ")", "\n", "logger", ".", "info", "(", "\"Saved the agent to %s\"", ",", "dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.experiments.evaluator.write_header": [[375, 394], ["open", "tuple", "getattr", "callable", "tuple", "print", "os.path.join", "agent.get_statistics", "getattr."], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.get_statistics"], ["", "def", "write_header", "(", "outdir", ",", "agent", ",", "env", ")", ":", "\n", "# Columns that describe information about an experiment.", "\n", "    ", "basic_columns", "=", "(", "\n", "\"steps\"", ",", "# number of time steps taken (= number of actions taken)", "\n", "\"episodes\"", ",", "# number of episodes finished", "\n", "\"elapsed\"", ",", "# time elapsed so far (seconds)", "\n", "\"mean\"", ",", "# mean of returns of evaluation runs", "\n", "\"median\"", ",", "# median of returns of evaluation runs", "\n", "\"stdev\"", ",", "# stdev of returns of evaluation runs", "\n", "\"max\"", ",", "# maximum value of returns of evaluation runs", "\n", "\"min\"", ",", "# minimum value of returns of evaluation runs", "\n", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"scores.txt\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "custom_columns", "=", "tuple", "(", "t", "[", "0", "]", "for", "t", "in", "agent", ".", "get_statistics", "(", ")", ")", "\n", "env_get_stats", "=", "getattr", "(", "env", ",", "\"get_statistics\"", ",", "lambda", ":", "[", "]", ")", "\n", "assert", "callable", "(", "env_get_stats", ")", "\n", "custom_env_columns", "=", "tuple", "(", "t", "[", "0", "]", "for", "t", "in", "env_get_stats", "(", ")", ")", "\n", "column_names", "=", "basic_columns", "+", "custom_columns", "+", "custom_env_columns", "\n", "print", "(", "\"\\t\"", ".", "join", "(", "column_names", ")", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.lecun_normal.init_lecun_normal": [[5, 11], ["torch.nn.init._calculate_correct_fan", "numpy.sqrt", "torch.no_grad", "tensor.normal_"], "function", ["None"], ["def", "init_lecun_normal", "(", "tensor", ",", "scale", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Initializes the tensor with LeCunNormal.\"\"\"", "\n", "fan_in", "=", "torch", ".", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "tensor", ",", "\"fan_in\"", ")", "\n", "std", "=", "scale", "*", "np", ".", "sqrt", "(", "1.0", "/", "fan_in", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "return", "tensor", ".", "normal_", "(", "0", ",", "std", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.chainer_default.init_chainer_default": [[9, 22], ["torch.no_grad", "torch.no_grad", "isinstance", "isinstance", "pfrl.initializers.lecun_normal.init_lecun_normal", "torch.init.zeros_"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.lecun_normal.init_lecun_normal"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "init_chainer_default", "(", "layer", ")", ":", "\n", "    ", "\"\"\"Initializes the layer with the chainer default.\n    weights with LeCunNormal(scale=1.0) and zeros as biases\n    \"\"\"", "\n", "assert", "isinstance", "(", "layer", ",", "nn", ".", "Module", ")", "\n", "\n", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ")", ")", ":", "\n", "        ", "init_lecun_normal", "(", "layer", ".", "weight", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "# layer may be initialized with bias=False", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "bias", ")", "\n", "", "", "return", "layer", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a2c.A2C.__init__": [[53, 110], ["torch.cuda.is_available", "torch.device", "a2c.A2C.model.to", "torch.device"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "optimizer", ",", "\n", "gamma", ",", "\n", "num_processes", ",", "\n", "gpu", "=", "None", ",", "\n", "update_steps", "=", "5", ",", "\n", "phi", "=", "lambda", "x", ":", "x", ",", "\n", "pi_loss_coef", "=", "1.0", ",", "\n", "v_loss_coef", "=", "0.5", ",", "\n", "entropy_coeff", "=", "0.01", ",", "\n", "use_gae", "=", "False", ",", "\n", "tau", "=", "0.95", ",", "\n", "act_deterministically", "=", "False", ",", "\n", "max_grad_norm", "=", "None", ",", "\n", "average_actor_loss_decay", "=", "0.999", ",", "\n", "average_entropy_decay", "=", "0.999", ",", "\n", "average_value_decay", "=", "0.999", ",", "\n", "batch_states", "=", "batch_states", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "model", "=", "model", "\n", "if", "gpu", "is", "not", "None", "and", "gpu", ">=", "0", ":", "\n", "            ", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "self", ".", "update_steps", "=", "update_steps", "\n", "self", ".", "num_processes", "=", "num_processes", "\n", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "use_gae", "=", "use_gae", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "act_deterministically", "=", "act_deterministically", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "self", ".", "phi", "=", "phi", "\n", "self", ".", "pi_loss_coef", "=", "pi_loss_coef", "\n", "self", ".", "v_loss_coef", "=", "v_loss_coef", "\n", "self", ".", "entropy_coeff", "=", "entropy_coeff", "\n", "\n", "self", ".", "average_actor_loss_decay", "=", "average_actor_loss_decay", "\n", "self", ".", "average_value_decay", "=", "average_value_decay", "\n", "self", ".", "average_entropy_decay", "=", "average_entropy_decay", "\n", "self", ".", "batch_states", "=", "batch_states", "\n", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "t_start", "=", "0", "\n", "\n", "# Stats", "\n", "self", ".", "average_actor_loss", "=", "0", "\n", "self", ".", "average_value", "=", "0", "\n", "self", ".", "average_entropy", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a2c.A2C._flush_storage": [[111, 150], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones"], "methods", ["None"], ["", "def", "_flush_storage", "(", "self", ",", "obs_shape", ",", "action", ")", ":", "\n", "        ", "obs_shape", "=", "obs_shape", "[", "1", ":", "]", "\n", "action_shape", "=", "action", ".", "shape", "[", "1", ":", "]", "\n", "\n", "self", ".", "states", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "update_steps", "+", "1", ",", "\n", "self", ".", "num_processes", ",", "\n", "*", "obs_shape", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float", "\n", ")", "\n", "self", ".", "actions", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "update_steps", ",", "\n", "self", ".", "num_processes", ",", "\n", "*", "action_shape", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float", "\n", ")", "\n", "self", ".", "rewards", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "update_steps", ",", "self", ".", "num_processes", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "float", "\n", ")", "\n", "self", ".", "value_preds", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "update_steps", "+", "1", ",", "\n", "self", ".", "num_processes", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", "\n", "self", ".", "returns", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "update_steps", "+", "1", ",", "\n", "self", ".", "num_processes", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", "\n", "self", ".", "masks", "=", "torch", ".", "ones", "(", "\n", "self", ".", "update_steps", ",", "self", ".", "num_processes", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "float", "\n", ")", "\n", "\n", "self", ".", "obs_shape", "=", "obs_shape", "\n", "self", ".", "action_shape", "=", "action_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a2c.A2C._compute_returns": [[151, 168], ["reversed", "reversed", "range", "range"], "methods", ["None"], ["", "def", "_compute_returns", "(", "self", ",", "next_value", ")", ":", "\n", "        ", "if", "self", ".", "use_gae", ":", "\n", "            ", "self", ".", "value_preds", "[", "-", "1", "]", "=", "next_value", "\n", "gae", "=", "0", "\n", "for", "i", "in", "reversed", "(", "range", "(", "self", ".", "update_steps", ")", ")", ":", "\n", "                ", "delta", "=", "(", "\n", "self", ".", "rewards", "[", "i", "]", "\n", "+", "self", ".", "gamma", "*", "self", ".", "value_preds", "[", "i", "+", "1", "]", "*", "self", ".", "masks", "[", "i", "]", "\n", "-", "self", ".", "value_preds", "[", "i", "]", "\n", ")", "\n", "gae", "=", "delta", "+", "self", ".", "gamma", "*", "self", ".", "tau", "*", "self", ".", "masks", "[", "i", "]", "*", "gae", "\n", "self", ".", "returns", "[", "i", "]", "=", "gae", "+", "self", ".", "value_preds", "[", "i", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "returns", "[", "-", "1", "]", "=", "next_value", "\n", "for", "i", "in", "reversed", "(", "range", "(", "self", ".", "update_steps", ")", ")", ":", "\n", "                ", "self", ".", "returns", "[", "i", "]", "=", "(", "\n", "self", ".", "rewards", "[", "i", "]", "+", "self", ".", "gamma", "*", "self", ".", "returns", "[", "i", "+", "1", "]", "*", "self", ".", "masks", "[", "i", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a2c.A2C.update": [[170, 214], ["a2c.A2C._compute_returns", "a2c.A2C.model", "a2c.A2C.actions.reshape", "pout.entropy().mean", "pout.log_prob", "values.reshape.reshape.reshape", "action_log_probs.reshape.reshape.reshape", "a2c.A2C.optimizer.zero_grad", "a2c.A2C.optimizer.step", "torch.no_grad", "a2c.A2C.model", "a2c.A2C.states[].reshape", "pfrl.utils.clip_l2_grad_norm_", "pout.entropy", "a2c.A2C.model.parameters", "float", "float", "float", "advantages.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a2c.A2C._compute_returns", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.log_prob", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.clip_l2_grad_norm.clip_l2_grad_norm_", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.entropy"], ["", "", "", "def", "update", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "_", ",", "next_value", "=", "self", ".", "model", "(", "self", ".", "states", "[", "-", "1", "]", ")", "\n", "next_value", "=", "next_value", "[", ":", ",", "0", "]", "\n", "\n", "", "self", ".", "_compute_returns", "(", "next_value", ")", "\n", "pout", ",", "values", "=", "self", ".", "model", "(", "self", ".", "states", "[", ":", "-", "1", "]", ".", "reshape", "(", "-", "1", ",", "*", "self", ".", "obs_shape", ")", ")", "\n", "\n", "actions", "=", "self", ".", "actions", ".", "reshape", "(", "-", "1", ",", "*", "self", ".", "action_shape", ")", "\n", "dist_entropy", "=", "pout", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "action_log_probs", "=", "pout", ".", "log_prob", "(", "actions", ")", "\n", "\n", "values", "=", "values", ".", "reshape", "(", "(", "self", ".", "update_steps", ",", "self", ".", "num_processes", ")", ")", "\n", "action_log_probs", "=", "action_log_probs", ".", "reshape", "(", "\n", "(", "self", ".", "update_steps", ",", "self", ".", "num_processes", ")", "\n", ")", "\n", "advantages", "=", "self", ".", "returns", "[", ":", "-", "1", "]", "-", "values", "\n", "value_loss", "=", "(", "advantages", "*", "advantages", ")", ".", "mean", "(", ")", "\n", "action_loss", "=", "-", "(", "advantages", ".", "detach", "(", ")", "*", "action_log_probs", ")", ".", "mean", "(", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "(", "\n", "value_loss", "*", "self", ".", "v_loss_coef", "\n", "+", "action_loss", "*", "self", ".", "pi_loss_coef", "\n", "-", "dist_entropy", "*", "self", ".", "entropy_coeff", "\n", ")", ".", "backward", "(", ")", "\n", "\n", "if", "self", ".", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "clip_l2_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "states", "[", "0", "]", "=", "self", ".", "states", "[", "-", "1", "]", "\n", "\n", "self", ".", "t_start", "=", "self", ".", "t", "\n", "\n", "# Update stats", "\n", "self", ".", "average_actor_loss", "+=", "(", "1", "-", "self", ".", "average_actor_loss_decay", ")", "*", "(", "\n", "float", "(", "action_loss", ")", "-", "self", ".", "average_actor_loss", "\n", ")", "\n", "self", ".", "average_value", "+=", "(", "1", "-", "self", ".", "average_value_decay", ")", "*", "(", "\n", "float", "(", "value_loss", ")", "-", "self", ".", "average_value", "\n", ")", "\n", "self", ".", "average_entropy", "+=", "(", "1", "-", "self", ".", "average_entropy_decay", ")", "*", "(", "\n", "float", "(", "dist_entropy", ")", "-", "self", ".", "average_entropy", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a2c.A2C.batch_act": [[216, 221], ["a2c.A2C._batch_act_train", "a2c.A2C._batch_act_eval"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_act_train", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_act_eval"], ["", "def", "batch_act", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_batch_act_train", "(", "batch_obs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_batch_act_eval", "(", "batch_obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a2c.A2C.batch_observe": [[222, 225], ["a2c.A2C._batch_observe_train"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_observe_train"], ["", "", "def", "batch_observe", "(", "self", ",", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "_batch_observe_train", "(", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a2c.A2C._batch_act_train": [[226, 250], ["a2c.A2C.batch_states", "pout.sample.reshape", "pout.sample.cpu().numpy", "a2c.A2C._flush_storage", "a2c.A2C.update", "torch.no_grad", "a2c.A2C.model", "pout.sample", "torch.no_grad", "a2c.A2C.model", "pout.sample", "pout.sample.cpu"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a2c.A2C._flush_storage", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "", "def", "_batch_act_train", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "assert", "self", ".", "training", "\n", "\n", "statevar", "=", "self", ".", "batch_states", "(", "batch_obs", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "\n", "if", "self", ".", "t", "==", "0", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pout", ",", "_", "=", "self", ".", "model", "(", "statevar", ")", "\n", "action", "=", "pout", ".", "sample", "(", ")", "\n", "", "self", ".", "_flush_storage", "(", "statevar", ".", "shape", ",", "action", ")", "\n", "\n", "", "self", ".", "states", "[", "self", ".", "t", "-", "self", ".", "t_start", "]", "=", "statevar", "\n", "\n", "if", "self", ".", "t", "-", "self", ".", "t_start", "==", "self", ".", "update_steps", ":", "\n", "            ", "self", ".", "update", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pout", ",", "value", "=", "self", ".", "model", "(", "statevar", ")", "\n", "action", "=", "pout", ".", "sample", "(", ")", "\n", "\n", "", "self", ".", "actions", "[", "self", ".", "t", "-", "self", ".", "t_start", "]", "=", "action", ".", "reshape", "(", "-", "1", ",", "*", "self", ".", "action_shape", ")", "\n", "self", ".", "value_preds", "[", "self", ".", "t", "-", "self", ".", "t_start", "]", "=", "value", "[", ":", ",", "0", "]", "\n", "\n", "return", "action", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a2c.A2C._batch_act_eval": [[251, 261], ["a2c.A2C.batch_states", "pout.sample.cpu().numpy", "torch.no_grad", "a2c.A2C.model", "pfrl.utils.mode_of_distribution.mode_of_distribution", "pout.sample", "pout.sample.cpu"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.mode_of_distribution.mode_of_distribution", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "def", "_batch_act_eval", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "assert", "not", "self", ".", "training", "\n", "statevar", "=", "self", ".", "batch_states", "(", "batch_obs", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pout", ",", "_", "=", "self", ".", "model", "(", "statevar", ")", "\n", "if", "self", ".", "act_deterministically", ":", "\n", "                ", "action", "=", "mode_of_distribution", "(", "pout", ")", "\n", "", "else", ":", "\n", "                ", "action", "=", "pout", ".", "sample", "(", ")", "\n", "", "", "return", "action", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a2c.A2C._batch_observe_train": [[262, 289], ["any", "a2c.A2C.batch_states", "torch.as_tensor", "torch.as_tensor", "warnings.warn", "list", "enumerate", "a2c.A2C.update"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update"], ["", "def", "_batch_observe_train", "(", "self", ",", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", ":", "\n", "        ", "assert", "self", ".", "training", "\n", "self", ".", "t", "+=", "1", "\n", "\n", "if", "any", "(", "batch_reset", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"A2C currently does not support resetting an env without reaching a\"", "\n", "\" terminal state during training. When receiving True in batch_reset,\"", "\n", "\" A2C considers it as True in batch_done instead.\"", "\n", ")", "# NOQA", "\n", "batch_done", "=", "list", "(", "batch_done", ")", "\n", "for", "i", ",", "reset", "in", "enumerate", "(", "batch_reset", ")", ":", "\n", "                ", "if", "reset", ":", "\n", "                    ", "batch_done", "[", "i", "]", "=", "True", "\n", "\n", "", "", "", "statevar", "=", "self", ".", "batch_states", "(", "batch_obs", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "\n", "self", ".", "masks", "[", "self", ".", "t", "-", "self", ".", "t_start", "-", "1", "]", "=", "torch", ".", "as_tensor", "(", "\n", "[", "0.0", "if", "done", "else", "1.0", "for", "done", "in", "batch_done", "]", ",", "device", "=", "self", ".", "device", "\n", ")", "\n", "self", ".", "rewards", "[", "self", ".", "t", "-", "self", ".", "t_start", "-", "1", "]", "=", "torch", ".", "as_tensor", "(", "\n", "batch_reward", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "float", "\n", ")", "\n", "self", ".", "states", "[", "self", ".", "t", "-", "self", ".", "t_start", "]", "=", "statevar", "\n", "\n", "if", "self", ".", "t", "-", "self", ".", "t_start", "==", "self", ".", "update_steps", ":", "\n", "            ", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a2c.A2C.get_statistics": [[290, 295], ["None"], "methods", ["None"], ["", "", "def", "get_statistics", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "(", "\"average_actor\"", ",", "self", ".", "average_actor_loss", ")", ",", "\n", "(", "\"average_value\"", ",", "self", ".", "average_value", ")", ",", "\n", "(", "\"average_entropy\"", ",", "self", ".", "average_entropy", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.al.AL.__init__": [[19, 22], ["kwargs.pop", "pfrl.agents.dqn.DQN.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "kwargs", ".", "pop", "(", "\"alpha\"", ",", "0.9", ")", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.al.AL._compute_y_and_t": [[23, 80], ["len", "al.AL.evaluate_actions", "pfrl.utils.recurrent.pack_and_forward", "al.AL.model", "torch.no_grad", "al.AL.max.reshape", "al.AL.compute_advantage().reshape", "pfrl.utils.recurrent.pack_and_forward", "pfrl.utils.recurrent.pack_and_forward", "al.AL.target_model", "al.AL.target_model", "al.AL.compute_advantage"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.compute_advantage"], ["", "def", "_compute_y_and_t", "(", "self", ",", "exp_batch", ")", ":", "\n", "\n", "        ", "batch_state", "=", "exp_batch", "[", "\"state\"", "]", "\n", "batch_size", "=", "len", "(", "exp_batch", "[", "\"reward\"", "]", ")", "\n", "\n", "if", "self", ".", "recurrent", ":", "\n", "            ", "qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "model", ",", "\n", "batch_state", ",", "\n", "exp_batch", "[", "\"recurrent_state\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "qout", "=", "self", ".", "model", "(", "batch_state", ")", "\n", "\n", "", "batch_actions", "=", "exp_batch", "[", "\"action\"", "]", "\n", "\n", "batch_q", "=", "qout", ".", "evaluate_actions", "(", "batch_actions", ")", "\n", "\n", "# Compute target values", "\n", "batch_next_state", "=", "exp_batch", "[", "\"next_state\"", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "recurrent", ":", "\n", "                ", "target_qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "target_model", ",", "\n", "batch_state", ",", "\n", "exp_batch", "[", "\"recurrent_state\"", "]", ",", "\n", ")", "\n", "target_next_qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "target_model", ",", "\n", "batch_next_state", ",", "\n", "exp_batch", "[", "\"next_recurrent_state\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "target_qout", "=", "self", ".", "target_model", "(", "batch_state", ")", "\n", "target_next_qout", "=", "self", ".", "target_model", "(", "batch_next_state", ")", "\n", "\n", "", "next_q_max", "=", "target_next_qout", ".", "max", ".", "reshape", "(", "\n", "batch_size", ",", "\n", ")", "\n", "\n", "batch_rewards", "=", "exp_batch", "[", "\"reward\"", "]", "\n", "batch_terminal", "=", "exp_batch", "[", "\"is_state_terminal\"", "]", "\n", "\n", "# T Q: Bellman operator", "\n", "t_q", "=", "(", "\n", "batch_rewards", "\n", "+", "exp_batch", "[", "\"discount\"", "]", "*", "(", "1.0", "-", "batch_terminal", ")", "*", "next_q_max", "\n", ")", "\n", "\n", "# T_AL Q: advantage learning operator", "\n", "cur_advantage", "=", "target_qout", ".", "compute_advantage", "(", "batch_actions", ")", ".", "reshape", "(", "\n", "(", "batch_size", ",", ")", "\n", ")", "\n", "tal_q", "=", "t_q", "+", "self", ".", "alpha", "*", "cur_advantage", "\n", "\n", "", "return", "batch_q", ",", "tal_q", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN.__init__": [[179, 276], ["logging.getLogger", "pfrl.replay_buffer.ReplayUpdater", "dqn.make_target_model_as_copy", "collections.deque", "collections.deque", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "torch.device", "torch.device", "dqn.DQN.model.to", "torch.device", "torch.device", "torch.device", "torch.device", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.make_target_model_as_copy", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["def", "__init__", "(", "\n", "self", ",", "\n", "q_function", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "# type: ignore  # somehow mypy complains", "\n", "replay_buffer", ":", "pfrl", ".", "replay_buffer", ".", "AbstractReplayBuffer", ",", "\n", "gamma", ":", "float", ",", "\n", "explorer", ":", "Explorer", ",", "\n", "gpu", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "replay_start_size", ":", "int", "=", "50000", ",", "\n", "minibatch_size", ":", "int", "=", "32", ",", "\n", "update_interval", ":", "int", "=", "1", ",", "\n", "target_update_interval", ":", "int", "=", "10000", ",", "\n", "clip_delta", ":", "bool", "=", "True", ",", "\n", "phi", ":", "Callable", "[", "[", "Any", "]", ",", "Any", "]", "=", "lambda", "x", ":", "x", ",", "\n", "target_update_method", ":", "str", "=", "\"hard\"", ",", "\n", "soft_update_tau", ":", "float", "=", "1e-2", ",", "\n", "n_times_update", ":", "int", "=", "1", ",", "\n", "batch_accumulator", ":", "str", "=", "\"mean\"", ",", "\n", "episodic_update_len", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "logger", ":", "Logger", "=", "getLogger", "(", "__name__", ")", ",", "\n", "batch_states", ":", "Callable", "[", "\n", "[", "Sequence", "[", "Any", "]", ",", "torch", ".", "device", ",", "Callable", "[", "[", "Any", "]", ",", "Any", "]", "]", ",", "Any", "\n", "]", "=", "batch_states", ",", "\n", "recurrent", ":", "bool", "=", "False", ",", "\n", "max_grad_norm", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "model", "=", "q_function", "\n", "\n", "if", "gpu", "is", "not", "None", "and", "gpu", ">=", "0", ":", "\n", "            ", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "", "self", ".", "replay_buffer", "=", "replay_buffer", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "explorer", "=", "explorer", "\n", "self", ".", "gpu", "=", "gpu", "\n", "self", ".", "target_update_interval", "=", "target_update_interval", "\n", "self", ".", "clip_delta", "=", "clip_delta", "\n", "self", ".", "phi", "=", "phi", "\n", "self", ".", "target_update_method", "=", "target_update_method", "\n", "self", ".", "soft_update_tau", "=", "soft_update_tau", "\n", "self", ".", "batch_accumulator", "=", "batch_accumulator", "\n", "assert", "batch_accumulator", "in", "(", "\"mean\"", ",", "\"sum\"", ")", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "batch_states", "=", "batch_states", "\n", "self", ".", "recurrent", "=", "recurrent", "\n", "update_func", ":", "Callable", "[", "...", ",", "None", "]", "\n", "if", "self", ".", "recurrent", ":", "\n", "            ", "assert", "isinstance", "(", "self", ".", "replay_buffer", ",", "AbstractEpisodicReplayBuffer", ")", "\n", "update_func", "=", "self", ".", "update_from_episodes", "\n", "", "else", ":", "\n", "            ", "update_func", "=", "self", ".", "update", "\n", "# \u8fd9\u91cc\u7684replay_updater\u51fd\u6570\u8c03\u7528\u4e86replay_start_size\u53c2\u6570\uff0creplay_buffer\u76f8\u5173\u95ee\u9898\u53ef\u4ee5\u5b9a\u4f4d\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d", "\n", "", "self", ".", "replay_updater", "=", "ReplayUpdater", "(", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", "update_func", "=", "update_func", ",", "\n", "batchsize", "=", "minibatch_size", ",", "\n", "episodic_update", "=", "recurrent", ",", "\n", "episodic_update_len", "=", "episodic_update_len", ",", "\n", "n_times_update", "=", "n_times_update", ",", "\n", "replay_start_size", "=", "replay_start_size", ",", "\n", "update_interval", "=", "update_interval", ",", "\n", ")", "\n", "self", ".", "minibatch_size", "=", "minibatch_size", "\n", "self", ".", "episodic_update_len", "=", "episodic_update_len", "\n", "self", ".", "replay_start_size", "=", "replay_start_size", "\n", "self", ".", "update_interval", "=", "update_interval", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "\n", "assert", "(", "\n", "target_update_interval", "%", "update_interval", "==", "0", "\n", ")", ",", "\"target_update_interval should be a multiple of update_interval\"", "\n", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "optim_t", "=", "0", "# Compensate pytorch optim not having `t`", "\n", "self", ".", "_cumulative_steps", "=", "0", "\n", "self", ".", "target_model", "=", "make_target_model_as_copy", "(", "self", ".", "model", ")", "\n", "\n", "# Statistics", "\n", "self", ".", "q_record", ":", "collections", ".", "deque", "=", "collections", ".", "deque", "(", "maxlen", "=", "1000", ")", "\n", "self", ".", "loss_record", ":", "collections", ".", "deque", "=", "collections", ".", "deque", "(", "maxlen", "=", "100", ")", "\n", "\n", "# Recurrent states of the model", "\n", "self", ".", "train_recurrent_states", ":", "Any", "=", "None", "\n", "self", ".", "train_prev_recurrent_states", ":", "Any", "=", "None", "\n", "self", ".", "test_recurrent_states", ":", "Any", "=", "None", "\n", "\n", "# Error checking", "\n", "if", "(", "\n", "self", ".", "replay_buffer", ".", "capacity", "is", "not", "None", "\n", "and", "self", ".", "replay_buffer", ".", "capacity", "<", "self", ".", "replay_updater", ".", "replay_start_size", "\n", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Replay start size cannot exceed replay buffer capacity.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN.cumulative_steps": [[277, 281], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "cumulative_steps", "(", "self", ")", "->", "int", ":", "\n", "# cumulative_steps counts the overall steps during the training.", "\n", "        ", "return", "self", ".", "_cumulative_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN._setup_actor_learner_training": [[282, 305], ["copy.deepcopy().cpu", "copy.deepcopy().cpu.share_memory", "list", "zip", "copy.deepcopy", "multiprocessing.Pipe", "multiprocessing.Pipe", "range"], "methods", ["None"], ["", "def", "_setup_actor_learner_training", "(", "\n", "self", ",", "\n", "n_actors", ":", "int", ",", "\n", "actor_update_interval", ":", "int", ",", "\n", "update_counter", ":", "Any", ",", "\n", ")", "->", "Tuple", "[", "\n", "torch", ".", "nn", ".", "Module", ",", "\n", "Sequence", "[", "mp", ".", "connection", ".", "Connection", "]", ",", "\n", "Sequence", "[", "mp", ".", "connection", ".", "Connection", "]", ",", "\n", "]", ":", "\n", "        ", "assert", "actor_update_interval", ">", "0", "\n", "\n", "self", ".", "actor_update_interval", "=", "actor_update_interval", "\n", "self", ".", "update_counter", "=", "update_counter", "\n", "\n", "# Make a copy on shared memory and share among actors and the poller", "\n", "shared_model", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", ".", "cpu", "(", ")", "\n", "shared_model", ".", "share_memory", "(", ")", "\n", "\n", "# Pipes are used for infrequent communication", "\n", "learner_pipes", ",", "actor_pipes", "=", "list", "(", "zip", "(", "*", "[", "mp", ".", "Pipe", "(", ")", "for", "_", "in", "range", "(", "n_actors", ")", "]", ")", ")", "\n", "\n", "return", "(", "shared_model", ",", "learner_pipes", ",", "actor_pipes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN.sync_target_network": [[306, 313], ["pfrl.utils.copy_param.synchronize_parameters"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.synchronize_parameters"], ["", "def", "sync_target_network", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Synchronize target network with current network.\"\"\"", "\n", "synchronize_parameters", "(", "\n", "src", "=", "self", ".", "model", ",", "\n", "dst", "=", "self", ".", "target_model", ",", "\n", "method", "=", "self", ".", "target_update_method", ",", "\n", "tau", "=", "self", ".", "soft_update_tau", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN.update": [[316, 368], ["pfrl.replay_buffer.batch_experiences", "dqn.DQN._compute_loss", "dqn.DQN.loss_record.append", "dqn.DQN.optimizer.zero_grad", "dqn.DQN.backward", "dqn.DQN.optimizer.step", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "isinstance", "dqn.DQN.replay_buffer.update_errors", "float", "pfrl.utils.clip_l2_grad_norm_", "dqn.DQN.detach().cpu().numpy", "dqn.DQN.model.parameters", "dqn.DQN.detach().cpu", "dqn.DQN.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.batch_experiences", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.IQN._compute_loss", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized.PrioritizedReplayBuffer.update_errors", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.clip_l2_grad_norm.clip_l2_grad_norm_"], ["", "def", "update", "(", "\n", "self", ",", "experiences", ":", "List", "[", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", "]", ",", "errors_out", ":", "Optional", "[", "list", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"Update the model from experiences\n\n        Args:\n            experiences (list): List of lists of dicts.\n                For DQN, each dict must contains:\n                  - state (object): State\n                  - action (object): Action\n                  - reward (float): Reward\n                  - is_state_terminal (bool): True iff next state is terminal\n                  - next_state (object): Next state\n                  - weight (float, optional): Weight coefficient. It can be\n                    used for importance sampling.\n            errors_out (list or None): If set to a list, then TD-errors\n                computed from the given experiences are appended to the list.\n\n        Returns:\n            None\n        \"\"\"", "\n", "has_weight", "=", "\"weight\"", "in", "experiences", "[", "0", "]", "[", "0", "]", "\n", "exp_batch", "=", "batch_experiences", "(", "\n", "experiences", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "phi", "=", "self", ".", "phi", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "\n", "batch_states", "=", "self", ".", "batch_states", ",", "\n", ")", "\n", "if", "has_weight", ":", "\n", "            ", "exp_batch", "[", "\"weights\"", "]", "=", "torch", ".", "tensor", "(", "\n", "[", "elem", "[", "0", "]", "[", "\"weight\"", "]", "for", "elem", "in", "experiences", "]", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", ")", "\n", "if", "errors_out", "is", "None", ":", "\n", "                ", "errors_out", "=", "[", "]", "\n", "# \u8fd9\u91cc\u8ba1\u7b97loss\u7684\u51fd\u6570\u9700\u8981\u6539\u5199", "\n", "# loss = self.compute_loss_new(exp_batch, errors_out=errors_out)", "\n", "", "", "loss", "=", "self", ".", "_compute_loss", "(", "exp_batch", ",", "errors_out", "=", "errors_out", ")", "\n", "if", "has_weight", ":", "\n", "            ", "assert", "isinstance", "(", "self", ".", "replay_buffer", ",", "PrioritizedReplayBuffer", ")", "\n", "self", ".", "replay_buffer", ".", "update_errors", "(", "errors_out", ")", "\n", "\n", "", "self", ".", "loss_record", ".", "append", "(", "float", "(", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "pfrl", ".", "utils", ".", "clip_l2_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optim_t", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN.update_from_episodes": [[369, 389], ["sorted", "pfrl.replay_buffer.batch_recurrent_experiences", "dqn.DQN._compute_loss", "dqn.DQN.loss_record.append", "dqn.DQN.optimizer.zero_grad", "dqn.DQN.backward", "dqn.DQN.optimizer.step", "float", "pfrl.utils.clip_l2_grad_norm_", "dqn.DQN.detach().cpu().numpy", "dqn.DQN.model.parameters", "dqn.DQN.detach().cpu", "dqn.DQN.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.batch_recurrent_experiences", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.IQN._compute_loss", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.clip_l2_grad_norm.clip_l2_grad_norm_"], ["", "def", "update_from_episodes", "(", "\n", "self", ",", "episodes", ":", "List", "[", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", "]", ",", "errors_out", ":", "Optional", "[", "list", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "assert", "errors_out", "is", "None", ",", "\"Recurrent DQN does not support PrioritizedBuffer\"", "\n", "episodes", "=", "sorted", "(", "episodes", ",", "key", "=", "len", ",", "reverse", "=", "True", ")", "\n", "exp_batch", "=", "batch_recurrent_experiences", "(", "\n", "episodes", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "phi", "=", "self", ".", "phi", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "\n", "batch_states", "=", "self", ".", "batch_states", ",", "\n", ")", "\n", "loss", "=", "self", ".", "_compute_loss", "(", "exp_batch", ",", "errors_out", "=", "None", ")", "\n", "self", ".", "loss_record", ".", "append", "(", "float", "(", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "pfrl", ".", "utils", ".", "clip_l2_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optim_t", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN._compute_target_values": [[390, 418], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "pfrl.utils.recurrent.pack_and_forward", "dqn.DQN.target_model"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward"], ["", "def", "_compute_target_values", "(", "self", ",", "exp_batch", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "batch_next_state", "=", "exp_batch", "[", "\"next_state\"", "]", "\n", "\n", "if", "self", ".", "recurrent", ":", "\n", "            ", "target_next_qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "target_model", ",", "\n", "batch_next_state", ",", "\n", "exp_batch", "[", "\"next_recurrent_state\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "target_next_qout", "=", "[", "self", ".", "target_model", "(", "elem", "[", "0", "]", ",", "elem", "[", "1", "]", ",", "elem", "[", "2", "]", ")", "for", "elem", "in", "batch_next_state", "]", "\n", "\n", "# \u540c\u6837\u9700\u8981\u5bf9target_q\u503c\u8fdb\u884c\u4e0eq\u503c\u76f8\u540c\u65b9\u6cd5\u7684\u5904\u7406\uff0c\u4ee5\u5b9e\u73b0\u4e0ebatch_size\u7ef4\u5ea6\u7684\u5339\u914d", "\n", "", "next_q_max", "=", "[", "elem", ".", "max", "for", "elem", "in", "target_next_qout", "]", "\n", "next_q_max", "=", "torch", ".", "stack", "(", "next_q_max", ")", "\n", "next_q_max", "=", "torch", ".", "mean", "(", "next_q_max", ",", "dim", "=", "1", ")", "\n", "# next_q_max = target_next_qout.max", "\n", "# print(\"next_q_max:\", next_q_max.shape)", "\n", "\n", "batch_rewards", "=", "exp_batch", "[", "\"reward\"", "]", "\n", "batch_terminal", "=", "exp_batch", "[", "\"is_state_terminal\"", "]", "\n", "discount", "=", "exp_batch", "[", "\"discount\"", "]", "\n", "\n", "# print(\"batch_rewards:\", batch_rewards.shape)", "\n", "# print(\"batch_terminal:\", batch_terminal.shape)", "\n", "# print(\"discount:\", discount.shape)", "\n", "\n", "return", "batch_rewards", "+", "discount", "*", "(", "1.0", "-", "batch_terminal", ")", "*", "next_q_max", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN._compute_y_and_t": [[419, 461], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "pfrl.utils.recurrent.pack_and_forward", "q_eval.evaluate_actions", "torch.reshape.append", "torch.reshape.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "len", "dqn.DQN.model", "dqn.DQN._compute_target_values", "dqn.DQN.model"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dpp.AbstractDPP._compute_target_values"], ["", "def", "_compute_y_and_t", "(", "\n", "self", ",", "exp_batch", ":", "Dict", "[", "str", ",", "Any", "]", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "batch_size", "=", "exp_batch", "[", "\"reward\"", "]", ".", "shape", "[", "0", "]", "\n", "\n", "# Compute Q-values for current states", "\n", "batch_state", "=", "exp_batch", "[", "\"state\"", "]", "\n", "# print(\"batch_state:\", batch_state)", "\n", "\n", "# \u4eceexperiences_batch\u4e2d\u91c7\u6837\u51fa\u8fdb\u884c\u8bad\u7ec3\u7684\u7ecf\u9a8clist\u7684\u7f16\u53f7", "\n", "# index = np.random.choice(batch_size, replace=False)", "\n", "\n", "if", "self", ".", "recurrent", ":", "\n", "            ", "qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "model", ",", "batch_state", ",", "exp_batch", "[", "\"recurrent_state\"", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "batch_state", ")", ">", "1", ":", "# \u9488\u5bf9GCQ\u7684\u591a\u77e9\u9635\u8f93\u5165\u8fdb\u884c\u5904\u7406", "\n", "                ", "qout", "=", "[", "self", ".", "model", "(", "elem", "[", "0", "]", ",", "elem", "[", "1", "]", ",", "elem", "[", "2", "]", ")", "for", "elem", "in", "batch_state", "]", "\n", "", "else", ":", "\n", "                ", "qout", "=", "self", ".", "model", "(", "batch_state", ")", "\n", "\n", "", "", "batch_actions", "=", "exp_batch", "[", "\"action\"", "]", "\n", "# \u8fd0\u884c\u4e0b\u8ff0\u8bed\u53e5\u524d\uff0c\u9700\u8981\u5c06list\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e3atensor(\u5728replay_buffer.py\u4e2d\u5b9e\u73b0)", "\n", "# \u7531\u4e8e\u4f5c\u8005\u7f16\u5199\u7684evaluate_actions\u51fd\u6570\u4e0d\u80fd\u9488\u5bf9GCQ\u8fdb\u884c\u591a\u77e9\u9635\u8f93\u5165\uff0c\u5fc5\u987b\u8981\u5206\u522b\u8ba1\u7b97\u6bcf\u4e2abatch_q\uff0c\u518d\u8fdb\u884c\u5408\u5e76", "\n", "batch_q", "=", "[", "]", "# \u521d\u59cb\u5316batch_q\u77e9\u9635", "\n", "count", "=", "0", "# \u5b9a\u4e49\u9488\u5bf9batch_actions\u7684\u8ba1\u6570\u5668", "\n", "for", "q_eval", "in", "qout", ":", "\n", "            ", "q_e", "=", "q_eval", ".", "evaluate_actions", "(", "batch_actions", "[", "count", "]", ")", "# \u8ba1\u7b97batch\u7f16\u53f7\u4e3acount\u7684q\u503c", "\n", "count", "+=", "1", "\n", "batch_q", ".", "append", "(", "q_e", ")", "\n", "", "batch_q", "=", "torch", ".", "stack", "(", "batch_q", ")", "# \u5c06\u4e0a\u8ff0\u5faa\u73af\u751f\u6210\u7684list\u8f6c\u6362\u4e3atensor\u6570\u636e\u7c7b\u578b", "\n", "batch_q", "=", "torch", ".", "mean", "(", "batch_q", ",", "dim", "=", "1", ")", "\n", "batch_q", "=", "torch", ".", "reshape", "(", "batch_q", ",", "(", "batch_size", ",", "1", ")", ")", "# \u5173\u4e8eq\u503c\u7684\u7ef4\u5ea6\u8fd8\u9700\u7ec6\u81f4\u8ba8\u8bba\uff0c\u6682\u5b9a\u6309\u7167\u516c\u5f0f\u53d6\u5e73\u5747\u503c", "\n", "# print(\"batch_q:\", batch_q)", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batch_q_target", "=", "torch", ".", "reshape", "(", "\n", "self", ".", "_compute_target_values", "(", "exp_batch", ")", ",", "(", "batch_size", ",", "1", ")", "\n", ")", "\n", "\n", "", "return", "batch_q", ",", "batch_q_target", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN._compute_loss": [[462, 501], ["dqn.DQN._compute_y_and_t", "dqn.DQN.q_record.extend", "y.detach().cpu().numpy().ravel", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum.detach().cpu().numpy", "torch.sum.detach().cpu().numpy", "dqn.compute_weighted_value_loss", "dqn.compute_value_loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "errors_out.append", "y.detach().cpu().numpy", "torch.sum.detach().cpu", "torch.sum.detach().cpu", "y.detach().cpu", "torch.sum.detach", "torch.sum.detach", "y.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.pal.PAL._compute_y_and_t", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.compute_weighted_value_loss", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.compute_value_loss", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "_compute_loss", "(", "\n", "self", ",", "exp_batch", ":", "Dict", "[", "str", ",", "Any", "]", ",", "errors_out", ":", "Optional", "[", "list", "]", "=", "None", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Compute the Q-learning loss for a batch of experiences\n\n\n        Args:\n          exp_batch (dict): A dict of batched arrays of transitions\n        Returns:\n          Computed loss from the minibatch of experiences\n        \"\"\"", "\n", "y", ",", "t", "=", "self", ".", "_compute_y_and_t", "(", "exp_batch", ")", "\n", "# print(\"y:\", y, \"\\nt:\", t)", "\n", "\n", "self", ".", "q_record", ".", "extend", "(", "y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "ravel", "(", ")", ")", "\n", "\n", "if", "errors_out", "is", "not", "None", ":", "\n", "            ", "del", "errors_out", "[", ":", "]", "\n", "delta", "=", "torch", ".", "abs", "(", "y", "-", "t", ")", "\n", "if", "delta", ".", "ndim", "==", "2", ":", "\n", "                ", "delta", "=", "torch", ".", "sum", "(", "delta", ",", "dim", "=", "1", ")", "\n", "", "delta", "=", "delta", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "e", "in", "delta", ":", "\n", "                ", "errors_out", ".", "append", "(", "e", ")", "\n", "\n", "", "", "if", "\"weights\"", "in", "exp_batch", ":", "\n", "            ", "return", "compute_weighted_value_loss", "(", "\n", "y", ",", "\n", "t", ",", "\n", "exp_batch", "[", "\"weights\"", "]", ",", "\n", "clip_delta", "=", "self", ".", "clip_delta", ",", "\n", "batch_accumulator", "=", "self", ".", "batch_accumulator", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "compute_value_loss", "(", "\n", "y", ",", "\n", "t", ",", "\n", "clip_delta", "=", "self", ".", "clip_delta", ",", "\n", "batch_accumulator", "=", "self", ".", "batch_accumulator", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN._evaluate_model_and_update_recurrent_states": [[503, 526], ["dqn.DQN.batch_states", "pfrl.utils.recurrent.one_step_forward", "pfrl.utils.recurrent.one_step_forward", "len", "dqn.DQN.model", "dqn.DQN.model"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward"], ["", "", "def", "_evaluate_model_and_update_recurrent_states", "(", "\n", "self", ",", "batch_obs", ":", "Sequence", "[", "Any", "]", "\n", ")", "->", "ActionValue", ":", "\n", "# \u8fd9\u91cc\u662fphi\u51fd\u6570\u51fa\u73b0\u95ee\u9898\u7684\u8bed\u53e5", "\n", "        ", "batch_xs", "=", "self", ".", "batch_states", "(", "batch_obs", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "if", "self", ".", "recurrent", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "self", ".", "train_prev_recurrent_states", "=", "self", ".", "train_recurrent_states", "\n", "batch_av", ",", "self", ".", "train_recurrent_states", "=", "one_step_forward", "(", "\n", "self", ".", "model", ",", "batch_xs", ",", "self", ".", "train_recurrent_states", "\n", ")", "\n", "", "else", ":", "\n", "                ", "batch_av", ",", "self", ".", "test_recurrent_states", "=", "one_step_forward", "(", "\n", "self", ".", "model", ",", "batch_xs", ",", "self", ".", "test_recurrent_states", "\n", ")", "\n", "", "", "else", ":", "\n", "# \u8fd9\u90e8\u5206\u8981\u5c06batch_xs\u4e2d\u7684\u4e09\u4e2a\u77e9\u9635\u62c6\u5206\uff0c\u5206\u522b\u8f93\u5165\u5230GCQ\u6a21\u578b\u4e2d", "\n", "            ", "if", "len", "(", "batch_xs", ")", ">", "1", ":", "\n", "                ", "batch_av", "=", "self", ".", "model", "(", "batch_xs", "[", "0", "]", ",", "batch_xs", "[", "1", "]", ",", "batch_xs", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "                ", "batch_av", "=", "self", ".", "model", "(", "batch_xs", ")", "\n", "# \u8fd9\u91cc\u8fd4\u56de\u7684batch_av\u5305\u62ecgreedy_actions\uff081X40\uff09\u548cq\u503c\u4e24\u4e2a\u77e9\u9635\uff0840X3\uff09", "\n", "", "", "return", "batch_av", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN.batch_act": [[527, 555], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pfrl.utils.contexts.evaluating", "dqn.DQN._evaluate_model_and_update_recurrent_states", "dqn.DQN.greedy_actions.detach().cpu().numpy", "list", "list", "dqn.DQN.explorer.select_action", "numpy.array", "dqn.DQN.greedy_actions.detach().cpu", "range", "numpy.zeros", "len", "dqn.DQN.greedy_actions.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor._evaluate_model_and_update_recurrent_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.boltzmann.Boltzmann.select_action"], ["", "def", "batch_act", "(", "self", ",", "batch_obs", ":", "Sequence", "[", "Any", "]", ")", "->", "Sequence", "[", "Any", "]", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ",", "evaluating", "(", "self", ".", "model", ")", ":", "\n", "            ", "batch_av", "=", "self", ".", "_evaluate_model_and_update_recurrent_states", "(", "batch_obs", ")", "\n", "batch_argmax", "=", "batch_av", ".", "greedy_actions", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# print(\"batch_argmax:\", batch_argmax)", "\n", "# print(\"batch_obs:\", batch_obs[0])", "\n", "# print(\"len:\", len(batch_obs[0]))", "\n", "", "if", "self", ".", "training", ":", "\n", "# \u7ecf\u8fc7\u8c03\u8bd5\u53d1\u73b0\u901a\u8fc7pfrl\u5e93\u4e2d\u751f\u6210\u7684batch_action\uff0c\u5982\u679c\u77e9\u9635\u4e2d\u6240\u6709\u503c\u5747\u4e3a0\uff0c\u5219\u751f\u6210\u7684\u77e9\u9635\u53ea\u5305\u62ec0\u8fd9\u4e00\u4e2a\u5143\u7d20", "\n", "# \u4e0a\u8ff0\u63d0\u5230\u7684\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f1a\u5bf9\u540e\u7eed\u7ecf\u9a8c\u56de\u653e\u7684\u5904\u7406\u9020\u6210\u5f71\u54cd\uff0c\u4f7f\u5f97\u77e9\u9635\u4e0d\u80fd\u5408\u5e76", "\n", "# \u8fd9\u90e8\u5206\u7684select_action\u8c03\u7528\u4e86epsilon_greedy.py\u4e2d\u7684\u76f8\u5e94\u51fd\u6570", "\n", "            ", "batch_action", "=", "[", "\n", "self", ".", "explorer", ".", "select_action", "(", "\n", "self", ".", "t", ",", "\n", "lambda", ":", "batch_argmax", "[", "i", "]", ",", "\n", "action_value", "=", "batch_av", "[", "i", ":", "i", "+", "1", "]", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "batch_obs", ")", ")", "\n", "]", "\n", "# \u5c06\u5355\u72ec\u5143\u7d20\u7684batch_action\u77e9\u9635\u6269\u5145\u4e3a\u4e0e\u6b63\u5e38\u77e9\u9635\u76f8\u540c\u7ef4\u5ea6\u7684\u6570\u7ec4", "\n", "if", "batch_action", "[", "0", "]", ".", "size", "==", "1", ":", "\n", "                ", "batch_action", "=", "np", ".", "array", "(", "np", ".", "zeros", "(", "[", "1", ",", "40", "]", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "", "self", ".", "batch_last_obs", "=", "list", "(", "batch_obs", ")", "\n", "self", ".", "batch_last_action", "=", "list", "(", "batch_action", ")", "\n", "# print(\"batch_action:\", batch_action)", "\n", "", "else", ":", "\n", "            ", "batch_action", "=", "batch_argmax", "\n", "", "return", "batch_action", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN._batch_observe_train": [[557, 608], ["range", "len", "dqn.DQN.replay_updater.update_if_necessary", "dqn._batch_reset_recurrent_states_when_episodes_end", "dqn.DQN.sync_target_network", "dqn.DQN.replay_buffer.append", "pfrl.utils.recurrent.recurrent_state_as_numpy", "pfrl.utils.recurrent.recurrent_state_as_numpy", "dqn.DQN.replay_buffer.stop_current_episode", "pfrl.utils.recurrent.get_recurrent_state_at", "pfrl.utils.recurrent.get_recurrent_state_at"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.ReplayUpdater.update_if_necessary", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn._batch_reset_recurrent_states_when_episodes_end", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.sync_target_network", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.recurrent_state_as_numpy", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.recurrent_state_as_numpy", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.stop_current_episode", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.get_recurrent_state_at", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.get_recurrent_state_at"], ["", "def", "_batch_observe_train", "(", "\n", "self", ",", "\n", "batch_obs", ":", "Sequence", "[", "Any", "]", ",", "\n", "batch_reward", ":", "Sequence", "[", "float", "]", ",", "\n", "batch_done", ":", "Sequence", "[", "bool", "]", ",", "\n", "batch_reset", ":", "Sequence", "[", "bool", "]", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "batch_obs", ")", ")", ":", "\n", "            ", "self", ".", "t", "+=", "1", "\n", "self", ".", "_cumulative_steps", "+=", "1", "\n", "# Update the target network", "\n", "if", "self", ".", "t", "%", "self", ".", "target_update_interval", "==", "0", ":", "\n", "                ", "self", ".", "sync_target_network", "(", ")", "\n", "", "if", "self", ".", "batch_last_obs", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "assert", "self", ".", "batch_last_action", "[", "i", "]", "is", "not", "None", "\n", "# Add a transition to the replay buffer", "\n", "transition", "=", "{", "\n", "\"state\"", ":", "self", ".", "batch_last_obs", "[", "i", "]", ",", "\n", "\"action\"", ":", "self", ".", "batch_last_action", "[", "i", "]", ",", "\n", "\"reward\"", ":", "batch_reward", "[", "i", "]", ",", "\n", "\"next_state\"", ":", "batch_obs", "[", "i", "]", ",", "\n", "\"next_action\"", ":", "None", ",", "\n", "\"is_state_terminal\"", ":", "batch_done", "[", "i", "]", ",", "\n", "}", "\n", "if", "self", ".", "recurrent", ":", "\n", "                    ", "transition", "[", "\"recurrent_state\"", "]", "=", "recurrent_state_as_numpy", "(", "\n", "get_recurrent_state_at", "(", "\n", "self", ".", "train_prev_recurrent_states", ",", "i", ",", "detach", "=", "True", "\n", ")", "\n", ")", "\n", "transition", "[", "\"next_recurrent_state\"", "]", "=", "recurrent_state_as_numpy", "(", "\n", "get_recurrent_state_at", "(", "\n", "self", ".", "train_recurrent_states", ",", "i", ",", "detach", "=", "True", "\n", ")", "\n", ")", "\n", "", "self", ".", "replay_buffer", ".", "append", "(", "env_id", "=", "i", ",", "**", "transition", ")", "\n", "if", "batch_reset", "[", "i", "]", "or", "batch_done", "[", "i", "]", ":", "\n", "                    ", "self", ".", "batch_last_obs", "[", "i", "]", "=", "None", "\n", "self", ".", "batch_last_action", "[", "i", "]", "=", "None", "\n", "self", ".", "replay_buffer", ".", "stop_current_episode", "(", "env_id", "=", "i", ")", "\n", "", "", "self", ".", "replay_updater", ".", "update_if_necessary", "(", "self", ".", "t", ")", "\n", "\n", "", "if", "self", ".", "recurrent", ":", "\n", "# Reset recurrent states when episodes end", "\n", "            ", "self", ".", "train_prev_recurrent_states", "=", "None", "\n", "self", ".", "train_recurrent_states", "=", "(", "\n", "_batch_reset_recurrent_states_when_episodes_end", "(", "# NOQA", "\n", "batch_done", "=", "batch_done", ",", "\n", "batch_reset", "=", "batch_reset", ",", "\n", "recurrent_states", "=", "self", ".", "train_recurrent_states", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN._batch_observe_eval": [[611, 625], ["dqn._batch_reset_recurrent_states_when_episodes_end"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn._batch_reset_recurrent_states_when_episodes_end"], ["", "", "def", "_batch_observe_eval", "(", "\n", "self", ",", "\n", "batch_obs", ":", "Sequence", "[", "Any", "]", ",", "\n", "batch_reward", ":", "Sequence", "[", "float", "]", ",", "\n", "batch_done", ":", "Sequence", "[", "bool", "]", ",", "\n", "batch_reset", ":", "Sequence", "[", "bool", "]", ",", "\n", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "recurrent", ":", "\n", "# Reset recurrent states when episodes end", "\n", "            ", "self", ".", "test_recurrent_states", "=", "(", "\n", "_batch_reset_recurrent_states_when_episodes_end", "(", "# NOQA", "\n", "batch_done", "=", "batch_done", ",", "\n", "batch_reset", "=", "batch_reset", ",", "\n", "recurrent_states", "=", "self", ".", "test_recurrent_states", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN.batch_observe": [[628, 642], ["dqn.DQN._batch_observe_train", "dqn.DQN._batch_observe_eval"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_observe_train", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._batch_observe_eval"], ["", "", "def", "batch_observe", "(", "\n", "self", ",", "\n", "batch_obs", ":", "Sequence", "[", "Any", "]", ",", "\n", "batch_reward", ":", "Sequence", "[", "float", "]", ",", "\n", "batch_done", ":", "Sequence", "[", "bool", "]", ",", "\n", "batch_reset", ":", "Sequence", "[", "bool", "]", ",", "\n", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_batch_observe_train", "(", "\n", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_batch_observe_eval", "(", "\n", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN._can_start_replay": [[644, 652], ["len", "isinstance"], "methods", ["None"], ["", "", "def", "_can_start_replay", "(", "self", ")", "->", "bool", ":", "\n", "        ", "if", "len", "(", "self", ".", "replay_buffer", ")", "<", "self", ".", "replay_start_size", ":", "\n", "            ", "return", "False", "\n", "", "if", "self", ".", "recurrent", ":", "\n", "            ", "assert", "isinstance", "(", "self", ".", "replay_buffer", ",", "AbstractEpisodicReplayBuffer", ")", "\n", "if", "self", ".", "replay_buffer", ".", "n_episodes", "<", "self", ".", "minibatch_size", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN._poll_pipe": [[653, 696], ["pipe.poll", "pipe.recv", "pipe.close", "dqn.DQN.logger.exception", "exception_event.set", "exception_event.is_set", "pipe.send", "dqn.DQN.get_statistics", "dqn.DQN.load", "pipe.send", "dqn.DQN.save", "pipe.send", "dqn.DQN.replay_buffer.append", "pipe.send", "RuntimeError", "dqn.DQN.replay_buffer.stop_current_episode", "dqn.DQN.get_statistics"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.get_statistics", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.stop_current_episode", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.get_statistics"], ["", "def", "_poll_pipe", "(", "\n", "self", ",", "\n", "actor_idx", ":", "int", ",", "\n", "pipe", ":", "mp", ".", "connection", ".", "Connection", ",", "\n", "replay_buffer_lock", ":", "mp", ".", "synchronize", ".", "Lock", ",", "\n", "exception_event", ":", "mp", ".", "synchronize", ".", "Event", ",", "\n", ")", "->", "None", ":", "\n", "        ", "if", "pipe", ".", "closed", ":", "\n", "            ", "return", "\n", "", "try", ":", "\n", "            ", "while", "pipe", ".", "poll", "(", ")", "and", "not", "exception_event", ".", "is_set", "(", ")", ":", "\n", "                ", "cmd", ",", "data", "=", "pipe", ".", "recv", "(", ")", "\n", "if", "cmd", "==", "\"get_statistics\"", ":", "\n", "                    ", "assert", "data", "is", "None", "\n", "with", "replay_buffer_lock", ":", "\n", "                        ", "stats", "=", "self", ".", "get_statistics", "(", ")", "\n", "", "pipe", ".", "send", "(", "stats", ")", "\n", "", "elif", "cmd", "==", "\"load\"", ":", "\n", "                    ", "self", ".", "load", "(", "data", ")", "\n", "pipe", ".", "send", "(", "None", ")", "\n", "", "elif", "cmd", "==", "\"save\"", ":", "\n", "                    ", "self", ".", "save", "(", "data", ")", "\n", "pipe", ".", "send", "(", "None", ")", "\n", "", "elif", "cmd", "==", "\"transition\"", ":", "\n", "                    ", "with", "replay_buffer_lock", ":", "\n", "                        ", "if", "\"env_id\"", "not", "in", "data", ":", "\n", "                            ", "data", "[", "\"env_id\"", "]", "=", "actor_idx", "\n", "", "self", ".", "replay_buffer", ".", "append", "(", "**", "data", ")", "\n", "self", ".", "_cumulative_steps", "+=", "1", "\n", "", "", "elif", "cmd", "==", "\"stop_episode\"", ":", "\n", "                    ", "idx", "=", "actor_idx", "if", "data", "is", "None", "else", "data", "\n", "with", "replay_buffer_lock", ":", "\n", "                        ", "self", ".", "replay_buffer", ".", "stop_current_episode", "(", "env_id", "=", "idx", ")", "\n", "stats", "=", "self", ".", "get_statistics", "(", ")", "\n", "", "pipe", ".", "send", "(", "stats", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"Unknown command from actor: {}\"", ".", "format", "(", "cmd", ")", ")", "\n", "", "", "", "except", "EOFError", ":", "\n", "            ", "pipe", ".", "close", "(", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "self", ".", "logger", ".", "exception", "(", "\"Poller loop failed. Exiting\"", ")", "\n", "exception_event", ".", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN._learner_loop": [[697, 762], ["stop_event.is_set", "dqn.DQN.logger.exception", "exception_event.set", "dqn.DQN._can_start_replay", "isinstance", "dqn.DQN.update_from_episodes", "dqn.DQN.update", "hook", "hook", "dqn.DQN.sync_target_network", "stop_event.set", "dqn.DQN.replay_buffer.sample_episodes", "dqn.DQN.replay_buffer.sample", "dqn.DQN.update_counter.get_lock", "shared_model.load_state_dict", "dqn.DQN.model.state_dict"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN._can_start_replay", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg.DDPG.update_from_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.sync_target_network", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized_episodic.PrioritizedEpisodicReplayBuffer.sample_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "", "def", "_learner_loop", "(", "\n", "self", ",", "\n", "shared_model", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "pipes", ":", "Sequence", "[", "mp", ".", "connection", ".", "Connection", "]", ",", "\n", "replay_buffer_lock", ":", "mp", ".", "synchronize", ".", "Lock", ",", "\n", "stop_event", ":", "mp", ".", "synchronize", ".", "Event", ",", "\n", "exception_event", ":", "mp", ".", "synchronize", ".", "Event", ",", "\n", "n_updates", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "step_hooks", ":", "List", "[", "Callable", "[", "[", "None", ",", "agent", ".", "Agent", ",", "int", "]", ",", "Any", "]", "]", "=", "[", "]", ",", "\n", "optimizer_step_hooks", ":", "List", "[", "Callable", "[", "[", "None", ",", "agent", ".", "Agent", ",", "int", "]", ",", "Any", "]", "]", "=", "[", "]", ",", "\n", ")", "->", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "update_counter", "=", "0", "\n", "# To stop this loop, call stop_event.set()", "\n", "while", "not", "stop_event", ".", "is_set", "(", ")", ":", "\n", "# Update model if possible", "\n", "                ", "if", "not", "self", ".", "_can_start_replay", "(", ")", ":", "\n", "                    ", "continue", "\n", "", "if", "n_updates", "is", "not", "None", ":", "\n", "                    ", "assert", "self", ".", "optim_t", "<=", "n_updates", "\n", "if", "self", ".", "optim_t", "==", "n_updates", ":", "\n", "                        ", "stop_event", ".", "set", "(", ")", "\n", "break", "\n", "\n", "", "", "if", "self", ".", "recurrent", ":", "\n", "                    ", "assert", "isinstance", "(", "self", ".", "replay_buffer", ",", "AbstractEpisodicReplayBuffer", ")", "\n", "with", "replay_buffer_lock", ":", "\n", "                        ", "episodes", "=", "self", ".", "replay_buffer", ".", "sample_episodes", "(", "\n", "self", ".", "minibatch_size", ",", "self", ".", "episodic_update_len", "\n", ")", "\n", "", "self", ".", "update_from_episodes", "(", "episodes", ")", "\n", "", "else", ":", "\n", "                    ", "with", "replay_buffer_lock", ":", "\n", "                        ", "transitions", "=", "self", ".", "replay_buffer", ".", "sample", "(", "self", ".", "minibatch_size", ")", "\n", "\n", "", "self", ".", "update", "(", "transitions", ")", "\n", "\n", "# Update the shared model. This can be expensive if GPU is used", "\n", "# since this is a DtoH copy, so it is updated only at regular", "\n", "# intervals.", "\n", "", "update_counter", "+=", "1", "\n", "if", "update_counter", "%", "self", ".", "actor_update_interval", "==", "0", ":", "\n", "                    ", "with", "self", ".", "update_counter", ".", "get_lock", "(", ")", ":", "\n", "                        ", "self", ".", "update_counter", ".", "value", "+=", "1", "\n", "shared_model", ".", "load_state_dict", "(", "self", ".", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "# To keep the ratio of target updates to model updates,", "\n", "# here we calculate back the effective current timestep", "\n", "# from update_interval and number of updates so far.", "\n", "", "", "effective_timestep", "=", "self", ".", "optim_t", "*", "self", ".", "update_interval", "\n", "# We can safely assign self.t since in the learner", "\n", "# it isn't updated by any other method", "\n", "self", ".", "t", "=", "effective_timestep", "\n", "\n", "for", "hook", "in", "optimizer_step_hooks", ":", "\n", "                    ", "hook", "(", "None", ",", "self", ",", "self", ".", "optim_t", ")", "\n", "\n", "", "for", "hook", "in", "step_hooks", ":", "\n", "                    ", "hook", "(", "None", ",", "self", ",", "effective_timestep", ")", "\n", "\n", "", "if", "effective_timestep", "%", "self", ".", "target_update_interval", "==", "0", ":", "\n", "                    ", "self", ".", "sync_target_network", "(", ")", "\n", "", "", "", "except", "Exception", ":", "\n", "            ", "self", ".", "logger", ".", "exception", "(", "\"Learner loop failed. Exiting\"", ")", "\n", "exception_event", ".", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN._poller_loop": [[763, 777], ["time.sleep", "enumerate", "stop_event.is_set", "exception_event.is_set", "dqn.DQN._poll_pipe"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN._poll_pipe"], ["", "", "def", "_poller_loop", "(", "\n", "self", ",", "\n", "shared_model", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "pipes", ":", "Sequence", "[", "mp", ".", "connection", ".", "Connection", "]", ",", "\n", "replay_buffer_lock", ":", "mp", ".", "synchronize", ".", "Lock", ",", "\n", "stop_event", ":", "mp", ".", "synchronize", ".", "Event", ",", "\n", "exception_event", ":", "mp", ".", "synchronize", ".", "Event", ",", "\n", ")", "->", "None", ":", "\n", "# To stop this loop, call stop_event.set()", "\n", "        ", "while", "not", "stop_event", ".", "is_set", "(", ")", "and", "not", "exception_event", ".", "is_set", "(", ")", ":", "\n", "            ", "time", ".", "sleep", "(", "1e-6", ")", "\n", "# Poll actors for messages", "\n", "for", "i", ",", "pipe", "in", "enumerate", "(", "pipes", ")", ":", "\n", "                ", "self", ".", "_poll_pipe", "(", "i", ",", "pipe", ",", "replay_buffer_lock", ",", "exception_event", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN.setup_actor_learner_training": [[778, 838], ["dqn.DQN._setup_actor_learner_training", "multiprocessing.Event", "multiprocessing.Event", "multiprocessing.Lock", "multiprocessing.Lock", "multiprocessing.Event", "multiprocessing.Event", "pfrl.utils.StoppableThread", "multiprocessing.Event", "multiprocessing.Event", "pfrl.utils.StoppableThread", "multiprocessing.Value", "multiprocessing.Value", "pfrl.agents.StateQFunctionActor", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN._setup_actor_learner_training"], ["", "", "", "def", "setup_actor_learner_training", "(", "\n", "self", ",", "\n", "n_actors", ":", "int", ",", "\n", "update_counter", ":", "Optional", "[", "Any", "]", "=", "None", ",", "\n", "n_updates", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "actor_update_interval", ":", "int", "=", "8", ",", "\n", "step_hooks", ":", "List", "[", "Callable", "[", "[", "None", ",", "agent", ".", "Agent", ",", "int", "]", ",", "Any", "]", "]", "=", "[", "]", ",", "\n", "optimizer_step_hooks", ":", "List", "[", "Callable", "[", "[", "None", ",", "agent", ".", "Agent", ",", "int", "]", ",", "Any", "]", "]", "=", "[", "]", ",", "\n", ")", ":", "\n", "        ", "if", "update_counter", "is", "None", ":", "\n", "            ", "update_counter", "=", "mp", ".", "Value", "(", "ctypes", ".", "c_ulong", ")", "\n", "\n", "", "(", "shared_model", ",", "learner_pipes", ",", "actor_pipes", ")", "=", "self", ".", "_setup_actor_learner_training", "(", "\n", "n_actors", ",", "actor_update_interval", ",", "update_counter", "\n", ")", "\n", "exception_event", "=", "mp", ".", "Event", "(", ")", "\n", "\n", "def", "make_actor", "(", "i", ")", ":", "\n", "            ", "return", "pfrl", ".", "agents", ".", "StateQFunctionActor", "(", "\n", "pipe", "=", "actor_pipes", "[", "i", "]", ",", "\n", "model", "=", "shared_model", ",", "\n", "explorer", "=", "self", ".", "explorer", ",", "\n", "phi", "=", "self", ".", "phi", ",", "\n", "batch_states", "=", "self", ".", "batch_states", ",", "\n", "logger", "=", "self", ".", "logger", ",", "\n", "recurrent", "=", "self", ".", "recurrent", ",", "\n", ")", "\n", "\n", "", "replay_buffer_lock", "=", "mp", ".", "Lock", "(", ")", "\n", "\n", "poller_stop_event", "=", "mp", ".", "Event", "(", ")", "\n", "poller", "=", "pfrl", ".", "utils", ".", "StoppableThread", "(", "\n", "target", "=", "self", ".", "_poller_loop", ",", "\n", "kwargs", "=", "dict", "(", "\n", "shared_model", "=", "shared_model", ",", "\n", "pipes", "=", "learner_pipes", ",", "\n", "replay_buffer_lock", "=", "replay_buffer_lock", ",", "\n", "stop_event", "=", "poller_stop_event", ",", "\n", "exception_event", "=", "exception_event", ",", "\n", ")", ",", "\n", "stop_event", "=", "poller_stop_event", ",", "\n", ")", "\n", "\n", "learner_stop_event", "=", "mp", ".", "Event", "(", ")", "\n", "learner", "=", "pfrl", ".", "utils", ".", "StoppableThread", "(", "\n", "target", "=", "self", ".", "_learner_loop", ",", "\n", "kwargs", "=", "dict", "(", "\n", "shared_model", "=", "shared_model", ",", "\n", "pipes", "=", "learner_pipes", ",", "\n", "replay_buffer_lock", "=", "replay_buffer_lock", ",", "\n", "stop_event", "=", "learner_stop_event", ",", "\n", "n_updates", "=", "n_updates", ",", "\n", "exception_event", "=", "exception_event", ",", "\n", "step_hooks", "=", "step_hooks", ",", "\n", "optimizer_step_hooks", "=", "optimizer_step_hooks", ",", "\n", ")", ",", "\n", "stop_event", "=", "learner_stop_event", ",", "\n", ")", "\n", "\n", "return", "make_actor", ",", "learner", ",", "poller", ",", "exception_event", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN.stop_episode": [[839, 842], ["None"], "methods", ["None"], ["", "def", "stop_episode", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "recurrent", ":", "\n", "            ", "self", ".", "test_recurrent_states", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.DQN.get_statistics": [[843, 850], ["dqn._mean_or_nan", "dqn._mean_or_nan", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan"], ["", "", "def", "get_statistics", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "(", "\"average_q\"", ",", "_mean_or_nan", "(", "self", ".", "q_record", ")", ")", ",", "\n", "(", "\"average_loss\"", ",", "_mean_or_nan", "(", "self", ".", "loss_record", ")", ")", ",", "\n", "(", "\"cumulative_steps\"", ",", "self", ".", "cumulative_steps", ")", ",", "\n", "(", "\"n_updates\"", ",", "self", ".", "optim_t", ")", ",", "\n", "(", "\"rlen\"", ",", "len", "(", "self", ".", "replay_buffer", ")", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn._mean_or_nan": [[37, 40], ["numpy.mean"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["def", "_mean_or_nan", "(", "xs", ":", "Sequence", "[", "float", "]", ")", "->", "float", ":", "\n", "    ", "\"\"\"Return its mean a non-empty sequence, numpy.nan for a empty one.\"\"\"", "\n", "return", "np", ".", "mean", "(", "xs", ")", "if", "xs", "else", "np", ".", "nan", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.compute_value_loss": [[42, 66], ["y.reshape.reshape", "t.reshape.reshape", "torch.smooth_l1_loss", "torch.mse_loss"], "function", ["None"], ["", "def", "compute_value_loss", "(", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "t", ":", "torch", ".", "Tensor", ",", "\n", "clip_delta", ":", "bool", "=", "True", ",", "\n", "batch_accumulator", ":", "str", "=", "\"mean\"", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Compute a loss for value prediction problem.\n\n    Args:\n        y (torch.Tensor): Predicted values.\n        t (torch.Tensor): Target values.\n        clip_delta (bool): Use the Huber loss function with delta=1 if set True.\n        batch_accumulator (str): 'mean' or 'sum'. 'mean' will use the mean of\n            the loss values in a batch. 'sum' will use the sum.\n    Returns:\n        (torch.Tensor) scalar loss\n    \"\"\"", "\n", "assert", "batch_accumulator", "in", "(", "\"mean\"", ",", "\"sum\"", ")", "\n", "y", "=", "y", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "t", "=", "t", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "if", "clip_delta", ":", "\n", "        ", "return", "F", ".", "smooth_l1_loss", "(", "y", ",", "t", ",", "reduction", "=", "batch_accumulator", ")", "\n", "", "else", ":", "\n", "        ", "return", "F", ".", "mse_loss", "(", "y", ",", "t", ",", "reduction", "=", "batch_accumulator", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.compute_weighted_value_loss": [[68, 103], ["y.reshape.reshape", "t.reshape.reshape", "F.smooth_l1_loss.reshape", "weights.to.to", "torch.sum", "torch.sum", "torch.smooth_l1_loss", "torch.mse_loss"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "", "def", "compute_weighted_value_loss", "(", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "t", ":", "torch", ".", "Tensor", ",", "\n", "weights", ":", "torch", ".", "Tensor", ",", "\n", "clip_delta", ":", "bool", "=", "True", ",", "\n", "batch_accumulator", ":", "str", "=", "\"mean\"", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Compute a loss for value prediction problem.\n\n    Args:\n        y (torch.Tensor): Predicted values.\n        t (torch.Tensor): Target values.\n        weights (torch.Tensor): Weights for y, t.\n        clip_delta (bool): Use the Huber loss function with delta=1 if set True.\n        batch_accumulator (str): 'mean' will divide loss by batchsize\n    Returns:\n        (torch.Tensor) scalar loss\n    \"\"\"", "\n", "assert", "batch_accumulator", "in", "(", "\"mean\"", ",", "\"sum\"", ")", "\n", "y", "=", "y", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "t", "=", "t", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "if", "clip_delta", ":", "\n", "        ", "losses", "=", "F", ".", "smooth_l1_loss", "(", "y", ",", "t", ",", "reduction", "=", "\"none\"", ")", "\n", "", "else", ":", "\n", "        ", "losses", "=", "F", ".", "mse_loss", "(", "y", ",", "t", ",", "reduction", "=", "\"none\"", ")", "/", "2", "\n", "", "losses", "=", "losses", ".", "reshape", "(", "\n", "-", "1", ",", "\n", ")", "\n", "weights", "=", "weights", ".", "to", "(", "losses", ".", "device", ")", "\n", "loss_sum", "=", "torch", ".", "sum", "(", "losses", "*", "weights", ")", "\n", "if", "batch_accumulator", "==", "\"mean\"", ":", "\n", "        ", "loss", "=", "loss_sum", "/", "y", ".", "shape", "[", "0", "]", "\n", "", "elif", "batch_accumulator", "==", "\"sum\"", ":", "\n", "        ", "loss", "=", "loss_sum", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn._batch_reset_recurrent_states_when_episodes_end": [[105, 127], ["pfrl.utils.recurrent.mask_recurrent_state_at", "enumerate", "zip"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.mask_recurrent_state_at"], ["", "def", "_batch_reset_recurrent_states_when_episodes_end", "(", "\n", "batch_done", ":", "Sequence", "[", "bool", "]", ",", "batch_reset", ":", "Sequence", "[", "bool", "]", ",", "recurrent_states", ":", "Any", "\n", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Reset recurrent states when episodes end.\n\n    Args:\n        batch_done (array-like of bool): True iff episodes are terminal.\n        batch_reset (array-like of bool): True iff episodes will be reset.\n        recurrent_states (object): Recurrent state.\n\n    Returns:\n        object: New recurrent states.\n    \"\"\"", "\n", "indices_that_ended", "=", "[", "\n", "i", "\n", "for", "i", ",", "(", "done", ",", "reset", ")", "in", "enumerate", "(", "zip", "(", "batch_done", ",", "batch_reset", ")", ")", "\n", "if", "done", "or", "reset", "\n", "]", "\n", "if", "indices_that_ended", ":", "\n", "        ", "return", "mask_recurrent_state_at", "(", "recurrent_states", ",", "indices_that_ended", ")", "\n", "", "else", ":", "\n", "        ", "return", "recurrent_states", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dqn.make_target_model_as_copy": [[129, 142], ["copy.deepcopy", "copy.deepcopy.apply", "copy.deepcopy.eval", "isinstance", "mod.flatten_parameters"], "function", ["None"], ["", "", "def", "make_target_model_as_copy", "(", "model", ":", "torch", ".", "nn", ".", "Module", ")", "->", "torch", ".", "nn", ".", "Module", ":", "\n", "    ", "target_model", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "\n", "def", "flatten_parameters", "(", "mod", ")", ":", "\n", "        ", "if", "isinstance", "(", "mod", ",", "torch", ".", "nn", ".", "RNNBase", ")", ":", "\n", "            ", "mod", ".", "flatten_parameters", "(", ")", "\n", "\n", "# RNNBase.flatten_parameters must be called again after deep-copy.", "\n", "# See: https://discuss.pytorch.org/t/why-do-we-need-flatten-parameters-when-using-rnn-with-dataparallel/46506  # NOQA", "\n", "", "", "target_model", ".", "apply", "(", "flatten_parameters", ")", "\n", "# set target n/w to evaluate only.", "\n", "target_model", ".", "eval", "(", ")", "\n", "return", "target_model", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.categorical_double_dqn.CategoricalDoubleDQN._compute_target_values": [[11, 64], ["torch.stack", "torch.mean", "torch.mean.numel", "torch.stack", "torch.mean", "pfrl.agents.categorical_dqn._apply_categorical_projection", "pfrl.utils.evaluating", "pfrl.utils.evaluating", "q_eval.evaluate_actions_as_distribution", "torch.mean.append", "pfrl.utils.recurrent.pack_and_forward", "pfrl.utils.recurrent.pack_and_forward", "next_qout[].greedy_actions.detach", "categorical_double_dqn.CategoricalDoubleDQN.target_model", "categorical_double_dqn.CategoricalDoubleDQN.model"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.categorical_dqn._apply_categorical_projection", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DistributionalDiscreteActionValue.evaluate_actions_as_distribution", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward"], ["def", "_compute_target_values", "(", "self", ",", "exp_batch", ")", ":", "\n", "        ", "\"\"\"Compute a batch of target return distributions.\"\"\"", "\n", "\n", "batch_next_state", "=", "exp_batch", "[", "\"next_state\"", "]", "\n", "batch_rewards", "=", "exp_batch", "[", "\"reward\"", "]", "\n", "batch_terminal", "=", "exp_batch", "[", "\"is_state_terminal\"", "]", "\n", "\n", "with", "pfrl", ".", "utils", ".", "evaluating", "(", "self", ".", "target_model", ")", ",", "pfrl", ".", "utils", ".", "evaluating", "(", "\n", "self", ".", "model", "\n", ")", ":", "\n", "            ", "if", "self", ".", "recurrent", ":", "\n", "                ", "target_next_qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "target_model", ",", "\n", "batch_next_state", ",", "\n", "exp_batch", "[", "\"next_recurrent_state\"", "]", ",", "\n", ")", "\n", "next_qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "model", ",", "\n", "batch_next_state", ",", "\n", "exp_batch", "[", "\"next_recurrent_state\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "target_next_qout", "=", "[", "self", ".", "target_model", "(", "elem", "[", "0", "]", ",", "elem", "[", "1", "]", ",", "elem", "[", "2", "]", ")", "for", "elem", "in", "batch_next_state", "]", "\n", "next_qout", "=", "[", "self", ".", "model", "(", "elem", "[", "0", "]", ",", "elem", "[", "1", "]", ",", "elem", "[", "2", "]", ")", "for", "elem", "in", "batch_next_state", "]", "\n", "\n", "", "", "batch_size", "=", "batch_rewards", ".", "shape", "[", "0", "]", "\n", "# \u591a\u667a\u80fd\u4f53\u51b3\u7b56\uff0cz_values\u662f\u5426\u8981\u91c7\u7528\u5e73\u5747\u503c\u8fdb\u884c\u540e\u7eed\u8ba1\u7b97\u5b58\u5728\u7591\u4e49", "\n", "z_values", "=", "[", "elem", ".", "z_values", "for", "elem", "in", "target_next_qout", "]", "\n", "z_values", "=", "torch", ".", "stack", "(", "z_values", ")", "\n", "z_values", "=", "torch", ".", "mean", "(", "z_values", ",", "dim", "=", "0", ")", "\n", "n_atoms", "=", "z_values", ".", "numel", "(", ")", "\n", "\n", "# next_q_max: (batch_size, n_atoms)", "\n", "# \u8ba1\u7b97next_q_max\u65f6\uff0c\u8981\u5206\u522b\u9488\u5bf9\u6bcf\u4e2abatch\u7684q\u503c\u8fdb\u884c\u8bc4\u4f30", "\n", "next_q_max", "=", "[", "]", "# \u521d\u59cb\u5316next_q_max\u77e9\u9635", "\n", "count", "=", "0", "# \u5b9a\u4e49\u9488\u5bf9next_qout\u4e2d\uff0cgreedy_actions\u7684\u8ba1\u6570\u5668", "\n", "for", "q_eval", "in", "target_next_qout", ":", "\n", "            ", "q_e", "=", "q_eval", ".", "evaluate_actions_as_distribution", "(", "next_qout", "[", "count", "]", ".", "greedy_actions", ".", "detach", "(", ")", ")", "\n", "count", "+=", "1", "\n", "next_q_max", ".", "append", "(", "q_e", ")", "\n", "", "next_q_max", "=", "torch", ".", "stack", "(", "next_q_max", ")", "\n", "next_q_max", "=", "torch", ".", "mean", "(", "next_q_max", ",", "dim", "=", "1", ")", "\n", "# next_q_max = target_next_qout.evaluate_actions_as_distribution(next_qout.greedy_actions.detach())", "\n", "assert", "next_q_max", ".", "shape", "==", "(", "batch_size", ",", "n_atoms", ")", ",", "next_q_max", ".", "shape", "\n", "\n", "# Tz: (batch_size, n_atoms)", "\n", "Tz", "=", "(", "\n", "batch_rewards", "[", "...", ",", "None", "]", "\n", "+", "(", "1.0", "-", "batch_terminal", "[", "...", ",", "None", "]", ")", "\n", "*", "exp_batch", "[", "\"discount\"", "]", "[", "...", ",", "None", "]", "\n", "*", "z_values", "[", "None", "]", "\n", ")", "\n", "return", "_apply_categorical_projection", "(", "Tz", ",", "next_q_max", ",", "z_values", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.double_pal.DoublePAL._compute_y_and_t": [[8, 102], ["len", "torch.stack", "torch.mean", "pfrl.utils.recurrent.pack_and_forward", "q_eval.evaluate_actions", "torch.mean.append", "torch.no_grad", "torch.stack", "torch.mean", "zip", "torch.stack", "torch.mean", "torch.stack", "torch.mean", "double_pal.DoublePAL.model", "pfrl.utils.recurrent.pack_and_forward", "pfrl.utils.recurrent.pack_and_forward", "pfrl.utils.recurrent.pack_and_forward", "q_eval.evaluate_actions", "torch.mean.append", "qt_cur.compute_advantage", "qt_next.compute_advantage", "torch.mean.append", "torch.mean.append", "double_pal.DoublePAL.model", "double_pal.DoublePAL.target_model", "double_pal.DoublePAL.target_model", "torch.max"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.compute_advantage", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.compute_advantage", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max"], ["    ", "def", "_compute_y_and_t", "(", "self", ",", "exp_batch", ")", ":", "\n", "\n", "        ", "batch_state", "=", "exp_batch", "[", "\"state\"", "]", "\n", "batch_size", "=", "len", "(", "exp_batch", "[", "\"reward\"", "]", ")", "\n", "\n", "if", "self", ".", "recurrent", ":", "\n", "            ", "qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "model", ",", "\n", "batch_state", ",", "\n", "exp_batch", "[", "\"recurrent_state\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "qout", "=", "[", "self", ".", "model", "(", "elem", "[", "0", "]", ",", "elem", "[", "1", "]", ",", "elem", "[", "2", "]", ")", "for", "elem", "in", "batch_state", "]", "\n", "\n", "", "batch_actions", "=", "exp_batch", "[", "\"action\"", "]", "\n", "# \u6309\u7167DQN\u7a0b\u5e8f\u7684\u6539\u52a8\u5bf9\u4ee5\u4e0bQ\u503c\u7684\u8ba1\u7b97\u8fdb\u884c\u76f8\u540c\u6539\u52a8", "\n", "batch_q", "=", "[", "]", "# \u521d\u59cb\u5316batch_q\u77e9\u9635", "\n", "count", "=", "0", "# \u5b9a\u4e49\u9488\u5bf9batch_actions\u7684\u8ba1\u6570\u5668", "\n", "for", "q_eval", "in", "qout", ":", "\n", "            ", "q_e", "=", "q_eval", ".", "evaluate_actions", "(", "batch_actions", "[", "count", "]", ")", "# \u8ba1\u7b97batch\u7f16\u53f7\u4e3acount\u7684q\u503c", "\n", "count", "+=", "1", "\n", "batch_q", ".", "append", "(", "q_e", ")", "\n", "", "batch_q", "=", "torch", ".", "stack", "(", "batch_q", ")", "# \u5c06\u4e0a\u8ff0\u5faa\u73af\u751f\u6210\u7684list\u8f6c\u6362\u4e3atensor\u6570\u636e\u7c7b\u578b", "\n", "batch_q", "=", "torch", ".", "mean", "(", "batch_q", ",", "dim", "=", "1", ")", "\n", "\n", "# Compute target values", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batch_next_state", "=", "exp_batch", "[", "\"next_state\"", "]", "\n", "if", "self", ".", "recurrent", ":", "\n", "                ", "next_qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "model", ",", "\n", "batch_next_state", ",", "\n", "exp_batch", "[", "\"next_recurrent_state\"", "]", ",", "\n", ")", "\n", "target_qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "target_model", ",", "\n", "batch_state", ",", "\n", "exp_batch", "[", "\"recurrent_state\"", "]", ",", "\n", ")", "\n", "target_next_qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "target_model", ",", "\n", "batch_next_state", ",", "\n", "exp_batch", "[", "\"next_recurrent_state\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "next_qout", "=", "[", "self", ".", "model", "(", "elem", "[", "0", "]", ",", "elem", "[", "1", "]", ",", "elem", "[", "2", "]", ")", "for", "elem", "in", "batch_next_state", "]", "\n", "target_qout", "=", "[", "self", ".", "target_model", "(", "elem", "[", "0", "]", ",", "elem", "[", "1", "]", ",", "elem", "[", "2", "]", ")", "for", "elem", "in", "batch_state", "]", "\n", "target_next_qout", "=", "[", "self", ".", "target_model", "(", "elem", "[", "0", "]", ",", "elem", "[", "1", "]", ",", "elem", "[", "2", "]", ")", "for", "elem", "in", "batch_next_state", "]", "\n", "\n", "# \u8ba1\u7b97next_q_max\u65f6\uff0c\u8981\u5206\u522b\u9488\u5bf9\u6bcf\u4e2abatch\u7684q\u503c\u8fdb\u884c\u8bc4\u4f30", "\n", "", "next_q_max", "=", "[", "]", "# \u521d\u59cb\u5316next_q_max\u77e9\u9635", "\n", "count", "=", "0", "# \u5b9a\u4e49\u9488\u5bf9next_qout\u4e2d\uff0cgreedy_actions\u7684\u8ba1\u6570\u5668", "\n", "for", "q_eval", "in", "target_next_qout", ":", "\n", "                ", "q_e", "=", "q_eval", ".", "evaluate_actions", "(", "next_qout", "[", "count", "]", ".", "greedy_actions", ")", "\n", "count", "+=", "1", "\n", "next_q_max", ".", "append", "(", "q_e", ")", "\n", "", "next_q_max", "=", "torch", ".", "stack", "(", "next_q_max", ")", "\n", "next_q_max", "=", "torch", ".", "mean", "(", "next_q_max", ",", "dim", "=", "1", ")", "\n", "\n", "batch_rewards", "=", "exp_batch", "[", "\"reward\"", "]", "\n", "batch_terminal", "=", "exp_batch", "[", "\"is_state_terminal\"", "]", "\n", "\n", "# T Q: Bellman operator", "\n", "t_q", "=", "(", "\n", "batch_rewards", "\n", "+", "exp_batch", "[", "\"discount\"", "]", "*", "(", "1.0", "-", "batch_terminal", ")", "*", "next_q_max", "\n", ")", "\n", "\n", "# T_PAL Q: persistent advantage learning operator", "\n", "# \u7531\u4e8e\u539f\u59cb\u7a0b\u5e8f\u5bf9\u591a\u667a\u80fd\u4f53\u5f3a\u5316\u5b66\u4e60\u7684\u4e0d\u517c\u5bb9\uff0c\u540c\u6837\u9700\u8981\u8fdb\u884c\u7a0b\u5e8f\u6539\u52a8", "\n", "cur_advantage", "=", "[", "]", "# \u521d\u59cb\u5316\u5f53\u524d\u4f18\u52bf\u77e9\u9635", "\n", "next_advantage", "=", "[", "]", "# \u521d\u59cb\u5316next_step\u4f18\u52bf\u77e9\u9635", "\n", "count", "=", "0", "# # \u5b9a\u4e49\u9488\u5bf9batch_actions\u7684\u8ba1\u6570\u5668", "\n", "for", "qt_cur", ",", "qt_next", "in", "zip", "(", "target_qout", ",", "target_next_qout", ")", ":", "# \u904d\u5386\u591a\u4e2aQ\u503c\u5217\u8868", "\n", "                ", "qt_cur_advantage", "=", "qt_cur", ".", "compute_advantage", "(", "batch_actions", "[", "count", "]", ")", "\n", "qt_next_advantage", "=", "qt_next", ".", "compute_advantage", "(", "batch_actions", "[", "count", "]", ")", "\n", "count", "+=", "1", "\n", "cur_advantage", ".", "append", "(", "qt_cur_advantage", ")", "\n", "next_advantage", ".", "append", "(", "qt_next_advantage", ")", "\n", "", "cur_advantage", "=", "torch", ".", "stack", "(", "cur_advantage", ")", "\n", "cur_advantage", "=", "torch", ".", "mean", "(", "cur_advantage", ",", "dim", "=", "1", ")", "\n", "next_advantage", "=", "torch", ".", "stack", "(", "next_advantage", ")", "\n", "next_advantage", "=", "torch", ".", "mean", "(", "next_advantage", ",", "dim", "=", "1", ")", "\n", "# cur_advantage = torch.reshape(", "\n", "#     target_qout.compute_advantage(batch_actions), (batch_size,)", "\n", "# )", "\n", "# next_advantage = torch.reshape(", "\n", "#     target_next_qout.compute_advantage(batch_actions), (batch_size,)", "\n", "# )", "\n", "\n", "tpal_q", "=", "t_q", "+", "self", ".", "alpha", "*", "torch", ".", "max", "(", "cur_advantage", ",", "next_advantage", ")", "\n", "\n", "", "return", "batch_q", ",", "tpal_q", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACERDiscreteActionHead.__init__": [[126, 130], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "pi", ",", "q", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pi", "=", "pi", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACERDiscreteActionHead.forward": [[131, 136], ["acer.ACERDiscreteActionHead.pi", "acer.ACERDiscreteActionHead.q"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "obs", ")", ":", "\n", "        ", "action_distrib", "=", "self", ".", "pi", "(", "obs", ")", "\n", "action_value", "=", "self", ".", "q", "(", "obs", ")", "\n", "v", "=", "(", "action_distrib", ".", "probs", "*", "action_value", ".", "q_values", ")", ".", "sum", "(", "1", ")", "\n", "return", "action_distrib", ",", "action_value", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACERContinuousActionHead.__init__": [[149, 155], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "pi", ",", "v", ",", "adv", ",", "n", "=", "5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pi", "=", "pi", "\n", "self", ".", "v", "=", "v", "\n", "self", ".", "adv", "=", "adv", "\n", "self", ".", "n", "=", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACERContinuousActionHead.forward": [[156, 170], ["acer.ACERContinuousActionHead.pi", "acer.ACERContinuousActionHead.v", "pfrl.action_value.SingleActionValue", "sum", "acer.ACERContinuousActionHead.adv", "acer.ACERContinuousActionHead.adv", "range", "acer.ACERContinuousActionHead.sample"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "def", "forward", "(", "self", ",", "obs", ")", ":", "\n", "        ", "action_distrib", "=", "self", ".", "pi", "(", "obs", ")", "\n", "v", "=", "self", ".", "v", "(", "obs", ")", "\n", "\n", "def", "evaluator", "(", "action", ")", ":", "\n", "            ", "adv_mean", "=", "(", "\n", "sum", "(", "self", ".", "adv", "(", "(", "obs", ",", "action_distrib", ".", "sample", "(", ")", ")", ")", "for", "_", "in", "range", "(", "self", ".", "n", ")", ")", "\n", "/", "self", ".", "n", "\n", ")", "\n", "return", "v", "+", "self", ".", "adv", "(", "(", "obs", ",", "action", ")", ")", "-", "adv_mean", "\n", "\n", "", "action_value", "=", "SingleActionValue", "(", "evaluator", ")", "\n", "\n", "return", "action_distrib", ",", "action_value", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER.__init__": [[307, 387], ["copy.deepcopy", "copy.deepcopy", "torch.device", "acer.ACER.init_history_data_for_online_update", "logging.getLogger"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER.init_history_data_for_online_update"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "optimizer", ",", "\n", "t_max", ",", "\n", "gamma", ",", "\n", "replay_buffer", ",", "\n", "beta", "=", "1e-2", ",", "\n", "phi", "=", "lambda", "x", ":", "x", ",", "\n", "pi_loss_coef", "=", "1.0", ",", "\n", "Q_loss_coef", "=", "0.5", ",", "\n", "use_trust_region", "=", "True", ",", "\n", "trust_region_alpha", "=", "0.99", ",", "\n", "trust_region_delta", "=", "1", ",", "\n", "truncation_threshold", "=", "10", ",", "\n", "disable_online_update", "=", "False", ",", "\n", "n_times_replay", "=", "8", ",", "\n", "replay_start_size", "=", "10", "**", "4", ",", "\n", "normalize_loss_by_steps", "=", "True", ",", "\n", "act_deterministically", "=", "False", ",", "\n", "max_grad_norm", "=", "None", ",", "\n", "recurrent", "=", "False", ",", "\n", "use_Q_opc", "=", "False", ",", "\n", "average_entropy_decay", "=", "0.999", ",", "\n", "average_value_decay", "=", "0.999", ",", "\n", "average_kl_decay", "=", "0.999", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "\n", "# Globally shared model", "\n", "        ", "self", ".", "shared_model", "=", "model", "\n", "\n", "# Globally shared average model used to compute trust regions", "\n", "self", ".", "shared_average_model", "=", "copy", ".", "deepcopy", "(", "self", ".", "shared_model", ")", "\n", "\n", "# Thread specific model", "\n", "self", ".", "model", "=", "copy", ".", "deepcopy", "(", "self", ".", "shared_model", ")", "\n", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "self", ".", "replay_buffer", "=", "replay_buffer", "\n", "self", ".", "t_max", "=", "t_max", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "phi", "=", "phi", "\n", "self", ".", "pi_loss_coef", "=", "pi_loss_coef", "\n", "self", ".", "Q_loss_coef", "=", "Q_loss_coef", "\n", "self", ".", "normalize_loss_by_steps", "=", "normalize_loss_by_steps", "\n", "self", ".", "act_deterministically", "=", "act_deterministically", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "self", ".", "recurrent", "=", "recurrent", "\n", "self", ".", "use_trust_region", "=", "use_trust_region", "\n", "self", ".", "trust_region_alpha", "=", "trust_region_alpha", "\n", "self", ".", "truncation_threshold", "=", "truncation_threshold", "\n", "self", ".", "trust_region_delta", "=", "trust_region_delta", "\n", "self", ".", "disable_online_update", "=", "disable_online_update", "\n", "self", ".", "n_times_replay", "=", "n_times_replay", "\n", "self", ".", "use_Q_opc", "=", "use_Q_opc", "\n", "self", ".", "replay_start_size", "=", "replay_start_size", "\n", "self", ".", "average_value_decay", "=", "average_value_decay", "\n", "self", ".", "average_entropy_decay", "=", "average_entropy_decay", "\n", "self", ".", "average_kl_decay", "=", "average_kl_decay", "\n", "self", ".", "logger", "=", "logger", "if", "logger", "else", "getLogger", "(", "__name__", ")", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "last_state", "=", "None", "\n", "self", ".", "last_action", "=", "None", "\n", "\n", "# Recurrent states of the model", "\n", "self", ".", "train_recurrent_states", "=", "None", "\n", "self", ".", "shared_recurrent_states", "=", "None", "\n", "self", ".", "test_recurrent_states", "=", "None", "\n", "\n", "# Stats", "\n", "self", ".", "average_value", "=", "0", "\n", "self", ".", "average_entropy", "=", "0", "\n", "self", ".", "average_kl", "=", "0", "\n", "\n", "self", ".", "init_history_data_for_online_update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER.init_history_data_for_online_update": [[388, 396], ["None"], "methods", ["None"], ["", "def", "init_history_data_for_online_update", "(", "self", ")", ":", "\n", "        ", "self", ".", "past_actions", "=", "{", "}", "\n", "self", ".", "past_rewards", "=", "{", "}", "\n", "self", ".", "past_values", "=", "{", "}", "\n", "self", ".", "past_action_distrib", "=", "{", "}", "\n", "self", ".", "past_action_values", "=", "{", "}", "\n", "self", ".", "past_avg_action_distrib", "=", "{", "}", "\n", "self", ".", "t_start", "=", "self", ".", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER.sync_parameters": [[397, 403], ["pfrl.utils.copy_param.copy_param", "pfrl.utils.copy_param.soft_copy_param"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.copy_param", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.soft_copy_param"], ["", "def", "sync_parameters", "(", "self", ")", ":", "\n", "        ", "copy_param", ".", "copy_param", "(", "target_link", "=", "self", ".", "model", ",", "source_link", "=", "self", ".", "shared_model", ")", "\n", "copy_param", ".", "soft_copy_param", "(", "\n", "target_link", "=", "self", ".", "shared_average_model", ",", "\n", "source_link", "=", "self", ".", "model", ",", "\n", "tau", "=", "1", "-", "self", ".", "trust_region_alpha", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER.assert_shared_memory": [[405, 419], ["acer.ACER.shared_model.state_dict().items", "acer.ACER.model.state_dict().items", "[].values", "v.is_shared", "param_state.items", "acer.ACER.shared_model.state_dict", "acer.ACER.model.state_dict", "v.is_shared", "isinstance", "acer.ACER.optimizer.state_dict", "v.is_shared"], "methods", ["None"], ["", "def", "assert_shared_memory", "(", "self", ")", ":", "\n", "# Shared model must have tensors in shared memory", "\n", "        ", "for", "k", ",", "v", "in", "self", ".", "shared_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "assert", "v", ".", "is_shared", "(", ")", ",", "\"{} is not in shared memory\"", ".", "format", "(", "k", ")", "\n", "\n", "# Local model must not have tensors in shared memory", "\n", "", "for", "k", ",", "v", "in", "self", ".", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "assert", "not", "v", ".", "is_shared", "(", ")", ",", "\"{} is in shared memory\"", ".", "format", "(", "k", ")", "\n", "\n", "# Optimizer must have tensors in shared memory", "\n", "", "for", "param_state", "in", "self", ".", "optimizer", ".", "state_dict", "(", ")", "[", "\"state\"", "]", ".", "values", "(", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "param_state", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "assert", "v", ".", "is_shared", "(", ")", ",", "\"{} is not in shared memory\"", ".", "format", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER.shared_attributes": [[420, 423], ["None"], "methods", ["None"], ["", "", "", "", "@", "property", "\n", "def", "shared_attributes", "(", "self", ")", ":", "\n", "        ", "return", "(", "\"shared_model\"", ",", "\"shared_average_model\"", ",", "\"optimizer\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER.compute_one_step_pi_loss": [[424, 461], ["numpy.isscalar", "numpy.isscalar", "acer.compute_policy_gradient_loss", "acer.compute_loss_with_kl_constraint", "action_distrib.entropy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.compute_policy_gradient_loss", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.compute_loss_with_kl_constraint", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.entropy"], ["", "def", "compute_one_step_pi_loss", "(", "\n", "self", ",", "\n", "action", ",", "\n", "advantage", ",", "\n", "action_distrib", ",", "\n", "action_distrib_mu", ",", "\n", "action_value", ",", "\n", "v", ",", "\n", "avg_action_distrib", ",", "\n", ")", ":", "\n", "        ", "assert", "np", ".", "isscalar", "(", "advantage", ")", "\n", "assert", "np", ".", "isscalar", "(", "v", ")", "\n", "\n", "g_loss", "=", "compute_policy_gradient_loss", "(", "\n", "action", "=", "action", ",", "\n", "advantage", "=", "advantage", ",", "\n", "action_distrib", "=", "action_distrib", ",", "\n", "action_distrib_mu", "=", "action_distrib_mu", ",", "\n", "action_value", "=", "action_value", ",", "\n", "v", "=", "v", ",", "\n", "truncation_threshold", "=", "self", ".", "truncation_threshold", ",", "\n", ")", "\n", "\n", "if", "self", ".", "use_trust_region", ":", "\n", "            ", "pi_loss", ",", "kl", "=", "compute_loss_with_kl_constraint", "(", "\n", "action_distrib", ",", "\n", "avg_action_distrib", ",", "\n", "g_loss", ",", "\n", "delta", "=", "self", ".", "trust_region_delta", ",", "\n", ")", "\n", "self", ".", "average_kl", "+=", "(", "1", "-", "self", ".", "average_kl_decay", ")", "*", "(", "kl", "-", "self", ".", "average_kl", ")", "\n", "", "else", ":", "\n", "            ", "pi_loss", "=", "g_loss", "\n", "\n", "# Entropy is maximized", "\n", "", "pi_loss", "-=", "self", ".", "beta", "*", "action_distrib", ".", "entropy", "(", ")", "\n", "return", "pi_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER.compute_loss": [[462, 555], ["numpy.isscalar", "isinstance", "reversed", "range", "torch.as_tensor().unsqueeze", "numpy.isscalar", "numpy.isscalar", "acer.ACER.compute_one_step_pi_loss", "action_value.evaluate_actions", "acer.ACER.logger.debug", "Q_loss.reshape", "acer.compute_importance", "torch.nn.functional.mse_loss", "acer.ACER.logger.debug", "min", "min", "float", "float", "float", "float", "torch.as_tensor", "float", "float", "float", "torch.tensor", "float", "torch.nn.functional.mse_loss", "float", "float", "float", "min", "torch.tensor", "float", "float", "torch.as_tensor().unsqueeze.numel"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER.compute_one_step_pi_loss", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.compute_importance", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min"], ["", "def", "compute_loss", "(", "\n", "self", ",", "\n", "t_start", ",", "\n", "t_stop", ",", "\n", "R", ",", "\n", "actions", ",", "\n", "rewards", ",", "\n", "values", ",", "\n", "action_values", ",", "\n", "action_distribs", ",", "\n", "action_distribs_mu", ",", "\n", "avg_action_distribs", ",", "\n", ")", ":", "\n", "\n", "        ", "assert", "np", ".", "isscalar", "(", "R", ")", "\n", "pi_loss", "=", "0", "\n", "Q_loss", "=", "0", "\n", "Q_ret", "=", "R", "\n", "Q_opc", "=", "R", "\n", "discrete", "=", "isinstance", "(", "action_distribs", "[", "t_start", "]", ",", "torch", ".", "distributions", ".", "Categorical", ")", "\n", "del", "R", "\n", "for", "i", "in", "reversed", "(", "range", "(", "t_start", ",", "t_stop", ")", ")", ":", "\n", "            ", "r", "=", "rewards", "[", "i", "]", "\n", "v", "=", "values", "[", "i", "]", "\n", "action_distrib", "=", "action_distribs", "[", "i", "]", "\n", "action_distrib_mu", "=", "action_distribs_mu", "[", "i", "]", "if", "action_distribs_mu", "else", "None", "\n", "avg_action_distrib", "=", "avg_action_distribs", "[", "i", "]", "\n", "action_value", "=", "action_values", "[", "i", "]", "\n", "ba", "=", "torch", ".", "as_tensor", "(", "actions", "[", "i", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "if", "action_distrib_mu", "is", "not", "None", ":", "\n", "# Off-policy", "\n", "                ", "rho", "=", "compute_importance", "(", "action_distrib", ",", "action_distrib_mu", ",", "ba", ")", "\n", "", "else", ":", "\n", "# On-policy", "\n", "                ", "rho", "=", "1", "\n", "\n", "", "Q_ret", "=", "r", "+", "self", ".", "gamma", "*", "Q_ret", "\n", "Q_opc", "=", "r", "+", "self", ".", "gamma", "*", "Q_opc", "\n", "\n", "assert", "np", ".", "isscalar", "(", "Q_ret", ")", "\n", "assert", "np", ".", "isscalar", "(", "Q_opc", ")", "\n", "if", "self", ".", "use_Q_opc", ":", "\n", "                ", "advantage", "=", "Q_opc", "-", "float", "(", "v", ")", "\n", "", "else", ":", "\n", "                ", "advantage", "=", "Q_ret", "-", "float", "(", "v", ")", "\n", "", "pi_loss", "+=", "self", ".", "compute_one_step_pi_loss", "(", "\n", "action", "=", "ba", ",", "\n", "advantage", "=", "advantage", ",", "\n", "action_distrib", "=", "action_distrib", ",", "\n", "action_distrib_mu", "=", "action_distrib_mu", ",", "\n", "action_value", "=", "action_value", ",", "\n", "v", "=", "float", "(", "v", ")", ",", "\n", "avg_action_distrib", "=", "avg_action_distrib", ",", "\n", ")", "\n", "\n", "# Accumulate gradients of value function", "\n", "Q", "=", "action_value", ".", "evaluate_actions", "(", "ba", ")", "\n", "assert", "Q", ".", "requires_grad", ",", "\"Q must be backprop-able\"", "\n", "Q_loss", "+=", "nn", ".", "functional", ".", "mse_loss", "(", "torch", ".", "tensor", "(", "Q_ret", ")", ",", "Q", ")", "/", "2", "\n", "\n", "if", "not", "discrete", ":", "\n", "                ", "assert", "v", ".", "requires_grad", ",", "\"v must be backprop-able\"", "\n", "v_target", "=", "min", "(", "1", ",", "rho", ")", "*", "(", "Q_ret", "-", "float", "(", "Q", ")", ")", "+", "float", "(", "v", ")", "\n", "Q_loss", "+=", "nn", ".", "functional", ".", "mse_loss", "(", "torch", ".", "tensor", "(", "v_target", ")", ",", "v", ")", "/", "2", "\n", "\n", "", "if", "self", ".", "process_idx", "==", "0", ":", "\n", "                ", "self", ".", "logger", ".", "debug", "(", "\n", "\"t:%s v:%s Q:%s Q_ret:%s Q_opc:%s\"", ",", "\n", "i", ",", "\n", "float", "(", "v", ")", ",", "\n", "float", "(", "Q", ")", ",", "\n", "Q_ret", ",", "\n", "Q_opc", ",", "\n", ")", "\n", "\n", "", "if", "discrete", ":", "\n", "                ", "c", "=", "min", "(", "1", ",", "rho", ")", "\n", "", "else", ":", "\n", "                ", "c", "=", "min", "(", "1", ",", "rho", "**", "(", "1", "/", "ba", ".", "numel", "(", ")", ")", ")", "\n", "", "Q_ret", "=", "c", "*", "(", "Q_ret", "-", "float", "(", "Q", ")", ")", "+", "float", "(", "v", ")", "\n", "Q_opc", "=", "Q_opc", "-", "float", "(", "Q", ")", "+", "float", "(", "v", ")", "\n", "\n", "", "pi_loss", "*=", "self", ".", "pi_loss_coef", "\n", "Q_loss", "*=", "self", ".", "Q_loss_coef", "\n", "\n", "if", "self", ".", "normalize_loss_by_steps", ":", "\n", "            ", "pi_loss", "/=", "t_stop", "-", "t_start", "\n", "Q_loss", "/=", "t_stop", "-", "t_start", "\n", "\n", "", "if", "self", ".", "process_idx", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "\"pi_loss:%s Q_loss:%s\"", ",", "float", "(", "pi_loss", ")", ",", "float", "(", "Q_loss", ")", ")", "\n", "\n", "", "return", "pi_loss", "+", "Q_loss", ".", "reshape", "(", "*", "pi_loss", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER.update": [[556, 596], ["numpy.isscalar", "acer.ACER.assert_shared_memory", "acer.ACER.compute_loss", "acer.ACER.model.zero_grad", "acer.ACER.squeeze().backward", "pfrl.utils.copy_param.copy_grad", "acer.ACER.optimizer.step", "acer.ACER.sync_parameters", "pfrl.utils.clip_l2_grad_norm_", "acer.ACER.squeeze", "acer.ACER.model.parameters"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a3c.A3C.assert_shared_memory", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER.compute_loss", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.copy_grad", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a3c.A3C.sync_parameters", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.clip_l2_grad_norm.clip_l2_grad_norm_"], ["", "def", "update", "(", "\n", "self", ",", "\n", "t_start", ",", "\n", "t_stop", ",", "\n", "R", ",", "\n", "actions", ",", "\n", "rewards", ",", "\n", "values", ",", "\n", "action_values", ",", "\n", "action_distribs", ",", "\n", "action_distribs_mu", ",", "\n", "avg_action_distribs", ",", "\n", ")", ":", "\n", "\n", "        ", "assert", "np", ".", "isscalar", "(", "R", ")", "\n", "self", ".", "assert_shared_memory", "(", ")", "\n", "\n", "total_loss", "=", "self", ".", "compute_loss", "(", "\n", "t_start", "=", "t_start", ",", "\n", "t_stop", "=", "t_stop", ",", "\n", "R", "=", "R", ",", "\n", "actions", "=", "actions", ",", "\n", "rewards", "=", "rewards", ",", "\n", "values", "=", "values", ",", "\n", "action_values", "=", "action_values", ",", "\n", "action_distribs", "=", "action_distribs", ",", "\n", "action_distribs_mu", "=", "action_distribs_mu", ",", "\n", "avg_action_distribs", "=", "avg_action_distribs", ",", "\n", ")", "\n", "\n", "# Compute gradients using thread-specific model", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "squeeze", "(", ")", ".", "backward", "(", ")", "\n", "if", "self", ".", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "clip_l2_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "# Copy the gradients to the globally shared model", "\n", "", "copy_param", ".", "copy_grad", "(", "target_link", "=", "self", ".", "shared_model", ",", "source_link", "=", "self", ".", "model", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "sync_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER.update_from_replay": [[597, 670], ["enumerate", "acer.ACER.update", "len", "acer.ACER.replay_buffer.sample_episodes", "pfrl.utils.batch_states.batch_states", "float", "pfrl.utils.recurrent.one_step_forward", "acer.ACER.model", "torch.no_grad", "torch.no_grad", "pfrl.utils.batch_states.batch_states", "len", "pfrl.utils.recurrent.one_step_forward", "acer.ACER.shared_average_model", "pfrl.utils.recurrent.one_step_forward", "acer.ACER.model"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.prioritized_episodic.PrioritizedEpisodicReplayBuffer.sample_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward"], ["", "def", "update_from_replay", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "replay_buffer", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "if", "len", "(", "self", ".", "replay_buffer", ")", "<", "self", ".", "replay_start_size", ":", "\n", "            ", "return", "\n", "\n", "", "episode", "=", "self", ".", "replay_buffer", ".", "sample_episodes", "(", "1", ",", "self", ".", "t_max", ")", "[", "0", "]", "\n", "\n", "model_recurrent_state", "=", "None", "\n", "shared_recurrent_state", "=", "None", "\n", "rewards", "=", "{", "}", "\n", "actions", "=", "{", "}", "\n", "action_distribs", "=", "{", "}", "\n", "action_distribs_mu", "=", "{", "}", "\n", "avg_action_distribs", "=", "{", "}", "\n", "action_values", "=", "{", "}", "\n", "values", "=", "{", "}", "\n", "for", "t", ",", "transition", "in", "enumerate", "(", "episode", ")", ":", "\n", "            ", "bs", "=", "batch_states", "(", "[", "transition", "[", "\"state\"", "]", "]", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "if", "self", ".", "recurrent", ":", "\n", "                ", "(", "\n", "(", "action_distrib", ",", "action_value", ",", "v", ")", ",", "\n", "model_recurrent_state", ",", "\n", ")", "=", "one_step_forward", "(", "self", ".", "model", ",", "bs", ",", "model_recurrent_state", ")", "\n", "", "else", ":", "\n", "                ", "action_distrib", ",", "action_value", ",", "v", "=", "self", ".", "model", "(", "bs", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "self", ".", "recurrent", ":", "\n", "                    ", "(", "\n", "(", "avg_action_distrib", ",", "_", ",", "_", ")", ",", "\n", "shared_recurrent_state", ",", "\n", ")", "=", "one_step_forward", "(", "\n", "self", ".", "shared_average_model", ",", "\n", "bs", ",", "\n", "shared_recurrent_state", ",", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "avg_action_distrib", ",", "_", ",", "_", "=", "self", ".", "shared_average_model", "(", "bs", ")", "\n", "", "", "actions", "[", "t", "]", "=", "transition", "[", "\"action\"", "]", "\n", "values", "[", "t", "]", "=", "v", "\n", "action_distribs", "[", "t", "]", "=", "action_distrib", "\n", "avg_action_distribs", "[", "t", "]", "=", "avg_action_distrib", "\n", "rewards", "[", "t", "]", "=", "transition", "[", "\"reward\"", "]", "\n", "action_distribs_mu", "[", "t", "]", "=", "transition", "[", "\"mu\"", "]", "\n", "action_values", "[", "t", "]", "=", "action_value", "\n", "", "last_transition", "=", "episode", "[", "-", "1", "]", "\n", "if", "last_transition", "[", "\"is_state_terminal\"", "]", ":", "\n", "            ", "R", "=", "0", "\n", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "last_s", "=", "batch_states", "(", "\n", "[", "last_transition", "[", "\"next_state\"", "]", "]", ",", "self", ".", "device", ",", "self", ".", "phi", "\n", ")", "\n", "if", "self", ".", "recurrent", ":", "\n", "                    ", "(", "_", ",", "_", ",", "last_v", ")", ",", "_", "=", "one_step_forward", "(", "\n", "self", ".", "model", ",", "last_s", ",", "model_recurrent_state", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "_", ",", "_", ",", "last_v", "=", "self", ".", "model", "(", "last_s", ")", "\n", "", "", "R", "=", "float", "(", "last_v", ")", "\n", "", "return", "self", ".", "update", "(", "\n", "R", "=", "R", ",", "\n", "t_start", "=", "0", ",", "\n", "t_stop", "=", "len", "(", "episode", ")", ",", "\n", "rewards", "=", "rewards", ",", "\n", "actions", "=", "actions", ",", "\n", "values", "=", "values", ",", "\n", "action_distribs", "=", "action_distribs", ",", "\n", "action_distribs_mu", "=", "action_distribs_mu", ",", "\n", "avg_action_distribs", "=", "avg_action_distribs", ",", "\n", "action_values", "=", "action_values", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER.update_on_policy": [[672, 703], ["acer.ACER.init_history_data_for_online_update", "pfrl.utils.recurrent.detach_recurrent_state", "acer.ACER.update", "float", "torch.no_grad", "pfrl.utils.recurrent.one_step_forward", "acer.ACER.model"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER.init_history_data_for_online_update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.detach_recurrent_state", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward"], ["", "def", "update_on_policy", "(", "self", ",", "statevar", ")", ":", "\n", "        ", "assert", "self", ".", "t_start", "<", "self", ".", "t", "\n", "\n", "if", "not", "self", ".", "disable_online_update", ":", "\n", "            ", "if", "statevar", "is", "None", ":", "\n", "                ", "R", "=", "0", "\n", "", "else", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "if", "self", ".", "recurrent", ":", "\n", "                        ", "(", "_", ",", "_", ",", "v", ")", ",", "_", "=", "one_step_forward", "(", "\n", "self", ".", "model", ",", "statevar", ",", "self", ".", "train_recurrent_states", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "_", ",", "_", ",", "v", "=", "self", ".", "model", "(", "statevar", ")", "\n", "", "", "R", "=", "float", "(", "v", ")", "\n", "", "self", ".", "update", "(", "\n", "t_start", "=", "self", ".", "t_start", ",", "\n", "t_stop", "=", "self", ".", "t", ",", "\n", "R", "=", "R", ",", "\n", "actions", "=", "self", ".", "past_actions", ",", "\n", "rewards", "=", "self", ".", "past_rewards", ",", "\n", "values", "=", "self", ".", "past_values", ",", "\n", "action_values", "=", "self", ".", "past_action_values", ",", "\n", "action_distribs", "=", "self", ".", "past_action_distrib", ",", "\n", "action_distribs_mu", "=", "None", ",", "\n", "avg_action_distribs", "=", "self", ".", "past_avg_action_distrib", ",", "\n", ")", "\n", "\n", "", "self", ".", "init_history_data_for_online_update", "(", ")", "\n", "self", ".", "train_recurrent_states", "=", "detach_recurrent_state", "(", "\n", "self", ".", "train_recurrent_states", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER.act": [[705, 710], ["acer.ACER._act_train", "acer.ACER._act_eval"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE._act_train", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE._act_eval"], ["", "def", "act", "(", "self", ",", "obs", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_act_train", "(", "obs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_act_eval", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER.observe": [[711, 716], ["acer.ACER._observe_train", "acer.ACER._observe_eval"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE._observe_train", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE._observe_eval"], ["", "", "def", "observe", "(", "self", ",", "obs", ",", "reward", ",", "done", ",", "reset", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "_observe_train", "(", "obs", ",", "reward", ",", "done", ",", "reset", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_observe_eval", "(", "obs", ",", "reward", ",", "done", ",", "reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER._act_train": [[717, 763], ["pfrl.utils.batch_states.batch_states", "action.numpy", "acer.deepcopy_distribution", "pfrl.utils.recurrent.one_step_forward", "acer.ACER.model", "action_distrib.sample", "torch.no_grad", "pfrl.utils.recurrent.one_step_forward", "acer.ACER.shared_average_model", "float", "float", "action_distrib.entropy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.deepcopy_distribution", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.entropy"], ["", "", "def", "_act_train", "(", "self", ",", "obs", ")", ":", "\n", "\n", "        ", "statevar", "=", "batch_states", "(", "[", "obs", "]", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "\n", "if", "self", ".", "recurrent", ":", "\n", "            ", "(", "\n", "(", "action_distrib", ",", "action_value", ",", "v", ")", ",", "\n", "self", ".", "train_recurrent_states", ",", "\n", ")", "=", "one_step_forward", "(", "self", ".", "model", ",", "statevar", ",", "self", ".", "train_recurrent_states", ")", "\n", "", "else", ":", "\n", "            ", "action_distrib", ",", "action_value", ",", "v", "=", "self", ".", "model", "(", "statevar", ")", "\n", "", "self", ".", "past_action_values", "[", "self", ".", "t", "]", "=", "action_value", "\n", "action", "=", "action_distrib", ".", "sample", "(", ")", "[", "0", "]", "\n", "\n", "# Save values for a later update", "\n", "self", ".", "past_values", "[", "self", ".", "t", "]", "=", "v", "\n", "self", ".", "past_action_distrib", "[", "self", ".", "t", "]", "=", "action_distrib", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "recurrent", ":", "\n", "                ", "(", "\n", "(", "avg_action_distrib", ",", "_", ",", "_", ")", ",", "\n", "self", ".", "shared_recurrent_states", ",", "\n", ")", "=", "one_step_forward", "(", "\n", "self", ".", "shared_average_model", ",", "\n", "statevar", ",", "\n", "self", ".", "shared_recurrent_states", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "avg_action_distrib", ",", "_", ",", "_", "=", "self", ".", "shared_average_model", "(", "statevar", ")", "\n", "", "", "self", ".", "past_avg_action_distrib", "[", "self", ".", "t", "]", "=", "avg_action_distrib", "\n", "\n", "self", ".", "past_actions", "[", "self", ".", "t", "]", "=", "action", "\n", "\n", "# Update stats", "\n", "self", ".", "average_value", "+=", "(", "1", "-", "self", ".", "average_value_decay", ")", "*", "(", "\n", "float", "(", "v", ")", "-", "self", ".", "average_value", "\n", ")", "\n", "self", ".", "average_entropy", "+=", "(", "1", "-", "self", ".", "average_entropy_decay", ")", "*", "(", "\n", "float", "(", "action_distrib", ".", "entropy", "(", ")", ")", "-", "self", ".", "average_entropy", "\n", ")", "\n", "\n", "self", ".", "last_state", "=", "obs", "\n", "self", ".", "last_action", "=", "action", ".", "numpy", "(", ")", "\n", "self", ".", "last_action_distrib", "=", "deepcopy_distribution", "(", "action_distrib", ")", "\n", "\n", "return", "self", ".", "last_action", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER._act_eval": [[764, 778], ["torch.no_grad", "pfrl.utils.batch_states.batch_states", "pfrl.utils.recurrent.one_step_forward", "acer.ACER.model", "pfrl.utils.mode_of_distribution.mode_of_distribution().numpy", "action_distrib.sample().numpy", "pfrl.utils.mode_of_distribution.mode_of_distribution", "action_distrib.sample"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.mode_of_distribution.mode_of_distribution", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "def", "_act_eval", "(", "self", ",", "obs", ")", ":", "\n", "# Use the process-local model for acting", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "statevar", "=", "batch_states", "(", "[", "obs", "]", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "if", "self", ".", "recurrent", ":", "\n", "                ", "(", "action_distrib", ",", "_", ",", "_", ")", ",", "self", ".", "test_recurrent_states", "=", "one_step_forward", "(", "\n", "self", ".", "model", ",", "statevar", ",", "self", ".", "test_recurrent_states", "\n", ")", "\n", "", "else", ":", "\n", "                ", "action_distrib", ",", "_", ",", "_", "=", "self", ".", "model", "(", "statevar", ")", "\n", "", "if", "self", ".", "act_deterministically", ":", "\n", "                ", "return", "mode_of_distribution", "(", "action_distrib", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "return", "action_distrib", ".", "sample", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER._observe_train": [[779, 821], ["acer.ACER.replay_buffer.append", "acer.ACER.logger.debug", "acer.ACER.update_on_policy", "range", "acer.ACER.replay_buffer.stop_current_episode", "pfrl.utils.batch_states.batch_states", "acer.ACER.update_from_replay"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER.update_on_policy", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.stop_current_episode", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER.update_from_replay"], ["", "", "", "def", "_observe_train", "(", "self", ",", "state", ",", "reward", ",", "done", ",", "reset", ")", ":", "\n", "        ", "assert", "self", ".", "last_state", "is", "not", "None", "\n", "assert", "self", ".", "last_action", "is", "not", "None", "\n", "\n", "# Add a transition to the replay buffer", "\n", "if", "self", ".", "replay_buffer", "is", "not", "None", ":", "\n", "            ", "self", ".", "replay_buffer", ".", "append", "(", "\n", "state", "=", "self", ".", "last_state", ",", "\n", "action", "=", "self", ".", "last_action", ",", "\n", "reward", "=", "reward", ",", "\n", "next_state", "=", "state", ",", "\n", "is_state_terminal", "=", "done", ",", "\n", "mu", "=", "self", ".", "last_action_distrib", ",", "\n", ")", "\n", "if", "done", "or", "reset", ":", "\n", "                ", "self", ".", "replay_buffer", ".", "stop_current_episode", "(", ")", "\n", "\n", "", "", "self", ".", "t", "+=", "1", "\n", "self", ".", "past_rewards", "[", "self", ".", "t", "-", "1", "]", "=", "reward", "\n", "if", "self", ".", "process_idx", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "\n", "\"t:%s r:%s a:%s\"", ",", "\n", "self", ".", "t", ",", "\n", "reward", ",", "\n", "self", ".", "last_action", ",", "\n", ")", "\n", "\n", "", "if", "self", ".", "t", "-", "self", ".", "t_start", "==", "self", ".", "t_max", "or", "done", "or", "reset", ":", "\n", "            ", "if", "done", ":", "\n", "                ", "statevar", "=", "None", "\n", "", "else", ":", "\n", "                ", "statevar", "=", "batch_states", "(", "[", "state", "]", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "", "self", ".", "update_on_policy", "(", "statevar", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "n_times_replay", ")", ":", "\n", "                ", "self", ".", "update_from_replay", "(", ")", "\n", "", "", "if", "done", "or", "reset", ":", "\n", "            ", "self", ".", "train_recurrent_states", "=", "None", "\n", "self", ".", "shared_recurrent_states", "=", "None", "\n", "\n", "", "self", ".", "last_state", "=", "None", "\n", "self", ".", "last_action", "=", "None", "\n", "self", ".", "last_action_distrib", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER._observe_eval": [[822, 825], ["None"], "methods", ["None"], ["", "def", "_observe_eval", "(", "self", ",", "obs", ",", "reward", ",", "done", ",", "reset", ")", ":", "\n", "        ", "if", "done", "or", "reset", ":", "\n", "            ", "self", ".", "test_recurrent_states", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER.load": [[826, 829], ["super().load", "pfrl.utils.copy_param.copy_param"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.copy_param"], ["", "", "def", "load", "(", "self", ",", "dirname", ")", ":", "\n", "        ", "super", "(", ")", ".", "load", "(", "dirname", ")", "\n", "copy_param", ".", "copy_param", "(", "target_link", "=", "self", ".", "shared_model", ",", "source_link", "=", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.ACER.get_statistics": [[830, 835], ["None"], "methods", ["None"], ["", "def", "get_statistics", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "(", "\"average_value\"", ",", "self", ".", "average_value", ")", ",", "\n", "(", "\"average_entropy\"", ",", "self", ".", "average_entropy", ")", ",", "\n", "(", "\"average_kl\"", ",", "self", ".", "average_kl", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.compute_importance": [[16, 19], ["torch.no_grad", "float", "torch.exp", "pi.log_prob", "mu.log_prob"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.log_prob", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.log_prob"], ["def", "compute_importance", "(", "pi", ",", "mu", ",", "x", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "return", "float", "(", "torch", ".", "exp", "(", "pi", ".", "log_prob", "(", "x", ")", "-", "mu", ".", "log_prob", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.compute_full_importance": [[21, 28], ["isinstance", "isinstance", "torch.no_grad", "torch.exp"], "function", ["None"], ["", "", "def", "compute_full_importance", "(", "pi", ",", "mu", ")", ":", "\n", "    ", "assert", "isinstance", "(", "pi", ",", "torch", ".", "distributions", ".", "Categorical", ")", "\n", "assert", "isinstance", "(", "mu", ",", "torch", ".", "distributions", ".", "Categorical", ")", "\n", "# Categorical.logits is already normalized, i.e., exp(logits[i]) = probs[i]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "pimu", "=", "torch", ".", "exp", "(", "pi", ".", "logits", "-", "mu", ".", "logits", ")", "\n", "", "return", "pimu", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.compute_policy_gradient_full_correction": [[30, 47], ["isinstance", "isinstance", "numpy.isscalar", "torch.no_grad", "acer.compute_full_importance", "torch.nn.functional.relu"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.compute_full_importance"], ["", "def", "compute_policy_gradient_full_correction", "(", "\n", "action_distrib", ",", "action_distrib_mu", ",", "action_value", ",", "v", ",", "truncation_threshold", "\n", ")", ":", "\n", "    ", "\"\"\"Compute off-policy bias correction term wrt all actions.\"\"\"", "\n", "assert", "isinstance", "(", "action_distrib", ",", "torch", ".", "distributions", ".", "Categorical", ")", "\n", "assert", "isinstance", "(", "action_distrib_mu", ",", "torch", ".", "distributions", ".", "Categorical", ")", "\n", "assert", "truncation_threshold", "is", "not", "None", "\n", "assert", "np", ".", "isscalar", "(", "v", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "rho_all_inv", "=", "compute_full_importance", "(", "action_distrib_mu", ",", "action_distrib", ")", "\n", "correction_weight", "=", "(", "\n", "torch", ".", "nn", ".", "functional", ".", "relu", "(", "1", "-", "truncation_threshold", "*", "rho_all_inv", ")", "\n", "*", "action_distrib", ".", "probs", "[", "0", "]", "\n", ")", "\n", "correction_advantage", "=", "action_value", ".", "q_values", "[", "0", "]", "-", "v", "\n", "# Categorical.logits is already normalized, i.e., logits[i] = log(probs[i])", "\n", "", "return", "-", "(", "correction_weight", "*", "action_distrib", ".", "logits", "*", "correction_advantage", ")", ".", "sum", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.compute_policy_gradient_sample_correction": [[49, 70], ["numpy.isscalar", "torch.no_grad", "action_distrib.sample", "acer.compute_importance", "max", "float", "torch.as_tensor", "action_value.evaluate_actions", "action_distrib.log_prob"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.compute_importance", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.log_prob"], ["", "def", "compute_policy_gradient_sample_correction", "(", "\n", "action_distrib", ",", "action_distrib_mu", ",", "action_value", ",", "v", ",", "truncation_threshold", "\n", ")", ":", "\n", "    ", "\"\"\"Compute off-policy bias correction term wrt a sampled action.\"\"\"", "\n", "assert", "np", ".", "isscalar", "(", "v", ")", "\n", "assert", "truncation_threshold", "is", "not", "None", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "sample_action", "=", "action_distrib", ".", "sample", "(", ")", "\n", "rho_dash_inv", "=", "compute_importance", "(", "\n", "action_distrib_mu", ",", "action_distrib", ",", "sample_action", "\n", ")", "\n", "if", "truncation_threshold", ">", "0", "and", "rho_dash_inv", ">=", "1", "/", "truncation_threshold", ":", "\n", "            ", "return", "torch", ".", "as_tensor", "(", "0", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "", "correction_weight", "=", "max", "(", "0", ",", "1", "-", "truncation_threshold", "*", "rho_dash_inv", ")", "\n", "assert", "correction_weight", "<=", "1", "\n", "q", "=", "float", "(", "action_value", ".", "evaluate_actions", "(", "sample_action", ")", ")", "\n", "correction_advantage", "=", "q", "-", "v", "\n", "", "return", "-", "(", "\n", "correction_weight", "\n", "*", "action_distrib", ".", "log_prob", "(", "sample_action", ")", "\n", "*", "correction_advantage", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.compute_policy_gradient_loss": [[73, 116], ["numpy.isscalar", "numpy.isscalar", "action_distrib.log_prob", "acer.compute_importance", "isinstance", "acer.compute_policy_gradient_full_correction", "acer.compute_policy_gradient_sample_correction", "min"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.log_prob", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.compute_importance", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.compute_policy_gradient_full_correction", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.compute_policy_gradient_sample_correction", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min"], ["", "def", "compute_policy_gradient_loss", "(", "\n", "action", ",", "\n", "advantage", ",", "\n", "action_distrib", ",", "\n", "action_distrib_mu", ",", "\n", "action_value", ",", "\n", "v", ",", "\n", "truncation_threshold", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Compute policy gradient loss with off-policy bias correction.\"\"\"", "\n", "assert", "np", ".", "isscalar", "(", "advantage", ")", "\n", "assert", "np", ".", "isscalar", "(", "v", ")", "\n", "log_prob", "=", "action_distrib", ".", "log_prob", "(", "action", ")", "\n", "if", "action_distrib_mu", "is", "not", "None", ":", "\n", "# Off-policy", "\n", "        ", "rho", "=", "compute_importance", "(", "action_distrib", ",", "action_distrib_mu", ",", "action", ")", "\n", "g_loss", "=", "0", "\n", "if", "truncation_threshold", "is", "None", ":", "\n", "            ", "g_loss", "-=", "rho", "*", "log_prob", "*", "advantage", "\n", "", "else", ":", "\n", "# Truncated off-policy policy gradient term", "\n", "            ", "g_loss", "-=", "min", "(", "truncation_threshold", ",", "rho", ")", "*", "log_prob", "*", "advantage", "\n", "# Bias correction term", "\n", "if", "isinstance", "(", "action_distrib", ",", "torch", ".", "distributions", ".", "Categorical", ")", ":", "\n", "                ", "g_loss", "+=", "compute_policy_gradient_full_correction", "(", "\n", "action_distrib", "=", "action_distrib", ",", "\n", "action_distrib_mu", "=", "action_distrib_mu", ",", "\n", "action_value", "=", "action_value", ",", "\n", "v", "=", "v", ",", "\n", "truncation_threshold", "=", "truncation_threshold", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "g_loss", "+=", "compute_policy_gradient_sample_correction", "(", "\n", "action_distrib", "=", "action_distrib", ",", "\n", "action_distrib_mu", "=", "action_distrib_mu", ",", "\n", "action_value", "=", "action_value", ",", "\n", "v", "=", "v", ",", "\n", "truncation_threshold", "=", "truncation_threshold", ",", "\n", ")", "\n", "", "", "", "else", ":", "\n", "# On-policy", "\n", "        ", "g_loss", "=", "-", "log_prob", "*", "advantage", "\n", "", "return", "g_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.get_params_of_distribution": [[172, 181], ["isinstance", "acer.get_params_of_distribution", "isinstance", "isinstance", "NotImplementedError", "type"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.get_params_of_distribution"], ["", "", "def", "get_params_of_distribution", "(", "distrib", ")", ":", "\n", "    ", "if", "isinstance", "(", "distrib", ",", "torch", ".", "distributions", ".", "Independent", ")", ":", "\n", "        ", "return", "get_params_of_distribution", "(", "distrib", ".", "base_dist", ")", "\n", "", "elif", "isinstance", "(", "distrib", ",", "torch", ".", "distributions", ".", "Categorical", ")", ":", "\n", "        ", "return", "(", "distrib", ".", "_param", ",", ")", "\n", "", "elif", "isinstance", "(", "distrib", ",", "torch", ".", "distributions", ".", "Normal", ")", ":", "\n", "        ", "return", "distrib", ".", "loc", ",", "distrib", ".", "scale", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"{} is not supported by ACER\"", ".", "format", "(", "type", "(", "distrib", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.deepcopy_distribution": [[183, 205], ["isinstance", "torch.distributions.Independent", "isinstance", "acer.deepcopy_distribution", "torch.distributions.Categorical", "isinstance", "torch.distributions.Normal", "NotImplementedError", "distrib.logits.clone().detach", "distrib.loc.clone().detach", "distrib.scale.clone().detach", "type", "distrib.logits.clone", "distrib.loc.clone", "distrib.scale.clone"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.deepcopy_distribution"], ["", "", "def", "deepcopy_distribution", "(", "distrib", ")", ":", "\n", "    ", "\"\"\"Deepcopy a PyTorch distribution.\n\n    PyTorch distributions cannot be deepcopied as it is except its tensors are\n    graph leaves.\n    \"\"\"", "\n", "if", "isinstance", "(", "distrib", ",", "torch", ".", "distributions", ".", "Independent", ")", ":", "\n", "        ", "return", "torch", ".", "distributions", ".", "Independent", "(", "\n", "deepcopy_distribution", "(", "distrib", ".", "base_dist", ")", ",", "\n", "distrib", ".", "reinterpreted_batch_ndims", ",", "\n", ")", "\n", "", "elif", "isinstance", "(", "distrib", ",", "torch", ".", "distributions", ".", "Categorical", ")", ":", "\n", "        ", "return", "torch", ".", "distributions", ".", "Categorical", "(", "\n", "logits", "=", "distrib", ".", "logits", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "\n", ")", "\n", "", "elif", "isinstance", "(", "distrib", ",", "torch", ".", "distributions", ".", "Normal", ")", ":", "\n", "        ", "return", "torch", ".", "distributions", ".", "Normal", "(", "\n", "loc", "=", "distrib", ".", "loc", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "\n", "scale", "=", "distrib", ".", "scale", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"{} is not supported by ACER\"", ".", "format", "(", "type", "(", "distrib", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.compute_loss_with_kl_constraint": [[207, 249], ["acer.get_params_of_distribution", "torch.distributions.kl_divergence", "sum", "sum", "zip", "max", "loss.reshape", "float", "torch.autograd.grad", "torch.autograd.grad", "torch.dot", "torch.dot", "zip", "kp.flatten", "gp.flatten", "zip", "kp.flatten", "kp.flatten"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.acer.get_params_of_distribution", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max"], ["", "", "def", "compute_loss_with_kl_constraint", "(", "distrib", ",", "another_distrib", ",", "original_loss", ",", "delta", ")", ":", "\n", "    ", "\"\"\"Compute loss considering a KL constraint.\n\n    Args:\n        distrib (Distribution): Distribution to optimize\n        another_distrib (Distribution): Distribution used to compute KL\n        original_loss (torch.Tensor): Loss to minimize\n        delta (float): Minimum KL difference\n    Returns:\n        torch.Tensor: new loss to minimize\n    \"\"\"", "\n", "distrib_params", "=", "get_params_of_distribution", "(", "distrib", ")", "\n", "for", "param", "in", "distrib_params", ":", "\n", "        ", "assert", "param", ".", "shape", "[", "0", "]", "==", "1", "\n", "assert", "param", ".", "requires_grad", "\n", "# Compute g: a direction to minimize the original loss", "\n", "", "g", "=", "[", "\n", "grad", "[", "0", "]", "\n", "for", "grad", "in", "torch", ".", "autograd", ".", "grad", "(", "\n", "[", "original_loss", "]", ",", "distrib_params", ",", "retain_graph", "=", "True", "\n", ")", "\n", "]", "\n", "\n", "# Compute k: a direction to increase KL div.", "\n", "kl", "=", "torch", ".", "distributions", ".", "kl_divergence", "(", "another_distrib", ",", "distrib", ")", "\n", "k", "=", "[", "\n", "grad", "[", "0", "]", "\n", "for", "grad", "in", "torch", ".", "autograd", ".", "grad", "(", "[", "-", "kl", "]", ",", "distrib_params", ",", "retain_graph", "=", "True", ")", "\n", "]", "\n", "\n", "# Compute z: combination of g and k to keep small KL div.", "\n", "kg_dot", "=", "sum", "(", "torch", ".", "dot", "(", "kp", ".", "flatten", "(", ")", ",", "gp", ".", "flatten", "(", ")", ")", "for", "kp", ",", "gp", "in", "zip", "(", "k", ",", "g", ")", ")", "\n", "kk_dot", "=", "sum", "(", "torch", ".", "dot", "(", "kp", ".", "flatten", "(", ")", ",", "kp", ".", "flatten", "(", ")", ")", "for", "kp", "in", "k", ")", "\n", "if", "kk_dot", ">", "0", ":", "\n", "        ", "k_factor", "=", "max", "(", "0", ",", "(", "(", "kg_dot", "-", "delta", ")", "/", "kk_dot", ")", ")", "\n", "", "else", ":", "\n", "        ", "k_factor", "=", "0", "\n", "", "z", "=", "[", "gp", "-", "k_factor", "*", "kp", "for", "kp", ",", "gp", "in", "zip", "(", "k", ",", "g", ")", "]", "\n", "loss", "=", "0", "\n", "for", "p", ",", "zp", "in", "zip", "(", "distrib_params", ",", "z", ")", ":", "\n", "        ", "loss", "+=", "(", "p", "*", "zp", ")", ".", "sum", "(", ")", "\n", "", "return", "loss", ".", "reshape", "(", "original_loss", ".", "shape", ")", ",", "float", "(", "kl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.categorical_dqn.CategoricalDQN._compute_target_values": [[114, 155], ["torch.stack", "torch.mean", "torch.stack", "torch.mean", "categorical_dqn._apply_categorical_projection", "pfrl.utils.recurrent.pack_and_forward", "torch.mean.size", "elem.max_as_distribution.detach", "categorical_dqn.CategoricalDQN.model", "torch.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.categorical_dqn._apply_categorical_projection", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward"], ["def", "_compute_target_values", "(", "self", ",", "exp_batch", ")", ":", "\n", "        ", "\"\"\"Compute a batch of target return distributions.\"\"\"", "\n", "\n", "batch_next_state", "=", "exp_batch", "[", "\"next_state\"", "]", "\n", "if", "self", ".", "recurrent", ":", "\n", "            ", "target_next_qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "target_model", ",", "\n", "batch_next_state", ",", "\n", "exp_batch", "[", "\"next_recurrent_state\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "target_next_qout", "=", "[", "self", ".", "model", "(", "elem", "[", "0", "]", ",", "elem", "[", "1", "]", ",", "elem", "[", "2", "]", ")", "for", "elem", "in", "batch_next_state", "]", "\n", "\n", "", "batch_rewards", "=", "exp_batch", "[", "\"reward\"", "]", "\n", "batch_terminal", "=", "exp_batch", "[", "\"is_state_terminal\"", "]", "\n", "\n", "batch_size", "=", "exp_batch", "[", "\"reward\"", "]", ".", "shape", "[", "0", "]", "\n", "# \u591a\u667a\u80fd\u4f53\u51b3\u7b56\uff0cz_values\u662f\u5426\u8981\u91c7\u7528\u5e73\u5747\u503c\u8fdb\u884c\u540e\u7eed\u8ba1\u7b97\u5b58\u5728\u7591\u4e49", "\n", "z_values", "=", "[", "elem", ".", "z_values", "for", "elem", "in", "target_next_qout", "]", "\n", "z_values", "=", "torch", ".", "stack", "(", "z_values", ")", "\n", "z_values", "=", "torch", ".", "mean", "(", "z_values", ",", "dim", "=", "0", ")", "\n", "\n", "n_atoms", "=", "z_values", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "# next_q_max: (batch_size, n_atoms)", "\n", "#  \u540c\u6837\u9700\u8981\u5bf9target_q\u503c\u8fdb\u884c\u4e0eq\u503c\u76f8\u540c\u65b9\u6cd5\u7684\u5904\u7406\uff0c\u4ee5\u5b9e\u73b0\u4e0ebatch_size\u7ef4\u5ea6\u7684\u5339\u914d", "\n", "next_q_max", "=", "[", "elem", ".", "max_as_distribution", ".", "detach", "(", ")", "for", "elem", "in", "target_next_qout", "]", "\n", "next_q_max", "=", "torch", ".", "stack", "(", "next_q_max", ")", "\n", "next_q_max", "=", "torch", ".", "mean", "(", "next_q_max", ",", "dim", "=", "1", ")", "\n", "# print(\"next_q_max:\", next_q_max)", "\n", "# next_q_max = target_next_qout.max_as_distribution.detach()", "\n", "assert", "next_q_max", ".", "shape", "==", "(", "batch_size", ",", "n_atoms", ")", ",", "next_q_max", ".", "shape", "\n", "\n", "# Tz: (batch_size, n_atoms)", "\n", "Tz", "=", "(", "\n", "batch_rewards", "[", "...", ",", "None", "]", "\n", "+", "(", "1.0", "-", "batch_terminal", "[", "...", ",", "None", "]", ")", "\n", "*", "torch", ".", "unsqueeze", "(", "exp_batch", "[", "\"discount\"", "]", ",", "1", ")", "\n", "*", "z_values", "[", "None", "]", "\n", ")", "\n", "return", "_apply_categorical_projection", "(", "Tz", ",", "next_q_max", ",", "z_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.categorical_dqn.CategoricalDQN._compute_y_and_t": [[156, 207], ["torch.stack", "torch.mean", "pfrl.utils.recurrent.pack_and_forward", "qout[].z_values.size", "q_eval.evaluate_actions_as_distribution", "torch.mean.append", "torch.no_grad", "categorical_dqn.CategoricalDQN._compute_target_values", "torch.stack", "torch.mean", "categorical_dqn.CategoricalDQN.q_record.extend", "categorical_dqn.CategoricalDQN.model", "q_eval.evaluate_actions", "torch.mean.append", "torch.mean.detach().cpu().numpy().ravel", "torch.mean.detach().cpu().numpy", "torch.mean.detach().cpu", "torch.mean.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DistributionalDiscreteActionValue.evaluate_actions_as_distribution", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dpp.AbstractDPP._compute_target_values", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "_compute_y_and_t", "(", "self", ",", "exp_batch", ")", ":", "\n", "        ", "\"\"\"Compute a batch of predicted/target return distributions.\"\"\"", "\n", "\n", "batch_size", "=", "exp_batch", "[", "\"reward\"", "]", ".", "shape", "[", "0", "]", "\n", "\n", "# Compute Q-values for current states", "\n", "batch_state", "=", "exp_batch", "[", "\"state\"", "]", "\n", "\n", "# (batch_size, n_actions, n_atoms)", "\n", "if", "self", ".", "recurrent", ":", "\n", "            ", "qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "model", ",", "batch_state", ",", "exp_batch", "[", "\"recurrent_state\"", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "qout", "=", "[", "self", ".", "model", "(", "elem", "[", "0", "]", ",", "elem", "[", "1", "]", ",", "elem", "[", "2", "]", ")", "for", "elem", "in", "batch_state", "]", "\n", "# qout = self.model(batch_state)", "\n", "\n", "", "n_atoms", "=", "qout", "[", "0", "]", ".", "z_values", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "batch_actions", "=", "exp_batch", "[", "\"action\"", "]", "\n", "# \u7531\u4e8e\u4f5c\u8005\u7f16\u5199\u7684evaluate_actions\u51fd\u6570\u4e0d\u80fd\u9488\u5bf9GCQ\u8fdb\u884c\u591a\u77e9\u9635\u8f93\u5165\uff0c\u5fc5\u987b\u8981\u5206\u522b\u8ba1\u7b97\u6bcf\u4e2abatch_q\uff0c\u518d\u8fdb\u884c\u5408\u5e76", "\n", "# \u5f00\u53d1\u8fd9\u90e8\u5206\u7a0b\u5e8f\u7684\u539f\u56e0\u548c\u7ecf\u5178DQN\u7b97\u6cd5\u7684\u6539\u8fdb\u76f8\u540c", "\n", "batch_q", "=", "[", "]", "# \u521d\u59cb\u5316batch_q\u77e9\u9635", "\n", "count", "=", "0", "# \u5b9a\u4e49\u9488\u5bf9batch_actions\u7684\u8ba1\u6570\u5668", "\n", "for", "q_eval", "in", "qout", ":", "\n", "            ", "q_e", "=", "q_eval", ".", "evaluate_actions_as_distribution", "(", "batch_actions", "[", "count", "]", ")", "# \u8ba1\u7b97batch\u7f16\u53f7\u4e3acount\u7684q\u503c", "\n", "count", "+=", "1", "\n", "batch_q", ".", "append", "(", "q_e", ")", "\n", "", "batch_q", "=", "torch", ".", "stack", "(", "batch_q", ")", "# \u5c06\u4e0a\u8ff0\u5faa\u73af\u751f\u6210\u7684list\u8f6c\u6362\u4e3atensor\u6570\u636e\u7c7b\u578b", "\n", "batch_q", "=", "torch", ".", "mean", "(", "batch_q", ",", "dim", "=", "1", ")", "# \u8fd9\u90e8\u5206\u8fd8\u9700\u8981\u7ec6\u81f4\u8ba8\u8bba", "\n", "# print(\"batch_q:\", batch_q.shape)", "\n", "assert", "batch_q", ".", "shape", "==", "(", "batch_size", ",", "n_atoms", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batch_q_target", "=", "self", ".", "_compute_target_values", "(", "exp_batch", ")", "\n", "assert", "batch_q_target", ".", "shape", "==", "(", "batch_size", ",", "n_atoms", ")", "\n", "\n", "# for `agent.get_statistics()`", "\n", "# \u91cd\u65b0\u7f16\u5199batch_q_scalars\u7684\u8ba1\u7b97\u7a0b\u5e8f", "\n", "batch_q_scalars", "=", "[", "]", "# \u521d\u59cb\u5316batch_q_scalars\u77e9\u9635", "\n", "count", "=", "0", "# \u5b9a\u4e49\u9488\u5bf9batch_actions\u7684\u8ba1\u6570\u5668", "\n", "for", "q_eval", "in", "qout", ":", "\n", "                ", "q_e", "=", "q_eval", ".", "evaluate_actions", "(", "batch_actions", "[", "count", "]", ")", "\n", "count", "+=", "1", "\n", "batch_q_scalars", ".", "append", "(", "q_e", ")", "\n", "", "batch_q_scalars", "=", "torch", ".", "stack", "(", "batch_q_scalars", ")", "\n", "batch_q_scalars", "=", "torch", ".", "mean", "(", "batch_q_scalars", ",", "dim", "=", "1", ")", "\n", "# batch_q_scalars = qout.evaluate_actions(batch_actions)", "\n", "self", ".", "q_record", ".", "extend", "(", "batch_q_scalars", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "ravel", "(", ")", ")", "\n", "\n", "", "return", "batch_q", ",", "batch_q_target", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.categorical_dqn.CategoricalDQN._compute_loss": [[208, 234], ["categorical_dqn.CategoricalDQN._compute_y_and_t", "torch.log", "eltwise_loss.sum", "delta.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "categorical_dqn.compute_weighted_value_loss", "categorical_dqn.compute_value_loss", "torch.clamp", "errors_out.append", "delta.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "delta.detach().cpu().numpy.detach().cpu().numpy.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.pal.PAL._compute_y_and_t", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.compute_weighted_value_loss", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.compute_value_loss", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "_compute_loss", "(", "self", ",", "exp_batch", ",", "errors_out", "=", "None", ")", ":", "\n", "        ", "\"\"\"Compute a loss of categorical DQN.\"\"\"", "\n", "y", ",", "t", "=", "self", ".", "_compute_y_and_t", "(", "exp_batch", ")", "\n", "# Minimize the cross entropy", "\n", "# y is clipped to avoid log(0)", "\n", "eltwise_loss", "=", "-", "t", "*", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "y", ",", "1e-10", ",", "1.0", ")", ")", "\n", "\n", "if", "errors_out", "is", "not", "None", ":", "\n", "            ", "del", "errors_out", "[", ":", "]", "\n", "# The loss per example is the sum of the atom-wise loss", "\n", "# Prioritization by KL-divergence", "\n", "delta", "=", "eltwise_loss", ".", "sum", "(", "dim", "=", "1", ")", "\n", "delta", "=", "delta", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "e", "in", "delta", ":", "\n", "                ", "errors_out", ".", "append", "(", "e", ")", "\n", "\n", "", "", "if", "\"weights\"", "in", "exp_batch", ":", "\n", "            ", "return", "compute_weighted_value_loss", "(", "\n", "eltwise_loss", ",", "\n", "y", ".", "shape", "[", "0", "]", ",", "\n", "exp_batch", "[", "\"weights\"", "]", ",", "\n", "batch_accumulator", "=", "self", ".", "batch_accumulator", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "compute_value_loss", "(", "\n", "eltwise_loss", ",", "batch_accumulator", "=", "self", ".", "batch_accumulator", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.categorical_dqn._apply_categorical_projection": [[7, 58], ["torch.clamp", "torch.clamp", "torch.zeros", "torch.zeros.view().scatter_add_", "torch.zeros.view().scatter_add_", "torch.floor", "torch.ceil", "torch.arange", "torch.zeros.view", "torch.zeros.view", "l.long", "u.long"], "function", ["None"], ["def", "_apply_categorical_projection", "(", "y", ",", "y_probs", ",", "z", ")", ":", "\n", "    ", "\"\"\"Apply categorical projection.\n\n    See Algorithm 1 in https://arxiv.org/abs/1707.06887.\n\n    Args:\n        y (ndarray): Values of atoms before projection. Its shape must be\n            (batch_size, n_atoms).b n\n        y_probs (ndarray): Probabilities of atoms whose values are y.\n            Its shape must be (batch_size, n_atoms).\n        z (ndarray): Values of atoms after projection. Its shape must be\n            (n_atoms,). It is assumed that the values are sorted in ascending\n            order and evenly spaced.\n\n    Returns:\n        ndarray: Probabilities of atoms whose values are z.\n    \"\"\"", "\n", "batch_size", ",", "n_atoms", "=", "y", ".", "shape", "\n", "assert", "z", ".", "shape", "==", "(", "n_atoms", ",", ")", "\n", "assert", "y_probs", ".", "shape", "==", "(", "batch_size", ",", "n_atoms", ")", "\n", "delta_z", "=", "z", "[", "1", "]", "-", "z", "[", "0", "]", "\n", "v_min", "=", "z", "[", "0", "]", "\n", "v_max", "=", "z", "[", "-", "1", "]", "\n", "y", "=", "torch", ".", "clamp", "(", "y", ",", "v_min", ",", "v_max", ")", "\n", "\n", "# bj: (batch_size, n_atoms)", "\n", "bj", "=", "(", "y", "-", "v_min", ")", "/", "delta_z", "\n", "assert", "bj", ".", "shape", "==", "(", "batch_size", ",", "n_atoms", ")", "\n", "# Avoid the error caused by inexact delta_z", "\n", "bj", "=", "torch", ".", "clamp", "(", "bj", ",", "0", ",", "n_atoms", "-", "1", ")", "\n", "\n", "# l, u: (batch_size, n_atoms)", "\n", "l", ",", "u", "=", "torch", ".", "floor", "(", "bj", ")", ",", "torch", ".", "ceil", "(", "bj", ")", "\n", "assert", "l", ".", "shape", "==", "(", "batch_size", ",", "n_atoms", ")", "\n", "assert", "u", ".", "shape", "==", "(", "batch_size", ",", "n_atoms", ")", "\n", "\n", "z_probs", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "n_atoms", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "y", ".", "device", ")", "\n", "offset", "=", "torch", ".", "arange", "(", "\n", "0", ",", "batch_size", "*", "n_atoms", ",", "n_atoms", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "y", ".", "device", "\n", ")", "[", "...", ",", "None", "]", "\n", "# Accumulate m_l", "\n", "# Note that u - bj in the original paper is replaced with 1 - (bj - l) to", "\n", "# deal with the case when bj is an integer, i.e., l = u = bj", "\n", "z_probs", ".", "view", "(", "-", "1", ")", ".", "scatter_add_", "(", "\n", "0", ",", "(", "l", ".", "long", "(", ")", "+", "offset", ")", ".", "view", "(", "-", "1", ")", ",", "(", "y_probs", "*", "(", "1", "-", "(", "bj", "-", "l", ")", ")", ")", ".", "view", "(", "-", "1", ")", "\n", ")", "\n", "# Accumulate m_u", "\n", "z_probs", ".", "view", "(", "-", "1", ")", ".", "scatter_add_", "(", "\n", "0", ",", "(", "u", ".", "long", "(", ")", "+", "offset", ")", ".", "view", "(", "-", "1", ")", ",", "(", "y_probs", "*", "(", "bj", "-", "l", ")", ")", ".", "view", "(", "-", "1", ")", "\n", ")", "\n", "return", "z_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.categorical_dqn.compute_value_loss": [[60, 77], ["eltwise_loss.sum", "eltwise_loss.sum().mean", "eltwise_loss.sum"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "def", "compute_value_loss", "(", "eltwise_loss", ",", "batch_accumulator", "=", "\"mean\"", ")", ":", "\n", "    ", "\"\"\"Compute a loss for value prediction problem.\n\n    Args:\n        eltwise_loss (Variable): Element-wise loss per example per atom\n        batch_accumulator (str): 'mean' or 'sum'. 'mean' will use the mean of\n            the loss values in a batch. 'sum' will use the sum.\n    Returns:\n        (Variable) scalar loss\n    \"\"\"", "\n", "assert", "batch_accumulator", "in", "(", "\"mean\"", ",", "\"sum\"", ")", "\n", "\n", "if", "batch_accumulator", "==", "\"sum\"", ":", "\n", "        ", "loss", "=", "eltwise_loss", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "eltwise_loss", ".", "sum", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.categorical_dqn.compute_weighted_value_loss": [[79, 103], ["weights.to.to", "torch.matmul", "eltwise_loss.sum"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "def", "compute_weighted_value_loss", "(", "\n", "eltwise_loss", ",", "batch_size", ",", "weights", ",", "batch_accumulator", "=", "\"mean\"", "\n", ")", ":", "\n", "    ", "\"\"\"Compute a loss for value prediction problem.\n\n    Args:\n        eltwise_loss (Variable): Element-wise loss per example per atom\n        weights (ndarray): Weights for y, t.\n        batch_accumulator (str): 'mean' will divide loss by batchsize\n    Returns:\n        (Variable) scalar loss\n    \"\"\"", "\n", "assert", "batch_accumulator", "in", "(", "\"mean\"", ",", "\"sum\"", ")", "\n", "\n", "# eltwise_loss is (batchsize, n_atoms) array of losses", "\n", "# weights is an array of shape (batch_size)", "\n", "# sum loss across atoms and then apply weight per example in batch", "\n", "weights", "=", "weights", ".", "to", "(", "eltwise_loss", ".", "device", ")", "\n", "loss_sum", "=", "torch", ".", "matmul", "(", "eltwise_loss", ".", "sum", "(", "dim", "=", "1", ")", ",", "weights", ")", "\n", "if", "batch_accumulator", "==", "\"mean\"", ":", "\n", "        ", "loss", "=", "loss_sum", "/", "batch_size", "\n", "", "elif", "batch_accumulator", "==", "\"sum\"", ":", "\n", "        ", "loss", "=", "loss_sum", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.CosineBasisLinear.__init__": [[41, 46], ["torch.nn.Module.__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "n_basis_functions", ",", "out_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "n_basis_functions", ",", "out_size", ")", "\n", "self", ".", "n_basis_functions", "=", "n_basis_functions", "\n", "self", ".", "out_size", "=", "out_size", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.CosineBasisLinear.forward": [[47, 61], ["iqn.cosine_basis_functions", "h.reshape.reshape.reshape", "iqn.CosineBasisLinear.linear", "out.reshape.reshape.reshape"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.cosine_basis_functions"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Evaluate.\n\n        Args:\n            x (torch.Tensor): Input.\n\n        Returns:\n            torch.Tensor: Output with shape of (x.shape + (out_size,)).\n        \"\"\"", "\n", "h", "=", "cosine_basis_functions", "(", "x", ",", "self", ".", "n_basis_functions", ")", "\n", "h", "=", "h", ".", "reshape", "(", "-", "1", ",", "self", ".", "n_basis_functions", ")", "\n", "out", "=", "self", ".", "linear", "(", "h", ")", "\n", "out", "=", "out", ".", "reshape", "(", "*", "x", ".", "shape", ",", "self", ".", "out_size", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.ImplicitQuantileQFunction.__init__": [[100, 105], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "psi", ",", "phi", ",", "f", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "psi", "=", "psi", "\n", "self", ".", "phi", "=", "phi", "\n", "self", ".", "f", "=", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.ImplicitQuantileQFunction.forward": [[106, 125], ["iqn.ImplicitQuantileQFunction.psi", "iqn._evaluate_psi_x_with_quantile_thresholds"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn._evaluate_psi_x_with_quantile_thresholds"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Evaluate given observations.\n\n        Args:\n            x (torch.Tensor): Batch of observations.\n        Returns:\n            callable: (batch_size, taus) -> (batch_size, taus, n_actions)\n        \"\"\"", "\n", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "psi_x", "=", "self", ".", "psi", "(", "x", ")", "\n", "assert", "psi_x", ".", "ndim", "==", "2", "\n", "assert", "psi_x", ".", "shape", "[", "0", "]", "==", "batch_size", "\n", "\n", "def", "evaluate_with_quantile_thresholds", "(", "taus", ")", ":", "\n", "            ", "return", "_evaluate_psi_x_with_quantile_thresholds", "(", "\n", "psi_x", ",", "self", ".", "phi", ",", "self", ".", "f", ",", "taus", "\n", ")", "\n", "\n", "", "return", "evaluate_with_quantile_thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.RecurrentImplicitQuantileQFunction.__init__": [[145, 150], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "psi", ",", "phi", ",", "f", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "psi", "=", "psi", "\n", "self", ".", "phi", "=", "phi", "\n", "self", ".", "f", "=", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.RecurrentImplicitQuantileQFunction.forward": [[151, 174], ["iqn.RecurrentImplicitQuantileQFunction.psi", "isinstance", "iqn._evaluate_psi_x_with_quantile_thresholds"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn._evaluate_psi_x_with_quantile_thresholds"], ["", "def", "forward", "(", "self", ",", "x", ",", "recurrent_state", ")", ":", "\n", "        ", "\"\"\"Evaluate given observations.\n\n        Args:\n            x (object): Batched sequences of observations.\n            recurrent_state (object): Batched recurrent states.\n\n        Returns:\n            callable: (batch_size, taus) -> (batch_size, taus, n_actions)\n            object: new recurrent states\n        \"\"\"", "\n", "psi_x", ",", "recurrent_state", "=", "self", ".", "psi", "(", "x", ",", "recurrent_state", ")", "\n", "# unwrap PackedSequence", "\n", "assert", "isinstance", "(", "psi_x", ",", "nn", ".", "utils", ".", "rnn", ".", "PackedSequence", ")", "\n", "psi_x", "=", "psi_x", ".", "data", "\n", "assert", "psi_x", ".", "ndim", "==", "2", "\n", "\n", "def", "evaluate_with_quantile_thresholds", "(", "taus", ")", ":", "\n", "            ", "return", "_evaluate_psi_x_with_quantile_thresholds", "(", "\n", "psi_x", ",", "self", ".", "phi", ",", "self", ".", "f", ",", "taus", "\n", ")", "\n", "\n", "", "return", "evaluate_with_quantile_thresholds", ",", "recurrent_state", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.IQN.__init__": [[280, 288], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "pfrl.agents.dqn.DQN.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# N=N'=64 and K=32 were used in the IQN paper's experiments", "\n", "# (personal communication)", "\n", "        ", "self", ".", "quantile_thresholds_N", "=", "kwargs", ".", "pop", "(", "\"quantile_thresholds_N\"", ",", "64", ")", "\n", "self", ".", "quantile_thresholds_N_prime", "=", "kwargs", ".", "pop", "(", "\"quantile_thresholds_N_prime\"", ",", "64", ")", "\n", "self", ".", "quantile_thresholds_K", "=", "kwargs", ".", "pop", "(", "\"quantile_thresholds_K\"", ",", "32", ")", "\n", "self", ".", "act_deterministically", "=", "kwargs", ".", "pop", "(", "\"act_deterministically\"", ",", "False", ")", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.IQN._compute_target_values": [[289, 335], ["len", "torch.rand", "torch.rand", "iqn.IQN.evaluate_actions_as_quantiles", "batch_rewards.unsqueeze.unsqueeze.unsqueeze", "batch_terminal.unsqueeze.unsqueeze.unsqueeze", "batch_discount.unsqueeze.unsqueeze.unsqueeze", "pfrl.utils.recurrent.pack_and_forward", "iqn.IQN.target_model", "iqn.IQN.", "iqn.IQN."], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.QuantileDiscreteActionValue.evaluate_actions_as_quantiles", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward"], ["", "def", "_compute_target_values", "(", "self", ",", "exp_batch", ")", ":", "\n", "        ", "\"\"\"Compute a batch of target return distributions.\n\n        Returns:\n            torch.Tensor: (batch_size, N_prime).\n        \"\"\"", "\n", "batch_next_state", "=", "exp_batch", "[", "\"next_state\"", "]", "\n", "batch_size", "=", "len", "(", "exp_batch", "[", "\"reward\"", "]", ")", "\n", "taus_tilde", "=", "torch", ".", "rand", "(", "\n", "batch_size", ",", "\n", "self", ".", "quantile_thresholds_K", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", "\n", "\n", "if", "self", ".", "recurrent", ":", "\n", "            ", "target_next_tau2av", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "target_model", ",", "\n", "batch_next_state", ",", "\n", "exp_batch", "[", "\"next_recurrent_state\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "target_next_tau2av", "=", "self", ".", "target_model", "(", "batch_next_state", ")", "\n", "", "greedy_actions", "=", "target_next_tau2av", "(", "taus_tilde", ")", ".", "greedy_actions", "\n", "taus_prime", "=", "torch", ".", "rand", "(", "\n", "batch_size", ",", "\n", "self", ".", "quantile_thresholds_N_prime", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", "\n", "target_next_maxz", "=", "target_next_tau2av", "(", "taus_prime", ")", ".", "evaluate_actions_as_quantiles", "(", "\n", "greedy_actions", "\n", ")", "\n", "\n", "batch_rewards", "=", "exp_batch", "[", "\"reward\"", "]", "\n", "batch_terminal", "=", "exp_batch", "[", "\"is_state_terminal\"", "]", "\n", "batch_discount", "=", "exp_batch", "[", "\"discount\"", "]", "\n", "assert", "batch_rewards", ".", "shape", "==", "(", "batch_size", ",", ")", "\n", "assert", "batch_terminal", ".", "shape", "==", "(", "batch_size", ",", ")", "\n", "assert", "batch_discount", ".", "shape", "==", "(", "batch_size", ",", ")", "\n", "batch_rewards", "=", "batch_rewards", ".", "unsqueeze", "(", "-", "1", ")", "\n", "batch_terminal", "=", "batch_terminal", ".", "unsqueeze", "(", "-", "1", ")", "\n", "batch_discount", "=", "batch_discount", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "return", "(", "\n", "batch_rewards", "+", "batch_discount", "*", "(", "1.0", "-", "batch_terminal", ")", "*", "target_next_maxz", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.IQN._compute_y_and_taus": [[337, 372], ["torch.rand", "iqn.IQN.", "iqn.IQN.evaluate_actions_as_quantiles", "iqn.IQN.q_record.extend", "pfrl.utils.recurrent.pack_and_forward", "iqn.IQN.model", "iqn.IQN.q_values.detach().cpu().numpy().ravel", "iqn.IQN.q_values.detach().cpu().numpy", "iqn.IQN.q_values.detach().cpu", "iqn.IQN.q_values.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.QuantileDiscreteActionValue.evaluate_actions_as_quantiles", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward"], ["", "def", "_compute_y_and_taus", "(", "self", ",", "exp_batch", ")", ":", "\n", "        ", "\"\"\"Compute a batch of predicted return distributions.\n\n        Returns:\n            torch.Tensor: Predicted return distributions.\n                (batch_size, N).\n        \"\"\"", "\n", "\n", "batch_size", "=", "exp_batch", "[", "\"reward\"", "]", ".", "shape", "[", "0", "]", "\n", "\n", "# Compute Q-values for current states", "\n", "batch_state", "=", "exp_batch", "[", "\"state\"", "]", "\n", "\n", "# (batch_size, n_actions, n_atoms)", "\n", "if", "self", ".", "recurrent", ":", "\n", "            ", "tau2av", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "model", ",", "\n", "batch_state", ",", "\n", "exp_batch", "[", "\"recurrent_state\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "tau2av", "=", "self", ".", "model", "(", "batch_state", ")", "\n", "", "taus", "=", "torch", ".", "rand", "(", "\n", "batch_size", ",", "\n", "self", ".", "quantile_thresholds_N", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", "\n", "av", "=", "tau2av", "(", "taus", ")", "\n", "batch_actions", "=", "exp_batch", "[", "\"action\"", "]", "\n", "y", "=", "av", ".", "evaluate_actions_as_quantiles", "(", "batch_actions", ")", "\n", "\n", "self", ".", "q_record", ".", "extend", "(", "av", ".", "q_values", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "ravel", "(", ")", ")", "\n", "\n", "return", "y", ",", "taus", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.IQN._compute_loss": [[373, 400], ["iqn.IQN._compute_y_and_taus", "iqn.compute_eltwise_huber_quantile_loss", "torch.no_grad", "iqn.IQN._compute_target_values", "iqn.compute_weighted_value_loss", "iqn.compute_value_loss", "torch.no_grad", "compute_eltwise_huber_quantile_loss.mean", "errors_out.extend", "compute_eltwise_huber_quantile_loss.mean.detach().cpu().numpy", "compute_eltwise_huber_quantile_loss.mean.detach().cpu", "compute_eltwise_huber_quantile_loss.mean.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.IQN._compute_y_and_taus", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.compute_eltwise_huber_quantile_loss", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dpp.AbstractDPP._compute_target_values", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.compute_weighted_value_loss", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.compute_value_loss", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend"], ["", "def", "_compute_loss", "(", "self", ",", "exp_batch", ",", "errors_out", "=", "None", ")", ":", "\n", "        ", "\"\"\"Compute a loss.\n\n        Returns:\n            Returns:\n                torch.Tensor: Scalar loss.\n        \"\"\"", "\n", "y", ",", "taus", "=", "self", ".", "_compute_y_and_taus", "(", "exp_batch", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "t", "=", "self", ".", "_compute_target_values", "(", "exp_batch", ")", "\n", "\n", "", "eltwise_loss", "=", "compute_eltwise_huber_quantile_loss", "(", "y", ",", "t", ",", "taus", ")", "\n", "if", "errors_out", "is", "not", "None", ":", "\n", "            ", "del", "errors_out", "[", ":", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "delta", "=", "eltwise_loss", ".", "mean", "(", "(", "1", ",", "2", ")", ")", "\n", "errors_out", ".", "extend", "(", "delta", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "if", "\"weights\"", "in", "exp_batch", ":", "\n", "            ", "return", "compute_weighted_value_loss", "(", "\n", "eltwise_loss", ",", "\n", "exp_batch", "[", "\"weights\"", "]", ",", "\n", "batch_accumulator", "=", "self", ".", "batch_accumulator", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "compute_value_loss", "(", "\n", "eltwise_loss", ",", "batch_accumulator", "=", "self", ".", "batch_accumulator", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.IQN._evaluate_model_and_update_recurrent_states": [[402, 434], ["iqn.IQN.batch_states", "iqn.IQN.", "iqn.IQN.model", "torch.linspace().repeat", "torch.rand", "pfrl.utils.recurrent.one_step_forward", "pfrl.utils.recurrent.one_step_forward", "len", "len", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward"], ["", "", "def", "_evaluate_model_and_update_recurrent_states", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "batch_xs", "=", "self", ".", "batch_states", "(", "batch_obs", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "if", "self", ".", "recurrent", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "self", ".", "train_prev_recurrent_states", "=", "self", ".", "train_recurrent_states", "\n", "tau2av", ",", "self", ".", "train_recurrent_states", "=", "one_step_forward", "(", "\n", "self", ".", "model", ",", "batch_xs", ",", "self", ".", "train_recurrent_states", "\n", ")", "\n", "", "else", ":", "\n", "                ", "tau2av", ",", "self", ".", "test_recurrent_states", "=", "one_step_forward", "(", "\n", "self", ".", "model", ",", "batch_xs", ",", "self", ".", "test_recurrent_states", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "tau2av", "=", "self", ".", "model", "(", "batch_xs", ")", "\n", "", "if", "not", "self", ".", "training", "and", "self", ".", "act_deterministically", ":", "\n", "# Instead of uniform sampling, use a deterministic sequence of", "\n", "# equally spaced numbers from 0 to 1 as quantile thresholds.", "\n", "            ", "taus_tilde", "=", "torch", ".", "linspace", "(", "\n", "start", "=", "0", ",", "\n", "end", "=", "1", ",", "\n", "steps", "=", "self", ".", "quantile_thresholds_K", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", ".", "repeat", "(", "len", "(", "batch_obs", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "taus_tilde", "=", "torch", ".", "rand", "(", "\n", "len", "(", "batch_obs", ")", ",", "\n", "self", ".", "quantile_thresholds_K", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", "\n", "", "return", "tau2av", "(", "taus_tilde", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.cosine_basis_functions": [[11, 30], ["torch.cos", "torch.arange"], "function", ["None"], ["def", "cosine_basis_functions", "(", "x", ",", "n_basis_functions", "=", "64", ")", ":", "\n", "    ", "\"\"\"Cosine basis functions used to embed quantile thresholds.\n\n    Args:\n        x (torch.Tensor): Input.\n        n_basis_functions (int): Number of cosine basis functions.\n\n    Returns:\n        ndarray: Embedding with shape of (x.shape + (n_basis_functions,)).\n    \"\"\"", "\n", "# Equation (4) in the IQN paper has an error stating i=0,...,n-1.", "\n", "# Actually i=1,...,n is correct (personal communication)", "\n", "i_pi", "=", "(", "\n", "torch", ".", "arange", "(", "1", ",", "n_basis_functions", "+", "1", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "x", ".", "device", ")", "\n", "*", "np", ".", "pi", "\n", ")", "\n", "embedding", "=", "torch", ".", "cos", "(", "x", "[", "...", ",", "None", "]", "*", "i_pi", ")", "\n", "assert", "embedding", ".", "shape", "==", "x", ".", "shape", "+", "(", "n_basis_functions", ",", ")", "\n", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn._evaluate_psi_x_with_quantile_thresholds": [[63, 81], ["phi", "h.reshape.reshape", "f", "h.reshape.reshape", "pfrl.action_value.QuantileDiscreteActionValue", "psi_x.unsqueeze"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.atari.train_a2c_ale.phi"], ["", "", "def", "_evaluate_psi_x_with_quantile_thresholds", "(", "psi_x", ",", "phi", ",", "f", ",", "taus", ")", ":", "\n", "    ", "assert", "psi_x", ".", "ndim", "==", "2", "\n", "batch_size", ",", "hidden_size", "=", "psi_x", ".", "shape", "\n", "assert", "taus", ".", "ndim", "==", "2", "\n", "assert", "taus", ".", "shape", "[", "0", "]", "==", "batch_size", "\n", "n_taus", "=", "taus", ".", "shape", "[", "1", "]", "\n", "phi_taus", "=", "phi", "(", "taus", ")", "\n", "assert", "phi_taus", ".", "ndim", "==", "3", "\n", "assert", "phi_taus", ".", "shape", "==", "(", "batch_size", ",", "n_taus", ",", "hidden_size", ")", "\n", "h", "=", "psi_x", ".", "unsqueeze", "(", "1", ")", "*", "phi_taus", "\n", "h", "=", "h", ".", "reshape", "(", "-", "1", ",", "hidden_size", ")", "\n", "assert", "h", ".", "shape", "==", "(", "batch_size", "*", "n_taus", ",", "hidden_size", ")", "\n", "h", "=", "f", "(", "h", ")", "\n", "assert", "h", ".", "ndim", "==", "2", "\n", "assert", "h", ".", "shape", "[", "0", "]", "==", "batch_size", "*", "n_taus", "\n", "n_actions", "=", "h", ".", "shape", "[", "-", "1", "]", "\n", "h", "=", "h", ".", "reshape", "(", "batch_size", ",", "n_taus", ",", "n_actions", ")", "\n", "return", "QuantileDiscreteActionValue", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.compute_eltwise_huber_quantile_loss": [[176, 209], ["y.unsqueeze.unsqueeze", "t.unsqueeze.unsqueeze", "taus.unsqueeze.unsqueeze", "torch.broadcast_tensors", "torch.nn.functional.smooth_l1_loss", "torch.abs"], "function", ["None"], ["", "", "def", "compute_eltwise_huber_quantile_loss", "(", "y", ",", "t", ",", "taus", ")", ":", "\n", "    ", "\"\"\"Compute elementwise Huber losses for quantile regression.\n\n    This is based on Algorithm 1 of https://arxiv.org/abs/1806.06923.\n\n    This function assumes that, both of the two kinds of quantile thresholds,\n    taus (used to compute y) and taus_prime (used to compute t) are iid samples\n    from U([0,1]).\n\n    Args:\n        y (torch.Tensor): Quantile prediction from taus as a\n            (batch_size, N)-shaped array.\n        t (torch.Tensor or ndarray): Target values for quantile regression\n            as a (batch_size, N_prime)-array.\n        taus (ndarray): Quantile thresholds used to compute y as a\n            (batch_size, N)-shaped array.\n\n    Returns:\n        torch.Tensor: Loss (batch_size, N, N_prime)\n    \"\"\"", "\n", "assert", "y", ".", "shape", "==", "taus", ".", "shape", "\n", "# (batch_size, N) -> (batch_size, N, 1)", "\n", "y", "=", "y", ".", "unsqueeze", "(", "2", ")", "\n", "# (batch_size, N_prime) -> (batch_size, 1, N_prime)", "\n", "t", "=", "t", ".", "unsqueeze", "(", "1", ")", "\n", "# (batch_size, N) -> (batch_size, N, 1)", "\n", "taus", "=", "taus", ".", "unsqueeze", "(", "2", ")", "\n", "# Broadcast to (batch_size, N, N_prime)", "\n", "y", ",", "t", ",", "taus", "=", "torch", ".", "broadcast_tensors", "(", "y", ",", "t", ",", "taus", ")", "\n", "I_delta_lt_0", "=", "(", "t", "<", "y", ")", ".", "float", "(", ")", "\n", "eltwise_huber_loss", "=", "nn", ".", "functional", ".", "smooth_l1_loss", "(", "y", ",", "t", ",", "reduction", "=", "\"none\"", ")", "\n", "eltwise_loss", "=", "torch", ".", "abs", "(", "taus", "-", "I_delta_lt_0", ")", "*", "eltwise_huber_loss", "\n", "return", "eltwise_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.compute_value_loss": [[211, 232], ["eltwise_loss.mean().sum", "eltwise_loss.mean().sum", "eltwise_loss.mean", "eltwise_loss.mean"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["", "def", "compute_value_loss", "(", "eltwise_loss", ",", "batch_accumulator", "=", "\"mean\"", ")", ":", "\n", "    ", "\"\"\"Compute a loss for value prediction problem.\n\n    Args:\n        eltwise_loss (Variable): Element-wise loss per example\n        batch_accumulator (str): 'mean' or 'sum'. 'mean' will use the mean of\n            the loss values in a batch. 'sum' will use the sum.\n    Returns:\n        (Variable) scalar loss\n    \"\"\"", "\n", "assert", "batch_accumulator", "in", "(", "\"mean\"", ",", "\"sum\"", ")", "\n", "assert", "eltwise_loss", ".", "ndim", "==", "3", "\n", "\n", "if", "batch_accumulator", "==", "\"sum\"", ":", "\n", "# mean over N_prime, then sum over (batch_size, N)", "\n", "        ", "loss", "=", "eltwise_loss", ".", "mean", "(", "2", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "# mean over (batch_size, N_prime), then sum over N", "\n", "        ", "loss", "=", "eltwise_loss", ".", "mean", "(", "(", "0", ",", "2", ")", ")", ".", "sum", "(", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.iqn.compute_weighted_value_loss": [[234, 256], ["torch.matmul", "eltwise_loss.mean().sum", "eltwise_loss.mean"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["", "def", "compute_weighted_value_loss", "(", "eltwise_loss", ",", "weights", ",", "batch_accumulator", "=", "\"mean\"", ")", ":", "\n", "    ", "\"\"\"Compute a loss for value prediction problem.\n\n    Args:\n        eltwise_loss (Variable): Element-wise loss per example\n        weights (ndarray): Weights for y, t.\n        batch_accumulator (str): 'mean' will divide loss by batchsize\n    Returns:\n        (Variable) scalar loss\n    \"\"\"", "\n", "batch_size", "=", "eltwise_loss", ".", "shape", "[", "0", "]", "\n", "assert", "batch_accumulator", "in", "(", "\"mean\"", ",", "\"sum\"", ")", "\n", "assert", "eltwise_loss", ".", "ndim", "==", "3", "\n", "# eltwise_loss is (batchsize, n , n') array of losses", "\n", "# weights is an array of shape (batch_size)", "\n", "# apply weights per example in batch", "\n", "loss_sum", "=", "torch", ".", "matmul", "(", "eltwise_loss", ".", "mean", "(", "2", ")", ".", "sum", "(", "1", ")", ",", "weights", ")", "\n", "if", "batch_accumulator", "==", "\"mean\"", ":", "\n", "        ", "loss", "=", "loss_sum", "/", "batch_size", "\n", "", "elif", "batch_accumulator", "==", "\"sum\"", ":", "\n", "        ", "loss", "=", "loss_sum", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg.DDPG.__init__": [[60, 138], ["logging.getLogger", "torch.nn.ModuleList", "pfrl.replay_buffer.ReplayUpdater", "copy.deepcopy", "ddpg.DDPG.target_model.eval", "collections.deque", "collections.deque", "collections.deque", "ddpg.DDPG.sync_target_network", "torch.cuda.is_available", "torch.device", "ddpg.DDPG.model.to", "torch.device"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.sync_target_network", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["def", "__init__", "(", "\n", "self", ",", "\n", "policy", ",", "\n", "q_func", ",", "\n", "actor_optimizer", ",", "\n", "critic_optimizer", ",", "\n", "replay_buffer", ",", "\n", "gamma", ",", "\n", "explorer", ",", "\n", "gpu", "=", "None", ",", "\n", "replay_start_size", "=", "50000", ",", "\n", "minibatch_size", "=", "32", ",", "\n", "update_interval", "=", "1", ",", "\n", "target_update_interval", "=", "10000", ",", "\n", "phi", "=", "lambda", "x", ":", "x", ",", "\n", "target_update_method", "=", "\"hard\"", ",", "\n", "soft_update_tau", "=", "1e-2", ",", "\n", "n_times_update", "=", "1", ",", "\n", "recurrent", "=", "False", ",", "\n", "episodic_update_len", "=", "None", ",", "\n", "logger", "=", "getLogger", "(", "__name__", ")", ",", "\n", "batch_states", "=", "batch_states", ",", "\n", "burnin_action_func", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "model", "=", "nn", ".", "ModuleList", "(", "[", "policy", ",", "q_func", "]", ")", "\n", "if", "gpu", "is", "not", "None", "and", "gpu", ">=", "0", ":", "\n", "            ", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "", "self", ".", "replay_buffer", "=", "replay_buffer", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "explorer", "=", "explorer", "\n", "self", ".", "gpu", "=", "gpu", "\n", "self", ".", "target_update_interval", "=", "target_update_interval", "\n", "self", ".", "phi", "=", "phi", "\n", "self", ".", "target_update_method", "=", "target_update_method", "\n", "self", ".", "soft_update_tau", "=", "soft_update_tau", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "actor_optimizer", "=", "actor_optimizer", "\n", "self", ".", "critic_optimizer", "=", "critic_optimizer", "\n", "self", ".", "recurrent", "=", "recurrent", "\n", "assert", "not", "self", ".", "recurrent", ",", "\"recurrent=True is not yet implemented\"", "\n", "if", "self", ".", "recurrent", ":", "\n", "            ", "update_func", "=", "self", ".", "update_from_episodes", "\n", "", "else", ":", "\n", "            ", "update_func", "=", "self", ".", "update", "\n", "", "self", ".", "replay_updater", "=", "ReplayUpdater", "(", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", "update_func", "=", "update_func", ",", "\n", "batchsize", "=", "minibatch_size", ",", "\n", "episodic_update", "=", "recurrent", ",", "\n", "episodic_update_len", "=", "episodic_update_len", ",", "\n", "n_times_update", "=", "n_times_update", ",", "\n", "replay_start_size", "=", "replay_start_size", ",", "\n", "update_interval", "=", "update_interval", ",", "\n", ")", "\n", "self", ".", "batch_states", "=", "batch_states", "\n", "self", ".", "burnin_action_func", "=", "burnin_action_func", "\n", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "last_state", "=", "None", "\n", "self", ".", "last_action", "=", "None", "\n", "self", ".", "target_model", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "self", ".", "target_model", ".", "eval", "(", ")", "\n", "self", ".", "q_record", "=", "collections", ".", "deque", "(", "maxlen", "=", "1000", ")", "\n", "self", ".", "actor_loss_record", "=", "collections", ".", "deque", "(", "maxlen", "=", "100", ")", "\n", "self", ".", "critic_loss_record", "=", "collections", ".", "deque", "(", "maxlen", "=", "100", ")", "\n", "self", ".", "n_updates", "=", "0", "\n", "\n", "# Aliases for convenience", "\n", "self", ".", "policy", ",", "self", ".", "q_function", "=", "self", ".", "model", "\n", "self", ".", "target_policy", ",", "self", ".", "target_q_function", "=", "self", ".", "target_model", "\n", "\n", "self", ".", "sync_target_network", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg.DDPG.sync_target_network": [[139, 146], ["pfrl.utils.copy_param.synchronize_parameters"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.synchronize_parameters"], ["", "def", "sync_target_network", "(", "self", ")", ":", "\n", "        ", "\"\"\"Synchronize target network with current network.\"\"\"", "\n", "synchronize_parameters", "(", "\n", "src", "=", "self", ".", "model", ",", "\n", "dst", "=", "self", ".", "target_model", ",", "\n", "method", "=", "self", ".", "target_update_method", ",", "\n", "tau", "=", "self", ".", "soft_update_tau", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg.DDPG.compute_critic_loss": [[149, 175], ["len", "ddpg.DDPG.q_function().reshape", "torch.nn.functional.mse_loss", "ddpg.DDPG.critic_loss_record.append", "torch.no_grad", "ddpg.DDPG.target_policy().sample", "ddpg.DDPG.target_q_function", "float", "ddpg.DDPG.q_function", "torch.nn.functional.mse_loss.detach().cpu().numpy", "ddpg.DDPG.target_policy", "ddpg.DDPG.reshape", "torch.nn.functional.mse_loss.detach().cpu", "torch.nn.functional.mse_loss.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "def", "compute_critic_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Compute loss for critic.\"\"\"", "\n", "\n", "batch_next_state", "=", "batch", "[", "\"next_state\"", "]", "\n", "batch_rewards", "=", "batch", "[", "\"reward\"", "]", "\n", "batch_terminal", "=", "batch", "[", "\"is_state_terminal\"", "]", "\n", "batch_state", "=", "batch", "[", "\"state\"", "]", "\n", "batch_actions", "=", "batch", "[", "\"action\"", "]", "\n", "batchsize", "=", "len", "(", "batch_rewards", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "assert", "not", "self", ".", "recurrent", "\n", "next_actions", "=", "self", ".", "target_policy", "(", "batch_next_state", ")", ".", "sample", "(", ")", "\n", "next_q", "=", "self", ".", "target_q_function", "(", "(", "batch_next_state", ",", "next_actions", ")", ")", "\n", "target_q", "=", "batch_rewards", "+", "self", ".", "gamma", "*", "(", "\n", "1.0", "-", "batch_terminal", "\n", ")", "*", "next_q", ".", "reshape", "(", "(", "batchsize", ",", ")", ")", "\n", "\n", "", "predict_q", "=", "self", ".", "q_function", "(", "(", "batch_state", ",", "batch_actions", ")", ")", ".", "reshape", "(", "(", "batchsize", ",", ")", ")", "\n", "\n", "loss", "=", "F", ".", "mse_loss", "(", "target_q", ",", "predict_q", ")", "\n", "\n", "# Update stats", "\n", "self", ".", "critic_loss_record", ".", "append", "(", "float", "(", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg.DDPG.compute_actor_loss": [[176, 189], ["ddpg.DDPG.policy().rsample", "ddpg.DDPG.q_function", "ddpg.DDPG.q_record.extend", "ddpg.DDPG.actor_loss_record.append", "ddpg.DDPG.mean", "ddpg.DDPG.detach().cpu().numpy", "float", "ddpg.DDPG.policy", "loss.detach().cpu().numpy", "ddpg.DDPG.detach().cpu", "loss.detach().cpu", "ddpg.DDPG.detach", "loss.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.rsample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["", "def", "compute_actor_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Compute loss for actor.\"\"\"", "\n", "\n", "batch_state", "=", "batch", "[", "\"state\"", "]", "\n", "onpolicy_actions", "=", "self", ".", "policy", "(", "batch_state", ")", ".", "rsample", "(", ")", "\n", "q", "=", "self", ".", "q_function", "(", "(", "batch_state", ",", "onpolicy_actions", ")", ")", "\n", "loss", "=", "-", "q", ".", "mean", "(", ")", "\n", "\n", "# Update stats", "\n", "self", ".", "q_record", ".", "extend", "(", "q", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "actor_loss_record", ".", "append", "(", "float", "(", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg.DDPG.update": [[190, 204], ["pfrl.replay_buffer.batch_experiences", "ddpg.DDPG.critic_optimizer.zero_grad", "ddpg.DDPG.compute_critic_loss().backward", "ddpg.DDPG.critic_optimizer.step", "ddpg.DDPG.actor_optimizer.zero_grad", "ddpg.DDPG.compute_actor_loss().backward", "ddpg.DDPG.actor_optimizer.step", "ddpg.DDPG.compute_critic_loss", "ddpg.DDPG.compute_actor_loss"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.batch_experiences", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg.DDPG.compute_critic_loss", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg.DDPG.compute_actor_loss"], ["", "def", "update", "(", "self", ",", "experiences", ",", "errors_out", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the model from experiences\"\"\"", "\n", "\n", "batch", "=", "batch_experiences", "(", "experiences", ",", "self", ".", "device", ",", "self", ".", "phi", ",", "self", ".", "gamma", ")", "\n", "\n", "self", ".", "critic_optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "compute_critic_loss", "(", "batch", ")", ".", "backward", "(", ")", "\n", "self", ".", "critic_optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "actor_optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "compute_actor_loss", "(", "batch", ")", ".", "backward", "(", ")", "\n", "self", ".", "actor_optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "n_updates", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg.DDPG.update_from_episodes": [[205, 247], ["list", "len", "range", "reversed", "pfrl.replay_buffer.batch_experiences", "batches.append", "ddpg.DDPG.model.state_reset", "ddpg.DDPG.target_model.state_reset", "ddpg.DDPG.target_q_function.update_state", "ddpg.DDPG.target_policy", "ddpg.DDPG.critic_optimizer.update", "ddpg.DDPG.model.state_reset", "ddpg.DDPG.actor_optimizer.update", "sorted", "transitions.append", "ddpg.DDPG.compute_critic_loss", "ddpg.DDPG.compute_actor_loss", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.batch_experiences", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg.DDPG.compute_critic_loss", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg.DDPG.compute_actor_loss"], ["", "def", "update_from_episodes", "(", "self", ",", "episodes", ",", "errors_out", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "# Sort episodes desc by their lengths", "\n", "sorted_episodes", "=", "list", "(", "reversed", "(", "sorted", "(", "episodes", ",", "key", "=", "len", ")", ")", ")", "\n", "max_epi_len", "=", "len", "(", "sorted_episodes", "[", "0", "]", ")", "\n", "\n", "# Precompute all the input batches", "\n", "batches", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "max_epi_len", ")", ":", "\n", "            ", "transitions", "=", "[", "]", "\n", "for", "ep", "in", "sorted_episodes", ":", "\n", "                ", "if", "len", "(", "ep", ")", "<=", "i", ":", "\n", "                    ", "break", "\n", "", "transitions", ".", "append", "(", "[", "ep", "[", "i", "]", "]", ")", "\n", "", "batch", "=", "batch_experiences", "(", "\n", "transitions", ",", "xp", "=", "self", ".", "device", ",", "phi", "=", "self", ".", "phi", ",", "gamma", "=", "self", ".", "gamma", "\n", ")", "\n", "batches", ".", "append", "(", "batch", ")", "\n", "\n", "", "with", "self", ".", "model", ".", "state_reset", "(", ")", ",", "self", ".", "target_model", ".", "state_reset", "(", ")", ":", "\n", "\n", "# Since the target model is evaluated one-step ahead,", "\n", "# its internal states need to be updated", "\n", "            ", "self", ".", "target_q_function", ".", "update_state", "(", "\n", "batches", "[", "0", "]", "[", "\"state\"", "]", ",", "batches", "[", "0", "]", "[", "\"action\"", "]", "\n", ")", "\n", "self", ".", "target_policy", "(", "batches", "[", "0", "]", "[", "\"state\"", "]", ")", "\n", "\n", "# Update critic through time", "\n", "critic_loss", "=", "0", "\n", "for", "batch", "in", "batches", ":", "\n", "                ", "critic_loss", "+=", "self", ".", "compute_critic_loss", "(", "batch", ")", "\n", "", "self", ".", "critic_optimizer", ".", "update", "(", "lambda", ":", "critic_loss", "/", "max_epi_len", ")", "\n", "\n", "", "with", "self", ".", "model", ".", "state_reset", "(", ")", ":", "\n", "\n", "# Update actor through time", "\n", "            ", "actor_loss", "=", "0", "\n", "for", "batch", "in", "batches", ":", "\n", "                ", "actor_loss", "+=", "self", ".", "compute_actor_loss", "(", "batch", ")", "\n", "", "self", ".", "actor_optimizer", ".", "update", "(", "lambda", ":", "actor_loss", "/", "max_epi_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg.DDPG.batch_act": [[248, 253], ["ddpg.DDPG._batch_act_train", "ddpg.DDPG._batch_act_eval"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_act_train", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_act_eval"], ["", "", "def", "batch_act", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_batch_act_train", "(", "batch_obs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_batch_act_eval", "(", "batch_obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg.DDPG.batch_observe": [[254, 257], ["ddpg.DDPG._batch_observe_train"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_observe_train"], ["", "", "def", "batch_observe", "(", "self", ",", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "_batch_observe_train", "(", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg.DDPG._batch_select_greedy_actions": [[258, 263], ["torch.no_grad", "pfrl.utils.contexts.evaluating", "ddpg.DDPG.batch_states", "ddpg.DDPG.policy().sample", "ddpg.DDPG.cpu().numpy", "ddpg.DDPG.policy", "ddpg.DDPG.cpu"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "", "def", "_batch_select_greedy_actions", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ",", "evaluating", "(", "self", ".", "policy", ")", ":", "\n", "            ", "batch_xs", "=", "self", ".", "batch_states", "(", "batch_obs", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "batch_action", "=", "self", ".", "policy", "(", "batch_xs", ")", ".", "sample", "(", ")", "\n", "return", "batch_action", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg.DDPG._batch_act_eval": [[264, 267], ["ddpg.DDPG._batch_select_greedy_actions"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg.DDPG._batch_select_greedy_actions"], ["", "", "def", "_batch_act_eval", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "assert", "not", "self", ".", "training", "\n", "return", "self", ".", "_batch_select_greedy_actions", "(", "batch_obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg.DDPG._batch_act_train": [[268, 283], ["list", "list", "ddpg.DDPG._batch_select_greedy_actions", "ddpg.DDPG.burnin_action_func", "ddpg.DDPG.explorer.select_action", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg.DDPG._batch_select_greedy_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.boltzmann.Boltzmann.select_action"], ["", "def", "_batch_act_train", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "assert", "self", ".", "training", "\n", "if", "self", ".", "burnin_action_func", "is", "not", "None", "and", "self", ".", "n_updates", "==", "0", ":", "\n", "            ", "batch_action", "=", "[", "self", ".", "burnin_action_func", "(", ")", "for", "_", "in", "range", "(", "len", "(", "batch_obs", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "batch_greedy_action", "=", "self", ".", "_batch_select_greedy_actions", "(", "batch_obs", ")", "\n", "batch_action", "=", "[", "\n", "self", ".", "explorer", ".", "select_action", "(", "self", ".", "t", ",", "lambda", ":", "batch_greedy_action", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "batch_greedy_action", ")", ")", "\n", "]", "\n", "\n", "", "self", ".", "batch_last_obs", "=", "list", "(", "batch_obs", ")", "\n", "self", ".", "batch_last_action", "=", "list", "(", "batch_action", ")", "\n", "\n", "return", "batch_action", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg.DDPG._batch_observe_train": [[284, 308], ["range", "len", "ddpg.DDPG.replay_updater.update_if_necessary", "ddpg.DDPG.sync_target_network", "ddpg.DDPG.replay_buffer.append", "ddpg.DDPG.replay_buffer.stop_current_episode"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.ReplayUpdater.update_if_necessary", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.sync_target_network", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.stop_current_episode"], ["", "def", "_batch_observe_train", "(", "self", ",", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", ":", "\n", "        ", "assert", "self", ".", "training", "\n", "for", "i", "in", "range", "(", "len", "(", "batch_obs", ")", ")", ":", "\n", "            ", "self", ".", "t", "+=", "1", "\n", "# Update the target network", "\n", "if", "self", ".", "t", "%", "self", ".", "target_update_interval", "==", "0", ":", "\n", "                ", "self", ".", "sync_target_network", "(", ")", "\n", "", "if", "self", ".", "batch_last_obs", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "assert", "self", ".", "batch_last_action", "[", "i", "]", "is", "not", "None", "\n", "# Add a transition to the replay buffer", "\n", "self", ".", "replay_buffer", ".", "append", "(", "\n", "state", "=", "self", ".", "batch_last_obs", "[", "i", "]", ",", "\n", "action", "=", "self", ".", "batch_last_action", "[", "i", "]", ",", "\n", "reward", "=", "batch_reward", "[", "i", "]", ",", "\n", "next_state", "=", "batch_obs", "[", "i", "]", ",", "\n", "next_action", "=", "None", ",", "\n", "is_state_terminal", "=", "batch_done", "[", "i", "]", ",", "\n", "env_id", "=", "i", ",", "\n", ")", "\n", "if", "batch_reset", "[", "i", "]", "or", "batch_done", "[", "i", "]", ":", "\n", "                    ", "self", ".", "batch_last_obs", "[", "i", "]", "=", "None", "\n", "self", ".", "batch_last_action", "[", "i", "]", "=", "None", "\n", "self", ".", "replay_buffer", ".", "stop_current_episode", "(", "env_id", "=", "i", ")", "\n", "", "", "self", ".", "replay_updater", ".", "update_if_necessary", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg.DDPG.get_statistics": [[309, 315], ["ddpg._mean_or_nan", "ddpg._mean_or_nan", "ddpg._mean_or_nan"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan"], ["", "", "def", "get_statistics", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "(", "\"average_q\"", ",", "_mean_or_nan", "(", "self", ".", "q_record", ")", ")", ",", "\n", "(", "\"average_actor_loss\"", ",", "_mean_or_nan", "(", "self", ".", "actor_loss_record", ")", ")", ",", "\n", "(", "\"average_critic_loss\"", ",", "_mean_or_nan", "(", "self", ".", "critic_loss_record", ")", ")", ",", "\n", "(", "\"n_updates\"", ",", "self", ".", "n_updates", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ddpg._mean_or_nan": [[17, 20], ["numpy.mean"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["def", "_mean_or_nan", "(", "xs", ")", ":", "\n", "    ", "\"\"\"Return its mean a non-empty sequence, numpy.nan for a empty one.\"\"\"", "\n", "return", "np", ".", "mean", "(", "xs", ")", "if", "xs", "else", "np", ".", "nan", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO.__init__": [[166, 260], ["logging.getLogger", "collections.deque", "collections.deque", "collections.deque", "collections.deque", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "torch.device", "torch.device", "trpo.TRPO.policy.to", "trpo.TRPO.vf.to", "torch.device", "torch.device", "torch.device", "torch.device", "pfrl.nn.RecurrentBranched", "pfrl.nn.Branched", "trpo.TRPO.obs_normalizer.to"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["def", "__init__", "(", "\n", "self", ",", "\n", "policy", ",", "\n", "vf", ",", "\n", "vf_optimizer", ",", "\n", "obs_normalizer", "=", "None", ",", "\n", "gpu", "=", "None", ",", "\n", "gamma", "=", "0.99", ",", "\n", "lambd", "=", "0.95", ",", "\n", "phi", "=", "lambda", "x", ":", "x", ",", "\n", "entropy_coef", "=", "0.01", ",", "\n", "update_interval", "=", "2048", ",", "\n", "max_kl", "=", "0.01", ",", "\n", "vf_epochs", "=", "3", ",", "\n", "vf_batch_size", "=", "64", ",", "\n", "standardize_advantages", "=", "True", ",", "\n", "batch_states", "=", "batch_states", ",", "\n", "recurrent", "=", "False", ",", "\n", "max_recurrent_sequence_len", "=", "None", ",", "\n", "line_search_max_backtrack", "=", "10", ",", "\n", "conjugate_gradient_max_iter", "=", "10", ",", "\n", "conjugate_gradient_damping", "=", "1e-2", ",", "\n", "act_deterministically", "=", "False", ",", "\n", "max_grad_norm", "=", "None", ",", "\n", "value_stats_window", "=", "1000", ",", "\n", "entropy_stats_window", "=", "1000", ",", "\n", "kl_stats_window", "=", "100", ",", "\n", "policy_step_size_stats_window", "=", "100", ",", "\n", "logger", "=", "getLogger", "(", "__name__", ")", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "policy", "=", "policy", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "vf_optimizer", "=", "vf_optimizer", "\n", "self", ".", "obs_normalizer", "=", "obs_normalizer", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "lambd", "=", "lambd", "\n", "self", ".", "phi", "=", "phi", "\n", "self", ".", "entropy_coef", "=", "entropy_coef", "\n", "self", ".", "update_interval", "=", "update_interval", "\n", "self", ".", "max_kl", "=", "max_kl", "\n", "self", ".", "vf_epochs", "=", "vf_epochs", "\n", "self", ".", "vf_batch_size", "=", "vf_batch_size", "\n", "self", ".", "standardize_advantages", "=", "standardize_advantages", "\n", "self", ".", "batch_states", "=", "batch_states", "\n", "self", ".", "recurrent", "=", "recurrent", "\n", "self", ".", "max_recurrent_sequence_len", "=", "max_recurrent_sequence_len", "\n", "self", ".", "line_search_max_backtrack", "=", "line_search_max_backtrack", "\n", "self", ".", "conjugate_gradient_max_iter", "=", "conjugate_gradient_max_iter", "\n", "self", ".", "conjugate_gradient_damping", "=", "conjugate_gradient_damping", "\n", "self", ".", "act_deterministically", "=", "act_deterministically", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "if", "gpu", "is", "not", "None", "and", "gpu", ">=", "0", ":", "\n", "            ", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", ")", "\n", "self", ".", "policy", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "vf", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "obs_normalizer", "is", "not", "None", ":", "\n", "                ", "self", ".", "obs_normalizer", ".", "to", "(", "self", ".", "device", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "", "if", "recurrent", ":", "\n", "            ", "self", ".", "model", "=", "pfrl", ".", "nn", ".", "RecurrentBranched", "(", "policy", ",", "vf", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "pfrl", ".", "nn", ".", "Branched", "(", "policy", ",", "vf", ")", "\n", "\n", "", "self", ".", "value_record", "=", "collections", ".", "deque", "(", "maxlen", "=", "value_stats_window", ")", "\n", "self", ".", "entropy_record", "=", "collections", ".", "deque", "(", "maxlen", "=", "entropy_stats_window", ")", "\n", "self", ".", "kl_record", "=", "collections", ".", "deque", "(", "maxlen", "=", "kl_stats_window", ")", "\n", "self", ".", "policy_step_size_record", "=", "collections", ".", "deque", "(", "\n", "maxlen", "=", "policy_step_size_stats_window", "\n", ")", "\n", "self", ".", "explained_variance", "=", "np", ".", "nan", "\n", "\n", "self", ".", "last_state", "=", "None", "\n", "self", ".", "last_action", "=", "None", "\n", "\n", "# Contains episodes used for next update iteration", "\n", "self", ".", "memory", "=", "[", "]", "\n", "# Contains transitions of the last episode not moved to self.memory yet", "\n", "self", ".", "last_episode", "=", "[", "]", "\n", "\n", "# Batch versions of last_episode, last_state, and last_action", "\n", "self", ".", "batch_last_episode", "=", "None", "\n", "self", ".", "batch_last_state", "=", "None", "\n", "self", ".", "batch_last_action", "=", "None", "\n", "\n", "# Recurrent states of the model", "\n", "self", ".", "train_recurrent_states", "=", "None", "\n", "self", ".", "train_prev_recurrent_states", "=", "None", "\n", "self", ".", "test_recurrent_states", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._initialize_batch_variables": [[261, 265], ["range"], "methods", ["None"], ["", "def", "_initialize_batch_variables", "(", "self", ",", "num_envs", ")", ":", "\n", "        ", "self", ".", "batch_last_episode", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_envs", ")", "]", "\n", "self", ".", "batch_last_state", "=", "[", "None", "]", "*", "num_envs", "\n", "self", ".", "batch_last_action", "=", "[", "None", "]", "*", "num_envs", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._update_if_dataset_is_ready": [[266, 308], ["trpo.TRPO._flush_last_episode", "pfrl.agents.ppo._compute_explained_variance", "sum", "len", "sum", "pfrl.agents.ppo._make_dataset_recurrent", "trpo.TRPO._update_recurrent", "pfrl.agents.ppo._make_dataset", "trpo.TRPO._update", "pfrl.utils.recurrent.flatten_sequences_time_first", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._flush_last_episode", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._compute_explained_variance", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._make_dataset_recurrent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._update_recurrent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._make_dataset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.flatten_sequences_time_first"], ["", "def", "_update_if_dataset_is_ready", "(", "self", ")", ":", "\n", "        ", "dataset_size", "=", "(", "\n", "sum", "(", "len", "(", "episode", ")", "for", "episode", "in", "self", ".", "memory", ")", "\n", "+", "len", "(", "self", ".", "last_episode", ")", "\n", "+", "(", "\n", "0", "\n", "if", "self", ".", "batch_last_episode", "is", "None", "\n", "else", "sum", "(", "len", "(", "episode", ")", "for", "episode", "in", "self", ".", "batch_last_episode", ")", "\n", ")", "\n", ")", "\n", "if", "dataset_size", ">=", "self", ".", "update_interval", ":", "\n", "            ", "self", ".", "_flush_last_episode", "(", ")", "\n", "if", "self", ".", "recurrent", ":", "\n", "                ", "dataset", "=", "_make_dataset_recurrent", "(", "\n", "episodes", "=", "self", ".", "memory", ",", "\n", "model", "=", "self", ".", "model", ",", "\n", "phi", "=", "self", ".", "phi", ",", "\n", "batch_states", "=", "self", ".", "batch_states", ",", "\n", "obs_normalizer", "=", "self", ".", "obs_normalizer", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "\n", "lambd", "=", "self", ".", "lambd", ",", "\n", "max_recurrent_sequence_len", "=", "self", ".", "max_recurrent_sequence_len", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", ")", "\n", "self", ".", "_update_recurrent", "(", "dataset", ")", "\n", "", "else", ":", "\n", "                ", "dataset", "=", "_make_dataset", "(", "\n", "episodes", "=", "self", ".", "memory", ",", "\n", "model", "=", "self", ".", "model", ",", "\n", "phi", "=", "self", ".", "phi", ",", "\n", "batch_states", "=", "self", ".", "batch_states", ",", "\n", "obs_normalizer", "=", "self", ".", "obs_normalizer", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "\n", "lambd", "=", "self", ".", "lambd", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", ")", "\n", "assert", "len", "(", "dataset", ")", "==", "dataset_size", "\n", "self", ".", "_update", "(", "dataset", ")", "\n", "", "self", ".", "explained_variance", "=", "_compute_explained_variance", "(", "\n", "flatten_sequences_time_first", "(", "self", ".", "memory", ")", "\n", ")", "\n", "self", ".", "memory", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._flush_last_episode": [[309, 318], ["trpo.TRPO.memory.append", "enumerate", "trpo.TRPO.memory.append"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "", "def", "_flush_last_episode", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_episode", ":", "\n", "            ", "self", ".", "memory", ".", "append", "(", "self", ".", "last_episode", ")", "\n", "self", ".", "last_episode", "=", "[", "]", "\n", "", "if", "self", ".", "batch_last_episode", ":", "\n", "            ", "for", "i", ",", "episode", "in", "enumerate", "(", "self", ".", "batch_last_episode", ")", ":", "\n", "                ", "if", "episode", ":", "\n", "                    ", "self", ".", "memory", ".", "append", "(", "episode", ")", "\n", "self", ".", "batch_last_episode", "[", "i", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._update": [[319, 326], ["trpo.TRPO._update_policy", "trpo.TRPO._update_vf", "trpo.TRPO._update_obs_normalizer"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._update_policy", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._update_vf", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._update_obs_normalizer"], ["", "", "", "", "def", "_update", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "\"\"\"Update both the policy and the value function.\"\"\"", "\n", "\n", "if", "self", ".", "obs_normalizer", ":", "\n", "            ", "self", ".", "_update_obs_normalizer", "(", "dataset", ")", "\n", "", "self", ".", "_update_policy", "(", "dataset", ")", "\n", "self", ".", "_update_vf", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._update_recurrent": [[327, 336], ["pfrl.utils.recurrent.flatten_sequences_time_first", "trpo.TRPO._update_policy_recurrent", "trpo.TRPO._update_vf_recurrent", "trpo.TRPO._update_obs_normalizer"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.flatten_sequences_time_first", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._update_policy_recurrent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._update_vf_recurrent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._update_obs_normalizer"], ["", "def", "_update_recurrent", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "\"\"\"Update both the policy and the value function.\"\"\"", "\n", "\n", "flat_dataset", "=", "flatten_sequences_time_first", "(", "dataset", ")", "\n", "if", "self", ".", "obs_normalizer", ":", "\n", "            ", "self", ".", "_update_obs_normalizer", "(", "flat_dataset", ")", "\n", "\n", "", "self", ".", "_update_policy_recurrent", "(", "dataset", ")", "\n", "self", ".", "_update_vf_recurrent", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._update_vf_recurrent": [[337, 347], ["range", "random.shuffle", "pfrl.agents.ppo._yield_subset_of_sequences_with_fixed_number_of_items", "trpo.TRPO._update_vf_once_recurrent"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._yield_subset_of_sequences_with_fixed_number_of_items", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._update_vf_once_recurrent"], ["", "def", "_update_vf_recurrent", "(", "self", ",", "dataset", ")", ":", "\n", "\n", "        ", "for", "epoch", "in", "range", "(", "self", ".", "vf_epochs", ")", ":", "\n", "            ", "random", ".", "shuffle", "(", "dataset", ")", "\n", "for", "(", "\n", "minibatch", "\n", ")", "in", "_yield_subset_of_sequences_with_fixed_number_of_items", "(", "# NOQA", "\n", "dataset", ",", "self", ".", "vf_batch_size", "\n", ")", ":", "\n", "                ", "self", ".", "_update_vf_once_recurrent", "(", "minibatch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._update_vf_once_recurrent": [[348, 384], ["sorted", "pfrl.utils.recurrent.flatten_sequences_time_first", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "pfrl.utils.recurrent.pack_and_forward", "torch.mse_loss", "torch.mse_loss", "trpo.TRPO.vf.zero_grad", "torch.mse_loss.backward", "trpo.TRPO.vf_optimizer.step", "trpo.TRPO.batch_states", "seqs_states.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pfrl.utils.recurrent.concatenate_recurrent_states", "pfrl.utils.clip_l2_grad_norm_", "trpo.TRPO.obs_normalizer", "trpo._collect_first_recurrent_states_of_vf", "trpo.TRPO.vf.parameters"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.flatten_sequences_time_first", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.concatenate_recurrent_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.clip_l2_grad_norm.clip_l2_grad_norm_", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._collect_first_recurrent_states_of_vf"], ["", "", "", "def", "_update_vf_once_recurrent", "(", "self", ",", "episodes", ")", ":", "\n", "\n", "# Sort episodes desc by length for pack_sequence", "\n", "        ", "episodes", "=", "sorted", "(", "episodes", ",", "key", "=", "len", ",", "reverse", "=", "True", ")", "\n", "\n", "flat_transitions", "=", "flatten_sequences_time_first", "(", "episodes", ")", "\n", "\n", "# Prepare data for a recurrent model", "\n", "seqs_states", "=", "[", "]", "\n", "for", "ep", "in", "episodes", ":", "\n", "            ", "states", "=", "self", ".", "batch_states", "(", "\n", "[", "transition", "[", "\"state\"", "]", "for", "transition", "in", "ep", "]", ",", "self", ".", "device", ",", "self", ".", "phi", "\n", ")", "\n", "if", "self", ".", "obs_normalizer", ":", "\n", "                ", "states", "=", "self", ".", "obs_normalizer", "(", "states", ",", "update", "=", "False", ")", "\n", "", "seqs_states", ".", "append", "(", "states", ")", "\n", "\n", "", "flat_vs_teacher", "=", "torch", ".", "as_tensor", "(", "\n", "[", "[", "transition", "[", "\"v_teacher\"", "]", "]", "for", "transition", "in", "flat_transitions", "]", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "vf_rs", "=", "concatenate_recurrent_states", "(", "\n", "_collect_first_recurrent_states_of_vf", "(", "episodes", ")", "\n", ")", "\n", "\n", "", "flat_vs_pred", ",", "_", "=", "pack_and_forward", "(", "self", ".", "vf", ",", "seqs_states", ",", "vf_rs", ")", "\n", "\n", "vf_loss", "=", "F", ".", "mse_loss", "(", "flat_vs_pred", ",", "flat_vs_teacher", ")", "\n", "self", ".", "vf", ".", "zero_grad", "(", ")", "\n", "vf_loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "clip_l2_grad_norm_", "(", "self", ".", "vf", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "", "self", ".", "vf_optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._update_obs_normalizer": [[385, 389], ["pfrl.utils.batch_states.batch_states", "trpo.TRPO.obs_normalizer.experience"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.experience"], ["", "def", "_update_obs_normalizer", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "assert", "self", ".", "obs_normalizer", "\n", "states", "=", "batch_states", "(", "[", "b", "[", "\"state\"", "]", "for", "b", "in", "dataset", "]", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "self", ".", "obs_normalizer", ".", "experience", "(", "states", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._update_vf": [[390, 417], ["pfrl.agents.ppo._yield_minibatches", "pfrl.utils.batch_states.batch_states", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "trpo.TRPO.vf", "torch.mse_loss", "torch.mse_loss", "trpo.TRPO.vf.zero_grad", "torch.mse_loss.backward", "trpo.TRPO.vf_optimizer.step", "trpo.TRPO.obs_normalizer", "pfrl.utils.clip_l2_grad_norm_", "trpo.TRPO.vf.parameters"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._yield_minibatches", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.clip_l2_grad_norm.clip_l2_grad_norm_"], ["", "def", "_update_vf", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "\"\"\"Update the value function using a given dataset.\n\n        The value function is updated via SGD to minimize TD(lambda) errors.\n        \"\"\"", "\n", "\n", "assert", "\"state\"", "in", "dataset", "[", "0", "]", "\n", "assert", "\"v_teacher\"", "in", "dataset", "[", "0", "]", "\n", "\n", "for", "batch", "in", "_yield_minibatches", "(", "\n", "dataset", ",", "minibatch_size", "=", "self", ".", "vf_batch_size", ",", "num_epochs", "=", "self", ".", "vf_epochs", "\n", ")", ":", "\n", "            ", "states", "=", "batch_states", "(", "[", "b", "[", "\"state\"", "]", "for", "b", "in", "batch", "]", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "if", "self", ".", "obs_normalizer", ":", "\n", "                ", "states", "=", "self", ".", "obs_normalizer", "(", "states", ",", "update", "=", "False", ")", "\n", "", "vs_teacher", "=", "torch", ".", "as_tensor", "(", "\n", "[", "b", "[", "\"v_teacher\"", "]", "for", "b", "in", "batch", "]", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", "\n", "vs_pred", "=", "self", ".", "vf", "(", "states", ")", "\n", "vf_loss", "=", "F", ".", "mse_loss", "(", "vs_pred", ",", "vs_teacher", "[", "...", ",", "None", "]", ")", "\n", "self", ".", "vf", ".", "zero_grad", "(", ")", "\n", "vf_loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "max_grad_norm", "is", "not", "None", ":", "\n", "                ", "clip_l2_grad_norm_", "(", "self", ".", "vf", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "", "self", ".", "vf_optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._compute_gain": [[418, 424], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["", "", "def", "_compute_gain", "(", "self", ",", "log_prob", ",", "log_prob_old", ",", "entropy", ",", "advs", ")", ":", "\n", "        ", "\"\"\"Compute a gain to maximize.\"\"\"", "\n", "prob_ratio", "=", "torch", ".", "exp", "(", "log_prob", "-", "log_prob_old", ")", "\n", "mean_entropy", "=", "torch", ".", "mean", "(", "entropy", ")", "\n", "surrogate_gain", "=", "torch", ".", "mean", "(", "prob_ratio", "*", "advs", ")", "\n", "return", "surrogate_gain", "+", "self", ".", "entropy_coef", "*", "mean_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._update_policy": [[425, 480], ["pfrl.utils.batch_states.batch_states", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "trpo.TRPO.policy", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "trpo.TRPO._compute_gain", "trpo.TRPO._compute_kl_constrained_step", "trpo.TRPO._line_search", "trpo.TRPO.obs_normalizer", "torch.std_mean", "torch.std_mean", "torch.std_mean", "torch.std_mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trpo.TRPO.policy", "trpo.TRPO.log_prob", "trpo.TRPO.entropy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._compute_gain", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._compute_kl_constrained_step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._line_search", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.log_prob", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.entropy"], ["", "def", "_update_policy", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "\"\"\"Update the policy using a given dataset.\n\n        The policy is updated via CG and line search.\n        \"\"\"", "\n", "\n", "assert", "\"state\"", "in", "dataset", "[", "0", "]", "\n", "assert", "\"action\"", "in", "dataset", "[", "0", "]", "\n", "assert", "\"adv\"", "in", "dataset", "[", "0", "]", "\n", "\n", "# Use full-batch", "\n", "states", "=", "batch_states", "(", "[", "b", "[", "\"state\"", "]", "for", "b", "in", "dataset", "]", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "if", "self", ".", "obs_normalizer", ":", "\n", "            ", "states", "=", "self", ".", "obs_normalizer", "(", "states", ",", "update", "=", "False", ")", "\n", "", "actions", "=", "torch", ".", "as_tensor", "(", "[", "b", "[", "\"action\"", "]", "for", "b", "in", "dataset", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "advs", "=", "torch", ".", "as_tensor", "(", "\n", "[", "b", "[", "\"adv\"", "]", "for", "b", "in", "dataset", "]", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "float", "\n", ")", "\n", "if", "self", ".", "standardize_advantages", ":", "\n", "            ", "std_advs", ",", "mean_advs", "=", "torch", ".", "std_mean", "(", "advs", ",", "unbiased", "=", "False", ")", "\n", "advs", "=", "(", "advs", "-", "mean_advs", ")", "/", "(", "std_advs", "+", "1e-8", ")", "\n", "\n", "# Recompute action distributions for batch backprop", "\n", "", "action_distrib", "=", "self", ".", "policy", "(", "states", ")", "\n", "\n", "log_prob_old", "=", "torch", ".", "as_tensor", "(", "\n", "[", "transition", "[", "\"log_prob\"", "]", "for", "transition", "in", "dataset", "]", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", "\n", "\n", "gain", "=", "self", ".", "_compute_gain", "(", "\n", "log_prob", "=", "action_distrib", ".", "log_prob", "(", "actions", ")", ",", "\n", "log_prob_old", "=", "log_prob_old", ",", "\n", "entropy", "=", "action_distrib", ".", "entropy", "(", ")", ",", "\n", "advs", "=", "advs", ",", "\n", ")", "\n", "\n", "# Distribution to compute KL div against", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# torch.distributions.Distribution cannot be deepcopied", "\n", "            ", "action_distrib_old", "=", "self", ".", "policy", "(", "states", ")", "\n", "\n", "", "full_step", "=", "self", ".", "_compute_kl_constrained_step", "(", "\n", "action_distrib", "=", "action_distrib", ",", "\n", "action_distrib_old", "=", "action_distrib_old", ",", "\n", "gain", "=", "gain", ",", "\n", ")", "\n", "\n", "self", ".", "_line_search", "(", "\n", "full_step", "=", "full_step", ",", "\n", "dataset", "=", "dataset", ",", "\n", "advs", "=", "advs", ",", "\n", "action_distrib_old", "=", "action_distrib_old", ",", "\n", "gain", "=", "gain", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._update_policy_recurrent": [[482, 558], ["sorted", "pfrl.utils.recurrent.flatten_sequences_time_first", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "pfrl.utils.recurrent.pack_and_forward", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "trpo.TRPO._compute_gain", "trpo.TRPO._compute_kl_constrained_step", "trpo.TRPO._line_search", "trpo.TRPO.batch_states", "seqs_states.append", "torch.std_mean", "torch.std_mean", "torch.std_mean", "torch.std_mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pfrl.utils.recurrent.concatenate_recurrent_states", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pfrl.utils.recurrent.pack_and_forward", "trpo.TRPO.obs_normalizer", "trpo._collect_first_recurrent_states_of_policy", "flat_distribs.log_prob", "flat_distribs.entropy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.flatten_sequences_time_first", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._compute_gain", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._compute_kl_constrained_step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._line_search", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.concatenate_recurrent_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._collect_first_recurrent_states_of_policy", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.log_prob", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.entropy"], ["", "def", "_update_policy_recurrent", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "\"\"\"Update the policy using a given dataset.\n\n        The policy is updated via CG and line search.\n        \"\"\"", "\n", "\n", "# Sort episodes desc by length for pack_sequence", "\n", "dataset", "=", "sorted", "(", "dataset", ",", "key", "=", "len", ",", "reverse", "=", "True", ")", "\n", "\n", "flat_transitions", "=", "flatten_sequences_time_first", "(", "dataset", ")", "\n", "\n", "# Prepare data for a recurrent model", "\n", "seqs_states", "=", "[", "]", "\n", "for", "ep", "in", "dataset", ":", "\n", "            ", "states", "=", "self", ".", "batch_states", "(", "\n", "[", "transition", "[", "\"state\"", "]", "for", "transition", "in", "ep", "]", ",", "\n", "self", ".", "device", ",", "\n", "self", ".", "phi", ",", "\n", ")", "\n", "if", "self", ".", "obs_normalizer", ":", "\n", "                ", "states", "=", "self", ".", "obs_normalizer", "(", "states", ",", "update", "=", "False", ")", "\n", "", "seqs_states", ".", "append", "(", "states", ")", "\n", "\n", "", "flat_actions", "=", "torch", ".", "as_tensor", "(", "\n", "[", "transition", "[", "\"action\"", "]", "for", "transition", "in", "flat_transitions", "]", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", ")", "\n", "flat_advs", "=", "torch", ".", "as_tensor", "(", "\n", "[", "transition", "[", "\"adv\"", "]", "for", "transition", "in", "flat_transitions", "]", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", "\n", "\n", "if", "self", ".", "standardize_advantages", ":", "\n", "            ", "std_advs", ",", "mean_advs", "=", "torch", ".", "std_mean", "(", "flat_advs", ",", "unbiased", "=", "False", ")", "\n", "flat_advs", "=", "(", "flat_advs", "-", "mean_advs", ")", "/", "(", "std_advs", "+", "1e-8", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "policy_rs", "=", "concatenate_recurrent_states", "(", "\n", "_collect_first_recurrent_states_of_policy", "(", "dataset", ")", "\n", ")", "\n", "\n", "", "flat_distribs", ",", "_", "=", "pack_and_forward", "(", "self", ".", "policy", ",", "seqs_states", ",", "policy_rs", ")", "\n", "\n", "log_prob_old", "=", "torch", ".", "tensor", "(", "\n", "[", "transition", "[", "\"log_prob\"", "]", "for", "transition", "in", "flat_transitions", "]", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", "\n", "\n", "gain", "=", "self", ".", "_compute_gain", "(", "\n", "log_prob", "=", "flat_distribs", ".", "log_prob", "(", "flat_actions", ")", ",", "\n", "log_prob_old", "=", "log_prob_old", ",", "\n", "entropy", "=", "flat_distribs", ".", "entropy", "(", ")", ",", "\n", "advs", "=", "flat_advs", ",", "\n", ")", "\n", "\n", "# Distribution to compute KL div against", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# torch.distributions.Distribution cannot be deepcopied", "\n", "            ", "action_distrib_old", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "policy", ",", "seqs_states", ",", "policy_rs", "\n", ")", "\n", "\n", "", "full_step", "=", "self", ".", "_compute_kl_constrained_step", "(", "\n", "action_distrib", "=", "flat_distribs", ",", "\n", "action_distrib_old", "=", "action_distrib_old", ",", "\n", "gain", "=", "gain", ",", "\n", ")", "\n", "\n", "self", ".", "_line_search", "(", "\n", "full_step", "=", "full_step", ",", "\n", "dataset", "=", "dataset", ",", "\n", "advs", "=", "flat_advs", ",", "\n", "action_distrib_old", "=", "action_distrib_old", ",", "\n", "gain", "=", "gain", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._compute_kl_constrained_step": [[560, 602], ["list", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "all", "trpo._flatten_and_concat_variables", "all", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "all", "_flatten_and_concat_variables().detach", "pfrl.utils.conjugate_gradient", "float", "trpo.TRPO.policy.parameters", "torch.distributions.kl_divergence", "torch.distributions.kl_divergence", "torch.distributions.kl_divergence", "torch.distributions.kl_divergence", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "trpo._hessian_vector_product", "pfrl.utils.conjugate_gradient.dot", "trpo._flatten_and_concat_variables", "trpo.TRPO._compute_kl_constrained_step.fisher_vector_product_func"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._flatten_and_concat_variables", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.conjugate_gradient.conjugate_gradient", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._hessian_vector_product", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._flatten_and_concat_variables"], ["", "def", "_compute_kl_constrained_step", "(", "self", ",", "action_distrib", ",", "action_distrib_old", ",", "gain", ")", ":", "\n", "        ", "\"\"\"Compute a step of policy parameters with a KL constraint.\"\"\"", "\n", "policy_params", "=", "list", "(", "self", ".", "policy", ".", "parameters", "(", ")", ")", "\n", "kl", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "distributions", ".", "kl_divergence", "(", "action_distrib_old", ",", "action_distrib", ")", "\n", ")", "\n", "\n", "kl_grads", "=", "torch", ".", "autograd", ".", "grad", "(", "[", "kl", "]", ",", "policy_params", ",", "create_graph", "=", "True", ")", "\n", "assert", "all", "(", "\n", "g", "is", "not", "None", "for", "g", "in", "kl_grads", "\n", ")", ",", "\"The gradient contains None. The policy may have unused parameters.\"", "\n", "flat_kl_grads", "=", "_flatten_and_concat_variables", "(", "kl_grads", ")", "\n", "assert", "all", "(", "g", ".", "requires_grad", "for", "g", "in", "kl_grads", ")", "\n", "assert", "flat_kl_grads", ".", "requires_grad", "\n", "\n", "def", "fisher_vector_product_func", "(", "vec", ")", ":", "\n", "            ", "vec", "=", "torch", ".", "as_tensor", "(", "vec", ")", "\n", "fvp", "=", "_hessian_vector_product", "(", "flat_kl_grads", ",", "policy_params", ",", "vec", ")", "\n", "return", "fvp", "+", "self", ".", "conjugate_gradient_damping", "*", "vec", "\n", "\n", "", "gain_grads", "=", "torch", ".", "autograd", ".", "grad", "(", "[", "gain", "]", ",", "policy_params", ",", "create_graph", "=", "True", ")", "\n", "assert", "all", "(", "\n", "g", "is", "not", "None", "for", "g", "in", "gain_grads", "\n", ")", ",", "\"The gradient contains None. The policy may have unused parameters.\"", "\n", "flat_gain_grads", "=", "_flatten_and_concat_variables", "(", "gain_grads", ")", ".", "detach", "(", ")", "\n", "step_direction", "=", "pfrl", ".", "utils", ".", "conjugate_gradient", "(", "\n", "fisher_vector_product_func", ",", "\n", "flat_gain_grads", ",", "\n", "max_iter", "=", "self", ".", "conjugate_gradient_max_iter", ",", "\n", ")", "\n", "\n", "# We want a step size that satisfies KL(old|new) < max_kl.", "\n", "# Let d = alpha * step_direction be the actual parameter updates.", "\n", "# The second-order approximation of KL divergence is:", "\n", "#   KL(old|new) = 1/2 d^T I d + O(||d||^3),", "\n", "# where I is a Fisher information matrix.", "\n", "# Substitute d = alpha * step_direction and solve KL(old|new) = max_kl", "\n", "# for alpha to get the step size that tightly satisfies the constraint.", "\n", "\n", "dId", "=", "float", "(", "step_direction", ".", "dot", "(", "fisher_vector_product_func", "(", "step_direction", ")", ")", ")", "\n", "scale", "=", "(", "2.0", "*", "self", ".", "max_kl", "/", "(", "dId", "+", "1e-8", ")", ")", "**", "0.5", "\n", "return", "scale", "*", "step_direction", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._line_search": [[603, 701], ["list", "_flatten_and_concat_variables().detach", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "trpo.TRPO.policy.parameters", "param.numel", "trpo.TRPO.batch_states", "pfrl.utils.recurrent.flatten_sequences_time_first", "trpo.TRPO.logger.info", "trpo._split_and_reshape_to_ndarrays", "trpo._replace_params_data", "trpo.TRPO.logger.info", "trpo.TRPO.logger.info", "trpo.TRPO.logger.info", "trpo.TRPO.policy_step_size_record.append", "trpo._replace_params_data", "trpo._flatten_and_concat_variables", "trpo.TRPO.batch_states", "seqs_states.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pfrl.utils.evaluating", "pfrl.utils.recurrent.concatenate_recurrent_states", "pfrl.utils.recurrent.pack_and_forward", "trpo.TRPO.obs_normalizer", "trpo.TRPO.policy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pfrl.utils.evaluating", "trpo.TRPO._line_search.evaluate_current_policy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.flatten_sequences_time_first", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._split_and_reshape_to_ndarrays", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._replace_params_data", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._replace_params_data", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._flatten_and_concat_variables", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.concatenate_recurrent_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating"], ["", "def", "_line_search", "(", "self", ",", "full_step", ",", "dataset", ",", "advs", ",", "action_distrib_old", ",", "gain", ")", ":", "\n", "        ", "\"\"\"Do line search for a safe step size.\"\"\"", "\n", "policy_params", "=", "list", "(", "self", ".", "policy", ".", "parameters", "(", ")", ")", "\n", "policy_params_sizes", "=", "[", "param", ".", "numel", "(", ")", "for", "param", "in", "policy_params", "]", "\n", "policy_params_shapes", "=", "[", "param", ".", "shape", "for", "param", "in", "policy_params", "]", "\n", "step_size", "=", "1.0", "\n", "flat_params", "=", "_flatten_and_concat_variables", "(", "policy_params", ")", ".", "detach", "(", ")", "\n", "\n", "if", "self", ".", "recurrent", ":", "\n", "            ", "seqs_states", "=", "[", "]", "\n", "for", "ep", "in", "dataset", ":", "\n", "                ", "states", "=", "self", ".", "batch_states", "(", "\n", "[", "transition", "[", "\"state\"", "]", "for", "transition", "in", "ep", "]", ",", "self", ".", "device", ",", "self", ".", "phi", "\n", ")", "\n", "if", "self", ".", "obs_normalizer", ":", "\n", "                    ", "states", "=", "self", ".", "obs_normalizer", "(", "states", ",", "update", "=", "False", ")", "\n", "", "seqs_states", ".", "append", "(", "states", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ",", "pfrl", ".", "utils", ".", "evaluating", "(", "self", ".", "model", ")", ":", "\n", "                ", "policy_rs", "=", "concatenate_recurrent_states", "(", "\n", "_collect_first_recurrent_states_of_policy", "(", "dataset", ")", "\n", ")", "\n", "\n", "", "def", "evaluate_current_policy", "(", ")", ":", "\n", "                ", "distrib", ",", "_", "=", "pack_and_forward", "(", "self", ".", "policy", ",", "seqs_states", ",", "policy_rs", ")", "\n", "return", "distrib", "\n", "\n", "", "", "else", ":", "\n", "            ", "states", "=", "self", ".", "batch_states", "(", "\n", "[", "transition", "[", "\"state\"", "]", "for", "transition", "in", "dataset", "]", ",", "self", ".", "device", ",", "self", ".", "phi", "\n", ")", "\n", "if", "self", ".", "obs_normalizer", ":", "\n", "                ", "states", "=", "self", ".", "obs_normalizer", "(", "states", ",", "update", "=", "False", ")", "\n", "\n", "", "def", "evaluate_current_policy", "(", ")", ":", "\n", "                ", "return", "self", ".", "policy", "(", "states", ")", "\n", "\n", "", "", "flat_transitions", "=", "(", "\n", "flatten_sequences_time_first", "(", "dataset", ")", "if", "self", ".", "recurrent", "else", "dataset", "\n", ")", "\n", "actions", "=", "torch", ".", "tensor", "(", "\n", "[", "transition", "[", "\"action\"", "]", "for", "transition", "in", "flat_transitions", "]", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", ")", "\n", "log_prob_old", "=", "torch", ".", "tensor", "(", "\n", "[", "transition", "[", "\"log_prob\"", "]", "for", "transition", "in", "flat_transitions", "]", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "line_search_max_backtrack", "+", "1", ")", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Line search iteration: %s step size: %s\"", ",", "i", ",", "step_size", ")", "\n", "new_flat_params", "=", "flat_params", "+", "step_size", "*", "full_step", "\n", "new_params", "=", "_split_and_reshape_to_ndarrays", "(", "\n", "new_flat_params", ",", "\n", "sizes", "=", "policy_params_sizes", ",", "\n", "shapes", "=", "policy_params_shapes", ",", "\n", ")", "\n", "_replace_params_data", "(", "policy_params", ",", "new_params", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ",", "pfrl", ".", "utils", ".", "evaluating", "(", "self", ".", "policy", ")", ":", "\n", "                ", "new_action_distrib", "=", "evaluate_current_policy", "(", ")", "\n", "new_gain", "=", "self", ".", "_compute_gain", "(", "\n", "log_prob", "=", "new_action_distrib", ".", "log_prob", "(", "actions", ")", ",", "\n", "log_prob_old", "=", "log_prob_old", ",", "\n", "entropy", "=", "new_action_distrib", ".", "entropy", "(", ")", ",", "\n", "advs", "=", "advs", ",", "\n", ")", "\n", "new_kl", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "distributions", ".", "kl_divergence", "(", "\n", "action_distrib_old", ",", "new_action_distrib", "\n", ")", "\n", ")", "\n", "\n", "", "improve", "=", "float", "(", "new_gain", ")", "-", "float", "(", "gain", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Surrogate objective improve: %s\"", ",", "improve", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"KL divergence: %s\"", ",", "float", "(", "new_kl", ")", ")", "\n", "if", "not", "torch", ".", "isfinite", "(", "new_gain", ")", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Surrogate objective is not finite. Bakctracking...\"", ")", "\n", "", "elif", "not", "torch", ".", "isfinite", "(", "new_kl", ")", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"KL divergence is not finite. Bakctracking...\"", ")", "\n", "", "elif", "improve", "<", "0", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Surrogate objective didn't improve. Bakctracking...\"", ")", "\n", "", "elif", "float", "(", "new_kl", ")", ">", "self", ".", "max_kl", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"KL divergence exceeds max_kl. Bakctracking...\"", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "kl_record", ".", "append", "(", "float", "(", "new_kl", ")", ")", "\n", "self", ".", "policy_step_size_record", ".", "append", "(", "step_size", ")", "\n", "break", "\n", "", "step_size", "*=", "0.5", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\n", "\"Line search coundn't find a good step size. The policy was not\"", "\n", "\" updated.\"", "\n", ")", "\n", "self", ".", "policy_step_size_record", ".", "append", "(", "0.0", ")", "\n", "_replace_params_data", "(", "\n", "policy_params", ",", "\n", "_split_and_reshape_to_ndarrays", "(", "\n", "flat_params", ",", "sizes", "=", "policy_params_sizes", ",", "shapes", "=", "policy_params_shapes", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO.batch_act": [[704, 709], ["trpo.TRPO._batch_act_train", "trpo.TRPO._batch_act_eval"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_act_train", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_act_eval"], ["", "", "def", "batch_act", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_batch_act_train", "(", "batch_obs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_batch_act_eval", "(", "batch_obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO.batch_observe": [[710, 715], ["trpo.TRPO._batch_observe_train", "trpo.TRPO._batch_observe_eval"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_observe_train", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._batch_observe_eval"], ["", "", "def", "batch_observe", "(", "self", ",", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "_batch_observe_train", "(", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_batch_observe_eval", "(", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._batch_act_eval": [[716, 736], ["trpo.TRPO.batch_states", "trpo.TRPO.obs_normalizer", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pfrl.utils.evaluating", "pfrl.utils.recurrent.one_step_forward", "trpo.TRPO.model", "pfrl.utils.mode_of_distribution.mode_of_distribution().cpu().numpy", "action_distrib.sample().cpu().numpy", "pfrl.utils.mode_of_distribution.mode_of_distribution().cpu", "action_distrib.sample().cpu", "pfrl.utils.mode_of_distribution.mode_of_distribution", "action_distrib.sample"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.mode_of_distribution.mode_of_distribution", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "", "def", "_batch_act_eval", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "assert", "not", "self", ".", "training", "\n", "b_state", "=", "self", ".", "batch_states", "(", "batch_obs", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "\n", "if", "self", ".", "obs_normalizer", ":", "\n", "            ", "b_state", "=", "self", ".", "obs_normalizer", "(", "b_state", ",", "update", "=", "False", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ",", "pfrl", ".", "utils", ".", "evaluating", "(", "self", ".", "model", ")", ":", "\n", "            ", "if", "self", ".", "recurrent", ":", "\n", "                ", "(", "action_distrib", ",", "_", ")", ",", "self", ".", "test_recurrent_states", "=", "one_step_forward", "(", "\n", "self", ".", "model", ",", "b_state", ",", "self", ".", "test_recurrent_states", "\n", ")", "\n", "", "else", ":", "\n", "                ", "action_distrib", ",", "_", "=", "self", ".", "model", "(", "b_state", ")", "\n", "", "if", "self", ".", "act_deterministically", ":", "\n", "                ", "action", "=", "mode_of_distribution", "(", "action_distrib", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "action", "=", "action_distrib", ".", "sample", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._batch_act_train": [[737, 772], ["trpo.TRPO.batch_states", "len", "list", "list", "trpo.TRPO.obs_normalizer", "trpo.TRPO._initialize_batch_variables", "len", "len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pfrl.utils.evaluating", "action_distrib.sample().cpu().numpy", "trpo.TRPO.entropy_record.extend", "trpo.TRPO.value_record.extend", "pfrl.utils.recurrent.one_step_forward", "trpo.TRPO.model", "action_distrib.entropy().cpu().numpy", "batch_value.cpu().numpy", "action_distrib.sample().cpu", "action_distrib.entropy().cpu", "batch_value.cpu", "action_distrib.sample", "action_distrib.entropy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._initialize_batch_variables", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.entropy"], ["", "def", "_batch_act_train", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "assert", "self", ".", "training", "\n", "b_state", "=", "self", ".", "batch_states", "(", "batch_obs", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "\n", "if", "self", ".", "obs_normalizer", ":", "\n", "            ", "b_state", "=", "self", ".", "obs_normalizer", "(", "b_state", ",", "update", "=", "False", ")", "\n", "\n", "", "num_envs", "=", "len", "(", "batch_obs", ")", "\n", "if", "self", ".", "batch_last_episode", "is", "None", ":", "\n", "            ", "self", ".", "_initialize_batch_variables", "(", "num_envs", ")", "\n", "", "assert", "len", "(", "self", ".", "batch_last_episode", ")", "==", "num_envs", "\n", "assert", "len", "(", "self", ".", "batch_last_state", ")", "==", "num_envs", "\n", "assert", "len", "(", "self", ".", "batch_last_action", ")", "==", "num_envs", "\n", "\n", "# action_distrib will be recomputed when computing gradients", "\n", "with", "torch", ".", "no_grad", "(", ")", ",", "pfrl", ".", "utils", ".", "evaluating", "(", "self", ".", "model", ")", ":", "\n", "            ", "if", "self", ".", "recurrent", ":", "\n", "                ", "assert", "self", ".", "train_prev_recurrent_states", "is", "None", "\n", "self", ".", "train_prev_recurrent_states", "=", "self", ".", "train_recurrent_states", "\n", "(", "\n", "(", "action_distrib", ",", "batch_value", ")", ",", "\n", "self", ".", "train_recurrent_states", ",", "\n", ")", "=", "one_step_forward", "(", "\n", "self", ".", "model", ",", "b_state", ",", "self", ".", "train_prev_recurrent_states", "\n", ")", "\n", "", "else", ":", "\n", "                ", "action_distrib", ",", "batch_value", "=", "self", ".", "model", "(", "b_state", ")", "\n", "", "batch_action", "=", "action_distrib", ".", "sample", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "entropy_record", ".", "extend", "(", "action_distrib", ".", "entropy", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "value_record", ".", "extend", "(", "batch_value", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "self", ".", "batch_last_state", "=", "list", "(", "batch_obs", ")", "\n", "self", ".", "batch_last_action", "=", "list", "(", "batch_action", ")", "\n", "\n", "return", "batch_action", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._batch_observe_eval": [[773, 785], ["pfrl.utils.recurrent.mask_recurrent_state_at", "enumerate", "zip"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.mask_recurrent_state_at"], ["", "def", "_batch_observe_eval", "(", "self", ",", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", ":", "\n", "        ", "assert", "not", "self", ".", "training", "\n", "if", "self", ".", "recurrent", ":", "\n", "# Reset recurrent states when episodes end", "\n", "            ", "indices_that_ended", "=", "[", "\n", "i", "\n", "for", "i", ",", "(", "done", ",", "reset", ")", "in", "enumerate", "(", "zip", "(", "batch_done", ",", "batch_reset", ")", ")", "\n", "if", "done", "or", "reset", "\n", "]", "\n", "if", "indices_that_ended", ":", "\n", "                ", "self", ".", "test_recurrent_states", "=", "mask_recurrent_state_at", "(", "\n", "self", ".", "test_recurrent_states", ",", "indices_that_ended", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO._batch_observe_train": [[787, 839], ["enumerate", "trpo.TRPO._update_if_dataset_is_ready", "zip", "trpo.TRPO.batch_last_episode[].append", "trpo.TRPO.memory.append", "pfrl.utils.recurrent.mask_recurrent_state_at", "pfrl.utils.recurrent.get_recurrent_state_at", "pfrl.utils.recurrent.get_recurrent_state_at", "enumerate", "zip"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._update_if_dataset_is_ready", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.mask_recurrent_state_at", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.get_recurrent_state_at", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.get_recurrent_state_at"], ["", "", "", "def", "_batch_observe_train", "(", "self", ",", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", ":", "\n", "        ", "assert", "self", ".", "training", "\n", "\n", "for", "i", ",", "(", "state", ",", "action", ",", "reward", ",", "next_state", ",", "done", ",", "reset", ")", "in", "enumerate", "(", "\n", "zip", "(", "# NOQA", "\n", "self", ".", "batch_last_state", ",", "\n", "self", ".", "batch_last_action", ",", "\n", "batch_reward", ",", "\n", "batch_obs", ",", "\n", "batch_done", ",", "\n", "batch_reset", ",", "\n", ")", "\n", ")", ":", "\n", "            ", "if", "state", "is", "not", "None", ":", "\n", "                ", "assert", "action", "is", "not", "None", "\n", "transition", "=", "{", "\n", "\"state\"", ":", "state", ",", "\n", "\"action\"", ":", "action", ",", "\n", "\"reward\"", ":", "reward", ",", "\n", "\"next_state\"", ":", "next_state", ",", "\n", "\"nonterminal\"", ":", "0.0", "if", "done", "else", "1.0", ",", "\n", "}", "\n", "if", "self", ".", "recurrent", ":", "\n", "                    ", "transition", "[", "\"recurrent_state\"", "]", "=", "get_recurrent_state_at", "(", "\n", "self", ".", "train_prev_recurrent_states", ",", "i", ",", "detach", "=", "True", "\n", ")", "\n", "transition", "[", "\"next_recurrent_state\"", "]", "=", "get_recurrent_state_at", "(", "\n", "self", ".", "train_recurrent_states", ",", "i", ",", "detach", "=", "True", "\n", ")", "\n", "", "self", ".", "batch_last_episode", "[", "i", "]", ".", "append", "(", "transition", ")", "\n", "", "if", "done", "or", "reset", ":", "\n", "                ", "assert", "self", ".", "batch_last_episode", "[", "i", "]", "\n", "self", ".", "memory", ".", "append", "(", "self", ".", "batch_last_episode", "[", "i", "]", ")", "\n", "self", ".", "batch_last_episode", "[", "i", "]", "=", "[", "]", "\n", "", "self", ".", "batch_last_state", "[", "i", "]", "=", "None", "\n", "self", ".", "batch_last_action", "[", "i", "]", "=", "None", "\n", "\n", "", "self", ".", "train_prev_recurrent_states", "=", "None", "\n", "\n", "if", "self", ".", "recurrent", ":", "\n", "# Reset recurrent states when episodes end", "\n", "            ", "indices_that_ended", "=", "[", "\n", "i", "\n", "for", "i", ",", "(", "done", ",", "reset", ")", "in", "enumerate", "(", "zip", "(", "batch_done", ",", "batch_reset", ")", ")", "\n", "if", "done", "or", "reset", "\n", "]", "\n", "if", "indices_that_ended", ":", "\n", "                ", "self", ".", "train_recurrent_states", "=", "mask_recurrent_state_at", "(", "\n", "self", ".", "train_recurrent_states", ",", "indices_that_ended", "\n", ")", "\n", "\n", "", "", "self", ".", "_update_if_dataset_is_ready", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo.TRPO.get_statistics": [[840, 847], ["trpo._mean_or_nan", "trpo._mean_or_nan", "trpo._mean_or_nan", "trpo._mean_or_nan"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan"], ["", "def", "get_statistics", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "(", "\"average_value\"", ",", "_mean_or_nan", "(", "self", ".", "value_record", ")", ")", ",", "\n", "(", "\"average_entropy\"", ",", "_mean_or_nan", "(", "self", ".", "entropy_record", ")", ")", ",", "\n", "(", "\"average_kl\"", ",", "_mean_or_nan", "(", "self", ".", "kl_record", ")", ")", ",", "\n", "(", "\"average_policy_step_size\"", ",", "_mean_or_nan", "(", "self", ".", "policy_step_size_record", ")", ")", ",", "\n", "(", "\"explained_variance\"", ",", "self", ".", "explained_variance", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._flatten_and_concat_variables": [[32, 35], ["torch.cat", "torch.cat", "torch.flatten", "torch.flatten"], "function", ["None"], ["def", "_flatten_and_concat_variables", "(", "vs", ")", ":", "\n", "    ", "\"\"\"Flatten and concat variables to make a single flat vector variable.\"\"\"", "\n", "return", "torch", ".", "cat", "(", "[", "torch", ".", "flatten", "(", "v", ")", "for", "v", "in", "vs", "]", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._as_ndarray": [[37, 43], ["isinstance", "x.cpu().numpy", "x.cpu"], "function", ["None"], ["", "def", "_as_ndarray", "(", "x", ")", ":", "\n", "    ", "\"\"\"torch.Tensor or ndarray -> ndarray.\"\"\"", "\n", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._split_and_reshape_to_ndarrays": [[45, 49], ["torch.split", "torch.split", "v.reshape", "zip"], "function", ["None"], ["", "", "def", "_split_and_reshape_to_ndarrays", "(", "flat_v", ",", "sizes", ",", "shapes", ")", ":", "\n", "    ", "\"\"\"Split and reshape a single flat vector to make a list of ndarrays.\"\"\"", "\n", "vs", "=", "torch", ".", "split", "(", "flat_v", ",", "sizes", ")", "\n", "return", "[", "v", ".", "reshape", "(", "shape", ")", "for", "v", ",", "shape", "in", "zip", "(", "vs", ",", "shapes", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._replace_params_data": [[51, 57], ["zip", "isinstance", "param.data.copy_"], "function", ["None"], ["", "def", "_replace_params_data", "(", "params", ",", "new_params_data", ")", ":", "\n", "    ", "\"\"\"Replace data of params with new data.\"\"\"", "\n", "for", "param", ",", "new_param_data", "in", "zip", "(", "params", ",", "new_params_data", ")", ":", "\n", "        ", "assert", "param", ".", "shape", "==", "new_param_data", ".", "shape", "\n", "assert", "isinstance", "(", "param", ",", "nn", ".", "Parameter", ")", "\n", "param", ".", "data", ".", "copy_", "(", "new_param_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._hessian_vector_product": [[59, 69], ["vec.detach.detach", "torch.autograd.grad", "torch.autograd.grad", "all", "trpo._flatten_and_concat_variables", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._flatten_and_concat_variables", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "", "def", "_hessian_vector_product", "(", "flat_grads", ",", "params", ",", "vec", ")", ":", "\n", "    ", "\"\"\"Compute hessian vector product efficiently by backprop.\"\"\"", "\n", "vec", "=", "vec", ".", "detach", "(", ")", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "[", "torch", ".", "sum", "(", "flat_grads", "*", "vec", ")", "]", ",", "params", ",", "retain_graph", "=", "True", "\n", ")", "\n", "assert", "all", "(", "\n", "grad", "is", "not", "None", "for", "grad", "in", "grads", "\n", ")", ",", "\"The Hessian-vector product contains None.\"", "\n", "return", "_flatten_and_concat_variables", "(", "grads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._mean_or_nan": [[71, 74], ["numpy.mean"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["", "def", "_mean_or_nan", "(", "xs", ")", ":", "\n", "    ", "\"\"\"Return its mean a non-empty sequence, numpy.nan for a empty one.\"\"\"", "\n", "return", "np", ".", "mean", "(", "xs", ")", "if", "xs", "else", "np", ".", "nan", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._collect_first_recurrent_states_of_policy": [[76, 80], ["None"], "function", ["None"], ["", "def", "_collect_first_recurrent_states_of_policy", "(", "episodes", ")", ":", "\n", "    ", "return", "[", "\n", "(", "ep", "[", "0", "]", "[", "\"recurrent_state\"", "]", "[", "0", "]", "if", "ep", "[", "0", "]", "[", "\"recurrent_state\"", "]", "is", "not", "None", "else", "None", ")", "\n", "for", "ep", "in", "episodes", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.trpo._collect_first_recurrent_states_of_vf": [[83, 87], ["None"], "function", ["None"], ["", "def", "_collect_first_recurrent_states_of_vf", "(", "episodes", ")", ":", "\n", "    ", "return", "[", "\n", "(", "ep", "[", "0", "]", "[", "\"recurrent_state\"", "]", "[", "1", "]", "if", "ep", "[", "0", "]", "[", "\"recurrent_state\"", "]", "is", "not", "None", "else", "None", ")", "\n", "for", "ep", "in", "episodes", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.double_dqn.DoubleDQN._compute_target_values": [[13, 55], ["torch.stack", "torch.mean", "pfrl.utils.evaluating", "pfrl.utils.recurrent.pack_and_forward", "q_eval.evaluate_actions", "torch.mean.append", "pfrl.utils.recurrent.pack_and_forward", "double_dqn.DoubleDQN.target_model", "double_dqn.DoubleDQN.model"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward"], ["def", "_compute_target_values", "(", "self", ",", "exp_batch", ")", ":", "\n", "\n", "        ", "batch_next_state", "=", "exp_batch", "[", "\"next_state\"", "]", "\n", "\n", "with", "evaluating", "(", "self", ".", "model", ")", ":", "\n", "            ", "if", "self", ".", "recurrent", ":", "\n", "                ", "next_qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "model", ",", "\n", "batch_next_state", ",", "\n", "exp_batch", "[", "\"next_recurrent_state\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "next_qout", "=", "[", "self", ".", "model", "(", "elem", "[", "0", "]", ",", "elem", "[", "1", "]", ",", "elem", "[", "2", "]", ")", "for", "elem", "in", "batch_next_state", "]", "\n", "\n", "", "", "if", "self", ".", "recurrent", ":", "\n", "            ", "target_next_qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "target_model", ",", "\n", "batch_next_state", ",", "\n", "exp_batch", "[", "\"next_recurrent_state\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "target_next_qout", "=", "[", "self", ".", "target_model", "(", "elem", "[", "0", "]", ",", "elem", "[", "1", "]", ",", "elem", "[", "2", "]", ")", "for", "elem", "in", "batch_next_state", "]", "\n", "\n", "# print(\"next_qout:\", next_qout)", "\n", "# print(\"target_next_qout:\", target_next_qout)", "\n", "\n", "# \u8ba1\u7b97next_q_max\u65f6\uff0c\u8981\u5206\u522b\u9488\u5bf9\u6bcf\u4e2abatch\u7684q\u503c\u8fdb\u884c\u8bc4\u4f30", "\n", "", "next_q_max", "=", "[", "]", "# \u521d\u59cb\u5316next_q_max\u77e9\u9635", "\n", "count", "=", "0", "# \u5b9a\u4e49\u9488\u5bf9next_qout\u4e2d\uff0cgreedy_actions\u7684\u8ba1\u6570\u5668", "\n", "for", "q_eval", "in", "target_next_qout", ":", "\n", "            ", "q_e", "=", "q_eval", ".", "evaluate_actions", "(", "next_qout", "[", "count", "]", ".", "greedy_actions", ")", "\n", "count", "+=", "1", "\n", "next_q_max", ".", "append", "(", "q_e", ")", "\n", "", "next_q_max", "=", "torch", ".", "stack", "(", "next_q_max", ")", "\n", "next_q_max", "=", "torch", ".", "mean", "(", "next_q_max", ",", "dim", "=", "1", ")", "\n", "# next_q_max = target_next_qout.evaluate_actions(next_qout.greedy_actions)", "\n", "\n", "batch_rewards", "=", "exp_batch", "[", "\"reward\"", "]", "\n", "batch_terminal", "=", "exp_batch", "[", "\"is_state_terminal\"", "]", "\n", "discount", "=", "exp_batch", "[", "\"discount\"", "]", "\n", "\n", "return", "batch_rewards", "+", "discount", "*", "(", "1.0", "-", "batch_terminal", ")", "*", "next_q_max", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a3c.A3C.__init__": [[46, 108], ["copy.deepcopy", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "optimizer", ",", "\n", "t_max", ",", "\n", "gamma", ",", "\n", "beta", "=", "1e-2", ",", "\n", "process_idx", "=", "0", ",", "\n", "phi", "=", "lambda", "x", ":", "x", ",", "\n", "pi_loss_coef", "=", "1.0", ",", "\n", "v_loss_coef", "=", "0.5", ",", "\n", "keep_loss_scale_same", "=", "False", ",", "\n", "normalize_grad_by_t_max", "=", "False", ",", "\n", "use_average_reward", "=", "False", ",", "\n", "act_deterministically", "=", "False", ",", "\n", "max_grad_norm", "=", "None", ",", "\n", "recurrent", "=", "False", ",", "\n", "average_entropy_decay", "=", "0.999", ",", "\n", "average_value_decay", "=", "0.999", ",", "\n", "batch_states", "=", "batch_states", ",", "\n", ")", ":", "\n", "\n", "# Globally shared model", "\n", "        ", "self", ".", "shared_model", "=", "model", "\n", "\n", "# Thread specific model", "\n", "self", ".", "model", "=", "copy", ".", "deepcopy", "(", "self", ".", "shared_model", ")", "\n", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "self", ".", "t_max", "=", "t_max", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "phi", "=", "phi", "\n", "self", ".", "pi_loss_coef", "=", "pi_loss_coef", "\n", "self", ".", "v_loss_coef", "=", "v_loss_coef", "\n", "self", ".", "keep_loss_scale_same", "=", "keep_loss_scale_same", "\n", "self", ".", "normalize_grad_by_t_max", "=", "normalize_grad_by_t_max", "\n", "self", ".", "use_average_reward", "=", "use_average_reward", "\n", "self", ".", "act_deterministically", "=", "act_deterministically", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "self", ".", "recurrent", "=", "recurrent", "\n", "self", ".", "average_value_decay", "=", "average_value_decay", "\n", "self", ".", "average_entropy_decay", "=", "average_entropy_decay", "\n", "self", ".", "batch_states", "=", "batch_states", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "t_start", "=", "0", "\n", "self", ".", "past_obs", "=", "{", "}", "\n", "self", ".", "past_action", "=", "{", "}", "\n", "self", ".", "past_rewards", "=", "{", "}", "\n", "self", ".", "past_recurrent_state", "=", "{", "}", "\n", "self", ".", "average_reward", "=", "0", "\n", "\n", "# Recurrent states of the model", "\n", "self", ".", "train_recurrent_states", "=", "None", "\n", "self", ".", "test_recurrent_states", "=", "None", "\n", "\n", "# Stats", "\n", "self", ".", "average_value", "=", "0", "\n", "self", ".", "average_entropy", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a3c.A3C.sync_parameters": [[109, 111], ["pfrl.utils.copy_param.copy_param"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.copy_param"], ["", "def", "sync_parameters", "(", "self", ")", ":", "\n", "        ", "copy_param", ".", "copy_param", "(", "target_link", "=", "self", ".", "model", ",", "source_link", "=", "self", ".", "shared_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a3c.A3C.assert_shared_memory": [[112, 126], ["a3c.A3C.shared_model.state_dict().items", "a3c.A3C.model.state_dict().items", "[].values", "v.is_shared", "param_state.items", "a3c.A3C.shared_model.state_dict", "a3c.A3C.model.state_dict", "v.is_shared", "isinstance", "a3c.A3C.optimizer.state_dict", "v.is_shared"], "methods", ["None"], ["", "def", "assert_shared_memory", "(", "self", ")", ":", "\n", "# Shared model must have tensors in shared memory", "\n", "        ", "for", "k", ",", "v", "in", "self", ".", "shared_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "assert", "v", ".", "is_shared", "(", ")", ",", "\"{} is not in shared memory\"", ".", "format", "(", "k", ")", "\n", "\n", "# Local model must not have tensors in shared memory", "\n", "", "for", "k", ",", "v", "in", "self", ".", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "assert", "not", "v", ".", "is_shared", "(", ")", ",", "\"{} is in shared memory\"", ".", "format", "(", "k", ")", "\n", "\n", "# Optimizer must have tensors in shared memory", "\n", "", "for", "param_state", "in", "self", ".", "optimizer", ".", "state_dict", "(", ")", "[", "\"state\"", "]", ".", "values", "(", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "param_state", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "assert", "v", ".", "is_shared", "(", ")", ",", "\"{} is not in shared memory\"", ".", "format", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a3c.A3C.shared_attributes": [[127, 130], ["None"], "methods", ["None"], ["", "", "", "", "@", "property", "\n", "def", "shared_attributes", "(", "self", ")", ":", "\n", "        ", "return", "(", "\"shared_model\"", ",", "\"optimizer\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a3c.A3C.update": [[131, 230], ["a3c.A3C.assert_shared_memory", "a3c.A3C.batch_states", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "batch_distrib.log_prob", "batch_distrib.entropy", "reversed", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "a3c.A3C.model.zero_grad", "total_loss.backward", "pfrl.utils.copy_param.copy_grad", "a3c.A3C.optimizer.step", "a3c.A3C.sync_parameters", "float", "pfrl.utils.recurrent.pack_and_forward", "a3c.A3C.model", "range", "rev_returns.append", "list", "batch_v.detach().squeeze", "torch.mse_loss", "torch.mse_loss", "logger.debug", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "pfrl.utils.clip_l2_grad_norm_", "logger.debug", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pfrl.utils.evaluating", "reversed", "a3c.A3C.model.parameters", "pfrl.utils.recurrent.one_step_forward", "a3c.A3C.model", "range", "range", "batch_v.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a3c.A3C.assert_shared_memory", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.log_prob", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.entropy", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.copy_grad", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a3c.A3C.sync_parameters", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.clip_l2_grad_norm.clip_l2_grad_norm_", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward"], ["", "def", "update", "(", "self", ",", "statevar", ")", ":", "\n", "        ", "assert", "self", ".", "t_start", "<", "self", ".", "t", "\n", "\n", "n", "=", "self", ".", "t", "-", "self", ".", "t_start", "\n", "\n", "self", ".", "assert_shared_memory", "(", ")", "\n", "\n", "if", "statevar", "is", "None", ":", "\n", "            ", "R", "=", "0", "\n", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ",", "pfrl", ".", "utils", ".", "evaluating", "(", "self", ".", "model", ")", ":", "\n", "                ", "if", "self", ".", "recurrent", ":", "\n", "                    ", "(", "_", ",", "vout", ")", ",", "_", "=", "one_step_forward", "(", "\n", "self", ".", "model", ",", "statevar", ",", "self", ".", "train_recurrent_states", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "_", ",", "vout", "=", "self", ".", "model", "(", "statevar", ")", "\n", "", "", "R", "=", "float", "(", "vout", ")", "\n", "\n", "", "pi_loss_factor", "=", "self", ".", "pi_loss_coef", "\n", "v_loss_factor", "=", "self", ".", "v_loss_coef", "\n", "\n", "# Normalize the loss of sequences truncated by terminal states", "\n", "if", "self", ".", "keep_loss_scale_same", "and", "self", ".", "t", "-", "self", ".", "t_start", "<", "self", ".", "t_max", ":", "\n", "            ", "factor", "=", "self", ".", "t_max", "/", "(", "self", ".", "t", "-", "self", ".", "t_start", ")", "\n", "pi_loss_factor", "*=", "factor", "\n", "v_loss_factor", "*=", "factor", "\n", "\n", "", "if", "self", ".", "normalize_grad_by_t_max", ":", "\n", "            ", "pi_loss_factor", "/=", "self", ".", "t", "-", "self", ".", "t_start", "\n", "v_loss_factor", "/=", "self", ".", "t", "-", "self", ".", "t_start", "\n", "\n", "# Batch re-compute for efficient backprop", "\n", "", "batch_obs", "=", "self", ".", "batch_states", "(", "\n", "[", "self", ".", "past_obs", "[", "i", "]", "for", "i", "in", "range", "(", "self", ".", "t_start", ",", "self", ".", "t", ")", "]", ",", "\n", "self", ".", "device", ",", "\n", "self", ".", "phi", ",", "\n", ")", "\n", "if", "self", ".", "recurrent", ":", "\n", "            ", "(", "batch_distrib", ",", "batch_v", ")", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "model", ",", "\n", "[", "batch_obs", "]", ",", "\n", "self", ".", "past_recurrent_state", "[", "self", ".", "t_start", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "batch_distrib", ",", "batch_v", "=", "self", ".", "model", "(", "batch_obs", ")", "\n", "", "batch_action", "=", "torch", ".", "stack", "(", "\n", "[", "self", ".", "past_action", "[", "i", "]", "for", "i", "in", "range", "(", "self", ".", "t_start", ",", "self", ".", "t", ")", "]", "\n", ")", "\n", "batch_log_prob", "=", "batch_distrib", ".", "log_prob", "(", "batch_action", ")", "\n", "batch_entropy", "=", "batch_distrib", ".", "entropy", "(", ")", "\n", "rev_returns", "=", "[", "]", "\n", "for", "i", "in", "reversed", "(", "range", "(", "self", ".", "t_start", ",", "self", ".", "t", ")", ")", ":", "\n", "            ", "R", "*=", "self", ".", "gamma", "\n", "R", "+=", "self", ".", "past_rewards", "[", "i", "]", "\n", "rev_returns", ".", "append", "(", "R", ")", "\n", "", "batch_return", "=", "torch", ".", "as_tensor", "(", "list", "(", "reversed", "(", "rev_returns", ")", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "batch_adv", "=", "batch_return", "-", "batch_v", ".", "detach", "(", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "assert", "batch_log_prob", ".", "shape", "==", "(", "n", ",", ")", "\n", "assert", "batch_adv", ".", "shape", "==", "(", "n", ",", ")", "\n", "assert", "batch_entropy", ".", "shape", "==", "(", "n", ",", ")", "\n", "pi_loss", "=", "torch", ".", "sum", "(", "\n", "-", "batch_adv", "*", "batch_log_prob", "-", "self", ".", "beta", "*", "batch_entropy", ",", "dim", "=", "0", "\n", ")", "\n", "assert", "batch_v", ".", "shape", "==", "(", "n", ",", "1", ")", "\n", "assert", "batch_return", ".", "shape", "==", "(", "n", ",", ")", "\n", "v_loss", "=", "F", ".", "mse_loss", "(", "batch_v", ",", "batch_return", "[", "...", ",", "None", "]", ",", "reduction", "=", "\"sum\"", ")", "/", "2", "\n", "\n", "if", "pi_loss_factor", "!=", "1.0", ":", "\n", "            ", "pi_loss", "*=", "pi_loss_factor", "\n", "\n", "", "if", "v_loss_factor", "!=", "1.0", ":", "\n", "            ", "v_loss", "*=", "v_loss_factor", "\n", "\n", "", "if", "self", ".", "process_idx", "==", "0", ":", "\n", "            ", "logger", ".", "debug", "(", "\"pi_loss:%s v_loss:%s\"", ",", "pi_loss", ",", "v_loss", ")", "\n", "\n", "", "total_loss", "=", "torch", ".", "squeeze", "(", "pi_loss", ")", "+", "torch", ".", "squeeze", "(", "v_loss", ")", "\n", "\n", "# Compute gradients using thread-specific model", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "clip_l2_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "# Copy the gradients to the globally shared model", "\n", "", "copy_param", ".", "copy_grad", "(", "target_link", "=", "self", ".", "shared_model", ",", "source_link", "=", "self", ".", "model", ")", "\n", "# Update the globally shared model", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "if", "self", ".", "process_idx", "==", "0", ":", "\n", "            ", "logger", ".", "debug", "(", "\"update\"", ")", "\n", "\n", "", "self", ".", "sync_parameters", "(", ")", "\n", "\n", "self", ".", "past_obs", "=", "{", "}", "\n", "self", ".", "past_action", "=", "{", "}", "\n", "self", ".", "past_rewards", "=", "{", "}", "\n", "self", ".", "past_recurrent_state", "=", "{", "}", "\n", "\n", "self", ".", "t_start", "=", "self", ".", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a3c.A3C.act": [[231, 236], ["a3c.A3C._act_train", "a3c.A3C._act_eval"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE._act_train", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE._act_eval"], ["", "def", "act", "(", "self", ",", "obs", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_act_train", "(", "obs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_act_eval", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a3c.A3C.observe": [[237, 242], ["a3c.A3C._observe_train", "a3c.A3C._observe_eval"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE._observe_train", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE._observe_eval"], ["", "", "def", "observe", "(", "self", ",", "obs", ",", "reward", ",", "done", ",", "reset", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "_observe_train", "(", "obs", ",", "reward", ",", "done", ",", "reset", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_observe_eval", "(", "obs", ",", "reward", ",", "done", ",", "reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a3c.A3C._act_train": [[243, 270], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "a3c.A3C.batch_states", "pout.sample", "action[].detach", "pfrl.utils.recurrent.one_step_forward", "a3c.A3C.model", "pout.sample.cpu().numpy", "float", "float", "pout.entropy", "pout.sample.cpu"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.entropy"], ["", "", "def", "_act_train", "(", "self", ",", "obs", ")", ":", "\n", "\n", "        ", "self", ".", "past_obs", "[", "self", ".", "t", "]", "=", "obs", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "statevar", "=", "self", ".", "batch_states", "(", "[", "obs", "]", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "if", "self", ".", "recurrent", ":", "\n", "                ", "self", ".", "past_recurrent_state", "[", "self", ".", "t", "]", "=", "self", ".", "train_recurrent_states", "\n", "(", "pout", ",", "vout", ")", ",", "self", ".", "train_recurrent_states", "=", "one_step_forward", "(", "\n", "self", ".", "model", ",", "statevar", ",", "self", ".", "train_recurrent_states", "\n", ")", "\n", "", "else", ":", "\n", "                ", "pout", ",", "vout", "=", "self", ".", "model", "(", "statevar", ")", "\n", "# Do not backprop through sampled actions", "\n", "", "action", "=", "pout", ".", "sample", "(", ")", "\n", "self", ".", "past_action", "[", "self", ".", "t", "]", "=", "action", "[", "0", "]", ".", "detach", "(", ")", "\n", "action", "=", "action", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n", "# Update stats", "\n", "", "self", ".", "average_value", "+=", "(", "1", "-", "self", ".", "average_value_decay", ")", "*", "(", "\n", "float", "(", "vout", ")", "-", "self", ".", "average_value", "\n", ")", "\n", "self", ".", "average_entropy", "+=", "(", "1", "-", "self", ".", "average_entropy_decay", ")", "*", "(", "\n", "float", "(", "pout", ".", "entropy", "(", ")", ")", "-", "self", ".", "average_entropy", "\n", ")", "\n", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a3c.A3C._observe_train": [[271, 286], ["logger.debug", "a3c.A3C.update", "a3c.A3C.batch_states"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states"], ["", "def", "_observe_train", "(", "self", ",", "obs", ",", "reward", ",", "done", ",", "reset", ")", ":", "\n", "        ", "self", ".", "t", "+=", "1", "\n", "self", ".", "past_rewards", "[", "self", ".", "t", "-", "1", "]", "=", "reward", "\n", "if", "self", ".", "process_idx", "==", "0", ":", "\n", "            ", "logger", ".", "debug", "(", "\n", "\"t:%s action:%s reward:%s\"", ",", "self", ".", "t", ",", "self", ".", "past_action", "[", "self", ".", "t", "-", "1", "]", ",", "reward", "\n", ")", "\n", "", "if", "self", ".", "t", "-", "self", ".", "t_start", "==", "self", ".", "t_max", "or", "done", "or", "reset", ":", "\n", "            ", "if", "done", ":", "\n", "                ", "statevar", "=", "None", "\n", "", "else", ":", "\n", "                ", "statevar", "=", "self", ".", "batch_states", "(", "[", "obs", "]", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "", "self", ".", "update", "(", "statevar", ")", "\n", "", "if", "done", "or", "reset", ":", "\n", "            ", "self", ".", "train_recurrent_states", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a3c.A3C._act_eval": [[287, 301], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pfrl.utils.evaluating", "a3c.A3C.batch_states", "pfrl.utils.recurrent.one_step_forward", "a3c.A3C.model", "pfrl.utils.mode_of_distribution.mode_of_distribution().cpu().numpy", "pout.sample().cpu().numpy", "pfrl.utils.mode_of_distribution.mode_of_distribution().cpu", "pout.sample().cpu", "pfrl.utils.mode_of_distribution.mode_of_distribution", "pout.sample"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.mode_of_distribution.mode_of_distribution", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "", "def", "_act_eval", "(", "self", ",", "obs", ")", ":", "\n", "# Use the process-local model for acting", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ",", "pfrl", ".", "utils", ".", "evaluating", "(", "self", ".", "model", ")", ":", "\n", "            ", "statevar", "=", "self", ".", "batch_states", "(", "[", "obs", "]", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "if", "self", ".", "recurrent", ":", "\n", "                ", "(", "pout", ",", "_", ")", ",", "self", ".", "test_recurrent_states", "=", "one_step_forward", "(", "\n", "self", ".", "model", ",", "statevar", ",", "self", ".", "test_recurrent_states", "\n", ")", "\n", "", "else", ":", "\n", "                ", "pout", ",", "_", "=", "self", ".", "model", "(", "statevar", ")", "\n", "", "if", "self", ".", "act_deterministically", ":", "\n", "                ", "return", "mode_of_distribution", "(", "pout", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "return", "pout", ".", "sample", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a3c.A3C._observe_eval": [[302, 305], ["None"], "methods", ["None"], ["", "", "", "def", "_observe_eval", "(", "self", ",", "obs", ",", "reward", ",", "done", ",", "reset", ")", ":", "\n", "        ", "if", "done", "or", "reset", ":", "\n", "            ", "self", ".", "test_recurrent_states", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a3c.A3C.load": [[306, 309], ["super().load", "pfrl.utils.copy_param.copy_param"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.copy_param"], ["", "", "def", "load", "(", "self", ",", "dirname", ")", ":", "\n", "        ", "super", "(", ")", ".", "load", "(", "dirname", ")", "\n", "copy_param", ".", "copy_param", "(", "target_link", "=", "self", ".", "shared_model", ",", "source_link", "=", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.a3c.A3C.get_statistics": [[310, 314], ["None"], "methods", ["None"], ["", "def", "get_statistics", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "(", "\"average_value\"", ",", "self", ".", "average_value", ")", ",", "\n", "(", "\"average_entropy\"", ",", "self", ".", "average_entropy", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dpp.AbstractDPP._l_operator": [[15, 18], ["NotImplementedError"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "_l_operator", "(", "self", ",", "qout", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dpp.AbstractDPP._compute_target_values": [[19, 38], ["dpp.AbstractDPP._l_operator", "pfrl.utils.recurrent.pack_and_forward", "dpp.AbstractDPP.target_model"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dpp.DPPGreedy._l_operator", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward"], ["", "def", "_compute_target_values", "(", "self", ",", "exp_batch", ")", ":", "\n", "\n", "        ", "batch_next_state", "=", "exp_batch", "[", "\"next_state\"", "]", "\n", "\n", "if", "self", ".", "recurrent", ":", "\n", "            ", "target_next_qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "target_model", ",", "\n", "batch_next_state", ",", "\n", "exp_batch", "[", "\"next_recurrent_state\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "target_next_qout", "=", "self", ".", "target_model", "(", "batch_next_state", ")", "\n", "", "next_q_expect", "=", "self", ".", "_l_operator", "(", "target_next_qout", ")", "\n", "\n", "batch_rewards", "=", "exp_batch", "[", "\"reward\"", "]", "\n", "batch_terminal", "=", "exp_batch", "[", "\"is_state_terminal\"", "]", "\n", "\n", "return", "(", "\n", "batch_rewards", "+", "exp_batch", "[", "\"discount\"", "]", "*", "(", "1", "-", "batch_terminal", ")", "*", "next_q_expect", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dpp.AbstractDPP._compute_y_and_t": [[40, 86], ["len", "dpp.AbstractDPP.evaluate_actions().reshape", "pfrl.utils.recurrent.pack_and_forward", "dpp.AbstractDPP.model", "torch.no_grad", "dpp.AbstractDPP.evaluate_actions().reshape", "dpp.AbstractDPP._l_operator().reshape", "dpp.AbstractDPP._compute_target_values().reshape", "dpp.AbstractDPP.evaluate_actions", "pfrl.utils.recurrent.pack_and_forward", "dpp.AbstractDPP.target_model", "dpp.AbstractDPP.evaluate_actions", "dpp.AbstractDPP._l_operator", "dpp.AbstractDPP._compute_target_values"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dpp.DPPGreedy._l_operator", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dpp.AbstractDPP._compute_target_values"], ["", "def", "_compute_y_and_t", "(", "self", ",", "exp_batch", ")", ":", "\n", "\n", "        ", "batch_state", "=", "exp_batch", "[", "\"state\"", "]", "\n", "batch_size", "=", "len", "(", "exp_batch", "[", "\"reward\"", "]", ")", "\n", "\n", "if", "self", ".", "recurrent", ":", "\n", "            ", "qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "model", ",", "\n", "batch_state", ",", "\n", "exp_batch", "[", "\"recurrent_state\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "qout", "=", "self", ".", "model", "(", "batch_state", ")", "\n", "\n", "", "batch_actions", "=", "exp_batch", "[", "\"action\"", "]", "\n", "# Q(s_t,a_t)", "\n", "batch_q", "=", "qout", ".", "evaluate_actions", "(", "batch_actions", ")", ".", "reshape", "(", "(", "batch_size", ",", "1", ")", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Compute target values", "\n", "            ", "if", "self", ".", "recurrent", ":", "\n", "                ", "target_qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "target_model", ",", "\n", "batch_state", ",", "\n", "exp_batch", "[", "\"recurrent_state\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "target_qout", "=", "self", ".", "target_model", "(", "batch_state", ")", "\n", "\n", "# Q'(s_t,a_t)", "\n", "", "target_q", "=", "target_qout", ".", "evaluate_actions", "(", "batch_actions", ")", ".", "reshape", "(", "\n", "(", "batch_size", ",", "1", ")", "\n", ")", "\n", "\n", "# LQ'(s_t,a)", "\n", "target_q_expect", "=", "self", ".", "_l_operator", "(", "target_qout", ")", ".", "reshape", "(", "(", "batch_size", ",", "1", ")", ")", "\n", "\n", "# r + g * LQ'(s_{t+1},a)", "\n", "batch_q_target", "=", "self", ".", "_compute_target_values", "(", "exp_batch", ")", ".", "reshape", "(", "\n", "(", "batch_size", ",", "1", ")", "\n", ")", "\n", "\n", "# Q'(s_t,a_t) + r + g * LQ'(s_{t+1},a) - LQ'(s_t,a)", "\n", "t", "=", "target_q", "+", "batch_q_target", "-", "target_q_expect", "\n", "\n", "", "return", "batch_q", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dpp.DPP.__init__": [[97, 100], ["kwargs.pop", "pfrl.agents.dqn.DQN.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "eta", "=", "kwargs", ".", "pop", "(", "\"eta\"", ",", "1.0", ")", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dpp.DPP._l_operator": [[101, 103], ["qout.compute_expectation"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.DistributionalDiscreteActionValue.compute_expectation"], ["", "def", "_l_operator", "(", "self", ",", "qout", ")", ":", "\n", "        ", "return", "qout", ".", "compute_expectation", "(", "self", ".", "eta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dpp.DPPL.__init__": [[114, 117], ["kwargs.pop", "pfrl.agents.dqn.DQN.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "eta", "=", "kwargs", ".", "pop", "(", "\"eta\"", ",", "1.0", ")", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dpp.DPPL._l_operator": [[118, 120], ["torch.logsumexp"], "methods", ["None"], ["", "def", "_l_operator", "(", "self", ",", "qout", ")", ":", "\n", "        ", "return", "torch", ".", "logsumexp", "(", "self", ".", "eta", "*", "qout", ".", "q_values", ",", "dim", "=", "1", ")", "/", "self", ".", "eta", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.dpp.DPPGreedy._l_operator": [[128, 130], ["None"], "methods", ["None"], ["def", "_l_operator", "(", "self", ",", "qout", ")", ":", "\n", "        ", "return", "qout", ".", "max", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic.TemperatureHolder.__init__": [[31, 35], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "initial_log_temperature", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "log_temperature", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "tensor", "(", "initial_log_temperature", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic.TemperatureHolder.forward": [[37, 40], ["torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return a temperature as a torch.Tensor.\"\"\"", "\n", "return", "torch", ".", "exp", "(", "self", ".", "log_temperature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic.SoftActorCritic.__init__": [[97, 191], ["logging.getLogger", "pfrl.replay_buffer.ReplayUpdater", "copy.deepcopy().eval().requires_grad_", "copy.deepcopy().eval().requires_grad_", "collections.deque", "collections.deque", "collections.deque", "collections.deque", "collections.deque", "torch.cuda.is_available", "torch.device", "soft_actor_critic.SoftActorCritic.policy.to", "soft_actor_critic.SoftActorCritic.q_func1.to", "soft_actor_critic.SoftActorCritic.q_func2.to", "torch.device", "soft_actor_critic.TemperatureHolder", "torch.optim.Adam", "torch.optim.Adam", "soft_actor_critic.SoftActorCritic.temperature_holder.to", "copy.deepcopy().eval", "copy.deepcopy().eval", "numpy.log", "soft_actor_critic.SoftActorCritic.temperature_holder.parameters", "soft_actor_critic.SoftActorCritic.temperature_holder.parameters", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["def", "__init__", "(", "\n", "self", ",", "\n", "policy", ",", "\n", "q_func1", ",", "\n", "q_func2", ",", "\n", "policy_optimizer", ",", "\n", "q_func1_optimizer", ",", "\n", "q_func2_optimizer", ",", "\n", "replay_buffer", ",", "\n", "gamma", ",", "\n", "gpu", "=", "None", ",", "\n", "replay_start_size", "=", "10000", ",", "\n", "minibatch_size", "=", "100", ",", "\n", "update_interval", "=", "1", ",", "\n", "phi", "=", "lambda", "x", ":", "x", ",", "\n", "soft_update_tau", "=", "5e-3", ",", "\n", "max_grad_norm", "=", "None", ",", "\n", "logger", "=", "getLogger", "(", "__name__", ")", ",", "\n", "batch_states", "=", "batch_states", ",", "\n", "burnin_action_func", "=", "None", ",", "\n", "initial_temperature", "=", "1.0", ",", "\n", "entropy_target", "=", "None", ",", "\n", "temperature_optimizer_lr", "=", "None", ",", "\n", "act_deterministically", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "policy", "=", "policy", "\n", "self", ".", "q_func1", "=", "q_func1", "\n", "self", ".", "q_func2", "=", "q_func2", "\n", "\n", "if", "gpu", "is", "not", "None", "and", "gpu", ">=", "0", ":", "\n", "            ", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", ")", "\n", "self", ".", "policy", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "q_func1", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "q_func2", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "", "self", ".", "replay_buffer", "=", "replay_buffer", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "gpu", "=", "gpu", "\n", "self", ".", "phi", "=", "phi", "\n", "self", ".", "soft_update_tau", "=", "soft_update_tau", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "policy_optimizer", "=", "policy_optimizer", "\n", "self", ".", "q_func1_optimizer", "=", "q_func1_optimizer", "\n", "self", ".", "q_func2_optimizer", "=", "q_func2_optimizer", "\n", "self", ".", "replay_updater", "=", "ReplayUpdater", "(", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", "update_func", "=", "self", ".", "update", ",", "\n", "batchsize", "=", "minibatch_size", ",", "\n", "n_times_update", "=", "1", ",", "\n", "replay_start_size", "=", "replay_start_size", ",", "\n", "update_interval", "=", "update_interval", ",", "\n", "episodic_update", "=", "False", ",", "\n", ")", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "self", ".", "batch_states", "=", "batch_states", "\n", "self", ".", "burnin_action_func", "=", "burnin_action_func", "\n", "self", ".", "initial_temperature", "=", "initial_temperature", "\n", "self", ".", "entropy_target", "=", "entropy_target", "\n", "if", "self", ".", "entropy_target", "is", "not", "None", ":", "\n", "            ", "self", ".", "temperature_holder", "=", "TemperatureHolder", "(", "\n", "initial_log_temperature", "=", "np", ".", "log", "(", "initial_temperature", ")", "\n", ")", "\n", "if", "temperature_optimizer_lr", "is", "not", "None", ":", "\n", "                ", "self", ".", "temperature_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "temperature_holder", ".", "parameters", "(", ")", ",", "lr", "=", "temperature_optimizer_lr", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "temperature_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "temperature_holder", ".", "parameters", "(", ")", "\n", ")", "\n", "", "if", "gpu", "is", "not", "None", "and", "gpu", ">=", "0", ":", "\n", "                ", "self", ".", "temperature_holder", ".", "to", "(", "self", ".", "device", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "temperature_holder", "=", "None", "\n", "self", ".", "temperature_optimizer", "=", "None", "\n", "", "self", ".", "act_deterministically", "=", "act_deterministically", "\n", "\n", "self", ".", "t", "=", "0", "\n", "\n", "# Target model", "\n", "self", ".", "target_q_func1", "=", "copy", ".", "deepcopy", "(", "self", ".", "q_func1", ")", ".", "eval", "(", ")", ".", "requires_grad_", "(", "False", ")", "\n", "self", ".", "target_q_func2", "=", "copy", ".", "deepcopy", "(", "self", ".", "q_func2", ")", ".", "eval", "(", ")", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "# Statistics", "\n", "self", ".", "q1_record", "=", "collections", ".", "deque", "(", "maxlen", "=", "1000", ")", "\n", "self", ".", "q2_record", "=", "collections", ".", "deque", "(", "maxlen", "=", "1000", ")", "\n", "self", ".", "entropy_record", "=", "collections", ".", "deque", "(", "maxlen", "=", "1000", ")", "\n", "self", ".", "q_func1_loss_record", "=", "collections", ".", "deque", "(", "maxlen", "=", "100", ")", "\n", "self", ".", "q_func2_loss_record", "=", "collections", ".", "deque", "(", "maxlen", "=", "100", ")", "\n", "self", ".", "n_policy_updates", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic.SoftActorCritic.temperature": [[192, 199], ["torch.no_grad", "float", "soft_actor_critic.SoftActorCritic.temperature_holder"], "methods", ["None"], ["", "@", "property", "\n", "def", "temperature", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "entropy_target", "is", "None", ":", "\n", "            ", "return", "self", ".", "initial_temperature", "\n", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "return", "float", "(", "self", ".", "temperature_holder", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic.SoftActorCritic.sync_target_network": [[200, 213], ["pfrl.utils.copy_param.synchronize_parameters", "pfrl.utils.copy_param.synchronize_parameters"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.synchronize_parameters", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.synchronize_parameters"], ["", "", "", "def", "sync_target_network", "(", "self", ")", ":", "\n", "        ", "\"\"\"Synchronize target network with current network.\"\"\"", "\n", "synchronize_parameters", "(", "\n", "src", "=", "self", ".", "q_func1", ",", "\n", "dst", "=", "self", ".", "target_q_func1", ",", "\n", "method", "=", "\"soft\"", ",", "\n", "tau", "=", "self", ".", "soft_update_tau", ",", "\n", ")", "\n", "synchronize_parameters", "(", "\n", "src", "=", "self", ".", "q_func2", ",", "\n", "dst", "=", "self", ".", "target_q_func2", ",", "\n", "method", "=", "\"soft\"", ",", "\n", "tau", "=", "self", ".", "soft_update_tau", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic.SoftActorCritic.update_q_func": [[215, 264], ["torch.flatten", "torch.flatten", "soft_actor_critic.SoftActorCritic.q1_record.extend", "soft_actor_critic.SoftActorCritic.q2_record.extend", "soft_actor_critic.SoftActorCritic.q_func1_loss_record.append", "soft_actor_critic.SoftActorCritic.q_func2_loss_record.append", "soft_actor_critic.SoftActorCritic.q_func1_optimizer.zero_grad", "loss1.backward", "soft_actor_critic.SoftActorCritic.q_func1_optimizer.step", "soft_actor_critic.SoftActorCritic.q_func2_optimizer.zero_grad", "loss2.backward", "soft_actor_critic.SoftActorCritic.q_func2_optimizer.step", "torch.no_grad", "pfrl.utils.evaluating", "pfrl.utils.evaluating", "pfrl.utils.evaluating", "soft_actor_critic.SoftActorCritic.policy", "soft_actor_critic.SoftActorCritic.sample", "soft_actor_critic.SoftActorCritic.log_prob", "soft_actor_critic.SoftActorCritic.target_q_func1", "soft_actor_critic.SoftActorCritic.target_q_func2", "torch.min", "soft_actor_critic.SoftActorCritic.q_func1", "soft_actor_critic.SoftActorCritic.q_func2", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.flatten.detach().cpu().numpy", "torch.flatten.detach().cpu().numpy", "float", "float", "pfrl.utils.clip_l2_grad_norm_", "pfrl.utils.clip_l2_grad_norm_", "soft_actor_critic.SoftActorCritic.q_func1.parameters", "soft_actor_critic.SoftActorCritic.q_func2.parameters", "torch.flatten", "torch.flatten.detach().cpu", "torch.flatten.detach().cpu", "torch.flatten.detach", "torch.flatten.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.log_prob", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.clip_l2_grad_norm.clip_l2_grad_norm_", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.clip_l2_grad_norm.clip_l2_grad_norm_"], ["", "def", "update_q_func", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Compute loss for a given Q-function.\"\"\"", "\n", "\n", "batch_next_state", "=", "batch", "[", "\"next_state\"", "]", "\n", "batch_rewards", "=", "batch", "[", "\"reward\"", "]", "\n", "batch_terminal", "=", "batch", "[", "\"is_state_terminal\"", "]", "\n", "batch_state", "=", "batch", "[", "\"state\"", "]", "\n", "batch_actions", "=", "batch", "[", "\"action\"", "]", "\n", "batch_discount", "=", "batch", "[", "\"discount\"", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ",", "pfrl", ".", "utils", ".", "evaluating", "(", "self", ".", "policy", ")", ",", "pfrl", ".", "utils", ".", "evaluating", "(", "\n", "self", ".", "target_q_func1", "\n", ")", ",", "pfrl", ".", "utils", ".", "evaluating", "(", "self", ".", "target_q_func2", ")", ":", "\n", "            ", "next_action_distrib", "=", "self", ".", "policy", "(", "batch_next_state", ")", "\n", "next_actions", "=", "next_action_distrib", ".", "sample", "(", ")", "\n", "next_log_prob", "=", "next_action_distrib", ".", "log_prob", "(", "next_actions", ")", "\n", "next_q1", "=", "self", ".", "target_q_func1", "(", "(", "batch_next_state", ",", "next_actions", ")", ")", "\n", "next_q2", "=", "self", ".", "target_q_func2", "(", "(", "batch_next_state", ",", "next_actions", ")", ")", "\n", "next_q", "=", "torch", ".", "min", "(", "next_q1", ",", "next_q2", ")", "\n", "entropy_term", "=", "self", ".", "temperature", "*", "next_log_prob", "[", "...", ",", "None", "]", "\n", "assert", "next_q", ".", "shape", "==", "entropy_term", ".", "shape", "\n", "\n", "target_q", "=", "batch_rewards", "+", "batch_discount", "*", "(", "\n", "1.0", "-", "batch_terminal", "\n", ")", "*", "torch", ".", "flatten", "(", "next_q", "-", "entropy_term", ")", "\n", "\n", "", "predict_q1", "=", "torch", ".", "flatten", "(", "self", ".", "q_func1", "(", "(", "batch_state", ",", "batch_actions", ")", ")", ")", "\n", "predict_q2", "=", "torch", ".", "flatten", "(", "self", ".", "q_func2", "(", "(", "batch_state", ",", "batch_actions", ")", ")", ")", "\n", "\n", "loss1", "=", "0.5", "*", "F", ".", "mse_loss", "(", "target_q", ",", "predict_q1", ")", "\n", "loss2", "=", "0.5", "*", "F", ".", "mse_loss", "(", "target_q", ",", "predict_q2", ")", "\n", "\n", "# Update stats", "\n", "self", ".", "q1_record", ".", "extend", "(", "predict_q1", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "q2_record", ".", "extend", "(", "predict_q2", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "q_func1_loss_record", ".", "append", "(", "float", "(", "loss1", ")", ")", "\n", "self", ".", "q_func2_loss_record", ".", "append", "(", "float", "(", "loss2", ")", ")", "\n", "\n", "self", ".", "q_func1_optimizer", ".", "zero_grad", "(", ")", "\n", "loss1", ".", "backward", "(", ")", "\n", "if", "self", ".", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "clip_l2_grad_norm_", "(", "self", ".", "q_func1", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "", "self", ".", "q_func1_optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "q_func2_optimizer", ".", "zero_grad", "(", ")", "\n", "loss2", ".", "backward", "(", ")", "\n", "if", "self", ".", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "clip_l2_grad_norm_", "(", "self", ".", "q_func2", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "", "self", ".", "q_func2_optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic.SoftActorCritic.update_temperature": [[265, 273], ["soft_actor_critic.SoftActorCritic.temperature_optimizer.zero_grad", "loss.backward", "soft_actor_critic.SoftActorCritic.temperature_optimizer.step", "torch.mean", "pfrl.utils.clip_l2_grad_norm_", "soft_actor_critic.SoftActorCritic.temperature_holder.parameters", "soft_actor_critic.SoftActorCritic.temperature_holder"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.clip_l2_grad_norm.clip_l2_grad_norm_"], ["", "def", "update_temperature", "(", "self", ",", "log_prob", ")", ":", "\n", "        ", "assert", "not", "log_prob", ".", "requires_grad", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "self", ".", "temperature_holder", "(", ")", "*", "(", "log_prob", "+", "self", ".", "entropy_target", ")", ")", "\n", "self", ".", "temperature_optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "clip_l2_grad_norm_", "(", "self", ".", "temperature_holder", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "", "self", ".", "temperature_optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic.SoftActorCritic.update_policy_and_temperature": [[274, 310], ["soft_actor_critic.SoftActorCritic.policy", "soft_actor_critic.SoftActorCritic.rsample", "soft_actor_critic.SoftActorCritic.log_prob", "soft_actor_critic.SoftActorCritic.q_func1", "soft_actor_critic.SoftActorCritic.q_func2", "torch.min", "torch.mean", "soft_actor_critic.SoftActorCritic.policy_optimizer.zero_grad", "torch.mean.backward", "soft_actor_critic.SoftActorCritic.policy_optimizer.step", "pfrl.utils.clip_l2_grad_norm_", "soft_actor_critic.SoftActorCritic.update_temperature", "torch.no_grad", "soft_actor_critic.SoftActorCritic.policy.parameters", "soft_actor_critic.SoftActorCritic.log_prob.detach", "soft_actor_critic.SoftActorCritic.entropy_record.extend", "soft_actor_critic.SoftActorCritic.entropy().detach().cpu().numpy", "soft_actor_critic.SoftActorCritic.entropy_record.extend", "soft_actor_critic.SoftActorCritic.entropy().detach().cpu", "soft_actor_critic.SoftActorCritic.log_prob.detach().cpu().numpy", "soft_actor_critic.SoftActorCritic.entropy().detach", "soft_actor_critic.SoftActorCritic.log_prob.detach().cpu", "soft_actor_critic.SoftActorCritic.entropy", "soft_actor_critic.SoftActorCritic.log_prob.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.rsample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.log_prob", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.clip_l2_grad_norm.clip_l2_grad_norm_", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic.SoftActorCritic.update_temperature", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.entropy"], ["", "def", "update_policy_and_temperature", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Compute loss for actor.\"\"\"", "\n", "\n", "batch_state", "=", "batch", "[", "\"state\"", "]", "\n", "\n", "action_distrib", "=", "self", ".", "policy", "(", "batch_state", ")", "\n", "actions", "=", "action_distrib", ".", "rsample", "(", ")", "\n", "log_prob", "=", "action_distrib", ".", "log_prob", "(", "actions", ")", "\n", "q1", "=", "self", ".", "q_func1", "(", "(", "batch_state", ",", "actions", ")", ")", "\n", "q2", "=", "self", ".", "q_func2", "(", "(", "batch_state", ",", "actions", ")", ")", "\n", "q", "=", "torch", ".", "min", "(", "q1", ",", "q2", ")", "\n", "\n", "entropy_term", "=", "self", ".", "temperature", "*", "log_prob", "[", "...", ",", "None", "]", "\n", "assert", "q", ".", "shape", "==", "entropy_term", ".", "shape", "\n", "loss", "=", "torch", ".", "mean", "(", "entropy_term", "-", "q", ")", "\n", "\n", "self", ".", "policy_optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "clip_l2_grad_norm_", "(", "self", ".", "policy", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "", "self", ".", "policy_optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "n_policy_updates", "+=", "1", "\n", "\n", "if", "self", ".", "entropy_target", "is", "not", "None", ":", "\n", "            ", "self", ".", "update_temperature", "(", "log_prob", ".", "detach", "(", ")", ")", "\n", "\n", "# Record entropy", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "entropy_record", ".", "extend", "(", "\n", "action_distrib", ".", "entropy", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "", "except", "NotImplementedError", ":", "\n", "# Record - log p(x) instead", "\n", "                ", "self", ".", "entropy_record", ".", "extend", "(", "-", "log_prob", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic.SoftActorCritic.update": [[311, 317], ["pfrl.replay_buffer.batch_experiences", "soft_actor_critic.SoftActorCritic.update_q_func", "soft_actor_critic.SoftActorCritic.update_policy_and_temperature", "soft_actor_critic.SoftActorCritic.sync_target_network"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.batch_experiences", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update_q_func", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic.SoftActorCritic.update_policy_and_temperature", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.sync_target_network"], ["", "", "", "def", "update", "(", "self", ",", "experiences", ",", "errors_out", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the model from experiences\"\"\"", "\n", "batch", "=", "batch_experiences", "(", "experiences", ",", "self", ".", "device", ",", "self", ".", "phi", ",", "self", ".", "gamma", ")", "\n", "self", ".", "update_q_func", "(", "batch", ")", "\n", "self", ".", "update_policy_and_temperature", "(", "batch", ")", "\n", "self", ".", "sync_target_network", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic.SoftActorCritic.batch_select_greedy_action": [[318, 327], ["torch.no_grad", "pfrl.utils.evaluating", "soft_actor_critic.SoftActorCritic.batch_states", "soft_actor_critic.SoftActorCritic.policy", "pfrl.utils.mode_of_distribution.mode_of_distribution().cpu().numpy", "soft_actor_critic.SoftActorCritic.sample().cpu().numpy", "pfrl.utils.mode_of_distribution.mode_of_distribution().cpu", "soft_actor_critic.SoftActorCritic.sample().cpu", "pfrl.utils.mode_of_distribution.mode_of_distribution", "soft_actor_critic.SoftActorCritic.sample"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.mode_of_distribution.mode_of_distribution", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "def", "batch_select_greedy_action", "(", "self", ",", "batch_obs", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ",", "pfrl", ".", "utils", ".", "evaluating", "(", "self", ".", "policy", ")", ":", "\n", "            ", "batch_xs", "=", "self", ".", "batch_states", "(", "batch_obs", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "policy_out", "=", "self", ".", "policy", "(", "batch_xs", ")", "\n", "if", "deterministic", ":", "\n", "                ", "batch_action", "=", "mode_of_distribution", "(", "policy_out", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "batch_action", "=", "policy_out", ".", "sample", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", "return", "batch_action", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic.SoftActorCritic.batch_act": [[328, 333], ["soft_actor_critic.SoftActorCritic._batch_act_train", "soft_actor_critic.SoftActorCritic._batch_act_eval"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_act_train", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_act_eval"], ["", "def", "batch_act", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_batch_act_train", "(", "batch_obs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_batch_act_eval", "(", "batch_obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic.SoftActorCritic.batch_observe": [[334, 337], ["soft_actor_critic.SoftActorCritic._batch_observe_train"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_observe_train"], ["", "", "def", "batch_observe", "(", "self", ",", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "_batch_observe_train", "(", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic.SoftActorCritic._batch_act_eval": [[338, 342], ["soft_actor_critic.SoftActorCritic.batch_select_greedy_action"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic.SoftActorCritic.batch_select_greedy_action"], ["", "", "def", "_batch_act_eval", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "assert", "not", "self", ".", "training", "\n", "return", "self", ".", "batch_select_greedy_action", "(", "\n", "batch_obs", ",", "deterministic", "=", "self", ".", "act_deterministically", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic.SoftActorCritic._batch_act_train": [[344, 354], ["list", "list", "soft_actor_critic.SoftActorCritic.batch_select_greedy_action", "soft_actor_critic.SoftActorCritic.burnin_action_func", "range", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic.SoftActorCritic.batch_select_greedy_action"], ["", "def", "_batch_act_train", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "assert", "self", ".", "training", "\n", "if", "self", ".", "burnin_action_func", "is", "not", "None", "and", "self", ".", "n_policy_updates", "==", "0", ":", "\n", "            ", "batch_action", "=", "[", "self", ".", "burnin_action_func", "(", ")", "for", "_", "in", "range", "(", "len", "(", "batch_obs", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "batch_action", "=", "self", ".", "batch_select_greedy_action", "(", "batch_obs", ")", "\n", "", "self", ".", "batch_last_obs", "=", "list", "(", "batch_obs", ")", "\n", "self", ".", "batch_last_action", "=", "list", "(", "batch_action", ")", "\n", "\n", "return", "batch_action", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic.SoftActorCritic._batch_observe_train": [[355, 376], ["range", "len", "soft_actor_critic.SoftActorCritic.replay_updater.update_if_necessary", "soft_actor_critic.SoftActorCritic.replay_buffer.append", "soft_actor_critic.SoftActorCritic.replay_buffer.stop_current_episode"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.ReplayUpdater.update_if_necessary", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.stop_current_episode"], ["", "def", "_batch_observe_train", "(", "self", ",", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", ":", "\n", "        ", "assert", "self", ".", "training", "\n", "for", "i", "in", "range", "(", "len", "(", "batch_obs", ")", ")", ":", "\n", "            ", "self", ".", "t", "+=", "1", "\n", "if", "self", ".", "batch_last_obs", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "assert", "self", ".", "batch_last_action", "[", "i", "]", "is", "not", "None", "\n", "# Add a transition to the replay buffer", "\n", "self", ".", "replay_buffer", ".", "append", "(", "\n", "state", "=", "self", ".", "batch_last_obs", "[", "i", "]", ",", "\n", "action", "=", "self", ".", "batch_last_action", "[", "i", "]", ",", "\n", "reward", "=", "batch_reward", "[", "i", "]", ",", "\n", "next_state", "=", "batch_obs", "[", "i", "]", ",", "\n", "next_action", "=", "None", ",", "\n", "is_state_terminal", "=", "batch_done", "[", "i", "]", ",", "\n", "env_id", "=", "i", ",", "\n", ")", "\n", "if", "batch_reset", "[", "i", "]", "or", "batch_done", "[", "i", "]", ":", "\n", "                    ", "self", ".", "batch_last_obs", "[", "i", "]", "=", "None", "\n", "self", ".", "batch_last_action", "[", "i", "]", "=", "None", "\n", "self", ".", "replay_buffer", ".", "stop_current_episode", "(", "env_id", "=", "i", ")", "\n", "", "", "self", ".", "replay_updater", ".", "update_if_necessary", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic.SoftActorCritic.get_statistics": [[377, 386], ["soft_actor_critic._mean_or_nan", "soft_actor_critic._mean_or_nan", "soft_actor_critic._mean_or_nan", "soft_actor_critic._mean_or_nan", "soft_actor_critic._mean_or_nan"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan"], ["", "", "def", "get_statistics", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "(", "\"average_q1\"", ",", "_mean_or_nan", "(", "self", ".", "q1_record", ")", ")", ",", "\n", "(", "\"average_q2\"", ",", "_mean_or_nan", "(", "self", ".", "q2_record", ")", ")", ",", "\n", "(", "\"average_q_func1_loss\"", ",", "_mean_or_nan", "(", "self", ".", "q_func1_loss_record", ")", ")", ",", "\n", "(", "\"average_q_func2_loss\"", ",", "_mean_or_nan", "(", "self", ".", "q_func2_loss_record", ")", ")", ",", "\n", "(", "\"n_updates\"", ",", "self", ".", "n_policy_updates", ")", ",", "\n", "(", "\"average_entropy\"", ",", "_mean_or_nan", "(", "self", ".", "entropy_record", ")", ")", ",", "\n", "(", "\"temperature\"", ",", "self", ".", "temperature", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.soft_actor_critic._mean_or_nan": [[19, 22], ["numpy.mean"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["def", "_mean_or_nan", "(", "xs", ")", ":", "\n", "    ", "\"\"\"Return its mean a non-empty sequence, numpy.nan for a empty one.\"\"\"", "\n", "return", "np", ".", "mean", "(", "xs", ")", "if", "xs", "else", "np", ".", "nan", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE.__init__": [[44, 92], ["torch.cuda.is_available", "torch.device", "reinforce.REINFORCE.model.to", "torch.device", "logging.getLogger"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "optimizer", ",", "\n", "gpu", "=", "None", ",", "\n", "beta", "=", "0", ",", "\n", "phi", "=", "lambda", "x", ":", "x", ",", "\n", "batchsize", "=", "1", ",", "\n", "act_deterministically", "=", "False", ",", "\n", "average_entropy_decay", "=", "0.999", ",", "\n", "backward_separately", "=", "False", ",", "\n", "batch_states", "=", "pfrl", ".", "utils", ".", "batch_states", ",", "\n", "recurrent", "=", "False", ",", "\n", "max_grad_norm", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "model", "=", "model", "\n", "if", "gpu", "is", "not", "None", "and", "gpu", ">=", "0", ":", "\n", "            ", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "phi", "=", "phi", "\n", "self", ".", "batchsize", "=", "batchsize", "\n", "self", ".", "backward_separately", "=", "backward_separately", "\n", "self", ".", "act_deterministically", "=", "act_deterministically", "\n", "self", ".", "average_entropy_decay", "=", "average_entropy_decay", "\n", "self", ".", "batch_states", "=", "batch_states", "\n", "self", ".", "recurrent", "=", "recurrent", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "self", ".", "logger", "=", "logger", "or", "getLogger", "(", "__name__", ")", "\n", "\n", "# Recurrent states of the model", "\n", "self", ".", "train_recurrent_states", "=", "None", "\n", "self", ".", "test_recurrent_states", "=", "None", "\n", "\n", "# Statistics", "\n", "self", ".", "average_entropy", "=", "0", "\n", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "reward_sequences", "=", "[", "[", "]", "]", "\n", "self", ".", "log_prob_sequences", "=", "[", "[", "]", "]", "\n", "self", ".", "entropy_sequences", "=", "[", "[", "]", "]", "\n", "self", ".", "n_backward", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE.act": [[93, 98], ["reinforce.REINFORCE._act_train", "reinforce.REINFORCE._act_eval"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE._act_train", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE._act_eval"], ["", "def", "act", "(", "self", ",", "obs", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_act_train", "(", "obs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_act_eval", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE.observe": [[99, 104], ["reinforce.REINFORCE._observe_train", "reinforce.REINFORCE._observe_eval"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE._observe_train", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE._observe_eval"], ["", "", "def", "observe", "(", "self", ",", "obs", ",", "reward", ",", "done", ",", "reset", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "_observe_train", "(", "obs", ",", "reward", ",", "done", ",", "reset", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_observe_eval", "(", "obs", ",", "reward", ",", "done", ",", "reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE._act_train": [[105, 130], ["reinforce.REINFORCE.batch_states", "reinforce.REINFORCE.sample", "reinforce.REINFORCE.log_prob_sequences[].append", "reinforce.REINFORCE.entropy_sequences[].append", "reinforce.REINFORCE.logger.debug", "pfrl.utils.recurrent.one_step_forward", "reinforce.REINFORCE.model", "reinforce.REINFORCE.log_prob", "reinforce.REINFORCE.entropy", "reinforce.REINFORCE.sample.cpu().numpy", "float", "reinforce.REINFORCE.sample.cpu", "reinforce.REINFORCE.entropy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.log_prob", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.entropy", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.entropy"], ["", "", "def", "_act_train", "(", "self", ",", "obs", ")", ":", "\n", "\n", "        ", "batch_obs", "=", "self", ".", "batch_states", "(", "[", "obs", "]", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "if", "self", ".", "recurrent", ":", "\n", "            ", "action_distrib", ",", "self", ".", "train_recurrent_states", "=", "one_step_forward", "(", "\n", "self", ".", "model", ",", "batch_obs", ",", "self", ".", "train_recurrent_states", "\n", ")", "\n", "", "else", ":", "\n", "            ", "action_distrib", "=", "self", ".", "model", "(", "batch_obs", ")", "\n", "", "batch_action", "=", "action_distrib", ".", "sample", "(", ")", "\n", "\n", "# Save values used to compute losses", "\n", "self", ".", "log_prob_sequences", "[", "-", "1", "]", ".", "append", "(", "action_distrib", ".", "log_prob", "(", "batch_action", ")", ")", "\n", "self", ".", "entropy_sequences", "[", "-", "1", "]", ".", "append", "(", "action_distrib", ".", "entropy", "(", ")", ")", "\n", "\n", "action", "=", "batch_action", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n", "self", ".", "logger", ".", "debug", "(", "\"t:%s a:%s\"", ",", "self", ".", "t", ",", "action", ")", "\n", "\n", "# Update stats", "\n", "self", ".", "average_entropy", "+=", "(", "1", "-", "self", ".", "average_entropy_decay", ")", "*", "(", "\n", "float", "(", "action_distrib", ".", "entropy", "(", ")", ")", "-", "self", ".", "average_entropy", "\n", ")", "\n", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE._observe_train": [[131, 159], ["reinforce.REINFORCE.reward_sequences[].append", "warnings.warn", "reinforce.REINFORCE.reward_sequences[].append", "reinforce.REINFORCE.accumulate_grad", "reinforce.REINFORCE.update_with_accumulated_grad", "len", "reinforce.REINFORCE.batch_update", "reinforce.REINFORCE.reward_sequences.append", "reinforce.REINFORCE.log_prob_sequences.append", "reinforce.REINFORCE.entropy_sequences.append"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE.accumulate_grad", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE.update_with_accumulated_grad", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE.batch_update", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "_observe_train", "(", "self", ",", "obs", ",", "reward", ",", "done", ",", "reset", ")", ":", "\n", "        ", "self", ".", "reward_sequences", "[", "-", "1", "]", ".", "append", "(", "reward", ")", "\n", "self", ".", "t", "+=", "1", "\n", "\n", "if", "done", "or", "reset", ":", "\n", "            ", "if", "not", "done", ":", "\n", "                ", "warnings", ".", "warn", "(", "\n", "\"Since REINFORCE supports episodic environments only, \"", "\n", "\"reset=True with done=False will throw away the last episode.\"", "\n", ")", "\n", "self", ".", "reward_sequences", "[", "-", "1", "]", "=", "[", "]", "\n", "self", ".", "log_prob_sequences", "[", "-", "1", "]", "=", "[", "]", "\n", "self", ".", "entropy_sequences", "[", "-", "1", "]", "=", "[", "]", "\n", "", "elif", "done", ":", "\n", "                ", "self", ".", "reward_sequences", "[", "-", "1", "]", ".", "append", "(", "reward", ")", "\n", "if", "self", ".", "backward_separately", ":", "\n", "                    ", "self", ".", "accumulate_grad", "(", ")", "\n", "if", "self", ".", "n_backward", "==", "self", ".", "batchsize", ":", "\n", "                        ", "self", ".", "update_with_accumulated_grad", "(", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "len", "(", "self", ".", "reward_sequences", ")", "==", "self", ".", "batchsize", ":", "\n", "                        ", "self", ".", "batch_update", "(", ")", "\n", "", "else", ":", "\n", "# Prepare for the next episode", "\n", "                        ", "self", ".", "reward_sequences", ".", "append", "(", "[", "]", ")", "\n", "self", ".", "log_prob_sequences", ".", "append", "(", "[", "]", ")", "\n", "self", ".", "entropy_sequences", ".", "append", "(", "[", "]", ")", "\n", "", "", "", "self", ".", "train_recurrent_states", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE._act_eval": [[160, 173], ["torch.no_grad", "reinforce.REINFORCE.batch_states", "pfrl.utils.recurrent.one_step_forward", "reinforce.REINFORCE.model", "pfrl.utils.mode_of_distribution.mode_of_distribution().cpu().numpy", "reinforce.REINFORCE.sample().cpu().numpy", "pfrl.utils.mode_of_distribution.mode_of_distribution().cpu", "reinforce.REINFORCE.sample().cpu", "pfrl.utils.mode_of_distribution.mode_of_distribution", "reinforce.REINFORCE.sample"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.mode_of_distribution.mode_of_distribution", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "", "def", "_act_eval", "(", "self", ",", "obs", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batch_obs", "=", "self", ".", "batch_states", "(", "[", "obs", "]", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "if", "self", ".", "recurrent", ":", "\n", "                ", "action_distrib", ",", "self", ".", "test_recurrent_states", "=", "one_step_forward", "(", "\n", "self", ".", "model", ",", "batch_obs", ",", "self", ".", "test_recurrent_states", "\n", ")", "\n", "", "else", ":", "\n", "                ", "action_distrib", "=", "self", ".", "model", "(", "batch_obs", ")", "\n", "", "if", "self", ".", "act_deterministically", ":", "\n", "                ", "return", "mode_of_distribution", "(", "action_distrib", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "return", "action_distrib", ".", "sample", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE._observe_eval": [[174, 177], ["None"], "methods", ["None"], ["", "", "", "def", "_observe_eval", "(", "self", ",", "obs", ",", "reward", ",", "done", ",", "reset", ")", ":", "\n", "        ", "if", "done", "or", "reset", ":", "\n", "            ", "self", ".", "test_recurrent_states", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE.accumulate_grad": [[178, 198], ["zip", "total_loss.backward", "reinforce.REINFORCE.optimizer.zero_grad", "zip", "torch.stack().sum", "len", "len", "numpy.cumsum", "losses.append", "len", "list", "torch.stack", "reversed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "", "def", "accumulate_grad", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "n_backward", "==", "0", ":", "\n", "            ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "# Compute losses", "\n", "", "losses", "=", "[", "]", "\n", "for", "r_seq", ",", "log_prob_seq", ",", "ent_seq", "in", "zip", "(", "\n", "self", ".", "reward_sequences", ",", "self", ".", "log_prob_sequences", ",", "self", ".", "entropy_sequences", "\n", ")", ":", "\n", "            ", "assert", "len", "(", "r_seq", ")", "-", "1", "==", "len", "(", "log_prob_seq", ")", "==", "len", "(", "ent_seq", ")", "\n", "# Convert rewards into returns (=sum of future rewards)", "\n", "R_seq", "=", "np", ".", "cumsum", "(", "list", "(", "reversed", "(", "r_seq", "[", "1", ":", "]", ")", ")", ")", "[", ":", ":", "-", "1", "]", "\n", "for", "R", ",", "log_prob", ",", "entropy", "in", "zip", "(", "R_seq", ",", "log_prob_seq", ",", "ent_seq", ")", ":", "\n", "                ", "loss", "=", "-", "R", "*", "log_prob", "-", "self", ".", "beta", "*", "entropy", "\n", "losses", ".", "append", "(", "loss", ")", "\n", "", "", "total_loss", "=", "torch", ".", "stack", "(", "losses", ")", ".", "sum", "(", ")", "/", "self", ".", "batchsize", "\n", "total_loss", ".", "backward", "(", ")", "\n", "self", ".", "reward_sequences", "=", "[", "[", "]", "]", "\n", "self", ".", "log_prob_sequences", "=", "[", "[", "]", "]", "\n", "self", ".", "entropy_sequences", "=", "[", "[", "]", "]", "\n", "self", ".", "n_backward", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE.batch_update": [[199, 210], ["reinforce.REINFORCE.accumulate_grad", "reinforce.REINFORCE.optimizer.step", "len", "len", "len", "pfrl.utils.clip_l2_grad_norm_", "reinforce.REINFORCE.model.parameters"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE.accumulate_grad", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.clip_l2_grad_norm.clip_l2_grad_norm_"], ["", "def", "batch_update", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "reward_sequences", ")", "==", "self", ".", "batchsize", "\n", "assert", "len", "(", "self", ".", "log_prob_sequences", ")", "==", "self", ".", "batchsize", "\n", "assert", "len", "(", "self", ".", "entropy_sequences", ")", "==", "self", ".", "batchsize", "\n", "# Update the model", "\n", "assert", "self", ".", "n_backward", "==", "0", "\n", "self", ".", "accumulate_grad", "(", ")", "\n", "if", "self", ".", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "clip_l2_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "n_backward", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE.update_with_accumulated_grad": [[211, 217], ["reinforce.REINFORCE.optimizer.step", "pfrl.utils.clip_l2_grad_norm_", "reinforce.REINFORCE.model.parameters"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.clip_l2_grad_norm.clip_l2_grad_norm_"], ["", "def", "update_with_accumulated_grad", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "n_backward", "==", "self", ".", "batchsize", "\n", "if", "self", ".", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "clip_l2_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "n_backward", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.reinforce.REINFORCE.get_statistics": [[218, 221], ["None"], "methods", ["None"], ["", "def", "get_statistics", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "(", "\"average_entropy\"", ",", "self", ".", "average_entropy", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.pal.PAL.__init__": [[19, 22], ["kwargs.pop", "pfrl.agents.dqn.DQN.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "kwargs", ".", "pop", "(", "\"alpha\"", ",", "0.9", ")", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.pal.PAL._compute_y_and_t": [[23, 106], ["len", "torch.stack", "torch.mean", "pfrl.utils.recurrent.pack_and_forward", "q_eval.evaluate_actions", "torch.mean.append", "torch.no_grad", "torch.stack", "torch.mean", "zip", "torch.stack", "torch.mean", "torch.stack", "torch.mean", "pal.PAL.model", "pfrl.utils.recurrent.pack_and_forward", "pfrl.utils.recurrent.pack_and_forward", "qt_cur.compute_advantage", "qt_next.compute_advantage", "torch.mean.append", "torch.mean.append", "pal.PAL.target_model", "pal.PAL.target_model", "torch.max"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.evaluate_actions", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.compute_advantage", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.compute_advantage", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max"], ["", "def", "_compute_y_and_t", "(", "self", ",", "exp_batch", ")", ":", "\n", "\n", "        ", "batch_state", "=", "exp_batch", "[", "\"state\"", "]", "\n", "batch_size", "=", "len", "(", "exp_batch", "[", "\"reward\"", "]", ")", "\n", "\n", "if", "self", ".", "recurrent", ":", "\n", "            ", "qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "model", ",", "\n", "batch_state", ",", "\n", "exp_batch", "[", "\"recurrent_state\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "qout", "=", "[", "self", ".", "model", "(", "elem", "[", "0", "]", ",", "elem", "[", "1", "]", ",", "elem", "[", "2", "]", ")", "for", "elem", "in", "batch_state", "]", "\n", "\n", "", "batch_actions", "=", "exp_batch", "[", "\"action\"", "]", "\n", "# \u6309\u7167DQN\u7a0b\u5e8f\u7684\u6539\u52a8\u5bf9\u4ee5\u4e0bQ\u503c\u7684\u8ba1\u7b97\u8fdb\u884c\u76f8\u540c\u6539\u52a8", "\n", "batch_q", "=", "[", "]", "# \u521d\u59cb\u5316batch_q\u77e9\u9635", "\n", "count", "=", "0", "# \u5b9a\u4e49\u9488\u5bf9batch_actions\u7684\u8ba1\u6570\u5668", "\n", "for", "q_eval", "in", "qout", ":", "\n", "            ", "q_e", "=", "q_eval", ".", "evaluate_actions", "(", "batch_actions", "[", "count", "]", ")", "# \u8ba1\u7b97batch\u7f16\u53f7\u4e3acount\u7684q\u503c", "\n", "count", "+=", "1", "\n", "batch_q", ".", "append", "(", "q_e", ")", "\n", "", "batch_q", "=", "torch", ".", "stack", "(", "batch_q", ")", "# \u5c06\u4e0a\u8ff0\u5faa\u73af\u751f\u6210\u7684list\u8f6c\u6362\u4e3atensor\u6570\u636e\u7c7b\u578b", "\n", "batch_q", "=", "torch", ".", "mean", "(", "batch_q", ",", "dim", "=", "1", ")", "\n", "\n", "# Compute target values", "\n", "batch_next_state", "=", "exp_batch", "[", "\"next_state\"", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "recurrent", ":", "\n", "                ", "target_qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "target_model", ",", "\n", "batch_state", ",", "\n", "exp_batch", "[", "\"recurrent_state\"", "]", ",", "\n", ")", "\n", "target_next_qout", ",", "_", "=", "pack_and_forward", "(", "\n", "self", ".", "target_model", ",", "\n", "batch_next_state", ",", "\n", "exp_batch", "[", "\"next_recurrent_state\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "target_qout", "=", "[", "self", ".", "target_model", "(", "elem", "[", "0", "]", ",", "elem", "[", "1", "]", ",", "elem", "[", "2", "]", ")", "for", "elem", "in", "batch_state", "]", "\n", "target_next_qout", "=", "[", "self", ".", "target_model", "(", "elem", "[", "0", "]", ",", "elem", "[", "1", "]", ",", "elem", "[", "2", "]", ")", "for", "elem", "in", "batch_next_state", "]", "\n", "\n", "# \u540c\u6837\u9700\u8981\u5bf9target_q\u503c\u8fdb\u884c\u4e0eq\u503c\u76f8\u540c\u65b9\u6cd5\u7684\u5904\u7406\uff0c\u4ee5\u5b9e\u73b0\u4e0ebatch_size\u7ef4\u5ea6\u7684\u5339\u914d", "\n", "", "next_q_max", "=", "[", "elem", ".", "max", "for", "elem", "in", "target_next_qout", "]", "\n", "next_q_max", "=", "torch", ".", "stack", "(", "next_q_max", ")", "\n", "next_q_max", "=", "torch", ".", "mean", "(", "next_q_max", ",", "dim", "=", "1", ")", "\n", "# next_q_max = torch.reshape(target_next_qout.max, (batch_size,))", "\n", "\n", "batch_rewards", "=", "exp_batch", "[", "\"reward\"", "]", "\n", "batch_terminal", "=", "exp_batch", "[", "\"is_state_terminal\"", "]", "\n", "\n", "# T Q: Bellman operator", "\n", "t_q", "=", "(", "\n", "batch_rewards", "\n", "+", "exp_batch", "[", "\"discount\"", "]", "*", "(", "1.0", "-", "batch_terminal", ")", "*", "next_q_max", "\n", ")", "\n", "\n", "# T_PAL Q: persistent advantage learning operator", "\n", "# \u7531\u4e8e\u539f\u59cb\u7a0b\u5e8f\u5bf9\u591a\u667a\u80fd\u4f53\u5f3a\u5316\u5b66\u4e60\u7684\u4e0d\u517c\u5bb9\uff0c\u540c\u6837\u9700\u8981\u8fdb\u884c\u7a0b\u5e8f\u6539\u52a8", "\n", "cur_advantage", "=", "[", "]", "# \u521d\u59cb\u5316\u5f53\u524d\u4f18\u52bf\u77e9\u9635", "\n", "next_advantage", "=", "[", "]", "# \u521d\u59cb\u5316next_step\u4f18\u52bf\u77e9\u9635", "\n", "count", "=", "0", "# # \u5b9a\u4e49\u9488\u5bf9batch_actions\u7684\u8ba1\u6570\u5668", "\n", "for", "qt_cur", ",", "qt_next", "in", "zip", "(", "target_qout", ",", "target_next_qout", ")", ":", "# \u904d\u5386\u591a\u4e2aQ\u503c\u5217\u8868", "\n", "                ", "qt_cur_advantage", "=", "qt_cur", ".", "compute_advantage", "(", "batch_actions", "[", "count", "]", ")", "\n", "qt_next_advantage", "=", "qt_next", ".", "compute_advantage", "(", "batch_actions", "[", "count", "]", ")", "\n", "count", "+=", "1", "\n", "cur_advantage", ".", "append", "(", "qt_cur_advantage", ")", "\n", "next_advantage", ".", "append", "(", "qt_next_advantage", ")", "\n", "", "cur_advantage", "=", "torch", ".", "stack", "(", "cur_advantage", ")", "\n", "cur_advantage", "=", "torch", ".", "mean", "(", "cur_advantage", ",", "dim", "=", "1", ")", "\n", "next_advantage", "=", "torch", ".", "stack", "(", "next_advantage", ")", "\n", "next_advantage", "=", "torch", ".", "mean", "(", "next_advantage", ",", "dim", "=", "1", ")", "\n", "\n", "# cur_advantage = torch.reshape(", "\n", "#     target_qout.compute_advantage(batch_actions), (batch_size,)", "\n", "# )", "\n", "# next_advantage = torch.reshape(", "\n", "#     target_next_qout.compute_advantage(batch_actions), (batch_size,)", "\n", "# )", "\n", "tpal_q", "=", "t_q", "+", "self", ".", "alpha", "*", "torch", ".", "max", "(", "cur_advantage", ",", "next_advantage", ")", "\n", "\n", "", "return", "batch_q", ",", "tpal_q", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.__init__": [[21, 47], ["logging.getLogger"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "pipe", ",", "\n", "model", ",", "\n", "explorer", ",", "\n", "phi", "=", "lambda", "x", ":", "x", ",", "\n", "recurrent", "=", "False", ",", "\n", "logger", "=", "getLogger", "(", "__name__", ")", ",", "\n", "batch_states", "=", "batch_states", ",", "\n", ")", ":", "\n", "        ", "self", ".", "pipe", "=", "pipe", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "explorer", "=", "explorer", "\n", "self", ".", "phi", "=", "phi", "\n", "self", ".", "recurrent", "=", "recurrent", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "batch_states", "=", "batch_states", "\n", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "last_state", "=", "None", "\n", "self", ".", "last_action", "=", "None", "\n", "\n", "# Recurrent states of the model", "\n", "self", ".", "train_recurrent_states", "=", "None", "\n", "self", ".", "train_prev_recurrent_states", "=", "None", "\n", "self", ".", "test_recurrent_states", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device": [[48, 55], ["next", "state_q_function_actor.StateQFunctionActor.model.parameters"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "# Getting the device from the first layer of the model.", "\n", "# This is a work around since torch.nn.Module does not hold", "\n", "# a `device` attribute. For more details:", "\n", "# https://github.com/pytorch/pytorch/issues/7460", "\n", "        ", "return", "next", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor._evaluate_model_and_update_recurrent_states": [[56, 71], ["state_q_function_actor.StateQFunctionActor.batch_states", "state_q_function_actor.StateQFunctionActor.model", "pfrl.utils.recurrent.one_step_forward", "pfrl.utils.recurrent.one_step_forward"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward"], ["", "def", "_evaluate_model_and_update_recurrent_states", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "batch_xs", "=", "self", ".", "batch_states", "(", "batch_obs", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "if", "self", ".", "recurrent", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "self", ".", "train_prev_recurrent_states", "=", "self", ".", "train_recurrent_states", "\n", "batch_av", ",", "self", ".", "train_recurrent_states", "=", "one_step_forward", "(", "\n", "self", ".", "model", ",", "batch_xs", ",", "self", ".", "train_recurrent_states", "\n", ")", "\n", "", "else", ":", "\n", "                ", "batch_av", ",", "self", ".", "test_recurrent_states", "=", "one_step_forward", "(", "\n", "self", ".", "model", ",", "batch_xs", ",", "self", ".", "test_recurrent_states", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "batch_av", "=", "self", ".", "model", "(", "batch_xs", ")", "\n", "", "return", "batch_av", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor._send_to_learner": [[72, 77], ["state_q_function_actor.StateQFunctionActor.pipe.send", "state_q_function_actor.StateQFunctionActor.pipe.send", "state_q_function_actor.StateQFunctionActor.pipe.recv"], "methods", ["None"], ["", "def", "_send_to_learner", "(", "self", ",", "transition", ",", "stop_episode", "=", "False", ")", ":", "\n", "        ", "self", ".", "pipe", ".", "send", "(", "(", "\"transition\"", ",", "transition", ")", ")", "\n", "if", "stop_episode", ":", "\n", "            ", "self", ".", "pipe", ".", "send", "(", "(", "\"stop_episode\"", ",", "None", ")", ")", "\n", "return", "self", ".", "pipe", ".", "recv", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.act": [[78, 91], ["torch.no_grad", "pfrl.utils.evaluating", "state_q_function_actor.StateQFunctionActor._evaluate_model_and_update_recurrent_states", "state_q_function_actor.StateQFunctionActor.explorer.select_action", "state_q_function_actor.StateQFunctionActor.greedy_actions.detach().cpu().numpy", "state_q_function_actor.StateQFunctionActor.greedy_actions.detach().cpu", "state_q_function_actor.StateQFunctionActor.greedy_actions.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor._evaluate_model_and_update_recurrent_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.boltzmann.Boltzmann.select_action"], ["", "", "def", "act", "(", "self", ",", "obs", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ",", "evaluating", "(", "self", ".", "model", ")", ":", "\n", "            ", "action_value", "=", "self", ".", "_evaluate_model_and_update_recurrent_states", "(", "[", "obs", "]", ")", "\n", "greedy_action", "=", "action_value", ".", "greedy_actions", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "action", "=", "self", ".", "explorer", ".", "select_action", "(", "\n", "self", ".", "t", ",", "lambda", ":", "greedy_action", ",", "action_value", "=", "action_value", "\n", ")", "\n", "self", ".", "last_state", "=", "obs", "\n", "self", ".", "last_action", "=", "action", "\n", "", "else", ":", "\n", "            ", "action", "=", "greedy_action", "\n", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.observe": [[92, 122], ["state_q_function_actor.StateQFunctionActor._send_to_learner", "pfrl.utils.recurrent.recurrent_state_as_numpy", "pfrl.utils.recurrent.recurrent_state_as_numpy", "pfrl.utils.recurrent.get_recurrent_state_at", "pfrl.utils.recurrent.get_recurrent_state_at"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor._send_to_learner", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.recurrent_state_as_numpy", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.recurrent_state_as_numpy", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.get_recurrent_state_at", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.get_recurrent_state_at"], ["", "def", "observe", "(", "self", ",", "obs", ",", "reward", ",", "done", ",", "reset", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "t", "+=", "1", "\n", "assert", "self", ".", "last_state", "is", "not", "None", "\n", "assert", "self", ".", "last_action", "is", "not", "None", "\n", "# Add a transition to the replay buffer", "\n", "transition", "=", "{", "\n", "\"state\"", ":", "self", ".", "last_state", ",", "\n", "\"action\"", ":", "self", ".", "last_action", ",", "\n", "\"reward\"", ":", "reward", ",", "\n", "\"next_state\"", ":", "obs", ",", "\n", "\"is_state_terminal\"", ":", "done", ",", "\n", "}", "\n", "if", "self", ".", "recurrent", ":", "\n", "                ", "transition", "[", "\"recurrent_state\"", "]", "=", "recurrent_state_as_numpy", "(", "\n", "get_recurrent_state_at", "(", "\n", "self", ".", "train_prev_recurrent_states", ",", "0", ",", "detach", "=", "True", "\n", ")", "\n", ")", "\n", "self", ".", "train_prev_recurrent_states", "=", "None", "\n", "transition", "[", "\"next_recurrent_state\"", "]", "=", "recurrent_state_as_numpy", "(", "\n", "get_recurrent_state_at", "(", "self", ".", "train_recurrent_states", ",", "0", ",", "detach", "=", "True", ")", "\n", ")", "\n", "", "self", ".", "_send_to_learner", "(", "transition", ",", "stop_episode", "=", "done", "or", "reset", ")", "\n", "if", "(", "done", "or", "reset", ")", "and", "self", ".", "recurrent", ":", "\n", "                ", "self", ".", "train_prev_recurrent_states", "=", "None", "\n", "self", ".", "train_recurrent_states", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "if", "(", "done", "or", "reset", ")", "and", "self", ".", "recurrent", ":", "\n", "                ", "self", ".", "test_recurrent_states", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.save": [[123, 126], ["state_q_function_actor.StateQFunctionActor.pipe.send", "state_q_function_actor.StateQFunctionActor.pipe.recv"], "methods", ["None"], ["", "", "", "def", "save", "(", "self", ",", "dirname", ")", ":", "\n", "        ", "self", ".", "pipe", ".", "send", "(", "(", "\"save\"", ",", "dirname", ")", ")", "\n", "self", ".", "pipe", ".", "recv", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load": [[127, 130], ["state_q_function_actor.StateQFunctionActor.pipe.send", "state_q_function_actor.StateQFunctionActor.pipe.recv"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "dirname", ")", ":", "\n", "        ", "self", ".", "pipe", ".", "send", "(", "(", "\"load\"", ",", "dirname", ")", ")", "\n", "self", ".", "pipe", ".", "recv", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.get_statistics": [[131, 134], ["state_q_function_actor.StateQFunctionActor.pipe.send", "state_q_function_actor.StateQFunctionActor.pipe.recv"], "methods", ["None"], ["", "def", "get_statistics", "(", "self", ")", ":", "\n", "        ", "self", ".", "pipe", ".", "send", "(", "(", "\"get_statistics\"", ",", "None", ")", ")", "\n", "return", "self", ".", "pipe", ".", "recv", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO.__init__": [[321, 402], ["collections.deque", "collections.deque", "collections.deque", "collections.deque", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "torch.device", "torch.device", "ppo.PPO.model.to", "torch.device", "torch.device", "torch.device", "torch.device", "ppo.PPO.obs_normalizer.to"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "optimizer", ",", "\n", "obs_normalizer", "=", "None", ",", "\n", "gpu", "=", "None", ",", "\n", "gamma", "=", "0.99", ",", "\n", "lambd", "=", "0.95", ",", "\n", "phi", "=", "lambda", "x", ":", "x", ",", "\n", "value_func_coef", "=", "1.0", ",", "\n", "entropy_coef", "=", "0.01", ",", "\n", "update_interval", "=", "2048", ",", "\n", "minibatch_size", "=", "64", ",", "\n", "epochs", "=", "10", ",", "\n", "clip_eps", "=", "0.2", ",", "\n", "clip_eps_vf", "=", "None", ",", "\n", "standardize_advantages", "=", "True", ",", "\n", "batch_states", "=", "batch_states", ",", "\n", "recurrent", "=", "False", ",", "\n", "max_recurrent_sequence_len", "=", "None", ",", "\n", "act_deterministically", "=", "False", ",", "\n", "max_grad_norm", "=", "None", ",", "\n", "value_stats_window", "=", "1000", ",", "\n", "entropy_stats_window", "=", "1000", ",", "\n", "value_loss_stats_window", "=", "100", ",", "\n", "policy_loss_stats_window", "=", "100", ",", "\n", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "obs_normalizer", "=", "obs_normalizer", "\n", "\n", "if", "gpu", "is", "not", "None", "and", "gpu", ">=", "0", ":", "\n", "            ", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "obs_normalizer", "is", "not", "None", ":", "\n", "                ", "self", ".", "obs_normalizer", ".", "to", "(", "self", ".", "device", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "lambd", "=", "lambd", "\n", "self", ".", "phi", "=", "phi", "\n", "self", ".", "value_func_coef", "=", "value_func_coef", "\n", "self", ".", "entropy_coef", "=", "entropy_coef", "\n", "self", ".", "update_interval", "=", "update_interval", "\n", "self", ".", "minibatch_size", "=", "minibatch_size", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "clip_eps", "=", "clip_eps", "\n", "self", ".", "clip_eps_vf", "=", "clip_eps_vf", "\n", "self", ".", "standardize_advantages", "=", "standardize_advantages", "\n", "self", ".", "batch_states", "=", "batch_states", "\n", "self", ".", "recurrent", "=", "recurrent", "\n", "self", ".", "max_recurrent_sequence_len", "=", "max_recurrent_sequence_len", "\n", "self", ".", "act_deterministically", "=", "act_deterministically", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "\n", "# Contains episodes used for next update iteration", "\n", "self", ".", "memory", "=", "[", "]", "\n", "\n", "# Contains transitions of the last episode not moved to self.memory yet", "\n", "self", ".", "last_episode", "=", "[", "]", "\n", "self", ".", "last_state", "=", "None", "\n", "self", ".", "last_action", "=", "None", "\n", "\n", "# Batch versions of last_episode, last_state, and last_action", "\n", "self", ".", "batch_last_episode", "=", "None", "\n", "self", ".", "batch_last_state", "=", "None", "\n", "self", ".", "batch_last_action", "=", "None", "\n", "\n", "# Recurrent states of the model", "\n", "self", ".", "train_recurrent_states", "=", "None", "\n", "self", ".", "train_prev_recurrent_states", "=", "None", "\n", "self", ".", "test_recurrent_states", "=", "None", "\n", "\n", "self", ".", "value_record", "=", "collections", ".", "deque", "(", "maxlen", "=", "value_stats_window", ")", "\n", "self", ".", "entropy_record", "=", "collections", ".", "deque", "(", "maxlen", "=", "entropy_stats_window", ")", "\n", "self", ".", "value_loss_record", "=", "collections", ".", "deque", "(", "maxlen", "=", "value_loss_stats_window", ")", "\n", "self", ".", "policy_loss_record", "=", "collections", ".", "deque", "(", "maxlen", "=", "policy_loss_stats_window", ")", "\n", "self", ".", "explained_variance", "=", "np", ".", "nan", "\n", "self", ".", "n_updates", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._initialize_batch_variables": [[403, 407], ["range"], "methods", ["None"], ["", "def", "_initialize_batch_variables", "(", "self", ",", "num_envs", ")", ":", "\n", "        ", "self", ".", "batch_last_episode", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_envs", ")", "]", "\n", "self", ".", "batch_last_state", "=", "[", "None", "]", "*", "num_envs", "\n", "self", ".", "batch_last_action", "=", "[", "None", "]", "*", "num_envs", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._update_if_dataset_is_ready": [[408, 450], ["ppo.PPO._flush_last_episode", "ppo._compute_explained_variance", "sum", "len", "sum", "ppo._make_dataset_recurrent", "ppo.PPO._update_recurrent", "ppo._make_dataset", "ppo.PPO._update", "list", "len", "itertools.chain.from_iterable", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._flush_last_episode", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._compute_explained_variance", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._make_dataset_recurrent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._update_recurrent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._make_dataset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._update"], ["", "def", "_update_if_dataset_is_ready", "(", "self", ")", ":", "\n", "        ", "dataset_size", "=", "(", "\n", "sum", "(", "len", "(", "episode", ")", "for", "episode", "in", "self", ".", "memory", ")", "\n", "+", "len", "(", "self", ".", "last_episode", ")", "\n", "+", "(", "\n", "0", "\n", "if", "self", ".", "batch_last_episode", "is", "None", "\n", "else", "sum", "(", "len", "(", "episode", ")", "for", "episode", "in", "self", ".", "batch_last_episode", ")", "\n", ")", "\n", ")", "\n", "if", "dataset_size", ">=", "self", ".", "update_interval", ":", "\n", "            ", "self", ".", "_flush_last_episode", "(", ")", "\n", "if", "self", ".", "recurrent", ":", "\n", "                ", "dataset", "=", "_make_dataset_recurrent", "(", "\n", "episodes", "=", "self", ".", "memory", ",", "\n", "model", "=", "self", ".", "model", ",", "\n", "phi", "=", "self", ".", "phi", ",", "\n", "batch_states", "=", "self", ".", "batch_states", ",", "\n", "obs_normalizer", "=", "self", ".", "obs_normalizer", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "\n", "lambd", "=", "self", ".", "lambd", ",", "\n", "max_recurrent_sequence_len", "=", "self", ".", "max_recurrent_sequence_len", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", ")", "\n", "self", ".", "_update_recurrent", "(", "dataset", ")", "\n", "", "else", ":", "\n", "                ", "dataset", "=", "_make_dataset", "(", "\n", "episodes", "=", "self", ".", "memory", ",", "\n", "model", "=", "self", ".", "model", ",", "\n", "phi", "=", "self", ".", "phi", ",", "\n", "batch_states", "=", "self", ".", "batch_states", ",", "\n", "obs_normalizer", "=", "self", ".", "obs_normalizer", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "\n", "lambd", "=", "self", ".", "lambd", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", ")", "\n", "assert", "len", "(", "dataset", ")", "==", "dataset_size", "\n", "self", ".", "_update", "(", "dataset", ")", "\n", "", "self", ".", "explained_variance", "=", "_compute_explained_variance", "(", "\n", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "self", ".", "memory", ")", ")", "\n", ")", "\n", "self", ".", "memory", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._flush_last_episode": [[451, 460], ["ppo.PPO.memory.append", "enumerate", "ppo.PPO.memory.append"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "", "def", "_flush_last_episode", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_episode", ":", "\n", "            ", "self", ".", "memory", ".", "append", "(", "self", ".", "last_episode", ")", "\n", "self", ".", "last_episode", "=", "[", "]", "\n", "", "if", "self", ".", "batch_last_episode", ":", "\n", "            ", "for", "i", ",", "episode", "in", "enumerate", "(", "self", ".", "batch_last_episode", ")", ":", "\n", "                ", "if", "episode", ":", "\n", "                    ", "self", ".", "memory", ".", "append", "(", "episode", ")", "\n", "self", ".", "batch_last_episode", "[", "i", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._update_obs_normalizer": [[461, 465], ["ppo.PPO.batch_states", "ppo.PPO.obs_normalizer.experience"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.nn.empirical_normalization.EmpiricalNormalization.experience"], ["", "", "", "", "def", "_update_obs_normalizer", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "assert", "self", ".", "obs_normalizer", "\n", "states", "=", "self", ".", "batch_states", "(", "[", "b", "[", "\"state\"", "]", "for", "b", "in", "dataset", "]", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "self", ".", "obs_normalizer", ".", "experience", "(", "states", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._update": [[466, 534], ["ppo._yield_minibatches", "ppo.PPO._update_obs_normalizer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.std_mean", "torch.std_mean", "torch.std_mean", "torch.std_mean", "ppo.PPO.batch_states", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "ppo.PPO.model", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "ppo.PPO.model.zero_grad", "ppo.PPO._lossfun", "ppo.PPO.backward", "ppo.PPO.optimizer.step", "ppo.PPO.obs_normalizer", "distribs.entropy", "distribs.log_prob", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "ppo.PPO.model.parameters"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._yield_minibatches", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._update_obs_normalizer", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._lossfun", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.entropy", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.log_prob"], ["", "def", "_update", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "\"\"\"Update both the policy and the value function.\"\"\"", "\n", "\n", "device", "=", "self", ".", "device", "\n", "\n", "if", "self", ".", "obs_normalizer", ":", "\n", "            ", "self", ".", "_update_obs_normalizer", "(", "dataset", ")", "\n", "\n", "", "assert", "\"state\"", "in", "dataset", "[", "0", "]", "\n", "assert", "\"v_teacher\"", "in", "dataset", "[", "0", "]", "\n", "\n", "if", "self", ".", "standardize_advantages", ":", "\n", "            ", "all_advs", "=", "torch", ".", "tensor", "(", "[", "b", "[", "\"adv\"", "]", "for", "b", "in", "dataset", "]", ",", "device", "=", "device", ")", "\n", "std_advs", ",", "mean_advs", "=", "torch", ".", "std_mean", "(", "all_advs", ",", "unbiased", "=", "False", ")", "\n", "\n", "", "for", "batch", "in", "_yield_minibatches", "(", "\n", "dataset", ",", "minibatch_size", "=", "self", ".", "minibatch_size", ",", "num_epochs", "=", "self", ".", "epochs", "\n", ")", ":", "\n", "            ", "states", "=", "self", ".", "batch_states", "(", "\n", "[", "b", "[", "\"state\"", "]", "for", "b", "in", "batch", "]", ",", "self", ".", "device", ",", "self", ".", "phi", "\n", ")", "\n", "if", "self", ".", "obs_normalizer", ":", "\n", "                ", "states", "=", "self", ".", "obs_normalizer", "(", "states", ",", "update", "=", "False", ")", "\n", "", "actions", "=", "torch", ".", "tensor", "(", "[", "b", "[", "\"action\"", "]", "for", "b", "in", "batch", "]", ",", "device", "=", "device", ")", "\n", "distribs", ",", "vs_pred", "=", "self", ".", "model", "(", "states", ")", "\n", "\n", "advs", "=", "torch", ".", "tensor", "(", "\n", "[", "b", "[", "\"adv\"", "]", "for", "b", "in", "batch", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "\n", "if", "self", ".", "standardize_advantages", ":", "\n", "                ", "advs", "=", "(", "advs", "-", "mean_advs", ")", "/", "(", "std_advs", "+", "1e-8", ")", "\n", "\n", "", "log_probs_old", "=", "torch", ".", "tensor", "(", "\n", "[", "b", "[", "\"log_prob\"", "]", "for", "b", "in", "batch", "]", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "vs_pred_old", "=", "torch", ".", "tensor", "(", "\n", "[", "b", "[", "\"v_pred\"", "]", "for", "b", "in", "batch", "]", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "vs_teacher", "=", "torch", ".", "tensor", "(", "\n", "[", "b", "[", "\"v_teacher\"", "]", "for", "b", "in", "batch", "]", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "# Same shape as vs_pred: (batch_size, 1)", "\n", "vs_pred_old", "=", "vs_pred_old", "[", "...", ",", "None", "]", "\n", "vs_teacher", "=", "vs_teacher", "[", "...", ",", "None", "]", "\n", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "loss", "=", "self", ".", "_lossfun", "(", "\n", "distribs", ".", "entropy", "(", ")", ",", "\n", "vs_pred", ",", "\n", "distribs", ".", "log_prob", "(", "actions", ")", ",", "\n", "vs_pred_old", "=", "vs_pred_old", ",", "\n", "log_probs_old", "=", "log_probs_old", ",", "\n", "advs", "=", "advs", ",", "\n", "vs_teacher", "=", "vs_teacher", ",", "\n", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "max_grad_norm", "is", "not", "None", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", "\n", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "n_updates", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._update_once_recurrent": [[535, 609], ["sorted", "pfrl.utils.recurrent.flatten_sequences_time_first", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "pfrl.utils.recurrent.pack_and_forward", "flat_distribs.log_prob", "flat_distribs.entropy", "ppo.PPO.model.zero_grad", "ppo.PPO._lossfun", "ppo.PPO.backward", "ppo.PPO.optimizer.step", "ppo.PPO.batch_states", "seqs_states.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pfrl.utils.evaluating", "pfrl.utils.recurrent.concatenate_recurrent_states", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "ppo.PPO.obs_normalizer", "ppo.PPO.model.parameters"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.flatten_sequences_time_first", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.log_prob", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.entropy", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._lossfun", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.concatenate_recurrent_states"], ["", "", "def", "_update_once_recurrent", "(", "self", ",", "episodes", ",", "mean_advs", ",", "std_advs", ")", ":", "\n", "\n", "        ", "assert", "std_advs", "is", "None", "or", "std_advs", ">", "0", "\n", "\n", "device", "=", "self", ".", "device", "\n", "\n", "# Sort desc by lengths so that pack_sequence does not change the order", "\n", "episodes", "=", "sorted", "(", "episodes", ",", "key", "=", "len", ",", "reverse", "=", "True", ")", "\n", "\n", "flat_transitions", "=", "flatten_sequences_time_first", "(", "episodes", ")", "\n", "\n", "# Prepare data for a recurrent model", "\n", "seqs_states", "=", "[", "]", "\n", "for", "ep", "in", "episodes", ":", "\n", "            ", "states", "=", "self", ".", "batch_states", "(", "\n", "[", "transition", "[", "\"state\"", "]", "for", "transition", "in", "ep", "]", ",", "\n", "self", ".", "device", ",", "\n", "self", ".", "phi", ",", "\n", ")", "\n", "if", "self", ".", "obs_normalizer", ":", "\n", "                ", "states", "=", "self", ".", "obs_normalizer", "(", "states", ",", "update", "=", "False", ")", "\n", "", "seqs_states", ".", "append", "(", "states", ")", "\n", "\n", "", "flat_actions", "=", "torch", ".", "tensor", "(", "\n", "[", "transition", "[", "\"action\"", "]", "for", "transition", "in", "flat_transitions", "]", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "flat_advs", "=", "torch", ".", "tensor", "(", "\n", "[", "transition", "[", "\"adv\"", "]", "for", "transition", "in", "flat_transitions", "]", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "if", "self", ".", "standardize_advantages", ":", "\n", "            ", "flat_advs", "=", "(", "flat_advs", "-", "mean_advs", ")", "/", "(", "std_advs", "+", "1e-8", ")", "\n", "", "flat_log_probs_old", "=", "torch", ".", "tensor", "(", "\n", "[", "transition", "[", "\"log_prob\"", "]", "for", "transition", "in", "flat_transitions", "]", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "flat_vs_pred_old", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "transition", "[", "\"v_pred\"", "]", "]", "for", "transition", "in", "flat_transitions", "]", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "flat_vs_teacher", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "transition", "[", "\"v_teacher\"", "]", "]", "for", "transition", "in", "flat_transitions", "]", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ",", "pfrl", ".", "utils", ".", "evaluating", "(", "self", ".", "model", ")", ":", "\n", "            ", "rs", "=", "concatenate_recurrent_states", "(", "\n", "[", "ep", "[", "0", "]", "[", "\"recurrent_state\"", "]", "for", "ep", "in", "episodes", "]", "\n", ")", "\n", "\n", "", "(", "flat_distribs", ",", "flat_vs_pred", ")", ",", "_", "=", "pack_and_forward", "(", "self", ".", "model", ",", "seqs_states", ",", "rs", ")", "\n", "flat_log_probs", "=", "flat_distribs", ".", "log_prob", "(", "flat_actions", ")", "\n", "flat_entropy", "=", "flat_distribs", ".", "entropy", "(", ")", "\n", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "loss", "=", "self", ".", "_lossfun", "(", "\n", "entropy", "=", "flat_entropy", ",", "\n", "vs_pred", "=", "flat_vs_pred", ",", "\n", "log_probs", "=", "flat_log_probs", ",", "\n", "vs_pred_old", "=", "flat_vs_pred_old", ",", "\n", "log_probs_old", "=", "flat_log_probs_old", ",", "\n", "advs", "=", "flat_advs", ",", "\n", "vs_teacher", "=", "flat_vs_teacher", ",", "\n", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "n_updates", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._update_recurrent": [[610, 635], ["list", "range", "itertools.chain.from_iterable", "ppo.PPO._update_obs_normalizer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.std_mean", "torch.std_mean", "torch.std_mean", "torch.std_mean", "random.shuffle", "ppo._yield_subset_of_sequences_with_fixed_number_of_items", "ppo.PPO._update_once_recurrent"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._update_obs_normalizer", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._yield_subset_of_sequences_with_fixed_number_of_items", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._update_once_recurrent"], ["", "def", "_update_recurrent", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "\"\"\"Update both the policy and the value function.\"\"\"", "\n", "\n", "device", "=", "self", ".", "device", "\n", "\n", "flat_dataset", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "dataset", ")", ")", "\n", "if", "self", ".", "obs_normalizer", ":", "\n", "            ", "self", ".", "_update_obs_normalizer", "(", "flat_dataset", ")", "\n", "\n", "", "assert", "\"state\"", "in", "flat_dataset", "[", "0", "]", "\n", "assert", "\"v_teacher\"", "in", "flat_dataset", "[", "0", "]", "\n", "\n", "if", "self", ".", "standardize_advantages", ":", "\n", "            ", "all_advs", "=", "torch", ".", "tensor", "(", "[", "b", "[", "\"adv\"", "]", "for", "b", "in", "flat_dataset", "]", ",", "device", "=", "device", ")", "\n", "std_advs", ",", "mean_advs", "=", "torch", ".", "std_mean", "(", "all_advs", ",", "unbiased", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "mean_advs", "=", "None", "\n", "std_advs", "=", "None", "\n", "\n", "", "for", "_", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "            ", "random", ".", "shuffle", "(", "dataset", ")", "\n", "for", "minibatch", "in", "_yield_subset_of_sequences_with_fixed_number_of_items", "(", "\n", "dataset", ",", "self", ".", "minibatch_size", "\n", ")", ":", "\n", "                ", "self", ".", "_update_once_recurrent", "(", "minibatch", ",", "mean_advs", ",", "std_advs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._lossfun": [[636, 675], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "ppo.PPO.value_loss_record.append", "ppo.PPO.policy_loss_record.append", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mse_loss", "torch.mse_loss", "ppo._elementwise_clip", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "float", "float", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._elementwise_clip", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max"], ["", "", "", "def", "_lossfun", "(", "\n", "self", ",", "entropy", ",", "vs_pred", ",", "log_probs", ",", "vs_pred_old", ",", "log_probs_old", ",", "advs", ",", "vs_teacher", "\n", ")", ":", "\n", "\n", "        ", "prob_ratio", "=", "torch", ".", "exp", "(", "log_probs", "-", "log_probs_old", ")", "\n", "\n", "loss_policy", "=", "-", "torch", ".", "mean", "(", "\n", "torch", ".", "min", "(", "\n", "prob_ratio", "*", "advs", ",", "\n", "torch", ".", "clamp", "(", "prob_ratio", ",", "1", "-", "self", ".", "clip_eps", ",", "1", "+", "self", ".", "clip_eps", ")", "*", "advs", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "if", "self", ".", "clip_eps_vf", "is", "None", ":", "\n", "            ", "loss_value_func", "=", "F", ".", "mse_loss", "(", "vs_pred", ",", "vs_teacher", ")", "\n", "", "else", ":", "\n", "            ", "clipped_vs_pred", "=", "_elementwise_clip", "(", "\n", "vs_pred", ",", "\n", "vs_pred_old", "-", "self", ".", "clip_eps_vf", ",", "\n", "vs_pred_old", "+", "self", ".", "clip_eps_vf", ",", "\n", ")", "\n", "loss_value_func", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "max", "(", "\n", "F", ".", "mse_loss", "(", "vs_pred", ",", "vs_teacher", ",", "reduction", "=", "\"none\"", ")", ",", "\n", "F", ".", "mse_loss", "(", "clipped_vs_pred", ",", "vs_teacher", ",", "reduction", "=", "\"none\"", ")", ",", "\n", ")", "\n", ")", "\n", "", "loss_entropy", "=", "-", "torch", ".", "mean", "(", "entropy", ")", "\n", "\n", "self", ".", "value_loss_record", ".", "append", "(", "float", "(", "loss_value_func", ")", ")", "\n", "self", ".", "policy_loss_record", ".", "append", "(", "float", "(", "loss_policy", ")", ")", "\n", "\n", "loss", "=", "(", "\n", "loss_policy", "\n", "+", "self", ".", "value_func_coef", "*", "loss_value_func", "\n", "+", "self", ".", "entropy_coef", "*", "loss_entropy", "\n", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO.batch_act": [[676, 681], ["ppo.PPO._batch_act_train", "ppo.PPO._batch_act_eval"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_act_train", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_act_eval"], ["", "def", "batch_act", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_batch_act_train", "(", "batch_obs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_batch_act_eval", "(", "batch_obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO.batch_observe": [[682, 687], ["ppo.PPO._batch_observe_train", "ppo.PPO._batch_observe_eval"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_observe_train", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._batch_observe_eval"], ["", "", "def", "batch_observe", "(", "self", ",", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "_batch_observe_train", "(", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_batch_observe_eval", "(", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._batch_act_eval": [[688, 708], ["ppo.PPO.batch_states", "ppo.PPO.obs_normalizer", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pfrl.utils.evaluating", "pfrl.utils.recurrent.one_step_forward", "ppo.PPO.model", "pfrl.utils.mode_of_distribution.mode_of_distribution().cpu().numpy", "action_distrib.sample().cpu().numpy", "pfrl.utils.mode_of_distribution.mode_of_distribution().cpu", "action_distrib.sample().cpu", "pfrl.utils.mode_of_distribution.mode_of_distribution", "action_distrib.sample"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.mode_of_distribution.mode_of_distribution", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "", "def", "_batch_act_eval", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "assert", "not", "self", ".", "training", "\n", "b_state", "=", "self", ".", "batch_states", "(", "batch_obs", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "\n", "if", "self", ".", "obs_normalizer", ":", "\n", "            ", "b_state", "=", "self", ".", "obs_normalizer", "(", "b_state", ",", "update", "=", "False", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ",", "pfrl", ".", "utils", ".", "evaluating", "(", "self", ".", "model", ")", ":", "\n", "            ", "if", "self", ".", "recurrent", ":", "\n", "                ", "(", "action_distrib", ",", "_", ")", ",", "self", ".", "test_recurrent_states", "=", "one_step_forward", "(", "\n", "self", ".", "model", ",", "b_state", ",", "self", ".", "test_recurrent_states", "\n", ")", "\n", "", "else", ":", "\n", "                ", "action_distrib", ",", "_", "=", "self", ".", "model", "(", "b_state", ")", "\n", "", "if", "self", ".", "act_deterministically", ":", "\n", "                ", "action", "=", "mode_of_distribution", "(", "action_distrib", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "action", "=", "action_distrib", ".", "sample", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._batch_act_train": [[709, 744], ["ppo.PPO.batch_states", "len", "list", "list", "ppo.PPO.obs_normalizer", "ppo.PPO._initialize_batch_variables", "len", "len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pfrl.utils.evaluating", "action_distrib.sample().cpu().numpy", "ppo.PPO.entropy_record.extend", "ppo.PPO.value_record.extend", "pfrl.utils.recurrent.one_step_forward", "ppo.PPO.model", "action_distrib.entropy().cpu().numpy", "batch_value.cpu().numpy", "action_distrib.sample().cpu", "action_distrib.entropy().cpu", "batch_value.cpu", "action_distrib.sample", "action_distrib.entropy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._initialize_batch_variables", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.one_step_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.entropy"], ["", "def", "_batch_act_train", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "assert", "self", ".", "training", "\n", "b_state", "=", "self", ".", "batch_states", "(", "batch_obs", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "\n", "if", "self", ".", "obs_normalizer", ":", "\n", "            ", "b_state", "=", "self", ".", "obs_normalizer", "(", "b_state", ",", "update", "=", "False", ")", "\n", "\n", "", "num_envs", "=", "len", "(", "batch_obs", ")", "\n", "if", "self", ".", "batch_last_episode", "is", "None", ":", "\n", "            ", "self", ".", "_initialize_batch_variables", "(", "num_envs", ")", "\n", "", "assert", "len", "(", "self", ".", "batch_last_episode", ")", "==", "num_envs", "\n", "assert", "len", "(", "self", ".", "batch_last_state", ")", "==", "num_envs", "\n", "assert", "len", "(", "self", ".", "batch_last_action", ")", "==", "num_envs", "\n", "\n", "# action_distrib will be recomputed when computing gradients", "\n", "with", "torch", ".", "no_grad", "(", ")", ",", "pfrl", ".", "utils", ".", "evaluating", "(", "self", ".", "model", ")", ":", "\n", "            ", "if", "self", ".", "recurrent", ":", "\n", "                ", "assert", "self", ".", "train_prev_recurrent_states", "is", "None", "\n", "self", ".", "train_prev_recurrent_states", "=", "self", ".", "train_recurrent_states", "\n", "(", "\n", "(", "action_distrib", ",", "batch_value", ")", ",", "\n", "self", ".", "train_recurrent_states", ",", "\n", ")", "=", "one_step_forward", "(", "\n", "self", ".", "model", ",", "b_state", ",", "self", ".", "train_prev_recurrent_states", "\n", ")", "\n", "", "else", ":", "\n", "                ", "action_distrib", ",", "batch_value", "=", "self", ".", "model", "(", "b_state", ")", "\n", "", "batch_action", "=", "action_distrib", ".", "sample", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "entropy_record", ".", "extend", "(", "action_distrib", ".", "entropy", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "value_record", ".", "extend", "(", "batch_value", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "self", ".", "batch_last_state", "=", "list", "(", "batch_obs", ")", "\n", "self", ".", "batch_last_action", "=", "list", "(", "batch_action", ")", "\n", "\n", "return", "batch_action", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._batch_observe_eval": [[745, 757], ["pfrl.utils.recurrent.mask_recurrent_state_at", "enumerate", "zip"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.mask_recurrent_state_at"], ["", "def", "_batch_observe_eval", "(", "self", ",", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", ":", "\n", "        ", "assert", "not", "self", ".", "training", "\n", "if", "self", ".", "recurrent", ":", "\n", "# Reset recurrent states when episodes end", "\n", "            ", "indices_that_ended", "=", "[", "\n", "i", "\n", "for", "i", ",", "(", "done", ",", "reset", ")", "in", "enumerate", "(", "zip", "(", "batch_done", ",", "batch_reset", ")", ")", "\n", "if", "done", "or", "reset", "\n", "]", "\n", "if", "indices_that_ended", ":", "\n", "                ", "self", ".", "test_recurrent_states", "=", "mask_recurrent_state_at", "(", "\n", "self", ".", "test_recurrent_states", ",", "indices_that_ended", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._batch_observe_train": [[759, 811], ["enumerate", "ppo.PPO._update_if_dataset_is_ready", "zip", "ppo.PPO.batch_last_episode[].append", "ppo.PPO.memory.append", "pfrl.utils.recurrent.mask_recurrent_state_at", "pfrl.utils.recurrent.get_recurrent_state_at", "pfrl.utils.recurrent.get_recurrent_state_at", "enumerate", "zip"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO._update_if_dataset_is_ready", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.mask_recurrent_state_at", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.get_recurrent_state_at", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.get_recurrent_state_at"], ["", "", "", "def", "_batch_observe_train", "(", "self", ",", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", ":", "\n", "        ", "assert", "self", ".", "training", "\n", "\n", "for", "i", ",", "(", "state", ",", "action", ",", "reward", ",", "next_state", ",", "done", ",", "reset", ")", "in", "enumerate", "(", "\n", "zip", "(", "\n", "self", ".", "batch_last_state", ",", "\n", "self", ".", "batch_last_action", ",", "\n", "batch_reward", ",", "\n", "batch_obs", ",", "\n", "batch_done", ",", "\n", "batch_reset", ",", "\n", ")", "\n", ")", ":", "\n", "            ", "if", "state", "is", "not", "None", ":", "\n", "                ", "assert", "action", "is", "not", "None", "\n", "transition", "=", "{", "\n", "\"state\"", ":", "state", ",", "\n", "\"action\"", ":", "action", ",", "\n", "\"reward\"", ":", "reward", ",", "\n", "\"next_state\"", ":", "next_state", ",", "\n", "\"nonterminal\"", ":", "0.0", "if", "done", "else", "1.0", ",", "\n", "}", "\n", "if", "self", ".", "recurrent", ":", "\n", "                    ", "transition", "[", "\"recurrent_state\"", "]", "=", "get_recurrent_state_at", "(", "\n", "self", ".", "train_prev_recurrent_states", ",", "i", ",", "detach", "=", "True", "\n", ")", "\n", "transition", "[", "\"next_recurrent_state\"", "]", "=", "get_recurrent_state_at", "(", "\n", "self", ".", "train_recurrent_states", ",", "i", ",", "detach", "=", "True", "\n", ")", "\n", "", "self", ".", "batch_last_episode", "[", "i", "]", ".", "append", "(", "transition", ")", "\n", "", "if", "done", "or", "reset", ":", "\n", "                ", "assert", "self", ".", "batch_last_episode", "[", "i", "]", "\n", "self", ".", "memory", ".", "append", "(", "self", ".", "batch_last_episode", "[", "i", "]", ")", "\n", "self", ".", "batch_last_episode", "[", "i", "]", "=", "[", "]", "\n", "", "self", ".", "batch_last_state", "[", "i", "]", "=", "None", "\n", "self", ".", "batch_last_action", "[", "i", "]", "=", "None", "\n", "\n", "", "self", ".", "train_prev_recurrent_states", "=", "None", "\n", "\n", "if", "self", ".", "recurrent", ":", "\n", "# Reset recurrent states when episodes end", "\n", "            ", "indices_that_ended", "=", "[", "\n", "i", "\n", "for", "i", ",", "(", "done", ",", "reset", ")", "in", "enumerate", "(", "zip", "(", "batch_done", ",", "batch_reset", ")", ")", "\n", "if", "done", "or", "reset", "\n", "]", "\n", "if", "indices_that_ended", ":", "\n", "                ", "self", ".", "train_recurrent_states", "=", "mask_recurrent_state_at", "(", "\n", "self", ".", "train_recurrent_states", ",", "indices_that_ended", "\n", ")", "\n", "\n", "", "", "self", ".", "_update_if_dataset_is_ready", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo.PPO.get_statistics": [[812, 820], ["ppo._mean_or_nan", "ppo._mean_or_nan", "ppo._mean_or_nan", "ppo._mean_or_nan"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan"], ["", "def", "get_statistics", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "(", "\"average_value\"", ",", "_mean_or_nan", "(", "self", ".", "value_record", ")", ")", ",", "\n", "(", "\"average_entropy\"", ",", "_mean_or_nan", "(", "self", ".", "entropy_record", ")", ")", ",", "\n", "(", "\"average_value_loss\"", ",", "_mean_or_nan", "(", "self", ".", "value_loss_record", ")", ")", ",", "\n", "(", "\"average_policy_loss\"", ",", "_mean_or_nan", "(", "self", ".", "policy_loss_record", ")", ")", ",", "\n", "(", "\"n_updates\"", ",", "self", ".", "n_updates", ")", ",", "\n", "(", "\"explained_variance\"", ",", "self", ".", "explained_variance", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._mean_or_nan": [[23, 26], ["numpy.mean"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["def", "_mean_or_nan", "(", "xs", ")", ":", "\n", "    ", "\"\"\"Return its mean a non-empty sequence, numpy.nan for a empty one.\"\"\"", "\n", "return", "np", ".", "mean", "(", "xs", ")", "if", "xs", "else", "np", ".", "nan", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._elementwise_clip": [[28, 34], ["torch.min", "torch.min", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max"], ["", "def", "_elementwise_clip", "(", "x", ",", "x_min", ",", "x_max", ")", ":", "\n", "    ", "\"\"\"Elementwise clipping\n\n    Note: torch.clamp supports clipping to constant intervals\n    \"\"\"", "\n", "return", "torch", ".", "min", "(", "torch", ".", "max", "(", "x", ",", "x_min", ")", ",", "x_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._add_advantage_and_value_target_to_episode": [[36, 48], ["reversed"], "function", ["None"], ["", "def", "_add_advantage_and_value_target_to_episode", "(", "episode", ",", "gamma", ",", "lambd", ")", ":", "\n", "    ", "\"\"\"Add advantage and value target values to an episode.\"\"\"", "\n", "adv", "=", "0.0", "\n", "for", "transition", "in", "reversed", "(", "episode", ")", ":", "\n", "        ", "td_err", "=", "(", "\n", "transition", "[", "\"reward\"", "]", "\n", "+", "(", "gamma", "*", "transition", "[", "\"nonterminal\"", "]", "*", "transition", "[", "\"next_v_pred\"", "]", ")", "\n", "-", "transition", "[", "\"v_pred\"", "]", "\n", ")", "\n", "adv", "=", "td_err", "+", "gamma", "*", "lambd", "*", "adv", "\n", "transition", "[", "\"adv\"", "]", "=", "adv", "\n", "transition", "[", "\"v_teacher\"", "]", "=", "adv", "+", "transition", "[", "\"v_pred\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._add_advantage_and_value_target_to_episodes": [[50, 54], ["ppo._add_advantage_and_value_target_to_episode"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._add_advantage_and_value_target_to_episode"], ["", "", "def", "_add_advantage_and_value_target_to_episodes", "(", "episodes", ",", "gamma", ",", "lambd", ")", ":", "\n", "    ", "\"\"\"Add advantage and value target values to a list of episodes.\"\"\"", "\n", "for", "episode", "in", "episodes", ":", "\n", "        ", "_add_advantage_and_value_target_to_episode", "(", "episode", ",", "gamma", "=", "gamma", ",", "lambd", "=", "lambd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._add_log_prob_and_value_to_episodes_recurrent": [[56, 108], ["sorted", "pfrl.utils.recurrent.flatten_sequences_time_first", "zip", "pfrl.utils.batch_states.batch_states", "pfrl.utils.batch_states.batch_states", "seqs_states.append", "seqs_next_states.append", "torch.no_grad", "torch.no_grad", "pfrl.utils.evaluating", "pfrl.utils.recurrent.concatenate_recurrent_states", "pfrl.utils.recurrent.concatenate_recurrent_states", "pfrl.utils.recurrent.pack_and_forward", "pfrl.utils.recurrent.pack_and_forward", "torch.tensor", "torch.tensor", "flat_distribs.log_prob().cpu().numpy", "flat_vs.cpu().numpy.cpu().numpy", "flat_next_vs.cpu().numpy.cpu().numpy", "float", "float", "float", "obs_normalizer", "obs_normalizer", "len", "len", "flat_distribs.log_prob().cpu", "flat_vs.cpu().numpy.cpu", "flat_next_vs.cpu().numpy.cpu", "flat_distribs.log_prob"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.flatten_sequences_time_first", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.concatenate_recurrent_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.concatenate_recurrent_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.recurrent.pack_and_forward", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.log_prob"], ["", "", "def", "_add_log_prob_and_value_to_episodes_recurrent", "(", "\n", "episodes", ",", "\n", "model", ",", "\n", "phi", ",", "\n", "batch_states", ",", "\n", "obs_normalizer", ",", "\n", "device", ",", "\n", ")", ":", "\n", "# Sort desc by lengths so that pack_sequence does not change the order", "\n", "    ", "episodes", "=", "sorted", "(", "episodes", ",", "key", "=", "len", ",", "reverse", "=", "True", ")", "\n", "\n", "# Prepare data for a recurrent model", "\n", "seqs_states", "=", "[", "]", "\n", "seqs_next_states", "=", "[", "]", "\n", "for", "ep", "in", "episodes", ":", "\n", "        ", "states", "=", "batch_states", "(", "[", "transition", "[", "\"state\"", "]", "for", "transition", "in", "ep", "]", ",", "device", ",", "phi", ")", "\n", "next_states", "=", "batch_states", "(", "\n", "[", "transition", "[", "\"next_state\"", "]", "for", "transition", "in", "ep", "]", ",", "device", ",", "phi", "\n", ")", "\n", "if", "obs_normalizer", ":", "\n", "            ", "states", "=", "obs_normalizer", "(", "states", ",", "update", "=", "False", ")", "\n", "next_states", "=", "obs_normalizer", "(", "next_states", ",", "update", "=", "False", ")", "\n", "", "seqs_states", ".", "append", "(", "states", ")", "\n", "seqs_next_states", ".", "append", "(", "next_states", ")", "\n", "\n", "", "flat_transitions", "=", "flatten_sequences_time_first", "(", "episodes", ")", "\n", "\n", "# Predict values using a recurrent model", "\n", "with", "torch", ".", "no_grad", "(", ")", ",", "pfrl", ".", "utils", ".", "evaluating", "(", "model", ")", ":", "\n", "        ", "rs", "=", "concatenate_recurrent_states", "(", "[", "ep", "[", "0", "]", "[", "\"recurrent_state\"", "]", "for", "ep", "in", "episodes", "]", ")", "\n", "next_rs", "=", "concatenate_recurrent_states", "(", "\n", "[", "ep", "[", "0", "]", "[", "\"next_recurrent_state\"", "]", "for", "ep", "in", "episodes", "]", "\n", ")", "\n", "assert", "(", "rs", "is", "None", ")", "or", "(", "next_rs", "is", "None", ")", "or", "(", "len", "(", "rs", ")", "==", "len", "(", "next_rs", ")", ")", "\n", "\n", "(", "flat_distribs", ",", "flat_vs", ")", ",", "_", "=", "pack_and_forward", "(", "model", ",", "seqs_states", ",", "rs", ")", "\n", "(", "_", ",", "flat_next_vs", ")", ",", "_", "=", "pack_and_forward", "(", "model", ",", "seqs_next_states", ",", "next_rs", ")", "\n", "\n", "flat_actions", "=", "torch", ".", "tensor", "(", "\n", "[", "b", "[", "\"action\"", "]", "for", "b", "in", "flat_transitions", "]", ",", "device", "=", "device", "\n", ")", "\n", "flat_log_probs", "=", "flat_distribs", ".", "log_prob", "(", "flat_actions", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flat_vs", "=", "flat_vs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flat_next_vs", "=", "flat_next_vs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# Add predicted values to transitions", "\n", "", "for", "transition", ",", "log_prob", ",", "v", ",", "next_v", "in", "zip", "(", "\n", "flat_transitions", ",", "flat_log_probs", ",", "flat_vs", ",", "flat_next_vs", "\n", ")", ":", "\n", "        ", "transition", "[", "\"log_prob\"", "]", "=", "float", "(", "log_prob", ")", "\n", "transition", "[", "\"v_pred\"", "]", "=", "float", "(", "v", ")", "\n", "transition", "[", "\"next_v_pred\"", "]", "=", "float", "(", "next_v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._add_log_prob_and_value_to_episodes": [[110, 144], ["list", "pfrl.utils.batch_states.batch_states", "pfrl.utils.batch_states.batch_states", "zip", "itertools.chain.from_iterable", "obs_normalizer", "obs_normalizer", "torch.no_grad", "torch.no_grad", "pfrl.utils.evaluating", "model", "model", "torch.tensor", "torch.tensor", "distribs.log_prob().cpu().numpy", "vs_pred.cpu().numpy().ravel.cpu().numpy().ravel", "next_vs_pred.cpu().numpy().ravel.cpu().numpy().ravel", "distribs.log_prob().cpu", "vs_pred.cpu().numpy().ravel.cpu().numpy", "next_vs_pred.cpu().numpy().ravel.cpu().numpy", "distribs.log_prob", "vs_pred.cpu().numpy().ravel.cpu", "next_vs_pred.cpu().numpy().ravel.cpu"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.log_prob"], ["", "", "def", "_add_log_prob_and_value_to_episodes", "(", "\n", "episodes", ",", "\n", "model", ",", "\n", "phi", ",", "\n", "batch_states", ",", "\n", "obs_normalizer", ",", "\n", "device", ",", "\n", ")", ":", "\n", "\n", "    ", "dataset", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "episodes", ")", ")", "\n", "\n", "# Compute v_pred and next_v_pred", "\n", "states", "=", "batch_states", "(", "[", "b", "[", "\"state\"", "]", "for", "b", "in", "dataset", "]", ",", "device", ",", "phi", ")", "\n", "next_states", "=", "batch_states", "(", "[", "b", "[", "\"next_state\"", "]", "for", "b", "in", "dataset", "]", ",", "device", ",", "phi", ")", "\n", "\n", "if", "obs_normalizer", ":", "\n", "        ", "states", "=", "obs_normalizer", "(", "states", ",", "update", "=", "False", ")", "\n", "next_states", "=", "obs_normalizer", "(", "next_states", ",", "update", "=", "False", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ",", "pfrl", ".", "utils", ".", "evaluating", "(", "model", ")", ":", "\n", "        ", "distribs", ",", "vs_pred", "=", "model", "(", "states", ")", "\n", "_", ",", "next_vs_pred", "=", "model", "(", "next_states", ")", "\n", "\n", "actions", "=", "torch", ".", "tensor", "(", "[", "b", "[", "\"action\"", "]", "for", "b", "in", "dataset", "]", ",", "device", "=", "device", ")", "\n", "log_probs", "=", "distribs", ".", "log_prob", "(", "actions", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "vs_pred", "=", "vs_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "ravel", "(", ")", "\n", "next_vs_pred", "=", "next_vs_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "ravel", "(", ")", "\n", "\n", "", "for", "transition", ",", "log_prob", ",", "v_pred", ",", "next_v_pred", "in", "zip", "(", "\n", "dataset", ",", "log_probs", ",", "vs_pred", ",", "next_vs_pred", "\n", ")", ":", "\n", "        ", "transition", "[", "\"log_prob\"", "]", "=", "log_prob", "\n", "transition", "[", "\"v_pred\"", "]", "=", "v_pred", "\n", "transition", "[", "\"next_v_pred\"", "]", "=", "next_v_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._limit_sequence_length": [[146, 156], ["new_sequences.append", "len", "new_sequences.append", "len"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "", "def", "_limit_sequence_length", "(", "sequences", ",", "max_len", ")", ":", "\n", "    ", "assert", "max_len", ">", "0", "\n", "new_sequences", "=", "[", "]", "\n", "for", "sequence", "in", "sequences", ":", "\n", "        ", "while", "len", "(", "sequence", ")", ">", "max_len", ":", "\n", "            ", "new_sequences", ".", "append", "(", "sequence", "[", ":", "max_len", "]", ")", "\n", "sequence", "=", "sequence", "[", "max_len", ":", "]", "\n", "", "assert", "0", "<", "len", "(", "sequence", ")", "<=", "max_len", "\n", "new_sequences", ".", "append", "(", "sequence", ")", "\n", "", "return", "new_sequences", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._yield_subset_of_sequences_with_fixed_number_of_items": [[158, 180], ["list", "reversed", "list.pop", "subset.append", "len", "list.append", "sum", "len", "len"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "def", "_yield_subset_of_sequences_with_fixed_number_of_items", "(", "sequences", ",", "n_items", ")", ":", "\n", "    ", "assert", "n_items", ">", "0", "\n", "stack", "=", "list", "(", "reversed", "(", "sequences", ")", ")", "\n", "while", "stack", ":", "\n", "        ", "subset", "=", "[", "]", "\n", "count", "=", "0", "\n", "while", "count", "<", "n_items", "and", "stack", ":", "\n", "            ", "sequence", "=", "stack", ".", "pop", "(", ")", "\n", "subset", ".", "append", "(", "sequence", ")", "\n", "count", "+=", "len", "(", "sequence", ")", "\n", "", "if", "count", ">", "n_items", ":", "\n", "# Split last sequence", "\n", "            ", "sequence_to_split", "=", "subset", "[", "-", "1", "]", "\n", "n_exceeds", "=", "count", "-", "n_items", "\n", "assert", "n_exceeds", ">", "0", "\n", "subset", "[", "-", "1", "]", "=", "sequence_to_split", "[", ":", "-", "n_exceeds", "]", "\n", "stack", ".", "append", "(", "sequence_to_split", "[", "-", "n_exceeds", ":", "]", ")", "\n", "", "if", "sum", "(", "len", "(", "seq", ")", "for", "seq", "in", "subset", ")", "==", "n_items", ":", "\n", "            ", "yield", "subset", "\n", "", "else", ":", "\n", "# This ends the while loop.", "\n", "            ", "assert", "len", "(", "stack", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._compute_explained_variance": [[182, 195], ["numpy.array", "numpy.array", "numpy.var", "float", "numpy.var"], "function", ["None"], ["", "", "", "def", "_compute_explained_variance", "(", "transitions", ")", ":", "\n", "    ", "\"\"\"Compute 1 - Var[return - v]/Var[return].\n\n    This function computes the fraction of variance that value predictions can\n    explain about returns.\n    \"\"\"", "\n", "t", "=", "np", ".", "array", "(", "[", "tr", "[", "\"v_teacher\"", "]", "for", "tr", "in", "transitions", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "tr", "[", "\"v_pred\"", "]", "for", "tr", "in", "transitions", "]", ")", "\n", "vart", "=", "np", ".", "var", "(", "t", ")", "\n", "if", "vart", "==", "0", ":", "\n", "        ", "return", "np", ".", "nan", "\n", "", "else", ":", "\n", "        ", "return", "float", "(", "1", "-", "np", ".", "var", "(", "t", "-", "y", ")", "/", "vart", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._make_dataset_recurrent": [[197, 227], ["ppo._add_log_prob_and_value_to_episodes_recurrent", "ppo._add_advantage_and_value_target_to_episodes", "ppo._limit_sequence_length", "list"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._add_log_prob_and_value_to_episodes_recurrent", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._add_advantage_and_value_target_to_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._limit_sequence_length"], ["", "", "def", "_make_dataset_recurrent", "(", "\n", "episodes", ",", "\n", "model", ",", "\n", "phi", ",", "\n", "batch_states", ",", "\n", "obs_normalizer", ",", "\n", "gamma", ",", "\n", "lambd", ",", "\n", "max_recurrent_sequence_len", ",", "\n", "device", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Make a list of sequences with necessary information.\"\"\"", "\n", "\n", "_add_log_prob_and_value_to_episodes_recurrent", "(", "\n", "episodes", "=", "episodes", ",", "\n", "model", "=", "model", ",", "\n", "phi", "=", "phi", ",", "\n", "batch_states", "=", "batch_states", ",", "\n", "obs_normalizer", "=", "obs_normalizer", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "\n", "_add_advantage_and_value_target_to_episodes", "(", "episodes", ",", "gamma", "=", "gamma", ",", "lambd", "=", "lambd", ")", "\n", "\n", "if", "max_recurrent_sequence_len", "is", "not", "None", ":", "\n", "        ", "dataset", "=", "_limit_sequence_length", "(", "episodes", ",", "max_recurrent_sequence_len", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "list", "(", "episodes", ")", "\n", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._make_dataset": [[229, 246], ["ppo._add_log_prob_and_value_to_episodes", "ppo._add_advantage_and_value_target_to_episodes", "list", "itertools.chain.from_iterable"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._add_log_prob_and_value_to_episodes", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._add_advantage_and_value_target_to_episodes"], ["", "def", "_make_dataset", "(", "\n", "episodes", ",", "model", ",", "phi", ",", "batch_states", ",", "obs_normalizer", ",", "gamma", ",", "lambd", ",", "device", "\n", ")", ":", "\n", "    ", "\"\"\"Make a list of transitions with necessary information.\"\"\"", "\n", "\n", "_add_log_prob_and_value_to_episodes", "(", "\n", "episodes", "=", "episodes", ",", "\n", "model", "=", "model", ",", "\n", "phi", "=", "phi", ",", "\n", "batch_states", "=", "batch_states", ",", "\n", "obs_normalizer", "=", "obs_normalizer", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "\n", "_add_advantage_and_value_target_to_episodes", "(", "episodes", ",", "gamma", "=", "gamma", ",", "lambd", "=", "lambd", ")", "\n", "\n", "return", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "episodes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.ppo._yield_minibatches": [[248, 259], ["len", "len", "len", "random.sample", "len"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "def", "_yield_minibatches", "(", "dataset", ",", "minibatch_size", ",", "num_epochs", ")", ":", "\n", "    ", "assert", "dataset", "\n", "buf", "=", "[", "]", "\n", "n", "=", "0", "\n", "while", "n", "<", "len", "(", "dataset", ")", "*", "num_epochs", ":", "\n", "        ", "while", "len", "(", "buf", ")", "<", "minibatch_size", ":", "\n", "            ", "buf", "=", "random", ".", "sample", "(", "dataset", ",", "k", "=", "len", "(", "dataset", ")", ")", "+", "buf", "\n", "", "assert", "len", "(", "buf", ")", ">=", "minibatch_size", "\n", "yield", "buf", "[", "-", "minibatch_size", ":", "]", "\n", "n", "+=", "minibatch_size", "\n", "buf", "=", "buf", "[", ":", "-", "minibatch_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.__init__": [[79, 160], ["logging.getLogger", "pfrl.replay_buffer.ReplayUpdater", "copy.deepcopy().eval().requires_grad_", "copy.deepcopy().eval().requires_grad_", "copy.deepcopy().eval().requires_grad_", "collections.deque", "collections.deque", "collections.deque", "collections.deque", "collections.deque", "torch.cuda.is_available", "torch.device", "td3.TD3.policy.to", "td3.TD3.q_func1.to", "td3.TD3.q_func2.to", "torch.device", "copy.deepcopy().eval", "copy.deepcopy().eval", "copy.deepcopy().eval", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.device"], ["def", "__init__", "(", "\n", "self", ",", "\n", "policy", ",", "\n", "q_func1", ",", "\n", "q_func2", ",", "\n", "policy_optimizer", ",", "\n", "q_func1_optimizer", ",", "\n", "q_func2_optimizer", ",", "\n", "replay_buffer", ",", "\n", "gamma", ",", "\n", "explorer", ",", "\n", "gpu", "=", "None", ",", "\n", "replay_start_size", "=", "10000", ",", "\n", "minibatch_size", "=", "100", ",", "\n", "update_interval", "=", "1", ",", "\n", "phi", "=", "lambda", "x", ":", "x", ",", "\n", "soft_update_tau", "=", "5e-3", ",", "\n", "n_times_update", "=", "1", ",", "\n", "max_grad_norm", "=", "None", ",", "\n", "logger", "=", "getLogger", "(", "__name__", ")", ",", "\n", "batch_states", "=", "batch_states", ",", "\n", "burnin_action_func", "=", "None", ",", "\n", "policy_update_delay", "=", "2", ",", "\n", "target_policy_smoothing_func", "=", "default_target_policy_smoothing_func", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "policy", "=", "policy", "\n", "self", ".", "q_func1", "=", "q_func1", "\n", "self", ".", "q_func2", "=", "q_func2", "\n", "\n", "if", "gpu", "is", "not", "None", "and", "gpu", ">=", "0", ":", "\n", "            ", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", ")", "\n", "self", ".", "policy", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "q_func1", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "q_func2", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "", "self", ".", "replay_buffer", "=", "replay_buffer", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "explorer", "=", "explorer", "\n", "self", ".", "gpu", "=", "gpu", "\n", "self", ".", "phi", "=", "phi", "\n", "self", ".", "soft_update_tau", "=", "soft_update_tau", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "policy_optimizer", "=", "policy_optimizer", "\n", "self", ".", "q_func1_optimizer", "=", "q_func1_optimizer", "\n", "self", ".", "q_func2_optimizer", "=", "q_func2_optimizer", "\n", "self", ".", "replay_updater", "=", "ReplayUpdater", "(", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", "update_func", "=", "self", ".", "update", ",", "\n", "batchsize", "=", "minibatch_size", ",", "\n", "n_times_update", "=", "1", ",", "\n", "replay_start_size", "=", "replay_start_size", ",", "\n", "update_interval", "=", "update_interval", ",", "\n", "episodic_update", "=", "False", ",", "\n", ")", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "self", ".", "batch_states", "=", "batch_states", "\n", "self", ".", "burnin_action_func", "=", "burnin_action_func", "\n", "self", ".", "policy_update_delay", "=", "policy_update_delay", "\n", "self", ".", "target_policy_smoothing_func", "=", "target_policy_smoothing_func", "\n", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "policy_n_updates", "=", "0", "\n", "self", ".", "q_func_n_updates", "=", "0", "\n", "self", ".", "last_state", "=", "None", "\n", "self", ".", "last_action", "=", "None", "\n", "\n", "# Target model", "\n", "self", ".", "target_policy", "=", "copy", ".", "deepcopy", "(", "self", ".", "policy", ")", ".", "eval", "(", ")", ".", "requires_grad_", "(", "False", ")", "\n", "self", ".", "target_q_func1", "=", "copy", ".", "deepcopy", "(", "self", ".", "q_func1", ")", ".", "eval", "(", ")", ".", "requires_grad_", "(", "False", ")", "\n", "self", ".", "target_q_func2", "=", "copy", ".", "deepcopy", "(", "self", ".", "q_func2", ")", ".", "eval", "(", ")", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "# Statistics", "\n", "self", ".", "q1_record", "=", "collections", ".", "deque", "(", "maxlen", "=", "1000", ")", "\n", "self", ".", "q2_record", "=", "collections", ".", "deque", "(", "maxlen", "=", "1000", ")", "\n", "self", ".", "q_func1_loss_record", "=", "collections", ".", "deque", "(", "maxlen", "=", "100", ")", "\n", "self", ".", "q_func2_loss_record", "=", "collections", ".", "deque", "(", "maxlen", "=", "100", ")", "\n", "self", ".", "policy_loss_record", "=", "collections", ".", "deque", "(", "maxlen", "=", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.sync_target_network": [[161, 180], ["pfrl.utils.copy_param.synchronize_parameters", "pfrl.utils.copy_param.synchronize_parameters", "pfrl.utils.copy_param.synchronize_parameters"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.synchronize_parameters", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.synchronize_parameters", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.copy_param.synchronize_parameters"], ["", "def", "sync_target_network", "(", "self", ")", ":", "\n", "        ", "\"\"\"Synchronize target network with current network.\"\"\"", "\n", "synchronize_parameters", "(", "\n", "src", "=", "self", ".", "policy", ",", "\n", "dst", "=", "self", ".", "target_policy", ",", "\n", "method", "=", "\"soft\"", ",", "\n", "tau", "=", "self", ".", "soft_update_tau", ",", "\n", ")", "\n", "synchronize_parameters", "(", "\n", "src", "=", "self", ".", "q_func1", ",", "\n", "dst", "=", "self", ".", "target_q_func1", ",", "\n", "method", "=", "\"soft\"", ",", "\n", "tau", "=", "self", ".", "soft_update_tau", ",", "\n", ")", "\n", "synchronize_parameters", "(", "\n", "src", "=", "self", ".", "q_func2", ",", "\n", "dst", "=", "self", ".", "target_q_func2", ",", "\n", "method", "=", "\"soft\"", ",", "\n", "tau", "=", "self", ".", "soft_update_tau", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update_q_func": [[182, 233], ["torch.flatten", "torch.flatten", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "td3.TD3.q1_record.extend", "td3.TD3.q2_record.extend", "td3.TD3.q_func1_loss_record.append", "td3.TD3.q_func2_loss_record.append", "td3.TD3.q_func1_optimizer.zero_grad", "torch.nn.functional.mse_loss.backward", "td3.TD3.q_func1_optimizer.step", "td3.TD3.q_func2_optimizer.zero_grad", "torch.nn.functional.mse_loss.backward", "td3.TD3.q_func2_optimizer.step", "torch.no_grad", "pfrl.utils.evaluating", "pfrl.utils.evaluating", "pfrl.utils.evaluating", "td3.TD3.target_policy_smoothing_func", "td3.TD3.target_q_func1", "td3.TD3.target_q_func2", "torch.min", "td3.TD3.q_func1", "td3.TD3.q_func2", "torch.flatten.detach().cpu().numpy", "torch.flatten.detach().cpu().numpy", "float", "float", "pfrl.utils.clip_l2_grad_norm_", "pfrl.utils.clip_l2_grad_norm_", "td3.TD3.target_policy().sample", "td3.TD3.q_func1.parameters", "td3.TD3.q_func2.parameters", "torch.flatten", "torch.flatten.detach().cpu", "torch.flatten.detach().cpu", "td3.TD3.target_policy", "torch.flatten.detach", "torch.flatten.detach"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.clip_l2_grad_norm.clip_l2_grad_norm_", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.clip_l2_grad_norm.clip_l2_grad_norm_", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "def", "update_q_func", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Compute loss for a given Q-function.\"\"\"", "\n", "\n", "batch_next_state", "=", "batch", "[", "\"next_state\"", "]", "\n", "batch_rewards", "=", "batch", "[", "\"reward\"", "]", "\n", "batch_terminal", "=", "batch", "[", "\"is_state_terminal\"", "]", "\n", "batch_state", "=", "batch", "[", "\"state\"", "]", "\n", "batch_actions", "=", "batch", "[", "\"action\"", "]", "\n", "batch_discount", "=", "batch", "[", "\"discount\"", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ",", "pfrl", ".", "utils", ".", "evaluating", "(", "\n", "self", ".", "target_policy", "\n", ")", ",", "pfrl", ".", "utils", ".", "evaluating", "(", "self", ".", "target_q_func1", ")", ",", "pfrl", ".", "utils", ".", "evaluating", "(", "\n", "self", ".", "target_q_func2", "\n", ")", ":", "\n", "            ", "next_actions", "=", "self", ".", "target_policy_smoothing_func", "(", "\n", "self", ".", "target_policy", "(", "batch_next_state", ")", ".", "sample", "(", ")", "\n", ")", "\n", "next_q1", "=", "self", ".", "target_q_func1", "(", "(", "batch_next_state", ",", "next_actions", ")", ")", "\n", "next_q2", "=", "self", ".", "target_q_func2", "(", "(", "batch_next_state", ",", "next_actions", ")", ")", "\n", "next_q", "=", "torch", ".", "min", "(", "next_q1", ",", "next_q2", ")", "\n", "\n", "target_q", "=", "batch_rewards", "+", "batch_discount", "*", "(", "\n", "1.0", "-", "batch_terminal", "\n", ")", "*", "torch", ".", "flatten", "(", "next_q", ")", "\n", "\n", "", "predict_q1", "=", "torch", ".", "flatten", "(", "self", ".", "q_func1", "(", "(", "batch_state", ",", "batch_actions", ")", ")", ")", "\n", "predict_q2", "=", "torch", ".", "flatten", "(", "self", ".", "q_func2", "(", "(", "batch_state", ",", "batch_actions", ")", ")", ")", "\n", "\n", "loss1", "=", "F", ".", "mse_loss", "(", "target_q", ",", "predict_q1", ")", "\n", "loss2", "=", "F", ".", "mse_loss", "(", "target_q", ",", "predict_q2", ")", "\n", "\n", "# Update stats", "\n", "self", ".", "q1_record", ".", "extend", "(", "predict_q1", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "q2_record", ".", "extend", "(", "predict_q2", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "q_func1_loss_record", ".", "append", "(", "float", "(", "loss1", ")", ")", "\n", "self", ".", "q_func2_loss_record", ".", "append", "(", "float", "(", "loss2", ")", ")", "\n", "\n", "self", ".", "q_func1_optimizer", ".", "zero_grad", "(", ")", "\n", "loss1", ".", "backward", "(", ")", "\n", "if", "self", ".", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "clip_l2_grad_norm_", "(", "self", ".", "q_func1", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "", "self", ".", "q_func1_optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "q_func2_optimizer", ".", "zero_grad", "(", ")", "\n", "loss2", ".", "backward", "(", ")", "\n", "if", "self", ".", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "clip_l2_grad_norm_", "(", "self", ".", "q_func2", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "", "self", ".", "q_func2_optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "q_func_n_updates", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update_policy": [[234, 252], ["td3.TD3.policy().rsample", "td3.TD3.q_func1", "td3.TD3.policy_loss_record.append", "td3.TD3.policy_optimizer.zero_grad", "loss.backward", "td3.TD3.policy_optimizer.step", "torch.mean", "float", "pfrl.utils.clip_l2_grad_norm_", "td3.TD3.policy", "td3.TD3.policy.parameters"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.rsample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.clip_l2_grad_norm.clip_l2_grad_norm_"], ["", "def", "update_policy", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Compute loss for actor.\"\"\"", "\n", "\n", "batch_state", "=", "batch", "[", "\"state\"", "]", "\n", "\n", "onpolicy_actions", "=", "self", ".", "policy", "(", "batch_state", ")", ".", "rsample", "(", ")", "\n", "q", "=", "self", ".", "q_func1", "(", "(", "batch_state", ",", "onpolicy_actions", ")", ")", "\n", "\n", "# Since we want to maximize Q, loss is negation of Q", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "q", ")", "\n", "\n", "self", ".", "policy_loss_record", ".", "append", "(", "float", "(", "loss", ")", ")", "\n", "self", ".", "policy_optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "clip_l2_grad_norm_", "(", "self", ".", "policy", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "", "self", ".", "policy_optimizer", ".", "step", "(", ")", "\n", "self", ".", "policy_n_updates", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update": [[253, 261], ["pfrl.replay_buffer.batch_experiences", "td3.TD3.update_q_func", "td3.TD3.update_policy", "td3.TD3.sync_target_network"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.batch_experiences", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update_q_func", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.update_policy", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.sync_target_network"], ["", "def", "update", "(", "self", ",", "experiences", ",", "errors_out", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the model from experiences\"\"\"", "\n", "\n", "batch", "=", "batch_experiences", "(", "experiences", ",", "self", ".", "device", ",", "self", ".", "phi", ",", "self", ".", "gamma", ")", "\n", "self", ".", "update_q_func", "(", "batch", ")", "\n", "if", "self", ".", "q_func_n_updates", "%", "self", ".", "policy_update_delay", "==", "0", ":", "\n", "            ", "self", ".", "update_policy", "(", "batch", ")", "\n", "self", ".", "sync_target_network", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.batch_select_onpolicy_action": [[262, 267], ["list", "torch.no_grad", "pfrl.utils.evaluating", "td3.TD3.batch_states", "td3.TD3.policy().sample().cpu().numpy", "td3.TD3.policy().sample().cpu", "td3.TD3.policy().sample", "td3.TD3.policy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.contexts.evaluating", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.batch_states.batch_states", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "", "def", "batch_select_onpolicy_action", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ",", "pfrl", ".", "utils", ".", "evaluating", "(", "self", ".", "policy", ")", ":", "\n", "            ", "batch_xs", "=", "self", ".", "batch_states", "(", "batch_obs", ",", "self", ".", "device", ",", "self", ".", "phi", ")", "\n", "batch_action", "=", "self", ".", "policy", "(", "batch_xs", ")", ".", "sample", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "list", "(", "batch_action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.batch_act": [[268, 273], ["td3.TD3._batch_act_train", "td3.TD3._batch_act_eval"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_act_train", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_act_eval"], ["", "def", "batch_act", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_batch_act_train", "(", "batch_obs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_batch_act_eval", "(", "batch_obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.batch_observe": [[274, 277], ["td3.TD3._batch_observe_train"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_observe_train"], ["", "", "def", "batch_observe", "(", "self", ",", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "_batch_observe_train", "(", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_act_eval": [[278, 281], ["td3.TD3.batch_select_onpolicy_action"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.batch_select_onpolicy_action"], ["", "", "def", "_batch_act_eval", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "assert", "not", "self", ".", "training", "\n", "return", "self", ".", "batch_select_onpolicy_action", "(", "batch_obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_act_train": [[282, 297], ["list", "list", "td3.TD3.batch_select_onpolicy_action", "td3.TD3.burnin_action_func", "td3.TD3.explorer.select_action", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.batch_select_onpolicy_action", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.boltzmann.Boltzmann.select_action"], ["", "def", "_batch_act_train", "(", "self", ",", "batch_obs", ")", ":", "\n", "        ", "assert", "self", ".", "training", "\n", "if", "self", ".", "burnin_action_func", "is", "not", "None", "and", "self", ".", "policy_n_updates", "==", "0", ":", "\n", "            ", "batch_action", "=", "[", "self", ".", "burnin_action_func", "(", ")", "for", "_", "in", "range", "(", "len", "(", "batch_obs", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "batch_onpolicy_action", "=", "self", ".", "batch_select_onpolicy_action", "(", "batch_obs", ")", "\n", "batch_action", "=", "[", "\n", "self", ".", "explorer", ".", "select_action", "(", "self", ".", "t", ",", "lambda", ":", "batch_onpolicy_action", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "batch_onpolicy_action", ")", ")", "\n", "]", "\n", "\n", "", "self", ".", "batch_last_obs", "=", "list", "(", "batch_obs", ")", "\n", "self", ".", "batch_last_action", "=", "list", "(", "batch_action", ")", "\n", "\n", "return", "batch_action", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3._batch_observe_train": [[298, 319], ["range", "len", "td3.TD3.replay_updater.update_if_necessary", "td3.TD3.replay_buffer.append", "td3.TD3.replay_buffer.stop_current_episode"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.replay_buffer.ReplayUpdater.update_if_necessary", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.replay_buffers.replay_buffer.ReplayBuffer.stop_current_episode"], ["", "def", "_batch_observe_train", "(", "self", ",", "batch_obs", ",", "batch_reward", ",", "batch_done", ",", "batch_reset", ")", ":", "\n", "        ", "assert", "self", ".", "training", "\n", "for", "i", "in", "range", "(", "len", "(", "batch_obs", ")", ")", ":", "\n", "            ", "self", ".", "t", "+=", "1", "\n", "if", "self", ".", "batch_last_obs", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "assert", "self", ".", "batch_last_action", "[", "i", "]", "is", "not", "None", "\n", "# Add a transition to the replay buffer", "\n", "self", ".", "replay_buffer", ".", "append", "(", "\n", "state", "=", "self", ".", "batch_last_obs", "[", "i", "]", ",", "\n", "action", "=", "self", ".", "batch_last_action", "[", "i", "]", ",", "\n", "reward", "=", "batch_reward", "[", "i", "]", ",", "\n", "next_state", "=", "batch_obs", "[", "i", "]", ",", "\n", "next_action", "=", "None", ",", "\n", "is_state_terminal", "=", "batch_done", "[", "i", "]", ",", "\n", "env_id", "=", "i", ",", "\n", ")", "\n", "if", "batch_reset", "[", "i", "]", "or", "batch_done", "[", "i", "]", ":", "\n", "                    ", "self", ".", "batch_last_obs", "[", "i", "]", "=", "None", "\n", "self", ".", "batch_last_action", "[", "i", "]", "=", "None", "\n", "self", ".", "replay_buffer", ".", "stop_current_episode", "(", "env_id", "=", "i", ")", "\n", "", "", "self", ".", "replay_updater", ".", "update_if_necessary", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.TD3.get_statistics": [[320, 329], ["td3._mean_or_nan", "td3._mean_or_nan", "td3._mean_or_nan", "td3._mean_or_nan", "td3._mean_or_nan"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan"], ["", "", "def", "get_statistics", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "(", "\"average_q1\"", ",", "_mean_or_nan", "(", "self", ".", "q1_record", ")", ")", ",", "\n", "(", "\"average_q2\"", ",", "_mean_or_nan", "(", "self", ".", "q2_record", ")", ")", ",", "\n", "(", "\"average_q_func1_loss\"", ",", "_mean_or_nan", "(", "self", ".", "q_func1_loss_record", ")", ")", ",", "\n", "(", "\"average_q_func2_loss\"", ",", "_mean_or_nan", "(", "self", ".", "q_func2_loss_record", ")", ")", ",", "\n", "(", "\"average_policy_loss\"", ",", "_mean_or_nan", "(", "self", ".", "policy_loss_record", ")", ")", ",", "\n", "(", "\"policy_n_updates\"", ",", "self", ".", "policy_n_updates", ")", ",", "\n", "(", "\"q_func_n_updates\"", ",", "self", ".", "q_func_n_updates", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3._mean_or_nan": [[17, 20], ["numpy.mean"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["def", "_mean_or_nan", "(", "xs", ")", ":", "\n", "    ", "\"\"\"Return its mean a non-empty sequence, numpy.nan for a empty one.\"\"\"", "\n", "return", "np", ".", "mean", "(", "xs", ")", "if", "xs", "else", "np", ".", "nan", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.td3.default_target_policy_smoothing_func": [[22, 26], ["torch.clamp", "torch.clamp", "torch.randn_like"], "function", ["None"], ["", "def", "default_target_policy_smoothing_func", "(", "batch_action", ")", ":", "\n", "    ", "\"\"\"Add noises to actions for target policy smoothing.\"\"\"", "\n", "noise", "=", "torch", ".", "clamp", "(", "0.2", "*", "torch", ".", "randn_like", "(", "batch_action", ")", ",", "-", "0.5", ",", "0.5", ")", "\n", "return", "torch", ".", "clamp", "(", "batch_action", "+", "noise", ",", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.optimizers.rmsprop_eps_inside_sqrt.RMSpropEpsInsideSqrt.step": [[8, 65], ["closure", "square_avg.mul_().addcmul_", "RuntimeError", "len", "torch.zeros_like", "grad.add.add.add", "grad_avg.mul_().add_", "square_avg.addcmul().add_().sqrt_", "square_avg.add().sqrt_", "buf.mul_().addcdiv_", "p.data.add_", "p.data.addcdiv_", "torch.zeros_like", "torch.zeros_like", "square_avg.mul_", "grad_avg.mul_", "square_avg.addcmul().add_", "square_avg.add", "buf.mul_", "square_avg.addcmul"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.vehicle.aimsun.AimsunKernelVehicle.add"], ["def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "\"params\"", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"RMSprop does not support sparse gradients\"", ")", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "\"step\"", "]", "=", "0", "\n", "state", "[", "\"square_avg\"", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "group", "[", "\"momentum\"", "]", ">", "0", ":", "\n", "                        ", "state", "[", "\"momentum_buffer\"", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "", "if", "group", "[", "\"centered\"", "]", ":", "\n", "                        ", "state", "[", "\"grad_avg\"", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "", "square_avg", "=", "state", "[", "\"square_avg\"", "]", "\n", "alpha", "=", "group", "[", "\"alpha\"", "]", "\n", "\n", "state", "[", "\"step\"", "]", "+=", "1", "\n", "\n", "if", "group", "[", "\"weight_decay\"", "]", "!=", "0", ":", "\n", "                    ", "grad", "=", "grad", ".", "add", "(", "group", "[", "\"weight_decay\"", "]", ",", "p", ".", "data", ")", "\n", "\n", "", "square_avg", ".", "mul_", "(", "alpha", ")", ".", "addcmul_", "(", "1", "-", "alpha", ",", "grad", ",", "grad", ")", "\n", "\n", "if", "group", "[", "\"centered\"", "]", ":", "\n", "                    ", "grad_avg", "=", "state", "[", "\"grad_avg\"", "]", "\n", "grad_avg", ".", "mul_", "(", "alpha", ")", ".", "add_", "(", "1", "-", "alpha", ",", "grad", ")", "\n", "avg", "=", "(", "\n", "square_avg", ".", "addcmul", "(", "-", "1", ",", "grad_avg", ",", "grad_avg", ")", "\n", ".", "add_", "(", "group", "[", "\"eps\"", "]", ")", "\n", ".", "sqrt_", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "avg", "=", "square_avg", ".", "add", "(", "group", "[", "\"eps\"", "]", ")", ".", "sqrt_", "(", ")", "\n", "\n", "", "if", "group", "[", "\"momentum\"", "]", ">", "0", ":", "\n", "                    ", "buf", "=", "state", "[", "\"momentum_buffer\"", "]", "\n", "buf", ".", "mul_", "(", "group", "[", "\"momentum\"", "]", ")", ".", "addcdiv_", "(", "grad", ",", "avg", ")", "\n", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "\"lr\"", "]", ",", "buf", ")", "\n", "", "else", ":", "\n", "                    ", "p", ".", "data", ".", "addcdiv_", "(", "-", "group", "[", "\"lr\"", "]", ",", "grad", ",", "avg", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.optimizers.rmsprop_eps_inside_sqrt.SharedRMSpropEpsInsideSqrt.__init__": [[70, 84], ["super().__init__", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "\"params\"", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "# State initialization", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "\"step\"", "]", "=", "0", "\n", "state", "[", "\"square_avg\"", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "group", "[", "\"momentum\"", "]", ">", "0", ":", "\n", "                        ", "state", "[", "\"momentum_buffer\"", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "", "if", "group", "[", "\"centered\"", "]", ":", "\n", "                        ", "state", "[", "\"grad_avg\"", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean": [[22, 25], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "mean", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "loc", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.stddev": [[26, 29], ["torch.zeros_like"], "methods", ["None"], ["", "@", "property", "\n", "def", "stddev", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "zeros_like", "(", "self", ".", "loc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.variance": [[30, 33], ["torch.zeros_like"], "methods", ["None"], ["", "@", "property", "\n", "def", "variance", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "zeros_like", "(", "self", ".", "loc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.__init__": [[34, 41], ["isinstance", "torch.distributions.Distribution.__init__", "torch.Size", "delta.Delta.loc.size"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["", "def", "__init__", "(", "self", ",", "loc", ",", "validate_args", "=", "None", ")", ":", "\n", "        ", "self", ".", "loc", "=", "loc", "\n", "if", "isinstance", "(", "loc", ",", "Number", ")", ":", "\n", "            ", "batch_shape", "=", "torch", ".", "Size", "(", ")", "\n", "", "else", ":", "\n", "            ", "batch_shape", "=", "self", ".", "loc", ".", "size", "(", ")", "\n", "", "super", "(", "Delta", ",", "self", ")", ".", "__init__", "(", "batch_shape", ",", "validate_args", "=", "validate_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.expand": [[42, 49], ["delta.Delta._get_checked_instance", "torch.Size", "delta.Delta.loc.expand", "torch.distributions.Distribution.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.expand", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["", "def", "expand", "(", "self", ",", "batch_shape", ",", "_instance", "=", "None", ")", ":", "\n", "        ", "new", "=", "self", ".", "_get_checked_instance", "(", "Delta", ",", "_instance", ")", "\n", "batch_shape", "=", "torch", ".", "Size", "(", "batch_shape", ")", "\n", "new", ".", "loc", "=", "self", ".", "loc", ".", "expand", "(", "batch_shape", ")", "\n", "super", "(", "Delta", ",", "new", ")", ".", "__init__", "(", "batch_shape", ",", "validate_args", "=", "False", ")", "\n", "new", ".", "_validate_args", "=", "self", ".", "_validate_args", "\n", "return", "new", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.sample": [[50, 53], ["torch.Size", "torch.no_grad", "delta.Delta.rsample().detach", "delta.Delta.rsample"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.rsample"], ["", "def", "sample", "(", "self", ",", "sample_shape", "=", "torch", ".", "Size", "(", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "self", ".", "rsample", "(", "sample_shape", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.rsample": [[54, 57], ["torch.Size", "delta.Delta._extended_shape", "delta.Delta.loc.expand"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.expand"], ["", "", "def", "rsample", "(", "self", ",", "sample_shape", "=", "torch", ".", "Size", "(", ")", ")", ":", "\n", "        ", "shape", "=", "self", ".", "_extended_shape", "(", "sample_shape", ")", "\n", "return", "self", ".", "loc", ".", "expand", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.log_prob": [[58, 60], ["RuntimeError"], "methods", ["None"], ["", "def", "log_prob", "(", "self", ",", "value", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Not defined\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.entropy": [[61, 63], ["RuntimeError"], "methods", ["None"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Not defined\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.PrioritizedBuffer.__init__": [[23, 36], ["collections.deque", "prioritized.SumTreeQueue", "prioritized.MinTreeQueue"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "alpha", ",", "beta0", ",", "betasteps", ",", "eps", ",", "normalize_by_max", ",", "error_min", ",", "error_max", "\n", ")", ":", "\n", "        ", "assert", "0.0", "<=", "alpha", "\n", "assert", "0.0", "<=", "beta0", "<=", "1.0", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta0", "\n", "if", "betasteps", "is", "None", ":", "\n", "            ", "self", ".", "beta_add", "=", "0", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.PrioritizedBuffer.__len__": [[37, 39], ["len"], "methods", ["None"], ["", "else", ":", "\n", "            ", "self", ".", "beta_add", "=", "(", "1.0", "-", "beta0", ")", "/", "betasteps", "\n", "", "self", ".", "eps", "=", "eps", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.PrioritizedBuffer.append": [[40, 50], ["prioritized.PrioritizedBuffer.data.append", "prioritized.PrioritizedBuffer.priority_sums.append", "prioritized.PrioritizedBuffer.priority_mins.append", "prioritized.PrioritizedBuffer.popleft", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.popleft"], ["if", "normalize_by_max", "is", "True", ":", "\n", "            ", "normalize_by_max", "=", "\"batch\"", "\n", "", "assert", "normalize_by_max", "in", "[", "False", ",", "\"batch\"", ",", "\"memory\"", "]", "\n", "self", ".", "normalize_by_max", "=", "normalize_by_max", "\n", "self", ".", "error_min", "=", "error_min", "\n", "self", ".", "error_max", "=", "error_max", "\n", "\n", "", "def", "priority_from_errors", "(", "self", ",", "errors", ")", ":", "\n", "        ", "def", "_clip_error", "(", "error", ")", ":", "\n", "            ", "if", "self", ".", "error_min", "is", "not", "None", ":", "\n", "                ", "error", "=", "max", "(", "self", ".", "error_min", ",", "error", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.PrioritizedBuffer.popleft": [[51, 56], ["prioritized.PrioritizedBuffer.priority_sums.popleft", "prioritized.PrioritizedBuffer.priority_mins.popleft", "prioritized.PrioritizedBuffer.data.popleft", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.popleft", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.popleft", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.popleft"], ["", "if", "self", ".", "error_max", "is", "not", "None", ":", "\n", "                ", "error", "=", "min", "(", "self", ".", "error_max", ",", "error", ")", "\n", "", "return", "error", "\n", "\n", "", "return", "[", "(", "_clip_error", "(", "d", ")", "+", "self", ".", "eps", ")", "**", "self", ".", "alpha", "for", "d", "in", "errors", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.PrioritizedBuffer._sample_indices_and_probabilities": [[57, 86], ["prioritized.PrioritizedBuffer.priority_sums.sum", "prioritized.PrioritizedBuffer.priority_sums.prioritized_sample", "indices.extend", "priorities.extend", "prioritized.PrioritizedBuffer.priority_mins.min", "numpy.random.binomial", "prioritized.PrioritizedBuffer.priority_sums.uniform_sample", "indices.extend", "priorities.extend", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.prioritized_sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.uniform_sample", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend"], ["", "def", "weights_from_probabilities", "(", "self", ",", "probabilities", ",", "min_probability", ")", ":", "\n", "        ", "if", "self", ".", "normalize_by_max", "==", "\"batch\"", ":", "\n", "# discard global min and compute batch min", "\n", "            ", "min_probability", "=", "np", ".", "min", "(", "probabilities", ")", "\n", "", "if", "self", ".", "normalize_by_max", ":", "\n", "            ", "weights", "=", "[", "(", "p", "/", "min_probability", ")", "**", "-", "self", ".", "beta", "for", "p", "in", "probabilities", "]", "\n", "", "else", ":", "\n", "            ", "weights", "=", "[", "(", "len", "(", "self", ".", "memory", ")", "*", "p", ")", "**", "-", "self", ".", "beta", "for", "p", "in", "probabilities", "]", "\n", "", "self", ".", "beta", "=", "min", "(", "1.0", ",", "self", ".", "beta", "+", "self", ".", "beta_add", ")", "\n", "return", "weights", "\n", "\n", "\n", "", "", "class", "PrioritizedReplayBuffer", "(", "ReplayBuffer", ",", "PriorityWeightError", ")", ":", "\n", "    ", "\"\"\"Stochastic Prioritization\n\n    https://arxiv.org/pdf/1511.05952.pdf Section 3.3\n    proportional prioritization\n\n    Args:\n        capacity (int): capacity in terms of number of transitions\n        alpha (float): Exponent of errors to compute probabilities to sample\n        beta0 (float): Initial value of beta\n        betasteps (int): Steps to anneal beta to 1\n        eps (float): To revisit a step after its error becomes near zero\n        normalize_by_max (bool): Method to normalize weights. ``'batch'`` or\n            ``True`` (default): divide by the maximum weight in the sampled\n            batch. ``'memory'``: divide by the maximum weight in the memory.\n            ``False``: do not normalize\n    \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.PrioritizedBuffer.sample": [[87, 107], ["prioritized.PrioritizedBuffer._sample_indices_and_probabilities"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.PrioritizedBuffer._sample_indices_and_probabilities"], ["def", "__init__", "(", "\n", "self", ",", "\n", "capacity", "=", "None", ",", "\n", "alpha", "=", "0.6", ",", "\n", "beta0", "=", "0.4", ",", "\n", "betasteps", "=", "2e5", ",", "\n", "eps", "=", "0.01", ",", "\n", "normalize_by_max", "=", "True", ",", "\n", "error_min", "=", "0", ",", "\n", "error_max", "=", "1", ",", "\n", "num_steps", "=", "1", ",", "\n", ")", ":", "\n", "        ", "self", ".", "capacity", "=", "capacity", "\n", "assert", "num_steps", ">", "0", "\n", "self", ".", "num_steps", "=", "num_steps", "\n", "self", ".", "memory", "=", "PrioritizedBuffer", "(", "capacity", "=", "capacity", ")", "\n", "self", ".", "last_n_transitions", "=", "collections", ".", "defaultdict", "(", "\n", "lambda", ":", "collections", ".", "deque", "(", "[", "]", ",", "maxlen", "=", "num_steps", ")", "\n", ")", "\n", "PriorityWeightError", ".", "__init__", "(", "\n", "self", ",", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.PrioritizedBuffer.set_last_priority": [[108, 118], ["all", "zip", "len", "len", "max"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max"], ["alpha", ",", "\n", "beta0", ",", "\n", "betasteps", ",", "\n", "eps", ",", "\n", "normalize_by_max", ",", "\n", "error_min", "=", "error_min", ",", "\n", "error_max", "=", "error_max", ",", "\n", ")", "\n", "\n", "", "def", "sample", "(", "self", ",", "n", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "memory", ")", ">=", "n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.PrioritizedBuffer._uniform_sample_indices_and_probabilities": [[119, 125], ["list", "pfrl.utils.random.sample_n_k", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random.sample_n_k"], ["sampled", ",", "probabilities", ",", "min_prob", "=", "self", ".", "memory", ".", "sample", "(", "n", ")", "\n", "weights", "=", "self", ".", "weights_from_probabilities", "(", "probabilities", ",", "min_prob", ")", "\n", "for", "e", ",", "w", "in", "zip", "(", "sampled", ",", "weights", ")", ":", "\n", "            ", "e", "[", "0", "]", "[", "\"weight\"", "]", "=", "w", "\n", "", "return", "sampled", "\n", "\n", "", "def", "update_errors", "(", "self", ",", "errors", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.TreeQueue.__init__": [[195, 198], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.TreeQueue.__setitem__": [[199, 203], ["prioritized.TreeQueue._write"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized._write"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.TreeQueue._write": [[204, 207], ["prioritized.TreeQueue._write"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized._write"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.TreeQueue.append": [[208, 225], ["prioritized.TreeQueue._write"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized._write"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.TreeQueue.popleft": [[226, 244], ["prioritized.TreeQueue._write"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized._write"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.__init__": [[270, 272], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum": [[273, 278], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.uniform_sample": [[279, 294], ["list", "pfrl.utils.random.sample_n_k", "zip", "prioritized.SumTreeQueue._write", "vals.append", "prioritized.SumTreeQueue._write"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random.sample_n_k", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized._write", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized._write"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.prioritized_sample": [[295, 314], ["range", "zip", "prioritized._find", "prioritized.SumTreeQueue._write", "ixs.append", "vals.append", "prioritized.SumTreeQueue._write", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized._find", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized._write", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized._write"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.__init__": [[317, 319], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.MinTreeQueue.min": [[320, 325], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized._expand": [[136, 139], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized._reduce": [[141, 153], ["parent_value.append", "parent_value.append", "op"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized._write": [[155, 182], ["prioritized._expand", "prioritized._reduce", "prioritized._write", "prioritized._write"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized._expand", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized._reduce", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized._write", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized._write"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized._find": [[246, 260], ["prioritized._find", "prioritized._find"], "function", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized._find", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized._find"], []], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.random_access_queue.RandomAccessQueue.__init__": [[13, 19], ["kwargs.pop", "list", "random_access_queue.RandomAccessQueue._apply_maxlen"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.random_access_queue.RandomAccessQueue._apply_maxlen"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "maxlen", "=", "kwargs", ".", "pop", "(", "\"maxlen\"", ",", "None", ")", "\n", "assert", "self", ".", "maxlen", "is", "None", "or", "self", ".", "maxlen", ">=", "0", "\n", "self", ".", "_queue_front", "=", "[", "]", "\n", "self", ".", "_queue_back", "=", "list", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_apply_maxlen", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.random_access_queue.RandomAccessQueue._apply_maxlen": [[20, 24], ["len", "random_access_queue.RandomAccessQueue.popleft"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.popleft"], ["", "def", "_apply_maxlen", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "maxlen", "is", "not", "None", ":", "\n", "            ", "while", "len", "(", "self", ")", ">", "self", ".", "maxlen", ":", "\n", "                ", "self", ".", "popleft", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.random_access_queue.RandomAccessQueue.__iter__": [[25, 27], ["itertools.chain", "reversed", "iter"], "methods", ["None"], ["", "", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "itertools", ".", "chain", "(", "reversed", "(", "self", ".", "_queue_front", ")", ",", "iter", "(", "self", ".", "_queue_back", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.random_access_queue.RandomAccessQueue.__repr__": [[28, 30], ["str", "list", "iter"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"RandomAccessQueue({})\"", ".", "format", "(", "str", "(", "list", "(", "iter", "(", "self", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.random_access_queue.RandomAccessQueue.__len__": [[31, 33], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_queue_front", ")", "+", "len", "(", "self", ".", "_queue_back", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.random_access_queue.RandomAccessQueue.__getitem__": [[34, 56], ["len", "len", "len", "IndexError", "IndexError", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "if", "i", ">=", "0", ":", "\n", "            ", "nf", "=", "len", "(", "self", ".", "_queue_front", ")", "\n", "if", "i", "<", "nf", ":", "\n", "                ", "return", "self", ".", "_queue_front", "[", "~", "i", "]", "\n", "", "else", ":", "\n", "                ", "i", "-=", "nf", "\n", "if", "i", "<", "len", "(", "self", ".", "_queue_back", ")", ":", "\n", "                    ", "return", "self", ".", "_queue_back", "[", "i", "]", "\n", "", "else", ":", "\n", "                    ", "raise", "IndexError", "(", "\"RandomAccessQueue index out of range\"", ")", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "nb", "=", "len", "(", "self", ".", "_queue_back", ")", "\n", "if", "i", ">=", "-", "nb", ":", "\n", "                ", "return", "self", ".", "_queue_back", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "i", "+=", "nb", "\n", "if", "i", ">=", "-", "len", "(", "self", ".", "_queue_front", ")", ":", "\n", "                    ", "return", "self", ".", "_queue_front", "[", "~", "i", "]", "\n", "", "else", ":", "\n", "                    ", "raise", "IndexError", "(", "\"RandomAccessQueue index out of range\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.random_access_queue.RandomAccessQueue.__setitem__": [[57, 79], ["len", "len", "len", "IndexError", "IndexError", "len"], "methods", ["None"], ["", "", "", "", "def", "__setitem__", "(", "self", ",", "i", ",", "x", ")", ":", "\n", "        ", "if", "i", ">=", "0", ":", "\n", "            ", "nf", "=", "len", "(", "self", ".", "_queue_front", ")", "\n", "if", "i", "<", "nf", ":", "\n", "                ", "self", ".", "_queue_front", "[", "~", "i", "]", "=", "x", "\n", "", "else", ":", "\n", "                ", "i", "-=", "nf", "\n", "if", "i", "<", "len", "(", "self", ".", "_queue_back", ")", ":", "\n", "                    ", "self", ".", "_queue_back", "[", "i", "]", "=", "x", "\n", "", "else", ":", "\n", "                    ", "raise", "IndexError", "(", "\"RandomAccessQueue index out of range\"", ")", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "nb", "=", "len", "(", "self", ".", "_queue_back", ")", "\n", "if", "i", ">=", "-", "nb", ":", "\n", "                ", "self", ".", "_queue_back", "[", "i", "]", "=", "x", "\n", "", "else", ":", "\n", "                ", "i", "+=", "nb", "\n", "if", "i", ">=", "-", "len", "(", "self", ".", "_queue_front", ")", ":", "\n", "                    ", "self", ".", "_queue_front", "[", "~", "i", "]", "=", "x", "\n", "", "else", ":", "\n", "                    ", "raise", "IndexError", "(", "\"RandomAccessQueue index out of range\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.random_access_queue.RandomAccessQueue.append": [[80, 84], ["random_access_queue.RandomAccessQueue._queue_back.append", "random_access_queue.RandomAccessQueue.popleft", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.popleft"], ["", "", "", "", "def", "append", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "_queue_back", ".", "append", "(", "x", ")", "\n", "if", "self", ".", "maxlen", "is", "not", "None", "and", "len", "(", "self", ")", ">", "self", ".", "maxlen", ":", "\n", "            ", "self", ".", "popleft", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.random_access_queue.RandomAccessQueue.extend": [[85, 88], ["random_access_queue.RandomAccessQueue._queue_back.extend", "random_access_queue.RandomAccessQueue._apply_maxlen"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.random_access_queue.RandomAccessQueue._apply_maxlen"], ["", "", "def", "extend", "(", "self", ",", "xs", ")", ":", "\n", "        ", "self", ".", "_queue_back", ".", "extend", "(", "xs", ")", "\n", "self", ".", "_apply_maxlen", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.random_access_queue.RandomAccessQueue.popleft": [[89, 99], ["random_access_queue.RandomAccessQueue._queue_front.pop", "random_access_queue.RandomAccessQueue._queue_front.reverse", "IndexError"], "methods", ["None"], ["", "def", "popleft", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_queue_front", ":", "\n", "            ", "if", "not", "self", ".", "_queue_back", ":", "\n", "                ", "raise", "IndexError", "(", "\"pop from empty RandomAccessQueue\"", ")", "\n", "\n", "", "self", ".", "_queue_front", "=", "self", ".", "_queue_back", "\n", "self", ".", "_queue_back", "=", "[", "]", "\n", "self", ".", "_queue_front", ".", "reverse", "(", ")", "\n", "\n", "", "return", "self", ".", "_queue_front", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.random_access_queue.RandomAccessQueue.sample": [[100, 102], ["pfrl.utils.random.sample_n_k", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.utils.random.sample_n_k"], ["", "def", "sample", "(", "self", ",", "k", ")", ":", "\n", "        ", "return", "[", "self", "[", "i", "]", "for", "i", "in", "sample_n_k", "(", "len", "(", "self", ")", ",", "k", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections._ChunkReader.__init__": [[21, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "datadir", ",", "fs", ")", ":", "\n", "        ", "self", ".", "datadir", "=", "datadir", "\n", "self", ".", "fs", "=", "fs", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections._ChunkReader.read_chunk_index": [[25, 41], ["os.path.join", "_INDEX_FILENAME_FORMAT.format", "persistent_collections._ChunkReader.fs.open", "ifp.read", "struct.unpack", "len"], "methods", ["None"], ["", "def", "read_chunk_index", "(", "self", ",", "gen", ")", ":", "\n", "        ", "index_format", "=", "_ChunkWriter", ".", "index_format", "\n", "index_format_size", "=", "_ChunkWriter", ".", "index_format_size", "\n", "indexfile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "datadir", ",", "_INDEX_FILENAME_FORMAT", ".", "format", "(", "gen", ")", ")", "\n", "with", "self", ".", "fs", ".", "open", "(", "indexfile", ",", "\"rb\"", ")", "as", "ifp", ":", "\n", "            ", "idata", "=", "ifp", ".", "read", "(", ")", "\n", "", "offset", "=", "0", "\n", "while", "True", ":", "\n", "# TODO: try iter_unpack()", "\n", "            ", "buf", "=", "idata", "[", "offset", ":", "offset", "+", "index_format_size", "]", "\n", "\n", "if", "len", "(", "buf", ")", "!=", "index_format_size", ":", "\n", "                ", "break", "\n", "", "data", "=", "unpack", "(", "index_format", ",", "buf", ")", "\n", "offset", "+=", "index_format_size", "\n", "yield", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections._ChunkReader.read_chunk": [[42, 58], ["os.path.join", "persistent_collections._ChunkReader.read_chunk_index", "_DATA_FILENAME_FORMAT.format", "persistent_collections._ChunkReader.fs.open", "dfp.read", "binascii.crc32", "pickle.loads"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections._ChunkReader.read_chunk_index"], ["", "", "def", "read_chunk", "(", "self", ",", "gen", ",", "do_unpickle", "=", "True", ")", ":", "\n", "        ", "datafile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "datadir", ",", "_DATA_FILENAME_FORMAT", ".", "format", "(", "gen", ")", ")", "\n", "\n", "indices", "=", "self", ".", "read_chunk_index", "(", "gen", ")", "\n", "with", "self", ".", "fs", ".", "open", "(", "datafile", ",", "\"rb\"", ")", "as", "dfp", ":", "\n", "# TODO: inefficient; chunked read", "\n", "            ", "cdata", "=", "dfp", ".", "read", "(", ")", "\n", "\n", "", "for", "index", "in", "indices", ":", "\n", "            ", "g", ",", "o", ",", "l", ",", "c", ",", "_", "=", "index", "\n", "data", "=", "cdata", "[", "o", ":", "o", "+", "l", "]", "\n", "crc", "=", "binascii", ".", "crc32", "(", "data", ")", "\n", "assert", "crc", "==", "c", "\n", "if", "do_unpickle", ":", "\n", "                ", "data", "=", "pickle", ".", "loads", "(", "data", ")", "\n", "", "yield", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections._ChunkReader._count_all_chunks": [[59, 70], ["os.path.join", "os.path.join", "_INDEX_FILENAME_FORMAT.format", "_DATA_FILENAME_FORMAT.format", "persistent_collections._ChunkReader.fs.exists", "persistent_collections._ChunkReader.fs.exists", "len", "list", "persistent_collections._ChunkReader.read_chunk_index"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections._ChunkReader.read_chunk_index"], ["", "", "def", "_count_all_chunks", "(", "self", ")", ":", "\n", "        ", "gen", "=", "0", "\n", "while", "True", ":", "\n", "            ", "indexfile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "datadir", ",", "_INDEX_FILENAME_FORMAT", ".", "format", "(", "gen", ")", ")", "\n", "datafile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "datadir", ",", "_DATA_FILENAME_FORMAT", ".", "format", "(", "gen", ")", ")", "\n", "if", "self", ".", "fs", ".", "exists", "(", "indexfile", ")", "and", "self", ".", "fs", ".", "exists", "(", "datafile", ")", ":", "\n", "                ", "count", "=", "len", "(", "list", "(", "self", ".", "read_chunk_index", "(", "gen", ")", ")", ")", "\n", "yield", "gen", ",", "count", "\n", "gen", "+=", "1", "\n", "continue", "\n", "", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections._ChunkReader.read_chunks": [[71, 93], ["list", "list.reverse", "gens.reverse", "persistent_collections._ChunkReader._count_all_chunks", "buf.extend", "gens.append", "max", "gens.append", "persistent_collections._ChunkReader.read_chunk"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections._ChunkReader._count_all_chunks", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections._ChunkReader.read_chunk"], ["", "", "def", "read_chunks", "(", "self", ",", "maxlen", ",", "buf", ")", ":", "\n", "        ", "\"\"\"Efficiently read all data needed (but scans all index)\"\"\"", "\n", "gens", "=", "[", "]", "\n", "chunks", "=", "list", "(", "self", ".", "_count_all_chunks", "(", ")", ")", "\n", "# chunks: [(0, 1024), (1, 1024), ..., (n, 1024)]", "\n", "chunks", ".", "reverse", "(", ")", "\n", "remain", "=", "maxlen", "\n", "for", "gen", ",", "count", "in", "chunks", ":", "\n", "            ", "if", "maxlen", "is", "None", ":", "\n", "                ", "gens", ".", "append", "(", "gen", ")", "\n", "", "elif", "remain", ">", "0", ":", "\n", "                ", "gens", ".", "append", "(", "gen", ")", "\n", "remain", "-=", "count", "\n", "", "else", ":", "\n", "                ", "break", "\n", "# gens: [n, n-1, ..., m]", "\n", "", "", "gens", ".", "reverse", "(", ")", "\n", "for", "gen", "in", "gens", ":", "\n", "            ", "buf", ".", "extend", "(", "obj", "for", "obj", "in", "self", ".", "read_chunk", "(", "gen", ")", ")", "\n", "\n", "", "gen", "=", "max", "(", "gens", ")", "+", "1", "if", "gens", "else", "0", "\n", "return", "gen", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections._ChunkWriter.__init__": [[99, 117], ["os.path.join", "persistent_collections._ChunkWriter.fs.open", "os.path.join", "persistent_collections._ChunkWriter.fs.open", "_INDEX_FILENAME_FORMAT.format", "_DATA_FILENAME_FORMAT.format"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "datadir", ",", "gen", ",", "chunksize", ",", "fs", ",", "do_pickle", "=", "True", ")", ":", "\n", "        ", "self", ".", "datadir", "=", "datadir", "\n", "self", ".", "gen", "=", "gen", "\n", "assert", "gen", ">=", "0", "\n", "# Threshold should be number of elements or chunksize?", "\n", "self", ".", "chunksize", "=", "chunksize", "\n", "assert", "chunksize", ">", "0", "\n", "self", ".", "do_pickle", "=", "do_pickle", "\n", "self", ".", "fs", "=", "fs", "\n", "\n", "# AppendOnly", "\n", "self", ".", "indexfile", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "_INDEX_FILENAME_FORMAT", ".", "format", "(", "gen", ")", ")", "\n", "self", ".", "ifp", "=", "self", ".", "fs", ".", "open", "(", "self", ".", "indexfile", ",", "\"wb\"", ")", "\n", "self", ".", "datafile", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "_DATA_FILENAME_FORMAT", ".", "format", "(", "gen", ")", ")", "\n", "self", ".", "dfp", "=", "self", ".", "fs", ".", "open", "(", "self", ".", "datafile", ",", "\"wb\"", ")", "\n", "\n", "self", ".", "offset", "=", "0", "\n", "self", ".", "full", "=", "self", ".", "chunksize", "<", "self", ".", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections._ChunkWriter.is_full": [[118, 120], ["None"], "methods", ["None"], ["", "def", "is_full", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "full", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections._ChunkWriter.append": [[121, 151], ["persistent_collections._ChunkWriter.is_full", "persistent_collections._ChunkWriter.dfp.write", "persistent_collections._ChunkWriter.dfp.flush", "binascii.crc32", "len", "struct.pack", "persistent_collections._ChunkWriter.ifp.write", "persistent_collections._ChunkWriter.ifp.flush", "persistent_collections._ChunkWriter.is_full", "RuntimeError", "pickle.dumps", "persistent_collections._ChunkWriter.close"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections._ChunkWriter.is_full", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections._ChunkWriter.is_full", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close"], ["", "def", "append", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        From https://github.com/kuenishi/machi-py/blob/master/machi/machi.py\n\n        Index entry format:\n        0       8       16      24  28  32bytes\n        +-------+-------+-------+---+---+\n        |gen    |offset |length |crc|st |\n        +-------+-------+-------+---+---+\n        Indices are appended to index files. Number of max entries per index\n        file is to be preset.\n        \"\"\"", "\n", "if", "self", ".", "is_full", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Already chunk written full\"", ")", "\n", "\n", "", "if", "self", ".", "do_pickle", ":", "\n", "            ", "data", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "\n", "", "self", ".", "dfp", ".", "write", "(", "data", ")", "\n", "self", ".", "dfp", ".", "flush", "(", ")", "\n", "crc", "=", "binascii", ".", "crc32", "(", "data", ")", "\n", "length", "=", "len", "(", "data", ")", "\n", "index", "=", "pack", "(", "self", ".", "index_format", ",", "self", ".", "gen", ",", "self", ".", "offset", ",", "length", ",", "crc", ",", "0", ")", "\n", "self", ".", "ifp", ".", "write", "(", "index", ")", "\n", "self", ".", "ifp", ".", "flush", "(", ")", "\n", "\n", "self", ".", "offset", "+=", "length", "\n", "self", ".", "full", "=", "self", ".", "chunksize", "<", "self", ".", "offset", "\n", "if", "self", ".", "is_full", "(", ")", ":", "\n", "            ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections._ChunkWriter.__del__": [[152, 155], ["persistent_collections._ChunkWriter.close"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "full", ":", "\n", "            ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections._ChunkWriter.close": [[156, 160], ["persistent_collections._ChunkWriter.dfp.close", "persistent_collections._ChunkWriter.ifp.close"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "full", "=", "True", "\n", "self", ".", "dfp", ".", "close", "(", ")", "\n", "self", ".", "ifp", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.__init__": [[186, 220], ["persistent_collections.PersistentRandomAccessQueue._setup_fs", "persistent_collections.PersistentRandomAccessQueue._setup_datadir", "pfrl.collections.random_access_queue.RandomAccessQueue", "persistent_collections.PersistentRandomAccessQueue._meta_file_name", "persistent_collections.PersistentRandomAccessQueue._load_meta", "persistent_collections.PersistentRandomAccessQueue.fs.exists", "persistent_collections._ChunkWriter", "persistent_collections.PersistentRandomAccessQueue._load_ancestor", "persistent_collections._ChunkReader", "persistent_collections._ChunkReader.read_chunks", "persistent_collections.PersistentRandomAccessQueue.fs.makedirs", "persistent_collections.PersistentRandomAccessQueue.logger.info", "len"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue._setup_fs", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue._setup_datadir", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue._meta_file_name", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue._load_meta", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue._load_ancestor", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections._ChunkReader.read_chunks"], ["def", "__init__", "(", "self", ",", "basedir", ",", "maxlen", ",", "*", ",", "ancestor", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "assert", "maxlen", "is", "None", "or", "maxlen", ">", "0", "\n", "self", ".", "basedir", "=", "basedir", "\n", "self", ".", "_setup_fs", "(", "None", ")", "\n", "self", ".", "_setup_datadir", "(", ")", "\n", "self", ".", "meta", "=", "None", "\n", "self", ".", "buffer", "=", "RandomAccessQueue", "(", "maxlen", "=", "maxlen", ")", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "ancestor_meta", "=", "None", "\n", "if", "ancestor", "is", "not", "None", ":", "\n", "# Load ancestor as preloaded data", "\n", "            ", "meta", "=", "self", ".", "_load_ancestor", "(", "ancestor", ",", "maxlen", ")", "\n", "self", ".", "ancestor_meta", "=", "meta", "\n", "\n", "# Load or create meta file and share the meta object", "\n", "", "self", ".", "meta_file", "=", "PersistentRandomAccessQueue", ".", "_meta_file_name", "(", "self", ".", "basedir", ")", "\n", "self", ".", "_load_meta", "(", "ancestor", ",", "maxlen", ")", "\n", "\n", "if", "self", ".", "fs", ".", "exists", "(", "self", ".", "datadir", ")", ":", "\n", "            ", "reader", "=", "_ChunkReader", "(", "self", ".", "datadir", ",", "self", ".", "fs", ")", "\n", "self", ".", "gen", "=", "reader", ".", "read_chunks", "(", "maxlen", ",", "self", ".", "buffer", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "gen", "=", "0", "\n", "self", ".", "fs", ".", "makedirs", "(", "self", ".", "datadir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "self", ".", "tail", "=", "_ChunkWriter", "(", "\n", "self", ".", "datadir", ",", "self", ".", "gen", ",", "self", ".", "chunk_size", ",", "self", ".", "fs", ",", "do_pickle", "=", "True", "\n", ")", "# Last chunk to be appended", "\n", "self", ".", "gen", "+=", "1", "\n", "\n", "if", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\n", "\"Initial buffer size=%d, next gen=%d\"", ",", "len", "(", "self", ".", "buffer", ")", ",", "self", ".", "gen", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue._load_meta": [[222, 265], ["persistent_collections.PersistentRandomAccessQueue.fs.exists", "isinstance", "datetime.datetime.datetime.strftime", "dict", "persistent_collections.PersistentRandomAccessQueue.fs.makedirs", "persistent_collections.PersistentRandomAccessQueue.fs.open", "pickle.load", "datetime.datetime.datetime.today", "persistent_collections.PersistentRandomAccessQueue.fs.open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load"], ["", "", "def", "_load_meta", "(", "self", ",", "ancestor", ",", "maxlen", ")", ":", "\n", "# This must be checked by single process to avoid race", "\n", "# condition where one creates and the other may detect it", "\n", "# as exisiting... process differently OTL", "\n", "        ", "if", "self", ".", "fs", ".", "exists", "(", "self", ".", "meta_file", ")", ":", "\n", "# Load existing meta", "\n", "            ", "with", "self", ".", "fs", ".", "open", "(", "self", ".", "meta_file", ",", "\"rb\"", ")", "as", "fp", ":", "\n", "                ", "self", ".", "meta", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "\n", "# TODO: update chunksize and other properties", "\n", "", "assert", "isinstance", "(", "self", ".", "meta", ",", "dict", ")", "\n", "\n", "# MPI world size must be the same when it's restart", "\n", "assert", "(", "\n", "self", ".", "meta", "[", "\"comm_size\"", "]", "==", "self", ".", "comm_size", "\n", ")", ",", "\"Reloading same basedir requires same comm.size\"", "\n", "\n", "", "else", ":", "\n", "# Create meta from scratch", "\n", "# Timestamp from pfrl.experiments.prepare_output_dir", "\n", "\n", "            ", "ts", "=", "datetime", ".", "strftime", "(", "datetime", ".", "today", "(", ")", ",", "\"%Y%m%dT%H%M%S.%f\"", ")", "\n", "self", ".", "meta", "=", "dict", "(", "\n", "basedir", "=", "self", ".", "basedir", ",", "\n", "maxlen", "=", "maxlen", ",", "\n", "comm_size", "=", "self", ".", "comm_size", ",", "\n", "ancestor", "=", "ancestor", ",", "\n", "timestamp", "=", "ts", ",", "\n", "chunksize", "=", "self", ".", "chunk_size", ",", "\n", "trim", "=", "False", ",", "# `trim` is reserved for future extension.", "\n", ")", "\n", "\n", "# Note: If HDFS access fails at first open, make sure", "\n", "# no ``cv2`` import fail happening - failing", "\n", "# ``opencv-python`` due to lacking ``libSM.so`` may", "\n", "# break whole dynamic library loader and thus breaks", "\n", "# other dynamic library loading (e.g. libhdfs.so)", "\n", "# which may happen here. Solution for this is to let", "\n", "# the import success, e.g. installing the lacking", "\n", "# library correctly.", "\n", "self", ".", "fs", ".", "makedirs", "(", "self", ".", "basedir", ",", "exist_ok", "=", "True", ")", "\n", "with", "self", ".", "fs", ".", "open", "(", "self", ".", "meta_file", ",", "\"wb\"", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "meta", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.close": [[266, 269], ["persistent_collections.PersistentRandomAccessQueue.tail.close"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close"], ["", "", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "tail", ".", "close", "(", ")", "\n", "self", ".", "tail", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue._append": [[270, 280], ["persistent_collections.PersistentRandomAccessQueue.tail.is_full", "persistent_collections.PersistentRandomAccessQueue.tail.append", "persistent_collections._ChunkWriter", "persistent_collections.PersistentRandomAccessQueue.logger.info"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections._ChunkWriter.is_full", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "_append", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "self", ".", "tail", ".", "is_full", "(", ")", ":", "\n", "            ", "self", ".", "tail", "=", "_ChunkWriter", "(", "\n", "self", ".", "datadir", ",", "self", ".", "gen", ",", "self", ".", "chunk_size", ",", "self", ".", "fs", ",", "do_pickle", "=", "True", "\n", ")", "\n", "if", "self", ".", "logger", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Chunk rotated. New gen=%d\"", ",", "self", ".", "gen", ")", "\n", "", "self", ".", "gen", "+=", "1", "\n", "\n", "", "self", ".", "tail", ".", "append", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append": [[282, 285], ["persistent_collections.PersistentRandomAccessQueue._append", "persistent_collections.PersistentRandomAccessQueue.buffer.append"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue._append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "append", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_append", "(", "value", ")", "\n", "self", ".", "buffer", ".", "append", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend": [[286, 290], ["persistent_collections.PersistentRandomAccessQueue.buffer.extend", "persistent_collections.PersistentRandomAccessQueue._append"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue._append"], ["", "def", "extend", "(", "self", ",", "xs", ")", ":", "\n", "        ", "for", "x", "in", "xs", ":", "\n", "            ", "self", ".", "_append", "(", "x", ")", "\n", "", "self", ".", "buffer", ".", "extend", "(", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.__iter__": [[291, 293], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "buffer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.__repr__": [[294, 296], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"PersistentRandomAccessQueue({})\"", ".", "format", "(", "str", "(", "self", ".", "buffer", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.__setitem__": [[297, 299], ["NotImplementedError"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "i", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.__getitem__": [[300, 302], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "buffer", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample": [[303, 305], ["persistent_collections.PersistentRandomAccessQueue.buffer.sample"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.sample"], ["", "def", "sample", "(", "self", ",", "n", ")", ":", "\n", "        ", "return", "self", ".", "buffer", ".", "sample", "(", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.popleft": [[306, 308], ["persistent_collections.PersistentRandomAccessQueue.buffer.popleft"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.popleft"], ["", "def", "popleft", "(", "self", ")", ":", "\n", "        ", "self", ".", "buffer", ".", "popleft", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.__len__": [[309, 311], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "buffer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.maxlen": [[312, 315], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "maxlen", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "meta", "[", "\"maxlen\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.comm_size": [[316, 319], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "comm_size", "(", "self", ")", ":", "\n", "        ", "return", "1", "# Fixed to 1", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.comm_rank": [[320, 323], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "comm_rank", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.chunk_size": [[324, 327], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "chunk_size", "(", "self", ")", ":", "\n", "        ", "return", "16", "*", "128", "*", "1024", "*", "1024", "# Fixed: 16 * 128MB", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue._meta_file_name": [[328, 331], ["os.path.join"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_meta_file_name", "(", "dirname", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "dirname", ",", "\"meta.pkl\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue._setup_fs": [[332, 348], ["NotImplementedError", "_VanillaFS"], "methods", ["None"], ["", "def", "_setup_fs", "(", "self", ",", "fs", ")", ":", "\n", "# In __init__() fs is fixed to None, but this is reserved for", "\n", "# future extension support non-posix file systems such as HDFS", "\n", "        ", "if", "fs", "is", "None", ":", "\n", "            ", "if", "_chainerio_available", ":", "\n", "# _chainerio_available must be None for now", "\n", "                ", "raise", "NotImplementedError", "(", "\n", "\"Internal Error: chainerio support is not yet implemented\"", "\n", ")", "\n", "", "else", ":", "\n", "# When chainerio is not installed", "\n", "                ", "self", ".", "fs", "=", "_VanillaFS", "(", "\n", "open", "=", "open", ",", "exists", "=", "os", ".", "path", ".", "exists", ",", "makedirs", "=", "os", ".", "makedirs", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "fs", "=", "fs", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue._setup_datadir": [[349, 354], ["os.path.join"], "methods", ["None"], ["", "", "def", "_setup_datadir", "(", "self", ")", ":", "\n", "# the name \"rank0\" means that the process is the rank 0", "\n", "# in a parallel processing process group", "\n", "# It is fixed to 'rank0' and prepared for future extension.", "\n", "        ", "self", ".", "datadir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "basedir", ",", "\"rank0\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue._load_ancestor": [[355, 402], ["persistent_collections.PersistentRandomAccessQueue._meta_file_name", "range", "persistent_collections.PersistentRandomAccessQueue.fs.open", "pickle.load", "isinstance", "persistent_collections.PersistentRandomAccessQueue.logger.info", "datadirs.append", "persistent_collections._ChunkReader", "persistent_collections.PersistentRandomAccessQueue._load_ancestor", "persistent_collections._ChunkReader", "persistent_collections._ChunkReader.read_chunks", "persistent_collections.PersistentRandomAccessQueue.buffer.extend", "os.path.join", "os.path.join", "len", "len", "persistent_collections.PersistentRandomAccessQueue.logger.info", "_INDEX_FILENAME_FORMAT.format", "persistent_collections.PersistentRandomAccessQueue.fs.exists", "persistent_collections.PersistentRandomAccessQueue.logger.debug", "list", "len", "persistent_collections._ChunkReader.read_chunk_index"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue._meta_file_name", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.agents.state_q_function_actor.StateQFunctionActor.load", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue._load_ancestor", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections._ChunkReader.read_chunks", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.extend", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections._ChunkReader.read_chunk_index"], ["", "def", "_load_ancestor", "(", "self", ",", "ancestor", ",", "num_data_needed", ")", ":", "\n", "        ", "\"\"\"Simple implementation\"\"\"", "\n", "ancestor_metafile", "=", "PersistentRandomAccessQueue", ".", "_meta_file_name", "(", "ancestor", ")", "\n", "with", "self", ".", "fs", ".", "open", "(", "ancestor_metafile", ",", "\"rb\"", ")", "as", "fp", ":", "\n", "            ", "meta", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "assert", "isinstance", "(", "meta", ",", "dict", ")", "\n", "", "if", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Loading buffer data from %s\"", ",", "ancestor", ")", "\n", "\n", "", "datadirs", "=", "[", "]", "\n", "saved_comm_size", "=", "meta", "[", "\"comm_size\"", "]", "\n", "n_data_dirs", "=", "(", "saved_comm_size", "+", "self", ".", "comm_size", "-", "1", ")", "//", "self", ".", "comm_size", "\n", "data_dir_i", "=", "self", ".", "comm_rank", "\n", "for", "_", "in", "range", "(", "n_data_dirs", ")", ":", "\n", "            ", "data_dir_i", "=", "data_dir_i", "%", "saved_comm_size", "\n", "datadirs", ".", "append", "(", "os", ".", "path", ".", "join", "(", "ancestor", ",", "\"rank{}\"", ".", "format", "(", "data_dir_i", ")", ")", ")", "\n", "data_dir_i", "+=", "self", ".", "comm_size", "\n", "\n", "", "length", "=", "0", "\n", "for", "datadir", "in", "datadirs", ":", "\n", "            ", "reader", "=", "_ChunkReader", "(", "datadir", ",", "self", ".", "fs", ")", "\n", "gen", "=", "0", "\n", "while", "True", ":", "\n", "                ", "filename", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "_INDEX_FILENAME_FORMAT", ".", "format", "(", "gen", ")", ")", "\n", "if", "not", "self", ".", "fs", ".", "exists", "(", "filename", ")", ":", "\n", "                    ", "break", "\n", "", "if", "self", ".", "logger", ":", "\n", "                    ", "self", ".", "logger", ".", "debug", "(", "\"read_chunk_index from %s, gen=%d\"", ",", "datadir", ",", "gen", ")", "\n", "", "length", "+=", "len", "(", "list", "(", "reader", ".", "read_chunk_index", "(", "gen", ")", ")", ")", "\n", "gen", "+=", "1", "\n", "\n", "", "", "if", "length", "<", "num_data_needed", "and", "meta", "[", "\"ancestor\"", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "_load_ancestor", "(", "meta", "[", "\"ancestor\"", "]", ",", "num_data_needed", "-", "length", ")", "\n", "\n", "", "for", "datadir", "in", "datadirs", ":", "\n", "            ", "reader", "=", "_ChunkReader", "(", "datadir", ",", "self", ".", "fs", ")", "\n", "rank_data", "=", "[", "]", "\n", "maxlen", "=", "num_data_needed", "-", "len", "(", "self", ".", "buffer", ")", "\n", "if", "maxlen", "<=", "0", ":", "\n", "                ", "break", "\n", "", "_", "=", "reader", ".", "read_chunks", "(", "maxlen", ",", "rank_data", ")", "\n", "if", "self", ".", "logger", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\n", "\"%d data loaded to buffer (rank=%d)\"", ",", "len", "(", "rank_data", ")", ",", "self", ".", "comm_rank", "\n", ")", "\n", "", "self", ".", "buffer", ".", "extend", "(", "rank_data", ")", "\n", "", "return", "meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.randomize_action.RandomizeAction.__init__": [[23, 31], ["gym.ActionWrapper.__init__", "isinstance", "numpy.random.RandomState"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "random_fraction", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "assert", "0", "<=", "random_fraction", "<=", "1", "\n", "assert", "isinstance", "(", "\n", "env", ".", "action_space", ",", "gym", ".", "spaces", ".", "Discrete", "\n", ")", ",", "\"RandomizeAction supports only gym.spaces.Discrete as an action space\"", "\n", "self", ".", "_random_fraction", "=", "random_fraction", "\n", "self", ".", "_np_random", "=", "np", ".", "random", ".", "RandomState", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.randomize_action.RandomizeAction.action": [[32, 37], ["randomize_action.RandomizeAction._np_random.rand", "randomize_action.RandomizeAction._np_random.randint"], "methods", ["None"], ["", "def", "action", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "self", ".", "_np_random", ".", "rand", "(", ")", "<", "self", ".", "_random_fraction", ":", "\n", "            ", "return", "self", ".", "_np_random", ".", "randint", "(", "self", ".", "env", ".", "action_space", ".", "n", ")", "\n", "", "else", ":", "\n", "            ", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.randomize_action.RandomizeAction.seed": [[38, 41], ["super().seed", "randomize_action.RandomizeAction._np_random.seed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.seed", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.seed"], ["", "", "def", "seed", "(", "self", ",", "seed", ")", ":", "\n", "        ", "super", "(", ")", ".", "seed", "(", "seed", ")", "\n", "self", ".", "_np_random", ".", "seed", "(", "seed", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.render.Render.__init__": [[12, 15], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "_kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.render.Render.reset": [[16, 20], ["render.Render.env.reset", "render.Render.env.render"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "ret", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "self", ".", "env", ".", "render", "(", "**", "self", ".", "_kwargs", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.render.Render.step": [[21, 25], ["render.Render.env.step", "render.Render.env.render"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "ret", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "env", ".", "render", "(", "**", "self", ".", "_kwargs", ")", "\n", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.scale_reward.ScaleReward.__init__": [[16, 20], ["gym.RewardWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "scale", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "original_reward", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.scale_reward.ScaleReward.reward": [[21, 24], ["None"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "reward", ")", ":", "\n", "        ", "self", ".", "original_reward", "=", "reward", "\n", "return", "self", ".", "scale", "*", "reward", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.NoopResetEnv.__init__": [[23, 33], ["gym.Wrapper.__init__", "env.unwrapped.get_action_meanings"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "noop_max", "=", "30", ")", ":", "\n", "        ", "\"\"\"Sample initial states by taking random number of no-ops on reset.\n\n        No-op is assumed to be action 0.\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "noop_max", "=", "noop_max", "\n", "self", ".", "override_num_noops", "=", "None", "\n", "self", ".", "noop_action", "=", "0", "\n", "assert", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", "[", "0", "]", "==", "\"NOOP\"", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.NoopResetEnv.reset": [[34, 50], ["atari_wrappers.NoopResetEnv.env.reset", "range", "atari_wrappers.NoopResetEnv.unwrapped.np_random.randint", "atari_wrappers.NoopResetEnv.env.step", "info.get", "atari_wrappers.NoopResetEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Do no-op action for a number of steps in [1, noop_max].\"\"\"", "\n", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "if", "self", ".", "override_num_noops", "is", "not", "None", ":", "\n", "            ", "noops", "=", "self", ".", "override_num_noops", "\n", "", "else", ":", "\n", "            ", "noops", "=", "self", ".", "unwrapped", ".", "np_random", ".", "randint", "(", "\n", "1", ",", "self", ".", "noop_max", "+", "1", "\n", ")", "# pylint: disable=E1101", "\n", "", "assert", "noops", ">", "0", "\n", "obs", "=", "None", "\n", "for", "_", "in", "range", "(", "noops", ")", ":", "\n", "            ", "obs", ",", "_", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "self", ".", "noop_action", ")", "\n", "if", "done", "or", "info", ".", "get", "(", "\"needs_reset\"", ",", "False", ")", ":", "\n", "                ", "obs", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.NoopResetEnv.step": [[51, 53], ["atari_wrappers.NoopResetEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step"], ["", "def", "step", "(", "self", ",", "ac", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "ac", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.FireResetEnv.__init__": [[56, 61], ["gym.Wrapper.__init__", "len", "env.unwrapped.get_action_meanings", "env.unwrapped.get_action_meanings"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Take action on reset for envs that are fixed until firing.\"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "assert", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", "[", "1", "]", "==", "\"FIRE\"", "\n", "assert", "len", "(", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", ")", ">=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.FireResetEnv.reset": [[62, 71], ["atari_wrappers.FireResetEnv.env.reset", "atari_wrappers.FireResetEnv.env.step", "atari_wrappers.FireResetEnv.env.step", "info.get", "atari_wrappers.FireResetEnv.env.reset", "info.get", "atari_wrappers.FireResetEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "obs", ",", "_", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "1", ")", "\n", "if", "done", "or", "info", ".", "get", "(", "\"needs_reset\"", ",", "False", ")", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "obs", ",", "_", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "2", ")", "\n", "if", "done", "or", "info", ".", "get", "(", "\"needs_reset\"", ",", "False", ")", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.FireResetEnv.step": [[72, 74], ["atari_wrappers.FireResetEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step"], ["", "def", "step", "(", "self", ",", "ac", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "ac", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.EpisodicLifeEnv.__init__": [[77, 85], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Make end-of-life == end-of-episode, but only reset on true game end.\n\n        Done by DeepMind for the DQN and co. since it helps value estimation.\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "lives", "=", "0", "\n", "self", ".", "needs_real_reset", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.EpisodicLifeEnv.step": [[86, 100], ["atari_wrappers.EpisodicLifeEnv.env.step", "atari_wrappers.EpisodicLifeEnv.env.unwrapped.ale.lives", "info.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "needs_real_reset", "=", "done", "or", "info", ".", "get", "(", "\"needs_reset\"", ",", "False", ")", "\n", "# check current lives, make loss of life terminal,", "\n", "# then update lives to handle bonus lives", "\n", "lives", "=", "self", ".", "env", ".", "unwrapped", ".", "ale", ".", "lives", "(", ")", "\n", "if", "lives", "<", "self", ".", "lives", "and", "lives", ">", "0", ":", "\n", "# for Qbert sometimes we stay in lives == 0 condtion for a few", "\n", "# frames", "\n", "# so its important to keep lives > 0, so that we only reset once", "\n", "# the environment advertises done.", "\n", "            ", "done", "=", "True", "\n", "", "self", ".", "lives", "=", "lives", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.EpisodicLifeEnv.reset": [[101, 114], ["atari_wrappers.EpisodicLifeEnv.env.unwrapped.ale.lives", "atari_wrappers.EpisodicLifeEnv.env.reset", "atari_wrappers.EpisodicLifeEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Reset only when lives are exhausted.\n\n        This way all states are still reachable even though lives are episodic,\n        and the learner need not know about any of this behind-the-scenes.\n        \"\"\"", "\n", "if", "self", ".", "needs_real_reset", ":", "\n", "            ", "obs", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "# no-op step to advance from terminal/lost life state", "\n", "            ", "obs", ",", "_", ",", "_", ",", "_", "=", "self", ".", "env", ".", "step", "(", "0", ")", "\n", "", "self", ".", "lives", "=", "self", ".", "env", ".", "unwrapped", ".", "ale", ".", "lives", "(", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.MaxAndSkipEnv.__init__": [[117, 123], ["gym.Wrapper.__init__", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "skip", "=", "4", ")", ":", "\n", "        ", "\"\"\"Return only every `skip`-th frame\"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "# most recent raw observations (for max pooling across time steps)", "\n", "self", ".", "_obs_buffer", "=", "np", ".", "zeros", "(", "(", "2", ",", ")", "+", "env", ".", "observation_space", ".", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "self", ".", "_skip", "=", "skip", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.MaxAndSkipEnv.step": [[124, 142], ["range", "atari_wrappers.MaxAndSkipEnv._obs_buffer.max", "atari_wrappers.MaxAndSkipEnv.env.step", "info.get"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.core.params.InFlows.get"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Repeat action, sum reward, and max over last observations.\"\"\"", "\n", "total_reward", "=", "0.0", "\n", "done", "=", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "_skip", ")", ":", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "if", "i", "==", "self", ".", "_skip", "-", "2", ":", "\n", "                ", "self", ".", "_obs_buffer", "[", "0", "]", "=", "obs", "\n", "", "if", "i", "==", "self", ".", "_skip", "-", "1", ":", "\n", "                ", "self", ".", "_obs_buffer", "[", "1", "]", "=", "obs", "\n", "", "total_reward", "+=", "reward", "\n", "if", "done", "or", "info", ".", "get", "(", "\"needs_reset\"", ",", "False", ")", ":", "\n", "                ", "break", "\n", "# Note that the observation on the done=True frame", "\n", "# doesn't matter", "\n", "", "", "max_frame", "=", "self", ".", "_obs_buffer", ".", "max", "(", "axis", "=", "0", ")", "\n", "\n", "return", "max_frame", ",", "total_reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.MaxAndSkipEnv.reset": [[143, 145], ["atari_wrappers.MaxAndSkipEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.ClipRewardEnv.__init__": [[148, 150], ["gym.RewardWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "gym", ".", "RewardWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.ClipRewardEnv.reward": [[151, 154], ["numpy.sign"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "reward", ")", ":", "\n", "        ", "\"\"\"Bin reward to {+1, 0, -1} by its sign.\"\"\"", "\n", "return", "np", ".", "sign", "(", "reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.WarpFrame.__init__": [[157, 176], ["gym.ObservationWrapper.__init__", "gym.spaces.Box", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "channel_order", "=", "\"hwc\"", ")", ":", "\n", "        ", "\"\"\"Warp frames to 84x84 as done in the Nature paper and later work.\n\n        To use this wrapper, OpenCV-Python is required.\n        \"\"\"", "\n", "if", "not", "_is_cv2_available", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Cannot import cv2 module. Please install OpenCV-Python to use\"", "\n", "\" WarpFrame.\"", "\n", ")", "\n", "", "gym", ".", "ObservationWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "width", "=", "84", "\n", "self", ".", "height", "=", "84", "\n", "shape", "=", "{", "\n", "\"hwc\"", ":", "(", "self", ".", "height", ",", "self", ".", "width", ",", "1", ")", ",", "\n", "\"chw\"", ":", "(", "1", ",", "self", ".", "height", ",", "self", ".", "width", ")", ",", "\n", "}", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "shape", "[", "channel_order", "]", ",", "dtype", "=", "np", ".", "uint8", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.WarpFrame.observation": [[178, 184], ["cv2.cvtColor", "cv2.resize", "cv2.resize.reshape"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "frame", ")", ":", "\n", "        ", "frame", "=", "cv2", ".", "cvtColor", "(", "frame", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "frame", "=", "cv2", ".", "resize", "(", "\n", "frame", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", "\n", ")", "\n", "return", "frame", ".", "reshape", "(", "self", ".", "observation_space", ".", "low", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.FrameStack.__init__": [[187, 205], ["gym.Wrapper.__init__", "collections.deque", "numpy.repeat", "numpy.repeat", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "k", ",", "channel_order", "=", "\"hwc\"", ")", ":", "\n", "        ", "\"\"\"Stack k last frames.\n\n        Returns lazy array, which is much more memory efficient.\n\n        See Also\n        --------\n        baselines.common.atari_wrappers.LazyFrames\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "frames", "=", "deque", "(", "[", "]", ",", "maxlen", "=", "k", ")", "\n", "self", ".", "stack_axis", "=", "{", "\"hwc\"", ":", "2", ",", "\"chw\"", ":", "0", "}", "[", "channel_order", "]", "\n", "orig_obs_space", "=", "env", ".", "observation_space", "\n", "low", "=", "np", ".", "repeat", "(", "orig_obs_space", ".", "low", ",", "k", ",", "axis", "=", "self", ".", "stack_axis", ")", "\n", "high", "=", "np", ".", "repeat", "(", "orig_obs_space", ".", "high", ",", "k", ",", "axis", "=", "self", ".", "stack_axis", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "low", ",", "high", "=", "high", ",", "dtype", "=", "orig_obs_space", ".", "dtype", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.FrameStack.reset": [[207, 212], ["atari_wrappers.FrameStack.env.reset", "range", "atari_wrappers.FrameStack._get_ob", "atari_wrappers.FrameStack.frames.append"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack._get_ob", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "ob", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "            ", "self", ".", "frames", ".", "append", "(", "ob", ")", "\n", "", "return", "self", ".", "_get_ob", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.FrameStack.step": [[213, 217], ["atari_wrappers.FrameStack.env.step", "atari_wrappers.FrameStack.frames.append", "atari_wrappers.FrameStack._get_ob"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack._get_ob"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "ob", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "frames", ".", "append", "(", "ob", ")", "\n", "return", "self", ".", "_get_ob", "(", ")", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.FrameStack._get_ob": [[218, 221], ["atari_wrappers.LazyFrames", "len", "list"], "methods", ["None"], ["", "def", "_get_ob", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "frames", ")", "==", "self", ".", "k", "\n", "return", "LazyFrames", "(", "list", "(", "self", ".", "frames", ")", ",", "stack_axis", "=", "self", ".", "stack_axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.ScaledFloatFrame.__init__": [[230, 241], ["isinstance", "gym.ObservationWrapper.__init__", "gym.spaces.Box", "atari_wrappers.ScaledFloatFrame.observation", "atari_wrappers.ScaledFloatFrame.observation"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.cast_observation.CastObservation.observation", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.cast_observation.CastObservation.observation"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "assert", "isinstance", "(", "env", ".", "observation_space", ",", "spaces", ".", "Box", ")", "\n", "gym", ".", "ObservationWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n", "self", ".", "scale", "=", "255.0", "\n", "\n", "orig_obs_space", "=", "env", ".", "observation_space", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "self", ".", "observation", "(", "orig_obs_space", ".", "low", ")", ",", "\n", "high", "=", "self", ".", "observation", "(", "orig_obs_space", ".", "high", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.ScaledFloatFrame.observation": [[243, 247], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "# careful! This undoes the memory optimization, use", "\n", "# with smaller replay buffers only.", "\n", "        ", "return", "np", ".", "array", "(", "observation", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.LazyFrames.__init__": [[262, 265], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "frames", ",", "stack_axis", "=", "2", ")", ":", "\n", "        ", "self", ".", "stack_axis", "=", "stack_axis", "\n", "self", ".", "_frames", "=", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.LazyFrames.__array__": [[266, 271], ["numpy.concatenate", "out.astype.astype.astype"], "methods", ["None"], ["", "def", "__array__", "(", "self", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "out", "=", "np", ".", "concatenate", "(", "self", ".", "_frames", ",", "axis", "=", "self", ".", "stack_axis", ")", "\n", "if", "dtype", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", ".", "astype", "(", "dtype", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.FlickerFrame.__init__": [[276, 278], ["gym.ObservationWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "gym", ".", "ObservationWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.FlickerFrame.observation": [[279, 284], ["atari_wrappers.FlickerFrame.unwrapped.np_random.rand", "numpy.zeros_like"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "if", "self", ".", "unwrapped", ".", "np_random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "            ", "return", "np", ".", "zeros_like", "(", "observation", ")", "\n", "", "else", ":", "\n", "            ", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.make_atari": [[286, 297], ["gym.make", "isinstance", "atari_wrappers.NoopResetEnv", "atari_wrappers.MaxAndSkipEnv", "pfrl.wrappers.ContinuingTimeLimit"], "function", ["None"], ["", "", "", "def", "make_atari", "(", "env_id", ",", "max_frames", "=", "30", "*", "60", "*", "60", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "assert", "\"NoFrameskip\"", "in", "env", ".", "spec", ".", "id", "\n", "assert", "isinstance", "(", "env", ",", "gym", ".", "wrappers", ".", "TimeLimit", ")", "\n", "# Unwrap TimeLimit wrapper because we use our own time limits", "\n", "env", "=", "env", ".", "env", "\n", "if", "max_frames", ":", "\n", "        ", "env", "=", "pfrl", ".", "wrappers", ".", "ContinuingTimeLimit", "(", "env", ",", "max_episode_steps", "=", "max_frames", ")", "\n", "", "env", "=", "NoopResetEnv", "(", "env", ",", "noop_max", "=", "30", ")", "\n", "env", "=", "MaxAndSkipEnv", "(", "env", ",", "skip", "=", "4", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.atari_wrappers.wrap_deepmind": [[299, 324], ["atari_wrappers.WarpFrame", "atari_wrappers.EpisodicLifeEnv", "atari_wrappers.FireResetEnv", "atari_wrappers.ScaledFloatFrame", "atari_wrappers.ClipRewardEnv", "atari_wrappers.FlickerFrame", "atari_wrappers.FrameStack", "FrameStack.unwrapped.get_action_meanings"], "function", ["None"], ["", "def", "wrap_deepmind", "(", "\n", "env", ",", "\n", "episode_life", "=", "True", ",", "\n", "clip_rewards", "=", "True", ",", "\n", "frame_stack", "=", "True", ",", "\n", "scale", "=", "False", ",", "\n", "fire_reset", "=", "False", ",", "\n", "channel_order", "=", "\"chw\"", ",", "\n", "flicker", "=", "False", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Configure environment for DeepMind-style Atari.\"\"\"", "\n", "if", "episode_life", ":", "\n", "        ", "env", "=", "EpisodicLifeEnv", "(", "env", ")", "\n", "", "if", "fire_reset", "and", "\"FIRE\"", "in", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", ":", "\n", "        ", "env", "=", "FireResetEnv", "(", "env", ")", "\n", "", "env", "=", "WarpFrame", "(", "env", ",", "channel_order", "=", "channel_order", ")", "\n", "if", "scale", ":", "\n", "        ", "env", "=", "ScaledFloatFrame", "(", "env", ")", "\n", "", "if", "clip_rewards", ":", "\n", "        ", "env", "=", "ClipRewardEnv", "(", "env", ")", "\n", "", "if", "flicker", ":", "\n", "        ", "env", "=", "FlickerFrame", "(", "env", ")", "\n", "", "if", "frame_stack", ":", "\n", "        ", "env", "=", "FrameStack", "(", "env", ",", "4", ",", "channel_order", "=", "channel_order", ")", "\n", "", "return", "env", "\n", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.continuing_time_limit.ContinuingTimeLimit.__init__": [[21, 26], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "max_episode_steps", ")", ":", "\n", "        ", "super", "(", "ContinuingTimeLimit", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "_max_episode_steps", "=", "max_episode_steps", "\n", "\n", "self", ".", "_elapsed_steps", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.continuing_time_limit.ContinuingTimeLimit.step": [[27, 38], ["continuing_time_limit.ContinuingTimeLimit.env.step"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "(", "\n", "self", ".", "_elapsed_steps", "is", "not", "None", "\n", ")", ",", "\"Cannot call env.step() before calling reset()\"", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "_elapsed_steps", "+=", "1", "\n", "\n", "if", "self", ".", "_max_episode_steps", "<=", "self", ".", "_elapsed_steps", ":", "\n", "            ", "info", "[", "\"needs_reset\"", "]", "=", "True", "\n", "\n", "", "return", "observation", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.continuing_time_limit.ContinuingTimeLimit.reset": [[39, 42], ["continuing_time_limit.ContinuingTimeLimit.env.reset"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_elapsed_steps", "=", "0", "\n", "return", "self", ".", "env", ".", "reset", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.normalize_action_space.NormalizeActionSpace.__init__": [[9, 15], ["gym.ActionWrapper.__init__", "gym.ActionWrapper.__init__", "isinstance", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "numpy.ones_like", "numpy.ones_like"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "assert", "isinstance", "(", "env", ".", "action_space", ",", "gym", ".", "spaces", ".", "Box", ")", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "-", "np", ".", "ones_like", "(", "env", ".", "action_space", ".", "low", ")", ",", "\n", "high", "=", "np", ".", "ones_like", "(", "env", ".", "action_space", ".", "low", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.normalize_action_space.NormalizeActionSpace.action": [[17, 29], ["action.copy.copy.copy"], "methods", ["None"], ["", "def", "action", "(", "self", ",", "action", ")", ":", "\n", "# action is in [-1, 1]", "\n", "        ", "action", "=", "action", ".", "copy", "(", ")", "\n", "\n", "# -> [0, 2]", "\n", "action", "+=", "1", "\n", "\n", "# -> [0, orig_high - orig_low]", "\n", "action", "*=", "(", "self", ".", "env", ".", "action_space", ".", "high", "-", "self", ".", "env", ".", "action_space", ".", "low", ")", "/", "2", "\n", "\n", "# -> [orig_low, orig_high]", "\n", "return", "action", "+", "self", ".", "env", ".", "action_space", ".", "low", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.monitor.Monitor._start": [[19, 53], ["super()._start", "monitor._StatsRecorder", "NotImplementedError", "monitor.Monitor._set_mode"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.monitor.Monitor._start"], ["def", "_start", "(", "\n", "self", ",", "\n", "directory", ",", "\n", "video_callable", "=", "None", ",", "\n", "force", "=", "False", ",", "\n", "resume", "=", "False", ",", "\n", "write_upon_reset", "=", "False", ",", "\n", "uid", "=", "None", ",", "\n", "mode", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "self", ".", "env_semantics_autoreset", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Detect 'semantics.autoreset=True' in `env.metadata`, \"", "\n", "\"which means the env is from deprecated OpenAI Universe.\"", "\n", ")", "\n", "", "ret", "=", "super", "(", ")", ".", "_start", "(", "\n", "directory", "=", "directory", ",", "\n", "video_callable", "=", "video_callable", ",", "\n", "force", "=", "force", ",", "\n", "resume", "=", "resume", ",", "\n", "write_upon_reset", "=", "write_upon_reset", ",", "\n", "uid", "=", "uid", ",", "\n", "mode", "=", "mode", ",", "\n", ")", "\n", "env_id", "=", "self", ".", "stats_recorder", ".", "env_id", "\n", "self", ".", "stats_recorder", "=", "_StatsRecorder", "(", "\n", "directory", ",", "\n", "\"{}.episode_batch.{}\"", ".", "format", "(", "self", ".", "file_prefix", ",", "self", ".", "file_infix", ")", ",", "\n", "autoreset", "=", "False", ",", "\n", "env_id", "=", "env_id", ",", "\n", ")", "\n", "if", "mode", "is", "not", "None", ":", "\n", "            ", "self", ".", "_set_mode", "(", "mode", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.monitor._StatsRecorder.__init__": [[62, 73], ["logging.getLogger", "gym.wrappers.monitoring.stats_recorder.StatsRecorder.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "directory", ",", "\n", "file_prefix", ",", "\n", "autoreset", "=", "False", ",", "\n", "env_id", "=", "None", ",", "\n", "logger", "=", "getLogger", "(", "__name__", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "directory", ",", "file_prefix", ",", "autoreset", "=", "autoreset", ",", "env_id", "=", "env_id", ")", "\n", "self", ".", "_save_completed", "=", "True", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.monitor._StatsRecorder.before_reset": [[74, 87], ["monitor._StatsRecorder.logger.debug", "monitor._StatsRecorder.save_complete", "time.time"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.monitor._StatsRecorder.save_complete"], ["", "def", "before_reset", "(", "self", ")", ":", "\n", "        ", "assert", "not", "self", ".", "closed", "\n", "\n", "if", "self", ".", "done", "is", "not", "None", "and", "not", "self", ".", "done", "and", "self", ".", "steps", ">", "0", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "\n", "\"Tried to reset the env which is not done=True. \"", "\n", "\"StatsRecorder completes the last episode.\"", "\n", ")", "\n", "self", ".", "save_complete", "(", ")", "\n", "\n", "", "self", ".", "done", "=", "False", "\n", "if", "self", ".", "initial_reset_timestamp", "is", "None", ":", "\n", "            ", "self", ".", "initial_reset_timestamp", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.monitor._StatsRecorder.after_step": [[88, 91], ["super().after_step"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.monitor._StatsRecorder.after_step"], ["", "", "def", "after_step", "(", "self", ",", "observation", ",", "reward", ",", "done", ",", "info", ")", ":", "\n", "        ", "self", ".", "_save_completed", "=", "False", "\n", "return", "super", "(", ")", ".", "after_step", "(", "observation", ",", "reward", ",", "done", ",", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.monitor._StatsRecorder.save_complete": [[92, 96], ["super().save_complete"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.monitor._StatsRecorder.save_complete"], ["", "def", "save_complete", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_save_completed", ":", "\n", "            ", "super", "(", ")", ".", "save_complete", "(", ")", "\n", "self", ".", "_save_completed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.monitor._StatsRecorder.close": [[97, 100], ["monitor._StatsRecorder.save_complete", "super().close"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.monitor._StatsRecorder.save_complete", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "save_complete", "(", ")", "\n", "super", "(", ")", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.__init__": [[13, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "self", ".", "env", "=", "env", "\n", "self", ".", "action_space", "=", "self", ".", "env", ".", "action_space", "\n", "self", ".", "observation_space", "=", "self", ".", "env", ".", "observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.__getattr__": [[18, 24], ["name.startswith", "getattr", "AttributeError"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "\"_\"", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"attempted to get missing private attribute '{}'\"", ".", "format", "(", "name", ")", "\n", ")", "\n", "", "return", "getattr", "(", "self", ".", "env", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.step": [[25, 27], ["vector_frame_stack.VectorEnvWrapper.env.step"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.reset": [[28, 30], ["vector_frame_stack.VectorEnvWrapper.env.reset"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render": [[31, 33], ["vector_frame_stack.VectorEnvWrapper.env.render"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.render"], ["", "def", "render", "(", "self", ",", "mode", "=", "\"human\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "render", "(", "mode", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close": [[34, 36], ["vector_frame_stack.VectorEnvWrapper.env.close"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.seed": [[37, 39], ["vector_frame_stack.VectorEnvWrapper.env.seed"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.seed"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.compute_reward": [[40, 42], ["vector_frame_stack.VectorEnvWrapper.env.compute_reward"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.compute_reward"], ["", "def", "compute_reward", "(", "self", ",", "achieved_goal", ",", "desired_goal", ",", "info", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "compute_reward", "(", "achieved_goal", ",", "desired_goal", ",", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.__str__": [[43, 45], ["type"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"<{}{}>\"", ".", "format", "(", "type", "(", "self", ")", ".", "__name__", ",", "self", ".", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.__repr__": [[46, 48], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorEnvWrapper.unwrapped": [[49, 52], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "unwrapped", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "unwrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.__init__": [[69, 81], ["vector_frame_stack.VectorEnvWrapper.__init__", "isinstance", "numpy.repeat", "numpy.repeat", "gym.spaces.Box", "collections.deque", "range"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "k", ",", "stack_axis", "=", "0", ")", ":", "\n", "        ", "\"\"\"Stack k last frames.\"\"\"", "\n", "VectorEnvWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "stack_axis", "=", "stack_axis", "\n", "self", ".", "frames", "=", "[", "deque", "(", "[", "]", ",", "maxlen", "=", "k", ")", "for", "_", "in", "range", "(", "env", ".", "num_envs", ")", "]", "\n", "orig_obs_space", "=", "env", ".", "observation_space", "\n", "assert", "isinstance", "(", "orig_obs_space", ",", "spaces", ".", "Box", ")", "\n", "low", "=", "np", ".", "repeat", "(", "orig_obs_space", ".", "low", ",", "k", ",", "axis", "=", "self", ".", "stack_axis", ")", "\n", "high", "=", "np", ".", "repeat", "(", "orig_obs_space", ".", "high", ",", "k", ",", "axis", "=", "self", ".", "stack_axis", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "low", ",", "high", "=", "high", ",", "dtype", "=", "orig_obs_space", ".", "dtype", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset": [[83, 92], ["vector_frame_stack.VectorFrameStack.env.reset", "zip", "vector_frame_stack.VectorFrameStack._get_ob", "numpy.zeros", "range", "frames.append"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.reset", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack._get_ob", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append"], ["", "def", "reset", "(", "self", ",", "mask", "=", "None", ")", ":", "\n", "        ", "batch_ob", "=", "self", ".", "env", ".", "reset", "(", "mask", "=", "mask", ")", "\n", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "np", ".", "zeros", "(", "self", ".", "env", ".", "num_envs", ")", "\n", "", "for", "m", ",", "frames", ",", "ob", "in", "zip", "(", "mask", ",", "self", ".", "frames", ",", "batch_ob", ")", ":", "\n", "            ", "if", "not", "m", ":", "\n", "                ", "for", "_", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "                    ", "frames", ".", "append", "(", "ob", ")", "\n", "", "", "", "return", "self", ".", "_get_ob", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step": [[93, 98], ["vector_frame_stack.VectorFrameStack.env.step", "zip", "frames.append", "vector_frame_stack.VectorFrameStack._get_ob"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack.step", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack._get_ob"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "batch_ob", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "for", "frames", ",", "ob", "in", "zip", "(", "self", ".", "frames", ",", "batch_ob", ")", ":", "\n", "            ", "frames", ".", "append", "(", "ob", ")", "\n", "", "return", "self", ".", "_get_ob", "(", ")", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.vector_frame_stack.VectorFrameStack._get_ob": [[99, 105], ["len", "len", "pfrl.wrappers.atari_wrappers.LazyFrames", "list"], "methods", ["None"], ["", "def", "_get_ob", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "frames", ")", "==", "self", ".", "env", ".", "num_envs", "\n", "assert", "len", "(", "self", ".", "frames", "[", "0", "]", ")", "==", "self", ".", "k", "\n", "return", "[", "\n", "LazyFrames", "(", "list", "(", "frames", ")", ",", "stack_axis", "=", "self", ".", "stack_axis", ")", "\n", "for", "frames", "in", "self", ".", "frames", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.cast_observation.CastObservation.__init__": [[16, 19], ["gym.ObservationWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "dtype", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "dtype", "=", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.cast_observation.CastObservation.observation": [[20, 23], ["observation.astype"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "self", ".", "original_observation", "=", "observation", "\n", "return", "observation", ".", "astype", "(", "self", ".", "dtype", ",", "copy", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.wrappers.cast_observation.CastObservationToFloat32.__init__": [[35, 37], ["cast_observation.CastObservation.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ",", "np", ".", "float32", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.additive_gaussian.AdditiveGaussian.__init__": [[21, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale", ",", "low", "=", "None", ",", "high", "=", "None", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "self", ".", "low", "=", "low", "\n", "self", ".", "high", "=", "high", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.additive_gaussian.AdditiveGaussian.select_action": [[26, 33], ["greedy_action_func", "numpy.random.normal().astype", "numpy.clip", "numpy.random.normal"], "methods", ["None"], ["", "def", "select_action", "(", "self", ",", "t", ",", "greedy_action_func", ",", "action_value", "=", "None", ")", ":", "\n", "        ", "a", "=", "greedy_action_func", "(", ")", "\n", "noise", "=", "np", ".", "random", ".", "normal", "(", "scale", "=", "self", ".", "scale", ",", "size", "=", "a", ".", "shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "self", ".", "low", "is", "not", "None", "or", "self", ".", "high", "is", "not", "None", ":", "\n", "            ", "return", "np", ".", "clip", "(", "a", "+", "noise", ",", "self", ".", "low", ",", "self", ".", "high", ")", "\n", "", "else", ":", "\n", "            ", "return", "a", "+", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.additive_gaussian.AdditiveGaussian.__repr__": [[34, 37], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AdditiveGaussian(scale={}, low={}, high={})\"", ".", "format", "(", "\n", "self", ".", "scale", ",", "self", ".", "low", ",", "self", ".", "high", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.epsilon_greedy.ConstantEpsilonGreedy.__init__": [[24, 29], ["logging.getLogger"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "epsilon", ",", "random_action_func", ",", "logger", "=", "getLogger", "(", "__name__", ")", ")", ":", "\n", "        ", "assert", "epsilon", ">=", "0", "and", "epsilon", "<=", "1", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "random_action_func", "=", "random_action_func", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.epsilon_greedy.ConstantEpsilonGreedy.select_action": [[30, 37], ["epsilon_greedy.select_action_epsilon_greedily", "epsilon_greedy.ConstantEpsilonGreedy.logger.debug"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.epsilon_greedy.select_action_epsilon_greedily"], ["", "def", "select_action", "(", "self", ",", "t", ",", "greedy_action_func", ",", "action_value", "=", "None", ")", ":", "\n", "        ", "a", ",", "greedy", "=", "select_action_epsilon_greedily", "(", "\n", "self", ".", "epsilon", ",", "self", ".", "random_action_func", ",", "greedy_action_func", "\n", ")", "\n", "greedy_str", "=", "\"greedy\"", "if", "greedy", "else", "\"non-greedy\"", "\n", "self", ".", "logger", ".", "debug", "(", "\"t:%s a:%s %s\"", ",", "t", ",", "a", ",", "greedy_str", ")", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.epsilon_greedy.ConstantEpsilonGreedy.__repr__": [[38, 40], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"ConstantEpsilonGreedy(epsilon={})\"", ".", "format", "(", "self", ".", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.epsilon_greedy.LinearDecayEpsilonGreedy.__init__": [[53, 70], ["logging.getLogger"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "start_epsilon", ",", "\n", "end_epsilon", ",", "\n", "decay_steps", ",", "\n", "random_action_func", ",", "\n", "logger", "=", "getLogger", "(", "__name__", ")", ",", "\n", ")", ":", "\n", "        ", "assert", "start_epsilon", ">=", "0", "and", "start_epsilon", "<=", "1", "\n", "assert", "end_epsilon", ">=", "0", "and", "end_epsilon", "<=", "1", "\n", "assert", "decay_steps", ">=", "0", "\n", "self", ".", "start_epsilon", "=", "start_epsilon", "\n", "self", ".", "end_epsilon", "=", "end_epsilon", "\n", "self", ".", "decay_steps", "=", "decay_steps", "\n", "self", ".", "random_action_func", "=", "random_action_func", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "epsilon", "=", "start_epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.epsilon_greedy.LinearDecayEpsilonGreedy.compute_epsilon": [[71, 77], ["None"], "methods", ["None"], ["", "def", "compute_epsilon", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "t", ">", "self", ".", "decay_steps", ":", "\n", "            ", "return", "self", ".", "end_epsilon", "\n", "", "else", ":", "\n", "            ", "epsilon_diff", "=", "self", ".", "end_epsilon", "-", "self", ".", "start_epsilon", "\n", "return", "self", ".", "start_epsilon", "+", "epsilon_diff", "*", "(", "t", "/", "self", ".", "decay_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.epsilon_greedy.LinearDecayEpsilonGreedy.select_action": [[78, 86], ["epsilon_greedy.LinearDecayEpsilonGreedy.compute_epsilon", "epsilon_greedy.select_action_epsilon_greedily", "epsilon_greedy.LinearDecayEpsilonGreedy.logger.debug"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.epsilon_greedy.ExponentialDecayEpsilonGreedy.compute_epsilon", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.epsilon_greedy.select_action_epsilon_greedily"], ["", "", "def", "select_action", "(", "self", ",", "t", ",", "greedy_action_func", ",", "action_value", "=", "None", ")", ":", "\n", "        ", "self", ".", "epsilon", "=", "self", ".", "compute_epsilon", "(", "t", ")", "\n", "a", ",", "greedy", "=", "select_action_epsilon_greedily", "(", "\n", "self", ".", "epsilon", ",", "self", ".", "random_action_func", ",", "greedy_action_func", "\n", ")", "\n", "greedy_str", "=", "\"greedy\"", "if", "greedy", "else", "\"non-greedy\"", "\n", "self", ".", "logger", ".", "debug", "(", "\"t:%s a:%s %s\"", ",", "t", ",", "a", ",", "greedy_str", ")", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.epsilon_greedy.LinearDecayEpsilonGreedy.__repr__": [[87, 89], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"LinearDecayEpsilonGreedy(epsilon={})\"", ".", "format", "(", "self", ".", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.epsilon_greedy.ExponentialDecayEpsilonGreedy.__init__": [[102, 119], ["logging.getLogger"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "start_epsilon", ",", "\n", "end_epsilon", ",", "\n", "decay", ",", "\n", "random_action_func", ",", "\n", "logger", "=", "getLogger", "(", "__name__", ")", ",", "\n", ")", ":", "\n", "        ", "assert", "0", "<=", "start_epsilon", "<=", "1", "\n", "assert", "0", "<=", "end_epsilon", "<=", "1", "\n", "assert", "0", "<", "decay", "<", "1", "\n", "self", ".", "start_epsilon", "=", "start_epsilon", "\n", "self", ".", "end_epsilon", "=", "end_epsilon", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "random_action_func", "=", "random_action_func", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "epsilon", "=", "start_epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.epsilon_greedy.ExponentialDecayEpsilonGreedy.compute_epsilon": [[120, 123], ["max"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.pfrl.action_value.SingleActionValue.max"], ["", "def", "compute_epsilon", "(", "self", ",", "t", ")", ":", "\n", "        ", "epsilon", "=", "self", ".", "start_epsilon", "*", "(", "self", ".", "decay", "**", "t", ")", "\n", "return", "max", "(", "epsilon", ",", "self", ".", "end_epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.epsilon_greedy.ExponentialDecayEpsilonGreedy.select_action": [[124, 132], ["epsilon_greedy.ExponentialDecayEpsilonGreedy.compute_epsilon", "epsilon_greedy.select_action_epsilon_greedily", "epsilon_greedy.ExponentialDecayEpsilonGreedy.logger.debug"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.epsilon_greedy.ExponentialDecayEpsilonGreedy.compute_epsilon", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.epsilon_greedy.select_action_epsilon_greedily"], ["", "def", "select_action", "(", "self", ",", "t", ",", "greedy_action_func", ",", "action_value", "=", "None", ")", ":", "\n", "        ", "self", ".", "epsilon", "=", "self", ".", "compute_epsilon", "(", "t", ")", "\n", "a", ",", "greedy", "=", "select_action_epsilon_greedily", "(", "\n", "self", ".", "epsilon", ",", "self", ".", "random_action_func", ",", "greedy_action_func", "\n", ")", "\n", "greedy_str", "=", "\"greedy\"", "if", "greedy", "else", "\"non-greedy\"", "\n", "self", ".", "logger", ".", "debug", "(", "\"t:%s a:%s %s\"", ",", "t", ",", "a", ",", "greedy_str", ")", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.epsilon_greedy.ExponentialDecayEpsilonGreedy.__repr__": [[133, 135], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"ExponentialDecayEpsilonGreedy(epsilon={})\"", ".", "format", "(", "self", ".", "epsilon", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.epsilon_greedy.select_action_epsilon_greedily": [[8, 13], ["numpy.random.rand", "random_action_func", "greedy_action_func"], "function", ["None"], ["def", "select_action_epsilon_greedily", "(", "epsilon", ",", "random_action_func", ",", "greedy_action_func", ")", ":", "\n", "    ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "epsilon", ":", "\n", "        ", "return", "random_action_func", "(", ")", ",", "False", "\n", "", "else", ":", "\n", "        ", "return", "greedy_action_func", "(", ")", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.greedy.Greedy.select_action": [[7, 9], ["greedy_action_func"], "methods", ["None"], ["def", "select_action", "(", "self", ",", "t", ",", "greedy_action_func", ",", "action_value", "=", "None", ")", ":", "\n", "        ", "return", "greedy_action_func", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.greedy.Greedy.__repr__": [[10, 12], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Greedy()\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.additive_ou.AdditiveOU.__init__": [[20, 34], ["logging.getLogger"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "mu", "=", "0.0", ",", "\n", "theta", "=", "0.15", ",", "\n", "sigma", "=", "0.3", ",", "\n", "start_with_mu", "=", "False", ",", "\n", "logger", "=", "getLogger", "(", "__name__", ")", ",", "\n", ")", ":", "\n", "        ", "self", ".", "mu", "=", "mu", "\n", "self", ".", "theta", "=", "theta", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "start_with_mu", "=", "start_with_mu", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "ou_state", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.additive_ou.AdditiveOU.evolve": [[35, 40], ["numpy.random.normal"], "methods", ["None"], ["", "def", "evolve", "(", "self", ")", ":", "\n", "# dx = theta (mu - x) + sigma dW", "\n", "# for a Wiener process W", "\n", "        ", "noise", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "self", ".", "ou_state", ".", "shape", ",", "loc", "=", "0", ",", "scale", "=", "self", ".", "sigma", ")", "\n", "self", ".", "ou_state", "+=", "self", ".", "theta", "*", "(", "self", ".", "mu", "-", "self", ".", "ou_state", ")", "+", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.additive_ou.AdditiveOU.select_action": [[41, 56], ["greedy_action_func", "additive_ou.AdditiveOU.logger.debug", "additive_ou.AdditiveOU.evolve", "numpy.full", "numpy.random.normal().astype", "numpy.sqrt", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.additive_ou.AdditiveOU.evolve"], ["", "def", "select_action", "(", "self", ",", "t", ",", "greedy_action_func", ",", "action_value", "=", "None", ")", ":", "\n", "        ", "a", "=", "greedy_action_func", "(", ")", "\n", "if", "self", ".", "ou_state", "is", "None", ":", "\n", "            ", "if", "self", ".", "start_with_mu", ":", "\n", "                ", "self", ".", "ou_state", "=", "np", ".", "full", "(", "a", ".", "shape", ",", "self", ".", "mu", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                ", "sigma_stable", "=", "self", ".", "sigma", "/", "np", ".", "sqrt", "(", "2", "*", "self", ".", "theta", "-", "self", ".", "theta", "**", "2", ")", "\n", "self", ".", "ou_state", "=", "np", ".", "random", ".", "normal", "(", "\n", "size", "=", "a", ".", "shape", ",", "loc", "=", "self", ".", "mu", ",", "scale", "=", "sigma_stable", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "evolve", "(", ")", "\n", "", "noise", "=", "self", ".", "ou_state", "\n", "self", ".", "logger", ".", "debug", "(", "\"t:%s noise:%s\"", ",", "t", ",", "noise", ")", "\n", "return", "a", "+", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.additive_ou.AdditiveOU.__repr__": [[57, 60], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AdditiveOU(mu={}, theta={}, sigma={})\"", ".", "format", "(", "\n", "self", ".", "mu", ",", "self", ".", "theta", ",", "self", ".", "sigma", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.boltzmann.Boltzmann.__init__": [[15, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "T", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "T", "=", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.boltzmann.Boltzmann.select_action": [[18, 27], ["isinstance", "numpy.random.choice", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.softmax().cpu().numpy().ravel", "torch.softmax().cpu().numpy().ravel", "numpy.arange", "torch.softmax().cpu().numpy", "torch.softmax().cpu().numpy", "torch.softmax().cpu", "torch.softmax().cpu", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "select_action", "(", "self", ",", "t", ",", "greedy_action_func", ",", "action_value", "=", "None", ")", ":", "\n", "        ", "assert", "action_value", "is", "not", "None", "\n", "assert", "isinstance", "(", "action_value", ",", "pfrl", ".", "action_value", ".", "DiscreteActionValue", ")", "\n", "n_actions", "=", "action_value", ".", "q_values", ".", "shape", "[", "1", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "probs", "=", "(", "\n", "F", ".", "softmax", "(", "action_value", ".", "q_values", "/", "self", ".", "T", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "ravel", "(", ")", "\n", ")", "\n", "", "return", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "n_actions", ")", ",", "p", "=", "probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.explorers.boltzmann.Boltzmann.__repr__": [[28, 30], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Boltzmann(T={})\"", ".", "format", "(", "self", ".", "T", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.dueling_dqn.DuelingDQN.__init__": [[26, 45], ["super().__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pfrl.nn.mlp.MLP", "pfrl.nn.mlp.MLP", "dueling_dqn.DuelingDQN.conv_layers.apply", "dueling_dqn.DuelingDQN.conv_layers.apply", "dueling_dqn.constant_bias_initializer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.dueling_dqn.constant_bias_initializer"], ["def", "__init__", "(", "self", ",", "n_actions", ",", "n_input_channels", "=", "4", ",", "activation", "=", "F", ".", "relu", ",", "bias", "=", "0.1", ")", ":", "\n", "        ", "self", ".", "n_actions", "=", "n_actions", "\n", "self", ".", "n_input_channels", "=", "n_input_channels", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "nn", ".", "Conv2d", "(", "n_input_channels", ",", "32", ",", "8", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "4", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "a_stream", "=", "MLP", "(", "3136", ",", "n_actions", ",", "[", "512", "]", ")", "\n", "self", ".", "v_stream", "=", "MLP", "(", "3136", ",", "1", ",", "[", "512", "]", ")", "\n", "\n", "self", ".", "conv_layers", ".", "apply", "(", "init_chainer_default", ")", "# MLP already applies", "\n", "self", ".", "conv_layers", ".", "apply", "(", "constant_bias_initializer", "(", "bias", "=", "bias", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.dueling_dqn.DuelingDQN.forward": [[46, 65], ["dueling_dqn.DuelingDQN.reshape", "dueling_dqn.DuelingDQN.a_stream", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "dueling_dqn.DuelingDQN.v_stream", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "pfrl.action_value.DiscreteActionValue", "dueling_dqn.DuelingDQN.activation", "layer", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "x", "\n", "for", "layer", "in", "self", ".", "conv_layers", ":", "\n", "            ", "h", "=", "self", ".", "activation", "(", "layer", "(", "h", ")", ")", "\n", "\n", "# Advantage", "\n", "", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "h", "=", "h", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", "\n", "ya", "=", "self", ".", "a_stream", "(", "h", ")", "\n", "mean", "=", "torch", ".", "reshape", "(", "torch", ".", "sum", "(", "ya", ",", "dim", "=", "1", ")", "/", "self", ".", "n_actions", ",", "(", "batch_size", ",", "1", ")", ")", "\n", "ya", ",", "mean", "=", "torch", ".", "broadcast_tensors", "(", "ya", ",", "mean", ")", "\n", "ya", "-=", "mean", "\n", "\n", "# State value", "\n", "ys", "=", "self", ".", "v_stream", "(", "h", ")", "\n", "\n", "ya", ",", "ys", "=", "torch", ".", "broadcast_tensors", "(", "ya", ",", "ys", ")", "\n", "q", "=", "ya", "+", "ys", "\n", "return", "action_value", ".", "DiscreteActionValue", "(", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.dueling_dqn.DistributionalDuelingDQN.__init__": [[70, 105], ["super().__init__", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "dueling_dqn.DistributionalDuelingDQN.apply", "dueling_dqn.DistributionalDuelingDQN.conv_layers.apply", "dueling_dqn.constant_bias_initializer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.dueling_dqn.constant_bias_initializer"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_actions", ",", "\n", "n_atoms", ",", "\n", "v_min", ",", "\n", "v_max", ",", "\n", "n_input_channels", "=", "4", ",", "\n", "activation", "=", "torch", ".", "relu", ",", "\n", "bias", "=", "0.1", ",", "\n", ")", ":", "\n", "        ", "assert", "n_atoms", ">=", "2", "\n", "assert", "v_min", "<", "v_max", "\n", "\n", "self", ".", "n_actions", "=", "n_actions", "\n", "self", ".", "n_input_channels", "=", "n_input_channels", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "n_atoms", "=", "n_atoms", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_values", "=", "torch", ".", "linspace", "(", "v_min", ",", "v_max", ",", "n_atoms", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "self", ".", "conv_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "nn", ".", "Conv2d", "(", "n_input_channels", ",", "32", ",", "8", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "4", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "main_stream", "=", "nn", ".", "Linear", "(", "3136", ",", "1024", ")", "\n", "self", ".", "a_stream", "=", "nn", ".", "Linear", "(", "512", ",", "n_actions", "*", "n_atoms", ")", "\n", "self", ".", "v_stream", "=", "nn", ".", "Linear", "(", "512", ",", "n_atoms", ")", "\n", "\n", "self", ".", "apply", "(", "init_chainer_default", ")", "\n", "self", ".", "conv_layers", ".", "apply", "(", "constant_bias_initializer", "(", "bias", "=", "bias", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.dueling_dqn.DistributionalDuelingDQN.forward": [[106, 130], ["dueling_dqn.DistributionalDuelingDQN.activation", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "dueling_dqn.DistributionalDuelingDQN.a_stream().reshape", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "dueling_dqn.DistributionalDuelingDQN.v_stream().reshape", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.softmax", "torch.softmax", "torch.softmax", "dueling_dqn.DistributionalDuelingDQN.z_values.to", "pfrl.action_value.DistributionalDiscreteActionValue", "dueling_dqn.DistributionalDuelingDQN.activation", "dueling_dqn.DistributionalDuelingDQN.main_stream", "dueling_dqn.DistributionalDuelingDQN.sum", "layer", "dueling_dqn.DistributionalDuelingDQN.view", "dueling_dqn.DistributionalDuelingDQN.a_stream", "dueling_dqn.DistributionalDuelingDQN.v_stream"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.prioritized.SumTreeQueue.sum"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "x", "\n", "for", "layer", "in", "self", ".", "conv_layers", ":", "\n", "            ", "h", "=", "self", ".", "activation", "(", "layer", "(", "h", ")", ")", "\n", "\n", "# Advantage", "\n", "", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "h", "=", "self", ".", "activation", "(", "self", ".", "main_stream", "(", "h", ".", "view", "(", "batch_size", ",", "-", "1", ")", ")", ")", "\n", "h_a", ",", "h_v", "=", "torch", ".", "chunk", "(", "h", ",", "2", ",", "dim", "=", "1", ")", "\n", "ya", "=", "self", ".", "a_stream", "(", "h_a", ")", ".", "reshape", "(", "(", "batch_size", ",", "self", ".", "n_actions", ",", "self", ".", "n_atoms", ")", ")", "\n", "\n", "mean", "=", "ya", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "self", ".", "n_actions", "\n", "\n", "ya", ",", "mean", "=", "torch", ".", "broadcast_tensors", "(", "ya", ",", "mean", ")", "\n", "ya", "-=", "mean", "\n", "\n", "# State value", "\n", "ys", "=", "self", ".", "v_stream", "(", "h_v", ")", ".", "reshape", "(", "(", "batch_size", ",", "1", ",", "self", ".", "n_atoms", ")", ")", "\n", "ya", ",", "ys", "=", "torch", ".", "broadcast_tensors", "(", "ya", ",", "ys", ")", "\n", "q", "=", "F", ".", "softmax", "(", "ya", "+", "ys", ",", "dim", "=", "2", ")", "\n", "\n", "self", ".", "z_values", "=", "self", ".", "z_values", ".", "to", "(", "x", ".", "device", ")", "\n", "return", "action_value", ".", "DistributionalDiscreteActionValue", "(", "q", ",", "self", ".", "z_values", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.dueling_dqn.constant_bias_initializer": [[11, 18], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "isinstance", "m.bias.fill_"], "function", ["None"], ["def", "constant_bias_initializer", "(", "bias", "=", "0.0", ")", ":", "\n", "    ", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "init_bias", "(", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ")", ")", ":", "\n", "            ", "m", ".", "bias", ".", "fill_", "(", "bias", ")", "\n", "\n", "", "", "return", "init_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_action_q_functions.SingleModelStateActionQFunction.__init__": [[19, 21], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", "=", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_action_q_functions.SingleModelStateActionQFunction.forward": [[22, 25], ["state_action_q_functions.SingleModelStateActionQFunction.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "a", ")", ":", "\n", "        ", "h", "=", "self", ".", "model", "(", "x", ",", "a", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_action_q_functions.FCSAQFunction.__init__": [[42, 61], ["pfrl.nn.mlp.MLP.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_dim_obs", ",", "\n", "n_dim_action", ",", "\n", "n_hidden_channels", ",", "\n", "n_hidden_layers", ",", "\n", "nonlinearity", "=", "F", ".", "relu", ",", "\n", "last_wscale", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "self", ".", "n_input_channels", "=", "n_dim_obs", "+", "n_dim_action", "\n", "self", ".", "n_hidden_layers", "=", "n_hidden_layers", "\n", "self", ".", "n_hidden_channels", "=", "n_hidden_channels", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "in_size", "=", "self", ".", "n_input_channels", ",", "\n", "out_size", "=", "1", ",", "\n", "hidden_sizes", "=", "[", "self", ".", "n_hidden_channels", "]", "*", "self", ".", "n_hidden_layers", ",", "\n", "nonlinearity", "=", "nonlinearity", ",", "\n", "last_wscale", "=", "last_wscale", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_action_q_functions.FCSAQFunction.forward": [[63, 66], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "super().forward"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.forward"], ["", "def", "forward", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "h", "=", "torch", ".", "cat", "(", "(", "state", ",", "action", ")", ",", "dim", "=", "1", ")", "\n", "return", "super", "(", ")", ".", "forward", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_action_q_functions.FCLSTMSAQFunction.__init__": [[83, 116], ["NotImplementedError", "super().__init__", "pfrl.nn.mlp.MLP", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "state_action_q_functions.FCLSTMSAQFunction.lstm.named_parameters", "pfrl.initializers.init_lecun_normal", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "pfrl.initializers.init_lecun_normal", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.lecun_normal.init_lecun_normal", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.lecun_normal.init_lecun_normal"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_dim_obs", ",", "\n", "n_dim_action", ",", "\n", "n_hidden_channels", ",", "\n", "n_hidden_layers", ",", "\n", "nonlinearity", "=", "F", ".", "relu", ",", "\n", "last_wscale", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "self", ".", "n_input_channels", "=", "n_dim_obs", "+", "n_dim_action", "\n", "self", ".", "n_hidden_layers", "=", "n_hidden_layers", "\n", "self", ".", "n_hidden_channels", "=", "n_hidden_channels", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "MLP", "(", "\n", "self", ".", "n_input_channels", ",", "\n", "n_hidden_channels", ",", "\n", "[", "self", ".", "n_hidden_channels", "]", "*", "self", ".", "n_hidden_layers", ",", "\n", "nonlinearity", "=", "nonlinearity", ",", "\n", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "\n", "num_layers", "=", "1", ",", "input_size", "=", "n_hidden_channels", ",", "hidden_size", "=", "n_hidden_channels", "\n", ")", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "n_hidden_channels", ",", "1", ")", "\n", "for", "(", "n", ",", "p", ")", "in", "self", ".", "lstm", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"weight\"", "in", "n", ":", "\n", "                ", "init_lecun_normal", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "zeros_", "(", "p", ")", "\n", "\n", "", "", "init_lecun_normal", "(", "self", ".", "out", ".", "weight", ",", "scale", "=", "last_wscale", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "out", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_action_q_functions.FCLSTMSAQFunction.forward": [[117, 122], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "state_action_q_functions.FCLSTMSAQFunction.nonlinearity", "state_action_q_functions.FCLSTMSAQFunction.lstm", "state_action_q_functions.FCLSTMSAQFunction.out", "state_action_q_functions.FCLSTMSAQFunction.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "a", ")", ":", "\n", "        ", "h", "=", "torch", ".", "cat", "(", "(", "x", ",", "a", ")", ",", "dim", "=", "1", ")", "\n", "h", "=", "self", ".", "nonlinearity", "(", "self", ".", "fc", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "lstm", "(", "h", ")", "\n", "return", "self", ".", "out", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_action_q_functions.FCBNSAQFunction.__init__": [[141, 163], ["pfrl.nn.mlp_bn.MLPBN.__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_dim_obs", ",", "\n", "n_dim_action", ",", "\n", "n_hidden_channels", ",", "\n", "n_hidden_layers", ",", "\n", "normalize_input", "=", "True", ",", "\n", "nonlinearity", "=", "F", ".", "relu", ",", "\n", "last_wscale", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "self", ".", "n_input_channels", "=", "n_dim_obs", "+", "n_dim_action", "\n", "self", ".", "n_hidden_layers", "=", "n_hidden_layers", "\n", "self", ".", "n_hidden_channels", "=", "n_hidden_channels", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "in_size", "=", "self", ".", "n_input_channels", ",", "\n", "out_size", "=", "1", ",", "\n", "hidden_sizes", "=", "[", "self", ".", "n_hidden_channels", "]", "*", "self", ".", "n_hidden_layers", ",", "\n", "normalize_input", "=", "self", ".", "normalize_input", ",", "\n", "nonlinearity", "=", "nonlinearity", ",", "\n", "last_wscale", "=", "last_wscale", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_action_q_functions.FCBNSAQFunction.forward": [[165, 168], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "super().forward"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.forward"], ["", "def", "forward", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "h", "=", "torch", ".", "cat", "(", "(", "state", ",", "action", ")", ",", "dim", "=", "1", ")", "\n", "return", "super", "(", ")", ".", "forward", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_action_q_functions.FCBNLateActionSAQFunction.__init__": [[191, 227], ["super().__init__", "pfrl.nn.mlp_bn.MLPBN", "pfrl.nn.mlp.MLP"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_dim_obs", ",", "\n", "n_dim_action", ",", "\n", "n_hidden_channels", ",", "\n", "n_hidden_layers", ",", "\n", "normalize_input", "=", "True", ",", "\n", "nonlinearity", "=", "F", ".", "relu", ",", "\n", "last_wscale", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "assert", "n_hidden_layers", ">=", "1", "\n", "self", ".", "n_input_channels", "=", "n_dim_obs", "+", "n_dim_action", "\n", "self", ".", "n_hidden_layers", "=", "n_hidden_layers", "\n", "self", ".", "n_hidden_channels", "=", "n_hidden_channels", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# No need to pass nonlinearity to obs_mlp because it has no", "\n", "# hidden layers", "\n", "self", ".", "obs_mlp", "=", "MLPBN", "(", "\n", "in_size", "=", "n_dim_obs", ",", "\n", "out_size", "=", "n_hidden_channels", ",", "\n", "hidden_sizes", "=", "[", "]", ",", "\n", "normalize_input", "=", "normalize_input", ",", "\n", "normalize_output", "=", "True", ",", "\n", ")", "\n", "self", ".", "mlp", "=", "MLP", "(", "\n", "in_size", "=", "n_hidden_channels", "+", "n_dim_action", ",", "\n", "out_size", "=", "1", ",", "\n", "hidden_sizes", "=", "(", "[", "self", ".", "n_hidden_channels", "]", "*", "(", "self", ".", "n_hidden_layers", "-", "1", ")", ")", ",", "\n", "nonlinearity", "=", "nonlinearity", ",", "\n", "last_wscale", "=", "last_wscale", ",", "\n", ")", "\n", "\n", "self", ".", "output", "=", "self", ".", "mlp", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_action_q_functions.FCBNLateActionSAQFunction.forward": [[228, 232], ["state_action_q_functions.FCBNLateActionSAQFunction.nonlinearity", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "state_action_q_functions.FCBNLateActionSAQFunction.mlp", "state_action_q_functions.FCBNLateActionSAQFunction.obs_mlp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "h", "=", "self", ".", "nonlinearity", "(", "self", ".", "obs_mlp", "(", "state", ")", ")", "\n", "h", "=", "torch", ".", "cat", "(", "(", "h", ",", "action", ")", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "mlp", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_action_q_functions.FCLateActionSAQFunction.__init__": [[254, 284], ["super().__init__", "pfrl.nn.mlp.MLP", "pfrl.nn.mlp.MLP"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_dim_obs", ",", "\n", "n_dim_action", ",", "\n", "n_hidden_channels", ",", "\n", "n_hidden_layers", ",", "\n", "nonlinearity", "=", "F", ".", "relu", ",", "\n", "last_wscale", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "assert", "n_hidden_layers", ">=", "1", "\n", "self", ".", "n_input_channels", "=", "n_dim_obs", "+", "n_dim_action", "\n", "self", ".", "n_hidden_layers", "=", "n_hidden_layers", "\n", "self", ".", "n_hidden_channels", "=", "n_hidden_channels", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# No need to pass nonlinearity to obs_mlp because it has no", "\n", "# hidden layers", "\n", "self", ".", "obs_mlp", "=", "MLP", "(", "\n", "in_size", "=", "n_dim_obs", ",", "out_size", "=", "n_hidden_channels", ",", "hidden_sizes", "=", "[", "]", "\n", ")", "\n", "self", ".", "mlp", "=", "MLP", "(", "\n", "in_size", "=", "n_hidden_channels", "+", "n_dim_action", ",", "\n", "out_size", "=", "1", ",", "\n", "hidden_sizes", "=", "(", "[", "self", ".", "n_hidden_channels", "]", "*", "(", "self", ".", "n_hidden_layers", "-", "1", ")", ")", ",", "\n", "nonlinearity", "=", "nonlinearity", ",", "\n", "last_wscale", "=", "last_wscale", ",", "\n", ")", "\n", "\n", "self", ".", "output", "=", "self", ".", "mlp", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_action_q_functions.FCLateActionSAQFunction.forward": [[285, 289], ["state_action_q_functions.FCLateActionSAQFunction.nonlinearity", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "state_action_q_functions.FCLateActionSAQFunction.mlp", "state_action_q_functions.FCLateActionSAQFunction.obs_mlp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "h", "=", "self", ".", "nonlinearity", "(", "self", ".", "obs_mlp", "(", "state", ")", ")", "\n", "h", "=", "torch", ".", "cat", "(", "(", "h", ",", "action", ")", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "mlp", "(", "h", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_q_functions.SingleModelStateQFunctionWithDiscreteAction.__init__": [[34, 37], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_q_functions.SingleModelStateQFunctionWithDiscreteAction.forward": [[38, 41], ["state_q_functions.SingleModelStateQFunctionWithDiscreteAction.model", "pfrl.action_value.DiscreteActionValue"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "model", "(", "x", ")", "\n", "return", "DiscreteActionValue", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_q_functions.FCStateQFunctionWithDiscreteAction.__init__": [[55, 71], ["state_q_functions.SingleModelStateQFunctionWithDiscreteAction.__init__", "pfrl.nn.mlp.MLP"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "ndim_obs", ",", "\n", "n_actions", ",", "\n", "n_hidden_channels", ",", "\n", "n_hidden_layers", ",", "\n", "nonlinearity", "=", "F", ".", "relu", ",", "\n", "last_wscale", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "model", "=", "MLP", "(", "\n", "in_size", "=", "ndim_obs", ",", "\n", "out_size", "=", "n_actions", ",", "\n", "hidden_sizes", "=", "[", "n_hidden_channels", "]", "*", "n_hidden_layers", ",", "\n", "nonlinearity", "=", "nonlinearity", ",", "\n", "last_wscale", "=", "last_wscale", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_q_functions.DistributionalSingleModelStateQFunctionWithDiscreteAction.__init__": [[87, 91], ["super().__init__", "state_q_functions.DistributionalSingleModelStateQFunctionWithDiscreteAction.register_buffer", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "z_values", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "register_buffer", "(", "\"z_values\"", ",", "torch", ".", "from_numpy", "(", "z_values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_q_functions.DistributionalSingleModelStateQFunctionWithDiscreteAction.forward": [[92, 95], ["state_q_functions.DistributionalSingleModelStateQFunctionWithDiscreteAction.model", "pfrl.action_value.DistributionalDiscreteActionValue"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "model", "(", "x", ")", "\n", "return", "DistributionalDiscreteActionValue", "(", "h", ",", "self", ".", "z_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_q_functions.DistributionalFCStateQFunctionWithDiscreteAction.__init__": [[114, 141], ["numpy.linspace", "torch.Sequential", "torch.Sequential", "torch.Sequential", "state_q_functions.DistributionalSingleModelStateQFunctionWithDiscreteAction.__init__", "pfrl.nn.mlp.MLP", "pfrl.nn.Lambda", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "ndim_obs", ",", "\n", "n_actions", ",", "\n", "n_atoms", ",", "\n", "v_min", ",", "\n", "v_max", ",", "\n", "n_hidden_channels", ",", "\n", "n_hidden_layers", ",", "\n", "nonlinearity", "=", "F", ".", "relu", ",", "\n", "last_wscale", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "assert", "n_atoms", ">=", "2", "\n", "assert", "v_min", "<", "v_max", "\n", "z_values", "=", "np", ".", "linspace", "(", "v_min", ",", "v_max", ",", "num", "=", "n_atoms", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "model", "=", "nn", ".", "Sequential", "(", "\n", "MLP", "(", "\n", "in_size", "=", "ndim_obs", ",", "\n", "out_size", "=", "n_actions", "*", "n_atoms", ",", "\n", "hidden_sizes", "=", "[", "n_hidden_channels", "]", "*", "n_hidden_layers", ",", "\n", "nonlinearity", "=", "nonlinearity", ",", "\n", "last_wscale", "=", "last_wscale", ",", "\n", ")", ",", "\n", "Lambda", "(", "lambda", "x", ":", "torch", ".", "reshape", "(", "x", ",", "(", "-", "1", ",", "n_actions", ",", "n_atoms", ")", ")", ")", ",", "\n", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", ",", "\n", ")", "\n", "super", "(", ")", ".", "__init__", "(", "model", "=", "model", ",", "z_values", "=", "z_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_q_functions.FCQuadraticStateQFunction.__init__": [[157, 192], ["super().__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList.append", "range", "pfrl.initializers.init_chainer_default", "pfrl.initializers.init_chainer_default", "pfrl.initializers.init_chainer_default", "pfrl.initializers.init_chainer_default", "torch.ModuleList.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "pfrl.initializers.init_chainer_default", "torch.Linear", "torch.Linear", "torch.Linear", "pfrl.initializers.init_chainer_default", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.chainer_default.init_chainer_default", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.chainer_default.init_chainer_default", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.chainer_default.init_chainer_default", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.chainer_default.init_chainer_default", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.collections.persistent_collections.PersistentRandomAccessQueue.append", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.chainer_default.init_chainer_default", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.initializers.chainer_default.init_chainer_default"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_input_channels", ",", "\n", "n_dim_action", ",", "\n", "n_hidden_channels", ",", "\n", "n_hidden_layers", ",", "\n", "action_space", ",", "\n", "scale_mu", "=", "True", ",", "\n", ")", ":", "\n", "        ", "self", ".", "n_input_channels", "=", "n_input_channels", "\n", "self", ".", "n_hidden_layers", "=", "n_hidden_layers", "\n", "self", ".", "n_hidden_channels", "=", "n_hidden_channels", "\n", "self", ".", "n_dim_action", "=", "n_dim_action", "\n", "assert", "action_space", "is", "not", "None", "\n", "self", ".", "scale_mu", "=", "scale_mu", "\n", "self", ".", "action_space", "=", "action_space", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "hidden_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "assert", "n_hidden_layers", ">=", "1", "\n", "hidden_layers", ".", "append", "(", "\n", "init_chainer_default", "(", "nn", ".", "Linear", "(", "n_input_channels", ",", "n_hidden_channels", ")", ")", "\n", ")", "\n", "for", "_", "in", "range", "(", "n_hidden_layers", "-", "1", ")", ":", "\n", "            ", "hidden_layers", ".", "append", "(", "\n", "init_chainer_default", "(", "nn", ".", "Linear", "(", "n_hidden_channels", ",", "n_hidden_channels", ")", ")", "\n", ")", "\n", "", "self", ".", "hidden_layers", "=", "hidden_layers", "\n", "\n", "self", ".", "v", "=", "init_chainer_default", "(", "nn", ".", "Linear", "(", "n_hidden_channels", ",", "1", ")", ")", "\n", "self", ".", "mu", "=", "init_chainer_default", "(", "nn", ".", "Linear", "(", "n_hidden_channels", ",", "n_dim_action", ")", ")", "\n", "self", ".", "mat_diag", "=", "init_chainer_default", "(", "nn", ".", "Linear", "(", "n_hidden_channels", ",", "n_dim_action", ")", ")", "\n", "non_diag_size", "=", "n_dim_action", "*", "(", "n_dim_action", "-", "1", ")", "//", "2", "\n", "if", "non_diag_size", ">", "0", ":", "\n", "            ", "self", ".", "mat_non_diag", "=", "init_chainer_default", "(", "\n", "nn", ".", "Linear", "(", "n_hidden_channels", ",", "non_diag_size", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_q_functions.FCQuadraticStateQFunction.forward": [[194, 219], ["state_q_functions.FCQuadraticStateQFunction.v", "state_q_functions.FCQuadraticStateQFunction.mu", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "hasattr", "pfrl.action_value.QuadraticActionValue", "torch.relu", "torch.relu", "torch.relu", "state_q_functions.scale_by_tanh", "state_q_functions.FCQuadraticStateQFunction.mat_diag", "state_q_functions.FCQuadraticStateQFunction.mat_non_diag", "pfrl.functions.lower_triangular_matrix.lower_triangular_matrix", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "layer", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_q_functions.scale_by_tanh", "home.repos.pwc.inspect_result.jacklinkk_torchgrl.functions.lower_triangular_matrix.lower_triangular_matrix"], ["", "", "def", "forward", "(", "self", ",", "state", ")", ":", "\n", "        ", "h", "=", "state", "\n", "for", "layer", "in", "self", ".", "hidden_layers", ":", "\n", "            ", "h", "=", "F", ".", "relu", "(", "layer", "(", "h", ")", ")", "\n", "", "v", "=", "self", ".", "v", "(", "h", ")", "\n", "mu", "=", "self", ".", "mu", "(", "h", ")", "\n", "\n", "if", "self", ".", "scale_mu", ":", "\n", "            ", "mu", "=", "scale_by_tanh", "(", "\n", "mu", ",", "high", "=", "self", ".", "action_space", ".", "high", ",", "low", "=", "self", ".", "action_space", ".", "low", "\n", ")", "\n", "\n", "", "mat_diag", "=", "torch", ".", "exp", "(", "self", ".", "mat_diag", "(", "h", ")", ")", "\n", "if", "hasattr", "(", "self", ",", "\"mat_non_diag\"", ")", ":", "\n", "            ", "mat_non_diag", "=", "self", ".", "mat_non_diag", "(", "h", ")", "\n", "tril", "=", "lower_triangular_matrix", "(", "mat_diag", ",", "mat_non_diag", ")", "\n", "mat", "=", "torch", ".", "matmul", "(", "tril", ",", "torch", ".", "transpose", "(", "tril", ",", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "mat", "=", "torch", ".", "unsqueeze", "(", "mat_diag", "**", "2", ",", "dim", "=", "2", ")", "\n", "", "return", "QuadraticActionValue", "(", "\n", "mu", ",", "\n", "mat", ",", "\n", "v", ",", "\n", "min_action", "=", "self", ".", "action_space", ".", "low", ",", "\n", "max_action", "=", "self", ".", "action_space", ".", "high", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_q_functions.DiscreteActionValueHead.forward": [[223, 225], ["pfrl.action_value.DiscreteActionValue"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "q_values", ")", ":", "\n", "        ", "return", "DiscreteActionValue", "(", "q_values", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.q_functions.state_q_functions.scale_by_tanh": [[18, 24], ["torch.unsqueeze().to", "torch.unsqueeze().to", "torch.unsqueeze().to", "torch.unsqueeze().to", "torch.unsqueeze().to", "torch.unsqueeze().to", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.tanh", "torch.tanh", "torch.tanh", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["def", "scale_by_tanh", "(", "x", ",", "low", ",", "high", ")", ":", "\n", "    ", "scale", "=", "(", "high", "-", "low", ")", "/", "2", "\n", "scale", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "from_numpy", "(", "scale", ")", ",", "dim", "=", "0", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "mean", "=", "(", "high", "+", "low", ")", "/", "2", "\n", "mean", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "from_numpy", "(", "mean", ")", ",", "dim", "=", "0", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "return", "torch", ".", "tanh", "(", "x", ")", "*", "scale", "+", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL.torch_GRL.__init__": [[14, 32], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch_geometric.nn.GCNConv", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["    ", "def", "__init__", "(", "self", ",", "N", ",", "F", ",", "obs_space", ",", "action_space", ",", "A", ")", ":", "\n", "        ", "super", "(", "torch_GRL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "obs_space", "=", "obs_space", "\n", "self", ".", "action_space", "=", "action_space", "\n", "self", ".", "num_outputs", "=", "A", "\n", "\n", "# encoder", "\n", "self", ".", "encoder_1", "=", "nn", ".", "Linear", "(", "F", ",", "32", ")", "\n", "self", ".", "encoder_2", "=", "nn", ".", "Linear", "(", "32", ",", "32", ")", "\n", "\n", "# GCN", "\n", "self", ".", "GraphConv", "=", "GCNConv", "(", "32", ",", "32", ")", "\n", "self", ".", "GraphConv_Dense", "=", "nn", ".", "Linear", "(", "32", ",", "32", ")", "\n", "\n", "# policy network", "\n", "self", ".", "policy_1", "=", "nn", ".", "Linear", "(", "64", ",", "32", ")", "\n", "self", ".", "policy_2", "=", "nn", ".", "Linear", "(", "32", ",", "32", ")", "\n", "self", ".", "policy_output", "=", "nn", ".", "Linear", "(", "32", ",", "A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL.torch_GRL.forward": [[33, 69], ["Pytorch_GRL.torch_GRL.encoder_1", "torch.relu", "torch.relu", "torch.relu", "Pytorch_GRL.torch_GRL.encoder_2", "torch.relu", "torch.relu", "torch.relu", "torch_geometric.utils.dense_to_sparse", "Pytorch_GRL.torch_GRL.GraphConv", "torch.relu", "torch.relu", "torch.relu", "Pytorch_GRL.torch_GRL.GraphConv_Dense", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Pytorch_GRL.torch_GRL.policy_1", "torch.relu", "torch.relu", "torch.relu", "Pytorch_GRL.torch_GRL.policy_2", "torch.relu", "torch.relu", "torch.relu", "Pytorch_GRL.torch_GRL.policy_output", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "pfrl.action_value.DiscreteActionValue"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X_in", ",", "A_in_Dense", ",", "RL_indice", ")", ":", "\n", "# X_in represents node feature matrix", "\n", "# A_in_Dense represents dense adjacency matrix", "\n", "# A_in_Sparse represents sparse adjacency matrix", "\n", "# RL_indice represents mask matrix", "\n", "\n", "# X_in in encoder", "\n", "        ", "X", "=", "self", ".", "encoder_1", "(", "X_in", ")", "\n", "X", "=", "F", ".", "relu", "(", "X", ")", "\n", "X", "=", "self", ".", "encoder_2", "(", "X", ")", "\n", "X", "=", "F", ".", "relu", "(", "X", ")", "\n", "\n", "# graph convolution operation", "\n", "A_in_Sparse", ",", "_", "=", "dense_to_sparse", "(", "A_in_Dense", ")", "\n", "X_graph", "=", "self", ".", "GraphConv", "(", "X", ",", "A_in_Sparse", ")", "\n", "X_graph", "=", "F", ".", "relu", "(", "X_graph", ")", "\n", "X_graph", "=", "self", ".", "GraphConv_Dense", "(", "X_graph", ")", "\n", "X_graph", "=", "F", ".", "relu", "(", "X_graph", ")", "\n", "\n", "# Features are aggregated by column", "\n", "F_concat", "=", "torch", ".", "cat", "(", "(", "X_graph", ",", "X", ")", ",", "1", ")", "\n", "\n", "# calculate policy", "\n", "X_policy", "=", "self", ".", "policy_1", "(", "F_concat", ")", "\n", "X_policy", "=", "F", ".", "relu", "(", "X_policy", ")", "\n", "X_policy", "=", "self", ".", "policy_2", "(", "X_policy", ")", "\n", "X_policy", "=", "F", ".", "relu", "(", "X_policy", ")", "\n", "X_policy", "=", "self", ".", "policy_output", "(", "X_policy", ")", "\n", "\n", "# reshape RL_indice", "\n", "mask", "=", "torch", ".", "reshape", "(", "RL_indice", ",", "(", "40", ",", "1", ")", ")", "\n", "\n", "# calculate final output", "\n", "output", "=", "torch", ".", "mul", "(", "X_policy", ",", "mask", ")", "\n", "\n", "return", "pfrl", ".", "action_value", ".", "DiscreteActionValue", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__": [[14, 36], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch_geometric.nn.GCNConv", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.__init__"], ["    ", "def", "__init__", "(", "self", ",", "N", ",", "F", ",", "obs_space", ",", "action_space", ",", "A", ")", ":", "\n", "        ", "super", "(", "torch_GRL_Deuling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "obs_space", "=", "obs_space", "\n", "self", ".", "action_space", "=", "action_space", "\n", "self", ".", "num_outputs", "=", "A", "\n", "\n", "# encoder", "\n", "self", ".", "encoder_1", "=", "nn", ".", "Linear", "(", "F", ",", "32", ")", "\n", "self", ".", "encoder_2", "=", "nn", ".", "Linear", "(", "32", ",", "32", ")", "\n", "\n", "# GCN", "\n", "# self.GraphConv = GraphConv(40, 32)", "\n", "self", ".", "GraphConv", "=", "GCNConv", "(", "32", ",", "32", ")", "\n", "self", ".", "GraphConv_Dense", "=", "nn", ".", "Linear", "(", "32", ",", "32", ")", "\n", "\n", "# policy network", "\n", "self", ".", "policy_1", "=", "nn", ".", "Linear", "(", "64", ",", "32", ")", "\n", "self", ".", "policy_2", "=", "nn", ".", "Linear", "(", "32", ",", "32", ")", "\n", "\n", "# Dueling network", "\n", "self", ".", "policy_value", "=", "nn", ".", "Linear", "(", "32", ",", "1", ")", "# value function", "\n", "self", ".", "policy_advantage", "=", "nn", ".", "Linear", "(", "32", ",", "A", ")", "# advantage function", "\n", "\n"]], "home.repos.pwc.inspect_result.jacklinkk_torchgrl.GRLNet.Pytorch_GRL_Dueling.torch_GRL_Deuling.forward": [[37, 77], ["Pytorch_GRL_Dueling.torch_GRL_Deuling.encoder_1", "torch.relu", "torch.relu", "torch.relu", "Pytorch_GRL_Dueling.torch_GRL_Deuling.encoder_2", "torch.relu", "torch.relu", "torch.relu", "torch_geometric.utils.dense_to_sparse", "Pytorch_GRL_Dueling.torch_GRL_Deuling.GraphConv", "torch.relu", "torch.relu", "torch.relu", "Pytorch_GRL_Dueling.torch_GRL_Deuling.GraphConv_Dense", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Pytorch_GRL_Dueling.torch_GRL_Deuling.policy_1", "torch.relu", "torch.relu", "torch.relu", "Pytorch_GRL_Dueling.torch_GRL_Deuling.policy_2", "torch.relu", "torch.relu", "torch.relu", "Pytorch_GRL_Dueling.torch_GRL_Deuling.policy_value", "Pytorch_GRL_Dueling.torch_GRL_Deuling.policy_advantage", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "pfrl.action_value.DiscreteActionValue", "Pytorch_GRL_Dueling.torch_GRL_Deuling.mean"], "methods", ["home.repos.pwc.inspect_result.jacklinkk_torchgrl.distributions.delta.Delta.mean"], ["", "def", "forward", "(", "self", ",", "X_in", ",", "A_in_Dense", ",", "RL_indice", ")", ":", "\n", "# X_in represents node feature matrix", "\n", "# A_in_Dense represents dense adjacency matrix", "\n", "# A_in_Sparse represents sparse adjacency matrix", "\n", "# RL_indice represents mask matrix", "\n", "\n", "# X_in in encoder", "\n", "        ", "X", "=", "self", ".", "encoder_1", "(", "X_in", ")", "\n", "X", "=", "F", ".", "relu", "(", "X", ")", "\n", "X", "=", "self", ".", "encoder_2", "(", "X", ")", "\n", "X", "=", "F", ".", "relu", "(", "X", ")", "\n", "\n", "# graph convolution operation", "\n", "A_in_Sparse", ",", "_", "=", "dense_to_sparse", "(", "A_in_Dense", ")", "\n", "X_graph", "=", "self", ".", "GraphConv", "(", "X", ",", "A_in_Sparse", ")", "\n", "X_graph", "=", "F", ".", "relu", "(", "X_graph", ")", "\n", "X_graph", "=", "self", ".", "GraphConv_Dense", "(", "X_graph", ")", "\n", "X_graph", "=", "F", ".", "relu", "(", "X_graph", ")", "\n", "\n", "# Features are aggregated by column", "\n", "F_concat", "=", "torch", ".", "cat", "(", "(", "X_graph", ",", "X", ")", ",", "1", ")", "\n", "\n", "# calculate policy", "\n", "X_policy", "=", "self", ".", "policy_1", "(", "F_concat", ")", "\n", "X_policy", "=", "F", ".", "relu", "(", "X_policy", ")", "\n", "X_policy", "=", "self", ".", "policy_2", "(", "X_policy", ")", "\n", "X_policy", "=", "F", ".", "relu", "(", "X_policy", ")", "\n", "\n", "# Dueling operation", "\n", "Value", "=", "self", ".", "policy_value", "(", "X_policy", ")", "\n", "Advantage", "=", "self", ".", "policy_advantage", "(", "X_policy", ")", "\n", "Q", "=", "Value", "+", "Advantage", "-", "Advantage", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# reshape RL_indice", "\n", "mask", "=", "torch", ".", "reshape", "(", "RL_indice", ",", "(", "40", ",", "1", ")", ")", "\n", "\n", "# calculate final output", "\n", "Q_state", "=", "torch", ".", "mul", "(", "Q", ",", "mask", ")", "\n", "\n", "return", "pfrl", ".", "action_value", ".", "DiscreteActionValue", "(", "Q_state", ")", "\n", "", "", ""]]}